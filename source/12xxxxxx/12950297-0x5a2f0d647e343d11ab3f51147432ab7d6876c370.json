{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"/Users/jacob/Developer/DeFiWorkspace/punk.protocol/contracts/Forge.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity >=0.5.0 <0.9.0;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/proxy/utils/Initializable.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\nimport \\\"./interfaces/ForgeInterface.sol\\\";\\nimport \\\"./interfaces/ModelInterface.sol\\\";\\nimport \\\"./interfaces/PunkRewardPoolInterface.sol\\\";\\nimport \\\"./interfaces/ReferralInterface.sol\\\";\\nimport \\\"./Ownable.sol\\\";\\nimport \\\"./ForgeStorage.sol\\\";\\nimport \\\"./libs/Score.sol\\\";\\nimport \\\"./Referral.sol\\\";\\n\\ncontract Forge is ForgeInterface, ForgeStorage, Ownable, Initializable, ERC20{\\n    using SafeMath for uint;\\n    using SafeERC20 for IERC20;\\n\\n    uint constant SECONDS_DAY = 86400;\\n\\n    constructor() ERC20(\\\"PunkFinance\\\",\\\"Forge\\\"){}\\n    \\n    /**\\n    * Initializing Forge's Variables, If already initialized, it will be reverted.\\n    * \\n    * @param storage_ deployed OnwableStroage's address \\n    * @param variables_ deployed Variables's address \\n    * @param name_ Forge's name\\n    * @param symbol_ Forge's symbol\\n    * @param model_ Address of the Model associated\\n    * @param token_ ERC20 Token's address\\n    * @param decimals_ ERC20 (tokens_)'s decimals\\n    */\\n    function initializeForge( \\n            address storage_, \\n            address variables_,\\n            string memory name_,\\n            string memory symbol_,\\n            address model_, \\n            address token_,\\n            uint8 decimals_\\n        ) public initializer {\\n\\n        Ownable.initialize( storage_ );\\n        _variables      = Variables( variables_ );\\n\\n        __name          = name_;\\n        __symbol        = symbol_;\\n\\n        _model          = model_;\\n        _token          = token_;\\n        _tokenUnit      = 10**decimals_;\\n        __decimals      = decimals_;\\n\\n        _count          = 0;\\n        _totalScore     = 0;\\n    }\\n    \\n    /**\\n    * Replace the model. If model_ isn't CA(ContractAddress), it will be reverted.\\n    * \\n    * @param model_ Address of the associated Model\\n    */\\n    function setModel( address model_ ) public OnlyAdminOrGovernance returns( bool ){\\n        require( Address.isContract( model_), \\\"FORGE : Model address must be the contract address.\\\");\\n        \\n        ModelInterface( _model ).withdrawAllToForge();\\n        IERC20( _token ).safeTransfer( model_, IERC20( _token ).balanceOf( address( this ) ) );\\n        ModelInterface( model_ ).invest();\\n        \\n        emit SetModel(_model, model_);\\n        _model = model_;\\n        return true;\\n    }\\n\\n    /**\\n    * Return the withdrawable amount.\\n    * \\n    * @param account Saver's owner address\\n    * @param index Saver's index\\n    * \\n    * @return the withdrawable amount.\\n    */\\n    function withdrawable( address account, uint index ) public view override returns( uint ){\\n        Saver memory s = saver( account, index );\\n        if( s.startTimestamp > block.timestamp ) return 0;\\n        if( s.status == 2 ) return 0;\\n\\n        uint diff = block.timestamp.sub( s.startTimestamp );\\n        uint count = diff.div( SECONDS_DAY.mul( s.interval ) ).add( 1 );\\n        count = count < s.count ? count : s.count;\\n\\n        return s.mint.mul( count ).div( s.count ).sub( s.released );\\n    }\\n\\n    /**\\n    * Return the number of savers created with the account.\\n    * \\n    * @param account : Saver's owner account\\n    *\\n    * @return the number of savers created with the account.\\n    */\\n    function countByAccount( address account ) public view override returns ( uint ){ \\n        return _savers[account].length; \\n    }\\n    \\n    /**\\n    * Create Saver with ERC20 Token and set the required parameters\\n    *\\n    * This function only stores newly created Savers. The actual investment is operated on AddDeposit.\\n    * \\n    * @param amount ERC20 Amount\\n    * @param startTimestamp When do you want to start receiving (unixTime:seconds)\\n    * @param count How often do you want to receive.\\n    * @param interval Number of times to receive (unit: 1 day)\\n    */\\n    function craftingSaver( uint amount, uint startTimestamp, uint count, uint interval ) public override returns( bool ){\\n        craftingSaver(amount, startTimestamp, count, interval, 0);\\n        return true;\\n    }\\n\\n    /**\\n    * Create Saver with ERC20 Token and set the required parameters\\n    *\\n    * This function only stores newly created Savers. The actual investment is operated on AddDeposit.\\n    * \\n    * @param amount ERC20 Amount\\n    * @param startTimestamp When do you want to start receiving (unixTime:seconds)\\n    * @param count How often do you want to receive.\\n    * @param interval Number of times to receive (unit: 1 day)\\n    * @param referral Referral code issued from \\\"Referral\\\" Contract\\n    */\\n    function craftingSaver( uint amount, uint startTimestamp, uint count, uint interval, bytes12 referral ) public override returns( bool ){\\n        require( amount > 0 && count > 0 && interval > 0 && startTimestamp > block.timestamp.add( 24 * 60 * 60 ), \\\"FORGE : Invalid Parameters\\\");\\n        uint index = countByAccount( msg.sender );\\n\\n        _savers[ msg.sender ].push( Saver( block.timestamp, startTimestamp, count, interval, 0, 0, 0, 0, 0, 0, block.timestamp, referral ) );\\n        _transactions[ msg.sender ][ index ].push( Transaction( true, block.timestamp, 0 ) );\\n        _count++;\\n        \\n        emit CraftingSaver( msg.sender, index, amount );\\n        addDeposit(index, amount);\\n        return true;\\n    }\\n    \\n    /**\\n    * Add deposit to Saver\\n    * \\n    * It functions to operate the actual investment.\\n    * It stores the amount deposited on Saver, the new score, the amount, and the timestamp added on _transactions[msg.sender]. \\n    * Within 24 hours, it will be combined to the list of the latest _transactions[msg.sender].\\n    * \\n    * @param index Saver's index\\n    * @param amount ERC20 Amount\\n    */\\n    function addDeposit( uint index, uint amount ) public override returns( bool ){\\n        require( saver( msg.sender, index ).startTimestamp > block.timestamp, \\\"FORGE : Unable to deposit\\\" );\\n        require( saver( msg.sender, index ).status < 2, \\\"FORGE : Terminated Saver\\\" );\\n\\n        uint mint = 0;\\n        uint i = index;\\n\\n        {\\n            // Avoid Stack Too Deep issue\\n            i = i + 0;\\n            mint = amount.mul( getExchangeRate( ) ).div( _tokenUnit );\\n            _mint( msg.sender, mint );\\n            if( _variables.reward() != address(0) ) {\\n                approve( _variables.reward(), mint);\\n                PunkRewardPoolInterface( _variables.reward() ).staking( address(this), mint, msg.sender );\\n            }\\n        }\\n\\n        {            \\n            IERC20( _token ).safeTransferFrom( msg.sender, _model, amount );\\n            ModelInterface( _model ).invest();\\n            emit AddDeposit( msg.sender, index, amount );\\n        }\\n\\n        {\\n            // Avoid Stack Too Deep issue\\n            i = i + 0;\\n            uint lastIndex = transactions(msg.sender, i ).length.sub( 1 );\\n            if( block.timestamp.sub( transactions(msg.sender, i )[ lastIndex ].timestamp ) < SECONDS_DAY ){\\n                _transactions[msg.sender][ index ][ lastIndex ].amount += amount;\\n            }else{\\n                _transactions[msg.sender][ index ].push( Transaction( true, block.timestamp, amount ) );\\n            }\\n            _savers[msg.sender][i].mint += mint;\\n            _savers[msg.sender][i].accAmount += amount;\\n            _savers[msg.sender][i].updatedTimestamp = block.timestamp;\\n            _updateScore( msg.sender, i );\\n        }\\n\\n        return true;\\n    }\\n    \\n    /**\\n    * Withdraw \\n    * \\n    * Enter the amount of pLP token ( Do not enter ERC20 Token's Amount )\\n    * Withdraw excluding service fee. if saver has referral code, then discount service fee.\\n    *\\n    * @param index Saver's index\\n    * @param amountPlp Forge's LP Token Amount\\n    */\\n    function withdraw( uint index, uint amountPlp ) public override returns( bool ){\\n        Saver memory s = saver( msg.sender, index );\\n        uint withdrawablePlp = withdrawable( msg.sender, index );\\n        require( s.status < 2 , \\\"FORGE : Terminated Saver\\\");\\n        require( withdrawablePlp >= amountPlp, \\\"FORGE : Insufficient Amount\\\" );\\n\\n        uint i = index;\\n        /* for Underlying ERC20 token */\\n        {\\n            i = i + 0;\\n            ( uint amountOfWithdraw, uint amountOfServiceFee, uint amountOfBuyback , uint amountOfReferral, address ref ) = _withdrawValues(msg.sender, i, amountPlp);\\n            _withdrawTo(amountOfWithdraw, msg.sender);\\n            _withdrawTo(amountOfServiceFee, _variables.opTreasury() );\\n            _withdrawTo(amountOfBuyback, _variables.treasury());\\n            /* If referral code is valid, referral code providers will be rewarded. */\\n            if( amountOfReferral > 0 && ref != address(0)){\\n                _withdrawTo( amountOfReferral, ref );\\n            }\\n            \\n            _savers[msg.sender][i].status = 1;\\n            _savers[msg.sender][i].released += amountPlp;\\n            _savers[msg.sender][i].relAmount += amountOfWithdraw;\\n            _savers[msg.sender][i].updatedTimestamp = block.timestamp;\\n            if( _savers[msg.sender][i].mint == _savers[msg.sender][i].released ){\\n                _savers[msg.sender][i].status = 3;\\n                _totalScore = _totalScore.sub( s.score );\\n            }\\n            emit Terminate( msg.sender, index, amountOfWithdraw );\\n        }\\n\\n        {\\n            // For LP Tokens\\n            i = i+0;\\n            uint amount = amountPlp;\\n            uint bonus = balanceOf(address(this)).mul( amountPlp ).mul( s.score ).div( _totalScore ).div( s.mint );\\n            if( _variables.reward() != address(0) ) PunkRewardPoolInterface( _variables.reward() ).unstaking(address(this), amount, msg.sender );\\n            _burn( msg.sender, amount );\\n            _burn( address( this ), bonus );\\n        }\\n        return true;\\n    }\\n    \\n    /**\\n    * Terminate Saver \\n    * \\n    * Forcibly terminate Saver and return the deposit. However, early termination fee and service fee are charged.\\n    *\\n    * @param index Saver's index\\n    */\\n    function terminateSaver( uint index ) public override returns( bool ){\\n        require( saver( msg.sender, index ).status < 2, \\\"FORGE : Already Terminated\\\" );\\n        Saver memory s = saver( msg.sender, index );\\n\\n        uint i = index;\\n\\n        /* for Underlying ERC20 token */\\n        {   \\n            i = i + 0;\\n            (uint amountOfWithdraw, uint amountOfServiceFee, uint amountOfReferral, address ref ) = _terminateValues( msg.sender, i );\\n            uint remain = s.mint.sub(s.released).mul( _tokenUnit ).div( getExchangeRate() );\\n            require( remain >= amountOfWithdraw, \\\"FORGE : Insufficient Terminate Fee\\\" );\\n            /* the actual amount to be withdrawn. */ \\n            _withdrawTo( amountOfWithdraw, msg.sender );\\n            /* service fee is charged. */\\n            _withdrawTo( amountOfServiceFee, _variables.opTreasury() );\\n\\n            /* If referral code is valid, referral code providers will be rewarded. */\\n            if( amountOfReferral > 0 && ref != address(0)){\\n                _withdrawTo( amountOfReferral, ref );\\n            }\\n\\n            _totalScore = _totalScore.sub( s.score );\\n            _savers[msg.sender][i].status = 2;\\n            _savers[msg.sender][i].updatedTimestamp = block.timestamp;   \\n            emit Terminate( msg.sender, index, amountOfWithdraw );\\n        }\\n\\n        /* for pLP token */\\n        {\\n            i = i + 0;\\n            uint lp = s.mint.sub(s.released);\\n            uint bonus = s.mint.mul( _variables.earlyTerminateFee( address(this) ) ).div( 100 );\\n            if( _variables.reward() != address(0) ) PunkRewardPoolInterface( _variables.reward() ).unstaking(address(this), lp, msg.sender );\\n\\n            /* If the amount is already withdrawn and the remaining amount is less than the fee, it will be reverted. */\\n            _burn( msg.sender, lp );\\n            _mint( address( this ), bonus );\\n            emit Bonus( msg.sender, index, bonus );\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n    * Return the exchange rate of ERC20 Token to pLP token, utilizing the balance of the total ERC20 Token invested into the model and the total supply of pLP token.\\n    *\\n    * @return the exchange rate of ERC20 Token to pLP token\\n    */\\n    function getExchangeRate() public view override returns( uint ){\\n        return totalSupply() == 0 ?_tokenUnit : _tokenUnit.mul( totalSupply() ).div( ModelInterface(_model ).underlyingBalanceWithInvestment() );\\n    }\\n\\n    /**\\n    * Return the bonus(ERC20) amount\\n    * \\n    * Bonus is sum of EarlyTerminationFee \\n    * \\n    * @return total bonus amount\\n    */\\n    function getBonus() public view override returns( uint ){\\n        return balanceOf( address( this ) ).mul( _tokenUnit ).div( getExchangeRate( ) );\\n    }\\n\\n    /**\\n    * Return the invested amount(ERC20)\\n    * \\n    * @return total invested amount\\n    */\\n    function getTotalVolume() public view override returns( uint ){\\n        return ModelInterface(_model ).underlyingBalanceWithInvestment();\\n    }\\n  \\n    /**\\n    * Return the associated model address.\\n    * \\n    * @return model address.\\n    */\\n    function modelAddress() public view override returns ( address ){ return _model; }\\n\\n    /**\\n    * Return the number of all created savers, including terminated Saver\\n    * \\n    * @return the number of all created savers\\n    */\\n    function countAll() public view override returns( uint ){ return _count; }\\n    \\n    /**\\n    * Return the Saver's all properties\\n    * \\n    * @param account Saver's index\\n    * @param index Forge's pLP Token Amount\\n    *\\n    * @return model address.\\n    */\\n    function saver( address account, uint index ) public view override returns( Saver memory ){ return _savers[account][index]; }\\n\\n    /**\\n    * Return deposit & withdrawn histories\\n    *\\n    * @param account Saver's index\\n    * @param index Forge's pLP Token Amount\\n    * \\n    * @return deposit & withdrawn histories\\n    */\\n    function transactions( address account, uint index ) public view override returns ( Transaction [] memory ){ return _transactions[account][index]; }\\n\\n\\n    /**\\n    * Change the address of Variables.\\n    *\\n    * this function checks the admin address through OwnableStorage\\n    *\\n    * @param variables_ Vaiables's address\\n    */\\n    function setVariable( address variables_ ) public OnlyAdmin{\\n        _variables = Variables( variables_ );\\n    }\\n\\n    /**\\n    * Call a function withdrawTo from Model contract\\n    *\\n    * @param amount amount of withdraw\\n    * @param account subject to be withdrawn to\\n    */\\n    function _withdrawTo( uint amount, address account ) private {\\n        ModelInterface( modelAddress() ).withdrawTo( amount, account );\\n    }\\n\\n    /**\\n    * Update Saver's score\\n    *\\n    * @param account Saver's owner account\\n    * @param index Saver's index\\n    */\\n    function _updateScore( address account, uint index ) internal {\\n        Saver memory s = saver(account, index);\\n        uint oldScore = s.score;\\n        uint newScore = Score.calculate(\\n            s.createTimestamp, \\n            s.startTimestamp, \\n            _transactions[account][index],\\n            s.count,\\n            s.interval, \\n            1\\n        );\\n        _savers[account][index].score = newScore;\\n        _totalScore = _totalScore.add( newScore ).sub( oldScore );\\n    }\\n\\n    /**\\n    * Return the calculated variables needed to termiate.\\n    *\\n    * @param account Saver's owner account\\n    * @param index Saver's index\\n    *\\n    * @return amountOfWithdraw\\n    * @return amountOfServiceFee\\n    * @return amountOfReferral\\n    * @return compensation : subject to be rewarded\\n    */\\n    function _terminateValues( address account, uint index ) public view returns( uint amountOfWithdraw, uint amountOfServiceFee, uint amountOfReferral, address compensation ){\\n        Saver memory s = saver( account, index );\\n        uint tf = _variables.earlyTerminateFee(address(this));\\n        uint sf = _variables.serviceFee();\\n        uint dc = _variables.discount();\\n        uint cm = _variables.compensation();\\n\\n        compensation = Referral(_variables.referral()).validate( s.ref );\\n        uint amount = s.mint.mul( _tokenUnit ).div( getExchangeRate() );\\n\\n        if( compensation == address(0) ){\\n            uint amountOfTermiateFee = amount.mul( tf ).div( 100 );\\n            amountOfServiceFee = amount.mul( sf ).div( 100 );\\n            amountOfWithdraw = amount.sub( amountOfServiceFee ).sub( amountOfTermiateFee );\\n            amountOfReferral = 0;\\n        }else{\\n            uint amountOfTermiateFee = amount.mul( tf ).div( 100 );\\n            amountOfServiceFee = amount.mul( sf ).div( 100 );\\n\\n            uint amountOfDc = amountOfServiceFee.mul( dc ).div( 100 );\\n            amountOfReferral = amountOfServiceFee.mul( cm ).div( 100 );\\n            amountOfServiceFee = amountOfServiceFee.sub( amountOfDc ).sub( amountOfReferral );\\n            amountOfWithdraw = amount.sub( amountOfServiceFee ).sub( amountOfTermiateFee );\\n        }\\n    }\\n\\n    /**\\n    * Return the calculated variables needed to withdraw.\\n    *\\n    * @param account Saver's owner account\\n    * @param index Saver's index\\n    *\\n    * @return amountOfWithdraw\\n    * @return amountOfServiceFee\\n    * @return amountOfBuyback\\n    * @return amountOfReferral\\n    * @return compensation : subject to be rewarded\\n    */\\n    function _withdrawValues( address account, uint index, uint hope ) public view returns( uint amountOfWithdraw, uint amountOfServiceFee, uint amountOfBuyback ,uint amountOfReferral, address compensation ){\\n        Saver memory s = saver( account, index );\\n        \\n        uint sf = _variables.serviceFee();\\n        uint dc = _variables.discount();\\n        uint cm = _variables.compensation();\\n\\n        compensation = Referral(_variables.referral()).validate( s.ref );\\n        amountOfBuyback = _calculateBuyback( account, index, hope );\\n\\n        uint amount = hope.mul( _tokenUnit ).div( getExchangeRate() );\\n        uint bonus = getBonus().mul( s.score ).div( _totalScore );\\n        \\n        if( compensation == address(0) ){\\n            bonus = bonus.mul( hope ).div( s.mint );\\n            amount = amount.add(bonus);\\n            amountOfServiceFee = amount.mul( sf ).div( 100 );\\n            amountOfWithdraw = amount.sub(amountOfServiceFee).sub(amountOfBuyback);\\n        }else{\\n            bonus = bonus.mul( hope ).div( s.mint );\\n            amount = amount.add(bonus);\\n            amountOfServiceFee = amount.mul( sf ).div( 100 );\\n            uint amountOfDc = amountOfServiceFee.mul( dc ).div( 100 );\\n            amountOfReferral = amountOfServiceFee.mul( cm ).div( 100 );\\n            amountOfServiceFee = amountOfServiceFee.sub( amountOfDc ).sub( amountOfReferral );\\n            amountOfWithdraw = amount.sub(amountOfServiceFee).sub(amountOfBuyback);\\n        }\\n\\n    }\\n\\n    /**\\n    * Calculate the amount to buyback.\\n    *\\n    * It transfers to treasury to buyback a part of profit.\\n    *\\n    * @param account Saver's owner account\\n    * @param index Saver's index\\n    */\\n    function _calculateBuyback( address account, uint index, uint hope ) public view returns( uint buyback ) {\\n        Saver memory s = saver( account, index );\\n        uint br = _variables.buybackRate();\\n        uint balance = s.mint.mul( _tokenUnit ).div( getExchangeRate() );\\n        buyback = balance.sub( s.mint ).mul( hope ).mul (br ).div( s.mint ).div(100);\\n    }\\n\\n\\n\\n    // Override ERC20\\n    function symbol() public view override returns (string memory) {\\n        return symbol();\\n    }\\n\\n    function name() public view override returns (string memory) {\\n        return __name;\\n    }\\n\\n    function decimals() public view override returns (uint8) {\\n        return __decimals;\\n    }\\n\\n    function totalScore() public view override returns(uint256){\\n        return _totalScore;\\n    }\\n\\n}\"\r\n    },\r\n    \"/Users/jacob/Developer/DeFiWorkspace/punk.protocol/contracts/ForgeStorage.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity >=0.5.0 <0.9.0;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"./Saver.sol\\\";\\nimport \\\"./Variables.sol\\\";\\n\\ncontract ForgeStorage{\\n\\n    Variables internal _variables;\\n    address internal _model;\\n    address internal _token;\\n    uint internal _tokenUnit;\\n\\n    string internal __name;\\n    string internal __symbol;\\n    uint8 internal __decimals;\\n    \\n    \\n    mapping( address => uint ) internal _tokensBalances;\\n\\n    mapping( address => Saver [] ) _savers;\\n    mapping( address => mapping( uint => Transaction [] ) ) _transactions;\\n\\n    // set to address\\n    uint internal _count;\\n    uint internal _totalScore;\\n\\n    uint256[50] private ______gap;\\n}\"\r\n    },\r\n    \"/Users/jacob/Developer/DeFiWorkspace/punk.protocol/contracts/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity >=0.5.0 <0.9.0;\\n\\nimport \\\"./OwnableStorage.sol\\\";\\n\\ncontract Ownable{\\n\\n    OwnableStorage _storage;\\n\\n    function initialize( address storage_ ) public {\\n        _storage = OwnableStorage(storage_);\\n    }\\n\\n    modifier OnlyAdmin(){\\n        require( _storage.isAdmin(msg.sender) );\\n        _;\\n    }\\n\\n    modifier OnlyGovernance(){\\n        require( _storage.isGovernance( msg.sender ) );\\n        _;\\n    }\\n\\n    modifier OnlyAdminOrGovernance(){\\n        require( _storage.isAdmin(msg.sender) || _storage.isGovernance( msg.sender ) );\\n        _;\\n    }\\n\\n    function updateAdmin( address admin_ ) public OnlyAdmin {\\n        _storage.setAdmin(admin_);\\n    }\\n\\n    function updateGovenance( address gov_ ) public OnlyAdminOrGovernance {\\n        _storage.setGovernance(gov_);\\n    }\\n\\n}\"\r\n    },\r\n    \"/Users/jacob/Developer/DeFiWorkspace/punk.protocol/contracts/OwnableStorage.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity >=0.5.0 <0.9.0;\\n\\ncontract OwnableStorage {\\n\\n    address public _admin;\\n    address public _governance;\\n\\n    constructor() payable {\\n        _admin = msg.sender;\\n        _governance = msg.sender;\\n    }\\n\\n    function setAdmin( address account ) public {\\n        require( isAdmin( msg.sender ));\\n        _admin = account;\\n    }\\n\\n    function setGovernance( address account ) public {\\n        require( isAdmin( msg.sender ) || isGovernance( msg.sender ));\\n        _admin = account;\\n    }\\n\\n    function isAdmin( address account ) public view returns( bool ) {\\n        return account == _admin;\\n    }\\n\\n    function isGovernance( address account ) public view returns( bool ) {\\n        return account == _admin;\\n    }\\n\\n}\"\r\n    },\r\n    \"/Users/jacob/Developer/DeFiWorkspace/punk.protocol/contracts/Referral.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity >=0.5.0 <0.9.0;\\n\\ncontract Referral {\\n\\n    mapping( address=>bytes12 ) private _registers;\\n    mapping( bytes12=>address ) private _referrals;\\n    uint private _count;\\n    \\n    function issue(address account) public returns(bool){\\n        require( account != address(0x0), \\\"REF : Account is Zero address\\\" );\\n        require( _registers[account] == 0, \\\"REF : Already Registry\\\" );\\n        \\n        uint salt = 0;\\n        while( true ){\\n            bytes12 code = _issueReferralCode(account, salt);\\n            if( _referrals[code] == address(0x0) ){\\n                _referrals[code] = account;\\n                _registers[account] = code;    \\n                break;\\n            }\\n            salt++;\\n        }\\n        _count++;\\n        return true;\\n    }\\n\\n    function _issueReferralCode( address sender, uint salt ) private pure returns( bytes12 ){\\n        return bytes12(bytes32(uint(keccak256(abi.encodePacked(sender, salt)))));\\n    }\\n    \\n    function validate( bytes12 code ) public view returns( address ){\\n        return _referrals[code];\\n    }\\n    \\n    function referralCode( address account ) public view returns( bytes12 ){\\n        return _registers[account];\\n    }\\n\\n}\"\r\n    },\r\n    \"/Users/jacob/Developer/DeFiWorkspace/punk.protocol/contracts/Saver.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity >=0.5.0 <0.9.0;\\n\\nstruct Saver{\\n    uint256 createTimestamp;\\n    uint256 startTimestamp;\\n    uint count;\\n    uint interval;\\n    uint256 mint;\\n    uint256 released;\\n    uint256 accAmount;\\n    uint256 relAmount;\\n    uint score;\\n    uint status;\\n    uint updatedTimestamp;\\n    bytes12 ref;\\n}\\n\\nstruct Transaction{\\n    bool pos;\\n    uint timestamp;\\n    uint amount;\\n}\"\r\n    },\r\n    \"/Users/jacob/Developer/DeFiWorkspace/punk.protocol/contracts/Variables.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity >=0.5.0 <0.9.0;\\n\\nimport \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\nimport \\\"./Ownable.sol\\\";\\nimport \\\"./Saver.sol\\\";\\n\\ncontract Variables is Ownable{\\n\\n    address private _initializer;\\n\\n    uint256 private _earlyTerminateFee;\\n    uint256 private _buybackRate;\\n    uint256 private _serviceFee;\\n    uint256 private _discount;\\n    uint256 private _compensation;\\n\\n    address private _treasury;\\n    address private _opTreasury;\\n    address private _reward;\\n    address private _referral;\\n\\n    bool private _initailize = false;\\n\\n    mapping( address => bool ) _emergency;\\n\\n    modifier onlyInitializer{\\n        require(msg.sender == _initializer,\\\"VARIABLES : Not Initializer\\\");\\n        _;\\n    }\\n\\n    constructor(){\\n        _initializer = msg.sender;\\n    }\\n\\n    function initializeVariables( address storage_) public onlyInitializer{\\n        require(!_initailize, \\\"VARIABLES : Already Initailized\\\");\\n        Ownable.initialize(storage_);\\n        _initailize = true;\\n        _serviceFee = 1;\\n        _earlyTerminateFee = 1;\\n        _buybackRate = 20;\\n        _discount = 5;\\n        _compensation = 5;\\n    }\\n\\n    function setEarlyTerminateFee( uint256 earlyTerminateFee_ ) public OnlyGovernance {\\n        require(  1 <= earlyTerminateFee_ && earlyTerminateFee_ < 11, \\\"VARIABLES : Fees range from 1 to 10.\\\" );\\n        _earlyTerminateFee = earlyTerminateFee_;\\n    }\\n    function setBuybackRate( uint256 buybackRate_ ) public OnlyGovernance {\\n        require(  1 <= buybackRate_ && buybackRate_ < 30, \\\"VARIABLES : BuybackRate range from 1 to 30.\\\" );\\n        _buybackRate = buybackRate_;\\n    }\\n\\n    function setEmergency( address forge, bool emergency ) public OnlyAdmin {\\n        _emergency[ forge ] = emergency;\\n    }\\n\\n    function setTreasury( address treasury_ ) public OnlyAdmin {\\n        require(Address.isContract(treasury_), \\\"VARIABLES : must be the contract address.\\\");\\n        _treasury = treasury_;\\n    }\\n\\n    function setReward( address reward_ ) public OnlyAdmin {\\n        require(Address.isContract(reward_), \\\"VARIABLES : must be the contract address.\\\");\\n        _reward = reward_;\\n    }\\n\\n    function setOpTreasury( address opTreasury_ ) public OnlyAdmin {\\n        require(Address.isContract(opTreasury_), \\\"VARIABLES : must be the contract address.\\\");\\n        _opTreasury = opTreasury_;\\n    }\\n\\n    function setReferral( address referral_ ) public OnlyAdmin {\\n        require(Address.isContract(referral_), \\\"VARIABLES : must be the contract address.\\\");\\n        _referral = referral_;\\n    }\\n\\n    function setServiceFee( uint256 serviceFee_ ) public OnlyAdmin {\\n        require(  1 <= serviceFee_ && serviceFee_ < 5, \\\"VARIABLES : ServiceFees range from 1 to 10.\\\" );\\n        _serviceFee = serviceFee_;\\n    }\\n\\n    function setDiscount( uint256 discount_ ) public OnlyAdmin {\\n        require( discount_ + _compensation <= 100, \\\"VARIABLES : discount + compensation <= 100\\\" );\\n        _discount = discount_;\\n    } \\n\\n    function setCompensation( uint256 compensation_ ) public OnlyAdmin {\\n        require( _discount + compensation_ <= 100, \\\"VARIABLES : discount + compensation <= 100\\\" );\\n        _compensation = compensation_;\\n    }\\n\\n    function earlyTerminateFee( ) public view returns( uint256 ){ \\n        return _earlyTerminateFee;\\n    }\\n\\n    function earlyTerminateFee( address forge ) public view returns( uint256 ){ \\n        return isEmergency( forge ) ? 0 : _earlyTerminateFee;\\n    }\\n\\n    function buybackRate() public view returns( uint256 ){ return _buybackRate; }\\n\\n\\n    function isEmergency( address forge ) public view returns( bool ){\\n        return _emergency[ forge ];\\n    }\\n\\n    function treasury() public view returns( address ){\\n        return _treasury;\\n    }\\n\\n    function reward() public view returns( address ){\\n        return _reward;\\n    }\\n\\n    function opTreasury() public view returns( address ){\\n        return _opTreasury;\\n    }\\n\\n    function referral() public view returns( address ){\\n        return _referral;\\n    }\\n\\n    function serviceFee() public view returns( uint256 ){\\n        return _serviceFee;\\n    } \\n\\n    function discount() public view returns( uint256 ){\\n        return _discount;\\n    }\\n\\n    function compensation() public view returns( uint256 ){\\n        return _compensation;\\n    }\\n\\n}\\n\"\r\n    },\r\n    \"/Users/jacob/Developer/DeFiWorkspace/punk.protocol/contracts/interfaces/ForgeInterface.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity >=0.5.0 <0.9.0;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"../Saver.sol\\\";\\n\\ninterface ForgeInterface{\\n\\n    event CraftingSaver ( address owner, uint index, uint deposit );\\n    event AddDeposit ( address owner, uint index, uint deposit );\\n    event Withdraw ( address owner, uint index, uint amount );\\n    event Terminate ( address owner, uint index, uint amount );\\n    event Bonus ( address owner, uint index, uint amount );\\n    event SetModel ( address from, address to );\\n\\n    function modelAddress() external view returns (address);\\n\\n    function withdrawable( address account, uint index ) external view returns(uint);\\n    function countByAccount( address account ) external view returns (uint);\\n    \\n    function craftingSaver( uint amount, uint startTimestamp, uint count, uint interval ) external returns(bool);\\n    function craftingSaver( uint amount, uint startTimestamp, uint count, uint interval, bytes12 referral ) external returns(bool);\\n    function addDeposit( uint index, uint amount ) external returns(bool);\\n    function withdraw( uint index, uint amount ) external returns(bool);\\n    function terminateSaver( uint index ) external returns(bool);\\n\\n    function countAll() external view returns(uint);\\n    function saver( address account, uint index ) external view returns( Saver memory );\\n    function transactions( address account, uint index ) external view returns ( Transaction [] memory );\\n\\n    function totalScore() external view returns(uint256);\\n    function getExchangeRate() external view returns( uint );\\n    function getBonus() external view returns( uint );\\n    function getTotalVolume( ) external view returns( uint );\\n\\n}\"\r\n    },\r\n    \"/Users/jacob/Developer/DeFiWorkspace/punk.protocol/contracts/interfaces/ModelInterface.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity >=0.5.0 <0.9.0;\\n\\ninterface ModelInterface{\\n\\n    event Invest( uint amount, uint timestamp );\\n    event Withdraw( uint amount, address to, uint timestamp  );\\n\\n    /**\\n     * @dev Returns the balance held by the model without investing.\\n     */\\n    function underlyingBalanceInModel() external view returns ( uint256 );\\n\\n    /**\\n     * @dev Returns the sum of the invested amount and the amount held by the model without investing.\\n     */\\n    function underlyingBalanceWithInvestment() external view returns ( uint256 );\\n\\n    /**\\n     * @dev Invest uninvested amounts according to your strategy.\\n     *\\n     * Emits a {Invest} event.\\n     */\\n    function invest() external;\\n\\n    /**\\n     * @dev After withdrawing all the invested amount, all the balance is transferred to 'Forge'.\\n     *\\n     * IMPORTANT: Must use the \\\"OnlyForge\\\" Modifier from \\\"ModelStorage.sol\\\". \\n     * \\n     * Emits a {Withdraw} event.\\n     */\\n    function withdrawAllToForge() external;\\n\\n    /**\\n     * @dev After withdrawing 'amount', send it to 'Forge'.\\n     *\\n     * IMPORTANT: Must use the \\\"OnlyForge\\\" Modifier from \\\"ModelStorage.sol\\\". \\n     * \\n     * Emits a {Withdraw} event.\\n     */\\n    function withdrawToForge( uint256 amount ) external;\\n\\n    /**\\n     * @dev After withdrawing 'amount', send it to 'to'.\\n     *\\n     * IMPORTANT: Must use the \\\"OnlyForge\\\" Modifier from \\\"ModelStorage.sol\\\". \\n     * \\n     * Emits a {Withdraw} event.\\n     */\\n    function withdrawTo( uint256 amount, address to )  external;\\n    \\n}\\n\"\r\n    },\r\n    \"/Users/jacob/Developer/DeFiWorkspace/punk.protocol/contracts/interfaces/PunkRewardPoolInterface.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity >=0.5.0 <0.9.0;\\n\\ninterface PunkRewardPoolInterface {\\n    function addForge( address forge ) external;\\n    function setForge( address forge, uint weight ) external;\\n    function getWeightRange( address forge ) external view returns( uint, uint );\\n\\n    function claimPunk( ) external;\\n    function claimPunk( address to ) external;\\n    function claimPunk( address forge, address to ) external;\\n    function staking( address forge, uint amount ) external;\\n    function unstaking( address forge, uint amount ) external;\\n    function staking( address forge, uint amount, address from ) external;\\n    function unstaking( address forge, uint amount, address from ) external;\\n    \\n    function getClaimPunk( address to ) external view returns( uint );\\n    function getClaimPunk( address forge, address to ) external view returns( uint );\\n    \\n    function getWeightSum() external view returns( uint );\\n    function getWeight( address forge ) external view returns( uint );\\n    function getTotalDistributed( ) external view returns( uint );\\n    function getDistributed( address forge ) external view returns( uint );\\n    function getAllocation( ) external view returns( uint );\\n    function getAllocation( address forge ) external view returns( uint );\\n    function staked( address forge, address account ) external view returns( uint );\\n}\"\r\n    },\r\n    \"/Users/jacob/Developer/DeFiWorkspace/punk.protocol/contracts/interfaces/ReferralInterface.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity >=0.5.0 <0.9.0;\\n\\ninterface ReferralInterface{\\n    function validate( bytes12 code ) external view returns( address );\\n    function referralCode( address account ) external view returns( bytes12 );\\n}\"\r\n    },\r\n    \"/Users/jacob/Developer/DeFiWorkspace/punk.protocol/contracts/libs/CommitmentWeight.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity >=0.5.0 <0.9.0;\\n\\nlibrary CommitmentWeight {\\n    \\n    uint constant DECIMALS = 8;\\n    int constant ONE = int(10**DECIMALS);\\n\\n    function calculate( uint day ) external pure returns (uint){\\n        int x = int(day) * ONE;\\n        int c = 3650 * ONE;\\n        \\n        int numerator = div( div( x, c ) - ONE, sqrt( ( div( pow( x, 2 ), 13322500 * ONE ) - div( x, 1825 * ONE ) + ONE + ONE ) ) ) + div( ONE, sqrt( 2 * ONE ) );\\n        int denominator = ( ONE + div( ONE, sqrt( 2 * ONE ) ) );\\n        \\n        return uint( ONE + div( numerator, denominator ) );\\n    }\\n    \\n    function div( int a, int b ) internal pure returns ( int ){\\n        return ( a * int(ONE) / b );\\n    }\\n    \\n    function sqrt( int a ) internal pure returns ( int ){\\n        int s = a * int(ONE);\\n        if( s < 0 ) s = s * -1;\\n        uint k = uint(s);\\n        uint z = (k + 1) / 2;\\n        uint y = k;\\n        while (z < y) {\\n            y = z;\\n            z = (k / z + z) / 2;\\n        }\\n        return int(y);\\n    }\\n\\n    function pow( int a, int b ) internal pure returns ( int ){\\n        return int(uint(a) ** uint(b) / uint(ONE));\\n    }\\n    \\n}\"\r\n    },\r\n    \"/Users/jacob/Developer/DeFiWorkspace/punk.protocol/contracts/libs/Score.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity >=0.5.0 <0.9.0;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\nimport \\\"./CommitmentWeight.sol\\\";\\nimport \\\"../Saver.sol\\\";\\n\\nlibrary Score {\\n    using SafeMath for uint;\\n    \\n    uint constant SECONDS_OF_DAY = 24 * 60 * 60;\\n\\n    function _getTimes( uint createTimestamp, uint startTimestamp, uint count, uint interval ) pure private returns( uint deposit, uint withdraw, uint timeline, uint max ){\\n        deposit     = startTimestamp.sub( createTimestamp );\\n        withdraw    = SECONDS_OF_DAY.mul( count ).mul( interval );\\n        timeline    = deposit + withdraw;\\n        max         = SECONDS_OF_DAY.mul( 365 ).mul( 30 );\\n    }\\n    \\n    function _getDepositTransactions( uint createTimestamp, uint deposit, Transaction [] memory transactions ) private pure returns( uint depositCount, uint [] memory xAxis, uint [] memory yAxis ){\\n        depositCount = 0;\\n        yAxis = new uint [] ( transactions.length );\\n        xAxis = new uint [] ( transactions.length + 1 );\\n        \\n        for( uint i = 0 ; i <  transactions.length ; i++ ){\\n            if( transactions[i].pos ) {\\n                yAxis[ depositCount ] = i == 0 ? transactions[ i ].amount : transactions[ i ].amount.add( yAxis[ i - 1 ] );\\n                xAxis[ depositCount ] = transactions[ i ].timestamp.sub( createTimestamp );\\n                depositCount++;\\n            }\\n        }\\n        xAxis[ depositCount ] = deposit;\\n        \\n        uint tempX = 0;\\n        for( uint i = 1 ; i <= depositCount ; i++ ){\\n            tempX = tempX + xAxis[ i - 1 ];\\n            xAxis[ i ] = xAxis[ i ].sub( tempX );\\n        }\\n    }\\n\\n    function calculate( uint createTimestamp, uint startTimestamp, Transaction [] memory transactions, uint count, uint interval, uint decimals ) public pure returns ( uint ){\\n        \\n        ( uint deposit, uint withdraw, uint timeline, uint max ) = _getTimes(createTimestamp, startTimestamp, count, interval);\\n        ( uint depositCount, uint [] memory xAxis, uint [] memory yAxis ) = _getDepositTransactions( createTimestamp, deposit, transactions );\\n        \\n        uint cw = CommitmentWeight.calculate( timeline.div( SECONDS_OF_DAY ) );\\n        \\n        if( max <= deposit ){\\n            \\n            uint accX = 0;\\n            for( uint i = 0 ; i < depositCount ; i++ ){\\n                accX = accX.add( xAxis[ i + 1 ] );\\n                if( accX > max ){\\n                    xAxis[ i + 1 ] = max.sub( accX.sub( xAxis[ i + 1 ] ) );\\n                    depositCount = i + 1;\\n                    break;\\n                }\\n            }\\n            \\n            uint beforeWithdraw = 0;\\n            for( uint i = 0 ; i < depositCount ; i++ ){\\n                beforeWithdraw = beforeWithdraw.add( yAxis[ i ].mul( xAxis[ i + 1 ] ) );\\n            }\\n            \\n            uint afterWithdraw = 0;\\n            \\n            return beforeWithdraw.add( afterWithdraw ).div( SECONDS_OF_DAY ).mul( cw ).div( 10 ** decimals );\\n            \\n        }else if( max <= timeline ){\\n            \\n            uint beforeWithdraw = 0;\\n            for( uint i = 0 ; i < depositCount ; i++ ){\\n                beforeWithdraw = beforeWithdraw.add( yAxis[ i ].mul( xAxis[ i + 1 ] ) );\\n            }\\n            \\n            uint afterWithdraw = 0;\\n            if( withdraw > 0 ){\\n                uint tempY = yAxis[ depositCount - 1 ].mul( timeline.sub( max ) ).div( withdraw );\\n                afterWithdraw = yAxis[ depositCount - 1 ].mul( withdraw ).div( 2 );\\n                afterWithdraw = afterWithdraw.sub( tempY.mul( timeline.sub( max ) ).div( 2 ) );\\n            }\\n            \\n            return beforeWithdraw.add( afterWithdraw ).div( SECONDS_OF_DAY ).mul( cw ).div( 10 ** decimals );\\n            \\n        }else {\\n            \\n            uint beforeWithdraw = 0;\\n            for( uint i = 0 ; i < depositCount ; i++ ){\\n                beforeWithdraw = beforeWithdraw.add( yAxis[ i ].mul( xAxis[ i + 1 ] ) );\\n            }\\n            \\n            uint afterWithdraw = yAxis[ depositCount - 1 ].mul( withdraw ).div( 2 );\\n            \\n            return beforeWithdraw.add( afterWithdraw ).div( SECONDS_OF_DAY ).mul( cw ).div( 10 ** decimals );\\n            \\n        }\\n        \\n    }\\n    \\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/proxy/utils/Initializable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\n// solhint-disable-next-line compiler-version\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/Address.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {UpgradeableProxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n */\\nabstract contract Initializable {\\n\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        require(_initializing || !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/ERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin guidelines: functions revert instead\\n * of returning `false` on failure. This behavior is nonetheless conventional\\n * and does not conflict with the expectations of ERC20 applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20 {\\n    mapping (address => uint256) private _balances;\\n\\n    mapping (address => mapping (address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * The defaut value of {decimals} is 18. To select a different value for\\n     * {decimals} you should overload it.\\n     *\\n     * All three of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor (string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n     * overloaded;\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `recipient` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(_msgSender(), recipient, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        _approve(_msgSender(), spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` and `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``sender``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(sender, recipient, amount);\\n\\n        uint256 currentAllowance = _allowances[sender][_msgSender()];\\n        require(currentAllowance >= amount, \\\"ERC20: transfer amount exceeds allowance\\\");\\n        _approve(sender, _msgSender(), currentAllowance - amount);\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender] + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        uint256 currentAllowance = _allowances[_msgSender()][spender];\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        _approve(_msgSender(), spender, currentAllowance - subtractedValue);\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\\n     *\\n     * This is internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` cannot be the zero address.\\n     * - `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     */\\n    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\\n        require(sender != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(recipient != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(sender, recipient, amount);\\n\\n        uint256 senderBalance = _balances[sender];\\n        require(senderBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        _balances[sender] = senderBalance - amount;\\n        _balances[recipient] += amount;\\n\\n        emit Transfer(sender, recipient, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        _balances[account] += amount;\\n        emit Transfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        _balances[account] = accountBalance - amount;\\n        _totalSupply -= amount;\\n\\n        emit Transfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be to transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual { }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        // solhint-disable-next-line max-line-length\\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) { // Return data is optional\\n            // solhint-disable-next-line max-line-length\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/math/SafeMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is no longer needed starting with Solidity 0.8. The compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"remappings\": [],\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 500\r\n    },\r\n    \"evmVersion\": \"byzantium\",\r\n    \"libraries\": {\r\n      \"/Users/jacob/Developer/DeFiWorkspace/punk.protocol/contracts/libs/Score.sol\": {\r\n        \"Score\": \"0xFc688D655D68869443d78Ad1F9f6AEA6Dce3c450\"\r\n      }\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}","ABI":"[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"deposit\",\"type\":\"uint256\"}],\"name\":\"AddDeposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Bonus\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"deposit\",\"type\":\"uint256\"}],\"name\":\"CraftingSaver\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"SetModel\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Terminate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"hope\",\"type\":\"uint256\"}],\"name\":\"_calculateBuyback\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"buyback\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"_terminateValues\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountOfWithdraw\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountOfServiceFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountOfReferral\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"compensation\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"hope\",\"type\":\"uint256\"}],\"name\":\"_withdrawValues\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountOfWithdraw\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountOfServiceFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountOfBuyback\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountOfReferral\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"compensation\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"addDeposit\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"countAll\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"countByAccount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"startTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"count\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"interval\",\"type\":\"uint256\"}],\"name\":\"craftingSaver\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"startTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"count\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"interval\",\"type\":\"uint256\"},{\"internalType\":\"bytes12\",\"name\":\"referral\",\"type\":\"bytes12\"}],\"name\":\"craftingSaver\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBonus\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getExchangeRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTotalVolume\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"storage_\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"storage_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"variables_\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"name_\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol_\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"model_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token_\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"decimals_\",\"type\":\"uint8\"}],\"name\":\"initializeForge\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"modelAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"saver\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"createTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"startTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"count\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"interval\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"mint\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"released\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"accAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"relAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"score\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"status\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"updatedTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"bytes12\",\"name\":\"ref\",\"type\":\"bytes12\"}],\"internalType\":\"struct Saver\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"model_\",\"type\":\"address\"}],\"name\":\"setModel\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"variables_\",\"type\":\"address\"}],\"name\":\"setVariable\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"terminateSaver\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalScore\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"transactions\",\"outputs\":[{\"components\":[{\"internalType\":\"bool\",\"name\":\"pos\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"internalType\":\"struct Transaction[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"admin_\",\"type\":\"address\"}],\"name\":\"updateAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"gov_\",\"type\":\"address\"}],\"name\":\"updateGovenance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountPlp\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"withdrawable\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"Forge","CompilerVersion":"v0.8.6+commit.11564f7e","OptimizationUsed":"1","Runs":"500","ConstructorArguments":"","EVMVersion":"byzantium","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}