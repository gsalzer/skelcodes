{"status":"1","message":"OK","result":[{"SourceCode":"// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.6;\r\n\r\nlibrary String {\r\n    /**\r\n     * Convert a string to lowercase\r\n     */\r\n    function lowercase(string memory input) internal pure returns (string memory) {\r\n        bytes memory _input = bytes(input);\r\n        for (uint inputIdx = 0; inputIdx < _input.length; inputIdx++) {\r\n            uint8 character = uint8(_input[inputIdx]);\r\n            if (character >= 65 && character <= 90) {\r\n                character += 0x20;\r\n                _input[inputIdx] = bytes1(character);\r\n            }\r\n        }\r\n        return string(_input);\r\n    }\r\n\r\n    /**\r\n     * Convert a string to uppercase\r\n     */\r\n    function uppercase(string memory input) internal pure returns (string memory) {\r\n        bytes memory _input = bytes(input);\r\n        for (uint inputIdx = 0; inputIdx < _input.length; inputIdx++) {\r\n            uint8 character = uint8(_input[inputIdx]);\r\n            if (character >= 97 && character <= 122) {\r\n                character -= 0x20;\r\n                _input[inputIdx] = bytes1(character);\r\n            }\r\n        }\r\n        return string(_input);\r\n    }\r\n\r\n    /**\r\n     * Search for a needle in a haystack\r\n     */\r\n    function contains(string memory haystack, string memory needle) internal pure returns (bool) {\r\n        return indexOf(needle, haystack) >= 0;\r\n    }\r\n    \r\n    /**\r\n     * Convert bytes32 to string and remove padding\r\n     */\r\n    function bytes32ToString(bytes32 _bytes32) public pure returns (string memory) {\r\n        uint8 i = 0;\r\n        while(i < 32 && _bytes32[i] != 0) {\r\n            i++;\r\n        }\r\n        bytes memory bytesArray = new bytes(i);\r\n        for (i = 0; i < 32 && _bytes32[i] != 0; i++) {\r\n            bytesArray[i] = _bytes32[i];\r\n        }\r\n        return string(bytesArray);\r\n    }\r\n\r\n    /**\r\n     * Case insensitive string search\r\n     *\r\n     * @param needle The string to search for\r\n     * @param haystack The string to search in\r\n     * @return Returns -1 if no match is found, otherwise returns the index of the match \r\n     */\r\n    function indexOf(string memory needle, string memory haystack) internal pure returns (int256) {\r\n        bytes memory _needle = bytes(lowercase(needle));\r\n        bytes memory _haystack = bytes(lowercase(haystack));\r\n        if (_haystack.length < _needle.length) {\r\n            return -1;\r\n        }\r\n        bool _match;\r\n        for (uint256 haystackIdx; haystackIdx < _haystack.length; haystackIdx++) {\r\n            for (uint256 needleIdx; needleIdx < _needle.length; needleIdx++) {\r\n                uint8 needleChar = uint8(_needle[needleIdx]);\r\n                uint8 haystackChar = uint8(_haystack[haystackIdx + needleIdx]);\r\n                if (needleChar == haystackChar) {\r\n                    _match = true;\r\n                    if (needleIdx == _needle.length - 1) {\r\n                        return int(haystackIdx);\r\n                    }\r\n                } else {\r\n                    _match = false;\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n        return -1;\r\n    }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_bytes32\",\"type\":\"bytes32\"}],\"name\":\"bytes32ToString\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"}]","ContractName":"String","CompilerVersion":"v0.8.6+commit.11564f7e","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"ipfs://26278626ec4fb5ecc0da5fd1e218895d9c720807445374e93b2902707e5b7ae0"}]}