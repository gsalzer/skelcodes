{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/Presale.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.7.6;\\n\\nimport {IERC20} from '@openzeppelin/contracts/token/ERC20/IERC20.sol';\\nimport {SafeMath} from '@openzeppelin/contracts/math/SafeMath.sol';\\nimport {Ownable} from '@openzeppelin/contracts/access/Ownable.sol';\\nimport {\\n  AggregatorV3Interface\\n} from '@chainlink/contracts/src/v0.6/interfaces/AggregatorV3Interface.sol';\\n\\ncontract Presale is Ownable {\\n  using SafeMath for uint256;\\n\\n  // ERC20 tokens\\n  IERC20 public dpx;\\n\\n  // Structure of each vest\\n  struct Vest {\\n    uint256 amount; // the amount of DPX the beneficiary will recieve\\n    uint256 released; // the amount of DPX released to the beneficiary\\n    bool ethTransferred; // whether the beneficiary has transferred the eth into the contract\\n  }\\n\\n  // The mapping of vested beneficiary (beneficiary address => Vest)\\n  mapping(address => Vest) public vestedBeneficiaries;\\n\\n  // beneficiary => eth deposited\\n  mapping(address => uint256) public ethDeposits;\\n\\n  // Array of beneficiaries\\n  address[] public beneficiaries;\\n\\n  // No. of beneficiaries\\n  uint256 public noOfBeneficiaries;\\n\\n  // Whether the contract has been bootstrapped with the DPX\\n  bool public bootstrapped;\\n\\n  // Start time of the the vesting\\n  uint256 public startTime;\\n\\n  // The duration of the vesting\\n  uint256 public duration;\\n\\n  // Price of each DPX token in usd (1e8 precision)\\n  uint256 public dpxPrice;\\n\\n  // ETH/USD chainlink price aggregator\\n  AggregatorV3Interface internal priceFeed;\\n\\n  constructor(address _priceFeedAddress, uint256 _dpxPrice) {\\n    require(_priceFeedAddress != address(0), 'Price feed address cannot be 0');\\n    require(_dpxPrice > 0, 'DPX price has to be higher than 0');\\n    priceFeed = AggregatorV3Interface(_priceFeedAddress);\\n    dpxPrice = _dpxPrice;\\n\\n    addBeneficiary(0x0330414bBF9491445c102A2a8a14adB9b6a25384, uint256(5000).mul(1e18));\\n\\n    addBeneficiary(0x5FB8b9512684d451D4E585A1a0AabFB48A253C67, uint256(1000).mul(1e18));\\n\\n    addBeneficiary(0x9846338e0726d317280346c5003Db365745433D7, uint256(1200).mul(1e18));\\n\\n    addBeneficiary(0x2d9Bd03312814a34E6706bC81A3593788716d16a, uint256(500).mul(1e18));\\n\\n    addBeneficiary(0x9c5083dd4838E120Dbeac44C052179692Aa5dAC5, uint256(10000).mul(1e18));\\n\\n    addBeneficiary(0x0E6Aa54f683dFFC3D6BDb4057Bdb47cBc18975E7, uint256(10000).mul(1e18));\\n\\n    addBeneficiary(0x3E46bb5a8A10c9CA522df0b25036930cb45b0fb3, uint256(6000).mul(1e18));\\n\\n    addBeneficiary(0xE5442814c0d31bF9f67676B72838C0E64E9c7B4e, uint256(240).mul(1e18));\\n  }\\n\\n  /*---- EXTERNAL FUNCTIONS FOR OWNER ----*/\\n\\n  /**\\n   * @notice Bootstraps the presale contract\\n   * @param _startTime the time (as Unix time) at which point vesting starts\\n   * @param _duration duration in seconds of the period in which the tokens will vest\\n   * @param _dpxAddress address of dpx erc20 token\\n   */\\n  function bootstrap(\\n    uint256 _startTime,\\n    uint256 _duration,\\n    address _dpxAddress\\n  ) external onlyOwner returns (bool) {\\n    require(_dpxAddress != address(0), 'DPX address is 0');\\n    require(_duration > 0, 'Duration passed cannot be 0');\\n    require(_startTime > block.timestamp, 'Start time cannot be before current time');\\n\\n    startTime = _startTime;\\n    duration = _duration;\\n    dpx = IERC20(_dpxAddress);\\n\\n    uint256 totalDPXRequired;\\n\\n    for (uint256 i = 0; i < beneficiaries.length; i = i + 1) {\\n      totalDPXRequired = totalDPXRequired.add(vestedBeneficiaries[beneficiaries[i]].amount);\\n    }\\n\\n    require(totalDPXRequired > 0, 'Total DPX required cannot be 0');\\n\\n    dpx.transferFrom(msg.sender, address(this), totalDPXRequired);\\n\\n    bootstrapped = true;\\n\\n    emit Bootstrap(totalDPXRequired);\\n\\n    return bootstrapped;\\n  }\\n\\n  /**\\n   * @notice Adds a beneficiary to the contract. Only owner can call this.\\n   * @param _beneficiary the address of the beneficiary\\n   * @param _amount amount of DPX to be vested for the beneficiary\\n   */\\n  function addBeneficiary(address _beneficiary, uint256 _amount) public onlyOwner returns (bool) {\\n    require(_beneficiary != address(0), 'Beneficiary cannot be a 0 address');\\n    require(_amount > 0, 'Amount should be larger than 0');\\n    require(!bootstrapped, 'Cannot add beneficiary as contract has been bootstrapped');\\n    require(vestedBeneficiaries[_beneficiary].amount == 0, 'Cannot add the same beneficiary again');\\n\\n    beneficiaries.push(_beneficiary);\\n\\n    vestedBeneficiaries[_beneficiary].amount = _amount;\\n\\n    noOfBeneficiaries = noOfBeneficiaries.add(1);\\n\\n    emit AddBeneficiary(_beneficiary, _amount);\\n\\n    return true;\\n  }\\n\\n  /**\\n   * @notice Updates beneficiary amount. Only owner can call this.\\n   * @param _beneficiary the address of the beneficiary\\n   * @param _amount amount of DPX to be vested for the beneficiary\\n   */\\n  function updateBeneficiary(address _beneficiary, uint256 _amount) external onlyOwner {\\n    require(_beneficiary != address(0), 'Beneficiary cannot be a 0 address');\\n    require(!bootstrapped, 'Cannot update beneficiary as contract has been bootstrapped');\\n    require(\\n      vestedBeneficiaries[_beneficiary].amount != _amount,\\n      'New amount cannot be the same as old amount'\\n    );\\n    require(\\n      !vestedBeneficiaries[_beneficiary].ethTransferred,\\n      'Beneficiary should have not transferred ETH'\\n    );\\n    require(_amount > 0, 'Amount cannot be smaller or equal to 0');\\n    require(vestedBeneficiaries[_beneficiary].amount != 0, 'Beneficiary has not been added');\\n\\n    vestedBeneficiaries[_beneficiary].amount = _amount;\\n\\n    emit UpdateBeneficiary(_beneficiary, _amount);\\n  }\\n\\n  /**\\n   * @notice Removes a beneficiary from the contract. Only owner can call this.\\n   * @param _beneficiary the address of the beneficiary\\n   * @return whether beneficiary was deleted\\n   */\\n  function removeBeneficiary(address payable _beneficiary) external onlyOwner returns (bool) {\\n    require(_beneficiary != address(0), 'Beneficiary cannot be a 0 address');\\n    require(!bootstrapped, 'Cannot remove beneficiary as contract has been bootstrapped');\\n    if (vestedBeneficiaries[_beneficiary].ethTransferred) {\\n      _beneficiary.transfer(ethDeposits[_beneficiary]);\\n    }\\n    for (uint256 i = 0; i < beneficiaries.length; i = i + 1) {\\n      if (beneficiaries[i] == _beneficiary) {\\n        noOfBeneficiaries = noOfBeneficiaries.sub(1);\\n\\n        delete beneficiaries[i];\\n        delete vestedBeneficiaries[_beneficiary];\\n\\n        emit RemoveBeneficiary(_beneficiary);\\n\\n        return true;\\n      }\\n    }\\n    return false;\\n  }\\n\\n  /**\\n   * @notice Withdraws eth deposited into the contract. Only owner can call this.\\n   */\\n  function withdraw() external onlyOwner {\\n    uint256 ethBalance = payable(address(this)).balance;\\n\\n    payable(msg.sender).transfer(ethBalance);\\n\\n    emit WithdrawEth(ethBalance);\\n  }\\n\\n  /*---- EXTERNAL FUNCTIONS ----*/\\n\\n  /**\\n   * @notice Transfers eth from beneficiary to the contract.\\n   */\\n  function transferEth() external payable returns (uint256 ethAmount) {\\n    require(\\n      !vestedBeneficiaries[msg.sender].ethTransferred,\\n      'Beneficiary has already transferred ETH'\\n    );\\n    require(vestedBeneficiaries[msg.sender].amount > 0, 'Sender is not a beneficiary');\\n\\n    uint256 ethPrice = getLatestPrice();\\n\\n    ethAmount = vestedBeneficiaries[msg.sender].amount.mul(dpxPrice).div(ethPrice);\\n\\n    require(msg.value >= ethAmount, 'Incorrect ETH amount sent');\\n\\n    if (msg.value > ethAmount) {\\n      payable(msg.sender).transfer(msg.value.sub(ethAmount));\\n    }\\n\\n    ethDeposits[msg.sender] = ethAmount;\\n\\n    vestedBeneficiaries[msg.sender].ethTransferred = true;\\n\\n    emit TransferredEth(msg.sender, ethAmount, ethPrice);\\n  }\\n\\n  /**\\n   * @notice Transfers vested tokens to beneficiary.\\n   */\\n  function release() external returns (uint256 unreleased) {\\n    require(bootstrapped, 'Contract has not been bootstrapped');\\n    require(vestedBeneficiaries[msg.sender].ethTransferred, 'Beneficiary has not transferred eth');\\n    unreleased = releasableAmount(msg.sender);\\n\\n    require(unreleased > 0, 'No releasable amount');\\n\\n    vestedBeneficiaries[msg.sender].released = vestedBeneficiaries[msg.sender].released.add(\\n      unreleased\\n    );\\n\\n    dpx.transfer(msg.sender, unreleased);\\n\\n    emit TokensReleased(msg.sender, unreleased);\\n  }\\n\\n  /*---- VIEWS ----*/\\n\\n  /**\\n   * @notice Calculates the amount that has already vested but hasn't been released yet.\\n   * @param beneficiary address of the beneficiary\\n   */\\n  function releasableAmount(address beneficiary) public view returns (uint256) {\\n    return vestedAmount(beneficiary).sub(vestedBeneficiaries[beneficiary].released);\\n  }\\n\\n  /**\\n   * @notice Calculates the amount that has already vested.\\n   * @param beneficiary address of the beneficiary\\n   */\\n  function vestedAmount(address beneficiary) public view returns (uint256) {\\n    uint256 totalBalance = vestedBeneficiaries[beneficiary].amount;\\n\\n    if (block.timestamp < startTime) {\\n      return 0;\\n    } else if (block.timestamp >= startTime.add(duration)) {\\n      return totalBalance;\\n    } else {\\n      uint256 halfTotalBalance = totalBalance.div(2);\\n      return\\n        halfTotalBalance.mul(block.timestamp.sub(startTime)).div(duration).add(halfTotalBalance);\\n    }\\n  }\\n\\n  /**\\n   * @notice Returns the latest price for ETH/USD\\n   */\\n  function getLatestPrice() public view returns (uint256) {\\n    (, int256 price, , , ) = priceFeed.latestRoundData();\\n    return uint256(price);\\n  }\\n\\n  /*---- EVENTS ----*/\\n\\n  event TokensReleased(address beneficiary, uint256 amount);\\n\\n  event AddBeneficiary(address beneficiary, uint256 amount);\\n\\n  event RemoveBeneficiary(address beneficiary);\\n\\n  event UpdateBeneficiary(address beneficiary, uint256 amount);\\n\\n  event TransferredEth(address beneficiary, uint256 ethAmount, uint256 ethPrice);\\n\\n  event WithdrawEth(uint256 amount);\\n\\n  event Bootstrap(uint256 totalDPXRequired);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/math/SafeMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        uint256 c = a + b;\\n        if (c < a) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b > a) return (false, 0);\\n        return (true, a - b);\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) return (true, 0);\\n        uint256 c = a * b;\\n        if (c / a != b) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a / b);\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a % b);\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b <= a, \\\"SafeMath: subtraction overflow\\\");\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0) return 0;\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: division by zero\\\");\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: modulo by zero\\\");\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor () internal {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n}\\n\"\r\n    },\r\n    \"@chainlink/contracts/src/v0.6/interfaces/AggregatorV3Interface.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity >=0.6.0;\\n\\ninterface AggregatorV3Interface {\\n\\n  function decimals() external view returns (uint8);\\n  function description() external view returns (string memory);\\n  function version() external view returns (uint256);\\n\\n  // getRoundData and latestRoundData should both raise \\\"No data present\\\"\\n  // if they do not have data to report, instead of returning unset values\\n  // which could be misinterpreted as actual reported values.\\n  function getRoundData(uint80 _roundId)\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n  function latestRoundData()\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": false,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_priceFeedAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_dpxPrice\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"beneficiary\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"AddBeneficiary\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalDPXRequired\",\"type\":\"uint256\"}],\"name\":\"Bootstrap\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"beneficiary\",\"type\":\"address\"}],\"name\":\"RemoveBeneficiary\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"beneficiary\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TokensReleased\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"beneficiary\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"ethAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"ethPrice\",\"type\":\"uint256\"}],\"name\":\"TransferredEth\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"beneficiary\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"UpdateBeneficiary\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"WithdrawEth\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_beneficiary\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"addBeneficiary\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"beneficiaries\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_startTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_duration\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_dpxAddress\",\"type\":\"address\"}],\"name\":\"bootstrap\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"bootstrapped\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dpx\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dpxPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"duration\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"ethDeposits\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLatestPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"noOfBeneficiaries\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"beneficiary\",\"type\":\"address\"}],\"name\":\"releasableAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"release\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"unreleased\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_beneficiary\",\"type\":\"address\"}],\"name\":\"removeBeneficiary\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"transferEth\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"ethAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_beneficiary\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"updateBeneficiary\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"beneficiary\",\"type\":\"address\"}],\"name\":\"vestedAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"vestedBeneficiaries\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"released\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"ethTransferred\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"Presale","CompilerVersion":"v0.7.6+commit.7338295f","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"0000000000000000000000005f4ec3df9cbd43714fe2740f5e3616155c5b8419000000000000000000000000000000000000000000000000000000012a05f200","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}