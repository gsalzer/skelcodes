{"status":"1","message":"OK","result":[{"SourceCode":"// File: contracts/SafeMath.sol\r\n\r\npragma solidity ^0.5;\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Unsigned math operations with safety checks that revert on error\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Multiplies two unsigned integers, reverts on overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b);\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Integer division of two unsigned integers truncating the quotient, reverts on division by zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Solidity only automatically asserts when dividing by 0\r\n        require(b > 0);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Subtracts two unsigned integers, reverts on overflow (i.e. if subtrahend is greater than minuend).\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b <= a);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Adds two unsigned integers, reverts on overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a);\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Divides two unsigned integers and returns the remainder (unsigned integer modulo),\r\n     * reverts when dividing by zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b != 0);\r\n        return a % b;\r\n    }\r\n}\r\n// File: contracts/StandardProductPurchase.sol\r\n\r\npragma solidity ^0.5;\r\n\r\n\r\ncontract Owned {\r\n    address public owner;\r\n\r\n    function owned() public {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    modifier onlyOwner {\r\n        require(msg.sender == owner, \"Invalid Owner\");\r\n        _;\r\n    }\r\n\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        owner = newOwner;\r\n    }\r\n}\r\n\r\n\r\ncontract StandardProductPurchase is Owned {\r\n    using SafeMath for uint256;\r\n    \r\n    // Base Seller Fee;\r\n    uint256 baseFeePercent;\r\n    uint256 baseFeeDivisor;\r\n    \r\n    \r\n    /* Referral Commision Config */\r\n    uint256 referralCommissionChargePercent;\r\n    uint256 referralCommissionChargeDivisor;\r\n    address payable referralChargeReceiver;\r\n    \r\n    // Transaction Config \r\n    uint256 transactionChargePercent;\r\n    uint256 transactionChargeDivisor;\r\n    address payable transactionChargeReceiver;\r\n    \r\n    \r\n    \r\n    // List of authorizedCaller with escalated permissions\r\n    mapping(address => bool) authorizedCaller;\r\n\r\n   \r\n    /* ProductTx */\r\n    struct ProductTx {\r\n        string _txId;\r\n        string _id;\r\n        uint256 _depositedAmt;\r\n        uint256 _receivableAmt;\r\n        uint256 _feeAmt;\r\n        uint256 _paymentMode;\r\n        uint256 _pledgedFeePercent;\r\n        uint256 _pledgedFeeDivisor;\r\n        address payable _ownerAddress;\r\n    }\r\n    \r\n    // Product Info\r\n    struct ProductInfo {\r\n        string _id;\r\n        uint256 _priceInWei;\r\n        address payable _ownerAddress;\r\n        uint256 _pledgedFeePercent;\r\n        uint256 _pledgedFeeDivisor;\r\n        uint256 _paymentMode;\r\n    }\r\n\r\n   \r\n    // To Get Product TX Info\r\n    mapping(string => ProductTx) public initiatedProductTx;\r\n    mapping(string => ProductInfo) public initiatedProduct;\r\n    \r\n    // Events \r\n    event AuthorizedCaller(address _caller);\r\n    event DeAuthorizedCaller(address _caller);\r\n    \r\n    // Product Updates \r\n    event ProductInfoUpdated(string _id,\r\n        uint256 _priceInWei,\r\n        address payable _ownerAddress,\r\n        uint256 _pledgedFeePercent,\r\n        uint256 _pledgedFeeDivisor,\r\n        uint256 _paymentMode);\r\n    \r\n    // Transaction \r\n\r\n    event ConfigUpdated(\r\n        address payable _transactionChargeReceiver,\r\n        uint256 _transactionChargePercent,\r\n        uint256 _transactionChargeDivisor,\r\n        address payable _referralChargeReceiver,\r\n        uint256 _referralCommissionChargePercent,\r\n        uint256 _referralCommissionChargeDivisor,\r\n        uint256 _baseFeePercent,\r\n        uint256 _baseFeeDivisor\r\n    );\r\n    \r\n\r\n    event TransactionCompleted(\r\n        string _txId\r\n    );\r\n    \r\n \r\n\r\n    constructor(address payable _transactionChargeReceiver, address payable _referralChargeReceiver) public {\r\n        owner = msg.sender;\r\n        transactionChargeReceiver = _transactionChargeReceiver;\r\n        referralChargeReceiver = _referralChargeReceiver;\r\n    }\r\n\r\n    modifier onlyAuthorized() {\r\n        require(\r\n            authorizedCaller[msg.sender] == true || msg.sender == owner,\r\n            \"Only Authorized and Owner can perform this action\"\r\n        );\r\n        _;\r\n    }\r\n\r\n    function authorizeCaller(address _caller) public onlyOwner returns (bool) {\r\n        authorizedCaller[_caller] = true;\r\n        emit AuthorizedCaller(_caller);\r\n        return true;\r\n    }\r\n\r\n    function deAuthorizeCaller(address _caller)\r\n        public\r\n        onlyOwner\r\n        returns (bool)\r\n    {\r\n        authorizedCaller[_caller] = false;\r\n        emit DeAuthorizedCaller(_caller);\r\n        return true;\r\n    }\r\n\r\n        \r\n\r\n    function getConfig()\r\n        public\r\n        view\r\n        returns (\r\n            address _transactionChargeReceiver,\r\n            uint256 _transactionChargePercent,\r\n            uint256 _transactionChargeDivisor,\r\n            address _referralChargeReceiver,\r\n            uint256 _referralCommissionChargePercent,\r\n            uint256 _referralCommissionChargeDivisor,\r\n            uint256 _baseFeePercent,\r\n            uint256 _baseFeeDivisor\r\n        )\r\n    {\r\n        return (\r\n            transactionChargeReceiver,\r\n            transactionChargePercent,\r\n            transactionChargeDivisor,\r\n            referralChargeReceiver,\r\n            referralCommissionChargePercent,\r\n            referralCommissionChargeDivisor,\r\n            baseFeePercent,\r\n            baseFeeDivisor\r\n        );\r\n    }\r\n\r\n    function updateConfig(\r\n        address payable _transactionChargeReceiver,\r\n        uint256 _transactionChargePercent,\r\n        uint256 _transactionChargeDivisor,\r\n        address payable _referralChargeReceiver,\r\n        uint256 _referralCommissionChargePercent,\r\n        uint256 _referralCommissionChargeDivisor,\r\n        uint256 _baseFeePercent,\r\n        uint256 _baseFeeDivisor\r\n    ) public onlyAuthorized returns (bool) {\r\n        \r\n        // Base Fee \r\n        baseFeePercent = _baseFeePercent;\r\n        baseFeeDivisor = _baseFeeDivisor;\r\n        \r\n        // Transaction \r\n        transactionChargeReceiver = _transactionChargeReceiver;\r\n        transactionChargePercent = _transactionChargePercent;\r\n        transactionChargeDivisor = _transactionChargeDivisor;\r\n    \r\n        // Referral \r\n        referralChargeReceiver = _referralChargeReceiver;\r\n        referralCommissionChargePercent = _referralCommissionChargePercent;\r\n        referralCommissionChargeDivisor = _referralCommissionChargeDivisor;\r\n        \r\n        emit ConfigUpdated(\r\n            _transactionChargeReceiver,\r\n            _transactionChargePercent,\r\n            _transactionChargeDivisor,\r\n            _referralChargeReceiver,\r\n            _referralCommissionChargePercent,\r\n            _referralCommissionChargeDivisor,\r\n            _baseFeePercent,\r\n            _baseFeeDivisor\r\n        );\r\n\r\n        return true;\r\n    }\r\n    \r\n    \r\n\r\n    function updateProductInfo(\r\n        string memory _id,\r\n        uint256 _priceInWei,\r\n        uint256 _pledgedFeePercent,\r\n        uint256 _pledgedFeeDivisor,\r\n        uint256 _paymentMode) public \r\n        returns (bool)\r\n    {\r\n        /* Check if Product Already exist, if yes then check if updated by same owner*/\r\n        if(initiatedProduct[_id]._ownerAddress != address(0x0))\r\n        {\r\n            require(msg.sender == initiatedProduct[_id]._ownerAddress, \"Product can only be updated by owner only\");\r\n        }\r\n        \r\n        // To Ensure Pledged Percent are within Permissible limits (Should not exceed 100% and Should not be less than Base fee)\r\n        uint256 _baseCheckInt = 10 ** 18;\r\n        \r\n        uint256 _ceilInt = 0;\r\n        uint256 _ceilPercent = 100; \r\n        uint256 _ceilDivisor = 1;\r\n        \r\n        \r\n        uint256 _expectedInt = 0;\r\n        uint256 _actualInt = 0;\r\n        \r\n        \r\n        _ceilInt = _ceilPercent.mul(_baseCheckInt).div(_ceilDivisor.mul(100));\r\n        _expectedInt = baseFeePercent.mul(_baseCheckInt).div(baseFeeDivisor.mul(100));\r\n        _actualInt = _pledgedFeePercent.mul(_baseCheckInt).div(_pledgedFeeDivisor.mul(100));\r\n        \r\n        require(_actualInt >= _expectedInt, \"Pledged Fee Should be more than base fee \");\r\n        require(_actualInt < _ceilInt, \"Pledged Fee Should be less than 100%\");\r\n        \r\n        initiatedProduct[_id]._id = _id;\r\n        initiatedProduct[_id]._priceInWei = _priceInWei;\r\n        initiatedProduct[_id]._ownerAddress = msg.sender;\r\n        initiatedProduct[_id]._pledgedFeePercent = _pledgedFeePercent;\r\n        initiatedProduct[_id]._pledgedFeeDivisor = _pledgedFeeDivisor;\r\n        initiatedProduct[_id]._paymentMode = _paymentMode;\r\n        \r\n        emit ProductInfoUpdated( _id,\r\n         _priceInWei,\r\n         msg.sender,\r\n         _pledgedFeePercent,\r\n         _pledgedFeeDivisor,\r\n         _paymentMode);\r\n        \r\n        return true;\r\n    }\r\n    \r\n    \r\n    \r\n    function purchaseProductViaETH(\r\n        string memory _internalTxId,\r\n        string memory _productId,\r\n        bool _isReferredBuyer\r\n    ) public payable returns (bool){\r\n        \r\n        require(initiatedProductTx[_internalTxId]._ownerAddress == address(0x0),\"Transaction already processed\");\r\n        \r\n        /* Msg Value  */\r\n        uint256 _depositedAmt = msg.value;\r\n  \r\n        uint256 _baseRecievableAmt = 0;\r\n        uint256 _baseFeeAmt = 0;\r\n        \r\n        uint256 _adminFeeAmt = 0;\r\n        uint256 _referralFeeAmt = 0;\r\n        \r\n   \r\n        \r\n        \r\n        initiatedProductTx[_internalTxId]._txId = _internalTxId; \r\n        initiatedProductTx[_internalTxId]._id = _productId; \r\n        initiatedProductTx[_internalTxId]._paymentMode = 1; // Via Ether\r\n        initiatedProductTx[_internalTxId]._pledgedFeePercent = initiatedProduct[_productId]._pledgedFeePercent; \r\n        initiatedProductTx[_internalTxId]._pledgedFeeDivisor = initiatedProduct[_productId]._pledgedFeeDivisor; \r\n        initiatedProductTx[_internalTxId]._ownerAddress = initiatedProduct[_productId]._ownerAddress; \r\n        \r\n        \r\n        // Owner Address should not be equal to zero \r\n        require(initiatedProduct[_productId]._ownerAddress != address(0x0),\"Product does not exists\");\r\n        \r\n        \r\n        // Amount should be equal to product price , return any extra amount to sender \r\n        \r\n        require(initiatedProduct[_productId]._priceInWei == _depositedAmt, \"Exact Product Price should be provided\");\r\n        \r\n        \r\n        // Get Base Receivable and Fee Amount \r\n        \r\n        // Get Product Pledged Fee\r\n        _baseFeeAmt = initiatedProduct[_productId]._pledgedFeePercent.mul(_depositedAmt).div(initiatedProduct[_productId]._pledgedFeeDivisor.mul(100));\r\n        _baseRecievableAmt = _depositedAmt.sub(_baseFeeAmt);\r\n        \r\n        // Update Base Amounts\r\n        initiatedProductTx[_internalTxId]._depositedAmt = _depositedAmt;\r\n        initiatedProductTx[_internalTxId]._receivableAmt = _baseRecievableAmt;\r\n        initiatedProductTx[_internalTxId]._feeAmt = _baseFeeAmt;\r\n        \r\n        \r\n        \r\n        \r\n\r\n        if (transactionChargeDivisor > 0 && transactionChargePercent > 0) {\r\n            /* Calculate Transaction Fee */\r\n            \r\n            _adminFeeAmt = transactionChargePercent.mul(_baseFeeAmt).div(\r\n                transactionChargeDivisor.mul(100)\r\n            );\r\n         \r\n        }\r\n\r\n        /* Debit Referral Commision Fee if set */\r\n        if(referralCommissionChargeDivisor > 0 &&\r\n            referralCommissionChargePercent > 0){\r\n            _referralFeeAmt = referralCommissionChargePercent\r\n                .mul(_baseFeeAmt)\r\n                .div(referralCommissionChargeDivisor.mul(100));\r\n            }\r\n\r\n        if (\r\n            _isReferredBuyer == false\r\n        ) {\r\n            /* Calculate Referral Commision Fee */            \r\n            _adminFeeAmt = _adminFeeAmt.add(_referralFeeAmt);            \r\n        }\r\n\r\n        /* Send Transaction Receiver their share */\r\n        if (_adminFeeAmt > 0) {\r\n            transactionChargeReceiver.transfer(_adminFeeAmt);\r\n        }\r\n\r\n        /* Send Referral Receiver their share */\r\n        if (_referralFeeAmt > 0) {\r\n            referralChargeReceiver.transfer(_referralFeeAmt);\r\n        }\r\n        \r\n        \r\n        /* Transfer Leftover amount to product owner */\r\n        initiatedProduct[_productId]._ownerAddress.transfer(_baseRecievableAmt);\r\n\r\n      \r\n        emit TransactionCompleted(\r\n            initiatedProductTx[_internalTxId]._txId\r\n        );\r\n        \r\n        return true;\r\n    }\r\n\r\n    \r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_transactionChargeReceiver\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"_referralChargeReceiver\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_caller\",\"type\":\"address\"}],\"name\":\"AuthorizedCaller\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address payable\",\"name\":\"_transactionChargeReceiver\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_transactionChargePercent\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_transactionChargeDivisor\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address payable\",\"name\":\"_referralChargeReceiver\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_referralCommissionChargePercent\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_referralCommissionChargeDivisor\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_baseFeePercent\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_baseFeeDivisor\",\"type\":\"uint256\"}],\"name\":\"ConfigUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_caller\",\"type\":\"address\"}],\"name\":\"DeAuthorizedCaller\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"_id\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_priceInWei\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address payable\",\"name\":\"_ownerAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_pledgedFeePercent\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_pledgedFeeDivisor\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_paymentMode\",\"type\":\"uint256\"}],\"name\":\"ProductInfoUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"_txId\",\"type\":\"string\"}],\"name\":\"TransactionCompleted\",\"type\":\"event\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_caller\",\"type\":\"address\"}],\"name\":\"authorizeCaller\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_caller\",\"type\":\"address\"}],\"name\":\"deAuthorizeCaller\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getConfig\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"_transactionChargeReceiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_transactionChargePercent\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_transactionChargeDivisor\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_referralChargeReceiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_referralCommissionChargePercent\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_referralCommissionChargeDivisor\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_baseFeePercent\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_baseFeeDivisor\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"name\":\"initiatedProduct\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"_id\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"_priceInWei\",\"type\":\"uint256\"},{\"internalType\":\"address payable\",\"name\":\"_ownerAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_pledgedFeePercent\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_pledgedFeeDivisor\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_paymentMode\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"name\":\"initiatedProductTx\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"_txId\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_id\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"_depositedAmt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_receivableAmt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_feeAmt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_paymentMode\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_pledgedFeePercent\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_pledgedFeeDivisor\",\"type\":\"uint256\"},{\"internalType\":\"address payable\",\"name\":\"_ownerAddress\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"owned\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"string\",\"name\":\"_internalTxId\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_productId\",\"type\":\"string\"},{\"internalType\":\"bool\",\"name\":\"_isReferredBuyer\",\"type\":\"bool\"}],\"name\":\"purchaseProductViaETH\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_transactionChargeReceiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_transactionChargePercent\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_transactionChargeDivisor\",\"type\":\"uint256\"},{\"internalType\":\"address payable\",\"name\":\"_referralChargeReceiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_referralCommissionChargePercent\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_referralCommissionChargeDivisor\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_baseFeePercent\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_baseFeeDivisor\",\"type\":\"uint256\"}],\"name\":\"updateConfig\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"string\",\"name\":\"_id\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"_priceInWei\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_pledgedFeePercent\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_pledgedFeeDivisor\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_paymentMode\",\"type\":\"uint256\"}],\"name\":\"updateProductInfo\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"StandardProductPurchase","CompilerVersion":"v0.5.17+commit.d19bba13","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"0000000000000000000000009d222f983abcebcf814067b964d0e45ea9e3b9da0000000000000000000000009d222f983abcebcf814067b964d0e45ea9e3b9da","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"bzzr://29b9d51641cb3b247fa7f33be3bb503481406fa1cd1903f5df7573178ce01f63"}]}