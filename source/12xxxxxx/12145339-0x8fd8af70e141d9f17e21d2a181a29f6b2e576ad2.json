{"status":"1","message":"OK","result":[{"SourceCode":"//\r\n//        __  __    __  ________  _______    ______   ________ \r\n//       /  |/  |  /  |/        |/       \\  /      \\ /        |\r\n//   ____$$ |$$ |  $$ |$$$$$$$$/ $$$$$$$  |/$$$$$$  |$$$$$$$$/ \r\n//  /    $$ |$$ |__$$ |$$ |__    $$ |  $$ |$$ | _$$/ $$ |__    \r\n// /$$$$$$$ |$$    $$ |$$    |   $$ |  $$ |$$ |/    |$$    |   \r\n// $$ |  $$ |$$$$$$$$ |$$$$$/    $$ |  $$ |$$ |$$$$ |$$$$$/    \r\n// $$ \\__$$ |$$ |  $$ |$$ |_____ $$ |__$$ |$$ \\__$$ |$$ |_____ \r\n// $$    $$ |$$ |  $$ |$$       |$$    $$/ $$    $$/ $$       |\r\n//  $$$$$$$/ $$/   $$/ $$$$$$$$/ $$$$$$$/   $$$$$$/  $$$$$$$$/ \r\n//\r\n// dHEDGE DAO - https://dhedge.org\r\n//\r\n// MIT License\r\n// ===========\r\n//\r\n// Copyright (c) 2020 dHEDGE DAO\r\n//\r\n// Permission is hereby granted, free of charge, to any person obtaining a copy\r\n// of this software and associated documentation files (the \"Software\"), to deal\r\n// in the Software without restriction, including without limitation the rights\r\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\n// copies of the Software, and to permit persons to whom the Software is\r\n// furnished to do so, subject to the following conditions:\r\n//\r\n// The above copyright notice and this permission notice shall be included in all\r\n// copies or substantial portions of the Software.\r\n//\r\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\r\n//\r\n\r\n// File: contracts/ISynthetix.sol\r\n\r\npragma solidity ^0.6.2;\r\n\r\ninterface ISynthetix {\r\n    function exchange(\r\n        bytes32 sourceCurrencyKey,\r\n        uint256 sourceAmount,\r\n        bytes32 destinationCurrencyKey\r\n    ) external returns (uint256 amountReceived);\r\n\r\n    function exchangeWithTracking(\r\n        bytes32 sourceCurrencyKey,\r\n        uint256 sourceAmount,\r\n        bytes32 destinationCurrencyKey,\r\n        address originator,\r\n        bytes32 trackingCode\r\n    ) external returns (uint256 amountReceived);\r\n\r\n    function synths(bytes32 key)\r\n        external\r\n        view\r\n        returns (address synthTokenAddress);\r\n\r\n    function settle(bytes32 currencyKey)\r\n        external\r\n        returns (\r\n            uint256 reclaimed,\r\n            uint256 refunded,\r\n            uint256 numEntriesSettled\r\n        );\r\n}\r\n\r\n// File: contracts/ISynth.sol\r\n\r\npragma solidity ^0.6.2;\r\n\r\ninterface ISynth {\r\n    function proxy() external view returns (address);\r\n\r\n    // Mutative functions\r\n    function transferAndSettle(address to, uint256 value)\r\n        external\r\n        returns (bool);\r\n\r\n    function transferFromAndSettle(\r\n        address from,\r\n        address to,\r\n        uint256 value\r\n    ) external returns (bool);\r\n}\r\n\r\n// File: contracts/IAddressResolver.sol\r\n\r\npragma solidity ^0.6.2;\r\n\r\ninterface IAddressResolver {\r\n    function getAddress(bytes32 name) external view returns (address);\r\n}\r\n\r\n// File: contracts/IExchanger.sol\r\n\r\npragma solidity ^0.6.2;\r\n\r\ninterface IExchanger {\r\n\r\n    function settle(address from, bytes32 currencyKey)\r\n        external\r\n        returns (\r\n            uint reclaimed,\r\n            uint refunded,\r\n            uint numEntries\r\n        );\r\n\r\n    function maxSecsLeftInWaitingPeriod(address account, bytes32 currencyKey) external view returns (uint);\r\n\r\n    function settlementOwing(address account, bytes32 currencyKey)\r\n        external\r\n        view\r\n        returns (\r\n            uint reclaimAmount,\r\n            uint rebateAmount,\r\n            uint numEntries\r\n        );\r\n\r\n}\r\n\r\n// File: contracts/IExchangeRates.sol\r\n\r\npragma solidity ^0.6.2;\r\n\r\ninterface IExchangeRates {\r\n    function effectiveValue(\r\n        bytes32 sourceCurrencyKey,\r\n        uint256 sourceAmount,\r\n        bytes32 destinationCurrencyKey\r\n    ) external view returns (uint256);\r\n\r\n    function rateForCurrency(bytes32 currencyKey)\r\n        external\r\n        view\r\n        returns (uint256);\r\n}\r\n\r\n// File: contracts/IDHedge.sol\r\n\r\npragma solidity ^0.6.2;\r\n\r\ninterface IDHedge {\r\n\r\n    function totalSupply() external view returns (uint256);\r\n    function getSupportedAssets() external view returns (bytes32[] memory);\r\n    function assetValue(bytes32 key) external view returns (uint256);\r\n    function getAssetProxy(bytes32 key) external view returns (address);\r\n    function setLastDeposit(address investor) external;\r\n    function tokenPriceAtLastFeeMint() external view returns (uint256);\r\n    function availableManagerFee() external view returns (uint256);\r\n}\r\n\r\n// File: contracts/IPoolDirectory.sol\r\n\r\n//\r\n//        __  __    __  ________  _______    ______   ________ \r\n//       /  |/  |  /  |/        |/       \\  /      \\ /        |\r\n//   ____$$ |$$ |  $$ |$$$$$$$$/ $$$$$$$  |/$$$$$$  |$$$$$$$$/ \r\n//  /    $$ |$$ |__$$ |$$ |__    $$ |  $$ |$$ | _$$/ $$ |__    \r\n// /$$$$$$$ |$$    $$ |$$    |   $$ |  $$ |$$ |/    |$$    |   \r\n// $$ |  $$ |$$$$$$$$ |$$$$$/    $$ |  $$ |$$ |$$$$ |$$$$$/    \r\n// $$ \\__$$ |$$ |  $$ |$$ |_____ $$ |__$$ |$$ \\__$$ |$$ |_____ \r\n// $$    $$ |$$ |  $$ |$$       |$$    $$/ $$    $$/ $$       |\r\n//  $$$$$$$/ $$/   $$/ $$$$$$$$/ $$$$$$$/   $$$$$$/  $$$$$$$$/ \r\n//\r\n// dHEDGE DAO - https://dhedge.org\r\n//\r\n// MIT License\r\n// ===========\r\n//\r\n// Copyright (c) 2020 dHEDGE DAO\r\n//\r\n// Permission is hereby granted, free of charge, to any person obtaining a copy\r\n// of this software and associated documentation files (the \"Software\"), to deal\r\n// in the Software without restriction, including without limitation the rights\r\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\n// copies of the Software, and to permit persons to whom the Software is\r\n// furnished to do so, subject to the following conditions:\r\n//\r\n// The above copyright notice and this permission notice shall be included in all\r\n// copies or substantial portions of the Software.\r\n//\r\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\r\n//\r\n\r\npragma solidity ^0.6.2;\r\n\r\ninterface IPoolDirectory {\r\n    function isPool(address pool) external view returns (bool);\r\n}\r\n\r\n// File: contracts/IHasFeeInfo.sol\r\n\r\n//\r\n//        __  __    __  ________  _______    ______   ________ \r\n//       /  |/  |  /  |/        |/       \\  /      \\ /        |\r\n//   ____$$ |$$ |  $$ |$$$$$$$$/ $$$$$$$  |/$$$$$$  |$$$$$$$$/ \r\n//  /    $$ |$$ |__$$ |$$ |__    $$ |  $$ |$$ | _$$/ $$ |__    \r\n// /$$$$$$$ |$$    $$ |$$    |   $$ |  $$ |$$ |/    |$$    |   \r\n// $$ |  $$ |$$$$$$$$ |$$$$$/    $$ |  $$ |$$ |$$$$ |$$$$$/    \r\n// $$ \\__$$ |$$ |  $$ |$$ |_____ $$ |__$$ |$$ \\__$$ |$$ |_____ \r\n// $$    $$ |$$ |  $$ |$$       |$$    $$/ $$    $$/ $$       |\r\n//  $$$$$$$/ $$/   $$/ $$$$$$$$/ $$$$$$$/   $$$$$$/  $$$$$$$$/ \r\n//\r\n// dHEDGE DAO - https://dhedge.org\r\n//\r\n// MIT License\r\n// ===========\r\n//\r\n// Copyright (c) 2020 dHEDGE DAO\r\n//\r\n// Permission is hereby granted, free of charge, to any person obtaining a copy\r\n// of this software and associated documentation files (the \"Software\"), to deal\r\n// in the Software without restriction, including without limitation the rights\r\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\n// copies of the Software, and to permit persons to whom the Software is\r\n// furnished to do so, subject to the following conditions:\r\n//\r\n// The above copyright notice and this permission notice shall be included in all\r\n// copies or substantial portions of the Software.\r\n//\r\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\r\n//\r\n\r\npragma solidity ^0.6.2;\r\n\r\ninterface IHasFeeInfo {\r\n    // Manager fee\r\n    function getPoolManagerFee(address pool) external view returns (uint256, uint256);\r\n    function setPoolManagerFeeNumerator(address pool, uint256 numerator) external;\r\n\r\n    function getMaximumManagerFeeNumeratorChange() external view returns (uint256);\r\n    function getManagerFeeNumeratorChangeDelay() external view returns (uint256);\r\n   \r\n    // Exit fee\r\n    function getExitFee() external view returns (uint256, uint256);\r\n    function getExitFeeCooldown() external view returns (uint256);\r\n\r\n    // Synthetix tracking\r\n    function getTrackingCode() external view returns (bytes32);\r\n}\r\n\r\n// File: @openzeppelin/contracts-ethereum-package/contracts/token/ERC20/IERC20.sol\r\n\r\npragma solidity ^0.6.0;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n// File: @openzeppelin/contracts-ethereum-package/contracts/Initializable.sol\r\n\r\npragma solidity >=0.4.24 <0.7.0;\r\n\r\n\r\n/**\r\n * @title Initializable\r\n *\r\n * @dev Helper contract to support initializer functions. To use it, replace\r\n * the constructor with a function that has the `initializer` modifier.\r\n * WARNING: Unlike constructors, initializer functions must be manually\r\n * invoked. This applies both to deploying an Initializable contract, as well\r\n * as extending an Initializable contract via inheritance.\r\n * WARNING: When used with inheritance, manual care must be taken to not invoke\r\n * a parent initializer twice, or ensure that all initializers are idempotent,\r\n * because this is not dealt with automatically as with constructors.\r\n */\r\ncontract Initializable {\r\n\r\n  /**\r\n   * @dev Indicates that the contract has been initialized.\r\n   */\r\n  bool private initialized;\r\n\r\n  /**\r\n   * @dev Indicates that the contract is in the process of being initialized.\r\n   */\r\n  bool private initializing;\r\n\r\n  /**\r\n   * @dev Modifier to use in the initializer function of a contract.\r\n   */\r\n  modifier initializer() {\r\n    require(initializing || isConstructor() || !initialized, \"Contract instance has already been initialized\");\r\n\r\n    bool isTopLevelCall = !initializing;\r\n    if (isTopLevelCall) {\r\n      initializing = true;\r\n      initialized = true;\r\n    }\r\n\r\n    _;\r\n\r\n    if (isTopLevelCall) {\r\n      initializing = false;\r\n    }\r\n  }\r\n\r\n  /// @dev Returns true if and only if the function is running in the constructor\r\n  function isConstructor() private view returns (bool) {\r\n    // extcodesize checks the size of the code stored in an address, and\r\n    // address returns the current address. Since the code is still not\r\n    // deployed when running a constructor, any checks on its code size will\r\n    // yield zero, making it an effective way to detect if a contract is\r\n    // under construction or not.\r\n    address self = address(this);\r\n    uint256 cs;\r\n    assembly { cs := extcodesize(self) }\r\n    return cs == 0;\r\n  }\r\n\r\n  // Reserved storage space to allow for layout changes in the future.\r\n  uint256[50] private ______gap;\r\n}\r\n\r\n// File: @openzeppelin/contracts-ethereum-package/contracts/math/SafeMath.sol\r\n\r\npragma solidity ^0.6.0;\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        // Solidity only automatically asserts when dividing by 0\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts with custom message when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts-ethereum-package/contracts/GSN/Context.sol\r\n\r\npragma solidity ^0.6.0;\r\n\r\n\r\n/*\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with GSN meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\ncontract ContextUpgradeSafe is Initializable {\r\n    // Empty internal constructor, to prevent people from mistakenly deploying\r\n    // an instance of this contract, which should be used via inheritance.\r\n\r\n    function __Context_init() internal initializer {\r\n        __Context_init_unchained();\r\n    }\r\n\r\n    function __Context_init_unchained() internal initializer {\r\n\r\n\r\n    }\r\n\r\n\r\n    function _msgSender() internal view virtual returns (address payable) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes memory) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n\r\n    uint256[50] private __gap;\r\n}\r\n\r\n// File: @openzeppelin/contracts-ethereum-package/contracts/access/Ownable.sol\r\n\r\npragma solidity ^0.6.0;\r\n\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\ncontract OwnableUpgradeSafe is Initializable, ContextUpgradeSafe {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n\r\n    function __Ownable_init() internal initializer {\r\n        __Context_init_unchained();\r\n        __Ownable_init_unchained();\r\n    }\r\n\r\n    function __Ownable_init_unchained() internal initializer {\r\n\r\n\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n\r\n    }\r\n\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n\r\n    uint256[49] private __gap;\r\n}\r\n\r\n// File: @openzeppelin/contracts-ethereum-package/contracts/cryptography/ECDSA.sol\r\n\r\npragma solidity ^0.6.0;\r\n\r\n/**\r\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\r\n *\r\n * These functions can be used to verify that a message was signed by the holder\r\n * of the private keys of a given address.\r\n */\r\nlibrary ECDSA {\r\n    /**\r\n     * @dev Returns the address that signed a hashed message (`hash`) with\r\n     * `signature`. This address can then be used for verification purposes.\r\n     *\r\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\r\n     * this function rejects them by requiring the `s` value to be in the lower\r\n     * half order, and the `v` value to be either 27 or 28.\r\n     *\r\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\r\n     * verification to be secure: it is possible to craft signatures that\r\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\r\n     * this is by receiving a hash of the original message (which may otherwise\r\n     * be too long), and then calling {toEthSignedMessageHash} on it.\r\n     */\r\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\r\n        // Check the signature length\r\n        if (signature.length != 65) {\r\n            revert(\"ECDSA: invalid signature length\");\r\n        }\r\n\r\n        // Divide the signature in r, s and v variables\r\n        bytes32 r;\r\n        bytes32 s;\r\n        uint8 v;\r\n\r\n        // ecrecover takes the signature parameters, and the only way to get them\r\n        // currently is to use assembly.\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly {\r\n            r := mload(add(signature, 0x20))\r\n            s := mload(add(signature, 0x40))\r\n            v := byte(0, mload(add(signature, 0x60)))\r\n        }\r\n\r\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\r\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\r\n        // the valid range for s in (281): 0 < s < secp256k1n ÷ 2 + 1, and for v in (282): v ∈ {27, 28}. Most\r\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\r\n        //\r\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\r\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\r\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\r\n        // these malleable signatures as well.\r\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\r\n            revert(\"ECDSA: invalid signature 's' value\");\r\n        }\r\n\r\n        if (v != 27 && v != 28) {\r\n            revert(\"ECDSA: invalid signature 'v' value\");\r\n        }\r\n\r\n        // If the signature is valid (and not malleable), return the signer address\r\n        address signer = ecrecover(hash, v, r, s);\r\n        require(signer != address(0), \"ECDSA: invalid signature\");\r\n\r\n        return signer;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\r\n     * replicates the behavior of the\r\n     * https://github.com/ethereum/wiki/wiki/JSON-RPC#eth_sign[`eth_sign`]\r\n     * JSON-RPC method.\r\n     *\r\n     * See {recover}.\r\n     */\r\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\r\n        // 32 is the length in bytes of hash,\r\n        // enforced by the type signature above\r\n        return keccak256(abi.encodePacked(\"\\x19Ethereum Signed Message:\\n32\", hash));\r\n    }\r\n}\r\n\r\n// File: contracts/DHPTSwap.sol\r\n\r\npragma solidity ^0.6.2;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\ncontract DHPTSwap is Initializable, OwnableUpgradeSafe {\r\n    using SafeMath for uint256;\r\n\r\n    IAddressResolver public addressResolver;\r\n    address public factory;\r\n    address public oracle;\r\n\r\n    bool public enableBuy;\r\n    bool public enableSell;\r\n    bool public enableOracleBuy;\r\n    bool public enableOracleSell;\r\n    \r\n    uint8 public oracleBlockBias;\r\n\r\n    mapping(address => uint256) public dhptWhitelist;\r\n\r\n    bytes32 private constant _EXCHANGE_RATES_KEY = \"ExchangeRates\";\r\n    bytes32 private constant _EXCHANGER_KEY = \"Exchanger\";\r\n    bytes32 private constant _SYNTHETIX_KEY = \"Synthetix\";\r\n    bytes32 private constant _SUSD_KEY = \"sUSD\";\r\n    address public dao;\r\n    mapping(bytes32 => bool) public dhptFromEnabled;\r\n    mapping(address => uint8) public stableCoins;\r\n\r\n    event SellDHPT(\r\n        address fundAddress,\r\n        address investor,\r\n        uint256 susdAmount,\r\n        uint256 dhptAmount,\r\n        uint256 tokenPrice,\r\n        uint256 time,\r\n        bool oracleSwap\r\n    );\r\n\r\n    event BuyDHPT(\r\n        address fundAddress,\r\n        address investor,\r\n        uint256 susdAmount,\r\n        uint256 dhptAmount,\r\n        uint256 tokenPrice,\r\n        uint256 time,\r\n        bool oracleSwap\r\n    );\r\n\r\n    event SwapDHPT(\r\n        address fundAddressA,\r\n        uint256 tokenPriceA,\r\n        uint256 amountA,\r\n        address fundAddressB,\r\n        uint256 tokenPriceB,\r\n        uint256 amountB,\r\n        address investor,\r\n        uint256 time,\r\n        bool oracleSwap\r\n    );\r\n\r\n    function initialize(IAddressResolver _addressResolver, address _factory, address _oracle) public initializer {\r\n        OwnableUpgradeSafe.__Ownable_init();\r\n\r\n        enableBuy = true;\r\n        enableSell = true;\r\n        enableOracleBuy = false;\r\n        enableOracleSell = false;\r\n\r\n        addressResolver = _addressResolver;\r\n        factory = _factory;\r\n        oracle = _oracle;\r\n        oracleBlockBias = 25;\r\n    }\r\n\r\n    function setStableCoin(address stableCoin, uint8 tokenPrecision) public onlyOwner {\r\n        stableCoins[stableCoin] = tokenPrecision;\r\n    }\r\n\r\n    // BUY & SELL\r\n\r\n    // user selling DHPT for sUSD\r\n    function sellDHPT(address poolAddress, uint256 dhptAmount, address stableCoin) public {\r\n        uint8 stableCoinPrecision = stableCoins[stableCoin];\r\n        require(stableCoinPrecision > 0, \"selected stable coin is disabled\");\r\n\r\n        require(enableSell, \"sell disabled\");\r\n        require(_canSellDhpt(poolAddress, dhptAmount), \"unable to sell tokens\");\r\n        require(dhptAmount > 10000, \"amount too small\");\r\n       \r\n        uint256 poolPrice = tokenPriceWithSettle(poolAddress);\r\n        require(poolPrice > 0, \"poolPrice is not valid value\");\r\n\r\n        require(\r\n            IERC20(poolAddress).transferFrom(\r\n                msg.sender,\r\n                address(this),\r\n                dhptAmount\r\n            ),\r\n            \"token transfer failed\"\r\n        );\r\n\r\n        uint256 stableCoinAmount = dhptAmount.mul(poolPrice).div(10**uint(stableCoinPrecision));\r\n\r\n        require(\r\n            IERC20(stableCoin).transfer(\r\n                msg.sender, stableCoinAmount\r\n            ),\r\n            \"stable coin transfer failed\"\r\n        );\r\n        \r\n        emit SellDHPT(\r\n            poolAddress,\r\n            msg.sender,\r\n            stableCoinAmount,\r\n            dhptAmount,\r\n            poolPrice,\r\n            block.timestamp,\r\n            false\r\n        );\r\n    }\r\n\r\n    // user buying DHPT for sUSD. consider DHPT 24h lockup\r\n    function buyDHPT(address poolAddress, address stableCoin, uint256 stableCoinAmount) public {\r\n        uint8 stableCoinPrecision = stableCoins[stableCoin];\r\n        require(stableCoinPrecision > 0, \"selected stable coin is disabled\");\r\n        \r\n        require(enableBuy, \"buy disabled\");\r\n        require(dhptWhitelist[poolAddress] > 0, \"pool not whitelisted\");\r\n        require(stableCoinAmount > 10000, \"amount too small\");\r\n\r\n        uint256 poolPrice = tokenPriceWithSettle(poolAddress);\r\n        uint256 dhptAmount = stableCoinAmount.mul(10**uint(stableCoinPrecision)).div(poolPrice);\r\n        IDHedge(poolAddress).setLastDeposit(msg.sender);\r\n        \r\n        require(\r\n            IERC20(stableCoin).transferFrom(\r\n                msg.sender,\r\n                address(this),\r\n                stableCoinAmount\r\n            ),\r\n            \"stable coin transfer failed\"\r\n        );\r\n      \r\n        require(\r\n            IERC20(poolAddress).transfer(msg.sender, dhptAmount),\r\n            \"pool-token transfer failed\"\r\n        );\r\n\r\n        emit BuyDHPT(\r\n            poolAddress,\r\n            msg.sender,\r\n            stableCoinAmount,\r\n            dhptAmount,\r\n            poolPrice,\r\n            block.timestamp,\r\n            false\r\n        );\r\n    }\r\n    \r\n    // user buying DHPT for sUSD. consider DHPT 24h lockup\r\n    function swapDHPT(address poolAddressA, uint256 poolAmountA, address poolAddressB) public {\r\n       require(enableBuy, \"buy disabled\");\r\n       require(enableSell, \"sell disabled\");\r\n       require(dhptWhitelist[poolAddressA] > 0, \"from-token not whitelisted\");\r\n       require(poolAmountA > 10000, \"amount too small\");\r\n       require(dhptWhitelist[poolAddressB] > 0, \"to-token not whitelisted\");\r\n\r\n       uint256 poolPriceA = tokenPriceWithSettle(poolAddressA);\r\n       uint256 sUsdAmount = poolAmountA.mul(poolPriceA).div(10**18);\r\n\r\n       uint256 poolPriceB = tokenPriceWithSettle(poolAddressB);\r\n       uint256 poolAmountB = sUsdAmount.mul(10**18).div(poolPriceB);\r\n       IDHedge(poolAddressB).setLastDeposit(msg.sender);\r\n\r\n        require(\r\n            IERC20(poolAddressA).transferFrom(\r\n                msg.sender,\r\n                address(this),\r\n                poolAmountA\r\n            ),\r\n            \"from-token transfer failed\"\r\n        );\r\n      \r\n        require(\r\n            IERC20(poolAddressB).transfer(msg.sender, poolAmountB),\r\n            \"to-token transfer failed\"\r\n        );\r\n\r\n        emit SwapDHPT(\r\n            poolAddressA,\r\n            poolPriceA,\r\n            poolAmountA,\r\n            poolAddressB,\r\n            poolPriceB,\r\n            poolAmountB,\r\n            msg.sender,\r\n            block.timestamp,\r\n            false\r\n        );\r\n    }\r\n    \r\n\r\n    // ORACLE FUNCTIONS\r\n    \r\n    function oracleBuyDHPT(address poolAddress, address stableCoin, uint256 stableCoinAmount, uint256 blockNumber, uint256 poolPrice, bytes memory signature)\r\n       public\r\n    {\r\n        _requireOracle(enableOracleBuy, stableCoinAmount, blockNumber);\r\n        uint8 stableCoinPrecision = stableCoins[stableCoin];\r\n        require(stableCoinPrecision > 0, \"selected stable coin is disabled\");\r\n        \r\n        require(dhptWhitelist[poolAddress] > 0, \"pool not whitelisted\");\r\n        require(_isOracleSigValid(msg.sender, blockNumber, poolAddress, poolPrice, stableCoinAmount, signature), \"signature invalid\");\r\n        uint256 dhptAmount = stableCoinAmount.mul(10**uint(stableCoinPrecision)).div(poolPrice);\r\n\r\n        IDHedge(poolAddress).setLastDeposit(msg.sender);\r\n        \r\n        require(\r\n            IERC20(stableCoin).transferFrom(\r\n                msg.sender,\r\n                address(this),\r\n                stableCoinAmount\r\n            ),\r\n            \"stable coin transfer failed\"\r\n        );\r\n\r\n        require(\r\n            IERC20(poolAddress).transfer(msg.sender, dhptAmount),\r\n            \"token transfer failed\"\r\n        );\r\n\r\n        emit BuyDHPT(\r\n            poolAddress,\r\n            msg.sender,\r\n            stableCoinAmount,\r\n            dhptAmount,\r\n            poolPrice,\r\n            block.timestamp,\r\n            true\r\n        );\r\n        \r\n    }\r\n    \r\n    function oracleSellDHPT(address poolAddress, address stableCoin, uint256 dhptAmount, uint256 blockNumber, uint256 poolPrice, bytes memory signature)\r\n       public\r\n    {\r\n        _requireOracle(enableOracleSell, dhptAmount, blockNumber);\r\n        uint8 stableCoinPrecision = stableCoins[stableCoin];\r\n        require(stableCoinPrecision > 0, \"selected stable coin is disabled\");        \r\n        require(_canSellDhpt(poolAddress, dhptAmount), \"unable to sell tokens\");\r\n       \r\n        uint256 stableCoinAmount = dhptAmount.mul(poolPrice).div(10**uint(stableCoinPrecision));\r\n        require(_isOracleSigValid(msg.sender, blockNumber, poolAddress, poolPrice, stableCoinAmount, signature), \"signature invalid\");\r\n        \r\n        require(\r\n            IERC20(poolAddress).transferFrom(\r\n                msg.sender,\r\n                address(this),\r\n                dhptAmount\r\n            ),\r\n            \"token transfer failed\"\r\n        );\r\n\r\n       \r\n        require(\r\n            IERC20(stableCoin).transfer(\r\n                msg.sender, stableCoinAmount\r\n            ),\r\n            \"stable coin transfer failed\"\r\n        );\r\n\r\n        emit SellDHPT(\r\n            poolAddress,\r\n            msg.sender,\r\n            stableCoinAmount,\r\n            dhptAmount,\r\n            poolPrice,\r\n            block.timestamp,\r\n            true\r\n        );\r\n    }\r\n\r\n    // oracle swap buy DHPT from external sources of DHPT liquidity\r\n    function oracleBuyDHPTFrom(address poolAddress, address fromAddress, uint256 susdAmount, uint256 blockNumber, uint256 poolPrice, bytes memory signature) \r\n        public\r\n    {\r\n        _requireOracle(enableOracleBuy, susdAmount, blockNumber);\r\n        require(_isOracleSigValid(msg.sender, blockNumber, poolAddress, poolPrice, susdAmount, signature), \"signature invalid\");\r\n        require(dhptWhitelist[poolAddress] > 0, \"pool not whitelisted\");\r\n\r\n        uint256 dhptAmount = susdAmount.mul(10**18).div(poolPrice);\r\n        require(_dhptFromEnabled(poolAddress, fromAddress), \"source liquidity disabled\");\r\n        IDHedge(poolAddress).setLastDeposit(msg.sender);\r\n\r\n        require(\r\n            IERC20(_getAssetProxy(_SUSD_KEY)).transferFrom(\r\n                msg.sender,\r\n                fromAddress,\r\n                susdAmount\r\n            ),\r\n            \"susd transfer failed\"\r\n        );\r\n\r\n        require(\r\n            IERC20(poolAddress).transferFrom(\r\n                fromAddress,\r\n                msg.sender,\r\n                dhptAmount\r\n            ),\r\n            \"token transfer failed\"\r\n        );\r\n\r\n        emit BuyDHPT(\r\n            poolAddress,\r\n            msg.sender,\r\n            susdAmount,\r\n            dhptAmount,\r\n            poolPrice,\r\n            block.timestamp,\r\n            true\r\n        );\r\n    }\r\n\r\n    function oracleSwapDHPT(address poolAddressA, uint256 poolAmountA, uint256 poolPriceA, address poolAddressB,\r\n                             uint256 poolPriceB, uint256 blockNumber, bytes memory signature)\r\n        public\r\n    {\r\n        _requireOracle(enableOracleBuy && enableOracleSell, poolAmountA, blockNumber);\r\n        require(_canSellDhpt(poolAddressA, poolAmountA), \"unable to sell tokens\");\r\n        require(dhptWhitelist[poolAddressB] > 0, \"pool not whitelisted\");\r\n\r\n       //swap logic starts here\r\n       require(_isOracleSwapSigValid(msg.sender, blockNumber, poolAddressA, poolPriceA, poolAmountA, poolAddressB, poolPriceB, signature), \"signature invalid\");\r\n\r\n        require(\r\n            IERC20(poolAddressA).transferFrom(\r\n                msg.sender,\r\n                address(this),\r\n                poolAmountA\r\n            ),\r\n            \"from-token transfer failed\"\r\n        );\r\n\r\n        uint256 poolAmountB = (poolAmountA.mul(poolPriceA)).div(poolPriceB);\r\n\r\n        require(\r\n            IERC20(poolAddressB).transfer(msg.sender, poolAmountB),\r\n            \"to-token transfer failed\"\r\n        );\r\n\r\n        emit SwapDHPT(\r\n            poolAddressA,\r\n            poolPriceA,\r\n            poolAmountA,\r\n            poolAddressB,\r\n            poolPriceB,\r\n            poolAmountB,\r\n            msg.sender,\r\n            block.timestamp,\r\n            true\r\n        );\r\n    }\r\n\r\n    function _requireOracle(bool enableOracle, uint256 amount, uint256 blockNumber)\r\n        internal\r\n        view\r\n    {\r\n        require(blockNumber.add(oracleBlockBias) > block.number, \"transaction timed out\");\r\n        require(enableOracle, \"oracle disabled\");\r\n        require(amount > 10000, \"amount too small\");\r\n        require(blockNumber <= block.number, \"invalid block number\");\r\n    }\r\n    \r\n    function _isOracleSigValid(address sender, uint256 blockNumber, address poolAddress, uint256 poolPrice, uint256 amount, bytes memory signature)\r\n        internal\r\n        view\r\n        returns (bool)\r\n    {\r\n        bytes32 hash = keccak256(abi.encodePacked(sender, blockNumber, poolAddress, poolPrice, amount));\r\n        bytes32 ethHash = ECDSA.toEthSignedMessageHash(hash);\r\n        \r\n        if (ECDSA.recover(ethHash, signature) == oracle) {\r\n            return true;\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    function _isOracleSwapSigValid(address sender, uint256 blockNumber, address poolAddressA, uint256 poolPriceA, uint256 poolAmountA, address poolAddressB, uint256 poolPriceB, bytes memory signature)\r\n        internal\r\n        view\r\n        returns (bool)\r\n    {\r\n        bytes32 hash = keccak256(abi.encodePacked(sender, blockNumber, poolAddressA, poolPriceA, poolAmountA, poolAddressB, poolPriceB ));\r\n        bytes32 ethHash = ECDSA.toEthSignedMessageHash(hash);\r\n        \r\n        if (ECDSA.recover(ethHash, signature) == oracle) {\r\n            return true;\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    function dhptFromLiquidity(address poolAddress, address fromAddress)\r\n    public\r\n    view\r\n    returns (uint256)\r\n    {\r\n        if (_dhptFromEnabled(poolAddress, fromAddress)) {\r\n            return IERC20(poolAddress).allowance(fromAddress, address(this));\r\n        } else {\r\n            return 0;\r\n        }\r\n    }\r\n\r\n    function enableLiquidity(address[] memory poolAddresses, bool[] memory enabled)\r\n        public\r\n    {\r\n        require(poolAddresses.length == enabled.length, \"invalid input lengths\");\r\n\r\n        for (uint256 i = 0; i < poolAddresses.length; i++) {\r\n            bytes32 hash = keccak256(abi.encodePacked(poolAddresses[i], msg.sender));\r\n            dhptFromEnabled[hash] = enabled[i];\r\n        }\r\n    }\r\n\r\n    function _dhptFromEnabled(address poolAddress, address fromAddress)\r\n        internal\r\n        view\r\n        returns (bool)\r\n    {\r\n        bytes32 hash = keccak256(abi.encodePacked(poolAddress, fromAddress));\r\n        return dhptFromEnabled[hash];\r\n    }\r\n\r\n\r\n    // ADMIN\r\n\r\n    // whitelist dHEDGE pools the contract will accept tokens from\r\n    function whitelistDhpt(address[] memory addresses, uint256[] memory amounts)\r\n        public\r\n        onlyOwner\r\n    {\r\n        require(addresses.length == amounts.length, \"invalid input lengths\");\r\n\r\n        for (uint256 i = 0; i < addresses.length; i++) {\r\n            require(IPoolDirectory(factory).isPool(addresses[i]), \"not a pool\");\r\n\r\n            dhptWhitelist[addresses[i]] = amounts[i];\r\n        }\r\n    }\r\n\r\n    function setAddressResolver(IAddressResolver _addressResolver)\r\n        public\r\n        onlyOwner\r\n    {\r\n        addressResolver = _addressResolver;\r\n    }\r\n    \r\n    function setFactory(address _factory)\r\n        public\r\n        onlyOwner\r\n    {\r\n        factory = _factory;\r\n    }\r\n\r\n    function setDao(address _dao)\r\n        public\r\n        onlyOwner\r\n    {\r\n        dao = _dao;\r\n    }\r\n    \r\n    function setOracle(address _oracle)\r\n        public\r\n        onlyOwner\r\n    {\r\n        oracle = _oracle;\r\n    }\r\n    \r\n    function setOracleBlockBias(uint8 _oracleBlockBias)\r\n        public\r\n        onlyOwner\r\n    {\r\n        oracleBlockBias = _oracleBlockBias;\r\n    }\r\n\r\n    function withdrawToken(address tokenAddress, uint256 amount)\r\n        public\r\n        onlyDao\r\n    {\r\n        require(\r\n            IERC20(tokenAddress).transfer(\r\n                dao,\r\n                amount\r\n            ),\r\n            \"token transfer failed\"\r\n        );\r\n    }\r\n\r\n    function withdrawTokenTo(address tokenAddress, uint256 amount, address toAddress)\r\n        public\r\n        onlyDao\r\n    {\r\n        require(\r\n            IERC20(tokenAddress).transfer(\r\n                toAddress,\r\n                amount\r\n                ),\r\n            \"token transfer failed\"\r\n            );\r\n    }\r\n\r\n    function enableBuySell(bool _enableBuy, bool _enableSell, bool _enableOracleBuy, bool _enableOracleSell)\r\n        public\r\n        onlyOwner\r\n    {\r\n        enableBuy = _enableBuy;\r\n        enableSell = _enableSell;\r\n        enableOracleBuy = _enableOracleBuy;\r\n        enableOracleSell = _enableOracleSell;\r\n    }\r\n    \r\n\r\n    // VIEWS\r\n\r\n    function _canSellDhpt(address poolAddress, uint256 dhptAmount)\r\n        internal\r\n        view\r\n        returns (bool)\r\n    {\r\n        uint256 dhptBalance = tokenBalanceOf(poolAddress);\r\n        if (dhptWhitelist[poolAddress] >= dhptBalance.add(dhptAmount)) {\r\n            return true;\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    function tokenBalanceOf(address tokenAddress)\r\n        public\r\n        view\r\n        returns (uint256)\r\n    {\r\n        return IERC20(tokenAddress).balanceOf(address(this));\r\n    }\r\n\r\n    function _availDhptToSell(address poolAddress)\r\n        internal\r\n        view\r\n        returns (uint256)\r\n    {\r\n        uint256 dhptBalance = tokenBalanceOf(poolAddress);\r\n        return dhptWhitelist[poolAddress].sub(dhptBalance);\r\n    }\r\n\r\n    // maximum DHPT that can be sold by the user taking into account contract sUSD balance\r\n    function maxDhptToSell(address poolAddress) public view returns (uint256) {\r\n        uint256 availDhpt = _availDhptToSell(poolAddress);\r\n        uint256 susdBalance = IERC20(_getAssetProxy(_SUSD_KEY)).balanceOf(\r\n            address(this)\r\n        );\r\n        uint256 poolPrice = tokenPriceWithSettle(poolAddress);\r\n        require(poolPrice > 0, \"invalid pool price\");\r\n        // how much DHPT the contract can buy with its sUSD balance\r\n        uint256 susdForDhpt = susdBalance.mul(10**18).div(poolPrice);\r\n\r\n        if (susdForDhpt > availDhpt) {\r\n            return availDhpt;\r\n        } else {\r\n            return susdForDhpt;\r\n        }\r\n    }\r\n\r\n    // maximum sUSD that can be sold by the user taking into account contract DHPT balance\r\n    function maxSusdToSell(address poolAddress) public view returns (uint256) {\r\n        uint256 dhptBalance = IERC20(poolAddress).balanceOf(address(this));\r\n        uint256 poolPrice = tokenPriceWithSettle(poolAddress);\r\n        require(poolPrice > 0, \"invalid pool price\");\r\n        // how much sUSD the contract can buy with its DHPT balance\r\n        uint256 dhptForSusd = dhptBalance.mul(poolPrice).div(10**18);\r\n\r\n        return dhptForSusd;\r\n    }\r\n\r\n    // returns token price accounting for any pending Synthetix settlement amounts and manager fees\r\n    function tokenPriceWithSettle(address poolAddress)\r\n        public\r\n        view\r\n        returns (uint256)\r\n    {\r\n        IDHedge dhpool = IDHedge(poolAddress);\r\n        IExchanger ex = IExchanger(addressResolver.getAddress(_EXCHANGER_KEY));\r\n\r\n        uint256 totalValue = 0;\r\n        bytes32[] memory supportedAssets = dhpool.getSupportedAssets();\r\n        uint256 totalSupply = dhpool.totalSupply();\r\n\r\n        require(totalSupply > 0, \"pool is empty\");\r\n\r\n        for (uint256 i = 0; i < supportedAssets.length; i++) {\r\n            uint256 assetTotal = IERC20(_getAssetProxy(supportedAssets[i]))\r\n                .balanceOf(poolAddress);\r\n\r\n            if (assetTotal > 0) {\r\n                uint256 waitingPeriod = ex.maxSecsLeftInWaitingPeriod(\r\n                    poolAddress,\r\n                    supportedAssets[i]\r\n                );\r\n                require(waitingPeriod == 0, \"wait for settlement\");\r\n\r\n                (\r\n                    uint256 reclaimAmount,\r\n                    uint256 rebateAmount,\r\n                    /*uint256 entries*/\r\n                ) = ex.settlementOwing(poolAddress, supportedAssets[i]);\r\n\r\n                if (rebateAmount > 0) {\r\n                    assetTotal = assetTotal.add(rebateAmount);\r\n                }\r\n                if (reclaimAmount > 0) {\r\n                    assetTotal = assetTotal.sub(reclaimAmount);\r\n                }\r\n\r\n                IExchangeRates exchangeRates = IExchangeRates(\r\n                    addressResolver.getAddress(_EXCHANGE_RATES_KEY)\r\n                );\r\n                totalValue = totalValue.add(\r\n                    exchangeRates\r\n                        .rateForCurrency(supportedAssets[i])\r\n                        .mul(assetTotal)\r\n                        .div(10**18)\r\n                );\r\n            }\r\n        }\r\n        uint256 lastFeeMintPrice = dhpool.tokenPriceAtLastFeeMint();\r\n        uint256 tokenPrice = totalValue.mul(10**18).div(totalSupply);\r\n\r\n        if (lastFeeMintPrice.add(1000) < tokenPrice) {\r\n            return tokenPrice.mul(totalSupply).div(_getTotalSupplyPostMint(poolAddress, tokenPrice, lastFeeMintPrice, totalSupply));\r\n        } else {\r\n            return tokenPrice;\r\n        }\r\n    }\r\n    \r\n    // token price at which the manager's fee was last minted\r\n    function getLastFeeMintPrice(address poolAddress) public view returns (uint256) {\r\n        IDHedge dhpool = IDHedge(poolAddress);\r\n        return dhpool.tokenPriceAtLastFeeMint();\r\n    }\r\n\r\n    // token supply after manager fee minting\r\n    function _getTotalSupplyPostMint(address poolAddress, uint256 tokenPrice, uint256 lastFeeMintPrice, uint256 totalSupply) internal view returns (uint256) {\r\n        uint256 managerFeeNumerator;\r\n        uint256 managerFeeDenominator;\r\n        (managerFeeNumerator, managerFeeDenominator) = IHasFeeInfo(factory).getPoolManagerFee(poolAddress);\r\n        uint256 priceFraction = tokenPrice.sub(lastFeeMintPrice).mul(managerFeeNumerator).div(managerFeeDenominator);\r\n        return priceFraction.mul(totalSupply).div(tokenPrice).add(totalSupply);\r\n    }\r\n\r\n    function _getAssetProxy(bytes32 key) internal view returns (address) {\r\n        address synth = ISynthetix(addressResolver.getAddress(_SYNTHETIX_KEY))\r\n            .synths(key);\r\n        require(synth != address(0), \"invalid key\");\r\n        address proxy = ISynth(synth).proxy();\r\n        require(proxy != address(0), \"invalid proxy\");\r\n        return proxy;\r\n    }\r\n\r\n    // MODIFIERS\r\n    modifier onlyDao() {\r\n        require(msg.sender == dao, \"only dao\");\r\n        _;\r\n    }\r\n\r\n}","ABI":"[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"fundAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"investor\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"susdAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"dhptAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenPrice\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"oracleSwap\",\"type\":\"bool\"}],\"name\":\"BuyDHPT\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"fundAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"investor\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"susdAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"dhptAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenPrice\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"oracleSwap\",\"type\":\"bool\"}],\"name\":\"SellDHPT\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"fundAddressA\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenPriceA\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountA\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"fundAddressB\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenPriceB\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountB\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"investor\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"oracleSwap\",\"type\":\"bool\"}],\"name\":\"SwapDHPT\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"addressResolver\",\"outputs\":[{\"internalType\":\"contract IAddressResolver\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"poolAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"stableCoin\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"stableCoinAmount\",\"type\":\"uint256\"}],\"name\":\"buyDHPT\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dao\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"dhptFromEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"poolAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"fromAddress\",\"type\":\"address\"}],\"name\":\"dhptFromLiquidity\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"dhptWhitelist\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"enableBuy\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_enableBuy\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"_enableSell\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"_enableOracleBuy\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"_enableOracleSell\",\"type\":\"bool\"}],\"name\":\"enableBuySell\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"poolAddresses\",\"type\":\"address[]\"},{\"internalType\":\"bool[]\",\"name\":\"enabled\",\"type\":\"bool[]\"}],\"name\":\"enableLiquidity\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"enableOracleBuy\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"enableOracleSell\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"enableSell\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"factory\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"poolAddress\",\"type\":\"address\"}],\"name\":\"getLastFeeMintPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IAddressResolver\",\"name\":\"_addressResolver\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_factory\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_oracle\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"poolAddress\",\"type\":\"address\"}],\"name\":\"maxDhptToSell\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"poolAddress\",\"type\":\"address\"}],\"name\":\"maxSusdToSell\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"oracle\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"oracleBlockBias\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"poolAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"stableCoin\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"stableCoinAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"blockNumber\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"poolPrice\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"name\":\"oracleBuyDHPT\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"poolAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"fromAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"susdAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"blockNumber\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"poolPrice\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"name\":\"oracleBuyDHPTFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"poolAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"stableCoin\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"dhptAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"blockNumber\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"poolPrice\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"name\":\"oracleSellDHPT\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"poolAddressA\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"poolAmountA\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"poolPriceA\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"poolAddressB\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"poolPriceB\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"blockNumber\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"name\":\"oracleSwapDHPT\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"poolAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"dhptAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"stableCoin\",\"type\":\"address\"}],\"name\":\"sellDHPT\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IAddressResolver\",\"name\":\"_addressResolver\",\"type\":\"address\"}],\"name\":\"setAddressResolver\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_dao\",\"type\":\"address\"}],\"name\":\"setDao\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_factory\",\"type\":\"address\"}],\"name\":\"setFactory\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_oracle\",\"type\":\"address\"}],\"name\":\"setOracle\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"_oracleBlockBias\",\"type\":\"uint8\"}],\"name\":\"setOracleBlockBias\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"stableCoin\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"tokenPrecision\",\"type\":\"uint8\"}],\"name\":\"setStableCoin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"stableCoins\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"poolAddressA\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"poolAmountA\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"poolAddressB\",\"type\":\"address\"}],\"name\":\"swapDHPT\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"}],\"name\":\"tokenBalanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"poolAddress\",\"type\":\"address\"}],\"name\":\"tokenPriceWithSettle\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"addresses\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"name\":\"whitelistDhpt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdrawToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"toAddress\",\"type\":\"address\"}],\"name\":\"withdrawTokenTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"DHPTSwap","CompilerVersion":"v0.6.12+commit.27d51765","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://0a1dff1f60ddd7882b3c503f70316c55187dc2744672b20a23c5817662f04349"}]}