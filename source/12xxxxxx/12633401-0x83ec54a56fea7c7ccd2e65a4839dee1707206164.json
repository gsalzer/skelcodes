{"status":"1","message":"OK","result":[{"SourceCode":"/**\r\n *Submitted for verification at BscScan.com on 2021-06-16\r\n*/\r\n\r\n// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.4;\r\n\r\nlibrary SafeMath {\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n        c = a * b;\r\n        assert(c / a == b);\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a / b;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        assert(b <= a);\r\n        return a - b;\r\n    }\r\n\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n        c = a + b;\r\n        assert(c >= a);\r\n        return c;\r\n    }\r\n}\r\n\r\ncontract Ownable {\r\n\taddress public owner;\r\n\taddress public newOwner;\r\n\r\n\tevent OwnershipTransferred(address indexed oldOwner, address indexed newOwner);\r\n\r\n\tconstructor() {\r\n\t\towner = msg.sender;\r\n\t}\r\n\r\n\tmodifier onlyOwner() {\r\n\t\trequire(msg.sender == owner, \"only the owner can call this method\");\r\n\t\t_;\r\n\t}\r\n\r\n\tfunction transferOwnership(address _newOwner) public onlyOwner {\r\n\t\trequire(address(0) != _newOwner, \"ownership cannot be transferred to address 0\");\r\n\t\tnewOwner = _newOwner;\r\n\t}\r\n\r\n\tfunction acceptOwnership() public {\r\n\t    require(newOwner != address(0), \"no new owner has been set up\");\r\n\t\trequire(msg.sender == newOwner, \"only the new owner can accept ownership\");\r\n\t\temit OwnershipTransferred(owner, msg.sender);\r\n\t\towner = msg.sender;\r\n\t\tnewOwner = address(0);\r\n\t}\r\n}\r\n\r\ncontract Adminable is Ownable {\r\n    mapping(address => bool) public admin;\r\n\r\n    event AdminSet(address indexed adminAddress, bool indexed status);\r\n\r\n\tconstructor() {\r\n        admin[msg.sender] = true;\r\n    }\r\n\r\n    modifier onlyAdmin() {\r\n        require(admin[msg.sender], \"only the admin can call this method\");\r\n        _;\r\n    }\r\n\r\n    function setAdmin(address adminAddress, bool status) public onlyOwner {\r\n        emit AdminSet(adminAddress, status);\r\n        admin[adminAddress] = status;\r\n    }\r\n}\r\n\r\nabstract contract tokenInterface {\r\n\tfunction balanceOf(address _owner) public virtual view returns (uint256 balance);\r\n\tfunction transfer(address _to, uint256 _value) public virtual returns (bool);\r\n\tfunction transferFrom(address sender, address recipient, uint256 amount) public virtual returns (bool);\r\n\tfunction approve(address spender, uint256 addedValue) public virtual returns (bool);\r\n}\r\n\r\nabstract contract atomicBridgeInterface {\r\n\tfunction depositTokenBob(bytes32 _secretHash, uint256 _tokenAmount, address _tokenAddress, address payable _to, bytes memory _msg) public virtual payable returns (bool);\r\n\tfunction withdrawToken(bytes32 _secret) public virtual returns (bool);\r\n\tfunction startRecovery(bytes32 _secretHash) public virtual returns (bool);\r\n\tfunction recoveryWithdraw(bytes32 _secretHash) public virtual payable returns (bool);\r\n}\r\n\r\ncontract Vault is Adminable {\r\n    using SafeMath for uint256;\r\n    \r\n    atomicBridgeInterface public atomicBridge;\r\n    mapping (address => uint256) public limitAmountOf;\r\n    mapping (address => uint256) public todaySpentAmountOf;\r\n    mapping (address => uint256) public lastTimeOf;\r\n    mapping (address => uint256) public periodOf;\r\n    \r\n    function setAtomicBridge(address _newAtomicBridge) public onlyOwner {\r\n        atomicBridge = atomicBridgeInterface(_newAtomicBridge);\r\n    }\r\n    \r\n    function setSpendLimit(address _tkn, uint256 _newLimitAmount) public onlyOwner {\r\n        limitAmountOf[_tkn] = _newLimitAmount;\r\n    }\r\n    \r\n    function setPeriod(address _tkn, uint256 _newPeriod) public onlyOwner {\r\n        periodOf[_tkn] = _newPeriod;\r\n    }\r\n    \r\n    constructor(address _admin, address _newAtomicBridge, address _tkn, uint256 _newLimitAmount) {\r\n        setAdmin(_admin, true);\r\n        setAtomicBridge(_newAtomicBridge);\r\n        setSpendLimit(_tkn, _newLimitAmount);\r\n        setPeriod(_tkn, 1 days);\r\n    }\r\n    \r\n\r\n    function dayIsOver(address _tkn) internal {\r\n        if (block.timestamp >= lastTimeOf[_tkn] + periodOf[_tkn]) {\r\n            lastTimeOf[_tkn] = block.timestamp;\r\n            todaySpentAmountOf[_tkn] = 0;\r\n        }\r\n        \r\n    }\r\n    \r\n    modifier spendingLimit(address _tkn, uint256 _amount) {\r\n        dayIsOver(_tkn);\r\n        require(todaySpentAmountOf[_tkn].add(_amount) < limitAmountOf[_tkn], \"you have exceeded your spending limit\");\r\n        todaySpentAmountOf[_tkn] = todaySpentAmountOf[_tkn].add(_amount);\r\n        _;\r\n    }\r\n\r\n    function readAvailableAmount(address _tkn) public view returns (uint256) {\r\n        if (block.timestamp >= lastTimeOf[_tkn] + periodOf[_tkn]) {\r\n            return limitAmountOf[_tkn];\r\n        } else {\r\n            return limitAmountOf[_tkn].sub(todaySpentAmountOf[_tkn]);\r\n        }\r\n    }\r\n    \r\n    function depositTokenBob(bytes32 _secretHash, uint256 _tokenAmount, address _tokenAddress, address payable _to, bytes memory _msg) public payable onlyAdmin spendingLimit(_tokenAddress, _tokenAmount) returns (bool status) {\r\n        tokenInterface tkn = tokenInterface(_tokenAddress);\r\n        tkn.approve(address(atomicBridge), _tokenAmount);\r\n        \r\n        status = atomicBridge.depositTokenBob(_secretHash, _tokenAmount, _tokenAddress, _to, _msg);\r\n    }\r\n    \r\n\r\n    function withdrawToken(bytes32 _secret) public onlyAdmin returns (bool status) {\r\n        status = atomicBridge.withdrawToken(_secret);\r\n\r\n        if (address(this).balance > 0 ) {\r\n            payable(msg.sender).transfer(address(this).balance);\r\n        }\r\n    }\r\n    \r\n\r\n    function startRecovery(bytes32 _secretHash) public onlyAdmin returns (bool status) {\r\n        status = atomicBridge.startRecovery(_secretHash);\r\n    }\r\n    \r\n    function recoveryWithdraw(bytes32 _secretHash) public payable onlyAdmin returns (bool status) {\r\n        status = atomicBridge.recoveryWithdraw(_secretHash);\r\n    }\r\n    \r\n    function withdrawVault(address _tkn, uint256 _amount) public onlyAdmin spendingLimit(_tkn, _amount) {\r\n        tokenInterface tkn = tokenInterface(_tkn);\r\n        tkn.transfer(msg.sender, _amount);\r\n    }\r\n    \r\n    receive() external payable {\r\n\r\n    }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_admin\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_newAtomicBridge\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_tkn\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_newLimitAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"adminAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bool\",\"name\":\"status\",\"type\":\"bool\"}],\"name\":\"AdminSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"acceptOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"admin\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"atomicBridge\",\"outputs\":[{\"internalType\":\"contract atomicBridgeInterface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_secretHash\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"_tokenAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"_msg\",\"type\":\"bytes\"}],\"name\":\"depositTokenBob\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"status\",\"type\":\"bool\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"lastTimeOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"limitAmountOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"newOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"periodOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tkn\",\"type\":\"address\"}],\"name\":\"readAvailableAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_secretHash\",\"type\":\"bytes32\"}],\"name\":\"recoveryWithdraw\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"status\",\"type\":\"bool\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"adminAddress\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"status\",\"type\":\"bool\"}],\"name\":\"setAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newAtomicBridge\",\"type\":\"address\"}],\"name\":\"setAtomicBridge\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tkn\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_newPeriod\",\"type\":\"uint256\"}],\"name\":\"setPeriod\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tkn\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_newLimitAmount\",\"type\":\"uint256\"}],\"name\":\"setSpendLimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_secretHash\",\"type\":\"bytes32\"}],\"name\":\"startRecovery\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"status\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"todaySpentAmountOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_secret\",\"type\":\"bytes32\"}],\"name\":\"withdrawToken\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"status\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tkn\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdrawVault\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]","ContractName":"Vault","CompilerVersion":"v0.8.4+commit.c7e474f2","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000b94ee333c043b2354c30808255e9e83bf2d45f3c000000000000000000000000d8b7c3719848574fb40291bc94fc3aa0e0141ced0000000000000000000000007025bab2ec90410de37f488d1298204cd4d6b29d000000000000000000000000000000000000000000084595161401484a000000","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://ae5596d4951ad61c07f9008fa8f36d376a9b56736c8effdda2c57063249f6dd7"}]}