{"status":"1","message":"OK","result":[{"SourceCode":"// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.2;\r\n\r\ninterface IV2Strategy {\r\n    function name() external view returns (string memory);\r\n\r\n    function apiVersion() external view returns (string memory);\r\n\r\n    function strategist() external view returns (address);\r\n\r\n    function rewards() external view returns (address);\r\n\r\n    function vault() external view returns (address);\r\n\r\n    function keeper() external view returns (address);\r\n\r\n    function want() external view returns (address);\r\n\r\n    function emergencyExit() external view returns (bool);\r\n\r\n    function isActive() external view returns (bool);\r\n\r\n    function delegatedAssets() external view returns (uint256);\r\n\r\n    function estimatedTotalAssets() external view returns (uint256);\r\n    \r\n    function doHealthCheck() external view returns (bool);\r\n    \r\n    function healthCheck() external view returns (address);\r\n}\r\n\r\ninterface IAddressesGenerator {\r\n    function assetsAddresses() external view returns (address[] memory);\r\n}\r\n\r\ninterface IV2Vault {\r\n    function withdrawalQueue(uint256 arg0) external view returns (address);\r\n}\r\n\r\ninterface IHelper {\r\n    function mergeAddresses(address[][] memory addressesSets)\r\n        external\r\n        view\r\n        returns (address[] memory);\r\n}\r\n\r\ncontract StrategiesHelper {\r\n    address public addressesGeneratorAddress;\r\n    address public helperAddress;\r\n    address public ownerAddress;\r\n\r\n    struct StrategyMetadata {\r\n        string name;\r\n        address id;\r\n        string apiVersion;\r\n        address strategist;\r\n        address rewards;\r\n        address vault;\r\n        address keeper;\r\n        address want;\r\n        bool emergencyExit;\r\n        bool isActive;\r\n        uint256 delegatedAssets;\r\n        uint256 estimatedTotalAssets;\r\n        bool doHealthCheck;\r\n        address healthCheckAddress;\r\n    }\r\n\r\n    constructor(address _addressesGeneratorAddress, address _helperAddress) {\r\n        addressesGeneratorAddress = _addressesGeneratorAddress;\r\n        helperAddress = _helperAddress;\r\n        ownerAddress = msg.sender;\r\n    }\r\n\r\n    /**\r\n     * Fetch the number of strategies for a vault\r\n     */\r\n    function assetStrategiesLength(address assetAddress)\r\n        public\r\n        view\r\n        returns (uint256)\r\n    {\r\n        IV2Vault vault = IV2Vault(assetAddress);\r\n        uint256 strategyIdx;\r\n        while (true) {\r\n            address strategyAddress = vault.withdrawalQueue(strategyIdx);\r\n            if (strategyAddress == address(0)) {\r\n                break;\r\n            }\r\n            strategyIdx++;\r\n        }\r\n        return strategyIdx;\r\n    }\r\n\r\n    /**\r\n     * Fetch the total number of strategies for all vaults\r\n     */\r\n    function assetsStrategiesLength() public view returns (uint256) {\r\n        return assetsStrategiesAddresses().length;\r\n    }\r\n\r\n    /**\r\n     * Fetch strategy addresses given a vault address\r\n     */\r\n    function assetStrategiesAddresses(address assetAddress)\r\n        public\r\n        view\r\n        returns (address[] memory)\r\n    {\r\n        IV2Vault vault = IV2Vault(assetAddress);\r\n        uint256 numberOfStrategies = assetStrategiesLength(assetAddress);\r\n        address[] memory _strategiesAddresses =\r\n            new address[](numberOfStrategies);\r\n        for (\r\n            uint256 strategyIdx = 0;\r\n            strategyIdx < numberOfStrategies;\r\n            strategyIdx++\r\n        ) {\r\n            address strategyAddress = vault.withdrawalQueue(strategyIdx);\r\n            _strategiesAddresses[strategyIdx] = strategyAddress;\r\n        }\r\n        return _strategiesAddresses;\r\n    }\r\n\r\n    /**\r\n     * Fetch all strategy addresses for all vaults\r\n     */\r\n     function assetsStrategiesAddresses() public view returns (address[] memory) {\r\n        address[] memory _assetsAddresses = IAddressesGenerator(addressesGeneratorAddress).assetsAddresses();\r\n        return assetsStrategiesAddresses(_assetsAddresses);\r\n     }\r\n\r\n    /**\r\n     * Fetch all strategy addresses given an array of vaults\r\n     */\r\n    function assetsStrategiesAddresses(address[] memory _assetsAddresses)\r\n        public\r\n        view\r\n        returns (address[] memory)\r\n    {\r\n        uint256 numberOfAssets = _assetsAddresses.length;\r\n        address[][] memory _strategiesForAssets =\r\n            new address[][](numberOfAssets);\r\n        for (uint256 assetIdx = 0; assetIdx < numberOfAssets; assetIdx++) {\r\n            address assetAddress = _assetsAddresses[assetIdx];\r\n            address[] memory _assetStrategiessAddresses =\r\n                assetStrategiesAddresses(assetAddress);\r\n            _strategiesForAssets[assetIdx] = _assetStrategiessAddresses;\r\n        }\r\n        address[] memory mergedAddresses =\r\n            IHelper(helperAddress).mergeAddresses(_strategiesForAssets);\r\n        return mergedAddresses;\r\n    }\r\n\r\n    /**\r\n     * Fetch total delegated balance for all strategies\r\n     */\r\n    function assetsStrategiesDelegatedBalance()\r\n        external\r\n        view\r\n        returns (uint256)\r\n    {\r\n        address[] memory _assetsAddresses = IAddressesGenerator(addressesGeneratorAddress).assetsAddresses();\r\n        uint256 numberOfAssets = _assetsAddresses.length;\r\n        uint256 assetsDelegatedBalance;\r\n        for (uint256 assetIdx = 0; assetIdx < numberOfAssets; assetIdx++) {\r\n            address assetAddress = _assetsAddresses[assetIdx];\r\n            uint256 assetDelegatedBalance =\r\n                assetStrategiesDelegatedBalance(assetAddress);\r\n            assetsDelegatedBalance += assetDelegatedBalance;\r\n        }\r\n        return assetsDelegatedBalance;\r\n    }\r\n\r\n    /**\r\n     * Fetch delegated balance for all of a vault's strategies\r\n     */\r\n    function assetStrategiesDelegatedBalance(address assetAddress)\r\n        public\r\n        view\r\n        returns (uint256)\r\n    {\r\n        address[] memory _assetStrategiesAddresses =\r\n            assetStrategiesAddresses(assetAddress);\r\n        uint256 numberOfStrategies = _assetStrategiesAddresses.length;\r\n        uint256 strategiesDelegatedBalance;\r\n        for (\r\n            uint256 strategyIdx = 0;\r\n            strategyIdx < numberOfStrategies;\r\n            strategyIdx++\r\n        ) {\r\n            address strategyAddress = _assetStrategiesAddresses[strategyIdx];\r\n            IV2Strategy _strategy = IV2Strategy(strategyAddress);\r\n            uint256 strategyDelegatedBalance = _strategy.delegatedAssets();\r\n            strategiesDelegatedBalance += strategyDelegatedBalance;\r\n        }\r\n        return strategiesDelegatedBalance;\r\n    }\r\n\r\n    /**\r\n     * Fetch metadata for all strategies scoped to a vault\r\n     */\r\n    function assetStrategies(address assetAddress)\r\n        external\r\n        view\r\n        returns (StrategyMetadata[] memory)\r\n    {\r\n        IV2Vault vault = IV2Vault(assetAddress);\r\n        uint256 numberOfStrategies = assetStrategiesLength(assetAddress);\r\n        StrategyMetadata[] memory _strategies =\r\n            new StrategyMetadata[](numberOfStrategies);\r\n        for (\r\n            uint256 strategyIdx = 0;\r\n            strategyIdx < numberOfStrategies;\r\n            strategyIdx++\r\n        ) {\r\n            address strategyAddress = vault.withdrawalQueue(strategyIdx);\r\n            StrategyMetadata memory _strategy = strategy(strategyAddress);\r\n            _strategies[strategyIdx] = _strategy;\r\n        }\r\n        return _strategies;\r\n    }\r\n\r\n    /**\r\n     * Fetch metadata for all strategies\r\n     */\r\n    function assetsStrategies()\r\n        external\r\n        view\r\n        returns (StrategyMetadata[] memory)\r\n    {\r\n        address[] memory _assetsStrategiesAddresses =\r\n            assetsStrategiesAddresses();\r\n        return strategies(_assetsStrategiesAddresses);\r\n    }\r\n    \r\n    \r\n    function assetsStrategies(address[] memory _assetsAddresses)\r\n        public\r\n        view\r\n        returns (StrategyMetadata[] memory)\r\n    {\r\n        return strategies(assetsStrategiesAddresses(_assetsAddresses));\r\n    }\r\n    \r\n    \r\n    /**\r\n     * Fetch metadata for a strategy given a strategy address\r\n     */\r\n    function strategy(address strategyAddress)\r\n        public\r\n        view\r\n        returns (StrategyMetadata memory)\r\n    {\r\n        IV2Strategy _strategy = IV2Strategy(strategyAddress);\r\n        bool _doHealthCheck;\r\n        address _healthCheckAddress;\r\n        try _strategy.doHealthCheck() {\r\n            _doHealthCheck = _strategy.doHealthCheck();\r\n        } catch {}\r\n        try _strategy.healthCheck() {\r\n             _healthCheckAddress = _strategy.healthCheck();\r\n        } catch {}\r\n        return\r\n            StrategyMetadata({\r\n                name: _strategy.name(),\r\n                id: strategyAddress,\r\n                apiVersion: _strategy.apiVersion(),\r\n                strategist: _strategy.strategist(),\r\n                rewards: _strategy.rewards(),\r\n                vault: _strategy.vault(),\r\n                keeper: _strategy.keeper(),\r\n                want: _strategy.want(),\r\n                emergencyExit: _strategy.emergencyExit(),\r\n                isActive: _strategy.isActive(),\r\n                delegatedAssets: _strategy.delegatedAssets(),\r\n                estimatedTotalAssets: _strategy.estimatedTotalAssets(),\r\n                doHealthCheck: _doHealthCheck,\r\n                healthCheckAddress: _healthCheckAddress\r\n            });\r\n    }\r\n\r\n    /**\r\n     * Fetch metadata for strategies given an array of strategy addresses\r\n     */\r\n    function strategies(address[] memory _strategiesAddresses)\r\n        public\r\n        view\r\n        returns (StrategyMetadata[] memory)\r\n    {\r\n        uint256 numberOfStrategies = _strategiesAddresses.length;\r\n        StrategyMetadata[] memory _strategies =\r\n            new StrategyMetadata[](numberOfStrategies);\r\n        for (\r\n            uint256 strategyIdx = 0;\r\n            strategyIdx < numberOfStrategies;\r\n            strategyIdx++\r\n        ) {\r\n            address strategyAddress = _strategiesAddresses[strategyIdx];\r\n            StrategyMetadata memory _strategy = strategy(strategyAddress);\r\n            _strategies[strategyIdx] = _strategy;\r\n        }\r\n        return _strategies;\r\n    }\r\n    \r\n    /**\r\n     * Allow storage slots to be manually updated\r\n     */\r\n    function updateSlot(bytes32 slot, bytes32 value) external {\r\n        require(msg.sender == ownerAddress, \"Caller is not the owner\");\r\n        assembly {\r\n            sstore(slot, value)\r\n        }\r\n    }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addressesGeneratorAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_helperAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"addressesGeneratorAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"assetAddress\",\"type\":\"address\"}],\"name\":\"assetStrategies\",\"outputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"id\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"apiVersion\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"strategist\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"rewards\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"vault\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"keeper\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"want\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"emergencyExit\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isActive\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"delegatedAssets\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"estimatedTotalAssets\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"doHealthCheck\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"healthCheckAddress\",\"type\":\"address\"}],\"internalType\":\"struct StrategiesHelper.StrategyMetadata[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"assetAddress\",\"type\":\"address\"}],\"name\":\"assetStrategiesAddresses\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"assetAddress\",\"type\":\"address\"}],\"name\":\"assetStrategiesDelegatedBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"assetAddress\",\"type\":\"address\"}],\"name\":\"assetStrategiesLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_assetsAddresses\",\"type\":\"address[]\"}],\"name\":\"assetsStrategies\",\"outputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"id\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"apiVersion\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"strategist\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"rewards\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"vault\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"keeper\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"want\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"emergencyExit\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isActive\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"delegatedAssets\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"estimatedTotalAssets\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"doHealthCheck\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"healthCheckAddress\",\"type\":\"address\"}],\"internalType\":\"struct StrategiesHelper.StrategyMetadata[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"assetsStrategies\",\"outputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"id\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"apiVersion\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"strategist\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"rewards\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"vault\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"keeper\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"want\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"emergencyExit\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isActive\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"delegatedAssets\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"estimatedTotalAssets\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"doHealthCheck\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"healthCheckAddress\",\"type\":\"address\"}],\"internalType\":\"struct StrategiesHelper.StrategyMetadata[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"assetsStrategiesAddresses\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_assetsAddresses\",\"type\":\"address[]\"}],\"name\":\"assetsStrategiesAddresses\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"assetsStrategiesDelegatedBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"assetsStrategiesLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"helperAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ownerAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_strategiesAddresses\",\"type\":\"address[]\"}],\"name\":\"strategies\",\"outputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"id\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"apiVersion\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"strategist\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"rewards\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"vault\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"keeper\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"want\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"emergencyExit\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isActive\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"delegatedAssets\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"estimatedTotalAssets\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"doHealthCheck\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"healthCheckAddress\",\"type\":\"address\"}],\"internalType\":\"struct StrategiesHelper.StrategyMetadata[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"strategyAddress\",\"type\":\"address\"}],\"name\":\"strategy\",\"outputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"id\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"apiVersion\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"strategist\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"rewards\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"vault\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"keeper\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"want\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"emergencyExit\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isActive\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"delegatedAssets\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"estimatedTotalAssets\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"doHealthCheck\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"healthCheckAddress\",\"type\":\"address\"}],\"internalType\":\"struct StrategiesHelper.StrategyMetadata\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"slot\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"value\",\"type\":\"bytes32\"}],\"name\":\"updateSlot\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"StrategiesHelper","CompilerVersion":"v0.8.2+commit.661d1103","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"000000000000000000000000437758d475f70249e03eda6be23684ad1fc375f0000000000000000000000000957e3ae7983155a9f9e08da555b8084448be26e4","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"ipfs://f5a2e502c6b683227ca134911d534ab09c06dbeb431e05a915dd84aa6b9bf43b"}]}