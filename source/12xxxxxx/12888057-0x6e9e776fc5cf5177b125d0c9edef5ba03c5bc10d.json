{"status":"1","message":"OK","result":[{"SourceCode":"/**\r\n *Submitted for verification at Etherscan.io on 2020-11-17\r\n*/\r\n\r\npragma solidity ^0.5.0;\r\npragma experimental ABIEncoderV2;\r\n\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     * - Subtraction cannot overflow.\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        // Solidity only automatically asserts when dividing by 0\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts with custom message when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n/**\r\n * @dev Interface of the ERC165 standard, as defined in the\r\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\r\n *\r\n * Implementers can declare support of contract interfaces, which can then be\r\n * queried by others ({ERC165Checker}).\r\n *\r\n * For an implementation, see {ERC165}.\r\n */\r\n// interface IERC165 {\r\n//     /**\r\n//      * @dev Returns true if this contract implements the interface defined by\r\n//      * `interfaceId`. See the corresponding\r\n//      * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\r\n//      * to learn more about how these ids are created.\r\n//      *\r\n//      * This function call must use less than 30 000 gas.\r\n//      */\r\n//     function supportsInterface(bytes4 interfaceId) external view returns (bool);\r\n// }\r\n\r\n/**\r\n * @dev Required interface of an ERC721 compliant contract.\r\n */\r\ncontract IERC721 /*is IERC165*/ {\r\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\r\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\r\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\r\n\r\n    /**\r\n     * @dev Returns the number of NFTs in `owner`'s account.\r\n     */\r\n    function balanceOf(address owner) public view returns (uint256 balance);\r\n\r\n    /**\r\n     * @dev Returns the owner of the NFT specified by `tokenId`.\r\n     */\r\n    function ownerOf(uint256 tokenId) public view returns (address owner);\r\n\r\n    /**\r\n     * @dev Transfers a specific NFT (`tokenId`) from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     *\r\n     *\r\n     * Requirements:\r\n     * - `from`, `to` cannot be zero.\r\n     * - `tokenId` must be owned by `from`.\r\n     * - If the caller is not `from`, it must be have been allowed to move this\r\n     * NFT by either {approve} or {setApprovalForAll}.\r\n     */\r\n    function safeTransferFrom(address from, address to, uint256 tokenId) public;\r\n    /**\r\n     * @dev Transfers a specific NFT (`tokenId`) from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Requirements:\r\n     * - If the caller is not `from`, it must be approved to move this NFT by\r\n     * either {approve} or {setApprovalForAll}.\r\n     */\r\n    function transferFrom(address from, address to, uint256 tokenId) public;\r\n    function approve(address to, uint256 tokenId) public;\r\n    function getApproved(uint256 tokenId) public view returns (address operator);\r\n\r\n    function setApprovalForAll(address operator, bool _approved) public;\r\n    function isApprovedForAll(address owner, address operator) public view returns (bool);\r\n\r\n\r\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes memory data) public;\r\n    \r\n    function checkFeeDistributionPercentage(address[] memory _fee_receivers, uint256[] memory percentage) public;\r\n    \r\n    function getFeePercentage() public view returns (uint256);\r\n    \r\n    function getDeployer() public view returns (address);\r\n    \r\n    function getFeeReceivers() public returns(address[] memory);\r\n    \r\n    function getFeeDistribution(address fee_receiver) public returns(uint256);\r\n    \r\n    function stake(uint256 tokenId, address _stakingAddress) public;\r\n    \r\n    function clearStake(uint256 tokenId) public;\r\n}\r\n\r\n/*\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with GSN meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\ncontract Context {\r\n    // Empty internal constructor, to prevent people from mistakenly deploying\r\n    // an instance of this contract, which should be used via inheritance.\r\n    constructor () internal { }\r\n    // solhint-disable-previous-line no-empty-blocks\r\n\r\n    function _msgSender() internal view returns (address payable) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view returns (bytes memory) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n/**\r\n * @title Roles\r\n * @dev Library for managing addresses assigned to a Role.\r\n */\r\nlibrary Roles {\r\n    struct Role {\r\n        mapping (address => bool) bearer;\r\n    }\r\n\r\n    /**\r\n     * @dev Give an account access to this role.\r\n     */\r\n    function add(Role storage role, address account) internal {\r\n        require(!has(role, account), \"Roles: account already has role\");\r\n        role.bearer[account] = true;\r\n    }\r\n\r\n    /**\r\n     * @dev Remove an account's access to this role.\r\n     */\r\n    function remove(Role storage role, address account) internal {\r\n        require(has(role, account), \"Roles: account does not have role\");\r\n        role.bearer[account] = false;\r\n    }\r\n\r\n    /**\r\n     * @dev Check if an account has this role.\r\n     * @return bool\r\n     */\r\n    function has(Role storage role, address account) internal view returns (bool) {\r\n        require(account != address(0), \"Roles: account is the zero address\");\r\n        return role.bearer[account];\r\n    }\r\n}\r\n\r\ncontract OperatorRole is Context {\r\n    using Roles for Roles.Role;\r\n\r\n    event OperatorAdded(address indexed account);\r\n    event OperatorRemoved(address indexed account);\r\n\r\n    Roles.Role private _operators;\r\n\r\n    constructor () internal {\r\n\r\n    }\r\n\r\n    modifier onlyOperator() {\r\n        require(isOperator(_msgSender()), \"OperatorRole: caller does not have the Operator role\");\r\n        _;\r\n    }\r\n\r\n    function isOperator(address account) public view returns (bool) {\r\n        return _operators.has(account);\r\n    }\r\n\r\n    function _addOperator(address account) internal {\r\n        _operators.add(account);\r\n        emit OperatorAdded(account);\r\n    }\r\n\r\n    function _removeOperator(address account) internal {\r\n        _operators.remove(account);\r\n        emit OperatorRemoved(account);\r\n    }\r\n}\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\ncontract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor () internal {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(isOwner(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the caller is the current owner.\r\n     */\r\n    function isOwner() public view returns (bool) {\r\n        return _msgSender() == _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     */\r\n    function _transferOwnership(address newOwner) internal {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\ncontract OwnableOperatorRole is Ownable, OperatorRole {\r\n    function addOperator(address account) external onlyOwner {\r\n        _addOperator(account);\r\n    }\r\n\r\n    function removeOperator(address account) external onlyOwner {\r\n        _removeOperator(account);\r\n    }\r\n}\r\n\r\ncontract TransferProxy is OwnableOperatorRole {\r\n\r\n    function erc721safeTransferFrom(IERC721 token, address from, address to, uint256 tokenId) external;\r\n    function erc721clearStake(IERC721 token, uint256 tokenId) external;\r\n    function erc721Stake(IERC721 token, uint256 tokenId, address stakingAddress) external;\r\n}\r\n\r\n// contract TransferProxyForDeprecated is OwnableOperatorRole {\r\n\r\n//     function erc721TransferFrom(IERC721 token, address from, address to, uint256 tokenId) external onlyOperator {\r\n//         token.transferFrom(from, to, tokenId);\r\n//     }\r\n// }\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP. Does not include\r\n * the optional functions; to access them see {ERC20Detailed}.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\ncontract ERC20TransferProxy is OwnableOperatorRole {\r\n\r\n    function erc20safeTransferFrom(IERC20 token, address from, address to, uint256 value) external;\r\n}\r\n\r\ncontract ExchangeV1 is Ownable {\r\n    using SafeMath for uint;\r\n    // using UintLibrary for uint;\r\n    // using StringLibrary for string;\r\n    // using BytesLibrary for bytes32;\r\n    \r\n    struct DistributionItem {\r\n        address _address;\r\n        uint256 _amount;\r\n    }\r\n\r\n    TransferProxy public transferProxy;\r\n    ERC20TransferProxy public erc20TransferProxy;\r\n    \r\n    mapping (address => mapping(uint256 => uint256)) public buyOrder;\r\n    mapping (address => mapping(uint256 => address)) public auctionOrder;\r\n    mapping (address => mapping(uint256 => mapping(address => mapping(address => uint256)))) public bidOrder;\r\n    mapping (address => mapping(uint256 => address[])) public bidMembers;\r\n    \r\n    uint256 public listingFee = 15 * 10** 15;\r\n    uint256 public serviceFee = 25; // 25 / 1000 => 2.5%\r\n    \r\n    address payable public serviceAddress;\r\n    \r\n    address public caribmarsAddress;\r\n    mapping (address => mapping (uint256 => bool)) public tokenStakings;\r\n    mapping (address => mapping (uint256 => uint256)) public stakingBlockNumbers;\r\n    \r\n    uint256 public farmFeePerBlock = 1;\r\n    uint256 public farmTokenAmount = 100000;\r\n    address public governanceAddress;\r\n\r\n    constructor(\r\n        TransferProxy _transferProxy, ERC20TransferProxy _erc20TransferProxy\r\n    ) public {\r\n        transferProxy = _transferProxy;\r\n        erc20TransferProxy = _erc20TransferProxy;\r\n        \r\n        serviceAddress = _msgSender();\r\n    }\r\n\r\n    function exchange(\r\n        address sellToken, uint256 sellTokenId,\r\n        address owner,\r\n        address buyToken, uint256 buyValue,\r\n        address buyer\r\n    ) payable external {\r\n        require(owner == _msgSender(), \"Exchange: The only token owner can accept bid.\");\r\n        \r\n        validateBidRequest(sellToken, sellTokenId, buyer, buyToken, buyValue);\r\n        \r\n        uint256 serviceFeeAmount = buyValue.mul(serviceFee).div(1000);\r\n        uint256 amount = buyValue - serviceFeeAmount;\r\n        \r\n        address[] memory fee_receivers = IERC721(sellToken).getFeeReceivers();\r\n        \r\n        uint256 feePercentage = IERC721(sellToken).getFeePercentage();\r\n        \r\n        if (feePercentage == 0) {\r\n            transferProxy.erc721safeTransferFrom(IERC721(sellToken), owner, buyer, sellTokenId);\r\n            erc20TransferProxy.erc20safeTransferFrom(IERC20(buyToken), buyer, owner, amount);\r\n        } else {\r\n            DistributionItem[] memory distributions = getDistributions(sellToken, owner, fee_receivers, feePercentage, amount);\r\n            \r\n            transferProxy.erc721safeTransferFrom(IERC721(sellToken), owner, buyer, sellTokenId);\r\n            for (uint256 i = 0; i < distributions.length; i++) {\r\n                if (distributions[i]._amount > 0) {\r\n                    erc20TransferProxy.erc20safeTransferFrom(IERC20(buyToken), buyer, distributions[i]._address, distributions[i]._amount);\r\n                }\r\n            }\r\n        }\r\n        \r\n        if (serviceFeeAmount > 0) {\r\n            erc20TransferProxy.erc20safeTransferFrom(IERC20(buyToken), buyer, serviceAddress, serviceFeeAmount);\r\n        }\r\n        \r\n        CancelAllBid(sellToken, sellTokenId, buyToken);\r\n        \r\n        auctionOrder[sellToken][sellTokenId] = address(0);\r\n        \r\n        // emit Buy(sellToken, sellTokenId, owner, buyToken, buyValue, buyer);\r\n    }\r\n    \r\n    function getDistributions(address sellToken, address owner, address[] memory fee_receivers, uint256 feePercentage, uint256 amount) internal returns (DistributionItem[] memory) {\r\n        DistributionItem[] memory distributions = new DistributionItem[](fee_receivers.length + 1);\r\n            \r\n            uint256 feeAmount = amount.mul(feePercentage).div(100);\r\n            \r\n            uint256 total = 0;\r\n            for (uint256 i = 0; i < fee_receivers.length; i++) {\r\n                total += IERC721(sellToken).getFeeDistribution(fee_receivers[i]);\r\n            }\r\n            \r\n            for (uint256 i = 0; i < fee_receivers.length; i++) {\r\n                uint256 distributionAmount = 0;\r\n                \r\n                {\r\n                \r\n                    distributionAmount = IERC721(sellToken).getFeeDistribution(fee_receivers[i]) * feeAmount;\r\n                }\r\n                \r\n                {\r\n                    distributionAmount = distributionAmount / total;\r\n                }\r\n                    \r\n                distributions[i] = DistributionItem(fee_receivers[i], distributionAmount);\r\n            }\r\n            \r\n            distributions[fee_receivers.length] = DistributionItem(owner, amount - feeAmount);\r\n            \r\n            return distributions;\r\n    }\r\n    \r\n    function buy(\r\n        address sellToken, uint256 sellTokenId,\r\n        address owner,\r\n        uint256 buyValue,\r\n        address buyer\r\n    ) payable external {\r\n        validateBuyRequest(sellToken, sellTokenId, buyValue);\r\n        \r\n        uint256 serviceFeeAmount = buyValue.mul(serviceFee).div(1000);\r\n        uint256 amount = buyValue - serviceFeeAmount;\r\n        \r\n        address[] memory fee_receivers = IERC721(sellToken).getFeeReceivers();\r\n        \r\n        uint256 feePercentage = IERC721(sellToken).getFeePercentage();\r\n        \r\n        if (feePercentage == 0) {\r\n            transferProxy.erc721safeTransferFrom(IERC721(sellToken), owner, buyer, sellTokenId);\r\n            address payable to_address = address(uint160(owner));\r\n            to_address.send(amount);\r\n        } else {\r\n            DistributionItem[] memory distributions = getDistributions(sellToken, owner, fee_receivers, feePercentage, amount);\r\n            \r\n            transferProxy.erc721safeTransferFrom(IERC721(sellToken), owner, buyer, sellTokenId);\r\n            for (uint256 i = 0; i < distributions.length; i++) {\r\n                if (distributions[i]._amount > 0) {\r\n                    address payable to_address = address(uint160(distributions[i]._address));\r\n                    to_address.transfer(distributions[i]._amount);\r\n                }\r\n            }\r\n        }\r\n        \r\n        if (serviceFeeAmount > 0) {\r\n            serviceAddress.transfer(serviceFeeAmount);\r\n        }\r\n        \r\n        buyOrder[sellToken][sellTokenId] = 0;\r\n    }\r\n    \r\n    function BuyRequest(address token, uint256 tokenId, uint256 amount) public payable {\r\n        require(IERC721(token).getApproved(tokenId) == address(transferProxy), \"Not approved yet.\");\r\n        require(IERC721(token).ownerOf(tokenId) == msg.sender, \"Only owner can request.\");\r\n        \r\n        require(msg.value == listingFee, \"Incorrect listing fee.\");\r\n        \r\n        buyOrder[token][tokenId] = amount;\r\n    }\r\n    \r\n    function AuctionRequest(address token, uint256 tokenId, address buytoken) public payable {\r\n        require(IERC721(token).getApproved(tokenId) == address(transferProxy), \"Not approved yet.\");\r\n        require(IERC721(token).ownerOf(tokenId) == msg.sender, \"Only owner can request.\");\r\n        \r\n        require(msg.value == listingFee, \"Incorrect listing fee.\");\r\n        \r\n        auctionOrder[token][tokenId] = buytoken;\r\n    }\r\n    \r\n    function CancelBuyRequest(address token, uint256 tokenId) public {\r\n        require(IERC721(token).getApproved(tokenId) == address(transferProxy), \"Not approved yet.\");\r\n        require(IERC721(token).ownerOf(tokenId) == msg.sender, \"Only owner can request.\");\r\n        buyOrder[token][tokenId] = 0;\r\n    }\r\n    \r\n    function validateBuyRequest(address token, uint256 tokenId, uint256 amount) internal {\r\n        require(buyOrder[token][tokenId] == amount, \"Amount is incorrect.\");\r\n    }\r\n    \r\n    function BidRequest(address sellToken, uint256 tokenId, address buyToken, uint256 amount) public {\r\n        require(IERC20(buyToken).allowance(msg.sender, address(erc20TransferProxy)) >= amount, \"Not allowed yet.\");\r\n        require(auctionOrder[sellToken][tokenId] == buyToken, \"Not acceptable asset.\");\r\n        \r\n        bidOrder[sellToken][tokenId][msg.sender][buyToken] = amount;\r\n        bidMembers[sellToken][tokenId].push(msg.sender);\r\n    }\r\n    \r\n    function validateBidRequest(address sellToken, uint256 tokenId, address buyer, address buyToken, uint256 amount) internal {\r\n        require(bidOrder[sellToken][tokenId][buyer][buyToken] == amount, \"Amount is incorrect.\");\r\n    }\r\n    \r\n    function CancelBid(address sellToken, uint256 tokenId, address buyToken) public {\r\n        bidOrder[sellToken][tokenId][msg.sender][buyToken] = 0;\r\n        for (uint256 i  = 0; i < bidMembers[sellToken][tokenId].length; i++) {\r\n            if (bidMembers[sellToken][tokenId][i] == msg.sender) {\r\n                bidMembers[sellToken][tokenId][i] = bidMembers[sellToken][tokenId][bidMembers[sellToken][tokenId].length - 1];\r\n                bidMembers[sellToken][tokenId].pop();\r\n                break;\r\n            }\r\n        }\r\n    }\r\n    \r\n    function CancelAllBid(address sellToken, uint256 tokenId, address buyToken) internal {\r\n        while (bidMembers[sellToken][tokenId].length != 0) {\r\n            address member = bidMembers[sellToken][tokenId][bidMembers[sellToken][tokenId].length - 1];\r\n            bidOrder[sellToken][tokenId][member][buyToken] = 0;\r\n            bidMembers[sellToken][tokenId].pop();\r\n        }\r\n    }\r\n    \r\n    function CancelAuctionRequests(address sellToken, uint256 tokenId, address buyToken) public {\r\n        require(IERC721(sellToken).getApproved(tokenId) == address(transferProxy), \"Not approved nft token.\");\r\n        require(IERC721(sellToken).ownerOf(tokenId) == msg.sender, \"Only owner can request.\");\r\n        \r\n        CancelAllBid(sellToken, tokenId, buyToken);\r\n        auctionOrder[sellToken][tokenId] = address(0);\r\n    }\r\n    \r\n    function setListingFee(uint256 fee) public onlyOwner {\r\n        listingFee = fee;\r\n    }\r\n    \r\n    function depositBNB() public payable {\r\n        require(msg.value > 0, \"The sending amount must be greater than zero.\");\r\n    }\r\n    \r\n    function withdrawBNB(address payable receiver, uint256 amount) public onlyOwner payable {\r\n        require(receiver != address(0), \"The receiver must not be null address.\");\r\n        require(amount > 0, \"The amount must be greater than zero.\");\r\n        \r\n        receiver.transfer(amount);\r\n    }\r\n    \r\n    function setCaribMarsAddress(address _caribmarsAddress) public onlyOwner {\r\n        require(_caribmarsAddress != address(0), \"Not allowed to set zero address.\");\r\n        \r\n        caribmarsAddress = _caribmarsAddress;\r\n    }\r\n    \r\n    function setGovernanceAddress(address _governanceAddress) public onlyOwner {\r\n        require(_governanceAddress != address(0), \"Now allowed to set zero address.\");\r\n        \r\n        governanceAddress = _governanceAddress;\r\n    }\r\n    \r\n    function clearStake(IERC721 token, uint256 tokenID) public {\r\n        require(tokenStakings[address(token)][tokenID] == true, \"Not staked token.\");\r\n        require(IERC721(token).ownerOf(tokenID) == _msgSender(), \"Not owner.\");\r\n        uint256 feeAmount = (block.number - stakingBlockNumbers[address(token)][tokenID]) * farmFeePerBlock;\r\n        \r\n        erc20TransferProxy.erc20safeTransferFrom(IERC20(caribmarsAddress), _msgSender(), governanceAddress, farmTokenAmount);\r\n        IERC721(token).clearStake(tokenID);\r\n        erc20TransferProxy.erc20safeTransferFrom(IERC20(caribmarsAddress), governanceAddress, _msgSender(), feeAmount);\r\n        \r\n        tokenStakings[address(token)][tokenID] = false;\r\n    }\r\n    \r\n    function stake(IERC721 token, uint256 tokenID) public {\r\n        require(IERC721(token).ownerOf(tokenID) == _msgSender(), \"Not owner.\");\r\n        \r\n        transferProxy.erc721Stake(token, tokenID, address(this));\r\n        erc20TransferProxy.erc20safeTransferFrom(IERC20(caribmarsAddress), governanceAddress, _msgSender(), farmTokenAmount);\r\n        \r\n        tokenStakings[address(token)][tokenID] = true;\r\n        stakingBlockNumbers[address(token)][tokenID] = block.number;\r\n    }\r\n    \r\n    function setERC20TransferProxy(ERC20TransferProxy _erc20TransferProxy) public onlyOwner {\r\n        erc20TransferProxy = _erc20TransferProxy;\r\n    }\r\n    \r\n    function setTransferProxy(TransferProxy _transferProxy) public onlyOwner {\r\n        transferProxy = _transferProxy;\r\n    }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"contract TransferProxy\",\"name\":\"_transferProxy\",\"type\":\"address\"},{\"internalType\":\"contract ERC20TransferProxy\",\"name\":\"_erc20TransferProxy\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"buytoken\",\"type\":\"address\"}],\"name\":\"AuctionRequest\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"sellToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"buyToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"BidRequest\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"BuyRequest\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"sellToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"buyToken\",\"type\":\"address\"}],\"name\":\"CancelAuctionRequests\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"sellToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"buyToken\",\"type\":\"address\"}],\"name\":\"CancelBid\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"CancelBuyRequest\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"auctionOrder\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"bidMembers\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"bidOrder\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"sellToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"sellTokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"buyValue\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"}],\"name\":\"buy\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"buyOrder\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"caribmarsAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"contract IERC721\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenID\",\"type\":\"uint256\"}],\"name\":\"clearStake\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"depositBNB\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"erc20TransferProxy\",\"outputs\":[{\"internalType\":\"contract ERC20TransferProxy\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"sellToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"sellTokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"buyToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"buyValue\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"}],\"name\":\"exchange\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"farmFeePerBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"farmTokenAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"governanceAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isOwner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"listingFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"serviceAddress\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"serviceFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_caribmarsAddress\",\"type\":\"address\"}],\"name\":\"setCaribMarsAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"contract ERC20TransferProxy\",\"name\":\"_erc20TransferProxy\",\"type\":\"address\"}],\"name\":\"setERC20TransferProxy\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_governanceAddress\",\"type\":\"address\"}],\"name\":\"setGovernanceAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"}],\"name\":\"setListingFee\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"contract TransferProxy\",\"name\":\"_transferProxy\",\"type\":\"address\"}],\"name\":\"setTransferProxy\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"contract IERC721\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenID\",\"type\":\"uint256\"}],\"name\":\"stake\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"stakingBlockNumbers\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"tokenStakings\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"transferProxy\",\"outputs\":[{\"internalType\":\"contract TransferProxy\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdrawBNB\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"}]","ContractName":"ExchangeV1","CompilerVersion":"v0.5.17+commit.d19bba13","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"000000000000000000000000fde6d6718c66d6b3420680f58b4b421ad41844cf000000000000000000000000d8294cb84580fd00f28b2b7f75d947589ab06b49","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"bzzr://48b7e0f83eeb3f6b6ce7d29f849d164a4e63ee619c09182f98bb985cd1e95c3a"}]}