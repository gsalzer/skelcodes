{"status":"1","message":"OK","result":[{"SourceCode":"{\"Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size \\u003e 0;\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance \\u003e= value);\\n        require(isContract(target));\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length \\u003e 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"},\"Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\"},\"Distribution.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\npragma experimental ABIEncoderV2;\\r\\n\\r\\nimport \\u0027./Ownable.sol\\u0027;\\r\\nimport \\u0027./SafeMath.sol\\u0027;\\r\\nimport \\u0027./Address.sol\\u0027;\\r\\nimport \\u0027./Context.sol\\u0027;\\r\\n\\r\\ncontract VRFRequestIDBase {\\r\\n    function makeVRFInputSeed(\\r\\n        bytes32 _keyHash,\\r\\n        uint256 _userSeed,\\r\\n        address _requester,\\r\\n        uint256 _nonce\\r\\n    ) internal pure returns (uint256) {\\r\\n        return  uint256(keccak256(abi.encode(_keyHash, _userSeed, _requester, _nonce)));\\r\\n    }\\r\\n    function makeRequestId(\\r\\n        bytes32 _keyHash,\\r\\n        uint256 _vRFInputSeed\\r\\n    ) internal pure returns (bytes32) {\\r\\n        return keccak256(abi.encodePacked(_keyHash, _vRFInputSeed));\\r\\n    }\\r\\n}\\r\\n\\r\\ninterface LinkTokenInterface {\\r\\n  function allowance(address owner, address spender) external view returns (uint256 remaining);\\r\\n  function approve(address spender, uint256 value) external returns (bool success);\\r\\n  function balanceOf(address owner) external view returns (uint256 balance);\\r\\n  function decimals() external view returns (uint8 decimalPlaces);\\r\\n  function decreaseApproval(address spender, uint256 addedValue) external returns (bool success);\\r\\n  function increaseApproval(address spender, uint256 subtractedValue) external;\\r\\n  function name() external view returns (string memory tokenName);\\r\\n  function symbol() external view returns (string memory tokenSymbol);\\r\\n  function totalSupply() external view returns (uint256 totalTokensIssued);\\r\\n  function transfer(address to, uint256 value) external returns (bool success);\\r\\n  function transferAndCall(address to, uint256 value, bytes calldata data) external returns (bool success);\\r\\n  function transferFrom(address from, address to, uint256 value) external returns (bool success);\\r\\n}\\r\\n\\r\\nabstract contract VRFConsumerBase is VRFRequestIDBase {\\r\\n    using SafeMath for uint256;\\r\\n    \\r\\n    function fulfillRandomness(\\r\\n        bytes32 requestId,\\r\\n        uint256 randomness\\r\\n    ) internal virtual;\\r\\n\\r\\n    function requestRandomness(\\r\\n        bytes32 _keyHash,\\r\\n        uint256 _fee,\\r\\n        uint256 _seed\\r\\n    ) internal returns (bytes32 requestId) {\\r\\n        LINK.transferAndCall(vrfCoordinator, _fee, abi.encode(_keyHash, _seed));\\r\\n        uint256 vRFSeed  = makeVRFInputSeed(_keyHash, _seed, address(this), nonces[_keyHash]);\\r\\n        nonces[_keyHash] = nonces[_keyHash].add(1);\\r\\n        return makeRequestId(_keyHash, vRFSeed);\\r\\n    }\\r\\n\\r\\n    LinkTokenInterface immutable internal LINK;\\r\\n\\r\\n    address immutable private vrfCoordinator;\\r\\n    mapping(bytes32 /* keyHash */ =\\u003e uint256 /* nonce */) private nonces;\\r\\n\\r\\n    constructor(\\r\\n        address _vrfCoordinator,\\r\\n        address _link\\r\\n    ) {\\r\\n        vrfCoordinator = _vrfCoordinator;\\r\\n        LINK = LinkTokenInterface(_link);\\r\\n    }\\r\\n\\r\\n    function rawFulfillRandomness(\\r\\n        bytes32 requestId,\\r\\n        uint256 randomness\\r\\n    ) external {\\r\\n        require(msg.sender == vrfCoordinator, \\\"Only VRFCoordinator can fulfill\\\");\\r\\n        fulfillRandomness(requestId, randomness);\\r\\n    }\\r\\n}\\r\\n\\r\\ncontract RandomNumberConsumer is VRFConsumerBase {\\r\\n    bytes32 internal keyHash;\\r\\n    uint256 internal fee;\\r\\n    \\r\\n    bool private progress = false;\\r\\n    uint256 private winner = 0;\\r\\n    address private distributer;\\r\\n    \\r\\n    modifier onlyDistributer() {\\r\\n        require(distributer == msg.sender, \\\"Ownable: caller is not the owner\\\");\\r\\n        _;\\r\\n    }\\r\\n    \\r\\n    /**\\r\\n     * Constructor inherits VRFConsumerBase\\r\\n     * \\r\\n     * Network: Mainnet\\r\\n     * Chainlink VRF Coordinator address: 0xf0d54349aDdcf704F77AE15b96510dEA15cb7952\\r\\n     * LINK token address:                0x514910771AF9Ca656af840dff83E8264EcF986CA\\r\\n     * Key Hash: 0xAA77729D3466CA35AE8D28B3BBAC7CC36A5031EFDC430821C02BC31A238AF445\\r\\n     */\\r\\n    constructor(address _distributer) \\r\\n        VRFConsumerBase(\\r\\n            0xf0d54349aDdcf704F77AE15b96510dEA15cb7952,\\r\\n            0x514910771AF9Ca656af840dff83E8264EcF986CA\\r\\n        )\\r\\n    {\\r\\n        keyHash = 0xAA77729D3466CA35AE8D28B3BBAC7CC36A5031EFDC430821C02BC31A238AF445;\\r\\n        fee = 2 * 10 ** 18; // 2 LINK\\r\\n        distributer = _distributer;\\r\\n    }\\r\\n    \\r\\n    /** \\r\\n     * Requests randomness from a user-provided seed\\r\\n     */\\r\\n    function getRandomNumber(uint256 userProvidedSeed) public onlyDistributer returns (bytes32 requestId) {        \\r\\n        require(LINK.balanceOf(address(this)) \\u003e= fee, \\\"Not enough LINK - fill contract with faucet\\\");\\r\\n        require(!progress, \\\"now getting an random number.\\\");\\r\\n        winner = 0;\\r\\n        progress = true;\\r\\n        return requestRandomness(keyHash, fee, userProvidedSeed);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * Callback function used by VRF Coordinator\\r\\n     */\\r\\n    function fulfillRandomness(bytes32 requestId, uint256 randomness) internal override {\\r\\n        requestId = 0;\\r\\n        progress = false;\\r\\n        winner = randomness;\\r\\n    }\\r\\n\\r\\n    function getWinner() external view onlyDistributer returns (uint256) {\\r\\n        if(progress)\\r\\n            return 0;\\r\\n        return winner;\\r\\n    }\\r\\n}\\r\\n\\r\\ncontract Distribution is Context, Ownable {\\r\\n    using SafeMath for uint256;\\r\\n    using Address for address;\\r\\n\\r\\n    RandomNumberConsumer public rnGenerator;\\r\\n\\r\\n    uint256 public _randomCallCount = 0;\\r\\n    uint256 public _prevRandomCallCount = 0;\\r\\n\\r\\n    uint256 public _punkWinner = 6500;\\r\\n    uint256[] public _legendaryMonsterWinners;\\r\\n    uint256[] public _ethWinners;\\r\\n    uint256[] public _zedWinners;\\r\\n    \\r\\n    constructor () {\\r\\n        rnGenerator = new RandomNumberConsumer(address(this));\\r\\n    }\\r\\n\\r\\n    function getRandomNumber() external onlyOwner {\\r\\n        rnGenerator.getRandomNumber(_randomCallCount);\\r\\n        _randomCallCount = _randomCallCount + 1;\\r\\n    }\\r\\n\\r\\n    // Function to distribute punk.\\r\\n    function setPunkWinner() external onlyOwner {\\r\\n        require(_prevRandomCallCount != _randomCallCount, \\\"Please generate random number.\\\");\\r\\n        require(rnGenerator.getWinner() != 0, \\u0027Please wait until random number generated.\\u0027);\\r\\n        require(_punkWinner == 6500, \\u0027You already picked punk winner\\u0027);\\r\\n\\r\\n        _prevRandomCallCount = _randomCallCount;\\r\\n        _punkWinner = rnGenerator.getWinner().mod(6400);\\r\\n    }\\r\\n\\r\\n    // Function to distribute legendary monster.\\r\\n    function setLegendaryMonsterWinner() external onlyOwner {\\r\\n        require(_prevRandomCallCount != _randomCallCount, \\\"Please generate random number.\\\");\\r\\n        require(rnGenerator.getWinner() != 0, \\u0027Please wait until random number generated.\\u0027);\\r\\n        \\r\\n        _prevRandomCallCount = _randomCallCount;\\r\\n        uint256 _tempWinner = rnGenerator.getWinner().mod(3884);\\r\\n        for(uint i=0; i\\u003c_legendaryMonsterWinners.length; i++ ) {\\r\\n            require(_legendaryMonsterWinners[i] != _tempWinner, \\u0027Same winner already exists.\\u0027);\\r\\n        }\\r\\n        _legendaryMonsterWinners.push(_tempWinner);\\r\\n    }\\r\\n\\r\\n    // Function to distribute eth.\\r\\n    function setETHWinner() external onlyOwner {\\r\\n        require(_prevRandomCallCount != _randomCallCount, \\\"Please generate random number.\\\");\\r\\n        require(rnGenerator.getWinner() != 0, \\u0027Please wait until random number generated.\\u0027);\\r\\n        \\r\\n        _prevRandomCallCount = _randomCallCount;\\r\\n        uint256 _tempWinner = rnGenerator.getWinner().mod(400) + 6000;\\r\\n        for(uint i=0; i\\u003c_ethWinners.length; i++ ) {\\r\\n            require(_ethWinners[i] != _tempWinner, \\u0027Same winner already exists.\\u0027);\\r\\n        }\\r\\n        _ethWinners.push(_tempWinner);\\r\\n    }\\r\\n\\r\\n    // Function to distribute zed.\\r\\n    function setZedWinner() external onlyOwner {\\r\\n        require(_prevRandomCallCount != _randomCallCount, \\\"Please generate random number.\\\");\\r\\n        require(rnGenerator.getWinner() != 0, \\u0027Please wait until random number generated.\\u0027);\\r\\n        \\r\\n        _prevRandomCallCount = _randomCallCount;\\r\\n        uint256 _tempWinner = rnGenerator.getWinner().mod(6400);\\r\\n        for(uint i=0; i\\u003c_zedWinners.length; i++ ) {\\r\\n            require(_zedWinners[i] != _tempWinner, \\u0027Same winner already exists.\\u0027);\\r\\n        }\\r\\n        _zedWinners.push(_tempWinner);\\r\\n    }\\r\\n}\\r\\n\"},\"Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./Context.sol\\\";\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor () {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n}\\n\"},\"SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler\\u0027s built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity\\u0027s arithmetic operations.\\n *\\n * NOTE: `SafeMath` is no longer needed starting with Solidity 0.8. The compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity\\u0027s `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity\\u0027s `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity\\u0027s `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity\\u0027s `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity\\u0027s `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity\\u0027s `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        unchecked {\\n            require(b \\u003c= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity\\u0027s `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Counterpart to Solidity\\u0027s `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        unchecked {\\n            require(b \\u003e 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity\\u0027s `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        unchecked {\\n            require(b \\u003e 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\"}}","ABI":"[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"_ethWinners\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"_legendaryMonsterWinners\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_prevRandomCallCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_punkWinner\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_randomCallCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"_zedWinners\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRandomNumber\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rnGenerator\",\"outputs\":[{\"internalType\":\"contract RandomNumberConsumer\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"setETHWinner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"setLegendaryMonsterWinner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"setPunkWinner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"setZedWinner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"Distribution","CompilerVersion":"v0.8.1+commit.df193b15","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://551bd5b4c533fb792c54de4decc3486513b1986c48f4dd6fae725b4d8951d2ee"}]}