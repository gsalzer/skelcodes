{"status":"1","message":"OK","result":[{"SourceCode":"// SPDX-License-Identifier: MIT\r\n\r\npragma solidity 0.8.3; // optimization runs: 200, evm version: petersburg\r\n\r\n/**\r\n * @title DharmaActionRegistryUpgradeBeacon\r\n * @author cf\r\n * @notice This contract holds the address of the current implementation for\r\n * the Dharma Action Registry contract and lets a controller update that address\r\n * in storage.\r\n * The contract has been forked and modified slightly from 0age's original implementation.\r\n */\r\ncontract DharmaActionRegistryUpgradeBeacon {\r\n  // The implementation address is held in storage slot zero.\r\n  address private _implementation;\r\n\r\n  // The controller that can update the implementation an immutable.\r\n  // The value is set at deployment in the constructor.\r\n  address private immutable _UPGRADE_BEACON_CONTROLLER;\r\n\r\n  constructor(address upgradeBeaconControllerAddress) {\r\n    // Ensure upgrade-beacon-controller is specified\r\n    require(upgradeBeaconControllerAddress != address(0), \"Must specify an upgrade-beacon-controller address.\");\r\n\r\n    // Ensure that the upgrade-beacon-controller contract has code via extcodesize.\r\n    uint256 upgradeBeaconControllerSize;\r\n    assembly { upgradeBeaconControllerSize := extcodesize(upgradeBeaconControllerAddress) }\r\n    require(upgradeBeaconControllerSize > 0, \"upgrade-beacon-controller must have contract code.\");\r\n\r\n    _UPGRADE_BEACON_CONTROLLER = upgradeBeaconControllerAddress;\r\n  }\r\n\r\n  /**\r\n   * @notice In the fallback function, allow only the controller to update the\r\n   * implementation address - for all other callers, return the current address.\r\n   * Note that this requires inline assembly, as Solidity fallback functions do\r\n   * not natively take arguments or return values.\r\n   */\r\n  fallback() external {\r\n    // Return implementation address for all callers other than the controller.\r\n    if (msg.sender != _UPGRADE_BEACON_CONTROLLER) {\r\n      // Load implementation from storage slot zero into memory and return it.\r\n      assembly {\r\n        mstore(0, sload(0))\r\n        return(0, 32)\r\n      }\r\n    } else {\r\n      // Set implementation - put first word in calldata in storage slot zero.\r\n      assembly { sstore(0, calldataload(0)) }\r\n    }\r\n  }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"upgradeBeaconControllerAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"stateMutability\":\"nonpayable\",\"type\":\"fallback\"}]","ContractName":"DharmaActionRegistryUpgradeBeacon","CompilerVersion":"v0.8.3+commit.8d00100c","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000c7f31f249f88bebb409afd5cad979a347fa7ffc1","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://1dda48136c5a3019ad7f8ecdc184e4799bcefc4d30e0cee15a112dfca432fdb6"}]}