{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"SafeMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return sub(a, b, \\\"SafeMath: subtraction overflow\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        uint256 c = a - b;\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        uint256 c = a / b;\\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return mod(a, b, \\\"SafeMath: modulo by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts with custom message when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b != 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\"\r\n    },\r\n    \"IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"IDAOCommittee.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.7.6;\\npragma abicoder v2;\\n\\nimport { IStorageStateCommittee } from \\\"IStorageStateCommittee.sol\\\";\\n\\ninterface IDAOCommittee is IStorageStateCommittee {\\n    //--owner\\n    function setSeigManager(address _seigManager) external;\\n    function setCandidatesSeigManager(address[] calldata _candidateContracts, address _seigManager) external;\\n    function setCandidatesCommittee(address[] calldata _candidateContracts, address _committee) external;\\n    function setLayer2Registry(address _layer2Registry) external;\\n    function setAgendaManager(address _agendaManager) external;\\n    function setCandidateFactory(address _candidateFactory) external;\\n    function setTon(address _ton) external;\\n    function setActivityRewardPerSecond(uint256 _value) external;\\n    function setDaoVault(address _daoVault) external;\\n\\n    function increaseMaxMember(uint256 _newMaxMember, uint256 _quorum) external;\\n    function decreaseMaxMember(uint256 _reducingMemberIndex, uint256 _quorum) external;\\n    function createCandidate(string calldata _memo) external;\\n    function registerLayer2Candidate(address _layer2, string memory _memo) external;\\n    function registerLayer2CandidateByOwner(address _operator, address _layer2, string memory _memo) external;\\n    function changeMember(uint256 _memberIndex) external returns (bool);\\n    function retireMember() external returns (bool);\\n    function setMemoOnCandidate(address _candidate, string calldata _memo) external;\\n    function setMemoOnCandidateContract(address _candidate, string calldata _memo) external;\\n\\n    function onApprove(\\n        address owner,\\n        address spender,\\n        uint256 tonAmount,\\n        bytes calldata data\\n    )\\n        external\\n        returns (bool);\\n\\n    function setQuorum(uint256 _quorum) external;\\n    function setCreateAgendaFees(uint256 _fees) external;\\n    function setMinimumNoticePeriodSeconds(uint256 _minimumNoticePeriod) external;\\n    function setMinimumVotingPeriodSeconds(uint256 _minimumVotingPeriod) external;\\n    function setExecutingPeriodSeconds(uint256 _executingPeriodSeconds) external;\\n    function castVote(uint256 _AgendaID, uint256 _vote, string calldata _comment) external;\\n    function endAgendaVoting(uint256 _agendaID) external;\\n    function executeAgenda(uint256 _AgendaID) external;\\n    function setAgendaStatus(uint256 _agendaID, uint256 _status, uint256 _result) external;\\n\\n    function updateSeigniorage(address _candidate) external returns (bool);\\n    function updateSeigniorages(address[] calldata _candidates) external returns (bool);\\n    function claimActivityReward(address _receiver) external;\\n\\n    function isCandidate(address _candidate) external view returns (bool);\\n    function totalSupplyOnCandidate(address _candidate) external view returns (uint256);\\n    function balanceOfOnCandidate(address _candidate, address _account) external view returns (uint256);\\n    function totalSupplyOnCandidateContract(address _candidateContract) external view returns (uint256);\\n    function balanceOfOnCandidateContract(address _candidateContract, address _account) external view returns (uint256);\\n    function candidatesLength() external view returns (uint256);\\n    function isExistCandidate(address _candidate) external view returns (bool);\\n    function getClaimableActivityReward(address _candidate) external view returns (uint256);\\n}\\n\\n\"\r\n    },\r\n    \"LibAgenda.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.7.6;\\npragma abicoder v2;\\n\\nlibrary LibAgenda {\\n    //using LibAgenda for Agenda;\\n\\n    enum AgendaStatus { NONE, NOTICE, VOTING, WAITING_EXEC, EXECUTED, ENDED }\\n    enum AgendaResult { PENDING, ACCEPT, REJECT, DISMISS }\\n\\n    //votor : based operator \\n    struct Voter {\\n        bool isVoter;\\n        bool hasVoted;\\n        uint256 vote;\\n    }\\n\\n    // counting abstainVotes yesVotes noVotes\\n    struct Agenda {\\n        uint256 createdTimestamp;\\n        uint256 noticeEndTimestamp;\\n        uint256 votingPeriodInSeconds;\\n        uint256 votingStartedTimestamp;\\n        uint256 votingEndTimestamp;\\n        uint256 executableLimitTimestamp;\\n        uint256 executedTimestamp;\\n        uint256 countingYes;\\n        uint256 countingNo;\\n        uint256 countingAbstain;\\n        AgendaStatus status;\\n        AgendaResult result;\\n        address[] voters;\\n        bool executed;\\n    }\\n\\n    struct AgendaExecutionInfo {\\n        address[] targets;\\n        bytes[] functionBytecodes;\\n        bool atomicExecute;\\n        uint256 executeStartFrom;\\n    }\\n\\n    /*function getAgenda(Agenda[] storage agendas, uint256 index) public view returns (Agenda storage agenda) {\\n        return agendas[index];\\n    }*/\\n}\\n\"\r\n    },\r\n    \"Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"Context.sol\\\";\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor () internal {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(_owner == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n}\\n\"\r\n    },\r\n    \"DAOAgendaManager.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.7.6;\\npragma abicoder v2;\\n\\nimport { SafeMath } from \\\"SafeMath.sol\\\";\\nimport { IERC20 } from  \\\"IERC20.sol\\\";\\nimport { IDAOAgendaManager } from \\\"IDAOAgendaManager.sol\\\";\\nimport { IDAOCommittee } from \\\"IDAOCommittee.sol\\\";\\nimport { ICandidate } from \\\"ICandidate.sol\\\";\\nimport { LibAgenda } from \\\"LibAgenda.sol\\\";\\nimport \\\"Ownable.sol\\\";\\n\\ncontract DAOAgendaManager is Ownable, IDAOAgendaManager {\\n    using SafeMath for uint256;\\n    using LibAgenda for *;\\n\\n    enum VoteChoice { ABSTAIN, YES, NO, MAX }\\n\\n    IDAOCommittee public override committee;\\n    \\n    uint256 public override createAgendaFees;\\n    \\n    uint256 public override minimumNoticePeriodSeconds;\\n    uint256 public override minimumVotingPeriodSeconds;\\n    uint256 public override executingPeriodSeconds;\\n    \\n    LibAgenda.Agenda[] internal _agendas;\\n    mapping(uint256 => mapping(address => LibAgenda.Voter)) internal _voterInfos;\\n    mapping(uint256 => LibAgenda.AgendaExecutionInfo) internal _executionInfos;\\n    \\n    event AgendaStatusChanged(\\n        uint256 indexed agendaID,\\n        uint256 prevStatus,\\n        uint256 newStatus\\n    );\\n\\n    event AgendaResultChanged(\\n        uint256 indexed agendaID,\\n        uint256 result\\n    );\\n\\n    event CreatingAgendaFeeChanged(\\n        uint256 newFee\\n    );\\n\\n    event MinimumNoticePeriodChanged(\\n        uint256 newPeriod\\n    );\\n\\n    event MinimumVotingPeriodChanged(\\n        uint256 newPeriod\\n    );\\n\\n    event ExecutingPeriodChanged(\\n        uint256 newPeriod\\n    );\\n\\n    modifier validAgenda(uint256 _agendaID) {\\n        require(_agendaID < _agendas.length, \\\"DAOAgendaManager: invalid agenda id\\\");\\n        _;\\n    }\\n    \\n    constructor() {\\n        minimumNoticePeriodSeconds = 16 days;\\n        minimumVotingPeriodSeconds = 2 days;\\n        executingPeriodSeconds = 7 days;\\n        \\n        createAgendaFees = 100000000000000000000; // 100 TON\\n    }\\n\\n    function getStatus(uint256 _status) public pure override returns (LibAgenda.AgendaStatus emnustatus) {\\n        require(_status < 6, \\\"DAOAgendaManager: invalid status value\\\");\\n        if (_status == uint256(LibAgenda.AgendaStatus.NOTICE))\\n            return LibAgenda.AgendaStatus.NOTICE;\\n        else if (_status == uint256(LibAgenda.AgendaStatus.VOTING))\\n            return LibAgenda.AgendaStatus.VOTING;\\n        else if (_status == uint256(LibAgenda.AgendaStatus.EXECUTED))\\n            return LibAgenda.AgendaStatus.EXECUTED;\\n        else if (_status == uint256(LibAgenda.AgendaStatus.ENDED))\\n            return LibAgenda.AgendaStatus.ENDED;\\n        else\\n            return LibAgenda.AgendaStatus.NONE;\\n    }\\n\\n    /// @notice Set DAOCommitteeProxy contract address\\n    /// @param _committee New DAOCommitteeProxy contract address\\n    function setCommittee(address _committee) external override onlyOwner {\\n        require(_committee != address(0), \\\"DAOAgendaManager: address is zero\\\");\\n        committee = IDAOCommittee(_committee);\\n    }\\n\\n    /// @notice Set the fee(TON) of creating an agenda\\n    /// @param _createAgendaFees New fee(TON)\\n    function setCreateAgendaFees(uint256 _createAgendaFees) external override onlyOwner {\\n        createAgendaFees = _createAgendaFees;\\n        emit CreatingAgendaFeeChanged(_createAgendaFees);\\n    }\\n\\n    /// @notice Set the minimum notice period in seconds\\n    /// @param _minimumNoticePeriodSeconds New minimum notice period in seconds\\n    function setMinimumNoticePeriodSeconds(uint256 _minimumNoticePeriodSeconds) external override onlyOwner {\\n        minimumNoticePeriodSeconds = _minimumNoticePeriodSeconds;\\n        emit MinimumNoticePeriodChanged(_minimumNoticePeriodSeconds);\\n    }\\n\\n    /// @notice Set the executing period in seconds\\n    /// @param _executingPeriodSeconds New executing period in seconds\\n    function setExecutingPeriodSeconds(uint256 _executingPeriodSeconds) external override onlyOwner {\\n        executingPeriodSeconds = _executingPeriodSeconds;\\n        emit ExecutingPeriodChanged(_executingPeriodSeconds);\\n    }\\n\\n    /// @notice Set the minimum voting period in seconds\\n    /// @param _minimumVotingPeriodSeconds New minimum voting period in seconds\\n    function setMinimumVotingPeriodSeconds(uint256 _minimumVotingPeriodSeconds) external override onlyOwner {\\n        minimumVotingPeriodSeconds = _minimumVotingPeriodSeconds;\\n        emit MinimumVotingPeriodChanged(_minimumVotingPeriodSeconds);\\n    }\\n      \\n    /// @notice Creates an agenda\\n    /// @param _targets Target addresses for executions of the agenda\\n    /// @param _noticePeriodSeconds Notice period in seconds\\n    /// @param _votingPeriodSeconds Voting period in seconds\\n    /// @param _functionBytecodes RLP-Encoded parameters for executions of the agenda\\n    /// @return agendaID Created agenda ID\\n    function newAgenda(\\n        address[] calldata _targets,\\n        uint256 _noticePeriodSeconds,\\n        uint256 _votingPeriodSeconds,\\n        bool _atomicExecute,\\n        bytes[] calldata _functionBytecodes\\n    )\\n        external\\n        override\\n        onlyOwner\\n        returns (uint256 agendaID)\\n    {\\n        require(\\n            _noticePeriodSeconds >= minimumNoticePeriodSeconds,\\n            \\\"DAOAgendaManager: minimumNoticePeriod is short\\\"\\n        );\\n\\n        agendaID = _agendas.length;\\n         \\n        address[] memory emptyArray;\\n        _agendas.push(LibAgenda.Agenda({\\n            status: LibAgenda.AgendaStatus.NOTICE,\\n            result: LibAgenda.AgendaResult.PENDING,\\n            executed: false,\\n            createdTimestamp: block.timestamp,\\n            noticeEndTimestamp: block.timestamp + _noticePeriodSeconds,\\n            votingPeriodInSeconds: _votingPeriodSeconds,\\n            votingStartedTimestamp: 0,\\n            votingEndTimestamp: 0,\\n            executableLimitTimestamp: 0,\\n            executedTimestamp: 0,\\n            countingYes: 0,\\n            countingNo: 0,\\n            countingAbstain: 0,\\n            voters: emptyArray\\n        }));\\n\\n        LibAgenda.AgendaExecutionInfo storage executionInfo = _executionInfos[agendaID];\\n        executionInfo.atomicExecute = _atomicExecute;\\n        executionInfo.executeStartFrom = 0;\\n        for (uint256 i = 0; i < _targets.length; i++) {\\n            executionInfo.targets.push(_targets[i]);\\n            executionInfo.functionBytecodes.push(_functionBytecodes[i]);\\n        }\\n    }\\n\\n    /// @notice Casts vote for an agenda\\n    /// @param _agendaID Agenda ID\\n    /// @param _voter Voter\\n    /// @param _vote Voting type\\n    /// @return Whether or not the execution succeeded\\n    function castVote(\\n        uint256 _agendaID,\\n        address _voter,\\n        uint256 _vote\\n    )\\n        external\\n        override\\n        onlyOwner\\n        validAgenda(_agendaID)\\n        returns (bool)\\n    {\\n        require(_vote < uint256(VoteChoice.MAX), \\\"DAOAgendaManager: invalid vote\\\");\\n\\n        require(\\n            isVotableStatus(_agendaID),\\n            \\\"DAOAgendaManager: invalid status\\\"\\n        );\\n\\n        LibAgenda.Agenda storage agenda = _agendas[_agendaID];\\n\\n        if (agenda.status == LibAgenda.AgendaStatus.NOTICE) {\\n            _startVoting(_agendaID);\\n        }\\n\\n        require(isVoter(_agendaID, _voter), \\\"DAOAgendaManager: not a voter\\\");\\n        require(!hasVoted(_agendaID, _voter), \\\"DAOAgendaManager: already voted\\\");\\n\\n        require(\\n            block.timestamp <= agenda.votingEndTimestamp,\\n            \\\"DAOAgendaManager: for this agenda, the voting time expired\\\"\\n        );\\n        \\n        LibAgenda.Voter storage voter = _voterInfos[_agendaID][_voter];\\n        voter.hasVoted = true;\\n        voter.vote = _vote;\\n             \\n        // counting 0:abstainVotes 1:yesVotes 2:noVotes\\n        if (_vote == uint256(VoteChoice.ABSTAIN))\\n            agenda.countingAbstain = agenda.countingAbstain.add(1);\\n        else if (_vote == uint256(VoteChoice.YES))\\n            agenda.countingYes = agenda.countingYes.add(1);\\n        else if (_vote == uint256(VoteChoice.NO))\\n            agenda.countingNo = agenda.countingNo.add(1);\\n        else\\n            revert(\\\"DAOAgendaManager: invalid voting\\\");\\n        \\n        return true;\\n    }\\n    \\n    /// @notice Set the agenda status as executed\\n    /// @param _agendaID Agenda ID\\n    function setExecutedAgenda(uint256 _agendaID)\\n        external\\n        override\\n        onlyOwner\\n        validAgenda(_agendaID)\\n    {\\n        LibAgenda.Agenda storage agenda = _agendas[_agendaID];\\n        agenda.executed = true;\\n        agenda.executedTimestamp = block.timestamp;\\n\\n        uint256 prevStatus = uint256(agenda.status);\\n        agenda.status = LibAgenda.AgendaStatus.EXECUTED;\\n        emit AgendaStatusChanged(_agendaID, prevStatus, uint256(LibAgenda.AgendaStatus.EXECUTED));\\n    }\\n\\n    /// @notice Set the agenda result\\n    /// @param _agendaID Agenda ID\\n    /// @param _result New result\\n    function setResult(uint256 _agendaID, LibAgenda.AgendaResult _result)\\n        public\\n        override\\n        onlyOwner\\n        validAgenda(_agendaID)\\n    {\\n        LibAgenda.Agenda storage agenda = _agendas[_agendaID];\\n        agenda.result = _result;\\n\\n        emit AgendaResultChanged(_agendaID, uint256(_result));\\n    }\\n     \\n    /// @notice Set the agenda status\\n    /// @param _agendaID Agenda ID\\n    /// @param _status New status\\n    function setStatus(uint256 _agendaID, LibAgenda.AgendaStatus _status)\\n        public\\n        override\\n        onlyOwner\\n        validAgenda(_agendaID)\\n    {\\n        LibAgenda.Agenda storage agenda = _agendas[_agendaID];\\n\\n        uint256 prevStatus = uint256(agenda.status);\\n        agenda.status = _status;\\n        emit AgendaStatusChanged(_agendaID, prevStatus, uint256(_status));\\n    }\\n\\n    /// @notice Set the agenda status as ended(denied or dismissed)\\n    /// @param _agendaID Agenda ID\\n    function endAgendaVoting(uint256 _agendaID)\\n        external\\n        override\\n        onlyOwner\\n        validAgenda(_agendaID)\\n    {\\n        LibAgenda.Agenda storage agenda = _agendas[_agendaID];\\n\\n        require(\\n            agenda.status == LibAgenda.AgendaStatus.VOTING,\\n            \\\"DAOAgendaManager: agenda status is not changable\\\"\\n        );\\n\\n        require(\\n            agenda.votingEndTimestamp <= block.timestamp,\\n            \\\"DAOAgendaManager: voting is not ended yet\\\"\\n        );\\n\\n        setStatus(_agendaID, LibAgenda.AgendaStatus.ENDED);\\n        setResult(_agendaID, LibAgenda.AgendaResult.DISMISS);\\n    }\\n     \\n    function _startVoting(uint256 _agendaID) internal validAgenda(_agendaID) {\\n        LibAgenda.Agenda storage agenda = _agendas[_agendaID];\\n\\n        agenda.votingStartedTimestamp = block.timestamp;\\n        agenda.votingEndTimestamp = block.timestamp.add(agenda.votingPeriodInSeconds);\\n        agenda.executableLimitTimestamp = agenda.votingEndTimestamp.add(executingPeriodSeconds);\\n        agenda.status = LibAgenda.AgendaStatus.VOTING;\\n\\n        uint256 memberCount = committee.maxMember();\\n        for (uint256 i = 0; i < memberCount; i++) {\\n            address voter = committee.members(i);\\n            agenda.voters.push(voter);\\n            _voterInfos[_agendaID][voter].isVoter = true;\\n        }\\n\\n        emit AgendaStatusChanged(_agendaID, uint256(LibAgenda.AgendaStatus.NOTICE), uint256(LibAgenda.AgendaStatus.VOTING));\\n    }\\n    \\n    function isVoter(uint256 _agendaID, address _candidate) public view override validAgenda(_agendaID) returns (bool) {\\n        require(_candidate != address(0), \\\"DAOAgendaManager: user address is zero\\\");\\n        return _voterInfos[_agendaID][_candidate].isVoter;\\n    }\\n    \\n    function hasVoted(uint256 _agendaID, address _user) public view override validAgenda(_agendaID) returns (bool) {\\n        return _voterInfos[_agendaID][_user].hasVoted;\\n    }\\n\\n    function getVoteStatus(uint256 _agendaID, address _user) external view override validAgenda(_agendaID) returns (bool, uint256) {\\n        LibAgenda.Voter storage voter = _voterInfos[_agendaID][_user];\\n\\n        return (\\n            voter.hasVoted,\\n            voter.vote\\n        );\\n    }\\n    \\n    function getAgendaNoticeEndTimeSeconds(uint256 _agendaID) external view override validAgenda(_agendaID) returns (uint256) {\\n        return _agendas[_agendaID].noticeEndTimestamp;\\n    }\\n    \\n    function getAgendaVotingStartTimeSeconds(uint256 _agendaID) external view override validAgenda(_agendaID) returns (uint256) {\\n        return _agendas[_agendaID].votingStartedTimestamp;\\n    }\\n\\n    function getAgendaVotingEndTimeSeconds(uint256 _agendaID) external view override validAgenda(_agendaID) returns (uint256) {\\n        return _agendas[_agendaID].votingEndTimestamp;\\n    }\\n\\n    function canExecuteAgenda(uint256 _agendaID) external view override validAgenda(_agendaID) returns (bool) {\\n        LibAgenda.Agenda storage agenda = _agendas[_agendaID];\\n\\n        return agenda.status == LibAgenda.AgendaStatus.WAITING_EXEC &&\\n            block.timestamp <= agenda.executableLimitTimestamp &&\\n            agenda.result == LibAgenda.AgendaResult.ACCEPT &&\\n            agenda.votingEndTimestamp <= block.timestamp &&\\n            agenda.executed == false;\\n    }\\n    \\n    function getAgendaStatus(uint256 _agendaID) external view override validAgenda(_agendaID) returns (uint256 status) {\\n        return uint256(_agendas[_agendaID].status);\\n    }\\n\\n    function totalAgendas() external view override returns (uint256) {\\n        return _agendas.length;\\n    }\\n\\n    function getAgendaResult(uint256 _agendaID) external view override validAgenda(_agendaID) returns (uint256 result, bool executed) {\\n        return (uint256(_agendas[_agendaID].result), _agendas[_agendaID].executed);\\n    }\\n   \\n    function getExecutionInfo(uint256 _agendaID)\\n        external\\n        view\\n        override\\n        validAgenda(_agendaID)\\n        returns(\\n            address[] memory target,\\n            bytes[] memory functionBytecode,\\n            bool atomicExecute,\\n            uint256 executeStartFrom\\n        )\\n    {\\n        LibAgenda.AgendaExecutionInfo storage agenda = _executionInfos[_agendaID];\\n        return (\\n            agenda.targets,\\n            agenda.functionBytecodes,\\n            agenda.atomicExecute,\\n            agenda.executeStartFrom\\n        );\\n    }\\n\\n    function setExecutedCount(uint256 _agendaID, uint256 _count) external override {\\n        LibAgenda.AgendaExecutionInfo storage agenda = _executionInfos[_agendaID];\\n        agenda.executeStartFrom = agenda.executeStartFrom.add(_count);\\n    }\\n\\n    function isVotableStatus(uint256 _agendaID) public view override validAgenda(_agendaID) returns (bool) {\\n        LibAgenda.Agenda storage agenda = _agendas[_agendaID];\\n\\n        return block.timestamp <= agenda.votingEndTimestamp ||\\n            (agenda.status == LibAgenda.AgendaStatus.NOTICE &&\\n                agenda.noticeEndTimestamp <= block.timestamp);\\n    }\\n\\n    function getVotingCount(uint256 _agendaID)\\n        external\\n        view\\n        override\\n        returns (\\n            uint256 countingYes,\\n            uint256 countingNo,\\n            uint256 countingAbstain\\n        )\\n    {\\n        LibAgenda.Agenda storage agenda = _agendas[_agendaID];\\n        return (\\n            agenda.countingYes,\\n            agenda.countingNo,\\n            agenda.countingAbstain\\n        );\\n    }\\n\\n    function getAgendaTimestamps(uint256 _agendaID)\\n        external\\n        view\\n        override\\n        validAgenda(_agendaID)\\n        returns (\\n            uint256 createdTimestamp,\\n            uint256 noticeEndTimestamp,\\n            uint256 votingStartedTimestamp,\\n            uint256 votingEndTimestamp,\\n            uint256 executedTimestamp\\n        )\\n    {\\n        LibAgenda.Agenda storage agenda = _agendas[_agendaID];\\n        return (\\n            agenda.createdTimestamp,\\n            agenda.noticeEndTimestamp,\\n            agenda.votingStartedTimestamp,\\n            agenda.votingEndTimestamp,\\n            agenda.executedTimestamp\\n        );\\n    }\\n\\n    function numAgendas() external view override returns (uint256) {\\n        return _agendas.length;\\n    }\\n\\n    function getVoters(uint256 _agendaID) external view override validAgenda(_agendaID) returns (address[] memory) {\\n        return _agendas[_agendaID].voters;\\n    }\\n\\n    function agendas(uint256 _index) external view override validAgenda(_index) returns (LibAgenda.Agenda memory) {\\n        return _agendas[_index];\\n    }\\n\\n    function voterInfos(uint256 _agendaID, address _voter) external view override validAgenda(_agendaID) returns (LibAgenda.Voter memory) {\\n        return _voterInfos[_agendaID][_voter];\\n    }\\n}\\n\"\r\n    },\r\n    \"Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"ICandidate.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.7.6;\\n\\nimport { IDAOCommittee } from \\\"IDAOCommittee.sol\\\";\\nimport { ISeigManager } from \\\"ISeigManager.sol\\\";\\n\\ninterface ICandidate {\\n    function setSeigManager(address _seigMan) external;\\n    function setCommittee(address _committee) external;\\n    function updateSeigniorage() external returns (bool);\\n    function changeMember(uint256 _memberIndex) external returns (bool);\\n    function retireMember() external returns (bool);\\n    function castVote(uint256 _agendaID, uint256 _vote, string calldata _comment) external;\\n    function isCandidateContract() external view returns (bool);\\n    function totalStaked() external view returns (uint256 totalsupply);\\n    function stakedOf(address _account) external view returns (uint256 amount);\\n    function setMemo(string calldata _memo) external;\\n    function claimActivityReward() external;\\n\\n    // getter\\n    function candidate() external view returns (address);\\n    function isLayer2Candidate() external view returns (bool);\\n    function memo() external view returns (string memory);\\n    function committee() external view returns (IDAOCommittee);\\n    function seigManager() external view returns (ISeigManager);\\n}\\n\"\r\n    },\r\n    \"ISeigManager.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.7.6;\\n\\ninterface ISeigManager {\\n    function registry() external view returns (address);\\n    function depositManager() external view returns (address);\\n    function ton() external view returns (address);\\n    function wton() external view returns (address);\\n    function powerton() external view returns (address);\\n    function tot() external view returns (address);\\n    function coinages(address layer2) external view returns (address);\\n    function commissionRates(address layer2) external view returns (uint256);\\n\\n    function lastCommitBlock(address layer2) external view returns (uint256);\\n    function seigPerBlock() external view returns (uint256);\\n    function lastSeigBlock() external view returns (uint256);\\n    function pausedBlock() external view returns (uint256);\\n    function unpausedBlock() external view returns (uint256);\\n    function DEFAULT_FACTOR() external view returns (uint256);\\n\\n    function deployCoinage(address layer2) external returns (bool);\\n    function setCommissionRate(address layer2, uint256 commission, bool isCommissionRateNegative) external returns (bool);\\n\\n    function uncomittedStakeOf(address layer2, address account) external view returns (uint256);\\n    function stakeOf(address layer2, address account) external view returns (uint256);\\n    function additionalTotBurnAmount(address layer2, address account, uint256 amount) external view returns (uint256 totAmount);\\n\\n    function onTransfer(address sender, address recipient, uint256 amount) external returns (bool);\\n    function updateSeigniorage() external returns (bool);\\n    function onDeposit(address layer2, address account, uint256 amount) external returns (bool);\\n    function onWithdraw(address layer2, address account, uint256 amount) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"IStorageStateCommittee.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.7.6;\\npragma abicoder v2;\\n\\nimport { ICandidateFactory } from \\\"ICandidateFactory.sol\\\";\\nimport { ILayer2Registry } from \\\"ILayer2Registry.sol\\\";\\nimport { ISeigManager } from \\\"ISeigManager.sol\\\";\\nimport { IDAOAgendaManager } from \\\"IDAOAgendaManager.sol\\\";\\nimport { IDAOVault } from \\\"IDAOVault.sol\\\";\\n\\ninterface IStorageStateCommittee {\\n    struct CandidateInfo {\\n        address candidateContract;\\n        uint256 indexMembers;\\n        uint128 memberJoinedTime;\\n        uint128 rewardPeriod;\\n        uint128 claimedTimestamp;\\n    }\\n\\n    function ton() external returns (address);\\n    function daoVault() external returns (IDAOVault);\\n    function agendaManager() external returns (IDAOAgendaManager);\\n    function candidateFactory() external returns (ICandidateFactory);\\n    function layer2Registry() external returns (ILayer2Registry);\\n    function seigManager() external returns (ISeigManager);\\n    function candidates(uint256 _index) external returns (address);\\n    function members(uint256 _index) external returns (address);\\n    function maxMember() external returns (uint256);\\n    function candidateInfos(address _candidate) external returns (CandidateInfo memory);\\n    function quorum() external returns (uint256);\\n    function activityRewardPerSecond() external returns (uint256);\\n\\n    function isMember(address _candidate) external returns (bool);\\n    function candidateContract(address _candidate) external returns (address);\\n}\\n\\n\"\r\n    },\r\n    \"ICandidateFactory.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.7.6;\\n\\ninterface ICandidateFactory {\\n    function deploy(\\n        address _candidate,\\n        bool _isLayer2Candidate,\\n        string memory _name,\\n        address _committee,\\n        address _seigManager\\n    )\\n        external\\n        returns (address);\\n}\\n\"\r\n    },\r\n    \"ILayer2Registry.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.7.6;\\n\\ninterface ILayer2Registry {\\n    function layer2s(address layer2) external view returns (bool);\\n\\n    function register(address layer2) external returns (bool);\\n    function numLayer2s() external view returns (uint256);\\n    function layer2ByIndex(uint256 index) external view returns (address);\\n\\n    function deployCoinage(address layer2, address seigManager) external returns (bool);\\n    function registerAndDeployCoinage(address layer2, address seigManager) external returns (bool);\\n    function unregister(address layer2) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"IDAOVault.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.7.6;\\n\\ninterface IDAOVault {\\n    function setTON(address _ton) external;\\n    function setWTON(address _wton) external;\\n    function approveTON(address _to, uint256 _amount) external;\\n    function approveWTON(address _to, uint256 _amount) external;\\n    function approveERC20(address _token, address _to, uint256 _amount) external;\\n    function claimTON(address _to, uint256 _amount) external;\\n    function claimWTON(address _to, uint256 _amount) external;\\n    function claimERC20(address _token, address _to, uint256 _amount) external;\\n}\\n\"\r\n    },\r\n    \"IDAOAgendaManager.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.7.6;\\npragma abicoder v2;\\n\\nimport { LibAgenda } from \\\"LibAgenda.sol\\\";\\nimport { IDAOCommittee } from \\\"IDAOCommittee.sol\\\";\\n\\ninterface IDAOAgendaManager  {\\n    struct Ratio {\\n        uint256 numerator;\\n        uint256 denominator;\\n    }\\n\\n    function setCommittee(address _committee) external;\\n    function setCreateAgendaFees(uint256 _createAgendaFees) external;\\n    function setMinimumNoticePeriodSeconds(uint256 _minimumNoticePeriodSeconds) external;\\n    function setMinimumVotingPeriodSeconds(uint256 _minimumVotingPeriodSeconds) external;\\n    function setExecutingPeriodSeconds(uint256 _executingPeriodSeconds) external;\\n    function newAgenda(\\n        address[] memory _targets,\\n        uint256 _noticePeriodSeconds,\\n        uint256 _votingPeriodSeconds,\\n        bool _atomicExecute,\\n        bytes[] calldata _functionBytecodes\\n    )\\n        external\\n        returns (uint256 agendaID);\\n    function castVote(uint256 _agendaID, address voter, uint256 _vote) external returns (bool);\\n    function setExecutedAgenda(uint256 _agendaID) external;\\n    function setResult(uint256 _agendaID, LibAgenda.AgendaResult _result) external;\\n    function setStatus(uint256 _agendaID, LibAgenda.AgendaStatus _status) external;\\n    function endAgendaVoting(uint256 _agendaID) external;\\n    function setExecutedCount(uint256 _agendaID, uint256 _count) external;\\n     \\n    // -- view functions\\n    function isVoter(uint256 _agendaID, address _user) external view returns (bool);\\n    function hasVoted(uint256 _agendaID, address _user) external view returns (bool);\\n    function getVoteStatus(uint256 _agendaID, address _user) external view returns (bool, uint256);\\n    function getAgendaNoticeEndTimeSeconds(uint256 _agendaID) external view returns (uint256);\\n    function getAgendaVotingStartTimeSeconds(uint256 _agendaID) external view returns (uint256);\\n    function getAgendaVotingEndTimeSeconds(uint256 _agendaID) external view returns (uint256) ;\\n\\n    function canExecuteAgenda(uint256 _agendaID) external view returns (bool);\\n    function getAgendaStatus(uint256 _agendaID) external view returns (uint256 status);\\n    function totalAgendas() external view returns (uint256);\\n    function getAgendaResult(uint256 _agendaID) external view returns (uint256 result, bool executed);\\n    function getExecutionInfo(uint256 _agendaID)\\n        external\\n        view\\n        returns(\\n            address[] memory target,\\n            bytes[] memory functionBytecode,\\n            bool atomicExecute,\\n            uint256 executeStartFrom\\n        );\\n    function isVotableStatus(uint256 _agendaID) external view returns (bool);\\n    function getVotingCount(uint256 _agendaID)\\n        external\\n        view\\n        returns (\\n            uint256 countingYes,\\n            uint256 countingNo,\\n            uint256 countingAbstain\\n        );\\n    function getAgendaTimestamps(uint256 _agendaID)\\n        external\\n        view\\n        returns (\\n            uint256 createdTimestamp,\\n            uint256 noticeEndTimestamp,\\n            uint256 votingStartedTimestamp,\\n            uint256 votingEndTimestamp,\\n            uint256 executedTimestamp\\n        );\\n    function numAgendas() external view returns (uint256);\\n    function getVoters(uint256 _agendaID) external view returns (address[] memory);\\n\\n    function getStatus(uint256 _createAgendaFees) external pure returns (LibAgenda.AgendaStatus);\\n\\n    // getter\\n    function committee() external view returns (IDAOCommittee);\\n    function createAgendaFees() external view returns (uint256);\\n    function minimumNoticePeriodSeconds() external view returns (uint256);\\n    function minimumVotingPeriodSeconds() external view returns (uint256);\\n    function executingPeriodSeconds() external view returns (uint256);\\n    function agendas(uint256 _index) external view returns (LibAgenda.Agenda memory);\\n    function voterInfos(uint256 _index1, address _index2) external view returns (LibAgenda.Voter memory);\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"remappings\": [\r\n      \":g=/dir\"\r\n    ],\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"evmVersion\": \"istanbul\",\r\n    \"metadata\": {\r\n      \"useLiteralContent\": true\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}","ABI":"[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"agendaID\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"result\",\"type\":\"uint256\"}],\"name\":\"AgendaResultChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"agendaID\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"prevStatus\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newStatus\",\"type\":\"uint256\"}],\"name\":\"AgendaStatusChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newFee\",\"type\":\"uint256\"}],\"name\":\"CreatingAgendaFeeChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newPeriod\",\"type\":\"uint256\"}],\"name\":\"ExecutingPeriodChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newPeriod\",\"type\":\"uint256\"}],\"name\":\"MinimumNoticePeriodChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newPeriod\",\"type\":\"uint256\"}],\"name\":\"MinimumVotingPeriodChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"agendas\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"createdTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"noticeEndTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"votingPeriodInSeconds\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"votingStartedTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"votingEndTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"executableLimitTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"executedTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"countingYes\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"countingNo\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"countingAbstain\",\"type\":\"uint256\"},{\"internalType\":\"enum LibAgenda.AgendaStatus\",\"name\":\"status\",\"type\":\"uint8\"},{\"internalType\":\"enum LibAgenda.AgendaResult\",\"name\":\"result\",\"type\":\"uint8\"},{\"internalType\":\"address[]\",\"name\":\"voters\",\"type\":\"address[]\"},{\"internalType\":\"bool\",\"name\":\"executed\",\"type\":\"bool\"}],\"internalType\":\"struct LibAgenda.Agenda\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_agendaID\",\"type\":\"uint256\"}],\"name\":\"canExecuteAgenda\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_agendaID\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_voter\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_vote\",\"type\":\"uint256\"}],\"name\":\"castVote\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"committee\",\"outputs\":[{\"internalType\":\"contract IDAOCommittee\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"createAgendaFees\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_agendaID\",\"type\":\"uint256\"}],\"name\":\"endAgendaVoting\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"executingPeriodSeconds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_agendaID\",\"type\":\"uint256\"}],\"name\":\"getAgendaNoticeEndTimeSeconds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_agendaID\",\"type\":\"uint256\"}],\"name\":\"getAgendaResult\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"result\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"executed\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_agendaID\",\"type\":\"uint256\"}],\"name\":\"getAgendaStatus\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"status\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_agendaID\",\"type\":\"uint256\"}],\"name\":\"getAgendaTimestamps\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"createdTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"noticeEndTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"votingStartedTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"votingEndTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"executedTimestamp\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_agendaID\",\"type\":\"uint256\"}],\"name\":\"getAgendaVotingEndTimeSeconds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_agendaID\",\"type\":\"uint256\"}],\"name\":\"getAgendaVotingStartTimeSeconds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_agendaID\",\"type\":\"uint256\"}],\"name\":\"getExecutionInfo\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"target\",\"type\":\"address[]\"},{\"internalType\":\"bytes[]\",\"name\":\"functionBytecode\",\"type\":\"bytes[]\"},{\"internalType\":\"bool\",\"name\":\"atomicExecute\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"executeStartFrom\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_status\",\"type\":\"uint256\"}],\"name\":\"getStatus\",\"outputs\":[{\"internalType\":\"enum LibAgenda.AgendaStatus\",\"name\":\"emnustatus\",\"type\":\"uint8\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_agendaID\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getVoteStatus\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_agendaID\",\"type\":\"uint256\"}],\"name\":\"getVoters\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_agendaID\",\"type\":\"uint256\"}],\"name\":\"getVotingCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"countingYes\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"countingNo\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"countingAbstain\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_agendaID\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"hasVoted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_agendaID\",\"type\":\"uint256\"}],\"name\":\"isVotableStatus\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_agendaID\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_candidate\",\"type\":\"address\"}],\"name\":\"isVoter\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minimumNoticePeriodSeconds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minimumVotingPeriodSeconds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_targets\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"_noticePeriodSeconds\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_votingPeriodSeconds\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_atomicExecute\",\"type\":\"bool\"},{\"internalType\":\"bytes[]\",\"name\":\"_functionBytecodes\",\"type\":\"bytes[]\"}],\"name\":\"newAgenda\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"agendaID\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"numAgendas\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_committee\",\"type\":\"address\"}],\"name\":\"setCommittee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_createAgendaFees\",\"type\":\"uint256\"}],\"name\":\"setCreateAgendaFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_agendaID\",\"type\":\"uint256\"}],\"name\":\"setExecutedAgenda\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_agendaID\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_count\",\"type\":\"uint256\"}],\"name\":\"setExecutedCount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_executingPeriodSeconds\",\"type\":\"uint256\"}],\"name\":\"setExecutingPeriodSeconds\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_minimumNoticePeriodSeconds\",\"type\":\"uint256\"}],\"name\":\"setMinimumNoticePeriodSeconds\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_minimumVotingPeriodSeconds\",\"type\":\"uint256\"}],\"name\":\"setMinimumVotingPeriodSeconds\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_agendaID\",\"type\":\"uint256\"},{\"internalType\":\"enum LibAgenda.AgendaResult\",\"name\":\"_result\",\"type\":\"uint8\"}],\"name\":\"setResult\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_agendaID\",\"type\":\"uint256\"},{\"internalType\":\"enum LibAgenda.AgendaStatus\",\"name\":\"_status\",\"type\":\"uint8\"}],\"name\":\"setStatus\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalAgendas\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_agendaID\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_voter\",\"type\":\"address\"}],\"name\":\"voterInfos\",\"outputs\":[{\"components\":[{\"internalType\":\"bool\",\"name\":\"isVoter\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"hasVoted\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"vote\",\"type\":\"uint256\"}],\"internalType\":\"struct LibAgenda.Voter\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"DAOAgendaManager","CompilerVersion":"v0.7.6+commit.7338295f","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"istanbul","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://bcf3bccd8e9211c81d5dd0bb64b3a104614ef587e171598cdaeb456912fc16a2"}]}