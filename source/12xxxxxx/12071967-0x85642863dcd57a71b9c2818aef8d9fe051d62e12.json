{"status":"1","message":"OK","result":[{"SourceCode":"// SPDX-License-Identifier: NONE\n\npragma solidity 0.8.1;\n\n\n\n// Part: INFTBoxes\n\ninterface INFTBoxes {\n\tfunction buyManyBoxes(uint256 _id, uint128 _quantity) external payable;\n    function setApprovalForAll(address operator, bool _approved) external;\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\n    function balanceOf(address owner) external view returns (uint256 balance);\n    function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256 tokenId);\n}\n\n// File: NFTPool.sol\n\n//@author => owen.eth\ncontract NFTPool {\n\n    struct Request {\n        uint256 amountETH;\n        uint128 amountNFT;\n    }\n\n    address _owner;\n    uint256 boxPrice;\n    uint128 amountBoxesBought;\n    mapping(address => Request) requests;\n    mapping(uint256 => uint256) NFTBalance;\n\n    modifier onlyOwner {\n        require(msg.sender == _owner, \"You are not the owner!\");\n        _;\n    }\n\n    receive() external payable {\n\n        uint256 tax = (msg.value * 10) / 100;\n        uint256 value = msg.value - tax;\n        payable(_owner).transfer(tax);\n\n        requests[msg.sender].amountETH += value;\n        requests[msg.sender].amountNFT = uint128(div(requests[msg.sender].amountETH, boxPrice));\n\n    }\n\n    INFTBoxes NFTBox;\n    constructor(address _NFTBoxes, uint256 _boxPrice) {\n        NFTBox = INFTBoxes(_NFTBoxes);\n        _owner = msg.sender;\n        boxPrice = _boxPrice;\n    }\n\n    function buyBoxes(uint256 _id, uint128 _quantityPerTx) external payable onlyOwner {\n        uint128 amountReq =  uint128(div(address(this).balance, boxPrice));\n\n        if(amountReq % 2 != 0)  {\n            amountReq = amountReq - 1;\n        }\n        while(amountBoxesBought < amountReq) {\n            NFTBox.buyManyBoxes{value: boxPrice * _quantityPerTx}(_id, _quantityPerTx);\n            amountBoxesBought = amountBoxesBought + _quantityPerTx;\n        }\n    }\n\n    //withdraw NFTs to multiple accounts given an address list and quantity per account.\n    function withdrawManyNFT(address[] memory _accounts, uint128 _quantityPerAccount) external payable {\n        require(mul(_accounts.length, _quantityPerAccount) <= requests[msg.sender].amountNFT); //require amount of accounts * amount per account <= req NFT amount per user\n        require(requests[msg.sender].amountETH > 0);\n        getOwnedBoxes();\n        uint128 c = 0;\n        for(uint i = 0; i < _accounts.length; i++) {\n            NFTBox.setApprovalForAll(_accounts[i], true);\n            for(uint128 x = 0; x < _quantityPerAccount; x++) {\n                NFTBox.safeTransferFrom(address(this), _accounts[i], NFTBalance[c]);\n                requests[msg.sender].amountNFT -= 1;\n                requests[msg.sender].amountETH -= boxPrice;\n                amountBoxesBought -= 1;\n                c = c + 1;\n            }\n        }\n    }\n\n    function safeWithdrawNFT(uint128 _quantity) external payable {\n        require(requests[msg.sender].amountNFT <= _quantity);\n        require(requests[msg.sender].amountETH > 0);\n\n        getOwnedBoxes();\n        NFTBox.setApprovalForAll(msg.sender, true);\n        for(uint i = 0; i < _quantity; i++)\n        {\n            NFTBox.safeTransferFrom(address(this), msg.sender, NFTBalance[i]);\n        }\n\n        amountBoxesBought -= _quantity;\n        requests[msg.sender].amountNFT -= _quantity; //remove NFT from req\n        requests[msg.sender].amountETH -= uint256(_quantity) * boxPrice; //remove equal ETH amount\n    }\n\n    //withdraws users leftover eth balance given all NFTs are withdrawn\n    function safeWithdrawETH() external {\n        if(requests[msg.sender].amountNFT !=  0)\n        {\n            requests[_owner].amountNFT +=requests[msg.sender].amountNFT;\n        }\n        uint256 userBalance = requests[msg.sender].amountETH; //get users balance\n        uint128 userNFTBalance = requests[msg.sender].amountNFT; //get users NFT balance\n        payable(msg.sender).transfer(userBalance); //transfer ETH\n        requests[msg.sender].amountETH = 0; //set user balance to zero\n        requests[msg.sender].amountNFT =  0; //remove NFT amount from user request\n\n    }\n\n    //get mapping of NFTs owned by this contract\n    function getOwnedBoxes() internal {\n        uint256 nfts = NFTBox.balanceOf(address(this));\n        for(uint i = 0; i < nfts; i++) {\n            NFTBalance[i] = NFTBox.tokenOfOwnerByIndex(address(this), i);\n        }\n    }\n\n    //get info about the users request (for use on frontend)\n    function getUser(address _user) external view returns(uint256, uint128) {\n        return (requests[_user].amountETH, requests[_user].amountNFT);\n    }\n\n    // SAFE MATH\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a / b;\n    }\n\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a * b;\n    }\n}\n","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_NFTBoxes\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_boxPrice\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"},{\"internalType\":\"uint128\",\"name\":\"_quantityPerTx\",\"type\":\"uint128\"}],\"name\":\"buyBoxes\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getUser\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint128\",\"name\":\"\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"safeWithdrawETH\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint128\",\"name\":\"_quantity\",\"type\":\"uint128\"}],\"name\":\"safeWithdrawNFT\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_accounts\",\"type\":\"address[]\"},{\"internalType\":\"uint128\",\"name\":\"_quantityPerAccount\",\"type\":\"uint128\"}],\"name\":\"withdrawManyNFT\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]","ContractName":"NFTPool","CompilerVersion":"v0.8.1+commit.df193b15","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000f876bbc810e84854c9c37018103c0045544a6af90000000000000000000000000000000000000000000000000a688906bd8b0000","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":""}]}