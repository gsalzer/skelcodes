{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.6.12;\r\n\r\n// SPDX-License-Identifier: MIT\r\n\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts with custom message when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n/*\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with GSN meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address payable) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes memory) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor () internal {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\n\r\ninterface StandardToken {\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n    function balanceOf(address account) external view returns (uint256);\r\n}\r\n\r\ninterface IController {\r\n    function withdrawETH(uint256 amount) external;\r\n    function depositForStrategy(uint256 amount, address addr) external;\r\n    function buyForStrategy(\r\n        uint256 amount,\r\n        address rewardToken,\r\n        address recipient\r\n    ) external;\r\n\r\n    function sendExitToken(\r\n        address user,\r\n        uint256 amount\r\n    ) external;\r\n\r\n    function getStrategy(address vault) external view returns (address);\r\n}\r\n\r\ninterface IStrategy {\r\n    function getLastEpochTime() external view returns(uint256);\r\n}\r\n\r\ncontract StakeAndYield is Ownable {\r\n    uint256 constant STAKE = 1;\r\n    uint256 constant YIELD = 2;\r\n    uint256 constant BOTH = 3;\r\n\r\n    uint256 public PERIOD = 24 hours;\r\n    uint256 public EXIT_PERIOD = 90 days;\r\n\r\n    uint256 public lastUpdateTime;\r\n    uint256 public rewardRate;\r\n    uint256 public rewardRateYield;\r\n\r\n    uint256 public rewardTillNowPerToken = 0;\r\n    uint256 public yieldRewardTillNowPerToken = 0;\r\n\r\n    uint256 public _totalSupply = 0;\r\n    uint256 public _totalSupplyYield = 0;\r\n\r\n    uint256 public _totalYieldWithdrawed = 0;\r\n    uint256 public _totalExit = 0;\r\n    uint256 public _totalBurned = 0;\r\n\r\n    // false: withdraw from YEARN and then pay the user\r\n    // true: pay the user before withdrawing from YEARN\r\n    bool public allowEmergencyWithdraw = false;\r\n\r\n    IController public controller;\r\n\r\n    address public operator;\r\n\r\n    struct User {\r\n        uint256 balance;\r\n        uint256 stakeType;\r\n\r\n        uint256 paidReward;\r\n        uint256 yieldPaidReward;\r\n\r\n        uint256 paidRewardPerToken;\r\n        uint256 yieldPaidRewardPerToken;\r\n\r\n        uint256 withdrawable;\r\n        uint256 withdrawableExit;\r\n        uint256 withdrawTime;\r\n\r\n        bool exit;\r\n\r\n        uint256 exitStartTime;\r\n        uint256 exitAmountTillNow;\r\n    }\r\n\r\n    using SafeMath for uint256;\r\n\r\n    mapping (address => User) public users;\r\n\r\n    uint256 public lastUpdatedBlock;\r\n\r\n    uint256 public periodFinish = 0;\r\n\r\n    uint256 public scale = 1e18;\r\n\r\n    uint256 public daoShare;\r\n    address public daoWallet;\r\n\r\n    bool public exitable;\r\n\r\n    StandardToken public stakedToken;\r\n    StandardToken public rewardToken;\r\n    StandardToken public yieldRewardToken;\r\n\r\n    event Deposit(address user, uint256 amount, uint256 stakeType);\r\n    event Withdraw(address user, uint256 amount, uint256 stakeType);\r\n    event Exit(address user, uint256 amount, uint256 stakeType);\r\n    event Unfreeze(address user, uint256 amount, uint256 stakeType);\r\n    event EmergencyWithdraw(address user, uint256 amount);\r\n    event RewardClaimed(address user, uint256 amount, uint256 stakeType);\r\n\r\n    constructor (\r\n        address _stakedToken,\r\n        address _rewardToken,\r\n        address _yieldRewardToken,\r\n        uint256 _daoShare,\r\n        address _daoWallet,\r\n        address _controller,\r\n        bool _exitable\r\n    ) public {\r\n        stakedToken = StandardToken(_stakedToken);\r\n        rewardToken = StandardToken(_rewardToken);\r\n        yieldRewardToken = StandardToken(_yieldRewardToken);\r\n        controller = IController(_controller);\r\n        daoShare = _daoShare;\r\n        daoWallet = _daoWallet;\r\n        exitable = _exitable;\r\n\r\n        operator = msg.sender;\r\n    }\r\n\r\n    modifier onlyOwnerOrController(){\r\n        require(msg.sender == owner() ||\r\n            msg.sender == address(controller) ||\r\n            msg.sender == operator\r\n            ,\r\n            \"!ownerOrController\"\r\n        );\r\n        _;\r\n    }\r\n\r\n    modifier updateReward(address account, uint256 stakeType) {\r\n        if(users[account].balance > 0){\r\n            stakeType = users[account].stakeType;\r\n        }\r\n        \r\n        if (account != address(0)) {\r\n            sendReward(\r\n                account,\r\n                earned(account, STAKE),\r\n                earned(account, YIELD)\r\n            );\r\n        }\r\n        if(stakeType == STAKE || stakeType == BOTH){\r\n            rewardTillNowPerToken = rewardPerToken(STAKE);\r\n            lastUpdateTime = lastTimeRewardApplicable();\r\n            if (account != address(0)) {\r\n                users[account].paidRewardPerToken = rewardTillNowPerToken;\r\n            }\r\n        }\r\n\r\n        if(stakeType == YIELD || stakeType == BOTH){\r\n            yieldRewardTillNowPerToken = rewardPerToken(YIELD);\r\n            lastUpdateTime = lastTimeRewardApplicable();\r\n            if (account != address(0)) {\r\n                users[account].yieldPaidRewardPerToken = yieldRewardTillNowPerToken;\r\n            }\r\n        }\r\n        _;\r\n    }\r\n\r\n    function setDaoWallet(address _daoWallet) public onlyOwner {\r\n        daoWallet = _daoWallet;\r\n    }\r\n\r\n    function setDaoShare(uint256 _daoShare) public onlyOwner {\r\n        daoShare = _daoShare;\r\n    }\r\n\r\n    function setExitPeriod(uint256 period) public onlyOwner {\r\n        EXIT_PERIOD = period;\r\n    }\r\n\r\n    function setOperator(address _addr) public onlyOwner{\r\n        operator = _addr;\r\n    }\r\n\r\n    function setPeriod(uint256 period) public onlyOwner{\r\n        PERIOD = period;\r\n    }\r\n\r\n    function withdrawToBurn() public onlyOwner{\r\n        stakedToken.transfer(\r\n            msg.sender,\r\n            _totalExit.sub(_totalBurned)\r\n        );\r\n        _totalBurned = _totalExit;\r\n    }\r\n\r\n    function earned(address account, uint256 stakeType) public view returns(uint256) {\r\n        User storage user = users[account];\r\n\r\n        uint256 paidPerToken = stakeType == STAKE ? \r\n            user.paidRewardPerToken : user.yieldPaidRewardPerToken;\r\n\r\n        return balanceOf(account, stakeType).mul(\r\n            rewardPerToken(stakeType).\r\n            sub(paidPerToken)\r\n        ).div(1e18);\r\n    }\r\n\r\n\r\n    function earned(address account) public view returns(uint256){\r\n        return earned(account, STAKE) + earned(account, YIELD);\r\n    }\r\n\r\n    function deposit(uint256 amount, uint256 stakeType, bool _exit) public {\r\n        depositFor(msg.sender, amount, stakeType, _exit);\r\n    }\r\n\r\n    function depositFor(address _user, uint256 amount, uint256 stakeType, bool _exit)\r\n        updateReward(_user, stakeType)\r\n        public {\r\n        \r\n        require(stakeType==STAKE || stakeType ==YIELD || stakeType==BOTH, \"Invalid stakeType\");\r\n        User storage user = users[_user];\r\n        require(user.balance == 0 || user.stakeType==stakeType, \"Invalid Stake Type\");\r\n\r\n        if(user.exit || (user.balance == 0 && _exit)){\r\n            updateExit(_user);\r\n        }else if(user.balance == 0 && !_exit){\r\n            user.exit = false;\r\n        }\r\n\r\n        stakedToken.transferFrom(address(msg.sender), address(this), amount);\r\n\r\n        user.stakeType = stakeType;\r\n        user.balance = user.balance.add(amount);\r\n\r\n        if(stakeType == STAKE){\r\n            _totalSupply = _totalSupply.add(amount);\r\n        }else if(stakeType == YIELD){\r\n            _totalSupplyYield = _totalSupplyYield.add(amount);\r\n        }else{\r\n            _totalSupplyYield = _totalSupplyYield.add(amount);\r\n            _totalSupply = _totalSupply.add(amount);\r\n        }\r\n        \r\n        emit Deposit(_user, amount, stakeType);\r\n    }\r\n\r\n    function updateExit(address _user) private{\r\n        require(exitable, \"Not exitable\");\r\n        User storage user = users[_user];\r\n        user.exit = true;\r\n        user.exitAmountTillNow = exitBalance(_user);\r\n        user.exitStartTime = block.timestamp;\r\n    }\r\n\r\n    function sendReward(address userAddress, uint256 amount, uint256 yieldAmount) private {\r\n        User storage user = users[userAddress];\r\n        uint256 _daoShare = amount.mul(daoShare).div(scale);\r\n        uint256 _yieldDaoShare = yieldAmount.mul(daoShare).div(scale);\r\n\r\n        if(amount > 0){\r\n            rewardToken.transfer(userAddress, amount.sub(_daoShare));\r\n            if(_daoShare > 0)\r\n                rewardToken.transfer(daoWallet, _daoShare);\r\n            user.paidReward = user.paidReward.add(\r\n                amount\r\n            );\r\n        }\r\n\r\n        if(yieldAmount > 0){\r\n            yieldRewardToken.transfer(userAddress, yieldAmount.sub(_yieldDaoShare));\r\n            \r\n            if(_yieldDaoShare > 0)\r\n                yieldRewardToken.transfer(daoWallet, _yieldDaoShare);   \r\n            \r\n            user.yieldPaidReward = user.yieldPaidReward.add(\r\n                yieldAmount\r\n            );\r\n        }\r\n        \r\n        if(amount > 0 || yieldAmount > 0){\r\n            emit RewardClaimed(userAddress, amount, yieldAmount);\r\n        }\r\n    }\r\n\r\n    function sendExitToken(address _user, uint256 amount) private {\r\n        controller.sendExitToken(\r\n            _user,\r\n            amount\r\n        );\r\n    }\r\n\r\n    function claim() updateReward(msg.sender, 0) public {\r\n        // updateReward handles everything\r\n    }\r\n\r\n    function setExit(bool _val) public{\r\n        User storage user = users[msg.sender];\r\n        require(user.exit != _val, \"same exit status\");\r\n        require(user.balance > 0, \"0 balance\");\r\n\r\n        user.exit = _val;\r\n        user.exitStartTime = now;\r\n        user.exitAmountTillNow = 0;\r\n    }\r\n\r\n    function unfreezeAllAndClaim() public{\r\n        unfreeze(users[msg.sender].balance);\r\n    }\r\n\r\n    function unfreeze(uint256 amount) updateReward(msg.sender, 0) public {\r\n        User storage user = users[msg.sender];\r\n        uint256 stakeType = user.stakeType;\r\n\r\n        require(\r\n            user.balance >= amount,\r\n            \"withdraw > deposit\");\r\n\r\n        if (amount > 0) {\r\n            uint256 exitAmount = exitBalance(msg.sender);\r\n            uint256 remainingExit = 0;\r\n            if(exitAmount > amount){\r\n                remainingExit = exitAmount.sub(amount);\r\n                exitAmount = amount;\r\n            }\r\n\r\n            if(user.exit){\r\n                user.exitAmountTillNow = remainingExit;\r\n                user.exitStartTime = now;\r\n            }\r\n\r\n            uint256 tokenAmount = amount.sub(exitAmount);\r\n            user.balance = user.balance.sub(amount);\r\n            if(stakeType == STAKE){\r\n                _totalSupply = _totalSupply.sub(amount);\r\n            }else if (stakeType == YIELD){\r\n                _totalSupplyYield = _totalSupplyYield.sub(amount);\r\n            }else{\r\n                _totalSupply = _totalSupply.sub(amount);\r\n                _totalSupplyYield = _totalSupplyYield.sub(amount);\r\n            }\r\n\r\n            if(allowEmergencyWithdraw || stakeType==STAKE){\r\n                if(tokenAmount > 0){\r\n                    stakedToken.transfer(address(msg.sender), tokenAmount);\r\n                    emit Withdraw(msg.sender, tokenAmount, stakeType);\r\n                }\r\n                if(exitAmount > 0){\r\n                    sendExitToken(msg.sender, exitAmount);\r\n                    emit Exit(msg.sender, exitAmount, stakeType);\r\n                }\r\n            }else{\r\n                user.withdrawable += tokenAmount;\r\n                user.withdrawableExit += exitAmount;\r\n\r\n                user.withdrawTime = now;\r\n\r\n                _totalYieldWithdrawed += amount;\r\n                emit Unfreeze(msg.sender, amount, stakeType);\r\n            }\r\n            _totalExit += exitAmount;\r\n        }\r\n    }\r\n\r\n    function withdrawUnfreezed() public{\r\n        User storage user = users[msg.sender];\r\n        require(user.withdrawable > 0 || user.withdrawableExit > 0, \r\n            \"amount is 0\");\r\n        \r\n        uint256 lastEpochTime = IStrategy(\r\n            controller.getStrategy(address(this))\r\n        ).getLastEpochTime();\r\n        require(user.withdrawTime < lastEpochTime,\r\n            \"Can't withdraw yet\");\r\n\r\n        if(user.withdrawable > 0){\r\n            stakedToken.transfer(address(msg.sender), user.withdrawable);\r\n            emit Withdraw(msg.sender, user.withdrawable, YIELD);\r\n            user.withdrawable = 0;    \r\n        }\r\n\r\n        if(user.withdrawableExit > 0){\r\n            sendExitToken(msg.sender, user.withdrawableExit);\r\n            emit Exit(msg.sender, user.withdrawableExit, YIELD);\r\n            user.withdrawableExit = 0;    \r\n        }\r\n    }\r\n\r\n    // just Controller and admin should be able to call this\r\n    function notifyRewardAmount(uint256 reward, uint256 stakeType) public onlyOwnerOrController  updateReward(address(0), stakeType){\r\n        if (block.timestamp >= periodFinish) {\r\n            if(stakeType == STAKE){\r\n                rewardRate = reward.div(PERIOD);    \r\n            }else{\r\n                rewardRateYield = reward.div(PERIOD);\r\n            }\r\n        } else {\r\n            uint256 remaining = periodFinish.sub(block.timestamp);\r\n            if(stakeType == STAKE){\r\n                uint256 leftover = remaining.mul(rewardRate);\r\n                rewardRate = reward.add(leftover).div(PERIOD);    \r\n            }else{\r\n                uint256 leftover = remaining.mul(rewardRateYield);\r\n                rewardRateYield = reward.add(leftover).div(PERIOD);\r\n            }\r\n            \r\n        }\r\n        lastUpdateTime = block.timestamp;\r\n        periodFinish = block.timestamp.add(PERIOD);\r\n    }\r\n\r\n    function balanceOf(address account, uint256 stakeType) public view returns(uint256) {\r\n        User storage user = users[account];\r\n        if(user.stakeType == BOTH || user.stakeType==stakeType)\r\n            return user.balance;\r\n        return 0;\r\n    }\r\n\r\n    function exitBalance(address account) public view returns(uint256){\r\n        User storage user = users[account];\r\n        if(!user.exit || user.balance==0){\r\n            return 0;\r\n        }\r\n        uint256 portion = (block.timestamp - user.exitStartTime).div(EXIT_PERIOD);\r\n        portion = portion >= 1 ? 1 : portion;\r\n        \r\n        uint256 balance = user.exitAmountTillNow.add(\r\n                user.balance.mul(portion)\r\n        );\r\n        return balance > user.balance ? user.balance : balance;\r\n    }\r\n\r\n    function totalYieldWithdrawed() public view returns(uint256) {\r\n        return _totalYieldWithdrawed;\r\n    }\r\n\r\n    function totalExit() public view returns(uint256) {\r\n        return _totalExit;\r\n    }\r\n\r\n    function totalSupply(uint256 stakeType) public view returns(uint256) {\r\n        return stakeType == STAKE ? _totalSupply : _totalSupplyYield;\r\n    }\r\n\r\n    function lastTimeRewardApplicable() public view returns(uint256) {\r\n        return block.timestamp < periodFinish ? block.timestamp : periodFinish;\r\n    }\r\n\r\n    function rewardPerToken(uint256 stakeType) public view returns(uint256) {\r\n        uint256 supply = stakeType == STAKE ? _totalSupply : _totalSupplyYield;        \r\n        if (supply == 0) {\r\n            return stakeType == STAKE ? rewardTillNowPerToken : yieldRewardTillNowPerToken;\r\n        }\r\n        if(stakeType == STAKE){\r\n            return rewardTillNowPerToken.add(\r\n                lastTimeRewardApplicable().sub(lastUpdateTime)\r\n                .mul(rewardRate).mul(1e18).div(_totalSupply)\r\n            );\r\n        }else{\r\n            return yieldRewardTillNowPerToken.add(\r\n                lastTimeRewardApplicable().sub(lastUpdateTime).\r\n                mul(rewardRateYield).mul(1e18).div(_totalSupplyYield)\r\n            );\r\n        }\r\n    }\r\n\r\n    function getRewardToken() public view returns(address){\r\n        return address(rewardToken);\r\n    }\r\n\r\n    function userInfo(address account) public view returns(\r\n        uint256[14] memory numbers,\r\n\r\n        address rewardTokenAddress,\r\n        address stakedTokenAddress,\r\n        address controllerAddress,\r\n        address strategyAddress,\r\n        bool exit\r\n    ){\r\n        User storage user = users[account];\r\n        numbers[0] = user.balance;\r\n        numbers[1] = user.stakeType;\r\n        numbers[2] = user.withdrawTime;\r\n        numbers[3] = user.withdrawable;\r\n        numbers[4] = _totalSupply;\r\n        numbers[5] = _totalSupplyYield;\r\n        numbers[6] = stakedToken.balanceOf(address(this));\r\n        \r\n        numbers[7] = rewardPerToken(STAKE);\r\n        numbers[8] = rewardPerToken(YIELD);\r\n        \r\n        numbers[9] = earned(account);\r\n\r\n        numbers[10] = user.exitStartTime;\r\n        numbers[11] = exitBalance(account);\r\n\r\n        numbers[12] = user.withdrawable;\r\n        numbers[13] = user.withdrawableExit;\r\n\r\n        rewardTokenAddress = address(rewardToken);\r\n        stakedTokenAddress = address(stakedToken);\r\n        controllerAddress = address(controller);\r\n\r\n        exit = user.exit;\r\n\r\n\r\n        strategyAddress = controller.getStrategy(address(this));\r\n\r\n        numbers[10] = IStrategy(\r\n            controller.getStrategy(address(this))\r\n        ).getLastEpochTime();\r\n    }\r\n\r\n    function setController(address _controller) public onlyOwner{\r\n        if(_controller != address(0)){\r\n            controller = IController(_controller);\r\n        }\r\n    }\r\n\r\n    function emergencyWithdrawFor(address _user) public onlyOwner{\r\n        User storage user = users[_user];\r\n\r\n        uint256 amount = user.balance;\r\n\r\n        stakedToken.transfer(_user, amount);\r\n\r\n        emit EmergencyWithdraw(_user, amount);\r\n\r\n        //add other fields\r\n        user.balance = 0;\r\n        user.paidReward = 0;\r\n        user.yieldPaidReward = 0;\r\n    }\r\n\r\n    function setAllowEmergencyWithdraw(bool _val) public onlyOwner{\r\n        allowEmergencyWithdraw = _val;\r\n    }\r\n\r\n    function emergencyWithdrawETH(uint256 amount, address addr) public onlyOwner{\r\n        require(addr != address(0));\r\n        payable(addr).transfer(amount);\r\n    }\r\n\r\n    function emergencyWithdrawERC20Tokens(address _tokenAddr, address _to, uint _amount) public onlyOwner {\r\n        StandardToken(_tokenAddr).transfer(_to, _amount);\r\n    }\r\n}\r\n\r\n\r\n//Dar panah khoda","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_stakedToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_rewardToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_yieldRewardToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_daoShare\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_daoWallet\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_controller\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_exitable\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"stakeType\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"EmergencyWithdraw\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"stakeType\",\"type\":\"uint256\"}],\"name\":\"Exit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"stakeType\",\"type\":\"uint256\"}],\"name\":\"RewardClaimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"stakeType\",\"type\":\"uint256\"}],\"name\":\"Unfreeze\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"stakeType\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"EXIT_PERIOD\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PERIOD\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_totalBurned\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_totalExit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_totalSupplyYield\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_totalYieldWithdrawed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"allowEmergencyWithdraw\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"stakeType\",\"type\":\"uint256\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"controller\",\"outputs\":[{\"internalType\":\"contract IController\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"daoShare\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"daoWallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stakeType\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_exit\",\"type\":\"bool\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stakeType\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_exit\",\"type\":\"bool\"}],\"name\":\"depositFor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"earned\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"stakeType\",\"type\":\"uint256\"}],\"name\":\"earned\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenAddr\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"emergencyWithdrawERC20Tokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"emergencyWithdrawETH\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"emergencyWithdrawFor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"exitBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"exitable\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRewardToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastTimeRewardApplicable\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastUpdateTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastUpdatedBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stakeType\",\"type\":\"uint256\"}],\"name\":\"notifyRewardAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"operator\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"periodFinish\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"stakeType\",\"type\":\"uint256\"}],\"name\":\"rewardPerToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardRateYield\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardTillNowPerToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardToken\",\"outputs\":[{\"internalType\":\"contract StandardToken\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"scale\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_val\",\"type\":\"bool\"}],\"name\":\"setAllowEmergencyWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_controller\",\"type\":\"address\"}],\"name\":\"setController\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_daoShare\",\"type\":\"uint256\"}],\"name\":\"setDaoShare\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_daoWallet\",\"type\":\"address\"}],\"name\":\"setDaoWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_val\",\"type\":\"bool\"}],\"name\":\"setExit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"period\",\"type\":\"uint256\"}],\"name\":\"setExitPeriod\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"setOperator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"period\",\"type\":\"uint256\"}],\"name\":\"setPeriod\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakedToken\",\"outputs\":[{\"internalType\":\"contract StandardToken\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalExit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"stakeType\",\"type\":\"uint256\"}],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalYieldWithdrawed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"unfreeze\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unfreezeAllAndClaim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"userInfo\",\"outputs\":[{\"internalType\":\"uint256[14]\",\"name\":\"numbers\",\"type\":\"uint256[14]\"},{\"internalType\":\"address\",\"name\":\"rewardTokenAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"stakedTokenAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"controllerAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"strategyAddress\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"exit\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"users\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stakeType\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"paidReward\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"yieldPaidReward\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"paidRewardPerToken\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"yieldPaidRewardPerToken\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"withdrawable\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"withdrawableExit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"withdrawTime\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"exit\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"exitStartTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"exitAmountTillNow\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawToBurn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawUnfreezed\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"yieldRewardTillNowPerToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"yieldRewardToken\",\"outputs\":[{\"internalType\":\"contract StandardToken\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"StakeAndYield","CompilerVersion":"v0.6.12+commit.27d51765","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000d8c33488b76d4a2c06d5ccb75574f10f6ccac3d700000000000000000000000080ab141f324c3d6f2b18b030f1c4e95d4d65877800000000000000000000000080ab141f324c3d6f2b18b030f1c4e95d4d65877800000000000000000000000000000000000000000000000000354a6ba7a18000000000000000000000000000d9775d818fc23e07ac4b8efd4c58972f7c59bc0f000000000000000000000000783eeba64cd5b29a0f711ecc954a164db1ce0bcc0000000000000000000000000000000000000000000000000000000000000000","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"ipfs://ebf63f24c31a9f8ea186c720905d55d291316bb4d3536ef99f0eacf54f8cf62d"}]}