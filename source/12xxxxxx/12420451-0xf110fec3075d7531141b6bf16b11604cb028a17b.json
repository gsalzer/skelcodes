{"status":"1","message":"OK","result":[{"SourceCode":"// SPDX-License-Identifier: MIT\r\n\r\n/**\r\n * @author          Yisi Liu\r\n * @contact         yisiliu@gmail.com\r\n * @author_time     01/06/2021\r\n * @maintainer      Hancheng Zhou, Yisi Liu\r\n * @maintain_time   04/15/2021\r\n**/\r\n\r\npragma solidity >= 0.8.0;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n/**\r\n * @dev Collection of functions related to the address type\r\n */\r\nlibrary Address {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     *\r\n     * Among others, `isContract` will return false for the following\r\n     * types of addresses:\r\n     *\r\n     *  - an externally-owned account\r\n     *  - a contract in construction\r\n     *  - an address where a contract will be created\r\n     *  - an address where a contract lived, but was destroyed\r\n     * ====\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // This method relies on extcodesize, which returns 0 for contracts in\r\n        // construction, since the code is only stored at the end of the\r\n        // constructor execution.\r\n\r\n        uint256 size;\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly { size := extcodesize(account) }\r\n        return size > 0;\r\n    }\r\n\r\n    /**\r\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * IMPORTANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     */\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\r\n        (bool success, ) = recipient.call{ value: amount }(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n\r\n    /**\r\n     * @dev Performs a Solidity function call using a low level `call`. A\r\n     * plain`call` is an unsafe replacement for a function call: use this\r\n     * function instead.\r\n     *\r\n     * If `target` reverts with a revert reason, it is bubbled up by this\r\n     * function (like regular Solidity function calls).\r\n     *\r\n     * Returns the raw returned data. To convert to the expected return value,\r\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `target` must be a contract.\r\n     * - calling `target` with `data` must not revert.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n      return functionCall(target, data, \"Address: low-level call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\r\n     * `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but also transferring `value` wei to `target`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the calling contract must have an ETH balance of at least `value`.\r\n     * - the called Solidity function must be `payable`.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\r\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\r\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\r\n        require(isContract(target), \"Address: call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\r\n        return _verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\r\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\r\n        require(isContract(target), \"Address: static call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.staticcall(data);\r\n        return _verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\r\n        require(isContract(target), \"Address: delegate call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.delegatecall(data);\r\n        return _verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            // Look for revert reason and bubble it up if present\r\n            if (returndata.length > 0) {\r\n                // The easiest way to bubble the revert reason is using memory via assembly\r\n\r\n                // solhint-disable-next-line no-inline-assembly\r\n                assembly {\r\n                    let returndata_size := mload(returndata)\r\n                    revert(add(32, returndata), returndata_size)\r\n                }\r\n            } else {\r\n                revert(errorMessage);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n/**\r\n * @title SafeERC20\r\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\r\n * contract returns false). Tokens that return no value (and instead revert or\r\n * throw on failure) are also supported, non-reverting calls are assumed to be\r\n * successful.\r\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\r\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\r\n */\r\nlibrary SafeERC20 {\r\n    using Address for address;\r\n\r\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\r\n    }\r\n\r\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\r\n    }\r\n\r\n    /**\r\n     * @dev Deprecated. This function has issues similar to the ones found in\r\n     * {IERC20-approve}, and its usage is discouraged.\r\n     *\r\n     * Whenever possible, use {safeIncreaseAllowance} and\r\n     * {safeDecreaseAllowance} instead.\r\n     */\r\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\r\n        // safeApprove should only be called when setting an initial allowance,\r\n        // or when resetting it to zero. To increase and decrease it, use\r\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\r\n        // solhint-disable-next-line max-line-length\r\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\r\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\r\n        );\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\r\n    }\r\n\r\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n        unchecked {\r\n            uint256 oldAllowance = token.allowance(address(this), spender);\r\n            require(oldAllowance >= value, \"SafeERC20: decreased allowance below zero\");\r\n            uint256 newAllowance = oldAllowance - value;\r\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\r\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\r\n     * @param token The token targeted by the call.\r\n     * @param data The call data (encoded using abi.encode or one of its variants).\r\n     */\r\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\r\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\r\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\r\n        // the target address contains contract code and also asserts for success in the low-level call.\r\n\r\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\r\n        if (returndata.length > 0) { // Return data is optional\r\n            // solhint-disable-next-line max-line-length\r\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\r\n        }\r\n    }\r\n}\r\n\r\n// CAUTION\r\n// This version of SafeMath should only be used with Solidity 0.8 or later,\r\n// because it relies on the compiler's built in overflow checks.\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations.\r\n *\r\n * NOTE: `SafeMath` is no longer needed starting with Solidity 0.8. The compiler\r\n * now has built in overflow checking.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            uint256 c = a + b;\r\n            if (c < a) return (false, 0);\r\n            return (true, c);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            if (b > a) return (false, 0);\r\n            return (true, a - b);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n            // benefit is lost if 'b' is also tested.\r\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n            if (a == 0) return (true, 0);\r\n            uint256 c = a * b;\r\n            if (c / a != b) return (false, 0);\r\n            return (true, c);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            if (b == 0) return (false, 0);\r\n            return (true, a / b);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            if (b == 0) return (false, 0);\r\n            return (true, a % b);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a + b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a - b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a * b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers, reverting on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a / b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * reverting when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a % b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\r\n     * message unnecessarily. For custom revert reasons use {trySub}.\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        unchecked {\r\n            require(b <= a, errorMessage);\r\n            return a - b;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        unchecked {\r\n            require(b > 0, errorMessage);\r\n            return a / b;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * reverting with custom message when dividing by zero.\r\n     *\r\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\r\n     * message unnecessarily. For custom revert reasons use {tryMod}.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        unchecked {\r\n            require(b > 0, errorMessage);\r\n            return a % b;\r\n        }\r\n    }\r\n}\r\n\r\n/**\r\n * @dev Interface of the ERC165 standard, as defined in the\r\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\r\n *\r\n * Implementers can declare support of contract interfaces, which can then be\r\n * queried by others ({ERC165Checker}).\r\n *\r\n * For an implementation, see {ERC165}.\r\n */\r\ninterface IERC165 {\r\n    /**\r\n     * @dev Returns true if this contract implements the interface defined by\r\n     * `interfaceId`. See the corresponding\r\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\r\n     * to learn more about how these ids are created.\r\n     *\r\n     * This function call must use less than 30 000 gas.\r\n     */\r\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\r\n}\r\n\r\nabstract contract IQLF is IERC165 {\r\n    /**\r\n     * @dev Returns if the given address is qualified, implemented on demand.\r\n     */\r\n    function ifQualified (address account) virtual external view returns (bool);\r\n\r\n    /**\r\n     * @dev Logs if the given address is qualified, implemented on demand.\r\n     */\r\n    function logQualified (address account, uint256 ito_start_time) virtual external returns (bool);\r\n\r\n    /**\r\n     * @dev Ensure that custom contract implements `ifQualified` amd `logQualified` correctly.\r\n     */\r\n    function supportsInterface(bytes4 interfaceId) virtual external override pure returns (bool) {\r\n        return interfaceId == this.supportsInterface.selector || \r\n            interfaceId == (this.ifQualified.selector ^ this.logQualified.selector);\r\n    }\r\n\r\n    /**\r\n     * @dev Emit when `ifQualified` is called to decide if the given `address`\r\n     * is `qualified` according to the preset rule by the contract creator and \r\n     * the current block `number` and the current block `timestamp`.\r\n     */\r\n    event Qualification(address account, bool qualified, uint256 blockNumber, uint256 timestamp);\r\n}\r\n\r\ncontract HappyTokenPool {\r\n\r\n    struct Pool {\r\n        uint256 packed1;            // qualification_address(160) the smart contract address to verify qualification\r\n                                    // hash(40) start_time_delta(28) \r\n                                    // expiration_time_delta(28) BIG ENDIAN\r\n        uint256 packed2;            // total_tokens(128) limit(128)\r\n        uint48  unlock_time;        // unlock_time + base_time = real_time\r\n        address creator;\r\n        address token_address;      // the target token address\r\n        address[] exchange_addrs;   // a list of ERC20 addresses for swapping\r\n        uint128[] exchanged_tokens; // a list of amounts of swapped tokens\r\n        uint128[] ratios;           // a list of swap ratios\r\n                                    // length = 2 * exchange_addrs.length\r\n                                    // [address1, target, address2, target, ...]\r\n                                    // e.g. [1, 10]\r\n                                    // represents 1 tokenA to swap 10 target token\r\n                                    // note: each ratio pair needs to be coprime\r\n        mapping(address => uint256) swapped_map;      // swapped amount of an address\r\n    }\r\n\r\n    struct Packed {\r\n        uint256 packed1;\r\n        uint256 packed2;\r\n    }\r\n\r\n    // swap pool filling success event\r\n    event FillSuccess (\r\n        uint256 total,\r\n        bytes32 id,\r\n        address creator,\r\n        uint256 creation_time,\r\n        address token_address,\r\n        string message\r\n    );\r\n\r\n    // swap success event\r\n    event SwapSuccess (\r\n        bytes32 id,\r\n        address swapper,\r\n        address from_address,\r\n        address to_address,\r\n        uint256 from_value,\r\n        uint256 to_value\r\n    );\r\n\r\n    // claim success event\r\n    event ClaimSuccess (\r\n        bytes32 id,\r\n        address claimer,\r\n        uint256 timestamp,\r\n        uint256 to_value,\r\n        address token_address\r\n    );\r\n\r\n    // swap pool destruct success event\r\n    event DestructSuccess (\r\n        bytes32 id,\r\n        address token_address,\r\n        uint256 remaining_balance,\r\n        uint128[] exchanged_values\r\n    );\r\n\r\n    // single token withdrawl from a swap pool success even\r\n    event WithdrawSuccess (\r\n        bytes32 id,\r\n        address token_address,\r\n        uint256 withdraw_balance\r\n    );\r\n\r\n    modifier creatorOnly {\r\n        require(msg.sender == contract_creator, \"Contract Creator Only\");\r\n        _;\r\n    }\r\n\r\n    using SafeERC20 for IERC20;\r\n    uint32 nonce;\r\n    uint224 base_time;                 // timestamp = base_time + delta to save gas\r\n    address public contract_creator;\r\n    mapping(bytes32 => Pool) pool_by_id;    // maps an id to a Pool instance\r\n    string constant private magic = \"Prince Philip, Queen Elizabeth II's husband, has died aged 99, \\\r\n    Buckingham Palace has announced. A statement issued by the palace just after midday spoke of the \\\r\n    Queen's deep sorrow following his death at Windsor Castle on Friday morning. The Duke of Edinbur\";\r\n    bytes32 private seed;\r\n    address DEFAULT_ADDRESS = 0x0000000000000000000000000000000000000000;       // a universal address\r\n\r\n    constructor() {\r\n        contract_creator = msg.sender;\r\n        seed = keccak256(abi.encodePacked(magic, block.timestamp, contract_creator));\r\n        base_time = 1616976000;                                    // 00:00:00 03/30/2021 GMT(UTC+0)\r\n    }\r\n\r\n    /**\r\n     * @dev \r\n     * fill_pool() creates a swap pool with specific parameters from input\r\n     * _hash                sha3-256(password)\r\n     * _start               start time delta, real start time = base_time + _start\r\n     * _end                 end time delta, real end time = base_time + _end\r\n     * message              swap pool creation message, only stored in FillSuccess event\r\n     * _exchange_addrs      swap token list (0x0 for ETH, only supports ETH and ERC20 now)\r\n     * _ratios              swap pair ratio list\r\n     * _unlock_time         unlock time delta real unlock time = base_time + _unlock_time\r\n     * _token_addr          swap target token address\r\n     * _total_tokens        target token total swap amount\r\n     * _limit               target token single swap limit\r\n     * _qualification       the qualification contract address based on IQLF to determine qualification\r\n     * This function takes the above parameters and creates the pool. _total_tokens of the target token\r\n     * will be successfully transferred to this contract securely on a successful run of this function.\r\n    **/\r\n    function fill_pool (bytes32 _hash, uint256 _start, uint256 _end, string memory message,\r\n                        address[] memory _exchange_addrs, uint128[] memory _ratios, uint256 _unlock_time,\r\n                        address _token_addr, uint256 _total_tokens, uint256 _limit, address _qualification)\r\n    public payable {\r\n        nonce ++;\r\n        require(_start < _end, \"Start time should be earlier than end time.\");\r\n        require(_end < _unlock_time || _unlock_time == 0, \"End time should be earlier than unlock time\");\r\n        require(_limit <= _total_tokens, \"Limit needs to be less than or equal to the total supply\");\r\n        require(_total_tokens < 2 ** 128, \"No more than 2^128 tokens(incluidng decimals) allowed\");\r\n        require(IERC20(_token_addr).allowance(msg.sender, address(this)) >= _total_tokens, \"Insuffcient allowance\");\r\n        require(_exchange_addrs.length > 0, \"Exchange token addresses need to be set\");\r\n        require(_ratios.length == 2 * _exchange_addrs.length, \"Size of ratios = 2 * size of exchange_addrs\");\r\n\r\n        bytes32 _id = keccak256(abi.encodePacked(msg.sender, block.timestamp, nonce, seed));\r\n        Pool storage pool = pool_by_id[_id];\r\n        pool.packed1 = wrap1(_qualification, _hash, _start, _end);      // 256 bytes    detail in wrap1()\r\n        pool.packed2 = wrap2(_total_tokens, _limit);                    // 256 bytes    detail in wrap2()\r\n        pool.unlock_time = uint48(_unlock_time);                        // 48  bytes    unlock_time 0 -> unlocked\r\n        pool.creator = msg.sender;                                      // 160 bytes    pool creator\r\n        pool.exchange_addrs = _exchange_addrs;                          // 160 bytes    target token\r\n        pool.token_address = _token_addr;                               // 160 bytes    target token address\r\n\r\n        // Init each token swapped amount to 0\r\n        for (uint256 i = 0; i < _exchange_addrs.length; i++) {\r\n            if (_exchange_addrs[i] != DEFAULT_ADDRESS) {\r\n                // TODO: Is there a better way to validate an ERC20?\r\n                require(IERC20(_exchange_addrs[i]).totalSupply() > 0, \"Not a valid ERC20\");\r\n            }\r\n            pool.exchanged_tokens.push(0); \r\n        }\r\n\r\n        // Make sure each ratio is co-prime to prevent overflow\r\n        for (uint256 i = 0; i < _ratios.length; i+= 2) {\r\n            uint256 divA = SafeMath.div(_ratios[i], _ratios[i+1]);      // Non-zero checked by SafteMath.div\r\n            uint256 divB = SafeMath.div(_ratios[i+1], _ratios[i]);      // Non-zero checked by SafteMath.div\r\n            \r\n            if (_ratios[i] == 1) {\r\n                require(divB == _ratios[i+1]);\r\n            } else if (_ratios[i+1] == 1) {\r\n                require(divA == _ratios[i]);\r\n            } else {\r\n                // if a and b are co-prime, then a / b * b != a and b / a * a != b\r\n                require(divA * _ratios[i+1] != _ratios[i]);\r\n                require(divB * _ratios[i] != _ratios[i+1]);\r\n            }\r\n        }\r\n        pool.ratios = _ratios;                                          // 256 * k\r\n        IERC20(_token_addr).safeTransferFrom(msg.sender, address(this), _total_tokens);\r\n\r\n        emit FillSuccess(_total_tokens, _id, msg.sender, block.timestamp, _token_addr, message);\r\n    }\r\n\r\n    /**\r\n     * @dev\r\n     * swap() allows users to swap tokens in a swap pool\r\n     * id                   swap pool id\r\n     * verification         sha3-256(sha3-256(password)[:40]+swapper_address)\r\n     * validation           sha3-256(swapper_address)\r\n     * exchange_addr_i     the index of the exchange address of the list\r\n     * input_total          the input amount of the specific token\r\n     * This function is called by the swapper who approves the specific ERC20 or directly transfer the ETH\r\n     * first and wants to swap the desired amount of the target token. The swapped amount is calculated\r\n     * based on the pool ratio. After swap successfully, the same account can not swap the same pool again.\r\n    **/\r\n\r\n    function swap (bytes32 id, bytes32 verification, \r\n                   bytes32 validation, uint256 exchange_addr_i, uint128 input_total) \r\n    public payable returns (uint256 swapped) {\r\n\r\n        Pool storage pool = pool_by_id[id];\r\n        Packed memory packed = Packed(pool.packed1, pool.packed2);\r\n        require (\r\n            IQLF(\r\n                address(\r\n                    uint160(unbox(packed.packed1, 0, 160)))\r\n                ).logQualified(msg.sender, uint256(unbox(packed.packed1, 200, 28) + base_time)\r\n            ) == true, \r\n            \"Not Qualified\"\r\n        );\r\n        require (unbox(packed.packed1, 200, 28) + base_time < block.timestamp, \"Not started.\");\r\n        require (unbox(packed.packed1, 228, 28) + base_time > block.timestamp, \"Expired.\");\r\n        // sha3(sha3(passowrd)[:40] + msg.sender) so that the raw password will never appear in the contract\r\n        require (verification == keccak256(abi.encodePacked(unbox(packed.packed1, 160, 40), msg.sender)), \r\n                 'Wrong Password');\r\n        // sha3(msg.sender) to protect from front runs (but this is kinda naive since the contract is open sourced)\r\n        require (validation == keccak256(abi.encodePacked(msg.sender)), \"Validation Failed\");\r\n\r\n        uint256 total_tokens = unbox(packed.packed2, 0, 128);\r\n        // revert if the pool is empty\r\n        require (total_tokens > 0, \"Out of Stock\");\r\n\r\n        address exchange_addr = pool.exchange_addrs[exchange_addr_i];\r\n        uint256 ratioA = pool.ratios[exchange_addr_i*2];\r\n        uint256 ratioB = pool.ratios[exchange_addr_i*2 + 1];\r\n        // check if the input is enough for the desired transfer\r\n        if (exchange_addr == DEFAULT_ADDRESS) {\r\n            require(msg.value == input_total, 'No enough ether.');\r\n        } else {\r\n            uint256 allowance = IERC20(exchange_addr).allowance(msg.sender, address(this));\r\n            require(allowance >= input_total, 'No enough allowance.');\r\n        }\r\n\r\n        uint256 swapped_tokens;\r\n        // this calculation won't be overflow thanks to the SafeMath and the co-prime test\r\n        swapped_tokens = SafeMath.div(SafeMath.mul(input_total, ratioB), ratioA);       // 2^256=10e77 >> 10e18 * 10e18\r\n        require(swapped_tokens > 0, \"Better not draw water with a sieve\");\r\n\r\n        uint256 limit = unbox(packed.packed2, 128, 128);\r\n        if (swapped_tokens > limit) {\r\n            // don't be greedy - you can only get at most limit tokens\r\n            swapped_tokens = limit;\r\n            input_total = uint128(SafeMath.div(SafeMath.mul(limit, ratioA), ratioB));           // Update input_total\r\n        } else if (swapped_tokens > total_tokens) {\r\n            // if the left tokens are not enough\r\n            swapped_tokens = total_tokens;\r\n            input_total = uint128(SafeMath.div(SafeMath.mul(total_tokens, ratioA), ratioB));    // Update input_total\r\n            // return the eth\r\n            if (exchange_addr == DEFAULT_ADDRESS)\r\n                payable(msg.sender).transfer(msg.value - input_total);\r\n        }\r\n        require(swapped_tokens <= limit);                                                       // make sure again\r\n        pool.exchanged_tokens[exchange_addr_i] = uint128(SafeMath.add(pool.exchanged_tokens[exchange_addr_i], \r\n                                                                      input_total));            // update exchanged\r\n\r\n        // penalize greedy attackers by placing duplication check at the very last\r\n        require (pool.swapped_map[msg.sender] == 0, \"Already swapped\");\r\n\r\n        // update the remaining tokens and swapped token mapping\r\n        pool.packed2 = rewriteBox(packed.packed2, 0, 128, SafeMath.sub(total_tokens, swapped_tokens));\r\n        pool.swapped_map[msg.sender] = swapped_tokens;\r\n\r\n        // transfer the token after state changing\r\n        // ETH comes with the tx, but ERC20 does not - INPUT\r\n        if (exchange_addr != DEFAULT_ADDRESS) {\r\n            IERC20(exchange_addr).safeTransferFrom(msg.sender, address(this), input_total);\r\n        }\r\n\r\n        // Swap success event\r\n        emit SwapSuccess(id, msg.sender, exchange_addr, pool.token_address, input_total, swapped_tokens);\r\n\r\n        // if unlock_time == 0, transfer the swapped tokens to the recipient address (msg.sender) - OUTPUT\r\n        // if not, claim() needs to be called to get the token\r\n        if (pool.unlock_time == 0) {\r\n            transfer_token(pool.token_address, address(this), msg.sender, swapped_tokens);\r\n            emit ClaimSuccess(id, msg.sender, block.timestamp, swapped_tokens, pool.token_address);\r\n        }\r\n            \r\n        return swapped_tokens;\r\n    }\r\n\r\n    /**\r\n     * check_availability() returns a bunch of pool info given a pool id\r\n     * id                    swap pool id\r\n     * this function returns 1. exchange_addrs that can be used to determine the index\r\n     *                       2. remaining target tokens\r\n     *                       3. if started\r\n     *                       4. if ended\r\n     *                       5. swapped amount of the query address\r\n     *                       5. exchanged amount of each token\r\n    **/\r\n\r\n    function check_availability (bytes32 id) external view \r\n        returns (address[] memory exchange_addrs, uint256 remaining, \r\n                 bool started, bool expired, bool unlocked, uint256 unlock_time,\r\n                 uint256 swapped, uint128[] memory exchanged_tokens) {\r\n        Pool storage pool = pool_by_id[id];\r\n        return (\r\n            pool.exchange_addrs,                                                // exchange_addrs 0x0 means destructed\r\n            unbox(pool.packed2, 0, 128),                                        // remaining\r\n            block.timestamp > unbox(pool.packed1, 200, 28) + base_time,         // started\r\n            block.timestamp > unbox(pool.packed1, 228, 28) + base_time,         // expired\r\n            block.timestamp > pool.unlock_time + base_time,                     // unlocked\r\n            pool.unlock_time + base_time,                                       // unlock_time\r\n            pool.swapped_map[msg.sender],                                       // swapped number \r\n            pool.exchanged_tokens                                               // exchanged tokens\r\n        );\r\n    }\r\n\r\n    function claim(bytes32[] memory ito_ids) public {\r\n        uint256 claimed_amount;\r\n        for (uint256 i = 0; i < ito_ids.length; i++) {\r\n            Pool storage pool = pool_by_id[ito_ids[i]];\r\n            if (pool.unlock_time == 0)\r\n                continue;\r\n            if (pool.unlock_time + base_time > block.timestamp)\r\n                continue;\r\n            claimed_amount = pool.swapped_map[msg.sender];\r\n            if (claimed_amount == 0)\r\n                continue;\r\n            pool.swapped_map[msg.sender] = 0;\r\n            transfer_token(pool.token_address, address(this), msg.sender, claimed_amount);\r\n\r\n            emit ClaimSuccess(ito_ids[i], msg.sender, block.timestamp, claimed_amount, pool.token_address);\r\n        }\r\n    }\r\n\r\n    function setUnlockTime(bytes32 id, uint256 _unlock_time) public {\r\n        Pool storage pool = pool_by_id[id];\r\n        require(pool.creator == msg.sender, \"Pool Creator Only\");\r\n        require(block.timestamp < pool.unlock_time, \"Too Late\");\r\n        require(pool.unlock_time != 0, \"Not eligible when unlock_time is 0\");\r\n        require(_unlock_time != 0, \"Cannot set to 0\");\r\n        pool.unlock_time = uint48(_unlock_time);\r\n    }\r\n\r\n    /**\r\n     * destruct() destructs the given pool given the pool id\r\n     * id                    swap pool id\r\n     * this function can only be called by the pool creator. after validation, it transfers all the remaining token \r\n     * (if any) and all the swapped tokens to the pool creator. it will then destruct the pool by reseting almost \r\n     * all the variables to zero to get the gas refund.\r\n     * note that this function may not work if a pool needs to transfer over ~200 tokens back to the address due to \r\n     * the block gas limit. we have another function withdraw() to help the pool creator to withdraw a single token \r\n    **/\r\n\r\n    function destruct (bytes32 id) public {\r\n        Pool storage pool = pool_by_id[id];\r\n        require(msg.sender == pool.creator, \"Only the pool creator can destruct.\");\r\n\r\n        uint256 expiration = unbox(pool.packed1, 228, 28) + base_time;\r\n        uint256 remaining_tokens = unbox(pool.packed2, 0, 128);\r\n        // only after expiration or the pool is empty\r\n        require(expiration <= block.timestamp || remaining_tokens == 0, \"Not expired yet\");\r\n\r\n        // if any left in the pool\r\n        if (remaining_tokens != 0) {\r\n            transfer_token(pool.token_address, address(this), msg.sender, remaining_tokens);\r\n        }\r\n        \r\n        // transfer the swapped tokens accordingly\r\n        // note this loop may exceed the block gas limit so if >200 exchange_addrs this may not work\r\n        for (uint256 i = 0; i < pool.exchange_addrs.length; i++) {\r\n            if (pool.exchanged_tokens[i] > 0) {\r\n                // ERC20\r\n                if (pool.exchange_addrs[i] != DEFAULT_ADDRESS)\r\n                    transfer_token(pool.exchange_addrs[i], address(this), msg.sender, pool.exchanged_tokens[i]);\r\n                // ETH\r\n                else\r\n                    payable(msg.sender).transfer(pool.exchanged_tokens[i]);\r\n            }\r\n        }\r\n        emit DestructSuccess(id, pool.token_address, remaining_tokens, pool.exchanged_tokens);\r\n\r\n        // Gas Refund\r\n        pool.packed1 = 0;\r\n        pool.packed2 = 0;\r\n        for (uint256 i = 0; i < pool.exchange_addrs.length; i++) {\r\n            pool.exchange_addrs[i] = DEFAULT_ADDRESS;\r\n            pool.exchanged_tokens[i] = 0;\r\n            pool.ratios[i*2] = 0;\r\n            pool.ratios[i*2+1] = 0;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * withdraw() transfers out a single token after a pool is expired or empty \r\n     * id                    swap pool id\r\n     * addr_i                withdraw token index\r\n     * this function can only be called by the pool creator. after validation, it transfers the addr_i th token \r\n     * out to the pool creator address.\r\n    **/\r\n\r\n    function withdraw (bytes32 id, uint256 addr_i) public {\r\n        Pool storage pool = pool_by_id[id];\r\n        require(msg.sender == pool.creator, \"Only the pool creator can withdraw.\");\r\n\r\n        uint256 withdraw_balance = pool.exchanged_tokens[addr_i];\r\n        require(withdraw_balance > 0, \"None of this token left\");\r\n        uint256 expiration = unbox(pool.packed1, 228, 28) + base_time;\r\n        uint256 remaining_tokens = unbox(pool.packed2, 0, 128);\r\n        // only after expiration or the pool is empty\r\n        require(expiration <= block.timestamp || remaining_tokens == 0, \"Not expired yet\");\r\n        address token_address = pool.exchange_addrs[addr_i];\r\n\r\n        // ERC20\r\n        if (token_address != DEFAULT_ADDRESS)\r\n            transfer_token(token_address, address(this), msg.sender, withdraw_balance);\r\n        // ETH\r\n        else\r\n            payable(msg.sender).transfer(withdraw_balance);\r\n        // clear the record\r\n        pool.exchanged_tokens[addr_i] = 0;\r\n        emit WithdrawSuccess(id, token_address, withdraw_balance);\r\n    }\r\n\r\n    // helper functions TODO: migrate this to a helper file\r\n\r\n    /**\r\n     * _qualification the smart contract address to verify qualification      160\r\n     * _hash          sha3-256(password)                                      40\r\n     * _start         start time delta                                        28\r\n     * _end           end time  delta                                         28\r\n     * wrap1() inserts the above variables into a 32-word block\r\n    **/\r\n\r\n    function wrap1 (address _qualification, bytes32 _hash, uint256 _start, uint256 _end) internal pure \r\n                    returns (uint256 packed1) {\r\n        uint256 _packed1 = 0;\r\n        _packed1 |= box(0, 160,  uint256(uint160(_qualification)));     // _qualification = 160 bits\r\n        _packed1 |= box(160, 40, uint256(_hash) >> 216);                // hash = 40 bits (safe?)\r\n        _packed1 |= box(200, 28, _start);                               // start_time = 28 bits \r\n        _packed1 |= box(228, 28, _end);                                 // expiration_time = 28 bits\r\n        return _packed1;\r\n    }\r\n\r\n    /**\r\n     * _total_tokens   target remaining         128\r\n     * _limit          single swap limit        128\r\n     * wrap2() inserts the above variables into a 32-word block\r\n    **/\r\n\r\n    function wrap2 (uint256 _total_tokens, uint256 _limit) internal pure returns (uint256 packed2) {\r\n        uint256 _packed2 = 0;\r\n        _packed2 |= box(0, 128, _total_tokens);             // total_tokens = 128 bits ~= 3.4e38\r\n        _packed2 |= box(128, 128, _limit);                  // limit = 128 bits\r\n        return _packed2;\r\n    }\r\n\r\n    /**\r\n     * position      position in a memory block\r\n     * size          data size\r\n     * data          data\r\n     * box() inserts the data in a 256bit word with the given position and returns it\r\n     * data is checked by validRange() to make sure it is not over size \r\n    **/\r\n\r\n    function box (uint16 position, uint16 size, uint256 data) internal pure returns (uint256 boxed) {\r\n        require(validRange(size, data), \"Value out of range BOX\");\r\n        assembly {\r\n            // data << position\r\n            boxed := shl(position, data)\r\n        }\r\n    }\r\n\r\n    /**\r\n     * position      position in a memory block\r\n     * size          data size\r\n     * base          base data\r\n     * unbox() extracts the data out of a 256bit word with the given position and returns it\r\n     * base is checked by validRange() to make sure it is not over size \r\n    **/\r\n\r\n    function unbox (uint256 base, uint16 position, uint16 size) internal pure returns (uint256 unboxed) {\r\n        require(validRange(256, base), \"Value out of range UNBOX\");\r\n        assembly {\r\n            // (((1 << size) - 1) & base >> position)\r\n            unboxed := and(sub(shl(size, 1), 1), shr(position, base))\r\n\r\n        }\r\n    }\r\n\r\n    /**\r\n     * size          data size\r\n     * data          data\r\n     * validRange()  checks if the given data is over the specified data size\r\n    **/\r\n\r\n    function validRange (uint16 size, uint256 data) internal pure returns(bool ifValid) { \r\n        assembly {\r\n            // 2^size > data or size ==256\r\n            ifValid := or(eq(size, 256), gt(shl(size, 1), data))\r\n        }\r\n    }\r\n\r\n    /**\r\n     * _box          32byte data to be modified\r\n     * position      position in a memory block\r\n     * size          data size\r\n     * data          data to be inserted\r\n     * rewriteBox() updates a 32byte word with a data at the given position with the specified size\r\n    **/\r\n\r\n    function rewriteBox (uint256 _box, uint16 position, uint16 size, uint256 data) \r\n                        internal pure returns (uint256 boxed) {\r\n        assembly {\r\n            // mask = ~((1 << size - 1) << position)\r\n            // _box = (mask & _box) | ()data << position)\r\n            boxed := or( and(_box, not(shl(position, sub(shl(size, 1), 1)))), shl(position, data))\r\n        }\r\n    }\r\n\r\n    /**\r\n     * token_address      ERC20 address\r\n     * sender_address     sender address\r\n     * recipient_address  recipient address\r\n     * amount             transfer amount\r\n     * transfer_token() transfers a given amount of ERC20 from the sender address to the recipient address\r\n    **/\r\n   \r\n    function transfer_token (address token_address, address sender_address,\r\n                             address recipient_address, uint256 amount) internal {\r\n        require(IERC20(token_address).balanceOf(sender_address) >= amount, \"Balance not enough\");\r\n        IERC20(token_address).safeTransfer(recipient_address, amount);\r\n    }\r\n    \r\n}","ABI":"[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"claimer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"to_value\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token_address\",\"type\":\"address\"}],\"name\":\"ClaimSuccess\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token_address\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"remaining_balance\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint128[]\",\"name\":\"exchanged_values\",\"type\":\"uint128[]\"}],\"name\":\"DestructSuccess\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"total\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"creation_time\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token_address\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"message\",\"type\":\"string\"}],\"name\":\"FillSuccess\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"swapper\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"from_address\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"to_address\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"from_value\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"to_value\",\"type\":\"uint256\"}],\"name\":\"SwapSuccess\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token_address\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"withdraw_balance\",\"type\":\"uint256\"}],\"name\":\"WithdrawSuccess\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"}],\"name\":\"check_availability\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"exchange_addrs\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"remaining\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"started\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"expired\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"unlocked\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"unlock_time\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"swapped\",\"type\":\"uint256\"},{\"internalType\":\"uint128[]\",\"name\":\"exchanged_tokens\",\"type\":\"uint128[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"ito_ids\",\"type\":\"bytes32[]\"}],\"name\":\"claim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"contract_creator\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"}],\"name\":\"destruct\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_hash\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"_start\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_end\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"message\",\"type\":\"string\"},{\"internalType\":\"address[]\",\"name\":\"_exchange_addrs\",\"type\":\"address[]\"},{\"internalType\":\"uint128[]\",\"name\":\"_ratios\",\"type\":\"uint128[]\"},{\"internalType\":\"uint256\",\"name\":\"_unlock_time\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_token_addr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_total_tokens\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_limit\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_qualification\",\"type\":\"address\"}],\"name\":\"fill_pool\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"_unlock_time\",\"type\":\"uint256\"}],\"name\":\"setUnlockTime\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"verification\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"validation\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"exchange_addr_i\",\"type\":\"uint256\"},{\"internalType\":\"uint128\",\"name\":\"input_total\",\"type\":\"uint128\"}],\"name\":\"swap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"swapped\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"addr_i\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"HappyTokenPool","CompilerVersion":"v0.8.1+commit.df193b15","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://abec04e7d9691f60de44d91ac9eed4f21450b1a3ae2e6436074a0545fd556a50"}]}