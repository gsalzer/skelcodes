{"status":"1","message":"OK","result":[{"SourceCode":"/**\r\n *Submitted for verification at hecoinfo.com on 2021-07-02\r\n*/\r\n\r\n// Verified by Darwinia Network\r\n\r\n// hevm: flattened sources of contracts/LandResourceV6.sol\r\n\r\npragma solidity >=0.4.23 <0.5.0 >=0.4.24 <0.5.0;\r\n\r\n////// contracts/interfaces/ILandBase.sol\r\n/* pragma solidity ^0.4.24; */\r\n\r\ncontract ILandBase {\r\n\r\n    /*\r\n     *  Event\r\n     */\r\n    event ModifiedResourceRate(uint indexed tokenId, address resourceToken, uint16 newResourceRate);\r\n    event HasboxSetted(uint indexed tokenId, bool hasBox);\r\n\r\n    event ChangedReourceRateAttr(uint indexed tokenId, uint256 attr);\r\n\r\n    event ChangedFlagMask(uint indexed tokenId, uint256 newFlagMask);\r\n\r\n    event CreatedNewLand(uint indexed tokenId, int x, int y, address beneficiary, uint256 resourceRateAttr, uint256 mask);\r\n\r\n    function defineResouceTokenRateAttrId(address _resourceToken, uint8 _attrId) public;\r\n\r\n    function setHasBox(uint _landTokenID, bool isHasBox) public;\r\n    function isReserved(uint256 _tokenId) public view returns (bool);\r\n    function isSpecial(uint256 _tokenId) public view returns (bool);\r\n    function isHasBox(uint256 _tokenId) public view returns (bool);\r\n\r\n    function getResourceRateAttr(uint _landTokenId) public view returns (uint256);\r\n    function setResourceRateAttr(uint _landTokenId, uint256 _newResourceRateAttr) public;\r\n\r\n    function getResourceRate(uint _landTokenId, address _resouceToken) public view returns (uint16);\r\n    function setResourceRate(uint _landTokenID, address _resourceToken, uint16 _newResouceRate) public;\r\n\r\n    function getFlagMask(uint _landTokenId) public view returns (uint256);\r\n\r\n    function setFlagMask(uint _landTokenId, uint256 _newFlagMask) public;\r\n\r\n}\r\n\r\n////// contracts/interfaces/ILandBaseExt.sol\r\n/* pragma solidity ^0.4.24; */\r\n\r\ncontract ILandBaseExt {\r\n    function resourceToken2RateAttrId(address _resourceToken) external view returns (uint256);\r\n}\r\n\r\n////// contracts/interfaces/IMetaDataTeller.sol\r\n/* pragma solidity ^0.4.24; */\r\n\r\ninterface IMetaDataTeller {\r\n\tfunction addTokenMeta(\r\n\t\taddress _token,\r\n\t\tuint16 _grade,\r\n\t\tuint112 _strengthRate\r\n\t) external;\r\n\r\n\t//0xf666196d\r\n\tfunction getMetaData(address _token, uint256 _id)\r\n\t\texternal\r\n\t\tview\r\n\t\treturns (\r\n\t\t\tuint16,\r\n\t\t\tuint16,\r\n\t\t\tuint16\r\n\t\t);\r\n\r\n\t//0x7999a5cf\r\n\tfunction getPrefer(address _token) external view returns (uint256);\r\n\r\n\t//0x33281815\r\n\tfunction getRate(\r\n\t\taddress _token,\r\n\t\tuint256 _id,\r\n\t\tuint256 _index\r\n\t) external view returns (uint256);\r\n}\r\n\r\n////// lib/common-contracts/contracts/interfaces/IAuthority.sol\r\n/* pragma solidity ^0.4.24; */\r\n\r\ncontract IAuthority {\r\n    function canCall(\r\n        address src, address dst, bytes4 sig\r\n    ) public view returns (bool);\r\n}\r\n\r\n////// lib/common-contracts/contracts/DSAuth.sol\r\n/* pragma solidity ^0.4.24; */\r\n\r\n/* import './interfaces/IAuthority.sol'; */\r\n\r\ncontract DSAuthEvents {\r\n    event LogSetAuthority (address indexed authority);\r\n    event LogSetOwner     (address indexed owner);\r\n}\r\n\r\n/**\r\n * @title DSAuth\r\n * @dev The DSAuth contract is reference implement of https://github.com/dapphub/ds-auth\r\n * But in the isAuthorized method, the src from address(this) is remove for safty concern.\r\n */\r\ncontract DSAuth is DSAuthEvents {\r\n    IAuthority   public  authority;\r\n    address      public  owner;\r\n\r\n    constructor() public {\r\n        owner = msg.sender;\r\n        emit LogSetOwner(msg.sender);\r\n    }\r\n\r\n    function setOwner(address owner_)\r\n        public\r\n        auth\r\n    {\r\n        owner = owner_;\r\n        emit LogSetOwner(owner);\r\n    }\r\n\r\n    function setAuthority(IAuthority authority_)\r\n        public\r\n        auth\r\n    {\r\n        authority = authority_;\r\n        emit LogSetAuthority(authority);\r\n    }\r\n\r\n    modifier auth {\r\n        require(isAuthorized(msg.sender, msg.sig));\r\n        _;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n    function isAuthorized(address src, bytes4 sig) internal view returns (bool) {\r\n        if (src == owner) {\r\n            return true;\r\n        } else if (authority == IAuthority(0)) {\r\n            return false;\r\n        } else {\r\n            return authority.canCall(src, this, sig);\r\n        }\r\n    }\r\n}\r\n\r\n////// lib/zeppelin-solidity/contracts/introspection/ERC165.sol\r\n/* pragma solidity ^0.4.24; */\r\n\r\n\r\n/**\r\n * @title ERC165\r\n * @dev https://github.com/ethereum/EIPs/blob/master/EIPS/eip-165.md\r\n */\r\ninterface ERC165 {\r\n\r\n  /**\r\n   * @notice Query if a contract implements an interface\r\n   * @param _interfaceId The interface identifier, as specified in ERC-165\r\n   * @dev Interface identification is specified in ERC-165. This function\r\n   * uses less than 30,000 gas.\r\n   */\r\n  function supportsInterface(bytes4 _interfaceId)\r\n    external\r\n    view\r\n    returns (bool);\r\n}\r\n\r\n////// lib/common-contracts/contracts/interfaces/IActivity.sol\r\n/* pragma solidity ^0.4.24; */\r\n\r\n/* import \"openzeppelin-solidity/contracts/introspection/ERC165.sol\"; */\r\n\r\ncontract IActivity is ERC165 {\r\n    bytes4 internal constant InterfaceId_IActivity = 0x6086e7f8; \r\n    /*\r\n     * 0x6086e7f8 ===\r\n     *   bytes4(keccak256('activityStopped(uint256)'))\r\n     */\r\n\r\n    function activityStopped(uint256 _tokenId) public;\r\n}\r\n\r\n////// lib/common-contracts/contracts/interfaces/IInterstellarEncoder.sol\r\n/* pragma solidity ^0.4.24; */\r\n\r\ncontract IInterstellarEncoder {\r\n    uint256 constant CLEAR_HIGH =  0x00000000000000000000000000000000ffffffffffffffffffffffffffffffff;\r\n\r\n    uint256 public constant MAGIC_NUMBER = 42;    // Interstellar Encoding Magic Number.\r\n    uint256 public constant CHAIN_ID = 1; // Ethereum mainet.\r\n    uint256 public constant CURRENT_LAND = 1; // 1 is Atlantis, 0 is NaN.\r\n\r\n    enum ObjectClass { \r\n        NaN,\r\n        LAND,\r\n        APOSTLE,\r\n        OBJECT_CLASS_COUNT\r\n    }\r\n\r\n    function registerNewObjectClass(address _objectContract, uint8 objectClass) public;\r\n\r\n    function registerNewTokenContract(address _tokenAddress) public;\r\n\r\n    function encodeTokenId(address _tokenAddress, uint8 _objectClass, uint128 _objectIndex) public view returns (uint256 _tokenId);\r\n\r\n    function encodeTokenIdForObjectContract(\r\n        address _tokenAddress, address _objectContract, uint128 _objectId) public view returns (uint256 _tokenId);\r\n\r\n    function getContractAddress(uint256 _tokenId) public view returns (address);\r\n\r\n    function getObjectId(uint256 _tokenId) public view returns (uint128 _objectId);\r\n\r\n    function getObjectClass(uint256 _tokenId) public view returns (uint8);\r\n\r\n    function getObjectAddress(uint256 _tokenId) public view returns (address);\r\n}\r\n\r\n////// lib/common-contracts/contracts/interfaces/IMinerObject.sol\r\n/* pragma solidity ^0.4.24; */\r\n\r\n/* import \"openzeppelin-solidity/contracts/introspection/ERC165.sol\"; */\r\n\r\ncontract IMinerObject is ERC165  {\r\n    bytes4 internal constant InterfaceId_IMinerObject = 0x64272b75;\r\n    \r\n    /*\r\n     * 0x64272b752 ===\r\n     *   bytes4(keccak256('strengthOf(uint256,address)'))\r\n     */\r\n\r\n    function strengthOf(uint256 _tokenId, address _resourceToken, uint256 _landTokenId) public view returns (uint256);\r\n\r\n}\r\n\r\n////// lib/common-contracts/contracts/interfaces/IMintableERC20.sol\r\n/* pragma solidity ^0.4.23; */\r\n\r\ncontract IMintableERC20 {\r\n\r\n    function mint(address _to, uint256 _value) public;\r\n}\r\n\r\n////// lib/common-contracts/contracts/interfaces/ISettingsRegistry.sol\r\n/* pragma solidity ^0.4.24; */\r\n\r\ncontract ISettingsRegistry {\r\n    enum SettingsValueTypes { NONE, UINT, STRING, ADDRESS, BYTES, BOOL, INT }\r\n\r\n    function uintOf(bytes32 _propertyName) public view returns (uint256);\r\n\r\n    function stringOf(bytes32 _propertyName) public view returns (string);\r\n\r\n    function addressOf(bytes32 _propertyName) public view returns (address);\r\n\r\n    function bytesOf(bytes32 _propertyName) public view returns (bytes);\r\n\r\n    function boolOf(bytes32 _propertyName) public view returns (bool);\r\n\r\n    function intOf(bytes32 _propertyName) public view returns (int);\r\n\r\n    function setUintProperty(bytes32 _propertyName, uint _value) public;\r\n\r\n    function setStringProperty(bytes32 _propertyName, string _value) public;\r\n\r\n    function setAddressProperty(bytes32 _propertyName, address _value) public;\r\n\r\n    function setBytesProperty(bytes32 _propertyName, bytes _value) public;\r\n\r\n    function setBoolProperty(bytes32 _propertyName, bool _value) public;\r\n\r\n    function setIntProperty(bytes32 _propertyName, int _value) public;\r\n\r\n    function getValueTypeOf(bytes32 _propertyName) public view returns (uint /* SettingsValueTypes */ );\r\n\r\n    event ChangeProperty(bytes32 indexed _propertyName, uint256 _type);\r\n}\r\n\r\n////// lib/common-contracts/contracts/interfaces/ITokenUse.sol\r\n/* pragma solidity ^0.4.24; */\r\n\r\ncontract ITokenUse {\r\n    uint48 public constant MAX_UINT48_TIME = 281474976710655;\r\n\r\n    function isObjectInHireStage(uint256 _tokenId) public view returns (bool);\r\n\r\n    function isObjectReadyToUse(uint256 _tokenId) public view returns (bool);\r\n\r\n    function getTokenUser(uint256 _tokenId) public view returns (address);\r\n\r\n    function createTokenUseOffer(uint256 _tokenId, uint256 _duration, uint256 _price, address _acceptedActivity) public;\r\n\r\n    function cancelTokenUseOffer(uint256 _tokenId) public;\r\n\r\n    function takeTokenUseOffer(uint256 _tokenId) public;\r\n\r\n    function addActivity(uint256 _tokenId, address _user, uint256 _endTime) public;\r\n\r\n    function removeActivity(uint256 _tokenId, address _user) public;\r\n}\r\n\r\n////// lib/zeppelin-solidity/contracts/introspection/SupportsInterfaceWithLookup.sol\r\n/* pragma solidity ^0.4.24; */\r\n\r\n/* import \"./ERC165.sol\"; */\r\n\r\n\r\n/**\r\n * @title SupportsInterfaceWithLookup\r\n * @author Matt Condon (@shrugs)\r\n * @dev Implements ERC165 using a lookup table.\r\n */\r\ncontract SupportsInterfaceWithLookup is ERC165 {\r\n\r\n  bytes4 public constant InterfaceId_ERC165 = 0x01ffc9a7;\r\n  /**\r\n   * 0x01ffc9a7 ===\r\n   *   bytes4(keccak256('supportsInterface(bytes4)'))\r\n   */\r\n\r\n  /**\r\n   * @dev a mapping of interface id to whether or not it's supported\r\n   */\r\n  mapping(bytes4 => bool) internal supportedInterfaces;\r\n\r\n  /**\r\n   * @dev A contract implementing SupportsInterfaceWithLookup\r\n   * implement ERC165 itself\r\n   */\r\n  constructor()\r\n    public\r\n  {\r\n    _registerInterface(InterfaceId_ERC165);\r\n  }\r\n\r\n  /**\r\n   * @dev implement supportsInterface(bytes4) using a lookup table\r\n   */\r\n  function supportsInterface(bytes4 _interfaceId)\r\n    external\r\n    view\r\n    returns (bool)\r\n  {\r\n    return supportedInterfaces[_interfaceId];\r\n  }\r\n\r\n  /**\r\n   * @dev private method for registering an interface\r\n   */\r\n  function _registerInterface(bytes4 _interfaceId)\r\n    internal\r\n  {\r\n    require(_interfaceId != 0xffffffff);\r\n    supportedInterfaces[_interfaceId] = true;\r\n  }\r\n}\r\n\r\n////// lib/zeppelin-solidity/contracts/math/SafeMath.sol\r\n/* pragma solidity ^0.4.24; */\r\n\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n\r\n  /**\r\n  * @dev Multiplies two numbers, throws on overflow.\r\n  */\r\n  function mul(uint256 _a, uint256 _b) internal pure returns (uint256 c) {\r\n    // Gas optimization: this is cheaper than asserting 'a' not being zero, but the\r\n    // benefit is lost if 'b' is also tested.\r\n    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\r\n    if (_a == 0) {\r\n      return 0;\r\n    }\r\n\r\n    c = _a * _b;\r\n    assert(c / _a == _b);\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Integer division of two numbers, truncating the quotient.\r\n  */\r\n  function div(uint256 _a, uint256 _b) internal pure returns (uint256) {\r\n    // assert(_b > 0); // Solidity automatically throws when dividing by 0\r\n    // uint256 c = _a / _b;\r\n    // assert(_a == _b * c + _a % _b); // There is no case in which this doesn't hold\r\n    return _a / _b;\r\n  }\r\n\r\n  /**\r\n  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n  */\r\n  function sub(uint256 _a, uint256 _b) internal pure returns (uint256) {\r\n    assert(_b <= _a);\r\n    return _a - _b;\r\n  }\r\n\r\n  /**\r\n  * @dev Adds two numbers, throws on overflow.\r\n  */\r\n  function add(uint256 _a, uint256 _b) internal pure returns (uint256 c) {\r\n    c = _a + _b;\r\n    assert(c >= _a);\r\n    return c;\r\n  }\r\n}\r\n\r\n////// lib/zeppelin-solidity/contracts/token/ERC721/ERC721Basic.sol\r\n/* pragma solidity ^0.4.24; */\r\n\r\n/* import \"../../introspection/ERC165.sol\"; */\r\n\r\n\r\n/**\r\n * @title ERC721 Non-Fungible Token Standard basic interface\r\n * @dev see https://github.com/ethereum/EIPs/blob/master/EIPS/eip-721.md\r\n */\r\ncontract ERC721Basic is ERC165 {\r\n\r\n  bytes4 internal constant InterfaceId_ERC721 = 0x80ac58cd;\r\n  /*\r\n   * 0x80ac58cd ===\r\n   *   bytes4(keccak256('balanceOf(address)')) ^\r\n   *   bytes4(keccak256('ownerOf(uint256)')) ^\r\n   *   bytes4(keccak256('approve(address,uint256)')) ^\r\n   *   bytes4(keccak256('getApproved(uint256)')) ^\r\n   *   bytes4(keccak256('setApprovalForAll(address,bool)')) ^\r\n   *   bytes4(keccak256('isApprovedForAll(address,address)')) ^\r\n   *   bytes4(keccak256('transferFrom(address,address,uint256)')) ^\r\n   *   bytes4(keccak256('safeTransferFrom(address,address,uint256)')) ^\r\n   *   bytes4(keccak256('safeTransferFrom(address,address,uint256,bytes)'))\r\n   */\r\n\r\n  bytes4 internal constant InterfaceId_ERC721Exists = 0x4f558e79;\r\n  /*\r\n   * 0x4f558e79 ===\r\n   *   bytes4(keccak256('exists(uint256)'))\r\n   */\r\n\r\n  bytes4 internal constant InterfaceId_ERC721Enumerable = 0x780e9d63;\r\n  /**\r\n   * 0x780e9d63 ===\r\n   *   bytes4(keccak256('totalSupply()')) ^\r\n   *   bytes4(keccak256('tokenOfOwnerByIndex(address,uint256)')) ^\r\n   *   bytes4(keccak256('tokenByIndex(uint256)'))\r\n   */\r\n\r\n  bytes4 internal constant InterfaceId_ERC721Metadata = 0x5b5e139f;\r\n  /**\r\n   * 0x5b5e139f ===\r\n   *   bytes4(keccak256('name()')) ^\r\n   *   bytes4(keccak256('symbol()')) ^\r\n   *   bytes4(keccak256('tokenURI(uint256)'))\r\n   */\r\n\r\n  event Transfer(\r\n    address indexed _from,\r\n    address indexed _to,\r\n    uint256 indexed _tokenId\r\n  );\r\n  event Approval(\r\n    address indexed _owner,\r\n    address indexed _approved,\r\n    uint256 indexed _tokenId\r\n  );\r\n  event ApprovalForAll(\r\n    address indexed _owner,\r\n    address indexed _operator,\r\n    bool _approved\r\n  );\r\n\r\n  function balanceOf(address _owner) public view returns (uint256 _balance);\r\n  function ownerOf(uint256 _tokenId) public view returns (address _owner);\r\n  function exists(uint256 _tokenId) public view returns (bool _exists);\r\n\r\n  function approve(address _to, uint256 _tokenId) public;\r\n  function getApproved(uint256 _tokenId)\r\n    public view returns (address _operator);\r\n\r\n  function setApprovalForAll(address _operator, bool _approved) public;\r\n  function isApprovedForAll(address _owner, address _operator)\r\n    public view returns (bool);\r\n\r\n  function transferFrom(address _from, address _to, uint256 _tokenId) public;\r\n  function safeTransferFrom(address _from, address _to, uint256 _tokenId)\r\n    public;\r\n\r\n  function safeTransferFrom(\r\n    address _from,\r\n    address _to,\r\n    uint256 _tokenId,\r\n    bytes _data\r\n  )\r\n    public;\r\n}\r\n\r\n////// lib/zeppelin-solidity/contracts/token/ERC721/ERC721.sol\r\n/* pragma solidity ^0.4.24; */\r\n\r\n/* import \"./ERC721Basic.sol\"; */\r\n\r\n\r\n/**\r\n * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\r\n * @dev See https://github.com/ethereum/EIPs/blob/master/EIPS/eip-721.md\r\n */\r\ncontract ERC721Enumerable is ERC721Basic {\r\n  function totalSupply() public view returns (uint256);\r\n  function tokenOfOwnerByIndex(\r\n    address _owner,\r\n    uint256 _index\r\n  )\r\n    public\r\n    view\r\n    returns (uint256 _tokenId);\r\n\r\n  function tokenByIndex(uint256 _index) public view returns (uint256);\r\n}\r\n\r\n\r\n/**\r\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\r\n * @dev See https://github.com/ethereum/EIPs/blob/master/EIPS/eip-721.md\r\n */\r\ncontract ERC721Metadata is ERC721Basic {\r\n  function name() external view returns (string _name);\r\n  function symbol() external view returns (string _symbol);\r\n  function tokenURI(uint256 _tokenId) public view returns (string);\r\n}\r\n\r\n\r\n/**\r\n * @title ERC-721 Non-Fungible Token Standard, full implementation interface\r\n * @dev See https://github.com/ethereum/EIPs/blob/master/EIPS/eip-721.md\r\n */\r\ncontract ERC721 is ERC721Basic, ERC721Enumerable, ERC721Metadata {\r\n}\r\n\r\n////// contracts/LandResourceV6.sol\r\n/* pragma solidity ^0.4.24; */\r\n\r\n/* import \"openzeppelin-solidity/contracts/math/SafeMath.sol\"; */\r\n/* import \"openzeppelin-solidity/contracts/token/ERC721/ERC721.sol\"; */\r\n/* import \"openzeppelin-solidity/contracts/introspection/SupportsInterfaceWithLookup.sol\"; */\r\n/* import \"@evolutionland/common/contracts/interfaces/IMintableERC20.sol\"; */\r\n/* import \"@evolutionland/common/contracts/interfaces/ISettingsRegistry.sol\"; */\r\n/* import \"@evolutionland/common/contracts/DSAuth.sol\"; */\r\n/* import \"@evolutionland/common/contracts/interfaces/IInterstellarEncoder.sol\"; */\r\n/* import \"@evolutionland/common/contracts/interfaces/ITokenUse.sol\"; */\r\n/* import \"@evolutionland/common/contracts/interfaces/IActivity.sol\"; */\r\n/* import \"@evolutionland/common/contracts/interfaces/IMinerObject.sol\"; */\r\n/* import \"./interfaces/ILandBase.sol\"; */\r\n/* import \"./interfaces/ILandBaseExt.sol\"; */\r\n/* import \"./interfaces/IMetaDataTeller.sol\"; */\r\n\r\n// DSAuth see https://github.com/evolutionlandorg/common-contracts/blob/2873a4f8f970bd442ffcf9c6ae63b3dc79e743db/contracts/DSAuth.sol#L40\r\ncontract LandResourceV6 is SupportsInterfaceWithLookup, DSAuth, IActivity {\r\n\tusing SafeMath for *;\r\n\r\n\t// For every seconds, the speed will decrease by current speed multiplying (DENOMINATOR_in_seconds - seconds) / DENOMINATOR_in_seconds\r\n\t// resource will decrease 1/10000 every day.\r\n\tuint256 public constant DENOMINATOR = 10000;\r\n\r\n\tuint256 public constant TOTAL_SECONDS = DENOMINATOR * (1 days);\r\n\r\n\tbool private singletonLock = false;\r\n\r\n\tISettingsRegistry public registry;\r\n\r\n\tuint256 public resourceReleaseStartTime;\r\n\r\n\t// TODO: move to global settings contract.\r\n\tuint256 public attenPerDay = 1;\r\n\tuint256 public recoverAttenPerDay = 20;\r\n\r\n\t// Struct for recording resouces on land which have already been pinged.\r\n\t// 金, Evolution Land Gold\r\n\t// 木, Evolution Land Wood\r\n\t// 水, Evolution Land Water\r\n\t// 火, Evolution Land fire\r\n\t// 土, Evolution Land Silicon\r\n\tstruct ResourceMineState {\r\n\t\tmapping(address => uint256) mintedBalance;\r\n\t\tmapping(address => uint256[]) miners;\r\n\t\tmapping(address => uint256) totalMinerStrength;\r\n\t\tuint256 lastUpdateSpeedInSeconds;\r\n\t\tuint256 lastDestoryAttenInSeconds;\r\n\t\tuint256 industryIndex;\r\n\t\tuint128 lastUpdateTime;\r\n\t\tuint64 totalMiners;\r\n\t\tuint64 maxMiners;\r\n\t}\r\n\r\n\tstruct MinerStatus {\r\n\t\tuint256 landTokenId;\r\n\t\taddress resource;\r\n\t\tuint64 indexInResource;\r\n\t}\r\n\r\n\tmapping(uint256 => ResourceMineState) public land2ResourceMineState;\r\n\tmapping(uint256 => MinerStatus) public miner2Index;\r\n\r\n\t/*\r\n\t *  Event\r\n\t */\r\n\r\n\tevent StartMining(\r\n\t\tuint256 minerTokenId,\r\n\t\tuint256 landId,\r\n\t\taddress _resource,\r\n\t\tuint256 strength\r\n\t);\r\n\tevent StopMining(\r\n\t\tuint256 minerTokenId,\r\n\t\tuint256 landId,\r\n\t\taddress _resource,\r\n\t\tuint256 strength\r\n\t);\r\n\tevent ResourceClaimed(\r\n\t\taddress owner,\r\n\t\tuint256 landTokenId,\r\n\t\tuint256 goldBalance,\r\n\t\tuint256 woodBalance,\r\n\t\tuint256 waterBalance,\r\n\t\tuint256 fireBalance,\r\n\t\tuint256 soilBalance\r\n\t);\r\n\tevent UpdateMiningStrengthWhenStop(\r\n\t\tuint256 apostleTokenId,\r\n\t\tuint256 landId,\r\n\t\tuint256 strength\r\n\t);\r\n\tevent UpdateMiningStrengthWhenStart(\r\n\t\tuint256 apostleTokenId,\r\n\t\tuint256 landId,\r\n\t\tuint256 strength\r\n\t);\r\n\r\n\t// v5 add begin\r\n\tevent StartBarMining(\r\n\t\tuint256 barIndex,\r\n\t\tuint256 landId,\r\n\t\taddress resource,\r\n\t\tuint256 rate\r\n\t);\r\n\tevent StopBarMining(uint256 barIndex, uint256 landId, address rate);\r\n\tevent LandResourceClaimed(\r\n\t\taddress owner,\r\n\t\tuint256 landId,\r\n\t\tuint256 goldBalance,\r\n\t\tuint256 woodBalance,\r\n\t\tuint256 waterBalance,\r\n\t\tuint256 fireBalance,\r\n\t\tuint256 soilBalance\r\n\t);\r\n\tevent ItemResourceClaimed(\r\n\t\taddress owner,\r\n\t\taddress itemToken,\r\n\t\tuint256 itemTokenId,\r\n\t\tuint256 goldBalance,\r\n\t\tuint256 woodBalance,\r\n\t\tuint256 waterBalance,\r\n\t\tuint256 fireBalance,\r\n\t\tuint256 soilBalance\r\n\t);\r\n\r\n\t// land item bar\r\n\tevent Equip(\r\n\t\tuint256 indexed tokenId,\r\n\t\taddress resource,\r\n\t\tuint256 index,\r\n\t\taddress staker,\r\n\t\taddress token,\r\n\t\tuint256 id\r\n\t);\r\n\tevent Divest(\r\n\t\tuint256 indexed tokenId,\r\n\t\taddress resource,\r\n\t\tuint256 index,\r\n\t\taddress staker,\r\n\t\taddress token,\r\n\t\tuint256 id\r\n\t);\r\n\r\n    \tevent SetMaxLandBar(uint256 maxAmount);\r\n    \tevent SetMaxMiner(uint256 maxMiners);\r\n\r\n\t// 0x434f4e54524143545f4c414e445f424153450000000000000000000000000000\r\n\tbytes32 public constant CONTRACT_LAND_BASE = \"CONTRACT_LAND_BASE\";\r\n\r\n\t// 0x434f4e54524143545f474f4c445f45524332305f544f4b454e00000000000000\r\n\tbytes32 public constant CONTRACT_GOLD_ERC20_TOKEN =\r\n\t\t\"CONTRACT_GOLD_ERC20_TOKEN\";\r\n\r\n\t// 0x434f4e54524143545f574f4f445f45524332305f544f4b454e00000000000000\r\n\tbytes32 public constant CONTRACT_WOOD_ERC20_TOKEN =\r\n\t\t\"CONTRACT_WOOD_ERC20_TOKEN\";\r\n\r\n\t// 0x434f4e54524143545f57415445525f45524332305f544f4b454e000000000000\r\n\tbytes32 public constant CONTRACT_WATER_ERC20_TOKEN =\r\n\t\t\"CONTRACT_WATER_ERC20_TOKEN\";\r\n\r\n\t// 0x434f4e54524143545f464952455f45524332305f544f4b454e00000000000000\r\n\tbytes32 public constant CONTRACT_FIRE_ERC20_TOKEN =\r\n\t\t\"CONTRACT_FIRE_ERC20_TOKEN\";\r\n\r\n\t// 0x434f4e54524143545f534f494c5f45524332305f544f4b454e00000000000000\r\n\tbytes32 public constant CONTRACT_SOIL_ERC20_TOKEN =\r\n\t\t\"CONTRACT_SOIL_ERC20_TOKEN\";\r\n\r\n\t// 0x434f4e54524143545f494e5445525354454c4c41525f454e434f444552000000\r\n\tbytes32 public constant CONTRACT_INTERSTELLAR_ENCODER =\r\n\t\t\"CONTRACT_INTERSTELLAR_ENCODER\";\r\n\r\n\t// 0x434f4e54524143545f4f424a4543545f4f574e45525348495000000000000000\r\n\tbytes32 public constant CONTRACT_OBJECT_OWNERSHIP =\r\n\t\t\"CONTRACT_OBJECT_OWNERSHIP\";\r\n\r\n\t// 0x434f4e54524143545f544f4b454e5f5553450000000000000000000000000000\r\n\tbytes32 public constant CONTRACT_TOKEN_USE = \"CONTRACT_TOKEN_USE\";\r\n\r\n\t//0x4655524e4143455f4954454d5f4d494e455f4645450000000000000000000000\r\n\tbytes32 public constant FURNACE_ITEM_MINE_FEE = \"FURNACE_ITEM_MINE_FEE\";\r\n\r\n\t// 0x434f4e54524143545f4d455441444154415f54454c4c45520000000000000000\r\n\tbytes32 public constant CONTRACT_METADATA_TELLER =\r\n\t\t\"CONTRACT_METADATA_TELLER\";\r\n\r\n\t// 0x55494e545f4954454d4241525f50524f544543545f504552494f440000000000\r\n\tbytes32 public constant UINT_ITEMBAR_PROTECT_PERIOD =\r\n\t\t\"UINT_ITEMBAR_PROTECT_PERIOD\";\r\n\r\n\t// rate precision\r\n\tuint128 public constant RATE_PRECISION = 10**8;\r\n\r\n\tuint256 public maxMiners;\r\n\r\n\t// (itemTokenAddress => (itemTokenId => (resourceAddress => mined balance)))\r\n\tmapping(address => mapping(uint256 => mapping(address => uint256)))\r\n\t\tpublic itemMinedBalance;\r\n\r\n\t// (landTokenId => (resourceAddress => (landBarIndex => itemEnhancedRate)))\r\n\tmapping(uint256 => mapping(address => mapping(uint256 => uint256)))\r\n\t\tpublic land2BarRate;\r\n\r\n\t// land bar\r\n\tstruct Bar {\r\n\t\taddress staker;\r\n\t\taddress token;\r\n\t\tuint256 id;\r\n\t\taddress resource;\r\n\t}\r\n\r\n\t// bar status\r\n\tstruct Status {\r\n\t\taddress staker;\r\n\t\tuint256 tokenId;\r\n\t\tuint256 index;\r\n\t}\r\n\r\n\t// max land bar amount\r\n\tuint256 public maxAmount;\r\n\t// (landTokenId => (landBarIndex => BAR))\r\n\tmapping(uint256 => mapping(uint256 => Bar)) public landId2Bars;\r\n\t// (itemTokenAddress => (itemTokenId => STATUS))\r\n\tmapping(address => mapping(uint256 => Status)) public itemId2Status;\r\n\t// (itemTokenAddress => (itemTokenId => itemProtectPeriod))\r\n\tmapping(address => mapping(uint256 => uint256)) public protectPeriod;\r\n\t// v5 add end\r\n\r\n\t/*\r\n\t *  Modifiers\r\n\t */\r\n\tmodifier singletonLockCall() {\r\n\t\trequire(!singletonLock, \"Only can call once\");\r\n\t\t_;\r\n\t\tsingletonLock = true;\r\n\t}\r\n\r\n    \t// initializeContract be called by proxy contract\r\n    \t// see https://blog.openzeppelin.com/the-transparent-proxy-pattern/\r\n\tfunction initializeContract(\r\n\t\taddress _registry,\r\n\t\tuint256 _resourceReleaseStartTime\r\n\t) public singletonLockCall {\r\n        require(_registry!= address(0), \"_registry is a zero value\");\r\n\t\t// Ownable constructor\r\n\t\towner = msg.sender;\r\n\t\temit LogSetOwner(msg.sender);\r\n\r\n\t\tregistry = ISettingsRegistry(_registry);\r\n\r\n\t\tresourceReleaseStartTime = _resourceReleaseStartTime;\r\n\r\n        \t//see https://github.com/evolutionlandorg/common-contracts/blob/2873a4f8f970bd442ffcf9c6ae63b3dc79e743db/contracts/interfaces/IActivity.sol#L6\r\n\t\t_registerInterface(InterfaceId_IActivity);\r\n\r\n        \tmaxMiners = 5;\r\n        \tmaxAmount = 5;\r\n\t}\r\n\r\n\t// get amount of speed uint at this moment\r\n\tfunction _getReleaseSpeedInSeconds(uint256 _tokenId, uint256 _time)\r\n\t\tinternal\r\n\t\tview\r\n\t\treturns (uint256 currentSpeed)\r\n\t{\r\n\t\trequire(_time >= resourceReleaseStartTime, \"Should after release time\");\r\n\t\trequire(\r\n\t\t\t_time >= land2ResourceMineState[_tokenId].lastUpdateTime,\r\n\t\t\t\"Should after release last update time\"\r\n\t\t);\r\n\r\n\t\t// after 10000 days from start\r\n\t\t// the resource release speed decreases to 0\r\n\t\tif (TOTAL_SECONDS < _time - resourceReleaseStartTime) {\r\n\t\t\treturn 0;\r\n\t\t}\r\n\r\n\t\t// max amount of speed unit of _tokenId for now\r\n\t\t// suppose that speed_uint = 1 in this function\r\n\t\tuint256 availableSpeedInSeconds =\r\n\t\t\tTOTAL_SECONDS.sub(_time - resourceReleaseStartTime);\r\n\t\treturn availableSpeedInSeconds;\r\n\t\t// // time from last update\r\n\t\t// uint256 timeBetween =\r\n\t\t// \t_time - land2ResourceMineState[_tokenId].lastUpdateTime;\r\n\r\n\t\t// // the recover speed is 20/10000, 20 times.\r\n\t\t// // recoveryRate overall from lasUpdateTime til now + amount of speed uint at lastUpdateTime\r\n\t\t// uint256 nextSpeedInSeconds =\r\n\t\t// \tland2ResourceMineState[_tokenId].lastUpdateSpeedInSeconds +\r\n\t\t// \t\ttimeBetween *\r\n\t\t// \t\trecoverAttenPerDay;\r\n\t\t// // destroyRate overall from lasUpdateTime til now amount of speed uint at lastUpdateTime\r\n\t\t// uint256 destroyedSpeedInSeconds =\r\n\t\t// \ttimeBetween *\r\n\t\t// \t\tland2ResourceMineState[_tokenId].lastDestoryAttenInSeconds;\r\n\r\n\t\t// if (nextSpeedInSeconds < destroyedSpeedInSeconds) {\r\n\t\t// \tnextSpeedInSeconds = 0;\r\n\t\t// } else {\r\n\t\t// \tnextSpeedInSeconds = nextSpeedInSeconds - destroyedSpeedInSeconds;\r\n\t\t// }\r\n\r\n\t\t// if (nextSpeedInSeconds > availableSpeedInSeconds) {\r\n\t\t// \tnextSpeedInSeconds = availableSpeedInSeconds;\r\n\t\t// }\r\n\r\n\t\t// return nextSpeedInSeconds;\r\n\t}\r\n\r\n\tfunction getReleaseSpeed(\r\n\t\tuint256 _tokenId,\r\n\t\taddress _resource,\r\n\t\tuint256 _time\r\n\t) public view returns (uint256 currentSpeed) {\r\n\t\treturn\r\n\t\t\tILandBase(registry.addressOf(CONTRACT_LAND_BASE))\r\n\t\t\t\t.getResourceRate(_tokenId, _resource)\r\n\t\t\t\t.mul(_getReleaseSpeedInSeconds(_tokenId, _time))\r\n\t\t\t\t.mul(1 ether)\r\n\t\t\t\t.div(TOTAL_SECONDS);\r\n\t}\r\n\r\n\t// For every seconds, the speed will decrease by current speed multiplying (DENOMINATOR_in_seconds - seconds) / DENOMINATOR_in_seconds.\r\n\t// resource will decrease 1/10000 every day.\r\n    \t// `minableBalance` is an area of a trapezoid.\r\n    \t// The reason for dividing by `1 days` twice is that the definition of `getResourceRate` is the number of mines that can be mined per day.\r\n\tfunction _getMinableBalance(\r\n\t\tuint256 _tokenId,\r\n\t\taddress _resource,\r\n\t\tuint256 _currentTime,\r\n\t\tuint256 _lastUpdateTime\r\n\t) public view returns (uint256 minableBalance) {\r\n\t\tuint256 speed_in_current_period =\r\n\t\t\tILandBase(registry.addressOf(CONTRACT_LAND_BASE))\r\n\t\t\t\t.getResourceRate(_tokenId, _resource)\r\n\t\t\t\t.mul(\r\n\t\t\t\t_getReleaseSpeedInSeconds(\r\n\t\t\t\t\t_tokenId,\r\n\t\t\t\t\t((_currentTime + _lastUpdateTime) / 2)\r\n\t\t\t\t)\r\n\t\t\t)\r\n\t\t\t\t.mul(1 ether)\r\n\t\t\t\t.div(1 days)\r\n\t\t\t\t.div(TOTAL_SECONDS);\r\n\r\n\t\t// calculate the area of trapezoid\r\n\t\tminableBalance = speed_in_current_period.mul(\r\n\t\t\t_currentTime - _lastUpdateTime\r\n\t\t);\r\n\t}\r\n\r\n\tfunction _getMaxMineBalance(\r\n\t\tuint256 _tokenId,\r\n\t\taddress _resource,\r\n\t\tuint256 _currentTime,\r\n\t\tuint256 _lastUpdateTime\r\n\t) internal view returns (uint256) {\r\n\t\t// totalMinerStrength is in wei\r\n\t\treturn\r\n\t\t\tgetTotalMiningStrength(_tokenId, _resource)\r\n\t\t\t\t.mul(_currentTime - _lastUpdateTime)\r\n\t\t\t\t.div(1 days);\r\n\t}\r\n\r\n\tfunction setMaxMiners(uint256 _maxMiners) public auth {\r\n\t\trequire(_maxMiners > maxMiners, \"Land: INVALID_MAXMINERS\");\r\n\t\tmaxMiners = _maxMiners;\r\n        emit SetMaxMiner(maxMiners);\r\n\t}\r\n\r\n\tfunction mine(uint256 _landTokenId) public {\r\n\t\t_mineAllResource(\r\n\t\t\t_landTokenId,\r\n\t\t\tregistry.addressOf(CONTRACT_GOLD_ERC20_TOKEN),\r\n\t\t\tregistry.addressOf(CONTRACT_WOOD_ERC20_TOKEN),\r\n\t\t\tregistry.addressOf(CONTRACT_WATER_ERC20_TOKEN),\r\n\t\t\tregistry.addressOf(CONTRACT_FIRE_ERC20_TOKEN),\r\n\t\t\tregistry.addressOf(CONTRACT_SOIL_ERC20_TOKEN)\r\n\t\t);\r\n\t}\r\n\r\n\tfunction _mineAllResource(\r\n\t\tuint256 _landTokenId,\r\n\t\taddress _gold,\r\n\t\taddress _wood,\r\n\t\taddress _water,\r\n\t\taddress _fire,\r\n\t\taddress _soil\r\n\t) internal {\r\n\t\trequire(\r\n\t\t\tIInterstellarEncoder(\r\n\t\t\t\tregistry.addressOf(CONTRACT_INTERSTELLAR_ENCODER)\r\n\t\t\t)\r\n\t\t\t\t.getObjectClass(_landTokenId) == 1,\r\n\t\t\t\"Token must be land.\"\r\n\t\t);\r\n\r\n\t\t// v5 remove\r\n\t\t// if (land2ResourceMineState[_landTokenId].lastUpdateTime == 0) {\r\n\t\t// \tland2ResourceMineState[_landTokenId].lastUpdateTime = uint128(\r\n\t\t// \t\tresourceReleaseStartTime\r\n\t\t// \t);\r\n\t\t// \tland2ResourceMineState[_landTokenId]\r\n\t\t// \t\t.lastUpdateSpeedInSeconds = TOTAL_SECONDS;\r\n\t\t// }\r\n\r\n\t\t_mineResource(_landTokenId, _gold);\r\n\t\t_mineResource(_landTokenId, _wood);\r\n\t\t_mineResource(_landTokenId, _water);\r\n\t\t_mineResource(_landTokenId, _fire);\r\n\t\t_mineResource(_landTokenId, _soil);\r\n\r\n\t\t// v5 remove\r\n\t\t// land2ResourceMineState[_landTokenId]\r\n\t\t// \t.lastUpdateSpeedInSeconds = _getReleaseSpeedInSeconds(\r\n\t\t// \t_landTokenId,\r\n\t\t// \tnow\r\n\t\t// );\r\n\r\n\t\tland2ResourceMineState[_landTokenId].lastUpdateTime = uint128(now);\r\n\t}\r\n\r\n\tfunction _distribution(\r\n\t\tuint256 _landId,\r\n\t\taddress _resource,\r\n\t\tuint256 minedBalance,\r\n\t\tuint256 barsRate\r\n\t) internal returns (uint256) {\r\n\t\tuint256 landBalance =\r\n\t\t\tminedBalance.mul(RATE_PRECISION).div(barsRate.add(RATE_PRECISION));\r\n\t\tuint256 barsBalance = minedBalance.sub(landBalance);\r\n\t\tfor (uint256 i = 0; i < maxAmount; i++) {\r\n\t\t\t(address itemToken, uint256 itemId, address resouce) =\r\n\t\t\t\tgetBarItem(_landId, i);\r\n\t\t\tif (itemToken != address(0) && resouce == _resource) {\r\n\t\t\t\tuint256 barBalance =\r\n\t\t\t\t\tbarsBalance.mul(getBarRate(_landId, _resource, i)).div(\r\n\t\t\t\t\t\tbarsRate\r\n\t\t\t\t\t);\r\n\t\t\t\t(barBalance, landBalance) = _payFee(barBalance, landBalance);\r\n\t\t\t\titemMinedBalance[itemToken][itemId][\r\n\t\t\t\t\t_resource\r\n\t\t\t\t] = getItemMinedBalance(itemToken, itemId, _resource).add(\r\n\t\t\t\t\tbarBalance\r\n\t\t\t\t);\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn landBalance;\r\n\t}\r\n\r\n\tfunction _payFee(uint256 barBalance, uint256 landBalance)\r\n\t\tinternal\r\n\t\tview\r\n\t\treturns (uint256, uint256)\r\n\t{\r\n\t\tuint256 fee =\r\n\t\t\tbarBalance.mul(registry.uintOf(FURNACE_ITEM_MINE_FEE)).div(\r\n\t\t\t\tRATE_PRECISION\r\n\t\t\t);\r\n\t\tbarBalance = barBalance.sub(fee);\r\n\t\tlandBalance = landBalance.add(fee);\r\n\t\treturn (barBalance, landBalance);\r\n\t}\r\n\r\n\tfunction _mineResource(uint256 _landId, address _resource) internal {\r\n\t\t// the longest seconds to zero speed.\r\n\t\tif (getLandMiningStrength(_landId, _resource) == 0) {\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tuint256 minedBalance = _calculateMinedBalance(_landId, _resource, now);\r\n\t\tif (minedBalance == 0) {\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tuint256 barsRate = getBarsRate(_landId, _resource);\r\n\t\tuint256 landBalance = minedBalance;\r\n\t\tif (barsRate > 0) {\r\n\t\t\t// V5 yeild distribution\r\n\t\t\tlandBalance = _distribution(\r\n\t\t\t\t_landId,\r\n\t\t\t\t_resource,\r\n\t\t\t\tminedBalance,\r\n\t\t\t\tbarsRate\r\n\t\t\t);\r\n\t\t}\r\n\t\tland2ResourceMineState[_landId].mintedBalance[\r\n\t\t\t_resource\r\n\t\t] = getLandMinedBalance(_landId, _resource).add(landBalance);\r\n\t}\r\n\r\n\tfunction _calculateMinedBalance(\r\n\t\tuint256 _landTokenId,\r\n\t\taddress _resourceToken,\r\n\t\tuint256 _currentTime\r\n\t) internal view returns (uint256) {\r\n\t\tuint256 currentTime = _currentTime;\r\n\r\n\t\tuint256 minedBalance;\r\n\t\tuint256 minableBalance;\r\n\t\tif (currentTime > (resourceReleaseStartTime + TOTAL_SECONDS)) {\r\n\t\t\tcurrentTime = (resourceReleaseStartTime + TOTAL_SECONDS);\r\n\t\t}\r\n\r\n\t\tuint256 lastUpdateTime =\r\n\t\t\tland2ResourceMineState[_landTokenId].lastUpdateTime;\r\n\t\trequire(currentTime >= lastUpdateTime, \"Land: INVALID_TIMESTAMP\");\r\n\r\n\t\tif (lastUpdateTime >= (resourceReleaseStartTime + TOTAL_SECONDS)) {\r\n\t\t\tminedBalance = 0;\r\n\t\t\tminableBalance = 0;\r\n\t\t} else {\r\n\t\t\tminedBalance = _getMaxMineBalance(\r\n\t\t\t\t_landTokenId,\r\n\t\t\t\t_resourceToken,\r\n\t\t\t\tcurrentTime,\r\n\t\t\t\tlastUpdateTime\r\n\t\t\t);\r\n\t\t\tminableBalance = _getMinableBalance(\r\n\t\t\t\t_landTokenId,\r\n\t\t\t\t_resourceToken,\r\n\t\t\t\tcurrentTime,\r\n\t\t\t\tlastUpdateTime\r\n\t\t\t);\r\n\t\t}\r\n\r\n\t\tif (minedBalance > minableBalance) {\r\n\t\t\tminedBalance = minableBalance;\r\n\t\t} \r\n\r\n\t\treturn minedBalance;\r\n\t}\r\n\r\n\t// v5 remove\r\n\t// function claimAllResource(uint256 _landTokenId) public {\r\n\t// \trequire(\r\n\t// \t\tmsg.sender == ownership.ownerOf(_landTokenId),\r\n\t// \t\t\"Must be the owner of the land\"\r\n\t// \t);\r\n\r\n\t// \t_mineAllResource(_landTokenId, gold, wood, water, fire, soil);\r\n\r\n\t// \tuint256 goldBalance;\r\n\t// \tuint256 woodBalance;\r\n\t// \tuint256 waterBalance;\r\n\t// \tuint256 fireBalance;\r\n\t// \tuint256 soilBalance;\r\n\r\n\t// \tif (land2ResourceMineState[_landTokenId].mintedBalance[gold] > 0) {\r\n\t// \t\tgoldBalance = land2ResourceMineState[_landTokenId].mintedBalance[\r\n\t// \t\t\tgold\r\n\t// \t\t];\r\n\t// \t\tIMintableERC20(gold).mint(msg.sender, goldBalance);\r\n\t// \t\tland2ResourceMineState[_landTokenId].mintedBalance[gold] = 0;\r\n\t// \t}\r\n\r\n\t// \tif (land2ResourceMineState[_landTokenId].mintedBalance[wood] > 0) {\r\n\t// \t\twoodBalance = land2ResourceMineState[_landTokenId].mintedBalance[\r\n\t// \t\t\twood\r\n\t// \t\t];\r\n\t// \t\tIMintableERC20(wood).mint(msg.sender, woodBalance);\r\n\t// \t\tland2ResourceMineState[_landTokenId].mintedBalance[wood] = 0;\r\n\t// \t}\r\n\r\n\t// \tif (land2ResourceMineState[_landTokenId].mintedBalance[water] > 0) {\r\n\t// \t\twaterBalance = land2ResourceMineState[_landTokenId].mintedBalance[\r\n\t// \t\t\twater\r\n\t// \t\t];\r\n\t// \t\tIMintableERC20(water).mint(msg.sender, waterBalance);\r\n\t// \t\tland2ResourceMineState[_landTokenId].mintedBalance[water] = 0;\r\n\t// \t}\r\n\r\n\t// \tif (land2ResourceMineState[_landTokenId].mintedBalance[fire] > 0) {\r\n\t// \t\tfireBalance = land2ResourceMineState[_landTokenId].mintedBalance[\r\n\t// \t\t\tfire\r\n\t// \t\t];\r\n\t// \t\tIMintableERC20(fire).mint(msg.sender, fireBalance);\r\n\t// \t\tland2ResourceMineState[_landTokenId].mintedBalance[fire] = 0;\r\n\t// \t}\r\n\r\n\t// \tif (land2ResourceMineState[_landTokenId].mintedBalance[soil] > 0) {\r\n\t// \t\tsoilBalance = land2ResourceMineState[_landTokenId].mintedBalance[\r\n\t// \t\t\tsoil\r\n\t// \t\t];\r\n\t// \t\tIMintableERC20(soil).mint(msg.sender, soilBalance);\r\n\t// \t\tland2ResourceMineState[_landTokenId].mintedBalance[soil] = 0;\r\n\t// \t}\r\n\r\n\t// \temit ResourceClaimed(\r\n\t// \t\tmsg.sender,\r\n\t// \t\t_landTokenId,\r\n\t// \t\tgoldBalance,\r\n\t// \t\twoodBalance,\r\n\t// \t\twaterBalance,\r\n\t// \t\tfireBalance,\r\n\t// \t\tsoilBalance\r\n\t// \t);\r\n\t// }\r\n\r\n\t// both for own _tokenId or hired one\r\n\tfunction startMining(\r\n\t\tuint256 _tokenId,\r\n\t\tuint256 _landTokenId,\r\n\t\taddress _resource\r\n\t) public {\r\n\t\t// require the permission from land owner;\r\n\t\trequire(\r\n\t\t\tmsg.sender ==\r\n\t\t\t\tERC721(registry.addressOf(CONTRACT_OBJECT_OWNERSHIP)).ownerOf(\r\n\t\t\t\t\t_landTokenId\r\n\t\t\t\t),\r\n\t\t\t\"Must be the owner of the land\"\r\n\t\t);\r\n\r\n\t\t// make sure that _tokenId won't be used repeatedly\r\n\t\trequire(miner2Index[_tokenId].landTokenId == 0);\r\n\r\n\t\tITokenUse(registry.addressOf(CONTRACT_TOKEN_USE)).addActivity(\r\n\t\t\t_tokenId,\r\n\t\t\tmsg.sender,\r\n\t\t\t0\r\n\t\t);\r\n\r\n\t\t// update status!\r\n\t\tmine(_landTokenId);\r\n\r\n\t\tuint256 _index =\r\n\t\t\tland2ResourceMineState[_landTokenId].miners[_resource].length;\r\n\r\n\t\tland2ResourceMineState[_landTokenId].totalMiners += 1;\r\n\r\n\t\t// v5 remove\r\n\t\t// if (land2ResourceMineState[_landTokenId].maxMiners == 0) {\r\n\t\t// \tland2ResourceMineState[_landTokenId].maxMiners = 5;\r\n\t\t// }\r\n\r\n\t\trequire(\r\n\t\t\tland2ResourceMineState[_landTokenId].totalMiners <= maxMiners,\r\n\t\t\t\"Land: EXCEED_MAXAMOUNT\"\r\n\t\t);\r\n\r\n\t\taddress miner =\r\n\t\t\tIInterstellarEncoder(\r\n\t\t\t\tregistry.addressOf(CONTRACT_INTERSTELLAR_ENCODER)\r\n\t\t\t)\r\n\t\t\t\t.getObjectAddress(_tokenId);\r\n\t\tuint256 strength =\r\n\t\t\tIMinerObject(miner).strengthOf(_tokenId, _resource, _landTokenId);\r\n\r\n\t\tland2ResourceMineState[_landTokenId].miners[_resource].push(_tokenId);\r\n\t\tland2ResourceMineState[_landTokenId].totalMinerStrength[_resource] = land2ResourceMineState[_landTokenId].totalMinerStrength[_resource].add(strength);\r\n\r\n\t\tminer2Index[_tokenId] = MinerStatus({\r\n\t\t\tlandTokenId: _landTokenId,\r\n\t\t\tresource: _resource,\r\n\t\t\tindexInResource: uint64(_index)\r\n\t\t});\r\n\r\n\t\temit StartMining(_tokenId, _landTokenId, _resource, strength);\r\n\t}\r\n\r\n\tfunction batchStartMining(\r\n\t\tuint256[] _tokenIds,\r\n\t\tuint256[] _landTokenIds,\r\n\t\taddress[] _resources\r\n\t) external {\r\n\t\trequire(\r\n\t\t\t_tokenIds.length == _landTokenIds.length &&\r\n\t\t\t\t_landTokenIds.length == _resources.length,\r\n\t\t\t\"input error\"\r\n\t\t);\r\n\t\tuint256 length = _tokenIds.length;\r\n\r\n\t\tfor (uint256 i = 0; i < length; i++) {\r\n\t\t\tstartMining(_tokenIds[i], _landTokenIds[i], _resources[i]);\r\n\t\t}\r\n\t}\r\n\r\n\tfunction batchClaimLandResource(uint256[] _landTokenIds) external {\r\n\t\tuint256 length = _landTokenIds.length;\r\n\r\n\t\tfor (uint256 i = 0; i < length; i++) {\r\n\t\t\tclaimLandResource(_landTokenIds[i]);\r\n\t\t}\r\n\t}\r\n\r\n\t// Only trigger from Token Activity.\r\n\tfunction activityStopped(uint256 _tokenId) public auth {\r\n\t\t_stopMining(_tokenId);\r\n\t}\r\n\r\n\tfunction stopMining(uint256 _tokenId) public {\r\n\t\tITokenUse(registry.addressOf(CONTRACT_TOKEN_USE)).removeActivity(\r\n\t\t\t_tokenId,\r\n\t\t\tmsg.sender\r\n\t\t);\r\n\t}\r\n\r\n\tfunction _stopMining(uint256 _tokenId) internal {\r\n\t\t// remove the miner from land2ResourceMineState;\r\n\t\tuint64 minerIndex = miner2Index[_tokenId].indexInResource;\r\n\t\taddress resource = miner2Index[_tokenId].resource;\r\n\t\tuint256 landTokenId = miner2Index[_tokenId].landTokenId;\r\n\r\n\t\t// update status!\r\n\t\tmine(landTokenId);\r\n\r\n\t\tuint64 lastMinerIndex =\r\n\t\t\tuint64(\r\n\t\t\t\tland2ResourceMineState[landTokenId].miners[resource].length.sub(\r\n\t\t\t\t\t1\r\n\t\t\t\t)\r\n\t\t\t);\r\n\t\tuint256 lastMiner =\r\n\t\t\tland2ResourceMineState[landTokenId].miners[resource][\r\n\t\t\t\tlastMinerIndex\r\n\t\t\t];\r\n\r\n\t\tland2ResourceMineState[landTokenId].miners[resource][\r\n\t\t\tminerIndex\r\n\t\t] = lastMiner;\r\n\t\tland2ResourceMineState[landTokenId].miners[resource][\r\n\t\t\tlastMinerIndex\r\n\t\t] = 0;\r\n\r\n\t\tland2ResourceMineState[landTokenId].miners[resource].length = land2ResourceMineState[landTokenId].miners[resource].length.sub(1);\r\n\t\tminer2Index[lastMiner].indexInResource = minerIndex;\r\n\r\n\t\tland2ResourceMineState[landTokenId].totalMiners -= 1;\r\n\r\n\t\taddress miner =\r\n\t\t\tIInterstellarEncoder(\r\n\t\t\t\tregistry.addressOf(CONTRACT_INTERSTELLAR_ENCODER)\r\n\t\t\t)\r\n\t\t\t\t.getObjectAddress(_tokenId);\r\n\t\tuint256 strength =\r\n\t\t\tIMinerObject(miner).strengthOf(_tokenId, resource, landTokenId);\r\n\r\n\t\t// for backward compatibility\r\n\t\t// if strength can fluctuate some time in the future\r\n\t\tif (\r\n\t\t\tland2ResourceMineState[landTokenId].totalMinerStrength[resource] !=\r\n\t\t\t0\r\n\t\t) {\r\n\t\t\tif (\r\n\t\t\t\tland2ResourceMineState[landTokenId].totalMinerStrength[\r\n\t\t\t\t\tresource\r\n\t\t\t\t] > strength\r\n\t\t\t) {\r\n\t\t\t\tland2ResourceMineState[landTokenId].totalMinerStrength[\r\n\t\t\t\t\tresource\r\n\t\t\t\t] = land2ResourceMineState[landTokenId].totalMinerStrength[\r\n\t\t\t\t\tresource\r\n\t\t\t\t]\r\n\t\t\t\t\t.sub(strength);\r\n\t\t\t} else {\r\n\t\t\t\tland2ResourceMineState[landTokenId].totalMinerStrength[\r\n\t\t\t\t\tresource\r\n\t\t\t\t] = 0;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tif (land2ResourceMineState[landTokenId].totalMiners == 0) {\r\n\t\t\tland2ResourceMineState[landTokenId].totalMinerStrength[\r\n\t\t\t\tresource\r\n\t\t\t] = 0;\r\n\t\t}\r\n\r\n\t\tdelete miner2Index[_tokenId];\r\n\r\n\t\temit StopMining(_tokenId, landTokenId, resource, strength);\r\n\t}\r\n\r\n\t// v5 remove\r\n\t// function getMinerOnLand(\r\n\t// \tuint256 _landTokenId,\r\n\t// \taddress _resourceToken,\r\n\t// \tuint256 _index\r\n\t// ) public view returns (uint256) {\r\n\t// \treturn\r\n\t// \t\tland2ResourceMineState[_landTokenId].miners[_resourceToken][_index];\r\n\t// }\r\n\r\n\t// function getTotalMiningStrength(\r\n\t// \tuint256 _landTokenId,\r\n\t// \taddress _resourceToken\r\n\t// ) public view returns (uint256) {\r\n\t// \treturn\r\n\t// \t\tland2ResourceMineState[_landTokenId].totalMinerStrength[\r\n\t// \t\t\t_resourceToken\r\n\t// \t\t];\r\n\t// }\r\n\r\n\t// function availableResources(\r\n\t// \tuint256 _landTokenId,\r\n\t// \taddress[5] _resourceTokens\r\n\t// )\r\n\t// \tpublic\r\n\t// \tview\r\n\t// \treturns (\r\n\t// \t\tuint256,\r\n\t// \t\tuint256,\r\n\t// \t\tuint256,\r\n\t// \t\tuint256,\r\n\t// \t\tuint256\r\n\t// \t)\r\n\t// {\r\n\t// \tuint256 availableGold =\r\n\t// \t\t_calculateMinedBalance(_landTokenId, _resourceTokens[0], now) +\r\n\t// \t\t\tland2ResourceMineState[_landTokenId].mintedBalance[\r\n\t// \t\t\t\t_resourceTokens[0]\r\n\t// \t\t\t];\r\n\t// \tuint256 availableWood =\r\n\t// \t\t_calculateMinedBalance(_landTokenId, _resourceTokens[1], now) +\r\n\t// \t\t\tland2ResourceMineState[_landTokenId].mintedBalance[\r\n\t// \t\t\t\t_resourceTokens[1]\r\n\t// \t\t\t];\r\n\t// \tuint256 availableWater =\r\n\t// \t\t_calculateMinedBalance(_landTokenId, _resourceTokens[2], now) +\r\n\t// \t\t\tland2ResourceMineState[_landTokenId].mintedBalance[\r\n\t// \t\t\t\t_resourceTokens[2]\r\n\t// \t\t\t];\r\n\t// \tuint256 availableFire =\r\n\t// \t\t_calculateMinedBalance(_landTokenId, _resourceTokens[3], now) +\r\n\t// \t\t\tland2ResourceMineState[_landTokenId].mintedBalance[\r\n\t// \t\t\t\t_resourceTokens[3]\r\n\t// \t\t\t];\r\n\t// \tuint256 availableSoil =\r\n\t// \t\t_calculateMinedBalance(_landTokenId, _resourceTokens[4], now) +\r\n\t// \t\t\tland2ResourceMineState[_landTokenId].mintedBalance[\r\n\t// \t\t\t\t_resourceTokens[4]\r\n\t// \t\t\t];\r\n\r\n\t// \treturn (\r\n\t// \t\tavailableGold,\r\n\t// \t\tavailableWood,\r\n\t// \t\tavailableWater,\r\n\t// \t\tavailableFire,\r\n\t// \t\tavailableSoil\r\n\t// \t);\r\n\t// }\r\n\r\n\t// V5 remove\r\n\t// function mintedBalanceOnLand(uint256 _landTokenId, address _resourceToken) public view returns (uint256) {\r\n\t//     return land2ResourceMineState[_landTokenId].mintedBalance[_resourceToken];\r\n\t// }\r\n\r\n\t// function landWorkingOn(uint256 _apostleTokenId) public view returns (uint256 landTokenId) {\r\n\t//     landTokenId = miner2Index[_apostleTokenId].landTokenId;\r\n\t// }\r\n\r\n\tfunction _updateMinerStrength(uint256 _apostleTokenId, bool _isStop)\r\n\t\tinternal\r\n\t\treturns (uint256, uint256)\r\n\t{\r\n\t\t// require that this apostle\r\n\t\tuint256 landTokenId = landWorkingOn(_apostleTokenId);\r\n\t\trequire(landTokenId != 0, \"this apostle is not mining.\");\r\n\r\n\t\taddress resource = miner2Index[_apostleTokenId].resource;\r\n\r\n\t\taddress miner =\r\n\t\t\tIInterstellarEncoder(\r\n\t\t\t\tregistry.addressOf(CONTRACT_INTERSTELLAR_ENCODER)\r\n\t\t\t)\r\n\t\t\t\t.getObjectAddress(_apostleTokenId);\r\n\t\tuint256 strength =\r\n\t\t\tIMinerObject(miner).strengthOf(\r\n\t\t\t\t_apostleTokenId,\r\n\t\t\t\tresource,\r\n\t\t\t\tlandTokenId\r\n\t\t\t);\r\n\r\n\t\tmine(landTokenId);\r\n\r\n\t\tif (_isStop) {\r\n\t\t\tland2ResourceMineState[landTokenId].totalMinerStrength[\r\n\t\t\t\tresource\r\n\t\t\t] = land2ResourceMineState[landTokenId].totalMinerStrength[resource]\r\n\t\t\t\t.sub(strength);\r\n\t\t} else {\r\n\t\t\tland2ResourceMineState[landTokenId].totalMinerStrength[resource] = land2ResourceMineState[landTokenId].totalMinerStrength[resource].add(strength);\r\n\t\t}\r\n\r\n\t\treturn (landTokenId, strength);\r\n\t}\r\n\r\n\t// when a mirrorToken or a pet has tied to apostle\r\n\t// we need to update status and remove this apostle from mining list first\r\n\t// open authority to PetBase\r\n\t// can only be called by PetBase\r\n\tfunction updateMinerStrengthWhenStop(uint256 _apostleTokenId) public auth {\r\n\t\tuint256 landTokenId;\r\n\t\tuint256 strength;\r\n\t\t(landTokenId, strength) = _updateMinerStrength(_apostleTokenId, true);\r\n\t\t// _isStop == true - minus strength\r\n\t\t// _isStop == false - add strength\r\n\t\temit UpdateMiningStrengthWhenStop(\r\n\t\t\t_apostleTokenId,\r\n\t\t\tlandTokenId,\r\n\t\t\tstrength\r\n\t\t);\r\n\t}\r\n\r\n\tfunction updateMinerStrengthWhenStart(uint256 _apostleTokenId) public auth {\r\n\t\tuint256 landTokenId;\r\n\t\tuint256 strength;\r\n\t\t(landTokenId, strength) = _updateMinerStrength(_apostleTokenId, false);\r\n\t\t// _isStop == true - minus strength\r\n\t\t// _isStop == false - add strength\r\n\t\temit UpdateMiningStrengthWhenStart(\r\n\t\t\t_apostleTokenId,\r\n\t\t\tlandTokenId,\r\n\t\t\tstrength\r\n\t\t);\r\n\t}\r\n\r\n\t// V5 add\r\n\tfunction getLandMinedBalance(uint256 _landId, address _resource)\r\n\t\tpublic\r\n\t\tview\r\n\t\treturns (uint256)\r\n\t{\r\n\t\treturn land2ResourceMineState[_landId].mintedBalance[_resource];\r\n\t}\r\n\r\n\tfunction getItemMinedBalance(\r\n\t\taddress _itemToken,\r\n\t\tuint256 _itemId,\r\n\t\taddress _resource\r\n\t) public view returns (uint256) {\r\n\t\treturn itemMinedBalance[_itemToken][_itemId][_resource];\r\n\t}\r\n\r\n\tfunction getLandMiningStrength(uint256 _landId, address _resource)\r\n\t\tpublic\r\n\t\tview\r\n\t\treturns (uint256)\r\n\t{\r\n\t\treturn land2ResourceMineState[_landId].totalMinerStrength[_resource];\r\n\t}\r\n\r\n\tfunction getBarMiningStrength(\r\n\t\tuint256 _landId,\r\n\t\taddress _resource,\r\n\t\tuint256 _index\r\n\t) public view returns (uint256) {\r\n\t\treturn\r\n\t\t\tgetLandMiningStrength(_landId, _resource)\r\n\t\t\t\t.mul(getBarRate(_landId, _resource, _index))\r\n\t\t\t\t.div(RATE_PRECISION);\r\n\t}\r\n\r\n\tfunction getBarRate(\r\n\t\tuint256 _landId,\r\n\t\taddress _resource,\r\n\t\tuint256 _index\r\n\t) public view returns (uint256) {\r\n\t\treturn land2BarRate[_landId][_resource][_index];\r\n\t}\r\n\r\n\tfunction getBarsRate(uint256 _landId, address _resource)\r\n\t\tpublic\r\n\t\tview\r\n\t\treturns (uint256 barsRate)\r\n\t{\r\n\t\tfor (uint256 i = 0; i < maxAmount; i++) {\r\n\t\t\tbarsRate = barsRate.add(getBarRate(_landId, _resource, i));\r\n\t\t}\r\n\t}\r\n\r\n\tfunction getBarsMiningStrength(uint256 _landId, address _resource)\r\n\t\tpublic\r\n\t\tview\r\n\t\treturns (uint256 barsMiningStrength)\r\n\t{\r\n\t\treturn\r\n\t\t\tgetLandMiningStrength(_landId, _resource)\r\n\t\t\t\t.mul(getBarsRate(_landId, _resource))\r\n\t\t\t\t.div(RATE_PRECISION);\r\n\t}\r\n\r\n\tfunction getTotalMiningStrength(uint256 _landId, address _resource)\r\n\t\tpublic\r\n\t\tview\r\n\t\treturns (uint256)\r\n\t{\r\n\t\treturn\r\n\t\t\tgetLandMiningStrength(_landId, _resource).add(\r\n\t\t\t\tgetBarsMiningStrength(_landId, _resource)\r\n\t\t\t);\r\n\t}\r\n\r\n\tfunction getMinerOnLand(\r\n\t\tuint256 _landId,\r\n\t\taddress _resource,\r\n\t\tuint256 _index\r\n\t) public view returns (uint256) {\r\n\t\treturn land2ResourceMineState[_landId].miners[_resource][_index];\r\n\t}\r\n\r\n\tfunction landWorkingOn(uint256 _apostleTokenId)\r\n\t\tpublic\r\n\t\tview\r\n\t\treturns (uint256 landId)\r\n\t{\r\n\t\tlandId = miner2Index[_apostleTokenId].landTokenId;\r\n\t}\r\n\r\n\tfunction _getBarRateByIndex(\r\n\t\tuint256 _landId,\r\n\t\taddress _resource,\r\n\t\tuint256 _index\r\n\t) internal view returns (uint256) {\r\n\t\treturn enhanceStrengthRateByIndex(_resource, _landId, _index);\r\n\t}\r\n\r\n\tfunction _startBarMining(\r\n\t\tuint256 _index,\r\n\t\tuint256 _landId,\r\n\t\taddress _resource\r\n\t) internal {\r\n\t\tuint256 rate = _getBarRateByIndex(_landId, _resource, _index);\r\n\t\tland2BarRate[_landId][_resource][_index] = rate;\r\n\t\temit StartBarMining(_index, _landId, _resource, rate);\r\n\t}\r\n\r\n\tfunction _stopBarMinig(\r\n\t\tuint256 _index,\r\n\t\tuint256 _landId,\r\n\t\taddress _resource\r\n\t) internal {\r\n\t\tdelete land2BarRate[_landId][_resource][_index];\r\n\t\temit StopBarMining(_index, _landId, _resource);\r\n\t}\r\n\r\n\tfunction _claimItemResource(\r\n\t\taddress _itemToken,\r\n\t\tuint256 _itemId,\r\n\t\taddress _resource\r\n\t) internal returns (uint256) {\r\n\t\tuint256 balance = getItemMinedBalance(_itemToken, _itemId, _resource);\r\n\t\tif (balance > 0) {\r\n\t\t\tIMintableERC20(_resource).mint(msg.sender, balance);\r\n\t\t\titemMinedBalance[_itemToken][_itemId][_resource] = 0;\r\n\t\t\treturn balance;\r\n\t\t} else {\r\n\t\t\treturn 0;\r\n\t\t}\r\n\t}\r\n\r\n\tfunction claimItemResource(address _itemToken, uint256 _itemId) public {\r\n\t\t(address staker, uint256 landId) = getLandIdByItem(_itemToken, _itemId);\r\n\t\tif (staker == address(0) && landId == 0) {\r\n\t\t\trequire(\r\n\t\t\t\tERC721(_itemToken).ownerOf(_itemId) == msg.sender,\r\n\t\t\t\t\"Land: ONLY_ITEM_OWNER\"\r\n\t\t\t);\r\n\t\t} else {\r\n\t\t\trequire(staker == msg.sender, \"Land: ONLY_ITEM_STAKER\");\r\n\t\t\tmine(landId);\r\n\t\t}\r\n\r\n\t\taddress gold = registry.addressOf(CONTRACT_GOLD_ERC20_TOKEN);\r\n\t\taddress wood = registry.addressOf(CONTRACT_WOOD_ERC20_TOKEN);\r\n\t\taddress water = registry.addressOf(CONTRACT_WATER_ERC20_TOKEN);\r\n\t\taddress fire = registry.addressOf(CONTRACT_FIRE_ERC20_TOKEN);\r\n\t\taddress soil = registry.addressOf(CONTRACT_SOIL_ERC20_TOKEN);\r\n\t\tuint256 goldBalance = _claimItemResource(_itemToken, _itemId, gold);\r\n\t\tuint256 woodBalance = _claimItemResource(_itemToken, _itemId, wood);\r\n\t\tuint256 waterBalance = _claimItemResource(_itemToken, _itemId, water);\r\n\t\tuint256 fireBalance = _claimItemResource(_itemToken, _itemId, fire);\r\n\t\tuint256 soilBalance = _claimItemResource(_itemToken, _itemId, soil);\r\n\r\n\t\temit ItemResourceClaimed(\r\n\t\t\tmsg.sender,\r\n\t\t\t_itemToken,\r\n\t\t\t_itemId,\r\n\t\t\tgoldBalance,\r\n\t\t\twoodBalance,\r\n\t\t\twaterBalance,\r\n\t\t\tfireBalance,\r\n\t\t\tsoilBalance\r\n\t\t);\r\n\t}\r\n\r\n\tfunction _claimLandResource(uint256 _landId, address _resource)\r\n\t\tinternal\r\n\t\treturns (uint256)\r\n\t{\r\n\t\tuint256 balance = getLandMinedBalance(_landId, _resource);\r\n\t\tif (balance > 0) {\r\n\t\t\tIMintableERC20(_resource).mint(msg.sender, balance);\r\n\t\t\tland2ResourceMineState[_landId].mintedBalance[_resource] = 0;\r\n\t\t\treturn balance;\r\n\t\t} else {\r\n\t\t\treturn 0;\r\n\t\t}\r\n\t}\r\n\r\n\tfunction claimLandResource(uint256 _landId) public {\r\n\t\trequire(\r\n\t\t\tmsg.sender ==\r\n\t\t\t\tERC721(registry.addressOf(CONTRACT_OBJECT_OWNERSHIP)).ownerOf(\r\n\t\t\t\t\t_landId\r\n\t\t\t\t),\r\n\t\t\t\"Land: ONLY_LANDER\"\r\n\t\t);\r\n\r\n\t\taddress gold = registry.addressOf(CONTRACT_GOLD_ERC20_TOKEN);\r\n\t\taddress wood = registry.addressOf(CONTRACT_WOOD_ERC20_TOKEN);\r\n\t\taddress water = registry.addressOf(CONTRACT_WATER_ERC20_TOKEN);\r\n\t\taddress fire = registry.addressOf(CONTRACT_FIRE_ERC20_TOKEN);\r\n\t\taddress soil = registry.addressOf(CONTRACT_SOIL_ERC20_TOKEN);\r\n\t\t_mineAllResource(_landId, gold, wood, water, fire, soil);\r\n\r\n\t\tuint256 goldBalance = _claimLandResource(_landId, gold);\r\n\t\tuint256 woodBalance = _claimLandResource(_landId, wood);\r\n\t\tuint256 waterBalance = _claimLandResource(_landId, water);\r\n\t\tuint256 fireBalance = _claimLandResource(_landId, fire);\r\n\t\tuint256 soilBalance = _claimLandResource(_landId, soil);\r\n\r\n\t\temit LandResourceClaimed(\r\n\t\t\tmsg.sender,\r\n\t\t\t_landId,\r\n\t\t\tgoldBalance,\r\n\t\t\twoodBalance,\r\n\t\t\twaterBalance,\r\n\t\t\tfireBalance,\r\n\t\t\tsoilBalance\r\n\t\t);\r\n\t}\r\n\r\n\tfunction _calculateResources(\r\n\t\taddress _itemToken,\r\n\t\tuint256 _itemId,\r\n\t\tuint256 _landId,\r\n\t\taddress _resource,\r\n\t\tuint256 _minedBalance\r\n\t) internal view returns (uint256 landBalance, uint256 barResource) {\r\n\t\tuint256 barsRate = getBarsRate(_landId, _resource);\r\n\t\t// V5 yeild distribution\r\n\t\tlandBalance = _minedBalance.mul(RATE_PRECISION).div(\r\n\t\t\tbarsRate.add(RATE_PRECISION)\r\n\t\t);\r\n\t\tif (barsRate > 0) {\r\n\t\t\tuint256 barsBalance = _minedBalance.sub(landBalance);\r\n\t\t\tfor (uint256 i = 0; i < maxAmount; i++) {\r\n\t\t\t\tuint256 barBalance =\r\n\t\t\t\t\tbarsBalance.mul(getBarRate(_landId, _resource, i)).div(\r\n\t\t\t\t\t\tbarsRate\r\n\t\t\t\t\t);\r\n\t\t\t\t(barBalance, landBalance) = _payFee(barBalance, landBalance);\r\n\t\t\t\t(address itemToken, uint256 itemId, ) = getBarItem(_landId, i);\r\n\t\t\t\tif (_itemId == itemId && _itemToken == itemToken) {\r\n\t\t\t\t\tbarResource = barResource.add(barBalance);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\tfunction availableLandResources(\r\n\t\tuint256 _landId,\r\n\t\taddress[] _resources\r\n\t) external view returns (uint256[] memory) {\r\n\t\tuint256[] memory availables = new uint256[](_resources.length);\r\n\t\tfor (uint256 i = 0; i < _resources.length; i++) {\r\n\t\t\tuint256 mined = _calculateMinedBalance(_landId, _resources[i], now);\r\n\t\t\t(uint256 available, ) =\r\n\t\t\t\t_calculateResources(\r\n\t\t\t\t\taddress(0),\r\n\t\t\t\t\t0,\r\n\t\t\t\t\t_landId,\r\n\t\t\t\t\t_resources[i],\r\n\t\t\t\t\tmined\r\n\t\t\t\t);\r\n\t\t\tavailables[i] = available.add(\r\n\t\t\t\tgetLandMinedBalance(_landId, _resources[i])\r\n\t\t\t);\r\n\t\t}\r\n\t\treturn availables;\r\n\t}\r\n\r\n\tfunction availableItemResources(\r\n\t\taddress _itemToken,\r\n\t\tuint256 _itemId,\r\n\t\taddress[] _resources\r\n\t) external view returns (uint256[] memory) {\r\n\t\tuint256[] memory availables = new uint256[](_resources.length);\r\n\t\tfor (uint256 i = 0; i < _resources.length; i++) {\r\n\t\t\t(address staker, uint256 landId) =\r\n\t\t\t\tgetLandIdByItem(_itemToken, _itemId);\r\n\t\t\tuint256 available = 0;\r\n\t\t\tif (staker != address(0) && landId != 0) {\r\n\t\t\t\tuint256 mined =\r\n\t\t\t\t\t_calculateMinedBalance(landId, _resources[i], now);\r\n\t\t\t\t(, uint256 availableItem) =\r\n\t\t\t\t\t_calculateResources(\r\n\t\t\t\t\t\t_itemToken,\r\n\t\t\t\t\t\t_itemId,\r\n\t\t\t\t\t\tlandId,\r\n\t\t\t\t\t\t_resources[i],\r\n\t\t\t\t\t\tmined\r\n\t\t\t\t\t);\r\n\t\t\t\tavailable = available.add(availableItem);\r\n\t\t\t}\r\n\t\t\tavailable = available.add(\r\n\t\t\t\tgetItemMinedBalance(_itemToken, _itemId, _resources[i])\r\n\t\t\t);\r\n\t\t\tavailables[i] = available;\r\n\t\t}\r\n\t\treturn availables;\r\n\t}\r\n\r\n\tfunction isNotProtect(address _token, uint256 _id)\r\n\t\tpublic\r\n\t\tview\r\n\t\treturns (bool)\r\n\t{\r\n\t\treturn protectPeriod[_token][_id] < now;\r\n\t}\r\n\r\n\tfunction getBarItem(uint256 _tokenId, uint256 _index)\r\n\t\tpublic\r\n\t\tview\r\n\t\treturns (\r\n\t\t\taddress,\r\n\t\t\tuint256,\r\n\t\t\taddress\r\n\t\t)\r\n\t{\r\n\t\trequire(_index < maxAmount, \"Furnace: INDEX_FORBIDDEN.\");\r\n\t\treturn (\r\n\t\t\tlandId2Bars[_tokenId][_index].token,\r\n\t\t\tlandId2Bars[_tokenId][_index].id,\r\n\t\t\tlandId2Bars[_tokenId][_index].resource\r\n\t\t);\r\n\t}\r\n\r\n\tfunction getLandIdByItem(address _item, uint256 _itemId)\r\n\t\tpublic\r\n\t\tview\r\n\t\treturns (address, uint256)\r\n\t{\r\n\t\treturn (\r\n\t\t\titemId2Status[_item][_itemId].staker,\r\n\t\t\titemId2Status[_item][_itemId].tokenId\r\n\t\t);\r\n\t}\r\n\r\n\t/**\r\n        @dev Equip function, A NFT can equip to EVO Bar (LandBar or ApostleBar).\r\n        @param _tokenId  Token Id which to be quiped.\r\n        @param _resource Which resouce appply to.\r\n        @param _index    Index of the Bar.\r\n        @param _token    Token address which to quip.\r\n        @param _id       Token Id which to quip.\r\n    \t*/\r\n\tfunction equip(\r\n\t\tuint256 _tokenId,\r\n\t\taddress _resource,\r\n\t\tuint256 _index,\r\n\t\taddress _token,\r\n\t\tuint256 _id\r\n\t) public {\r\n\t\t_equip(_tokenId, _resource, _index, _token, _id);\r\n\t}\r\n\r\n\tfunction _equip(\r\n\t\tuint256 _tokenId,\r\n\t\taddress _resource,\r\n\t\tuint256 _index,\r\n\t\taddress _token,\r\n\t\tuint256 _id\r\n\t) internal {\r\n\t\tbeforeEquip(_tokenId, _resource);\r\n\t\tIMetaDataTeller teller =\r\n\t\t\tIMetaDataTeller(registry.addressOf(CONTRACT_METADATA_TELLER));\r\n\t\tuint256 resourceId =\r\n\t\t\tILandBaseExt(registry.addressOf(CONTRACT_LAND_BASE))\r\n\t\t\t\t.resourceToken2RateAttrId(_resource);\r\n\t\trequire(resourceId > 0 && resourceId < 6, \"Furnace: INVALID_RESOURCE\");\r\n\t\trequire(\r\n\t\t\tIInterstellarEncoder(\r\n\t\t\t\tregistry.addressOf(CONTRACT_INTERSTELLAR_ENCODER)\r\n\t\t\t)\r\n\t\t\t\t.getObjectClass(_tokenId) == 1,\r\n\t\t\t\"Funace: ONLY_LAND\"\r\n\t\t);\r\n\t\t(uint16 objClassExt, uint16 class, uint16 grade) =\r\n\t\t\tteller.getMetaData(_token, _id);\r\n\t\trequire(objClassExt > 0, \"Furnace: PERMISSION\");\r\n\t\trequire(_index < maxAmount, \"Furnace: INDEX_FORBIDDEN\");\r\n\t\tBar storage bar = landId2Bars[_tokenId][_index];\r\n\t\tif (bar.token != address(0)) {\r\n\t\t\trequire(isNotProtect(bar.token, bar.id), \"Furnace: PROTECT_PERIOD\");\r\n\t\t\t(, uint16 originClass, uint16 originGrade) =\r\n\t\t\t\tteller.getMetaData(bar.token, bar.id);\r\n\t\t\trequire(\r\n\t\t\t\tclass > originClass ||\r\n\t\t\t\t\t(class == originClass && grade > originGrade) ||\r\n\t\t\t\t\tERC721(registry.addressOf(CONTRACT_OBJECT_OWNERSHIP))\r\n\t\t\t\t\t\t.ownerOf(_tokenId) ==\r\n\t\t\t\t\tmsg.sender,\r\n\t\t\t\t\"Furnace: FORBIDDEN\"\r\n\t\t\t);\r\n\t\t\t//TODO:: safe transfer\r\n\t\t\tERC721(bar.token).transferFrom(address(this), bar.staker, bar.id);\r\n\t\t}\r\n\t\tERC721(_token).transferFrom(msg.sender, address(this), _id);\r\n\t\tbar.staker = msg.sender;\r\n\t\tbar.token = _token;\r\n\t\tbar.id = _id;\r\n\t\tbar.resource = _resource;\r\n\t\titemId2Status[bar.token][bar.id] = Status({\r\n\t\t\tstaker: bar.staker,\r\n\t\t\ttokenId: _tokenId,\r\n\t\t\tindex: _index\r\n\t\t});\r\n\t\tif (isNotProtect(bar.token, bar.id)) {\r\n\t\t\tprotectPeriod[bar.token][bar.id] = _calculateProtectPeriod(class)\r\n\t\t\t\t.add(now);\r\n\t\t}\r\n\t\tafterEquiped(_index, _tokenId, _resource);\r\n\t\temit Equip(_tokenId, _resource, _index, bar.staker, bar.token, bar.id);\r\n\t}\r\n\r\n\tfunction _calculateProtectPeriod(\r\n\t\tuint16 _class\r\n\t) internal view returns (uint256) {\r\n\t\tuint256 baseProtectPeriod =\r\n\t\t\tregistry.uintOf(UINT_ITEMBAR_PROTECT_PERIOD);\r\n\t\treturn uint256(_class).mul(baseProtectPeriod);\r\n\t}\r\n\r\n\tfunction beforeEquip(uint256 _landTokenId, address _resource) internal {\r\n\t\tif (getLandMiningStrength(_landTokenId, _resource) > 0) {\r\n\t\t\tmine(_landTokenId);\r\n\t\t}\r\n\t}\r\n\r\n\tfunction afterEquiped(\r\n\t\tuint256 _index,\r\n\t\tuint256 _landTokenId,\r\n\t\taddress _resource\r\n\t) internal {\r\n\t\t_startBarMining(_index, _landTokenId, _resource);\r\n\t}\r\n\r\n\tfunction afterDivested(\r\n\t\tuint256 _index,\r\n\t\tuint256 _landTokenId,\r\n\t\taddress _resource\r\n\t) internal {\r\n\t\tif (getLandMiningStrength(_landTokenId, _resource) > 0) {\r\n\t\t\tmine(_landTokenId);\r\n\t\t}\r\n\t\t_stopBarMinig(_index, _landTokenId, _resource);\r\n\t}\r\n\r\n    \tfunction devestAndClaim(address _itemToken, uint256 _tokenId, uint256 _index) public {\r\n\t\tdivest(_tokenId, _index);\r\n\t\tclaimItemResource(_itemToken, _tokenId);\r\n    \t}\r\n\r\n\t/**\r\n        @dev Divest function, A NFT can Divest from EVO Bar (LandBar or ApostleBar).\r\n        @param _tokenId Token Id which to be unquiped.\r\n        @param _index   Index of the Bar.\r\n    \t*/\r\n\tfunction divest(uint256 _tokenId, uint256 _index) public {\r\n\t\t_divest(_tokenId, _index);\r\n\t}\r\n\r\n\tfunction _divest(uint256 _tokenId, uint256 _index) internal {\r\n\t\tBar memory bar = landId2Bars[_tokenId][_index];\r\n\t\trequire(bar.token != address(0), \"Furnace: EMPTY\");\r\n\t\trequire(bar.staker == msg.sender, \"Furnace: FORBIDDEN\");\r\n\t\tERC721(bar.token).transferFrom(address(this), bar.staker, bar.id);\r\n\t\tafterDivested(_index, _tokenId, bar.resource);\r\n\t\t//clean\r\n\t\tdelete itemId2Status[bar.token][bar.id];\r\n\t\tdelete landId2Bars[_tokenId][_index];\r\n\t\temit Divest(\r\n\t\t\t_tokenId,\r\n\t\t\tbar.resource,\r\n\t\t\t_index,\r\n\t\t\tbar.staker,\r\n\t\t\tbar.token,\r\n\t\t\tbar.id\r\n\t\t);\r\n\t}\r\n\r\n\tfunction setMaxAmount(uint256 _maxAmount) public auth {\r\n        require(_maxAmount > maxAmount, \"Furnace: INVALID_MAXAMOUNT\");\r\n        maxAmount = _maxAmount;\r\n        emit SetMaxLandBar(maxAmount);\r\n\t}\r\n\r\n\tfunction enhanceStrengthRateByIndex(\r\n\t\taddress _resource,\r\n\t\tuint256 _tokenId,\r\n\t\tuint256 _index\r\n\t) public view returns (uint256) {\r\n\t\tBar storage bar = landId2Bars[_tokenId][_index];\r\n\t\tif (bar.token == address(0)) {\r\n\t\t\treturn 0;\r\n\t\t}\r\n\t\tIMetaDataTeller teller =\r\n\t\t\tIMetaDataTeller(registry.addressOf(CONTRACT_METADATA_TELLER));\r\n\t\tuint256 resourceId =\r\n\t\t\tILandBaseExt(registry.addressOf(CONTRACT_LAND_BASE))\r\n\t\t\t\t.resourceToken2RateAttrId(_resource);\r\n\t\treturn teller.getRate(bar.token, bar.id, resourceId);\r\n\t}\r\n\r\n\tfunction enhanceStrengthRateOf(address _resource, uint256 _tokenId)\r\n\t\texternal\r\n\t\tview\r\n\t\treturns (uint256)\r\n\t{\r\n\t\tuint256 rate;\r\n\t\tfor (uint256 i = 0; i < maxAmount; i++) {\r\n\t\t\trate = rate.add(enhanceStrengthRateByIndex(_resource, _tokenId, i));\r\n\t\t}\r\n\t\treturn rate;\r\n\t}\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"_itemToken\",\"type\":\"address\"},{\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"devestAndClaim\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_landId\",\"type\":\"uint256\"},{\"name\":\"_resource\",\"type\":\"address\"}],\"name\":\"getBarsMiningStrength\",\"outputs\":[{\"name\":\"barsMiningStrength\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"resourceReleaseStartTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_apostleTokenId\",\"type\":\"uint256\"}],\"name\":\"updateMinerStrengthWhenStop\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"getBarItem\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_itemToken\",\"type\":\"address\"},{\"name\":\"_itemId\",\"type\":\"uint256\"}],\"name\":\"claimItemResource\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"owner_\",\"type\":\"address\"}],\"name\":\"setOwner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"InterfaceId_ERC165\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes4\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"CONTRACT_WATER_ERC20_TOKEN\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"CONTRACT_GOLD_ERC20_TOKEN\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"RATE_PRECISION\",\"outputs\":[{\"name\":\"\",\"type\":\"uint128\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"TOTAL_SECONDS\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_resource\",\"type\":\"address\"},{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"enhanceStrengthRateOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_landTokenIds\",\"type\":\"uint256[]\"}],\"name\":\"batchClaimLandResource\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"stopMining\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_apostleTokenId\",\"type\":\"uint256\"}],\"name\":\"landWorkingOn\",\"outputs\":[{\"name\":\"landId\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"divest\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_landId\",\"type\":\"uint256\"},{\"name\":\"_resources\",\"type\":\"address[]\"}],\"name\":\"availableLandResources\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_landTokenId\",\"type\":\"uint256\"}],\"name\":\"mine\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_maxAmount\",\"type\":\"uint256\"}],\"name\":\"setMaxAmount\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_landId\",\"type\":\"uint256\"},{\"name\":\"_resource\",\"type\":\"address\"}],\"name\":\"getLandMinedBalance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_item\",\"type\":\"address\"},{\"name\":\"_itemId\",\"type\":\"uint256\"}],\"name\":\"getLandIdByItem\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"name\":\"_landTokenId\",\"type\":\"uint256\"},{\"name\":\"_resource\",\"type\":\"address\"}],\"name\":\"startMining\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"CONTRACT_WOOD_ERC20_TOKEN\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"maxAmount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"CONTRACT_FIRE_ERC20_TOKEN\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"activityStopped\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"miner2Index\",\"outputs\":[{\"name\":\"landTokenId\",\"type\":\"uint256\"},{\"name\":\"resource\",\"type\":\"address\"},{\"name\":\"indexInResource\",\"type\":\"uint64\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_landId\",\"type\":\"uint256\"},{\"name\":\"_resource\",\"type\":\"address\"}],\"name\":\"getTotalMiningStrength\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"CONTRACT_LAND_BASE\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"landId2Bars\",\"outputs\":[{\"name\":\"staker\",\"type\":\"address\"},{\"name\":\"token\",\"type\":\"address\"},{\"name\":\"id\",\"type\":\"uint256\"},{\"name\":\"resource\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_landId\",\"type\":\"uint256\"},{\"name\":\"_resource\",\"type\":\"address\"},{\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"getBarMiningStrength\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"authority_\",\"type\":\"address\"}],\"name\":\"setAuthority\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"registry\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"FURNACE_ITEM_MINE_FEE\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_landId\",\"type\":\"uint256\"},{\"name\":\"_resource\",\"type\":\"address\"},{\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"getMinerOnLand\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"CONTRACT_INTERSTELLAR_ENCODER\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"attenPerDay\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"CONTRACT_SOIL_ERC20_TOKEN\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"protectPeriod\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"name\":\"_resource\",\"type\":\"address\"},{\"name\":\"_index\",\"type\":\"uint256\"},{\"name\":\"_token\",\"type\":\"address\"},{\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"equip\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"name\":\"_resource\",\"type\":\"address\"},{\"name\":\"_currentTime\",\"type\":\"uint256\"},{\"name\":\"_lastUpdateTime\",\"type\":\"uint256\"}],\"name\":\"_getMinableBalance\",\"outputs\":[{\"name\":\"minableBalance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_apostleTokenId\",\"type\":\"uint256\"}],\"name\":\"updateMinerStrengthWhenStart\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"DENOMINATOR\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_resource\",\"type\":\"address\"},{\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"enhanceStrengthRateByIndex\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_registry\",\"type\":\"address\"},{\"name\":\"_resourceReleaseStartTime\",\"type\":\"uint256\"}],\"name\":\"initializeContract\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"CONTRACT_OBJECT_OWNERSHIP\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"land2ResourceMineState\",\"outputs\":[{\"name\":\"lastUpdateSpeedInSeconds\",\"type\":\"uint256\"},{\"name\":\"lastDestoryAttenInSeconds\",\"type\":\"uint256\"},{\"name\":\"industryIndex\",\"type\":\"uint256\"},{\"name\":\"lastUpdateTime\",\"type\":\"uint128\"},{\"name\":\"totalMiners\",\"type\":\"uint64\"},{\"name\":\"maxMiners\",\"type\":\"uint64\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"CONTRACT_TOKEN_USE\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_landId\",\"type\":\"uint256\"},{\"name\":\"_resource\",\"type\":\"address\"}],\"name\":\"getBarsRate\",\"outputs\":[{\"name\":\"barsRate\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_maxMiners\",\"type\":\"uint256\"}],\"name\":\"setMaxMiners\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"CONTRACT_METADATA_TELLER\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"authority\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokenIds\",\"type\":\"uint256[]\"},{\"name\":\"_landTokenIds\",\"type\":\"uint256[]\"},{\"name\":\"_resources\",\"type\":\"address[]\"}],\"name\":\"batchStartMining\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_itemToken\",\"type\":\"address\"},{\"name\":\"_itemId\",\"type\":\"uint256\"},{\"name\":\"_resources\",\"type\":\"address[]\"}],\"name\":\"availableItemResources\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"itemId2Status\",\"outputs\":[{\"name\":\"staker\",\"type\":\"address\"},{\"name\":\"tokenId\",\"type\":\"uint256\"},{\"name\":\"index\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"UINT_ITEMBAR_PROTECT_PERIOD\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_itemToken\",\"type\":\"address\"},{\"name\":\"_itemId\",\"type\":\"uint256\"},{\"name\":\"_resource\",\"type\":\"address\"}],\"name\":\"getItemMinedBalance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"land2BarRate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"maxMiners\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_landId\",\"type\":\"uint256\"},{\"name\":\"_resource\",\"type\":\"address\"},{\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"getBarRate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_landId\",\"type\":\"uint256\"},{\"name\":\"_resource\",\"type\":\"address\"}],\"name\":\"getLandMiningStrength\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"name\":\"_resource\",\"type\":\"address\"},{\"name\":\"_time\",\"type\":\"uint256\"}],\"name\":\"getReleaseSpeed\",\"outputs\":[{\"name\":\"currentSpeed\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"recoverAttenPerDay\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_landId\",\"type\":\"uint256\"}],\"name\":\"claimLandResource\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_token\",\"type\":\"address\"},{\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"isNotProtect\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"address\"}],\"name\":\"itemMinedBalance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"minerTokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"landId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_resource\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"strength\",\"type\":\"uint256\"}],\"name\":\"StartMining\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"minerTokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"landId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_resource\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"strength\",\"type\":\"uint256\"}],\"name\":\"StopMining\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"landTokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"goldBalance\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"woodBalance\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"waterBalance\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"fireBalance\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"soilBalance\",\"type\":\"uint256\"}],\"name\":\"ResourceClaimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"apostleTokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"landId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"strength\",\"type\":\"uint256\"}],\"name\":\"UpdateMiningStrengthWhenStop\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"apostleTokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"landId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"strength\",\"type\":\"uint256\"}],\"name\":\"UpdateMiningStrengthWhenStart\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"barIndex\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"landId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"resource\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"rate\",\"type\":\"uint256\"}],\"name\":\"StartBarMining\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"barIndex\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"landId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"rate\",\"type\":\"address\"}],\"name\":\"StopBarMining\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"landId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"goldBalance\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"woodBalance\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"waterBalance\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"fireBalance\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"soilBalance\",\"type\":\"uint256\"}],\"name\":\"LandResourceClaimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"itemToken\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"itemTokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"goldBalance\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"woodBalance\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"waterBalance\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"fireBalance\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"soilBalance\",\"type\":\"uint256\"}],\"name\":\"ItemResourceClaimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"resource\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"index\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"staker\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"Equip\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"resource\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"index\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"staker\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"Divest\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"maxAmount\",\"type\":\"uint256\"}],\"name\":\"SetMaxLandBar\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"maxMiners\",\"type\":\"uint256\"}],\"name\":\"SetMaxMiner\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"authority\",\"type\":\"address\"}],\"name\":\"LogSetAuthority\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"LogSetOwner\",\"type\":\"event\"}]","ContractName":"LandResourceV6","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"bzzr://f3428bcfeed0da22aaf51a85554257a2aade4ee966f198887e8250f4348ed88b"}]}