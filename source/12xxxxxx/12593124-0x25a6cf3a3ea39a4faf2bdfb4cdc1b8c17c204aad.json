{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/Strategies/Harvest/HarvestUSDTStrategy.sol\": {\r\n      \"content\": \"pragma solidity >=0.5.17 <0.8.4;\\n\\nimport '@openzeppelin/contracts/token/ERC20/IERC20.sol';\\nimport '@openzeppelin/contracts/utils/Address.sol';\\nimport '@openzeppelin/contracts/token/ERC20/ERC20.sol';\\nimport '@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol';\\nimport '@openzeppelin/contracts/utils/math/SafeMath.sol';\\n\\n\\n\\nimport './../BaseStrategy.sol';\\nimport './../../external/harvest/HarvestVault.sol';\\nimport './../../external/harvest/HarvestStakePool.sol';\\nimport './../../Transfers.sol';\\nimport \\\"./../../enums/ProtocolEnum.sol\\\";\\n\\ncontract HarvestUSDTStrategy is BaseStrategy, Transfers {\\n    using SafeERC20 for IERC20;\\n    using SafeMath for uint256;\\n    address public fVault = address(0x053c80eA73Dc6941F518a68E2FC52Ac45BDE7c9C);\\n    address public fPool = address(0x6ac4a7AB91E6fD098E13B7d347c6d4d1494994a2);\\n    address public rewardToken = address(0xa0246c9032bC3A600820415aE600c6388619A14D);\\n    address public transfer;\\n\\n    constructor(address _vault) public {\\n        initialize(_vault);\\n    }\\n\\n    function protocol() public pure override returns (uint256) {\\n        return uint256(ProtocolEnum.Harvest);\\n    }\\n\\n    function name() public pure override returns (string memory) {\\n        return 'HarvestUSDTStrategy';\\n    }\\n\\n    /**\\n     * lpToken份额\\n     **/\\n    function balanceOfLp() internal view override returns (uint256) {\\n        return HarvestStakePool(fPool).balanceOf(address(this));\\n    }\\n\\n    /**\\n     * lpToken精度\\n     **/\\n    function lpDecimals() internal view override returns (uint256) {\\n        return HarvestVault(fVault).decimals();\\n    }\\n\\n    /**\\n     * 从Vault(Pool)中赎回部分\\n     **/\\n    function withdrawSome(uint256 shares) internal override returns (uint256) {\\n        require(shares > 0, \\\"must large than 0\\\");\\n        //从挖矿池中赎回\\n        HarvestStakePool(fPool).withdraw(shares);\\n        //从fVault中赎回\\n        HarvestVault(fVault).withdraw(shares);\\n        uint256 amount = want.balanceOf(address(this));\\n        //shares * IYearnVaultV1(fVault).getPricePerFullShare() / 1e18;\\n        return amount;\\n    }\\n\\n    /**\\n     * 将中间代币转换成USDT，如EURScrv转成USDT\\n     * step1：通过curve将EURScrv转成EURS\\n     * step2：通过DEX将EURS换成USDT\\n     * return: USDT数量\\n     **/\\n    function exchangeToUSDT(uint256 tokenCount) internal override returns (uint256) {\\n        //这里中间币本来就是USDT，不用转换\\n        return tokenCount;\\n    }\\n\\n    /**\\n     * 提矿 & 卖出\\n     * 会产矿的策略需要重写该方法\\n     * 返回卖矿产生的USDT数\\n     **/\\n    function claimAndSellRewards() internal override returns (uint256) {\\n        //子策略需先提矿\\n        HarvestStakePool(fPool).getReward();\\n        //TODO::卖矿换成USDT\\n        uint256 amount = IERC20(rewardToken).balanceOf(address(this));\\n\\n        if (amount > 0) {\\n            uint256 balanceBefore = want.balanceOf(address(this));\\n            swap(rewardToken, address(want), amount,0);\\n            uint256 balanceAfter = want.balanceOf(address(this));\\n            return balanceAfter - balanceBefore;\\n        }\\n\\n        return 0;\\n    }\\n\\n    /**\\n     * 退回超出部分金额\\n     **/\\n    function cutOffPosition(uint256 _debtOutstanding) external onlyVault override returns (uint256){\\n        if (_debtOutstanding > 0) {\\n            uint256 _balance = want.balanceOf(address(this));\\n            if (_debtOutstanding > _balance) {\\n                uint256 totalAssets = estimatedTotalAssets();\\n\\n                if (_debtOutstanding > totalAssets) {\\n                    //全部赎回\\n                    HarvestStakePool(fPool).exit();\\n                    HarvestVault(fVault).withdrawAll();\\n                    //TODO::这里可能产生了一些损失导致赎回时金额不够\\n                } else {\\n                    uint256 needShares =\\n                    (_debtOutstanding - _balance).mul(10 ** lpDecimals()).div(HarvestVault(fVault).getPricePerFullShare());\\n\\n                    if (needShares > 0) {\\n                        withdrawSome(needShares);\\n                    }\\n                }\\n                uint256 returnDebt = want.balanceOf(address(this));\\n                // 将余额转给Vault\\n                want.safeTransfer(address(vault), returnDebt);\\n                return returnDebt;\\n            } else {\\n                want.safeTransfer(address(vault), _debtOutstanding);\\n                return _debtOutstanding;\\n            }\\n        }\\n        return 0;\\n    }\\n\\n    /**\\n     * 将空置资金进行投资\\n     **/\\n    function investInner() internal override {\\n        uint256 amount = want.balanceOf(address(this));\\n        if (amount > 0) {\\n            want.safeApprove(fVault, 0);\\n            want.safeApprove(fVault, amount);\\n            HarvestVault(fVault).deposit(amount);\\n\\n            //stake\\n            uint256 fTokenAmount = IERC20(fVault).balanceOf(address(this));\\n\\n            IERC20(fVault).safeApprove(fPool, 0);\\n            IERC20(fVault).safeApprove(fPool, fTokenAmount);\\n            HarvestStakePool(fPool).stake(fTokenAmount);\\n\\n        }\\n    }\\n\\n    function migrate(address _newStrategy) external override {}\\n\\n    function getInvestVaultAssets() external view override returns (uint256) {\\n        uint256 totalAsset = IERC20(fVault).totalSupply().mul(HarvestVault(fVault).getPricePerFullShare()).div(10 ** HarvestVault(fVault).decimals());\\n\\n        return totalAsset;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/ERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./extensions/IERC20Metadata.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin guidelines: functions revert instead\\n * of returning `false` on failure. This behavior is nonetheless conventional\\n * and does not conflict with the expectations of ERC20 applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\n    mapping (address => uint256) private _balances;\\n\\n    mapping (address => mapping (address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * The defaut value of {decimals} is 18. To select a different value for\\n     * {decimals} you should overload it.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor (string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n     * overridden;\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `recipient` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(_msgSender(), recipient, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        _approve(_msgSender(), spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` and `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``sender``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(sender, recipient, amount);\\n\\n        uint256 currentAllowance = _allowances[sender][_msgSender()];\\n        require(currentAllowance >= amount, \\\"ERC20: transfer amount exceeds allowance\\\");\\n        _approve(sender, _msgSender(), currentAllowance - amount);\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender] + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        uint256 currentAllowance = _allowances[_msgSender()][spender];\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        _approve(_msgSender(), spender, currentAllowance - subtractedValue);\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\\n     *\\n     * This is internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` cannot be the zero address.\\n     * - `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     */\\n    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\\n        require(sender != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(recipient != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(sender, recipient, amount);\\n\\n        uint256 senderBalance = _balances[sender];\\n        require(senderBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        _balances[sender] = senderBalance - amount;\\n        _balances[recipient] += amount;\\n\\n        emit Transfer(sender, recipient, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        _balances[account] += amount;\\n        emit Transfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        _balances[account] = accountBalance - amount;\\n        _totalSupply -= amount;\\n\\n        emit Transfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be to transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual { }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        // solhint-disable-next-line max-line-length\\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) { // Return data is optional\\n            // solhint-disable-next-line max-line-length\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/math/SafeMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is no longer needed starting with Solidity 0.8. The compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/Strategies/BaseStrategy.sol\": {\r\n      \"content\": \"pragma solidity >=0.5.17 <0.8.4;\\n\\nimport '@openzeppelin/contracts/token/ERC20/IERC20.sol';\\nimport '@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol';\\nimport '@openzeppelin/contracts/utils/math/SafeMath.sol';\\n\\nimport '@chainlink/contracts/src/v0.6/interfaces/AggregatorV3Interface.sol';\\n\\n\\nimport './IStrategy.sol';\\nimport '../interfaces/IVault.sol';\\n\\nabstract contract BaseStrategy {\\n    using SafeMath for uint256;\\n    using SafeERC20 for IERC20;\\n\\n    VaultAPI public vault;\\n\\n    IERC20 public want;\\n\\n    // See note on `setEmergencyExit()`.\\n    bool public emergencyExit;\\n\\n    uint256 public pricePerShare;\\n    //    uint256 lastPricePerShare;\\n    uint256 prevTimestamp;\\n\\n    uint256 public apy = 0;\\n\\n    event EmergencyExitEnabled();\\n\\n    modifier onlyGovernance() {\\n        require(msg.sender == vault.governance(), '!only governance');\\n        _;\\n    }\\n\\n    modifier onlyVault() {\\n        require(msg.sender == address(vault), '!only vault');\\n        _;\\n    }\\n\\n\\n    //    modifier onlyKeeper() {\\n    //        require(vault.isKeeper(msg.sender), '!only keeper');\\n    //        _;\\n    //    }\\n\\n    /**\\n     * 更新apy\\n     **/\\n    function updateApy(uint256 _apy) external onlyVault {\\n        apy = _apy;\\n    }\\n\\n\\n\\n    /**\\n     * @notice\\n     *  Activates emergency exit. Once activated, the Strategy will exit its\\n     *  position upon the next harvest, depositing all funds into the Vault as\\n     *  quickly as is reasonable given on-chain conditions.\\n     *\\n     *  This may only be called by governance or the strategist.\\n     * @dev\\n     *  See `vault.setEmergencyShutdown()` and `harvest()` for further details.\\n     */\\n    function setEmergencyExit() external onlyGovernance {\\n        emergencyExit = true;\\n        //        vault.revokeStrategy();\\n\\n        emit EmergencyExitEnabled();\\n    }\\n\\n\\n    function initialize(address _vault) internal {\\n        vault = VaultAPI(_vault);\\n        want = IERC20(vault.token());\\n        //授权Vault可以无限操作策略中的USDT\\n        want.safeApprove(_vault, type(uint256).max);\\n    }\\n\\n    function protocol() public pure virtual returns (uint256);\\n\\n    function name() public pure virtual returns (string memory);\\n\\n    /**\\n     * 评估总资产\\n     */\\n    function estimatedTotalAssets() public view virtual returns (uint256) {\\n        return pricePerShare.mul(balanceOfLp().div(10 ** lpDecimals()));\\n    }\\n\\n    /**\\n     * 提矿 & 卖出\\n     * 会产矿的策略需要重写该方法\\n     * 返回卖矿产生的USDT数\\n     **/\\n    function claimAndSellRewards() internal virtual returns (uint256) {\\n        //子策略需先提矿\\n        //卖矿换成USDT\\n        return 0;\\n    }\\n\\n    /**\\n     * correspondingShares：待提取xToken数\\n     * totalShares：总xToken数\\n     **/\\n    function withdrawToVault(uint256 correspondingShares, uint256 totalShares) external onlyVault virtual returns (uint256 value, uint256 partialClaimValue, uint256 claimValue)  {\\n        //根据correspondingShares/totalShares，计算待提取lpToken数量-withdrawLpTokensCount\\n        uint256 totalLpCount = balanceOfLp();\\n\\n        //* 1 ** lpDecimals();\\n        uint256 withdrawLpTokensCount = totalLpCount.mul(correspondingShares).div(totalShares);\\n\\n        if (withdrawLpTokensCount > 0) {\\n            uint256 preTotalAssets = estimatedTotalAssets();\\n            //从3rd Vault(Pool)中赎回-valueOfLpTokens\\n            uint256 tokenCount = withdrawSome(withdrawLpTokensCount);\\n\\n            //兑换成USDT\\n            uint256 valueOfLpTokens = exchangeToUSDT(tokenCount);\\n\\n            //提矿卖出\\n            uint256 totalRewards = claimAndSellRewards();\\n            uint256 partialRewards = totalRewards.mul(correspondingShares).div(totalShares);\\n\\n            uint256 lastPricePerShare = pricePerShare;\\n            //算出单个lpToken的价值：singleValueOfLpToken = (valueOfFarms + valueOfLpTokens)/withdrawLpTokensCount\\n            pricePerShare = valueOfLpTokens.mul(10 ** lpDecimals()).div(withdrawLpTokensCount);\\n            if (preTotalAssets > 0 && pricePerShare > lastPricePerShare) {\\n                //                uint256 deltaOfPricePerShare = pricePerShare - lastPricePerShare;\\n                //目前apy定义为uint，所以只有差值大于0才更新\\n                uint256 deltaSeconds = block.timestamp - prevTimestamp;\\n                uint256 oneYear = 31536000;\\n                uint256 totalAssets = estimatedTotalAssets() + totalRewards + valueOfLpTokens;\\n\\n\\n                //                apy = deltaOfPricePerShare.mul(oneYear).div(deltaSeconds).div(lastPricePerShare);\\n                uint256 deltaOfAssets = totalAssets - preTotalAssets;\\n                apy = deltaOfAssets.mul(oneYear).mul(1e4).div(deltaSeconds).div(preTotalAssets);\\n\\n            }\\n\\n            //将用户赎回份额的USDT转给Vault\\n            want.safeTransfer(address(vault), totalRewards + valueOfLpTokens);\\n            prevTimestamp = block.timestamp;\\n\\n\\n            return (valueOfLpTokens, partialRewards, totalRewards);\\n        }\\n        return (0, 0, 0);\\n    }\\n\\n    /**\\n     * 无人提取时，通过调用该方法计算策略净值\\n     **/\\n    function withdrawOneToken() external onlyVault virtual returns (uint256 value, uint256 partialClaimValue, uint256 claimValue) {\\n        uint256 totalLpCount = balanceOfLp();\\n        if (totalLpCount >= 10 ** uint256(lpDecimals())) {\\n            uint256 tokenCount = withdrawSome(10 ** uint256(lpDecimals()));\\n            //兑换成USDT\\n            uint256 valueOfLpTokens = exchangeToUSDT(tokenCount);\\n\\n            //提矿卖出\\n            uint256 totalRewards = claimAndSellRewards();\\n\\n\\n            //算出单个lpToken的价值：singleValueOfLpToken = (valueOfFarms + valueOfLpTokens)/withdrawLpTokensCount\\n            pricePerShare = valueOfLpTokens;\\n\\n            want.safeTransfer(address(vault), valueOfLpTokens + totalRewards);\\n            //按比例从提矿收益中算出一份lpToken对应的价值-partialRewards\\n            uint256 oneOfRewards = totalRewards.mul(10 ** uint256(lpDecimals())).div(balanceOfLp());\\n\\n            return (valueOfLpTokens, oneOfRewards, totalRewards);\\n        }\\n        return (0, 0, 0);\\n    }\\n\\n    /**\\n     * 退回超出部分金额\\n     **/\\n    function cutOffPosition(uint256 _debtOutstanding) external virtual returns (uint256);\\n\\n    /**\\n     * 将空置资金进行投资\\n     **/\\n    function invest() public onlyVault {\\n        uint256 beforeInvest = balanceOfLp();\\n        uint256 wantBalance = want.balanceOf(address(this));\\n        investInner();\\n        uint256 afterInvest = balanceOfLp();\\n        if (beforeInvest == 0 && afterInvest > 0) {\\n            pricePerShare = wantBalance.mul(10 ** lpDecimals()).div(afterInvest);\\n            prevTimestamp = block.timestamp;\\n\\n        }\\n    }\\n\\n    function investInner() internal virtual;\\n\\n    //策略迁移\\n    function migrate(address _newStrategy) external virtual;\\n\\n    //查看策略投资池子的总数量（priced in want）\\n    function getInvestVaultAssets() external view virtual returns (uint256);\\n\\n    /**\\n     * lpToken份额\\n     **/\\n    function balanceOfLp() internal view virtual returns (uint256);\\n\\n    /**\\n     * lpToken精度\\n     **/\\n    function lpDecimals() internal view virtual returns (uint256);\\n\\n    //    /**\\n    //    * 矿币精度\\n    //    **/\\n    //    function rewardDecimals() internal virtual view returns (uint256);\\n\\n    /**\\n     * 从Vault(Pool)中赎回部分\\n     **/\\n    function withdrawSome(uint256 shares) internal virtual returns (uint256);\\n\\n    /**\\n     * 将中间代币转换成USDT，如EURScrv转成USDT\\n     * step1：通过curve将EURScrv转成EURS\\n     * step2：通过DEX将EURS换成USDT\\n     * return: USDT数量\\n     **/\\n    function exchangeToUSDT(uint256 tokenCount) internal virtual returns (uint256);\\n}\\n\"\r\n    },\r\n    \"contracts/external/harvest/HarvestVault.sol\": {\r\n      \"content\": \"pragma solidity ^0.8.0;\\n\\ninterface HarvestVault {\\n    function deposit(uint256) external;\\n\\n    function withdraw(uint256) external;\\n\\n    function withdrawAll() external;\\n\\n    function doHardWork() external;\\n\\n    function underlyingBalanceWithInvestment() view external returns (uint256);\\n\\n    function getPricePerFullShare() external view returns (uint256);\\n\\n    function pricePerShare() external view returns (uint256);\\n\\n    function decimals() external view returns (uint256);\\n\\n    function balance() external view returns (uint256);\\n}\\n\"\r\n    },\r\n    \"contracts/external/harvest/HarvestStakePool.sol\": {\r\n      \"content\": \"pragma solidity ^0.8.0;\\n\\ninterface HarvestStakePool {\\n\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    function getReward() external;\\n\\n    function stake(uint256 amount) external;\\n\\n    function rewardPerToken() external view returns (uint256);\\n\\n    function withdraw(uint256 amount) external;\\n\\n    function exit() external;\\n}\\n\"\r\n    },\r\n    \"contracts/Transfers.sol\": {\r\n      \"content\": \"pragma solidity >=0.5.17 <=0.8.0;\\n\\n\\nimport '@openzeppelin/contracts/token/ERC20/IERC20.sol';\\nimport '@openzeppelin/contracts/token/ERC20/ERC20.sol';\\nimport '@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol';\\nimport './external/oneInch/OneSplitAudit.sol';\\nimport './external/uni/Uni.sol';\\n\\ncontract Transfers {\\n    using SafeERC20 for IERC20;\\n\\n    address constant onesplit = address(0xC586BeF4a0992C495Cf22e1aeEE4E446CECDee0E);\\n//    address constant onesplit = address(0x50FDA034C0Ce7a8f7EFDAebDA7Aa7cA21CC1267e);\\n    address constant uni = address(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D);\\n\\n    /**\\n     * [\\n     *   \\\"Uniswap\\\",\\n     *   \\\"Kyber\\\",\\n     *   \\\"Bancor\\\",\\n     *   \\\"Oasis\\\",\\n     *   \\\"CurveCompound\\\",\\n     *   \\\"CurveUsdt\\\",\\n     *   \\\"CurveY\\\",\\n     *   \\\"Binance\\\",\\n     *   \\\"Synthetix\\\",\\n     *   \\\"UniswapCompound\\\",\\n     *   \\\"UniswapChai\\\",\\n     *   \\\"UniswapAave\\\"\\n     * ]\\n     *   @param _fromToken will be swaped token\\n     *   @param _destToken you want token\\n     *   @param _amount will be swaped token amount\\n     **/\\n    function swap(\\n        address _fromToken,\\n        address _destToken,\\n        uint256 _amount,\\n        uint256 _miniReturn\\n    ) public returns (uint256) {\\n        if (_amount <= 0) {\\n            return 0;\\n        }\\n        uint256 _parts = 1;\\n        //拆包，最大拆100个，最小为1个\\n        uint256 decimals = ERC20(_fromToken).decimals();\\n\\n\\n\\n\\n        if (_amount / (10**decimals) / 1000 > 0) {\\n            _parts = 10;\\n        }\\n\\n        // IERC20(_fromToken).safeApprove(onesplit, 0);\\n        // IERC20(_fromToken).safeApprove(onesplit, _amount);\\n        uint256[] memory _distribution;\\n        uint256 _expected;\\n\\n        //setp 1：到交易所查询可兑换目标币的数量\\n        (_expected, _distribution) = OneSplitAudit(onesplit).getExpectedReturn(\\n            _fromToken,\\n            _destToken,\\n            _amount,\\n            _parts,\\n            0\\n        );\\n\\n        require(_expected >= _miniReturn,\\\"Slippage limit exceeded!\\\");\\n        if (_expected == 0) {\\n            return 0;\\n        }\\n\\n\\n        // //setp 2：把sender的源代币转入到当前地址\\n        // IERC20(_fromToken).safeTransferFrom(msg.sender, address(this), _amount);\\n\\n        IERC20(_fromToken).safeApprove(onesplit, 0);\\n        IERC20(_fromToken).safeApprove(onesplit, _amount);\\n\\n        //setp 3：把源代币转换为目标代币\\n        OneSplitAudit(onesplit).swap(_fromToken, _destToken, _amount, _expected, _distribution, 0);\\n\\n\\n        //setp 4: 把目标代币转给sender\\n        // IERC20(_destToken).safeTransfer(msg.sender, _expected);\\n        return _expected;\\n    }\\n\\n    /**\\n     * @param _path 要兑换币的路由，第一个元素是输入的代币，最后一个元素是输出的代币，该数组长度至少大于等于2，\\n     *              如果有直接兑换的交易对的话，那就长度为2，如果没有直接兑换的交易对，需要中间代币转换的，\\n     *              那么长度就是大于2 。中间的元素就是需要转换的到输出代币的路由\\n     * @param _amount 输入代币的数量\\n     */\\n    function uniSwap(address[] calldata _path, uint256 _amount) external returns (uint256 returnAmount) {\\n        require(_path.length >= 2, 'path.length>=2');\\n        if (_amount <= 0) {\\n            return 0;\\n        }\\n        IERC20(_path[0]).safeApprove(uni, 0);\\n        IERC20(_path[0]).safeApprove(uni, _amount);\\n        Uni(uni).swapExactTokensForTokens(_amount, uint256(0), _path, address(this), block.timestamp + 1800);\\n        uint256 _wantAmount = IERC20(_path[_path.length - 1]).balanceOf(address(this));\\n\\n\\n        return _wantAmount;\\n    }\\n\\n    /*\\n     * 获取预期能兑换到目标代币的数量\\n     */\\n    function getExpectedAmount(\\n        address _fromToken,\\n        address _destToken,\\n        uint256 _amount\\n    ) public view returns (uint256) {\\n        if (_amount <= 0) {\\n            return 0;\\n        }\\n        uint256 _parts = 1;\\n        //拆包，最大拆100个，最小为1个\\n        if (_amount / 100 > 0) {\\n            _parts = 100;\\n        } else if (_amount / 10 > 0) {\\n            _parts = 10;\\n        }\\n        uint256[] memory _distribution;\\n        uint256 _expected;\\n        (_expected, _distribution) = OneSplitAudit(onesplit).getExpectedReturn(\\n            _fromToken,\\n            _destToken,\\n            _amount,\\n            _parts,\\n            0\\n        );\\n        return _expected;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/enums/ProtocolEnum.sol\": {\r\n      \"content\": \"pragma solidity ^0.8.0;\\n\\nenum ProtocolEnum {\\n    Yearn,\\n    Harvest\\n}\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"@chainlink/contracts/src/v0.6/interfaces/AggregatorV3Interface.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity >=0.6.0;\\n\\ninterface AggregatorV3Interface {\\n\\n  function decimals() external view returns (uint8);\\n  function description() external view returns (string memory);\\n  function version() external view returns (uint256);\\n\\n  // getRoundData and latestRoundData should both raise \\\"No data present\\\"\\n  // if they do not have data to report, instead of returning unset values\\n  // which could be misinterpreted as actual reported values.\\n  function getRoundData(uint80 _roundId)\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n  function latestRoundData()\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n\\n}\\n\"\r\n    },\r\n    \"contracts/Strategies/IStrategy.sol\": {\r\n      \"content\": \"pragma solidity >=0.5.17 <0.8.4;\\n\\ninterface IStrategy {\\n\\n    //该策略属于的协议类型\\n    function protocol() external view returns (uint256);\\n\\n    //该策略需要的token地址\\n    function want() external view returns (address);\\n\\n    function name() external view returns (string memory);\\n    // 获取该策略对应池的apy\\n    function apy() external view returns (uint256);\\n    // 更新该策略对应池apy，留给keeper调用\\n    function updateApy(uint256 _apy) external;\\n    //该策略的vault地址\\n    function vault() external view returns (address);\\n\\n    //    function deposit(uint256 mount) external;\\n\\n    //需要提取指定数量的token,返回提取导致的loss数量token\\n    function withdraw(uint256 _amount) external returns (uint256);\\n\\n    //计算策略的APY\\n    function calAPY() external returns (uint256);\\n\\n    //该策略所有的资产（priced in want）\\n    function estimatedTotalAssets() external view returns (uint256);\\n\\n    //策略迁移\\n    function migrate(address _newStrategy) external;\\n\\n    //查看策略投资池子的总数量（priced in want）\\n    function getInvestVaultAssets() external view returns (uint256);\\n\\n    /**\\n    * correspondingShares：待提取xToken数\\n    * totalShares：总xToken数\\n    **/\\n    function withdrawToVault(uint256 correspondingShares, uint256 totalShares) external returns  (uint256 value, uint256 partialClaimValue, uint256 claimValue) ;\\n\\n    /**\\n    * 无人提取时，通过调用该方法计算策略净值\\n    **/\\n    function withdrawOneToken() external returns  (uint256 value, uint256 partialClaimValue, uint256 claimValue);\\n\\n\\n\\n    /**\\n    * 退回超出部分金额\\n    **/\\n    function cutOffPosition(uint256 _debtOutstanding) external returns (uint256);\\n\\n    /**\\n    * 将空置资金进行投资\\n    **/\\n    function invest() external;\\n}\"\r\n    },\r\n    \"contracts/interfaces/IVault.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ninterface VaultAPI is IERC20 {\\n    function name() external view returns (string calldata);\\n\\n    function symbol() external view returns (string calldata);\\n\\n    function decimals() external view returns (uint256);\\n\\n    function deposit(uint256 amount) external returns (uint256);\\n\\n    function withdraw(uint256 maxShares) external returns (uint256);\\n\\n    function token() external view returns (address);\\n\\n    function pricePerShare() external view returns (uint256);\\n\\n    function totalAssets() external view returns (uint256);\\n\\n    function depositLimit() external view returns (uint256);\\n\\n    /**\\n     * View the governance address of the Vault to assert privileged functions\\n     * can only be called by governance. The Strategy serves the Vault, so it\\n     * is subject to governance defined by the Vault.\\n     */\\n    function governance() external view returns (address);\\n\\n    /**\\n     * View the management address of the Vault to assert privileged functions\\n     * can only be called by management. The Strategy serves the Vault, so it\\n     * is subject to management defined by the Vault.\\n     */\\n    function management() external view returns (address);\\n\\n    function isKeeper(address caller) external view returns (bool);\\n\\n    function maxExchangeRateDeltaThreshold() external view returns (uint256);\\n}\"\r\n    },\r\n    \"contracts/external/oneInch/OneSplitAudit.sol\": {\r\n      \"content\": \"pragma solidity ^0.8.0;\\n\\nimport '@openzeppelin/contracts/token/ERC20/IERC20.sol';\\n\\ninterface OneSplitAudit {\\n    function swap(\\n        address fromToken,\\n        address destToken,\\n        uint256 amount,\\n        uint256 minReturn,\\n        uint256[] calldata distribution,\\n        uint256 flags\\n    ) external payable;\\n\\n    function getExpectedReturn(\\n        address fromToken,\\n        address destToken,\\n        uint256 amount,\\n        uint256 parts,\\n        uint256 flags\\n    ) external view returns (uint256 returnAmount, uint256[] memory distribution);\\n\\n    function getExpectedReturnWithGas(\\n        address fromToken,\\n        address destToken,\\n        uint256 amount,\\n        uint256 parts,\\n        uint256 flags,\\n        uint256 destTokenEthPriceTimesGasPrice\\n    )\\n        external\\n        view\\n        returns (\\n            uint256 returnAmount,\\n            uint256 estimateGasAmount,\\n            uint256[] memory distribution\\n        );\\n}\\n\"\r\n    },\r\n    \"contracts/external/uni/Uni.sol\": {\r\n      \"content\": \"pragma solidity =0.8.0;\\n\\ninterface Uni {\\n    function swapExactTokensForTokens(\\n        uint256 amountIn,\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256[] memory amounts);\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"evmVersion\": \"istanbul\",\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_vault\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"EmergencyExitEnabled\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"apy\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_debtOutstanding\",\"type\":\"uint256\"}],\"name\":\"cutOffPosition\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"emergencyExit\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"estimatedTotalAssets\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fPool\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fVault\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_fromToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_destToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"getExpectedAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getInvestVaultAssets\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"invest\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newStrategy\",\"type\":\"address\"}],\"name\":\"migrate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pricePerShare\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"protocol\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"setEmergencyExit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_fromToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_destToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_miniReturn\",\"type\":\"uint256\"}],\"name\":\"swap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_path\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"uniSwap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"returnAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_apy\",\"type\":\"uint256\"}],\"name\":\"updateApy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vault\",\"outputs\":[{\"internalType\":\"contract VaultAPI\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"want\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawOneToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"partialClaimValue\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"claimValue\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"correspondingShares\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalShares\",\"type\":\"uint256\"}],\"name\":\"withdrawToVault\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"partialClaimValue\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"claimValue\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"HarvestUSDTStrategy","CompilerVersion":"v0.8.0+commit.c7dfd78e","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"0000000000000000000000004478d7a2a97990ea76fc6c8fa39d2706a30bcd13","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}