{"status":"1","message":"OK","result":[{"SourceCode":"// SPDX-License-Identifier: UNLICENSED\r\n\r\npragma solidity <=0.7.4;\r\n\r\nabstract contract ReentrancyGuard {\r\n\r\n    uint256 private constant _NOT_ENTERED = 1;\r\n    uint256 private constant _ENTERED = 2;\r\n\r\n    uint256 private _status;\r\n\r\n    constructor () {\r\n        _status = _NOT_ENTERED;\r\n    }\r\n\r\n    modifier nonReentrant() {\r\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\r\n        _status = _ENTERED;\r\n        _;\r\n        _status = _NOT_ENTERED;\r\n    }\r\n}\r\n\r\nlibrary Math {\r\n    \r\n\tfunction add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n\t\tuint256 c = a + b;\r\n\t\trequire(c >= a, \"SafeMath: addition overflow\");\r\n\r\n\t\treturn c;\r\n\t}\r\n\r\n\tfunction sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n\t\treturn sub(a, b, \"SafeMath: subtraction overflow\");\r\n\t}\r\n\r\n\tfunction sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n\t\trequire(b <= a, errorMessage);\r\n\t\tuint256 c = a - b;\r\n\r\n\t\treturn c;\r\n\t}\r\n\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n\t\tif (a == 0) {\r\n\t\t\treturn 0;\r\n\t\t}\r\n\r\n\t\tuint256 c = a * b;\r\n\t\trequire(c / a == b, \"multiplication overflow\");\r\n\r\n\t\treturn c;\r\n\t}\r\n\r\n\tfunction div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n\t\treturn div(a, b, \"SafeMath: division by zero\");\r\n\t}\r\n\r\n\tfunction div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n\t\trequire(b > 0, errorMessage);\r\n\t\tuint256 c = a / b;\r\n\t\t// assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n\t\treturn c;\r\n\t}\r\n\r\n}\r\n\r\ninterface IERC20{\r\n\t\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n\tfunction transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n\tfunction allowance(address owner, address spender) external view returns (uint256);\r\n\r\n}\r\n\r\ninterface AggregatorV3Interface {\r\n\r\n  function decimals() external view returns (uint8);\r\n  function description() external view returns (string memory);\r\n  function version() external view returns (uint256);\r\n\r\n  function getRoundData(uint80 _roundId)\r\n    external\r\n    view\r\n    returns (\r\n      uint80 roundId,\r\n      int256 answer,\r\n      uint256 startedAt,\r\n      uint256 updatedAt,\r\n      uint80 answeredInRound\r\n    );\r\n  function latestRoundData()\r\n    external\r\n    view\r\n    returns (\r\n      uint80 roundId,\r\n      int256 answer,\r\n      uint256 startedAt,\r\n      uint256 updatedAt,\r\n      uint80 answeredInRound\r\n    );\r\n\r\n}\r\n\r\ninterface IMomentumSaleV1{\r\n\r\n    function createSaleContract(uint256 _allocated, uint8 _source) external returns(bool);\r\n\r\n    function increaseAllocation(uint256 _amount, uint256 _saleId) external returns(bool);\r\n\r\n    function purchaseWithEth() external payable returns(bool);\r\n\r\n    function adminPurchase(uint256 _amountToken, uint256 _usdPurchase, uint256 _pricePurchase) external returns(bool);\r\n\r\n    function fetchTokenPrice() external returns(uint256);\r\n\r\n    function claim(uint256 _saleId) external returns(bool);\r\n\r\n    function resolveBonus(uint256 _saleId, address _user) external returns(uint256);\r\n\r\n    function resolveBonusPercent(uint256 _saleId) external returns(bool);\r\n\r\n    function updateNewEdgexSource(address _newSource, uint8 _index) external returns(bool);\r\n\r\n    function revokeOwnership(address _newOwner) external returns(bool);\r\n\r\n    function updateEthSource(address _newSource) external returns(bool);\r\n\r\n    function updateEdgexTokenContract(address _newSource) external returns(bool);\r\n\r\n    function updatePricePerToken(uint256 _price) external returns(bool);\r\n\r\n}\r\n\r\ninterface IWhiteListOracle {\r\n\r\n    function whitelist(address _user) external returns(bool);\r\n\r\n    function blacklist(address _user) external returns(bool);\r\n\r\n    function transferGovernor(address _newGovernor) external returns(bool);\r\n\r\n    function whitelisted(address _user) external view returns(bool);\r\n\r\n}\r\n\r\ncontract MomentumSaleV1 is ReentrancyGuard {\r\n    \r\n   address public admin;\r\n   address public ethWallet;\r\n   address public organisation;\r\n   address public governor;\r\n   address public whitelistOracle;\r\n    \r\n   uint256 public totalSaleContracts;\r\n   uint256 public pricePerToken;\r\n   address public ethPriceSource;\r\n   address public edgexTokenContract;\r\n   uint256 public lastCreated;\r\n   uint256 public totalOracles = 15;\r\n\r\n   struct Sale{\r\n       uint256 usdPurchase;\r\n       uint256 pricePurchase; // 8 decimal\r\n       uint256 amountPurchased;\r\n       uint256 timestamp;\r\n       bool isAllocated;\r\n       uint256 bonus;\r\n       uint256 saleId;\r\n   } \r\n   \r\n   struct SaleInfo{\r\n       uint256 start;\r\n       uint256 end;\r\n       uint256 allocated;\r\n       uint256 totalPurchased;\r\n       uint8 priceSource;\r\n   }\r\n   \r\n   mapping(address => uint256) public totalPurchases;\r\n   mapping(address => mapping(uint256 => Sale)) public sale;\r\n   mapping(uint256 => SaleInfo) public info;\r\n   mapping(uint256 => address) public oracle;\r\n\r\n   event RevokeOwnership(address indexed _owner);\r\n   event UpdatePrice(uint256 _newPrice);\r\n   event UpdateGovernor(address indexed _governor);\r\n\r\n   constructor(\r\n       address _admin,\r\n       address _organisation,\r\n       address _ethWallet,\r\n       address _governor,\r\n       uint256 _pricePerToken,\r\n       address _ethPriceSource,\r\n       address _whitelistOracle,\r\n       address _edgexTokenContract\r\n    ) \r\n    {\r\n       admin = _admin;\r\n       organisation = _organisation;\r\n       ethWallet = _ethWallet;\r\n       governor = _governor;\r\n       pricePerToken = _pricePerToken;\r\n       whitelistOracle = _whitelistOracle;\r\n       ethPriceSource = _ethPriceSource;\r\n       edgexTokenContract = _edgexTokenContract;\r\n   }\r\n   \r\n   modifier onlyAdmin(){\r\n       require(msg.sender == admin, \"Caller not admin\");\r\n       _;\r\n   }\r\n   \r\n   modifier onlyGovernor(){\r\n       require(msg.sender == governor, \"Caller not governor\");\r\n       _;\r\n   }\r\n\r\n   modifier isZero(address _address){\r\n       require(_address != address(0),\"Invalid Address\");\r\n       _;\r\n   }\r\n\r\n   function isWhitelisted(address _user) public virtual view returns(bool){\r\n        return IWhiteListOracle(whitelistOracle).whitelisted(_user);\r\n   }\r\n   \r\n   function createSaleContract(uint256 _allocated, uint8 _source) public onlyGovernor returns(bool) {\r\n       require(\r\n           Math.add(lastCreated,2 hours) < block.timestamp,\r\n           \"Create After Sometime\"\r\n       );\r\n       SaleInfo storage i = info[Math.add(totalSaleContracts,1)];\r\n       i.start = block.timestamp;\r\n       i.end = Math.add(block.timestamp,2 hours);\r\n       i.allocated = Math.mul(_allocated,10 ** 18);\r\n       i.priceSource = _source;\r\n       lastCreated = block.timestamp;\r\n       totalSaleContracts = Math.add(totalSaleContracts,1);\r\n       return true;   \r\n   }\r\n   \r\n   function increaseAllocation(uint256 _amount, uint256 _saleId) public onlyGovernor returns(bool){\r\n       SaleInfo storage i = info[_saleId];\r\n       require(\r\n         block.timestamp < i.end,\r\n         \"Sale Ended\"\r\n       );\r\n       i.allocated = Math.add(\r\n                     i.allocated,\r\n                     Math.mul(_amount,10**18)\r\n                     );\r\n       return true;\r\n       \r\n   }\r\n   \r\n   function purchaseWithEth() public payable nonReentrant returns(bool){\r\n       SaleInfo storage i = info[totalSaleContracts];\r\n       require(\r\n            i.totalPurchased <= i.allocated, \r\n            \"Sold Out\"\r\n        );\r\n        require(\r\n            block.timestamp < i.end,\r\n            \"Purchase Ended\"\r\n        );\r\n        require(isWhitelisted(msg.sender),\"Address not verified\");\r\n        (\r\n            uint256 _amountToken,\r\n            uint256 _pricePurchase,\r\n            uint256 _usdPurchase\r\n        )   = resolverEther(msg.value);\r\n        Sale storage s = sale[msg.sender][Math.add(totalPurchases[msg.sender],1)];\r\n        s.usdPurchase = _usdPurchase;\r\n        s.amountPurchased = _amountToken;\r\n        s.pricePurchase = _pricePurchase;\r\n        s.timestamp = block.timestamp;\r\n        s.saleId = totalSaleContracts;\r\n        i.totalPurchased = Math.add(i.totalPurchased,_amountToken);\r\n        totalPurchases[msg.sender] = Math.add(totalPurchases[msg.sender],1);\r\n        payable(ethWallet).transfer(msg.value);\r\n        return true;\r\n   }\r\n   \r\n   function adminPurchase(\r\n        uint256 _amountToken,\r\n        uint256 _usdPurchase,\r\n        uint256 _pricePurchase\r\n        ) public onlyGovernor returns(bool){\r\n        SaleInfo storage i = info[totalSaleContracts];\r\n        require(\r\n            i.totalPurchased <= i.allocated, \r\n            \"Sold Out\"\r\n        );\r\n        require(\r\n            block.timestamp < i.end,\r\n            \"Purchase Ended\"\r\n        );\r\n        Sale storage s = sale[msg.sender][Math.add(totalPurchases[msg.sender],1)];\r\n        s.usdPurchase = _usdPurchase;\r\n        s.amountPurchased = _amountToken;\r\n        s.pricePurchase = _pricePurchase;\r\n        s.timestamp = block.timestamp;\r\n        s.saleId = totalSaleContracts;\r\n        i.totalPurchased = Math.add(i.totalPurchased,_amountToken);\r\n        totalPurchases[msg.sender] = Math.add(totalPurchases[msg.sender],1);\r\n        return true;\r\n   }\r\n   \r\n   function resolverEther(uint256 _amountEther) public view returns(uint256,uint256,uint256){\r\n        uint256 ethPrice = uint256(fetchEthPrice());\r\n                ethPrice = Math.mul(_amountEther,ethPrice);\r\n        uint256 price = fetchTokenPrice();\r\n        uint256 _tokenAmount = Math.div(ethPrice,price);\r\n        return(_tokenAmount,price,ethPrice);\r\n    }\r\n    \r\n    function fetchTokenPrice() public view returns(uint256){\r\n        SaleInfo storage i = info[totalSaleContracts];\r\n        if(i.priceSource == 0){\r\n            return pricePerToken;\r\n        }\r\n        else{\r\n            return uint256(fetchEdgexPrice());\r\n        }\r\n    }\r\n   \r\n   function fetchEthPrice() public view returns (int) {\r\n        (\r\n            uint80 roundID, \r\n            int price,\r\n            uint startedAt,\r\n            uint timeStamp,\r\n            uint80 answeredInRound\r\n        ) = AggregatorV3Interface(ethPriceSource).latestRoundData();\r\n        return price;\r\n    }\r\n    \r\n    function fetchEdgexPrice() public view returns (uint256) {\r\n        uint256 totalPrice;\r\n        uint256 validOracles;\r\n        for(uint256 i = 0; i < totalOracles ; i++){\r\n        if(oracle[i] != address(0)){\r\n        (\r\n            uint80 roundID, \r\n            int price,\r\n            uint startedAt,\r\n            uint timeStamp,\r\n            uint80 answeredInRound\r\n        ) = AggregatorV3Interface(oracle[i]).latestRoundData();\r\n        totalPrice = Math.add(totalPrice,uint256(price));\r\n        validOracles = Math.add(validOracles,1);\r\n        }\r\n        }\r\n        return Math.div(totalPrice, validOracles);\r\n    }\r\n    \r\n    function claim(uint256 _saleId) public nonReentrant returns(bool){\r\n        Sale storage s = sale[msg.sender][_saleId];\r\n        SaleInfo storage i = info[s.saleId];\r\n        require(\r\n            !s.isAllocated,\r\n            \"Already Settled\"\r\n        );\r\n        require(\r\n            block.timestamp > i.end,\r\n            \"Sale Not Yet Ended\"\r\n        );\r\n        uint256 _bonusTokens = resolveBonus(_saleId,msg.sender);\r\n        s.bonus = _bonusTokens;\r\n        s.isAllocated = true;\r\n        IERC20(edgexTokenContract)\r\n        .transfer(\r\n            msg.sender, \r\n            Math.add(s.amountPurchased,_bonusTokens)\r\n            );\r\n         IERC20(edgexTokenContract)\r\n        .transfer(\r\n            organisation, \r\n            Math.div(s.amountPurchased,100)\r\n        );\r\n        return true;\r\n    }\r\n    \r\n    function resolveBonus(uint256 _saleId,address _user) public view returns(uint256){\r\n        Sale storage s = sale[_user][_saleId];\r\n        uint256 _bonusPercent = resolveBonusPercent(s.saleId);\r\n        uint256 _bonusTokens = Math.mul(s.amountPurchased,_bonusPercent);\r\n                _bonusTokens = Math.div(_bonusTokens,10**6);\r\n        return _bonusTokens;\r\n    }\r\n    \r\n    function resolveBonusPercent(uint256 _saleId) public view returns(uint256){\r\n        SaleInfo storage i = info[_saleId];\r\n        uint _salePercent = Math.div(\r\n                            Math.mul(i.totalPurchased,10**6),\r\n                            i.allocated);\r\n        if(_salePercent < 30 * 10 ** 4) {\r\n            return 0;\r\n        }\r\n        else if(_salePercent > 30 * 10 ** 4 && _salePercent < 40 * 10 ** 4){\r\n            return 10000;\r\n        }\r\n        else if(_salePercent > 40 * 10 ** 4 && _salePercent < 50 * 10 ** 4){\r\n            return 25000;\r\n        }\r\n        else if(_salePercent > 50 * 10 ** 4 && _salePercent < 60 * 10 ** 4){\r\n            return 40000;\r\n        }\r\n        else if(_salePercent > 60 * 10 ** 4 && _salePercent < 70 * 10 ** 4){\r\n            return 50000;\r\n        }\r\n        else if(_salePercent > 70 * 10 ** 4 && _salePercent < 80 * 10 ** 4){\r\n            return 65000;\r\n        }\r\n        else if(_salePercent > 80 * 10 ** 4 && _salePercent < 90 * 10 ** 4){\r\n            return 75000;\r\n        }\r\n        else{\r\n            return 100000;\r\n        }\r\n    }\r\n    \r\n    function updateNewEdgexSource(address _newSource, uint8 index) public onlyAdmin isZero(_newSource) returns(bool){\r\n        oracle[index] = _newSource;\r\n        return true;\r\n    }\r\n    \r\n    function revokeOwnership(address _newOwner) public onlyAdmin isZero(_newOwner) returns(bool){\r\n        admin = payable(_newOwner);\r\n        emit RevokeOwnership(_newOwner);\r\n        return true;\r\n    }\r\n    \r\n    function updateEthSource(address _newSource) public onlyAdmin isZero(_newSource) returns(bool){\r\n        ethPriceSource = _newSource;\r\n        return true;\r\n    }\r\n    \r\n     function updateEdgexTokenContract(address _newSource) public onlyAdmin isZero(_newSource) returns(bool){\r\n        edgexTokenContract = _newSource;\r\n        return true;\r\n    }\r\n    \r\n    function updatePricePerToken(uint256 _price) public onlyAdmin returns(bool){\r\n        pricePerToken = _price;\r\n        emit UpdatePrice(_price);\r\n        return true;\r\n    }    \r\n\r\n    function drain(address _to, uint256 _amount) public onlyAdmin isZero(_to) returns(bool){\r\n        IERC20(edgexTokenContract).transfer(_to,_amount);\r\n        return true;\r\n    }\r\n\r\n    function updateWhiteListOracle(address _newOracle) public onlyAdmin isZero(_newOracle) returns(bool){\r\n        whitelistOracle = _newOracle;\r\n        return true;\r\n    }\r\n\r\n    function updateGovernor(address _newGovernor) public onlyGovernor isZero(_newGovernor) returns(bool){\r\n        governor = _newGovernor;\r\n        emit UpdateGovernor(_newGovernor);\r\n        return true;\r\n    }\r\n\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_admin\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_organisation\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_ethWallet\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_governor\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_pricePerToken\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_ethPriceSource\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_whitelistOracle\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_edgexTokenContract\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"RevokeOwnership\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_governor\",\"type\":\"address\"}],\"name\":\"UpdateGovernor\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_newPrice\",\"type\":\"uint256\"}],\"name\":\"UpdatePrice\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"admin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amountToken\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_usdPurchase\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_pricePurchase\",\"type\":\"uint256\"}],\"name\":\"adminPurchase\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_saleId\",\"type\":\"uint256\"}],\"name\":\"claim\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_allocated\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"_source\",\"type\":\"uint8\"}],\"name\":\"createSaleContract\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"drain\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"edgexTokenContract\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ethPriceSource\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ethWallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fetchEdgexPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fetchEthPrice\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fetchTokenPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"governor\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_saleId\",\"type\":\"uint256\"}],\"name\":\"increaseAllocation\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"info\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"start\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"end\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"allocated\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalPurchased\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"priceSource\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"isWhitelisted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastCreated\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"oracle\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"organisation\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pricePerToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"purchaseWithEth\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_saleId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"resolveBonus\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_saleId\",\"type\":\"uint256\"}],\"name\":\"resolveBonusPercent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amountEther\",\"type\":\"uint256\"}],\"name\":\"resolverEther\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"revokeOwnership\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"sale\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"usdPurchase\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"pricePurchase\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountPurchased\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isAllocated\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"bonus\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"saleId\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalOracles\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"totalPurchases\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSaleContracts\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newSource\",\"type\":\"address\"}],\"name\":\"updateEdgexTokenContract\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newSource\",\"type\":\"address\"}],\"name\":\"updateEthSource\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newGovernor\",\"type\":\"address\"}],\"name\":\"updateGovernor\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newSource\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"index\",\"type\":\"uint8\"}],\"name\":\"updateNewEdgexSource\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_price\",\"type\":\"uint256\"}],\"name\":\"updatePricePerToken\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newOracle\",\"type\":\"address\"}],\"name\":\"updateWhiteListOracle\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"whitelistOracle\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"MomentumSaleV1","CompilerVersion":"v0.7.4+commit.3f05b770","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"00000000000000000000000070380d51ca216dc8453729a70c61b7a93515ef820000000000000000000000003d749c4be39a38658e36719925b6a791f5dee9df00000000000000000000000080ca65b74d1b9fad4ff796565d78ca1da558d193000000000000000000000000f344305856b5990a0e5e842f9bd688aa18158b4c0000000000000000000000000000000000000000000000000000000002faf0800000000000000000000000005f4ec3df9cbd43714fe2740f5e3616155c5b841900000000000000000000000097f240e7d304f68723b25080fc798ead12d713d0000000000000000000000000c1f5e9185e0a84a9922acecd72a672bed3bbfb4e","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"ipfs://61eec0ca71bf620f5fc57695d1d647a06abc518142f5be937fe8c3f6fbcbcf82"}]}