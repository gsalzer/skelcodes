{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.5.8;\r\n\r\ncontract SHIBADOUBLER {\r\n    using SafeMath for uint;\r\n\r\n    IERC20 public token;\r\n\r\n    uint constant public DEPOSITS_MAX = 100;\r\n    uint constant public INVEST_MIN_AMOUNT = 1000000 * (10 ** 18); // 1m\r\n    uint constant public BASE_PERCENT = 1000; // 10%\r\n    uint public REFERRAL_PERCENTS = 1000;\r\n    uint constant public MARKETING_FEE = 800;\r\n    uint constant public PLATFORM_FEE = 200;\r\n    uint constant public MAX_CONTRACT_PERCENT = 5000;\r\n    uint constant public MAX_HOLD_PERCENT = 1000;\r\n    uint constant public PERCENTS_DIVIDER = 10000;\r\n    uint constant public CONTRACT_BALANCE_STEP = 88000000 * (10 ** 18); // 88m\r\n    uint constant public TIME_STEP = 1 days;\r\n\r\n    uint public totalDeposits;\r\n    uint public totalInvested;\r\n    uint public totalWithdrawn;\r\n\r\n    uint public contractPercent;\r\n\r\n    address public marketingAddress;\r\n    address public platformAddress;\r\n\r\n    struct Deposit {\r\n        uint128 amount;\r\n        uint128 withdrawn;\r\n        uint128 refback;\r\n        uint32 start;\r\n    }\r\n\r\n    struct User {\r\n        Deposit[] deposits;\r\n        uint32 checkpoint;\r\n        address referrer;\r\n        uint16 rbackPercent;\r\n        uint256 bonus;\r\n        uint256 availableBonus;\r\n        uint24 refs;\r\n    }\r\n\r\n    uint256 public marketingAvailable;\r\n    uint256 public platformAvailable;\r\n\r\n    mapping (address => User) internal users;\r\n\r\n    event Newbie(address user);\r\n    event NewDeposit(address indexed user, uint amount);\r\n    event Withdrawn(address indexed user, uint amount);\r\n    event RefBonus(address indexed referrer, address indexed referral, uint amount);\r\n    event RefBack(address indexed referrer, address indexed referral, uint amount);\r\n    event FeePayed(address indexed user, uint totalAmount);\r\n\r\n    constructor(address marketingAddr, address platformAddr, IERC20 tokenAddr) public {\r\n        require(!isContract(marketingAddr) && !isContract(platformAddr));\r\n\r\n        token = tokenAddr;\r\n\r\n        marketingAddress = marketingAddr;\r\n        platformAddress = platformAddr;\r\n\r\n        contractPercent = getContractBalanceRate();\r\n    }\r\n\r\n    function invest(uint depAmount, address referrer) public {\r\n        require(!isContract(msg.sender) && msg.sender == tx.origin);\r\n\r\n        require(depAmount >= INVEST_MIN_AMOUNT, \"Minimum deposit amount 1000000 SHIBA\");\r\n\r\n        User storage user = users[msg.sender];\r\n\r\n        require(user.deposits.length < DEPOSITS_MAX, \"Maximum 100 deposits from address\");\r\n\r\n        token.transferFrom(msg.sender, address(this), depAmount);\r\n\r\n        uint marketingFee = depAmount.mul(MARKETING_FEE).div(PERCENTS_DIVIDER);\r\n        uint platformFee = depAmount.mul(PLATFORM_FEE).div(PERCENTS_DIVIDER);\r\n\r\n        marketingAvailable = marketingAvailable.add(marketingFee);\r\n        platformAvailable = platformAvailable.add(platformFee);\r\n\r\n        if (user.referrer == address(0) && users[referrer].deposits.length > 0 && referrer != msg.sender) {\r\n            user.referrer = referrer;\r\n        }\r\n\r\n        uint refbackAmount;\r\n        if (user.referrer != address(0)) {\r\n            address upline = user.referrer;\r\n\r\n            uint amount = depAmount.mul(REFERRAL_PERCENTS).div(PERCENTS_DIVIDER);\r\n\r\n            if (users[upline].rbackPercent > 0) {\r\n                refbackAmount = amount.mul(uint(users[upline].rbackPercent)).div(PERCENTS_DIVIDER);\r\n                users[msg.sender].availableBonus = users[msg.sender].availableBonus.add(refbackAmount);\r\n\r\n                emit RefBack(upline, msg.sender, refbackAmount);\r\n\r\n                amount = amount.sub(refbackAmount);\r\n            }\r\n\r\n            if (amount > 0) {\r\n                users[upline].bonus = users[upline].bonus.add(amount);\r\n                users[upline].availableBonus = users[upline].availableBonus.add(amount);\r\n                emit RefBonus(upline, msg.sender, amount);\r\n            }\r\n\r\n            users[upline].refs++;\r\n        }\r\n\r\n        if (user.deposits.length == 0) {\r\n            user.checkpoint = uint32(block.timestamp);\r\n            emit Newbie(msg.sender);\r\n        }\r\n\r\n        user.deposits.push(Deposit(uint128(depAmount), 0, uint128(refbackAmount), uint32(block.timestamp)));\r\n\r\n        totalInvested = totalInvested.add(depAmount);\r\n        totalDeposits++;\r\n\r\n        if (contractPercent < BASE_PERCENT.add(MAX_CONTRACT_PERCENT)) {\r\n            uint contractPercentNew = getContractBalanceRate();\r\n            if (contractPercentNew > contractPercent) {\r\n                contractPercent = contractPercentNew;\r\n            }\r\n        }\r\n\r\n        emit NewDeposit(msg.sender, depAmount);\r\n    }\r\n\r\n    function withdraw() public {\r\n        User storage user = users[msg.sender];\r\n\r\n        uint userPercentRate = getUserPercentRate(msg.sender);\r\n\r\n        uint totalAmount;\r\n        uint dividends;\r\n\r\n        for (uint i = 0; i < user.deposits.length; i++) {\r\n\r\n            if (uint(user.deposits[i].withdrawn) < uint(user.deposits[i].amount).mul(2)) {\r\n\r\n                if (user.deposits[i].start > user.checkpoint) {\r\n\r\n                    dividends = (uint(user.deposits[i].amount).mul(userPercentRate).div(PERCENTS_DIVIDER))\r\n                        .mul(block.timestamp.sub(uint(user.deposits[i].start)))\r\n                        .div(TIME_STEP);\r\n\r\n                } else {\r\n\r\n                    dividends = (uint(user.deposits[i].amount).mul(userPercentRate).div(PERCENTS_DIVIDER))\r\n                        .mul(block.timestamp.sub(uint(user.checkpoint)))\r\n                        .div(TIME_STEP);\r\n\r\n                }\r\n\r\n                if (uint(user.deposits[i].withdrawn).add(dividends) > uint(user.deposits[i].amount).mul(2)) {\r\n                    dividends = (uint(user.deposits[i].amount).mul(2)).sub(uint(user.deposits[i].withdrawn));\r\n                }\r\n\r\n                user.deposits[i].withdrawn = uint128(uint(user.deposits[i].withdrawn).add(dividends)); /// changing of storage data\r\n                totalAmount = totalAmount.add(dividends);\r\n\r\n            }\r\n        }\r\n        \r\n        totalAmount = totalAmount.add(user.availableBonus);\r\n\r\n        require(totalAmount > 0, \"User has no dividends\");\r\n\r\n        uint contractBalance = token.balanceOf(address(this));\r\n        if (contractBalance < totalAmount) {\r\n            totalAmount = contractBalance;\r\n        }\r\n\r\n        user.checkpoint = uint32(block.timestamp);\r\n        user.availableBonus = 0;\r\n\r\n        token.transfer(msg.sender, totalAmount);\r\n\r\n        totalWithdrawn = totalWithdrawn.add(totalAmount);\r\n\r\n        emit Withdrawn(msg.sender, totalAmount);\r\n    }\r\n\r\n    function setRefback(uint16 rbackPercent) public {\r\n        require(rbackPercent <= 10000);\r\n\r\n        User storage user = users[msg.sender];\r\n\r\n        if (user.deposits.length > 0) {\r\n            user.rbackPercent = rbackPercent;\r\n        }\r\n    }\r\n\r\n    function getContractBalance() public view returns (uint) {\r\n        return token.balanceOf(address(this));\r\n    }\r\n\r\n    function getContractBalanceRate() internal view returns (uint) {\r\n        uint contractBalance = token.balanceOf(address(this));\r\n        uint contractBalancePercent = BASE_PERCENT.add(contractBalance.div(CONTRACT_BALANCE_STEP).mul(2)); // +0.02% per 88m coins\r\n\r\n        if (contractBalancePercent < BASE_PERCENT.add(MAX_CONTRACT_PERCENT)) {\r\n            return contractBalancePercent;\r\n        } else {\r\n            return BASE_PERCENT.add(MAX_CONTRACT_PERCENT);\r\n        }\r\n    }\r\n\r\n    function getUserPercentRate(address userAddress) public view returns (uint) {\r\n        User storage user = users[userAddress];\r\n\r\n        if (isActive(userAddress)) {\r\n            uint timeMultiplier = (block.timestamp.sub(uint(user.checkpoint))).div(TIME_STEP).mul(100); // +1% per day\r\n            if (timeMultiplier > MAX_HOLD_PERCENT) {\r\n                timeMultiplier = MAX_HOLD_PERCENT;\r\n            }\r\n            return contractPercent.add(timeMultiplier);\r\n        } else {\r\n            return contractPercent;\r\n        }\r\n    }\r\n\r\n    function getUserAvailable(address userAddress) public view returns (uint) {\r\n        User storage user = users[userAddress];\r\n\r\n        uint userPercentRate = getUserPercentRate(userAddress);\r\n\r\n        uint totalDividends;\r\n        uint dividends;\r\n\r\n        for (uint i = 0; i < user.deposits.length; i++) {\r\n\r\n            if (uint(user.deposits[i].withdrawn) < uint(user.deposits[i].amount).mul(2)) {\r\n\r\n                if (user.deposits[i].start > user.checkpoint) {\r\n\r\n                    dividends = (uint(user.deposits[i].amount).mul(userPercentRate).div(PERCENTS_DIVIDER))\r\n                        .mul(block.timestamp.sub(uint(user.deposits[i].start)))\r\n                        .div(TIME_STEP);\r\n\r\n                } else {\r\n\r\n                    dividends = (uint(user.deposits[i].amount).mul(userPercentRate).div(PERCENTS_DIVIDER))\r\n                        .mul(block.timestamp.sub(uint(user.checkpoint)))\r\n                        .div(TIME_STEP);\r\n\r\n                }\r\n\r\n                if (uint(user.deposits[i].withdrawn).add(dividends) > uint(user.deposits[i].amount).mul(2)) {\r\n                    dividends = (uint(user.deposits[i].amount).mul(2)).sub(uint(user.deposits[i].withdrawn));\r\n                }\r\n\r\n                totalDividends = totalDividends.add(dividends);\r\n\r\n                /// no update of withdrawn because that is view function\r\n\r\n            }\r\n\r\n        }\r\n\r\n        return totalDividends.add(user.availableBonus);\r\n    }\r\n\r\n    function isActive(address userAddress) public view returns (bool) {\r\n        User storage user = users[userAddress];\r\n\r\n        return (user.deposits.length > 0) && uint(user.deposits[user.deposits.length-1].withdrawn) < uint(user.deposits[user.deposits.length-1].amount).mul(2);\r\n    }\r\n\r\n    function getUserAmountOfDeposits(address userAddress) public view returns (uint) {\r\n        return users[userAddress].deposits.length;\r\n    }\r\n\r\n    function getUserTotalDeposits(address userAddress) public view returns (uint) {\r\n        User storage user = users[userAddress];\r\n\r\n        uint amount;\r\n\r\n        for (uint i = 0; i < user.deposits.length; i++) {\r\n            amount = amount.add(uint(user.deposits[i].amount));\r\n        }\r\n\r\n        return amount;\r\n    }\r\n\r\n    function getUserTotalWithdrawn(address userAddress) public view returns (uint) {\r\n        User storage user = users[userAddress];\r\n\r\n        uint amount = user.bonus;\r\n\r\n        for (uint i = 0; i < user.deposits.length; i++) {\r\n            amount = amount.add(uint(user.deposits[i].withdrawn)).add(uint(user.deposits[i].refback));\r\n        }\r\n\r\n        return amount;\r\n    }\r\n\r\n    function getUserDeposits(address userAddress, uint last, uint first) public view returns (uint[] memory, uint[] memory, uint[] memory, uint[] memory) {\r\n        User storage user = users[userAddress];\r\n\r\n        uint count = first.sub(last);\r\n        if (count > user.deposits.length) {\r\n            count = user.deposits.length;\r\n        }\r\n\r\n        uint[] memory amount = new uint[](count);\r\n        uint[] memory withdrawn = new uint[](count);\r\n        uint[] memory refback = new uint[](count);\r\n        uint[] memory start = new uint[](count);\r\n\r\n        uint index = 0;\r\n        for (uint i = first; i > last; i--) {\r\n            amount[index] = uint(user.deposits[i-1].amount);\r\n            withdrawn[index] = uint(user.deposits[i-1].withdrawn);\r\n            refback[index] = uint(user.deposits[i-1].refback);\r\n            start[index] = uint(user.deposits[i-1].start);\r\n            index++;\r\n        }\r\n\r\n        return (amount, withdrawn, refback, start);\r\n    }\r\n\r\n    function getSiteStats() public view returns (uint, uint, uint, uint) {\r\n        return (totalInvested, totalDeposits, getContractBalance(), contractPercent);\r\n    }\r\n\r\n    function getUserStats(address userAddress) public view returns (uint, uint, uint, uint, uint) {\r\n        uint userPerc = getUserPercentRate(userAddress);\r\n        uint userAvailable = getUserAvailable(userAddress);\r\n        uint userDepsTotal = getUserTotalDeposits(userAddress);\r\n        uint userDeposits = getUserAmountOfDeposits(userAddress);\r\n        uint userWithdrawn = getUserTotalWithdrawn(userAddress);\r\n\r\n        return (userPerc, userAvailable, userDepsTotal, userDeposits, userWithdrawn);\r\n    }\r\n\r\n    function getUserReferralsStats(address userAddress) public view returns (address, uint16, uint16, uint256, uint256, uint24) {\r\n        User storage user = users[userAddress];\r\n\r\n        return (user.referrer, user.rbackPercent, users[user.referrer].rbackPercent, user.bonus, user.availableBonus, user.refs);\r\n    }\r\n\r\n    function isContract(address addr) internal view returns (bool) {\r\n        uint size;\r\n        assembly { size := extcodesize(addr) }\r\n        return size > 0;\r\n    }\r\n\r\n    function recieveMarketing() public payable {\r\n        require(marketingAvailable > 0, \"nothing to recieve\");\r\n\r\n        uint value = marketingAvailable;\r\n        marketingAvailable = 0;\r\n\r\n        token.transfer(marketingAddress, value);\r\n\r\n        emit FeePayed(marketingAddress, value);\r\n    }\r\n\r\n    function recievePlatform() public payable {\r\n        require(platformAvailable > 0, \"nothing to recieve\");\r\n\r\n        uint value = platformAvailable;\r\n        platformAvailable = 0;\r\n\r\n        token.transfer(platformAddress, value);\r\n\r\n        emit FeePayed(platformAddress, value);\r\n    }\r\n\r\n}\r\n\r\ninterface IERC20 {\r\n    function totalSupply() external view returns (uint256);\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\nlibrary Address {\r\n\r\n    function isContract(address account) internal view returns (bool) {\r\n        bytes32 codehash;\r\n        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\r\n        assembly { codehash := extcodehash(account) }\r\n        return (codehash != 0x0 && codehash != accountHash);\r\n    }\r\n\r\n}\r\n\r\nlibrary SafeMath {\r\n\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b <= a, \"SafeMath: subtraction overflow\");\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b > 0, \"SafeMath: division by zero\");\r\n        uint256 c = a / b;\r\n\r\n        return c;\r\n    }\r\n\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"PERCENTS_DIVIDER\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"userAddress\",\"type\":\"address\"}],\"name\":\"getUserAvailable\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"userAddress\",\"type\":\"address\"}],\"name\":\"getUserPercentRate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"MAX_CONTRACT_PERCENT\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getSiteStats\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"userAddress\",\"type\":\"address\"}],\"name\":\"getUserReferralsStats\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"uint16\"},{\"name\":\"\",\"type\":\"uint16\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint24\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"TIME_STEP\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"marketingAvailable\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"PLATFORM_FEE\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"depAmount\",\"type\":\"uint256\"},{\"name\":\"referrer\",\"type\":\"address\"}],\"name\":\"invest\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"REFERRAL_PERCENTS\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"MAX_HOLD_PERCENT\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"userAddress\",\"type\":\"address\"},{\"name\":\"last\",\"type\":\"uint256\"},{\"name\":\"first\",\"type\":\"uint256\"}],\"name\":\"getUserDeposits\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256[]\"},{\"name\":\"\",\"type\":\"uint256[]\"},{\"name\":\"\",\"type\":\"uint256[]\"},{\"name\":\"\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalWithdrawn\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"userAddress\",\"type\":\"address\"}],\"name\":\"getUserStats\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalInvested\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"BASE_PERCENT\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"rbackPercent\",\"type\":\"uint16\"}],\"name\":\"setRefback\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"CONTRACT_BALANCE_STEP\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getContractBalance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalDeposits\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"userAddress\",\"type\":\"address\"}],\"name\":\"getUserTotalDeposits\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"recieveMarketing\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"contractPercent\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"userAddress\",\"type\":\"address\"}],\"name\":\"isActive\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"marketingAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"userAddress\",\"type\":\"address\"}],\"name\":\"getUserAmountOfDeposits\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"DEPOSITS_MAX\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"MARKETING_FEE\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"platformAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"INVEST_MIN_AMOUNT\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"platformAvailable\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"userAddress\",\"type\":\"address\"}],\"name\":\"getUserTotalWithdrawn\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"recievePlatform\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"marketingAddr\",\"type\":\"address\"},{\"name\":\"platformAddr\",\"type\":\"address\"},{\"name\":\"tokenAddr\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"user\",\"type\":\"address\"}],\"name\":\"Newbie\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"NewDeposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Withdrawn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"referrer\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"referral\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"RefBonus\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"referrer\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"referral\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"RefBack\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"totalAmount\",\"type\":\"uint256\"}],\"name\":\"FeePayed\",\"type\":\"event\"}]","ContractName":"SHIBADOUBLER","CompilerVersion":"v0.5.8+commit.23d335f2","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"0000000000000000000000007eeaadac95212d2683f4d2c8c0b83203135ce13b000000000000000000000000e81209fb4c63e1ae6a9cc4498d75cd4c7ae947ca00000000000000000000000095ad61b0a150d79219dcf64e1e6cc01f0b64c4ce","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"bzzr://f95c8e3024d5edf3f590b95342ed8a28231473540ff8cf1bd29a64fa1b8cf3c0"}]}