{"status":"1","message":"OK","result":[{"SourceCode":"// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.0;\r\n\r\ncontract MoonCatKeyVote {\r\n\r\n    // Should the MoonCatRescue developers destroy their private key so that no future Genesis MoonCats can ever be released?\r\n    // true  = Yes\r\n    // false = No\r\n\r\n    event VoteSubmitted(address voter, bool vote);\r\n\r\n    uint public voteStartTime = 0;\r\n    bool public voteCancelled = false;\r\n    mapping (address => bool) public hasVoted;\r\n    uint32 public yesVotes = 0;\r\n    uint32 public noVotes = 0;\r\n\r\n    //bytes32 public immutable voterRollSha256;\r\n    bytes32 public immutable merkleRoot;\r\n    address public immutable owner;\r\n\r\n    modifier onlyOwner {\r\n        require(msg.sender == owner, \"Owner Only\");\r\n        _;\r\n    }\r\n\r\n    modifier voteContractIsPending {\r\n        require(!voteCancelled, \"Vote Contract Cancelled\");\r\n        require(voteStartTime == 0, \"Vote Already Started\");\r\n        _;\r\n    }\r\n\r\n    modifier voteContractIsActive {\r\n        require(!voteCancelled, \"Vote Contract Cancelled\");\r\n        require(voteStartTime > 0, \"Vote Not Started\");\r\n        require(block.timestamp < (voteStartTime + 48 hours), \"Vote Ended\");\r\n        _;\r\n    }\r\n\r\n    modifier voteContractIsComplete {\r\n        require(!voteCancelled, \"Vote Contract Cancelled\");\r\n        require(voteStartTime > 0, \"Vote Not Started\");\r\n        require(block.timestamp > (voteStartTime + 48 hours), \"Vote Not Ended\");\r\n        _;\r\n    }\r\n\r\n    constructor(bytes32 merkleRoot_) {\r\n        merkleRoot = merkleRoot_;\r\n        owner = msg.sender;\r\n    }\r\n\r\n    function startVote() public onlyOwner voteContractIsPending  {\r\n        voteStartTime = block.timestamp;\r\n    }\r\n\r\n    function cancelVote() public onlyOwner voteContractIsPending {\r\n        voteCancelled = true;\r\n    }\r\n\r\n    function getResult() public view voteContractIsComplete returns (bool) {\r\n        return (yesVotes > noVotes);\r\n    }\r\n\r\n    uint24 empty = 0;\r\n\r\n    function submitVote(bytes32[] calldata eligibilityProof, bool vote) public voteContractIsActive  {\r\n        require(!hasVoted[msg.sender], \"Duplicate Vote\");\r\n\r\n        // https://github.com/miguelmota/merkletreejs-solidity/blob/master/contracts/MerkleProof.sol\r\n        bytes32 computedHash = keccak256(abi.encodePacked(msg.sender));\r\n        for (uint256 i = 0; i < eligibilityProof.length; i++) {\r\n            bytes32 proofElement = eligibilityProof[i];\r\n\r\n            if (computedHash < proofElement) {\r\n                computedHash = keccak256(abi.encodePacked(computedHash, proofElement));\r\n            } else {\r\n                computedHash = keccak256(abi.encodePacked(proofElement, computedHash));\r\n            }\r\n        }\r\n\r\n        require(computedHash == merkleRoot, \"Ineligible Voter\");\r\n\r\n        hasVoted[msg.sender] = true;\r\n\r\n        if(vote){\r\n            yesVotes++;\r\n        } else {\r\n            noVotes++;\r\n        }\r\n\r\n        emit VoteSubmitted(msg.sender, vote);\r\n\r\n    }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"merkleRoot_\",\"type\":\"bytes32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"voter\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"vote\",\"type\":\"bool\"}],\"name\":\"VoteSubmitted\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"cancelVote\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getResult\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"hasVoted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"merkleRoot\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"noVotes\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startVote\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"eligibilityProof\",\"type\":\"bytes32[]\"},{\"internalType\":\"bool\",\"name\":\"vote\",\"type\":\"bool\"}],\"name\":\"submitVote\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"voteCancelled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"voteStartTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"yesVotes\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"MoonCatKeyVote","CompilerVersion":"v0.8.1+commit.df193b15","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"d829a38f572517033b4aaf5d14a90939c9e75ab6375b77ed8d19be35350a4cfb","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://00da54afe55fbc617baf0fd0f03f23696d7bc6a5cf43c39aac3a082b50e97bc3"}]}