{"status":"1","message":"OK","result":[{"SourceCode":"// File: contracts\\interfaces\\IERC20.sol\r\n\r\n// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.7.6;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n// File: contracts\\ownable\\Ownable.sol\r\n\r\nabstract contract Ownable {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor () {\r\n        _owner = msg.sender;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(_owner == msg.sender, \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\n// File: contracts\\libraries\\SafeMath.sol\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts with custom message when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n// File: contracts\\timelock\\TimeLock.sol\r\n\r\n\r\n/// @author Jorge Gomes Dur├ín (jorge@smartrights.io)\r\n/// @title A vesting contract to lock tokens for ZigCoin\r\n\r\ncontract TimeLock is Ownable {\r\n    using SafeMath for uint256;\r\n\r\n    enum LockType {\r\n        PrivateSale,\r\n        Advisor,\r\n        LiquidityProviders,\r\n        Campaigns,\r\n        Reserves,\r\n        ExchangeListings,\r\n        Traders,\r\n        Founder\r\n    }\r\n\r\n    struct LockAmount {\r\n        uint8 lockType;\r\n        uint256 amount;\r\n    }\r\n\r\n    uint32 internal constant _1_MONTH_IN_SECONDS = 2592000;\r\n    uint8  internal constant _6_MONTHS = 6;\r\n\r\n    uint8 internal constant _MONTH_1_PRIVATE_SALE_FIRST_UNLOCK = 0;\r\n    uint8 internal constant _MONTH_2_PRIVATE_SALE_FIRST_UNLOCK = 3;\r\n    uint8 internal constant _MONTH_3_PRIVATE_SALE_FIRST_UNLOCK = 6;    \r\n\r\n    uint8 internal constant _PERCENTS_1_VESTING_PRIVATE_SALES = 30;\r\n    uint8 internal constant _PERCENTS_2_VESTING_PRIVATE_SALES = 60;\r\n    uint8 internal constant _PERCENTS_3_VESTING_PRIVATE_SALES = 100;\r\n\r\n    address immutable private token;\r\n    uint256 private tokenListedAt;\r\n    \r\n    mapping(address => LockAmount) private balances;\r\n    mapping(address => uint256) private withdrawn;\r\n\r\n    event TokenListed(address indexed from, uint256 datetime);\r\n    event TokensLocked(address indexed wallet, uint256 balance, uint8 lockType);\r\n    event TokensUnlocked(address indexed wallet);\r\n    event Withdrawal(address indexed wallet, uint256 balance);\r\n    event EmergencyWithdrawal(address indexed wallet, uint256 balance);\r\n\r\n    constructor(address _token) {\r\n        token = _token;  \r\n    }\r\n\r\n    /** \r\n     * @notice locks an amount of tokens to a wallet. Call only before listing the token\r\n     * @param _user     --> wallet that will receive the tokens once unlocked\r\n     * @param _balance  --> balance to lock\r\n     * @param _lockType --> lock type to know what unlock rules apply\r\n     */\r\n    function lockTokens(address _user, uint256 _balance, uint8 _lockType) external onlyOwner {\r\n        require(tokenListedAt == 0, \"TokenAlreadyListed\");\r\n        require(balances[_user].amount == 0, \"WalletExistsYet\");  \r\n        require(_lockType >= 0 && _lockType <= 7, \"BadLockType\");      \r\n\r\n        balances[_user] = LockAmount(_lockType, _balance);\r\n\r\n        emit TokensLocked(_user, _balance, _lockType);\r\n    }\r\n\r\n    /** \r\n     * @notice remove a token lock. Use if there's any mistake locking tokens\r\n     * @param _user --> wallet to remove tokens\r\n     */\r\n    function unlockTokens(address _user) external onlyOwner {\r\n        require(tokenListedAt == 0, \"TokenAlreadyListed\");\r\n        require(balances[_user].amount > 0, \"WalletNotFound\");\r\n\r\n        delete balances[_user];\r\n\r\n        emit TokensUnlocked(_user);\r\n    }\r\n\r\n    /** \r\n     * @notice send available tokens to the wallet once are unlocked\r\n     * @param _user    --> wallet that will receive the tokens\r\n     * @param _amount  --> amount to withdraw\r\n     */\r\n    function withdraw(address _user, uint256 _amount) external onlyOwner {\r\n        require(tokenListedAt > 0, \"TokenNotListedYet\");\r\n        require(balances[_user].amount > 0, \"WalletNotFound\");\r\n        require(_amount > 0, \"BadAmount\");\r\n\r\n        uint256 canWithdrawAmount = _canWithdraw(_user);\r\n        uint256 amountWithdrawn = withdrawn[_user];\r\n\r\n        require(canWithdrawAmount > amountWithdrawn, \"CantWithdrawYet\");\r\n        require(canWithdrawAmount - amountWithdrawn >= _amount, \"AmountExceedsAllowance\");\r\n\r\n        withdrawn[_user] += _amount;\r\n        IERC20(token).transfer(_user, _amount);\r\n\r\n        emit Withdrawal(_user, _amount);\r\n    }\r\n\r\n    /** \r\n     * @notice unlock all the tokens. Only use if there's any emergency\r\n     */\r\n    function emergencyWithdraw() external onlyOwner {\r\n        IERC20 erc20 = IERC20(token);\r\n        \r\n        uint256 balance = erc20.balanceOf(address(this));\r\n        erc20.transfer(owner(), balance);\r\n\r\n        emit EmergencyWithdrawal(msg.sender, balance);\r\n    }\r\n\r\n    /**\r\n     * @notice set the listing date to start the count for unlock tokens\r\n     */\r\n    function setTokenListed() external onlyOwner {\r\n        require(tokenListedAt == 0, \"TokenAlreadyListed\");\r\n        tokenListedAt = block.timestamp;\r\n        \r\n        emit TokenListed(msg.sender, tokenListedAt);\r\n    }\r\n\r\n    /** \r\n     * @notice get the token listing date\r\n     * @return listing date\r\n     */ \r\n    function getTokenListedAt() external view returns (uint256) {\r\n        return tokenListedAt;\r\n    }\r\n\r\n    /** \r\n     * @notice get the total locked balance of a wallet in the contract\r\n     * @param _user --> wallet\r\n     * @return amount locked amount\r\n     * @return lockType wallet type\r\n     */ \r\n    function balanceOf(address _user) external view returns(uint256 amount, uint8 lockType) {\r\n        amount = balances[_user].amount;\r\n        lockType = balances[_user].lockType;\r\n    }\r\n\r\n    /** \r\n     * @notice get the total locked balance of a wallet in the contract\r\n     * @param _user --> wallet\r\n     * @return locked amount and wallet type\r\n     */ \r\n    function balanceOfWithdrawan(address _user) external view returns(uint256) {\r\n        return withdrawn[_user];\r\n    }\r\n\r\n    /** \r\n     * @notice get the total of tokens in the contract\r\n     * @return tokens amount\r\n     */ \r\n    function getContractFunds() external view returns (uint256) {\r\n        return IERC20(token).balanceOf(address(this));\r\n    }\r\n\r\n    /** \r\n     * @notice get the amount of tokens that a wallet can withdraw right now\r\n     * @param _user --> wallet\r\n     * @return tokens amount\r\n     */ \r\n    function canWithdraw(address _user) external view returns (uint256) {\r\n        uint256 canWithdrawAmount = _canWithdraw(_user);\r\n        uint256 amountWithdrawn = withdrawn[_user];\r\n\r\n        return canWithdrawAmount - amountWithdrawn;\r\n    }\r\n\r\n    /** \r\n     * @notice get the number of months from token listing\r\n     * @return months\r\n     */ \r\n    function _getMonthFromTokenListed() internal view returns(uint256) {\r\n        if (tokenListedAt == 0) return 0;\r\n        if (tokenListedAt > block.timestamp) return 0;\r\n\r\n        return (block.timestamp - tokenListedAt).div(_1_MONTH_IN_SECONDS);\r\n    }\r\n\r\n    /** \r\n     * @notice get the amount of tokens that a wallet can withdraw by lock up rules\r\n     * @param _user --> wallet\r\n     * @return amount\r\n     */ \r\n    function _canWithdraw(address _user) internal view returns (uint256 amount) {\r\n        uint8 lockType = balances[_user].lockType;\r\n        \r\n        // Only if token has beed listed\r\n        if (tokenListedAt > 0) {\r\n            uint256 month = _getMonthFromTokenListed();\r\n            if (LockType(lockType) == LockType.Founder) {\r\n                // Founders have a linear 30 months unlock starting 6 months after listing\r\n                if (month >= _6_MONTHS) {\r\n                    uint monthAfterUnlock = month - _6_MONTHS + 1;\r\n                    amount = balances[_user].amount.mul(monthAfterUnlock).div(30);\r\n                    if (amount > balances[_user].amount) amount = balances[_user].amount;\r\n                }\r\n            } else if ((LockType(lockType) == LockType.PrivateSale) || (LockType(lockType) == LockType.Advisor)) {\r\n                // Private sales and advisors can unlock 30% at listing token date, 30% after 3 months and 40% after 6 months\r\n                if ((month >= _MONTH_1_PRIVATE_SALE_FIRST_UNLOCK) && (month < _MONTH_2_PRIVATE_SALE_FIRST_UNLOCK)) {\r\n                    amount = balances[_user].amount.mul(_PERCENTS_1_VESTING_PRIVATE_SALES).div(100);\r\n                } else if ((month >= _MONTH_2_PRIVATE_SALE_FIRST_UNLOCK) && (month < _MONTH_3_PRIVATE_SALE_FIRST_UNLOCK)) {\r\n                    amount = balances[_user].amount.mul(_PERCENTS_2_VESTING_PRIVATE_SALES).div(100);\r\n                } else if (month >= _MONTH_3_PRIVATE_SALE_FIRST_UNLOCK) {\r\n                    amount = balances[_user].amount;\r\n                }\r\n            } else {\r\n                // Other tokens can be withdrawn any time\r\n                amount = balances[_user].amount;\r\n            }\r\n        }\r\n    }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"name\":\"EmergencyWithdrawal\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"datetime\",\"type\":\"uint256\"}],\"name\":\"TokenListed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"lockType\",\"type\":\"uint8\"}],\"name\":\"TokensLocked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"}],\"name\":\"TokensUnlocked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"name\":\"Withdrawal\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"lockType\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"balanceOfWithdrawan\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"canWithdraw\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"emergencyWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getContractFunds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTokenListedAt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_balance\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"_lockType\",\"type\":\"uint8\"}],\"name\":\"lockTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"setTokenListed\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"unlockTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"TimeLock","CompilerVersion":"v0.7.6+commit.7338295f","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"0000000000000000000000007bebd226154e865954a87650faefa8f485d36081","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://b09a932684ddffe611659e16a7b61e9ee89655fbe923df695ca67745c96c804a"}]}