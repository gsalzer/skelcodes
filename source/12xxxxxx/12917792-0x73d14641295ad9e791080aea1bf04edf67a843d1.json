{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/Printer.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/// @title: MDJ Replicator\\n/// @author: manifold.xyz\\n\\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\\n//                                                                                                                                                        //\\n//                                                                                                                                                        //\\n//      ####    ####    ####################### ######          #######   ##################                 ###### ###############    ####    ####       //\\n//      ####    ####    ###################### #######        ########   ####################               ###### ################    ####    ####       //\\n//  ####    ####    ####    ################# ########      #########   ######         ######              ###### #############    ####    ####    ####   //\\n//  ####    ####    ####    ################ #########    ##########   ######         ######              ###### ##############    ####    ####    ####   //\\n//      ####    ####    ################### ##########  ###########   ######         ######              ###### ###################    ####    ####       //\\n//      ####    ####    ################## ########### ###########   ######         ######              ###### ####################    ####    ####       //\\n//  ####    ####    ####    ############# #######################   ######         ######   ######     ###### #################    ####    ####    ####   //\\n//  ####    ####    ####    ############ ######  #######  ######   ######         ######   ######     ###### ##################    ####    ####    ####   //\\n//      ####    ####    ####    ####### ######   #####   ######   ####################    ################# ###############    ####    ####    ####       //\\n//      ####    ####    ####    ###### ######           ######   ##################       ############### #################    ####    ####    ####       //\\n//                                                                                                                                                        //\\n//                                                                                                                                                        //\\n//       ############     ############  ###########      #####       #####      #########         #######  ###############   ##########     ###########   //\\n//      ##############   ############  ##############   #####       #####   ##############      #########  ############# ###############   #############  //\\n//     ######   ######  ######        #######   ###### #####       #####  ######     #####    ##### #####    #######   ######      #####  ######   #####  //\\n//    ###############  ############  ###############  #####       ##### ######             ######  ######   ######    ######      ###### ##############   //\\n//   #############    ######        #############   ######       ##### #####     #####   ################  ######    #######     ###### ############      //\\n//  ##############   ############# ######          ###########  #####   ############## ################## ######     ##############    ###### #####       //\\n// ######   ####### ############# #####           ###########  #####      ########    ################### #####         ########      #####    #####      //\\n//                                                                                                                                                        //\\n//                                                                                                                                                        //\\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\\n\\n\\nimport \\\"./ReplicatorInterface.sol\\\";\\n\\ncontract Printer {\\n\\n    address private constant REPLICATOR = 0xAe1fB0ccE66904b9fa2b60BeF2B8057CE2441538;\\n\\n    function printAll() external {\\n        uint256[] memory replicators = ReplicatorInterface(REPLICATOR).replicators();\\n        for (uint i = 0; i < replicators.length; i++) {\\n            ReplicatorInterface(REPLICATOR).print(replicators[i]);\\n        }\\n    }\\n\\n    function printBatch(uint256[] calldata replicators) external {\\n        for (uint i = 0; i < replicators.length; i++) {\\n            ReplicatorInterface(REPLICATOR).print(replicators[i]);\\n        }\\n    }\\n\\n}\\n\"\r\n    },\r\n    \"contracts/ReplicatorInterface.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/// @title: MDJ Replicator\\n/// @author: manifold.xyz\\n\\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\\n//                                                                                                                                                        //\\n//                                                                                                                                                        //\\n//      ####    ####    ####################### ######          #######   ##################                 ###### ###############    ####    ####       //\\n//      ####    ####    ###################### #######        ########   ####################               ###### ################    ####    ####       //\\n//  ####    ####    ####    ################# ########      #########   ######         ######              ###### #############    ####    ####    ####   //\\n//  ####    ####    ####    ################ #########    ##########   ######         ######              ###### ##############    ####    ####    ####   //\\n//      ####    ####    ################### ##########  ###########   ######         ######              ###### ###################    ####    ####       //\\n//      ####    ####    ################## ########### ###########   ######         ######              ###### ####################    ####    ####       //\\n//  ####    ####    ####    ############# #######################   ######         ######   ######     ###### #################    ####    ####    ####   //\\n//  ####    ####    ####    ############ ######  #######  ######   ######         ######   ######     ###### ##################    ####    ####    ####   //\\n//      ####    ####    ####    ####### ######   #####   ######   ####################    ################# ###############    ####    ####    ####       //\\n//      ####    ####    ####    ###### ######           ######   ##################       ############### #################    ####    ####    ####       //\\n//                                                                                                                                                        //\\n//                                                                                                                                                        //\\n//       ############     ############  ###########      #####       #####      #########         #######  ###############   ##########     ###########   //\\n//      ##############   ############  ##############   #####       #####   ##############      #########  ############# ###############   #############  //\\n//     ######   ######  ######        #######   ###### #####       #####  ######     #####    ##### #####    #######   ######      #####  ######   #####  //\\n//    ###############  ############  ###############  #####       ##### ######             ######  ######   ######    ######      ###### ##############   //\\n//   #############    ######        #############   ######       ##### #####     #####   ################  ######    #######     ###### ############      //\\n//  ##############   ############# ######          ###########  #####   ############## ################## ######     ##############    ###### #####       //\\n// ######   ####### ############# #####           ###########  #####      ########    ################### #####         ########      #####    #####      //\\n//                                                                                                                                                        //\\n//                                                                                                                                                        //\\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\\n\\n\\nimport \\\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol\\\";\\n\\ninterface ReplicatorInterface is IERC721Enumerable {\\n    function setTokenURI(uint256 tokenId, string calldata uri) external;\\n    function originReplicator(uint256 tokenId) external view returns (uint256);\\n    function replicators() external view returns (uint256[] memory);\\n    function canPrint(uint256 tokenId) external view returns (bool);\\n    function nextPrintTime(uint256 tokenId) external view returns (uint256);\\n    function remainingPrints(uint256 tokenId) external view returns (uint8);\\n    function print(uint256 tokenId) external;\\n}\\n\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Enumerable is IERC721 {\\n    /**\\n     * @dev Returns the total amount of tokens stored by the contract.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns a token ID owned by `owner` at a given `index` of its token list.\\n     * Use along with {balanceOf} to enumerate all of ``owner``'s tokens.\\n     */\\n    function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256 tokenId);\\n\\n    /**\\n     * @dev Returns a token ID at a given `index` of all the tokens stored by the contract.\\n     * Use along with {totalSupply} to enumerate all tokens.\\n     */\\n    function tokenByIndex(uint256 index) external view returns (uint256);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/IERC721.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/introspection/IERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 300\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}","ABI":"[{\"inputs\":[],\"name\":\"printAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"replicators\",\"type\":\"uint256[]\"}],\"name\":\"printBatch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"Printer","CompilerVersion":"v0.8.4+commit.c7e474f2","OptimizationUsed":"1","Runs":"300","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}