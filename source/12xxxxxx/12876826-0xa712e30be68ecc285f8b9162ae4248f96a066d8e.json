{"status":"1","message":"OK","result":[{"SourceCode":"// SPDX-License-Identifier: ART\r\n\r\npragma solidity ^0.8.0;\r\n\r\n//\r\n//  ████████╗██╗  ██╗███████╗                                            \r\n//  ╚══██╔══╝██║  ██║██╔════╝                                            \r\n//     ██║   ███████║█████╗                                              \r\n//     ██║   ██╔══██║██╔══╝                                              \r\n//     ██║   ██║  ██║███████╗                                            \r\n//     ╚═╝   ╚═╝  ╚═╝╚══════╝                                            \r\n//                                                                       \r\n//   ██████╗ ██████╗ ███╗   ██╗████████╗██████╗  █████╗  ██████╗████████╗\r\n//  ██╔════╝██╔═══██╗████╗  ██║╚══██╔══╝██╔══██╗██╔══██╗██╔════╝╚══██╔══╝\r\n//  ██║     ██║   ██║██╔██╗ ██║   ██║   ██████╔╝███████║██║        ██║   \r\n//  ██║     ██║   ██║██║╚██╗██║   ██║   ██╔══██╗██╔══██║██║        ██║   \r\n//  ╚██████╗╚██████╔╝██║ ╚████║   ██║   ██║  ██║██║  ██║╚██████╗   ██║   \r\n//   ╚═════╝ ╚═════╝ ╚═╝  ╚═══╝   ╚═╝   ╚═╝  ╚═╝╚═╝  ╚═╝ ╚═════╝   ╚═╝   \r\n//           __                                       \r\n//  |_  \\/   |_  o     o __  _|   |/  |  _  o     _ __ \r\n//  |_) /    |__ | \\_/ | | |(_|   |\\  | (/_ | \\_/(/_| |                                                                                  \r\n//                                                                                 \r\n//                                                                                 \r\n// @title The Contract by Eivind Kleiven\r\n// @author Eivind Kleiven\r\n// The Contract is a Non-Fungible Token contract.\r\n// The contract itself is the creation and token holder is it's owner.\r\n// The contract is a homage to Fade by Pak: 0x62F5418d9Edbc13b7E07A15e095D7228cD9386c5\r\n\r\n\r\ncontract TheContract { \r\n\r\n    using Strings for uint256;\r\n    \r\n    using Strings for uint8;\r\n\r\n    // Artist\r\n    string public artist = \"Eivind Kleiven\";\r\n    \r\n    // 10% Royalty is paid to this account on every sale\r\n    address payable private _artistAccount = payable(0x85c0C90946E3e959f537D01CEBd93f97C9B5E372);\r\n\r\n    // Token name\r\n    string public name = \"The Contract\";\r\n    \r\n    // Token symbol\r\n    string public symbol = \"THECONTRACT\";\r\n    \r\n    // Contract and token owner\r\n    address public owner;\r\n    \r\n    // Approved address\r\n    address private _tokenApproval;\r\n\r\n    // Operator approvals\r\n    mapping (address => bool) private _operatorApprovals;\r\n    \r\n    // Supported interfaces\r\n    mapping(bytes4 => bool) private _supportedInterfaces;\r\n    \r\n    bytes4 private constant _INTERFACE_ID_ERC165 = 0x01ffc9a7;\r\n    bytes4 private constant _INTERFACE_ID_ERC721_RECEIVED = 0x150b7a02;\r\n    bytes4 private constant _INTERFACE_ID_ERC721 = 0x80ac58cd;\r\n    bytes4 private constant _INTERFACE_ID_ERC721_METADATA = 0x5b5e139f;\r\n    bytes4 private constant _INTERFACE_ID_ERC721_ENUMERABLE = 0x780e9d63;\r\n    bytes4 private constant _INTERFACE_ID_ERC2981 = 0x2a55205a;\r\n    \r\n\r\n    // @dev Emitted when `tokenId` token is transferred from `from` to `to`.\r\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\r\n\r\n    // @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\r\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\r\n\r\n    // @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\r\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\r\n\r\n    // SVG parts used to build SVG and url escaped svg strings\r\n    string[57] private _svgParts;\r\n\r\n    /**\r\n     * @dev Initializes the contract by setting message sender as token/contract `owner`.\r\n     */\r\n    constructor () {\r\n        owner = msg.sender;\r\n        \r\n        \r\n        _supportedInterfaces[_INTERFACE_ID_ERC165] = true;\r\n        _supportedInterfaces[_INTERFACE_ID_ERC721] = true;\r\n        _supportedInterfaces[_INTERFACE_ID_ERC721_METADATA] = true;\r\n        _supportedInterfaces[_INTERFACE_ID_ERC721_ENUMERABLE] = true;\r\n        _supportedInterfaces[_INTERFACE_ID_ERC2981] = true;\r\n\r\n        _svgParts[0]=\"<svg xmlns='http://www.w3.org/2000/svg' id='TheContractByEivindKleiven' viewBox='0 0 \";\r\n        _svgParts[1]=\"%3Csvg%20xmlns%3D%27http%3A%2F%2Fwww.w3.org%2F2000%2Fsvg%27%20id%3D%27TheContractByEivindKleiven%27%20viewBox%3D%270%200%20\";\r\n        _svgParts[2]=\"%253Csvg%2520xmlns%253D%2527http%253A%252F%252Fwww.w3.org%252F2000%252Fsvg%2527%2520id%253D%2527TheContractByEivindKleiven%2527%2520viewBox%253D%25270%25200%2520\";\r\n        _svgParts[3]=\" \";\r\n        _svgParts[4]=\"%20\";\r\n        _svgParts[5]=\"%2520\";\r\n        _svgParts[6]=\"' shape-rendering='crispEdges' style='background-color: #ffffff;'><clipPath id='TheContractClipPath'><rect x='0' y='0' width='100' height='100'/></clipPath><defs><filter id='TheContractFilter'><feColorMatrix type='matrix' values=' 1.430 -0.639 -1.920 0.000 0.934 -0.852 -0.604 0.328 0.000 0.934 0.876 -3.300 1.290 0.000 0.934 0.000 0.000 0.000 1.000 0.000'/><feColorMatrix type='hueRotate' values='0'><animate attributeName='values' values='0; 360; 0' calcMode='spline' keySplines='0.4 0 0.2 1; 0.4 0 0.2 1' dur='30s' repeatCount='indefinite' /></feColorMatrix></filter>\";\r\n        _svgParts[7]=\"%27%20shape-rendering%3D%27crispEdges%27%20style%3D%27background-color%3A%20%23ffffff%3B%27>%3CclipPath%20id%3D%27TheContractClipPath%27>%3Crect%20x%3D%270%27%20y%3D%270%27%20width%3D%27100%27%20height%3D%27100%27%2F>%3C%2FclipPath>%3Cdefs>%3Cfilter%20id%3D%27TheContractFilter%27>%3CfeColorMatrix%20type%3D%27matrix%27%20values%3D%27%201.430%20-0.639%20-1.920%200.000%200.934%20-0.852%20-0.604%200.328%200.000%200.934%200.876%20-3.300%201.290%200.000%200.934%200.000%200.000%200.000%201.000%200.000%27%2F>%3CfeColorMatrix%20type%3D%27hueRotate%27%20values%3D%270%27>%3Canimate%20attributeName%3D%27values%27%20values%3D%270%3B%20360%3B%200%27%20calcMode%3D%27spline%27%20keySplines%3D%270.4%200%200.2%201%3B%200.4%200%200.2%201%27%20dur%3D%2730s%27%20repeatCount%3D%27indefinite%27%20%2F>%3C%2FfeColorMatrix>%3C%2Ffilter>\";\r\n        _svgParts[8]=\"%2527%2520shape-rendering%253D%2527crispEdges%2527%2520style%253D%2527background-color%253A%2520%2523ffffff%253B%2527>%253CclipPath%2520id%253D%2527TheContractClipPath%2527>%253Crect%2520x%253D%25270%2527%2520y%253D%25270%2527%2520width%253D%2527100%2527%2520height%253D%2527100%2527%252F>%253C%252FclipPath>%253Cdefs>%253Cfilter%2520id%253D%2527TheContractFilter%2527>%253CfeColorMatrix%2520type%253D%2527matrix%2527%2520values%253D%2527%25201.430%2520-0.639%2520-1.920%25200.000%25200.934%2520-0.852%2520-0.604%25200.328%25200.000%25200.934%25200.876%2520-3.300%25201.290%25200.000%25200.934%25200.000%25200.000%25200.000%25201.000%25200.000%2527%252F>%253CfeColorMatrix%2520type%253D%2527hueRotate%2527%2520values%253D%25270%2527>%253Canimate%2520attributeName%253D%2527values%2527%2520values%253D%25270%253B%2520360%253B%25200%2527%2520calcMode%253D%2527spline%2527%2520keySplines%253D%25270.4%25200%25200.2%25201%253B%25200.4%25200%25200.2%25201%2527%2520dur%253D%252730s%2527%2520repeatCount%253D%2527indefinite%2527%2520%252F>%253C%252FfeColorMatrix>%253C%252Ffilter>\";\r\n        _svgParts[9]=\"<linearGradient id='TheContractGradient' x1='0' x2='0' y1='0' y2='1'><stop offset='0%' stop-color='#\";\r\n        _svgParts[10]=\"%3ClinearGradient%20id%3D%27TheContractGradient%27%20x1%3D%270%27%20x2%3D%270%27%20y1%3D%270%27%20y2%3D%271%27>%3Cstop%20offset%3D%270%25%27%20stop-color%3D%27%23\";\r\n        _svgParts[11]=\"%253ClinearGradient%2520id%253D%2527TheContractGradient%2527%2520x1%253D%25270%2527%2520x2%253D%25270%2527%2520y1%253D%25270%2527%2520y2%253D%25271%2527>%253Cstop%2520offset%253D%25270%2525%2527%2520stop-color%253D%2527%2523\";\r\n        _svgParts[12]=\"'/><stop offset='50%' stop-color='#\";\r\n        _svgParts[13]=\"%27%2F>%3Cstop%20offset%3D%2750%25%27%20stop-color%3D%27%23\";\r\n        _svgParts[14]=\"%2527%252F>%253Cstop%2520offset%253D%252750%2525%2527%2520stop-color%253D%2527%2523\";\r\n        _svgParts[15]=\"'/><stop offset='100%' stop-color='#\";\r\n        _svgParts[16]=\"%27%2F>%3Cstop%20offset%3D%27100%25%27%20stop-color%3D%27%23\";\r\n        _svgParts[17]=\"%2527%252F>%253Cstop%2520offset%253D%2527100%2525%2527%2520stop-color%253D%2527%2523\";\r\n        _svgParts[18]=\"'/></linearGradient>\";\r\n        _svgParts[19]=\"%27%2F>%3C%2FlinearGradient>\";\r\n        _svgParts[20]=\"%2527%252F>%253C%252FlinearGradient>\";\r\n        _svgParts[21]=\"</defs><g filter='url(#TheContractFilter)' clip-path='url(#TheContractClipPath)'><circle cx='50' cy='50' r='71' fill='url(#TheContractGradient)' fill-opacity='20%'><animateTransform attributeName='transform' type='rotate' from='0 50 50' to='360 50 50' dur='60s' repeatCount='indefinite' /></circle>\";\r\n        _svgParts[22]=\"%3C%2Fdefs>%3Cg%20filter%3D%27url%28%23TheContractFilter%29%27%20clip-path%3D%27url%28%23TheContractClipPath%29%27>%3Ccircle%20cx%3D%2750%27%20cy%3D%2750%27%20r%3D%2771%27%20fill%3D%27url%28%23TheContractGradient%29%27%20fill-opacity%3D%2720%25%27>%3CanimateTransform%20attributeName%3D%27transform%27%20type%3D%27rotate%27%20from%3D%270%2050%2050%27%20to%3D%27360%2050%2050%27%20dur%3D%2760s%27%20repeatCount%3D%27indefinite%27%20%2F>%3C%2Fcircle>\";\r\n        _svgParts[23]=\"%253C%252Fdefs>%253Cg%2520filter%253D%2527url%2528%2523TheContractFilter%2529%2527%2520clip-path%253D%2527url%2528%2523TheContractClipPath%2529%2527>%253Ccircle%2520cx%253D%252750%2527%2520cy%253D%252750%2527%2520r%253D%252771%2527%2520fill%253D%2527url%2528%2523TheContractGradient%2529%2527%2520fill-opacity%253D%252720%2525%2527>%253CanimateTransform%2520attributeName%253D%2527transform%2527%2520type%253D%2527rotate%2527%2520from%253D%25270%252050%252050%2527%2520to%253D%2527360%252050%252050%2527%2520dur%253D%252760s%2527%2520repeatCount%253D%2527indefinite%2527%2520%252F>%253C%252Fcircle>\";\r\n        _svgParts[24]=\"<circle fill='#\";\r\n        _svgParts[25]=\"%3Ccircle%20fill%3D%27%23\";\r\n        _svgParts[26]=\"%253Ccircle%2520fill%253D%2527%2523\";\r\n        _svgParts[27]=\"' cx='\";\r\n        _svgParts[28]=\"%27%20cx%3D%27\";\r\n        _svgParts[29]=\"%2527%2520cx%253D%2527\";\r\n        _svgParts[30]=\"' cy='\";\r\n        _svgParts[31]=\"%27%20cy%3D%27\";\r\n        _svgParts[32]=\"%2527%2520cy%253D%2527\";\r\n        _svgParts[33]=\"' r='4' />\";\r\n        _svgParts[34]=\"%27%20r%3D%274%27%20%2F>\";\r\n        _svgParts[35]=\"%2527%2520r%253D%25274%2527%2520%252F>\";\r\n        _svgParts[36]=\"</g>\";\r\n        _svgParts[37]=\"%3C%2Fg>\";\r\n        _svgParts[38]=\"%253C%252Fg>\";\r\n        _svgParts[39]=\"<text x='\";\r\n        _svgParts[40]=\"%3Ctext%20x%3D%27\";\r\n        _svgParts[41]=\"%253Ctext%2520x%253D%2527\";\r\n        _svgParts[42]=\".75' y='\";\r\n        _svgParts[43]=\".75%27%20y%3D%27\";\r\n        _svgParts[44]=\".75%2527%2520y%253D%2527\";\r\n        _svgParts[45]=\"' fill='#ffffff' font-size='6px'>\";\r\n        _svgParts[46]=\"%27%20fill%3D%27%23ffffff%27%20font-size%3D%276px%27>\";\r\n        _svgParts[47]=\"%2527%2520fill%253D%2527%2523ffffff%2527%2520font-size%253D%25276px%2527>\";\r\n        _svgParts[48]=\"</text>\";\r\n        _svgParts[49]=\"%3C%2Ftext>\";\r\n        _svgParts[50]=\"%253C%252Ftext>\";\r\n        _svgParts[51]=\"</svg>\";\r\n        _svgParts[52]=\"%3C%2Fsvg>\";\r\n        _svgParts[53]=\"%253C%252Fsvg>\";\r\n        _svgParts[54]=\"<g><animate attributeName='fill-opacity' values='1;0;1;1' dur='1s' repeatCount='indefinite'/>\";\r\n        _svgParts[55]=\"%3Cg>%3Canimate%20attributeName%3D%27fill-opacity%27%20values%3D%271%3B0%3B1%3B1%27%20dur%3D%271s%27%20repeatCount%3D%27indefinite%27%2F>\";\r\n        _svgParts[56]=\"%253Cg>%253Canimate%2520attributeName%253D%2527fill-opacity%2527%2520values%253D%25271%253B0%253B1%253B1%2527%2520dur%253D%25271s%2527%2520repeatCount%253D%2527indefinite%2527%252F>\";\r\n               \r\n        emit Transfer(address(0), msg.sender, 1);\r\n    }\r\n    \r\n \r\n    function setArtistAccount(address artistAccount) public {\r\n        require(msg.sender == _artistAccount, \"Only current artist account may change artist account\");\r\n        _artistAccount = payable(artistAccount);\r\n    }\r\n\r\n    function generateSvg(uint8 urlEncodePasses) public view returns (string memory){\r\n        require(urlEncodePasses < 3, \"Not possible to url encode more than two passes\");\r\n        \r\n        bytes memory b = getContractBytecode();\r\n        \r\n        uint maximumNumberOfPixels = b.length/3;\r\n        uint rows = 10;\r\n        uint displayNumberOfPixels = rows*rows;\r\n        \r\n\r\n        uint startAt = (displayNumberOfPixels*block.number) % (maximumNumberOfPixels - displayNumberOfPixels);\r\n        uint endAt = startAt + displayNumberOfPixels;\r\n        \r\n        \r\n        bytes memory data =  abi.encodePacked(_svgParts[urlEncodePasses], (rows*10).toString(), _svgParts[3 + urlEncodePasses], (rows*10).toString(), _svgParts[6 + urlEncodePasses], generateLinearGradient(urlEncodePasses), _svgParts[21+urlEncodePasses]);\r\n\r\n        \r\n        uint lastBlinkIndex = 0;\r\n        if(hasBid && bid >= 1 ether){\r\n            data = abi.encodePacked(data, _svgParts[54 + urlEncodePasses]);\r\n            lastBlinkIndex = startAt + bid / 1000000000000000000;\r\n        }\r\n        \r\n        for (uint i = startAt; i < endAt; i++)\r\n        {\r\n            \r\n            if(lastBlinkIndex > 0 && i == lastBlinkIndex){\r\n                data = abi.encodePacked(data, _svgParts[36 + urlEncodePasses]);\r\n            }\r\n            \r\n            bytes memory hexColor = abi.encodePacked(uint8(b[3*i]).toHexString(), uint8(b[3*i+1]).toHexString(), uint8(b[3*i+2]).toHexString());\r\n            data = abi.encodePacked(data, _circleElement(urlEncodePasses, hexColor, (((i-startAt) % rows)*10+5).toString(), (10*((i-startAt) / rows)+5).toString()));\r\n   \r\n        }\r\n        \r\n        if(lastBlinkIndex >= endAt){\r\n            data = abi.encodePacked(data, _svgParts[36 + urlEncodePasses]);\r\n        }     \r\n        \r\n    \r\n        return string(abi.encodePacked(data, _svgParts[36 + urlEncodePasses], generateBlockNumberElements(urlEncodePasses), _svgParts[51 + urlEncodePasses]));\r\n    }\r\n    \r\n    function _circleElement(uint8 urlEncodePasses, bytes memory hexColor, string memory cx, string memory cy) private view returns (bytes memory){\r\n        return abi.encodePacked(_svgParts[24 + urlEncodePasses], hexColor, _svgParts[27 + urlEncodePasses], cx, _svgParts[30 + urlEncodePasses], cy, _svgParts[33 + urlEncodePasses]);\r\n    }\r\n    \r\n    \r\n    \r\n    \r\n    function generateLinearGradient(uint8 urlEncodePasses) internal view returns (string memory){\r\n        \r\n        bytes memory ownerBytes = abi.encodePacked(owner);\r\n        \r\n        bytes memory hexColor1 = abi.encodePacked(uint8(ownerBytes[0]).toHexString(),uint8(ownerBytes[1]).toHexString(),uint8(ownerBytes[2]).toHexString()); \r\n        bytes memory hexColor2 = abi.encodePacked(uint8(ownerBytes[3]).toHexString(),uint8(ownerBytes[4]).toHexString(),uint8(ownerBytes[5]).toHexString()); \r\n        bytes memory hexColor3 = abi.encodePacked(uint8(ownerBytes[6]).toHexString(),uint8(ownerBytes[7]).toHexString(),uint8(ownerBytes[8]).toHexString()); \r\n        \r\n        return string(abi.encodePacked(_svgParts[9+urlEncodePasses], hexColor1, _svgParts[12+urlEncodePasses], hexColor2, _svgParts[15+urlEncodePasses],hexColor3,  _svgParts[18+urlEncodePasses]));\r\n    }\r\n        \r\n    function generateBlockNumberElements(uint8 urlEncodePasses) internal view returns (string memory){\r\n        \r\n        bytes memory blockNumber = bytes(block.number.toString());\r\n         \r\n        uint8 x=93;\r\n        uint8 y=97;\r\n        bytes memory data;\r\n        for(uint i = blockNumber.length; i > 0; i--)\r\n        {\r\n            data =  abi.encodePacked(data, _svgParts[39 + urlEncodePasses],x.toString(),_svgParts[42 + urlEncodePasses],y.toString(),_svgParts[45 + urlEncodePasses],blockNumber[i-1],_svgParts[48 + urlEncodePasses]);\r\n            \r\n            x=x-10;\r\n            \r\n            if(x < 3){\r\n                x=93;\r\n                y=y-10;\r\n            }\r\n       }\r\n        return string(data);\r\n    }\r\n    \r\n    \r\n    function contentType() public pure returns (string memory){\r\n        return \"image/svg+xml\";\r\n    }\r\n    \r\n    function svg() public view returns (string memory){\r\n        return generateSvg(0);\r\n    }\r\n    function svgDataURI() public view returns (string memory){\r\n        return string(abi.encodePacked(\"data:\", contentType(),\",\",generateSvg(1)));\r\n    }\r\n    \r\n    \r\n    function getContractBytecode() public view returns (bytes memory o_code) {\r\n        \r\n        address contractAddress =  address(this);\r\n        \r\n        assembly {\r\n            \r\n            // retrieve the size of the code, this needs assembly\r\n            let size := extcodesize(contractAddress)\r\n            // allocate output byte array - this could also be done without assembly\r\n            // by using o_code = new bytes(size)\r\n            o_code := mload(0x40)\r\n            // new \"memory end\" including padding\r\n            mstore(0x40, add(o_code, and(add(add(size, 0x20), 0x1f), not(0x1f))))\r\n            // store length in memory\r\n            mstore(o_code, size)\r\n            // actually retrieve the code, this needs assembly\r\n            extcodecopy(contractAddress, add(o_code, 0x20), 0, size)\r\n        }\r\n    }\r\n    \r\n    \r\n    // Implementation of supportsInterface as defined in ERC165 standard\r\n    function supportsInterface(bytes4 interfaceId) public view returns (bool) {\r\n        return _supportedInterfaces[interfaceId];\r\n    }\r\n  \r\n    // Total token supply.  \r\n    function totalSupply() public pure returns (uint256) {\r\n        return 1;\r\n    }\r\n    \r\n    // Token by index of all tokens\r\n    function tokenByIndex(uint256 index) public pure returns (uint256) {\r\n        require(index == 0,\"Index out of bound\");\r\n        return 1;\r\n    }\r\n\r\n    // Token by index of owners tokens    \r\n    function tokenOfOwnerByIndex(address owner_, uint256 index) public view returns (uint256) {\r\n        require(index == 0 && owner == owner_,\"Index out of bound\");\r\n        return 1;\r\n    }\r\n    \r\n    // Token uri to creation metadata\r\n    function tokenURI(uint256 tokenId) public view returns (string memory) {\r\n        require(_exists(tokenId), \"tokenURI query for nonexistent token\");\r\n        return string(abi.encodePacked(\r\n                'data:application/json;charset=utf-8,{%22name%22%3A%22The%20Contract%22%2C%20%22description%22%3A%22The%20Contract%20is%20a%20Non-Fungible%20Token%20contract%20and%20the%20contract%20itself%20is%20the%20creation.%20Token%20holder%20is%20its%20owner.%20The%20contract%20is%20a%20homage%20to%20Fade%20by%20Pak%3A%200x62F5418d9Edbc13b7E07A15e095D7228cD9386c5%22%2C%22created_by%22%3A%22Eivind%20Kleiven%22%2C%22image_data%22%3A%22',generateSvg(1),'%22}'\r\n            ));\r\n    }\r\n    \r\n    // @return number of tokens held by owner_\r\n    function balanceOf(address owner_) public view returns (uint256) {\r\n        require(owner_ != address(0), \"Balance query for the zero address\");\r\n        return owner_ == owner ? 1 : 0;\r\n    }\r\n\r\n    // @return owner of tokenId\r\n    function ownerOf(uint256 tokenId) public view returns (address) {\r\n        require(_exists(tokenId), \"Owner query for nonexistent token\");\r\n        return owner;\r\n    }\r\n\r\n    // Approve to for tokenId. Be aware that an approved address are allowed to transfer tokenId.\r\n    function approve(address to, uint256 tokenId) public {\r\n        require(_exists(tokenId), \"Approve query for nonexistent token\");\r\n        require(to != owner, \"Approval to current owner\");\r\n        require(msg.sender == owner || isApprovedForAll(owner, msg.sender),\r\n            \"Approve caller is not owner nor approved for all\"\r\n        );\r\n        _approve(to, tokenId);\r\n    }\r\n\r\n    // @return tokenId approved address.\r\n    function getApproved(uint256 tokenId) public view returns (address) {\r\n        require(_exists(tokenId), \"getApproved query for nonexistent token\");\r\n        return _tokenApproval;\r\n    }\r\n\r\n    // Set approval for all. Be aware that if approval is set to true, then operator may transfer tokenId.\r\n    function setApprovalForAll(address operator, bool approved) public {\r\n        require(owner == msg.sender, \"Only owner can set approval for all\");\r\n        require(operator != msg.sender, \"Approve to caller\");\r\n\r\n        _operatorApprovals[operator] = approved;\r\n        emit ApprovalForAll(owner, operator, approved);\r\n    }\r\n\r\n    // @return approval boolean for an owner operator.\r\n    function isApprovedForAll(address owner_, address operator) public view returns (bool) {\r\n        if(owner_ == owner){\r\n            return _operatorApprovals[operator];\r\n        }\r\n        \r\n        return false;\r\n    }\r\n\r\n\r\n    function transferFrom(address from, address to, uint256 tokenId) public {\r\n        //solhint-disable-next-line max-line-length\r\n        require(_isApprovedOrOwner(msg.sender, tokenId), \"Transfer caller is not owner nor approved\");\r\n\r\n        _transfer(from, to, tokenId);\r\n    }\r\n\r\n    function safeTransferFrom(address from, address to, uint256 tokenId) public {\r\n        safeTransferFrom(from, to, tokenId, \"\");\r\n    }\r\n\r\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes memory _data) public {\r\n        require(_isApprovedOrOwner(msg.sender, tokenId), \"Transfer caller is not owner nor approved\");\r\n        _safeTransfer(from, to, tokenId, _data);\r\n    }\r\n\r\n    /**\r\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\r\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\r\n     *\r\n     * `_data` is additional data, it has no specified format and it is sent in call to `to`.\r\n     *\r\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\r\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `from` cannot be the zero address.\r\n     * - `to` cannot be the zero address.\r\n     * - `tokenId` token must exist and be owned by `from`.\r\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function _safeTransfer(address from, address to, uint256 tokenId, bytes memory _data) internal virtual {\r\n        _transfer(from, to, tokenId);\r\n        require(_checkOnERC721Received(from, to, tokenId, _data), \"ERC721: transfer to non ERC721Receiver implementer\");\r\n    }\r\n    \r\n    /**\r\n     * @dev Transfers `tokenId` from `from` to `to`.\r\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `to` cannot be the zero address.\r\n     * - `tokenId` token must be owned by `from`.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function _transfer(address from, address to, uint256 tokenId) internal virtual {\r\n        require(_exists(tokenId), \"Transfer of nonexistent token\");\r\n        require(owner == from, \"Transfer of token that is not own\");\r\n        require(to != address(0), \"Transfer to the zero address. Burn instead.\");\r\n\r\n        _approve(address(0), tokenId);\r\n        _removeOffer();\r\n\r\n        owner = to;\r\n\r\n        emit Transfer(from, to, tokenId);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns whether `tokenId` exists.\r\n     *\r\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\r\n     *\r\n     * Tokens start existing when they are minted (`_mint`),\r\n     * and stop existing when they are burned (`_burn`).\r\n     */\r\n    function _exists(uint256 tokenId) internal view returns (bool) {\r\n        return (tokenId == 1 && owner != address(0));\r\n    }\r\n\r\n    /**\r\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `tokenId` must exist.\r\n     */\r\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view returns (bool) {\r\n        require(_exists(tokenId), \"Operator query for nonexistent token\");\r\n        return (spender == owner || getApproved(tokenId) == spender || isApprovedForAll(owner, spender));\r\n    }\r\n\r\n    /**\r\n     * @dev Destroys `tokenId`.\r\n     * The approval is cleared when the token is burned.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `tokenId` must exist.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function burn(uint256 tokenId) public {\r\n        require(_exists(tokenId),\"Try to burn nonexistent token.\");\r\n\r\n        // Clear approvals\r\n        _approve(address(0), tokenId);\r\n \r\n        owner = address(0);\r\n        \r\n        _removeOffer();\r\n        \r\n        if(bid > 0){\r\n            uint amount = bid;\r\n            payable(bidder).transfer(amount);\r\n            _resetBid();\r\n        }\r\n        \r\n        emit Transfer(owner, address(0), tokenId);\r\n    }\r\n\r\n    /**\r\n     * @dev Approve `to` to operate on `tokenId`\r\n     *\r\n     * Emits a {Approval} event.\r\n     */\r\n    function _approve(address to, uint256 tokenId) internal virtual {\r\n        _tokenApproval = to;\r\n        emit Approval(owner, to, tokenId);\r\n    }\r\n    \r\n    /**\r\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\r\n     * The call is not executed if the target address is not a contract.\r\n     *\r\n     * @param from address representing the previous owner of the given token ID\r\n     * @param to target address that will receive the tokens\r\n     * @param tokenId uint256 ID of the token to be transferred\r\n     * @param _data bytes optional data to send along with the call\r\n     * @return bool whether the call correctly returned the expected magic value\r\n     */\r\n    function _checkOnERC721Received(address from, address to, uint256 tokenId, bytes memory _data)\r\n        private returns (bool)\r\n    {\r\n        \r\n        uint256 size;\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly { size := extcodesize(to) }\r\n        \r\n        if (size > 0) {\r\n            \r\n            try IERC721Receiver(to).onERC721Received(msg.sender, from, tokenId, _data) returns (bytes4 retval) {\r\n                return retval == IERC721Receiver(to).onERC721Received.selector;\r\n            } catch (bytes memory reason) {\r\n                if (reason.length == 0) {\r\n                    revert(\"Transfer to non ERC721Receiver implementer\");\r\n                } else {\r\n                    // solhint-disable-next-line no-inline-assembly\r\n                    assembly {\r\n                        revert(add(32, reason), mload(reason))\r\n                    }\r\n                }\r\n            }\r\n        } else {\r\n            return true;\r\n        }\r\n    }\r\n    \r\n    \r\n    function destruct() public {\r\n        require(msg.sender == owner, \"Only owner can destruct contract.\");\r\n      \r\n        if(bid > 0){\r\n            payable(bidder).transfer(bid);\r\n            _resetBid();\r\n        }\r\n        \r\n        selfdestruct(payable(msg.sender));\r\n    }\r\n    \r\n    \r\n    \r\n     // ENTER MARKETPLACE\r\n\r\n    event Offered(uint indexed price, address indexed offeredTo);\r\n    event RecievedBid(uint indexed value, address indexed bidder);\r\n    event WithdrawnBid(uint indexed value, address indexed bidder);\r\n    event Sold(uint indexed price, address indexed seller, address indexed buyer);\r\n    event OfferRemoved();\r\n\r\n\r\n    bool public hasBid;\r\n    uint public bid;\r\n    address public bidder;\r\n\r\n    \r\n    uint public offer;\r\n    bool public isForSale;\r\n    address public onlySellTo;\r\n    address public seller;\r\n\r\n    function _removeOffer() internal {\r\n        isForSale = false;\r\n        offer = 0;\r\n        seller = address(0);\r\n        onlySellTo = address(0);\r\n    }\r\n    \r\n    function _resetBid() internal {\r\n        hasBid=false;\r\n        bid=0;\r\n        bidder=address(0);\r\n    }\r\n\r\n    function removeOffer() public {\r\n        require(owner == msg.sender, \"Only owner can remove offer.\");\r\n        _removeOffer();\r\n        emit OfferRemoved();\r\n    }\r\n\r\n    function offerForSale(uint priceInWei) public {\r\n        require(owner == msg.sender, \"Only owner can offer for sale.\");\r\n        offerForSaleToAddress(priceInWei, address(0));\r\n    }\r\n    \r\n    function offerForSaleToAddress(uint priceInWei, address toAddress) public {\r\n        require(owner == msg.sender, \"Only owner can offer for sale.\");\r\n        require(priceInWei > 0, \"Cannot offer for free.\");\r\n        \r\n        offer = priceInWei;\r\n        seller = msg.sender;\r\n        onlySellTo = toAddress;\r\n        isForSale = true;\r\n        emit Offered(priceInWei, toAddress);\r\n    }\r\n\r\n\r\n    function buy() payable public {\r\n        require(isForSale, \"The Contract is not offered to buy.\");\r\n        require(onlySellTo == address(0) || onlySellTo == msg.sender,\"Not offered to this buyer.\");\r\n        require(msg.value >= offer, \"Sent less than offer.\");\r\n        require(seller == owner, \"Only owner allowed to sell.\");\r\n    \r\n        address payable beneficiary = payable(seller);\r\n \r\n\r\n        _safeTransfer(seller, msg.sender, 1, \"\");\r\n\r\n        uint amountToArtist = msg.value/10;\r\n        if(amountToArtist > 0){\r\n            _artistAccount.transfer(amountToArtist);\r\n        }\r\n        \r\n        if(amountToArtist < msg.value)\r\n        {\r\n\r\n            beneficiary.transfer(msg.value - amountToArtist);\r\n        }\r\n        \r\n        emit Sold(msg.value, seller, msg.sender);\r\n        \r\n    }\r\n    \r\n    \r\n     function enterBid() public payable {\r\n        require(_exists(1), \"Nothing exist to bid on\");\r\n        require(owner != msg.sender, \"Owner cannot bid\");\r\n        require(msg.value > bid, \"Not allowed to bid less than current bid\");\r\n\r\n        address payable currentBidder = payable(bidder);\r\n        uint currentBid = bid;\r\n        \r\n        hasBid = true;\r\n        bidder = msg.sender;\r\n        bid = msg.value;\r\n        \r\n        if (currentBid > 0) {\r\n            // Refund previous bid\r\n            currentBidder.transfer(currentBid);\r\n        }\r\n        \r\n        emit RecievedBid(msg.value, msg.sender);\r\n    }\r\n    \r\n    \r\n    function acceptBid(uint minPrice) public {\r\n        require(owner == msg.sender, \"Only owner can accept bid.\");\r\n        require(bid >= minPrice, \"Bid lower than given minimum price\");\r\n\r\n        uint amount = bid;\r\n        address payable beneficiary = payable(owner);\r\n            \r\n        _safeTransfer(msg.sender, bidder, 1, \"\");\r\n\r\n    \r\n        emit Sold(amount, msg.sender, bidder);\r\n        \r\n        _resetBid();\r\n        \r\n        \r\n        uint amountToArtist = amount/10;\r\n        if(amountToArtist > 0){\r\n            _artistAccount.transfer(amountToArtist);\r\n        }\r\n        \r\n        if(amountToArtist < amount)\r\n        {\r\n\r\n            beneficiary.transfer(amount - amountToArtist);\r\n        }\r\n\r\n    \r\n        \r\n    }\r\n\r\n\r\n  function withdrawBid() public {\r\n        require(bidder == msg.sender, \"Only bidder can withdraw bid\");\r\n        \r\n        uint amount = bid;\r\n        address payable beneficiary = payable(bidder);\r\n        \r\n        emit WithdrawnBid(bid, msg.sender);\r\n        \r\n        _resetBid();\r\n\r\n        beneficiary.transfer(amount);\r\n    }\r\n\r\n\r\n    /// LEAVE MARKETPLACE\r\n    \r\n    \r\n    \r\n    /// BEGIN NFT Royalty Standard (ERC-2981)\r\n    \r\n    \r\n    /** \r\n     * @notice Called with the sale price to determine how much royalty\r\n     * is owed and to whom.\r\n     * @param _tokenId - the NFT asset queried for royalty information\r\n     * @param _salePrice - the sale price of the NFT asset specified by _tokenId\r\n     * @return receiver - address of who should be sent the royalty payment\r\n     * @return royaltyAmount - the royalty payment amount for _salePrice\r\n     * \r\n     **/\r\n    function royaltyInfo(\r\n        uint256 _tokenId,\r\n        uint256 _salePrice\r\n    ) external view returns (\r\n        address,\r\n        uint256\r\n    ){\r\n        require(_exists(_tokenId), \"query for RoyaltyInfo for nonexistent tokenId\");\r\n        \r\n        return (_artistAccount, _salePrice/10);\r\n\r\n        \r\n    }\r\n    \r\n    /**\r\n     * @dev Returns true if implemented\r\n     * \r\n     * @dev this is how the marketplace can see if the contract has royalties, other than using the supportsInterface() call.\r\n     */\r\n    function hasRoyalties() external pure returns (bool){\r\n        return true;\r\n    }\r\n\r\n     /**\r\n     * @dev Returns uint256 of the amount of percentage the royalty is set to. For example, if 1%, would return \"1\", if 50%, would return \"50\"\r\n     * \r\n     */\r\n    function royaltyAmount() external pure returns (uint256){\r\n        return 10;\r\n    }\r\n    \r\n    \r\n    /// END NFT Royalty Standard (ERC-2981)\r\n    \r\n}\r\n\r\n\r\n/**\r\n * @title ERC721 token receiver interface\r\n * @dev Interface for any contract that wants to support safeTransfers\r\n * from ERC721 asset contracts.\r\n */\r\ninterface IERC721Receiver {\r\n    /**\r\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\r\n     * by `operator` from `from`, this function is called.\r\n     *\r\n     * It must return its Solidity selector to confirm the token transfer.\r\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\r\n     *\r\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\r\n     */\r\n    function onERC721Received(address operator, address from, uint256 tokenId, bytes calldata data) external returns (bytes4);\r\n}\r\n\r\n\r\n/**\r\n * @dev String operations.\r\n */\r\nlibrary Strings {\r\n    bytes16 private constant _HEX_SYMBOLS = \"0123456789abcdef\";\r\n\r\n    /**\r\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\r\n     */\r\n    function toString(uint256 value) internal pure returns (string memory) {\r\n        // Inspired by OraclizeAPI's implementation - MIT licence\r\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\r\n\r\n        if (value == 0) {\r\n            return \"0\";\r\n        }\r\n        uint256 temp = value;\r\n        uint256 digits;\r\n        while (temp != 0) {\r\n            digits++;\r\n            temp /= 10;\r\n        }\r\n        bytes memory buffer = new bytes(digits);\r\n        while (value != 0) {\r\n            digits -= 1;\r\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\r\n            value /= 10;\r\n        }\r\n        return string(buffer);\r\n    }\r\n\r\n    \r\n     /**\r\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\r\n     */\r\n    function toHexString(uint8 value) internal pure returns (string memory) {\r\n        \r\n        if (value == 0) {\r\n            return \"00\";\r\n        }\r\n        \r\n        bytes memory buffer = new bytes(2);\r\n\r\n        buffer[1] = _HEX_SYMBOLS[value & 0xf];\r\n        value >>= 4;\r\n        buffer[0] = _HEX_SYMBOLS[value & 0xf];\r\n\r\n\r\n        return string(buffer);\r\n    }\r\n    \r\n    \r\n\r\n}","ABI":"[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"OfferRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"offeredTo\",\"type\":\"address\"}],\"name\":\"Offered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"bidder\",\"type\":\"address\"}],\"name\":\"RecievedBid\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"}],\"name\":\"Sold\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"bidder\",\"type\":\"address\"}],\"name\":\"WithdrawnBid\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"minPrice\",\"type\":\"uint256\"}],\"name\":\"acceptBid\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"artist\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner_\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"bid\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"bidder\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buy\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"contentType\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"destruct\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"enterBid\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"urlEncodePasses\",\"type\":\"uint8\"}],\"name\":\"generateSvg\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getContractBytecode\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"o_code\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"hasBid\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"hasRoyalties\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isForSale\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"offer\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"priceInWei\",\"type\":\"uint256\"}],\"name\":\"offerForSale\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"priceInWei\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"toAddress\",\"type\":\"address\"}],\"name\":\"offerForSaleToAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"onlySellTo\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"removeOffer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"royaltyAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_salePrice\",\"type\":\"uint256\"}],\"name\":\"royaltyInfo\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"seller\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"artistAccount\",\"type\":\"address\"}],\"name\":\"setArtistAccount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"svg\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"svgDataURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenOfOwnerByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawBid\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"TheContract","CompilerVersion":"v0.8.0+commit.c7dfd78e","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://af75453c398c9de737a81761e95ce262ebc0ffbbd2b101f00f1119a1e383eb77"}]}