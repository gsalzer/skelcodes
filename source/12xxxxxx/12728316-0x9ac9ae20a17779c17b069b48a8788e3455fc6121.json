{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"/storage/Home_Storage/src/Unification/github.com/xfund-router/contracts/Router.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\n\\nimport \\\"./interfaces/IConsumerBase.sol\\\";\\nimport \\\"./lib/RequestIdBase.sol\\\";\\n\\n\\n/**\\n * @title Router smart contract\\n *\\n * @dev Routes requests for data from Consumers to data providers.\\n * Data providers listen for requests and process data, sending it back to the\\n * Consumer's smart contract.\\n *\\n * An ERC-20 Token fee is charged by the provider, and paid for by the consumer\\n *\\n */\\ncontract Router is RequestIdBase, ReentrancyGuard {\\n    using SafeMath for uint256;\\n    using Address for address;\\n\\n    /*\\n     * CONSTANTS\\n     */\\n\\n    uint8 public constant REQUEST_STATUS_NOT_SET = 0;\\n    uint8 public constant REQUEST_STATUS_REQUESTED = 1;\\n\\n    /*\\n     * STRUCTURES\\n     */\\n\\n    struct DataRequest {\\n        address consumer;\\n        address provider;\\n        uint256 fee;\\n        uint8 status;\\n    }\\n\\n    struct DataProvider {\\n        uint256 minFee;\\n        mapping(address => uint256) granularFees; // Per consumer fees if required\\n    }\\n\\n    /*\\n     * STATE VARS\\n     */\\n\\n    // Contract address of ERC-20 Token being used to pay for data\\n    IERC20 private immutable token;\\n\\n    // Mapping to hold registered providers\\n    mapping(address => DataProvider) private dataProviders;\\n\\n    // Mapping to hold open data requests\\n    mapping(bytes32 => DataRequest) public dataRequests;\\n\\n    // nonces for generating requestIds. Must be in sync with the consumer's \\n    // nonces defined in ConsumerBase.sol.\\n    mapping(address => mapping(address => uint256)) private nonces;\\n\\n    // Mapping to track accumulated provider earnings upon request fulfillment.\\n    mapping(address => uint256) private withdrawableTokens;\\n\\n    /*\\n     * EVENTS\\n     */\\n\\n    /**\\n     * @dev DataRequested. Emitted when a data request is sent by a Consumer.\\n     * @param consumer address of the Consumer's contract\\n     * @param provider address of the data provider\\n     * @param fee amount of xFUND paid for data request\\n     * @param data data being requested\\n     * @param requestId the request ID\\n     */\\n    event DataRequested(\\n        address indexed consumer,\\n        address indexed provider,\\n        uint256 fee,\\n        bytes32 data,\\n        bytes32 indexed requestId\\n    );\\n\\n    /**\\n     * @dev RequestFulfilled. Emitted when a provider fulfils a data request\\n     * @param consumer address of the Consumer's contract\\n     * @param provider address of the data provider\\n     * @param requestId the request ID being fulfilled\\n     * @param requestedData the data sent to the Consumer's contract\\n     */\\n    event RequestFulfilled(\\n        address indexed consumer,\\n        address indexed provider,\\n        bytes32 indexed requestId,\\n        uint256 requestedData\\n    );\\n\\n    /**\\n     * @dev TokenSet. Emitted once during contract construction\\n     * @param tokenAddress contract address of token being used to pay fees\\n     */\\n    event TokenSet(address tokenAddress);\\n\\n    /**\\n     * @dev ProviderRegistered. Emitted when a provider registers\\n     * @param provider address of the provider\\n     * @param minFee new fee value\\n     */\\n    event ProviderRegistered(address indexed provider, uint256 minFee);\\n\\n    /**\\n     * @dev SetProviderMinFee. Emitted when a provider changes their minimum token fee for providing data\\n     * @param provider address of the provider\\n     * @param oldMinFee old fee value\\n     * @param newMinFee new fee value\\n     */\\n    event SetProviderMinFee(address indexed provider, uint256 oldMinFee, uint256 newMinFee);\\n\\n    /**\\n     * @dev SetProviderGranularFee. Emitted when a provider changes their token fee for providing data\\n     * to a selected consumer contract\\n     * @param provider address of the provider\\n     * @param consumer address of the consumer\\n     * @param oldFee old fee value\\n     * @param newFee new fee value\\n     */\\n    event SetProviderGranularFee(address indexed provider, address indexed consumer, uint256 oldFee, uint256 newFee);\\n\\n    /**\\n    * @dev WithdrawFees. Emitted when a provider withdraws their accumulated fees\\n    * @param provider address of the provider withdrawing\\n    * @param recipient address of the recipient\\n    * @param amount uint256 amount being withdrawn\\n    */\\n    event WithdrawFees(address indexed provider, address indexed recipient, uint256 amount);\\n\\n    /*\\n     * FUNCTIONS\\n     */\\n\\n    /**\\n     * @dev Contract constructor. Accepts the address for a Token smart contract.\\n     * @param _token address must be for an ERC-20 token (e.g. xFUND)\\n     */\\n    constructor(address _token) {\\n        require(_token != address(0), \\\"token cannot be zero address\\\");\\n        require(_token.isContract(), \\\"token address must be a contract\\\");\\n        token = IERC20(_token);\\n        emit TokenSet(_token);\\n    }\\n\\n    /**\\n     * @dev registerAsProvider - register as a provider\\n     * @param _minFee uint256 - minimum fee provider will accept to fulfill request\\n     * @return success\\n     */\\n    function registerAsProvider(uint256 _minFee) external returns (bool success) {\\n        require(_minFee > 0, \\\"fee must be > 0\\\");\\n        require(dataProviders[msg.sender].minFee == 0, \\\"already registered\\\");\\n        dataProviders[msg.sender].minFee = _minFee;\\n        emit ProviderRegistered(msg.sender, _minFee);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev setProviderMinFee - provider calls for setting its minimum fee\\n     * @param _newMinFee uint256 - minimum fee provider will accept to fulfill request\\n     * @return success\\n     */\\n    function setProviderMinFee(uint256 _newMinFee) external returns (bool success) {\\n        require(_newMinFee > 0, \\\"fee must be > 0\\\");\\n        require(dataProviders[msg.sender].minFee > 0, \\\"not registered yet\\\");\\n        uint256 oldMinFee = dataProviders[msg.sender].minFee;\\n        dataProviders[msg.sender].minFee = _newMinFee;\\n        emit SetProviderMinFee(msg.sender, oldMinFee, _newMinFee);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev setProviderGranularFee - provider calls for setting its fee for the selected consumer\\n     * @param _consumer address of consumer contract\\n     * @param _newFee uint256 - minimum fee provider will accept to fulfill request\\n     * @return success\\n     */\\n    function setProviderGranularFee(address _consumer, uint256 _newFee) external returns (bool success) {\\n        require(_newFee > 0, \\\"fee must be > 0\\\");\\n        require(dataProviders[msg.sender].minFee > 0, \\\"not registered yet\\\");\\n        uint256 oldFee = dataProviders[msg.sender].granularFees[_consumer];\\n        dataProviders[msg.sender].granularFees[_consumer] = _newFee;\\n        emit SetProviderGranularFee(msg.sender, _consumer, oldFee, _newFee);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Allows the provider to withdraw their xFUND\\n     * @param _recipient is the address the funds will be sent to\\n     * @param _amount is the amount of xFUND transferred from the Coordinator contract\\n     */\\n    function withdraw(address _recipient, uint256 _amount) external hasAvailableTokens(_amount) {\\n        withdrawableTokens[msg.sender] = withdrawableTokens[msg.sender].sub(_amount);\\n        emit WithdrawFees(msg.sender, _recipient, _amount);\\n        assert(token.transfer(_recipient, _amount));\\n    }\\n\\n    /**\\n     * @dev initialiseRequest - called by Consumer contract to initialise a data request. Can only be called by\\n     * a contract. Daata providers can watch for the DataRequested being emitted, and act on any requests\\n     * for the provider. Only the provider specified in the request may fulfil the request.\\n     * @param _provider address of the data provider.\\n     * @param _fee amount of Tokens to pay for data\\n     * @param _data type of data being requested. E.g. PRICE.BTC.USD.AVG requests average price for BTC/USD pair\\n     * @return success if the execution was successful. Status is checked in the Consumer contract\\n     */\\n    function initialiseRequest(\\n        address _provider,\\n        uint256 _fee,\\n        bytes32 _data\\n    ) external paidSufficientFee(_fee, _provider) nonReentrant returns (bool success) {\\n        address consumer = msg.sender; // msg.sender is the address of the Consumer's smart contract\\n        require(address(consumer).isContract(), \\\"only a contract can initialise\\\");\\n        require(dataProviders[_provider].minFee > 0, \\\"provider not registered\\\");\\n\\n        token.transferFrom(consumer, address(this), _fee);\\n\\n        uint256 nonce = nonces[_provider][consumer];\\n        // recreate request ID from params sent\\n        bytes32 requestId = makeRequestId(consumer, _provider, address(this), nonce, _data);\\n\\n        dataRequests[requestId].consumer = consumer;\\n        dataRequests[requestId].provider = _provider;\\n        dataRequests[requestId].fee = _fee;\\n        dataRequests[requestId].status = REQUEST_STATUS_REQUESTED;\\n\\n        // Transfer successful - emit the DataRequested event\\n        emit DataRequested(\\n            consumer,\\n            _provider,\\n            _fee,\\n            _data,\\n            requestId\\n        );\\n\\n        nonces[_provider][consumer] = nonces[_provider][consumer].add(1);\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev fulfillRequest - called by data provider to forward data to the Consumer. Only the specified provider\\n     * may fulfil the data request.\\n     * @param _requestId the request the provider is sending data for\\n     * @param _requestedData the data to send\\n     * @param _signature data provider's signature of the _requestId, _requestedData and Consumer's address\\n     * this will used to validate the data's origin in the Consumer's contract\\n     * @return success if the execution was successful.\\n     */\\n    function fulfillRequest(bytes32 _requestId, uint256 _requestedData, bytes memory _signature)\\n    external\\n    nonReentrant\\n    returns (bool){\\n        require(dataProviders[msg.sender].minFee > 0, \\\"provider not registered\\\");\\n        require(dataRequests[_requestId].status == REQUEST_STATUS_REQUESTED, \\\"request does not exist\\\");\\n\\n        address consumer = dataRequests[_requestId].consumer;\\n        address provider = dataRequests[_requestId].provider;\\n        uint256 fee = dataRequests[_requestId].fee;\\n\\n        // signature must be valid. msg.sender must match\\n        // 1. the provider in the request\\n        // 2. the address recovered from the signature\\n        bytes32 message = ECDSA.toEthSignedMessageHash(keccak256(abi.encodePacked(_requestId, _requestedData, consumer)));\\n        address recoveredProvider = ECDSA.recover(message, _signature);\\n\\n        // msg.sender is the address of the data provider\\n        require(msg.sender == provider &&\\n            msg.sender == recoveredProvider &&\\n            recoveredProvider == provider,\\n            \\\"ECDSA.recover mismatch - correct provider and data?\\\"\\n        );\\n\\n        emit RequestFulfilled(\\n            consumer,\\n            msg.sender,\\n            _requestId,\\n            _requestedData\\n        );\\n\\n        delete dataRequests[_requestId];\\n\\n        withdrawableTokens[provider] = withdrawableTokens[provider].add(fee);\\n\\n        // All checks have passed - send the data to the consumer contract\\n        // consumer will see msg.sender as the Router's contract address\\n        // using functionCall from OZ's Address library\\n        IConsumerBase cb; // just used to get the rawReceiveData function's selector\\n        require(gasleft() >= 400000, \\\"not enough gas\\\");\\n        consumer.functionCall(abi.encodeWithSelector(cb.rawReceiveData.selector, _requestedData, _requestId));\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev getTokenAddress - get the contract address of the Token being used for paying fees\\n     * @return address of the token smart contract\\n     */\\n    function getTokenAddress() external view returns (address) {\\n        return address(token);\\n    }\\n\\n    /**\\n     * @dev getDataRequestConsumer - get the consumer for a request\\n     * @param _requestId bytes32 request id\\n     * @return address data consumer contract address\\n     */\\n    function getDataRequestConsumer(bytes32 _requestId) external view returns (address) {\\n        return dataRequests[_requestId].consumer;\\n    }\\n\\n    /**\\n     * @dev getDataRequestProvider - get the consumer for a request\\n     * @param _requestId bytes32 request id\\n     * @return address data provider address\\n     */\\n    function getDataRequestProvider(bytes32 _requestId) external view returns (address) {\\n        return dataRequests[_requestId].provider;\\n    }\\n    /**\\n     * @dev requestExists - check a request ID exists\\n     * @param _requestId bytes32 request id\\n     * @return bool\\n     */\\n    function requestExists(bytes32 _requestId) external view returns (bool) {\\n        return dataRequests[_requestId].status != REQUEST_STATUS_NOT_SET;\\n    }\\n\\n    /**\\n     * @dev getRequestStatus - check a request status\\n     * 0 = does not exist/not yet initialised\\n     * 1 = Request initialised\\n     * @param _requestId bytes32 request id\\n     * @return bool\\n     */\\n    function getRequestStatus(bytes32 _requestId) external view returns (uint8) {\\n        return dataRequests[_requestId].status;\\n    }\\n\\n    /**\\n     * @dev getProviderMinFee - returns minimum fee provider will accept to fulfill data request\\n     * @param _provider address of data provider\\n     * @return uint256\\n     */\\n    function getProviderMinFee(address _provider) external view returns (uint256) {\\n        return dataProviders[_provider].minFee;\\n    }\\n\\n    /**\\n     * @dev getProviderGranularFee - returns fee provider will accept to fulfill data request\\n     * for the given consumer\\n     * @param _provider address of data provider\\n     * @param _consumer address of consumer contract\\n     * @return uint256\\n     */\\n    function getProviderGranularFee(address _provider, address _consumer) external view returns (uint256) {\\n        if(dataProviders[_provider].granularFees[_consumer] > 0) {\\n            return dataProviders[_provider].granularFees[_consumer];\\n        } else {\\n            return dataProviders[_provider].minFee;\\n        }\\n    }\\n\\n    /**\\n     * @dev getWithdrawableTokens - returns withdrawable tokens for the given provider\\n     * @param _provider address of data provider\\n     * @return uint256\\n     */\\n    function getWithdrawableTokens(address _provider) external view returns (uint256) {\\n        return withdrawableTokens[_provider];\\n    }\\n\\n    /**\\n     * @dev Reverts if amount is not at least what the provider has set as their min fee\\n     * @param _feePaid The payment for the request\\n     * @param _provider address of the provider\\n     */\\n    modifier paidSufficientFee(uint256 _feePaid, address _provider) {\\n        require(_feePaid > 0, \\\"fee cannot be zero\\\");\\n        if(dataProviders[_provider].granularFees[msg.sender] > 0) {\\n            require(_feePaid >= dataProviders[_provider].granularFees[msg.sender], \\\"below agreed granular fee\\\");\\n        } else {\\n            require(_feePaid >= dataProviders[_provider].minFee, \\\"below agreed min fee\\\");\\n        }\\n        _;\\n    }\\n\\n    /**\\n     * @dev Reverts if amount requested is greater than withdrawable balance\\n     * @param _amount The given amount to compare to `withdrawableTokens`\\n     */\\n    modifier hasAvailableTokens(uint256 _amount) {\\n        require(withdrawableTokens[msg.sender] >= _amount, \\\"can't withdraw more than balance\\\");\\n        _;\\n    }\\n}\\n\"\r\n    },\r\n    \"/storage/Home_Storage/src/Unification/github.com/xfund-router/contracts/interfaces/IConsumerBase.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\ninterface IConsumerBase {\\n    function rawReceiveData(uint256 _price, bytes32 _requestId) external;\\n}\\n\"\r\n    },\r\n    \"/storage/Home_Storage/src/Unification/github.com/xfund-router/contracts/lib/RequestIdBase.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title RequestIdBase\\n *\\n * @dev A contract used by ConsumerBase and Router to generate requestIds\\n *\\n */\\ncontract RequestIdBase {\\n\\n    /**\\n    * @dev makeRequestId generates a requestId\\n    *\\n    * @param _dataConsumer address of consumer contract\\n    * @param _dataProvider address of provider\\n    * @param _router address of Router contract\\n    * @param _requestNonce uint256 request nonce\\n    * @param _data bytes32 hex encoded data endpoint\\n    *\\n    * @return bytes32 requestId\\n    */\\n    function makeRequestId(\\n        address _dataConsumer,\\n        address _dataProvider,\\n        address _router,\\n        uint256 _requestNonce,\\n        bytes32 _data) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(_dataConsumer, _dataProvider, _router, _requestNonce, _data));\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/security/ReentrancyGuard.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor () {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and make it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\\n *\\n * These functions can be used to verify that a message was signed by the holder\\n * of the private keys of a given address.\\n */\\nlibrary ECDSA {\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature`. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     */\\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\\n        // Check the signature length\\n        if (signature.length != 65) {\\n            revert(\\\"ECDSA: invalid signature length\\\");\\n        }\\n\\n        // Divide the signature in r, s and v variables\\n        bytes32 r;\\n        bytes32 s;\\n        uint8 v;\\n\\n        // ecrecover takes the signature parameters, and the only way to get them\\n        // currently is to use assembly.\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            r := mload(add(signature, 0x20))\\n            s := mload(add(signature, 0x40))\\n            v := byte(0, mload(add(signature, 0x60)))\\n        }\\n\\n        return recover(hash, v, r, s);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     */\\n    function recover(bytes32 hash, uint8 v, bytes32 r, bytes32 s) internal pure returns (address) {\\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\\n        // the valid range for s in (281): 0 < s < secp256k1n ÷ 2 + 1, and for v in (282): v ∈ {27, 28}. Most\\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\\n        //\\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\\n        // these malleable signatures as well.\\n        require(uint256(s) <= 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0, \\\"ECDSA: invalid signature 's' value\\\");\\n        require(v == 27 || v == 28, \\\"ECDSA: invalid signature 'v' value\\\");\\n\\n        // If the signature is valid (and not malleable), return the signer address\\n        address signer = ecrecover(hash, v, r, s);\\n        require(signer != address(0), \\\"ECDSA: invalid signature\\\");\\n\\n        return signer;\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\\n        // 32 is the length in bytes of hash,\\n        // enforced by the type signature above\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n32\\\", hash));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Typed Data, created from a\\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\\n     * to the one signed with the\\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\\n     * JSON-RPC method as part of EIP-712.\\n     *\\n     * See {recover}.\\n     */\\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19\\\\x01\\\", domainSeparator, structHash));\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/math/SafeMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is no longer needed starting with Solidity 0.8. The compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"remappings\": [],\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"evmVersion\": \"istanbul\",\r\n    \"libraries\": {},\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"consumer\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"provider\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"data\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"requestId\",\"type\":\"bytes32\"}],\"name\":\"DataRequested\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"provider\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"minFee\",\"type\":\"uint256\"}],\"name\":\"ProviderRegistered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"consumer\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"provider\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"requestId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"requestedData\",\"type\":\"uint256\"}],\"name\":\"RequestFulfilled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"provider\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"consumer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldFee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newFee\",\"type\":\"uint256\"}],\"name\":\"SetProviderGranularFee\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"provider\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldMinFee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newMinFee\",\"type\":\"uint256\"}],\"name\":\"SetProviderMinFee\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"}],\"name\":\"TokenSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"provider\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"WithdrawFees\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"REQUEST_STATUS_NOT_SET\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"REQUEST_STATUS_REQUESTED\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"dataRequests\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"consumer\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"provider\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"status\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_requestId\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"_requestedData\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_signature\",\"type\":\"bytes\"}],\"name\":\"fulfillRequest\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_requestId\",\"type\":\"bytes32\"}],\"name\":\"getDataRequestConsumer\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_requestId\",\"type\":\"bytes32\"}],\"name\":\"getDataRequestProvider\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_provider\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_consumer\",\"type\":\"address\"}],\"name\":\"getProviderGranularFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_provider\",\"type\":\"address\"}],\"name\":\"getProviderMinFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_requestId\",\"type\":\"bytes32\"}],\"name\":\"getRequestStatus\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTokenAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_provider\",\"type\":\"address\"}],\"name\":\"getWithdrawableTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_provider\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_fee\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"_data\",\"type\":\"bytes32\"}],\"name\":\"initialiseRequest\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_minFee\",\"type\":\"uint256\"}],\"name\":\"registerAsProvider\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_requestId\",\"type\":\"bytes32\"}],\"name\":\"requestExists\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_consumer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_newFee\",\"type\":\"uint256\"}],\"name\":\"setProviderGranularFee\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newMinFee\",\"type\":\"uint256\"}],\"name\":\"setProviderMinFee\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"Router","CompilerVersion":"v0.8.3+commit.8d00100c","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000892a6f9df0147e5f079b0993f486f9aca3c87881","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}