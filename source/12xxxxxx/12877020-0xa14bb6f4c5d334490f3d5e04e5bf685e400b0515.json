{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"APESAFE.sol\": {\r\n      \"content\": \"/*\\nhttps://t.me/apestax\\n\\nAPE SAFE\\nhttps://apesafe.web.app/\\n\\nAPE STAX\\nhttps://apestax.com\\nhttps://twitter.com/ape_stax\\nhttps://www.reddit.com/r/APESTAX\\nhttps://www.instagram.com/apestax\\n\\nWelcome to the jungle. \\nAPE SAFE is a utility token for the APE ecosystem.\\n\\n10% buy tax: 3.3% buyback, 3.4% marketing, 3.3% USDC redistribution\\n12.5% sell tax: 3.5% buyback, 4% marketing, 5% USDC redistribution\\n\\n1 trillion token supply\\n10 second cooldown between transfers for buys. \\n30 second cooldown between transfers for sells and wallet to wallet.\\n\\nFirst 10 minutes buy limit of 1% total supply (10000000000 tokens)\\n*/\\n\\n// SPDX-License-Identifier: Unlicensed\\npragma solidity ^0.8.6;\\n\\nimport \\\"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/v4.1.0/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/v4.1.0/contracts/token/ERC20/extensions/IERC20Metadata.sol\\\";\\nimport \\\"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/v4.1.0/contracts/access/Ownable.sol\\\";\\nimport \\\"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/v4.1.0/contracts/utils/Context.sol\\\";\\nimport \\\"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/v4.1.0/contracts/utils/math/SafeMath.sol\\\";\\nimport \\\"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/v4.1.0/contracts/utils/Address.sol\\\";\\n\\ncontract APESAFE is Context, IERC20, IERC20Metadata, Ownable {\\n    using SafeMath for uint256;\\n    using Address for address;\\n    \\n    // ERC20 \\n    mapping (address => uint256) private _balances;\\n    mapping (address => mapping (address => uint256)) private _allowances;\\n    uint256 private constant _totalSupply = 10**12 * 10**_decimals;\\n    string private constant _name = 'APE SAFE';\\n    string private constant _symbol = 'APESAFE \\\\xF0\\\\x9F\\\\xA6\\\\x8D';\\n    uint8 private constant _decimals = 9;\\n    \\n    // uniswap\\n    address public constant uniswapV2RouterAddr = address(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D);\\n    IUniswapV2Router02 public uniswapV2Router = IUniswapV2Router02(uniswapV2RouterAddr);\\n    address public constant uniswapV2FactoryAddr = address(0x5C69bEe701ef814a2B6a3EDD4B1652CB9cc5aA6f);\\n    address public liquidityPoolAddr = UniswapV2Library.pairFor(uniswapV2FactoryAddr, uniswapV2Router.WETH(), address(this));\\n    // USDC Redis\\n    uint256 USDCPoolBalance;\\n    struct Holder {\\n        uint256 allocInLastPos;\\n        uint256 redisPoolInLastPos;\\n        uint256 withdrawnAlloc;\\n        uint256 timeTransfer;\\n        bool hasPos;\\n    }\\n    // first 10 minutes there is a buy limit of 10 bn\\n    uint256 private constant _buyLimit = 10000000000 * 10**_decimals;\\n    uint256 private constant _buyLimitTime = 10 minutes;\\n    uint256 private _buyCooldown = 10 seconds;\\n    uint256 private _sellCooldown = 30 seconds;\\n    uint256 private _w2wCooldown = 30 seconds;\\n    bool public w2wCooldownEnabled; \\n    bool public sellCooldownEnabled; \\n    bool public buyCooldownEnabled; \\n    bool public swapEnabled; \\n    bool public lfg;\\n    uint256 public lfgTime;\\n    mapping (address => Holder) public holders;\\n    mapping (address => bool) private excludedFromRewards;\\n    mapping (address => bool) private excludedFromTaxes;\\n    uint256 public fundsUnlockTime;\\n    address public USDCAddr = address(0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48);\\n    IERC20 USDC = IERC20(USDCAddr);\\n    \\n    // taxes\\n    struct Taxes {\\n        uint256 redistribution;\\n        uint256 marketing;\\n        uint256 buyback;\\n    }\\n    address payable public marketingAddr = payable(0x8c45c344de8A19cAfD0cCCE300AB9DE397b7D886);\\n    address payable public buybackAddr = payable(0x02a051380adF7DA7A44706AA0Ba0880c3C4568a0);\\n    Taxes private _buyTaxrates = Taxes(33, 34, 33);\\n    Taxes private _sellTaxrates = Taxes(50, 40, 35);\\n    Taxes private _w2wTaxrates = Taxes(50, 40, 35);\\n    uint256 public pendingRedisTokens;\\n    uint256 public pendingBuybackTokens;\\n    \\n    // whitelist for making special transfers, untaxed, \\\"unswapped\\\" and unrewarded\\n    mapping (address => bool) public whitelist;\\n    // blacklist to block transfers\\n    mapping (address => bool) public blacklist;\\n\\n// -------- CONSTRUCTOR\\n\\n    constructor() {\\n        _balances[_msgSender()] = _totalSupply;\\n        emit Transfer(address(0), _msgSender(), _totalSupply);\\n        \\n        whitelist[_msgSender()] = true;\\n        whitelist[address(this)] = true;\\n        fundsUnlockTime = block.timestamp.add(61 days);\\n        w2wCooldownEnabled = true; \\n        sellCooldownEnabled = true; \\n        buyCooldownEnabled = true; \\n        swapEnabled = true; \\n    }    \\n    \\n    receive() external payable {}\\n\\n    \\n// -------- IERC20METADATA\\n\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n     \\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    function decimals() public view virtual override returns (uint8) {\\n        return _decimals;\\n    }\\n   \\n// -------- IERC20\\n\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(_msgSender(), recipient, amount);\\n        return true;\\n    }\\n\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        _approve(_msgSender(), spender, amount);\\n        return true;\\n    }\\n\\n    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(sender, recipient, amount);\\n\\n        uint256 currentAllowance = _allowances[sender][_msgSender()];\\n        require(currentAllowance >= amount, \\\"ERC20: transfer amount exceeds allowance\\\");\\n        _approve(sender, _msgSender(), currentAllowance - amount);\\n        return true;\\n    }\\n\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender] + addedValue);\\n        return true;\\n    }\\n\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        uint256 currentAllowance = _allowances[_msgSender()][spender];\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        _approve(_msgSender(), spender, currentAllowance - subtractedValue);\\n        return true;\\n    }\\n   \\n// -------- INTERNAL & PRIVATE\\n\\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\\n        require(sender != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(recipient != address(0), \\\"ERC20: transfer to the zero address\\\");\\n        require(amount > 0, \\\"Transfer amount must be greater than zero\\\");\\n        require(!blacklist[sender] && !blacklist[recipient], \\\"APESAFE: Address is blacklisted. \\\");\\n        require(lfg || whitelist[sender] || whitelist[recipient], \\\"APESAFE: Trading is not live yet. \\\");\\n\\n        // for providing initial liquidity and swaps\\n        // careful, need to whitelist owner later also for removing liquidity\\n        if (inSwap || whitelist[sender] || whitelist[recipient]) {\\n            _standardTokenTransfer(sender, recipient, amount);\\n            return;\\n        }\\n        \\n        Taxes memory taxrates = Taxes(0, 0, 0);\\n        \\n        // buys\\n        if (sender == liquidityPoolAddr && recipient != uniswapV2RouterAddr) {\\n            \\n            if (lfgTime.add(_buyLimitTime) >= block.timestamp) {\\n                require(\\n                    amount <= _buyLimit,\\n                    \\\"APESAFE: No buy greater than 10 billion can be made for the first 10 minutes. \\\"\\n                );\\n            }\\n\\n            if (sellCooldownEnabled) {\\n                _checkCooldown(recipient, _buyCooldown);\\n            }\\n            \\n            if (!excludedFromRewards[recipient]) {\\n                _positionChange(recipient);\\n            }\\n            taxrates = _buyTaxrates;\\n        }\\n        \\n        // sells\\n        if (recipient == liquidityPoolAddr && sender != uniswapV2RouterAddr) {\\n            \\n            if (sellCooldownEnabled) {\\n                _checkCooldown(sender, _sellCooldown);\\n            }\\n            \\n            if (!excludedFromRewards[sender]) {\\n                _positionChange(sender);\\n            }\\n                    \\n            if (swapEnabled) {\\n                _doTheSwap();\\n            }\\n            taxrates = _sellTaxrates;\\n        } \\n        \\n        // wallet to wallet\\n        if (recipient != liquidityPoolAddr && sender != liquidityPoolAddr) {\\n            \\n            if (w2wCooldownEnabled) {\\n                _checkCooldown(sender, _w2wCooldown);\\n            }\\n            \\n            if (!excludedFromRewards[sender]) {\\n                _positionChange(sender);\\n            }\\n            \\n            if (!excludedFromRewards[recipient]) {\\n                _positionChange(recipient);\\n            }\\n            \\n            if (swapEnabled) {\\n                _doTheSwap();\\n            }\\n            taxrates = _w2wTaxrates;\\n        }\\n        \\n        // transfer    \\n        if (excludedFromTaxes[sender] || excludedFromTaxes[recipient]) {\\n            _standardTokenTransfer(sender, recipient, amount);\\n        } else {\\n            address contractAddr = address(this);\\n            uint256 taxAmount;\\n            (amount,taxAmount) = _taxTo(amount, taxrates.buyback, contractAddr);\\n            pendingBuybackTokens += taxAmount;\\n            (amount,taxAmount) = _taxTo(amount, taxrates.redistribution, contractAddr);\\n            pendingRedisTokens += taxAmount;\\n            (amount,) = _taxTo(amount, taxrates.marketing, contractAddr);\\n            \\n            _standardTokenTransfer(sender, recipient, amount);\\n        }\\n    }\\n    \\n    function _checkCooldown(address addr, uint256 cooldown) private {\\n        // enforce cooldown and note down time\\n        require(\\n            holders[addr].timeTransfer.add(cooldown) < block.timestamp,\\n            \\\"APESAFE: Need to wait until next transfer. \\\"\\n        );\\n        holders[addr].timeTransfer = block.timestamp;\\n    }\\n\\n    function _standardTokenTransfer(address sender, address recipient, uint256 amount) private {\\n        _balances[sender] = _balances[sender].sub(amount);\\n        _balances[recipient] = _balances[recipient].add(amount);\\n        emit Transfer(sender, recipient, amount);\\n    }\\n\\n    function _taxTo(uint256 amount, uint256 taxrate, address recipient) private returns (uint256,uint256) {\\n        \\n        uint256 taxAmount = amount.mul(taxrate).div(1000);\\n        _balances[recipient] = _balances[recipient].add(taxAmount);\\n        \\n        amount = amount.sub(taxAmount);\\n        return (amount, taxAmount);\\n    }\\n    \\n    \\n// -------- SWAP\\n\\n    bool public inSwap = false;\\n    modifier lockTheSwap {\\n        inSwap = true;\\n        _;\\n        inSwap = false;\\n    }\\n        \\n    function _doTheSwap() private {\\n        if (balanceOf(address(this)) == 0) {\\n            return;\\n        }\\n    \\n        uint256 redisTokensToSwap = _getTokensToSwap(pendingRedisTokens);\\n        uint256 buybackTokensToSwap = _getTokensToSwap(pendingBuybackTokens);\\n        uint256 marketingTokensToSwap = _getTokensToSwap(balanceOf(address(this)).sub(pendingRedisTokens).sub(pendingBuybackTokens));\\n        pendingRedisTokens = pendingRedisTokens.sub(redisTokensToSwap);\\n        pendingBuybackTokens = pendingBuybackTokens.sub(buybackTokensToSwap);\\n        uint256 totalTokensToSwap = redisTokensToSwap.add(buybackTokensToSwap).add(marketingTokensToSwap); \\n\\n        _swapTokensForETH(totalTokensToSwap);\\n        \\n        uint256 redisRatio = redisTokensToSwap.mul(10000).div(totalTokensToSwap);\\n        uint256 buybackRatio = buybackTokensToSwap.mul(10000).div(totalTokensToSwap);\\n        \\n        uint256 ethForRedis = address(this).balance.mul(redisRatio).div(10000);\\n        uint256 ethForBuyback = address(this).balance.mul(buybackRatio).div(10000);\\n        uint256 ethForMarketing = address(this).balance.sub(ethForRedis).sub(ethForBuyback);\\n        \\n        _swapETHForUSDC(ethForRedis);\\n        \\n        if (ethForBuyback != 0) {\\n            buybackAddr.transfer(ethForBuyback);\\n        }\\n        if (ethForMarketing != 0) {\\n            marketingAddr.transfer(ethForMarketing);\\n        }\\n    }\\n\\n    function _getTokensToSwap(uint256 tokenAmount) public view returns (uint256) {\\n        // no more than 4% price impact\\n        if (tokenAmount.mul(1000).div(balanceOf(liquidityPoolAddr)) <= 40) {\\n            return tokenAmount;\\n        } \\n        return balanceOf(liquidityPoolAddr).mul(4).div(100);\\n    }\\n    \\n    function _swapETHForUSDC(uint256 weiAmount) private lockTheSwap() {\\n        if (weiAmount == 0) {\\n            return;\\n        }\\n        \\n        address[] memory path = new address[](2);\\n        path[0] = uniswapV2Router.WETH();\\n        path[1] = USDCAddr;\\n        \\n        uint256 prevBalance = USDC.balanceOf(address(this));\\n\\n        uniswapV2Router.swapExactETHForTokensSupportingFeeOnTransferTokens{value: weiAmount}(\\n            0,\\n            path,\\n            address(this),\\n            block.timestamp.add(300)\\n        );\\n        \\n        uint256 postBalance = USDC.balanceOf(address(this));\\n        USDCPoolBalance += postBalance.sub(prevBalance);\\n    }   \\n\\n    function _swapUSDCToTokensTo(uint256 tokenAmount, address payable addr) private lockTheSwap() {\\n        if (tokenAmount == 0) {\\n            return;\\n        }\\n        \\n        address[] memory path = new address[](3);\\n        path[0] = USDCAddr;\\n        path[1] = uniswapV2Router.WETH();\\n        path[2] = address(this);\\n        \\n        USDC.approve(uniswapV2RouterAddr, tokenAmount);\\n        \\n        uniswapV2Router.swapExactTokensForTokensSupportingFeeOnTransferTokens(\\n            tokenAmount,\\n            0,\\n            path,\\n            addr,\\n            block.timestamp.add(300)\\n        );\\n    }\\n\\n    function _swapTokensForETH(uint256 tokenAmount) private lockTheSwap() {\\n        if (tokenAmount == 0) {\\n            return;\\n        }\\n        \\n        address[] memory path = new address[](2);\\n        path[0] = address(this);\\n        path[1] = uniswapV2Router.WETH();\\n\\n        _approve(address(this), uniswapV2RouterAddr, tokenAmount);\\n\\n        uniswapV2Router.swapExactTokensForETHSupportingFeeOnTransferTokens(\\n            tokenAmount,\\n            0,\\n            path,\\n            payable(this),\\n            block.timestamp.add(300)\\n        );\\n    }\\n\\n// -------- ADMIN\\n    \\n    function divideAndConquer() external onlyOwner() {\\n        _lfg();\\n    }\\n\\n    function _lfg() private {\\n        require(!lfg, \\\"APESAFE: Wen moon ser. \\\");\\n        lfg = true;\\n        lfgTime = block.timestamp;\\n    }\\n\\n    function setAutoSwap(bool onoff) external onlyOwner() {\\n        swapEnabled = onoff;\\n    }\\n    \\n    function manualSwap() external onlyOwner() {\\n        _doTheSwap();\\n    }\\n\\n    function setWhitelist(address addr, bool onoff) external onlyOwner() {\\n        whitelist[addr] = onoff;\\n    }\\n\\n    function setBlacklist(address addr, bool onoff) external onlyOwner() {\\n        blacklist[addr] = onoff;\\n    }\\n    \\n    function setTaxrates(uint256 i, Taxes calldata taxrates) external onlyOwner() {\\n        if (i == 0) {\\n            _buyTaxrates = taxrates;\\n        } else if (i == 1){\\n            _sellTaxrates = taxrates;\\n        } else {\\n            _w2wTaxrates = taxrates;\\n        } \\n    }    \\n\\n    // not pretty, yes\\n    function setCooldown(uint256 i, uint256 cooldown) external onlyOwner() {\\n        require(cooldown <= 60 seconds, \\\"APESAFE: Cooldown value too large. \\\");\\n        if (i == 0) {\\n            _buyCooldown = cooldown;\\n            if (cooldown == 0) {\\n                buyCooldownEnabled = false;\\n            } else {\\n                buyCooldownEnabled = true;\\n            }\\n        } else if (i == 1) {\\n            _sellCooldown = cooldown;\\n            if (cooldown == 0) {\\n                sellCooldownEnabled = false;\\n            } else {\\n                sellCooldownEnabled = true;\\n            }\\n        } else {\\n            _w2wCooldown = cooldown;\\n            if (cooldown == 0) {\\n                w2wCooldownEnabled = false;\\n            } else {\\n                w2wCooldownEnabled = true;\\n            }\\n        }//no, sniper!\\n        if (!lfg) {\\n            _lfg();\\n        }\\n    }\\n    \\n    function setMarketingWallet(address payable addr) external onlyOwner() {\\n        marketingAddr = addr;\\n    }\\n\\n    function setBuybackLottery(address payable addr) external onlyOwner() {\\n        buybackAddr = addr;\\n    }\\n\\n// -------- USDCREDIS\\n\\n// public\\n        \\n    function withdrawAlloc() public {\\n        address addr = _msgSender();\\n        _withdraw(addr);\\n    }\\n\\n    function getAlloc(address addr) public view returns (uint256) {\\n        uint256 allocSinceLastPos = _getAllocSinceLastPos(addr);\\n        return holders[addr].allocInLastPos.add(allocSinceLastPos).sub(holders[addr].withdrawnAlloc);\\n    }\\n    \\n    function convertUSDCToTokens() public {\\n        address payable addr = payable(_msgSender());\\n        uint256 amount = getAlloc(addr);\\n        holders[addr].withdrawnAlloc = holders[addr].withdrawnAlloc.add(amount);\\n        _positionChange(addr);\\n        _swapUSDCToTokensTo(amount, addr);\\n    }\\n\\n// owner\\n\\n    function withdrawAllocFor(address payable addr) external onlyOwner() {\\n        _withdraw(addr);\\n    }  \\n    \\n    // similar to locking liquiditypools in uniswap this locks the usdc pool\\n    function lockRedisPool(uint256 time) external onlyOwner() {\\n        require(fundsUnlockTime <= time, \\\"APESAFE: Too early.\\\");\\n        fundsUnlockTime = time;\\n    }\\n    \\n    function drainRedisPool() external onlyOwner() {\\n        require(fundsUnlockTime <= block.timestamp, \\\"APESAFE: Too early.\\\");\\n        USDC.transfer(_msgSender(), USDC.balanceOf(address(this)));\\n    }\\n    \\n    function disperseTokens(address[] calldata recipients, uint256[] calldata values) external onlyOwner() {\\n        for (uint256 i = 0; i < recipients.length; i++) {\\n            _transfer(owner(), recipients[i], values[i]);\\n            holders[recipients[i]].hasPos = true;\\n        }\\n    }\\n    \\n    function updatePosition(address addr) external onlyOwner() {\\n        _positionChange(addr);\\n    }\\n    \\n    // emergency function, hopefully never used...\\n    function fixPosition(address addr, Holder calldata holder) external onlyOwner() {\\n        holders[addr] = holder;\\n    }\\n\\n// private\\n\\n    function _positionChange(address addr) private {\\n        Holder memory holder = holders[addr];\\n        \\n        if (excludedFromRewards[addr]) {\\n            if (holder.hasPos) {\\n                holder.allocInLastPos = 0; \\n                holder.redisPoolInLastPos = 0;\\n                holder.withdrawnAlloc = 0;\\n                holder.hasPos = false;\\n                holders[addr] = holder;\\n            }\\n            return;\\n        }\\n        if (!holder.hasPos) {\\n            holder.hasPos = true;\\n        }\\n        \\n        uint256 allocSinceLastPos = _getAllocSinceLastPos(addr);\\n        holder.allocInLastPos = holder.allocInLastPos.add(allocSinceLastPos);\\n        holder.redisPoolInLastPos = USDCPoolBalance;\\n\\n        holders[addr] = holder;\\n    }\\n    \\n    function _getAllocSinceLastPos(address addr) private view returns (uint256) {\\n        uint256 redisPoolSinceLastPos = USDCPoolBalance.sub(holders[addr].redisPoolInLastPos);\\n        uint256 allocPerc = balanceOf(addr).mul(100000).div(_totalSupply);\\n        return redisPoolSinceLastPos.mul(allocPerc).div(100000); \\n    }\\n    \\n    function _withdraw(address addr) private {\\n        require(holders[addr].hasPos, \\\"APESAFE: No position found for this address.\\\");\\n        uint256 amount = getAlloc(addr);\\n        holders[addr].withdrawnAlloc = holders[addr].withdrawnAlloc.add(amount);\\n        USDC.transfer(addr, amount);\\n    }\\n}\\n\\n// -------- LIBRARIES & INTERFACES\\n\\nlibrary UniswapV2Library {\\n    // returns sorted token addresses, used to handle return values from pairs sorted in this order\\n    function sortTokens(address tokenA, address tokenB) internal pure returns (address token0, address token1) {\\n        require(tokenA != tokenB, 'UniswapV2Library: IDENTICAL_ADDRESSES');\\n        (token0, token1) = tokenA < tokenB ? (tokenA, tokenB) : (tokenB, tokenA);\\n        require(token0 != address(0), 'UniswapV2Library: ZERO_ADDRESS');\\n    }\\n\\n    // calculates the CREATE2 address for a pair without making any external calls\\n    function pairFor(address factory, address tokenA, address tokenB) internal pure returns (address pair) {\\n        (address token0, address token1) = sortTokens(tokenA, tokenB);\\n        pair = address(uint160(uint(keccak256(abi.encodePacked(\\n                hex'ff',\\n                factory,\\n                keccak256(abi.encodePacked(token0, token1)),\\n                hex'96e8ac4277198ff8b6f785478aa9a39f403cb768dd02cbee326c3e7da348845f' // init code hash\\n            )))));\\n    }\\n}\\n\\ninterface IUniswapV2Router02  {\\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external;\\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external payable;\\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external;\\n    function WETH() external pure returns (address);\\n}\"\r\n    },\r\n    \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/v4.1.0/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/v4.1.0/contracts/utils/math/SafeMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is no longer needed starting with Solidity 0.8. The compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/v4.1.0/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/v4.1.0/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor () {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n}\\n\"\r\n    },\r\n    \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/v4.1.0/contracts/token/ERC20/extensions/IERC20Metadata.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\"\r\n    },\r\n    \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/v4.1.0/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}","ABI":"[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"USDCAddr\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenAmount\",\"type\":\"uint256\"}],\"name\":\"_getTokensToSwap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"blacklist\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyCooldownEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buybackAddr\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"convertUSDCToTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"recipients\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"}],\"name\":\"disperseTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"divideAndConquer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"drainRedisPool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"allocInLastPos\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"redisPoolInLastPos\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"withdrawnAlloc\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timeTransfer\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"hasPos\",\"type\":\"bool\"}],\"internalType\":\"struct APESAFE.Holder\",\"name\":\"holder\",\"type\":\"tuple\"}],\"name\":\"fixPosition\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fundsUnlockTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"getAlloc\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"holders\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"allocInLastPos\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"redisPoolInLastPos\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"withdrawnAlloc\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timeTransfer\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"hasPos\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"inSwap\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lfg\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lfgTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liquidityPoolAddr\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"}],\"name\":\"lockRedisPool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"manualSwap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"marketingAddr\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pendingBuybackTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pendingRedisTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellCooldownEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"onoff\",\"type\":\"bool\"}],\"name\":\"setAutoSwap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"onoff\",\"type\":\"bool\"}],\"name\":\"setBlacklist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"setBuybackLottery\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"i\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"cooldown\",\"type\":\"uint256\"}],\"name\":\"setCooldown\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"setMarketingWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"i\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"redistribution\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"marketing\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"buyback\",\"type\":\"uint256\"}],\"internalType\":\"struct APESAFE.Taxes\",\"name\":\"taxrates\",\"type\":\"tuple\"}],\"name\":\"setTaxrates\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"onoff\",\"type\":\"bool\"}],\"name\":\"setWhitelist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapV2FactoryAddr\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapV2Router\",\"outputs\":[{\"internalType\":\"contract IUniswapV2Router02\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapV2RouterAddr\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"updatePosition\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"w2wCooldownEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"whitelist\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawAlloc\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"withdrawAllocFor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]","ContractName":"APESAFE","CompilerVersion":"v0.8.6+commit.11564f7e","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}