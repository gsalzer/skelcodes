{"status":"1","message":"OK","result":[{"SourceCode":"// SPDX-License-Identifier: MIT\r\n// File: @openzeppelin/contracts/token/ERC20/IERC20.sol\r\n\r\npragma solidity ^0.6.0;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n    \r\n    function decimals() external view returns (uint8);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n// File: @openzeppelin/contracts/math/SafeMath.sol\r\n\r\npragma solidity ^0.6.0;\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts with custom message when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/GSN/Context.sol\r\n\r\npragma solidity ^0.6.0;\r\n\r\n/*\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with GSN meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address payable) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes memory) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/access/Ownable.sol\r\n\r\npragma solidity ^0.6.0;\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\ncontract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor () internal {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    /**\r\n     * Returns the address of the current owner.\r\n     */\r\n    function governance() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyGovernance() {\r\n        require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferGovernance(address newOwner) internal virtual onlyGovernance {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\ncontract ReentrancyGuard {\r\n    // Booleans are more expensive than uint256 or any type that takes up a full\r\n    // word because each write operation emits an extra SLOAD to first read the\r\n    // slot's contents, replace the bits taken up by the boolean, and then write\r\n    // back. This is the compiler's defense against contract upgrades and\r\n    // pointer aliasing, and it cannot be disabled.\r\n\r\n    // The values being non-zero value makes deployment a bit more expensive,\r\n    // but in exchange the refund on every call to nonReentrant will be lower in\r\n    // amount. Since refunds are capped to a percentage of the total\r\n    // transaction's gas, it is best to keep them low in cases like this one, to\r\n    // increase the likelihood of the full refund coming into effect.\r\n    uint256 private constant _NOT_ENTERED = 1;\r\n    uint256 private constant _ENTERED = 2;\r\n\r\n    uint256 private _status;\r\n\r\n    constructor () internal {\r\n        _status = _NOT_ENTERED;\r\n    }\r\n\r\n    /**\r\n     * @dev Prevents a contract from calling itself, directly or indirectly.\r\n     * Calling a `nonReentrant` function from another `nonReentrant`\r\n     * function is not supported. It is possible to prevent this from happening\r\n     * by making the `nonReentrant` function external, and make it call a\r\n     * `private` function that does the actual work.\r\n     */\r\n    modifier nonReentrant() {\r\n        // On the first call to nonReentrant, _notEntered will be true\r\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\r\n\r\n        // Any calls to nonReentrant after this point will fail\r\n        _status = _ENTERED;\r\n\r\n        _;\r\n\r\n        // By storing the original value once again, a refund is triggered (see\r\n        // https://eips.ethereum.org/EIPS/eip-2200)\r\n        _status = _NOT_ENTERED;\r\n    }\r\n}\r\n\r\n// File: contracts/ReethClaimPolicyV1.sol\r\n\r\npragma solidity =0.6.6;\r\n\r\n// This claim policy determines how much reeth is minted to a user based on time in the pool, eth spent and total eth value of strategy\r\n// Rules for this policy are: exponentially (per time) increasing rewards rate up to a certain point, then linearly increasing\r\n// To a maximum percent of claimback\r\n// There is a minimum amount of time required to stake before being eligible for claiming\r\n\r\ninterface Staker {\r\n    function getUserBalance(address _user) external view returns (uint256);\r\n    function getLastActionTime(address _user) external view returns (uint256);\r\n    function getLastETHSpent(address _user) external view returns (uint256);\r\n    function getETHSpentSinceAction(address _user) external view returns (uint256);\r\n}\r\n\r\ninterface PriceOracle {\r\n    function getLatestREETHPrice() external view returns (uint256);\r\n    function updateREETHPrice() external;\r\n}\r\n\r\ninterface ZsTokenProtocol {\r\n    function getCurrentStrategy() external view returns (address);\r\n}\r\n\r\ncontract ReethClaimPolicyV1 is Ownable, ReentrancyGuard {\r\n    using SafeMath for uint256;\r\n    \r\n    // variables\r\n    uint256 public minStakeTime = 5; // At least 5 seconds staked before being able to claim reeth\r\n    uint256 public eFactor = 36; // The exponential factor that determines the early growth rate of claiming\r\n    uint256 public eFactorLength = 14 days; // The length of period where the eFactor applies\r\n    uint256 public maxEarlyAccumulation = 5200; // The most we can earn via the exponential early growth\r\n    uint256 public maxAccumulatedClaim = 44800; // Total maximum accumulation claim back\r\n    uint256 public dailyClaimRate = 500; // The amount of claim increases after the exponential growth phase\r\n    uint256 public maxETHSpentClaimPercent = 4000; // Maximum amount of eth spent claimable\r\n    uint256 public ethEquivalentAtMaxPercent = 10e18; // The ethereum amount that will yield this maximum percent\r\n    \r\n    address public reethAddress; // The address for the REETH tokens\r\n    address public zsTokenAddress;\r\n    address public stakerAddress; // The address for the staker\r\n    address public priceOracleAddress; // The address of the price oracle\r\n\r\n    uint256 constant DIVISION_FACTOR = 100000;\r\n    address constant WETH_ADDRESS = address(0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2); // WETH address\r\n\r\n    constructor(\r\n        address _reeth,\r\n        address _staker,\r\n        address _oracle\r\n    ) public {\r\n        reethAddress = _reeth;\r\n        stakerAddress = _staker;\r\n        priceOracleAddress = _oracle;\r\n    }\r\n    \r\n    modifier onlyStaker() {\r\n        require(_msgSender() == stakerAddress, \"Only staker can call this function\");\r\n        _;\r\n    }\r\n    \r\n    // functions\r\n    \r\n    \r\n    function getClaimBackPercent(address _user) public view returns (uint256) {\r\n        // This function will calculate the max amount of claimback percent the user can expect based on accumulation time\r\n        Staker _stake = Staker(stakerAddress);\r\n        // First do sanity checks\r\n        {\r\n            uint256 _bal = _stake.getUserBalance(_user);\r\n            if(_bal == 0){\r\n                return 0;\r\n            }\r\n            uint256 _spent = _stake.getETHSpentSinceAction(_user);\r\n            if(_spent == 0){\r\n                return 0;\r\n            }\r\n        }\r\n        uint256 lastTime = _stake.getLastActionTime(_user);\r\n        if(lastTime == 0){\r\n            return 0; // No deposits ever\r\n        }\r\n        if(now < lastTime + minStakeTime){\r\n            return 0; // Too soon to claim\r\n        }\r\n        uint256 timeDiff = now - lastTime; // Will be at least minStakeTime\r\n        \r\n        // Complicated math stuff\r\n        uint256 percent = eFactor.mul(timeDiff**2).div(1e10);\r\n        if(percent > maxEarlyAccumulation){\r\n            percent = maxEarlyAccumulation;\r\n        }\r\n        if(timeDiff > eFactorLength){\r\n            // Add an additional percent up to a higher percent\r\n            uint256 extra = dailyClaimRate.mul(timeDiff.sub(eFactorLength)).div(1 days);\r\n            if(extra > maxAccumulatedClaim){\r\n                extra = maxAccumulatedClaim;\r\n            }\r\n            percent = percent.add(extra);\r\n        }\r\n        return percent;\r\n    }\r\n    \r\n    function getETHSpentClaimPercent(address _user) public view returns (uint256) {\r\n        require(stakerAddress != address(0), \"Staker not set yet\");\r\n        Staker _stake = Staker(stakerAddress);\r\n        uint256 _value = _stake.getUserBalance(_user);\r\n        if(_value == 0){\r\n            return 0;\r\n        }\r\n        _value = calculateUserETHValue(_user);\r\n        if(_value == 0){\r\n            return 0;\r\n        }\r\n        if(_value >= ethEquivalentAtMaxPercent){\r\n            return maxETHSpentClaimPercent;\r\n        }\r\n        uint256 percent = maxETHSpentClaimPercent.mul(_value).div(ethEquivalentAtMaxPercent);\r\n        return percent;\r\n    }\r\n    \r\n    // Claim call\r\n    function getClaimable(address _user) external onlyStaker returns (uint256){\r\n        require(priceOracleAddress != address(0), \"Price oracle not set yet\");\r\n        PriceOracle(priceOracleAddress).updateREETHPrice(); // Update the price\r\n        uint256 claimable = queryClaimable(_user);\r\n        return claimable;\r\n    }\r\n    \r\n    function queryClaimable(address _user) public view returns (uint256) {\r\n        require(PriceOracle(priceOracleAddress).getLatestREETHPrice() > 0, \"There is no price yet determined for REETH\");\r\n        require(stakerAddress != address(0), \"Staker not set yet\");\r\n        require(zsTokenAddress != address(0), \"ZS token not set yet\");\r\n        uint256 claimPercent = getClaimBackPercent(_user);\r\n        if(claimPercent == 0){\r\n            return 0;\r\n        }\r\n        uint256 stackValue = calculateUserETHValue(_user); // Stack value in eth\r\n        uint256 spentAmount = Staker(stakerAddress).getETHSpentSinceAction(_user);\r\n        if(spentAmount == 0 || stackValue == 0){\r\n            return 0;\r\n        }\r\n        uint256 claimable = stackValue.mul(claimPercent).div(DIVISION_FACTOR); // Maximum amount claimable in ETH based on stack\r\n        uint256 spentPercent = getETHSpentClaimPercent(_user);\r\n        if(spentPercent == 0){\r\n            return 0;\r\n        }else{\r\n            spentAmount = spentAmount.mul(spentPercent).div(DIVISION_FACTOR); // Reduce eligible spent percent by max amount\r\n        }\r\n        if(claimable > spentAmount){\r\n            claimable = spentAmount; // Cannot claim more than spent\r\n        }\r\n        uint256 reethPrice = PriceOracle(priceOracleAddress).getLatestREETHPrice();\r\n        // Convert claimable to reeth units\r\n        claimable = claimable.mul(10**uint256(IERC20(reethAddress).decimals())).div(10**uint256(IERC20(WETH_ADDRESS).decimals()));\r\n        // This is claimable in reeth\r\n        claimable = claimable.mul(1e18).div(reethPrice);\r\n        return claimable;\r\n    }\r\n    \r\n    function calculateUserETHValue(address _user) public view returns (uint256) {\r\n        // Now calculate the eth value of the user's strategy position\r\n        // This returns how much eth the user's staked position is worth\r\n        Staker _stake = Staker(stakerAddress);\r\n        uint256 _bal = _stake.getUserBalance(_user); // Amount of ZS tokens\r\n        if(_bal == 0){ return 0; }\r\n        ZsTokenProtocol zsToken = ZsTokenProtocol(zsTokenAddress);\r\n        address strategyAddress = zsToken.getCurrentStrategy(); \r\n        uint256 totalZS = IERC20(zsTokenAddress).totalSupply();\r\n        uint256 totalETH = IERC20(WETH_ADDRESS).balanceOf(zsTokenAddress);\r\n        uint256 totalREETH = IERC20(reethAddress).balanceOf(zsTokenAddress);\r\n        if(strategyAddress != address(0)){\r\n            totalETH += IERC20(WETH_ADDRESS).balanceOf(strategyAddress);\r\n            totalREETH += IERC20(reethAddress).balanceOf(strategyAddress);\r\n        }\r\n        uint256 reethPrice = PriceOracle(priceOracleAddress).getLatestREETHPrice();\r\n        // Convert reeth decimals to ETH\r\n        totalREETH = totalREETH.mul(10**uint256(IERC20(WETH_ADDRESS).decimals())).div(10**uint256(IERC20(reethAddress).decimals()));\r\n        totalETH += totalREETH.mul(reethPrice).div(1e18);\r\n        return totalETH.mul(_bal).div(totalZS); // This will be the user's equivalent balance in eth worth\r\n    }\r\n    \r\n    // Governance only functions\r\n    \r\n    // Timelock variables\r\n    \r\n    uint256 private _timelockStart; // The start of the timelock to change governance variables\r\n    uint256 private _timelockType; // The function that needs to be changed\r\n    uint256 constant TIMELOCK_DURATION = 86400; // Timelock is 24 hours\r\n    \r\n    // Reusable timelock variables\r\n    address private _timelock_address;\r\n    uint256[8] private _timelock_data;\r\n    \r\n    modifier timelockConditionsMet(uint256 _type) {\r\n        require(_timelockType == _type, \"Timelock not acquired for this function\");\r\n        _timelockType = 0; // Reset the type once the timelock is used\r\n        require(now >= _timelockStart + TIMELOCK_DURATION, \"Timelock time not met\");\r\n        _;\r\n    }\r\n    \r\n    // Change the owner of the token contract\r\n    // --------------------\r\n    function startGovernanceChange(address _address) external onlyGovernance {\r\n        _timelockStart = now;\r\n        _timelockType = 1;\r\n        _timelock_address = _address;       \r\n    }\r\n    \r\n    function finishGovernanceChange() external onlyGovernance timelockConditionsMet(1) {\r\n        transferGovernance(_timelock_address);\r\n    }\r\n    // --------------------\r\n    \r\n    // Change the claimable staker\r\n    // --------------------\r\n    function startChangeStaker(address _address) external onlyGovernance {\r\n        _timelockStart = now;\r\n        _timelockType = 2;\r\n        _timelock_address = _address;\r\n        if(stakerAddress == address(0)){\r\n            _timelockType = 0;\r\n            internalChangeStaker(_timelock_address);\r\n        }\r\n    }\r\n    \r\n    function finishChangeStaker() external onlyGovernance timelockConditionsMet(2) {\r\n        internalChangeStaker(_timelock_address);\r\n    }\r\n    \r\n    function internalChangeStaker(address _addr) internal {\r\n        stakerAddress = _addr;\r\n    }\r\n    // --------------------\r\n    \r\n    // Change the price oracle\r\n    // --------------------\r\n    function startChangePriceOracle(address _address) external onlyGovernance {\r\n        _timelockStart = now;\r\n        _timelockType = 3;\r\n        _timelock_address = _address;\r\n        if(priceOracleAddress == address(0)){\r\n            _timelockType = 0;\r\n            internalChangePriceOracle(_timelock_address);\r\n        }\r\n    }\r\n    \r\n    function finishChangePriceOracle() external onlyGovernance timelockConditionsMet(3) {\r\n        internalChangePriceOracle(_timelock_address);\r\n    }\r\n    \r\n    function internalChangePriceOracle(address _addr) internal {\r\n        priceOracleAddress = _addr;\r\n    }\r\n    // --------------------\r\n    \r\n    // Change the zs token\r\n    // --------------------\r\n    function startChangeZSToken(address _address) external onlyGovernance {\r\n        _timelockStart = now;\r\n        _timelockType = 4;\r\n        _timelock_address = _address;\r\n        if(zsTokenAddress == address(0)){\r\n            _timelockType = 0;\r\n            internalChangeZSToken(_timelock_address);\r\n        }\r\n    }\r\n    \r\n    function finishChangeZSToken() external onlyGovernance timelockConditionsMet(4) {\r\n        internalChangeZSToken(_timelock_address);\r\n    }\r\n    \r\n    function internalChangeZSToken(address _addr) internal {\r\n        zsTokenAddress = _addr;\r\n    }\r\n    // --------------------\r\n    \r\n    // Change the claim factors\r\n    // --------------------\r\n    function startChangeClaimFactors(uint256 _minStake, uint256 _eFac, uint256 _eFacLength, uint256 _maxEarly,\r\n                                    uint256 _dailyPercent, uint256 _maxEnd, uint256 _maxSpentAmount, uint256 _maxSpentPercent) external onlyGovernance {\r\n        _timelockStart = now;\r\n        _timelockType = 5;\r\n        _timelock_data[0] = _minStake;\r\n        _timelock_data[1] = _eFac;\r\n        _timelock_data[2] = _eFacLength;\r\n        _timelock_data[3] = _maxEarly;\r\n        _timelock_data[4] = _dailyPercent;\r\n        _timelock_data[5] = _maxEnd;\r\n        _timelock_data[6] = _maxSpentAmount;\r\n        _timelock_data[7] = _maxSpentPercent;\r\n    }\r\n    \r\n    function finishChangeClaimFactors() external onlyGovernance timelockConditionsMet(5) {\r\n        minStakeTime = _timelock_data[0];\r\n        eFactor = _timelock_data[1];\r\n        eFactorLength = _timelock_data[2];\r\n        maxEarlyAccumulation = _timelock_data[3];\r\n        dailyClaimRate = _timelock_data[4];\r\n        maxAccumulatedClaim = _timelock_data[5];\r\n        ethEquivalentAtMaxPercent = _timelock_data[6];\r\n        maxETHSpentClaimPercent = _timelock_data[7];\r\n    }\r\n    // --------------------\r\n   \r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_reeth\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_staker\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_oracle\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"calculateUserETHValue\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dailyClaimRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"eFactor\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"eFactorLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ethEquivalentAtMaxPercent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"finishChangeClaimFactors\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"finishChangePriceOracle\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"finishChangeStaker\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"finishChangeZSToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"finishGovernanceChange\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getClaimBackPercent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getClaimable\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getETHSpentClaimPercent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"governance\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxAccumulatedClaim\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxETHSpentClaimPercent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxEarlyAccumulation\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minStakeTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"priceOracleAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"queryClaimable\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"reethAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakerAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_minStake\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_eFac\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_eFacLength\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_maxEarly\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_dailyPercent\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_maxEnd\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_maxSpentAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_maxSpentPercent\",\"type\":\"uint256\"}],\"name\":\"startChangeClaimFactors\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"startChangePriceOracle\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"startChangeStaker\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"startChangeZSToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"startGovernanceChange\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"zsTokenAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"ReethClaimPolicyV1","CompilerVersion":"v0.6.6+commit.6c089d02","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000e804964c296e9fb666fbe67767838c1ff9ab3209000000000000000000000000ab9f4a5d1a81e9a92b0b45b940562fa4884d222f0000000000000000000000000f1f24bdccb632e33888feaf73d05dd851b811ec","EVMVersion":"Default","Library":"","LicenseType":"GNU GPLv3","Proxy":"0","Implementation":"","SwarmSource":"ipfs://d6d16b0a09f441a64762f09e8491622f593cbf7eb401ca71f5900e357e602a25"}]}