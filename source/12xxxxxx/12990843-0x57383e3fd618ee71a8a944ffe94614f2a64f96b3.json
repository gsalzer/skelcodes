{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/Staking/StakingLib.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/utils/math/Math.sol\\\";\\n\\nimport \\\"../NFTRarityRegister/INFTRarityRegister.sol\\\";\\n\\nimport \\\"../Raffle/IRaffleTicket.sol\\\";\\nimport \\\"./RewardStreamerLib.sol\\\";\\n\\nimport \\\"./TokenHelper.sol\\\";\\n\\nlibrary StakingLib {\\n  // **************************\\n\\t// **| StakingLib section |**\\n  // **************************\\n\\n\\tstruct StakingInfo {\\n\\t\\tuint256 historyStartBlock; // this is set only when we deploy the contract\\n\\t\\tuint256 historyEndBlock; // it starts and finishes in the same block (so length is 0)\\n\\t\\tuint256 historyAverageReward; // how many reward tokens (in Wei) we give PER TOKEN STAKED PER BLOCK\\n\\t\\tuint256 historyRewardPot; // the tokens unclaimed from history\\n\\n\\t\\tuint256 totalCurrentlyStaked; // the actual amount of $BURP tokens sent from users\\n\\t\\tuint256 totalStakingUnits; // sum of all user stake shares\\n\\n\\t\\tuint256 totalDistributedRewards; // sum of all distributed rewards, mainly helpful for testing\\n\\n\\t\\tuint256[] locks;\\n\\t\\tuint256[] locksMultiplier;\\n\\n\\t\\tuint256 ticketsMintingRatio;\\n\\t\\tuint256 ticketsMintingChillPeriod;\\n\\n\\t\\taddress ticket;\\n\\t\\taddress rarityRegister;\\n\\t}\\n\\n\\t/**\\n\\t* @notice Will get the lock duration from the stake bytes data\\n\\t* @dev the bytes should contain the index of the lock in the first 32 bytes\\n\\t* @dev the index should be < locks.length\\n\\t* @param data bytes from the stake action\\n\\t* @return uint256 The duration of the lock (time for which the stake will be locked)\\n\\t*/\\n\\tfunction getLockDuration(StakingInfo storage stakingInfo, bytes memory data) public view returns (uint256, uint256) {\\n\\t\\trequire(data.length >= 32, 'Stake: data should by at least 32 bytes');\\n\\n\\t\\tuint256 lengthIndex = getStakeIndexFromCalldata(data);\\n\\n\\t\\trequire(lengthIndex < stakingInfo.locks.length, 'Stake: lock index out of bounds');\\n\\n\\t\\treturn (stakingInfo.locks[lengthIndex], lengthIndex);\\n\\t}\\n\\n\\t/**\\n\\t* @notice Will calculate the current period length\\n\\t* @return (uint256) The current period length\\n\\t*/\\n\\tfunction getCurrentPeriodLength(StakingInfo storage stakingInfo) public view returns(uint256) {\\n\\t\\treturn uint256(block.number) - stakingInfo.historyEndBlock;\\n\\t}\\n\\n\\t/**\\n\\t* @notice Will calculate the current period length optionally including the last block\\n\\t* @param excludeLast a flag that indicates to include the last block or not\\n\\t* @return (uint256) The current period length\\n\\t*/\\n\\tfunction getCurrentPeriodLength(StakingInfo storage stakingInfo, bool excludeLast) public view returns(uint256) {\\n\\t\\treturn excludeLast ? getCurrentPeriodLength(stakingInfo) - 1 : getCurrentPeriodLength(stakingInfo);\\n\\t}\\n\\n\\t/**\\n\\t* @notice Will calculate the history length in blocks\\n\\t* @return (uint256) The history length\\n\\t*/\\n\\tfunction getHistoryLength(StakingInfo storage stakingInfo) public view returns (uint256){\\n\\t\\treturn stakingInfo.historyEndBlock - stakingInfo.historyStartBlock;\\n\\t}\\n\\n\\t/**\\n\\t* @notice Calculate the average reward for the current period\\n\\t* @param stakingInfo the struct containing staking info\\n\\t* @param totalReward the total reward in current period\\n\\t* @param excludeLast whether or not exclude the last block\\n\\t* @return (uint256) number of blocks in history\\n\\t*/\\n\\tfunction getCurrentPeriodAverageReward(\\n\\t\\tStakingInfo storage stakingInfo,\\n\\t\\tuint256 totalReward,\\n\\t\\tbool excludeLast\\n\\t)\\n\\t\\tpublic\\n\\t\\tview\\n\\t\\treturns(uint256)\\n\\t{\\n\\t\\tif (stakingInfo.totalStakingUnits == 0) {\\n\\t\\t\\treturn 0;\\n\\t\\t}\\n\\n\\t\\tuint256 currentPeriodLength = getCurrentPeriodLength(stakingInfo, excludeLast);\\n\\t\\tif(currentPeriodLength == 0 ) {\\n\\t\\t\\treturn 0;\\n\\t\\t}\\n\\n\\t\\treturn totalReward\\n\\t\\t\\t* (10**18)\\n\\t\\t\\t/ (stakingInfo.totalStakingUnits)\\n\\t\\t\\t/ (currentPeriodLength);\\n\\t}\\n\\n\\t/**\\n\\t* @notice Calculate the total generated reward for a period\\n\\t* @param _block the current block\\n\\t* @param historyStartBlock the first history block\\n\\t* @param rewardPerBlock the amount of tokens rewarded per block\\n\\t* @return (uint256) number of blocks in history\\n\\t*/\\n\\tfunction totalGeneratedReward(uint256 _block, uint256 historyStartBlock, uint256 rewardPerBlock) public pure returns(uint256) {\\n\\t\\treturn (_block - historyStartBlock) * rewardPerBlock;\\n\\t}\\n\\n\\t/**\\n\\t* @notice Calculate the reward from current period\\n\\t* @param totalRewardInCurrentPeriod the total reward from current period\\n\\t* @param totalStakingUnits sum of all user stake shares\\n\\t* @return (uint256) the calculated reward\\n\\t*/\\n\\tfunction _stakerRewardFromCurrentPeriod(\\n\\t\\tuint256 totalRewardInCurrentPeriod,\\n\\t\\tuint256 stakerBalance,\\n\\t\\tuint256 totalStakingUnits\\n\\t)\\n\\t\\tprivate\\n\\t\\tpure\\n\\t\\treturns(uint256)\\n\\t{\\n\\t\\treturn totalRewardInCurrentPeriod\\n\\t\\t\\t* stakerBalance\\n\\t\\t\\t/ totalStakingUnits;\\n\\t}\\n\\n\\t/**\\n\\t* @notice Calculate the reward from current period\\n\\t* @return (uint256) the calculated reward\\n\\t*/\\n\\tfunction getStakerRewardFromCurrentPeriod(\\n\\t\\tRewardStreamerLib.RewardStreamInfo storage rewardStreamInfo,\\n\\t\\tStakingInfo storage stakingInfo,\\n\\t\\tUserStake[] storage userStakes,\\n\\t\\tuint256 stakeIndex\\n\\t)\\n\\t\\tpublic\\n\\t\\tview\\n\\t\\treturns(uint256)\\n\\t{\\n\\t\\tif (stakeIndex >= userStakes.length) {\\n\\t\\t\\treturn 0;\\n\\t\\t}\\n\\n\\t\\tuint256 stakerBalance = userStakes[stakeIndex].stakingUnits;\\n\\t\\tuint256\\ttotalRewardInCurrentPeriod = RewardStreamerLib.unsafeGetRewardsFromRange(\\n\\t\\t\\trewardStreamInfo,\\n\\t\\t\\tstakingInfo.historyEndBlock,\\n\\t\\t\\tblock.number\\n\\t\\t);\\n\\n\\t\\treturn _stakerRewardFromCurrentPeriod(\\n\\t\\t\\ttotalRewardInCurrentPeriod,\\n\\t\\t\\tstakerBalance,\\n\\t\\t\\tstakingInfo.totalStakingUnits\\n\\t\\t);\\n\\t}\\n\\n\\t/**\\n\\t* @notice Calculate the reward from current period\\n\\t* @return (uint256) the calculated reward\\n\\t*/\\n\\tfunction getStakerRewardFromCurrentPeriodAndUpdateCursor(\\n\\t\\tRewardStreamerLib.RewardStreamInfo storage rewardStreamInfo,\\n\\t\\tStakingInfo storage stakingInfo,\\n\\t\\tUserStake[] storage userStakes,\\n\\t\\tuint256 stakeIndex\\n\\t)\\n\\t\\tprivate\\n\\t\\treturns(uint256)\\n\\t{\\n\\t\\tif (stakeIndex >= userStakes.length) {\\n\\t\\t\\treturn 0;\\n\\t\\t}\\n\\n\\t\\tuint256 stakerBalance = userStakes[stakeIndex].stakingUnits;\\n\\t\\tuint256\\ttotalRewardInCurrentPeriod = RewardStreamerLib.getRewardAndUpdateCursor(\\n\\t\\t\\trewardStreamInfo,\\n\\t\\t\\tstakingInfo.historyEndBlock,\\n\\t\\t\\tblock.number - 1\\n\\t\\t);\\n\\n\\n\\t\\treturn _stakerRewardFromCurrentPeriod(\\n\\t\\t\\ttotalRewardInCurrentPeriod,\\n\\t\\t\\tstakerBalance,\\n\\t\\t\\tstakingInfo.totalStakingUnits\\n\\t\\t);\\n\\t}\\n\\n\\t/**\\n\\t* @notice Will calculate and return the total reward user has accumulated till now for a specific stake\\n\\t* @param stakeIndex the index of the stake\\n\\t* @return (uint256) The total rewards accumulated till now\\n\\t*/\\n\\tfunction getStakerReward(\\n\\t\\tRewardStreamerLib.RewardStreamInfo storage rewardStreamInfo,\\n\\t\\tStakingInfo storage stakingInfo,\\n\\t\\tUserStake[] storage userStakes,\\n\\t\\tuint256 stakeIndex\\n\\t)\\n\\t\\tpublic\\n\\t\\tview\\n\\t\\treturns (uint256)\\n\\t{\\n\\t\\tuint256 currentPeriodReward = getStakerRewardFromCurrentPeriod(rewardStreamInfo, stakingInfo, userStakes, stakeIndex);\\n\\t\\tuint256 historyPeriodReward = getStakerRewardFromHistory(stakingInfo, userStakes, stakeIndex);\\n\\n\\t\\treturn currentPeriodReward + historyPeriodReward;\\n\\t}\\n\\n\\t/**\\n\\t* @notice Will calculate and return the total reward user has accumulated till now for a specific stake\\n\\t* @param stakeIndex the index of the stake\\n\\t* @return (uint256) The total rewards accumulated till now\\n\\t*/\\n\\tfunction _getStakerReward(\\n\\t\\tRewardStreamerLib.RewardStreamInfo storage rewardStreamInfo,\\n\\t\\tStakingInfo storage stakingInfo,\\n\\t\\tUserStake[] storage userStakes,\\n\\t\\tuint256 stakeIndex\\n\\t)\\n\\t\\tprivate\\n\\t\\treturns (uint256)\\n\\t{\\n\\t\\tuint256 currentPeriodReward = getStakerRewardFromCurrentPeriodAndUpdateCursor(rewardStreamInfo, stakingInfo, userStakes, stakeIndex);\\n\\t\\tuint256 historyPeriodReward = getStakerRewardFromHistory(stakingInfo, userStakes, stakeIndex);\\n\\n\\t\\treturn currentPeriodReward + historyPeriodReward;\\n\\t}\\n\\n\\t/**\\n\\t* @notice Creates a stake instance for the staker\\n\\t* @notice MUST trigger Staked event\\n\\t* @dev The NFT should be in the rarityRegister\\n\\t* @dev For each stake you can have only one NFT staked\\n\\t* @param amountStaked the number of tokens to be staked\\n\\t* @param blockNumber the block number at which the stake is created\\n\\t* @param lockDuration the duration for which the tokens will be locked\\n\\t*/\\n\\tfunction addStake(\\n\\t\\tStakingInfo storage stakingInfo,\\n\\t\\tUserStake[] storage userStakes,\\n\\t\\tuint256 amountStaked,\\n\\t\\tuint256 stakingUnits,\\n\\t\\tuint256 blockNumber,\\n\\t\\tuint256 lockDuration\\n\\t)\\n\\t\\tprivate\\n\\t{\\n\\t\\tuserStakes.push(UserStake({\\n\\t\\t\\t\\tamountStaked: amountStaked,\\n\\t\\t\\t\\tstakingUnits: stakingUnits,\\n\\t\\t\\t\\tenteredAtBlock: blockNumber,\\n\\t\\t\\t\\thistoryAverageRewardWhenEntered: stakingInfo.historyAverageReward,\\n\\t\\t\\t\\tticketsMintingRatioWhenEntered: stakingInfo.ticketsMintingRatio,\\n\\t\\t\\t\\tticketsMintingChillPeriodWhenEntered: stakingInfo.ticketsMintingChillPeriod,\\n\\t\\t\\t\\tlockedTill: blockNumber + lockDuration,\\n\\t\\t\\t\\trewardCredit: 0,\\n\\t\\t\\t\\tticketsMinted: 0,\\n\\t\\t\\t\\tuserStakedToken: StakingLib.UserStakedToken({\\n\\t\\t\\t\\t\\ttokenAddress: address(0),\\n\\t\\t\\t\\t\\ttokenId: 0\\n\\t\\t\\t\\t})\\n\\t\\t\\t})\\n\\t\\t);\\n\\t}\\n\\n\\t/**\\n\\t* @notice Allows user to stake tokens\\n\\t* @notice Optionally user can stake a NFT token for extra reward\\n\\t* @dev Users wil be able to unstake only after the lock durationn has pased.\\n\\t* @dev The lock duration in the data bytes is required, its the index of the locks array\\n\\t* Should be the fist 32 bytes in the bytes array\\n\\t* @param amount the inumber of tokens to be staked\\n\\t* @param data the bytes containing extra information about the staking\\n\\t* lock duration index: fist 32 bytes (Number) - Required\\n\\t* NFT address: next 20 bytes (address)\\n\\t* NFT tokenId: next 32 bytes (Number)\\n\\t*/\\n\\tfunction stake(\\n\\t\\tRewardStreamerLib.RewardStreamInfo storage rewardStreamInfo,\\n\\t\\tStakingInfo storage stakingInfo,\\n\\t\\tUserStake[] storage userStakes,\\n\\t\\taddress staker,\\n\\t\\tuint256 amount,\\n\\t\\tbytes calldata data\\n\\t)\\n\\t\\tpublic\\n\\t{\\n\\t\\t\\t(uint256 lockDuration, uint256 lockIndex) = getLockDuration(stakingInfo, data);\\n\\n\\t\\t\\tTokenHelper.ERC20TransferFrom(address(rewardStreamInfo.rewardToken), msg.sender, address(this), amount);\\n\\n\\t\\t\\tupdateHistoryValues(rewardStreamInfo, stakingInfo);\\n\\n\\t\\t\\tuint256 durationMultiplier = stakingInfo.locksMultiplier[lockIndex];\\n\\n\\t\\t\\t// when staking without any multiplier, staking units and amount are identical\\n\\t\\t\\tstakingInfo.totalStakingUnits = stakingInfo.totalStakingUnits + applyPercent(amount, durationMultiplier);\\n\\t\\t\\tstakingInfo.totalCurrentlyStaked = stakingInfo.totalCurrentlyStaked + amount;\\n\\n\\t\\t\\taddStake(stakingInfo, userStakes, amount, applyPercent(amount, durationMultiplier), block.number, lockDuration);\\n\\n\\t\\t\\tif (data.length >= 84) { // [32, 20. 32] == [index, address, tokenId]\\n\\t\\t\\t\\taddNftToStake(\\n\\t\\t\\t\\t\\trewardStreamInfo,\\n\\t\\t\\t\\t\\tstakingInfo,\\n\\t\\t\\t\\t\\tuserStakes,\\n\\t\\t\\t\\t\\tuserStakes.length - 1,\\n\\t\\t\\t\\t\\tgetTokenAddressFromCalldata(data),\\n\\t\\t\\t\\t\\tgetTokenIdFromCalldata(data)\\n\\t\\t\\t\\t);\\n\\t\\t\\t}\\n\\t\\t\\tclaimTickets(\\n\\t\\t\\t\\tstakingInfo.ticket,\\n\\t\\t\\t\\tuserStakes[userStakes.length - 1], // last stake just created\\n\\t\\t\\t\\tstaker\\n\\t\\t\\t);\\n\\t}\\n\\n\\t/**\\n\\t* @notice Calculate the new history reward pot\\n\\t* @param oldHistoryRewardPot the old history reward pot\\n\\t* @param totalRewardInCurrentPeriod the total reward from current period\\n\\t* @param stakerReward the staker reward\\n\\t* @return (uint256) the new history reward pot\\n\\t*/\\n\\tfunction historyRewardPot(\\n\\t\\tuint256 oldHistoryRewardPot,\\n\\t\\tuint256 totalRewardInCurrentPeriod,\\n\\t\\tuint256 stakerReward\\n\\t) public pure returns(uint256) {\\n\\t\\treturn oldHistoryRewardPot\\n\\t\\t\\t+ totalRewardInCurrentPeriod\\n\\t\\t\\t- stakerReward;\\n\\t}\\n\\n\\t/**\\n\\t* @notice Will parse bytes data to get an uint256\\n\\t* @param data bytes data\\n\\t* @param from from where to start the parsing\\n\\t*/\\n\\tfunction parse32BytesToUint256(bytes memory data, uint256 from) public pure returns (uint256 parsed){\\n\\t\\tassembly {parsed := mload(add(add(data, from), 32))}\\n\\t}\\n\\n\\t/**\\n\\t* @notice Will parse bytes data to get an address\\n\\t* @param data bytes data\\n\\t* @param from from where to start the parsing\\n\\t*/\\n\\tfunction parseBytesToAddress(bytes memory data, uint256 from) public pure returns (address parsed){\\n\\t\\tassembly {parsed := mload(add(add(data, from), 20))}\\n\\t}\\n\\n\\t/**\\n\\t* @notice Will parse the stake bytes data to get the stake index\\n\\t* @dev [(index 32 bytes), (nft address 20 bytes), (tokenId 32 bytes)]\\n\\t* @param data bytes from the stake action\\n\\t* @return (uint256) the parsed index\\n\\t*/\\n\\tfunction getStakeIndexFromCalldata(bytes memory data) public pure returns (uint256) {\\n\\t\\treturn parse32BytesToUint256(data, 0);\\n\\t}\\n\\n\\t/**\\n\\t* @notice Will parse the stake bytes data to get the NFT address\\n\\t* @dev [(index 32 bytes), (nft address 20 bytes), (tokenId 32 bytes)]\\n\\t* @param data bytes from the stake action\\n\\t* @return (address) the parsed address\\n\\t*/\\n\\tfunction getTokenAddressFromCalldata(bytes memory data) public pure returns (address) {\\n\\t\\treturn parseBytesToAddress(data, 32);\\n\\t}\\n\\n\\t/**\\n\\t* @notice Will parse the stake bytes data to get the NFT tokeId\\n\\t* @dev [(index 32 bytes), (nft address 20 bytes), (tokenId 32 bytes)]\\n\\t* @param data bytes from the stake action\\n\\t* @return (uint256) the parsed tokenId\\n\\t*/\\n\\tfunction getTokenIdFromCalldata(bytes memory data) public pure returns (uint256) {\\n\\t\\treturn parse32BytesToUint256(data, 52);\\n\\t}\\n\\n\\t/**\\n\\t* @notice Will apply a percentage to a number\\n\\t* @param number The number to multiply\\n\\t* @param percent The percentage to apply\\n\\t* @return (uint256) the operation result\\n\\t*/\\n\\tfunction applyPercent(uint256 number, uint256 percent) public pure returns (uint256) {\\n\\t\\treturn number * percent / 100;\\n\\t}\\n\\n\\t/**\\n\\t* @notice Calculates the new History Average Reward\\n\\t* @dev this is called **before** we update history end block\\n\\t* @return uint256 The calculated newHistoryAverageReward\\n\\t*/\\n\\tfunction getNewHistoryAverageReward(\\n\\t\\tuint256 currentPeriodLength,\\n\\t\\tuint256 currentPeriodAverageReward,\\n\\t\\tuint256 currentHistoryLength,\\n\\t\\tuint256 historyStartBlock,\\n\\t\\tuint256 historyAverageReward\\n\\t) public view returns (uint256) {\\n\\t\\tuint256 blockNumber = block.number;\\n\\t\\tuint256 newHistoryLength = uint256(blockNumber)- 1 - historyStartBlock;\\n\\n\\t\\tuint256 fromCurrent = currentPeriodLength * currentPeriodAverageReward;\\n\\t\\tuint256 fromHistory = currentHistoryLength * historyAverageReward;\\n\\n\\t\\tuint256 newHistoryAverageReward = (\\n\\t\\t\\tfromCurrent + fromHistory\\n\\t\\t)\\n\\t\\t/ newHistoryLength;\\n\\n\\t\\treturn newHistoryAverageReward;\\n\\t}\\n\\n\\tfunction updateHistoryValues(\\n\\t\\tRewardStreamerLib.RewardStreamInfo storage rewardStreamInfo,\\n\\t\\tStakingInfo storage stakingInfo\\n\\t)\\n\\t\\tpublic\\n\\t{\\n\\t\\tuint256 totalRewardInCurrentPeriod = RewardStreamerLib.getRewardAndUpdateCursor(\\n\\t\\t\\trewardStreamInfo,\\n\\t\\t\\tstakingInfo.historyEndBlock,\\n\\t\\t\\tblock.number - 1\\n\\t\\t);\\n\\t\\tuint256 currentPeriodAverageReward = getCurrentPeriodAverageReward(\\n\\t\\t\\tstakingInfo,\\n\\t\\t\\ttotalRewardInCurrentPeriod,\\n\\t\\t\\ttrue\\n\\t\\t);\\n\\n\\t\\t// 1. we update the stakingInfo.historyAverageReward with the WEIGHTED average of history reward and current reward\\n\\t\\tstakingInfo.historyAverageReward = getNewHistoryAverageReward(\\n\\t\\t\\tgetCurrentPeriodLength(stakingInfo, true),\\n\\t\\t\\tcurrentPeriodAverageReward,\\n\\t\\t\\tgetHistoryLength(stakingInfo),\\n\\t\\t\\tstakingInfo.historyStartBlock,\\n\\t\\t\\tstakingInfo.historyAverageReward\\n\\t\\t);\\n\\n\\t\\t// 2. we push the currentPeriodReward in the history\\n\\t\\tstakingInfo.historyRewardPot = historyRewardPot(\\n\\t\\t\\t\\tstakingInfo.historyRewardPot,\\n\\t\\t\\t\\ttotalRewardInCurrentPeriod,\\n\\t\\t\\t\\t0\\n\\t\\t\\t);\\n\\n\\t\\t// 3. we update the stakingInfo.historyEndBlock;\\n\\t\\tstakingInfo.historyEndBlock = uint256(block.number) - 1;\\n\\t}\\n\\n\\tfunction setTicketsMintingRatio(\\n\\t\\tStakingInfo storage stakingInfo,\\n\\t\\tuint256 mintingRatio\\n\\t)\\n\\t\\tpublic\\n\\t{\\n\\t\\tstakingInfo.ticketsMintingRatio = mintingRatio;\\n\\t}\\n\\n  // *****************************\\n\\t// *** UserStakesLib section ***\\n\\t// *****************************\\n\\n\\tstruct UserStakedToken {\\n\\t\\taddress tokenAddress;\\n\\t\\tuint256 tokenId;\\n\\t}\\n\\n\\tstruct UserStake {\\n\\t\\tuint256 stakingUnits;\\n\\t\\tuint256 amountStaked;\\n\\t\\tuint256 enteredAtBlock;\\n\\t\\tuint256 historyAverageRewardWhenEntered;\\n\\t\\tuint256 ticketsMintingRatioWhenEntered;\\n\\t\\tuint256 ticketsMintingChillPeriodWhenEntered;\\n\\t\\tuint256 lockedTill;\\n\\t\\tuint256 rewardCredit;\\n\\t\\tuint256 ticketsMinted;\\n\\t\\tUserStakedToken userStakedToken;\\n\\t}\\n\\n\\tfunction getTotalStakedFor(\\n\\t\\tUserStake[] storage userStakes\\n\\t)\\n\\t\\tpublic\\n\\t\\tview\\n\\t\\treturns (uint256)\\n\\t{\\n\\t\\tuint256 total;\\n\\n\\t\\tfor (uint i = 0; i < userStakes.length; i++) {\\n\\t\\t\\ttotal = total + userStakes[i].amountStaked;\\n\\t\\t}\\n\\n\\t\\treturn total;\\n\\t}\\n\\n\\t\\t/**\\n\\t* @notice Calculate the staker time in history\\n\\t* @return (uint256) number of blocks in history\\n\\t*/\\n\\tfunction getStakerTimeInHistory(\\n\\t\\tStakingInfo storage stakingInfo,\\n\\t\\tUserStake[] storage userStakes,\\n\\t\\tuint256 stakeIndex\\n\\t)\\n\\t\\tpublic\\n\\t\\tview\\n\\t\\treturns(uint256)\\n\\t{\\n\\t\\tif (stakeIndex >= userStakes.length || userStakes[stakeIndex].enteredAtBlock == 0 || userStakes[stakeIndex].enteredAtBlock > stakingInfo.historyEndBlock) {\\n\\t\\t\\treturn 0;\\n\\t\\t}\\n\\n\\t\\treturn stakingInfo.historyEndBlock - userStakes[stakeIndex].enteredAtBlock + 1;\\n\\t}\\n\\n\\t/**\\n\\t* @notice Will calculate and return what the history length was a the moment the stake was created\\n\\t* @param stakeIndex the index of the stake\\n\\t* @return (uint256) The length of the history\\n\\t*/\\n\\tfunction getHistoryLengthBeforeStakerEntered(\\n\\t\\tStakingInfo storage stakingInfo,\\n\\t\\tUserStake[] storage userStakes,\\n\\t\\tuint256 stakeIndex\\n\\t)\\n\\t\\tpublic\\n\\t\\tview\\n\\t\\treturns (uint256)\\n\\t{\\n\\t\\tuint256 enteredAtBlock = userStakes[stakeIndex].enteredAtBlock;\\n\\n\\t\\tif (enteredAtBlock == 0) {\\n\\t\\t\\treturn 0;\\n\\t\\t}\\n\\n\\t\\treturn enteredAtBlock - stakingInfo.historyStartBlock - 1;\\n\\t}\\n\\n\\t/**\\n\\t* @notice Calculate the user share in the pool\\n\\t* @param totalStakingUnits sum of all user stake shares\\n\\t* @return (uint256) the calculated pool share\\n\\t*/\\n\\tfunction userPoolShare(\\n\\t\\tUserStake[] storage userStakes,\\n\\t\\tuint256 stakeIndex,\\n\\t\\tuint256 totalStakingUnits\\n\\t)\\n\\t\\tpublic\\n\\t\\tview\\n\\t\\treturns(uint256)\\n\\t{\\n\\t\\tif (stakeIndex >= userStakes.length || userStakes[stakeIndex].stakingUnits == 0) {\\n\\t\\t\\treturn 0;\\n\\t\\t}\\n\\n\\t\\tuint256 stakerBalance = userStakes[stakeIndex].stakingUnits;\\n\\n\\t\\treturn stakerBalance * (10**18) / totalStakingUnits;\\n\\t}\\n\\n\\t/**\\n\\t* @notice Calculate the history average for staker\\n\\t* @return (uint256) the calculated average\\n\\t*/\\n\\tfunction getHistoryAverageForStaker(\\n\\t\\tStakingInfo storage stakingInfo,\\n\\t\\tUserStake[] storage userStakes,\\n\\t\\tuint256 stakeIndex\\n\\t)\\n\\t\\tpublic\\n\\t\\tview\\n\\t\\treturns(uint256)\\n\\t{\\n\\t\\tif (stakeIndex >= userStakes.length) {\\n\\t\\t\\treturn 0;\\n\\t\\t}\\n\\n\\t\\tuint256 historyAverageRewardWhenEntered = userStakes[stakeIndex].historyAverageRewardWhenEntered;\\n\\t\\tuint256 blocksParticipatedInHistory = getStakerTimeInHistory(\\n\\t\\t\\tstakingInfo,\\n\\t\\t\\tuserStakes,\\n\\t\\t\\tstakeIndex\\n\\t\\t);\\n\\n\\t\\tif(blocksParticipatedInHistory == 0) {\\n\\t\\t\\treturn 0;\\n\\t\\t}\\n\\t\\tuint256 historyLength = getHistoryLength(stakingInfo);\\n\\n\\t\\tuint256 historyLengthBeforeStakerEntered = getHistoryLengthBeforeStakerEntered(\\n\\t\\t\\tstakingInfo,\\n\\t\\t\\tuserStakes,\\n\\t\\t\\tstakeIndex\\n\\t\\t);\\n\\n\\t\\treturn (stakingInfo.historyAverageReward * historyLength - historyAverageRewardWhenEntered * historyLengthBeforeStakerEntered) / blocksParticipatedInHistory;\\n\\n\\t}\\n\\n\\t/**\\n\\t* @notice Calculate the stake reward from history\\n\\t* @return (uint256) the calculated reward\\n\\t*/\\n\\tfunction getStakerRewardFromHistory(\\n\\t\\tStakingInfo storage stakingInfo,\\n\\t\\tUserStake[] storage userStakes,\\n\\t\\tuint256 stakeIndex\\n\\t)\\n\\t\\tpublic\\n\\t\\tview\\n\\t\\treturns(uint256)\\n\\t{\\n\\t\\tif (stakeIndex >= userStakes.length) {\\n\\t\\t\\treturn 0;\\n\\t\\t}\\n\\n\\t\\tuint256 stakingUnits = userStakes[stakeIndex].stakingUnits;\\n\\t\\tif (stakingUnits == 0) {\\n\\t\\t\\treturn 0;\\n\\t\\t}\\n\\t\\tuint256 historyAverageForStaker = getHistoryAverageForStaker(\\n\\t\\t\\tstakingInfo,\\n\\t\\t\\tuserStakes,\\n\\t\\t\\tstakeIndex\\n\\t\\t);\\n\\t\\tuint256 blocksParticipatedInHistory = getStakerTimeInHistory(\\n\\t\\t\\tstakingInfo,\\n\\t\\t\\tuserStakes,\\n\\t\\t\\tstakeIndex\\n\\t\\t);\\n\\n\\t\\treturn blocksParticipatedInHistory\\n\\t\\t\\t* historyAverageForStaker\\n\\t\\t\\t* stakingUnits\\n\\t\\t\\t/ (10 ** 18);\\n\\t}\\n\\n\\t/**\\n\\t* @notice Allows user to stake an nft to an existing stake for extra reward\\n\\t* @dev The NFT should be in the rarityRegister\\n\\t* @dev For each stake you can have only one NFT staked\\n\\t*/\\n\\tfunction _addNftToStakeAndApplyMultiplier(\\n\\t\\taddress rarityRegister,\\n\\t\\tUserStake storage userStake,\\n\\t\\taddress tokenAddress,\\n\\t\\tuint256 tokenId\\n\\t)\\n\\t\\tprivate\\n\\t{\\n\\t\\tuint256 rewardMultiplier = INFTRarityRegister(rarityRegister).getNftRarity(tokenAddress, tokenId);\\n\\n\\t\\trequire(rewardMultiplier > 0, 'Staking: NFT not found in RarityRegister');\\n\\t\\trequire(rewardMultiplier >= 100, 'Staking: NFT multiplier must be at least 100');\\n\\t\\trequire(\\n\\t\\t\\tuserStake.userStakedToken.tokenAddress == address(0),\\n\\t\\t\\t'Staking: Stake already has a token'\\n\\t\\t);\\n\\t\\trequire(\\n\\t\\t\\tuserStake.lockedTill > block.number,\\n\\t\\t\\t'Staking: cannot add NFT to unlocked stakes'\\n\\t\\t);\\n\\n\\n\\t\\tuint userStakingUnits = userStake.stakingUnits;\\n\\n\\t\\tbool success = TokenHelper.transferFrom(tokenAddress, tokenId, msg.sender, address(this));\\n\\n\\t\\trequire(success, \\\"Staking: could not add NFT to stake\\\");\\n\\n\\t\\tuserStake.userStakedToken.tokenAddress = tokenAddress;\\n\\t\\tuserStake.userStakedToken.tokenId = tokenId;\\n\\n\\t\\tuserStake.stakingUnits = applyPercent(userStakingUnits, rewardMultiplier);\\n\\t}\\n\\n\\t/**\\n\\t* @notice Allows user to stake an nft to an existing stake for extra reward\\n\\t* @dev The stake should exist\\n\\t* @dev when adding the NFT we need to simulate an unstake/stake because we need to recalculate the\\n\\t* new historyAverageAmount, stakingInfo.totalStakingUnits and stakingInfo.historyRewardPot\\n\\t* @notice it MUST revert if the added token has no multiplier\\n\\t*/\\n\\tfunction addNftToStake(\\n\\t\\tRewardStreamerLib.RewardStreamInfo storage rewardStreamInfo,\\n\\t\\tStakingInfo storage stakingInfo,\\n\\t\\tUserStake[] storage userStakes,\\n\\t\\tuint256 stakeIndex,\\n\\t\\taddress tokenAddress,\\n\\t\\tuint256 tokenId\\n\\t)\\n\\t\\tpublic\\n\\t{\\n\\t\\tuint256 previousStakingUnits = userStakes[stakeIndex].stakingUnits; // this stays the same\\n\\t\\trequire(previousStakingUnits > 0, \\\"Staking: Stake not found\\\");\\n\\n\\t\\tuint256 stakerReward = _getStakerReward(\\n\\t\\t\\trewardStreamInfo,\\n\\t\\t\\tstakingInfo,\\n\\t\\t\\tuserStakes,\\n\\t\\t\\tstakeIndex\\n\\t\\t);\\n\\n\\n\\t\\t_addNftToStakeAndApplyMultiplier(\\n\\t\\t\\tstakingInfo.rarityRegister,\\n\\t\\t\\tuserStakes[stakeIndex],\\n\\t\\t\\ttokenAddress,\\n\\t\\t\\ttokenId\\n\\t\\t);\\n\\n\\n\\t\\tuint256 newStakingUnits = userStakes[stakeIndex].stakingUnits; // after we just update it\\n\\n\\t\\tupdateHistoryValues(rewardStreamInfo, stakingInfo);\\n\\n\\t\\t// we bring the stake to the current time\\n\\t\\tuserStakes[stakeIndex].enteredAtBlock = block.number;\\n\\t\\tuserStakes[stakeIndex].historyAverageRewardWhenEntered = stakingInfo.historyAverageReward;\\n\\t\\tuserStakes[stakeIndex].rewardCredit = stakerReward;\\n\\n\\t\\tstakingInfo.totalStakingUnits = stakingInfo.totalStakingUnits\\n\\t\\t\\t- previousStakingUnits\\n\\t\\t\\t+ newStakingUnits;\\n\\n\\t\\tstakingInfo.historyRewardPot = stakingInfo.historyRewardPot - stakerReward;\\n\\t}\\n\\n\\tfunction _resetStake(UserStake storage userStake) private {\\n\\t\\tuserStake.stakingUnits = 0;\\n\\t\\tuserStake.rewardCredit = 0;\\n\\t\\tuserStake.amountStaked = 0;\\n\\t\\tuserStake.enteredAtBlock = 0;\\n\\t\\tuserStake.lockedTill = 0;\\n\\t\\tuserStake.ticketsMintingRatioWhenEntered = 0;\\n\\t\\tuserStake.historyAverageRewardWhenEntered = 0;\\n\\t\\tuserStake.ticketsMintingChillPeriodWhenEntered = 0;\\n\\t}\\n\\n\\n\\t/**\\n\\t* @notice Remove the previously staked NFT from the stake\\n\\t* @param staker the address of the owner of the stake\\n\\t*/\\n\\tfunction removeNftFromStake(\\n\\t\\tUserStakedToken storage userStakedToken,\\n\\t\\taddress staker\\n\\t)\\n\\t\\tpublic\\n\\t{\\n\\t\\tif (userStakedToken.tokenAddress != address(0)) {\\n\\t\\t\\tuint256 tokenId = userStakedToken.tokenId;\\n\\t\\t\\taddress tokenAddress = userStakedToken.tokenAddress;\\n\\n\\t\\t\\tbool success = TokenHelper.transferFrom(tokenAddress, tokenId, address(this), staker);\\n\\n\\t\\t\\tif(success) {\\n\\t\\t\\t\\tdelete userStakedToken.tokenId;\\n\\t\\t\\t\\tdelete userStakedToken.tokenAddress;\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\n\\t\\t/**\\n\\t* @notice Allows user to unstake the staked tokens\\n\\t* @notice The tokens are allowed to be unstaked only after the lock duration has passed\\n\\t* @notice MUST trigger Unstaked event\\n\\t* @dev Unstaking tokens is an atomic operation—either all of the tokens in a stake, or none of the tokens.\\n\\t* @dev Users can only unstake a single stake at a time, it is must be their oldest active stake. Upon releasing that stake, the tokens will be\\n\\t*   transferred back to their account, and their personalStakeIndex will increment to the next active stake.\\n\\t* @return uint256 The number of tokens unstaked\\n\\t*/\\n\\tfunction unstake(\\n\\t\\tRewardStreamerLib.RewardStreamInfo storage rewardStreamInfo,\\n\\t\\tStakingInfo storage stakingInfo,\\n\\t\\tUserStake[] storage userStakes,\\n\\t\\tuint256 stakeIndex\\n\\t)\\n\\t\\tpublic\\n\\t\\treturns (uint256)\\n\\t{\\n\\t\\trequire(stakeIndex < userStakes.length, 'Staking: Nothing to unstake');\\n\\n\\t\\trequire(userStakes[stakeIndex].lockedTill < block.number, \\\"Staking: Stake is still locked\\\");\\n\\t\\trequire(userStakes[stakeIndex].amountStaked != 0, 'Staking: Nothing to unstake');\\n\\n\\t\\tuint256 stakerReward = _getStakerReward(\\n\\t\\t\\trewardStreamInfo,\\n\\t\\t\\tstakingInfo,\\n\\t\\t\\tuserStakes,\\n\\t\\t\\tstakeIndex\\n\\t\\t);\\n\\n\\n\\t\\t// if for any reason the transfer fails, it will fail silently\\n\\t\\t// and token can be withdrawn when error disappears\\n\\t\\tremoveNftFromStake(userStakes[stakeIndex].userStakedToken, msg.sender);\\n\\n\\n\\t\\tuint256 totalAmount = stakerReward\\n\\t\\t\\t+ userStakes[stakeIndex].amountStaked\\n\\t\\t\\t+ userStakes[stakeIndex].rewardCredit;\\n\\n\\t\\tTokenHelper.ERC20Transfer(rewardStreamInfo.rewardToken, address(msg.sender), totalAmount);\\n\\n\\t\\tupdateHistoryValues(rewardStreamInfo, stakingInfo);\\n\\n\\t\\tstakingInfo.totalDistributedRewards = stakingInfo.totalDistributedRewards + stakerReward + userStakes[stakeIndex].rewardCredit;\\n\\t\\tstakingInfo.totalCurrentlyStaked = stakingInfo.totalCurrentlyStaked - userStakes[stakeIndex].amountStaked;\\n\\t\\tstakingInfo.totalStakingUnits = stakingInfo.totalStakingUnits - userStakes[stakeIndex].stakingUnits;\\n\\n\\t\\tclaimTickets(stakingInfo.ticket, userStakes[stakeIndex], msg.sender);\\n\\t\\t_resetStake(userStakes[stakeIndex]);\\n\\n\\t\\tstakingInfo.historyRewardPot = stakingInfo.historyRewardPot - stakerReward;\\n\\n\\t\\treturn stakerReward;\\n\\t}\\n\\n\\tfunction getClaimableTickets(\\n\\t\\tUserStake storage userStake\\n\\t)\\n\\t\\tpublic\\n\\t  view\\n\\t\\treturns (uint256)\\n\\t{\\n\\t\\tuint256 stakingUnits = userStake.stakingUnits;\\n\\t\\tuint256 ticketsMintingChillPeriod = userStake.ticketsMintingChillPeriodWhenEntered;\\n\\t\\tuint256 ticketsMintingRatio = userStake.ticketsMintingRatioWhenEntered;\\n\\t\\tuint256 ticketsMinted = userStake.ticketsMinted;\\n\\n\\t\\tif(stakingUnits == 0 || ticketsMintingRatio == 0 || ticketsMintingChillPeriod == 0) {\\n\\t\\t\\treturn 0;\\n\\t\\t}\\n\\t\\t// 2. get chilling period length\\n\\t\\t// 3. check how many periods have passed\\n\\t\\tuint256 enteredAtBlock = userStake.enteredAtBlock;\\n\\t\\tuint256 lockedTill = userStake.lockedTill;\\n\\t\\t// 4. prevent minting more tickets after stake is unlocked\\n\\n\\t\\tuint256 blocksDelta = Math.min(\\n\\t\\t\\t(uint256(block.number) - enteredAtBlock),\\n\\t\\t\\t(lockedTill - enteredAtBlock)\\n\\t\\t) + ticketsMintingChillPeriod; // count as passed from day 0\\n\\t\\tuint256 periodsPassed = blocksDelta / ticketsMintingChillPeriod;\\n\\t\\t// 4. multiply tickets\\n\\t\\tuint256 multipliedUnits = stakingUnits * periodsPassed;\\n\\t\\t// 5. get printable tickets\\n\\t\\tuint256 printableTickets = multipliedUnits / ticketsMintingRatio;\\n\\t\\t// 6. subtract any previously minted\\n\\t\\tuint256 netPrintableTickets = printableTickets - ticketsMinted;\\n\\t\\t// 5. don't print more tickets after stake is unlocked\\n\\t\\treturn netPrintableTickets;\\n \\t}\\n\\n\\t/**\\n\\t* @notice Mint tickets to the staker\\n\\t* @notice The amount of tickets depends on the amount of tokens staked and the duration the tokens a locked for.\\n\\t* @param ticket the address of the ticket instance\\n\\t* @param userStake the stake to claim tickets from\\n\\t* @param staker the address fo the staker\\n\\t*/\\n\\tfunction claimTickets(\\n\\t\\taddress ticket,\\n\\t\\tUserStake storage userStake,\\n\\t\\taddress staker\\n\\t)\\n\\t\\tpublic\\n\\t{\\n\\t\\tuint256 netPrintableTickets = getClaimableTickets(userStake);\\n\\n\\t\\tif(netPrintableTickets > 0) {\\n\\t\\t\\t \\n\\t\\t\\tTokenHelper._mintTickets(ticket, staker, netPrintableTickets);\\n\\t\\t\\tuserStake.ticketsMinted = userStake.ticketsMinted + netPrintableTickets;\\n\\t\\t}\\n \\t}\\n}\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/math/Math.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a >= b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow, so we distribute.\\n        return (a / 2) + (b / 2) + (((a % 2) + (b % 2)) / 2);\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a / b + (a % b == 0 ? 0 : 1);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/NFTRarityRegister/INFTRarityRegister.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n/// @title Registry holding the rarity value of a given NFT.\\n/// @author Nemitari Ajienka @najienka\\ninterface INFTRarityRegister {\\n\\t/**\\n\\t * The Staking SC allows to stake Prizes won via lottery which can be used to increase the APY of\\n\\t * staked tokens according to the rarity of NFT staked. For this reason,\\n\\t * we need to hold a table that the Staking SC can query and get back the rarity value of a given\\n\\t * NFT price (even the ones in the past).\\n\\t */\\n\\tevent NftRarityStored(\\n\\t\\taddress indexed tokenAddress,\\n\\t\\tuint256 tokenId,\\n\\t\\tuint256 rarityValue\\n\\t);\\n\\n\\t/**\\n\\t * @dev Store the rarity of a given NFT\\n\\t * @param tokenAddress The NFT smart contract address e.g., ERC-721 standard contract\\n\\t * @param tokenId The NFT's unique token id\\n\\t * @param rarityValue The rarity of a given NFT address and id unique combination\\n\\t */\\n\\tfunction storeNftRarity(address tokenAddress, uint256 tokenId, uint8 rarityValue) external;\\n\\n\\t/**\\n\\t * @dev Get the rarity of a given NFT\\n\\t * @param tokenAddress The NFT smart contract address e.g., ERC-721 standard contract\\n\\t * @param tokenId The NFT's unique token id\\n\\t * @return The the rarity of a given NFT address and id unique combination and timestamp\\n\\t */\\n\\tfunction getNftRarity(address tokenAddress, uint256 tokenId) external view returns (uint8);\\n}\\n\"\r\n    },\r\n    \"contracts/Raffle/IRaffleTicket.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\\\";\\n\\n\\n/// @title A mintable NFT ticket for Coinburp Raffle\\n/// @author Valerio Leo @valerioHQ\\ninterface IRaffleTicket is IERC1155 {\\n\\tfunction mint(address to, uint256 tokenId, uint256 amount) external;\\n}\\n\"\r\n    },\r\n    \"contracts/Staking/RewardStreamerLib.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/utils/math/Math.sol\\\";\\nimport \\\"./TokenHelper.sol\\\";\\n\\nlibrary RewardStreamerLib {\\n\\tstruct RewardStreamInfo {\\n\\t\\tRewardStream[] rewardStreams;\\n\\t\\tuint256 deployedAtBlock;\\n\\t\\taddress rewardToken;\\n\\t}\\n\\n\\tstruct RewardStream {\\n\\t\\tuint256[] periodRewards;\\n\\t\\tuint256[] periodEnds;\\n\\t\\tuint256 rewardStreamCursor;\\n\\t}\\n\\n\\t/**\\n\\t* @notice Will setup the token to use for reward\\n\\t* @param rewardTokenAddress The reward token address\\n\\t*/\\n\\tfunction setRewardToken(RewardStreamInfo storage rewardStreamInfo, address rewardTokenAddress) public {\\n\\t\\trewardStreamInfo.rewardToken = address(rewardTokenAddress);\\n\\t}\\n\\n\\t/**\\n\\t* @notice Will create a new reward stream\\n\\t* @param rewardStreamIndex The reward index\\n\\t* @param rewardPerBlock The amount of tokens rewarded per block\\n\\t* @param rewardLastBlock The last block of the period\\n\\t*/\\n\\tfunction addRewardStream(\\n\\t\\tRewardStreamInfo storage rewardStreamInfo,\\n\\t\\tuint256 rewardStreamIndex,\\n\\t\\tuint256 rewardPerBlock,\\n\\t\\tuint256 rewardLastBlock\\n\\t)\\n\\t\\tpublic\\n\\t\\treturns (uint256)\\n\\t{\\n\\t\\t// e.g. current length = 0\\n\\t\\trequire(rewardStreamIndex <= rewardStreamInfo.rewardStreams.length, \\\"RewardStreamer: you cannot skip an index\\\");\\n\\n\\t\\tuint256 tokensInReward;\\n\\n\\t\\tif(rewardStreamInfo.rewardStreams.length > rewardStreamIndex) {\\n\\t\\t\\tRewardStream storage rewardStream = rewardStreamInfo.rewardStreams[rewardStreamIndex];\\n\\t\\t\\tuint256[] storage periodEnds = rewardStream.periodEnds;\\n\\n\\t\\t\\tuint periodStart = periodEnds.length == 0\\n\\t\\t\\t\\t? rewardStreamInfo.deployedAtBlock\\n\\t\\t\\t\\t: periodEnds[periodEnds.length - 1];\\n\\n\\t\\t\\trequire(periodStart < rewardLastBlock, \\\"RewardStreamer: periodStart must be smaller than rewardLastBlock\\\");\\n\\n\\t\\t\\trewardStreamInfo.rewardStreams[rewardStreamIndex].periodEnds.push(rewardLastBlock);\\n\\t\\t\\trewardStreamInfo.rewardStreams[rewardStreamIndex].periodRewards.push(rewardPerBlock);\\n\\n\\t\\t\\ttokensInReward = (rewardLastBlock - periodStart) * rewardPerBlock;\\n\\t\\t} else {\\n\\t\\t\\tRewardStream memory rewardStream;\\n\\n\\t\\t\\tuint periodStart = rewardStreamInfo.deployedAtBlock;\\n\\t\\t\\trequire(periodStart < rewardLastBlock, \\\"RewardStreamer: periodStart must be smaller than rewardLastBlock\\\");\\n\\n\\t\\t\\trewardStreamInfo.rewardStreams.push(rewardStream);\\n\\t\\t\\trewardStreamInfo.rewardStreams[rewardStreamIndex].periodEnds.push(rewardLastBlock);\\n\\t\\t\\trewardStreamInfo.rewardStreams[rewardStreamIndex].periodRewards.push(rewardPerBlock);\\n\\n\\t\\t\\ttokensInReward = (rewardLastBlock - periodStart) * rewardPerBlock;\\n\\t\\t}\\n\\n\\t\\tTokenHelper.ERC20TransferFrom(address(rewardStreamInfo.rewardToken), msg.sender, address(this), tokensInReward);\\n\\n\\t\\treturn tokensInReward;\\n\\t}\\n\\n\\t/**\\n\\t* @notice Get the rewards for a period\\n\\t* @param fromBlock the block number from which the reward is calculated\\n\\t* @param toBlock the block number till which the reward is calculated\\n\\t* @return (uint256) the total reward\\n\\t*/\\n\\tfunction unsafeGetRewardsFromRange(\\n\\t\\tRewardStreamInfo storage rewardStreamInfo,\\n\\t\\tuint fromBlock,\\n\\t\\tuint toBlock\\n\\t)\\n\\t\\tpublic\\n\\t\\tview\\n\\t\\treturns (uint256)\\n\\t{\\n\\t\\trequire(tx.origin == msg.sender, \\\"StakingReward: unsafe function for contract call\\\");\\n\\n\\t\\tuint256 currentReward;\\n\\n\\t\\tfor(uint256 i; i < rewardStreamInfo.rewardStreams.length; i++) {\\n\\t\\t\\tcurrentReward = currentReward + iterateRewards(\\n\\t\\t\\t\\trewardStreamInfo,\\n\\t\\t\\t\\ti,\\n\\t\\t\\t\\tMath.max(fromBlock, rewardStreamInfo.deployedAtBlock),\\n\\t\\t\\t\\ttoBlock,\\n\\t\\t\\t\\t0\\n\\t\\t\\t);\\n\\t\\t}\\n\\n\\t\\treturn currentReward;\\n\\t}\\n\\n\\t/**\\n\\t* @notice Iterate the rewards\\n\\t* @param rewardStreamIndex the index of the reward stream\\n\\t* @param fromBlock the block number from which the reward is calculated\\n\\t* @param toBlock the block number till which the reward is calculated\\n\\t* @param rewardIndex the reward index\\n\\t* @return (uint256) the calculate reward\\n\\t*/\\n\\tfunction iterateRewards(\\n\\t\\tRewardStreamInfo storage rewardStreamInfo,\\n\\t\\tuint256 rewardStreamIndex,\\n\\t\\tuint fromBlock,\\n\\t\\tuint toBlock,\\n\\t\\tuint256 rewardIndex\\n\\t)\\n\\t\\tpublic\\n\\t\\tview\\n\\t\\treturns (uint256)\\n\\t{\\n\\t\\t// the start block is bigger than\\n\\t\\tif(rewardIndex >= rewardStreamInfo.rewardStreams[rewardStreamIndex].periodRewards.length) {\\n\\t\\t\\treturn 0;\\n\\t\\t}\\n\\n\\t\\tuint currentPeriodEnd = rewardStreamInfo.rewardStreams[rewardStreamIndex].periodEnds[rewardIndex];\\n\\t\\tuint currentPeriodReward = rewardStreamInfo.rewardStreams[rewardStreamIndex].periodRewards[rewardIndex];\\n\\n\\t\\tuint256 totalReward = 0;\\n\\n\\t\\t// what's the lowest block in current period?\\n\\t\\tuint currentPeriodStart = rewardIndex == 0\\n\\t\\t\\t? rewardStreamInfo.deployedAtBlock\\n\\t\\t\\t: rewardStreamInfo.rewardStreams[rewardStreamIndex].periodEnds[rewardIndex - 1];\\n\\t\\t// is the fromBlock included in period?\\n\\t\\tif(fromBlock <= currentPeriodEnd) {\\n\\t\\t\\tuint256 lower = Math.max(fromBlock, currentPeriodStart);\\n\\t\\t\\tuint256 upper = Math.min(toBlock, currentPeriodEnd);\\n\\n\\t\\t\\tuint256 blocksInPeriod = upper - lower;\\n\\t\\t\\ttotalReward = blocksInPeriod * currentPeriodReward;\\n\\t\\t} else {\\n\\t\\t\\treturn iterateRewards(\\n\\t\\t\\t\\trewardStreamInfo,\\n\\t\\t\\t\\trewardStreamIndex,\\n\\t\\t\\t\\tfromBlock,\\n\\t\\t\\t\\ttoBlock,\\n\\t\\t\\t\\trewardIndex + 1\\n\\t\\t\\t);\\n\\t\\t}\\n\\n\\t\\tif(toBlock > currentPeriodEnd) {\\n\\t\\t\\t// we need to move to next reward period\\n\\t\\t\\ttotalReward += iterateRewards(\\n\\t\\t\\t\\trewardStreamInfo,\\n\\t\\t\\t\\trewardStreamIndex,\\n\\t\\t\\t\\tfromBlock,\\n\\t\\t\\t\\ttoBlock,\\n\\t\\t\\t\\trewardIndex + 1\\n\\t\\t\\t);\\n\\t\\t}\\n\\n\\t\\treturn totalReward;\\n\\t}\\n\\n\\t/**\\n\\t* @notice Iterate the rewards and updates the cursor\\n\\t* @notice NOTE: once the cursor is updated, the next call will start from the cursor\\n\\t* @notice making it impossible to calculate twice the reward in a period\\n\\t* @param rewardStreamInfo the struct holding  current reward info\\n\\t* @param fromBlock the block number from which the reward is calculated\\n\\t* @param toBlock the block number till which the reward is calculated\\n\\t* @return (uint256) the calculated reward\\n\\t*/\\n\\tfunction getRewardAndUpdateCursor (\\n\\t\\tRewardStreamInfo storage rewardStreamInfo,\\n\\t\\tuint256 fromBlock,\\n\\t\\tuint256 toBlock\\n\\t)\\n\\t\\tpublic\\n\\t\\treturns (uint256)\\n\\t{\\n\\t\\tuint256 currentReward;\\n\\n\\t\\tfor(uint256 i; i < rewardStreamInfo.rewardStreams.length; i++) {\\n\\t\\t\\tcurrentReward = currentReward + iterateRewardsWithCursor(\\n\\t\\t\\t\\trewardStreamInfo,\\n\\t\\t\\t\\ti,\\n\\t\\t\\t\\tMath.max(fromBlock, rewardStreamInfo.deployedAtBlock),\\n\\t\\t\\t\\ttoBlock,\\n\\t\\t\\t\\trewardStreamInfo.rewardStreams[i].rewardStreamCursor\\n\\t\\t\\t);\\n\\t\\t}\\n\\n\\t\\treturn currentReward;\\n\\t}\\n\\n\\tfunction bumpStreamCursor(\\n\\t\\tRewardStreamInfo storage rewardStreamInfo,\\n\\t\\tuint256 rewardStreamIndex\\n\\t)\\n\\t\\tpublic\\n\\t{\\n\\t\\t// this step is important to avoid going out of index\\n\\t\\tif(rewardStreamInfo.rewardStreams[rewardStreamIndex].rewardStreamCursor < rewardStreamInfo.rewardStreams[rewardStreamIndex].periodRewards.length) {\\n\\t\\t\\trewardStreamInfo.rewardStreams[rewardStreamIndex].rewardStreamCursor = rewardStreamInfo.rewardStreams[rewardStreamIndex].rewardStreamCursor + 1;\\n\\t\\t}\\n\\t}\\n\\n\\tfunction iterateRewardsWithCursor(\\n\\t\\tRewardStreamInfo storage rewardStreamInfo,\\n\\t\\tuint256 rewardStreamIndex,\\n\\t\\tuint fromBlock,\\n\\t\\tuint toBlock,\\n\\t\\tuint256 rewardPeriodIndex\\n\\t)\\n\\t\\tpublic\\n\\t\\treturns (uint256)\\n\\t{\\n\\t\\tif(rewardPeriodIndex >= rewardStreamInfo.rewardStreams[rewardStreamIndex].periodRewards.length) {\\n\\t\\t\\treturn 0;\\n\\t\\t}\\n\\n\\t\\tuint currentPeriodEnd = rewardStreamInfo.rewardStreams[rewardStreamIndex].periodEnds[rewardPeriodIndex];\\n\\t\\tuint currentPeriodReward = rewardStreamInfo.rewardStreams[rewardStreamIndex].periodRewards[rewardPeriodIndex];\\n\\n\\t\\tuint256 totalReward = 0;\\n\\n\\t\\t// what's the lowest block in current period?\\n\\t\\tuint currentPeriodStart = rewardPeriodIndex == 0\\n\\t\\t\\t? rewardStreamInfo.deployedAtBlock\\n\\t\\t\\t: rewardStreamInfo.rewardStreams[rewardStreamIndex].periodEnds[rewardPeriodIndex - 1];\\n\\n\\t\\t// is the fromBlock included in period?\\n\\t\\tif(fromBlock <= currentPeriodEnd) {\\n\\t\\t\\tuint256 lower = Math.max(fromBlock, currentPeriodStart);\\n\\t\\t\\tuint256 upper = Math.min(toBlock, currentPeriodEnd);\\n\\n\\t\\t\\tuint256 blocksInPeriod = upper - lower;\\n\\n\\t\\t\\ttotalReward = blocksInPeriod * currentPeriodReward;\\n\\t\\t} else {\\n\\t\\t\\t// the fromBlock passed this reward period, we can start\\n\\t\\t\\t// skipping it for next reads\\n\\t\\t\\tbumpStreamCursor(rewardStreamInfo, rewardStreamIndex);\\n\\n\\t\\t\\treturn iterateRewards(rewardStreamInfo, rewardStreamIndex, fromBlock, toBlock, rewardPeriodIndex + 1);\\n\\t\\t}\\n\\n\\t\\tif(toBlock > currentPeriodEnd) {\\n\\t\\t\\t// we need to move to next reward period\\n\\t\\t\\ttotalReward += iterateRewards(rewardStreamInfo, rewardStreamIndex, fromBlock, toBlock, rewardPeriodIndex + 1);\\n\\t\\t}\\n\\n\\t\\treturn totalReward;\\n\\t}\\n}\"\r\n    },\r\n    \"contracts/Staking/TokenHelper.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity ^0.8.0;\\n\\nimport '@openzeppelin/contracts/token/ERC20/IERC20.sol';\\nimport '@openzeppelin/contracts/token/ERC721/IERC721.sol';\\n\\nimport \\\"../Raffle/IRaffleTicket.sol\\\";\\n\\nlibrary TokenHelper {\\n\\tfunction ERC20Transfer(\\n\\t\\taddress token,\\n\\t\\taddress to,\\n\\t\\tuint256 amount\\n\\t)\\n\\t\\tpublic\\n\\t{\\n\\t\\t(bool success, bytes memory data) =\\n\\t\\t\\t\\ttoken.call(abi.encodeWithSelector(IERC20.transfer.selector, to, amount));\\n\\t\\trequire(success && (data.length == 0 || abi.decode(data, (bool))), 'ERC20: transfer amount exceeds balance');\\n\\t}\\n\\n    function ERC20TransferFrom(\\n\\t\\t\\taddress token,\\n\\t\\t\\taddress from,\\n\\t\\t\\taddress to,\\n\\t\\t\\tuint256 amount\\n    )\\n\\t\\t\\tpublic\\n\\t\\t{\\n\\t\\t\\t(bool success, bytes memory data) =\\n\\t\\t\\t\\t\\ttoken.call(abi.encodeWithSelector(IERC20.transferFrom.selector, from, to, amount));\\n\\t\\t\\trequire(success && (data.length == 0 || abi.decode(data, (bool))), 'ERC20: transfer amount exceeds balance or allowance');\\n    }\\n\\n    function transferFrom(\\n        address token,\\n        uint256 tokenId,\\n        address from,\\n        address to\\n    )\\n            public\\n            returns (bool)\\n        {\\n                (bool success,) = token.call(abi.encodeWithSelector(IERC721.transferFrom.selector, from, to, tokenId));\\n\\n                // in the ERC721 the transfer doesn't return a bool. So we need to check explicitly.\\n                return success;\\n    }\\n\\n    function _mintTickets(\\n        address ticket,\\n        address to,\\n        uint256 amount\\n    ) public {\\n        (bool success,) = ticket.call(abi.encodeWithSelector(IRaffleTicket.mint.selector, to, 0, amount));\\n\\n        require(success, 'ERC1155: mint failed');\\n    }\\n}\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155 is IERC165 {\\n    /**\\n     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\\n     */\\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\\n\\n    /**\\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\\n     * transfers.\\n     */\\n    event TransferBatch(\\n        address indexed operator,\\n        address indexed from,\\n        address indexed to,\\n        uint256[] ids,\\n        uint256[] values\\n    );\\n\\n    /**\\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\\n     * `approved`.\\n     */\\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\\n     *\\n     * If an {URI} event was emitted for `id`, the standard\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\\n     * returned by {IERC1155MetadataURI-uri}.\\n     */\\n    event URI(string value, uint256 indexed id);\\n\\n    /**\\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) external view returns (uint256);\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(address[] calldata accounts, uint256[] calldata ids)\\n        external\\n        view\\n        returns (uint256[] memory);\\n\\n    /**\\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `operator` cannot be the caller.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\\n     *\\n     * See {setApprovalForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If the caller is not `from`, it must be have been approved to spend ``from``'s tokens via {setApprovalForAll}.\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] calldata ids,\\n        uint256[] calldata amounts,\\n        bytes calldata data\\n    ) external;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/introspection/IERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/IERC721.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": false,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"metadata\": {\r\n      \"useLiteralContent\": true\r\n    },\r\n    \"libraries\": {\r\n      \"contracts/Staking/RewardStreamerLib.sol\": {\r\n        \"RewardStreamerLib\": \"0x28e4f056a6d7374025c88b24f2896d32b40bbc12\"\r\n      },\r\n      \"contracts/Staking/TokenHelper.sol\": {\r\n        \"TokenHelper\": \"0xaa7aaa0c937c7af76559c30958773f207a7baab5\"\r\n      }\r\n    }\r\n  }\r\n}}","ABI":"[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"number\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"percent\",\"type\":\"uint256\"}],\"name\":\"applyPercent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"currentPeriodLength\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"currentPeriodAverageReward\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"currentHistoryLength\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"historyStartBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"historyAverageReward\",\"type\":\"uint256\"}],\"name\":\"getNewHistoryAverageReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"getStakeIndexFromCalldata\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"getTokenAddressFromCalldata\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"getTokenIdFromCalldata\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"oldHistoryRewardPot\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalRewardInCurrentPeriod\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stakerReward\",\"type\":\"uint256\"}],\"name\":\"historyRewardPot\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"from\",\"type\":\"uint256\"}],\"name\":\"parse32BytesToUint256\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"parsed\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"from\",\"type\":\"uint256\"}],\"name\":\"parseBytesToAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"parsed\",\"type\":\"address\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_block\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"historyStartBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewardPerBlock\",\"type\":\"uint256\"}],\"name\":\"totalGeneratedReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"}]","ContractName":"StakingLib","CompilerVersion":"v0.8.0+commit.c7dfd78e","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}