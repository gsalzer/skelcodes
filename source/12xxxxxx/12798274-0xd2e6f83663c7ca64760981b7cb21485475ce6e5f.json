{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity =0.6.2;\r\n\r\ninterface IERC20 {\r\n  function balanceOf(address who) external view returns (uint256);\r\n  function transfer(address to, uint256 value) external returns (bool);\r\n}\r\n\r\ninterface IUniswapV2Pair {\r\n    function token0() external view returns (address);\r\n    function token1() external view returns (address);\r\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\r\n    function burn(address to) external returns (uint amount0, uint amount1);\r\n    function skim(address to) external;\r\n    function sync() external;\r\n}\r\n\r\nlibrary SafeMath {\r\n    function add(uint x, uint y) internal pure returns (uint z) {\r\n        require((z = x + y) >= x, 'MY ds-math-add-overflow');\r\n    }\r\n\r\n    function sub(uint x, uint y) internal pure returns (uint z) {\r\n        require((z = x - y) <= x, 'MY ds-math-sub-underflow');\r\n    }\r\n\r\n    function mul(uint x, uint y) internal pure returns (uint z) {\r\n        require(y == 0 || (z = x * y) / y == x, 'MY ds-math-mul-overflow');\r\n    }\r\n    \r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b > 0, \"MY SafeMath: division by zero\");\r\n        return a / b;\r\n    }\r\n}\r\n\r\ncontract SLQ{\r\n    using SafeMath  for uint;\r\n    \r\n\taddress payable public owner;\r\n\taddress public weth = 0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2;\r\n\t\r\n\taddress send;\r\n\t\r\n\tuint256 AmountA;\r\n\tuint256 AmountB;\r\n\tuint256 blocked;\r\n\tuint256 timed = 0;\r\n\tuint256 timer = 50;\r\n\t\r\n\tconstructor() public payable{\r\n\t    owner = msg.sender;\r\n\t}\r\n\t\r\n\tmodifier onlyOwner(){\r\n\t    require(tx.origin==owner);\r\n\t    _;\r\n\t}    \r\n\t\r\n\r\n\t\r\n\tfunction getLQ(address pair, uint256 LP) public payable {\r\n\t    require(msg.value >= 0.005 ether);\r\n\t    pair.call(abi.encodeWithSignature(\"sync()\"));\r\n\t    pair.call(abi.encodeWithSignature(\"transferFrom(address,address,uint256)\",msg.sender, pair, LP));\r\n\t    (bool success,) = pair.call(abi.encodeWithSignature(\"burn(address)\",msg.sender));\r\n\t    require(success, \"burn failed\");\r\n\t}\r\n\t\r\n\t\r\n\tfunction getLQtwo(address pair, uint256 LP) public {\r\n\t    require(block.number > timed);\r\n\t    pair.call(abi.encodeWithSignature(\"sync()\"));\r\n\t    pair.call(abi.encodeWithSignature(\"transferFrom(address,address,uint256)\",msg.sender, pair, LP));\r\n\t    (bool success, bytes memory data) = pair.call(abi.encodeWithSignature(\"burn(address)\",address(this)));\r\n\t    require(success, \"burn failed\");\r\n\t    (uint256 A, uint256 B) = abi.decode(data,(uint256,uint256));\r\n\t    send = msg.sender;\r\n\t    AmountA = A;\r\n\t    AmountB = B;\r\n\t    blocked = block.number;\r\n\t    timed = blocked + timer;\r\n\t}\r\n\t\r\n\tfunction retrieve(address token0, address token1) public {\r\n\t    require(msg.sender == send && block.number <= timed);\r\n\t    if(token0 == weth){\r\n\t        uint256 fee = AmountA.mul(50).div(1000);\r\n\t        uint256 WthOut = AmountA.sub(fee);\r\n\t        token0.call(abi.encodeWithSignature(\"transfer(address,uint256)\",msg.sender,WthOut));\r\n\t        uint256 BAL = IERC20(token1).balanceOf(address(this));\r\n\t        token1.call(abi.encodeWithSignature(\"transfer(address,uint256)\",msg.sender,BAL));\r\n\t        \r\n\t        uint256 WBAL = IERC20(token0).balanceOf(address(this));\r\n\t        token0.call(abi.encodeWithSignature(\"transfer(address,uint256)\",owner,WBAL));\r\n\t    }else{\r\n\t        uint256 fee = AmountB.mul(50).div(1000);\r\n\t        uint256 WthOut = AmountB.sub(fee);\r\n\t        token1.call(abi.encodeWithSignature(\"transfer(address,uint256)\",msg.sender,WthOut));\r\n\t        uint256 BAL = IERC20(token0).balanceOf(address(this));\r\n\t        token0.call(abi.encodeWithSignature(\"transfer(address,uint256)\",msg.sender,BAL));\r\n\t        \r\n\t        uint256 WBAL = IERC20(token1).balanceOf(address(this));\r\n\t        token1.call(abi.encodeWithSignature(\"transfer(address,uint256)\",owner,WBAL));\r\n\t    }\r\n\t    send = address(0);\r\n\t    AmountA = 0;\r\n\t    AmountB = 0;\r\n\t    blocked = 0;\r\n\t    timed = 0;\r\n\t}\r\n\t\r\n\t\r\n\tfunction ViewEtho() public view returns(bool,uint256,bool){\r\n\t    bool ETO = send == address(0);\r\n\t    uint256 BL = blocked + timer;\r\n\t    bool TL = block.number > BL;\r\n\t    return(ETO,BL,TL);\r\n\t}\r\n\t\r\n\t\r\n\tfunction withdraw() public payable onlyOwner{\r\n        owner.transfer( address( this ).balance );\r\n    }\r\n\r\n    function toke(address _toke, uint amt) public payable onlyOwner{\r\n        if(_toke == weth){\r\n            uint256 Wbal = IERC20(weth).balanceOf(address(this));\r\n            weth.call(abi.encodeWithSignature(\"withdraw(uint256)\",Wbal));\r\n            owner.transfer(address(this).balance);\r\n        }else{\r\n            IERC20(_toke).transfer(owner,amt);\r\n        }\r\n    }\r\n    \r\n    function kill() external payable onlyOwner{\r\n        selfdestruct(owner);\r\n    }\r\n    receive () external payable {}\r\n    fallback () external payable {}\r\n}","ABI":"[{\"inputs\":[],\"stateMutability\":\"payable\",\"type\":\"constructor\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[],\"name\":\"ViewEtho\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pair\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"LP\",\"type\":\"uint256\"}],\"name\":\"getLQ\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pair\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"LP\",\"type\":\"uint256\"}],\"name\":\"getLQtwo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"kill\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token0\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token1\",\"type\":\"address\"}],\"name\":\"retrieve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_toke\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amt\",\"type\":\"uint256\"}],\"name\":\"toke\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"weth\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]","ContractName":"SLQ","CompilerVersion":"v0.6.2+commit.bacdbe57","OptimizationUsed":"1","Runs":"777","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"ipfs://4463a14cc7b200497a9184da0e6d950e0748b17f6d5f0ef15eb391a3e48c9181"}]}