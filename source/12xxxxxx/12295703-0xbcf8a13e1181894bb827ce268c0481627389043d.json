{"status":"1","message":"OK","result":[{"SourceCode":"// SPDX-License-Identifier: BUSL-1.1\r\n\r\npragma solidity ^0.6.11;\r\npragma experimental ABIEncoderV2;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n// File: @openzeppelin/contracts/math/SafeMath.sol\r\n\r\n\r\n\r\npragma solidity ^0.6.0;\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts with custom message when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/utils/Address.sol\r\n\r\n\r\n\r\npragma solidity ^0.6.2;\r\n\r\n/**\r\n * @dev Collection of functions related to the address type\r\n */\r\nlibrary Address {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     *\r\n     * Among others, `isContract` will return false for the following\r\n     * types of addresses:\r\n     *\r\n     *  - an externally-owned account\r\n     *  - a contract in construction\r\n     *  - an address where a contract will be created\r\n     *  - an address where a contract lived, but was destroyed\r\n     * ====\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\r\n        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\r\n        // for accounts without code, i.e. `keccak256('')`\r\n        bytes32 codehash;\r\n        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly { codehash := extcodehash(account) }\r\n        return (codehash != accountHash && codehash != 0x0);\r\n    }\r\n\r\n    /**\r\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * IMPORTANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     */\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\r\n        (bool success, ) = recipient.call{ value: amount }(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n\r\n    /**\r\n     * @dev Performs a Solidity function call using a low level `call`. A\r\n     * plain`call` is an unsafe replacement for a function call: use this\r\n     * function instead.\r\n     *\r\n     * If `target` reverts with a revert reason, it is bubbled up by this\r\n     * function (like regular Solidity function calls).\r\n     *\r\n     * Returns the raw returned data. To convert to the expected return value,\r\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `target` must be a contract.\r\n     * - calling `target` with `data` must not revert.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n      return functionCall(target, data, \"Address: low-level call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\r\n     * `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\r\n        return _functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but also transferring `value` wei to `target`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the calling contract must have an ETH balance of at least `value`.\r\n     * - the called Solidity function must be `payable`.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\r\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\r\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\r\n        return _functionCallWithValue(target, data, value, errorMessage);\r\n    }\r\n\r\n    function _functionCallWithValue(address target, bytes memory data, uint256 weiValue, string memory errorMessage) private returns (bytes memory) {\r\n        require(isContract(target), \"Address: call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.call{ value: weiValue }(data);\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            // Look for revert reason and bubble it up if present\r\n            if (returndata.length > 0) {\r\n                // The easiest way to bubble the revert reason is using memory via assembly\r\n\r\n                // solhint-disable-next-line no-inline-assembly\r\n                assembly {\r\n                    let returndata_size := mload(returndata)\r\n                    revert(add(32, returndata), returndata_size)\r\n                }\r\n            } else {\r\n                revert(errorMessage);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/token/ERC20/SafeERC20.sol\r\n\r\n\r\n\r\npragma solidity ^0.6.0;\r\n\r\n\r\n\r\n\r\n/**\r\n * @title SafeERC20\r\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\r\n * contract returns false). Tokens that return no value (and instead revert or\r\n * throw on failure) are also supported, non-reverting calls are assumed to be\r\n * successful.\r\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\r\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\r\n */\r\nlibrary SafeERC20 {\r\n    using SafeMath for uint256;\r\n    using Address for address;\r\n\r\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\r\n    }\r\n\r\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\r\n    }\r\n\r\n    /**\r\n     * @dev Deprecated. This function has issues similar to the ones found in\r\n     * {IERC20-approve}, and its usage is discouraged.\r\n     *\r\n     * Whenever possible, use {safeIncreaseAllowance} and\r\n     * {safeDecreaseAllowance} instead.\r\n     */\r\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\r\n        // safeApprove should only be called when setting an initial allowance,\r\n        // or when resetting it to zero. To increase and decrease it, use\r\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\r\n        // solhint-disable-next-line max-line-length\r\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\r\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\r\n        );\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\r\n    }\r\n\r\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \"SafeERC20: decreased allowance below zero\");\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    /**\r\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\r\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\r\n     * @param token The token targeted by the call.\r\n     * @param data The call data (encoded using abi.encode or one of its variants).\r\n     */\r\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\r\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\r\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\r\n        // the target address contains contract code and also asserts for success in the low-level call.\r\n\r\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\r\n        if (returndata.length > 0) { // Return data is optional\r\n            // solhint-disable-next-line max-line-length\r\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\r\n        }\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/math/Math.sol\r\n\r\n\r\n\r\npragma solidity ^0.6.0;\r\n\r\n/**\r\n * @dev Standard math utilities missing in the Solidity language.\r\n */\r\nlibrary Math {\r\n    /**\r\n     * @dev Returns the largest of two numbers.\r\n     */\r\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a >= b ? a : b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the smallest of two numbers.\r\n     */\r\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a < b ? a : b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the average of two numbers. The result is rounded towards\r\n     * zero.\r\n     */\r\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // (a + b) / 2 can overflow, so we distribute\r\n        return (a / 2) + (b / 2) + ((a % 2 + b % 2) / 2);\r\n    }\r\n}\r\npragma solidity ^0.6.11;\r\n\r\n\r\ncontract TimelockInvesters {\r\n  using SafeERC20 for IERC20;\r\n  using SafeMath for uint256;\r\n\r\n\r\n  event Released(uint256 amount);\r\n  event AddInvester(address invester,uint256 amount);\r\n\r\n  IERC20 public token;\r\n\r\n  uint256 public  startTimestamp;\r\n  uint256 public  durationInDays;\r\n  uint256 public  totalPool;\r\n \r\n  \r\n  struct Invester {\r\n    address to;\r\n    uint256 amount;\r\n    uint256 released;\r\n  }\r\n  \r\n  Invester[] investers;\r\n  mapping (address => uint256) investersIndex;  \r\n\r\n   struct Recipient {\r\n    address to;\r\n    uint256 amount;\r\n  }\r\n\r\n  constructor(\r\n    address _bid,\r\n    uint256 _startTimestamp,\r\n    uint256 _durationInDays,\r\n    Recipient[] memory _investors\r\n  ) public {\r\n\r\n    token = IERC20(_bid);\r\n    durationInDays = _durationInDays;\r\n    startTimestamp = _startTimestamp == 0 ? blockTimestamp() : _startTimestamp;\r\n    \r\n    uint256 t=0;\r\n    for (uint256 i = 0; i < _investors.length; i++) {\r\n      address ia=_investors[i].to;\r\n      uint256 am=_investors[i].amount;\r\n      Invester memory iv=Invester({to: ia, amount:am,released:0});\r\n      investers.push(iv);\r\n      emit AddInvester(ia,am);\r\n      investersIndex[ia]=i+1; //cannot be 0\r\n      t=t.add(am);\r\n    }\r\n    totalPool=t;\r\n  }\r\n  \r\n  \r\n  function release() external {\r\n      uint256 i=_index1();\r\n      require(i>0, \"investers not existed\");\r\n      _release(i-1);\r\n  }\r\n  \r\n  function releasedToken() external view returns (uint256) {\r\n      uint256 i=_index1();\r\n      require(i>0, \"investers not existed\");  \r\n      return investers[i-1].released;\r\n  }\r\n  \r\n  function unreleasedToken() external view returns (uint256) {\r\n      uint256 i=_index1();\r\n      require(i>0, \"investers not existed\");  \r\n      return _vestedAmount(i-1);\r\n  }\r\n  \r\n  function checkUnreleasedToken(address _address) external view returns (uint256) {\r\n      uint256 i=investersIndex[_address];\r\n      require(i>0, \"investers not existed\");  \r\n      return _vestedAmount(i-1);\r\n  }\r\n\r\n  function investedToken() external view returns (uint256) {\r\n      uint256 i=_index1();\r\n      require(i>0, \"investers not existed\");  \r\n      return investers[i-1].amount;\r\n  }\r\n  \r\n  \r\n  function poolBalance() external view returns (uint256){\r\n      return token.balanceOf(address(this));\r\n  }\r\n  \r\n  function minutesElapsed() external view returns (uint256){\r\n    if (blockTimestamp() < startTimestamp) {\r\n      return 0;\r\n    }\r\n\r\n    uint256 elapsedTime = blockTimestamp().sub(startTimestamp);\r\n    uint256 elapsedMinutes = elapsedTime.div(60);\r\n    \r\n    return elapsedMinutes;\r\n  }\r\n  \r\n\r\n  function _release(uint256 index) internal {\r\n    uint256 vested = _vestedAmount(index);\r\n    require(vested > 0, \"No tokens to release\");\r\n\r\n    investers[index].released = investers[index].released.add(vested);\r\n    token.safeTransfer(investers[index].to, vested);\r\n\r\n    emit Released(vested);\r\n  }\r\n\r\n  function _index1() view internal returns (uint256) {\r\n      return investersIndex[msg.sender];\r\n  }\r\n\r\n  function _vestedAmount(uint256 index) internal view returns (uint256) {\r\n    if (blockTimestamp() < startTimestamp) {\r\n      return 0;\r\n    }\r\n\r\n    uint256 elapsedTime = blockTimestamp().sub(startTimestamp);\r\n    uint256 elapsedMinutes = elapsedTime.div(60);\r\n    uint256 durationMinutes = durationInDays.mul(24).mul(60);\r\n\r\n\r\n    // If over vesting duration, all tokens vested\r\n    if (elapsedMinutes >= durationMinutes) {\r\n      return investers[index].amount;\r\n    } else {\r\n      uint256 totalBalance = investers[index].amount;\r\n      uint256 released=investers[index].released;\r\n      uint256 currentBalance = token.balanceOf(address(this));\r\n\r\n      uint256 vested = totalBalance.mul(elapsedMinutes).div(durationMinutes);\r\n      uint256 unreleased = vested.sub(released);\r\n\r\n      // currentBalance can be 0 in case of vesting being revoked earlier.\r\n      return Math.min(currentBalance, unreleased);\r\n    }\r\n  }\r\n\r\n  function blockTimestamp() public view virtual returns (uint256) {\r\n    return block.timestamp;\r\n  }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_bid\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_startTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_durationInDays\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"internalType\":\"struct TimelockInvesters.Recipient[]\",\"name\":\"_investors\",\"type\":\"tuple[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"invester\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"AddInvester\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Released\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"blockTimestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"checkUnreleasedToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"durationInDays\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"investedToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minutesElapsed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"poolBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"release\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"releasedToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startTimestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalPool\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unreleasedToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"TimelockInvesters","CompilerVersion":"v0.6.11+commit.5ef660b1","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"00000000000000000000000000000000000045166c45af0fc6e4cf31d9e14b9a000000000000000000000000000000000000000000000000000000006084165000000000000000000000000000000000000000000000000000000000000000b400000000000000000000000000000000000000000000000000000000000000800000000000000000000000000000000000000000000000000000000000000028000000000000000000000000357ad9662364aed7316acbdbc76a193983e7c7310000000000000000000000000000000000000000000034f086f3b33b68400000000000000000000000000000c00da2a27c2842fe2babbe5f9cd02d895c75fa1800000000000000000000000000000000000000000000152d02c7e14af680000000000000000000000000000049185f385b83332bda127b46e48d186083ab4988000000000000000000000000000000000000000000000a968163f0a57b4000000000000000000000000000003250f29f8208be1200b93e9d98ed2d3d6af8b74d000000000000000000000000000000000000000000001fc3842bd1f071c0000000000000000000000000000021d5399ef87bc85b74cbe114bf61eddea9fead6400000000000000000000000000000000000000000000152d02c7e14af68000000000000000000000000000009f0574a5f28779a1a682cfe4bbd090ee058d07aa000000000000000000000000000000000000000000000a968163f0a57b40000000000000000000000000000000000b20f0f6a3a212aa6b85106709cd5941457c00000000000000000000000000000000000000000000152d02c7e14af6800000000000000000000000000000ea5abc1a1689984ebfdc41130886bdaeb5c24078000000000000000000000000000000000000000000001fc3842bd1f071c0000000000000000000000000000051bfa1c800faa110086150a33c837082c7c3c306000000000000000000000000000000000000000000001fc3842bd1f071c00000000000000000000000000000602e295a4e43a27be3829778e239c971e150911200000000000000000000000000000000000000000000152d02c7e14af6800000000000000000000000000000c6bd07bb5c4f0d24056f1bf7312115496e96521900000000000000000000000000000000000000000000261dd1ce2f20888000000000000000000000000000003531addf2ce7877d54aa4ba0748ab261c3e5149a00000000000000000000000000000000000000000000152d02c7e14af680000000000000000000000000000057885d02918d54b83ad01f6358fa36ff7c76b31700000000000000000000000000000000000000000000174b1ca8ab05a8c0000000000000000000000000000024780ea3f1f3cc670558e8cd82635c6a0f959c460000000000000000000000000000000000000000000030b453321fc603c00000000000000000000000000000c267da714ddb007bc198cb9bdb722c66e652c68700000000000000000000000000000000000000000000152d02c7e14af6800000000000000000000000000000f12c9308a1e6e9f0a0e4059607f4b22e6ea3b25d0000000000000000000000000000000000000000000034f086f3b33b684000000000000000000000000000002753deed6fc665ff159c94aeafb8a19e4525831e00000000000000000000000000000000000000000000152d02c7e14af68000000000000000000000000000008474c43970481015019819936793ddc210a0050e000000000000000000000000000000000000000000001fc3842bd1f071c00000000000000000000000000000224dc168607867ea1f60c7b6ef1913ecee98bbc200000000000000000000000000000000000000000000152d02c7e14af68000000000000000000000000000006e9fe041e0ba8c2af35215d900d188d53d7a9b410000000000000000000000000000000000000000000034f086f3b33b6840000000000000000000000000000077ffbbaf4f13904212236c8d7fd28e895b8ac1a300000000000000000000000000000000000000000000152d02c7e14af6800000000000000000000000000000ac0d889b915535f0a6484e7a08b232ac0a86217c00000000000000000000000000000000000000000000152d02c7e14af6800000000000000000000000000000549afb2f9cdb90fdef7861b65c2bcf80aabbf76500000000000000000000000000000000000000000000152d02c7e14af6800000000000000000000000000000929914794ab021d559eb4cdde28b6974dafaabcb000000000000000000000000000000000000000000007f0e10af47c1c700000000000000000000000000000060859ed309e5553b39bd66edf1a3c26473da3b6b000000000000000000000000000000000000000000000a968163f0a57b400000000000000000000000000000c120ab7977bdda3b57f191dbf41a1af7da794baa00000000000000000000000000000000000000000000152d02c7e14af6800000000000000000000000000000ec6b01fea0f4b3a1a34af53eafb64a4d44113d4c000000000000000000000000000000000000000000000a968163f0a57b40000000000000000000000000000027d849d3c1efd4da3c67e0fd37652e23c1b6d3d400000000000000000000000000000000000000000000152d02c7e14af6800000000000000000000000000000d7b2879c8922cd704e41e8cc1f18f6994d6b7c3600000000000000000000000000000000000000000000152d02c7e14af6800000000000000000000000000000012576a6f6599a087868def350e0343945b9762d00000000000000000000000000000000000000000000054b40b1f852bda000000000000000000000000000008590da08402a32cd04da1b7de558da7f54ac188700000000000000000000000000000000000000000000054b40b1f852bda00000000000000000000000000000439b0473a9917ec4ce8418a651f09b191e7c218a00000000000000000000000000000000000000000000152d02c7e14af6800000000000000000000000000000e4b424e1ccc6f08768c921455f83181bacbfe3f000000000000000000000000000000000000000000000152d02c7e14af6800000000000000000000000000000c881ed8f18259272f1cbb8852719743669f794fe00000000000000000000000000000000000000000000d3c21bcecceda1000000000000000000000000000000ca9cbd376488dd77187e99864ba7ce1ff670cb6900000000000000000000000000000000000000000000152d02c7e14af6800000000000000000000000000000e24283e2f22a7a4360dab185dfeb62190d13742f00000000000000000000000000000000000000000000152d02c7e14af6800000000000000000000000000000b1998bdaee3e30729d76191c94dfc4c3777e7a7100000000000000000000000000000000000000000000152d02c7e14af6800000000000000000000000000000081e92f8b195999d71b8c88d042da75f8be8ed9f0000000000000000000000000000000000000000000069e10de76676d0800000000000000000000000000000281e8d319088a7bcf99c3f98e6c145e9be62cf66000000000000000000000000000000000000000000000a968163f0a57b4000000000000000000000000000008ea35fb0555ba67ffa03beb6a24b8b22d1f623e700000000000000000000000000000000000000000000021e19e0c9bab2400000","EVMVersion":"Default","Library":"","LicenseType":"GNU GPLv3","Proxy":"0","Implementation":"","SwarmSource":"ipfs://ad85e8ca0b7391e082da4f0046c1182780cc3f3290ad3a6a3c6440b94bcf7363"}]}