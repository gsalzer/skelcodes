{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"/C/Users/acerola/Desktop/dapp_game/contracts/Gachadass.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"../node_modules/@openzeppelin/contracts/token/ERC721/extensions/ERC721Pausable.sol\\\";\\r\\nimport \\\"../node_modules/@openzeppelin/contracts/access/Ownable.sol\\\";\\r\\n\\r\\ncontract Gachadass is ERC721Pausable, Ownable {\\r\\n\\r\\n  event Item_Changed(\\r\\n      uint256 index\\r\\n  );\\r\\n\\r\\n  event Assortment_Changed(\\r\\n      uint256 index\\r\\n  );\\r\\n\\r\\n  event Gacha_Changed(\\r\\n      uint256 index\\r\\n  );\\r\\n\\r\\n  event New_Token(\\r\\n      uint256 id,\\r\\n      uint32 image,\\r\\n      uint144 value\\r\\n  );\\r\\n\\r\\n  event Config_Changed(\\r\\n      uint16 gacha_data_length,\\r\\n      uint16 items_length,\\r\\n      uint16 assortments_length,\\r\\n      uint72 free_gift\\r\\n  );\\r\\n\\r\\n  struct Gacha_Data {\\r\\n      uint8[] rates;\\r\\n      uint32[] common_items;\\r\\n      uint32[] uncommon_items;\\r\\n      uint32[] rare_items;\\r\\n      uint72 price;\\r\\n      bool released;\\r\\n  }\\r\\n\\r\\n  struct Token_Data {\\r\\n      uint32 image;\\r\\n      uint144 value;\\r\\n  }\\r\\n\\r\\n  struct Item {\\r\\n      uint32 image;\\r\\n      uint144 value;\\r\\n      uint72 price;\\r\\n      uint8 gacha_id;\\r\\n  }\\r\\n\\r\\n  struct Assortment_Data {\\r\\n      uint16 start;\\r\\n      uint8 length;\\r\\n      uint72 price;\\r\\n      bytes20 hash;\\r\\n  }\\r\\n\\r\\n  struct Config {\\r\\n      uint16 gacha_data_length;\\r\\n      uint16 items_length;\\r\\n      uint16 assortments_length;\\r\\n      uint72 free_gift;\\r\\n  }\\r\\n\\r\\n  struct Token {\\r\\n      uint256 id;\\r\\n      Token_Data data;\\r\\n      address owner;\\r\\n  }\\r\\n\\r\\n  struct Assortment {\\r\\n      Assortment_Data assortment;\\r\\n      Item[] items;\\r\\n  }\\r\\n\\r\\n  mapping (uint256 => Token_Data) private token_data;\\r\\n  mapping (uint256 => Gacha_Data) private gacha_data;\\r\\n  mapping (uint256 => Item) private items;\\r\\n  mapping (uint256 => Assortment_Data) private assortments;\\r\\n  mapping (address => uint256) private coins;\\r\\n\\r\\n  Config private config;\\r\\n  address private minter;\\r\\n  uint256 private token_id;\\r\\n  string private base_uri;\\r\\n\\r\\n  constructor(string memory name, string memory symbol, string memory uri) ERC721(name, symbol) {\\r\\n      base_uri = uri;\\r\\n  }\\r\\n\\r\\n  function mint(uint256 id, address to, uint32 image, uint144 v) private {\\r\\n      require(image > 0);\\r\\n      _mint(to, id);\\r\\n      token_data[id]=Token_Data(\\r\\n          image,\\r\\n          v\\r\\n      );\\r\\n      emit New_Token(id, image, v);\\r\\n  }\\r\\n\\r\\n  function mint_by_owner(address to, uint32 image, uint144 v) external {\\r\\n      require(msg.sender == owner() || msg.sender == minter);\\r\\n      mint(token_id, to, image, v);\\r\\n      token_id += 1;\\r\\n  }\\r\\n\\r\\n  function set_minter(address minter_) external onlyOwner {\\r\\n      minter = minter_;\\r\\n  }\\r\\n\\r\\n  function sendEtherToOwner(uint256 amount) external onlyOwner {\\r\\n      require(address(this).balance >= amount);\\r\\n      payable(owner()).transfer(amount);\\r\\n  }\\r\\n\\r\\n  function _baseURI() internal view virtual override returns (string memory) {\\r\\n      return base_uri;\\r\\n  }\\r\\n\\r\\n  function set_base_uri(string calldata uri) external {\\r\\n      require(msg.sender == owner() || msg.sender == minter);\\r\\n      base_uri = uri;\\r\\n  }\\r\\n\\r\\n  function add_coins(address to, uint256 amount) external {\\r\\n      require(msg.sender == owner() || msg.sender == minter);\\r\\n      coins[to] += amount;\\r\\n  }\\r\\n\\r\\n  function gacha(uint256 index, uint256 random) public view returns(uint32, uint144) {\\r\\n      if (index > 127) {\\r\\n          index -= 128;\\r\\n      }\\r\\n      uint32 image;\\r\\n      uint144 r;\\r\\n      assembly {\\r\\n          let freemem_pointer := mload(0x40)\\r\\n          mstore(freemem_pointer, random)\\r\\n          mstore(add(freemem_pointer, 0x20), timestamp())\\r\\n          mstore(add(freemem_pointer, 0x40), difficulty())\\r\\n          r := keccak256(freemem_pointer, 0x60)\\r\\n\\r\\n          mstore(freemem_pointer, index) // mapping key\\r\\n          mstore(add(freemem_pointer, 0x20), gacha_data.slot) // mapping slot\\r\\n          mstore(freemem_pointer, keccak256(freemem_pointer, 0x40)) // gacha_data position\\r\\n          mstore(add(freemem_pointer, 0x20), add(mload(freemem_pointer), 0)) // rates position\\r\\n          mstore(add(freemem_pointer, 0x40), sload(keccak256(add(freemem_pointer, 0x20), 0x20))) // rates data\\r\\n\\r\\n          switch lt(div(mul(byte(30, r), 99), 255), byte(31, mload(add(freemem_pointer, 0x40))))\\r\\n          case 1 {\\r\\n              mstore(add(freemem_pointer, 0x60), add(mload(freemem_pointer), 3)) //　rare position\\r\\n          }\\r\\n          default {\\r\\n              switch lt(div(mul(byte(30, r), 99), 255), byte(30, mload(add(freemem_pointer, 0x40))))\\r\\n              case 1 {\\r\\n                  mstore(add(freemem_pointer, 0x60), add(mload(freemem_pointer), 2)) //　uncommon position\\r\\n              }\\r\\n              default {\\r\\n                  mstore(add(freemem_pointer, 0x60), add(mload(freemem_pointer), 1)) //　common position\\r\\n              }\\r\\n          }\\r\\n          mstore(add(freemem_pointer, 0x80), sload(mload(add(freemem_pointer, 0x60)))) // length\\r\\n          mstore(add(freemem_pointer, 0xA0),\\r\\n          div(mul(byte(29, r), sub(mload(add(freemem_pointer, 0x80)), 1)), 255)) // item index\\r\\n          mstore(add(freemem_pointer, 0xC0), sload(add(keccak256(add(freemem_pointer, 0x60), 0x20), div(mload(add(freemem_pointer, 0xA0)), 8))))\\r\\n          image :=  and(mload(sub(add(freemem_pointer, 0xC0), mul(0x4, mod(mload(add(freemem_pointer, 0xA0)), 8)))), 0xffffffff)\\r\\n      }\\r\\n      return (image, r);\\r\\n  }\\r\\n\\r\\n  function shop(uint256 index, uint32 img, uint256 v) payable whenNotPaused external {\\r\\n      require(config.items_length > index);\\r\\n\\r\\n      uint32 image = items[index].image;\\r\\n      uint144 value = items[index].value;\\r\\n      uint72 price = items[index].price;\\r\\n      bool bonus;\\r\\n\\r\\n      if (items[index].gacha_id > 127) {\\r\\n          bonus = true;\\r\\n      }\\r\\n\\r\\n      require(price > 0);\\r\\n      require(value == v);\\r\\n      require(image == img);\\r\\n\\r\\n      if (bonus) {\\r\\n          require(coins[msg.sender] >= price);\\r\\n      }\\r\\n      else {\\r\\n          require(price == msg.value);\\r\\n      }\\r\\n\\r\\n      mint(token_id, msg.sender, image, value);\\r\\n      token_id += 1;\\r\\n\\r\\n      if (bonus) {\\r\\n          coins[msg.sender] -= price;\\r\\n      }\\r\\n      else if (config.free_gift > 0) {\\r\\n          coins[msg.sender] += msg.value / config.free_gift;\\r\\n      }\\r\\n\\r\\n      update_item(index);\\r\\n  }\\r\\n\\r\\n  function shop(uint256 index, bytes32 hash_) payable whenNotPaused external {\\r\\n      require(config.assortments_length > index);\\r\\n\\r\\n      uint16 start = assortments[index].start;\\r\\n      uint8 length = assortments[index].length;\\r\\n      uint72 price = assortments[index].price;\\r\\n      bytes20 hash = assortments[index].hash;\\r\\n      bool del;\\r\\n      bool bonus;\\r\\n\\r\\n      if (items[start].gacha_id > 127) {\\r\\n          bonus = true;\\r\\n      }\\r\\n      require(price > 0);\\r\\n      require(length > 0);\\r\\n      require(hash == hash_);\\r\\n\\r\\n      if (bonus) {\\r\\n          require(coins[msg.sender] >= price);\\r\\n      }\\r\\n      else {\\r\\n          require(price == msg.value);\\r\\n      }\\r\\n\\r\\n      for (uint256 i = 0; i < length; i++) {\\r\\n          mint(token_id + i, msg.sender, items[i + start].image, items[i + start].value);\\r\\n          if (update_item(i + start) && !del) {\\r\\n              del = true;\\r\\n          }\\r\\n      }\\r\\n      token_id += length;\\r\\n      if (bonus) {\\r\\n          coins[msg.sender] -= price;\\r\\n      }\\r\\n      else if (config.free_gift > 0) {\\r\\n          coins[msg.sender] += msg.value / config.free_gift;\\r\\n      }\\r\\n\\r\\n      if (del) {\\r\\n          delete assortments[index];\\r\\n      }\\r\\n      else {\\r\\n          assortments[index].hash = assortment_hash(start, length);\\r\\n      }\\r\\n\\r\\n      emit Assortment_Changed(index);\\r\\n  }\\r\\n\\r\\n  function set_item(uint256 index, uint32 image, uint144 value, uint72 price, uint8 gacha_id) external onlyOwner {\\r\\n      items[index] = Item(image, value, price, gacha_id);\\r\\n      emit Item_Changed(index);\\r\\n  }\\r\\n\\r\\n  function set_items(uint256 index, Item[] memory items_) external onlyOwner {\\r\\n      for (uint256 i = 0; i < items_.length; i++) {\\r\\n          items[index + i] = items_[i];\\r\\n          emit Item_Changed(index + i);\\r\\n      }\\r\\n  }\\r\\n\\r\\n  function update_item(uint256 index) private returns(bool) {\\r\\n      uint32 image = items[index].image;\\r\\n      uint144 value = items[index].value;\\r\\n      uint72 price = items[index].price;\\r\\n      uint8 gacha_id = items[index].gacha_id;\\r\\n      bool del;\\r\\n      if (gacha_id == 127 || gacha_id == 255) {\\r\\n          bytes32 hash = keccak256(abi.encodePacked(\\r\\n                  value,\\r\\n                  block.timestamp,\\r\\n                  block.difficulty\\r\\n          ));\\r\\n          items[index].value = uint144(uint256(hash));\\r\\n      }\\r\\n      else if ((gacha_id > 127 && gacha_data[gacha_id - 128].released == true) || (gacha_id < 128 && gacha_data[gacha_id].released == true)) {\\r\\n          (image, value) = gacha(gacha_id, value);\\r\\n          items[index] = Item(image, value, price, gacha_id);\\r\\n      }\\r\\n      else {\\r\\n          delete items[index];\\r\\n          del = true;\\r\\n      }\\r\\n      if (index < config.items_length) {\\r\\n          emit Item_Changed(index);\\r\\n      }\\r\\n      return del;\\r\\n  }\\r\\n\\r\\n  function assortment_hash(uint256 start, uint256 length) private view returns(bytes20) {\\r\\n      bytes32 hash;\\r\\n      uint256 assortment_length = length + start;\\r\\n      for (uint256 i = start; i < assortment_length; i++) {\\r\\n          hash = keccak256(abi.encodePacked(\\r\\n              hash,\\r\\n              items[i].value\\r\\n          ));\\r\\n      }\\r\\n      return bytes20(hash);\\r\\n  }\\r\\n\\r\\n  function set_assortment(\\r\\n        uint256 index,\\r\\n        uint16 start,\\r\\n        uint8 length,\\r\\n        uint72 price,\\r\\n        Item[] calldata items_\\r\\n  )\\r\\n        external onlyOwner\\r\\n  {\\r\\n      for (uint256 i = 0; i < items_.length; i++) {\\r\\n          items[start + i] = items_[i];\\r\\n      }\\r\\n      assortments[index] = Assortment_Data(\\r\\n          start,\\r\\n          length,\\r\\n          price,\\r\\n          assortment_hash(start, length)\\r\\n      );\\r\\n      emit Assortment_Changed(index);\\r\\n  }\\r\\n\\r\\n  function set_config(\\r\\n      uint16 gacha_data_length,\\r\\n      uint16 items_length,\\r\\n      uint16 assortments_length,\\r\\n      uint72 free_gift\\r\\n  )\\r\\n      external onlyOwner\\r\\n  {\\r\\n      config = Config(\\r\\n          gacha_data_length,\\r\\n          items_length,\\r\\n          assortments_length,\\r\\n          free_gift\\r\\n      );\\r\\n      emit Config_Changed(\\r\\n          gacha_data_length,\\r\\n          items_length,\\r\\n          assortments_length,\\r\\n          free_gift\\r\\n      );\\r\\n  }\\r\\n\\r\\n  function bonus_gacha(uint256 index, uint256 quantity) whenNotPaused external {\\r\\n      require (gacha_data[index].released == true);\\r\\n      require (config.gacha_data_length > index);\\r\\n      require (gacha_data[index].price > 0);\\r\\n      require (quantity > 0);\\r\\n      require (coins[msg.sender] >= gacha_data[index].price * quantity);\\r\\n      uint32 image;\\r\\n      uint144 r;\\r\\n      uint256 id = token_id;\\r\\n\\r\\n      for (uint256 i = 0; i < quantity; i++) {\\r\\n          unchecked {\\r\\n              (image, r) = gacha(\\r\\n                  index,\\r\\n                  token_data[id + i - 1].value + token_data[id + i - 2].value\\r\\n              );\\r\\n          }\\r\\n          mint(id + i, msg.sender, image, r);\\r\\n      }\\r\\n\\r\\n      coins[msg.sender] -= gacha_data[index].price * quantity;\\r\\n      token_id += quantity;\\r\\n  }\\r\\n\\r\\n  function set_gacha_data(\\r\\n      uint256 index,\\r\\n      Gacha_Data calldata gacha_data_\\r\\n  )\\r\\n      external\\r\\n      onlyOwner\\r\\n  {\\r\\n      gacha_data[index] = gacha_data_;\\r\\n      emit Gacha_Changed(index);\\r\\n  }\\r\\n\\r\\n  function add_gacha_item(\\r\\n      uint256 index,\\r\\n      uint256 rarity,\\r\\n      uint32 image,\\r\\n      uint256 item_index\\r\\n  )\\r\\n      external\\r\\n      onlyOwner\\r\\n  {\\r\\n      if (rarity == 0) {\\r\\n          if (item_index < gacha_data[index].rare_items.length) {\\r\\n              gacha_data[index].rare_items[item_index] = image;\\r\\n          }\\r\\n          else {\\r\\n              gacha_data[index].rare_items.push(image);\\r\\n          }\\r\\n      }\\r\\n      else if (rarity == 1) {\\r\\n          if (item_index < gacha_data[index].uncommon_items.length) {\\r\\n              gacha_data[index].uncommon_items[item_index] = image;\\r\\n          }\\r\\n          else {\\r\\n              gacha_data[index].uncommon_items.push(image);\\r\\n          }\\r\\n      }\\r\\n      else {\\r\\n          if (item_index < gacha_data[index].common_items.length) {\\r\\n              gacha_data[index].common_items[item_index] = image;\\r\\n          }\\r\\n          else {\\r\\n              gacha_data[index].common_items.push(image);\\r\\n          }\\r\\n      }\\r\\n      emit Gacha_Changed(index);\\r\\n  }\\r\\n\\r\\n  function release(uint256 index) external onlyOwner {\\r\\n      gacha_data[index].released = true;\\r\\n      emit Gacha_Changed(index);\\r\\n  }\\r\\n\\r\\n  function unrelease(uint256 index) external onlyOwner {\\r\\n      gacha_data[index].released = false;\\r\\n      emit Gacha_Changed(index);\\r\\n  }\\r\\n\\r\\n  function pause() external onlyOwner {\\r\\n      _pause();\\r\\n  }\\r\\n\\r\\n  function unpause() external onlyOwner {\\r\\n      _unpause();\\r\\n  }\\r\\n\\r\\n  receive() external payable {}\\r\\n\\r\\n  fallback() external payable {}\\r\\n\\r\\n  function get_minter() external view returns(address) {\\r\\n      return minter;\\r\\n  }\\r\\n\\r\\n  function get_data_all()\\r\\n      external\\r\\n      view\\r\\n      returns(\\r\\n          Config memory,\\r\\n          Item[] memory,\\r\\n          Assortment[] memory,\\r\\n          Gacha_Data[] memory\\r\\n      )\\r\\n  {\\r\\n      return (\\r\\n          config,\\r\\n          get_items(),\\r\\n          get_assortments(),\\r\\n          get_gacha_data_all()\\r\\n      );\\r\\n  }\\r\\n\\r\\n  function get_item(uint256 index) external view returns(Item memory) {\\r\\n      return items[index];\\r\\n  }\\r\\n\\r\\n  function get_items() public view returns(Item[] memory) {\\r\\n      uint256 length = config.items_length;\\r\\n      Item[] memory items_ = new Item[](length);\\r\\n      for (uint256 i = 0; i < length; i++) {\\r\\n          items_[i] = items[i];\\r\\n      }\\r\\n      return (items_);\\r\\n  }\\r\\n\\r\\n  function get_assortment(uint256 index) public view returns(Assortment memory) {\\r\\n    uint16 start = assortments[index].start;\\r\\n    uint8 length = assortments[index].length;\\r\\n    Item[] memory items_ = new Item[](length);\\r\\n    for (uint256 i = 0; i < length; i++) {\\r\\n        items_[i] = items[i + start];\\r\\n    }\\r\\n      return Assortment(assortments[index], items_);\\r\\n  }\\r\\n\\r\\n  function get_assortments() public view returns(Assortment[] memory) {\\r\\n      uint256 length = config.assortments_length;\\r\\n      Assortment[] memory assortments_ = new Assortment[](length);\\r\\n      for (uint256 i = 0; i < length; i++) {\\r\\n          assortments_[i] = get_assortment(i);\\r\\n      }\\r\\n      return (assortments_);\\r\\n  }\\r\\n\\r\\n  function get_coins(address user) external view returns(uint256) {\\r\\n      return coins[user];\\r\\n  }\\r\\n\\r\\n  function get_tokens(uint256 start, uint256 end, address user, bool filter) external view returns(Token[] memory) {\\r\\n      uint256 length = token_id;\\r\\n      uint256 balance_count;\\r\\n      if (end > length) {\\r\\n          end = length;\\r\\n      }\\r\\n      if (filter == true) {\\r\\n          for (uint256 i = start; i < end; i++) {\\r\\n              if (ownerOf(i) == user) {\\r\\n                  balance_count += 1;\\r\\n              }\\r\\n          }\\r\\n      }\\r\\n      else {\\r\\n          balance_count = length;\\r\\n      }\\r\\n\\r\\n      Token[] memory tokens = new Token[](balance_count);\\r\\n      balance_count = 0;\\r\\n      for (uint256 i = start; i < end; i++) {\\r\\n          if (filter == false || (filter == true && ownerOf(i) == user)) {\\r\\n              tokens[balance_count] = Token(\\r\\n                i,\\r\\n                token_data[i],\\r\\n                ownerOf(i)\\r\\n              );\\r\\n              balance_count += 1;\\r\\n          }\\r\\n      }\\r\\n      return (tokens);\\r\\n  }\\r\\n\\r\\n  function get_config() external view returns(Config memory) {\\r\\n      return config;\\r\\n  }\\r\\n\\r\\n  function get_gacha_data(uint256 index) external view returns(Gacha_Data memory) {\\r\\n      return gacha_data[index];\\r\\n  }\\r\\n\\r\\n  function get_gacha_data_all() public view returns(Gacha_Data[] memory) {\\r\\n      uint256 length = config.gacha_data_length;\\r\\n      Gacha_Data[] memory gacha_data_ = new Gacha_Data[](length);\\r\\n      for (uint256 i = 0; i < length; i++) {\\r\\n          gacha_data_[i] = gacha_data[i];\\r\\n      }\\r\\n      return (gacha_data_);\\r\\n  }\\r\\n\\r\\n  function get_token_data(uint256 id) external view returns(Token_Data memory) {\\r\\n      return token_data[id];\\r\\n  }\\r\\n\\r\\n}\\r\\n\"\r\n    },\r\n    \"/C/Users/acerola/Desktop/dapp_game/node_modules/@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor () {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n}\\n\"\r\n    },\r\n    \"/C/Users/acerola/Desktop/dapp_game/node_modules/@openzeppelin/contracts/security/Pausable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract Pausable is Context {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    constructor () {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n}\\n\"\r\n    },\r\n    \"/C/Users/acerola/Desktop/dapp_game/node_modules/@openzeppelin/contracts/token/ERC721/ERC721.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC721.sol\\\";\\nimport \\\"./IERC721Receiver.sol\\\";\\nimport \\\"./extensions/IERC721Metadata.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"../../utils/Strings.sol\\\";\\nimport \\\"../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\\n * {ERC721Enumerable}.\\n */\\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\\n    using Address for address;\\n    using Strings for uint256;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    // Mapping from token ID to owner address\\n    mapping (uint256 => address) private _owners;\\n\\n    // Mapping owner address to token count\\n    mapping (address => uint256) private _balances;\\n\\n    // Mapping from token ID to approved address\\n    mapping (uint256 => address) private _tokenApprovals;\\n\\n    // Mapping from owner to operator approvals\\n    mapping (address => mapping (address => bool)) private _operatorApprovals;\\n\\n    /**\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\n     */\\n    constructor (string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return interfaceId == type(IERC721).interfaceId\\n            || interfaceId == type(IERC721Metadata).interfaceId\\n            || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) public view virtual override returns (uint256) {\\n        require(owner != address(0), \\\"ERC721: balance query for the zero address\\\");\\n        return _balances[owner];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\\n        address owner = _owners[tokenId];\\n        require(owner != address(0), \\\"ERC721: owner query for nonexistent token\\\");\\n        return owner;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        require(_exists(tokenId), \\\"ERC721Metadata: URI query for nonexistent token\\\");\\n\\n        string memory baseURI = _baseURI();\\n        return bytes(baseURI).length > 0\\n            ? string(abi.encodePacked(baseURI, tokenId.toString()))\\n            : '';\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. Empty by default, can be overriden\\n     * in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public virtual override {\\n        address owner = ERC721.ownerOf(tokenId);\\n        require(to != owner, \\\"ERC721: approval to current owner\\\");\\n\\n        require(_msgSender() == owner || isApprovedForAll(owner, _msgSender()),\\n            \\\"ERC721: approve caller is not owner nor approved for all\\\"\\n        );\\n\\n        _approve(to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\\n        require(_exists(tokenId), \\\"ERC721: approved query for nonexistent token\\\");\\n\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        require(operator != _msgSender(), \\\"ERC721: approve to caller\\\");\\n\\n        _operatorApprovals[_msgSender()][operator] = approved;\\n        emit ApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) public virtual override {\\n        //solhint-disable-next-line max-line-length\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: transfer caller is not owner nor approved\\\");\\n\\n        _transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) public virtual override {\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes memory _data) public virtual override {\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: transfer caller is not owner nor approved\\\");\\n        _safeTransfer(from, to, tokenId, _data);\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * `_data` is additional data, it has no specified format and it is sent in call to `to`.\\n     *\\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeTransfer(address from, address to, uint256 tokenId, bytes memory _data) internal virtual {\\n        _transfer(from, to, tokenId);\\n        require(_checkOnERC721Received(from, to, tokenId, _data), \\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n    }\\n\\n    /**\\n     * @dev Returns whether `tokenId` exists.\\n     *\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n     *\\n     * Tokens start existing when they are minted (`_mint`),\\n     * and stop existing when they are burned (`_burn`).\\n     */\\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\\n        return _owners[tokenId] != address(0);\\n    }\\n\\n    /**\\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\\n        require(_exists(tokenId), \\\"ERC721: operator query for nonexistent token\\\");\\n        address owner = ERC721.ownerOf(tokenId);\\n        return (spender == owner || getApproved(tokenId) == spender || isApprovedForAll(owner, spender));\\n    }\\n\\n    /**\\n     * @dev Safely mints `tokenId` and transfers it to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(address to, uint256 tokenId) internal virtual {\\n        _safeMint(to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeMint(address to, uint256 tokenId, bytes memory _data) internal virtual {\\n        _mint(to, tokenId);\\n        require(_checkOnERC721Received(address(0), to, tokenId, _data), \\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId` and transfers it to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - `to` cannot be the zero address.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(address to, uint256 tokenId) internal virtual {\\n        require(to != address(0), \\\"ERC721: mint to the zero address\\\");\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        _beforeTokenTransfer(address(0), to, tokenId);\\n\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(address(0), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal virtual {\\n        address owner = ERC721.ownerOf(tokenId);\\n\\n        _beforeTokenTransfer(owner, address(0), tokenId);\\n\\n        // Clear approvals\\n        _approve(address(0), tokenId);\\n\\n        _balances[owner] -= 1;\\n        delete _owners[tokenId];\\n\\n        emit Transfer(owner, address(0), tokenId);\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(address from, address to, uint256 tokenId) internal virtual {\\n        require(ERC721.ownerOf(tokenId) == from, \\\"ERC721: transfer of token that is not own\\\");\\n        require(to != address(0), \\\"ERC721: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, tokenId);\\n\\n        // Clear approvals from the previous owner\\n        _approve(address(0), tokenId);\\n\\n        _balances[from] -= 1;\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * Emits a {Approval} event.\\n     */\\n    function _approve(address to, uint256 tokenId) internal virtual {\\n        _tokenApprovals[tokenId] = to;\\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\\n     * The call is not executed if the target address is not a contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param _data bytes optional data to send along with the call\\n     * @return bool whether the call correctly returned the expected magic value\\n     */\\n    function _checkOnERC721Received(address from, address to, uint256 tokenId, bytes memory _data)\\n        private returns (bool)\\n    {\\n        if (to.isContract()) {\\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, _data) returns (bytes4 retval) {\\n                return retval == IERC721Receiver(to).onERC721Received.selector;\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    revert(\\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n                } else {\\n                    // solhint-disable-next-line no-inline-assembly\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        } else {\\n            return true;\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(address from, address to, uint256 tokenId) internal virtual { }\\n}\\n\"\r\n    },\r\n    \"/C/Users/acerola/Desktop/dapp_game/node_modules/@openzeppelin/contracts/token/ERC721/IERC721.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    /**\\n      * @dev Safely transfers `tokenId` token from `from` to `to`.\\n      *\\n      * Requirements:\\n      *\\n      * - `from` cannot be the zero address.\\n      * - `to` cannot be the zero address.\\n      * - `tokenId` token must exist and be owned by `from`.\\n      * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n      * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n      *\\n      * Emits a {Transfer} event.\\n      */\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\\n}\\n\"\r\n    },\r\n    \"/C/Users/acerola/Desktop/dapp_game/node_modules/@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\\n     */\\n    function onERC721Received(address operator, address from, uint256 tokenId, bytes calldata data) external returns (bytes4);\\n}\\n\"\r\n    },\r\n    \"/C/Users/acerola/Desktop/dapp_game/node_modules/@openzeppelin/contracts/token/ERC721/extensions/ERC721Pausable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC721.sol\\\";\\nimport \\\"../../../security/Pausable.sol\\\";\\n\\n/**\\n * @dev ERC721 token with pausable token transfers, minting and burning.\\n *\\n * Useful for scenarios such as preventing trades until the end of an evaluation\\n * period, or having an emergency switch for freezing all token transfers in the\\n * event of a large bug.\\n */\\nabstract contract ERC721Pausable is ERC721, Pausable {\\n    /**\\n     * @dev See {ERC721-_beforeTokenTransfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - the contract must not be paused.\\n     */\\n    function _beforeTokenTransfer(address from, address to, uint256 tokenId) internal virtual override {\\n        super._beforeTokenTransfer(from, to, tokenId);\\n\\n        require(!paused(), \\\"ERC721Pausable: token transfer while paused\\\");\\n    }\\n}\\n\"\r\n    },\r\n    \"/C/Users/acerola/Desktop/dapp_game/node_modules/@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Enumerable is IERC721 {\\n\\n    /**\\n     * @dev Returns the total amount of tokens stored by the contract.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns a token ID owned by `owner` at a given `index` of its token list.\\n     * Use along with {balanceOf} to enumerate all of ``owner``'s tokens.\\n     */\\n    function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256 tokenId);\\n\\n    /**\\n     * @dev Returns a token ID at a given `index` of all the tokens stored by the contract.\\n     * Use along with {totalSupply} to enumerate all tokens.\\n     */\\n    function tokenByIndex(uint256 index) external view returns (uint256);\\n}\\n\"\r\n    },\r\n    \"/C/Users/acerola/Desktop/dapp_game/node_modules/@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\"\r\n    },\r\n    \"/C/Users/acerola/Desktop/dapp_game/node_modules/@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"/C/Users/acerola/Desktop/dapp_game/node_modules/@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"/C/Users/acerola/Desktop/dapp_game/node_modules/@openzeppelin/contracts/utils/Strings.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant alphabet = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = alphabet[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n}\\n\"\r\n    },\r\n    \"/C/Users/acerola/Desktop/dapp_game/node_modules/@openzeppelin/contracts/utils/introspection/ERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\"\r\n    },\r\n    \"/C/Users/acerola/Desktop/dapp_game/node_modules/@openzeppelin/contracts/utils/introspection/IERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"remappings\": [],\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 2000\r\n    },\r\n    \"evmVersion\": \"istanbul\",\r\n    \"libraries\": {},\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}","ABI":"[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"uri\",\"type\":\"string\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"Assortment_Changed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"gacha_data_length\",\"type\":\"uint16\"},{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"items_length\",\"type\":\"uint16\"},{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"assortments_length\",\"type\":\"uint16\"},{\"indexed\":false,\"internalType\":\"uint72\",\"name\":\"free_gift\",\"type\":\"uint72\"}],\"name\":\"Config_Changed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"Gacha_Changed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"Item_Changed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"image\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"uint144\",\"name\":\"value\",\"type\":\"uint144\"}],\"name\":\"New_Token\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"add_coins\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rarity\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"image\",\"type\":\"uint32\"},{\"internalType\":\"uint256\",\"name\":\"item_index\",\"type\":\"uint256\"}],\"name\":\"add_gacha_item\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"quantity\",\"type\":\"uint256\"}],\"name\":\"bonus_gacha\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"random\",\"type\":\"uint256\"}],\"name\":\"gacha\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"},{\"internalType\":\"uint144\",\"name\":\"\",\"type\":\"uint144\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"get_assortment\",\"outputs\":[{\"components\":[{\"components\":[{\"internalType\":\"uint16\",\"name\":\"start\",\"type\":\"uint16\"},{\"internalType\":\"uint8\",\"name\":\"length\",\"type\":\"uint8\"},{\"internalType\":\"uint72\",\"name\":\"price\",\"type\":\"uint72\"},{\"internalType\":\"bytes20\",\"name\":\"hash\",\"type\":\"bytes20\"}],\"internalType\":\"struct Gachadass.Assortment_Data\",\"name\":\"assortment\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint32\",\"name\":\"image\",\"type\":\"uint32\"},{\"internalType\":\"uint144\",\"name\":\"value\",\"type\":\"uint144\"},{\"internalType\":\"uint72\",\"name\":\"price\",\"type\":\"uint72\"},{\"internalType\":\"uint8\",\"name\":\"gacha_id\",\"type\":\"uint8\"}],\"internalType\":\"struct Gachadass.Item[]\",\"name\":\"items\",\"type\":\"tuple[]\"}],\"internalType\":\"struct Gachadass.Assortment\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"get_assortments\",\"outputs\":[{\"components\":[{\"components\":[{\"internalType\":\"uint16\",\"name\":\"start\",\"type\":\"uint16\"},{\"internalType\":\"uint8\",\"name\":\"length\",\"type\":\"uint8\"},{\"internalType\":\"uint72\",\"name\":\"price\",\"type\":\"uint72\"},{\"internalType\":\"bytes20\",\"name\":\"hash\",\"type\":\"bytes20\"}],\"internalType\":\"struct Gachadass.Assortment_Data\",\"name\":\"assortment\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint32\",\"name\":\"image\",\"type\":\"uint32\"},{\"internalType\":\"uint144\",\"name\":\"value\",\"type\":\"uint144\"},{\"internalType\":\"uint72\",\"name\":\"price\",\"type\":\"uint72\"},{\"internalType\":\"uint8\",\"name\":\"gacha_id\",\"type\":\"uint8\"}],\"internalType\":\"struct Gachadass.Item[]\",\"name\":\"items\",\"type\":\"tuple[]\"}],\"internalType\":\"struct Gachadass.Assortment[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"get_coins\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"get_config\",\"outputs\":[{\"components\":[{\"internalType\":\"uint16\",\"name\":\"gacha_data_length\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"items_length\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"assortments_length\",\"type\":\"uint16\"},{\"internalType\":\"uint72\",\"name\":\"free_gift\",\"type\":\"uint72\"}],\"internalType\":\"struct Gachadass.Config\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"get_data_all\",\"outputs\":[{\"components\":[{\"internalType\":\"uint16\",\"name\":\"gacha_data_length\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"items_length\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"assortments_length\",\"type\":\"uint16\"},{\"internalType\":\"uint72\",\"name\":\"free_gift\",\"type\":\"uint72\"}],\"internalType\":\"struct Gachadass.Config\",\"name\":\"\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint32\",\"name\":\"image\",\"type\":\"uint32\"},{\"internalType\":\"uint144\",\"name\":\"value\",\"type\":\"uint144\"},{\"internalType\":\"uint72\",\"name\":\"price\",\"type\":\"uint72\"},{\"internalType\":\"uint8\",\"name\":\"gacha_id\",\"type\":\"uint8\"}],\"internalType\":\"struct Gachadass.Item[]\",\"name\":\"\",\"type\":\"tuple[]\"},{\"components\":[{\"components\":[{\"internalType\":\"uint16\",\"name\":\"start\",\"type\":\"uint16\"},{\"internalType\":\"uint8\",\"name\":\"length\",\"type\":\"uint8\"},{\"internalType\":\"uint72\",\"name\":\"price\",\"type\":\"uint72\"},{\"internalType\":\"bytes20\",\"name\":\"hash\",\"type\":\"bytes20\"}],\"internalType\":\"struct Gachadass.Assortment_Data\",\"name\":\"assortment\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint32\",\"name\":\"image\",\"type\":\"uint32\"},{\"internalType\":\"uint144\",\"name\":\"value\",\"type\":\"uint144\"},{\"internalType\":\"uint72\",\"name\":\"price\",\"type\":\"uint72\"},{\"internalType\":\"uint8\",\"name\":\"gacha_id\",\"type\":\"uint8\"}],\"internalType\":\"struct Gachadass.Item[]\",\"name\":\"items\",\"type\":\"tuple[]\"}],\"internalType\":\"struct Gachadass.Assortment[]\",\"name\":\"\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"uint8[]\",\"name\":\"rates\",\"type\":\"uint8[]\"},{\"internalType\":\"uint32[]\",\"name\":\"common_items\",\"type\":\"uint32[]\"},{\"internalType\":\"uint32[]\",\"name\":\"uncommon_items\",\"type\":\"uint32[]\"},{\"internalType\":\"uint32[]\",\"name\":\"rare_items\",\"type\":\"uint32[]\"},{\"internalType\":\"uint72\",\"name\":\"price\",\"type\":\"uint72\"},{\"internalType\":\"bool\",\"name\":\"released\",\"type\":\"bool\"}],\"internalType\":\"struct Gachadass.Gacha_Data[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"get_gacha_data\",\"outputs\":[{\"components\":[{\"internalType\":\"uint8[]\",\"name\":\"rates\",\"type\":\"uint8[]\"},{\"internalType\":\"uint32[]\",\"name\":\"common_items\",\"type\":\"uint32[]\"},{\"internalType\":\"uint32[]\",\"name\":\"uncommon_items\",\"type\":\"uint32[]\"},{\"internalType\":\"uint32[]\",\"name\":\"rare_items\",\"type\":\"uint32[]\"},{\"internalType\":\"uint72\",\"name\":\"price\",\"type\":\"uint72\"},{\"internalType\":\"bool\",\"name\":\"released\",\"type\":\"bool\"}],\"internalType\":\"struct Gachadass.Gacha_Data\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"get_gacha_data_all\",\"outputs\":[{\"components\":[{\"internalType\":\"uint8[]\",\"name\":\"rates\",\"type\":\"uint8[]\"},{\"internalType\":\"uint32[]\",\"name\":\"common_items\",\"type\":\"uint32[]\"},{\"internalType\":\"uint32[]\",\"name\":\"uncommon_items\",\"type\":\"uint32[]\"},{\"internalType\":\"uint32[]\",\"name\":\"rare_items\",\"type\":\"uint32[]\"},{\"internalType\":\"uint72\",\"name\":\"price\",\"type\":\"uint72\"},{\"internalType\":\"bool\",\"name\":\"released\",\"type\":\"bool\"}],\"internalType\":\"struct Gachadass.Gacha_Data[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"get_item\",\"outputs\":[{\"components\":[{\"internalType\":\"uint32\",\"name\":\"image\",\"type\":\"uint32\"},{\"internalType\":\"uint144\",\"name\":\"value\",\"type\":\"uint144\"},{\"internalType\":\"uint72\",\"name\":\"price\",\"type\":\"uint72\"},{\"internalType\":\"uint8\",\"name\":\"gacha_id\",\"type\":\"uint8\"}],\"internalType\":\"struct Gachadass.Item\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"get_items\",\"outputs\":[{\"components\":[{\"internalType\":\"uint32\",\"name\":\"image\",\"type\":\"uint32\"},{\"internalType\":\"uint144\",\"name\":\"value\",\"type\":\"uint144\"},{\"internalType\":\"uint72\",\"name\":\"price\",\"type\":\"uint72\"},{\"internalType\":\"uint8\",\"name\":\"gacha_id\",\"type\":\"uint8\"}],\"internalType\":\"struct Gachadass.Item[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"get_minter\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"get_token_data\",\"outputs\":[{\"components\":[{\"internalType\":\"uint32\",\"name\":\"image\",\"type\":\"uint32\"},{\"internalType\":\"uint144\",\"name\":\"value\",\"type\":\"uint144\"}],\"internalType\":\"struct Gachadass.Token_Data\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"start\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"end\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"filter\",\"type\":\"bool\"}],\"name\":\"get_tokens\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint32\",\"name\":\"image\",\"type\":\"uint32\"},{\"internalType\":\"uint144\",\"name\":\"value\",\"type\":\"uint144\"}],\"internalType\":\"struct Gachadass.Token_Data\",\"name\":\"data\",\"type\":\"tuple\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"internalType\":\"struct Gachadass.Token[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"image\",\"type\":\"uint32\"},{\"internalType\":\"uint144\",\"name\":\"v\",\"type\":\"uint144\"}],\"name\":\"mint_by_owner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"release\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"sendEtherToOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"internalType\":\"uint16\",\"name\":\"start\",\"type\":\"uint16\"},{\"internalType\":\"uint8\",\"name\":\"length\",\"type\":\"uint8\"},{\"internalType\":\"uint72\",\"name\":\"price\",\"type\":\"uint72\"},{\"components\":[{\"internalType\":\"uint32\",\"name\":\"image\",\"type\":\"uint32\"},{\"internalType\":\"uint144\",\"name\":\"value\",\"type\":\"uint144\"},{\"internalType\":\"uint72\",\"name\":\"price\",\"type\":\"uint72\"},{\"internalType\":\"uint8\",\"name\":\"gacha_id\",\"type\":\"uint8\"}],\"internalType\":\"struct Gachadass.Item[]\",\"name\":\"items_\",\"type\":\"tuple[]\"}],\"name\":\"set_assortment\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"uri\",\"type\":\"string\"}],\"name\":\"set_base_uri\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"gacha_data_length\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"items_length\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"assortments_length\",\"type\":\"uint16\"},{\"internalType\":\"uint72\",\"name\":\"free_gift\",\"type\":\"uint72\"}],\"name\":\"set_config\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint8[]\",\"name\":\"rates\",\"type\":\"uint8[]\"},{\"internalType\":\"uint32[]\",\"name\":\"common_items\",\"type\":\"uint32[]\"},{\"internalType\":\"uint32[]\",\"name\":\"uncommon_items\",\"type\":\"uint32[]\"},{\"internalType\":\"uint32[]\",\"name\":\"rare_items\",\"type\":\"uint32[]\"},{\"internalType\":\"uint72\",\"name\":\"price\",\"type\":\"uint72\"},{\"internalType\":\"bool\",\"name\":\"released\",\"type\":\"bool\"}],\"internalType\":\"struct Gachadass.Gacha_Data\",\"name\":\"gacha_data_\",\"type\":\"tuple\"}],\"name\":\"set_gacha_data\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"image\",\"type\":\"uint32\"},{\"internalType\":\"uint144\",\"name\":\"value\",\"type\":\"uint144\"},{\"internalType\":\"uint72\",\"name\":\"price\",\"type\":\"uint72\"},{\"internalType\":\"uint8\",\"name\":\"gacha_id\",\"type\":\"uint8\"}],\"name\":\"set_item\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint32\",\"name\":\"image\",\"type\":\"uint32\"},{\"internalType\":\"uint144\",\"name\":\"value\",\"type\":\"uint144\"},{\"internalType\":\"uint72\",\"name\":\"price\",\"type\":\"uint72\"},{\"internalType\":\"uint8\",\"name\":\"gacha_id\",\"type\":\"uint8\"}],\"internalType\":\"struct Gachadass.Item[]\",\"name\":\"items_\",\"type\":\"tuple[]\"}],\"name\":\"set_items\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"minter_\",\"type\":\"address\"}],\"name\":\"set_minter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"hash_\",\"type\":\"bytes32\"}],\"name\":\"shop\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"img\",\"type\":\"uint32\"},{\"internalType\":\"uint256\",\"name\":\"v\",\"type\":\"uint256\"}],\"name\":\"shop\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"unrelease\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]","ContractName":"Gachadass","CompilerVersion":"v0.8.4+commit.c7e474f2","OptimizationUsed":"1","Runs":"2000","ConstructorArguments":"000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000000e00000000000000000000000000000000000000000000000000000000000000009476163686164617373000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000054741434841000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002568747470733a2f2f7777772e6761636861646173732e636f6d2f6d657461646174612f322f000000000000000000000000000000000000000000000000000000","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}