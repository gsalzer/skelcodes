{"status":"1","message":"OK","result":[{"SourceCode":"// Sources flattened with hardhat v2.4.1 https://hardhat.org\r\n\r\n// File @openzeppelin/contracts/utils/Context.sol@v4.1.0\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/*\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n\r\n// File @openzeppelin/contracts/access/Ownable.sol@v4.1.0\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor () {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\n\r\n// File @openzeppelin/contracts/token/ERC20/IERC20.sol@v4.1.0\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n\r\n// File @openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol@v4.1.0\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Interface for the optional metadata functions from the ERC20 standard.\r\n *\r\n * _Available since v4.1._\r\n */\r\ninterface IERC20Metadata is IERC20 {\r\n    /**\r\n     * @dev Returns the name of the token.\r\n     */\r\n    function name() external view returns (string memory);\r\n\r\n    /**\r\n     * @dev Returns the symbol of the token.\r\n     */\r\n    function symbol() external view returns (string memory);\r\n\r\n    /**\r\n     * @dev Returns the decimals places of the token.\r\n     */\r\n    function decimals() external view returns (uint8);\r\n}\r\n\r\n\r\n// File @api3-dao/api3-voting/interfaces/v0.8.4/IApi3Voting.sol@v1.0.0\r\n\r\npragma solidity 0.8.4;\r\n\r\ninterface IApi3Voting {\r\n     enum VoterState { Absent, Yea, Nay }\r\n\r\n    function votesLength()\r\n        external\r\n        view\r\n        returns (uint256);\r\n\r\n    function getVote(uint256 _voteId)\r\n        external\r\n        view\r\n        returns (\r\n            bool open,\r\n            bool executed,\r\n            uint64 startDate,\r\n            uint64 snapshotBlock,\r\n            uint64 supportRequired,\r\n            uint64 minAcceptQuorum,\r\n            uint256 yea,\r\n            uint256 nay,\r\n            uint256 votingPower,\r\n            bytes memory script\r\n        );\r\n\r\n    function getVoterState(uint256 _voteId, address _voter)\r\n        external\r\n        view\r\n        returns (VoterState);\r\n\r\n    function minAcceptQuorumPct()\r\n        external\r\n        view\r\n        returns (uint64);\r\n\r\n    function voteTime()\r\n        external\r\n        view\r\n        returns (uint64);\r\n}\r\n\r\n\r\n// File contracts/interfaces/IApi3PoolExtended.sol\r\n\r\npragma solidity 0.8.4;\r\n\r\ninterface IApi3PoolExtended {\r\n    function api3Token()\r\n        external\r\n        view\r\n        returns (address);\r\n\r\n    function agentAppPrimary()\r\n        external\r\n        view\r\n        returns (address);\r\n\r\n    function agentAppSecondary()\r\n        external\r\n        view\r\n        returns (address);\r\n\r\n    function votingAppPrimary()\r\n        external\r\n        view\r\n        returns (address);\r\n\r\n    function votingAppSecondary()\r\n        external\r\n        view\r\n        returns (address);\r\n\r\n    function apr()\r\n        external\r\n        view\r\n        returns (uint256);\r\n\r\n    function totalStake()\r\n        external\r\n        view\r\n        returns (uint256);\r\n\r\n    function stakeTarget()\r\n        external\r\n        view\r\n        returns (uint256);\r\n\r\n    function proposalVotingPowerThreshold()\r\n        external\r\n        view\r\n        returns (uint256);\r\n\r\n    function totalShares()\r\n        external\r\n        view\r\n        returns (uint256);\r\n\r\n    function userStake(address userAddress)\r\n        external\r\n        view\r\n        returns (uint256);\r\n\r\n    function getUser(address userAddress)\r\n        external\r\n        view\r\n        returns (\r\n            uint256 unstaked,\r\n            uint256 vesting,\r\n            uint256 unstakeShares,\r\n            uint256 unstakeAmount,\r\n            uint256 unstakeScheduledFor,\r\n            uint256 lastDelegationUpdateTimestamp,\r\n            uint256 lastProposalTimestamp\r\n            );\r\n\r\n    function userLocked(address userAddress)\r\n        external\r\n        view\r\n        returns (uint256);\r\n\r\n    function userVotingPowerAt(\r\n        address userAddress,\r\n        uint256 _block\r\n        )\r\n        external\r\n        view\r\n        returns (uint256);\r\n\r\n    function userVotingPower(address userAddress)\r\n        external\r\n        view\r\n        returns (uint256);\r\n\r\n    function delegatedToUser(address userAddress)\r\n        external\r\n        view\r\n        returns (uint256);\r\n\r\n    function userDelegateAt(\r\n        address userAddress,\r\n        uint256 _block\r\n        )\r\n        external\r\n        view\r\n        returns (address);\r\n\r\n    function userDelegate(address userAddress)\r\n        external\r\n        view\r\n        returns (address);\r\n}\r\n\r\n\r\n// File contracts/Convenience.sol\r\n\r\npragma solidity 0.8.4;\r\n\r\n\r\n\r\n\r\n/// @title Convenience contract used to make batch view calls to DAO contracts\r\ncontract Convenience is Ownable  {\r\n    enum VotingAppType { Primary, Secondary }\r\n\r\n    /// @notice Governance token of the DAO\r\n    IERC20Metadata public immutable api3Token;\r\n    /// @notice Staking pool of the DAO\r\n    IApi3PoolExtended public immutable api3Pool;\r\n    /// @notice List of ERC20 addresses that will be displayed in the DAO\r\n    /// treasury. The ETH balance will also be displayed by default.\r\n    /// @dev These are set by the owner of this contract\r\n    address[] public erc20Addresses;\r\n    /// @notice Links to the discussion venues for each vote\r\n    /// @dev These are set by the owner of this contract, for example by\r\n    /// running a bot that automatically creates a forum thread with the vote\r\n    /// type and ID and writes its URL to the chain\r\n    mapping(VotingAppType => mapping(uint256 => string)) public votingAppTypeToVoteIdToDiscussionUrl;\r\n\r\n    event SetErc20Addresses(address[] erc20Addresses);\r\n\r\n    event SetDiscussionUrl(\r\n        VotingAppType indexed votingAppType,\r\n        uint256 indexed voteId,\r\n        string discussionUrl\r\n        );\r\n\r\n    /// @param api3PoolAddress Staking pool address of the DAO \r\n    constructor(address api3PoolAddress)\r\n    {\r\n        api3Pool = IApi3PoolExtended(api3PoolAddress);\r\n        api3Token = IERC20Metadata(address(IApi3PoolExtended(api3PoolAddress).api3Token()));\r\n    }\r\n\r\n    /// @notice Called by the owner to update the addresses of the contract\r\n    /// addresses of the ERC20 tokens that will be displayed in the treasury\r\n    /// @dev The owner privileges here do not pose a serious security risk, the\r\n    /// worst that can happen is that the treasury display will malfunction\r\n    /// @param _erc20Addresses ERC20 addresses\r\n    function setErc20Addresses(address[] calldata _erc20Addresses)\r\n        external\r\n        onlyOwner()\r\n    {\r\n        erc20Addresses = _erc20Addresses;\r\n        emit SetErc20Addresses(_erc20Addresses);\r\n    }\r\n\r\n    /// @notice Called by the owner to update the discussion URL of a specific\r\n    /// vote to be displayed on the DAO dashboard\r\n    /// @dev The owner privileges here do not pose a serious security risk, the\r\n    /// worst that can happen is that the discussion URL will malfunction\r\n    /// @param votingAppType Enumerated voting app type (primary or secondary)\r\n    /// @param voteId Vote ID for which discussion URL will be updated\r\n    /// @param discussionUrl Discussion URL\r\n    function setDiscussionUrl(\r\n        VotingAppType votingAppType,\r\n        uint256 voteId,\r\n        string calldata discussionUrl\r\n        )\r\n        external\r\n        onlyOwner()\r\n    {\r\n        votingAppTypeToVoteIdToDiscussionUrl[votingAppType][voteId] = discussionUrl;\r\n        emit SetDiscussionUrl(votingAppType, voteId, discussionUrl);\r\n    }\r\n\r\n    /// @notice Used by the DAO dashboard client to retrieve user staking data\r\n    /// @param userAddress User address\r\n    /// @return apr Staking reward APR\r\n    /// @return api3Supply API3 total supply\r\n    /// @return totalStake Total amount staked at the pool\r\n    /// @return totalShares Total pool shares (also represents total voting\r\n    /// power)\r\n    /// @return stakeTarget Pool stake target in percentages\r\n    /// @return userApi3Balance User API3 balance\r\n    /// @return userStaked Amount of staked tokens the user has at the pool\r\n    /// @return userUnstaked Amount of non-staked tokens the user has at the\r\n    /// pool\r\n    /// @return userVesting Amount of tokens not yet vested to the user (it is\r\n    /// not withdrawable, similar to `userLocked`)\r\n    /// @return userUnstakeAmount Amount of tokens the user scheduled to\r\n    /// unstake\r\n    /// @return userUnstakeShares Amount of shares the user gave up to schedule\r\n    /// the unstaking\r\n    /// @return userUnstakeScheduledFor Time when the scheduled unstake will\r\n    /// mature\r\n    /// @return userLocked Amount of rewards the user has received that are not\r\n    /// withdrawable yet\r\n    function getUserStakingData(address userAddress)\r\n        external\r\n        view\r\n        returns (\r\n            uint256 apr,\r\n            uint256 api3Supply,\r\n            uint256 totalStake,\r\n            uint256 totalShares,\r\n            uint256 stakeTarget,\r\n            uint256 userApi3Balance,\r\n            uint256 userStaked,\r\n            uint256 userUnstaked,\r\n            uint256 userVesting,\r\n            uint256 userUnstakeAmount,\r\n            uint256 userUnstakeShares,\r\n            uint256 userUnstakeScheduledFor,\r\n            uint256 userLocked\r\n            )\r\n    {\r\n        apr = api3Pool.apr();\r\n        api3Supply = api3Token.totalSupply();\r\n        totalStake = api3Pool.totalStake();\r\n        totalShares = api3Pool.totalShares();\r\n        stakeTarget = api3Pool.stakeTarget();\r\n        userApi3Balance = api3Token.balanceOf(userAddress);\r\n        userStaked = api3Pool.userStake(userAddress);\r\n        (\r\n            userUnstaked,\r\n            userVesting,\r\n            userUnstakeAmount,\r\n            userUnstakeShares,\r\n            userUnstakeScheduledFor,\r\n            , // lastDelegationUpdateTimestamp\r\n            // lastProposalTimestamp\r\n            ) = api3Pool.getUser(userAddress);\r\n        userLocked = api3Pool.userLocked(userAddress);\r\n    }\r\n\r\n    /// @notice Used by the DAO dashboard client to retrieve the treasury and\r\n    /// user delegation data\r\n    /// @dev In addition to the ERC20 tokens, it returns the ETH balances of\r\n    /// the treasuries\r\n    /// @param userAddress User address\r\n    /// @return names ERC20 (+ Ethereum) names\r\n    /// @return symbols ERC20 (+ Ethereum) symbols\r\n    /// @return decimals ERC20 (+ Ethereum) decimals\r\n    /// @return balancesOfPrimaryAgent ERC20 (+ Ethereum) balances of the\r\n    /// primary agent\r\n    /// @return balancesOfSecondaryAgent ERC20 (+ Ethereum) balances of the\r\n    /// secondary agent\r\n    /// @return proposalVotingPowerThreshold Proposal voting power threshold in\r\n    /// percentages\r\n    /// @return userVotingPower Voting power of the user, including delegations\r\n    /// @return delegatedToUser Voting power delegated to user\r\n    /// @return delegate Address that the user has delegated to\r\n    /// @return lastDelegationUpdateTimestamp When the user has last updated\r\n    /// their delegation\r\n    /// @return lastProposalTimestamp When the user has last made a proposal\r\n    function getTreasuryAndUserDelegationData(address userAddress)\r\n        external\r\n        view\r\n        returns (\r\n            string[] memory names,\r\n            string[] memory symbols,\r\n            uint8[] memory decimals,\r\n            uint256[] memory balancesOfPrimaryAgent,\r\n            uint256[] memory balancesOfSecondaryAgent,\r\n            uint256 proposalVotingPowerThreshold,\r\n            uint256 userVotingPower,\r\n            uint256 delegatedToUser,\r\n            address delegate,\r\n            uint256 lastDelegationUpdateTimestamp,\r\n            uint256 lastProposalTimestamp\r\n            )\r\n    {\r\n        names = new string[](erc20Addresses.length + 1);\r\n        symbols = new string[](erc20Addresses.length + 1);\r\n        decimals = new uint8[](erc20Addresses.length + 1);\r\n        balancesOfPrimaryAgent = new uint256[](erc20Addresses.length + 1);\r\n        balancesOfSecondaryAgent = new uint256[](erc20Addresses.length + 1);\r\n        for (uint256 i = 0; i < erc20Addresses.length; i++)\r\n        {\r\n            IERC20Metadata erc20 = IERC20Metadata(erc20Addresses[i]);\r\n            names[i] = erc20.name();\r\n            symbols[i] = erc20.symbol();\r\n            decimals[i] = erc20.decimals();\r\n            balancesOfPrimaryAgent[i] = erc20.balanceOf(api3Pool.agentAppPrimary());\r\n            balancesOfSecondaryAgent[i] = erc20.balanceOf(api3Pool.agentAppSecondary());\r\n        }\r\n        names[erc20Addresses.length] = \"Ethereum\";\r\n        symbols[erc20Addresses.length] = \"ETH\";\r\n        decimals[erc20Addresses.length] = 18;\r\n        balancesOfPrimaryAgent[erc20Addresses.length] = address(api3Pool.agentAppPrimary()).balance;\r\n        balancesOfSecondaryAgent[erc20Addresses.length] = address(api3Pool.agentAppSecondary()).balance;\r\n        proposalVotingPowerThreshold = api3Pool.proposalVotingPowerThreshold();\r\n        userVotingPower = api3Pool.userVotingPower(userAddress);\r\n        delegatedToUser = api3Pool.delegatedToUser(userAddress);\r\n        delegate = api3Pool.userDelegate(userAddress);   \r\n        (\r\n            , // unstaked\r\n            , // vesting\r\n            , // unstakeAmount\r\n            , // unstakeShares\r\n            , // unstakeScheduledFor\r\n            lastDelegationUpdateTimestamp,\r\n            lastProposalTimestamp\r\n            ) = api3Pool.getUser(userAddress);\r\n    }\r\n\r\n    /// @notice Used by the DAO dashboard client to retrieve static vote data\r\n    /// @dev `discussionUrl` is not actually static but can be treated as such\r\n    /// @param votingAppType Enumerated voting app type (primary or secondary)\r\n    /// @param userAddress User address\r\n    /// @param voteIds Array of vote IDs for which data will be retrieved\r\n    /// @return startDate Start date of the vote\r\n    /// @return supportRequired Support required for the vote to pass in\r\n    /// percentages\r\n    /// @return minAcceptQuorum Minimum acceptance quorum required for the vote\r\n    /// to pass in percentages\r\n    /// @return votingPower Total voting power at the time the vote was created\r\n    /// @return script The EVMScript that will be run if the vote passes\r\n    /// @return userVotingPowerAt User's voting power at the time the vote was\r\n    /// created\r\n    /// @return discussionUrl Discussion URL set for the vote by the contract\r\n    /// owner\r\n    function getStaticVoteData(\r\n        VotingAppType votingAppType,\r\n        address userAddress,\r\n        uint256[] calldata voteIds\r\n        )\r\n        external\r\n        view\r\n        returns (\r\n            uint64[] memory startDate,\r\n            uint64[] memory supportRequired,\r\n            uint64[] memory minAcceptQuorum,\r\n            uint256[] memory votingPower,\r\n            bytes[] memory script,\r\n            uint256[] memory userVotingPowerAt,\r\n            string[] memory discussionUrl\r\n            )\r\n    {\r\n        IApi3Voting api3Voting;\r\n        if (votingAppType == VotingAppType.Primary)\r\n        {\r\n            api3Voting = IApi3Voting(api3Pool.votingAppPrimary());\r\n        }\r\n        else\r\n        {\r\n            api3Voting = IApi3Voting(api3Pool.votingAppSecondary());\r\n        }\r\n        startDate = new uint64[](voteIds.length);\r\n        supportRequired = new uint64[](voteIds.length);\r\n        minAcceptQuorum = new uint64[](voteIds.length);\r\n        votingPower = new uint256[](voteIds.length);\r\n        script = new bytes[](voteIds.length);\r\n        userVotingPowerAt = new uint256[](voteIds.length);\r\n        discussionUrl = new string[](voteIds.length);\r\n        for (uint256 i = 0; i < voteIds.length; i++)\r\n        {\r\n            uint64 snapshotBlock;\r\n            (\r\n                , // open\r\n                , // executed\r\n                startDate[i],\r\n                snapshotBlock,\r\n                supportRequired[i],\r\n                minAcceptQuorum[i],\r\n                , // yea\r\n                , // nay\r\n                votingPower[i],\r\n                script[i]\r\n                ) = api3Voting.getVote(voteIds[i]);\r\n            userVotingPowerAt[i] = api3Pool.userVotingPowerAt(userAddress, snapshotBlock);\r\n            discussionUrl[i] = votingAppTypeToVoteIdToDiscussionUrl[votingAppType][voteIds[i]];\r\n        }\r\n    }\r\n\r\n    /// @notice Used by the DAO dashboard client to retrieve dynamic vote data\r\n    /// @dev `delegateAt` is actually static but we already have to fetch it\r\n    /// to fetch the related dynamic data so we also return it in this mtehod\r\n    /// @param votingAppType Enumerated voting app type (primary or secondary)\r\n    /// @param userAddress User address\r\n    /// @param voteIds Array of vote IDs for which data will be retrieved\r\n    /// @return executed If the vote has been executed\r\n    /// @return yea Total voting power voted for \"For\"\r\n    /// @return nay Total voting power voted for \"Against\"\r\n    /// @return voterState Vote cast by the user\r\n    /// @return delegateAt Address the user has delegated to at the time the\r\n    /// vote was created\r\n    /// @return delegateState Vote cast by the delegate of the user\r\n    function getDynamicVoteData(\r\n        VotingAppType votingAppType,\r\n        address userAddress,\r\n        uint256[] calldata voteIds\r\n        )\r\n        external\r\n        view\r\n        returns (\r\n            bool[] memory executed,\r\n            uint256[] memory yea,\r\n            uint256[] memory nay,\r\n            IApi3Voting.VoterState[] memory voterState,\r\n            address[] memory delegateAt,\r\n            IApi3Voting.VoterState[] memory delegateState\r\n            )\r\n    {\r\n        IApi3Voting api3Voting;\r\n        if (votingAppType == VotingAppType.Primary)\r\n        {\r\n            api3Voting = IApi3Voting(api3Pool.votingAppPrimary());\r\n        }\r\n        else\r\n        {\r\n            api3Voting = IApi3Voting(api3Pool.votingAppSecondary());\r\n        }\r\n        executed = new bool[](voteIds.length);\r\n        yea = new uint256[](voteIds.length);\r\n        nay = new uint256[](voteIds.length);\r\n        voterState = new IApi3Voting.VoterState[](voteIds.length);\r\n        delegateAt = new address[](voteIds.length);\r\n        delegateState = new IApi3Voting.VoterState[](voteIds.length);\r\n        for (uint256 i = 0; i < voteIds.length; i++)\r\n        {\r\n            uint64 snapshotBlock;\r\n            (\r\n                , // open\r\n                executed[i],\r\n                , // startDate\r\n                snapshotBlock,\r\n                , // supportRequired\r\n                , // minAcceptQuorum\r\n                yea[i],\r\n                nay[i],\r\n                , // votingPower\r\n                // script\r\n                ) = api3Voting.getVote(voteIds[i]);\r\n            delegateAt[i] = api3Pool.userDelegateAt(userAddress, snapshotBlock);\r\n            if (delegateAt[i] == address(0))\r\n            {\r\n                voterState[i] = api3Voting.getVoterState(voteIds[i], userAddress);\r\n            }\r\n            else\r\n            {\r\n                delegateState[i] = api3Voting.getVoterState(voteIds[i], delegateAt[i]);\r\n            }\r\n        }\r\n    }\r\n\r\n    /// @notice Used by the DAO dashboard client to retrieve the IDs of the\r\n    /// votes that are currently open\r\n    /// @param votingAppType Enumerated voting app type (primary or secondary)\r\n    /// @return voteIds Array of vote IDs for which data will be retrieved\r\n    function getOpenVoteIds(VotingAppType votingAppType)\r\n        external\r\n        view\r\n        returns (uint256[] memory voteIds)\r\n    {\r\n        IApi3Voting api3Voting;\r\n        if (votingAppType == VotingAppType.Primary)\r\n        {\r\n            api3Voting = IApi3Voting(api3Pool.votingAppPrimary());\r\n        }\r\n        else\r\n        {\r\n            api3Voting = IApi3Voting(api3Pool.votingAppSecondary());\r\n        }\r\n        uint256 votesLength = api3Voting.votesLength();\r\n        if (votesLength == 0)\r\n        {\r\n            return new uint256[](0);\r\n        }\r\n        uint256 countOpenVote = 0;\r\n        for (uint256 i = votesLength; i > 0; i--)\r\n        {\r\n            (\r\n                bool open,\r\n                , // executed\r\n                uint64 startDate,\r\n                , //snapshotBlock\r\n                , // supportRequired\r\n                , // minAcceptQuorum\r\n                , // yea\r\n                , // nay\r\n                , // votingPower\r\n                // script\r\n                ) = api3Voting.getVote(i - 1);\r\n            if (open)\r\n            {\r\n                countOpenVote++;\r\n            }\r\n            if (startDate < block.timestamp - api3Voting.voteTime())\r\n            {\r\n                break;\r\n            }\r\n        }\r\n        if (countOpenVote == 0)\r\n        {\r\n            return new uint256[](0);\r\n        }\r\n        voteIds = new uint256[](countOpenVote);\r\n        uint256 countAddedVote = 0;\r\n        for (uint256 i = votesLength; i > 0; i--)\r\n        {\r\n            if (countOpenVote == countAddedVote)\r\n            {\r\n                break;\r\n            }\r\n            (\r\n                bool open,\r\n                , // executed\r\n                , // startDate\r\n                , // snapshotBlock\r\n                , // supportRequired\r\n                , // minAcceptQuorum\r\n                , // yea\r\n                , // nay\r\n                , // votingPower\r\n                // script\r\n                ) = api3Voting.getVote(i - 1);\r\n            if (open)\r\n            {\r\n                voteIds[countAddedVote] = i - 1;\r\n                countAddedVote++;\r\n            }\r\n        }\r\n    }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"api3PoolAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"enum Convenience.VotingAppType\",\"name\":\"votingAppType\",\"type\":\"uint8\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"voteId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"discussionUrl\",\"type\":\"string\"}],\"name\":\"SetDiscussionUrl\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"erc20Addresses\",\"type\":\"address[]\"}],\"name\":\"SetErc20Addresses\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"api3Pool\",\"outputs\":[{\"internalType\":\"contract IApi3PoolExtended\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"api3Token\",\"outputs\":[{\"internalType\":\"contract IERC20Metadata\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"erc20Addresses\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum Convenience.VotingAppType\",\"name\":\"votingAppType\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"voteIds\",\"type\":\"uint256[]\"}],\"name\":\"getDynamicVoteData\",\"outputs\":[{\"internalType\":\"bool[]\",\"name\":\"executed\",\"type\":\"bool[]\"},{\"internalType\":\"uint256[]\",\"name\":\"yea\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"nay\",\"type\":\"uint256[]\"},{\"internalType\":\"enum IApi3Voting.VoterState[]\",\"name\":\"voterState\",\"type\":\"uint8[]\"},{\"internalType\":\"address[]\",\"name\":\"delegateAt\",\"type\":\"address[]\"},{\"internalType\":\"enum IApi3Voting.VoterState[]\",\"name\":\"delegateState\",\"type\":\"uint8[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum Convenience.VotingAppType\",\"name\":\"votingAppType\",\"type\":\"uint8\"}],\"name\":\"getOpenVoteIds\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"voteIds\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum Convenience.VotingAppType\",\"name\":\"votingAppType\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"voteIds\",\"type\":\"uint256[]\"}],\"name\":\"getStaticVoteData\",\"outputs\":[{\"internalType\":\"uint64[]\",\"name\":\"startDate\",\"type\":\"uint64[]\"},{\"internalType\":\"uint64[]\",\"name\":\"supportRequired\",\"type\":\"uint64[]\"},{\"internalType\":\"uint64[]\",\"name\":\"minAcceptQuorum\",\"type\":\"uint64[]\"},{\"internalType\":\"uint256[]\",\"name\":\"votingPower\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes[]\",\"name\":\"script\",\"type\":\"bytes[]\"},{\"internalType\":\"uint256[]\",\"name\":\"userVotingPowerAt\",\"type\":\"uint256[]\"},{\"internalType\":\"string[]\",\"name\":\"discussionUrl\",\"type\":\"string[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"}],\"name\":\"getTreasuryAndUserDelegationData\",\"outputs\":[{\"internalType\":\"string[]\",\"name\":\"names\",\"type\":\"string[]\"},{\"internalType\":\"string[]\",\"name\":\"symbols\",\"type\":\"string[]\"},{\"internalType\":\"uint8[]\",\"name\":\"decimals\",\"type\":\"uint8[]\"},{\"internalType\":\"uint256[]\",\"name\":\"balancesOfPrimaryAgent\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"balancesOfSecondaryAgent\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"proposalVotingPowerThreshold\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"userVotingPower\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"delegatedToUser\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"delegate\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"lastDelegationUpdateTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastProposalTimestamp\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"}],\"name\":\"getUserStakingData\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"apr\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"api3Supply\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalStake\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalShares\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stakeTarget\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"userApi3Balance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"userStaked\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"userUnstaked\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"userVesting\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"userUnstakeAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"userUnstakeShares\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"userUnstakeScheduledFor\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"userLocked\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum Convenience.VotingAppType\",\"name\":\"votingAppType\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"voteId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"discussionUrl\",\"type\":\"string\"}],\"name\":\"setDiscussionUrl\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_erc20Addresses\",\"type\":\"address[]\"}],\"name\":\"setErc20Addresses\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum Convenience.VotingAppType\",\"name\":\"\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"votingAppTypeToVoteIdToDiscussionUrl\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"Convenience","CompilerVersion":"v0.8.4+commit.c7e474f2","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"0000000000000000000000006dd655f10d4b9e242ae186d9050b68f725c76d76","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://50265e1cee522c88dbf8a0368e9585984961477ca4a082825008f254a1148162"}]}