{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"/Users/ivannikov/work/snake-jungle/cosmomasks-for-musk/contracts/MaskForMuskBonus.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.7.6;\\n\\nlibrary SafeMath {\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n        return c;\\n    }\\n}\\n\\ninterface IERC20 {\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n}\\n\\ninterface IMasks {\\n    function ownerOf(uint256 tokenId) external returns (address);\\n}\\n\\n\\ncontract MaskForMuskBonus {\\n    using SafeMath for uint256;\\n\\n    uint256 public constant CosmoTokenRewardAmount = 1e24;\\n    //address public constant CosmoToken = 0x27cd7375478F189bdcF55616b088BE03d9c4339c;\\n    address public CosmoToken;\\n    address public MaskForMusk;\\n    string public url = \\\"https://CosmoSwap.space/\\\";\\n\\n    mapping(uint256 => bool) private _tokenRewarded;\\n\\n    event Rewarded(address indexed tokenOwner, uint256 indexed tokenId, uint256 indexed amount);\\n\\n\\n    constructor(address cosmoToken, address maskForMusk) public {\\n        CosmoToken = cosmoToken;\\n        MaskForMusk = maskForMusk;\\n    }\\n\\n    function isRewarded(uint256 tokenId) public view returns (bool) {\\n        return _tokenRewarded[tokenId];\\n    }\\n\\n    function claim(uint256 tokenId) public returns (uint256) {\\n        address tokenOwner = _msgSender();\\n        require(isRewarded(tokenId) == false, \\\"The reward has already been claimed\\\");\\n        require(IMasks(MaskForMusk).ownerOf(tokenId) == tokenOwner, \\\"Only the owner can claim the reward\\\");\\n\\n        _sendReward(tokenOwner, CosmoTokenRewardAmount);\\n        _tokenRewarded[tokenId] = true;\\n        emit Rewarded(tokenOwner, tokenId, CosmoTokenRewardAmount);\\n        return CosmoTokenRewardAmount;\\n    }\\n\\n    function claimMany(uint256[] memory tokenIds) public returns (uint256) {\\n        address tokenOwner = _msgSender();\\n        uint256 totalClaimed = 0;\\n        for (uint256 i = 0; i < tokenIds.length; i++) {\\n            // Duplicate token index check\\n            for (uint256 j = i + 1; j < tokenIds.length; j++) {\\n                require(tokenIds[i] != tokenIds[j], \\\"Duplicate tokenId\\\");\\n            }\\n\\n            uint256 tokenId = tokenIds[i];\\n            require(IMasks(MaskForMusk).ownerOf(tokenId) == tokenOwner, \\\"Only the token owner can claim the reward\\\");\\n\\n            if (isRewarded(tokenId) == false) {\\n                totalClaimed = totalClaimed.add(CosmoTokenRewardAmount);\\n                _tokenRewarded[tokenId] = true;\\n                emit Rewarded(tokenOwner, tokenId, CosmoTokenRewardAmount);\\n            }\\n        }\\n\\n        require(totalClaimed != 0, \\\"No rewards\\\");\\n        _sendReward(tokenOwner, totalClaimed);\\n        return totalClaimed;\\n    }\\n\\n    function _sendReward(address tokenOwner, uint256 totalClaimed) internal {\\n        require(IERC20(CosmoToken).transfer(tokenOwner, totalClaimed), \\\"Reward transfer failed\\\");\\n    }\\n\\n    function _msgSender() internal view returns (address payable) {\\n        return msg.sender;\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"remappings\": [],\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 999999\r\n    },\r\n    \"evmVersion\": \"istanbul\",\r\n    \"libraries\": {},\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"cosmoToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"maskForMusk\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tokenOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Rewarded\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"CosmoToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"CosmoTokenRewardAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MaskForMusk\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"claim\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"tokenIds\",\"type\":\"uint256[]\"}],\"name\":\"claimMany\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"isRewarded\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"url\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"MaskForMuskBonus","CompilerVersion":"v0.7.6+commit.7338295f","OptimizationUsed":"1","Runs":"999999","ConstructorArguments":"00000000000000000000000027cd7375478f189bdcf55616b088be03d9c4339c00000000000000000000000004fc6f48ebb05006d451d88f6199aca59c4cd6a6","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}