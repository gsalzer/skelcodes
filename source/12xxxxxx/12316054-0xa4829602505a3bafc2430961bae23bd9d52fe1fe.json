{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"/app/contracts/TeamPoolPACT.sol\": {\r\n      \"content\": \"// \\\"SPDX-License-Identifier: MIT\\\"\\npragma solidity 0.6.12;\\npragma experimental ABIEncoderV2;\\n\\n\\nimport \\\"./vendors/interfaces/IERC20.sol\\\";\\nimport \\\"./vendors/interfaces/IDelegableERC20.sol\\\";\\nimport \\\"./vendors/libraries/SafeMath.sol\\\";\\nimport \\\"./vendors/libraries/SafeERC20.sol\\\";\\nimport \\\"./vendors/contracts/access/Ownable.sol\\\";\\n\\n\\ncontract TeamPoolPACT is Ownable{\\n    \\n    using SafeMath for uint;\\n    using SafeERC20 for IERC20;\\n\\n    event Withdraw(uint tokensAmount);\\n\\n    address public _PACT;\\n    uint constant oneYear = 365 days;\\n\\n    uint[2][4] private annualSupplyPoints = [\\n        [block.timestamp, 12500000e18],\\n        [block.timestamp.add(oneYear.mul(1)), 12500000e18],\\n        [block.timestamp.add(oneYear.mul(2)), 12500000e18],\\n        [block.timestamp.add(oneYear.mul(3)), 12500000e18]\\n    ];\\n \\n    \\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner (`ownerAddress`) \\n     * and pact contract address (`PACT`).\\n     */\\n    constructor (\\n        address ownerAddress,\\n        address PACT\\n    ) public {\\n        require (PACT != address(0), \\\"PACT ADDRESS SHOULD BE NOT NULL\\\");\\n        _PACT = PACT;\\n        transferOwnership(ownerAddress == address(0) ? msg.sender : ownerAddress);\\n        IDelegableERC20(_PACT).delegate(ownerAddress);\\n    }\\n\\n    \\n    /**\\n     * @dev Returns the annual supply points of the current contract.\\n     */\\n    function getReleases() external view returns(uint[2][4] memory) {\\n        return annualSupplyPoints;\\n    } \\n\\n    /**\\n     * @dev Withdrawal tokens the address  (`to`) and amount (`amount`).\\n     * Can only be called by the current owner.\\n    */\\n    function withdraw(address to,uint amount) external onlyOwner {\\n        IERC20 PACT = IERC20(_PACT);\\n        require (to != address(0), \\\"ADDRESS SHOULD BE NOT NULL\\\");\\n        require(amount <= PACT.balanceOf(address(this)), \\\"NOT ENOUGH PACT TOKENS ON TEAMPOOL CONTRACT BALANCE\\\");\\n        for(uint i; i < 4; i++) {\\n            if(annualSupplyPoints[i][1] >= amount && block.timestamp >= annualSupplyPoints[i][0]) {\\n               annualSupplyPoints[i][1] = annualSupplyPoints[i][1].sub(amount);\\n               PACT.safeTransfer(to, amount);\\n               return ;\\n            }\\n        }\\n        require (false, \\\"TokenTimelock: no tokens to release\\\");              \\n    }\\n\\n}\"\r\n    },\r\n    \"/app/contracts/vendors/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.6.12;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n// Copied from OpenZeppelin code:\\n// https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/access/Ownable.sol\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() public {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n}\"\r\n    },\r\n    \"/app/contracts/vendors/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.6.12;\\n\\n// Copied from OpenZeppelin code:\\n// https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/utils/Context.sol\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\"\r\n    },\r\n    \"/app/contracts/vendors/interfaces/IDelegable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity 0.6.12;\\r\\n\\r\\ninterface IDelegable {\\r\\n    function delegate(address delegatee) external;\\r\\n    function delegateBySig(address delegatee, uint nonce, uint expiry, uint8 v, bytes32 r, bytes32 s) external;\\r\\n    function getCurrentVotes(address account) external view returns (uint256);\\r\\n    function getPriorVotes(address account, uint blockNumber) external view returns (uint256);\\r\\n\\r\\n    event DelegateChanged(address indexed delegator, address indexed fromDelegate, address indexed toDelegate);\\r\\n    event DelegateVotesChanged(address indexed delegate, uint previousBalance, uint newBalance);\\r\\n}\\r\\n\"\r\n    },\r\n    \"/app/contracts/vendors/interfaces/IDelegableERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity 0.6.12;\\r\\n\\r\\nimport \\\"./IDelegable.sol\\\";\\r\\nimport \\\"./IERC20WithMaxTotalSupply.sol\\\";\\r\\n\\r\\ninterface IDelegableERC20 is IDelegable, IERC20WithMaxTotalSupply {}\\r\\n\"\r\n    },\r\n    \"/app/contracts/vendors/interfaces/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity 0.6.12;\\r\\n\\r\\ninterface IERC20 {\\r\\n    function name() external view returns (string memory);\\r\\n    function symbol() external view returns (string memory);\\r\\n    function decimals() external view returns (uint8);\\r\\n    function totalSupply() external view returns (uint);\\r\\n\\r\\n    function balanceOf(address tokenOwner) external view returns (uint balance);\\r\\n    function allowance(address tokenOwner, address spender) external view returns (uint remaining);\\r\\n    function approve(address spender, uint tokens) external returns (bool success);\\r\\n    function transfer(address to, uint tokens) external returns (bool success);\\r\\n    function transferFrom(address from, address to, uint tokens) external returns (bool success);\\r\\n\\r\\n    event Transfer(address indexed from, address indexed to, uint tokens);\\r\\n    event Approval(address indexed tokenOwner, address indexed spender, uint tokens);\\r\\n}\\r\\n\"\r\n    },\r\n    \"/app/contracts/vendors/interfaces/IERC20WithMaxTotalSupply.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity 0.6.12;\\r\\n\\r\\nimport \\\"./IERC20.sol\\\";\\r\\n\\r\\ninterface IERC20WithMaxTotalSupply is IERC20 {\\r\\n    event Mint(address indexed account, uint tokens);\\r\\n    event Burn(address indexed account, uint tokens);\\r\\n    function maxTotalSupply() external view returns (uint);\\r\\n}\\r\\n\"\r\n    },\r\n    \"/app/contracts/vendors/libraries/SafeERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity 0.6.12;\\r\\n\\r\\nimport \\\"../interfaces/IERC20.sol\\\";\\r\\n\\r\\nlibrary SafeERC20 {\\r\\n    function safeSymbol(IERC20 token) internal view returns(string memory) {\\r\\n        (bool success, bytes memory data) = address(token).staticcall(abi.encodeWithSelector(0x95d89b41));\\r\\n        return success && data.length > 0 ? abi.decode(data, (string)) : \\\"???\\\";\\r\\n    }\\r\\n\\r\\n    function safeName(IERC20 token) internal view returns(string memory) {\\r\\n        (bool success, bytes memory data) = address(token).staticcall(abi.encodeWithSelector(0x06fdde03));\\r\\n        return success && data.length > 0 ? abi.decode(data, (string)) : \\\"???\\\";\\r\\n    }\\r\\n\\r\\n    function safeDecimals(IERC20 token) public view returns (uint8) {\\r\\n        (bool success, bytes memory data) = address(token).staticcall(abi.encodeWithSelector(0x313ce567));\\r\\n        return success && data.length == 32 ? abi.decode(data, (uint8)) : 18;\\r\\n    }\\r\\n\\r\\n    function safeTransfer(IERC20 token, address to, uint256 amount) internal {\\r\\n        (bool success, bytes memory data) = address(token).call(abi.encodeWithSelector(0xa9059cbb, to, amount));\\r\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), \\\"SafeERC20: Transfer failed\\\");\\r\\n    }\\r\\n\\r\\n    function safeApprove(IERC20 token, address to, uint value) internal {\\r\\n        // bytes4(keccak256(bytes('approve(address,uint256)')));\\r\\n        (bool success, bytes memory data) = address(token).call(abi.encodeWithSelector(0x095ea7b3, to, value));\\r\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'TransferHelper: APPROVE_FAILED');\\r\\n    }\\r\\n\\r\\n    function safeTransferFrom(IERC20 token, address from, uint256 amount) internal {\\r\\n        (bool success, bytes memory data) = address(token).call(abi.encodeWithSelector(0x23b872dd, from, address(this), amount));\\r\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), \\\"SafeERC20: TransferFrom failed\\\");\\r\\n    }\\r\\n}\"\r\n    },\r\n    \"/app/contracts/vendors/libraries/SafeMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity 0.6.12;\\r\\n\\r\\nlibrary SafeMath {\\r\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        return add(a, b, \\\"SafeMath: Add Overflow\\\");\\r\\n    }\\r\\n    function add(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\r\\n        uint256 c = a + b;\\r\\n        require(c >= a, errorMessage);// \\\"SafeMath: Add Overflow\\\"\\r\\n\\r\\n        return c;\\r\\n    }\\r\\n\\r\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        return sub(a, b, \\\"SafeMath: Underflow\\\");\\r\\n    }\\r\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\r\\n        require(b <= a, errorMessage);\\r\\n        uint256 c = a - b;// \\\"SafeMath: Underflow\\\"\\r\\n\\r\\n        return c;\\r\\n    }\\r\\n\\r\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        return mul(a, b, \\\"SafeMath: Mul Overflow\\\");\\r\\n    }\\r\\n    function mul(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\r\\n        if (a == 0) {\\r\\n            return 0;\\r\\n        }\\r\\n\\r\\n        uint256 c = a * b;\\r\\n        require(c / a == b, errorMessage);// \\\"SafeMath: Mul Overflow\\\"\\r\\n\\r\\n        return c;\\r\\n    }\\r\\n\\r\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        require(b != 0, \\\"SafeMath: division by zero\\\");\\r\\n        uint256 c = a / b;\\r\\n\\r\\n        return c;\\r\\n    }\\r\\n\\r\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        require(b != 0, \\\"SafeMath: modulo by zero\\\");\\r\\n        return a % b;\\r\\n    }\\r\\n}\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"remappings\": [],\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"evmVersion\": \"istanbul\",\r\n    \"libraries\": {},\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"ownerAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"PACT\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokensAmount\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"_PACT\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getReleases\",\"outputs\":[{\"internalType\":\"uint256[2][4]\",\"name\":\"\",\"type\":\"uint256[2][4]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"TeamPoolPACT","CompilerVersion":"v0.6.12+commit.27d51765","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"0000000000000000000000002ef29a0a5a90d3205d901af3fb8f83cd7999281700000000000000000000000080d290a6fdce62709e17669af8affb0d77c6edb8","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}