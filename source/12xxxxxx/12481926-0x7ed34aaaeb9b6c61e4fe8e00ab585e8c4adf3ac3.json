{"status":"1","message":"OK","result":[{"SourceCode":"// SPDX-License-Identifier: MIT\r\n\r\npragma solidity >=0.8.0 <0.9.0;\r\n\r\ncontract DeriVoteWithPayment {\r\n\r\n    event Vote(address indexed voter, uint256 votingId, uint256 optionId, uint256 amount);\r\n\r\n    string public constant name = 'DeriVote';\r\n\r\n    address public controller;\r\n\r\n    // current voting id\r\n    uint256 public votingId;\r\n    // current voting name\r\n    string  public votingName;\r\n    // number of options for current voting\r\n    uint256 public numOptions;\r\n    // current vote deadline\r\n    uint256 public votingDeadline;\r\n\r\n    // voting topics, votingId => topic\r\n    mapping (uint256 => string) public votingTopics;\r\n\r\n    // current voting token, voters spend token to vote\r\n    // the amount of token transferred to this contract is the amount of this vote\r\n    address public votingToken;\r\n    // current voting token receipient, must be intailized during initializeVote\r\n    // this receipient cannot be changed for a specific vote\r\n    address public votingTokenReceipient;\r\n\r\n    // votings for options, votingId => optionId => votes\r\n    mapping (uint256 => mapping (uint256 => uint256)) public votingsForOptions;\r\n\r\n    modifier _controller_() {\r\n        require(msg.sender == controller, 'DeriVote2: only controller');\r\n        _;\r\n    }\r\n\r\n    constructor () {\r\n        controller = msg.sender;\r\n    }\r\n\r\n    function setController(address newController) public _controller_ {\r\n        controller = newController;\r\n    }\r\n\r\n    function initializeVote(\r\n        string  memory _votingName,\r\n        string  memory _topic,\r\n        uint256 _numOptions,\r\n        uint256 _votingDeadline,\r\n        address _votingToken,\r\n        address _votingTokenReceipient\r\n    ) public _controller_ {\r\n        require(block.timestamp >= votingDeadline, 'DeriVote2: still in vote');\r\n        require(block.timestamp < _votingDeadline, 'DeriVote2: invalid deadline');\r\n        require(\r\n            votingToken == address(0) || IERC20(votingToken).balanceOf(address(this)) == 0,\r\n            'DeriVote2: remain untransferred voting tokens'\r\n        );\r\n\r\n        votingId += 1;\r\n        votingName = _votingName;\r\n        numOptions = _numOptions;\r\n        votingDeadline = _votingDeadline;\r\n        votingToken = _votingToken;\r\n        votingTokenReceipient = _votingTokenReceipient;\r\n        votingTopics[votingId] = _topic;\r\n    }\r\n\r\n    // finalize vote, transfers voting token from this contract to predefined receipient\r\n    function finalizeVote() public {\r\n        require(block.timestamp >= votingDeadline, 'DeriVote2: still in vote');\r\n        if (votingToken != address(0)) {\r\n            uint256 balance = IERC20(votingToken).balanceOf(address(this));\r\n            if (balance != 0) {\r\n                IERC20(votingToken).transfer(votingTokenReceipient, balance);\r\n            }\r\n        }\r\n    }\r\n\r\n    function vote(uint256 optionId, uint256 amount) public {\r\n        require(block.timestamp < votingDeadline, 'DeriVote2.vote: voting ended');\r\n        require(optionId < numOptions, 'DeriVote2.vote: invalid voting optionId');\r\n\r\n        IERC20(votingToken).transferFrom(msg.sender, address(this), amount);\r\n        votingsForOptions[votingId][optionId] += amount;\r\n\r\n        emit Vote(msg.sender, votingId, optionId, amount);\r\n    }\r\n\r\n}\r\n\r\n\r\ninterface IERC20 {\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function transfer(address to, uint256 amount) external;\r\n    function transferFrom(address from, address to, uint256 amount) external;\r\n}","ABI":"[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"voter\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"votingId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"optionId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Vote\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"controller\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"finalizeVote\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_votingName\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_topic\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"_numOptions\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_votingDeadline\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_votingToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_votingTokenReceipient\",\"type\":\"address\"}],\"name\":\"initializeVote\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"numOptions\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newController\",\"type\":\"address\"}],\"name\":\"setController\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"optionId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"vote\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"votingDeadline\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"votingId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"votingName\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"votingToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"votingTokenReceipient\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"votingTopics\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"votingsForOptions\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"DeriVoteWithPayment","CompilerVersion":"v0.8.3+commit.8d00100c","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://dd037f68f0f431d2e5764e76758bb53e5f8597d5023fb48fa7a025837939e151"}]}