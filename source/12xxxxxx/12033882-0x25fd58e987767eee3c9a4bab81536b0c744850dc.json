{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.7.4;\r\npragma experimental ABIEncoderV2;\r\n\r\n// -- WyArbiV3 -- //\r\ncontract WyArbiV3 {\r\n    using SafeMath for uint256;\r\n    using SafeERC20 for IERC20;\r\n    using address_make_payable for address;\r\n\r\n    struct MyCustomData {       // 还款信息\r\n        address token;          // token\r\n        uint256 repayAmount;    // 还款数量\r\n    }\r\n\r\n    struct StrategyData {       // 策略信息\r\n        address token_want;     // 需要的token\r\n        address token_media;    // 中转token\r\n        address protocol1;      // 协议1地址\r\n        address protocol2;      // 协议2地址\r\n        uint256 in_amount;      // 输入数量\r\n    }\r\n\r\n    address superMan;\r\n    address keeperDaoAddress;\r\n    address uniswapAddress;\r\n    address WETHAddress;\r\n    address USDTAddress;\r\n    address GasTokenV2;\r\n\r\n    mapping (address => mapping (address => int128)) public tokenId;  //protocol地址->token地址->tokenId\r\n    mapping (address => uint256) public functionId;                   //protocol地址->functionId\r\n\r\n    bool if_turnout = true;             // 盈利是否转出\r\n    bool if_gastoken = true;            // 是否使用GasToken\r\n    StrategyData strategy_data;         // 策略信息\r\n\r\n    constructor () public {\r\n        superMan = address(tx.origin);\r\n        keeperDaoAddress = 0x35fFd6E268610E764fF6944d07760D0EFe5E40E5;\r\n        uniswapAddress = 0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D;\r\n        WETHAddress = 0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2;\r\n        USDTAddress = 0xdAC17F958D2ee523a2206206994597C13D831ec7;\r\n        GasTokenV2 = 0x0000000000b3F879cb30FE243b4Dfee438691c04;\r\n\r\n        // curve3pool tokenId DAI USDC USDT\r\n        tokenId[address(0xbEbc44782C7dB0a1A60Cb6fe97d0b483032FF1C7)][address(0x6B175474E89094C44Da98b954EedeAC495271d0F)] = 0;\r\n        tokenId[address(0xbEbc44782C7dB0a1A60Cb6fe97d0b483032FF1C7)][address(0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48)] = 1;\r\n        tokenId[address(0xbEbc44782C7dB0a1A60Cb6fe97d0b483032FF1C7)][address(0xdAC17F958D2ee523a2206206994597C13D831ec7)] = 2;\r\n\r\n        // curveYpool tokenId DAI USDC USDT\r\n        tokenId[address(0x45F783CCE6B7FF23B2ab2D70e416cdb7D6055f51)][address(0x6B175474E89094C44Da98b954EedeAC495271d0F)] = 0;\r\n        tokenId[address(0x45F783CCE6B7FF23B2ab2D70e416cdb7D6055f51)][address(0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48)] = 1;\r\n        tokenId[address(0x45F783CCE6B7FF23B2ab2D70e416cdb7D6055f51)][address(0xdAC17F958D2ee523a2206206994597C13D831ec7)] = 2;\r\n        tokenId[address(0x45F783CCE6B7FF23B2ab2D70e416cdb7D6055f51)][address(0x0000000000085d4780B73119b644AE5ecd22b376)] = 3;\r\n\r\n        // stableswap tokenId USDP DAI USDC USDT\r\n        tokenId[address(0x42d7025938bEc20B69cBae5A77421082407f053A)][address(0x1456688345527bE1f37E9e627DA0837D6f08C925)] = 0;\r\n        tokenId[address(0x42d7025938bEc20B69cBae5A77421082407f053A)][address(0x6B175474E89094C44Da98b954EedeAC495271d0F)] = 1;\r\n        tokenId[address(0x42d7025938bEc20B69cBae5A77421082407f053A)][address(0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48)] = 2;\r\n        tokenId[address(0x42d7025938bEc20B69cBae5A77421082407f053A)][address(0xdAC17F958D2ee523a2206206994597C13D831ec7)] = 3;\r\n\r\n        // dodo tokenId USDT USDC\r\n        tokenId[address(0xC9f93163c99695c6526b799EbcA2207Fdf7D61aD)][address(0xdAC17F958D2ee523a2206206994597C13D831ec7)] = 0;\r\n        tokenId[address(0xC9f93163c99695c6526b799EbcA2207Fdf7D61aD)][address(0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48)] = 1;\r\n\r\n        // btcswap tokenId TBTC WBTC renBTC sBTC\r\n        tokenId[address(0x4f6A43Ad7cba042606dECaCA730d4CE0A57ac62e)][address(0x8dAEBADE922dF735c38C80C7eBD708Af50815fAa)] = 0;\r\n        tokenId[address(0x4f6A43Ad7cba042606dECaCA730d4CE0A57ac62e)][address(0x2260FAC5E5542a773Aa44fBCfeDf7C193bc2C599)] = 1;\r\n        tokenId[address(0x4f6A43Ad7cba042606dECaCA730d4CE0A57ac62e)][address(0xEB4C2781e4ebA804CE9a9803C67d0893436bB27D)] = 2;\r\n        tokenId[address(0x4f6A43Ad7cba042606dECaCA730d4CE0A57ac62e)][address(0xfE18be6b3Bd88A2D2A7f928d00292E7a9963CfC6)] = 3;\r\n\r\n        // curve3Pool functionId\r\n        functionId[address(0xbEbc44782C7dB0a1A60Cb6fe97d0b483032FF1C7)] = 1;\r\n        // curveYPool functionId\r\n        functionId[address(0x45F783CCE6B7FF23B2ab2D70e416cdb7D6055f51)] = 2;\r\n        // stableswap functionId\r\n        functionId[address(0x42d7025938bEc20B69cBae5A77421082407f053A)] = 3;\r\n        // component functionId\r\n        functionId[address(0x49519631B404E06ca79C9C7b0dC91648D86F08db)] = 4;\r\n        functionId[address(0x6477960dd932d29518D7e8087d5Ea3D11E606068)] = 4;\r\n        // dodo functionId\r\n        functionId[address(0xC9f93163c99695c6526b799EbcA2207Fdf7D61aD)] = 5;\r\n        // btcswap functionId\r\n        functionId[address(0x4f6A43Ad7cba042606dECaCA730d4CE0A57ac62e)] = 6;\r\n        // uniswapv2 functionId\r\n        functionId[0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D] = 7;\r\n        // sushiswap functionId\r\n        functionId[address(0xd9e1cE17f2641f24aE83637ab66a2cca9C378B9F)] = 7;\r\n        // balancer functionId\r\n        functionId[address(0x3E66B66Fd1d0b02fDa6C811Da9E0547970DB2f21)] = 8;\r\n    }\r\n\r\n    // 发起闪电贷\r\n    function initiateFlashLoan(address token, uint256 amount) public onlyOwner {\r\n        ILiquidity(keeperDaoAddress).borrow(\r\n            token,\r\n            amount,\r\n            abi.encodeWithSelector(this.callFunction.selector, token, amount.add(1))\r\n        );\r\n    }\r\n\r\n    // 闪电贷实现\r\n    function callFunction(address token, uint256 repay_amount) public {\r\n        // 操作\r\n        uint256 output_amount = operation();\r\n\r\n        // 检查盈利\r\n        require(output_amount > repay_amount, \"no profit!\");\r\n        uint256 profit = output_amount - repay_amount;\r\n\r\n        // 还款\r\n        IERC20(token).transfer(keeperDaoAddress, repay_amount);\r\n\r\n        // 盈利转出\r\n        if (if_turnout) {\r\n            if (token == WETHAddress) {\r\n                WETHToETH(profit);\r\n                turnOutETH(profit);\r\n            } else {\r\n                uint256 eth_out = uniswapTokensForETH(token, profit);\r\n                turnOutETH(eth_out);\r\n            }\r\n        }\r\n    }\r\n\r\n    // 操作\r\n    function operation() public returns (uint256) {\r\n        uint256 media_amount = ExchangeBase(\r\n            strategy_data.protocol1,\r\n            strategy_data.token_want,\r\n            strategy_data.token_media,\r\n            strategy_data.in_amount\r\n        );\r\n        if (media_amount == 0) {\r\n            return strategy_data.in_amount;\r\n        }\r\n        uint256 output_amount = ExchangeBase(\r\n            strategy_data.protocol2,\r\n            strategy_data.token_media,\r\n            strategy_data.token_want,\r\n            media_amount\r\n        );\r\n        return output_amount;\r\n    }\r\n\r\n    // 入口\r\n    function execute(address token_want, address token_media, address protocol1, address protocol2,\r\n        uint256 in_amount, uint256 free_value) public {\r\n\r\n        if (if_gastoken) {\r\n            freeGas(free_value);\r\n        }\r\n\r\n        strategy_data.in_amount = in_amount;\r\n        strategy_data.token_want = token_want;\r\n        strategy_data.token_media = token_media;\r\n        strategy_data.protocol1 = protocol1;\r\n        strategy_data.protocol2 = protocol2;\r\n\r\n        initiateFlashLoan(token_want, in_amount);\r\n    }\r\n\r\n    // ExchangeBase\r\n    function ExchangeBase(address protocol, address token_in, address token_out, uint256 in_amount) public returns(uint256) {\r\n        uint256 function_id = functionId[protocol];\r\n        uint256 output_amount = 0;\r\n\r\n        if (token_in == USDTAddress) {\r\n            IERC20(token_in).safeApprove(protocol, 0);\r\n            IERC20(token_in).safeApprove(protocol, in_amount);\r\n        } else {\r\n            IERC20(token_in).approve(protocol, in_amount);\r\n        }\r\n\r\n        if (function_id == 1) {\r\n            output_amount = ICurveFiExchange(protocol, token_in, token_out, in_amount);\r\n        }\r\n        if (function_id == 2) {\r\n            output_amount = ICurveFiExchangeUnderlying(protocol, token_in, token_out, in_amount);\r\n        }\r\n        if (function_id == 3) {\r\n            output_amount = IStableSwapExchange(protocol, token_in, token_out, in_amount);\r\n        }\r\n        if (function_id == 4) {\r\n            output_amount = IComponentExchange(protocol, token_in, token_out, in_amount);\r\n        }\r\n        if (function_id == 5) {\r\n            output_amount = IDODOExchange(protocol, token_in, token_out, in_amount);\r\n        }\r\n        if (function_id == 6) {\r\n            output_amount = IBTCSwapExchange(protocol, token_in, token_out, in_amount);\r\n        }\r\n        if (function_id == 7) {\r\n            output_amount = IUniswapExchange(protocol, token_in, token_out, in_amount);\r\n        }\r\n        if (function_id == 8) {\r\n            output_amount = IBalancerExchange(protocol, token_in, token_out, in_amount);\r\n        }\r\n        return output_amount;\r\n    }\r\n\r\n    // ICurveFiExchange functionId=1\r\n    function ICurveFiExchange(address protocol, address token_in, address token_out, uint256 in_amount) public returns(uint256) {\r\n        uint256 balance = IERC20(token_out).balanceOf(address(this));\r\n        ICurveFi(protocol).exchange(tokenId[protocol][token_in], tokenId[protocol][token_out], in_amount, 0);\r\n\r\n        return IERC20(token_out).balanceOf(address(this)).sub(balance);\r\n    }\r\n\r\n    // ICurveFiExchangeUnderlying functionId=2\r\n    function ICurveFiExchangeUnderlying(address protocol, address token_in, address token_out, uint256 in_amount) public returns(uint256) {\r\n        uint256 balance = IERC20(token_out).balanceOf(address(this));\r\n        ICurveFi(protocol).exchange_underlying(tokenId[protocol][token_in], tokenId[protocol][token_out], in_amount, 0);\r\n\r\n        return IERC20(token_out).balanceOf(address(this)).sub(balance);\r\n    }\r\n\r\n    // IStableSwapExchange functionId=3\r\n    function IStableSwapExchange(address protocol, address token_in, address token_out, uint256 in_amount) public returns(uint256) {\r\n        uint256 out_amount = IStableSwap(protocol).exchange_underlying(\r\n            tokenId[protocol][token_in], tokenId[protocol][token_out], in_amount, 0);\r\n\r\n        return out_amount;\r\n    }\r\n\r\n    // IComponentExchange functionId=4\r\n    function IComponentExchange(address protocol, address token_in, address token_out, uint256 in_amount) public returns(uint256) {\r\n        uint256 out_amount = IComponent(protocol).originSwap(token_in, token_out, in_amount, 0, uint256(block.timestamp).add(100));\r\n\r\n        return out_amount;\r\n    }\r\n\r\n    // IDODOExchange functionId=5  Base=0 Quote=1 只支持token_in=base token_out=quote\r\n    function IDODOExchange(address protocol, address token_in, address token_out, uint256 in_amount) public returns(uint256) {\r\n        int128 token_in_id = tokenId[protocol][token_in];\r\n        int128 token_out_id = tokenId[protocol][token_out];\r\n        uint256 out_amount;\r\n        if (token_in_id == 0 && token_out_id == 1) {\r\n            out_amount = IDODO(protocol).sellBaseToken(in_amount, 0, '');\r\n        } else {\r\n            revert(\"token_id wrong for dodo!\");\r\n        }\r\n        return out_amount;\r\n    }\r\n\r\n    // IBTCSwapExchange functionId=6\r\n    function IBTCSwapExchange(address protocol, address token_in, address token_out, uint256 in_amount) public returns(uint256) {\r\n        uint8 token_in_id = uint8(tokenId[protocol][token_in]);\r\n        uint8 token_out_id = uint8(tokenId[protocol][token_out]);\r\n\r\n        uint256 out_amount = IBTCswap(protocol).swap(token_in_id, token_out_id, in_amount, 0, uint256(block.timestamp).add(100));\r\n        return out_amount;\r\n    }\r\n\r\n    // IUniswapExchange functionId=7\r\n    function IUniswapExchange(address protocol, address token_in, address token_out, uint256 in_amount) public returns(uint256) {\r\n        address[] memory uniData = new address[](2);\r\n        uniData[0] = token_in;\r\n        uniData[1] = token_out;\r\n        uint[] memory amounts = UniswapV2Router(protocol).swapExactTokensForTokens(in_amount, 0, uniData, address(this),\r\n            uint256(block.timestamp).add(100));\r\n        return uint256(amounts[amounts.length - 1]);\r\n    }\r\n\r\n    // IBalancerExchange functionId=8\r\n    function IBalancerExchange(address protocol, address token_in, address token_out, uint256 in_amount) public returns(uint256) {\r\n        uint256 out_amount = IBalancerRouter(protocol).smartSwapExactIn(TokenInterface(token_in),\r\n                                                                        TokenInterface(token_out), in_amount, 0, 1);\r\n        return out_amount;\r\n    }\r\n\r\n    // Uniswap\r\n    function uniswapTokensForETH(address token, uint256 amount) public returns(uint256) {\r\n        IERC20(token).safeApprove(uniswapAddress, 0);\r\n        IERC20(token).safeApprove(uniswapAddress, amount);\r\n        address[] memory uniData = new address[](2);\r\n        uniData[0] = token;\r\n        uniData[1] = WETHAddress;\r\n        uint[] memory amounts = UniswapV2Router(uniswapAddress).swapExactTokensForETH(amount, 0, uniData, address(this),\r\n                        uint256(block.timestamp).add(100));\r\n        return uint256(amounts[amounts.length - 1]);\r\n    }\r\n\r\n    // get\r\n    function getSuperMan() public view returns(address) {\r\n        return superMan;\r\n    }\r\n\r\n    function getKeeperDaoAddress() public view returns(address) {\r\n        return keeperDaoAddress;\r\n    }\r\n\r\n    function getUniswapAddress() public view returns(address) {\r\n        return uniswapAddress;\r\n    }\r\n\r\n    function getGasTokenV2Address() public view returns(address) {\r\n        return GasTokenV2;\r\n    }\r\n\r\n    function getTokenId(address protocol, address token) public view returns(int128) {\r\n        return tokenId[protocol][token];\r\n    }\r\n\r\n    function getFunctionId(address protocol) public view returns(uint256) {\r\n        return functionId[protocol];\r\n    }\r\n\r\n    function getTokenBalance(address token) public view returns(uint256) {\r\n        return IERC20(token).balanceOf(address(this));\r\n    }\r\n\r\n    // set\r\n    function transferOwnership(address new_owner) public onlyOwner {\r\n        superMan = new_owner;\r\n    }\r\n\r\n    function setTokenID(address protocol, address token, int128 id) public onlyOwner {\r\n        tokenId[protocol][token] = id;\r\n    }\r\n\r\n    function setFunctionId(address protocol, uint256 id) public onlyOwner {\r\n        functionId[protocol] = id;\r\n    }\r\n\r\n    function setIfTurnout(bool tof) public onlyOwner {\r\n        if_turnout = tof;\r\n    }\r\n\r\n    function setIfGastoken(bool tof) public onlyOwner {\r\n        if_gastoken = tof;\r\n    }\r\n\r\n    function setKeeperDaoAddress(address new_address) public onlyOwner {\r\n        keeperDaoAddress = new_address;\r\n    }\r\n\r\n    function setUniswapAddress(address new_address) public onlyOwner {\r\n        uniswapAddress = new_address;\r\n    }\r\n\r\n    function setGasTokenV2Address(address new_address) public onlyOwner {\r\n        GasTokenV2 = new_address;\r\n    }\r\n\r\n    function turnOutToken(address token, uint256 amount) public onlyOwner {\r\n        IERC20(token).safeTransfer(superMan, amount);\r\n    }\r\n\r\n    function transferToken(address token, address recipient, uint256 amount) public onlyOwner {\r\n        IERC20(token).safeTransfer(recipient, amount);\r\n    }\r\n\r\n    function turnOutETH(uint256 amount) public {\r\n        address payable addr = superMan.make_payable();\r\n        addr.transfer(amount);\r\n    }\r\n\r\n    function transferETH(address recipient, uint256 amount) public onlyOwner {\r\n        address payable addr = recipient.make_payable();\r\n        addr.transfer(amount);\r\n    }\r\n\r\n    function WETHToETH(uint256 amount) public {\r\n        WETH9(WETHAddress).withdraw(amount);\r\n    }\r\n\r\n    function storeGas(uint256 value) public onlyOwner {\r\n        IGasToken(GasTokenV2).mint(value);\r\n    }\r\n\r\n    function freeGas(uint256 value) public onlyOwner {\r\n        IGasToken(GasTokenV2).freeUpTo(value);\r\n    }\r\n\r\n    modifier onlyOwner(){\r\n        require(address(msg.sender) == superMan, \"No authority\");\r\n        _;\r\n    }\r\n\r\n    receive() external payable {}\r\n}\r\n\r\n// -- interface -- //\r\ninterface IERC20 {\r\n    function totalSupply() external view returns (uint256);\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n// Component\r\ninterface IComponent {\r\n    function originSwap (\r\n        address _origin,\r\n        address _target,\r\n        uint _originAmount,\r\n        uint _minTargetAmount,\r\n        uint _deadline\r\n    ) external returns(uint);\r\n}\r\n\r\n// Curve.finance\r\ninterface ICurveFi {\r\n    function exchange(int128 from, int128 to, uint256 _from_amount, uint256 _min_to_amount) external;\r\n    function exchange_underlying(int128 from, int128 to, uint256 _from_amount, uint256 _min_to_amount) external;\r\n}\r\n\r\ninterface IStableSwap {\r\n    function exchange_underlying(int128 from, int128 to, uint256 _from_amount, uint256 _min_to_amount) external returns (uint256);\r\n}\r\n\r\n// DODO\r\ninterface IDODO {\r\n    function sellBaseToken(uint256 amount, uint256 minReceiveQuote, bytes calldata data) external returns (uint256);\r\n}\r\n\r\n// BTCswap\r\ninterface IBTCswap{\r\n    function swap(uint8 tokenIndexFrom, uint8 tokenIndexTo, uint256 dx, uint256 minDy, uint256 deadline) external returns (uint256);\r\n}\r\n\r\n// Balancer\r\ninterface TokenInterface {\r\n    function balanceOf(address) external view returns (uint);\r\n    function allowance(address, address) external view returns (uint);\r\n    function approve(address, uint) external returns (bool);\r\n    function transfer(address, uint) external returns (bool);\r\n    function transferFrom(address, address, uint) external returns (bool);\r\n    function deposit() external payable;\r\n    function withdraw(uint) external;\r\n}\r\ninterface IBalancerRouter {\r\n    function smartSwapExactIn(TokenInterface tokenIn, TokenInterface tokenOut, uint totalAmountIn,\r\n                              uint minTotalAmountOut, uint nPools)   external returns (uint);\r\n}\r\n\r\n// Uniswap\r\ninterface UniswapV2Router {\r\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\r\n        external\r\n        payable\r\n        returns (uint[] memory amounts);\r\n     function swapExactTokensForTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint[] memory amounts);\r\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\r\n        external\r\n        returns (uint[] memory amounts);\r\n    function swapTokensForExactTokens(\r\n        uint amountOut,\r\n        uint amountInMax,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint[] memory amounts);\r\n}\r\n\r\n// WETH\r\ninterface WETH9 {\r\n    function deposit() external payable;\r\n    function withdraw(uint wad) external;\r\n}\r\n\r\n// GasToken\r\ninterface IGasToken {\r\n    function mint(uint256 value) external;\r\n    function freeUpTo(uint256 value) external returns (uint256);\r\n}\r\n\r\ninterface ILiquidity {\r\n    function borrow(address _token, uint256 _amount, bytes calldata _data) external;\r\n}\r\n\r\n// -- library -- //\r\nlibrary SafeMath {\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        return c;\r\n    }\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\nlibrary Address {\r\n    function isContract(address account) internal view returns (bool) {\r\n        bytes32 codehash;\r\n        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\r\n        assembly { codehash := extcodehash(account) }\r\n        return (codehash != accountHash && codehash != 0x0);\r\n    }\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n        (bool success, ) = recipient.call{value:amount}(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n}\r\n\r\nlibrary SafeERC20 {\r\n    using SafeMath for uint256;\r\n    using Address for address;\r\n\r\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\r\n    }\r\n\r\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\r\n    }\r\n\r\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\r\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\r\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\r\n        );\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\r\n    }\r\n\r\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \"SafeERC20: decreased allowance below zero\");\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n    function callOptionalReturn(IERC20 token, bytes memory data) private {\r\n        require(address(token).isContract(), \"SafeERC20: call to non-contract\");\r\n        (bool success, bytes memory returndata) = address(token).call(data);\r\n        require(success, \"SafeERC20: low-level call failed\");\r\n        if (returndata.length > 0) {\r\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\r\n        }\r\n    }\r\n}\r\n\r\nlibrary address_make_payable {\r\n   function make_payable(address x) internal pure returns (address payable) {\r\n      return address(uint160(x));\r\n   }\r\n}","ABI":"[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"protocol\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token_in\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token_out\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"in_amount\",\"type\":\"uint256\"}],\"name\":\"ExchangeBase\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"protocol\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token_in\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token_out\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"in_amount\",\"type\":\"uint256\"}],\"name\":\"IBTCSwapExchange\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"protocol\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token_in\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token_out\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"in_amount\",\"type\":\"uint256\"}],\"name\":\"IBalancerExchange\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"protocol\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token_in\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token_out\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"in_amount\",\"type\":\"uint256\"}],\"name\":\"IComponentExchange\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"protocol\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token_in\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token_out\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"in_amount\",\"type\":\"uint256\"}],\"name\":\"ICurveFiExchange\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"protocol\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token_in\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token_out\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"in_amount\",\"type\":\"uint256\"}],\"name\":\"ICurveFiExchangeUnderlying\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"protocol\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token_in\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token_out\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"in_amount\",\"type\":\"uint256\"}],\"name\":\"IDODOExchange\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"protocol\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token_in\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token_out\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"in_amount\",\"type\":\"uint256\"}],\"name\":\"IStableSwapExchange\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"protocol\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token_in\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token_out\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"in_amount\",\"type\":\"uint256\"}],\"name\":\"IUniswapExchange\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"WETHToETH\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"repay_amount\",\"type\":\"uint256\"}],\"name\":\"callFunction\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token_want\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token_media\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"protocol1\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"protocol2\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"in_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"free_value\",\"type\":\"uint256\"}],\"name\":\"execute\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"freeGas\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"functionId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"protocol\",\"type\":\"address\"}],\"name\":\"getFunctionId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getGasTokenV2Address\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getKeeperDaoAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getSuperMan\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"getTokenBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"protocol\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"getTokenId\",\"outputs\":[{\"internalType\":\"int128\",\"name\":\"\",\"type\":\"int128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getUniswapAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"initiateFlashLoan\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"operation\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"protocol\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"setFunctionId\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"new_address\",\"type\":\"address\"}],\"name\":\"setGasTokenV2Address\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"tof\",\"type\":\"bool\"}],\"name\":\"setIfGastoken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"tof\",\"type\":\"bool\"}],\"name\":\"setIfTurnout\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"new_address\",\"type\":\"address\"}],\"name\":\"setKeeperDaoAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"protocol\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"int128\",\"name\":\"id\",\"type\":\"int128\"}],\"name\":\"setTokenID\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"new_address\",\"type\":\"address\"}],\"name\":\"setUniswapAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"storeGas\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"tokenId\",\"outputs\":[{\"internalType\":\"int128\",\"name\":\"\",\"type\":\"int128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferETH\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"new_owner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"turnOutETH\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"turnOutToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"uniswapTokensForETH\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]","ContractName":"WyArbiV3","CompilerVersion":"v0.7.4+commit.3f05b770","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"ipfs://41cd156589ae2ee72a0ecd0e8b8843b1379b153d8ad40128dc7500bff05486c7"}]}