{"status":"1","message":"OK","result":[{"SourceCode":"// Dependency file: @openzeppelin/contracts/token/ERC20/IERC20.sol\r\n\r\n// SPDX-License-Identifier: MIT\r\n\r\n// pragma solidity >=0.6.0 <0.8.0;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n\r\n// Dependency file: contracts/interfaces/IERC3156FlashBorrower.sol\r\n\r\n// pragma solidity >=0.6.0 <=0.8.0;\r\n\r\n\r\ninterface IERC3156FlashBorrower {\r\n\r\n    /**\r\n     * @dev Receive a flash loan.\r\n     * @param initiator The initiator of the loan.\r\n     * @param token The loan currency.\r\n     * @param amount The amount of tokens lent.\r\n     * @param fee The additional amount of tokens to repay.\r\n     * @param data Arbitrary data structure, intended to contain user-defined parameters.\r\n     * @return The keccak256 hash of \"ERC3156FlashBorrower.onFlashLoan\"\r\n     */\r\n    function onFlashLoan(\r\n        address initiator,\r\n        address token,\r\n        uint256 amount,\r\n        uint256 fee,\r\n        bytes calldata data\r\n    ) external returns (bytes32);\r\n}\r\n\r\n\r\n// Dependency file: contracts/interfaces/IERC3156FlashLender.sol\r\n\r\n// pragma solidity >=0.6.0 <=0.8.0;\r\n// import \"contracts/interfaces/IERC3156FlashBorrower.sol\";\r\n\r\n\r\ninterface IERC3156FlashLender {\r\n\r\n    /**\r\n     * @dev The amount of currency available to be lended.\r\n     * @param token The loan currency.\r\n     * @return The amount of `token` that can be borrowed.\r\n     */\r\n    function maxFlashLoan(\r\n        address token\r\n    ) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev The fee to be charged for a given loan.\r\n     * @param token The loan currency.\r\n     * @param amount The amount of tokens lent.\r\n     * @return The amount of `token` to be charged for the loan, on top of the returned principal.\r\n     */\r\n    function flashFee(\r\n        address token,\r\n        uint256 amount\r\n    ) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Initiate a flash loan.\r\n     * @param receiver The receiver of the tokens in the loan, and the receiver of the callback.\r\n     * @param token The loan currency.\r\n     * @param amount The amount of tokens lent.\r\n     * @param data Arbitrary data structure, intended to contain user-defined parameters.\r\n     */\r\n    function flashLoan(\r\n        IERC3156FlashBorrower receiver,\r\n        address token,\r\n        uint256 amount,\r\n        bytes calldata data\r\n    ) external returns (bool);\r\n}\r\n\r\n// Root file: contracts/FlashBorrower.sol\r\n\r\npragma solidity >=0.6.5 <0.8.0;\r\n\r\n// import \"/Users/sg99022ml/Desktop/chfry-protocol-internal/node_modules/@openzeppelin/contracts/token/ERC20/IERC20.sol\";\r\n// import \"contracts/interfaces/IERC3156FlashBorrower.sol\";\r\n// import \"contracts/interfaces/IERC3156FlashLender.sol\";\r\n\r\n//  FlashLoan DEMO\r\ncontract FlashBorrower is IERC3156FlashBorrower {\r\n    enum Action {NORMAL, STEAL, REENTER}\r\n\r\n    IERC3156FlashLender lender;\r\n\r\n    uint256 public flashBalance;\r\n    address public flashInitiator;\r\n    address public flashToken;\r\n    uint256 public flashAmount;\r\n    uint256 public flashFee;\r\n\r\n    address public admin;\r\n\r\n    constructor(address lender_) public {\r\n        admin = msg.sender;\r\n        lender = IERC3156FlashLender(lender_);\r\n    }\r\n    \r\n    function setLender(address _lender) external{\r\n        require(msg.sender == admin,'!admin');\r\n        lender = IERC3156FlashLender(_lender);\r\n    }\r\n\r\n    /// @dev ERC-3156 Flash loan callback\r\n    function onFlashLoan(\r\n        address initiator,\r\n        address token,\r\n        uint256 amount,\r\n        uint256 fee,\r\n        bytes calldata data\r\n    ) external override returns (bytes32) {\r\n        require(\r\n            msg.sender == address(lender),\r\n            \"FlashBorrower: Untrusted lender\"\r\n        );\r\n        require(\r\n            initiator == address(this),\r\n            \"FlashBorrower: External loan initiator\"\r\n        );\r\n        Action action = abi.decode(data, (Action)); // Use this to unpack arbitrary data\r\n        flashInitiator = initiator;\r\n        flashToken = token;\r\n        flashAmount = amount;\r\n        flashFee = fee;\r\n        if (action == Action.NORMAL) {\r\n            flashBalance = IERC20(token).balanceOf(address(this));\r\n        } else if (action == Action.STEAL) {\r\n            // do nothing\r\n        } else if (action == Action.REENTER) {\r\n            flashBorrow(token, amount * 2);\r\n        }\r\n        return keccak256(\"ERC3156FlashBorrower.onFlashLoan\");\r\n    }\r\n\r\n    function flashBorrow(address token, uint256 amount) public {\r\n        // Use this to pack arbitrary data to `onFlashLoan`\r\n        bytes memory data = abi.encode(Action.NORMAL);\r\n        approveRepayment(token, amount);\r\n        lender.flashLoan(this, token, amount, data);\r\n    }\r\n\r\n    function flashBorrowAndSteal(address token, uint256 amount) public {\r\n        // Use this to pack arbitrary data to `onFlashLoan`\r\n        bytes memory data = abi.encode(Action.STEAL);\r\n        lender.flashLoan(this, token, amount, data);\r\n    }\r\n\r\n    function flashBorrowAndReenter(address token, uint256 amount) public {\r\n        // Use this to pack arbitrary data to `onFlashLoan`\r\n        bytes memory data = abi.encode(Action.REENTER);\r\n        approveRepayment(token, amount);\r\n        lender.flashLoan(this, token, amount, data);\r\n    }\r\n\r\n    function approveRepayment(address token, uint256 amount) public {\r\n        uint256 _allowance =\r\n            IERC20(token).allowance(address(this), address(lender));\r\n        uint256 _fee = lender.flashFee(token, amount);\r\n        uint256 _repayment = amount + _fee;\r\n        IERC20(token).approve(address(lender), 0);\r\n        IERC20(token).approve(address(lender), _allowance + _repayment);\r\n    }\r\n\r\n    function transferFromAdmin(\r\n\t\taddress _token,\r\n\t\taddress _receiver,\r\n\t\tuint256 _amount\r\n\t) external  {\r\n        require(msg.sender == admin,'!admin');\r\n\t\tIERC20(_token).transfer(_receiver, _amount);\r\n\t}\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"lender_\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"admin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approveRepayment\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"flashAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"flashBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"flashBorrow\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"flashBorrowAndReenter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"flashBorrowAndSteal\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"flashFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"flashInitiator\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"flashToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"initiator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"onFlashLoan\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_lender\",\"type\":\"address\"}],\"name\":\"setLender\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_receiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"transferFromAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"FlashBorrower","CompilerVersion":"v0.6.12+commit.27d51765","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"00000000000000000000000036951ad303068f7965e4df62a730e3338acf0504","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"ipfs://ef0c071f5efda964811bd2ed584cabf2a62a1c226992db82172244e05f746a0e"}]}