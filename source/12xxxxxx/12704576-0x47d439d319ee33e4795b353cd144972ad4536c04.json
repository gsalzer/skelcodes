{"status":"1","message":"OK","result":[{"SourceCode":"/*\r\n    .'''''''''''..     ..''''''''''''''''..       ..'''''''''''''''..\r\n    .;;;;;;;;;;;'.   .';;;;;;;;;;;;;;;;;;,.     .,;;;;;;;;;;;;;;;;;,.\r\n    .;;;;;;;;;;,.   .,;;;;;;;;;;;;;;;;;;;,.    .,;;;;;;;;;;;;;;;;;;,.\r\n    .;;;;;;;;;,.   .,;;;;;;;;;;;;;;;;;;;;,.   .;;;;;;;;;;;;;;;;;;;;,.\r\n    ';;;;;;;;'.  .';;;;;;;;;;;;;;;;;;;;;;,. .';;;;;;;;;;;;;;;;;;;;;,.\r\n    ';;;;;,..   .';;;;;;;;;;;;;;;;;;;;;;;,..';;;;;;;;;;;;;;;;;;;;;;,.\r\n    ......     .';;;;;;;;;;;;;,'''''''''''.,;;;;;;;;;;;;;,'''''''''..\r\n              .,;;;;;;;;;;;;;.           .,;;;;;;;;;;;;;.\r\n             .,;;;;;;;;;;;;,.           .,;;;;;;;;;;;;,.\r\n            .,;;;;;;;;;;;;,.           .,;;;;;;;;;;;;,.\r\n           .,;;;;;;;;;;;;,.           .;;;;;;;;;;;;;,.     .....\r\n          .;;;;;;;;;;;;;'.         ..';;;;;;;;;;;;;'.    .',;;;;,'.\r\n        .';;;;;;;;;;;;;'.         .';;;;;;;;;;;;;;'.   .';;;;;;;;;;.\r\n       .';;;;;;;;;;;;;'.         .';;;;;;;;;;;;;;'.    .;;;;;;;;;;;,.\r\n      .,;;;;;;;;;;;;;'...........,;;;;;;;;;;;;;;.      .;;;;;;;;;;;,.\r\n     .,;;;;;;;;;;;;,..,;;;;;;;;;;;;;;;;;;;;;;;,.       ..;;;;;;;;;,.\r\n    .,;;;;;;;;;;;;,. .,;;;;;;;;;;;;;;;;;;;;;;,.          .',;;;,,..\r\n   .,;;;;;;;;;;;;,.  .,;;;;;;;;;;;;;;;;;;;;;,.              ....\r\n    ..',;;;;;;;;,.   .,;;;;;;;;;;;;;;;;;;;;,.\r\n       ..',;;;;'.    .,;;;;;;;;;;;;;;;;;;;'.\r\n          ...'..     .';;;;;;;;;;;;;;,,,'.\r\n                       ...............\r\n*/\r\n\r\n// https://github.com/trusttoken/smart-contracts\r\n// Dependency file: @openzeppelin/contracts/token/ERC20/IERC20.sol\r\n\r\n// SPDX-License-Identifier: MIT\r\n\r\n// pragma solidity ^0.6.0;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n\r\n// Dependency file: @openzeppelin/contracts/math/SafeMath.sol\r\n\r\n\r\n// pragma solidity ^0.6.0;\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts with custom message when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n\r\n// Dependency file: @openzeppelin/contracts/utils/Address.sol\r\n\r\n\r\n// pragma solidity ^0.6.2;\r\n\r\n/**\r\n * @dev Collection of functions related to the address type\r\n */\r\nlibrary Address {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     *\r\n     * Among others, `isContract` will return false for the following\r\n     * types of addresses:\r\n     *\r\n     *  - an externally-owned account\r\n     *  - a contract in construction\r\n     *  - an address where a contract will be created\r\n     *  - an address where a contract lived, but was destroyed\r\n     * ====\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // This method relies in extcodesize, which returns 0 for contracts in\r\n        // construction, since the code is only stored at the end of the\r\n        // constructor execution.\r\n\r\n        uint256 size;\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly { size := extcodesize(account) }\r\n        return size > 0;\r\n    }\r\n\r\n    /**\r\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * IMPORTANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     */\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\r\n        (bool success, ) = recipient.call{ value: amount }(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n\r\n    /**\r\n     * @dev Performs a Solidity function call using a low level `call`. A\r\n     * plain`call` is an unsafe replacement for a function call: use this\r\n     * function instead.\r\n     *\r\n     * If `target` reverts with a revert reason, it is bubbled up by this\r\n     * function (like regular Solidity function calls).\r\n     *\r\n     * Returns the raw returned data. To convert to the expected return value,\r\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `target` must be a contract.\r\n     * - calling `target` with `data` must not revert.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n      return functionCall(target, data, \"Address: low-level call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\r\n     * `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\r\n        return _functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but also transferring `value` wei to `target`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the calling contract must have an ETH balance of at least `value`.\r\n     * - the called Solidity function must be `payable`.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\r\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\r\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\r\n        return _functionCallWithValue(target, data, value, errorMessage);\r\n    }\r\n\r\n    function _functionCallWithValue(address target, bytes memory data, uint256 weiValue, string memory errorMessage) private returns (bytes memory) {\r\n        require(isContract(target), \"Address: call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.call{ value: weiValue }(data);\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            // Look for revert reason and bubble it up if present\r\n            if (returndata.length > 0) {\r\n                // The easiest way to bubble the revert reason is using memory via assembly\r\n\r\n                // solhint-disable-next-line no-inline-assembly\r\n                assembly {\r\n                    let returndata_size := mload(returndata)\r\n                    revert(add(32, returndata), returndata_size)\r\n                }\r\n            } else {\r\n                revert(errorMessage);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n\r\n// Dependency file: @openzeppelin/contracts/token/ERC20/SafeERC20.sol\r\n\r\n\r\n// pragma solidity ^0.6.0;\r\n\r\n// import \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\r\n// import \"@openzeppelin/contracts/math/SafeMath.sol\";\r\n// import \"@openzeppelin/contracts/utils/Address.sol\";\r\n\r\n/**\r\n * @title SafeERC20\r\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\r\n * contract returns false). Tokens that return no value (and instead revert or\r\n * throw on failure) are also supported, non-reverting calls are assumed to be\r\n * successful.\r\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\r\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\r\n */\r\nlibrary SafeERC20 {\r\n    using SafeMath for uint256;\r\n    using Address for address;\r\n\r\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\r\n    }\r\n\r\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\r\n    }\r\n\r\n    /**\r\n     * @dev Deprecated. This function has issues similar to the ones found in\r\n     * {IERC20-approve}, and its usage is discouraged.\r\n     *\r\n     * Whenever possible, use {safeIncreaseAllowance} and\r\n     * {safeDecreaseAllowance} instead.\r\n     */\r\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\r\n        // safeApprove should only be called when setting an initial allowance,\r\n        // or when resetting it to zero. To increase and decrease it, use\r\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\r\n        // solhint-disable-next-line max-line-length\r\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\r\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\r\n        );\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\r\n    }\r\n\r\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \"SafeERC20: decreased allowance below zero\");\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    /**\r\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\r\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\r\n     * @param token The token targeted by the call.\r\n     * @param data The call data (encoded using abi.encode or one of its variants).\r\n     */\r\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\r\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\r\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\r\n        // the target address contains contract code and also asserts for success in the low-level call.\r\n\r\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\r\n        if (returndata.length > 0) { // Return data is optional\r\n            // solhint-disable-next-line max-line-length\r\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\r\n        }\r\n    }\r\n}\r\n\r\n\r\n// Dependency file: @openzeppelin/contracts/GSN/Context.sol\r\n\r\n\r\n// pragma solidity ^0.6.0;\r\n\r\n/*\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with GSN meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address payable) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes memory) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n\r\n// Dependency file: contracts/common/Initializable.sol\r\n\r\n// Copied from https://github.com/OpenZeppelin/openzeppelin-contracts-ethereum-package/blob/v3.0.0/contracts/Initializable.sol\r\n// Added public isInitialized() view of private initialized bool.\r\n\r\n// pragma solidity 0.6.10;\r\n\r\n/**\r\n * @title Initializable\r\n *\r\n * @dev Helper contract to support initializer functions. To use it, replace\r\n * the constructor with a function that has the `initializer` modifier.\r\n * WARNING: Unlike constructors, initializer functions must be manually\r\n * invoked. This applies both to deploying an Initializable contract, as well\r\n * as extending an Initializable contract via inheritance.\r\n * WARNING: When used with inheritance, manual care must be taken to not invoke\r\n * a parent initializer twice, or ensure that all initializers are idempotent,\r\n * because this is not dealt with automatically as with constructors.\r\n */\r\ncontract Initializable {\r\n    /**\r\n     * @dev Indicates that the contract has been initialized.\r\n     */\r\n    bool private initialized;\r\n\r\n    /**\r\n     * @dev Indicates that the contract is in the process of being initialized.\r\n     */\r\n    bool private initializing;\r\n\r\n    /**\r\n     * @dev Modifier to use in the initializer function of a contract.\r\n     */\r\n    modifier initializer() {\r\n        require(initializing || isConstructor() || !initialized, \"Contract instance has already been initialized\");\r\n\r\n        bool isTopLevelCall = !initializing;\r\n        if (isTopLevelCall) {\r\n            initializing = true;\r\n            initialized = true;\r\n        }\r\n\r\n        _;\r\n\r\n        if (isTopLevelCall) {\r\n            initializing = false;\r\n        }\r\n    }\r\n\r\n    /// @dev Returns true if and only if the function is running in the constructor\r\n    function isConstructor() private view returns (bool) {\r\n        // extcodesize checks the size of the code stored in an address, and\r\n        // address returns the current address. Since the code is still not\r\n        // deployed when running a constructor, any checks on its code size will\r\n        // yield zero, making it an effective way to detect if a contract is\r\n        // under construction or not.\r\n        address self = address(this);\r\n        uint256 cs;\r\n        assembly {\r\n            cs := extcodesize(self)\r\n        }\r\n        return cs == 0;\r\n    }\r\n\r\n    /**\r\n     * @dev Return true if and only if the contract has been initialized\r\n     * @return whether the contract has been initialized\r\n     */\r\n    function isInitialized() public view returns (bool) {\r\n        return initialized;\r\n    }\r\n\r\n    // Reserved storage space to allow for layout changes in the future.\r\n    uint256[50] private ______gap;\r\n}\r\n\r\n\r\n// Dependency file: contracts/common/UpgradeableERC20.sol\r\n\r\n// pragma solidity 0.6.10;\r\n\r\n// import {Address} from \"@openzeppelin/contracts/utils/Address.sol\";\r\n// import {Context} from \"@openzeppelin/contracts/GSN/Context.sol\";\r\n// import {IERC20} from \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\r\n// import {SafeMath} from \"@openzeppelin/contracts/math/SafeMath.sol\";\r\n\r\n// import {Initializable} from \"contracts/common/Initializable.sol\";\r\n\r\n/**\r\n * @dev Implementation of the {IERC20} interface.\r\n *\r\n * This implementation is agnostic to the way tokens are created. This means\r\n * that a supply mechanism has to be added in a derived contract using {_mint}.\r\n * For a generic mechanism see {ERC20PresetMinterPauser}.\r\n *\r\n * TIP: For a detailed writeup see our guide\r\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\r\n * to implement supply mechanisms].\r\n *\r\n * We have followed general OpenZeppelin guidelines: functions revert instead\r\n * of returning `false` on failure. This behavior is nonetheless conventional\r\n * and does not conflict with the expectations of ERC20 applications.\r\n *\r\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\r\n * This allows applications to reconstruct the allowance for all accounts just\r\n * by listening to said events. Other implementations of the EIP may not emit\r\n * these events, as it isn't required by the specification.\r\n *\r\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\r\n * functions have been added to mitigate the well-known issues around setting\r\n * allowances. See {IERC20-approve}.\r\n */\r\ncontract ERC20 is Initializable, Context, IERC20 {\r\n    using SafeMath for uint256;\r\n    using Address for address;\r\n\r\n    mapping(address => uint256) private _balances;\r\n\r\n    mapping(address => mapping(address => uint256)) private _allowances;\r\n\r\n    uint256 private _totalSupply;\r\n\r\n    string private _name;\r\n    string private _symbol;\r\n    uint8 private _decimals;\r\n\r\n    /**\r\n     * @dev Sets the values for {name} and {symbol}, initializes {decimals} with\r\n     * a default value of 18.\r\n     *\r\n     * To select a different value for {decimals}, use {_setupDecimals}.\r\n     *\r\n     * All three of these values are immutable: they can only be set once during\r\n     * construction.\r\n     */\r\n    function __ERC20_initialize(string memory name, string memory symbol) internal initializer {\r\n        _name = name;\r\n        _symbol = symbol;\r\n        _decimals = 18;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the name of the token.\r\n     */\r\n    function name() public view returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the symbol of the token, usually a shorter version of the\r\n     * name.\r\n     */\r\n    function symbol() public view returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of decimals used to get its user representation.\r\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\r\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\r\n     *\r\n     * Tokens usually opt for a value of 18, imitating the relationship between\r\n     * Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is\r\n     * called.\r\n     *\r\n     * NOTE: This information is only used for _display_ purposes: it in\r\n     * no way affects any of the arithmetic of the contract, including\r\n     * {IERC20-balanceOf} and {IERC20-transfer}.\r\n     */\r\n    function decimals() public virtual view returns (uint8) {\r\n        return _decimals;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-totalSupply}.\r\n     */\r\n    function totalSupply() public override view returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-balanceOf}.\r\n     */\r\n    function balanceOf(address account) public override view returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-transfer}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `recipient` cannot be the zero address.\r\n     * - the caller must have a balance of at least `amount`.\r\n     */\r\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\r\n        _transfer(_msgSender(), recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-allowance}.\r\n     */\r\n    function allowance(address owner, address spender) public virtual override view returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-approve}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\r\n        _approve(_msgSender(), spender, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-transferFrom}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance. This is not\r\n     * required by the EIP. See the note at the beginning of {ERC20};\r\n     *\r\n     * Requirements:\r\n     * - `sender` and `recipient` cannot be the zero address.\r\n     * - `sender` must have a balance of at least `amount`.\r\n     * - the caller must have allowance for ``sender``'s tokens of at least\r\n     * `amount`.\r\n     */\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) public virtual override returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \"ERC20: transfer amount exceeds allowance\"));\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\r\n     *\r\n     * This is an alternative to {approve} that can be used as a mitigation for\r\n     * problems described in {IERC20-approve}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\r\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\r\n     *\r\n     * This is an alternative to {approve} that can be used as a mitigation for\r\n     * problems described in {IERC20-approve}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     * - `spender` must have allowance for the caller of at least\r\n     * `subtractedValue`.\r\n     */\r\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\r\n        _approve(\r\n            _msgSender(),\r\n            spender,\r\n            _allowances[_msgSender()][spender].sub(subtractedValue, \"ERC20: decreased allowance below zero\")\r\n        );\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\r\n     *\r\n     * This is internal function is equivalent to {transfer}, and can be used to\r\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `sender` cannot be the zero address.\r\n     * - `recipient` cannot be the zero address.\r\n     * - `sender` must have a balance of at least `amount`.\r\n     */\r\n    function _transfer(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) internal virtual {\r\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\r\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\r\n\r\n        _beforeTokenTransfer(sender, recipient, amount);\r\n\r\n        _balances[sender] = _balances[sender].sub(amount, \"ERC20: transfer amount exceeds balance\");\r\n        _balances[recipient] = _balances[recipient].add(amount);\r\n        emit Transfer(sender, recipient, amount);\r\n    }\r\n\r\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\r\n     * the total supply.\r\n     *\r\n     * Emits a {Transfer} event with `from` set to the zero address.\r\n     *\r\n     * Requirements\r\n     *\r\n     * - `to` cannot be the zero address.\r\n     */\r\n    function _mint(address account, uint256 amount) internal virtual {\r\n        require(account != address(0), \"ERC20: mint to the zero address\");\r\n\r\n        _beforeTokenTransfer(address(0), account, amount);\r\n\r\n        _totalSupply = _totalSupply.add(amount);\r\n        _balances[account] = _balances[account].add(amount);\r\n        emit Transfer(address(0), account, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Destroys `amount` tokens from `account`, reducing the\r\n     * total supply.\r\n     *\r\n     * Emits a {Transfer} event with `to` set to the zero address.\r\n     *\r\n     * Requirements\r\n     *\r\n     * - `account` cannot be the zero address.\r\n     * - `account` must have at least `amount` tokens.\r\n     */\r\n    function _burn(address account, uint256 amount) internal virtual {\r\n        require(account != address(0), \"ERC20: burn from the zero address\");\r\n\r\n        _beforeTokenTransfer(account, address(0), amount);\r\n\r\n        _balances[account] = _balances[account].sub(amount, \"ERC20: burn amount exceeds balance\");\r\n        _totalSupply = _totalSupply.sub(amount);\r\n        emit Transfer(account, address(0), amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the `owner`s tokens.\r\n     *\r\n     * This is internal function is equivalent to `approve`, and can be used to\r\n     * e.g. set automatic allowances for certain subsystems, etc.\r\n     *\r\n     * Emits an {Approval} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `owner` cannot be the zero address.\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function _approve(\r\n        address owner,\r\n        address spender,\r\n        uint256 amount\r\n    ) internal virtual {\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Sets {decimals} to a value other than the default one of 18.\r\n     *\r\n     * WARNING: This function should only be called from the constructor. Most\r\n     * applications that interact with token contracts will not expect\r\n     * {decimals} to ever change, and may work incorrectly if it does.\r\n     */\r\n    function _setupDecimals(uint8 decimals_) internal {\r\n        _decimals = decimals_;\r\n    }\r\n\r\n    /**\r\n     * @dev Hook that is called before any transfer of tokens. This includes\r\n     * minting and burning.\r\n     *\r\n     * Calling conditions:\r\n     *\r\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\r\n     * will be to transferred to `to`.\r\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\r\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\r\n     * - `from` and `to` are never both zero.\r\n     *\r\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\r\n     */\r\n    function _beforeTokenTransfer(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) internal virtual {}\r\n\r\n    function updateNameAndSymbol(string memory __name, string memory __symbol) internal {\r\n        _name = __name;\r\n        _symbol = __symbol;\r\n    }\r\n}\r\n\r\n\r\n// Dependency file: contracts/common/UpgradeableClaimable.sol\r\n\r\n// pragma solidity 0.6.10;\r\n\r\n// import {Context} from \"@openzeppelin/contracts/GSN/Context.sol\";\r\n\r\n// import {Initializable} from \"contracts/common/Initializable.sol\";\r\n\r\n/**\r\n * @title UpgradeableClaimable\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. Since\r\n * this contract combines Claimable and UpgradableOwnable contracts, ownership\r\n * can be later change via 2 step method {transferOwnership} and {claimOwnership}\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\ncontract UpgradeableClaimable is Initializable, Context {\r\n    address private _owner;\r\n    address private _pendingOwner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting a custom initial owner of choice.\r\n     * @param __owner Initial owner of contract to be set.\r\n     */\r\n    function initialize(address __owner) internal initializer {\r\n        _owner = __owner;\r\n        emit OwnershipTransferred(address(0), __owner);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the pending owner.\r\n     */\r\n    function pendingOwner() public view returns (address) {\r\n        return _pendingOwner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Modifier throws if called by any account other than the pendingOwner.\r\n     */\r\n    modifier onlyPendingOwner() {\r\n        require(msg.sender == _pendingOwner, \"Ownable: caller is not the pending owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Allows the current owner to set the pendingOwner address.\r\n     * @param newOwner The address to transfer ownership to.\r\n     */\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        _pendingOwner = newOwner;\r\n    }\r\n\r\n    /**\r\n     * @dev Allows the pendingOwner address to finalize the transfer.\r\n     */\r\n    function claimOwnership() public onlyPendingOwner {\r\n        emit OwnershipTransferred(_owner, _pendingOwner);\r\n        _owner = _pendingOwner;\r\n        _pendingOwner = address(0);\r\n    }\r\n}\r\n\r\n\r\n// Dependency file: contracts/truefi2/interface/ITrueStrategy.sol\r\n\r\n// pragma solidity 0.6.10;\r\n\r\ninterface ITrueStrategy {\r\n    /**\r\n     * @dev put `amount` of tokens into the strategy\r\n     * As a result of the deposit value of the strategy should increase by at least 98% of amount\r\n     */\r\n    function deposit(uint256 amount) external;\r\n\r\n    /**\r\n     * @dev pull at least `minAmount` of tokens from strategy and transfer to the pool\r\n     */\r\n    function withdraw(uint256 minAmount) external;\r\n\r\n    /**\r\n     * @dev withdraw everything from strategy\r\n     * As a result of calling withdrawAll(),at least 98% of strategy's value should be transferred to the pool\r\n     * Value must become 0\r\n     */\r\n    function withdrawAll() external;\r\n\r\n    /// @dev value evaluated to Pool's tokens\r\n    function value() external view returns (uint256);\r\n}\r\n\r\n\r\n// Dependency file: contracts/truefi2/interface/ILoanToken2.sol\r\n\r\n// pragma solidity 0.6.10;\r\n\r\n// import {IERC20} from \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\r\n// import {ERC20} from \"contracts/common/UpgradeableERC20.sol\";\r\n// import {ITrueFiPool2} from \"contracts/truefi2/interface/ITrueFiPool2.sol\";\r\n\r\ninterface ILoanToken2 is IERC20 {\r\n    enum Status {Awaiting, Funded, Withdrawn, Settled, Defaulted, Liquidated}\r\n\r\n    function borrower() external view returns (address);\r\n\r\n    function amount() external view returns (uint256);\r\n\r\n    function term() external view returns (uint256);\r\n\r\n    function apy() external view returns (uint256);\r\n\r\n    function start() external view returns (uint256);\r\n\r\n    function lender() external view returns (address);\r\n\r\n    function debt() external view returns (uint256);\r\n\r\n    function pool() external view returns (ITrueFiPool2);\r\n\r\n    function profit() external view returns (uint256);\r\n\r\n    function status() external view returns (Status);\r\n\r\n    function getParameters()\r\n        external\r\n        view\r\n        returns (\r\n            uint256,\r\n            uint256,\r\n            uint256\r\n        );\r\n\r\n    function fund() external;\r\n\r\n    function withdraw(address _beneficiary) external;\r\n\r\n    function settle() external;\r\n\r\n    function enterDefault() external;\r\n\r\n    function liquidate() external;\r\n\r\n    function redeem(uint256 _amount) external;\r\n\r\n    function repay(address _sender, uint256 _amount) external;\r\n\r\n    function repayInFull(address _sender) external;\r\n\r\n    function reclaim() external;\r\n\r\n    function allowTransfer(address account, bool _status) external;\r\n\r\n    function repaid() external view returns (uint256);\r\n\r\n    function isRepaid() external view returns (bool);\r\n\r\n    function balance() external view returns (uint256);\r\n\r\n    function value(uint256 _balance) external view returns (uint256);\r\n\r\n    function token() external view returns (ERC20);\r\n\r\n    function version() external pure returns (uint8);\r\n}\r\n\r\n//interface IContractWithPool {\r\n//    function pool() external view returns (ITrueFiPool2);\r\n//}\r\n//\r\n//// Had to be split because of multiple inheritance problem\r\n//interface ILoanToken2 is ILoanToken, IContractWithPool {\r\n//\r\n//}\r\n\r\n\r\n// Dependency file: contracts/truefi2/interface/ITrueLender2.sol\r\n\r\n// pragma solidity 0.6.10;\r\n\r\n// import {ITrueFiPool2} from \"contracts/truefi2/interface/ITrueFiPool2.sol\";\r\n// import {ILoanToken2} from \"contracts/truefi2/interface/ILoanToken2.sol\";\r\n\r\ninterface ITrueLender2 {\r\n    // @dev calculate overall value of the pools\r\n    function value(ITrueFiPool2 pool) external view returns (uint256);\r\n\r\n    // @dev distribute a basket of tokens for exiting user\r\n    function distribute(\r\n        address recipient,\r\n        uint256 numerator,\r\n        uint256 denominator\r\n    ) external;\r\n\r\n    function transferAllLoanTokens(ILoanToken2 loan, address recipient) external;\r\n}\r\n\r\n\r\n// Dependency file: contracts/truefi2/interface/IERC20WithDecimals.sol\r\n\r\n// pragma solidity 0.6.10;\r\n\r\n// import {IERC20} from \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\r\n\r\ninterface IERC20WithDecimals is IERC20 {\r\n    function decimals() external view returns (uint256);\r\n}\r\n\r\n\r\n// Dependency file: contracts/truefi2/interface/ITrueFiPoolOracle.sol\r\n\r\n// pragma solidity 0.6.10;\r\n\r\n// import {IERC20WithDecimals} from \"contracts/truefi2/interface/IERC20WithDecimals.sol\";\r\n\r\n/**\r\n * @dev Oracle that converts any token to and from TRU\r\n * Used for liquidations and valuing of liquidated TRU in the pool\r\n */\r\ninterface ITrueFiPoolOracle {\r\n    // token address\r\n    function token() external view returns (IERC20WithDecimals);\r\n\r\n    // amount of tokens 1 TRU is worth\r\n    function truToToken(uint256 truAmount) external view returns (uint256);\r\n\r\n    // amount of TRU 1 token is worth\r\n    function tokenToTru(uint256 tokenAmount) external view returns (uint256);\r\n\r\n    // USD price of token with 18 decimals\r\n    function tokenToUsd(uint256 tokenAmount) external view returns (uint256);\r\n}\r\n\r\n\r\n// Dependency file: contracts/truefi2/interface/I1Inch3.sol\r\n\r\n// pragma solidity 0.6.10;\r\npragma experimental ABIEncoderV2;\r\n\r\ninterface I1Inch3 {\r\n    struct SwapDescription {\r\n        address srcToken;\r\n        address dstToken;\r\n        address srcReceiver;\r\n        address dstReceiver;\r\n        uint256 amount;\r\n        uint256 minReturnAmount;\r\n        uint256 flags;\r\n        bytes permit;\r\n    }\r\n\r\n    function swap(\r\n        address caller,\r\n        SwapDescription calldata desc,\r\n        bytes calldata data\r\n    )\r\n        external\r\n        returns (\r\n            uint256 returnAmount,\r\n            uint256 gasLeft,\r\n            uint256 chiSpent\r\n        );\r\n\r\n    function unoswap(\r\n        address srcToken,\r\n        uint256 amount,\r\n        uint256 minReturn,\r\n        bytes32[] calldata /* pools */\r\n    ) external payable returns (uint256 returnAmount);\r\n}\r\n\r\n\r\n// Dependency file: contracts/truefi2/interface/ISAFU.sol\r\n\r\n// pragma solidity 0.6.10;\r\n\r\ninterface ISAFU {\r\n    function poolDeficit(address pool) external view returns (uint256);\r\n}\r\n\r\n\r\n// Dependency file: contracts/truefi2/interface/ITrueFiPool2.sol\r\n\r\n// pragma solidity 0.6.10;\r\n\r\n// import {ERC20, IERC20} from \"contracts/common/UpgradeableERC20.sol\";\r\n// import {ITrueLender2, ILoanToken2} from \"contracts/truefi2/interface/ITrueLender2.sol\";\r\n// import {ITrueFiPoolOracle} from \"contracts/truefi2/interface/ITrueFiPoolOracle.sol\";\r\n// import {I1Inch3} from \"contracts/truefi2/interface/I1Inch3.sol\";\r\n// import {ISAFU} from \"contracts/truefi2/interface/ISAFU.sol\";\r\n\r\ninterface ITrueFiPool2 is IERC20 {\r\n    function initialize(\r\n        ERC20 _token,\r\n        ERC20 _stakingToken,\r\n        ITrueLender2 _lender,\r\n        I1Inch3 __1Inch,\r\n        ISAFU safu,\r\n        address __owner\r\n    ) external;\r\n\r\n    function token() external view returns (ERC20);\r\n\r\n    function oracle() external view returns (ITrueFiPoolOracle);\r\n\r\n    /**\r\n     * @dev Join the pool by depositing tokens\r\n     * @param amount amount of tokens to deposit\r\n     */\r\n    function join(uint256 amount) external;\r\n\r\n    /**\r\n     * @dev borrow from pool\r\n     * 1. Transfer TUSD to sender\r\n     * 2. Only lending pool should be allowed to call this\r\n     */\r\n    function borrow(uint256 amount) external;\r\n\r\n    /**\r\n     * @dev pay borrowed money back to pool\r\n     * 1. Transfer TUSD from sender\r\n     * 2. Only lending pool should be allowed to call this\r\n     */\r\n    function repay(uint256 currencyAmount) external;\r\n\r\n    /**\r\n     * @dev SAFU buys LoanTokens from the pool\r\n     */\r\n    function liquidate(ILoanToken2 loan) external;\r\n}\r\n\r\n\r\n// Dependency file: contracts/common/interface/IPauseableContract.sol\r\n\r\n\r\n// pragma solidity 0.6.10;\r\n\r\n/**\r\n * @dev interface to allow standard pause function\r\n */\r\ninterface IPauseableContract {\r\n    function setPauseStatus(bool pauseStatus) external;\r\n}\r\n\r\n\r\n// Dependency file: contracts/truefi/Log.sol\r\n\r\n/*\r\n * ABDK Math 64.64 Smart Contract Library.  Copyright © 2019 by ABDK Consulting.\r\n * Author: Mikhail Vladimirov <mikhail.vladimirov@gmail.com>\r\n */\r\n// pragma solidity 0.6.10;\r\n\r\n/**\r\n * Smart contract library of mathematical functions operating with signed\r\n * 64.64-bit fixed point numbers.  Signed 64.64-bit fixed point number is\r\n * basically a simple fraction whose numerator is signed 128-bit integer and\r\n * denominator is 2^64.  As long as denominator is always the same, there is no\r\n * need to store it, thus in Solidity signed 64.64-bit fixed point numbers are\r\n * represented by int128 type holding only the numerator.\r\n */\r\nlibrary ABDKMath64x64 {\r\n    /**\r\n     * Convert unsigned 256-bit integer number into signed 64.64-bit fixed point\r\n     * number.  Revert on overflow.\r\n     *\r\n     * @param x unsigned 256-bit integer number\r\n     * @return signed 64.64-bit fixed point number\r\n     */\r\n    function fromUInt(uint256 x) internal pure returns (int128) {\r\n        require(x <= 0x7FFFFFFFFFFFFFFF);\r\n        return int128(x << 64);\r\n    }\r\n\r\n    /**\r\n     * Calculate binary logarithm of x.  Revert if x <= 0.\r\n     *\r\n     * @param x signed 64.64-bit fixed point number\r\n     * @return signed 64.64-bit fixed point number\r\n     */\r\n    function log_2(int128 x) internal pure returns (int128) {\r\n        require(x > 0);\r\n\r\n        int256 msb = 0;\r\n        int256 xc = x;\r\n        if (xc >= 0x10000000000000000) {\r\n            xc >>= 64;\r\n            msb += 64;\r\n        }\r\n        if (xc >= 0x100000000) {\r\n            xc >>= 32;\r\n            msb += 32;\r\n        }\r\n        if (xc >= 0x10000) {\r\n            xc >>= 16;\r\n            msb += 16;\r\n        }\r\n        if (xc >= 0x100) {\r\n            xc >>= 8;\r\n            msb += 8;\r\n        }\r\n        if (xc >= 0x10) {\r\n            xc >>= 4;\r\n            msb += 4;\r\n        }\r\n        if (xc >= 0x4) {\r\n            xc >>= 2;\r\n            msb += 2;\r\n        }\r\n        if (xc >= 0x2) msb += 1; // No need to shift xc anymore\r\n\r\n        int256 result = (msb - 64) << 64;\r\n        uint256 ux = uint256(x) << uint256(127 - msb);\r\n        for (int256 bit = 0x8000000000000000; bit > 0; bit >>= 1) {\r\n            ux *= ux;\r\n            uint256 b = ux >> 255;\r\n            ux >>= 127 + b;\r\n            result += bit * int256(b);\r\n        }\r\n\r\n        return int128(result);\r\n    }\r\n\r\n    /**\r\n     * Calculate natural logarithm of x.  Revert if x <= 0.\r\n     *\r\n     * @param x signed 64.64-bit fixed point number\r\n     * @return signed 64.64-bit fixed point number\r\n     */\r\n    function ln(int128 x) internal pure returns (int128) {\r\n        require(x > 0);\r\n\r\n        return int128((uint256(log_2(x)) * 0xB17217F7D1CF79ABC9E3B39803F2F6AF) >> 128);\r\n    }\r\n}\r\n\r\n\r\n// Dependency file: contracts/truefi2/libraries/OneInchExchange.sol\r\n\r\n// pragma solidity 0.6.10;\r\n// pragma experimental ABIEncoderV2;\r\n\r\n// import {SafeMath} from \"@openzeppelin/contracts/math/SafeMath.sol\";\r\n// import {I1Inch3} from \"contracts/truefi2/interface/I1Inch3.sol\";\r\n// import {IERC20} from \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\r\n// import {SafeERC20} from \"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\";\r\n\r\ninterface IUniRouter {\r\n    function token0() external view returns (address);\r\n\r\n    function token1() external view returns (address);\r\n}\r\n\r\nlibrary OneInchExchange {\r\n    using SafeERC20 for IERC20;\r\n    using SafeMath for uint256;\r\n\r\n    uint256 constant ADDRESS_MASK = 0x000000000000000000000000ffffffffffffffffffffffffffffffffffffffff;\r\n    uint256 constant REVERSE_MASK = 0x8000000000000000000000000000000000000000000000000000000000000000;\r\n\r\n    event Swapped(I1Inch3.SwapDescription description, uint256 returnedAmount);\r\n\r\n    /**\r\n     * @dev Forward data to 1Inch contract\r\n     * @param _1inchExchange address of 1Inch (currently 0x11111112542d85b3ef69ae05771c2dccff4faa26 for mainnet)\r\n     * @param data Data that is forwarded into the 1inch exchange contract. Can be acquired from 1Inch API https://api.1inch.exchange/v3.0/1/swap\r\n     * [See more](https://docs.1inch.exchange/api/quote-swap#swap)\r\n     *\r\n     * @return description - description of the swap\r\n     */\r\n\r\n    function exchange(I1Inch3 _1inchExchange, bytes calldata data)\r\n        internal\r\n        returns (I1Inch3.SwapDescription memory description, uint256 returnedAmount)\r\n    {\r\n        if (data[0] == 0x7c) {\r\n            // call `swap()`\r\n            (, description, ) = abi.decode(data[4:], (address, I1Inch3.SwapDescription, bytes));\r\n        } else {\r\n            // call `unoswap()`\r\n            (address srcToken, uint256 amount, uint256 minReturn, bytes32[] memory pathData) = abi.decode(\r\n                data[4:],\r\n                (address, uint256, uint256, bytes32[])\r\n            );\r\n            description.srcToken = srcToken;\r\n            description.amount = amount;\r\n            description.minReturnAmount = minReturn;\r\n            description.flags = 0;\r\n            uint256 lastPath = uint256(pathData[pathData.length - 1]);\r\n            IUniRouter uniRouter = IUniRouter(address(lastPath & ADDRESS_MASK));\r\n            bool isReverse = lastPath & REVERSE_MASK > 0;\r\n            description.dstToken = isReverse ? uniRouter.token0() : uniRouter.token1();\r\n            description.dstReceiver = address(this);\r\n        }\r\n\r\n        IERC20(description.srcToken).safeApprove(address(_1inchExchange), description.amount);\r\n        uint256 balanceBefore = IERC20(description.dstToken).balanceOf(description.dstReceiver);\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, ) = address(_1inchExchange).call(data);\r\n        if (!success) {\r\n            // Revert with original error message\r\n            assembly {\r\n                let ptr := mload(0x40)\r\n                let size := returndatasize()\r\n                returndatacopy(ptr, 0, size)\r\n                revert(ptr, size)\r\n            }\r\n        }\r\n\r\n        uint256 balanceAfter = IERC20(description.dstToken).balanceOf(description.dstReceiver);\r\n        returnedAmount = balanceAfter.sub(balanceBefore);\r\n\r\n        emit Swapped(description, returnedAmount);\r\n    }\r\n}\r\n\r\n\r\n// Dependency file: contracts/truefi2/PoolExtensions.sol\r\n\r\n// pragma solidity 0.6.10;\r\n\r\n// import {ILoanToken2} from \"contracts/truefi2/interface/ILoanToken2.sol\";\r\n// import {ITrueLender2} from \"contracts/truefi2/interface/ITrueLender2.sol\";\r\n// import {ISAFU} from \"contracts/truefi2/interface/ISAFU.sol\";\r\n\r\n/**\r\n * @dev Library that has shared functions between legacy TrueFi Pool and Pool2\r\n */\r\nlibrary PoolExtensions {\r\n    function _liquidate(\r\n        ISAFU safu,\r\n        ILoanToken2 loan,\r\n        ITrueLender2 lender\r\n    ) internal {\r\n        require(msg.sender == address(safu), \"TrueFiPool: Should be called by SAFU\");\r\n        lender.transferAllLoanTokens(loan, address(safu));\r\n    }\r\n}\r\n\r\n\r\n// Root file: contracts/truefi2/TrueFiPool2.sol\r\n\r\npragma solidity 0.6.10;\r\n// pragma experimental ABIEncoderV2;\r\n\r\n// import {IERC20} from \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\r\n// import {SafeMath} from \"@openzeppelin/contracts/math/SafeMath.sol\";\r\n// import {SafeERC20} from \"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\";\r\n// import {ERC20} from \"contracts/common/UpgradeableERC20.sol\";\r\n// import {UpgradeableClaimable} from \"contracts/common/UpgradeableClaimable.sol\";\r\n\r\n// import {ITrueStrategy} from \"contracts/truefi2/interface/ITrueStrategy.sol\";\r\n// import {ITrueFiPool2, ITrueFiPoolOracle, I1Inch3} from \"contracts/truefi2/interface/ITrueFiPool2.sol\";\r\n// import {ITrueLender2, ILoanToken2} from \"contracts/truefi2/interface/ITrueLender2.sol\";\r\n// import {IPauseableContract} from \"contracts/common/interface/IPauseableContract.sol\";\r\n// import {ISAFU} from \"contracts/truefi2/interface/ISAFU.sol\";\r\n\r\n// import {ABDKMath64x64} from \"contracts/truefi/Log.sol\";\r\n// import {OneInchExchange} from \"contracts/truefi2/libraries/OneInchExchange.sol\";\r\n// import {PoolExtensions} from \"contracts/truefi2/PoolExtensions.sol\";\r\n\r\n/**\r\n * @title TrueFiPool2\r\n * @dev Lending pool which may use a strategy to store idle funds\r\n * Earn high interest rates on currency deposits through uncollateralized loans\r\n *\r\n * Funds deposited in this pool are not fully liquid.\r\n * Exiting the pool has 2 options:\r\n * - withdraw a basket of LoanTokens backing the pool\r\n * - take an exit penalty depending on pool liquidity\r\n * After exiting, an account will need to wait for LoanTokens to expire and burn them\r\n * It is recommended to perform a zap or swap tokens on Uniswap for increased liquidity\r\n *\r\n * Funds are managed through an external function to save gas on deposits\r\n */\r\ncontract TrueFiPool2 is ITrueFiPool2, IPauseableContract, ERC20, UpgradeableClaimable {\r\n    using SafeMath for uint256;\r\n    using SafeERC20 for ERC20;\r\n    using SafeERC20 for IERC20;\r\n    using OneInchExchange for I1Inch3;\r\n\r\n    uint256 private constant BASIS_PRECISION = 10000;\r\n\r\n    // max slippage on liquidation token swaps\r\n    // Measured in basis points, e.g. 10000 = 100%\r\n    uint16 public constant TOLERATED_SLIPPAGE = 100; // 1%\r\n\r\n    // tolerance difference between\r\n    // expected and actual transaction results\r\n    // when dealing with strategies\r\n    // Measured in  basis points, e.g. 10000 = 100%\r\n    uint16 public constant TOLERATED_STRATEGY_LOSS = 10; // 0.1%\r\n\r\n    // ================ WARNING ==================\r\n    // ===== THIS CONTRACT IS INITIALIZABLE ======\r\n    // === STORAGE VARIABLES ARE DECLARED BELOW ==\r\n    // REMOVAL OR REORDER OF VARIABLES WILL RESULT\r\n    // ========= IN STORAGE CORRUPTION ===========\r\n\r\n    uint8 public constant VERSION = 1;\r\n\r\n    ERC20 public override token;\r\n\r\n    ITrueStrategy public strategy;\r\n    ITrueLender2 public lender;\r\n\r\n    // fee for deposits\r\n    // fee precision: 10000 = 100%\r\n    uint256 public joiningFee;\r\n    // track claimable fees\r\n    uint256 public claimableFees;\r\n\r\n    mapping(address => uint256) latestJoinBlock;\r\n\r\n    IERC20 public liquidationToken;\r\n\r\n    ITrueFiPoolOracle public override oracle;\r\n\r\n    // allow pausing of deposits\r\n    bool public pauseStatus;\r\n\r\n    // cache values during sync for gas optimization\r\n    bool private inSync;\r\n    uint256 private strategyValueCache;\r\n    uint256 private loansValueCache;\r\n\r\n    // who gets all fees\r\n    address public beneficiary;\r\n\r\n    I1Inch3 public _1Inch;\r\n\r\n    ISAFU public safu;\r\n\r\n    // ======= STORAGE DECLARATION END ===========\r\n\r\n    /**\r\n     * @dev Helper function to concatenate two strings\r\n     * @param a First part of string to concat\r\n     * @param b Second part of string to concat\r\n     * @return Concatenated string of `a` and `b`\r\n     */\r\n    function concat(string memory a, string memory b) internal pure returns (string memory) {\r\n        return string(abi.encodePacked(a, b));\r\n    }\r\n\r\n    function initialize(\r\n        ERC20 _token,\r\n        ERC20 _liquidationToken,\r\n        ITrueLender2 _lender,\r\n        I1Inch3 __1Inch,\r\n        ISAFU _safu,\r\n        address __owner\r\n    ) external override initializer {\r\n        ERC20.__ERC20_initialize(concat(\"TrueFi \", _token.name()), concat(\"tf\", _token.symbol()));\r\n        UpgradeableClaimable.initialize(__owner);\r\n\r\n        token = _token;\r\n        liquidationToken = _liquidationToken;\r\n        lender = _lender;\r\n        safu = _safu;\r\n        _1Inch = __1Inch;\r\n    }\r\n\r\n    /**\r\n     * @dev Emitted when fee is changed\r\n     * @param newFee New fee\r\n     */\r\n    event JoiningFeeChanged(uint256 newFee);\r\n\r\n    /**\r\n     * @dev Emitted when beneficiary is changed\r\n     * @param newBeneficiary New beneficiary\r\n     */\r\n    event BeneficiaryChanged(address newBeneficiary);\r\n\r\n    /**\r\n     * @dev Emitted when oracle is changed\r\n     * @param newOracle New oracle\r\n     */\r\n    event OracleChanged(ITrueFiPoolOracle newOracle);\r\n\r\n    /**\r\n     * @dev Emitted when someone joins the pool\r\n     * @param staker Account staking\r\n     * @param deposited Amount deposited\r\n     * @param minted Amount of pool tokens minted\r\n     */\r\n    event Joined(address indexed staker, uint256 deposited, uint256 minted);\r\n\r\n    /**\r\n     * @dev Emitted when someone exits the pool\r\n     * @param staker Account exiting\r\n     * @param amount Amount unstaking\r\n     */\r\n    event Exited(address indexed staker, uint256 amount);\r\n\r\n    /**\r\n     * @dev Emitted when funds are flushed into the strategy\r\n     * @param currencyAmount Amount of tokens deposited\r\n     */\r\n    event Flushed(uint256 currencyAmount);\r\n\r\n    /**\r\n     * @dev Emitted when funds are pulled from the strategy\r\n     * @param minTokenAmount Minimal expected amount received tokens\r\n     */\r\n    event Pulled(uint256 minTokenAmount);\r\n\r\n    /**\r\n     * @dev Emitted when funds are borrowed from pool\r\n     * @param borrower Borrower address\r\n     * @param amount Amount of funds borrowed from pool\r\n     */\r\n    event Borrow(address borrower, uint256 amount);\r\n\r\n    /**\r\n     * @dev Emitted when borrower repays the pool\r\n     * @param payer Address of borrower\r\n     * @param amount Amount repaid\r\n     */\r\n    event Repaid(address indexed payer, uint256 amount);\r\n\r\n    /**\r\n     * @dev Emitted when fees are collected\r\n     * @param beneficiary Account to receive fees\r\n     * @param amount Amount of fees collected\r\n     */\r\n    event Collected(address indexed beneficiary, uint256 amount);\r\n\r\n    /**\r\n     * @dev Emitted when strategy is switched\r\n     * @param newStrategy Strategy to switch to\r\n     */\r\n    event StrategySwitched(ITrueStrategy newStrategy);\r\n\r\n    /**\r\n     * @dev Emitted when joining is paused or unpaused\r\n     * @param pauseStatus New pausing status\r\n     */\r\n    event PauseStatusChanged(bool pauseStatus);\r\n\r\n    /**\r\n     * @dev Emitted when SAFU address is changed\r\n     * @param newSafu New SAFU address\r\n     */\r\n    event SafuChanged(ISAFU newSafu);\r\n\r\n    /**\r\n     * @dev only lender can perform borrowing or repaying\r\n     */\r\n    modifier onlyLender() {\r\n        require(msg.sender == address(lender), \"TrueFiPool: Caller is not the lender\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev pool can only be joined when it's unpaused\r\n     */\r\n    modifier joiningNotPaused() {\r\n        require(!pauseStatus, \"TrueFiPool: Joining the pool is paused\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * Sync values to avoid making expensive calls multiple times\r\n     * Will set inSync to true, allowing getter functions to return cached values\r\n     * Wipes cached values to save gas\r\n     */\r\n    modifier sync() {\r\n        // sync\r\n        strategyValueCache = strategyValue();\r\n        loansValueCache = loansValue();\r\n        inSync = true;\r\n        _;\r\n        // wipe\r\n        inSync = false;\r\n        strategyValueCache = 0;\r\n        loansValueCache = 0;\r\n    }\r\n\r\n    /**\r\n     * @dev Allow pausing of deposits in case of emergency\r\n     * @param status New deposit status\r\n     */\r\n    function setPauseStatus(bool status) external override onlyOwner {\r\n        pauseStatus = status;\r\n        emit PauseStatusChanged(status);\r\n    }\r\n\r\n    /**\r\n     * @dev Change SAFU address\r\n     */\r\n    function setSafuAddress(ISAFU _safu) external onlyOwner {\r\n        safu = _safu;\r\n        emit SafuChanged(_safu);\r\n    }\r\n\r\n    /**\r\n     * @dev Number of decimals for user-facing representations.\r\n     * Delegates to the underlying pool token.\r\n     */\r\n    function decimals() public override view returns (uint8) {\r\n        return token.decimals();\r\n    }\r\n\r\n    /**\r\n     * @dev Virtual value of liquid assets in the pool\r\n     * @return Virtual liquid value of pool assets\r\n     */\r\n    function liquidValue() public view returns (uint256) {\r\n        return currencyBalance().add(strategyValue());\r\n    }\r\n\r\n    /**\r\n     * @dev Value of funds deposited into the strategy denominated in underlying token\r\n     * @return Virtual value of strategy\r\n     */\r\n    function strategyValue() public view returns (uint256) {\r\n        if (address(strategy) == address(0)) {\r\n            return 0;\r\n        }\r\n        if (inSync) {\r\n            return strategyValueCache;\r\n        }\r\n        return strategy.value();\r\n    }\r\n\r\n    /**\r\n     * @dev Calculate pool value in underlying token\r\n     * \"virtual price\" of entire pool - LoanTokens, UnderlyingTokens, strategy value\r\n     * @return pool value denominated in underlying token\r\n     */\r\n    function poolValue() public view returns (uint256) {\r\n        // this assumes defaulted loans are worth their full value\r\n        return liquidValue().add(loansValue()).add(deficitValue());\r\n    }\r\n\r\n    /**\r\n     * @dev Return pool deficiency value, to be returned by safu\r\n     * @return pool deficiency value\r\n     */\r\n    function deficitValue() public view returns (uint256) {\r\n        if (address(safu) == address(0)) {\r\n            return 0;\r\n        }\r\n        return safu.poolDeficit(address(this));\r\n    }\r\n\r\n    /**\r\n     * @dev Get total balance of stake tokens\r\n     * @return Balance of stake tokens denominated in this contract\r\n     */\r\n    function liquidationTokenBalance() public view returns (uint256) {\r\n        return liquidationToken.balanceOf(address(this));\r\n    }\r\n\r\n    /**\r\n     * @dev Price of TRU denominated in underlying tokens\r\n     * @return Oracle price of TRU in underlying tokens\r\n     */\r\n    function liquidationTokenValue() public view returns (uint256) {\r\n        uint256 balance = liquidationTokenBalance();\r\n        if (balance == 0 || address(oracle) == address(0)) {\r\n            return 0;\r\n        }\r\n        // Use conservative price estimation to avoid pool being overvalued\r\n        return withToleratedSlippage(oracle.truToToken(balance));\r\n    }\r\n\r\n    /**\r\n     * @dev Virtual value of loan assets in the pool\r\n     * Will return cached value if inSync\r\n     * @return Value of loans in pool\r\n     */\r\n    function loansValue() public view returns (uint256) {\r\n        if (inSync) {\r\n            return loansValueCache;\r\n        }\r\n        return lender.value(this);\r\n    }\r\n\r\n    /**\r\n     * @dev ensure enough tokens are available\r\n     * Check if current available amount of `token` is enough and\r\n     * withdraw remainder from strategy\r\n     * @param neededAmount amount required\r\n     */\r\n    function ensureSufficientLiquidity(uint256 neededAmount) internal {\r\n        uint256 currentlyAvailableAmount = currencyBalance();\r\n        if (currentlyAvailableAmount < neededAmount) {\r\n            require(address(strategy) != address(0), \"TrueFiPool: Pool has no strategy to withdraw from\");\r\n            strategy.withdraw(neededAmount.sub(currentlyAvailableAmount));\r\n            require(currencyBalance() >= neededAmount, \"TrueFiPool: Not enough funds taken from the strategy\");\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev set pool join fee\r\n     * @param fee new fee\r\n     */\r\n    function setJoiningFee(uint256 fee) external onlyOwner {\r\n        require(fee <= BASIS_PRECISION, \"TrueFiPool: Fee cannot exceed transaction value\");\r\n        joiningFee = fee;\r\n        emit JoiningFeeChanged(fee);\r\n    }\r\n\r\n    /**\r\n     * @dev set beneficiary\r\n     * @param newBeneficiary new beneficiary\r\n     */\r\n    function setBeneficiary(address newBeneficiary) external onlyOwner {\r\n        require(newBeneficiary != address(0), \"TrueFiPool: Beneficiary address cannot be set to 0\");\r\n        beneficiary = newBeneficiary;\r\n        emit BeneficiaryChanged(newBeneficiary);\r\n    }\r\n\r\n    /**\r\n     * @dev Join the pool by depositing tokens\r\n     * @param amount amount of token to deposit\r\n     */\r\n    function join(uint256 amount) external override joiningNotPaused {\r\n        uint256 fee = amount.mul(joiningFee).div(BASIS_PRECISION);\r\n        uint256 mintedAmount = mint(amount.sub(fee));\r\n        claimableFees = claimableFees.add(fee);\r\n\r\n        // TODO: tx.origin will be depricated in a future ethereum upgrade\r\n        latestJoinBlock[tx.origin] = block.number;\r\n        token.safeTransferFrom(msg.sender, address(this), amount);\r\n\r\n        emit Joined(msg.sender, amount, mintedAmount);\r\n    }\r\n\r\n    /**\r\n     * @dev Exit pool\r\n     * This function will withdraw a basket of currencies backing the pool value\r\n     * @param amount amount of pool tokens to redeem for underlying tokens\r\n     */\r\n    function exit(uint256 amount) external {\r\n        require(block.number != latestJoinBlock[tx.origin], \"TrueFiPool: Cannot join and exit in same block\");\r\n        require(amount <= balanceOf(msg.sender), \"TrueFiPool: Insufficient funds\");\r\n\r\n        uint256 _totalSupply = totalSupply();\r\n\r\n        // get share of tokens kept in the pool\r\n        uint256 liquidAmountToTransfer = amount.mul(liquidValue()).div(_totalSupply);\r\n\r\n        // burn tokens sent\r\n        _burn(msg.sender, amount);\r\n\r\n        // withdraw basket of loan tokens\r\n        lender.distribute(msg.sender, amount, _totalSupply);\r\n\r\n        // if tokens remaining, transfer\r\n        if (liquidAmountToTransfer > 0) {\r\n            ensureSufficientLiquidity(liquidAmountToTransfer);\r\n            token.safeTransfer(msg.sender, liquidAmountToTransfer);\r\n        }\r\n\r\n        emit Exited(msg.sender, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Exit pool only with liquid tokens\r\n     * This function will only transfer underlying token but with a small penalty\r\n     * Uses the sync() modifier to reduce gas costs of using strategy and lender\r\n     * @param amount amount of pool liquidity tokens to redeem for underlying tokens\r\n     */\r\n    function liquidExit(uint256 amount) external sync {\r\n        require(block.number != latestJoinBlock[tx.origin], \"TrueFiPool: Cannot join and exit in same block\");\r\n        require(amount <= balanceOf(msg.sender), \"TrueFiPool: Insufficient funds\");\r\n\r\n        uint256 amountToWithdraw = poolValue().mul(amount).div(totalSupply());\r\n        amountToWithdraw = amountToWithdraw.mul(liquidExitPenalty(amountToWithdraw)).div(BASIS_PRECISION);\r\n        require(amountToWithdraw <= liquidValue(), \"TrueFiPool: Not enough liquidity in pool\");\r\n\r\n        // burn tokens sent\r\n        _burn(msg.sender, amount);\r\n\r\n        ensureSufficientLiquidity(amountToWithdraw);\r\n\r\n        token.safeTransfer(msg.sender, amountToWithdraw);\r\n\r\n        emit Exited(msg.sender, amountToWithdraw);\r\n    }\r\n\r\n    /**\r\n     * @dev Penalty (in % * 100) applied if liquid exit is performed with this amount\r\n     * returns BASIS_PRECISION (10000) if no penalty\r\n     */\r\n    function liquidExitPenalty(uint256 amount) public view returns (uint256) {\r\n        uint256 lv = liquidValue();\r\n        uint256 pv = poolValue();\r\n        if (amount == pv) {\r\n            return BASIS_PRECISION;\r\n        }\r\n        uint256 liquidRatioBefore = lv.mul(BASIS_PRECISION).div(pv);\r\n        uint256 liquidRatioAfter = lv.sub(amount).mul(BASIS_PRECISION).div(pv.sub(amount));\r\n        return BASIS_PRECISION.sub(averageExitPenalty(liquidRatioAfter, liquidRatioBefore));\r\n    }\r\n\r\n    /**\r\n     * @dev Calculates integral of 5/(x+50)dx times 10000\r\n     */\r\n    function integrateAtPoint(uint256 x) public pure returns (uint256) {\r\n        return uint256(ABDKMath64x64.ln(ABDKMath64x64.fromUInt(x.add(50)))).mul(50000).div(2**64);\r\n    }\r\n\r\n    /**\r\n     * @dev Calculates average penalty on interval [from; to]\r\n     * @return average exit penalty\r\n     */\r\n    function averageExitPenalty(uint256 from, uint256 to) public pure returns (uint256) {\r\n        require(from <= to, \"TrueFiPool: To precedes from\");\r\n        if (from == BASIS_PRECISION) {\r\n            // When all liquid, don't penalize\r\n            return 0;\r\n        }\r\n        if (from == to) {\r\n            return uint256(50000).div(from.add(50));\r\n        }\r\n        return integrateAtPoint(to).sub(integrateAtPoint(from)).div(to.sub(from));\r\n    }\r\n\r\n    /**\r\n     * @dev Deposit idle funds into strategy\r\n     * @param amount Amount of funds to deposit into strategy\r\n     */\r\n    function flush(uint256 amount) external {\r\n        require(address(strategy) != address(0), \"TrueFiPool: Pool has no strategy set up\");\r\n        require(amount <= currencyBalance(), \"TrueFiPool: Insufficient currency balance\");\r\n\r\n        uint256 expectedMinStrategyValue = strategy.value().add(withToleratedStrategyLoss(amount));\r\n        token.safeApprove(address(strategy), amount);\r\n        strategy.deposit(amount);\r\n        require(strategy.value() >= expectedMinStrategyValue, \"TrueFiPool: Strategy value expected to be higher\");\r\n        emit Flushed(amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Remove liquidity from strategy\r\n     * @param minTokenAmount minimum amount of tokens to withdraw\r\n     */\r\n    function pull(uint256 minTokenAmount) external onlyOwner {\r\n        require(address(strategy) != address(0), \"TrueFiPool: Pool has no strategy set up\");\r\n\r\n        uint256 expectedCurrencyBalance = currencyBalance().add(minTokenAmount);\r\n        strategy.withdraw(minTokenAmount);\r\n        require(currencyBalance() >= expectedCurrencyBalance, \"TrueFiPool: Currency balance expected to be higher\");\r\n\r\n        emit Pulled(minTokenAmount);\r\n    }\r\n\r\n    /**\r\n     * @dev Remove liquidity from strategy if necessary and transfer to lender\r\n     * @param amount amount for lender to withdraw\r\n     */\r\n    function borrow(uint256 amount) external override onlyLender {\r\n        require(amount <= liquidValue(), \"TrueFiPool: Insufficient liquidity\");\r\n        if (amount > 0) {\r\n            ensureSufficientLiquidity(amount);\r\n        }\r\n\r\n        token.safeTransfer(msg.sender, amount);\r\n\r\n        emit Borrow(msg.sender, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev repay debt by transferring tokens to the contract\r\n     * @param currencyAmount amount to repay\r\n     */\r\n    function repay(uint256 currencyAmount) external override onlyLender {\r\n        token.safeTransferFrom(msg.sender, address(this), currencyAmount);\r\n        emit Repaid(msg.sender, currencyAmount);\r\n    }\r\n\r\n    /**\r\n     * @dev Claim fees from the pool\r\n     */\r\n    function collectFees() external {\r\n        require(beneficiary != address(0), \"TrueFiPool: Beneficiary is not set\");\r\n\r\n        uint256 amount = claimableFees;\r\n        claimableFees = 0;\r\n\r\n        if (amount > 0) {\r\n            token.safeTransfer(beneficiary, amount);\r\n        }\r\n\r\n        emit Collected(beneficiary, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Switches current strategy to a new strategy\r\n     * @param newStrategy strategy to switch to\r\n     */\r\n    function switchStrategy(ITrueStrategy newStrategy) external onlyOwner {\r\n        require(strategy != newStrategy, \"TrueFiPool: Cannot switch to the same strategy\");\r\n\r\n        ITrueStrategy previousStrategy = strategy;\r\n        strategy = newStrategy;\r\n\r\n        if (address(previousStrategy) != address(0)) {\r\n            uint256 expectedMinCurrencyBalance = currencyBalance().add(withToleratedStrategyLoss(previousStrategy.value()));\r\n            previousStrategy.withdrawAll();\r\n            require(currencyBalance() >= expectedMinCurrencyBalance, \"TrueFiPool: All funds should be withdrawn to pool\");\r\n            require(previousStrategy.value() == 0, \"TrueFiPool: Switched strategy should be depleted\");\r\n        }\r\n\r\n        emit StrategySwitched(newStrategy);\r\n    }\r\n\r\n    /**\r\n     * @dev Function called by SAFU when liquidation happens. It will transfer all tokens of this loan the SAFU\r\n     */\r\n    function liquidate(ILoanToken2 loan) external override {\r\n        PoolExtensions._liquidate(safu, loan, lender);\r\n    }\r\n\r\n    /**\r\n     * @dev Change oracle, can only be called by owner\r\n     */\r\n    function setOracle(ITrueFiPoolOracle newOracle) external onlyOwner {\r\n        oracle = newOracle;\r\n        emit OracleChanged(newOracle);\r\n    }\r\n\r\n    function sellLiquidationToken(bytes calldata data) external {\r\n        (I1Inch3.SwapDescription memory swap, uint256 balanceDiff) = _1Inch.exchange(data);\r\n\r\n        uint256 expectedGain = oracle.truToToken(swap.amount);\r\n        require(balanceDiff >= withToleratedSlippage(expectedGain), \"TrueFiPool: Not optimal exchange\");\r\n\r\n        require(swap.srcToken == address(liquidationToken), \"TrueFiPool: Source token is not TRU\");\r\n        require(swap.dstToken == address(token), \"TrueFiPool: Invalid destination token\");\r\n        require(swap.dstReceiver == address(this), \"TrueFiPool: Receiver is not pool\");\r\n    }\r\n\r\n    /**\r\n     * @dev Currency token balance\r\n     * @return Currency token balance\r\n     */\r\n    function currencyBalance() public view returns (uint256) {\r\n        return token.balanceOf(address(this)).sub(claimableFees);\r\n    }\r\n\r\n    /**\r\n     * @param depositedAmount Amount of currency deposited\r\n     * @return amount minted from this transaction\r\n     */\r\n    function mint(uint256 depositedAmount) internal returns (uint256) {\r\n        if (depositedAmount == 0) {\r\n            return depositedAmount;\r\n        }\r\n        uint256 mintedAmount = depositedAmount;\r\n\r\n        // first staker mints same amount as deposited\r\n        if (totalSupply() > 0) {\r\n            mintedAmount = totalSupply().mul(depositedAmount).div(poolValue());\r\n        }\r\n        // mint pool liquidity tokens\r\n        _mint(msg.sender, mintedAmount);\r\n\r\n        return mintedAmount;\r\n    }\r\n\r\n    /**\r\n     * @dev Decrease provided amount percentwise by error\r\n     * @param amount Amount to decrease\r\n     * @return Calculated value\r\n     */\r\n    function withToleratedSlippage(uint256 amount) internal pure returns (uint256) {\r\n        return amount.mul(BASIS_PRECISION - TOLERATED_SLIPPAGE).div(BASIS_PRECISION);\r\n    }\r\n\r\n    /**\r\n     * @dev Decrease provided amount percentwise by error\r\n     * @param amount Amount to decrease\r\n     * @return Calculated value\r\n     */\r\n    function withToleratedStrategyLoss(uint256 amount) internal pure returns (uint256) {\r\n        return amount.mul(BASIS_PRECISION - TOLERATED_STRATEGY_LOSS).div(BASIS_PRECISION);\r\n    }\r\n}","ABI":"[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newBeneficiary\",\"type\":\"address\"}],\"name\":\"BeneficiaryChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"borrower\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Borrow\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"beneficiary\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Collected\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Exited\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"currencyAmount\",\"type\":\"uint256\"}],\"name\":\"Flushed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"deposited\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"minted\",\"type\":\"uint256\"}],\"name\":\"Joined\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newFee\",\"type\":\"uint256\"}],\"name\":\"JoiningFeeChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"contract ITrueFiPoolOracle\",\"name\":\"newOracle\",\"type\":\"address\"}],\"name\":\"OracleChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"pauseStatus\",\"type\":\"bool\"}],\"name\":\"PauseStatusChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"minTokenAmount\",\"type\":\"uint256\"}],\"name\":\"Pulled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"payer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Repaid\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"contract ISAFU\",\"name\":\"newSafu\",\"type\":\"address\"}],\"name\":\"SafuChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"contract ITrueStrategy\",\"name\":\"newStrategy\",\"type\":\"address\"}],\"name\":\"StrategySwitched\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"TOLERATED_SLIPPAGE\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"TOLERATED_STRATEGY_LOSS\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"VERSION\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_1Inch\",\"outputs\":[{\"internalType\":\"contract I1Inch3\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"from\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"to\",\"type\":\"uint256\"}],\"name\":\"averageExitPenalty\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"beneficiary\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"borrow\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimableFees\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"collectFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currencyBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"deficitValue\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"exit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"flush\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ERC20\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"contract ERC20\",\"name\":\"_liquidationToken\",\"type\":\"address\"},{\"internalType\":\"contract ITrueLender2\",\"name\":\"_lender\",\"type\":\"address\"},{\"internalType\":\"contract I1Inch3\",\"name\":\"__1Inch\",\"type\":\"address\"},{\"internalType\":\"contract ISAFU\",\"name\":\"_safu\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"__owner\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"x\",\"type\":\"uint256\"}],\"name\":\"integrateAtPoint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isInitialized\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"join\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"joiningFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lender\",\"outputs\":[{\"internalType\":\"contract ITrueLender2\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"liquidExit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"liquidExitPenalty\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liquidValue\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ILoanToken2\",\"name\":\"loan\",\"type\":\"address\"}],\"name\":\"liquidate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liquidationToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liquidationTokenBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liquidationTokenValue\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"loansValue\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"oracle\",\"outputs\":[{\"internalType\":\"contract ITrueFiPoolOracle\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pauseStatus\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pendingOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"poolValue\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"minTokenAmount\",\"type\":\"uint256\"}],\"name\":\"pull\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"currencyAmount\",\"type\":\"uint256\"}],\"name\":\"repay\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"safu\",\"outputs\":[{\"internalType\":\"contract ISAFU\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"sellLiquidationToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newBeneficiary\",\"type\":\"address\"}],\"name\":\"setBeneficiary\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"}],\"name\":\"setJoiningFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ITrueFiPoolOracle\",\"name\":\"newOracle\",\"type\":\"address\"}],\"name\":\"setOracle\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"status\",\"type\":\"bool\"}],\"name\":\"setPauseStatus\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ISAFU\",\"name\":\"_safu\",\"type\":\"address\"}],\"name\":\"setSafuAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"strategy\",\"outputs\":[{\"internalType\":\"contract ITrueStrategy\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"strategyValue\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ITrueStrategy\",\"name\":\"newStrategy\",\"type\":\"address\"}],\"name\":\"switchStrategy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"internalType\":\"contract ERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"TrueFiPool2","CompilerVersion":"v0.6.10+commit.00c0fcaf","OptimizationUsed":"1","Runs":"20000","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://786020affd161c90824a10864af11b8aa44936110b522c2e16dfaabef3e4e569"}]}