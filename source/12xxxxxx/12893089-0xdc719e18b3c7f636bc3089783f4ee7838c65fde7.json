{"status":"1","message":"OK","result":[{"SourceCode":"/**\r\n *On our platform, staking $BLANET Token makes it easy for anyone to invest in indexes.\r\n * Website: http://blanet.tech\r\n   Medium: http://blanet.medium.com\r\n   Telegram: http://t.me/blanetinvestment……\r\n   Twitter:@BLANET_\r\n*/\r\n\r\n/**\r\n*\r\n*/\r\n\r\n// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/*\r\n* @dev Provides information about the current execution context, including the\r\n* sender of the transaction and its data. While these are generally available\r\n* via msg.sender and msg.data, they should not be accessed in such a direct\r\n* manner, since when dealing with meta-transactions the account sending and\r\n* paying for execution may not be the actual sender (as far as an application\r\n* is concerned).\r\n*\r\n* This contract is only required for intermediate, library-like contracts.\r\n*/\r\nabstract contract Context {\r\nfunction _msgSender() internal view virtual returns (address) {\r\nreturn msg.sender;\r\n}\r\n\r\nfunction _msgData() internal view virtual returns (bytes calldata) {\r\nthis; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\nreturn msg.data;\r\n}\r\n}\r\n\r\npragma solidity ^0.8.0;\r\n\r\n// CAUTION\r\n// This version of SafeMath should only be used with Solidity 0.8 or later,\r\n// because it relies on the compiler's built in overflow checks.\r\n\r\n/**\r\n* @dev Wrappers over Solidity's arithmetic operations.\r\n*\r\n* NOTE: `SafeMath` is no longer needed starting with Solidity 0.8. The compiler\r\n* now has built in overflow checking.\r\n*/\r\nlibrary SafeMath {\r\n/**\r\n* @dev Returns the addition of two unsigned integers, reverting on\r\n* overflow.\r\n*\r\n* Counterpart to Solidity's `+` operator.\r\n*\r\n* Requirements:\r\n*\r\n* - Addition cannot overflow.\r\n*/\r\nfunction add(uint256 a, uint256 b) internal pure returns (uint256) {\r\nreturn a + b;\r\n}\r\n\r\n/**\r\n* @dev Returns the subtraction of two unsigned integers, reverting on\r\n* overflow (when the result is negative).\r\n*\r\n* Counterpart to Solidity's `-` operator.\r\n*\r\n* Requirements:\r\n*\r\n* - Subtraction cannot overflow.\r\n*/\r\nfunction sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\nreturn a - b;\r\n}\r\n\r\n/**\r\n* @dev Returns the multiplication of two unsigned integers, reverting on\r\n* overflow.\r\n*\r\n* Counterpart to Solidity's `*` operator.\r\n*\r\n* Requirements:\r\n*\r\n* - Multiplication cannot overflow.\r\n*/\r\nfunction mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\nreturn a * b;\r\n}\r\n\r\n/**\r\n* @dev Returns the integer division of two unsigned integers, reverting on\r\n* division by zero. The result is rounded towards zero.\r\n*\r\n* Counterpart to Solidity's `/` operator.\r\n*\r\n* Requirements:\r\n*\r\n* - The divisor cannot be zero.\r\n*/\r\nfunction div(uint256 a, uint256 b) internal pure returns (uint256) {\r\nreturn a / b;\r\n}\r\n\r\n/**\r\n* @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n* reverting when dividing by zero.\r\n*\r\n* Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n* opcode (which leaves remaining gas untouched) while Solidity uses an\r\n* invalid opcode to revert (consuming all remaining gas).\r\n*\r\n* Requirements:\r\n*\r\n* - The divisor cannot be zero.\r\n*/\r\nfunction mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\nreturn a % b;\r\n}\r\n\r\n/**\r\n* @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n* overflow (when the result is negative).\r\n*\r\n* CAUTION: This function is deprecated because it requires allocating memory for the error\r\n* message unnecessarily. For custom revert reasons use {trySub}.\r\n*\r\n* Counterpart to Solidity's `-` operator.\r\n*\r\n* Requirements:\r\n*\r\n* - Subtraction cannot overflow.\r\n*/\r\nfunction sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\nunchecked {\r\nrequire(b <= a, errorMessage);\r\nreturn a - b;\r\n}\r\n}\r\n\r\n/**\r\n* @dev Returns the integer division of two unsigned integers, reverting with custom message on\r\n* division by zero. The result is rounded towards zero.\r\n*\r\n* Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n* opcode (which leaves remaining gas untouched) while Solidity uses an\r\n* invalid opcode to revert (consuming all remaining gas).\r\n*\r\n* Counterpart to Solidity's `/` operator. Note: this function uses a\r\n* `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n* uses an invalid opcode to revert (consuming all remaining gas).\r\n*\r\n* Requirements:\r\n*\r\n* - The divisor cannot be zero.\r\n*/\r\nfunction div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\nunchecked {\r\nrequire(b > 0, errorMessage);\r\nreturn a / b;\r\n}\r\n}\r\n\r\n/**\r\n* @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n* reverting with custom message when dividing by zero.\r\n*\r\n* CAUTION: This function is deprecated because it requires allocating memory for the error\r\n* message unnecessarily. For custom revert reasons use {tryMod}.\r\n*\r\n* Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n* opcode (which leaves remaining gas untouched) while Solidity uses an\r\n* invalid opcode to revert (consuming all remaining gas).\r\n*\r\n* Requirements:\r\n*\r\n* - The divisor cannot be zero.\r\n*/\r\nfunction mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\nunchecked {\r\nrequire(b > 0, errorMessage);\r\nreturn a % b;\r\n}\r\n}\r\n}\r\n\r\npragma solidity =0.8.0;\r\n\r\ncontract ERC20 is Context {\r\n\r\nusing SafeMath for uint256;\r\n\r\nmapping (address => uint256) private _balances;\r\nmapping (address => mapping (address => uint256)) private _allowances;\r\n\r\nstring private _name;\r\nstring private _symbol;\r\nuint8 private _decimals;\r\n\r\nuint256 _totalSupply;\r\n\r\nevent Transfer(address indexed from, address indexed to, uint256 value);\r\nevent Approval(address indexed owner, address indexed spender, uint256 value);\r\n\r\nconstructor () {\r\n_name = \"BLANETTEST\";\r\n_symbol = \"BLANETTEST\"; \r\n_decimals = 18;\r\n\r\n_mint(_msgSender(), 1000000000E18);\r\n}\r\n\r\n/**\r\n* @dev Returns the name of the token.\r\n*/\r\nfunction name() public view returns (string memory) {\r\nreturn _name;\r\n}\r\n\r\n/**\r\n* @dev Returns the symbol of the token.\r\n*/\r\nfunction symbol() public view returns (string memory) {\r\nreturn _symbol;\r\n}\r\n\r\n/**\r\n* @dev Returns the decimals of the token.\r\n*/\r\nfunction decimals() public view returns (uint8) {\r\nreturn _decimals;\r\n}\r\n\r\n/**\r\n* @dev Returns the total supply of the token.\r\n*/\r\nfunction totalSupply() public view returns (uint256) {\r\nreturn _totalSupply;\r\n}\r\n\r\n/**\r\n* @dev Returns the token balance of specific address.\r\n*/\r\nfunction balanceOf(address account) public view returns (uint256) {\r\nreturn _balances[account];\r\n}\r\n\r\nfunction transfer(address recipient, uint256 amount) public returns (bool) {\r\n_transfer(_msgSender(), recipient, amount );\r\n\r\nreturn true;\r\n}\r\n\r\n/**\r\n* @dev Returns approved balance to be spent by another address\r\n* by using transferFrom method\r\n*/\r\nfunction allowance(address owner, address spender) public view returns (uint256) {\r\nreturn _allowances[owner][spender];\r\n}\r\n\r\n/**\r\n* @dev Sets the token allowance to another spender\r\n*/\r\nfunction approve(address spender, uint256 amount) public returns (bool) {\r\n_approve(_msgSender(), spender, amount);\r\n\r\nreturn true;\r\n}\r\n\r\n/**\r\n* @dev Allows to transfer tokens on senders behalf\r\n* based on allowance approved for the executer\r\n*/\r\nfunction transferFrom(address sender, address recipient, uint256 amount) public returns (bool) {\r\n_approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount));\r\n_transfer(sender, recipient, amount);\r\n\r\nreturn true;\r\n}\r\n\r\n/**\r\n* @dev Moves tokens `amount` from `sender` to `recipient`.\r\n*\r\n* Emits a {Transfer} event.\r\n* Requirements:\r\n*\r\n* - `sender` cannot be the zero address.\r\n* - `recipient` cannot be the zero address.\r\n* - `sender` must have a balance of at least `amount`.\r\n*/\r\nfunction _transfer(address sender, address recipient, uint256 amount) internal virtual {\r\nrequire(sender != address(0x0));\r\nrequire(recipient != address(0x0));\r\n\r\n_balances[sender] = _balances[sender].sub(amount);\r\n_balances[recipient] = _balances[recipient].add(amount);\r\n\r\nemit Transfer(sender, recipient, amount);\r\n}\r\n\r\n/** @dev Creates `amount` tokens and assigns them to `account`, increasing\r\n* the total supply.\r\n*\r\n* Emits a {Transfer} event with `from` set to the zero address.\r\n* Requirements:\r\n*\r\n* - `to` cannot be the zero address.\r\n*/\r\nfunction _mint(address account, uint256 amount) internal virtual {\r\nrequire(account != address(0x0));\r\n\r\n_totalSupply = _totalSupply.add(amount);\r\n_balances[account] = _balances[account].add(amount);\r\n\r\nemit Transfer(address(0x0), account, amount);\r\n}\r\n\r\n/**\r\n* @dev Allows to burn tokens if token sender\r\n* wants to reduce totalSupply() of the token\r\n*/\r\nfunction burn(uint256 amount) external {\r\n_burn(msg.sender, amount);\r\n}\r\n\r\n/**\r\n* @dev Destroys `amount` tokens from `account`, reducing the\r\n* total supply.\r\n*\r\n* Emits a {Transfer} event with `to` set to the zero address.\r\n*\r\n* Requirements:\r\n*\r\n* - `account` cannot be the zero address.\r\n* - `account` must have at least `amount` tokens.\r\n*/\r\nfunction _burn(address account, uint256 amount) internal virtual {\r\nrequire(account != address(0x0));\r\n\r\n_balances[account] = _balances[account].sub(amount);\r\n_totalSupply = _totalSupply.sub(amount);\r\n\r\nemit Transfer(account, address(0x0), amount);\r\n}\r\n\r\n/**\r\n* @dev Sets `amount` as the allowance of `spender` over the `owner`s tokens.\r\n* Emits an {Approval} event.\r\n*\r\n* Requirements:\r\n*\r\n* - `owner` cannot be the zero address.\r\n* - `spender` cannot be the zero address.\r\n*/\r\nfunction _approve(address owner, address spender, uint256 amount) internal virtual {\r\nrequire(owner != address(0x0));\r\nrequire(spender != address(0x0));\r\n\r\n_allowances[owner][spender] = amount;\r\n\r\nemit Approval(owner, spender, amount);\r\n}\r\n}","ABI":"[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"ERC20","CompilerVersion":"v0.8.0+commit.c7dfd78e","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"ipfs://ccff6182c9febf1f2dde6615626f48d1c5432fbbfc7ab16f6fd08d7a3782bead"}]}