{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/SportFeedOracleInstance.sol\": {\r\n      \"content\": \"pragma solidity ^0.5.16;\\n\\nimport \\\"@chainlink/contracts/src/v0.5/ChainlinkClient.sol\\\";\\nimport \\\"./SportFeed.sol\\\";\\nimport \\\"./interfaces/IOracleInstance.sol\\\";\\nimport \\\"synthetix-2.43.1/contracts/Owned.sol\\\";\\nimport \\\"solidity-util/lib/Integers.sol\\\";\\n\\ncontract SportFeedOracleInstance is IOracleInstance, Owned {\\n    using Chainlink for Chainlink.Request;\\n    using Integers for uint;\\n\\n    address public sportFeed;\\n    string public targetName;\\n    string public targetOutcome;\\n    string public eventName;\\n\\n    bool public outcome;\\n    bool public resolvable;\\n\\n    bool private forcedOutcome;\\n\\n    constructor(\\n        address _owner,\\n        address _sportFeed,\\n        string memory _targetName,\\n        string memory _targetOutcome,\\n        string memory _eventName\\n    ) public Owned(_owner) {\\n        sportFeed = _sportFeed;\\n        targetName = _targetName;\\n        targetOutcome = _targetOutcome;\\n        eventName = _eventName;\\n    }\\n\\n    function getOutcome() external view returns (bool) {\\n        if (forcedOutcome) {\\n            return outcome;\\n        } else {\\n            SportFeed sportFeedOracle = SportFeed(sportFeed);\\n            return sportFeedOracle.isCompetitorAtPlace(targetName, Integers.parseInt(targetOutcome));\\n        }\\n    }\\n\\n    function setOutcome(bool _outcome) public onlyOwner {\\n        outcome = _outcome;\\n        forcedOutcome = true;\\n    }\\n\\n    function clearOutcome() public onlyOwner {\\n        forcedOutcome = false;\\n    }\\n\\n    function setResolvable(bool _resolvable) public onlyOwner {\\n        resolvable = _resolvable;\\n    }\\n}\\n\"\r\n    },\r\n    \"@chainlink/contracts/src/v0.5/ChainlinkClient.sol\": {\r\n      \"content\": \"pragma solidity ^0.5.0;\\n\\nimport \\\"./Chainlink.sol\\\";\\nimport \\\"./interfaces/ENSInterface.sol\\\";\\nimport \\\"./interfaces/LinkTokenInterface.sol\\\";\\nimport \\\"./interfaces/ChainlinkRequestInterface.sol\\\";\\nimport \\\"./interfaces/PointerInterface.sol\\\";\\nimport { ENSResolver as ENSResolver_Chainlink } from \\\"./vendor/ENSResolver.sol\\\";\\n\\n/**\\n * @title The ChainlinkClient contract\\n * @notice Contract writers can inherit this contract in order to create requests for the\\n * Chainlink network\\n */\\ncontract ChainlinkClient {\\n  using Chainlink for Chainlink.Request;\\n\\n  uint256 constant internal LINK = 10**18;\\n  uint256 constant private AMOUNT_OVERRIDE = 0;\\n  address constant private SENDER_OVERRIDE = address(0);\\n  uint256 constant private ARGS_VERSION = 1;\\n  bytes32 constant private ENS_TOKEN_SUBNAME = keccak256(\\\"link\\\");\\n  bytes32 constant private ENS_ORACLE_SUBNAME = keccak256(\\\"oracle\\\");\\n  address constant private LINK_TOKEN_POINTER = 0xC89bD4E1632D3A43CB03AAAd5262cbe4038Bc571;\\n\\n  ENSInterface private ens;\\n  bytes32 private ensNode;\\n  LinkTokenInterface private link;\\n  ChainlinkRequestInterface private oracle;\\n  uint256 private requestCount = 1;\\n  mapping(bytes32 => address) private pendingRequests;\\n\\n  event ChainlinkRequested(bytes32 indexed id);\\n  event ChainlinkFulfilled(bytes32 indexed id);\\n  event ChainlinkCancelled(bytes32 indexed id);\\n\\n  /**\\n   * @notice Creates a request that can hold additional parameters\\n   * @param _specId The Job Specification ID that the request will be created for\\n   * @param _callbackAddress The callback address that the response will be sent to\\n   * @param _callbackFunctionSignature The callback function signature to use for the callback address\\n   * @return A Chainlink Request struct in memory\\n   */\\n  function buildChainlinkRequest(\\n    bytes32 _specId,\\n    address _callbackAddress,\\n    bytes4 _callbackFunctionSignature\\n  ) internal pure returns (Chainlink.Request memory) {\\n    Chainlink.Request memory req;\\n    return req.initialize(_specId, _callbackAddress, _callbackFunctionSignature);\\n  }\\n\\n  /**\\n   * @notice Creates a Chainlink request to the stored oracle address\\n   * @dev Calls `chainlinkRequestTo` with the stored oracle address\\n   * @param _req The initialized Chainlink Request\\n   * @param _payment The amount of LINK to send for the request\\n   * @return The request ID\\n   */\\n  function sendChainlinkRequest(Chainlink.Request memory _req, uint256 _payment)\\n    internal\\n    returns (bytes32)\\n  {\\n    return sendChainlinkRequestTo(address(oracle), _req, _payment);\\n  }\\n\\n  /**\\n   * @notice Creates a Chainlink request to the specified oracle address\\n   * @dev Generates and stores a request ID, increments the local nonce, and uses `transferAndCall` to\\n   * send LINK which creates a request on the target oracle contract.\\n   * Emits ChainlinkRequested event.\\n   * @param _oracle The address of the oracle for the request\\n   * @param _req The initialized Chainlink Request\\n   * @param _payment The amount of LINK to send for the request\\n   * @return The request ID\\n   */\\n  function sendChainlinkRequestTo(address _oracle, Chainlink.Request memory _req, uint256 _payment)\\n    internal\\n    returns (bytes32 requestId)\\n  {\\n    requestId = keccak256(abi.encodePacked(this, requestCount));\\n    _req.nonce = requestCount;\\n    pendingRequests[requestId] = _oracle;\\n    emit ChainlinkRequested(requestId);\\n    require(link.transferAndCall(_oracle, _payment, encodeRequest(_req)), \\\"unable to transferAndCall to oracle\\\");\\n    requestCount += 1;\\n\\n    return requestId;\\n  }\\n\\n  /**\\n   * @notice Allows a request to be cancelled if it has not been fulfilled\\n   * @dev Requires keeping track of the expiration value emitted from the oracle contract.\\n   * Deletes the request from the `pendingRequests` mapping.\\n   * Emits ChainlinkCancelled event.\\n   * @param _requestId The request ID\\n   * @param _payment The amount of LINK sent for the request\\n   * @param _callbackFunc The callback function specified for the request\\n   * @param _expiration The time of the expiration for the request\\n   */\\n  function cancelChainlinkRequest(\\n    bytes32 _requestId,\\n    uint256 _payment,\\n    bytes4 _callbackFunc,\\n    uint256 _expiration\\n  )\\n    internal\\n  {\\n    ChainlinkRequestInterface requested = ChainlinkRequestInterface(pendingRequests[_requestId]);\\n    delete pendingRequests[_requestId];\\n    emit ChainlinkCancelled(_requestId);\\n    requested.cancelOracleRequest(_requestId, _payment, _callbackFunc, _expiration);\\n  }\\n\\n  /**\\n   * @notice Sets the stored oracle address\\n   * @param _oracle The address of the oracle contract\\n   */\\n  function setChainlinkOracle(address _oracle) internal {\\n    oracle = ChainlinkRequestInterface(_oracle);\\n  }\\n\\n  /**\\n   * @notice Sets the LINK token address\\n   * @param _link The address of the LINK token contract\\n   */\\n  function setChainlinkToken(address _link) internal {\\n    link = LinkTokenInterface(_link);\\n  }\\n\\n  /**\\n   * @notice Sets the Chainlink token address for the public\\n   * network as given by the Pointer contract\\n   */\\n  function setPublicChainlinkToken() internal {\\n    setChainlinkToken(PointerInterface(LINK_TOKEN_POINTER).getAddress());\\n  }\\n\\n  /**\\n   * @notice Retrieves the stored address of the LINK token\\n   * @return The address of the LINK token\\n   */\\n  function chainlinkTokenAddress()\\n    internal\\n    view\\n    returns (address)\\n  {\\n    return address(link);\\n  }\\n\\n  /**\\n   * @notice Retrieves the stored address of the oracle contract\\n   * @return The address of the oracle contract\\n   */\\n  function chainlinkOracleAddress()\\n    internal\\n    view\\n    returns (address)\\n  {\\n    return address(oracle);\\n  }\\n\\n  /**\\n   * @notice Allows for a request which was created on another contract to be fulfilled\\n   * on this contract\\n   * @param _oracle The address of the oracle contract that will fulfill the request\\n   * @param _requestId The request ID used for the response\\n   */\\n  function addChainlinkExternalRequest(address _oracle, bytes32 _requestId)\\n    internal\\n    notPendingRequest(_requestId)\\n  {\\n    pendingRequests[_requestId] = _oracle;\\n  }\\n\\n  /**\\n   * @notice Sets the stored oracle and LINK token contracts with the addresses resolved by ENS\\n   * @dev Accounts for subnodes having different resolvers\\n   * @param _ens The address of the ENS contract\\n   * @param _node The ENS node hash\\n   */\\n  function useChainlinkWithENS(address _ens, bytes32 _node)\\n    internal\\n  {\\n    ens = ENSInterface(_ens);\\n    ensNode = _node;\\n    bytes32 linkSubnode = keccak256(abi.encodePacked(ensNode, ENS_TOKEN_SUBNAME));\\n    ENSResolver_Chainlink resolver = ENSResolver_Chainlink(ens.resolver(linkSubnode));\\n    setChainlinkToken(resolver.addr(linkSubnode));\\n    updateChainlinkOracleWithENS();\\n  }\\n\\n  /**\\n   * @notice Sets the stored oracle contract with the address resolved by ENS\\n   * @dev This may be called on its own as long as `useChainlinkWithENS` has been called previously\\n   */\\n  function updateChainlinkOracleWithENS()\\n    internal\\n  {\\n    bytes32 oracleSubnode = keccak256(abi.encodePacked(ensNode, ENS_ORACLE_SUBNAME));\\n    ENSResolver_Chainlink resolver = ENSResolver_Chainlink(ens.resolver(oracleSubnode));\\n    setChainlinkOracle(resolver.addr(oracleSubnode));\\n  }\\n\\n  /**\\n   * @notice Encodes the request to be sent to the oracle contract\\n   * @dev The Chainlink node expects values to be in order for the request to be picked up. Order of types\\n   * will be validated in the oracle contract.\\n   * @param _req The initialized Chainlink Request\\n   * @return The bytes payload for the `transferAndCall` method\\n   */\\n  function encodeRequest(Chainlink.Request memory _req)\\n    private\\n    view\\n    returns (bytes memory)\\n  {\\n    return abi.encodeWithSelector(\\n      oracle.oracleRequest.selector,\\n      SENDER_OVERRIDE, // Sender value - overridden by onTokenTransfer by the requesting contract's address\\n      AMOUNT_OVERRIDE, // Amount value - overridden by onTokenTransfer by the actual amount of LINK sent\\n      _req.id,\\n      _req.callbackAddress,\\n      _req.callbackFunctionId,\\n      _req.nonce,\\n      ARGS_VERSION,\\n      _req.buf.buf);\\n  }\\n\\n  /**\\n   * @notice Ensures that the fulfillment is valid for this contract\\n   * @dev Use if the contract developer prefers methods instead of modifiers for validation\\n   * @param _requestId The request ID for fulfillment\\n   */\\n  function validateChainlinkCallback(bytes32 _requestId)\\n    internal\\n    recordChainlinkFulfillment(_requestId)\\n    // solhint-disable-next-line no-empty-blocks\\n  {}\\n\\n  /**\\n   * @dev Reverts if the sender is not the oracle of the request.\\n   * Emits ChainlinkFulfilled event.\\n   * @param _requestId The request ID for fulfillment\\n   */\\n  modifier recordChainlinkFulfillment(bytes32 _requestId) {\\n    require(msg.sender == pendingRequests[_requestId],\\n            \\\"Source must be the oracle of the request\\\");\\n    delete pendingRequests[_requestId];\\n    emit ChainlinkFulfilled(_requestId);\\n    _;\\n  }\\n\\n  /**\\n   * @dev Reverts if the request is already pending\\n   * @param _requestId The request ID for fulfillment\\n   */\\n  modifier notPendingRequest(bytes32 _requestId) {\\n    require(pendingRequests[_requestId] == address(0), \\\"Request is already pending\\\");\\n    _;\\n  }\\n}\\n\"\r\n    },\r\n    \"contracts/SportFeed.sol\": {\r\n      \"content\": \"pragma solidity ^0.5.16;\\n\\nimport \\\"@chainlink/contracts/src/v0.5/ChainlinkClient.sol\\\";\\nimport \\\"synthetix-2.43.1/contracts/Owned.sol\\\";\\n\\ncontract SportFeed is ChainlinkClient, Owned {\\n    using Chainlink for Chainlink.Request;\\n\\n    address private oracle;\\n    bytes32 private jobId;\\n    uint256 private fee;\\n\\n    bytes32 public result;\\n\\n    string public resultString;\\n    string public firstPlace;\\n    string public secondPlace;\\n    string public thirdPlace;\\n\\n    string public endpoint;\\n    string public season;\\n    string public eventSport;\\n    string public gender;\\n\\n    constructor(\\n        address _owner,\\n        address _oracle,\\n        bytes32 _jobId,\\n        uint256 _fee,\\n        string memory _endpoint,\\n        string memory _season,\\n        string memory _event,\\n        string memory _gender\\n    ) public Owned(_owner) {\\n        //remove for the test\\n        setPublicChainlinkToken();\\n        oracle = _oracle;\\n        jobId = _jobId;\\n        fee = _fee;\\n        endpoint = _endpoint;\\n        season = _season;\\n        eventSport = _event;\\n        gender = _gender;\\n    }\\n\\n    function setOracle(address _oracle) external onlyOwner {\\n        oracle = _oracle;\\n    }\\n\\n    function setJobId(bytes32 _jobId) external onlyOwner {\\n        jobId = _jobId;\\n    }\\n\\n    function setFee(uint256 _fee) external onlyOwner {\\n        fee = _fee;\\n    }\\n\\n    function setSeason(string calldata _season) external onlyOwner {\\n        season = _season;\\n    }\\n\\n    function setEventSport(string calldata _event) external onlyOwner {\\n        eventSport = _event;\\n    }\\n\\n    function setGender(string calldata _gender) external onlyOwner {\\n        gender = _gender;\\n    }\\n\\n    function setEndpoint(string calldata _endpoint) external onlyOwner {\\n        endpoint = _endpoint;\\n    }\\n\\n    //0x5b22555341222c2243484e222c22474252225d00000000000000000000000000\\n    function setResult(bytes32 _result) external onlyOwner {\\n        _setResult(_result);\\n    }\\n\\n    function isCompetitorAtPlace(string calldata competitor, uint place) external view returns (bool) {\\n        if (place == 1) {\\n            return compareStrings(firstPlace, competitor);\\n        }\\n        if (place == 2) {\\n            return compareStrings(secondPlace, competitor);\\n        }\\n        if (place == 3) {\\n            return compareStrings(thirdPlace, competitor);\\n        }\\n        return false;\\n    }\\n\\n    /**\\n     * Initial request\\n     */\\n    function requestSportsWinner() external {\\n        Chainlink.Request memory req = buildChainlinkRequest(jobId, address(this), this.fulfillSportsWinner.selector);\\n        req.add(\\\"endpoint\\\", endpoint);\\n        req.add(\\\"season\\\", season);\\n        req.add(\\\"event\\\", eventSport);\\n        req.add(\\\"gender\\\", gender);\\n        sendChainlinkRequestTo(oracle, req, fee);\\n    }\\n\\n    /**\\n     * Callback function\\n     */\\n    function fulfillSportsWinner(bytes32 _requestId, bytes32 _result) external recordChainlinkFulfillment(_requestId) {\\n        _setResult(_result);\\n    }\\n\\n    function bytes32ToString(bytes32 _bytes32) internal pure returns (string memory) {\\n        uint8 i = 0;\\n        while (i < 32 && _bytes32[i] != 0) {\\n            i++;\\n        }\\n        bytes memory bytesArray = new bytes(i);\\n        for (i = 0; i < 32 && _bytes32[i] != 0; i++) {\\n            bytesArray[i] = _bytes32[i];\\n        }\\n        return string(bytesArray);\\n    }\\n\\n    function substring(\\n        string memory str,\\n        uint startIndex,\\n        uint endIndex\\n    ) internal pure returns (string memory) {\\n        bytes memory strBytes = bytes(str);\\n        bytes memory tresult = new bytes(endIndex - startIndex);\\n        for (uint i = startIndex; i < endIndex; i++) {\\n            tresult[i - startIndex] = strBytes[i];\\n        }\\n        return string(tresult);\\n    }\\n\\n    function compareStrings(string memory a, string memory b) internal pure returns (bool) {\\n        return (keccak256(abi.encodePacked((a))) == keccak256(abi.encodePacked((b))));\\n    }\\n\\n    function _setResult(bytes32 _result) internal {\\n        result = _result;\\n        resultString = bytes32ToString(_result);\\n        firstPlace = substring(resultString, 2, 5);\\n        secondPlace = substring(resultString, 8, 11);\\n        thirdPlace = substring(resultString, 14, 17);\\n    }\\n\\n    // function withdrawLink() external {} - Implement a withdraw function to avoid locking your LINK in the contract\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IOracleInstance.sol\": {\r\n      \"content\": \"pragma solidity >=0.4.24;\\n\\nimport \\\"../interfaces/IBinaryOptionMarket.sol\\\";\\n\\ninterface IOracleInstance {\\n    /* ========== VIEWS / VARIABLES ========== */\\n\\n    function getOutcome() external view returns (bool);\\n\\n    function resolvable() external view returns (bool);\\n\\n    function targetName() external view returns (string memory);\\n\\n    function targetOutcome() external view returns (string memory);\\n\\n    function eventName() external view returns (string memory);\\n\\n    /* ========== MUTATIVE FUNCTIONS ========== */\\n}\\n\"\r\n    },\r\n    \"synthetix-2.43.1/contracts/Owned.sol\": {\r\n      \"content\": \"pragma solidity ^0.5.16;\\n\\n// https://docs.synthetix.io/contracts/source/contracts/owned\\ncontract Owned {\\n    address public owner;\\n    address public nominatedOwner;\\n\\n    constructor(address _owner) public {\\n        require(_owner != address(0), \\\"Owner address cannot be 0\\\");\\n        owner = _owner;\\n        emit OwnerChanged(address(0), _owner);\\n    }\\n\\n    function nominateNewOwner(address _owner) external onlyOwner {\\n        nominatedOwner = _owner;\\n        emit OwnerNominated(_owner);\\n    }\\n\\n    function acceptOwnership() external {\\n        require(msg.sender == nominatedOwner, \\\"You must be nominated before you can accept ownership\\\");\\n        emit OwnerChanged(owner, nominatedOwner);\\n        owner = nominatedOwner;\\n        nominatedOwner = address(0);\\n    }\\n\\n    modifier onlyOwner {\\n        _onlyOwner();\\n        _;\\n    }\\n\\n    function _onlyOwner() private view {\\n        require(msg.sender == owner, \\\"Only the contract owner may perform this action\\\");\\n    }\\n\\n    event OwnerNominated(address newOwner);\\n    event OwnerChanged(address oldOwner, address newOwner);\\n}\\n\"\r\n    },\r\n    \"solidity-util/lib/Integers.sol\": {\r\n      \"content\": \"pragma solidity ^0.5.0;\\r\\n\\r\\n/**\\r\\n * Integers Library\\r\\n * \\r\\n * In summary this is a simple library of integer functions which allow a simple\\r\\n * conversion to and from strings\\r\\n * \\r\\n * @author James Lockhart <james@n3tw0rk.co.uk>\\r\\n */\\r\\nlibrary Integers {\\r\\n    /**\\r\\n     * Parse Int\\r\\n     * \\r\\n     * Converts an ASCII string value into an uint as long as the string \\r\\n     * its self is a valid unsigned integer\\r\\n     * \\r\\n     * @param _value The ASCII string to be converted to an unsigned integer\\r\\n     * @return uint The unsigned value of the ASCII string\\r\\n     */\\r\\n    function parseInt(string memory _value)\\r\\n        public\\r\\n        pure\\r\\n        returns (uint _ret) {\\r\\n        bytes memory _bytesValue = bytes(_value);\\r\\n        uint j = 1;\\r\\n        for(uint i = _bytesValue.length-1; i >= 0 && i < _bytesValue.length; i--) {\\r\\n            assert(uint8(_bytesValue[i]) >= 48 && uint8(_bytesValue[i]) <= 57);\\r\\n            _ret += (uint8(_bytesValue[i]) - 48)*j;\\r\\n            j*=10;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * To String\\r\\n     * \\r\\n     * Converts an unsigned integer to the ASCII string equivalent value\\r\\n     * \\r\\n     * @param _base The unsigned integer to be converted to a string\\r\\n     * @return string The resulting ASCII string value\\r\\n     */\\r\\n    function toString(uint _base)\\r\\n        internal\\r\\n        pure\\r\\n        returns (string memory) {\\r\\n        bytes memory _tmp = new bytes(32);\\r\\n        uint i;\\r\\n        for(i = 0;_base > 0;i++) {\\r\\n            _tmp[i] = byte(uint8((_base % 10) + 48));\\r\\n            _base /= 10;\\r\\n        }\\r\\n        bytes memory _real = new bytes(i--);\\r\\n        for(uint j = 0; j < _real.length; j++) {\\r\\n            _real[j] = _tmp[i--];\\r\\n        }\\r\\n        return string(_real);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * To Byte\\r\\n     *\\r\\n     * Convert an 8 bit unsigned integer to a byte\\r\\n     *\\r\\n     * @param _base The 8 bit unsigned integer\\r\\n     * @return byte The byte equivalent\\r\\n     */\\r\\n    function toByte(uint8 _base)\\r\\n        public\\r\\n        pure\\r\\n        returns (byte _ret) {\\r\\n        assembly {\\r\\n            let m_alloc := add(msize(),0x1)\\r\\n            mstore8(m_alloc, _base)\\r\\n            _ret := mload(m_alloc)\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * To Bytes\\r\\n     *\\r\\n     * Converts an unsigned integer to bytes\\r\\n     *\\r\\n     * @param _base The integer to be converted to bytes\\r\\n     * @return bytes The bytes equivalent \\r\\n     */\\r\\n    function toBytes(uint _base)\\r\\n        internal\\r\\n        pure\\r\\n        returns (bytes memory _ret) {\\r\\n        assembly {\\r\\n            let m_alloc := add(msize(),0x1)\\r\\n            _ret := mload(m_alloc)\\r\\n            mstore(_ret, 0x20)\\r\\n            mstore(add(_ret, 0x20), _base)\\r\\n        }\\r\\n    }\\r\\n}\"\r\n    },\r\n    \"@chainlink/contracts/src/v0.5/Chainlink.sol\": {\r\n      \"content\": \"pragma solidity ^0.5.0;\\n\\nimport { CBOR as CBOR_Chainlink } from \\\"./vendor/CBOR.sol\\\";\\nimport { Buffer as Buffer_Chainlink } from \\\"./vendor/Buffer.sol\\\";\\n\\n/**\\n * @title Library for common Chainlink functions\\n * @dev Uses imported CBOR library for encoding to buffer\\n */\\nlibrary Chainlink {\\n  uint256 internal constant defaultBufferSize = 256; // solhint-disable-line const-name-snakecase\\n\\n  using CBOR_Chainlink for Buffer_Chainlink.buffer;\\n\\n  struct Request {\\n    bytes32 id;\\n    address callbackAddress;\\n    bytes4 callbackFunctionId;\\n    uint256 nonce;\\n    Buffer_Chainlink.buffer buf;\\n  }\\n\\n  /**\\n   * @notice Initializes a Chainlink request\\n   * @dev Sets the ID, callback address, and callback function signature on the request\\n   * @param self The uninitialized request\\n   * @param _id The Job Specification ID\\n   * @param _callbackAddress The callback address\\n   * @param _callbackFunction The callback function signature\\n   * @return The initialized request\\n   */\\n  function initialize(\\n    Request memory self,\\n    bytes32 _id,\\n    address _callbackAddress,\\n    bytes4 _callbackFunction\\n  ) internal pure returns (Chainlink.Request memory) {\\n    Buffer_Chainlink.init(self.buf, defaultBufferSize);\\n    self.id = _id;\\n    self.callbackAddress = _callbackAddress;\\n    self.callbackFunctionId = _callbackFunction;\\n    return self;\\n  }\\n\\n  /**\\n   * @notice Sets the data for the buffer without encoding CBOR on-chain\\n   * @dev CBOR can be closed with curly-brackets {} or they can be left off\\n   * @param self The initialized request\\n   * @param _data The CBOR data\\n   */\\n  function setBuffer(Request memory self, bytes memory _data)\\n    internal pure\\n  {\\n    Buffer_Chainlink.init(self.buf, _data.length);\\n    Buffer_Chainlink.append(self.buf, _data);\\n  }\\n\\n  /**\\n   * @notice Adds a string value to the request with a given key name\\n   * @param self The initialized request\\n   * @param _key The name of the key\\n   * @param _value The string value to add\\n   */\\n  function add(Request memory self, string memory _key, string memory _value)\\n    internal pure\\n  {\\n    self.buf.encodeString(_key);\\n    self.buf.encodeString(_value);\\n  }\\n\\n  /**\\n   * @notice Adds a bytes value to the request with a given key name\\n   * @param self The initialized request\\n   * @param _key The name of the key\\n   * @param _value The bytes value to add\\n   */\\n  function addBytes(Request memory self, string memory _key, bytes memory _value)\\n    internal pure\\n  {\\n    self.buf.encodeString(_key);\\n    self.buf.encodeBytes(_value);\\n  }\\n\\n  /**\\n   * @notice Adds a int256 value to the request with a given key name\\n   * @param self The initialized request\\n   * @param _key The name of the key\\n   * @param _value The int256 value to add\\n   */\\n  function addInt(Request memory self, string memory _key, int256 _value)\\n    internal pure\\n  {\\n    self.buf.encodeString(_key);\\n    self.buf.encodeInt(_value);\\n  }\\n\\n  /**\\n   * @notice Adds a uint256 value to the request with a given key name\\n   * @param self The initialized request\\n   * @param _key The name of the key\\n   * @param _value The uint256 value to add\\n   */\\n  function addUint(Request memory self, string memory _key, uint256 _value)\\n    internal pure\\n  {\\n    self.buf.encodeString(_key);\\n    self.buf.encodeUInt(_value);\\n  }\\n\\n  /**\\n   * @notice Adds an array of strings to the request with a given key name\\n   * @param self The initialized request\\n   * @param _key The name of the key\\n   * @param _values The array of string values to add\\n   */\\n  function addStringArray(Request memory self, string memory _key, string[] memory _values)\\n    internal pure\\n  {\\n    self.buf.encodeString(_key);\\n    self.buf.startArray();\\n    for (uint256 i = 0; i < _values.length; i++) {\\n      self.buf.encodeString(_values[i]);\\n    }\\n    self.buf.endSequence();\\n  }\\n}\\n\"\r\n    },\r\n    \"@chainlink/contracts/src/v0.5/interfaces/ENSInterface.sol\": {\r\n      \"content\": \"pragma solidity ^0.5.0;\\n\\ninterface ENSInterface {\\n\\n  // Logged when the owner of a node assigns a new owner to a subnode.\\n  event NewOwner(bytes32 indexed node, bytes32 indexed label, address owner);\\n\\n  // Logged when the owner of a node transfers ownership to a new account.\\n  event Transfer(bytes32 indexed node, address owner);\\n\\n  // Logged when the resolver for a node changes.\\n  event NewResolver(bytes32 indexed node, address resolver);\\n\\n  // Logged when the TTL of a node changes\\n  event NewTTL(bytes32 indexed node, uint64 ttl);\\n\\n\\n  function setSubnodeOwner(bytes32 node, bytes32 label, address _owner) external;\\n  function setResolver(bytes32 node, address _resolver) external;\\n  function setOwner(bytes32 node, address _owner) external;\\n  function setTTL(bytes32 node, uint64 _ttl) external;\\n  function owner(bytes32 node) external view returns (address);\\n  function resolver(bytes32 node) external view returns (address);\\n  function ttl(bytes32 node) external view returns (uint64);\\n\\n}\\n\"\r\n    },\r\n    \"@chainlink/contracts/src/v0.5/interfaces/LinkTokenInterface.sol\": {\r\n      \"content\": \"pragma solidity ^0.5.0;\\n\\ninterface LinkTokenInterface {\\n  function allowance(address owner, address spender) external view returns (uint256 remaining);\\n  function approve(address spender, uint256 value) external returns (bool success);\\n  function balanceOf(address owner) external view returns (uint256 balance);\\n  function decimals() external view returns (uint8 decimalPlaces);\\n  function decreaseApproval(address spender, uint256 addedValue) external returns (bool success);\\n  function increaseApproval(address spender, uint256 subtractedValue) external;\\n  function name() external view returns (string memory tokenName);\\n  function symbol() external view returns (string memory tokenSymbol);\\n  function totalSupply() external view returns (uint256 totalTokensIssued);\\n  function transfer(address to, uint256 value) external returns (bool success);\\n  function transferAndCall(address to, uint256 value, bytes calldata data) external returns (bool success);\\n  function transferFrom(address from, address to, uint256 value) external returns (bool success);\\n}\\n\"\r\n    },\r\n    \"@chainlink/contracts/src/v0.5/interfaces/ChainlinkRequestInterface.sol\": {\r\n      \"content\": \"pragma solidity ^0.5.0;\\n\\ninterface ChainlinkRequestInterface {\\n  function oracleRequest(\\n    address sender,\\n    uint256 requestPrice,\\n    bytes32 serviceAgreementID,\\n    address callbackAddress,\\n    bytes4 callbackFunctionId,\\n    uint256 nonce,\\n    uint256 dataVersion,\\n    bytes calldata data\\n  ) external;\\n\\n  function cancelOracleRequest(\\n    bytes32 requestId,\\n    uint256 payment,\\n    bytes4 callbackFunctionId,\\n    uint256 expiration\\n  ) external;\\n}\\n\"\r\n    },\r\n    \"@chainlink/contracts/src/v0.5/interfaces/PointerInterface.sol\": {\r\n      \"content\": \"pragma solidity ^0.5.0;\\n\\ninterface PointerInterface {\\n  function getAddress() external view returns (address);\\n}\\n\"\r\n    },\r\n    \"@chainlink/contracts/src/v0.5/vendor/ENSResolver.sol\": {\r\n      \"content\": \"pragma solidity ^0.5.0;\\n\\ncontract ENSResolver {\\n  function addr(bytes32 node) public view returns (address);\\n}\\n\"\r\n    },\r\n    \"@chainlink/contracts/src/v0.5/vendor/CBOR.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity >= 0.4.19 < 0.7.0;\\n\\nimport { Buffer as BufferChainlink } from \\\"./Buffer.sol\\\";\\n\\nlibrary CBOR {\\n    using BufferChainlink for BufferChainlink.buffer;\\n\\n    uint8 private constant MAJOR_TYPE_INT = 0;\\n    uint8 private constant MAJOR_TYPE_NEGATIVE_INT = 1;\\n    uint8 private constant MAJOR_TYPE_BYTES = 2;\\n    uint8 private constant MAJOR_TYPE_STRING = 3;\\n    uint8 private constant MAJOR_TYPE_ARRAY = 4;\\n    uint8 private constant MAJOR_TYPE_MAP = 5;\\n    uint8 private constant MAJOR_TYPE_TAG = 6;\\n    uint8 private constant MAJOR_TYPE_CONTENT_FREE = 7;\\n\\n    uint8 private constant TAG_TYPE_BIGNUM = 2;\\n    uint8 private constant TAG_TYPE_NEGATIVE_BIGNUM = 3;\\n\\n    function encodeType(BufferChainlink.buffer memory buf, uint8 major, uint value) private pure {\\n        if(value <= 23) {\\n            buf.appendUint8(uint8((major << 5) | value));\\n        } else if(value <= 0xFF) {\\n            buf.appendUint8(uint8((major << 5) | 24));\\n            buf.appendInt(value, 1);\\n        } else if(value <= 0xFFFF) {\\n            buf.appendUint8(uint8((major << 5) | 25));\\n            buf.appendInt(value, 2);\\n        } else if(value <= 0xFFFFFFFF) {\\n            buf.appendUint8(uint8((major << 5) | 26));\\n            buf.appendInt(value, 4);\\n        } else if(value <= 0xFFFFFFFFFFFFFFFF) {\\n            buf.appendUint8(uint8((major << 5) | 27));\\n            buf.appendInt(value, 8);\\n        }\\n    }\\n\\n    function encodeIndefiniteLengthType(BufferChainlink.buffer memory buf, uint8 major) private pure {\\n        buf.appendUint8(uint8((major << 5) | 31));\\n    }\\n\\n    function encodeUInt(BufferChainlink.buffer memory buf, uint value) internal pure {\\n        encodeType(buf, MAJOR_TYPE_INT, value);\\n    }\\n\\n    function encodeInt(BufferChainlink.buffer memory buf, int value) internal pure {\\n        if(value < -0x10000000000000000) {\\n            encodeSignedBigNum(buf, value);\\n        } else if(value > 0xFFFFFFFFFFFFFFFF) {\\n            encodeBigNum(buf, value);\\n        } else if(value >= 0) {\\n            encodeType(buf, MAJOR_TYPE_INT, uint(value));\\n        } else {\\n            encodeType(buf, MAJOR_TYPE_NEGATIVE_INT, uint(-1 - value));\\n        }\\n    }\\n\\n    function encodeBytes(BufferChainlink.buffer memory buf, bytes memory value) internal pure {\\n        encodeType(buf, MAJOR_TYPE_BYTES, value.length);\\n        buf.append(value);\\n    }\\n\\n    function encodeBigNum(BufferChainlink.buffer memory buf, int value) internal pure {\\n      buf.appendUint8(uint8((MAJOR_TYPE_TAG << 5) | TAG_TYPE_BIGNUM));\\n      encodeBytes(buf, abi.encode(uint(value)));\\n    }\\n\\n    function encodeSignedBigNum(BufferChainlink.buffer memory buf, int input) internal pure {\\n      buf.appendUint8(uint8((MAJOR_TYPE_TAG << 5) | TAG_TYPE_NEGATIVE_BIGNUM));\\n      encodeBytes(buf, abi.encode(uint(-1 - input)));\\n    }\\n\\n    function encodeString(BufferChainlink.buffer memory buf, string memory value) internal pure {\\n        encodeType(buf, MAJOR_TYPE_STRING, bytes(value).length);\\n        buf.append(bytes(value));\\n    }\\n\\n    function startArray(BufferChainlink.buffer memory buf) internal pure {\\n        encodeIndefiniteLengthType(buf, MAJOR_TYPE_ARRAY);\\n    }\\n\\n    function startMap(BufferChainlink.buffer memory buf) internal pure {\\n        encodeIndefiniteLengthType(buf, MAJOR_TYPE_MAP);\\n    }\\n\\n    function endSequence(BufferChainlink.buffer memory buf) internal pure {\\n        encodeIndefiniteLengthType(buf, MAJOR_TYPE_CONTENT_FREE);\\n    }\\n}\\n\"\r\n    },\r\n    \"@chainlink/contracts/src/v0.5/vendor/Buffer.sol\": {\r\n      \"content\": \"pragma solidity ^0.5.0;\\n\\n/**\\n* @dev A library for working with mutable byte buffers in Solidity.\\n*\\n* Byte buffers are mutable and expandable, and provide a variety of primitives\\n* for writing to them. At any time you can fetch a bytes object containing the\\n* current contents of the buffer. The bytes object should not be stored between\\n* operations, as it may change due to resizing of the buffer.\\n*/\\nlibrary Buffer {\\n  /**\\n  * @dev Represents a mutable buffer. Buffers have a current value (buf) and\\n  *      a capacity. The capacity may be longer than the current value, in\\n  *      which case it can be extended without the need to allocate more memory.\\n  */\\n  struct buffer {\\n    bytes buf;\\n    uint capacity;\\n  }\\n\\n  /**\\n  * @dev Initializes a buffer with an initial capacity.\\n  * @param buf The buffer to initialize.\\n  * @param capacity The number of bytes of space to allocate the buffer.\\n  * @return The buffer, for chaining.\\n  */\\n  function init(buffer memory buf, uint capacity) internal pure returns(buffer memory) {\\n    if (capacity % 32 != 0) {\\n      capacity += 32 - (capacity % 32);\\n    }\\n    // Allocate space for the buffer data\\n    buf.capacity = capacity;\\n    assembly {\\n      let ptr := mload(0x40)\\n      mstore(buf, ptr)\\n      mstore(ptr, 0)\\n      mstore(0x40, add(32, add(ptr, capacity)))\\n    }\\n    return buf;\\n  }\\n\\n  /**\\n  * @dev Initializes a new buffer from an existing bytes object.\\n  *      Changes to the buffer may mutate the original value.\\n  * @param b The bytes object to initialize the buffer with.\\n  * @return A new buffer.\\n  */\\n  function fromBytes(bytes memory b) internal pure returns(buffer memory) {\\n    buffer memory buf;\\n    buf.buf = b;\\n    buf.capacity = b.length;\\n    return buf;\\n  }\\n\\n  function resize(buffer memory buf, uint capacity) private pure {\\n    bytes memory oldbuf = buf.buf;\\n    init(buf, capacity);\\n    append(buf, oldbuf);\\n  }\\n\\n  function max(uint a, uint b) private pure returns(uint) {\\n    if (a > b) {\\n      return a;\\n    }\\n    return b;\\n  }\\n\\n  /**\\n  * @dev Sets buffer length to 0.\\n  * @param buf The buffer to truncate.\\n  * @return The original buffer, for chaining..\\n  */\\n  function truncate(buffer memory buf) internal pure returns (buffer memory) {\\n    assembly {\\n      let bufptr := mload(buf)\\n      mstore(bufptr, 0)\\n    }\\n    return buf;\\n  }\\n\\n  /**\\n  * @dev Writes a byte string to a buffer. Resizes if doing so would exceed\\n  *      the capacity of the buffer.\\n  * @param buf The buffer to append to.\\n  * @param off The start offset to write to.\\n  * @param data The data to append.\\n  * @param len The number of bytes to copy.\\n  * @return The original buffer, for chaining.\\n  */\\n  function write(buffer memory buf, uint off, bytes memory data, uint len) internal pure returns(buffer memory) {\\n    require(len <= data.length);\\n\\n    if (off + len > buf.capacity) {\\n      resize(buf, max(buf.capacity, len + off) * 2);\\n    }\\n\\n    uint dest;\\n    uint src;\\n    assembly {\\n      // Memory address of the buffer data\\n      let bufptr := mload(buf)\\n      // Length of existing buffer data\\n      let buflen := mload(bufptr)\\n      // Start address = buffer address + offset + sizeof(buffer length)\\n      dest := add(add(bufptr, 32), off)\\n      // Update buffer length if we're extending it\\n      if gt(add(len, off), buflen) {\\n        mstore(bufptr, add(len, off))\\n      }\\n      src := add(data, 32)\\n    }\\n\\n    // Copy word-length chunks while possible\\n    for (; len >= 32; len -= 32) {\\n      assembly {\\n        mstore(dest, mload(src))\\n      }\\n      dest += 32;\\n      src += 32;\\n    }\\n\\n    // Copy remaining bytes\\n    uint mask = 256 ** (32 - len) - 1;\\n    assembly {\\n      let srcpart := and(mload(src), not(mask))\\n      let destpart := and(mload(dest), mask)\\n      mstore(dest, or(destpart, srcpart))\\n    }\\n\\n    return buf;\\n  }\\n\\n  /**\\n  * @dev Appends a byte string to a buffer. Resizes if doing so would exceed\\n  *      the capacity of the buffer.\\n  * @param buf The buffer to append to.\\n  * @param data The data to append.\\n  * @param len The number of bytes to copy.\\n  * @return The original buffer, for chaining.\\n  */\\n  function append(buffer memory buf, bytes memory data, uint len) internal pure returns (buffer memory) {\\n    return write(buf, buf.buf.length, data, len);\\n  }\\n\\n  /**\\n  * @dev Appends a byte string to a buffer. Resizes if doing so would exceed\\n  *      the capacity of the buffer.\\n  * @param buf The buffer to append to.\\n  * @param data The data to append.\\n  * @return The original buffer, for chaining.\\n  */\\n  function append(buffer memory buf, bytes memory data) internal pure returns (buffer memory) {\\n    return write(buf, buf.buf.length, data, data.length);\\n  }\\n\\n  /**\\n  * @dev Writes a byte to the buffer. Resizes if doing so would exceed the\\n  *      capacity of the buffer.\\n  * @param buf The buffer to append to.\\n  * @param off The offset to write the byte at.\\n  * @param data The data to append.\\n  * @return The original buffer, for chaining.\\n  */\\n  function writeUint8(buffer memory buf, uint off, uint8 data) internal pure returns(buffer memory) {\\n    if (off >= buf.capacity) {\\n      resize(buf, buf.capacity * 2);\\n    }\\n\\n    assembly {\\n      // Memory address of the buffer data\\n      let bufptr := mload(buf)\\n      // Length of existing buffer data\\n      let buflen := mload(bufptr)\\n      // Address = buffer address + sizeof(buffer length) + off\\n      let dest := add(add(bufptr, off), 32)\\n      mstore8(dest, data)\\n      // Update buffer length if we extended it\\n      if eq(off, buflen) {\\n        mstore(bufptr, add(buflen, 1))\\n      }\\n    }\\n    return buf;\\n  }\\n\\n  /**\\n  * @dev Appends a byte to the buffer. Resizes if doing so would exceed the\\n  *      capacity of the buffer.\\n  * @param buf The buffer to append to.\\n  * @param data The data to append.\\n  * @return The original buffer, for chaining.\\n  */\\n  function appendUint8(buffer memory buf, uint8 data) internal pure returns(buffer memory) {\\n    return writeUint8(buf, buf.buf.length, data);\\n  }\\n\\n  /**\\n  * @dev Writes up to 32 bytes to the buffer. Resizes if doing so would\\n  *      exceed the capacity of the buffer.\\n  * @param buf The buffer to append to.\\n  * @param off The offset to write at.\\n  * @param data The data to append.\\n  * @param len The number of bytes to write (left-aligned).\\n  * @return The original buffer, for chaining.\\n  */\\n  function write(buffer memory buf, uint off, bytes32 data, uint len) private pure returns(buffer memory) {\\n    if (len + off > buf.capacity) {\\n      resize(buf, (len + off) * 2);\\n    }\\n\\n    uint mask = 256 ** len - 1;\\n    // Right-align data\\n    data = data >> (8 * (32 - len));\\n    assembly {\\n      // Memory address of the buffer data\\n      let bufptr := mload(buf)\\n      // Address = buffer address + sizeof(buffer length) + off + len\\n      let dest := add(add(bufptr, off), len)\\n      mstore(dest, or(and(mload(dest), not(mask)), data))\\n      // Update buffer length if we extended it\\n      if gt(add(off, len), mload(bufptr)) {\\n        mstore(bufptr, add(off, len))\\n      }\\n    }\\n    return buf;\\n  }\\n\\n  /**\\n  * @dev Writes a bytes20 to the buffer. Resizes if doing so would exceed the\\n  *      capacity of the buffer.\\n  * @param buf The buffer to append to.\\n  * @param off The offset to write at.\\n  * @param data The data to append.\\n  * @return The original buffer, for chaining.\\n  */\\n  function writeBytes20(buffer memory buf, uint off, bytes20 data) internal pure returns (buffer memory) {\\n    return write(buf, off, bytes32(data), 20);\\n  }\\n\\n  /**\\n  * @dev Appends a bytes20 to the buffer. Resizes if doing so would exceed\\n  *      the capacity of the buffer.\\n  * @param buf The buffer to append to.\\n  * @param data The data to append.\\n  * @return The original buffer, for chhaining.\\n  */\\n  function appendBytes20(buffer memory buf, bytes20 data) internal pure returns (buffer memory) {\\n    return write(buf, buf.buf.length, bytes32(data), 20);\\n  }\\n\\n  /**\\n  * @dev Appends a bytes32 to the buffer. Resizes if doing so would exceed\\n  *      the capacity of the buffer.\\n  * @param buf The buffer to append to.\\n  * @param data The data to append.\\n  * @return The original buffer, for chaining.\\n  */\\n  function appendBytes32(buffer memory buf, bytes32 data) internal pure returns (buffer memory) {\\n    return write(buf, buf.buf.length, data, 32);\\n  }\\n\\n  /**\\n  * @dev Writes an integer to the buffer. Resizes if doing so would exceed\\n  *      the capacity of the buffer.\\n  * @param buf The buffer to append to.\\n  * @param off The offset to write at.\\n  * @param data The data to append.\\n  * @param len The number of bytes to write (right-aligned).\\n  * @return The original buffer, for chaining.\\n  */\\n  function writeInt(buffer memory buf, uint off, uint data, uint len) private pure returns(buffer memory) {\\n    if (len + off > buf.capacity) {\\n      resize(buf, (len + off) * 2);\\n    }\\n\\n    uint mask = 256 ** len - 1;\\n    assembly {\\n      // Memory address of the buffer data\\n      let bufptr := mload(buf)\\n      // Address = buffer address + off + sizeof(buffer length) + len\\n      let dest := add(add(bufptr, off), len)\\n      mstore(dest, or(and(mload(dest), not(mask)), data))\\n      // Update buffer length if we extended it\\n      if gt(add(off, len), mload(bufptr)) {\\n        mstore(bufptr, add(off, len))\\n      }\\n    }\\n    return buf;\\n  }\\n\\n  /**\\n    * @dev Appends a byte to the end of the buffer. Resizes if doing so would\\n    * exceed the capacity of the buffer.\\n    * @param buf The buffer to append to.\\n    * @param data The data to append.\\n    * @return The original buffer.\\n    */\\n  function appendInt(buffer memory buf, uint data, uint len) internal pure returns(buffer memory) {\\n    return writeInt(buf, buf.buf.length, data, len);\\n  }\\n}\"\r\n    },\r\n    \"contracts/interfaces/IBinaryOptionMarket.sol\": {\r\n      \"content\": \"pragma solidity >=0.4.24;\\n\\nimport \\\"../interfaces/IBinaryOptionMarketManager.sol\\\";\\nimport \\\"../interfaces/IBinaryOption.sol\\\";\\n\\ninterface IBinaryOptionMarket {\\n    /* ========== TYPES ========== */\\n\\n    enum Phase {Trading, Maturity, Expiry}\\n    enum Side {Long, Short}\\n\\n    /* ========== VIEWS / VARIABLES ========== */\\n\\n    function options() external view returns (IBinaryOption long, IBinaryOption short);\\n\\n    function times()\\n        external\\n        view\\n        returns (\\n            uint maturity,\\n            uint destructino\\n        );\\n\\n    function oracleDetails()\\n        external\\n        view\\n        returns (\\n            bytes32 key,\\n            uint strikePrice,\\n            uint finalPrice\\n        );\\n\\n    function fees()\\n        external\\n        view\\n        returns (\\n            uint poolFee,\\n            uint creatorFee\\n        );\\n\\n    function deposited() external view returns (uint);\\n\\n    function accumulatedFees() external view returns (uint);\\n\\n    function creator() external view returns (address);\\n\\n    function resolved() external view returns (bool);\\n\\n    function phase() external view returns (Phase);\\n\\n    function oraclePriceAndTimestamp() external view returns (uint price, uint updatedAt);\\n\\n    function canResolve() external view returns (bool);\\n\\n    function result() external view returns (Side);\\n\\n    function balancesOf(address account) external view returns (uint long, uint short);\\n\\n    function totalSupplies() external view returns (uint long, uint short);\\n\\n    /* ========== MUTATIVE FUNCTIONS ========== */\\n\\n    function mint(uint value) external;\\n\\n    function exerciseOptions() external returns (uint);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IBinaryOptionMarketManager.sol\": {\r\n      \"content\": \"pragma solidity >=0.4.24;\\n\\nimport \\\"../interfaces/IBinaryOptionMarket.sol\\\";\\n\\ninterface IBinaryOptionMarketManager {\\n    /* ========== VIEWS / VARIABLES ========== */\\n\\n    function fees() external view returns (uint poolFee, uint creatorFee);\\n\\n    function durations()\\n        external\\n        view\\n        returns (\\n            uint maxOraclePriceAge,\\n            uint expiryDuration,\\n            uint maxTimeToMaturity\\n        );\\n\\n    function capitalRequirement() external view returns (uint);\\n\\n    function marketCreationEnabled() external view returns (bool);\\n\\n    function totalDeposited() external view returns (uint);\\n\\n    function numActiveMarkets() external view returns (uint);\\n\\n    function activeMarkets(uint index, uint pageSize) external view returns (address[] memory);\\n\\n    function numMaturedMarkets() external view returns (uint);\\n\\n    function maturedMarkets(uint index, uint pageSize) external view returns (address[] memory);\\n\\n    /* ========== MUTATIVE FUNCTIONS ========== */\\n\\n    function createMarket(\\n        bytes32 oracleKey,\\n        uint strikePrice,\\n        uint maturity,\\n        uint initialMint, // initial sUSD to mint options for,\\n        bool customMarket,\\n        address customOracle\\n    ) external returns (IBinaryOptionMarket);\\n\\n    function resolveMarket(address market) external;\\n\\n    function expireMarkets(address[] calldata market) external;\\n\\n    function transferSusdTo(\\n        address sender,\\n        address receiver,\\n        uint amount\\n    ) external;\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IBinaryOption.sol\": {\r\n      \"content\": \"pragma solidity >=0.4.24;\\n\\nimport \\\"../interfaces/IBinaryOptionMarket.sol\\\";\\nimport \\\"synthetix-2.43.1/contracts/interfaces/IERC20.sol\\\";\\n\\ninterface IBinaryOption {\\n    /* ========== VIEWS / VARIABLES ========== */\\n\\n    function market() external view returns (IBinaryOptionMarket);\\n\\n    function balanceOf(address account) external view returns (uint);\\n\\n    function totalSupply() external view returns (uint);\\n\\n}\\n\"\r\n    },\r\n    \"synthetix-2.43.1/contracts/interfaces/IERC20.sol\": {\r\n      \"content\": \"pragma solidity >=0.4.24;\\n\\n// https://docs.synthetix.io/contracts/source/interfaces/ierc20\\ninterface IERC20 {\\n    // ERC20 Optional Views\\n    function name() external view returns (string memory);\\n\\n    function symbol() external view returns (string memory);\\n\\n    function decimals() external view returns (uint8);\\n\\n    // Views\\n    function totalSupply() external view returns (uint);\\n\\n    function balanceOf(address owner) external view returns (uint);\\n\\n    function allowance(address owner, address spender) external view returns (uint);\\n\\n    // Mutative functions\\n    function transfer(address to, uint value) external returns (bool);\\n\\n    function approve(address spender, uint value) external returns (bool);\\n\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint value\\n    ) external returns (bool);\\n\\n    // Events\\n    event Transfer(address indexed from, address indexed to, uint value);\\n\\n    event Approval(address indexed owner, address indexed spender, uint value);\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {\r\n      \"solidity-util/lib/Integers.sol\": {\r\n        \"Integers\": \"0x6c0dfeeb57e126d2a66a71a44678ab51b8a5b1b5\"\r\n      }\r\n    }\r\n  }\r\n}}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_sportFeed\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"_targetName\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_targetOutcome\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_eventName\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldOwner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnerChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnerNominated\",\"type\":\"event\"},{\"constant\":false,\"inputs\":[],\"name\":\"acceptOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"clearOutcome\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"eventName\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getOutcome\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"nominateNewOwner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"nominatedOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"outcome\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"resolvable\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_outcome\",\"type\":\"bool\"}],\"name\":\"setOutcome\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_resolvable\",\"type\":\"bool\"}],\"name\":\"setResolvable\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"sportFeed\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"targetName\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"targetOutcome\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"SportFeedOracleInstance","CompilerVersion":"v0.5.16+commit.9c3226ce","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"0000000000000000000000004d03ef005e5f559fc9294a8e1cebba09284b1f82000000000000000000000000eec8109730111fe1f17d55a814e831a1a211e3a700000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000000e000000000000000000000000000000000000000000000000000000000000001200000000000000000000000000000000000000000000000000000000000000003555341000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000013100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001c4f6c796d7069637320476f6c64204d6564616c732052616e6b696e6700000000","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}