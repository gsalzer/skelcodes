{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/X2Restart.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: Unlicense\\npragma solidity 0.4.25;\\n\\nimport \\\"./SafeMath.sol\\\";\\n\\n/**\\nThe development of the contract is entirely owned by the X2{re}start campaign, any copying of the source code is not legal.\\n*/\\ncontract X2Restart {\\n    //use of library of safe mathematical operations\\n    using SafeMath for uint256;\\n    // array containing information about beneficiaries\\n    mapping(address => uint256) public userDeposit;\\n    //array containing information about the time of payment\\n    mapping(address => uint256) public userTime;\\n    //array containing information on interest paid\\n    mapping(address => uint256) public persentWithdraw;\\n    //fund fo transfer percent\\n    address public projectFund = 0xb615E5c6d21Ae628eA4490e2653b9aEb0a3902b5;\\n    //wallet for a charitable foundation\\n    address public charityFund = 0x206448E6C7D9833af63fFe2335cfF49D5f6d0dff;\\n    //percentage deducted to the advertising fund\\n    uint256 projectPercent = 8;\\n    //percent for a charitable foundation\\n    uint256 public charityPercent = 1;\\n    //time through which you can take dividends\\n    uint256 public chargingTime = 1 hours;\\n    //start persent 0.25% per hour\\n    uint256 public startPercent = 250;\\n    uint256 public lowPersent = 300;\\n    uint256 public middlePersent = 350;\\n    uint256 public highPersent = 375;\\n    //interest rate increase steps\\n    uint256 public stepLow = 1000 ether;\\n    uint256 public stepMiddle = 2500 ether;\\n    uint256 public stepHigh = 5000 ether;\\n    uint256 public countOfInvestors = 0;\\n    uint256 public countOfCharity = 0;\\n\\n    modifier isIssetUser() {\\n        require(userDeposit[msg.sender] > 0, \\\"Deposit not found\\\");\\n        _;\\n    }\\n\\n    modifier timePayment() {\\n        require(\\n            now >= userTime[msg.sender].add(chargingTime),\\n            \\\"Too fast payout request\\\"\\n        );\\n        _;\\n    }\\n\\n    //return of interest on the deposit\\n    function collectPercent() internal isIssetUser timePayment {\\n        address msgSender = msg.sender;\\n        //if the user received 200% or more of his contribution, delete the user\\n        if ((userDeposit[msgSender].mul(2)) <= persentWithdraw[msgSender]) {\\n            userDeposit[msgSender] = 0;\\n            userTime[msgSender] = 0;\\n            persentWithdraw[msgSender] = 0;\\n        } else {\\n            uint256 payout = payoutAmount();\\n            userTime[msgSender] = now;\\n            persentWithdraw[msgSender] += payout;\\n            msgSender.transfer(payout);\\n        }\\n    }\\n\\n    //calculation of the current interest rate on the deposit\\n    function persentRate() public view returns (uint256) {\\n        //get contract balance\\n        uint256 balance = address(this).balance;\\n        //calculate persent rate\\n        if (balance < stepLow) {\\n            return (startPercent);\\n        }\\n        if (balance >= stepLow && balance < stepMiddle) {\\n            return (lowPersent);\\n        }\\n        if (balance >= stepMiddle && balance < stepHigh) {\\n            return (middlePersent);\\n        }\\n        if (balance >= stepHigh) {\\n            return (highPersent);\\n        }\\n    }\\n\\n    //refund of the amount available for withdrawal on deposit\\n    function payoutAmount() public view returns (uint256) {\\n        uint256 persent = persentRate();\\n        uint256 rate = userDeposit[msg.sender].mul(persent).div(100000);\\n        uint256 interestRate = now.sub(userTime[msg.sender]).div(chargingTime);\\n        uint256 withdrawalAmount = rate.mul(interestRate);\\n        return (withdrawalAmount);\\n    }\\n\\n    //make a contribution to the system\\n    function makeDeposit() private {\\n        address msgSender = msg.sender;\\n        uint256 msgValue = msg.value;\\n        if (msgValue > 0) {\\n            uint256 _userDeposit = userDeposit[msgSender];\\n            if (_userDeposit == 0) {\\n                countOfInvestors += 1;\\n            }\\n            if (\\n                _userDeposit > 0 && now > userTime[msgSender].add(chargingTime)\\n            ) {\\n                collectPercent();\\n            }\\n            userDeposit[msgSender] = _userDeposit.add(msgValue);\\n            userTime[msgSender] = now;\\n            //sending money for advertising\\n            projectFund.transfer(msgValue.mul(projectPercent).div(100));\\n            //sending money to charity\\n            uint256 charityMoney = msgValue.mul(charityPercent).div(100);\\n            countOfCharity += charityMoney;\\n            charityFund.transfer(charityMoney);\\n        } else {\\n            collectPercent();\\n        }\\n    }\\n\\n    //return of deposit balance\\n    function returnDeposit() private isIssetUser {\\n        //userDeposit-persentWithdraw-(userDeposit*8/100)\\n        address msgSender = msg.sender;\\n        uint256 _withdrawalAmount = userDeposit[msgSender]\\n        .sub(persentWithdraw[msgSender])\\n        .sub(userDeposit[msgSender].mul(projectPercent).div(100))\\n        .sub(userDeposit[msgSender].mul(charityPercent).div(100));\\n        //check that the user's balance is greater than the interest paid\\n        require(\\n            userDeposit[msgSender] > _withdrawalAmount,\\n            \\\"You have already repaid your deposit\\\"\\n        );\\n        //delete user record\\n        userDeposit[msgSender] = 0;\\n        userTime[msgSender] = 0;\\n        persentWithdraw[msgSender] = 0;\\n        msgSender.transfer(_withdrawalAmount);\\n    }\\n\\n    function() external payable {\\n        //refund of remaining funds when transferring to a contract 0.00000112 ether\\n        if (msg.value == 0.00000112 ether) {\\n            returnDeposit();\\n        } else {\\n            makeDeposit();\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/SafeMath.sol\": {\r\n      \"content\": \"pragma solidity 0.4.25;\\n\\n/**\\n * @title SafeMath\\n * @dev Math operations with safety checks that throw on error\\n */\\nlibrary SafeMath {\\n\\n    function mul(uint256 a, uint256 b) internal pure returns(uint256) {\\n        uint256 c = a * b;\\n        assert(a == 0 || c / a == b);\\n        return c;\\n    }\\n\\n    function div(uint256 a, uint256 b) internal pure returns(uint256) {\\n        // assert(b > 0); // Solidity automatically throws when dividing by 0\\n        uint256 c = a / b;\\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\n        return c;\\n    }\\n\\n    function sub(uint256 a, uint256 b) internal pure returns(uint256) {\\n        assert(b <= a);\\n        return a - b;\\n    }\\n\\n    function add(uint256 a, uint256 b) internal pure returns(uint256) {\\n        uint256 c = a + b;\\n        assert(c >= a);\\n        return c;\\n    }\\n\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"lowPersent\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"startPercent\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"stepHigh\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"charityPercent\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"projectFund\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"payoutAmount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"chargingTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"charityFund\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"stepLow\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"countOfCharity\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"userTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"stepMiddle\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"highPersent\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"persentRate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"userDeposit\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"middlePersent\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"countOfInvestors\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"persentWithdraw\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"}]","ContractName":"X2Restart","CompilerVersion":"v0.4.25+commit.59dbf8f1","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}