{"status":"1","message":"OK","result":[{"SourceCode":"{\"Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size \\u003e 0;\\n    }\\n\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length \\u003e 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"},\"CanReclaimToken.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity ^0.7.0;\\npragma experimental SMTChecker;\\n\\n\\nimport \\\"ERC20If.sol\\\";\\nimport \\\"OwnableIf.sol\\\";\\n\\n/// @title CanReclaimToken\\nabstract contract CanReclaimToken is OwnableIf {\\n\\n    function reclaimToken(ERC20If _token) external onlyOwner {\\n        uint256 balance = _token.balanceOf((address)(this));\\n        require(_token.transfer(_owner(), balance));\\n    }\\n\\n}\\n\\n\"},\"Claimable.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\npragma experimental SMTChecker;\\n\\n\\nimport \\\"Ownable.sol\\\";\\n\\n// File: openzeppelin-solidity/contracts/ownership/Claimable.sol\\n\\n/**\\n * @title Claimable\\n * @dev Extension for the Ownable contract, where the ownership needs to be claimed.\\n * This allows the new owner to accept the transfer.\\n */\\ncontract Claimable is Ownable {\\n    address public pendingOwner;\\n\\n    /**\\n     * @dev Modifier throws if called by any account other than the pendingOwner.\\n     */\\n    modifier onlyPendingOwner() {\\n        require(msg.sender == pendingOwner, \\\"no permission\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Allows the current owner to set the pendingOwner address.\\n     * @param newOwner The address to transfer ownership to.\\n     */\\n    function transferOwnership(address newOwner) override public onlyOwner {\\n        pendingOwner = newOwner;\\n    }\\n\\n    /**\\n     * @dev Allows the pendingOwner address to finalize the transfer.\\n     */\\n    function claimOwnership() public onlyPendingOwner {\\n        emit OwnershipTransferred(owner, pendingOwner);\\n        owner = pendingOwner;\\n        pendingOwner = address(0);\\n    }\\n}\\n\\n\"},\"ERC20If.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity ^0.7.0;\\npragma experimental SMTChecker;\\n\\n/// @title ERC20If\\nabstract contract ERC20If {\\n    function totalSupply() virtual public view returns (uint256);\\n\\n    function balanceOf(address _who) virtual public view returns (uint256);\\n\\n    function transfer(address _to, uint256 _value) virtual public returns (bool);\\n\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    function allowance(address _owner, address _spender) virtual public view returns (uint256);\\n\\n    function transferFrom(address _from, address _to, uint256 _value) virtual public returns (bool);\\n\\n    function approve(address _spender, uint256 _value) virtual public returns (bool);\\n\\n    event Approval(\\n        address indexed owner,\\n        address indexed spender,\\n        uint256 value\\n    );\\n}\\n\\n\"},\"MTokenDeSwap.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity ^0.7.0;\\n// pragma experimental SMTChecker;\\nimport \\\"./MTokenWrap.sol\\\";\\n\\ncontract MTokenDeSwap is MTokenWrap {\\n    using SafeMath for uint256;\\n\\n    //PENDING=》CANCELED\\n    //PENDING=》APPROVED\\n    //APPROVED=》FINISHED\\n    enum OrderStatus {PENDING, CANCELED, APPROVED, FINISHED}\\n\\n    function getStatusString(OrderStatus status)\\n        internal\\n        pure\\n        returns (string memory)\\n    {\\n        if (status == OrderStatus.PENDING) {\\n            return \\\"pending\\\";\\n        } else if (status == OrderStatus.CANCELED) {\\n            return \\\"canceled\\\";\\n        } else if (status == OrderStatus.APPROVED) {\\n            return \\\"approved\\\";\\n        } else if (status == OrderStatus.FINISHED) {\\n            return \\\"finished\\\";\\n        } else {\\n            // unreachable.\\n            return \\\"unknown\\\";\\n        }\\n    }\\n\\n    struct UnWrapOrder {\\n        address ethAccount;\\n        uint256 nativeCoinAmount;\\n        uint256 mtokenAmount;\\n        string nativeCoinAddress;\\n        string nativeTxId;\\n        uint256 requestBlockNo;\\n        uint256 confirmedBlockNo;\\n        OrderStatus status;\\n        uint256 fee;\\n        uint256 rate;\\n    }\\n\\n    UnWrapOrder[] public unWrapOrders;\\n    bool public paused = false;\\n    modifier notPaused() {\\n        require(!paused, \\\"paused\\\");\\n        _;\\n    }\\n\\n    function pause(bool _paused) public onlyOwner returns (bool) {\\n        paused = _paused;\\n        return true;\\n    }\\n\\n    function getUnWrapOrderNum() public view returns (uint256) {\\n        return unWrapOrders.length;\\n    }\\n\\n    function getUnWrapOrderInfo(uint256 seq)\\n        public\\n        view\\n        returns (\\n            address ethAccount,\\n            uint256 nativeCoinAmount,\\n            uint256 mtokenAmount,\\n            string memory nativeCoinAddress,\\n            string memory nativeTxId,\\n            uint256 requestBlockNo,\\n            uint256 confirmedBlockNo,\\n            string memory status\\n        )\\n    {\\n        require(seq \\u003c unWrapOrders.length, \\\"invalid seq\\\");\\n        UnWrapOrder memory order = unWrapOrders[seq];\\n        ethAccount = order.ethAccount;\\n        nativeCoinAmount = order.nativeCoinAmount;\\n        mtokenAmount = order.mtokenAmount;\\n        nativeCoinAddress = order.nativeCoinAddress;\\n        nativeTxId = order.nativeTxId;\\n        requestBlockNo = order.requestBlockNo;\\n        confirmedBlockNo = order.confirmedBlockNo;\\n        status = getStatusString(order.status);\\n    }\\n\\n    function calcUnWrapAmount(\\n        uint256 amt,\\n        uint256 fee,\\n        uint256 rate\\n    ) public pure returns (uint256) {\\n        return amt.sub(fee).mul(rate).div(rate_precision);\\n    }\\n\\n    function unWrap(\\n        uint256 amt,\\n        uint256 fee,\\n        uint256 rate,\\n        string memory nativeCoinAddress\\n    ) public notPaused returns (bool) {\\n        address ethAccount = msg.sender;\\n        uint256 mtokenAmount = amt;\\n        uint256 nativeCoinAmount = calcUnWrapAmount(amt, fee, rate);\\n        require(\\n            mtoken.transferFrom(ethAccount, mtokenRepository, mtokenAmount),\\n            \\\"transferFrom failed\\\"\\n        );\\n        uint256 seq = unWrapOrders.length;\\n        unWrapOrders.push(\\n            UnWrapOrder({\\n                ethAccount: ethAccount,\\n                nativeCoinAmount: nativeCoinAmount,\\n                mtokenAmount: mtokenAmount,\\n                nativeCoinAddress: nativeCoinAddress,\\n                requestBlockNo: block.number,\\n                status: OrderStatus.PENDING,\\n                nativeTxId: \\\"\\\",\\n                confirmedBlockNo: 0,\\n                fee: fee,\\n                rate: rate\\n            })\\n        );\\n        emit UNWRAP_REQUEST(seq, ethAccount, nativeCoinAddress, amt, fee, rate);\\n\\n        return true;\\n    }\\n\\n    event UNWRAP_REQUEST(\\n        uint256 indexed seq,\\n        address ethAccount,\\n        string nativeCoinAddress,\\n        uint256 amt,\\n        uint256 fee,\\n        uint256 rate\\n    );\\n\\n    event UNWRAP_APPROVE(uint256 indexed seq);\\n\\n    function approveUnWrapOrder(\\n        uint256 seq,\\n        address ethAccount,\\n        uint256 nativeCoinAmount,\\n        uint256 mtokenAmount,\\n        string memory nativeCoinAddress\\n    ) public onlyOwner returns (bool) {\\n        require(unWrapOrders.length \\u003e seq, \\\"invalid seq\\\");\\n        UnWrapOrder memory order = unWrapOrders[seq];\\n        require(order.status == OrderStatus.PENDING, \\\"status not pending\\\");\\n        require(ethAccount == order.ethAccount, \\\"invalid param1\\\");\\n        require(mtokenAmount == order.mtokenAmount, \\\"invalid param2\\\");\\n        require(nativeCoinAmount == order.nativeCoinAmount, \\\"invalid param3\\\");\\n        require(\\n            stringEquals(nativeCoinAddress, order.nativeCoinAddress),\\n            \\\"invalid param4\\\"\\n        );\\n\\n        unWrapOrders[seq].status = OrderStatus.APPROVED;\\n        emit UNWRAP_APPROVE(seq);\\n        return true;\\n    }\\n\\n    event UNWRAP_CANCEL(uint256 indexed seq);\\n\\n    function cancelUnWrapOrder(uint256 seq) public returns (bool) {\\n        require(unWrapOrders.length \\u003e seq, \\\"invalid seq\\\");\\n        UnWrapOrder memory order = unWrapOrders[seq];\\n        require(msg.sender == order.ethAccount, \\\"invalid auth.\\\");\\n        require(order.status == OrderStatus.PENDING, \\\"status not pending\\\");\\n        unWrapOrders[seq].status = OrderStatus.CANCELED;\\n\\n        require(\\n            mtoken.transferFrom(\\n                mtokenRepository,\\n                order.ethAccount,\\n                order.mtokenAmount\\n            ),\\n            \\\"transferFrom failed\\\"\\n        );\\n\\n        emit UNWRAP_CANCEL(seq);\\n        return true;\\n    }\\n\\n    function stringEquals(string memory s1, string memory s2)\\n        public\\n        pure\\n        returns (bool)\\n    {\\n        return (keccak256(abi.encodePacked(s1)) ==\\n            keccak256(abi.encodePacked(s2)));\\n    }\\n\\n    event UNWRAP_FINISH(uint256 indexed seq, string nativeTxId);\\n\\n    function finishUnWrapOrder(uint256 seq, string memory nativeTxId)\\n        public\\n        onlyOwner\\n        returns (bool)\\n    {\\n        require(unWrapOrders.length \\u003e seq, \\\"invalid seq\\\");\\n        UnWrapOrder memory order = unWrapOrders[seq];\\n        require(order.status == OrderStatus.APPROVED, \\\"status not approved\\\");\\n\\n        unWrapOrders[seq].status = OrderStatus.FINISHED;\\n        unWrapOrders[seq].nativeTxId = nativeTxId;\\n        unWrapOrders[seq].confirmedBlockNo = block.number;\\n        emit UNWRAP_FINISH(seq, nativeTxId);\\n        return true;\\n    }\\n}\\n\"},\"MTokenDeSwapFactory.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity ^0.7.0;\\npragma experimental SMTChecker;\\nimport \\\"./Claimable.sol\\\";\\nimport \\\"./CanReclaimToken.sol\\\";\\nimport \\\"./MTokenDeSwap.sol\\\";\\nimport \\\"./TransparentUpgradeableProxy.sol\\\";\\n\\ncontract MTokenDeSwapFactory is Claimable, CanReclaimToken {\\n    mapping(bytes32 =\\u003e address) public deSwaps;\\n\\n    function getDeSwap(string memory _nativeCoinType)\\n        public\\n        view\\n        returns (address)\\n    {\\n        bytes32 nativeCoinTypeHash =\\n            keccak256(abi.encodePacked(_nativeCoinType));\\n        return deSwaps[nativeCoinTypeHash];\\n    }\\n\\n    function deployDeSwap(\\n        address _mtoken,\\n        string memory _nativeCoinType,\\n        address _mtokenRepository,\\n        address _operator\\n    ) public onlyOwner returns (bool) {\\n        bytes32 nativeCoinTypeHash =\\n            keccak256(abi.encodePacked(_nativeCoinType));\\n        require(_operator!=_owner(), \\\"owner same as _operator\\\");\\n        require(deSwaps[nativeCoinTypeHash] == (address)(0), \\\"deEx exists.\\\");\\n        MTokenDeSwap mtokenDeSwap = new MTokenDeSwap();\\n        TransparentUpgradeableProxy proxy =\\n            new TransparentUpgradeableProxy(\\n                (address)(mtokenDeSwap),\\n                (address)(this),\\n                abi.encodeWithSignature(\\n                    \\\"setup(address,string,address,address)\\\",\\n                    _mtoken,\\n                    _nativeCoinType,\\n                    _mtokenRepository,\\n                    _operator\\n                )\\n            );\\n\\n        proxy.changeAdmin(_owner());\\n        deSwaps[nativeCoinTypeHash] = (address)(proxy);\\n\\n        return true;\\n    }\\n}\\n\"},\"MTokenWrap.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity ^0.7.0;\\npragma experimental SMTChecker;\\nimport \\\"./ERC20If.sol\\\";\\nimport \\\"./Ownable.sol\\\";\\nimport \\\"./CanReclaimToken.sol\\\";\\nimport \\\"./SafeMathLib.sol\\\";\\n\\ncontract MTokenWrap is Ownable, CanReclaimToken {\\n    using SafeMath for uint256;\\n    ERC20If public mtoken;\\n    string public nativeCoinType;\\n    address public mtokenRepository;\\n    uint256 public wrapSeq;\\n    mapping(bytes32 =\\u003e uint256) public wrapSeqMap;\\n\\n    // bool public checkSignature = true;\\n\\n    uint256 constant rate_precision = 1e10;\\n\\n    // function _checkSignature(bool _b) public onlyOwner {\\n    //     checkSignature = _b;\\n    // }\\n\\n    function _mtokenRepositorySet(address newMtokenRepository)\\n        public\\n        onlyOwner\\n    {\\n        require(newMtokenRepository != (address)(0), \\\"invalid addr\\\");\\n        mtokenRepository = newMtokenRepository;\\n    }\\n\\n    function wrapHash(string memory nativeCoinAddress, string memory nativeTxId)\\n        public\\n        pure\\n        returns (bytes32)\\n    {\\n        return keccak256(abi.encode(nativeCoinAddress, nativeTxId));\\n    }\\n\\n    event SETUP(\\n        address _mtoken,\\n        string _nativeCoinType,\\n        address _mtokenRepository\\n    );\\n\\n    function setup(\\n        address _mtoken,\\n        string memory _nativeCoinType,\\n        address _mtokenRepository,\\n        address _initOwner\\n    )\\n        public\\n        returns (\\n            //onlyOwner   一次setup，不鉴权了\\n            bool\\n        )\\n    {\\n        if (wrapSeq \\u003c= 0) {\\n            wrapSeq = 1;\\n            mtoken = (ERC20If)(_mtoken);\\n            nativeCoinType = _nativeCoinType;\\n            mtokenRepository = _mtokenRepository;\\n            owner = _initOwner;\\n            emit SETUP(_mtoken, _nativeCoinType, _mtokenRepository);\\n            emit OwnershipTransferred(_owner(), _initOwner);\\n            return true;\\n        }\\n        return false;\\n    }\\n\\n    function uintToString(uint256 _i) public pure returns (string memory) {\\n        if (_i == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 j = _i;\\n        uint256 len;\\n        while (j != 0) {\\n            len++;\\n            j /= 10;\\n        }\\n        bytes memory bstr = new bytes(len);\\n        uint256 k = len - 1;\\n        while (_i != 0) {\\n            bstr[k--] = bytes1(uint8(48 + (_i % 10)));\\n            _i /= 10;\\n        }\\n        return string(bstr);\\n    }\\n\\n    function toHexString(bytes memory data)\\n        public\\n        pure\\n        returns (string memory)\\n    {\\n        bytes memory alphabet = \\\"0123456789abcdef\\\";\\n\\n        bytes memory str = new bytes(2 + data.length * 2);\\n        str[0] = \\\"0\\\";\\n        str[1] = \\\"x\\\";\\n        for (uint256 i = 0; i \\u003c data.length; i++) {\\n            str[2 + i * 2] = alphabet[uint256(uint8(data[i] \\u003e\\u003e 4))];\\n            str[3 + i * 2] = alphabet[uint256(uint8(data[i] \\u0026 0x0f))];\\n        }\\n        return string(str);\\n    }\\n\\n    function toHexString(address account) public pure returns (string memory) {\\n        return toHexString(abi.encodePacked(account));\\n    }\\n\\n    function calcMTokenAmount(\\n        uint256 amt,\\n        uint256 fee,\\n        uint256 rate\\n    ) public pure returns (uint256) {\\n        return amt.sub(fee).mul(rate).div(rate_precision);\\n    }\\n\\n    function encode(\\n        address receiveMTokenAddress,\\n        string memory nativeCoinAddress,\\n        uint256 amt,\\n        uint256 fee,\\n        uint256 rate,\\n        uint64 deadline //TODO  暂时设置为public\\n    ) public view returns (bytes memory) {\\n        return\\n            abi.encodePacked(\\n                \\\"wrap \\\",\\n                nativeCoinType,\\n                \\\"\\\\nto:\\\",\\n                toHexString(receiveMTokenAddress),\\n                \\\"\\\\namt:\\\",\\n                uintToString(amt),\\n                \\\"\\\\nfee:\\\",\\n                uintToString(fee),\\n                \\\"\\\\nrate:\\\",\\n                uintToString(rate),\\n                \\\"\\\\ndeadline:\\\",\\n                uintToString(deadline),\\n                \\\"\\\\naddr:\\\",\\n                nativeCoinAddress\\n            );\\n    }\\n\\n    function personalMessage(bytes memory _msg)\\n        public\\n        pure\\n        returns (bytes memory)\\n    {\\n        return\\n            abi.encodePacked(\\n                \\\"\\\\x19Ethereum Signed Message:\\\\n\\\",\\n                uintToString(_msg.length),\\n                _msg\\n            );\\n    }\\n\\n    function recoverPersonalSignature(\\n        bytes32 r,\\n        bytes32 s,\\n        uint8 v,\\n        bytes memory text\\n    ) public pure returns (address) {\\n        bytes32 h = keccak256(personalMessage(text));\\n        return ecrecover(h, v, r, s);\\n    }\\n\\n    function wrap(\\n        address ethAccount,\\n        address receiveMTokenAddress,\\n        string memory nativeCoinAddress,\\n        string memory nativeTxId,\\n        uint256 amt,\\n        uint256 fee,\\n        uint256 rate,\\n        uint64 deadline,\\n        bytes32 r,\\n        bytes32 s,\\n        uint8 v\\n    ) public onlyOwner returns (bool) {\\n        uint256 mtokenAmount = calcMTokenAmount(amt, fee, rate);\\n        // if (checkSignature) \\n        {\\n            bytes memory text =\\n                encode(\\n                    receiveMTokenAddress,\\n                    nativeCoinAddress,\\n                    amt,\\n                    fee,\\n                    rate,\\n                    deadline\\n                );\\n\\n            address addr = recoverPersonalSignature(r, s, v, text);\\n            require(addr == ethAccount, \\\"invalid signature\\\");\\n        }\\n        require(\\n            wrapSeqMap[wrapHash(nativeCoinAddress, nativeTxId)] \\u003c= 0,\\n            \\\"wrap dup.\\\"\\n        );\\n        wrapSeqMap[wrapHash(nativeCoinAddress, nativeTxId)] = wrapSeq;\\n        wrapSeq = wrapSeq + 1;\\n\\n        require(\\n            mtoken.transferFrom(\\n                mtokenRepository,\\n                receiveMTokenAddress,\\n                mtokenAmount\\n            ),\\n            \\\"transferFrom failed\\\"\\n        );\\n        emit WRAP_EVENT(\\n            wrapSeq,\\n            ethAccount,\\n            receiveMTokenAddress,\\n            nativeCoinAddress,\\n            nativeTxId,\\n            amt,fee,rate,\\n            deadline,\\n            r,\\n            s,\\n            v\\n        );\\n\\n        return true;\\n    }\\n\\n    event WRAP_EVENT(\\n        uint256 indexed wrapSeq,\\n        address ethAccount,\\n        address receiveMTokenAddress,\\n        string nativeCoinAddress,\\n        string nativeTxId,\\n        uint256 amt,\\n        uint256 fee,\\n        uint256 rate,\\n        uint64 deadline,\\n        bytes32 r,\\n        bytes32 s,\\n        uint8 v\\n    );\\n}\\n\"},\"Ownable.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\npragma experimental SMTChecker;\\n\\n\\nimport \\\"OwnableIf.sol\\\";\\n\\n// File: openzeppelin-solidity/contracts/ownership/Ownable.sol\\n\\n/**\\n * @title Ownable\\n * @dev The Ownable contract has an owner address, and provides basic authorization control\\n * functions, this simplifies the implementation of \\\"user permissions\\\".\\n */\\ncontract Ownable is OwnableIf {\\n    address public owner;\\n\\n    function _owner() view override public returns (address){\\n        return owner;\\n    }\\n\\n    //    event OwnershipRenounced(address indexed previousOwner);\\n    event OwnershipTransferred(\\n        address indexed previousOwner,\\n        address indexed newOwner\\n    );\\n\\n\\n    /**\\n     * @dev The Ownable constructor sets the original `owner` of the contract to the sender\\n     * account.\\n     */\\n    constructor() {\\n        owner = msg.sender;\\n    }\\n\\n    //    /**\\n    //     * @dev Throws if called by any account other than the owner.\\n    //     */\\n    //    modifier onlyOwner() {\\n    //        require(msg.sender == owner);\\n    //        _;\\n    //    }\\n\\n    /**\\n     * @dev Allows the current owner to relinquish control of the contract.\\n     * @notice Renouncing to ownership will leave the contract without an owner.\\n     * It will not be possible to call the functions with the `onlyOwner`\\n     * modifier anymore.\\n     */\\n    //   function renounceOwnership() public onlyOwner {\\n    //     emit OwnershipRenounced(owner);\\n    //     owner = address(0);\\n    //   }\\n\\n    /**\\n     * @dev Allows the current owner to transfer control of the contract to a newOwner.\\n     * @param _newOwner The address to transfer ownership to.\\n     */\\n    function transferOwnership(address _newOwner) virtual public onlyOwner {\\n        _transferOwnership(_newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers control of the contract to a newOwner.\\n     * @param _newOwner The address to transfer ownership to.\\n     */\\n    function _transferOwnership(address _newOwner) internal {\\n        require(_newOwner != address(0), \\\"invalid _newOwner\\\");\\n        emit OwnershipTransferred(owner, _newOwner);\\n        owner = _newOwner;\\n    }\\n}\\n\\n\\n\"},\"OwnableIf.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\npragma experimental SMTChecker;\\n\\n// File: openzeppelin-solidity/contracts/ownership/Ownable.sol\\n\\n/**\\n * @title Ownable\\n * @dev The Ownable contract has an owner address, and provides basic authorization control\\n * functions, this simplifies the implementation of \\\"user permissions\\\".\\n */\\nabstract contract OwnableIf {\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(msg.sender == _owner(), \\\"not owner......\\\");\\n        _;\\n    }\\n\\n    function _owner() view virtual public returns (address);\\n}\\n\"},\"Proxy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\n\\n/**\\n * @dev This abstract contract provides a fallback function that delegates all calls to another contract using the EVM\\n * instruction `delegatecall`. We refer to the second contract as the _implementation_ behind the proxy, and it has to\\n * be specified by overriding the virtual {_implementation} function.\\n *\\n * Additionally, delegation to the implementation can be triggered manually through the {_fallback} function, or to a\\n * different contract through the {_delegate} function.\\n *\\n * The success and return data of the delegated call will be returned back to the caller of the proxy.\\n */\\nabstract contract Proxy {\\n    /**\\n     * @dev Delegates the current call to `implementation`.\\n     *\\n     * This function does not return to its internall call site, it will return directly to the external caller.\\n     */\\n    function _delegate(address implementation) internal virtual {\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            // Copy msg.data. We take full control of memory in this inline assembly\\n            // block because it will not return to Solidity code. We overwrite the\\n            // Solidity scratch pad at memory position 0.\\n            calldatacopy(0, 0, calldatasize())\\n\\n            // Call the implementation.\\n            // out and outsize are 0 because we don\\u0027t know the size yet.\\n            let result := delegatecall(gas(), implementation, 0, calldatasize(), 0, 0)\\n\\n            // Copy the returned data.\\n            returndatacopy(0, 0, returndatasize())\\n\\n            switch result\\n            // delegatecall returns 0 on error.\\n            case 0 { revert(0, returndatasize()) }\\n            default { return(0, returndatasize()) }\\n        }\\n    }\\n\\n    /**\\n     * @dev This is a virtual function that should be overriden so it returns the address to which the fallback function\\n     * and {_fallback} should delegate.\\n     */\\n    function _implementation() internal view virtual returns (address);\\n\\n    /**\\n     * @dev Delegates the current call to the address returned by `_implementation()`.\\n     *\\n     * This function does not return to its internall call site, it will return directly to the external caller.\\n     */\\n    function _fallback() internal virtual {\\n        _beforeFallback();\\n        _delegate(_implementation());\\n    }\\n\\n    /**\\n     * @dev Fallback function that delegates calls to the address returned by `_implementation()`. Will run if no other\\n     * function in the contract matches the call data.\\n     */\\n    fallback () external payable virtual {\\n        _fallback();\\n    }\\n\\n    /**\\n     * @dev Fallback function that delegates calls to the address returned by `_implementation()`. Will run if call data\\n     * is empty.\\n     */\\n    receive () external payable virtual {\\n        _fallback();\\n    }\\n\\n    /**\\n     * @dev Hook that is called before falling back to the implementation. Can happen as part of a manual `_fallback`\\n     * call, or as part of the Solidity `fallback` or `receive` functions.\\n     *\\n     * If overriden should call `super._beforeFallback()`.\\n     */\\n    function _beforeFallback() internal virtual {\\n    }\\n}\\n\"},\"SafeMathLib.sol\":{\"content\":\"\\n// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\npragma experimental SMTChecker;\\n\\n/**\\n * @dev Wrappers over Solidity\\u0027s arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it\\u0027s recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity\\u0027s `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c \\u003e= a, \\\"SafeMath: addition overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity\\u0027s `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return sub(a, b, \\\"SafeMath: subtraction overflow\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity\\u0027s `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b \\u003c= a, errorMessage);\\n        uint256 c = a - b;\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity\\u0027s `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // Gas optimization: this is cheaper than requiring \\u0027a\\u0027 not being zero, but the\\n        // benefit is lost if \\u0027b\\u0027 is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity\\u0027s `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity\\u0027s `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b \\u003e 0, errorMessage);\\n        uint256 c = a / b;\\n        // assert(a == b * c + a % b); // There is no case in which this doesn\\u0027t hold\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts when dividing by zero.\\n     *\\n     * Counterpart to Solidity\\u0027s `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return mod(a, b, \\\"SafeMath: modulo by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts with custom message when dividing by zero.\\n     *\\n     * Counterpart to Solidity\\u0027s `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b != 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\"},\"TransparentUpgradeableProxy.sol\":{\"content\":\"\\n// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\n\\nimport \\\"./UpgradeableProxy.sol\\\";\\n\\n/**\\n * @dev This contract implements a proxy that is upgradeable by an admin.\\n *\\n * To avoid https://medium.com/nomic-labs-blog/malicious-backdoors-in-ethereum-proxies-62629adf3357[proxy selector\\n * clashing], which can potentially be used in an attack, this contract uses the\\n * https://blog.openzeppelin.com/the-transparent-proxy-pattern/[transparent proxy pattern]. This pattern implies two\\n * things that go hand in hand:\\n *\\n * 1. If any account other than the admin calls the proxy, the call will be forwarded to the implementation, even if\\n * that call matches one of the admin functions exposed by the proxy itself.\\n * 2. If the admin calls the proxy, it can access the admin functions, but its calls will never be forwarded to the\\n * implementation. If the admin tries to call a function on the implementation it will fail with an error that says\\n * \\\"admin cannot fallback to proxy target\\\".\\n *\\n * These properties mean that the admin account can only be used for admin actions like upgrading the proxy or changing\\n * the admin, so it\\u0027s best if it\\u0027s a dedicated account that is not used for anything else. This will avoid headaches due\\n * to sudden errors when trying to call a function from the proxy implementation.\\n *\\n * Our recommendation is for the dedicated account to be an instance of the {ProxyAdmin} contract. If set up this way,\\n * you should think of the `ProxyAdmin` instance as the real administrative interface of your proxy.\\n */\\ncontract TransparentUpgradeableProxy is UpgradeableProxy {\\n    /**\\n     * @dev Initializes an upgradeable proxy managed by `_admin`, backed by the implementation at `_logic`, and\\n     * optionally initialized with `_data` as explained in {UpgradeableProxy-constructor}.\\n     */\\n    constructor(address _logic, address admin_, bytes memory _data) payable UpgradeableProxy(_logic, \\\"\\\") {\\n        assert(_ADMIN_SLOT == bytes32(uint256(keccak256(\\\"eip1967.proxy.admin\\\")) - 1));\\n        _setAdmin(admin_);\\n\\n         if(_data.length \\u003e 0) {\\n            Address.functionDelegateCall(_logic, _data);\\n        }\\n    }\\n\\n    /**\\n     * @dev Emitted when the admin account has changed.\\n     */\\n    event AdminChanged(address previousAdmin, address newAdmin);\\n\\n    /**\\n     * @dev Storage slot with the admin of the contract.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.admin\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 private constant _ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\\n\\n    /**\\n     * @dev Modifier used internally that will delegate the call to the implementation unless the sender is the admin.\\n     */\\n    modifier ifAdmin() {\\n        if (msg.sender == _admin()) {\\n            _;\\n        } else {\\n            _fallback();\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the current admin.\\n     *\\n     * NOTE: Only the admin can call this function. See {ProxyAdmin-getProxyAdmin}.\\n     *\\n     * TIP: To get this value clients can read directly from the storage slot shown below (specified by EIP1967) using the\\n     * https://eth.wiki/json-rpc/API#eth_getstorageat[`eth_getStorageAt`] RPC call.\\n     * `0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103`\\n     */\\n    function admin() external ifAdmin returns (address admin_) {\\n        admin_ = _admin();\\n    }\\n\\n    /**\\n     * @dev Returns the current implementation.\\n     *\\n     * NOTE: Only the admin can call this function. See {ProxyAdmin-getProxyImplementation}.\\n     *\\n     * TIP: To get this value clients can read directly from the storage slot shown below (specified by EIP1967) using the\\n     * https://eth.wiki/json-rpc/API#eth_getstorageat[`eth_getStorageAt`] RPC call.\\n     * `0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc`\\n     */\\n    function implementation() external ifAdmin returns (address implementation_) {\\n        implementation_ = _implementation();\\n    }\\n\\n    /**\\n     * @dev Changes the admin of the proxy.\\n     *\\n     * Emits an {AdminChanged} event.\\n     *\\n     * NOTE: Only the admin can call this function. See {ProxyAdmin-changeProxyAdmin}.\\n     */\\n    function changeAdmin(address newAdmin) external virtual ifAdmin {\\n        require(newAdmin != address(0), \\\"TransparentUpgradeableProxy: new admin is the zero address\\\");\\n        emit AdminChanged(_admin(), newAdmin);\\n        _setAdmin(newAdmin);\\n    }\\n\\n    /**\\n     * @dev Upgrade the implementation of the proxy.\\n     *\\n     * NOTE: Only the admin can call this function. See {ProxyAdmin-upgrade}.\\n     */\\n    function upgradeTo(address newImplementation) external virtual ifAdmin {\\n        _upgradeTo(newImplementation);\\n    }\\n\\n    /**\\n     * @dev Upgrade the implementation of the proxy, and then call a function from the new implementation as specified\\n     * by `data`, which should be an encoded function call. This is useful to initialize new storage variables in the\\n     * proxied contract.\\n     *\\n     * NOTE: Only the admin can call this function. See {ProxyAdmin-upgradeAndCall}.\\n     */\\n    function upgradeToAndCall(address newImplementation, bytes calldata data) external payable virtual ifAdmin {\\n        _upgradeTo(newImplementation);\\n        Address.functionDelegateCall(newImplementation, data);\\n    }\\n\\n    /**\\n     * @dev Returns the current admin.\\n     */\\n    function _admin() internal view virtual returns (address adm) {\\n        bytes32 slot = _ADMIN_SLOT;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            adm := sload(slot)\\n        }\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 admin slot.\\n     */\\n    function _setAdmin(address newAdmin) private {\\n        bytes32 slot = _ADMIN_SLOT;\\n\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            sstore(slot, newAdmin)\\n        }\\n    }\\n\\n    /**\\n     * @dev Makes sure the admin cannot access the fallback function. See {Proxy-_beforeFallback}.\\n     */\\n    function _beforeFallback() internal virtual override {\\n        require(msg.sender != _admin(), \\\"TransparentUpgradeableProxy: admin cannot fallback to proxy target\\\");\\n        super._beforeFallback();\\n    }\\n}\\n\"},\"UpgradeableProxy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\n\\nimport \\\"./Proxy.sol\\\";\\nimport \\\"./Address.sol\\\";\\n\\n/**\\n * @dev This contract implements an upgradeable proxy. It is upgradeable because calls are delegated to an\\n * implementation address that can be changed. This address is stored in storage in the location specified by\\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967], so that it doesn\\u0027t conflict with the storage layout of the\\n * implementation behind the proxy.\\n *\\n * Upgradeability is only provided internally through {_upgradeTo}. For an externally upgradeable proxy see\\n * {TransparentUpgradeableProxy}.\\n */\\ncontract UpgradeableProxy is Proxy {\\n    /**\\n     * @dev Initializes the upgradeable proxy with an initial implementation specified by `_logic`.\\n     *\\n     * If `_data` is nonempty, it\\u0027s used as data in a delegate call to `_logic`. This will typically be an encoded\\n     * function call, and allows initializating the storage of the proxy like a Solidity constructor.\\n     */\\n    constructor(address _logic, bytes memory _data) payable {\\n        assert(_IMPLEMENTATION_SLOT == bytes32(uint256(keccak256(\\\"eip1967.proxy.implementation\\\")) - 1));\\n        _setImplementation(_logic);\\n        if(_data.length \\u003e 0) {\\n            Address.functionDelegateCall(_logic, _data);\\n        }\\n    }\\n\\n    /**\\n     * @dev Emitted when the implementation is upgraded.\\n     */\\n    event Upgraded(address indexed implementation);\\n\\n    /**\\n     * @dev Storage slot with the address of the current implementation.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.implementation\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 private constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n\\n    /**\\n     * @dev Returns the current implementation address.\\n     */\\n    function _implementation() internal view virtual override returns (address impl) {\\n        bytes32 slot = _IMPLEMENTATION_SLOT;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            impl := sload(slot)\\n        }\\n    }\\n\\n    /**\\n     * @dev Upgrades the proxy to a new implementation.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeTo(address newImplementation) internal virtual {\\n        _setImplementation(newImplementation);\\n        emit Upgraded(newImplementation);\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 implementation slot.\\n     */\\n    function _setImplementation(address newImplementation) private {\\n        require(Address.isContract(newImplementation), \\\"UpgradeableProxy: new implementation is not a contract\\\");\\n\\n        bytes32 slot = _IMPLEMENTATION_SLOT;\\n\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            sstore(slot, newImplementation)\\n        }\\n    }\\n}\\n\"}}","ABI":"[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"_owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"deSwaps\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_mtoken\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"_nativeCoinType\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"_mtokenRepository\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_operator\",\"type\":\"address\"}],\"name\":\"deployDeSwap\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_nativeCoinType\",\"type\":\"string\"}],\"name\":\"getDeSwap\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pendingOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ERC20If\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"reclaimToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"MTokenDeSwapFactory","CompilerVersion":"v0.7.3+commit.9bfce1f6","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://6672cf784d9752602f68a8dd0dfc88d6cf7d1d4e6e76e6c843e1fc88b4e5df41"}]}