{"status":"1","message":"OK","result":[{"SourceCode":"// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.4;\r\n\r\nabstract contract Context {\r\n  function _msgSender() internal view virtual returns (address) {\r\n    return msg.sender;\r\n  }\r\n\r\n  function _msgData() internal view virtual returns (bytes calldata) {\r\n    this;\r\n    return msg.data;\r\n  }\r\n}\r\n\r\ninterface IERC20 {\r\n\r\n  function totalSupply() external view returns (uint256);\r\n  function balanceOf(address account) external view returns (uint256);\r\n  function transfer(address recipient, uint256 amount) external returns (bool);\r\n  function allowance(address owner, address spender) external view returns (uint256);\r\n  function approve(address spender, uint256 amount) external returns (bool);\r\n  function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n  event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\ninterface IERC20Metadata is IERC20 {\r\n\r\n  function name() external view returns (string memory);\r\n  function symbol() external view returns (string memory);\r\n  function decimals() external view returns (uint8);\r\n}\r\n\r\nabstract contract Ownable is Context {\r\n\r\n  // Holds the owner address\r\n  address private _owner;\r\n\r\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n  constructor () {\r\n    address msgSender = _msgSender();\r\n    _owner = msgSender;\r\n    emit OwnershipTransferred(address(0), msgSender);\r\n  }\r\n\r\n  function owner() public view virtual returns (address) {\r\n    return _owner;\r\n  }\r\n\r\n  modifier onlyOwner() {\r\n    require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n    _;\r\n  }\r\n\r\n  function transferOwnership(address newOwner) public virtual onlyOwner {\r\n    require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n    emit OwnershipTransferred(_owner, newOwner);\r\n    _owner = newOwner;\r\n  }\r\n}\r\n\r\n// Our main contract which implements all ERC20 standard methods\r\ncontract MediaLicensingToken is Context, IERC20, IERC20Metadata, Ownable {\r\n\r\n  // Holds all the balances\r\n  mapping (address => uint256) private _balances;\r\n\r\n  // Holds all allowances\r\n  mapping (address => mapping (address => uint256)) private _allowances;\r\n\r\n  // Holds all blacklisted addresses\r\n  mapping (address => bool) private _blocklist;\r\n\r\n  // They can only be decreased\r\n  uint256 private _totalSupply;\r\n\r\n  // Immutable they can only be set once during construction\r\n  string private _name;\r\n  string private _symbol;\r\n  uint256 private _maxTokens;\r\n\r\n  // Events\r\n  event Blocklist(address indexed account, bool indexed status);\r\n\r\n  // The initializer of our contract\r\n  constructor () {\r\n    _name = \"Media Licensing Token\";\r\n    _symbol = \"MLT\";\r\n\r\n    // Holds max mintable limit, 200 million tokens\r\n    _maxTokens = 200000000000000000000000000;\r\n    _mint(_msgSender(), _maxTokens);\r\n  }\r\n\r\n  /*\r\n   * PUBLIC RETURNS\r\n   */\r\n\r\n  // Returns the name of the token.\r\n  function name() public view virtual override returns (string memory) {\r\n    return _name;\r\n  }\r\n\r\n  // Returns the symbol of the token\r\n  function symbol() public view virtual override returns (string memory) {\r\n    return _symbol;\r\n  }\r\n\r\n  // Returns the number of decimals used\r\n  function decimals() public view virtual override returns (uint8) {\r\n    return 18;\r\n  }\r\n\r\n  // Returns the total supply\r\n  function totalSupply() public view virtual override returns (uint256) {\r\n    return _totalSupply;\r\n  }\r\n\r\n  // Returns the balance of a given address\r\n  function balanceOf(address account) public view virtual override returns (uint256) {\r\n    return _balances[account];\r\n  }\r\n\r\n  // Returns the allowances of the given addresses\r\n  function allowance(address owner, address spender) public view virtual override returns (uint256) {\r\n    return _allowances[owner][spender];\r\n  }\r\n\r\n  // Returns a blocked address of a given address\r\n  function isBlocked(address account) public view virtual returns (bool) {\r\n    return _blocklist[account];\r\n  }\r\n\r\n  /*\r\n   * PUBLIC FUNCTIONS\r\n   */\r\n\r\n  // Calls the _transfer function for a given recipient and amount\r\n  function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\r\n    _transfer(_msgSender(), recipient, amount);\r\n    return true;\r\n  }\r\n\r\n  // Calls the _transfer function for a given array of recipients and amounts\r\n  function transferArray(address[] calldata recipients, uint256[] calldata amounts) public virtual returns (bool) {\r\n    for (uint8 count = 0; count < recipients.length; count++) {\r\n      _transfer(_msgSender(), recipients[count], amounts[count]);\r\n    }\r\n    return true;\r\n  }\r\n\r\n  // Calls the _approve function for a given spender and amount\r\n  function approve(address spender, uint256 amount) public virtual override returns (bool) {\r\n    _approve(_msgSender(), spender, amount);\r\n    return true;\r\n  }\r\n\r\n  // Calls the _transfer and _approve function for a given sender, recipient and amount\r\n  function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\r\n    _transfer(sender, recipient, amount);\r\n\r\n    uint256 currentAllowance = _allowances[sender][_msgSender()];\r\n    require(currentAllowance >= amount, \"ERC20: transfer amount exceeds allowance\");\r\n    _approve(sender, _msgSender(), currentAllowance - amount);\r\n\r\n    return true;\r\n  }\r\n\r\n  // Calls the _approve function for a given spender and added value (amount)\r\n  function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\r\n    _approve(_msgSender(), spender, _allowances[_msgSender()][spender] + addedValue);\r\n    return true;\r\n  }\r\n\r\n  // Calls the _approve function for a given spender and substracted value (amount)\r\n  function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\r\n    uint256 currentAllowance = _allowances[_msgSender()][spender];\r\n    require(currentAllowance >= subtractedValue, \"ERC20: decreased allowance below zero\");\r\n    _approve(_msgSender(), spender, currentAllowance - subtractedValue);\r\n\r\n    return true;\r\n  }\r\n\r\n  /*\r\n   * PUBLIC (Only Owner)\r\n   */\r\n\r\n  // Calls the _burn internal function for a given amount\r\n  function burn(uint256 amount) public virtual onlyOwner {\r\n    _burn(_msgSender(), amount);\r\n  }\r\n\r\n  function blockAddress (address account) public virtual onlyOwner {\r\n    _block(account, true);\r\n  }\r\n\r\n  function unblockAddress (address account) public virtual onlyOwner {\r\n    _block(account, false);\r\n  }\r\n\r\n  /*\r\n   * INTERNAL (PRIVATE)\r\n   */\r\n\r\n  function _block (address account, bool status) internal virtual {\r\n    require(account != _msgSender(), \"ERC20: message sender can not block or unblock himself\");\r\n    _blocklist[account] = status;\r\n\r\n    emit Blocklist(account, status);\r\n  }\r\n\r\n  // Implements the transfer function for a given sender, recipient and amount\r\n  function _transfer(address sender, address recipient, uint256 amount) internal virtual {\r\n    require(sender != address(0), \"ERC20: transfer from the zero address\");\r\n    require(recipient != address(0), \"ERC20: transfer to the zero address\");\r\n\r\n    _beforeTokenTransfer(sender, recipient, amount);\r\n\r\n    uint256 senderBalance = _balances[sender];\r\n    require(senderBalance >= amount, \"ERC20: transfer amount exceeds balance\");\r\n    _balances[sender] = senderBalance - amount;\r\n    _balances[recipient] += amount;\r\n\r\n    emit Transfer(sender, recipient, amount);\r\n  }\r\n\r\n  // Implements the mint function for a given account and amount\r\n  function _mint(address account, uint256 amount) internal virtual {\r\n    require(account != address(0), \"ERC20: mint to the zero address\");\r\n\r\n    _beforeTokenTransfer(address(0), account, amount);\r\n\r\n    _totalSupply += amount;\r\n    // Paranoid security\r\n    require(_totalSupply <= _maxTokens, \"ERC20: mint exceeds total supply limit\");\r\n\r\n    _balances[account] += amount;\r\n    emit Transfer(address(0), account, amount);\r\n  }\r\n\r\n  // Implements the burn function for a given account and amount\r\n  function _burn(address account, uint256 amount) internal virtual {\r\n    require(account != address(0), \"ERC20: burn from the zero address\");\r\n\r\n    _beforeTokenTransfer(account, address(0), amount);\r\n\r\n    uint256 accountBalance = _balances[account];\r\n    require(accountBalance >= amount, \"ERC20: burn amount exceeds balance\");\r\n    _balances[account] = accountBalance - amount;\r\n    _totalSupply -= amount;\r\n\r\n    emit Transfer(account, address(0), amount);\r\n  }\r\n\r\n  // Implements the approve function for a given owner, spender and amount\r\n  function _approve(address owner, address spender, uint256 amount) internal virtual {\r\n    require(owner != address(0), \"ERC20: approve from the zero address\");\r\n    require(spender != address(0), \"ERC20: approve to the zero address\");\r\n\r\n    _allowances[owner][spender] = amount;\r\n    emit Approval(owner, spender, amount);\r\n  }\r\n\r\n  /*\r\n   * INTERNAL (PRIVATE) HELPERS\r\n   */\r\n\r\n  function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual {\r\n    require(_blocklist[from] == false && _blocklist[to] == false, \"MLTERC20: transfer not allowed\");\r\n    require(amount > 0, \"ERC20: amount must be above zero\");\r\n  }\r\n}","ABI":"[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bool\",\"name\":\"status\",\"type\":\"bool\"}],\"name\":\"Blocklist\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"blockAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isBlocked\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"recipients\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"name\":\"transferArray\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"unblockAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"MediaLicensingToken","CompilerVersion":"v0.8.4+commit.c7e474f2","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://b192b093613bb7e4e7eefaea29106726054901615339be358c70c7394ae765c1"}]}