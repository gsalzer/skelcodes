{"status":"1","message":"OK","result":[{"SourceCode":"// SPDX-License-Identifier: BUSL-1.1\r\n\r\npragma solidity 0.8.4;\r\n\r\ninterface IRarible {\r\n    enum AssetType {ETH, ERC20, ERC1155, ERC721, ERC721Deprecated}\r\n\r\n    struct Asset {\r\n        address token;\r\n        uint tokenId;\r\n        AssetType assetType;\r\n    }\r\n\r\n    struct OrderKey {\r\n        /* who signed the order */\r\n        address owner;\r\n        /* random number */\r\n        uint salt;\r\n\r\n        /* what has owner */\r\n        Asset sellAsset;\r\n\r\n        /* what wants owner */\r\n        Asset buyAsset;\r\n    }\r\n\r\n    struct Order {\r\n        OrderKey key;\r\n\r\n        /* how much has owner (in wei, or UINT256_MAX if ERC-721) */\r\n        uint selling;\r\n        /* how much wants owner (in wei, or UINT256_MAX if ERC-721) */\r\n        uint buying;\r\n\r\n        /* fee for selling */\r\n        uint sellerFee;\r\n    }\r\n\r\n    /* An ECDSA signature. */\r\n    struct Sig {\r\n        /* v parameter */\r\n        uint8 v;\r\n        /* r parameter */\r\n        bytes32 r;\r\n        /* s parameter */\r\n        bytes32 s;\r\n    }\r\n\r\n    function exchange(\r\n        Order memory order,\r\n        Sig memory sig,\r\n        uint buyerFee,\r\n        Sig memory buyerFeeSig,\r\n        uint amount,\r\n        address buyer\r\n    ) payable external;\r\n}\r\n\r\nlibrary RaribleV1Market {\r\n    address public constant RARIBLE = 0x09EaB21c40743B2364b94345419138eF80f39e30;\r\n\r\n    struct RaribleBuy {\r\n        IRarible.Order order;\r\n        IRarible.Sig sig;\r\n        uint buyerFee;\r\n        IRarible.Sig buyerFeeSig;\r\n        uint amount;\r\n        uint256 price;\r\n    }\r\n\r\n    function buyAssetsForEth(RaribleBuy[] memory raribleBuys, address recipient, bool revertIfTrxFails) external {\r\n        for (uint256 i = 0; i < raribleBuys.length; i++) {\r\n            _buyAssetForEth(\r\n                raribleBuys[i].price,\r\n                raribleBuys[i].amount, \r\n                raribleBuys[i].buyerFee, \r\n                raribleBuys[i].order, \r\n                raribleBuys[i].sig, \r\n                raribleBuys[i].buyerFeeSig, \r\n                recipient,\r\n                revertIfTrxFails\r\n            );\r\n        }\r\n    }\r\n\r\n    function _buyAssetForEth(\r\n        uint256 _price, \r\n        uint256 _amount, \r\n        uint256 _buyerFee, \r\n        IRarible.Order memory _order, \r\n        IRarible.Sig memory _sig, \r\n        IRarible.Sig memory _buyerFeeSig, \r\n        address _recipient,\r\n        bool _revertIfTrxFails\r\n    ) internal {\r\n        bytes memory _data = abi.encodeWithSelector(IRarible.exchange.selector, _order, _sig, _buyerFee, _buyerFeeSig, _amount, _recipient);\r\n        (bool success, ) = RARIBLE.call{value:_price}(_data);\r\n        if (!success && _revertIfTrxFails) {\r\n            // Copy revert reason from call\r\n            assembly {\r\n                returndatacopy(0, 0, returndatasize())\r\n                revert(0, returndatasize())\r\n            }\r\n        }\r\n    }\r\n}","ABI":"[{\"inputs\":[],\"name\":\"RARIBLE\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"RaribleV1Market","CompilerVersion":"v0.8.4+commit.c7e474f2","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"ipfs://38d5c83d0ea96f8f8f5b8ac57def74d86d4f493b4bc65562a25c52e338cd8668"}]}