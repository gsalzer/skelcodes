{"status":"1","message":"OK","result":[{"SourceCode":"/**\r\n *Submitted for verification at Etherscan.io on 2021-05-14\r\n*/\r\n\r\n// SPDX-License-Identifier:  AGPL-3.0-or-later // hevm: flattened sources of contracts/oracles/ChainlinkOracle.sol\r\npragma solidity =0.6.11 >=0.6.0 <0.8.0;\r\n\r\n////// contracts/interfaces/IMapleGlobals.sol\r\n/* pragma solidity 0.6.11; */\r\n\r\ninterface IMapleGlobals {\r\n\r\n    function pendingGovernor() external view returns (address);\r\n\r\n    function governor() external view returns (address);\r\n\r\n    function globalAdmin() external view returns (address);\r\n\r\n    function mpl() external view returns (address);\r\n\r\n    function mapleTreasury() external view returns (address);\r\n\r\n    function isValidBalancerPool(address) external view returns (bool);\r\n\r\n    function treasuryFee() external view returns (uint256);\r\n\r\n    function investorFee() external view returns (uint256);\r\n\r\n    function defaultGracePeriod() external view returns (uint256);\r\n\r\n    function fundingPeriod() external view returns (uint256);\r\n\r\n    function swapOutRequired() external view returns (uint256);\r\n\r\n    function isValidLiquidityAsset(address) external view returns (bool);\r\n\r\n    function isValidCollateralAsset(address) external view returns (bool);\r\n\r\n    function isValidPoolDelegate(address) external view returns (bool);\r\n\r\n    function validCalcs(address) external view returns (bool);\r\n\r\n    function isValidCalc(address, uint8) external view returns (bool);\r\n\r\n    function getLpCooldownParams() external view returns (uint256, uint256);\r\n\r\n    function isValidLoanFactory(address) external view returns (bool);\r\n\r\n    function isValidSubFactory(address, address, uint8) external view returns (bool);\r\n\r\n    function isValidPoolFactory(address) external view returns (bool);\r\n    \r\n    function getLatestPrice(address) external view returns (uint256);\r\n    \r\n    function defaultUniswapPath(address, address) external view returns (address);\r\n\r\n    function minLoanEquity() external view returns (uint256);\r\n    \r\n    function maxSwapSlippage() external view returns (uint256);\r\n\r\n    function protocolPaused() external view returns (bool);\r\n\r\n    function stakerCooldownPeriod() external view returns (uint256);\r\n\r\n    function lpCooldownPeriod() external view returns (uint256);\r\n\r\n    function stakerUnstakeWindow() external view returns (uint256);\r\n\r\n    function lpWithdrawWindow() external view returns (uint256);\r\n\r\n    function oracleFor(address) external view returns (address);\r\n\r\n    function validSubFactories(address, address) external view returns (bool);\r\n\r\n    function setStakerCooldownPeriod(uint256) external;\r\n\r\n    function setLpCooldownPeriod(uint256) external;\r\n\r\n    function setStakerUnstakeWindow(uint256) external;\r\n\r\n    function setLpWithdrawWindow(uint256) external;\r\n\r\n    function setMaxSwapSlippage(uint256) external;\r\n\r\n    function setGlobalAdmin(address) external;\r\n\r\n    function setValidBalancerPool(address, bool) external;\r\n\r\n    function setProtocolPause(bool) external;\r\n\r\n    function setValidPoolFactory(address, bool) external;\r\n\r\n    function setValidLoanFactory(address, bool) external;\r\n\r\n    function setValidSubFactory(address, address, bool) external;\r\n\r\n    function setDefaultUniswapPath(address, address, address) external;\r\n\r\n    function setPoolDelegateAllowlist(address, bool) external;\r\n\r\n    function setCollateralAsset(address, bool) external;\r\n\r\n    function setLiquidityAsset(address, bool) external;\r\n\r\n    function setCalc(address, bool) external;\r\n\r\n    function setInvestorFee(uint256) external;\r\n\r\n    function setTreasuryFee(uint256) external;\r\n\r\n    function setMapleTreasury(address) external;\r\n\r\n    function setDefaultGracePeriod(uint256) external;\r\n\r\n    function setMinLoanEquity(uint256) external;\r\n\r\n    function setFundingPeriod(uint256) external;\r\n\r\n    function setSwapOutRequired(uint256) external;\r\n\r\n    function setPriceOracle(address, address) external;\r\n\r\n    function setPendingGovernor(address) external;\r\n\r\n    function acceptGovernor() external;\r\n\r\n}\r\n\r\n////// contracts/oracles/IChainlinkAggregatorV3.sol\r\n/* pragma solidity 0.6.11; */\r\n\r\ninterface IChainlinkAggregatorV3 {\r\n\r\n  function decimals() external view returns (uint8);\r\n  function description() external view returns (string memory);\r\n  function version() external view returns (uint256);\r\n\r\n  // getRoundData and latestRoundData should both raise \"No data present\"\r\n  // if they do not have data to report, instead of returning unset values,\r\n  // which could be misinterpreted as actual reported values.\r\n  \r\n  function getRoundData(uint80 _roundId)\r\n    external\r\n    view\r\n    returns (\r\n        uint80  roundId,\r\n        int256  answer,\r\n        uint256 startedAt,\r\n        uint256 updatedAt,\r\n        uint80  answeredInRound\r\n    );\r\n\r\n  function latestRoundData()\r\n    external\r\n    view\r\n    returns (\r\n        uint80  roundId,\r\n        int256  answer,\r\n        uint256 startedAt,\r\n        uint256 updatedAt,\r\n        uint80  answeredInRound\r\n    );\r\n\r\n}\r\n\r\n////// lib/openzeppelin-contracts/contracts/GSN/Context.sol\r\n/* pragma solidity >=0.6.0 <0.8.0; */\r\n\r\n/*\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with GSN meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address payable) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes memory) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n////// lib/openzeppelin-contracts/contracts/access/Ownable.sol\r\n/* pragma solidity >=0.6.0 <0.8.0; */\r\n\r\n/* import \"../GSN/Context.sol\"; */\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor () internal {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\n////// contracts/oracles/ChainlinkOracle.sol\r\n/* pragma solidity 0.6.11; */\r\n\r\n/* import \"./IChainlinkAggregatorV3.sol\"; */\r\n/* import \"../interfaces/IMapleGlobals.sol\"; */\r\n/* import \"lib/openzeppelin-contracts/contracts/access/Ownable.sol\"; */\r\n\r\n/// @title ChainlinkOracle is a wrapper contract for Chainlink oracle price feeds that allows for manual price feed overrides.\r\ncontract ChainlinkOracle is Ownable {\r\n\r\n    IChainlinkAggregatorV3 public priceFeed;\r\n    IMapleGlobals public globals;\r\n\r\n    address public immutable assetAddress;\r\n\r\n    bool   public manualOverride;\r\n    int256 public manualPrice;\r\n\r\n    event ChangeAggregatorFeed(address _newMedianizer, address _oldMedianizer);\r\n    event       SetManualPrice(int256 _oldPrice, int256 _newPrice);\r\n    event    SetManualOverride(bool _override);\r\n\r\n    /**\r\n        @dev   Creates a new Chainlink based oracle.\r\n        @param _aggregator   Address of Chainlink aggregator.\r\n        @param _assetAddress Address of currency (0x0 for ETH).\r\n        @param _owner        Address of the owner of the contract.\r\n    */\r\n    constructor(address _aggregator, address _assetAddress, address _owner) public {\r\n        require(_aggregator != address(0), \"CO:ZERO_AGGREGATOR_ADDR\");\r\n        priceFeed       = IChainlinkAggregatorV3(_aggregator);\r\n        assetAddress    = _assetAddress;\r\n        transferOwnership(_owner);\r\n    }\r\n\r\n    /**\r\n        @dev    Returns the latest price.\r\n        @return price The latest price.\r\n    */\r\n    function getLatestPrice() public view returns (int256) {\r\n        if (manualOverride) return manualPrice;\r\n        (uint80 roundID, int256 price,,uint256 timeStamp, uint80 answeredInRound) = priceFeed.latestRoundData();\r\n\r\n        require(timeStamp != 0,             \"CO:ROUND_NOT_COMPLETE\");\r\n        require(answeredInRound >= roundID,         \"CO:STALE_DATA\");\r\n        require(price != int256(0),                 \"CO:ZERO_PRICE\");\r\n        return price;\r\n    }\r\n\r\n\r\n    /**\r\n        @dev   Updates aggregator address. Only the contract Owner can call this function.\r\n        @dev   It emits a `ChangeAggregatorFeed` event.\r\n        @param aggregator Address of Chainlink aggregator.\r\n    */\r\n    function changeAggregator(address aggregator) external onlyOwner {\r\n        require(aggregator != address(0), \"CO:ZERO_AGGREGATOR_ADDR\");\r\n        emit ChangeAggregatorFeed(aggregator, address(priceFeed));\r\n        priceFeed = IChainlinkAggregatorV3(aggregator);\r\n    }\r\n\r\n    /**\r\n        @dev Returns address of oracle currency (0x0 for ETH).\r\n    */\r\n    function getAssetAddress() external view returns (address) {\r\n        return assetAddress;\r\n    }\r\n\r\n    /**\r\n        @dev Returns denomination of price.\r\n    */\r\n    function getDenomination() external pure returns (bytes32) {\r\n        // All Chainlink oracles are denominated in USD.\r\n        return bytes32(\"USD\");\r\n    }\r\n\r\n    /**\r\n        @dev   Sets a manual price. Only the contract Owner can call this function.\r\n               NOTE: this can only be used if manualOverride == true.\r\n        @dev   It emits a `SetManualPrice` event.\r\n        @param _price Price to set.\r\n    */\r\n    function setManualPrice(int256 _price) public onlyOwner {\r\n        require(manualOverride, \"CO:MANUAL_OVERRIDE_NOT_ACTIVE\");\r\n        emit SetManualPrice(manualPrice, _price);\r\n        manualPrice = _price;\r\n    }\r\n\r\n    /**\r\n        @dev   Sets manual override, allowing for manual price setting. Only the contract Owner can call this function.\r\n        @dev   It emits a `SetManualOverride` event.\r\n        @param _override Whether to use the manual override price or not.\r\n    */\r\n    function setManualOverride(bool _override) public onlyOwner {\r\n        manualOverride = _override;\r\n        emit SetManualOverride(_override);\r\n    }\r\n\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_aggregator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_assetAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_newMedianizer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_oldMedianizer\",\"type\":\"address\"}],\"name\":\"ChangeAggregatorFeed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"_override\",\"type\":\"bool\"}],\"name\":\"SetManualOverride\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"_oldPrice\",\"type\":\"int256\"},{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"_newPrice\",\"type\":\"int256\"}],\"name\":\"SetManualPrice\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"assetAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"aggregator\",\"type\":\"address\"}],\"name\":\"changeAggregator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAssetAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getDenomination\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLatestPrice\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"globals\",\"outputs\":[{\"internalType\":\"contract IMapleGlobals\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"manualOverride\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"manualPrice\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"priceFeed\",\"outputs\":[{\"internalType\":\"contract IChainlinkAggregatorV3\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_override\",\"type\":\"bool\"}],\"name\":\"setManualOverride\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"int256\",\"name\":\"_price\",\"type\":\"int256\"}],\"name\":\"setManualPrice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"ChainlinkOracle","CompilerVersion":"v0.6.11+commit.5ef660b1","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"000000000000000000000000547a514d5e3769680ce22b2361c10ea13619e8a90000000000000000000000007fc66500c84a76ad7e9c93437bfc5ac33e2ddae90000000000000000000000006b1a78c1943b03086f7ee53360f9b0672bd60818","EVMVersion":"Default","Library":"","LicenseType":"Unknown","Proxy":"0","Implementation":"","SwarmSource":"ipfs://69fd3a0735723d20a25aa1b8e8b1b72a57ce184bda40c79728c5c255f54a78b8"}]}