{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity >0.4.17;\r\n\r\n/**\r\n * @title SafeMath 数学安全函数\r\n * @dev Math operations with safety checks that throw on error.\r\n */\r\nlibrary SafeMath {\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n        uint256 c = a * b;\r\n        assert(c / a == b);\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // 分母大于0在solidity合约中已经会自动判定了\r\n        // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        assert(b <= a);\r\n        return a - b;\r\n    }\r\n\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        assert(c >= a);\r\n        return c;\r\n    }\r\n}\r\n\r\n/**\r\n * @title Ownable 代币的拥有者\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control.\r\n * @dev functions, this simplifies the implementation of \"user permissions\".\r\n * @dev 这个合约主要是指明合约创建人为代币的创建者，还包括授权控制功能，简化“用户权限”.\r\n */\r\n\r\ncontract Ownable{\r\n    //\"拥有者\"\r\n    address public owner;\r\n    /**\r\n      * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n      * account.\r\n      * @dev 把创建合约的人作为初始的“拥有者”.\r\n      */\r\n    constructor() public{\r\n        owner = msg.sender;\r\n    }\r\n\r\n    /**\r\n      * @dev Throws if called by any account other than the owner.\r\n      * @dev 暂时未知, 应该是只能拥有者进行的操作.\r\n      */\r\n    modifier onlyOwner(){\r\n        require(msg.sender == owner, \"仅owner调用！\");\r\n        //这一行表示继承此合约中使用\r\n        _;\r\n    }\r\n\r\n    /**\r\n    * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n    * @dev 权力转移给新的拥有者\r\n    * @param newOwner The address to transfer ownership to.\r\n    */\r\n    function transferOwnership(address newOwner) public onlyOwner{\r\n        //先确保新用户不是0x0地址\r\n        require(newOwner != address(0), \"不能给地址0转移owner\");\r\n        owner = newOwner;\r\n    }\r\n}\r\n\r\n/**\r\n * @title ERC20Basic 基于REC20，不是直接继承，而是类似的代码\r\n * @dev Simpler version of ERC20 interface  对于ERC20标准接口的简化版本\r\n * @dev see https://github.com/ethereum/EIPs/issues/20\r\n * @dev 新版本的编译器0.6.1要求抽象合约前要加abstract，并且抽象函数要加上virtual\r\n */\r\ncontract ERC20Basic{\r\n     //定义接口的一系列函数\r\n     uint public _totalSupply;//总发行货币量\r\n     function totalSupply() public view returns(uint);//查看总货币量函数\r\n     function balanceOf(address who) public view returns(uint);//查某人余额\r\n     function transfer(address to, uint value) public;//转账交易函数\r\n     event Transfer(address indexed from, address indexed to, uint value);//定义转账记录事件\r\n }\r\n\r\n/**\r\n * @title ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/20\r\n * @dev 继承与上面的接口\r\n */\r\ncontract ERC20 is ERC20Basic{\r\n    //拓展了第三方授权功能\r\n    //授权给别人用自己的钱，返回钱数？\r\n    function allowance(address owner, address spender) public view returns(uint);\r\n    //借助谁（from）向谁（to）转币\r\n    function transferFrom(address from, address to, uint value) public;\r\n    //授权使用额度函数\r\n    function approve(address spender, uint value) public;\r\n    //记录授权\r\n    event Approval(address indexed owner, address indexed spender, uint value);\r\n}\r\n\r\n/**\r\n * @title Basic token 基础代币\r\n * @dev Basic version of StandardToken, with no allowances.\r\n * @dev 仅实现代币基本功能（没有第三方授权）\r\n * \r\n */\r\n contract BasicToken is Ownable, ERC20Basic{\r\n    //使用安全数学函数\r\n    using SafeMath for uint;\r\n    mapping(address => uint) public balances;\r\n    // additional variables for use if transaction fees ever became necessary\r\n    // 如果有必要收取交易费用，可使用其他变量\r\n    uint public basisPointsRate = 0; //基本利率\r\n    uint public maximunFee = 0; //最大利息金额\r\n\r\n    /**\r\n    * @dev Fix for the ERC20 short address attack. 防止短地址攻击，具体可看博客ERC20文章\r\n    * @dev 凡是涉及转账交易（合约调用）都需要加上这一限制\r\n    */\r\n    modifier onlyPayloadSize(uint size){\r\n        //msg.data就是data域（calldata）中的内容，一般来说都是4（函数名）+32（转账地址）+32（转账金额）=68字节\r\n        //短地址攻击简单来说就是转账地址后面为0但故意缺省，导致金额32字节前面的0被当做地址而后面自动补0导致转账金额激增。\r\n        //参数size就是除函数名外的剩下字节数\r\n        //解决方法：对后面的的字节数的长度限制要求\r\n        require(!(msg.data.length < size+4), \"Invalid short address\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n    * @dev transfer token for a specified address 转给一个符合规定（非短地址）的地址\r\n    * @param _to The address to transfer to. 转账地址\r\n    * @param _value The amount to be transferred. 转账金额\r\n    */\r\n    function transfer(address _to, uint _value) public onlyPayloadSize(2 * 32){\r\n        //先算利息: （转账金额*基本利率)/10000  (ps:因为浮点会精度缺失，所以这样计算)\r\n        uint fee = (_value.mul(basisPointsRate)).div(10000);\r\n        //判断是否超最大额\r\n        if (fee > maximunFee) fee = maximunFee;\r\n        //计算剩下的钱\r\n        uint sendAmount = _value.sub(fee);\r\n        //转账的钱要够   源码没加这个判断不知为何？\r\n        //不需要检查，因为后面balances[msg.sender].sub(sendAmount)其中会检查，不够会报异常。\r\n        //require(balances[msg.sender] >= _value);\r\n        //有安全数学函数就不用判断溢出了\r\n        //扣钱\r\n        balances[msg.sender] = balances[msg.sender].sub(sendAmount);\r\n        //加钱\r\n        balances[_to] = balances[_to].add(sendAmount);\r\n        //利息去向->owner\r\n        if (fee > 0){\r\n            //因为继承于Ownable，所以可以拿到owner\r\n            balances[owner] = balances[owner].add(fee);\r\n            //继承于ERCBasic接口，其中申明了Transfer记录\r\n            //记录利息去向\r\n            emit Transfer(msg.sender, owner, fee);\r\n        }\r\n        //记录转账去向,注意记录的不是总金额而是去除交易费的金额\r\n        emit Transfer(msg.sender, _to, sendAmount);\r\n    }\r\n\r\n    /**\r\n    * @dev Gets the balance of the specified address. 查余额函数\r\n    * @param _owner The address to query the the balance of.\r\n    * @return An uint representing the amount owned by the passed address.\r\n    */\r\n    function balanceOf(address _owner) public view returns(uint balance){\r\n        return balances[_owner];\r\n    }\r\n\r\n}\r\n/**\r\n * @title Standard ERC20 token ERC20标准代币\r\n *\r\n * @dev Implementation of the basic standard token.  依据基本代币准则\r\n * @dev https://github.com/ethereum/EIPs/issues/20\r\n * @dev Based oncode by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\r\n * @dev 借鉴了firstblood代币\r\n * @dev 对代币基础功能的拓展-> 添加了第三方授权功能\r\n */\r\ncontract StandardToken is BasicToken, ERC20{\r\n    //授权金额映射：某人对其他所有人授权的金额的映射\r\n    mapping(address => mapping(address => uint)) public allowed;\r\n    //uint最大值\r\n    uint public constant MAX_UINT = 2**256-1;\r\n    /**\r\n    * @dev Transfer tokens from one address to another 授权转账：从一个账户转到另一个账户\r\n    * @param _from address The address which you want to send tokens from 已得到授权的账户\r\n    * @param _to address The address which you want to transfer to 转向的账户\r\n    * @param _value uint the amount of tokens to be transferred 转账金额\r\n    */\r\n    function transferFrom(address _from, address _to, uint _value) public onlyPayloadSize(2 * 32){\r\n        //授权金额：授权者对于当前调用者授权其可使用的金额量\r\n        uint _allowance = allowed[_from][msg.sender];\r\n        //在这里同样不需要检查授权金额是否足够,后面的sub函数这种情况会检测\r\n        // require(_allowance >= _value);\r\n        //1.先算利息\r\n        uint fee = (_value.mul(basisPointsRate)).div(10000);\r\n        if (fee > maximunFee) fee = maximunFee;\r\n        //2.扣钱\r\n        // 这里为什么要判断？\r\n        if (_allowance < MAX_UINT){\r\n            //注意这里扣去的是总金额，包括了利息都要从授权方的授权金额去除\r\n            allowed[_from][msg.sender] = _allowance.sub(_value);\r\n        }\r\n        balances[_from] = balances[_from].sub(_value);\r\n        //3.加钱\r\n        uint sendAmount = _value.sub(fee);\r\n        balances[_to] = balances[_to].add(sendAmount);\r\n        //4.利息去向\r\n        if (fee > 0){\r\n            balances[owner] = balances[owner].add(fee);\r\n            emit Transfer(_from, owner, fee);\r\n        }\r\n        //5.记录\r\n        emit Transfer(_from, _to, sendAmount);\r\n    }\r\n\r\n    /**\r\n    * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\r\n    * @dev 调用者授权给他人可使用金额\r\n    * @param _spender The address which will spend the funds. 被授权者\r\n    * @param _value The amount of tokens to be spent. 金额\r\n    */\r\n    function approve(address _spender, uint _value) public onlyPayloadSize(2 * 32){\r\n        // To change the approve amount you first have to reduce the addresses`\r\n        //  allowance to zero by calling `approve(_spender, 0)` if it is not\r\n        //  already 0 to mitigate the race condition described here:\r\n        //  https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n        //这里的限定条件是：不能将已设置过的授权金额改动，除非改为0。\r\n        //也就是说对他人的授权金额只能是从0改为value,这一次机会，再改就只能改回到0\r\n        require(!(_value != 0 && allowed[msg.sender][_spender] != 0), \"You have only one chance to approve , you can only change it to 0 later\");\r\n        //1.改allowed\r\n        allowed[msg.sender][_spender] = _value;\r\n        //2. 记录\r\n        emit Approval(msg.sender, _spender, _value);\r\n    }\r\n\r\n    /**\r\n    * @dev Function to check the amount of tokens than an owner allowed to a spender.\r\n    * @param _owner address The address which owns the funds. 地址拥有资金的地址。\r\n    * @param _spender address The address which will spend the funds. 查看授权了多少钱\r\n    * @return A uint specifying the amount of tokens still available for the spender.\r\n    */\r\n    function allowance(address _owner, address _spender) public view returns(uint remaining){\r\n        return allowed[_owner][_spender];\r\n    }\r\n}\r\n\r\n\r\n/**\r\n * @title Pausable 中断\r\n * @dev Base contract which allows children to implement an emergency stop mechanism.\r\n * @dev 实现紧急停止机制\r\n */\r\ncontract Pausable is Ownable{\r\n    event Pause();\r\n    event Unpause();\r\n\r\n    bool public paused = false;\r\n\r\n    /**\r\n    * @dev Modifier to make a function callable only when the contract is not paused.\r\n    * @dev 限制条件：函数只能是在合约未停止情况下执行.\r\n    */\r\n    modifier whenNotPaused(){\r\n        require(!paused, \"Must be used without pausing\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n    * @dev Modifier to make a function callable only when the contract is paused.\r\n    * @dev 函数只能在停止条件下执行\r\n    */\r\n    modifier whenPaused(){\r\n        require(paused, \"Must be used under pause\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n    * @dev called by the owner to pause, triggers stopped state\r\n    * @dev 只能由代币管理者进行停止\r\n    *\r\n    */\r\n    function pause() public onlyOwner whenNotPaused {\r\n        paused = true;\r\n        emit Pause();\r\n    }\r\n\r\n    /**\r\n    * @dev called by the owner to unpause, returns to normal state\r\n    * @dev 只能是代币管理者进行重开\r\n    */\r\n    function unpause() public onlyOwner whenPaused{\r\n        paused = false;\r\n        emit Unpause();\r\n    }\r\n}\r\n\r\n/**\r\n * @dev 列黑名单\r\n */\r\n\r\ncontract BlackList is Ownable, BasicToken{\r\n    //黑名单映射\r\n    mapping(address => bool) isBlackListed;\r\n    //事件\r\n    event DestroyedBlackFunds(address _blackListedUser, uint _balance);\r\n    event AddedBlackList(address _user);\r\n    event RemovedBlackList(address _user);\r\n\r\n\r\n    //Getters to allow the same blacklist to be used also by other contracts (including upgraded Tether)\r\n    //允许其他合约调用此黑名单(external)，查看此人是否被列入黑名单\r\n    function getBlackListStatus(address _maker) external view returns(bool){\r\n        return isBlackListed[_maker];\r\n    }\r\n\r\n    //获取当前代币的Owner\r\n    function getOwner() external view returns(address){\r\n        return owner;\r\n    }\r\n    //增加黑名单\r\n    function addBlackList(address _evilUser) public onlyOwner{\r\n        isBlackListed[_evilUser] = true;\r\n        emit AddedBlackList(_evilUser);\r\n    }\r\n\r\n    //去除某人黑名单\r\n    function removeBlackList(address _clearUser) public onlyOwner{\r\n        isBlackListed[_clearUser] = false;\r\n        emit RemovedBlackList(_clearUser);\r\n    }\r\n\r\n    //去除掉黑名单账户的钱\r\n    function destroyBlackFunds(address _blackListUser) public onlyOwner{\r\n        //1. 检查是否在黑名单\r\n        require(isBlackListed[_blackListUser], \"You can only clear the money of users in the blacklist\");\r\n        //2. 查看要清除的钱\r\n        uint dirtyFunds = balanceOf(_blackListUser);\r\n        //3. 扣除清零\r\n        balances[_blackListUser] = 0;\r\n        //4. 总代币发行量减少\r\n        _totalSupply = _totalSupply.sub(dirtyFunds);\r\n        //5. 记录\r\n        emit DestroyedBlackFunds(_blackListUser, dirtyFunds);\r\n    }\r\n}\r\n\r\n\r\n//标准代币拓展(为了适应不支持ERC20的情况或者是拓展)\r\ncontract UpgradedStandardToken is StandardToken{\r\n    // those methods are called by the legacy contract\r\n    // and they must ensure msg.sender to be the contract address\r\n    // 这些拓展方法都是来自遗留合同\r\n    // 并且合约调用者必须是合约地址\r\n    function transferByLegacy(address from, address to, uint value) public;\r\n    function transferFromByLegacy(address sender, address from, address spender, uint value) public;\r\n    function approveByLegacy(address from, address spender, uint value) public;\r\n}\r\n\r\n\r\n//主体代币\r\ncontract TetherToken is Pausable, StandardToken, BlackList{\r\n\r\n    string public name;  //代币名\r\n    string public symbol; //标志\r\n    uint public decimals; //精度/小数点后几位\r\n    address public upgradedAddress; //升级合约的地址（必须是合约地址）\r\n    bool public deprecated; //弃用（支持ERC20与否）\r\n\r\n    //  The contract can be initialized with a number of tokens 可初始化多个代币\r\n    //  All the tokens are deposited to the owner address\r\n    //\r\n    // @param _balance Initial supply of the contract\r\n    // @param _name Token Name\r\n    // @param _symbol Token symbol\r\n    // @param _decimals Token decimals\r\n\r\n    constructor(\r\n        uint _initialSupply,\r\n        string _name,\r\n        string _symbol,\r\n        uint _decimals\r\n    ) public {\r\n        //总发行币都给owner\r\n        _totalSupply = _initialSupply;\r\n        balances[owner] = _initialSupply;\r\n        name = _name;\r\n        symbol = _symbol;\r\n        decimals = _decimals;\r\n        deprecated = false;\r\n    }\r\n\r\n    // Called when new token are issued\r\n    event Issue(uint amount);\r\n\r\n    // Called when tokens are redeemed\r\n    event Redeem(uint amount);\r\n\r\n    // Called when contract is deprecated\r\n    event Deprecate(address newAddress);\r\n\r\n    // Called if contract ever adds fees\r\n    event Params(uint feeBasisPoints, uint maxFee);\r\n\r\n    // Forward ERC20 methods to upgraded contract if this one is deprecated\r\n    //如果不推荐使用ERC20方法，则将其转为升级的合同\r\n    function transfer(address _to, uint _value) public whenNotPaused{\r\n        //排除黑名单\r\n        require(!isBlackListed[msg.sender], \"The account you applied for is on the blacklist and cannot be transferred\");\r\n        //判断是否支持ERC20\r\n        if(deprecated){\r\n            //不支持的话就调用用upgradedAddress实例化的对象的transferByLegacy函数\r\n            //不知道这里为什么要传msg.sender？\r\n            //我猜测是重新升级适配函数的话调用此函数的人(msg.sender)也要转过去\r\n            return UpgradedStandardToken(upgradedAddress).transferByLegacy(msg.sender, _to, _value);\r\n        }else{\r\n            //支持的话就直接调用ERC20的转账\r\n            //这里没有返回值，不知道为什么还要加return\r\n            return super.transfer(_to, _value);\r\n        }\r\n    }\r\n\r\n    //同理：\r\n    // Forward ERC20 methods to upgraded contract if this one is deprecated\r\n    function transferFrom(address _from, address _to, uint _value) public whenNotPaused{\r\n        require(!isBlackListed[_from], \"The account you applied for is on the blacklist and cannot be transferred\");\r\n        if(deprecated){\r\n            return UpgradedStandardToken(upgradedAddress).transferFromByLegacy(msg.sender, _from, _to, _value);\r\n        }else{\r\n            return super.transferFrom(_from, _to, _value);\r\n        }\r\n    }\r\n\r\n    // Forward ERC20 methods to upgraded contract if this one is deprecated\r\n    //注意这里查询余额在代币暂停的情况下也是可以使用的\r\n    function balanceOf(address who) public view returns(uint){\r\n        if(deprecated){\r\n            return UpgradedStandardToken(upgradedAddress).balanceOf(who);\r\n        }else{\r\n            return super.balanceOf(who);\r\n        }\r\n    }\r\n\r\n    // Forward ERC20 methods to upgraded contract if this one is deprecated\r\n    function approve(address _spender, uint _value) public whenNotPaused{\r\n        //这里不用检查了，如果是在黑名单中，那么授权再多也没用，transferFrom的时候就检测出来了\r\n        if(deprecated){\r\n            return UpgradedStandardToken(upgradedAddress).approveByLegacy(msg.sender, _spender, _value);\r\n        }else{\r\n            return super.approve(_spender, _value);\r\n        }\r\n\r\n    }\r\n\r\n    // Forward ERC20 methods to upgraded contract if this one is deprecated\r\n    function allowance(address _owner, address _spender) public view returns(uint){\r\n        if(deprecated){\r\n            return UpgradedStandardToken(upgradedAddress).allowance(_owner, _spender);\r\n        }else{\r\n            return super.allowance(_owner, _spender);\r\n        }\r\n    }\r\n\r\n    // deprecate current contract in favour of a new one\r\n    //反对现行合同，改用新合同. upgradedAddress新合同地址\r\n    function deprecate(address _upgradedAddress) public onlyOwner{\r\n        deprecated = true;\r\n        upgradedAddress = _upgradedAddress;\r\n        //记录\r\n        emit Deprecate(_upgradedAddress);\r\n    }\r\n\r\n    // deprecate current contract if favour of a new one\r\n    //反对现行合同，如果想换一个新合约,需要提前知道当前发行量\r\n    function totalSupply() public view returns(uint){\r\n        if(deprecated){\r\n            return UpgradedStandardToken(upgradedAddress).totalSupply();\r\n        }else{\r\n            return _totalSupply;\r\n        }\r\n    }\r\n\r\n    // Issue a new amount of tokens 发行新数量的代币\r\n    // these tokens are deposited into the owner address\r\n    //\r\n    // @param _amount Number of tokens to be issued\r\n    function issue(uint _amount) public onlyOwner{\r\n        //增加拥有者的量\r\n        balances[owner] = balances[owner].add(_amount);\r\n        //增加发行的总代币量\r\n        _totalSupply = _totalSupply.add(_amount);\r\n        //记录\r\n        emit Issue(_amount);\r\n    }\r\n\r\n    // 调整利息率和最大利息限制\r\n    function setParams(uint newBasisPoints, uint newMaxFee) public onlyOwner{\r\n        // Ensure transparency by hardcoding limit beyond which fees can never be added\r\n        //通过硬编码限制来确保透明度，超过这个限度就不能再增加费用了\r\n        require(newBasisPoints < 20, \"The new BasisPoints cannot exceed 20\"); //0.002\r\n        require(newMaxFee < 50, \"The new MaxFee cannot exceed 50\"); //5*10**(decimals+1)\r\n        basisPointsRate = newBasisPoints;\r\n        maximunFee = newMaxFee.mul(10**decimals);\r\n        //记录\r\n        emit Params(newBasisPoints, newMaxFee);\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_upgradedAddress\",\"type\":\"address\"}],\"name\":\"deprecate\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"deprecated\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_evilUser\",\"type\":\"address\"}],\"name\":\"addBlackList\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"upgradedAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"balances\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"_totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_maker\",\"type\":\"address\"}],\"name\":\"getBlackListStatus\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"address\"}],\"name\":\"allowed\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"maximunFee\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"who\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newBasisPoints\",\"type\":\"uint256\"},{\"name\":\"newMaxFee\",\"type\":\"uint256\"}],\"name\":\"setParams\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"issue\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"basisPointsRate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_clearUser\",\"type\":\"address\"}],\"name\":\"removeBlackList\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"MAX_UINT\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_blackListUser\",\"type\":\"address\"}],\"name\":\"destroyBlackFunds\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_initialSupply\",\"type\":\"uint256\"},{\"name\":\"_name\",\"type\":\"string\"},{\"name\":\"_symbol\",\"type\":\"string\"},{\"name\":\"_decimals\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Issue\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Redeem\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"newAddress\",\"type\":\"address\"}],\"name\":\"Deprecate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"feeBasisPoints\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"maxFee\",\"type\":\"uint256\"}],\"name\":\"Params\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_blackListedUser\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_balance\",\"type\":\"uint256\"}],\"name\":\"DestroyedBlackFunds\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"AddedBlackList\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"RemovedBlackList\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Pause\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Unpause\",\"type\":\"event\"}]","ContractName":"TetherToken","CompilerVersion":"v0.4.22+commit.4cb486ee","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000000000000000000000000000000009184e72a000000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000c0000000000000000000000000000000000000000000000000000000000000000600000000000000000000000000000000000000000000000000000000000000076869746f6b656e0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000024849000000000000000000000000000000000000000000000000000000000000","EVMVersion":"Default","Library":"","LicenseType":"GNU GPLv3","Proxy":"0","Implementation":"","SwarmSource":"bzzr://f3230991b303bacfdd54bf25e7b713b2cbd33940db958e13242f34cba9e17641"}]}