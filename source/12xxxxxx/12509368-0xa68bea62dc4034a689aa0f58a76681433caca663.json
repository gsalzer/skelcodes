{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/flattened/AugustusRegistry.sol\": {\r\n      \"content\": \"// File: openzeppelin-solidity/contracts/GSN/Context.sol\\n\\n\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\\n// File: openzeppelin-solidity/contracts/access/Ownable.sol\\n\\n\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor () internal {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(_owner == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n}\\n\\n// File: original_contracts/IAugustusRegistry.sol\\n\\npragma solidity 0.7.5;\\n\\n\\ninterface IAugustusRegistry {\\n\\n    function addAugustus(string calldata version, address augustus, bool isLatest) external;\\n\\n    function banAugustus(address augustus) external;\\n\\n    function isAugustusBanned(address augustus) external view returns (bool);\\n\\n    function isValidAugustus(address augustus) external view returns (bool);\\n\\n    function getAugustusCount() external view returns (uint256);\\n\\n    function getLatestVersion() external view returns (string memory);\\n\\n    function getLatestAugustus() external view returns (address);\\n\\n    function getAugustusByVersion(string calldata version) external view returns (address);\\n}\\n\\n// File: original_contracts/AugustusRegistry.sol\\n\\npragma solidity 0.7.5;\\n\\n\\n\\ncontract AugustusRegistry is IAugustusRegistry, Ownable {\\n\\n    mapping(bytes32 => address) private versionVsAugustus;\\n\\n    mapping(address => bool) private augustusVsValid;\\n\\n    //mapping of banned Augustus\\n    mapping(address => bool) private banned;\\n\\n    string private latestVersion;\\n\\n    uint256 private count;\\n\\n    event AugustusAdded(string version, address indexed augustus, bool isLatest);\\n    event AugustusBanned(address indexed augustus);\\n\\n    function addAugustus(\\n        string calldata version,\\n        address augustus,\\n        bool isLatest\\n    )\\n        external\\n        override\\n        onlyOwner\\n    {   \\n        bytes32 keccakedVersion = keccak256(abi.encodePacked(version));\\n        require(augustus != address(0), \\\"Invalid augustus address\\\");\\n        require(versionVsAugustus[keccakedVersion] == address(0), \\\"Version already exists\\\");\\n        require(!augustusVsValid[augustus], \\\"Augustus already exists\\\");\\n\\n        versionVsAugustus[keccakedVersion] = augustus;\\n        augustusVsValid[augustus] = true;\\n        count = count + 1;\\n\\n        if (isLatest) {\\n            latestVersion = version;\\n        }\\n\\n        emit AugustusAdded(version, augustus, isLatest);\\n    }\\n\\n    function banAugustus(address augustus) external override onlyOwner {\\n        banned[augustus] = true;\\n        emit AugustusBanned(augustus);\\n    }\\n\\n    function isValidAugustus(address augustus) external override view returns (bool) {\\n        return (augustusVsValid[augustus] && !banned[augustus]);\\n    }\\n\\n    function isAugustusBanned(address augustus) external override view returns (bool) {\\n        return banned[augustus];\\n    }\\n\\n    function getAugustusCount() external override view returns (uint256) {\\n        return count;\\n    }\\n\\n    function getLatestVersion() external override view returns (string memory) {\\n        return latestVersion;\\n    }\\n\\n    function getLatestAugustus() external override view returns (address) {\\n        return versionVsAugustus[keccak256(abi.encodePacked(latestVersion))];\\n    }\\n\\n    function getAugustusByVersion(string calldata version) external override view returns (address) {\\n        return versionVsAugustus[keccak256(abi.encodePacked(version))];\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 1000000\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"metadata\": {\r\n      \"useLiteralContent\": true\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}","ABI":"[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"version\",\"type\":\"string\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"augustus\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isLatest\",\"type\":\"bool\"}],\"name\":\"AugustusAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"augustus\",\"type\":\"address\"}],\"name\":\"AugustusBanned\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"version\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"augustus\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isLatest\",\"type\":\"bool\"}],\"name\":\"addAugustus\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"augustus\",\"type\":\"address\"}],\"name\":\"banAugustus\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"version\",\"type\":\"string\"}],\"name\":\"getAugustusByVersion\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAugustusCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLatestAugustus\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLatestVersion\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"augustus\",\"type\":\"address\"}],\"name\":\"isAugustusBanned\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"augustus\",\"type\":\"address\"}],\"name\":\"isValidAugustus\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"AugustusRegistry","CompilerVersion":"v0.7.5+commit.eb77ed08","OptimizationUsed":"1","Runs":"1000000","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}