{"status":"1","message":"OK","result":[{"SourceCode":"// SPDX-License-Identifier: MIT\r\n\r\npragma solidity 0.8.3;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount)\r\n        external\r\n        returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender)\r\n        external\r\n        view\r\n        returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(\r\n        address indexed owner,\r\n        address indexed spender,\r\n        uint256 value\r\n    );\r\n}\r\n\r\n/// @title Contains 512-bit math functions\r\n/// @notice Facilitates multiplication and division that can have overflow of an intermediate value without any loss of precision\r\n/// @dev Handles \"phantom overflow\" i.e., allows multiplication and division where an intermediate value overflows 256 bits\r\nlibrary FullMath {\r\n    /// @notice Calculates floor(a×b÷denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\r\n    /// @param a The multiplicand\r\n    /// @param b The multiplier\r\n    /// @param denominator The divisor\r\n    /// @return result The 256-bit result\r\n    /// @dev Credit to Remco Bloemen under MIT license https://xn--2-umb.com/21/muldiv\r\n    function mulDiv(\r\n        uint256 a,\r\n        uint256 b,\r\n        uint256 denominator\r\n    ) internal pure returns (uint256 result) {\r\n        // 512-bit multiply [prod1 prod0] = a * b\r\n        // Compute the product mod 2**256 and mod 2**256 - 1\r\n        // then use the Chinese Remainder Theorem to reconstruct\r\n        // the 512 bit result. The result is stored in two 256\r\n        // variables such that product = prod1 * 2**256 + prod0\r\n        uint256 prod0; // Least significant 256 bits of the product\r\n        uint256 prod1; // Most significant 256 bits of the product\r\n        assembly {\r\n            let mm := mulmod(a, b, not(0))\r\n            prod0 := mul(a, b)\r\n            prod1 := sub(sub(mm, prod0), lt(mm, prod0))\r\n        }\r\n\r\n        // Handle non-overflow cases, 256 by 256 division\r\n        if (prod1 == 0) {\r\n            require(denominator > 0);\r\n            assembly {\r\n                result := div(prod0, denominator)\r\n            }\r\n            return result;\r\n        }\r\n\r\n        // Make sure the result is less than 2**256.\r\n        // Also prevents denominator == 0\r\n        require(denominator > prod1);\r\n\r\n        ///////////////////////////////////////////////\r\n        // 512 by 256 division.\r\n        ///////////////////////////////////////////////\r\n\r\n        // Make division exact by subtracting the remainder from [prod1 prod0]\r\n        // Compute remainder using mulmod\r\n        uint256 remainder;\r\n        assembly {\r\n            remainder := mulmod(a, b, denominator)\r\n        }\r\n        // Subtract 256 bit number from 512 bit number\r\n        assembly {\r\n            prod1 := sub(prod1, gt(remainder, prod0))\r\n            prod0 := sub(prod0, remainder)\r\n        }\r\n\r\n        // Factor powers of two out of denominator\r\n        // Compute largest power of two divisor of denominator.\r\n        // Always >= 1.\r\n        uint256 twos = denominator & (~denominator + 1);\r\n        // Divide denominator by power of two\r\n        assembly {\r\n            denominator := div(denominator, twos)\r\n        }\r\n\r\n        // Divide [prod1 prod0] by the factors of two\r\n        assembly {\r\n            prod0 := div(prod0, twos)\r\n        }\r\n        // Shift in bits from prod1 into prod0. For this we need\r\n        // to flip `twos` such that it is 2**256 / twos.\r\n        // If twos is zero, then it becomes one\r\n        assembly {\r\n            twos := add(div(sub(0, twos), twos), 1)\r\n        }\r\n        prod0 |= prod1 * twos;\r\n\r\n        // Invert denominator mod 2**256\r\n        // Now that denominator is an odd number, it has an inverse\r\n        // modulo 2**256 such that denominator * inv = 1 mod 2**256.\r\n        // Compute the inverse by starting with a seed that is correct\r\n        // correct for four bits. That is, denominator * inv = 1 mod 2**4\r\n        uint256 inv = (3 * denominator) ^ 2;\r\n        // Now use Newton-Raphson iteration to improve the precision.\r\n        // Thanks to Hensel's lifting lemma, this also works in modular\r\n        // arithmetic, doubling the correct bits in each step.\r\n        inv *= 2 - denominator * inv; // inverse mod 2**8\r\n        inv *= 2 - denominator * inv; // inverse mod 2**16\r\n        inv *= 2 - denominator * inv; // inverse mod 2**32\r\n        inv *= 2 - denominator * inv; // inverse mod 2**64\r\n        inv *= 2 - denominator * inv; // inverse mod 2**128\r\n        inv *= 2 - denominator * inv; // inverse mod 2**256\r\n\r\n        // Because the division is now exact we can divide by multiplying\r\n        // with the modular inverse of denominator. This will give us the\r\n        // correct result modulo 2**256. Since the precoditions guarantee\r\n        // that the outcome is less than 2**256, this is the final result.\r\n        // We don't need to compute the high bits of the result and prod1\r\n        // is no longer required.\r\n        result = prod0 * inv;\r\n        return result;\r\n    }\r\n\r\n    /// @notice Calculates ceil(a×b÷denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\r\n    /// @param a The multiplicand\r\n    /// @param b The multiplier\r\n    /// @param denominator The divisor\r\n    /// @return result The 256-bit result\r\n    function mulDivRoundingUp(\r\n        uint256 a,\r\n        uint256 b,\r\n        uint256 denominator\r\n    ) internal pure returns (uint256 result) {\r\n        result = mulDiv(a, b, denominator);\r\n        if (mulmod(a, b, denominator) > 0) {\r\n            require(result < type(uint256).max);\r\n            result++;\r\n        }\r\n    }\r\n}\r\n\r\ninterface IMinterReceiver {\r\n    function sharesMinted(\r\n        uint40 stakeId,\r\n        address supplier,\r\n        uint72 stakedHearts,\r\n        uint72 stakeShares\r\n    ) external;\r\n\r\n    function earningsMinted(uint40 stakeId, uint72 heartsEarned) external;\r\n}\r\n\r\ncontract ShareMarket is IMinterReceiver {\r\n    IERC20 public hexContract;\r\n    address public minterContract;\r\n\r\n    struct ShareOrder {\r\n        uint40 stakeId;\r\n        uint72 sharesPurchased;\r\n        address shareReceiver;\r\n    }\r\n    struct ShareListing {\r\n        uint72 heartsStaked;\r\n        uint72 sharesTotal;\r\n        uint72 sharesAvailable;\r\n        uint72 heartsEarned;\r\n        uint72 supplierHeartsOwed;\r\n        address supplier;\r\n        mapping(address => uint72) shareOwners;\r\n    }\r\n    mapping(uint40 => ShareListing) public shareListings;\r\n\r\n    event AddListing(\r\n        uint40 indexed stakeId,\r\n        address indexed supplier,\r\n        uint72 shares\r\n    );\r\n    event SharesUpdate(\r\n        uint40 indexed stakeId,\r\n        address indexed updater,\r\n        uint72 sharesAvailable\r\n    );\r\n    event AddEarnings(uint40 indexed stakeId, uint72 heartsEarned);\r\n    event BuyShares(\r\n        uint40 indexed stakeId,\r\n        address indexed owner,\r\n        uint72 sharesPurchased\r\n    );\r\n    event ClaimEarnings(\r\n        uint40 indexed stakeId,\r\n        address indexed claimer,\r\n        uint256 heartsClaimed\r\n    );\r\n    event SupplierWithdraw(\r\n        uint40 indexed stakeId,\r\n        address indexed supplier,\r\n        uint72 heartsWithdrawn\r\n    );\r\n\r\n    uint256 private unlocked = 1;\r\n    modifier lock() {\r\n        require(unlocked == 1, \"LOCKED\");\r\n        unlocked = 0;\r\n        _;\r\n        unlocked = 1;\r\n    }\r\n\r\n    constructor(IERC20 _hex, address _minter) {\r\n        hexContract = _hex;\r\n        minterContract = _minter;\r\n    }\r\n\r\n    function sharesOwned(uint40 stakeId, address owner)\r\n        public\r\n        view\r\n        returns (uint72 shares)\r\n    {\r\n        return shareListings[stakeId].shareOwners[owner];\r\n    }\r\n\r\n    function sharesMinted(\r\n        uint40 stakeId,\r\n        address supplier,\r\n        uint72 stakedHearts,\r\n        uint72 stakeShares\r\n    ) external override {\r\n        require(msg.sender == minterContract, \"CALLER_NOT_MINTER\");\r\n\r\n        ShareListing storage listing = shareListings[stakeId];\r\n        listing.heartsStaked = stakedHearts;\r\n        listing.sharesTotal = stakeShares;\r\n        listing.sharesAvailable = stakeShares;\r\n        listing.supplier = supplier;\r\n\r\n        emit AddListing(stakeId, supplier, stakeShares);\r\n    }\r\n\r\n    function earningsMinted(uint40 stakeId, uint72 heartsEarned)\r\n        external\r\n        override\r\n    {\r\n        require(msg.sender == minterContract, \"CALLER_NOT_MINTER\");\r\n\r\n        shareListings[stakeId].heartsEarned = heartsEarned;\r\n\r\n        emit AddEarnings(stakeId, heartsEarned);\r\n    }\r\n\r\n    function _buyShares(\r\n        uint40 stakeId,\r\n        address shareReceiver,\r\n        uint72 sharesPurchased\r\n    ) private returns (uint72 heartsOwed) {\r\n        require(sharesPurchased != 0, \"INSUFFICIENT_SHARES_PURCHASED\");\r\n\r\n        ShareListing storage listing = shareListings[stakeId];\r\n\r\n        require(\r\n            sharesPurchased <= listing.sharesAvailable,\r\n            \"INSUFFICIENT_SHARES_AVAILABLE\"\r\n        );\r\n\r\n        heartsOwed = uint72(\r\n            FullMath.mulDivRoundingUp(\r\n                sharesPurchased,\r\n                listing.heartsStaked,\r\n                listing.sharesTotal\r\n            )\r\n        );\r\n        require(heartsOwed > 0, \"INSUFFICIENT_HEARTS_INPUT\");\r\n\r\n        listing.sharesAvailable -= sharesPurchased;\r\n        emit SharesUpdate(stakeId, msg.sender, listing.sharesAvailable);\r\n\r\n        listing.shareOwners[shareReceiver] += sharesPurchased;\r\n        listing.supplierHeartsOwed += heartsOwed;\r\n        emit BuyShares(stakeId, shareReceiver, sharesPurchased);\r\n\r\n        return heartsOwed;\r\n    }\r\n\r\n    function multiBuyShares(ShareOrder[] memory orders) external lock {\r\n        uint256 orderCount = orders.length;\r\n        require(orderCount <= 30, \"EXCEEDED_ORDER_LIMIT\");\r\n\r\n        uint256 totalHeartsOwed;\r\n        for (uint256 i = 0; i < orderCount; i++) {\r\n            ShareOrder memory order = orders[i];\r\n            totalHeartsOwed += _buyShares(\r\n                order.stakeId,\r\n                order.shareReceiver,\r\n                order.sharesPurchased\r\n            );\r\n        }\r\n\r\n        hexContract.transferFrom(msg.sender, address(this), totalHeartsOwed);\r\n    }\r\n\r\n    function buyShares(\r\n        uint40 stakeId,\r\n        address shareReceiver,\r\n        uint72 sharesPurchased\r\n    ) external lock {\r\n        uint72 heartsOwed = _buyShares(stakeId, shareReceiver, sharesPurchased);\r\n        hexContract.transferFrom(msg.sender, address(this), heartsOwed);\r\n    }\r\n\r\n    function claimEarnings(uint40 stakeId) external lock {\r\n        ShareListing storage listing = shareListings[stakeId];\r\n        require(listing.heartsEarned != 0, \"SHARES_NOT_MATURE\");\r\n\r\n        uint72 ownedShares = listing.shareOwners[msg.sender];\r\n\r\n        if (msg.sender == listing.supplier) {\r\n            ownedShares += listing.sharesAvailable;\r\n            listing.sharesAvailable = 0;\r\n            emit SharesUpdate(stakeId, msg.sender, 0);\r\n        }\r\n\r\n        uint256 heartsOwed =\r\n            FullMath.mulDiv(\r\n                listing.heartsEarned,\r\n                ownedShares,\r\n                listing.sharesTotal\r\n            );\r\n        require(heartsOwed != 0, \"NO_HEARTS_CLAIMABLE\");\r\n\r\n        listing.shareOwners[msg.sender] = 0;\r\n        hexContract.transfer(msg.sender, heartsOwed);\r\n\r\n        emit ClaimEarnings(stakeId, msg.sender, heartsOwed);\r\n    }\r\n\r\n    function supplierWithdraw(uint40 stakeId) external lock {\r\n        ShareListing storage listing = shareListings[stakeId];\r\n        require(msg.sender == listing.supplier, \"SENDER_NOT_SUPPLIER\");\r\n\r\n        uint72 heartsOwed = listing.supplierHeartsOwed;\r\n        require(heartsOwed != 0, \"NO_HEARTS_OWED\");\r\n\r\n        listing.supplierHeartsOwed = 0;\r\n        hexContract.transfer(msg.sender, heartsOwed);\r\n\r\n        emit SupplierWithdraw(stakeId, msg.sender, heartsOwed);\r\n    }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"_hex\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_minter\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint40\",\"name\":\"stakeId\",\"type\":\"uint40\"},{\"indexed\":false,\"internalType\":\"uint72\",\"name\":\"heartsEarned\",\"type\":\"uint72\"}],\"name\":\"AddEarnings\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint40\",\"name\":\"stakeId\",\"type\":\"uint40\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"supplier\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint72\",\"name\":\"shares\",\"type\":\"uint72\"}],\"name\":\"AddListing\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint40\",\"name\":\"stakeId\",\"type\":\"uint40\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint72\",\"name\":\"sharesPurchased\",\"type\":\"uint72\"}],\"name\":\"BuyShares\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint40\",\"name\":\"stakeId\",\"type\":\"uint40\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"claimer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"heartsClaimed\",\"type\":\"uint256\"}],\"name\":\"ClaimEarnings\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint40\",\"name\":\"stakeId\",\"type\":\"uint40\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"updater\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint72\",\"name\":\"sharesAvailable\",\"type\":\"uint72\"}],\"name\":\"SharesUpdate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint40\",\"name\":\"stakeId\",\"type\":\"uint40\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"supplier\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint72\",\"name\":\"heartsWithdrawn\",\"type\":\"uint72\"}],\"name\":\"SupplierWithdraw\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint40\",\"name\":\"stakeId\",\"type\":\"uint40\"},{\"internalType\":\"address\",\"name\":\"shareReceiver\",\"type\":\"address\"},{\"internalType\":\"uint72\",\"name\":\"sharesPurchased\",\"type\":\"uint72\"}],\"name\":\"buyShares\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint40\",\"name\":\"stakeId\",\"type\":\"uint40\"}],\"name\":\"claimEarnings\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint40\",\"name\":\"stakeId\",\"type\":\"uint40\"},{\"internalType\":\"uint72\",\"name\":\"heartsEarned\",\"type\":\"uint72\"}],\"name\":\"earningsMinted\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"hexContract\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minterContract\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint40\",\"name\":\"stakeId\",\"type\":\"uint40\"},{\"internalType\":\"uint72\",\"name\":\"sharesPurchased\",\"type\":\"uint72\"},{\"internalType\":\"address\",\"name\":\"shareReceiver\",\"type\":\"address\"}],\"internalType\":\"struct ShareMarket.ShareOrder[]\",\"name\":\"orders\",\"type\":\"tuple[]\"}],\"name\":\"multiBuyShares\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint40\",\"name\":\"\",\"type\":\"uint40\"}],\"name\":\"shareListings\",\"outputs\":[{\"internalType\":\"uint72\",\"name\":\"heartsStaked\",\"type\":\"uint72\"},{\"internalType\":\"uint72\",\"name\":\"sharesTotal\",\"type\":\"uint72\"},{\"internalType\":\"uint72\",\"name\":\"sharesAvailable\",\"type\":\"uint72\"},{\"internalType\":\"uint72\",\"name\":\"heartsEarned\",\"type\":\"uint72\"},{\"internalType\":\"uint72\",\"name\":\"supplierHeartsOwed\",\"type\":\"uint72\"},{\"internalType\":\"address\",\"name\":\"supplier\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint40\",\"name\":\"stakeId\",\"type\":\"uint40\"},{\"internalType\":\"address\",\"name\":\"supplier\",\"type\":\"address\"},{\"internalType\":\"uint72\",\"name\":\"stakedHearts\",\"type\":\"uint72\"},{\"internalType\":\"uint72\",\"name\":\"stakeShares\",\"type\":\"uint72\"}],\"name\":\"sharesMinted\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint40\",\"name\":\"stakeId\",\"type\":\"uint40\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"sharesOwned\",\"outputs\":[{\"internalType\":\"uint72\",\"name\":\"shares\",\"type\":\"uint72\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint40\",\"name\":\"stakeId\",\"type\":\"uint40\"}],\"name\":\"supplierWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"ShareMarket","CompilerVersion":"v0.8.3+commit.8d00100c","OptimizationUsed":"1","Runs":"999999","ConstructorArguments":"0000000000000000000000002b591e99afe9f32eaa6214f7b7629768c40eeb39000000000000000000000000db8e9aca04265bd66e7741f9dc7c881afed4325d","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://31cad5ecce35a14cbaaaec64e11217a2e47108bb04b4a6ed69be0152443f4e93"}]}