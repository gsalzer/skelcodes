{"status":"1","message":"OK","result":[{"SourceCode":"/**\r\n *Submitted for verification at Etherscan.io on 2021-04-22\r\n*/\r\n\r\n// SPDX-License-Identifier: MIT\r\n/*\r\nThis is a Stacker.vc FarmTreasury version 1 contract. It deploys a rebase token where it rebases to be equivalent to it's underlying token. 1 stackUSDT = 1 USDT.\r\nThe underlying assets are used to farm on different smart contract and produce yield via the ever-expanding DeFi ecosystem.\r\n\r\nTHANKS! To Lido DAO for the inspiration in more ways than one, but especially for a lot of the code here. \r\nIf you haven't already, stake your ETH for ETH2.0 with Lido.fi!\r\n\r\nAlso thanks for Aragon for hosting our Stacker Ventures DAO, and for more inspiration!\r\n*/\r\n\r\npragma experimental ABIEncoderV2;\r\npragma solidity ^0.6.11;\r\n\r\n/*\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with GSN meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address payable) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes memory) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n/**\r\n * @dev Collection of functions related to the address type\r\n */\r\nlibrary Address {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     *\r\n     * Among others, `isContract` will return false for the following\r\n     * types of addresses:\r\n     *\r\n     *  - an externally-owned account\r\n     *  - a contract in construction\r\n     *  - an address where a contract will be created\r\n     *  - an address where a contract lived, but was destroyed\r\n     * ====\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // This method relies on extcodesize, which returns 0 for contracts in\r\n        // construction, since the code is only stored at the end of the\r\n        // constructor execution.\r\n\r\n        uint256 size;\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly { size := extcodesize(account) }\r\n        return size > 0;\r\n    }\r\n\r\n    /**\r\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * IMPORTANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     */\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\r\n        (bool success, ) = recipient.call{ value: amount }(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n\r\n    /**\r\n     * @dev Performs a Solidity function call using a low level `call`. A\r\n     * plain`call` is an unsafe replacement for a function call: use this\r\n     * function instead.\r\n     *\r\n     * If `target` reverts with a revert reason, it is bubbled up by this\r\n     * function (like regular Solidity function calls).\r\n     *\r\n     * Returns the raw returned data. To convert to the expected return value,\r\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `target` must be a contract.\r\n     * - calling `target` with `data` must not revert.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n      return functionCall(target, data, \"Address: low-level call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\r\n     * `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but also transferring `value` wei to `target`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the calling contract must have an ETH balance of at least `value`.\r\n     * - the called Solidity function must be `payable`.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\r\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\r\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\r\n        require(isContract(target), \"Address: call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\r\n        return _verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\r\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\r\n        require(isContract(target), \"Address: static call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.staticcall(data);\r\n        return _verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\r\n        require(isContract(target), \"Address: delegate call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.delegatecall(data);\r\n        return _verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            // Look for revert reason and bubble it up if present\r\n            if (returndata.length > 0) {\r\n                // The easiest way to bubble the revert reason is using memory via assembly\r\n\r\n                // solhint-disable-next-line no-inline-assembly\r\n                assembly {\r\n                    let returndata_size := mload(returndata)\r\n                    revert(add(32, returndata), returndata_size)\r\n                }\r\n            } else {\r\n                revert(errorMessage);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n/**\r\n * @dev Contract module that helps prevent reentrant calls to a function.\r\n *\r\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\r\n * available, which can be applied to functions to make sure there are no nested\r\n * (reentrant) calls to them.\r\n *\r\n * Note that because there is a single `nonReentrant` guard, functions marked as\r\n * `nonReentrant` may not call one another. This can be worked around by making\r\n * those functions `private`, and then adding `external` `nonReentrant` entry\r\n * points to them.\r\n *\r\n * TIP: If you would like to learn more about reentrancy and alternative ways\r\n * to protect against it, check out our blog post\r\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\r\n */\r\nabstract contract ReentrancyGuard {\r\n    // Booleans are more expensive than uint256 or any type that takes up a full\r\n    // word because each write operation emits an extra SLOAD to first read the\r\n    // slot's contents, replace the bits taken up by the boolean, and then write\r\n    // back. This is the compiler's defense against contract upgrades and\r\n    // pointer aliasing, and it cannot be disabled.\r\n\r\n    // The values being non-zero value makes deployment a bit more expensive,\r\n    // but in exchange the refund on every call to nonReentrant will be lower in\r\n    // amount. Since refunds are capped to a percentage of the total\r\n    // transaction's gas, it is best to keep them low in cases like this one, to\r\n    // increase the likelihood of the full refund coming into effect.\r\n    uint256 private constant _NOT_ENTERED = 1;\r\n    uint256 private constant _ENTERED = 2;\r\n\r\n    uint256 private _status;\r\n\r\n    constructor () internal {\r\n        _status = _NOT_ENTERED;\r\n    }\r\n\r\n    /**\r\n     * @dev Prevents a contract from calling itself, directly or indirectly.\r\n     * Calling a `nonReentrant` function from another `nonReentrant`\r\n     * function is not supported. It is possible to prevent this from happening\r\n     * by making the `nonReentrant` function external, and make it call a\r\n     * `private` function that does the actual work.\r\n     */\r\n    modifier nonReentrant() {\r\n        // On the first call to nonReentrant, _notEntered will be true\r\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\r\n\r\n        // Any calls to nonReentrant after this point will fail\r\n        _status = _ENTERED;\r\n\r\n        _;\r\n\r\n        // By storing the original value once again, a refund is triggered (see\r\n        // https://eips.ethereum.org/EIPS/eip-2200)\r\n        _status = _NOT_ENTERED;\r\n    }\r\n}\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        uint256 c = a + b;\r\n        if (c < a) return (false, 0);\r\n        return (true, c);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        if (b > a) return (false, 0);\r\n        return (true, a - b);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) return (true, 0);\r\n        uint256 c = a * b;\r\n        if (c / a != b) return (false, 0);\r\n        return (true, c);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        if (b == 0) return (false, 0);\r\n        return (true, a / b);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        if (b == 0) return (false, 0);\r\n        return (true, a % b);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b <= a, \"SafeMath: subtraction overflow\");\r\n        return a - b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) return 0;\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers, reverting on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b > 0, \"SafeMath: division by zero\");\r\n        return a / b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * reverting when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b > 0, \"SafeMath: modulo by zero\");\r\n        return a % b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\r\n     * message unnecessarily. For custom revert reasons use {trySub}.\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        return a - b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\r\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        return a / b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * reverting with custom message when dividing by zero.\r\n     *\r\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\r\n     * message unnecessarily. For custom revert reasons use {tryMod}.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n/**\r\n * @title SafeERC20\r\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\r\n * contract returns false). Tokens that return no value (and instead revert or\r\n * throw on failure) are also supported, non-reverting calls are assumed to be\r\n * successful.\r\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\r\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\r\n */\r\nlibrary SafeERC20 {\r\n    using SafeMath for uint256;\r\n    using Address for address;\r\n\r\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\r\n    }\r\n\r\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\r\n    }\r\n\r\n    /**\r\n     * @dev Deprecated. This function has issues similar to the ones found in\r\n     * {IERC20-approve}, and its usage is discouraged.\r\n     *\r\n     * Whenever possible, use {safeIncreaseAllowance} and\r\n     * {safeDecreaseAllowance} instead.\r\n     */\r\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\r\n        // safeApprove should only be called when setting an initial allowance,\r\n        // or when resetting it to zero. To increase and decrease it, use\r\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\r\n        // solhint-disable-next-line max-line-length\r\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\r\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\r\n        );\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\r\n    }\r\n\r\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \"SafeERC20: decreased allowance below zero\");\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    /**\r\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\r\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\r\n     * @param token The token targeted by the call.\r\n     * @param data The call data (encoded using abi.encode or one of its variants).\r\n     */\r\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\r\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\r\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\r\n        // the target address contains contract code and also asserts for success in the low-level call.\r\n\r\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\r\n        if (returndata.length > 0) { // Return data is optional\r\n            // solhint-disable-next-line max-line-length\r\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\r\n        }\r\n    }\r\n}\r\n\r\nabstract contract FarmTokenV1 is IERC20 {\r\n    using SafeMath for uint256;\r\n    using Address for address;\r\n\r\n    // shares are how a users balance is generated. For rebase tokens, balances are always generated at runtime, while shares stay constant.\r\n    // shares is your proportion of the total pool of invested UnderlyingToken\r\n    // shares are like a Compound.finance cToken, while our token balances are like an Aave aToken.\r\n    mapping(address => uint256) private shares;\r\n    mapping(address => mapping (address => uint256)) private allowances;\r\n\r\n    uint256 public totalShares;\r\n\r\n    string public name;\r\n    string public symbol;\r\n    string public underlying;\r\n    address public underlyingContract;\r\n\r\n    uint8 public decimals;\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n\r\n    constructor(string memory _name, uint8 _decimals, address _underlyingContract) public {\r\n        name = string(abi.encodePacked(abi.encodePacked(\"Stacker Ventures \", _name), \" v1\"));\r\n        symbol = string(abi.encodePacked(\"stack\", _name));\r\n        underlying = _name;\r\n\r\n        decimals = _decimals;\r\n\r\n        underlyingContract = _underlyingContract;\r\n    }\r\n\r\n    // 1 stackToken = 1 underlying token\r\n    function totalSupply() external override view returns (uint256){\r\n        return _getTotalUnderlying();\r\n    }\r\n\r\n    function totalUnderlying() external view returns (uint256){\r\n        return _getTotalUnderlying();\r\n    }\r\n\r\n    function balanceOf(address _account) public override view returns (uint256){\r\n        return getUnderlyingForShares(_sharesOf(_account));\r\n    }\r\n\r\n    // transfer tokens, not shares\r\n    function transfer(address _recipient, uint256 _amount) external override returns (bool){\r\n        _verify(msg.sender, _amount);\r\n        _transfer(msg.sender, _recipient, _amount);\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(address _sender, address _recipient, uint256 _amount) external override returns (bool){\r\n        _verify(_sender, _amount);\r\n        uint256 _currentAllowance = allowances[_sender][msg.sender];\r\n        require(_currentAllowance >= _amount, \"FARMTOKENV1: not enough allowance\");\r\n\r\n        _transfer(_sender, _recipient, _amount);\r\n        _approve(_sender, msg.sender, _currentAllowance.sub(_amount));\r\n        return true;\r\n    }\r\n\r\n    // this checks if a transfer/transferFrom/withdraw is allowed. There are some conditions on withdraws/transfers from new deposits\r\n    // function stub, this needs to be implemented in a contract which inherits this for a valid deployment\r\n    // IMPLEMENT THIS\r\n    function _verify(address _account, uint256 _amountUnderlyingToSend) internal virtual;\r\n\r\n    // allow tokens, not shares\r\n    function allowance(address _owner, address _spender) external override view returns (uint256){\r\n        return allowances[_owner][_spender];\r\n    }\r\n\r\n    // approve tokens, not shares\r\n    function approve(address _spender, uint256 _amount) external override returns (bool){\r\n        _approve(msg.sender, _spender, _amount);\r\n        return true;\r\n    }\r\n\r\n    // shares of _account\r\n    function sharesOf(address _account) external view returns (uint256) {\r\n        return _sharesOf(_account);\r\n    }\r\n\r\n    // how many shares for _amount of underlying?\r\n    // if there are no shares, or no underlying yet, we are initing the contract or suffered a total loss\r\n    // either way, init this state at 1:1 shares:underlying\r\n    function getSharesForUnderlying(uint256 _amountUnderlying) public view returns (uint256){\r\n        uint256 _totalUnderlying = _getTotalUnderlying();\r\n        if (_totalUnderlying == 0){\r\n            return _amountUnderlying; // this will init at 1:1 _underlying:_shares\r\n        }\r\n        uint256 _totalShares = totalShares;\r\n        if (_totalShares == 0){\r\n            return _amountUnderlying; // this will init the first shares, expected contract underlying balance == 0, or there will be a bonus (doesn't belong to anyone so ok)\r\n        }\r\n\r\n        return _amountUnderlying.mul(_totalShares).div(_totalUnderlying);\r\n    }\r\n\r\n    // how many underlying for _amount of shares?\r\n    // if there are no shares, or no underlying yet, we are initing the contract or suffered a total loss\r\n    // either way, init this state at 1:1 shares:underlying\r\n    function getUnderlyingForShares(uint256 _amountShares) public view returns (uint256){\r\n        uint256 _totalShares = totalShares;\r\n        if (_totalShares == 0){\r\n            return _amountShares; // this will init at 1:1 _shares:_underlying\r\n        }\r\n        uint256 _totalUnderlying = _getTotalUnderlying();\r\n        if (_totalUnderlying == 0){\r\n            return _amountShares; // this will init at 1:1 \r\n        }\r\n\r\n        return _amountShares.mul(_totalUnderlying).div(_totalShares);\r\n\r\n    }\r\n\r\n    function _sharesOf(address _account) internal view returns (uint256){\r\n        return shares[_account];\r\n    }\r\n\r\n    // function stub, this needs to be implemented in a contract which inherits this for a valid deployment\r\n    // sum the contract balance + working balance withdrawn from the contract and actively farming\r\n    // IMPLEMENT THIS\r\n    function _getTotalUnderlying() internal virtual view returns (uint256);\r\n\r\n    // in underlying\r\n    function _transfer(address _sender, address _recipient, uint256 _amount) internal {\r\n        uint256 _sharesToTransfer = getSharesForUnderlying(_amount);\r\n        _transferShares(_sender, _recipient, _sharesToTransfer);\r\n        emit Transfer(_sender, _recipient, _amount);\r\n    }\r\n\r\n    // in underlying\r\n    function _approve(address _owner, address _spender, uint256 _amount) internal {\r\n        require(_owner != address(0), \"FARMTOKENV1: from == 0x0\");\r\n        require(_spender != address(0), \"FARMTOKENV1: to == 0x00\");\r\n\r\n        allowances[_owner][_spender] = _amount;\r\n        emit Approval(_owner, _spender, _amount);\r\n    }\r\n\r\n    function _transferShares(address _sender, address _recipient,  uint256 _amountShares) internal {\r\n        require(_sender != address(0), \"FARMTOKENV1: from == 0x00\");\r\n        require(_recipient != address(0), \"FARMTOKENV1: to == 0x00\");\r\n\r\n        uint256 _currentSenderShares = shares[_sender];\r\n        require(_amountShares <= _currentSenderShares, \"FARMTOKENV1: transfer amount exceeds balance\");\r\n\r\n        shares[_sender] = _currentSenderShares.sub(_amountShares);\r\n        shares[_recipient] = shares[_recipient].add(_amountShares);\r\n    }\r\n\r\n    function _mintShares(address _recipient, uint256 _amountShares) internal {\r\n        require(_recipient != address(0), \"FARMTOKENV1: to == 0x00\");\r\n\r\n        totalShares = totalShares.add(_amountShares);\r\n        shares[_recipient] = shares[_recipient].add(_amountShares);\r\n\r\n        // NOTE: we're not emitting a Transfer event from the zero address here\r\n        // If we mint shares with no underlying, we basically just diluted everyone\r\n\r\n        // It's not possible to send events from _everyone_ to reflect each balance dilution (ie: balance going down)\r\n\r\n        // Not compliant to ERC20 standard...\r\n    }\r\n\r\n    function _burnShares(address _account, uint256 _amountShares) internal {\r\n        require(_account != address(0), \"FARMTOKENV1: burn from == 0x00\");\r\n\r\n        uint256 _accountShares = shares[_account];\r\n        require(_amountShares <= _accountShares, \"FARMTOKENV1: burn amount exceeds balance\");\r\n        totalShares = totalShares.sub(_amountShares);\r\n\r\n        shares[_account] = _accountShares.sub(_amountShares);\r\n\r\n        // NOTE: we're not emitting a Transfer event to the zero address here \r\n        // If we burn shares without burning/withdrawing the underlying\r\n        // then it looks like a system wide credit to everyones balance\r\n\r\n        // It's not possible to send events to _everyone_ to reflect each balance credit (ie: balance going up)\r\n\r\n        // Not compliant to ERC20 standard...\r\n    }\r\n}\r\n\r\ncontract FarmTreasuryV1 is ReentrancyGuard, FarmTokenV1 {\r\n    using SafeERC20 for IERC20;\r\n    using SafeMath for uint256;\r\n    using Address for address;\r\n\r\n    mapping(address => DepositInfo) public userDeposits;\r\n    mapping(address => bool) public noLockWhitelist;\r\n\r\n    struct DepositInfo {\r\n        uint256 amountUnderlyingLocked;\r\n        uint256 timestampDeposit;\r\n        uint256 timestampUnlocked;\r\n    }\r\n\r\n    uint256 internal constant LOOP_LIMIT = 200;\r\n\r\n    address payable public governance;\r\n    address payable public farmBoss;\r\n\r\n    bool public paused = false;\r\n    bool public pausedDeposits = false;\r\n\r\n    // fee schedule, can be changed by governance, in bips\r\n    // performance fee is on any gains, base fee is on AUM/yearly\r\n    uint256 public constant max = 10000;\r\n    uint256 public performanceToTreasury = 1000;\r\n    uint256 public performanceToFarmer = 1000;\r\n    uint256 public baseToTreasury = 100;\r\n    uint256 public baseToFarmer = 100;\r\n\r\n    // limits on rebalancing from the farmer, trying to negate errant rebalances\r\n    uint256 public rebalanceUpLimit = 100; // maximum of a 1% gain per rebalance\r\n    uint256 public rebalanceUpWaitTime = 23 hours;\r\n    uint256 public lastRebalanceUpTime;\r\n\r\n    // waiting period on withdraws from time of deposit\r\n    // locked amount linearly decreases until the time is up, so at waitPeriod/2 after deposit, you can withdraw depositAmt/2 funds.\r\n    uint256 public waitPeriod = 1 weeks;\r\n\r\n    // hot wallet holdings for instant withdraw, in bips\r\n    // if the hot wallet balance expires, the users will need to wait for the next rebalance period in order to withdraw\r\n    uint256 public hotWalletHoldings = 1000; // 10% initially\r\n\r\n    uint256 public ACTIVELY_FARMED;\r\n\r\n    event RebalanceHot(uint256 amountIn, uint256 amountToFarmer, uint256 timestamp);\r\n    event ProfitDeclared(bool profit, uint256 amount, uint256 timestamp, uint256 totalAmountInPool, uint256 totalSharesInPool, uint256 performanceFeeTotal, uint256 baseFeeTotal);\r\n    event Deposit(address depositor, uint256 amount, address referral);\r\n    event Withdraw(address withdrawer, uint256 amount);\r\n\r\n    constructor(string memory _nameUnderlying, uint8 _decimalsUnderlying, address _underlying) public FarmTokenV1(_nameUnderlying, _decimalsUnderlying, _underlying) {\r\n        governance = msg.sender;\r\n        lastRebalanceUpTime = block.timestamp;\r\n    }\r\n\r\n    function setGovernance(address payable _new) external {\r\n        require(msg.sender == governance, \"FARMTREASURYV1: !governance\");\r\n        governance = _new;\r\n    }\r\n\r\n    // the \"farmBoss\" is a trusted smart contract that functions kind of like an EOA.\r\n    // HOWEVER specific contract addresses need to be whitelisted in order for this contract to be allowed to interact w/ them\r\n    // the governance has full control over the farmBoss, and other addresses can have partial control for strategy rotation/rebalancing\r\n    function setFarmBoss(address payable _new) external {\r\n        require(msg.sender == governance, \"FARMTREASURYV1: !governance\");\r\n        farmBoss = _new;\r\n    }\r\n\r\n    function setNoLockWhitelist(address[] calldata _accounts, bool[] calldata _noLock) external {\r\n        require(msg.sender == governance, \"FARMTREASURYV1: !governance\");\r\n        require(_accounts.length == _noLock.length && _accounts.length <= LOOP_LIMIT, \"FARMTREASURYV1: check array lengths\");\r\n\r\n        for (uint256 i = 0; i < _accounts.length; i++){\r\n            noLockWhitelist[_accounts[i]] = _noLock[i];\r\n        }\r\n    }\r\n\r\n    function pause() external {\r\n        require(msg.sender == governance, \"FARMTREASURYV1: !governance\");\r\n        paused = true;\r\n    }\r\n\r\n    function unpause() external {\r\n        require(msg.sender == governance, \"FARMTREASURYV1: !governance\");\r\n        paused = false;\r\n    }\r\n\r\n    function pauseDeposits() external {\r\n        require(msg.sender == governance, \"FARMTREASURYV1: !governance\");\r\n        pausedDeposits = true;\r\n    }\r\n\r\n    function unpauseDeposits() external {\r\n        require(msg.sender == governance, \"FARMTREASURYV1: !governance\");\r\n        pausedDeposits = false;\r\n    }\r\n\r\n    function setFeeDistribution(uint256 _performanceToTreasury, uint256 _performanceToFarmer, uint256 _baseToTreasury, uint256 _baseToFarmer) external {\r\n        require(msg.sender == governance, \"FARMTREASURYV1: !governance\");\r\n        require(_performanceToTreasury.add(_performanceToFarmer) < max, \"FARMTREASURYV1: too high performance\");\r\n        require(_baseToTreasury.add(_baseToFarmer) <= 500, \"FARMTREASURYV1: too high base\");\r\n        \r\n        performanceToTreasury = _performanceToTreasury;\r\n        performanceToFarmer = _performanceToFarmer;\r\n        baseToTreasury = _baseToTreasury;\r\n        baseToFarmer = _baseToFarmer;\r\n    }\r\n\r\n    function setWaitPeriod(uint256 _new) external {\r\n        require(msg.sender == governance, \"FARMTREASURYV1: !governance\");\r\n        require(_new <= 10 weeks, \"FARMTREASURYV1: too long wait\");\r\n\r\n        waitPeriod = _new;\r\n    }\r\n\r\n    function setHotWalletHoldings(uint256 _new) external {\r\n        require(msg.sender == governance, \"FARMTREASURYV1: !governance\");\r\n        require(_new <= max && _new >= 100, \"FARMTREASURYV1: hot wallet values bad\");\r\n\r\n        hotWalletHoldings = _new;\r\n    }\r\n\r\n    function setRebalanceUpLimit(uint256 _new) external {\r\n        require(msg.sender == governance, \"FARMTREASURYV1: !governance\");\r\n        require(_new < max, \"FARMTREASURYV1: >= max\");\r\n\r\n        rebalanceUpLimit = _new;\r\n    }\r\n\r\n    function setRebalanceUpWaitTime(uint256 _new) external {\r\n        require(msg.sender == governance, \"FARMTREASURYV1: !governance\");\r\n        require(_new <= 1 weeks, \"FARMTREASURYV1: > 1 week\");\r\n\r\n        rebalanceUpWaitTime = _new;\r\n    }\r\n\r\n    function deposit(uint256 _amountUnderlying, address _referral) external nonReentrant {\r\n        require(_amountUnderlying > 0, \"FARMTREASURYV1: amount == 0\");\r\n        require(!paused && !pausedDeposits, \"FARMTREASURYV1: paused\");\r\n\r\n        _deposit(_amountUnderlying, _referral);\r\n\r\n        IERC20 _underlying = IERC20(underlyingContract);\r\n        uint256 _before = _underlying.balanceOf(address(this));\r\n        _underlying.safeTransferFrom(msg.sender, address(this), _amountUnderlying);\r\n        uint256 _after = _underlying.balanceOf(address(this));\r\n        uint256 _total = _after.sub(_before);\r\n        require(_total >= _amountUnderlying, \"FARMTREASURYV1: bad transfer\");\r\n    }\r\n\r\n    function _deposit(uint256 _amountUnderlying, address _referral) internal {\r\n        // determine how many shares this will be\r\n        uint256 _sharesToMint = getSharesForUnderlying(_amountUnderlying);\r\n\r\n        _mintShares(msg.sender, _sharesToMint);\r\n        // store some important info for this deposit, that will be checked on withdraw/transfer of tokens\r\n        _storeDepositInfo(msg.sender, _amountUnderlying);\r\n\r\n        // emit deposit w/ referral event... can't refer yourself\r\n        if (_referral != msg.sender){\r\n            emit Deposit(msg.sender, _amountUnderlying, _referral);\r\n        }\r\n        else {\r\n            emit Deposit(msg.sender, _amountUnderlying, address(0));\r\n        }\r\n\r\n        emit Transfer(address(0), msg.sender, _amountUnderlying);\r\n    }\r\n\r\n    function _storeDepositInfo(address _account, uint256 _amountUnderlying) internal {\r\n\r\n        DepositInfo memory _existingInfo = userDeposits[_account];\r\n\r\n        // first deposit, make a new entry in the mapping, lock all funds for \"waitPeriod\"\r\n        if (_existingInfo.timestampDeposit == 0){\r\n            DepositInfo memory _info = DepositInfo(\r\n                {\r\n                    amountUnderlyingLocked: _amountUnderlying, \r\n                    timestampDeposit: block.timestamp, \r\n                    timestampUnlocked: block.timestamp.add(waitPeriod)\r\n                }\r\n            );\r\n            userDeposits[_account] = _info;\r\n        }\r\n        // not the first deposit, if there are still funds locked, then average out the waits (ie: 1 BTC locked 10 days = 2 BTC locked 5 days)\r\n        else {\r\n            uint256 _lockedAmt = _getLockedAmount(_account, _existingInfo.amountUnderlyingLocked, _existingInfo.timestampDeposit, _existingInfo.timestampUnlocked);\r\n            // if there's no lock, disregard old info and make a new lock\r\n\r\n            if (_lockedAmt == 0){\r\n                DepositInfo memory _info = DepositInfo(\r\n                    {\r\n                        amountUnderlyingLocked: _amountUnderlying, \r\n                        timestampDeposit: block.timestamp, \r\n                        timestampUnlocked: block.timestamp.add(waitPeriod)\r\n                    }\r\n                );\r\n                userDeposits[_account] = _info;\r\n            }\r\n            // funds are still locked from a past deposit, average out the waittime remaining with the waittime for this new deposit\r\n            /*\r\n                solve this equation:\r\n\r\n                newDepositAmt * waitPeriod + remainingAmt * existingWaitPeriod = (newDepositAmt + remainingAmt) * X waitPeriod\r\n\r\n                therefore:\r\n\r\n                                (newDepositAmt * waitPeriod + remainingAmt * existingWaitPeriod)\r\n                X waitPeriod =  ----------------------------------------------------------------\r\n                                                (newDepositAmt + remainingAmt)\r\n\r\n                Example: 7 BTC new deposit, with wait period of 2 weeks\r\n                         1 BTC remaining, with remaining wait period of 1 week\r\n                         ...\r\n                         (7 BTC * 2 weeks + 1 BTC * 1 week) / 8 BTC = 1.875 weeks\r\n            */\r\n            else {\r\n                uint256 _lockedAmtTime = _lockedAmt.mul(_existingInfo.timestampUnlocked.sub(block.timestamp));\r\n                uint256 _newAmtTime = _amountUnderlying.mul(waitPeriod);\r\n                uint256 _total = _amountUnderlying.add(_lockedAmt);\r\n\r\n                uint256 _newLockedTime = (_lockedAmtTime.add(_newAmtTime)).div(_total);\r\n\r\n                DepositInfo memory _info = DepositInfo(\r\n                    {\r\n                        amountUnderlyingLocked: _total, \r\n                        timestampDeposit: block.timestamp, \r\n                        timestampUnlocked: block.timestamp.add(_newLockedTime)\r\n                    }\r\n                );\r\n                userDeposits[_account] = _info;\r\n            }\r\n        }\r\n    }\r\n\r\n    function getLockedAmount(address _account) public view returns (uint256) {\r\n        DepositInfo memory _existingInfo = userDeposits[_account];\r\n        return _getLockedAmount(_account, _existingInfo.amountUnderlyingLocked, _existingInfo.timestampDeposit, _existingInfo.timestampUnlocked);\r\n    }\r\n\r\n    // the locked amount linearly decreases until the timestampUnlocked time, then it's zero\r\n    // Example: if 5 BTC contributed (2 week lock), then after 1 week there will be 2.5 BTC locked, the rest is free to transfer/withdraw\r\n    function _getLockedAmount(address _account, uint256 _amountLocked, uint256 _timestampDeposit, uint256 _timestampUnlocked) internal view returns (uint256) {\r\n        if (_timestampUnlocked <= block.timestamp || noLockWhitelist[_account]){\r\n            return 0;\r\n        }\r\n        else {\r\n            uint256 _remainingTime = _timestampUnlocked.sub(block.timestamp);\r\n            uint256 _totalTime = _timestampUnlocked.sub(_timestampDeposit);\r\n\r\n            return _amountLocked.mul(_remainingTime).div(_totalTime);\r\n        }\r\n    }\r\n\r\n    function withdraw(uint256 _amountUnderlying) external nonReentrant {\r\n        require(_amountUnderlying > 0, \"FARMTREASURYV1: amount == 0\");\r\n        require(!paused, \"FARMTREASURYV1: paused\");\r\n\r\n        _withdraw(_amountUnderlying);\r\n\r\n        IERC20(underlyingContract).safeTransfer(msg.sender, _amountUnderlying);\r\n    }\r\n\r\n    function _withdraw(uint256 _amountUnderlying) internal {\r\n        _verify(msg.sender, _amountUnderlying);\r\n        // try and catch the more obvious error of hot wallet being depleted, otherwise proceed\r\n        if (IERC20(underlyingContract).balanceOf(address(this)) < _amountUnderlying){\r\n            revert(\"FARMTREASURYV1: Hot wallet balance depleted. Please try smaller withdraw or wait for rebalancing.\");\r\n        }\r\n\r\n        uint256 _sharesToBurn = getSharesForUnderlying(_amountUnderlying);\r\n        _burnShares(msg.sender, _sharesToBurn); // they must have >= _sharesToBurn, checked here\r\n\r\n        emit Transfer(msg.sender, address(0), _amountUnderlying);\r\n        emit Withdraw(msg.sender, _amountUnderlying);\r\n    }\r\n\r\n    // wait time verification\r\n    function _verify(address _account, uint256 _amountUnderlyingToSend) internal override {\r\n        DepositInfo memory _existingInfo = userDeposits[_account];\r\n\r\n        uint256 _lockedAmt = _getLockedAmount(_account, _existingInfo.amountUnderlyingLocked, _existingInfo.timestampDeposit, _existingInfo.timestampUnlocked);\r\n        uint256 _balance = balanceOf(_account);\r\n\r\n        // require that any funds locked are not leaving the account in question.\r\n        require(_balance.sub(_amountUnderlyingToSend) >= _lockedAmt, \"FARMTREASURYV1: requested funds are temporarily locked\");\r\n    }\r\n\r\n    // this means that we made a GAIN, due to standard farming gains\r\n    // operaratable by farmBoss, this is standard operating procedure, farmers can only report gains\r\n    function rebalanceUp(uint256 _amount, address _farmerRewards) external nonReentrant returns (bool, uint256) {\r\n        require(msg.sender == farmBoss, \"FARMTREASURYV1: !farmBoss\");\r\n        require(!paused, \"FARMTREASURYV1: paused\");\r\n\r\n        // fee logic & profit recording\r\n        // check farmer limits on rebalance wait time for earning reportings. if there is no _amount reported, we don't take any fees and skip these checks\r\n        // we should always allow pure hot wallet rebalances, however earnings needs some checks and restrictions\r\n        if (_amount > 0){\r\n            require(block.timestamp.sub(lastRebalanceUpTime) >= rebalanceUpWaitTime, \"FARMTREASURYV1: <rebalanceUpWaitTime\");\r\n            require(ACTIVELY_FARMED.mul(rebalanceUpLimit).div(max) >= _amount, \"FARMTREASURYV1 _amount > rebalanceUpLimit\");\r\n            // farmer incurred a gain of _amount, add this to the amount being farmed\r\n            ACTIVELY_FARMED = ACTIVELY_FARMED.add(_amount);\r\n            uint256 _totalPerformance = _performanceFee(_amount, _farmerRewards);\r\n            uint256 _totalAnnual = _annualFee(_farmerRewards);\r\n\r\n            // for farmer controls, and also for the annual fee time\r\n            // only update this if there is a reported gain, otherwise this is just a hot wallet rebalance, and we should always allow these\r\n            lastRebalanceUpTime = block.timestamp; \r\n\r\n            // for off-chain APY calculations, fees assessed\r\n            emit ProfitDeclared(true, _amount, block.timestamp, _getTotalUnderlying(), totalShares, _totalPerformance, _totalAnnual);\r\n        }\r\n        else {\r\n            // for off-chain APY calculations, no fees assessed\r\n            emit ProfitDeclared(true, _amount, block.timestamp, _getTotalUnderlying(), totalShares, 0, 0);\r\n        }\r\n        // end fee logic & profit recording\r\n\r\n        // funds are in the contract and gains are accounted for, now determine if we need to further rebalance the hot wallet up, or can take funds in order to farm\r\n        // start hot wallet and farmBoss rebalance logic\r\n        (bool _fundsNeeded, uint256 _amountChange) = _calcHotWallet();\r\n        _rebalanceHot(_fundsNeeded, _amountChange); // if the hot wallet rebalance fails, revert() the entire function\r\n        // end logic\r\n\r\n        return (_fundsNeeded, _amountChange); // in case we need them, FE simulations and such\r\n    }\r\n\r\n    // this means that the system took a loss, and it needs to be reflected in the next rebalance\r\n    // only operatable by governance, (large) losses should be extremely rare by good farming practices\r\n    // this would look like a farmed smart contract getting exploited/hacked, and us not having the necessary insurance for it\r\n    // possible that some more aggressive IL strategies could also need this function called\r\n    function rebalanceDown(uint256 _amount, bool _rebalanceHotWallet) external nonReentrant returns (bool, uint256) {\r\n        require(msg.sender == governance, \"FARMTREASURYV1: !governance\");\r\n        // require(!paused, \"FARMTREASURYV1: paused\"); <-- governance can only call this anyways, leave this commented out\r\n\r\n        ACTIVELY_FARMED = ACTIVELY_FARMED.sub(_amount);\r\n\r\n        if (_rebalanceHotWallet){\r\n            (bool _fundsNeeded, uint256 _amountChange) = _calcHotWallet();\r\n            _rebalanceHot(_fundsNeeded, _amountChange); // if the hot wallet rebalance fails, revert() the entire function\r\n\r\n            return (_fundsNeeded, _amountChange); // in case we need them, FE simulations and such\r\n        }\r\n\r\n        // for off-chain APY calculations, no fees assessed\r\n        emit ProfitDeclared(false, _amount, block.timestamp, _getTotalUnderlying(), totalShares, 0, 0);\r\n\r\n        return (false, 0);\r\n    }\r\n\r\n    function _performanceFee(uint256 _amount, address _farmerRewards) internal returns (uint256){\r\n\r\n        uint256 _existingShares = totalShares;\r\n        uint256 _balance = _getTotalUnderlying();\r\n\r\n        uint256 _performanceToFarmerUnderlying = _amount.mul(performanceToFarmer).div(max);\r\n        uint256 _performanceToTreasuryUnderlying = _amount.mul(performanceToTreasury).div(max);\r\n        uint256 _performanceTotalUnderlying = _performanceToFarmerUnderlying.add(_performanceToTreasuryUnderlying);\r\n\r\n        if (_performanceTotalUnderlying == 0){\r\n            return 0;\r\n        }\r\n\r\n        uint256 _sharesToMint = _underlyingFeeToShares(_performanceTotalUnderlying, _balance, _existingShares);\r\n\r\n        uint256 _sharesToFarmer = _sharesToMint.mul(_performanceToFarmerUnderlying).div(_performanceTotalUnderlying); // by the same ratio\r\n        uint256 _sharesToTreasury = _sharesToMint.sub(_sharesToFarmer);\r\n\r\n        _mintShares(_farmerRewards, _sharesToFarmer);\r\n        _mintShares(governance, _sharesToTreasury);\r\n\r\n        uint256 _underlyingFarmer = getUnderlyingForShares(_sharesToFarmer);\r\n        uint256 _underlyingTreasury = getUnderlyingForShares(_sharesToTreasury);\r\n\r\n        // do two mint events, in underlying, not shares\r\n        emit Transfer(address(0), _farmerRewards, _underlyingFarmer);\r\n        emit Transfer(address(0), governance, _underlyingTreasury);\r\n\r\n        return _underlyingFarmer.add(_underlyingTreasury);\r\n    }\r\n\r\n    // we are taking baseToTreasury + baseToFarmer each year, every time this is called, look when we took fee last, and linearize the fee to now();\r\n    function _annualFee(address _farmerRewards) internal returns (uint256) {\r\n        uint256 _lastAnnualFeeTime = lastRebalanceUpTime;\r\n        if (_lastAnnualFeeTime >= block.timestamp){\r\n            return 0;\r\n        }\r\n\r\n        uint256 _elapsedTime = block.timestamp.sub(_lastAnnualFeeTime);\r\n        uint256 _existingShares = totalShares;\r\n        uint256 _balance = _getTotalUnderlying();\r\n\r\n        uint256 _annualPossibleUnderlying = _balance.mul(_elapsedTime).div(365 days);\r\n        uint256 _annualToFarmerUnderlying = _annualPossibleUnderlying.mul(baseToFarmer).div(max);\r\n        uint256 _annualToTreasuryUnderlying = _annualPossibleUnderlying.mul(baseToFarmer).div(max);\r\n        uint256 _annualTotalUnderlying = _annualToFarmerUnderlying.add(_annualToTreasuryUnderlying);\r\n\r\n        if (_annualTotalUnderlying == 0){\r\n            return 0;\r\n        }\r\n\r\n        uint256 _sharesToMint = _underlyingFeeToShares(_annualTotalUnderlying, _balance, _existingShares);\r\n\r\n        uint256 _sharesToFarmer = _sharesToMint.mul(_annualToFarmerUnderlying).div(_annualTotalUnderlying); // by the same ratio\r\n        uint256 _sharesToTreasury = _sharesToMint.sub(_sharesToFarmer);\r\n\r\n        _mintShares(_farmerRewards, _sharesToFarmer);\r\n        _mintShares(governance, _sharesToTreasury);\r\n\r\n        uint256 _underlyingFarmer = getUnderlyingForShares(_sharesToFarmer);\r\n        uint256 _underlyingTreasury = getUnderlyingForShares(_sharesToTreasury);\r\n\r\n        // do two mint events, in underlying, not shares\r\n        emit Transfer(address(0), _farmerRewards, _underlyingFarmer);\r\n        emit Transfer(address(0), governance, _underlyingTreasury);\r\n\r\n        return _underlyingFarmer.add(_underlyingTreasury);\r\n    }\r\n\r\n    function _underlyingFeeToShares(uint256 _totalFeeUnderlying, uint256 _balance, uint256 _existingShares) pure internal returns (uint256 _sharesToMint){\r\n        // to mint the required amount of fee shares, solve:\r\n        /* \r\n            ratio:\r\n\r\n                    currentShares             newShares     \r\n            -------------------------- : --------------------, where newShares = (currentShares + mintShares)\r\n            (totalUnderlying - feeAmt)      totalUnderlying\r\n\r\n            solved:\r\n            ---> (currentShares / (totalUnderlying - feeAmt) * totalUnderlying) - currentShares = mintShares, where newBalanceLessFee = (totalUnderlying - feeAmt)\r\n        */\r\n        return _existingShares\r\n                .mul(_balance)\r\n                .div(_balance.sub(_totalFeeUnderlying))\r\n                .sub(_existingShares);\r\n    }\r\n\r\n    function _calcHotWallet() internal view returns (bool _fundsNeeded, uint256 _amountChange) {\r\n        uint256 _balanceHere = IERC20(underlyingContract).balanceOf(address(this));\r\n        uint256 _balanceFarmed = ACTIVELY_FARMED;\r\n\r\n        uint256 _totalAmount = _balanceHere.add(_balanceFarmed);\r\n        uint256 _hotAmount = _totalAmount.mul(hotWalletHoldings).div(max);\r\n\r\n        // we have too much in hot wallet, send to farmBoss\r\n        if (_balanceHere >= _hotAmount){\r\n            return (false, _balanceHere.sub(_hotAmount));\r\n        }\r\n        // we have too little in hot wallet, pull from farmBoss\r\n        if (_balanceHere < _hotAmount){\r\n            return (true, _hotAmount.sub(_balanceHere));\r\n        }\r\n    }\r\n\r\n    // usually paired with _calcHotWallet()\r\n    function _rebalanceHot(bool _fundsNeeded, uint256 _amountChange) internal {\r\n        if (_fundsNeeded){\r\n            uint256 _before = IERC20(underlyingContract).balanceOf(address(this));\r\n            IERC20(underlyingContract).safeTransferFrom(farmBoss, address(this), _amountChange);\r\n            uint256 _after = IERC20(underlyingContract).balanceOf(address(this));\r\n            uint256 _total = _after.sub(_before);\r\n\r\n            require(_total >= _amountChange, \"FARMTREASURYV1: bad rebalance, hot wallet needs funds!\");\r\n\r\n            // we took funds from the farmBoss to refill the hot wallet, reflect this in ACTIVELY_FARMED\r\n            ACTIVELY_FARMED = ACTIVELY_FARMED.sub(_amountChange);\r\n\r\n            emit RebalanceHot(_amountChange, 0, block.timestamp);\r\n        }\r\n        else {\r\n            require(farmBoss != address(0), \"FARMTREASURYV1: !FarmBoss\"); // don't burn funds\r\n\r\n            IERC20(underlyingContract).safeTransfer(farmBoss, _amountChange); // _calcHotWallet() guarantees we have funds here to send\r\n\r\n            // we sent more funds for the farmer to farm, reflect this\r\n            ACTIVELY_FARMED = ACTIVELY_FARMED.add(_amountChange);\r\n\r\n            emit RebalanceHot(0, _amountChange, block.timestamp);\r\n        }\r\n    }\r\n\r\n    function _getTotalUnderlying() internal override view returns (uint256) {\r\n        uint256 _balanceHere = IERC20(underlyingContract).balanceOf(address(this));\r\n        uint256 _balanceFarmed = ACTIVELY_FARMED;\r\n\r\n        return _balanceHere.add(_balanceFarmed);\r\n    }\r\n\r\n    function rescue(address _token, uint256 _amount) external nonReentrant {\r\n        require(msg.sender == governance, \"FARMTREASURYV1: !governance\");\r\n\r\n        if (_token != address(0)){\r\n            IERC20(_token).safeTransfer(governance, _amount);\r\n        }\r\n        else { // if _tokenContract is 0x0, then escape ETH\r\n            governance.transfer(_amount);\r\n        }\r\n    }\r\n}\r\n\r\ninterface IUniswapRouterV2 {\r\n    function swapExactTokensForTokens(uint256 amountIn, uint256 amountOutMin, address[] calldata path, address to, uint256 deadline) external returns (uint[] memory amounts);\r\n}\r\n\r\nabstract contract FarmBossV1 {\r\n    using SafeERC20 for IERC20;\r\n    using SafeMath for uint256;\r\n    using Address for address;\r\n\r\n    mapping(address => mapping(bytes4 => uint256)) public whitelist; // contracts -> mapping (functionSig -> allowed, msg.value allowed)\r\n    mapping(address => bool) public farmers;\r\n\r\n    // constants for the whitelist logic\r\n    bytes4 constant internal FALLBACK_FN_SIG = 0xffffffff;\r\n    // 0 = not allowed ... 1 = allowed however value must be zero ... 2 = allowed with msg.value either zero or non-zero\r\n    uint256 constant internal NOT_ALLOWED = 0;\r\n    uint256 constant internal ALLOWED_NO_MSG_VALUE = 1;\r\n    uint256 constant internal ALLOWED_W_MSG_VALUE = 2; \r\n\r\n    uint256 internal constant LOOP_LIMIT = 200;\r\n    uint256 public constant max = 10000;\r\n    uint256 public CRVTokenTake = 1500; // pct of max\r\n\r\n    // for passing to functions more cleanly\r\n    struct WhitelistData {\r\n        address account;\r\n        bytes4 fnSig;\r\n        bool valueAllowed;\r\n    }\r\n\r\n    // for passing to functions more cleanly\r\n    struct Approves {\r\n        address token;\r\n        address allow;\r\n    }\r\n\r\n    address payable public governance;\r\n    address public daoCouncilMultisig;\r\n    address public treasury;\r\n    address public underlying;\r\n\r\n    // constant - if the addresses change, assume that the functions will be different too and this will need a rewrite\r\n    address public constant UniswapRouter = 0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D; \r\n    address public constant SushiswapRouter = 0xd9e1cE17f2641f24aE83637ab66a2cca9C378B9F;\r\n    address public constant WETH = 0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2;\r\n    address public constant CRVToken = 0xD533a949740bb3306d119CC777fa900bA034cd52;\r\n\r\n    event NewFarmer(address _farmer);\r\n    event RmFarmer(address _farmer);\r\n\r\n    event NewWhitelist(address _contract, bytes4 _fnSig, uint256 _allowedType);\r\n    event RmWhitelist(address _contract, bytes4 _fnSig);\r\n\r\n    event NewApproval(address _token, address _contract);\r\n    event RmApproval(address _token, address _contract);\r\n\r\n    event ExecuteSuccess(bytes _returnData);\r\n    event ExecuteERROR(bytes _returnData);\r\n\r\n    constructor(address payable _governance, address _daoMultisig, address _treasury, address _underlying) public {\r\n        governance = _governance;\r\n        daoCouncilMultisig = _daoMultisig;\r\n        treasury = _treasury;\r\n        underlying = _underlying;\r\n\r\n        farmers[msg.sender] = true;\r\n        emit NewFarmer(msg.sender);\r\n        \r\n        // no need to set to zero first on safeApprove, is brand new contract\r\n        IERC20(_underlying).safeApprove(_treasury, type(uint256).max); // treasury has full control over underlying in this contract\r\n\r\n        _initFirstFarms();\r\n    }\r\n\r\n    receive() payable external {}\r\n\r\n    // function stub, this needs to be implemented in a contract which inherits this for a valid deployment\r\n    // some fixed logic to set up the first farmers, farms, whitelists, approvals, etc. future farms will need to be approved by governance\r\n    // called on init only\r\n    // IMPLEMENT THIS\r\n    function _initFirstFarms() internal virtual;\r\n\r\n    function setGovernance(address payable _new) external {\r\n        require(msg.sender == governance, \"FARMBOSSV1: !governance\");\r\n\r\n        governance = _new;\r\n    }\r\n\r\n    function setDaoCouncilMultisig(address _new) external {\r\n        require(msg.sender == governance || msg.sender == daoCouncilMultisig, \"FARMBOSSV1: !(governance || multisig)\");\r\n\r\n        daoCouncilMultisig = _new;\r\n    }\r\n\r\n    function setCRVTokenTake(uint256 _new) external {\r\n        require(msg.sender == governance || msg.sender == daoCouncilMultisig, \"FARMBOSSV1: !(governance || multisig)\");\r\n        require(_new <= max.div(2), \"FARMBOSSV1: >half CRV to take\");\r\n\r\n        CRVTokenTake = _new;\r\n    }\r\n\r\n    function getWhitelist(address _contract, bytes4 _fnSig) external view returns (uint256){\r\n        return whitelist[_contract][_fnSig];\r\n    }\r\n\r\n    function changeFarmers(address[] calldata _newFarmers, address[] calldata _rmFarmers) external {\r\n        require(msg.sender == governance, \"FARMBOSSV1: !governance\");\r\n        require(_newFarmers.length.add(_rmFarmers.length) <= LOOP_LIMIT, \"FARMBOSSV1: >LOOP_LIMIT\"); // dont allow unbounded loops\r\n\r\n        // add the new farmers in\r\n        for (uint256 i = 0; i < _newFarmers.length; i++){\r\n            farmers[_newFarmers[i]] = true;\r\n\r\n            emit NewFarmer(_newFarmers[i]);\r\n        }\r\n        // remove farmers\r\n        for (uint256 j = 0; j < _rmFarmers.length; j++){\r\n            farmers[_rmFarmers[j]] = false;\r\n\r\n            emit RmFarmer(_rmFarmers[j]);\r\n        }\r\n    }\r\n\r\n    // callable by the DAO Council multisig, we can instantly remove a group of malicious farmers (no delay needed from DAO voting)\r\n    function emergencyRemoveFarmers(address[] calldata _rmFarmers) external {\r\n        require(msg.sender == daoCouncilMultisig, \"FARMBOSSV1: !multisig\");\r\n        require(_rmFarmers.length <= LOOP_LIMIT, \"FARMBOSSV1: >LOOP_LIMIT\"); // dont allow unbounded loops\r\n\r\n        // remove farmers\r\n        for (uint256 j = 0; j < _rmFarmers.length; j++){\r\n            farmers[_rmFarmers[j]] = false;\r\n\r\n            emit RmFarmer(_rmFarmers[j]);\r\n        }\r\n    }\r\n\r\n    function changeWhitelist(WhitelistData[] calldata _newActions, WhitelistData[] calldata _rmActions, Approves[] calldata _newApprovals, Approves[] calldata _newDepprovals) external {\r\n        require(msg.sender == governance, \"FARMBOSSV1: !governance\");\r\n        require(_newActions.length.add(_rmActions.length).add(_newApprovals.length).add(_newDepprovals.length) <= LOOP_LIMIT, \"FARMBOSSV1: >LOOP_LIMIT\"); // dont allow unbounded loops\r\n\r\n        // add to whitelist, or change a whitelist entry if want to allow/disallow msg.value\r\n        for (uint256 i = 0; i < _newActions.length; i++){\r\n            _addWhitelist(_newActions[i].account, _newActions[i].fnSig, _newActions[i].valueAllowed);\r\n        }\r\n        // remove from whitelist\r\n        for (uint256 j = 0; j < _rmActions.length; j++){\r\n            whitelist[_rmActions[j].account][_rmActions[j].fnSig] = NOT_ALLOWED;\r\n\r\n            emit RmWhitelist(_rmActions[j].account, _rmActions[j].fnSig);\r\n        }\r\n        // approve safely, needs to be set to zero, then max.\r\n        for (uint256 k = 0; k < _newApprovals.length; k++){\r\n            _approveMax(_newApprovals[k].token, _newApprovals[k].allow);\r\n        }\r\n        // de-approve these contracts\r\n        for (uint256 l = 0; l < _newDepprovals.length; l++){\r\n            IERC20(_newDepprovals[l].token).safeApprove(_newDepprovals[l].allow, 0);\r\n\r\n            emit RmApproval(_newDepprovals[l].token, _newDepprovals[l].allow);\r\n        }\r\n    }\r\n\r\n    function _addWhitelist(address _contract, bytes4 _fnSig, bool _msgValueAllowed) internal {\r\n        if (_msgValueAllowed){\r\n            whitelist[_contract][_fnSig] = ALLOWED_W_MSG_VALUE;\r\n            emit NewWhitelist(_contract, _fnSig, ALLOWED_W_MSG_VALUE);\r\n        }\r\n        else {\r\n            whitelist[_contract][_fnSig] = ALLOWED_NO_MSG_VALUE;\r\n            emit NewWhitelist(_contract, _fnSig, ALLOWED_NO_MSG_VALUE);\r\n        }\r\n    }\r\n\r\n    function _approveMax(address _token, address _account) internal {\r\n        IERC20(_token).safeApprove(_account, 0);\r\n        IERC20(_token).safeApprove(_account, type(uint256).max);\r\n\r\n        emit NewApproval(_token, _account);\r\n    }\r\n\r\n    // callable by the DAO Council multisig, we can instantly remove a group of malicious contracts / approvals (no delay needed from DAO voting)\r\n    function emergencyRemoveWhitelist(WhitelistData[] calldata _rmActions, Approves[] calldata _newDepprovals) external {\r\n        require(msg.sender == daoCouncilMultisig, \"FARMBOSSV1: !multisig\");\r\n        require(_rmActions.length.add(_newDepprovals.length) <= LOOP_LIMIT, \"FARMBOSSV1: >LOOP_LIMIT\"); // dont allow unbounded loops\r\n\r\n        // remove from whitelist\r\n        for (uint256 j = 0; j < _rmActions.length; j++){\r\n            whitelist[_rmActions[j].account][_rmActions[j].fnSig] = NOT_ALLOWED;\r\n\r\n            emit RmWhitelist(_rmActions[j].account, _rmActions[j].fnSig);\r\n        }\r\n        // de-approve these contracts\r\n        for (uint256 l = 0; l < _newDepprovals.length; l++){\r\n            IERC20(_newDepprovals[l].token).safeApprove(_newDepprovals[l].allow, 0);\r\n\r\n            emit RmApproval(_newDepprovals[l].token, _newDepprovals[l].allow);\r\n        }\r\n    }\r\n\r\n    function govExecute(address payable _target, uint256 _value, bytes calldata _data) external returns (bool, bytes memory){\r\n        require(msg.sender == governance, \"FARMBOSSV1: !governance\");\r\n\r\n        return _execute(_target, _value, _data);\r\n    }\r\n\r\n    function farmerExecute(address payable _target, uint256 _value, bytes calldata _data) external returns (bool, bytes memory){\r\n        require(farmers[msg.sender] || msg.sender == daoCouncilMultisig, \"FARMBOSSV1: !(farmer || multisig)\");\r\n        \r\n        require(_checkContractAndFn(_target, _value, _data), \"FARMBOSSV1: target.fn() not allowed. ask DAO for approval.\");\r\n        return _execute(_target, _value, _data);\r\n    }\r\n\r\n    // farmer is NOT allowed to call the functions approve, transfer on an ERC20\r\n    // this will give the farmer direct control over assets held by the contract\r\n    // governance must approve() farmer to interact with contracts & whitelist these contracts\r\n    // even if contracts are whitelisted, farmer cannot call transfer/approve (many vault strategies will have ERC20 inheritance)\r\n    // these approvals must also be called when setting up a new strategy from governance\r\n\r\n    // if there is a strategy that has additonal functionality for the farmer to take control of assets ie: Uniswap \"add a send\"\r\n    // then a \"safe\" wrapper contract must be made, ie: you can call Uniswap but \"add a send is disabled, only msg.sender in this field\"\r\n    // strategies must be checked carefully so that farmers cannot take control of assets. trustless farming!\r\n    function _checkContractAndFn(address _target, uint256 _value, bytes calldata _data) internal view returns (bool) {\r\n\r\n        bytes4 _fnSig;\r\n        if (_data.length < 4){ // we are calling a payable function, or the data is otherwise invalid (need 4 bytes for any fn call)\r\n            _fnSig = FALLBACK_FN_SIG;\r\n        }\r\n        else { // we are calling a normal function, get the function signature from the calldata (first 4 bytes of calldata)\r\n\r\n            //////////////////\r\n            // NOTE: here we must use assembly in order to covert bytes -> bytes4\r\n            // See consensys code for bytes -> bytes32: https://github.com/GNSPS/solidity-bytes-utils/blob/master/contracts/BytesLib.sol\r\n            //////////////////\r\n\r\n            bytes memory _fnSigBytes = bytes(_data[0:4]);\r\n            assembly {\r\n                _fnSig := mload(add(add(_fnSigBytes, 0x20), 0))\r\n            }\r\n            // _fnSig = abi.decode(bytes(_data[0:4]), (bytes4)); // NOTE: does not work, open solidity issue: https://github.com/ethereum/solidity/issues/9170\r\n        }\r\n\r\n        bytes4 _transferSig = 0xa9059cbb;\r\n        bytes4 _approveSig = 0x095ea7b3;\r\n        if (_fnSig == _transferSig || _fnSig == _approveSig || whitelist[_target][_fnSig] == NOT_ALLOWED){\r\n            return false;\r\n        }\r\n        // check if value not allowed & value\r\n        else if (whitelist[_target][_fnSig] == ALLOWED_NO_MSG_VALUE && _value > 0){\r\n            return false;\r\n        }\r\n        // either ALLOWED_W_MSG_VALUE or ALLOWED_NO_MSG_VALUE with zero value\r\n        return true;\r\n    }\r\n\r\n    // call arbitrary contract & function, forward all gas, return success? & data\r\n    function _execute(address payable _target, uint256 _value, bytes memory _data) internal returns (bool, bytes memory){\r\n        bool _success;\r\n        bytes memory _returnData;\r\n\r\n        if (_data.length == 4 && _data[0] == 0xff && _data[1] == 0xff && _data[2] == 0xff && _data[3] == 0xff){ // check if fallback function is invoked, send w/ no data\r\n            (_success, _returnData) = _target.call{value: _value}(\"\");\r\n        }\r\n        else {\r\n            (_success, _returnData) = _target.call{value: _value}(_data);\r\n        }\r\n\r\n        if (_success){\r\n            emit ExecuteSuccess(_returnData);\r\n        }\r\n        else {\r\n            emit ExecuteERROR(_returnData);\r\n        }\r\n\r\n        return (_success, _returnData);\r\n    }\r\n\r\n    // we can call this function on the treasury from farmer/govExecute, but let's make it easy\r\n    function rebalanceUp(uint256 _amount, address _farmerRewards) external {\r\n        require(msg.sender == governance || farmers[msg.sender] || msg.sender == daoCouncilMultisig, \"FARMBOSSV1: !(governance || farmer || multisig)\");\r\n\r\n        FarmTreasuryV1(treasury).rebalanceUp(_amount, _farmerRewards);\r\n    }\r\n\r\n    // is a Sushi/Uniswap wrapper to sell tokens for extra safety. This way, the swapping routes & destinations are checked & much safer than simply whitelisting the function\r\n    // the function takes the calldata directly as an input. this way, calling the function is very similar to a normal farming call\r\n    function sellExactTokensForUnderlyingToken(bytes calldata _data, bool _isSushi) external returns (uint[] memory amounts){\r\n        require(msg.sender == governance || farmers[msg.sender] || msg.sender == daoCouncilMultisig, \"FARMBOSSV1: !(governance || farmer || multisig)\");\r\n\r\n        (uint256 amountIn, uint256 amountOutMin, address[] memory path, address to, uint256 deadline) = abi.decode(_data[4:], (uint256, uint256, address[], address, uint256));\r\n\r\n        // check the data to make sure it's an allowed sell\r\n        require(to == address(this), \"FARMBOSSV1: invalid sell, to != address(this)\");\r\n\r\n        // strictly require paths to be [token, WETH, underlying] \r\n        // note: underlying can be WETH --> [token, WETH]\r\n        if (underlying == WETH){\r\n            require(path.length == 2, \"FARMBOSSV1: path.length != 2\");\r\n            require(path[1] == WETH, \"FARMBOSSV1: WETH invalid sell, output != underlying\");\r\n        }\r\n        else {\r\n            require(path.length == 3, \"FARMBOSSV1: path.length != 3\");\r\n            require(path[1] == WETH, \"FARMBOSSV1: path[1] != WETH\");\r\n            require(path[2] == underlying, \"FARMBOSSV1: invalid sell, output != underlying\");\r\n        }\r\n\r\n        // DAO takes some percentage of CRVToken pre-sell as part of a long term strategy \r\n        if (path[0] == CRVToken && CRVTokenTake > 0){\r\n            uint256 _amtTake = amountIn.mul(CRVTokenTake).div(max); // take some portion, and send to governance\r\n\r\n            // redo the swap input variables, to account for the amount taken\r\n            amountIn = amountIn.sub(_amtTake);\r\n            amountOutMin = amountOutMin.mul(max.sub(CRVTokenTake)).div(max); // reduce the amountOutMin by the same ratio, therefore target slippage pct is the same\r\n\r\n            IERC20(CRVToken).safeTransfer(governance, _amtTake);\r\n        }\r\n\r\n        if (_isSushi){ // sell on Sushiswap\r\n            return IUniswapRouterV2(SushiswapRouter).swapExactTokensForTokens(amountIn, amountOutMin, path, to, deadline);\r\n        }\r\n        else { // sell on Uniswap\r\n            return IUniswapRouterV2(UniswapRouter).swapExactTokensForTokens(amountIn, amountOutMin, path, to, deadline);\r\n        }\r\n    }\r\n\r\n    function rescue(address _token, uint256 _amount) external {\r\n        require(msg.sender == governance, \"FARMBOSSV1: !governance\");\r\n\r\n        if (_token != address(0)){\r\n            IERC20(_token).safeTransfer(governance, _amount);\r\n        }\r\n        else { // if _tokenContract is 0x0, then escape ETH\r\n            governance.transfer(_amount);\r\n        }\r\n    }\r\n}\r\n\r\ncontract FarmBossV1_USDC is FarmBossV1 {\r\n    using SafeERC20 for IERC20;\r\n    using SafeMath for uint256;\r\n    using Address for address;\r\n\r\n    // breaking some constants out here, getting stack ;) issues\r\n\r\n    // CRV FUNCTIONS\r\n    /*\r\n        CRV Notes:\r\n            add_liquidity takes a fixed size array of input, so it will change the function signature\r\n            0x0b4c7e4d --> 2 coin pool --> add_liquidity(uint256[2] uamounts, uint256 min_mint_amount)\r\n            0x4515cef3 --> 3 coin pool --> add_liquidity(uint256[3] amounts, uint256 min_mint_amount)\r\n            0x029b2f34 --> 4 coin pool --> add_liquidity(uint256[4] amounts, uint256 min_mint_amount)\r\n\r\n            0xee22be23 --> 2 coin pool underlying --> add_liquidity(uint256[2] _amounts, uint256 _min_mint_amount, bool _use_underlying)\r\n            0x2b6e993a -> 3 coin pool underlying --> add_liquidity(uint256[3] _amounts, uint256 _min_mint_amount, bool _use_underlying)\r\n\r\n            remove_liquidity_one_coin has an optional end argument, bool donate_dust\r\n\r\n            0x517a55a3 --> remove_liquidity_one_coin(uint256 _token_amount, int128 i, uint256 min_uamount, bool donate_dust)\r\n            0x1a4d01d2 --> remove_liquidity_one_coin(uint256 _token_amount, int128 i, uint256 min_amount)\r\n\r\n            remove_liquidity_imbalance takes a fixes array of input too\r\n            0x18a7bd76 --> 4 coin pool --> remove_liquidity_imbalance(uint256[4] amounts, uint256 max_burn_amount)\r\n    */\r\n    bytes4 constant private add_liquidity_2 = 0x0b4c7e4d;\r\n    bytes4 constant private add_liquidity_3 = 0x4515cef3;\r\n    bytes4 constant private add_liquidity_4 = 0x029b2f34;\r\n\r\n    bytes4 constant private add_liquidity_u_2 = 0xee22be23;\r\n    bytes4 constant private add_liquidity_u_3 = 0x2b6e993a;\r\n\r\n    bytes4 constant private remove_liquidity_one_burn = 0x517a55a3;\r\n    bytes4 constant private remove_liquidity_one = 0x1a4d01d2;\r\n\r\n    bytes4 constant private remove_liquidity_4 = 0x18a7bd76;\r\n\r\n    bytes4 constant private deposit_gauge = 0xb6b55f25; // deposit(uint256 _value)\r\n    bytes4 constant private withdraw_gauge = 0x2e1a7d4d; // withdraw(uint256 _value)\r\n\r\n    bytes4 constant private mint = 0x6a627842; // mint(address gauge_addr)\r\n    bytes4 constant private mint_many = 0xa51e1904; // mint_many(address[8])\r\n    bytes4 constant private claim_rewards = 0x84e9bd7e; // claim_rewards(address addr)\r\n\r\n    // YEARN FUNCTIONS\r\n    bytes4 constant private deposit = 0xb6b55f25; // deposit(uint256 _amount)\r\n    bytes4 constant private withdraw = 0x2e1a7d4d; // withdraw(uint256 _shares)\r\n\r\n    // AlphaHomora FUNCTIONS\r\n    bytes4 constant private claim = 0x2f52ebb7;\r\n\r\n    // COMP FUNCTIONS\r\n    bytes4 constant private mint_ctoken = 0xa0712d68; // mint(uint256 mintAmount)\r\n    bytes4 constant private redeem_ctoken = 0xdb006a75; // redeem(uint256 redeemTokens)\r\n    bytes4 constant private claim_COMP = 0x1c3db2e0; // claimComp(address holder, address[] cTokens)\r\n\r\n    // IDLE FINANCE FUNCTIONS\r\n    bytes4 constant private mint_idle = 0x2befabbf; // mintIdleToken(uint256 _amount, bool _skipRebalance, address _referral)\r\n    bytes4 constant private redeem_idle = 0x8b30b516; // redeemIdleToken(uint256 _amount)\r\n\r\n    constructor(address payable _governance, address _daoMultisig, address _treasury, address _underlying) public FarmBossV1(_governance, _daoMultisig, _treasury, _underlying){\r\n    }\r\n\r\n    function _initFirstFarms() internal override {\r\n\r\n        /*\r\n            For our intro USDC strategies, we are using:\r\n            -- Curve.fi strategies for their good yielding USDC pools\r\n            -- AlphaHomoraV2 USDC\r\n            -- yEarn USDC\r\n            -- Compound USDC\r\n            -- IDLE Finance USDC\r\n        */\r\n\r\n        ////////////// ALLOW CURVE 3, s, y, ib, comp, busd, aave, usdt pools //////////////\r\n\r\n        ////////////// ALLOW crv3pool //////////////\r\n        address _crv3Pool = 0xbEbc44782C7dB0a1A60Cb6fe97d0b483032FF1C7;\r\n        address _crv3PoolToken = 0x6c3F90f043a72FA612cbac8115EE7e52BDe6E490;\r\n        _approveMax(underlying, _crv3Pool);\r\n        _addWhitelist(_crv3Pool, add_liquidity_3, false);\r\n        _addWhitelist(_crv3Pool, remove_liquidity_one, false);\r\n\r\n        ////////////// ALLOW crv3 Gauge //////////////\r\n        address _crv3Gauge = 0xbFcF63294aD7105dEa65aA58F8AE5BE2D9d0952A;\r\n        _approveMax(_crv3PoolToken, _crv3Gauge);\r\n        _addWhitelist(_crv3Pool, deposit_gauge, false);\r\n        _addWhitelist(_crv3Pool, withdraw_gauge, false);\r\n\r\n        ////////////// ALLOW crvSUSD Pool //////////////\r\n        // deposit USDC to SUSDpool, receive _crvSUSDToken\r\n        // this is a weird pool, like it was configured for lending accidentally... we will allow the swap and zap contract both\r\n        address _crvSUSDPool = 0xA5407eAE9Ba41422680e2e00537571bcC53efBfD;\r\n        address _crvSUSDToken = 0xC25a3A3b969415c80451098fa907EC722572917F;\r\n        _approveMax(underlying, _crvSUSDPool);\r\n        _addWhitelist(_crvSUSDPool, add_liquidity_4, false);\r\n        _addWhitelist(_crvSUSDPool, remove_liquidity_4, false);\r\n\r\n        address _crvSUSDWithdraw = 0xFCBa3E75865d2d561BE8D220616520c171F12851; // because crv frontend is misconfigured to think this is a lending pool\r\n        _approveMax(underlying, _crvSUSDWithdraw);\r\n        _approveMax(_crvSUSDToken, _crvSUSDWithdraw);\r\n        _addWhitelist(_crvSUSDWithdraw, add_liquidity_4, false);\r\n        _addWhitelist(_crvSUSDWithdraw, remove_liquidity_one_burn, false);\r\n\r\n        ////////////// ALLOW crvSUSD Gauge, SNX REWARDS //////////////\r\n        address _crvSUSDGauge = 0xA90996896660DEcC6E997655E065b23788857849;\r\n        _approveMax(_crvSUSDToken, _crvSUSDGauge);\r\n        _addWhitelist(_crvSUSDGauge, deposit_gauge, false);\r\n        _addWhitelist(_crvSUSDGauge, withdraw_gauge, false);\r\n        _addWhitelist(_crvSUSDGauge, claim_rewards, false);\r\n\r\n        address _SNXToken = 0xC011a73ee8576Fb46F5E1c5751cA3B9Fe0af2a6F;\r\n        _approveMax(_SNXToken, SushiswapRouter);\r\n        _approveMax(_SNXToken, UniswapRouter);\r\n\r\n        ////////////// ALLOW crvCOMP Pool //////////////\r\n        address _crvCOMPDeposit = 0xeB21209ae4C2c9FF2a86ACA31E123764A3B6Bc06;\r\n        address _crvCOMPToken = 0x845838DF265Dcd2c412A1Dc9e959c7d08537f8a2;\r\n        _approveMax(underlying, _crvCOMPDeposit);\r\n        _approveMax(_crvCOMPToken, _crvCOMPDeposit); // allow withdraws, lending pool\r\n        _addWhitelist(_crvCOMPDeposit, add_liquidity_2, false);\r\n        _addWhitelist(_crvCOMPDeposit, remove_liquidity_one_burn, false);\r\n\r\n        ////////////// ALLOW crvCOMP Gauge //////////////\r\n        address _crvCOMPGauge = 0x7ca5b0a2910B33e9759DC7dDB0413949071D7575;\r\n        _approveMax(_crvCOMPToken, _crvCOMPGauge);\r\n        _addWhitelist(_crvCOMPGauge, deposit_gauge, false);\r\n        _addWhitelist(_crvCOMPGauge, withdraw_gauge, false);\r\n\r\n        ////////////// ALLOW crvBUSD Pool //////////////\r\n        address _crvBUSDDeposit = 0xb6c057591E073249F2D9D88Ba59a46CFC9B59EdB;\r\n        address _crvBUSDToken = 0x3B3Ac5386837Dc563660FB6a0937DFAa5924333B;\r\n        _approveMax(underlying, _crvBUSDDeposit);\r\n        _approveMax(_crvBUSDToken, _crvBUSDDeposit);\r\n        _addWhitelist(_crvBUSDDeposit, add_liquidity_4, false);\r\n        _addWhitelist(_crvBUSDDeposit, remove_liquidity_one_burn, false);\r\n\r\n        ////////////// ALLOW crvBUSD Gauge //////////////\r\n        address _crvBUSDGauge = 0x69Fb7c45726cfE2baDeE8317005d3F94bE838840;\r\n        _approveMax(_crvBUSDToken, _crvBUSDGauge);\r\n        _addWhitelist(_crvBUSDGauge, deposit_gauge, false);\r\n        _addWhitelist(_crvBUSDGauge, withdraw_gauge, false);\r\n\r\n        ////////////// ALLOW crvAave Pool //////////////\r\n        address _crvAavePool = 0xDeBF20617708857ebe4F679508E7b7863a8A8EeE; // new style lending pool w/o second approve needed... direct burn from msg.sender\r\n        address _crvAaveToken = 0xFd2a8fA60Abd58Efe3EeE34dd494cD491dC14900;\r\n        _approveMax(underlying, _crvAavePool);\r\n        _addWhitelist(_crvAavePool, add_liquidity_u_3, false);\r\n        _addWhitelist(_crvAavePool, remove_liquidity_one_burn, false);\r\n\r\n        ////////////// ALLOW crvAave Gauge //////////////\r\n        address _crvAaveGauge = 0xd662908ADA2Ea1916B3318327A97eB18aD588b5d;\r\n        _approveMax(_crvAaveToken, _crvAaveGauge);\r\n        _addWhitelist(_crvAaveGauge, deposit_gauge, false);\r\n        _addWhitelist(_crvAaveGauge, withdraw_gauge, false);\r\n\r\n        ////////////// ALLOW crvYpool //////////////\r\n        address _crvYDeposit = 0xbBC81d23Ea2c3ec7e56D39296F0cbB648873a5d3;\r\n        address _crvYToken = 0xdF5e0e81Dff6FAF3A7e52BA697820c5e32D806A8;\r\n        _approveMax(underlying, _crvYDeposit);\r\n        _approveMax(_crvYToken, _crvYDeposit); // allow withdraws, lending pool\r\n        _addWhitelist(_crvYDeposit, add_liquidity_4, false);\r\n        _addWhitelist(_crvYDeposit, remove_liquidity_one_burn, false);\r\n\r\n        ////////////// ALLOW crvY Gauge //////////////\r\n        address _crvYGauge = 0xFA712EE4788C042e2B7BB55E6cb8ec569C4530c1;\r\n        _approveMax(_crvYToken, _crvYGauge);\r\n        _addWhitelist(_crvYGauge, deposit_gauge, false);\r\n        _addWhitelist(_crvYGauge, withdraw_gauge, false);\r\n\r\n        ////////////// ALLOW crvUSDTComp Pool //////////////\r\n        address _crvUSDTCompDeposit = 0xac795D2c97e60DF6a99ff1c814727302fD747a80;\r\n        address _crvUSDTCompToken = 0x9fC689CCaDa600B6DF723D9E47D84d76664a1F23;\r\n        _approveMax(underlying, _crvUSDTCompDeposit);\r\n        _approveMax(_crvUSDTCompToken, _crvUSDTCompDeposit);  // allow withdraws, lending pool\r\n        _addWhitelist(_crvUSDTCompDeposit, add_liquidity_3, false);\r\n        _addWhitelist(_crvUSDTCompDeposit, remove_liquidity_one_burn, false);\r\n\r\n        ////////////// ALLOW crvUSDTComp Gauge //////////////\r\n        address _crvUSDTCompGauge = 0xBC89cd85491d81C6AD2954E6d0362Ee29fCa8F53;\r\n        _approveMax(_crvUSDTCompToken, _crvUSDTCompGauge);\r\n        _addWhitelist(_crvUSDTCompGauge, deposit_gauge, false);\r\n        _addWhitelist(_crvUSDTCompGauge, withdraw_gauge, false);\r\n\r\n        ////////////// ALLOW crvIBPool Pool //////////////\r\n        address _crvIBPool = 0x2dded6Da1BF5DBdF597C45fcFaa3194e53EcfeAF;\r\n        _approveMax(underlying, _crvIBPool);\r\n        _addWhitelist(_crvIBPool, add_liquidity_u_3, false);\r\n        _addWhitelist(_crvIBPool, remove_liquidity_one_burn, false);\r\n\r\n        ////////////// ALLOW crvIBPool Gauge //////////////\r\n        address _crvIBGauge = 0xF5194c3325202F456c95c1Cf0cA36f8475C1949F;\r\n        address _crvIBToken = 0x5282a4eF67D9C33135340fB3289cc1711c13638C;\r\n        _approveMax(_crvIBToken, _crvIBGauge);\r\n        _addWhitelist(_crvIBGauge, deposit_gauge, false);\r\n        _addWhitelist(_crvIBGauge, withdraw_gauge, false);\r\n\r\n        ////////////// CRV tokens mint, sell Sushi/Uni //////////////\r\n        address _crvMintr = 0xd061D61a4d941c39E5453435B6345Dc261C2fcE0;\r\n        _addWhitelist(_crvMintr, mint, false);\r\n        _addWhitelist(_crvMintr, mint_many, false);\r\n\r\n        // address CRVToken = 0xD533a949740bb3306d119CC777fa900bA034cd52; -- already in FarmBossV1\r\n        _approveMax(CRVToken, SushiswapRouter);\r\n        _approveMax(CRVToken, UniswapRouter);\r\n\r\n        ////////////// END ALLOW CURVE 3, s, y, ib, comp, busd, aave, usdt pools //////////////\r\n\r\n        ////////////// ALLOW AlphaHomoraV2 USDC //////////////\r\n        address _ahUSDC = 0x08bd64BFC832F1C2B3e07e634934453bA7Fa2db2;\r\n        IERC20(underlying).safeApprove(_ahUSDC, type(uint256).max);\r\n        whitelist[_ahUSDC][deposit] = ALLOWED_NO_MSG_VALUE;\r\n        whitelist[_ahUSDC][withdraw] = ALLOWED_NO_MSG_VALUE;\r\n        whitelist[_ahUSDC][claim] = ALLOWED_NO_MSG_VALUE; // claim ALPHA token reward\r\n\r\n        _approveMax(underlying, _ahUSDC);\r\n        _addWhitelist(_ahUSDC, deposit, false);\r\n        _addWhitelist(_ahUSDC, withdraw, false);\r\n        _addWhitelist(_ahUSDC, claim, false);\r\n\r\n        address ALPHA_TOKEN = 0xa1faa113cbE53436Df28FF0aEe54275c13B40975;\r\n        _approveMax(ALPHA_TOKEN, SushiswapRouter);\r\n        _approveMax(ALPHA_TOKEN, UniswapRouter);\r\n        ////////////// END ALLOW AlphaHomoraV2 USDC //////////////\r\n\r\n        ////////////// ALLOW yEarn USDC //////////////\r\n        address _yearnUSDC = 0x5f18C75AbDAe578b483E5F43f12a39cF75b973a9;\r\n        IERC20(underlying).safeApprove(_yearnUSDC, type(uint256).max);\r\n        whitelist[_yearnUSDC][deposit] = ALLOWED_NO_MSG_VALUE;\r\n        whitelist[_yearnUSDC][withdraw] = ALLOWED_NO_MSG_VALUE;\r\n\r\n        _approveMax(underlying, _yearnUSDC);\r\n        _addWhitelist(_yearnUSDC, deposit, false);\r\n        _addWhitelist(_yearnUSDC, withdraw, false);\r\n        ////////////// END ALLOW yEarn USDC //////////////\r\n\r\n        ////////////// ALLOW Compound USDC //////////////\r\n        address _compUSDC = 0x39AA39c021dfbaE8faC545936693aC917d5E7563;\r\n        _approveMax(underlying, _compUSDC);\r\n        _addWhitelist(_compUSDC, mint_ctoken, false);\r\n        _addWhitelist(_compUSDC, redeem_ctoken, false);\r\n\r\n        address _comptroller = 0x3d9819210A31b4961b30EF54bE2aeD79B9c9Cd3B; // claimComp\r\n        _addWhitelist(_comptroller, claim_COMP, false);\r\n\r\n        address _COMP = 0xc00e94Cb662C3520282E6f5717214004A7f26888;\r\n        _approveMax(_COMP, SushiswapRouter);\r\n        _approveMax(_COMP, UniswapRouter);\r\n        ////////////// END ALLOW Compound USDC //////////////\r\n\r\n        ////////////// ALLOW IDLE Finance USDC //////////////\r\n        address _idleBestUSDCv4 = 0x5274891bEC421B39D23760c04A6755eCB444797C;\r\n        _approveMax(underlying, _idleBestUSDCv4);\r\n        _addWhitelist(_idleBestUSDCv4, mint_idle, false);\r\n        _addWhitelist(_idleBestUSDCv4, redeem_idle, false);\r\n\r\n        // IDLEUSDC doesn't have a pure IDLEClaim() function, you need to either deposit/withdraw again, and then your IDLE & COMP will be sent\r\n        address IDLEToken = 0x875773784Af8135eA0ef43b5a374AaD105c5D39e;\r\n        _approveMax(IDLEToken, SushiswapRouter);\r\n        _approveMax(IDLEToken, UniswapRouter);\r\n\r\n        // NOTE: Comp rewards already are approved for liquidation above\r\n        ////////////// END ALLOW IDLE Finance USDC //////////////\r\n    }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_governance\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_daoMultisig\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_treasury\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_underlying\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"_returnData\",\"type\":\"bytes\"}],\"name\":\"ExecuteERROR\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"_returnData\",\"type\":\"bytes\"}],\"name\":\"ExecuteSuccess\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_contract\",\"type\":\"address\"}],\"name\":\"NewApproval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_farmer\",\"type\":\"address\"}],\"name\":\"NewFarmer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_contract\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes4\",\"name\":\"_fnSig\",\"type\":\"bytes4\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_allowedType\",\"type\":\"uint256\"}],\"name\":\"NewWhitelist\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_contract\",\"type\":\"address\"}],\"name\":\"RmApproval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_farmer\",\"type\":\"address\"}],\"name\":\"RmFarmer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_contract\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes4\",\"name\":\"_fnSig\",\"type\":\"bytes4\"}],\"name\":\"RmWhitelist\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"CRVToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"CRVTokenTake\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"SushiswapRouter\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"UniswapRouter\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"WETH\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_newFarmers\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"_rmFarmers\",\"type\":\"address[]\"}],\"name\":\"changeFarmers\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bytes4\",\"name\":\"fnSig\",\"type\":\"bytes4\"},{\"internalType\":\"bool\",\"name\":\"valueAllowed\",\"type\":\"bool\"}],\"internalType\":\"struct FarmBossV1.WhitelistData[]\",\"name\":\"_newActions\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bytes4\",\"name\":\"fnSig\",\"type\":\"bytes4\"},{\"internalType\":\"bool\",\"name\":\"valueAllowed\",\"type\":\"bool\"}],\"internalType\":\"struct FarmBossV1.WhitelistData[]\",\"name\":\"_rmActions\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"allow\",\"type\":\"address\"}],\"internalType\":\"struct FarmBossV1.Approves[]\",\"name\":\"_newApprovals\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"allow\",\"type\":\"address\"}],\"internalType\":\"struct FarmBossV1.Approves[]\",\"name\":\"_newDepprovals\",\"type\":\"tuple[]\"}],\"name\":\"changeWhitelist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"daoCouncilMultisig\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_rmFarmers\",\"type\":\"address[]\"}],\"name\":\"emergencyRemoveFarmers\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bytes4\",\"name\":\"fnSig\",\"type\":\"bytes4\"},{\"internalType\":\"bool\",\"name\":\"valueAllowed\",\"type\":\"bool\"}],\"internalType\":\"struct FarmBossV1.WhitelistData[]\",\"name\":\"_rmActions\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"allow\",\"type\":\"address\"}],\"internalType\":\"struct FarmBossV1.Approves[]\",\"name\":\"_newDepprovals\",\"type\":\"tuple[]\"}],\"name\":\"emergencyRemoveWhitelist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_target\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"farmerExecute\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"farmers\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_contract\",\"type\":\"address\"},{\"internalType\":\"bytes4\",\"name\":\"_fnSig\",\"type\":\"bytes4\"}],\"name\":\"getWhitelist\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_target\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"govExecute\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"governance\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"max\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_farmerRewards\",\"type\":\"address\"}],\"name\":\"rebalanceUp\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"rescue\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"},{\"internalType\":\"bool\",\"name\":\"_isSushi\",\"type\":\"bool\"}],\"name\":\"sellExactTokensForUnderlyingToken\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_new\",\"type\":\"uint256\"}],\"name\":\"setCRVTokenTake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_new\",\"type\":\"address\"}],\"name\":\"setDaoCouncilMultisig\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_new\",\"type\":\"address\"}],\"name\":\"setGovernance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"treasury\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"underlying\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"name\":\"whitelist\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]","ContractName":"FarmBossV1_USDC","CompilerVersion":"v0.6.12+commit.27d51765","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000659407e21ac3e7ac2e582c618ecf593fbb678d82000000000000000000000000dd7a75cc6c04031629f13848bc0d07e89c3961be000000000000000000000000067b9fe006e16f52bbf647ab6799f87566480d2c000000000000000000000000a0b86991c6218b36c1d19d4a2e9eb0ce3606eb48","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://6839581969389c66ffc01fe76ca943eca7d6654f1780907703ef94088268cce6"}]}