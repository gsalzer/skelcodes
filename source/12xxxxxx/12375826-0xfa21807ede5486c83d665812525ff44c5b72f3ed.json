{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"settings\": {\r\n    \"evmVersion\": \"istanbul\",\r\n    \"libraries\": {},\r\n    \"metadata\": {\r\n      \"bytecodeHash\": \"ipfs\",\r\n      \"useLiteralContent\": true\r\n    },\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"remappings\": [],\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  },\r\n  \"sources\": {\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor () {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/security/ReentrancyGuard.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor () {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and make it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155 is IERC165 {\\n    /**\\n     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\\n     */\\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\\n\\n    /**\\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\\n     * transfers.\\n     */\\n    event TransferBatch(address indexed operator, address indexed from, address indexed to, uint256[] ids, uint256[] values);\\n\\n    /**\\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\\n     * `approved`.\\n     */\\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\\n     *\\n     * If an {URI} event was emitted for `id`, the standard\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\\n     * returned by {IERC1155MetadataURI-uri}.\\n     */\\n    event URI(string value, uint256 indexed id);\\n\\n    /**\\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) external view returns (uint256);\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(address[] calldata accounts, uint256[] calldata ids) external view returns (uint256[] memory);\\n\\n    /**\\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `operator` cannot be the caller.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\\n     *\\n     * See {setApprovalForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If the caller is not `from`, it must be have been approved to spend ``from``'s tokens via {setApprovalForAll}.\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 id, uint256 amount, bytes calldata data) external;\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function safeBatchTransferFrom(address from, address to, uint256[] calldata ids, uint256[] calldata amounts, bytes calldata data) external;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC1155/IERC1155Receiver.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * _Available since v3.1._\\n */\\ninterface IERC1155Receiver is IERC165 {\\n\\n    /**\\n        @dev Handles the receipt of a single ERC1155 token type. This function is\\n        called at the end of a `safeTransferFrom` after the balance has been updated.\\n        To accept the transfer, this must return\\n        `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))`\\n        (i.e. 0xf23a6e61, or its own function selector).\\n        @param operator The address which initiated the transfer (i.e. msg.sender)\\n        @param from The address which previously owned the token\\n        @param id The ID of the token being transferred\\n        @param value The amount of tokens being transferred\\n        @param data Additional data with no specified format\\n        @return `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))` if transfer is allowed\\n    */\\n    function onERC1155Received(\\n        address operator,\\n        address from,\\n        uint256 id,\\n        uint256 value,\\n        bytes calldata data\\n    )\\n        external\\n        returns(bytes4);\\n\\n    /**\\n        @dev Handles the receipt of a multiple ERC1155 token types. This function\\n        is called at the end of a `safeBatchTransferFrom` after the balances have\\n        been updated. To accept the transfer(s), this must return\\n        `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))`\\n        (i.e. 0xbc197c81, or its own function selector).\\n        @param operator The address which initiated the batch transfer (i.e. msg.sender)\\n        @param from The address which previously owned the token\\n        @param ids An array containing ids of each token being transferred (order and length must match values array)\\n        @param values An array containing amounts of each token being transferred (order and length must match ids array)\\n        @param data Additional data with no specified format\\n        @return `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))` if transfer is allowed\\n    */\\n    function onERC1155BatchReceived(\\n        address operator,\\n        address from,\\n        uint256[] calldata ids,\\n        uint256[] calldata values,\\n        bytes calldata data\\n    )\\n        external\\n        returns(bytes4);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC1155/utils/ERC1155Holder.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./ERC1155Receiver.sol\\\";\\n\\n/**\\n * @dev _Available since v3.1._\\n */\\ncontract ERC1155Holder is ERC1155Receiver {\\n    function onERC1155Received(address, address, uint256, uint256, bytes memory) public virtual override returns (bytes4) {\\n        return this.onERC1155Received.selector;\\n    }\\n\\n    function onERC1155BatchReceived(address, address, uint256[] memory, uint256[] memory, bytes memory) public virtual override returns (bytes4) {\\n        return this.onERC1155BatchReceived.selector;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC1155/utils/ERC1155Receiver.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC1155Receiver.sol\\\";\\nimport \\\"../../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev _Available since v3.1._\\n */\\nabstract contract ERC1155Receiver is ERC165, IERC1155Receiver {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return interfaceId == type(IERC1155Receiver).interfaceId\\n            || super.supportsInterface(interfaceId);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/introspection/ERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/introspection/IERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"contracts/EulerBeatsPairStaking.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.3;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\n\\nimport \\\"./staking/mixins/BalanceTrackingMixin.sol\\\";\\nimport \\\"./staking/mixins/RewardTrackingMixin.sol\\\";\\nimport \\\"./staking/mixins/RestrictedPairsMixin.sol\\\";\\nimport \\\"./staking/ERC1155Staker.sol\\\";\\n\\n/**\\n * @dev Staking contract for ERC1155 tokens which tracks rewards in ether.  All ether sent to this contract will be distributed\\n * evenly across all stakers.\\n * This contract only accepts whitelisted pairs of tokens to be staked.\\n */\\ncontract EulerBeatsPairStaking is\\n    ERC1155Staker,\\n    BalanceTrackingMixin,\\n    RewardTrackingMixin,\\n    RestrictedPairsMixin,\\n    ReentrancyGuard,\\n    Ownable\\n{\\n    bool public emergency;\\n    uint256 public maxPairs;\\n\\n    event RewardAdded(uint256 amount);\\n    event RewardClaimed(address indexed account, uint256 amount);\\n\\n    // on stake/unstake\\n    event PairStaked(uint256 indexed pairId, address indexed account, uint256 amount);\\n    event PairUnstaked(uint256 indexed pairId, address indexed account, uint256 amount);\\n\\n    event EmergencyUnstake(uint256 pairId, address indexed account, uint256 amount);\\n\\n    /**\\n     * @dev The token contracts to allow the pairs from.  These address can only be set in the constructor, so make\\n     * sure you have it right!\\n     */\\n    constructor(address tokenAddressA, address tokenAddressB) RestrictedPairsMixin(tokenAddressA, tokenAddressB) {}\\n\\n    /**\\n     * @dev Claim the reward for the caller.\\n     */\\n    function claimReward() external nonReentrant {\\n        claimRewardInternal();\\n    }\\n\\n    /**\\n     * @dev Stake amount of tokens for the given pair.  Prior to staking, this will send and pending reward to the caller.\\n     */\\n    function stake(uint256 pairId, uint256 amount) external onlyEnabledPair(pairId) nonReentrant {\\n        require(totalShares + amount <= maxPairs, \\\"Max Pairs Exceeded\\\");\\n        require(!emergency, \\\"Not allowed\\\");\\n\\n        // claim any pending reward\\n        claimRewardInternal();\\n\\n        // transfer tokens from account to staking contract\\n        depositPair(pairId, amount);\\n\\n        // update reward balance\\n        _addShares(msg.sender, amount);\\n    }\\n\\n    /**\\n     * @dev Unstake one or more tokens.  Prior to unstaking, this will send all pending rewards to the caller.\\n     */\\n    function unstake(uint256 pairId, uint256 amount) external nonReentrant {\\n        // claim any pending reward\\n        claimRewardInternal();\\n\\n        // transfer tokens from staking contract to account\\n        withdrawPair(pairId, amount);\\n\\n        // update reward balance\\n        _removeShares(msg.sender, amount);\\n    }\\n\\n    /**\\n     * @dev Unstake the given pair and forfeit any current pending reward.  This is only for emergency use\\n     * and will mess up this account's ability to unstake any other pairs.\\n     * If used, the caller should unstake ALL pairs (each pair id one-by-one) using this function.\\n     */\\n    function emergencyUnstake(uint256 pairId, uint256 amount) external nonReentrant {\\n        require(emergency, \\\"Not allowed\\\");\\n        require(amount > 0, \\\"Invalid amount\\\");\\n\\n        // reset this account back to 0 rewards\\n        _resetRewardAccount(msg.sender);\\n\\n        // trasfers the tokens back to the account\\n        withdrawPair(pairId, amount);\\n\\n        emit EmergencyUnstake(pairId, msg.sender, amount);\\n    }\\n\\n    /**\\n     * @dev Add rewards that are immediately split up between stakers\\n     */\\n    function addReward() external payable {\\n        require(msg.value > 0, \\\"No ETH sent\\\");\\n        require(totalShares > 0, \\\"No stakers\\\");\\n        _addReward(msg.value);\\n        emit RewardAdded(msg.value);\\n    }\\n\\n    //////////////////////////////////////////////////\\n    //////////////////////////////////////////////////\\n    //////////////////////////////////////////////////\\n\\n    ///////////////\\n    // Hooks     //\\n    ///////////////\\n\\n    function _beforeDeposit(\\n        address account,\\n        address contractAddress,\\n        uint256 tokenId,\\n        uint256 amount\\n    ) internal virtual override {\\n        // update deposit balance for the given account\\n        _depositIntoAccount(account, contractAddress, tokenId, amount);\\n    }\\n\\n    function _beforeWithdraw(\\n        address account,\\n        address contractAddress,\\n        uint256 tokenId,\\n        uint256 amount\\n    ) internal virtual override {\\n        // update deposit balance for the given account.  this will revert if someone\\n        // is trying to withdraw more than they have deposited.\\n        _withdrawFromAccount(account, contractAddress, tokenId, amount);\\n    }\\n\\n    //////////////////////////////////////////////////\\n    //////////////////////////////////////////////////\\n    //////////////////////////////////////////////////\\n\\n    ///////////////\\n    // Getters   //\\n    ///////////////\\n\\n    /**\\n     * @dev Return the current number of staked pairs.\\n     */\\n    function numStakedPairs() external view returns (uint256) {\\n        return totalShares;\\n    }\\n\\n    //////////////////////////////////////////////////\\n    //////////////////////////////////////////////////\\n    //////////////////////////////////////////////////\\n\\n    ///////////////\\n    // Internal  //\\n    ///////////////\\n\\n    /**\\n     * @dev Send any pending reward to msg.sender and update their debt so they\\n     * no longer have any pending reward.\\n     */\\n    function claimRewardInternal() internal {\\n        uint256 currentReward = accountPendingReward(msg.sender);\\n        if (currentReward > 0) {\\n            _updateRewardDebtToCurrent(msg.sender);\\n\\n            uint256 amount;\\n            if (currentReward > address(this).balance) {\\n                // rounding errors\\n                amount = address(this).balance;\\n            } else {\\n                amount = currentReward;\\n            }\\n            Address.sendValue(payable(msg.sender), amount);\\n            emit RewardClaimed(msg.sender, amount);\\n        }\\n    }\\n\\n    function depositPair(uint256 pairId, uint256 amount) internal {\\n        PairInfo memory pair = pairs[pairId];\\n        _depositSingle(tokenA, pair.tokenIdA, amount);\\n        _depositSingle(tokenB, pair.tokenIdB, amount);\\n        emit PairStaked(pairId, msg.sender, amount);\\n    }\\n\\n    function withdrawPair(uint256 pairId, uint256 amount) internal {\\n        PairInfo memory pair = pairs[pairId];\\n        _withdrawSingle(tokenA, pair.tokenIdA, amount);\\n        _withdrawSingle(tokenB, pair.tokenIdB, amount);\\n        emit PairUnstaked(pairId, msg.sender, amount);\\n    }\\n\\n    //////////////////////////////////////////////////\\n    //////////////////////////////////////////////////\\n    //////////////////////////////////////////////////\\n\\n    ///////////////\\n    // Admin     //\\n    ///////////////\\n\\n    /**\\n     * @dev Add new pairs that can be staked.  Pairs can never be removed after this call, only disabled.\\n     */\\n    function addPairs(\\n        uint256[] memory tokenIdA,\\n        uint256[] memory tokenIdB,\\n        bool[] memory enabled\\n    ) external onlyOwner {\\n        _addPairs(tokenIdA, tokenIdB, enabled);\\n    }\\n\\n    /**\\n     * @dev Toggle the ability to stake in the given pairIds.  Stakers can always withdraw, regardless of\\n     * this flag.\\n     */\\n    function enablePairs(uint256[] memory pairIds, bool[] memory enabled) external onlyOwner {\\n        _enablePairs(pairIds, enabled);\\n    }\\n\\n    /**\\n     * @dev Set the maximum number of pairs that can be staked at any point in time.\\n     */\\n    function setMaxPairs(uint256 amount) external onlyOwner {\\n        maxPairs = amount;\\n    }\\n\\n    /**\\n\\n     * @dev Withdraw any unclaimed eth in the contract.  Can only be called if there are no stakers.\\n     */\\n    function withdrawUnclaimed() external onlyOwner {\\n        require(totalShares == 0, \\\"Stakers\\\");\\n        // send any unclaimed eth to the owner\\n        if (address(this).balance > 0) {\\n            Address.sendValue(payable(msg.sender), address(this).balance);\\n        }\\n    }\\n\\n    /**\\n     * @dev Set the emergency flag\\n     */\\n    function setEmergency(bool value) external onlyOwner {\\n        emergency = value;\\n    }\\n\\n    //////////////////////////////////////////////////\\n    //////////////////////////////////////////////////\\n    //////////////////////////////////////////////////\\n}\\n\"\r\n    },\r\n    \"contracts/staking/ERC1155Staker.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.3;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC1155/utils/ERC1155Holder.sol\\\";\\n\\n/**\\n * @dev Base contract that support ERC1155 token staking.  Any token is allowed to be be staked/unstaked in this base implementation.\\n * Concrete implementations should either do validation checks prior to calling deposit/withdraw, or use the provided hooks\\n * to do the checks.\\n */\\nabstract contract ERC1155Staker is ERC1155Holder {\\n    // hooks\\n\\n    /**\\n     * @dev Called prior to transfering given token id from account to this contract.  This is good spot to do\\n     * any checks and revert if the given account should be able to deposit the specified token.\\n     * Ths hook is ALWAYS called prior to a deposit -- both the single and batch variants.\\n     */\\n    function _beforeDeposit(\\n        address account,\\n        address contractAddress,\\n        uint256 tokenId,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Called prior to transfering given token from this contract to the account.  This is good spot to do\\n     * any checks and revert if the given account should be able to withdraw the specified token.\\n     * Ths hook is ALWAYS called prior to a withdraw -- both the single and batch variants.\\n     */\\n    function _beforeWithdraw(\\n        address account,\\n        address contractAddress,\\n        uint256 tokenId,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Deposit one or more instance of a single token.\\n     */\\n    function _depositSingle(\\n        address contractAddress,\\n        uint256 tokenId,\\n        uint256 amount\\n    ) internal virtual {\\n        require(amount > 0, \\\"Invalid amount\\\");\\n        _beforeDeposit(msg.sender, contractAddress, tokenId, amount);\\n        IERC1155(contractAddress).safeTransferFrom(msg.sender, address(this), tokenId, amount, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Deposit one or more instances of the spececified tokens.\\n     * As a convience for the caller, this returns the total number instances of tokens depositied (the sum of amounts).\\n     */\\n    function _deposit(\\n        address contractAddress,\\n        uint256[] memory tokenIds,\\n        uint256[] memory amounts\\n    ) internal virtual returns (uint256 totalTokensDeposited) {\\n        totalTokensDeposited = 0;\\n        for (uint256 i = 0; i < tokenIds.length; i++) {\\n            require(amounts[i] > 0, \\\"Invalid amount\\\");\\n            _beforeDeposit(msg.sender, contractAddress, tokenIds[i], amounts[i]);\\n            totalTokensDeposited += amounts[i];\\n        }\\n\\n        IERC1155(contractAddress).safeBatchTransferFrom(msg.sender, address(this), tokenIds, amounts, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Withdraw one or more instance of a single token.\\n     * As a convience for the caller, this returns the total number instances of tokens depositied (the sum of amounts).\\n     */\\n    function _withdrawSingle(\\n        address contractAddress,\\n        uint256 tokenId,\\n        uint256 amount\\n    ) internal virtual {\\n        require(amount > 0, \\\"Invalid amount\\\");\\n        _beforeWithdraw(msg.sender, contractAddress, tokenId, amount);\\n        IERC1155(contractAddress).safeTransferFrom(address(this), msg.sender, tokenId, amount, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Withdraw one or more instances of the spececified tokens.\\n     */\\n    function _withdraw(\\n        address contractAddress,\\n        uint256[] memory tokenIds,\\n        uint256[] memory amounts\\n    ) internal virtual returns (uint256 totalTokensWithdrawn) {\\n        totalTokensWithdrawn = 0;\\n        for (uint256 i = 0; i < tokenIds.length; i++) {\\n            require(amounts[i] > 0, \\\"Invalid amount\\\");\\n            _beforeWithdraw(msg.sender, contractAddress, tokenIds[i], amounts[i]);\\n            totalTokensWithdrawn += amounts[i];\\n        }\\n\\n        IERC1155(contractAddress).safeBatchTransferFrom(address(this), msg.sender, tokenIds, amounts, \\\"\\\");\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/staking/mixins/BalanceTrackingMixin.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.3;\\n\\n/**\\n * @dev Tracks amounts deposited and or withdrawn, on a per contract:token basis.  Does not allow an account to\\n * withdraw more than it has deposited, and provides balance functions inspired by ERC1155.\\n */\\nabstract contract BalanceTrackingMixin {\\n    struct DepositBalance {\\n        // balance of deposits, contract address => (token id => balance)\\n        mapping(address => mapping(uint256 => uint256)) balances;\\n    }\\n\\n    mapping(address => DepositBalance) private accountBalances;\\n\\n    function _depositIntoAccount(\\n        address account,\\n        address contractAddress,\\n        uint256 tokenId,\\n        uint256 amount\\n    ) internal {\\n        uint256 newBalance = accountBalances[account].balances[contractAddress][tokenId] + amount;\\n        accountBalances[account].balances[contractAddress][tokenId] = newBalance;\\n    }\\n\\n    function _depositIntoAccount(\\n        address account,\\n        address contractAddress,\\n        uint256[] memory tokenIds,\\n        uint256[] memory amounts\\n    ) internal {\\n        require(tokenIds.length == amounts.length, \\\"Length mismatch\\\");\\n\\n        for (uint256 i = 0; i < amounts.length; i++) {\\n            _depositIntoAccount(account, contractAddress, tokenIds[i], amounts[i]);\\n        }\\n    }\\n\\n    function _withdrawFromAccount(\\n        address account,\\n        address contractAddress,\\n        uint256 tokenId,\\n        uint256 amount\\n    ) internal {\\n        require(accountBalances[account].balances[contractAddress][tokenId] >= amount, \\\"Insufficient balance\\\");\\n        uint256 newBalance = accountBalances[account].balances[contractAddress][tokenId] - amount;\\n        accountBalances[account].balances[contractAddress][tokenId] = newBalance;\\n    }\\n\\n    function _withdrawFromAccount(\\n        address account,\\n        address contractAddress,\\n        uint256[] memory tokenIds,\\n        uint256[] memory amounts\\n    ) internal {\\n        require(tokenIds.length == amounts.length, \\\"Length mismatch\\\");\\n\\n        for (uint256 i = 0; i < amounts.length; i++) {\\n            _withdrawFromAccount(account, contractAddress, tokenIds[i], amounts[i]);\\n        }\\n    }\\n\\n    function balanceOf(\\n        address account,\\n        address contractAddress,\\n        uint256 tokenId\\n    ) public view returns (uint256 balance) {\\n        require(account != address(0), \\\"Zero address\\\");\\n        return accountBalances[account].balances[contractAddress][tokenId];\\n    }\\n\\n    function balanceOfBatch(\\n        address account,\\n        address[] memory contractAddresses,\\n        uint256[] memory tokenIds\\n    ) public view returns (uint256[] memory batchBalances) {\\n        require(contractAddresses.length == tokenIds.length, \\\"Length mismatch\\\");\\n\\n        batchBalances = new uint256[](tokenIds.length);\\n\\n        for (uint256 i = 0; i < tokenIds.length; ++i) {\\n            batchBalances[i] = balanceOf(account, contractAddresses[i], tokenIds[i]);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/staking/mixins/RestrictedPairsMixin.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.3;\\n\\n/**\\n * @dev Mixin to restrict staking to specific contract and tokens.  This intended for contracts where all\\n * tokens eligible to stake are known ahead of time.\\n */\\nabstract contract RestrictedPairsMixin {\\n    struct PairInfo {\\n        uint256 tokenIdA;\\n        uint256 tokenIdB;\\n        bool enabled;\\n    }\\n\\n    address public tokenA;\\n    address public tokenB;\\n\\n    uint256 public nextPairId;\\n\\n    // pairId => pair\\n    mapping(uint256 => PairInfo) public pairs;\\n\\n    constructor(address tokenAddressA, address tokenAddressB) {\\n        tokenA = tokenAddressA;\\n        tokenB = tokenAddressB;\\n    }\\n\\n    modifier onlyEnabledPair(uint256 pairId) {\\n        require(isPairEnabled(pairId), \\\"Not enabled\\\");\\n        _;\\n    }\\n\\n    function isPairEnabled(uint256 pairId) public view returns (bool) {\\n        return pairs[pairId].enabled;\\n    }\\n\\n    function _enablePairs(uint256[] memory pairIds, bool[] memory enabled) internal {\\n        require(pairIds.length == enabled.length, \\\"Array lengths\\\");\\n\\n        for (uint256 i = 0; i < pairIds.length; i++) {\\n            pairs[pairIds[i]].enabled = enabled[i];\\n        }\\n    }\\n\\n    function _addPairs(\\n        uint256[] memory tokenIdsA,\\n        uint256[] memory tokenIdsB,\\n        bool[] memory enabled\\n    ) internal {\\n        require(tokenIdsA.length == tokenIdsB.length && tokenIdsB.length == enabled.length, \\\"Array lengths\\\");\\n        for (uint256 i = 0; i < tokenIdsA.length; i++) {\\n            pairs[nextPairId] = PairInfo({tokenIdA: tokenIdsA[i], tokenIdB: tokenIdsB[i], enabled: enabled[i]});\\n            nextPairId = nextPairId + 1;\\n        }\\n    }\\n\\n    function getAllPairs() external view returns (PairInfo[] memory results) {\\n        results = new PairInfo[](nextPairId);\\n\\n        for (uint256 i = 0; i < nextPairId; i++) {\\n            results[i] = pairs[i];\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/staking/mixins/RewardTrackingMixin.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.3;\\n\\n/**\\n * @dev Adds fractional reward tracking.  Each share is equally weighted.  This is generic in that\\n * it can track anything -- it's not tied to a staked token or ether as the reward (rewards can be ether, ERC20, ...),\\n * and this book-keeping should be done outside this contract.\\n */\\nabstract contract RewardTrackingMixin {\\n    struct AccountInfo {\\n        uint256 shares;\\n        uint256 rewardDebt;\\n    }\\n\\n    // total number of shares deposited\\n    uint256 public totalShares;\\n\\n    // always increasing value\\n    uint256 private accumulatedRewardPerShare;\\n\\n    mapping(address => AccountInfo) private accountRewards;\\n\\n    function _addReward(uint256 amount) internal {\\n        if (totalShares == 0 || amount == 0) {\\n            return;\\n        }\\n\\n        uint256 rewardPerShare = amount / totalShares;\\n        accumulatedRewardPerShare += rewardPerShare;\\n    }\\n\\n    /**\\n     * @dev Updates the amount of shares for a user.  Callers must keep track of the share count\\n     * for a particular user to reduce storage required.\\n     */\\n    function _addShares(address account, uint256 amount) internal {\\n        totalShares += amount;\\n\\n        accountRewards[account].shares += amount;\\n        _updateRewardDebtToCurrent(account);\\n    }\\n\\n    function _removeShares(address account, uint256 amount) internal {\\n        require(amount <= accountRewards[account].shares, \\\"Invalid account amount\\\");\\n        require(amount <= totalShares, \\\"Invalid global amount\\\");\\n\\n        totalShares -= amount;\\n\\n        accountRewards[account].shares -= amount;\\n        _updateRewardDebtToCurrent(account);\\n    }\\n\\n    /**\\n     * @dev Resets the given account to the initial state.  This should be used with caution!\\n     */\\n    function _resetRewardAccount(address account) internal {\\n        uint256 currentShares = accountRewards[account].shares;\\n        if (currentShares > 0) {\\n            totalShares -= currentShares;\\n            accountRewards[account].shares = 0;\\n            accountRewards[account].rewardDebt = 0;\\n        }\\n    }\\n\\n    function _updateRewardDebtToCurrent(address account) internal {\\n        accountRewards[account].rewardDebt = accountRewards[account].shares * accumulatedRewardPerShare;\\n    }\\n\\n    function accountPendingReward(address account) public view returns (uint256 pendingReward) {\\n        return accountRewards[account].shares * accumulatedRewardPerShare - accountRewards[account].rewardDebt;\\n    }\\n\\n    function accountRewardShares(address account) public view returns (uint256 rewardShares) {\\n        return accountRewards[account].shares;\\n    }\\n}\\n\"\r\n    }\r\n  }\r\n}}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddressA\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenAddressB\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"pairId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"EmergencyUnstake\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"pairId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"PairStaked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"pairId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"PairUnstaked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"RewardAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"RewardClaimed\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"accountPendingReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"pendingReward\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"accountRewardShares\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"rewardShares\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"tokenIdA\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"tokenIdB\",\"type\":\"uint256[]\"},{\"internalType\":\"bool[]\",\"name\":\"enabled\",\"type\":\"bool[]\"}],\"name\":\"addPairs\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"addReward\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"contractAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"contractAddresses\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"tokenIds\",\"type\":\"uint256[]\"}],\"name\":\"balanceOfBatch\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"batchBalances\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"emergency\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"pairId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"emergencyUnstake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"pairIds\",\"type\":\"uint256[]\"},{\"internalType\":\"bool[]\",\"name\":\"enabled\",\"type\":\"bool[]\"}],\"name\":\"enablePairs\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAllPairs\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"tokenIdA\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenIdB\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"enabled\",\"type\":\"bool\"}],\"internalType\":\"struct RestrictedPairsMixin.PairInfo[]\",\"name\":\"results\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"pairId\",\"type\":\"uint256\"}],\"name\":\"isPairEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxPairs\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nextPairId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"numStakedPairs\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC1155BatchReceived\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC1155Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"pairs\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenIdA\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenIdB\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"enabled\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"value\",\"type\":\"bool\"}],\"name\":\"setEmergency\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"setMaxPairs\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"pairId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"stake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenA\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenB\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalShares\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"pairId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"unstake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawUnclaimed\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"EulerBeatsPairStaking","CompilerVersion":"v0.8.3+commit.8d00100c","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"0000000000000000000000008754f54074400ce745a7ceddc928fb1b7e985ed6000000000000000000000000a98771a46dcb34b34cdad5355718f8a97c8e603e","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":""}]}