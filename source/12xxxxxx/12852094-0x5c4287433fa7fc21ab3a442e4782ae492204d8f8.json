{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity >= 0.4.24;\r\n\r\ninterface token {\r\n    function totalSupply() external constant returns (uint);\r\n    function transfer(address receiver, uint amount) external;\r\n\tfunction transferFrom(address from, address to, uint value) external;\r\n    function balanceOf(address tokenOwner) constant external returns (uint balance);\r\n    function allowance(address _owner, address _spender) constant external returns (uint remaining);     \r\n}\r\n\r\ncontract astatoTokenTransfer {\r\n    string public name = 'ASTATO TUSD Pool';\r\n    string public symbol = 'ATPOOL';\r\n    string public comment = 'TUSD <=> ASTATO';\r\n    uint public capitalAcum = 0; //only TUSD\r\n\r\n    function getCapital() constant public returns (uint capital) {\r\n       return capitalAcum;\r\n    }\r\n\r\n    function getPrize() constant public returns (uint vPrize) {\r\n       return capitalAcum/6000000; \r\n    }\r\n\r\n    function sendCapital(uint value) public payable { \r\n       token tokenReward = token(0x0000000000085d4780B73119b644AE5ecd22b376); //Mainnet\r\n       //token tokenReward = token(0xd73a31d61308Db20cD5F51230086C94151821e8c); //Ropsten\r\n       require(tokenReward.allowance(msg.sender, address(this)) >= value, 'First you need to authorize a value');       \r\n       require(tokenReward.balanceOf(msg.sender) >= value, 'No balance to allowance');\r\n       tokenReward.transferFrom(msg.sender, address(this), value);\r\n       capitalAcum = capitalAcum+value;\r\n    } \r\n\t\r\n\tfunction exchangeIt(bool _tusd) public payable {\r\n       // _tusd true  => ASTATO to TUSD\r\n       // _tusd false => TSUD to ASTATO     \r\n       token tokenReward = token(0x91D88227cd0A11199cabD163c95eAA54EF8C02A5); //Mainnet\r\n       token tokenSwap = token(0x0000000000085d4780B73119b644AE5ecd22b376); //Mainnet\r\n       //token tokenReward = token(0x5e340d148cAc4DDC8D985c7CF148314032DAC9F8); //Ropsten\r\n       //token tokenSwap = token(0xd73a31d61308Db20cD5F51230086C94151821e8c); //Ropsten\r\n       uint prize = 0;  \r\n       if (_tusd) {\r\n          tokenReward = token(0x0000000000085d4780B73119b644AE5ecd22b376); //Mainnet\r\n          tokenSwap = token(0x91D88227cd0A11199cabD163c95eAA54EF8C02A5); //Mainnet\r\n          //tokenReward = token(0xd73a31d61308Db20cD5F51230086C94151821e8c); //Ropsten\r\n          //tokenSwap = token(0x5e340d148cAc4DDC8D985c7CF148314032DAC9F8); //Ropsten\r\n          prize =  (tokenSwap.allowance(msg.sender, address(this))*capitalAcum)/token(tokenSwap).totalSupply();\r\n       }\r\n       require(tokenSwap.allowance(msg.sender, address(this)) > 0, 'First you need to authorize a value');       \r\n       uint tokenAmountSwap = tokenSwap.allowance(msg.sender, address(this));\r\n       require(tokenAmountSwap <= tokenSwap.balanceOf(msg.sender),'Low balance to swap');\r\n       uint tokenAmountReward = tokenAmountSwap+prize;    \r\n       require(tokenReward.balanceOf(address(this)) >= tokenAmountReward,'No contract Funds');\r\n       tokenSwap.transferFrom(msg.sender, address(this), tokenAmountSwap);\r\n       uint fee = tokenAmountReward/100;              \r\n       capitalAcum = capitalAcum-prize;   \r\n\t   tokenReward.transfer(msg.sender, tokenAmountReward-fee);\r\n       tokenReward.transfer(address(0x5D11B9e7b0ec9C9e70b63b266346Bc9136eEd523), fee);       \r\n\t}\t\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tusd\",\"type\":\"bool\"}],\"name\":\"exchangeIt\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getPrize\",\"outputs\":[{\"name\":\"vPrize\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"sendCapital\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"capitalAcum\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getCapital\",\"outputs\":[{\"name\":\"capital\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"comment\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"astatoTokenTransfer","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"bzzr://8be28b91c3548bb4b51a0075375def39d83705823dac7d26ce83d6c1768b9d73"}]}