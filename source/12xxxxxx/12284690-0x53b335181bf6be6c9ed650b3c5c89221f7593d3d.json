{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.8.0;\r\n//SPDX-License-Identifier: MIT\r\n\r\ninterface IERC20 {\r\n    function totalSupply() external view returns (uint256);\r\n    function balanceOf(address account) external view returns (uint256);\r\n}\r\n\r\ncontract XFT_DAO {\r\n    \r\n    struct proposal {\r\n        string[4] propsal_info;\r\n        uint256 expiry_time;\r\n        uint256 poll_id;\r\n    }\r\n    \r\n    event push_vote(\r\n        address indexed voter,\r\n        uint256 indexed poll_id,\r\n        bool[4] answers\r\n    );\r\n    \r\n    address owner;\r\n    proposal public running_proposal;\r\n    IERC20 weight_token;\r\n\r\n    constructor(address _addy) {\r\n        owner = msg.sender;\r\n        weight_token = IERC20(_addy);\r\n    }\r\n    \r\n    \r\n    function create_proposal(string[4] memory text_info, uint256 _expiry) public{\r\n        require(msg.sender == owner, \"only Owner\");\r\n        running_proposal = proposal(text_info, _expiry, block.number);\r\n    }\r\n    \r\n    function vote(bool[4] memory y_n) public{\r\n        require(weight_token.balanceOf(msg.sender) > 0, \"0 XFT balance: you aren't allowed to vote!\");\r\n        require(block.timestamp < running_proposal.expiry_time, \"proposal expired\");\r\n\r\n        emit push_vote(msg.sender, running_proposal.poll_id, y_n);\r\n    }\r\n    \r\n    function done() view public returns(uint256, bool){\r\n        return (block.timestamp, block.timestamp < running_proposal.expiry_time);\r\n    }\r\n    \r\n    function show_questions() view public returns(string[4] memory){\r\n        return running_proposal.propsal_info;\r\n    }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addy\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"voter\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"poll_id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool[4]\",\"name\":\"answers\",\"type\":\"bool[4]\"}],\"name\":\"push_vote\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"string[4]\",\"name\":\"text_info\",\"type\":\"string[4]\"},{\"internalType\":\"uint256\",\"name\":\"_expiry\",\"type\":\"uint256\"}],\"name\":\"create_proposal\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"done\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"running_proposal\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"expiry_time\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"poll_id\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"show_questions\",\"outputs\":[{\"internalType\":\"string[4]\",\"name\":\"\",\"type\":\"string[4]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool[4]\",\"name\":\"y_n\",\"type\":\"bool[4]\"}],\"name\":\"vote\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"XFT_DAO","CompilerVersion":"v0.8.1+commit.df193b15","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"000000000000000000000000abe580e7ee158da464b51ee1a83ac0289622e6be","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://f6c0e2c56ab61cc5bd3ed8fd17f92c3015aad3a582b697c121a7d8e9f75ee595"}]}