{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity =0.8.0;\r\n\r\ninterface IERC20 {\r\n    function totalSupply() external view returns (uint256);\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function transfer(address to, uint256 amount) external returns (bool);\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n    function transferFrom(address sender, address to, uint256 amount) external returns (bool);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\ncontract Ownable {\r\n    address public owner;\r\n    address public newOwner;\r\n\r\n    event OwnershipTransferred(address indexed from, address indexed to);\r\n\r\n    constructor() {\r\n        owner = msg.sender;\r\n        emit OwnershipTransferred(address(0), owner);\r\n    }\r\n\r\n    modifier onlyOwner {\r\n        require(msg.sender == owner, \"Ownable: Caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    function transferOwnership(address transferOwner) external onlyOwner {\r\n        require(transferOwner != newOwner);\r\n        newOwner = transferOwner;\r\n    }\r\n\r\n    function acceptOwnership() virtual public {\r\n        require(msg.sender == newOwner);\r\n        emit OwnershipTransferred(owner, newOwner);\r\n        owner = newOwner;\r\n        newOwner = address(0);\r\n    }\r\n}\r\n\r\nlibrary TransferHelper {\r\n    function safeApprove(address token, address to, uint value) internal {\r\n        // bytes4(keccak256(bytes('approve(address,uint256)')));\r\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x095ea7b3, to, value));\r\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'TransferHelper: APPROVE_FAILED');\r\n    }\r\n\r\n    function safeTransfer(address token, address to, uint value) internal {\r\n        // bytes4(keccak256(bytes('transfer(address,uint256)')));\r\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0xa9059cbb, to, value));\r\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'TransferHelper: TRANSFER_FAILED');\r\n    }\r\n\r\n    function safeTransferFrom(address token, address from, address to, uint value) internal {\r\n        // bytes4(keccak256(bytes('transferFrom(address,address,uint256)')));\r\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x23b872dd, from, to, value));\r\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'TransferHelper: TRANSFER_FROM_FAILED');\r\n    }\r\n\r\n    function safeTransferETH(address to, uint value) internal {\r\n        (bool success,) = to.call{value:value}(new bytes(0));\r\n        require(success, 'TransferHelper: ETH_TRANSFER_FAILED');\r\n    }\r\n}\r\n\r\ncontract ERC20ToBEP20Wrapper is Ownable {\r\n    struct UnwrapInfo {\r\n        uint amount;\r\n        uint fee;\r\n        uint bscNonce;\r\n    }\r\n\r\n    IERC20 public immutable NBU;\r\n    uint public minWrapAmount;\r\n\r\n    mapping(address => uint) public userWrapNonces;\r\n    mapping(address => uint) public userUnwrapNonces;\r\n    mapping(address => mapping(uint => uint)) public bscToEthUserUnwrapNonces;\r\n    mapping(address => mapping(uint => uint)) public wraps;\r\n    mapping(address => mapping(uint => UnwrapInfo)) public unwraps;\r\n\r\n    event Wrap(address indexed user, uint indexed wrapNonce, uint amount);\r\n    event Unwrap(address indexed user, uint indexed unwrapNonce, uint indexed bscNonce, uint amount, uint fee);\r\n    event UpdateMinWrapAmount(uint indexed amount);\r\n    event Rescue(address indexed to, uint amount);\r\n    event RescueToken(address token, address indexed to, uint amount);\r\n\r\n    constructor(address nbu) {\r\n        NBU = IERC20(nbu);\r\n    }\r\n    \r\n    function wrap(uint amount) external {\r\n        require(amount >= minWrapAmount, \"ERC20ToBEP20Wrapper: Value too small\");\r\n        \r\n        require(NBU.transferFrom(msg.sender, address(this), amount), \"ERC20ToBEP20Wrapper: Error transferring\");\r\n        uint userWrapNonce = ++userWrapNonces[msg.sender];\r\n        wraps[msg.sender][userWrapNonce] = amount;\r\n        emit Wrap(msg.sender, userWrapNonce, amount);\r\n    }\r\n\r\n    function unwrapBatch(address[] memory users, uint[] memory amounts, uint[] memory fees, uint[] memory bscNonces) external onlyOwner {\r\n        require(users.length == amounts.length && users.length == fees.length && users.length == bscNonces.length, \"ERC20ToBEP20Wrapper: wrong lengths\");\r\n        for (uint256 i = 0; i < users.length; i++) {\r\n            _unwrap(users[i], amounts[i], fees[i], bscNonces[i]);\r\n        }\r\n    }\r\n\r\n    function unwrap(address user, uint amount, uint fee, uint bscNonce) external onlyOwner {\r\n        _unwrap(user, amount, fee, bscNonce);\r\n    }\r\n\r\n    function _unwrap(address user, uint amount, uint fee, uint bscNonce) private {\r\n        require(user != address(0), \"ERC20ToBEP20Wrapper: Can't be zero address\");\r\n        require(bscToEthUserUnwrapNonces[user][bscNonce] == 0, \"ERC20ToBEP20Wrapper: Already processed\");\r\n        require(amount >= fee, \"ERC20ToBEP20Wrapper: Fee ig greater than amount\");\r\n        \r\n        require(NBU.transfer(user, amount - fee), \"ERC20ToBEP20Wrapper: Error transferring\");\r\n        uint unwrapNonce = ++userUnwrapNonces[user];\r\n        bscToEthUserUnwrapNonces[user][bscNonce] = unwrapNonce;\r\n        unwraps[user][unwrapNonce].amount = amount;\r\n        unwraps[user][unwrapNonce].fee = fee;\r\n        unwraps[user][unwrapNonce].bscNonce = bscNonce;\r\n        emit Unwrap(user, unwrapNonce, bscNonce, amount, fee);\r\n    }\r\n\r\n    //Admin functions\r\n    function rescue(address payable to, uint256 amount) external onlyOwner {\r\n        require(to != address(0), \"ERC20ToBEP20Wrapper: Can't be zero address\");\r\n        require(amount > 0, \"ERC20ToBEP20Wrapper: Should be greater than 0\");\r\n        TransferHelper.safeTransferETH(to, amount);\r\n        emit Rescue(to, amount);\r\n    }\r\n\r\n    function rescue(address to, address token, uint256 amount) external onlyOwner {\r\n        require(to != address(0), \"ERC20ToBEP20Wrapper: Can't be zero address\");\r\n        require(amount > 0, \"ERC20ToBEP20Wrapper: Should be greater than 0\");\r\n        TransferHelper.safeTransfer(token, to, amount);\r\n        emit RescueToken(token, to, amount);\r\n    }\r\n\r\n    function updateMinWrapAmount(uint amount) external onlyOwner {\r\n        require(amount > 0, \"ERC20ToBEP20Wrapper: Should be greater than 0\");\r\n        minWrapAmount = amount;\r\n        emit UpdateMinWrapAmount(amount);\r\n    }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"nbu\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Rescue\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"RescueToken\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"unwrapNonce\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"bscNonce\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"}],\"name\":\"Unwrap\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"UpdateMinWrapAmount\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"wrapNonce\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Wrap\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"NBU\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"acceptOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"bscToEthUserUnwrapNonces\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minWrapAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"newOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"rescue\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"rescue\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"transferOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"bscNonce\",\"type\":\"uint256\"}],\"name\":\"unwrap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"users\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"fees\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"bscNonces\",\"type\":\"uint256[]\"}],\"name\":\"unwrapBatch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"unwraps\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"bscNonce\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"updateMinWrapAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userUnwrapNonces\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userWrapNonces\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"wrap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"wraps\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"ERC20ToBEP20Wrapper","CompilerVersion":"v0.8.0+commit.c7dfd78e","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000eb58343b36c7528f23caae63a150240241310049","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"ipfs://ffc30e558fe78cac996f1465588332da6c9ede04b1fec7074996b7ad6eb21a83"}]}