{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"./contracts/dao/TimelockedDelegator.sol\": {\r\n      \"content\": \"pragma solidity ^0.6.0;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"./ITimelockedDelegator.sol\\\";\\nimport \\\"../utils/LinearTokenTimelock.sol\\\";\\n\\n/// @title a proxy delegate contract for TRIBE\\n/// @author Fei Protocol\\ncontract Delegatee is Ownable {\\n    ITribe public tribe;\\n\\n    /// @notice Delegatee constructor\\n    /// @param _delegatee the address to delegate TRIBE to\\n    /// @param _tribe the TRIBE token address\\n    constructor(address _delegatee, address _tribe) public {\\n        tribe = ITribe(_tribe);\\n        tribe.delegate(_delegatee);\\n    }\\n\\n    /// @notice send TRIBE back to timelock and selfdestruct\\n    function withdraw() public onlyOwner {\\n        ITribe _tribe = tribe;\\n        uint256 balance = _tribe.balanceOf(address(this));\\n        _tribe.transfer(owner(), balance);\\n        selfdestruct(payable(owner()));\\n    }\\n}\\n\\n/// @title a timelock for TRIBE allowing for sub-delegation\\n/// @author Fei Protocol\\n/// @notice allows the timelocked TRIBE to be delegated by the beneficiary while locked\\ncontract TimelockedDelegator is ITimelockedDelegator, LinearTokenTimelock {\\n    /// @notice associated delegate proxy contract for a delegatee\\n    mapping(address => address) public override delegateContract;\\n\\n    /// @notice associated delegated amount of TRIBE for a delegatee\\n    /// @dev Using as source of truth to prevent accounting errors by transferring to Delegate contracts\\n    mapping(address => uint256) public override delegateAmount;\\n\\n    /// @notice the TRIBE token contract\\n    ITribe public override tribe;\\n\\n    /// @notice the total delegated amount of TRIBE\\n    uint256 public override totalDelegated;\\n\\n    /// @notice Delegatee constructor\\n    /// @param _tribe the TRIBE token address\\n    /// @param _beneficiary default delegate, admin, and timelock beneficiary\\n    /// @param _duration duration of the token timelock window\\n    constructor(\\n        address _tribe,\\n        address _beneficiary,\\n        uint256 _duration\\n    ) public LinearTokenTimelock(_beneficiary, _duration, _tribe) {\\n        tribe = ITribe(_tribe);\\n        tribe.delegate(_beneficiary);\\n    }\\n\\n    /// @notice delegate locked TRIBE to a delegatee\\n    /// @param delegatee the target address to delegate to\\n    /// @param amount the amount of TRIBE to delegate. Will increment existing delegated TRIBE\\n    function delegate(address delegatee, uint256 amount)\\n        public\\n        override\\n        onlyBeneficiary\\n    {\\n        require(\\n            amount <= _tribeBalance(),\\n            \\\"TimelockedDelegator: Not enough Tribe\\\"\\n        );\\n\\n        // withdraw and include an existing delegation\\n        if (delegateContract[delegatee] != address(0)) {\\n            amount = amount.add(undelegate(delegatee));\\n        }\\n\\n        ITribe _tribe = tribe;\\n        address _delegateContract =\\n            address(new Delegatee(delegatee, address(_tribe)));\\n        delegateContract[delegatee] = _delegateContract;\\n\\n        delegateAmount[delegatee] = amount;\\n        totalDelegated = totalDelegated.add(amount);\\n\\n        _tribe.transfer(_delegateContract, amount);\\n\\n        emit Delegate(delegatee, amount);\\n    }\\n\\n    /// @notice return delegated TRIBE to the timelock\\n    /// @param delegatee the target address to undelegate from\\n    /// @return the amount of TRIBE returned\\n    function undelegate(address delegatee)\\n        public\\n        override\\n        onlyBeneficiary\\n        returns (uint256)\\n    {\\n        address _delegateContract = delegateContract[delegatee];\\n        require(\\n            _delegateContract != address(0),\\n            \\\"TimelockedDelegator: Delegate contract nonexistent\\\"\\n        );\\n\\n        Delegatee(_delegateContract).withdraw();\\n\\n        uint256 amount = delegateAmount[delegatee];\\n        totalDelegated = totalDelegated.sub(amount);\\n\\n        delegateContract[delegatee] = address(0);\\n        delegateAmount[delegatee] = 0;\\n\\n        emit Undelegate(delegatee, amount);\\n\\n        return amount;\\n    }\\n\\n    /// @notice calculate total TRIBE held plus delegated\\n    /// @dev used by LinearTokenTimelock to determine the released amount\\n    function totalToken() public view override returns (uint256) {\\n        return _tribeBalance().add(totalDelegated);\\n    }\\n\\n    /// @notice accept beneficiary role over timelocked TRIBE. Delegates all held (non-subdelegated) tribe to beneficiary\\n    function acceptBeneficiary() public override {\\n        _setBeneficiary(msg.sender);\\n        tribe.delegate(msg.sender);\\n    }\\n\\n    function _tribeBalance() internal view returns (uint256) {\\n        return tribe.balanceOf(address(this));\\n    }\\n}\\n\"\r\n    },\r\n    \"./contracts/dao/ITimelockedDelegator.sol\": {\r\n      \"content\": \"pragma solidity ^0.6.0;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"../token/IFei.sol\\\";\\n\\ninterface ITribe is IERC20 {\\n    function delegate(address delegatee) external;\\n}\\n\\n/// @title TimelockedDelegator interface\\n/// @author Fei Protocol\\ninterface ITimelockedDelegator {\\n    // ----------- Events -----------\\n\\n    event Delegate(address indexed _delegatee, uint256 _amount);\\n\\n    event Undelegate(address indexed _delegatee, uint256 _amount);\\n\\n    // ----------- Beneficiary only state changing api -----------\\n\\n    function delegate(address delegatee, uint256 amount) external;\\n\\n    function undelegate(address delegatee) external returns (uint256);\\n\\n    // ----------- Getters -----------\\n\\n    function delegateContract(address delegatee)\\n        external\\n        view\\n        returns (address);\\n\\n    function delegateAmount(address delegatee) external view returns (uint256);\\n\\n    function totalDelegated() external view returns (uint256);\\n\\n    function tribe() external view returns (ITribe);\\n}\\n\"\r\n    },\r\n    \"./contracts/token/IFei.sol\": {\r\n      \"content\": \"pragma solidity ^0.6.2;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\n/// @title FEI stablecoin interface\\n/// @author Fei Protocol\\ninterface IFei is IERC20 {\\n    // ----------- Events -----------\\n\\n    event Minting(\\n        address indexed _to,\\n        address indexed _minter,\\n        uint256 _amount\\n    );\\n\\n    event Burning(\\n        address indexed _to,\\n        address indexed _burner,\\n        uint256 _amount\\n    );\\n\\n    event IncentiveContractUpdate(\\n        address indexed _incentivized,\\n        address indexed _incentiveContract\\n    );\\n\\n    // ----------- State changing api -----------\\n\\n    function burn(uint256 amount) external;\\n\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    // ----------- Burner only state changing api -----------\\n\\n    function burnFrom(address account, uint256 amount) external;\\n\\n    // ----------- Minter only state changing api -----------\\n\\n    function mint(address account, uint256 amount) external;\\n\\n    // ----------- Governor only state changing api -----------\\n\\n    function setIncentiveContract(address account, address incentive) external;\\n\\n    // ----------- Getters -----------\\n\\n    function incentiveContract(address account) external view returns (address);\\n}\\n\"\r\n    },\r\n    \"./contracts/utils/LinearTokenTimelock.sol\": {\r\n      \"content\": \"pragma solidity ^0.6.0;\\n\\n// Inspired by OpenZeppelin TokenTimelock contract\\n// Reference: https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/token/ERC20/TokenTimelock.sol\\n\\nimport \\\"./Timed.sol\\\";\\nimport \\\"./ILinearTokenTimelock.sol\\\";\\nimport \\\"../external/SafeMathCopy.sol\\\";\\n\\ncontract LinearTokenTimelock is ILinearTokenTimelock, Timed {\\n    using SafeMathCopy for uint256;\\n\\n    /// @notice ERC20 basic token contract being held in timelock\\n    IERC20 public override lockedToken;\\n\\n    /// @notice beneficiary of tokens after they are released\\n    address public override beneficiary;\\n\\n    /// @notice pending beneficiary appointed by current beneficiary\\n    address public override pendingBeneficiary;\\n\\n    /// @notice initial balance of lockedToken\\n    uint256 public override initialBalance;\\n\\n    uint256 internal lastBalance;\\n\\n    constructor(\\n        address _beneficiary,\\n        uint256 _duration,\\n        address _lockedToken\\n    ) public Timed(_duration) {\\n        require(_duration != 0, \\\"LinearTokenTimelock: duration is 0\\\");\\n        require(\\n            _beneficiary != address(0),\\n            \\\"LinearTokenTimelock: Beneficiary must not be 0 address\\\"\\n        );\\n\\n        beneficiary = _beneficiary;\\n        _initTimed();\\n\\n        _setLockedToken(_lockedToken);\\n    }\\n\\n    // Prevents incoming LP tokens from messing up calculations\\n    modifier balanceCheck() {\\n        if (totalToken() > lastBalance) {\\n            uint256 delta = totalToken().sub(lastBalance);\\n            initialBalance = initialBalance.add(delta);\\n        }\\n        _;\\n        lastBalance = totalToken();\\n    }\\n\\n    modifier onlyBeneficiary() {\\n        require(\\n            msg.sender == beneficiary,\\n            \\\"LinearTokenTimelock: Caller is not a beneficiary\\\"\\n        );\\n        _;\\n    }\\n\\n    /// @notice releases `amount` unlocked tokens to address `to`\\n    function release(address to, uint256 amount) external override onlyBeneficiary balanceCheck {\\n        require(amount != 0, \\\"LinearTokenTimelock: no amount desired\\\");\\n\\n        uint256 available = availableForRelease();\\n        require(amount <= available, \\\"LinearTokenTimelock: not enough released tokens\\\");\\n\\n        _release(to, amount);\\n    }\\n\\n    /// @notice releases maximum unlocked tokens to address `to`\\n    function releaseMax(address to) external override onlyBeneficiary balanceCheck {\\n        _release(to, availableForRelease());\\n    }\\n\\n    /// @notice the total amount of tokens held by timelock\\n    function totalToken() public view override virtual returns (uint256) {\\n        return lockedToken.balanceOf(address(this));\\n    }\\n\\n    /// @notice amount of tokens released to beneficiary\\n    function alreadyReleasedAmount() public view override returns (uint256) {\\n        return initialBalance.sub(totalToken());\\n    }\\n\\n    /// @notice amount of held tokens unlocked and available for release\\n    function availableForRelease() public view override returns (uint256) {\\n        uint256 elapsed = timeSinceStart();\\n        uint256 _duration = duration;\\n\\n        uint256 totalAvailable = initialBalance.mul(elapsed) / _duration;\\n        uint256 netAvailable = totalAvailable.sub(alreadyReleasedAmount());\\n        return netAvailable;\\n    }\\n\\n    /// @notice current beneficiary can appoint new beneficiary, which must be accepted\\n    function setPendingBeneficiary(address _pendingBeneficiary)\\n        public\\n        override\\n        onlyBeneficiary\\n    {\\n        pendingBeneficiary = _pendingBeneficiary;\\n        emit PendingBeneficiaryUpdate(_pendingBeneficiary);\\n    }\\n\\n    /// @notice pending beneficiary accepts new beneficiary\\n    function acceptBeneficiary() public override virtual {\\n        _setBeneficiary(msg.sender);\\n    }\\n\\n    function _setBeneficiary(address newBeneficiary) internal {\\n        require(\\n            newBeneficiary == pendingBeneficiary,\\n            \\\"LinearTokenTimelock: Caller is not pending beneficiary\\\"\\n        );\\n        beneficiary = newBeneficiary;\\n        emit BeneficiaryUpdate(newBeneficiary);\\n        pendingBeneficiary = address(0);\\n    }\\n\\n    function _setLockedToken(address tokenAddress) internal {\\n        lockedToken = IERC20(tokenAddress);\\n    }\\n\\n    function _release(address to, uint256 amount) internal {\\n        lockedToken.transfer(to, amount);\\n        emit Release(beneficiary, to, amount);\\n    }\\n}\\n\"\r\n    },\r\n    \"./contracts/utils/Timed.sol\": {\r\n      \"content\": \"pragma solidity ^0.6.0;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"@openzeppelin/contracts/utils/SafeCast.sol\\\";\\n\\n/// @title an abstract contract for timed events\\n/// @author Fei Protocol\\nabstract contract Timed {\\n    using SafeCast for uint256;\\n\\n    /// @notice the start timestamp of the timed period\\n    uint256 public startTime;\\n\\n    /// @notice the duration of the timed period\\n    uint256 public duration;\\n\\n    event DurationUpdate(uint256 _duration);\\n\\n    event TimerReset(uint256 _startTime);\\n\\n    constructor(uint256 _duration) public {\\n        _setDuration(_duration);\\n    }\\n\\n    modifier duringTime() {\\n        require(isTimeStarted(), \\\"Timed: time not started\\\");\\n        require(!isTimeEnded(), \\\"Timed: time ended\\\");\\n        _;\\n    }\\n\\n    modifier afterTime() {\\n        require(isTimeEnded(), \\\"Timed: time not ended\\\");\\n        _;\\n    }\\n\\n    /// @notice return true if time period has ended\\n    function isTimeEnded() public view returns (bool) {\\n        return remainingTime() == 0;\\n    }\\n\\n    /// @notice number of seconds remaining until time is up\\n    /// @return remaining\\n    function remainingTime() public view returns (uint256) {\\n        return duration - timeSinceStart(); // duration always >= timeSinceStart which is on [0,d]\\n    }\\n\\n    /// @notice number of seconds since contract was initialized\\n    /// @return timestamp\\n    /// @dev will be less than or equal to duration\\n    function timeSinceStart() public view returns (uint256) {\\n        if (!isTimeStarted()) {\\n            return 0; // uninitialized\\n        }\\n        uint256 _duration = duration;\\n        // solhint-disable-next-line not-rely-on-time\\n        uint256 timePassed = block.timestamp - startTime; // block timestamp always >= startTime\\n        return timePassed > _duration ? _duration : timePassed;\\n    }\\n\\n    function isTimeStarted() public view returns (bool) {\\n        return startTime != 0;\\n    }\\n\\n    function _initTimed() internal {\\n        // solhint-disable-next-line not-rely-on-time\\n        startTime = block.timestamp;\\n        \\n        // solhint-disable-next-line not-rely-on-time\\n        emit TimerReset(block.timestamp);\\n    }\\n\\n    function _setDuration(uint _duration) internal {\\n        duration = _duration;\\n        emit DurationUpdate(_duration);\\n    }\\n}\\n\"\r\n    },\r\n    \"./contracts/utils/ILinearTokenTimelock.sol\": {\r\n      \"content\": \"pragma solidity ^0.6.2;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\n/// @title LinearTokenTimelock interface\\n/// @author Fei Protocol\\ninterface ILinearTokenTimelock {\\n    // ----------- Events -----------\\n\\n    event Release(address indexed _beneficiary, address indexed _recipient, uint256 _amount);\\n    event BeneficiaryUpdate(address indexed _beneficiary);\\n    event PendingBeneficiaryUpdate(address indexed _pendingBeneficiary);\\n\\n    // ----------- State changing api -----------\\n\\n    function release(address to, uint amount) external;\\n\\n    function releaseMax(address to) external;\\n\\n    function setPendingBeneficiary(address _pendingBeneficiary) external;\\n\\n    function acceptBeneficiary() external;\\n\\n\\n    // ----------- Getters -----------\\n\\n    function lockedToken() external view returns (IERC20);\\n\\n    function beneficiary() external view returns (address);\\n\\n    function pendingBeneficiary() external view returns (address);\\n\\n    function initialBalance() external view returns (uint256);\\n\\n    function availableForRelease() external view returns (uint256);\\n\\n    function totalToken() external view returns(uint256);\\n\\n    function alreadyReleasedAmount() external view returns (uint256);\\n}\\n\"\r\n    },\r\n    \"./contracts/external/SafeMathCopy.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMathCopy { // To avoid namespace collision between openzeppelin safemath and uniswap safemath\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return sub(a, b, \\\"SafeMath: subtraction overflow\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        uint256 c = a - b;\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        uint256 c = a / b;\\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return mod(a, b, \\\"SafeMath: modulo by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts with custom message when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b != 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor () internal {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/SafeCast.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n\\n/**\\n * @dev Wrappers over Solidity's uintXX/intXX casting operators with added overflow\\n * checks.\\n *\\n * Downcasting from uint256/int256 in Solidity does not revert on overflow. This can\\n * easily result in undesired exploitation or bugs, since developers usually\\n * assume that overflows raise errors. `SafeCast` restores this intuition by\\n * reverting the transaction when such an operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n *\\n * Can be combined with {SafeMath} and {SignedSafeMath} to extend it to smaller types, by performing\\n * all math on `uint256` and `int256` and then downcasting.\\n */\\nlibrary SafeCast {\\n\\n    /**\\n     * @dev Returns the downcasted uint128 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint128).\\n     *\\n     * Counterpart to Solidity's `uint128` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 128 bits\\n     */\\n    function toUint128(uint256 value) internal pure returns (uint128) {\\n        require(value < 2**128, \\\"SafeCast: value doesn\\\\'t fit in 128 bits\\\");\\n        return uint128(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint64 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint64).\\n     *\\n     * Counterpart to Solidity's `uint64` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 64 bits\\n     */\\n    function toUint64(uint256 value) internal pure returns (uint64) {\\n        require(value < 2**64, \\\"SafeCast: value doesn\\\\'t fit in 64 bits\\\");\\n        return uint64(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint32 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint32).\\n     *\\n     * Counterpart to Solidity's `uint32` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 32 bits\\n     */\\n    function toUint32(uint256 value) internal pure returns (uint32) {\\n        require(value < 2**32, \\\"SafeCast: value doesn\\\\'t fit in 32 bits\\\");\\n        return uint32(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint16 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint16).\\n     *\\n     * Counterpart to Solidity's `uint16` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 16 bits\\n     */\\n    function toUint16(uint256 value) internal pure returns (uint16) {\\n        require(value < 2**16, \\\"SafeCast: value doesn\\\\'t fit in 16 bits\\\");\\n        return uint16(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint8 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint8).\\n     *\\n     * Counterpart to Solidity's `uint8` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 8 bits.\\n     */\\n    function toUint8(uint256 value) internal pure returns (uint8) {\\n        require(value < 2**8, \\\"SafeCast: value doesn\\\\'t fit in 8 bits\\\");\\n        return uint8(value);\\n    }\\n\\n    /**\\n     * @dev Converts a signed int256 into an unsigned uint256.\\n     *\\n     * Requirements:\\n     *\\n     * - input must be greater than or equal to 0.\\n     */\\n    function toUint256(int256 value) internal pure returns (uint256) {\\n        require(value >= 0, \\\"SafeCast: value must be positive\\\");\\n        return uint256(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int128 from int256, reverting on\\n     * overflow (when the input is less than smallest int128 or\\n     * greater than largest int128).\\n     *\\n     * Counterpart to Solidity's `int128` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 128 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt128(int256 value) internal pure returns (int128) {\\n        require(value >= -2**127 && value < 2**127, \\\"SafeCast: value doesn\\\\'t fit in 128 bits\\\");\\n        return int128(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int64 from int256, reverting on\\n     * overflow (when the input is less than smallest int64 or\\n     * greater than largest int64).\\n     *\\n     * Counterpart to Solidity's `int64` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 64 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt64(int256 value) internal pure returns (int64) {\\n        require(value >= -2**63 && value < 2**63, \\\"SafeCast: value doesn\\\\'t fit in 64 bits\\\");\\n        return int64(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int32 from int256, reverting on\\n     * overflow (when the input is less than smallest int32 or\\n     * greater than largest int32).\\n     *\\n     * Counterpart to Solidity's `int32` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 32 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt32(int256 value) internal pure returns (int32) {\\n        require(value >= -2**31 && value < 2**31, \\\"SafeCast: value doesn\\\\'t fit in 32 bits\\\");\\n        return int32(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int16 from int256, reverting on\\n     * overflow (when the input is less than smallest int16 or\\n     * greater than largest int16).\\n     *\\n     * Counterpart to Solidity's `int16` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 16 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt16(int256 value) internal pure returns (int16) {\\n        require(value >= -2**15 && value < 2**15, \\\"SafeCast: value doesn\\\\'t fit in 16 bits\\\");\\n        return int16(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int8 from int256, reverting on\\n     * overflow (when the input is less than smallest int8 or\\n     * greater than largest int8).\\n     *\\n     * Counterpart to Solidity's `int8` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 8 bits.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt8(int256 value) internal pure returns (int8) {\\n        require(value >= -2**7 && value < 2**7, \\\"SafeCast: value doesn\\\\'t fit in 8 bits\\\");\\n        return int8(value);\\n    }\\n\\n    /**\\n     * @dev Converts an unsigned uint256 into a signed int256.\\n     *\\n     * Requirements:\\n     *\\n     * - input must be less than or equal to maxInt256.\\n     */\\n    function toInt256(uint256 value) internal pure returns (int256) {\\n        require(value < 2**255, \\\"SafeCast: value doesn't fit in an int256\\\");\\n        return int256(value);\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"metadata\": {\r\n      \"useLiteralContent\": true\r\n    },\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tribe\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_beneficiary\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_duration\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_beneficiary\",\"type\":\"address\"}],\"name\":\"BeneficiaryUpdate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_delegatee\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"Delegate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_duration\",\"type\":\"uint256\"}],\"name\":\"DurationUpdate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_pendingBeneficiary\",\"type\":\"address\"}],\"name\":\"PendingBeneficiaryUpdate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_beneficiary\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_recipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"Release\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_startTime\",\"type\":\"uint256\"}],\"name\":\"TimerReset\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_delegatee\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"Undelegate\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"acceptBeneficiary\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"alreadyReleasedAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"availableForRelease\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"beneficiary\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"delegatee\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"delegate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"delegateAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"delegateContract\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"duration\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initialBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isTimeEnded\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isTimeStarted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lockedToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pendingBeneficiary\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"release\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"releaseMax\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"remainingTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_pendingBeneficiary\",\"type\":\"address\"}],\"name\":\"setPendingBeneficiary\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"timeSinceStart\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalDelegated\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tribe\",\"outputs\":[{\"internalType\":\"contract ITribe\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"delegatee\",\"type\":\"address\"}],\"name\":\"undelegate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"TimelockedDelegator","CompilerVersion":"v0.6.6+commit.6c089d02","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000c7283b66eb1eb5fb86327f08e1b5816b0720212b000000000000000000000000b8f482539f2d3ae2c9ea6076894df36d1f632775000000000000000000000000000000000000000000000000000000000784ce00","EVMVersion":"Default","Library":"","LicenseType":"Unknown","Proxy":"0","Implementation":"","SwarmSource":"ipfs://06f2ef7ff1d6d1333faa5b157baa1f2fe6aba4e80ba5831f4df08ace524cef51"}]}