{"status":"1","message":"OK","result":[{"SourceCode":"// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.0;\r\n\r\ninterface IERC721 {\r\n    function getTokenDetails(uint256 index) external view returns (uint32 aType, uint32 customDetails, uint32 lastTx, uint32 lastPayment, uint256 initialvalue, string memory coin);\r\n    function balanceOf(address owner) external view returns (uint256 balance);\r\n    function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256 tokenId);\r\n}\r\n\r\ncontract Ownable {\r\n\r\n    address private owner;\r\n    \r\n    event OwnerSet(address indexed oldOwner, address indexed newOwner);\r\n    \r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner, \"Caller is not owner\");\r\n        _;\r\n    }\r\n\r\n    constructor() {\r\n        owner = msg.sender; // 'msg.sender' is sender of current call, contract deployer for a constructor\r\n        emit OwnerSet(address(0), owner);\r\n    }\r\n\r\n\r\n    function changeOwner(address newOwner) public onlyOwner {\r\n        emit OwnerSet(owner, newOwner);\r\n        owner = newOwner;\r\n    }\r\n\r\n    function getOwner() external view returns (address) {\r\n        return owner;\r\n    }\r\n}\r\n\r\ncontract MarketFees is Ownable {\r\n    IERC721 nftContract;\r\n    struct FeeFactor {\r\n        uint256 mulFactor;\r\n        uint256 divFactor;\r\n    }\r\n    mapping (uint32 => bool) public zerofeeAssets;\r\n    mapping (address => FeeFactor) public tokenFee;\r\n    \r\n    uint256 public ethFeeFactor;\r\n    \r\n    constructor() {\r\n        nftContract = IERC721(0xB20217bf3d89667Fa15907971866acD6CcD570C8);\r\n        zerofeeAssets[24] = true;\r\n    }\r\n    \r\n    \r\n    function calcByToken(address _seller, address _token, uint256 _amount) public view returns (uint256 fee) {\r\n        if (tokenFee[_token].mulFactor == 0) {\r\n            return (0);\r\n        } else {\r\n            if (checkZeroFeeAsset(_seller)) {\r\n                return (0);\r\n            } else {\r\n                return ((_amount*tokenFee[_token].mulFactor)/tokenFee[_token].divFactor);\r\n            }\r\n        }\r\n        \r\n    }\r\n    \r\n    function checkZeroFeeAsset(address _seller) private view returns (bool free) {\r\n        uint256 assetCount = nftContract.balanceOf(_seller);\r\n        bool freeTrade;\r\n  \r\n        for (uint i=0; i<assetCount; i++) {\r\n            (uint32 assetType,,,,,) = (nftContract.getTokenDetails(nftContract.tokenOfOwnerByIndex(_seller, i)));\r\n            if (zerofeeAssets[assetType] == true) {\r\n                freeTrade = true;\r\n                break;\r\n            }\r\n        }\r\n        return (freeTrade);\r\n    }\r\n    \r\n    function calcByEth(address _seller, uint256 _amount) public view returns (uint256 fee) {\r\n        if (ethFeeFactor == 0) {\r\n            return (0);\r\n        } else {\r\n            if (checkZeroFeeAsset(_seller)) {\r\n                return (0);\r\n            } else {\r\n                return ((_amount*ethFeeFactor)/1000);\r\n            }\r\n        }\r\n    }\r\n    \r\n    function setTokenFee(address _token, uint256 _mulFactor, uint256 _divFactor) public onlyOwner {\r\n        tokenFee[_token].mulFactor = _mulFactor;\r\n        tokenFee[_token].divFactor = _divFactor;\r\n    }\r\n    \r\n    function setEthFee(uint256 _fee) public onlyOwner {\r\n        ethFeeFactor = _fee;\r\n    }\r\n    \r\n    \r\n    \r\n}","ABI":"[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnerSet\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_seller\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"calcByEth\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_seller\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"calcByToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"changeOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ethFeeFactor\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_fee\",\"type\":\"uint256\"}],\"name\":\"setEthFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_mulFactor\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_divFactor\",\"type\":\"uint256\"}],\"name\":\"setTokenFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"tokenFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"mulFactor\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"divFactor\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"name\":\"zerofeeAssets\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"MarketFees","CompilerVersion":"v0.8.0+commit.c7dfd78e","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://8b3b2324c115e679b0e4db9d70c122b8b33de7ec3820ce391950c3cd52be817e"}]}