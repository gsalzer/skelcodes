{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/peaks/yearn/YVaultPeak.sol\": {\r\n      \"content\": \"pragma solidity 0.5.17;\\n\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport {SafeERC20, SafeMath} from \\\"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\\\";\\nimport {Math} from \\\"@openzeppelin/contracts/math/Math.sol\\\";\\n\\nimport {ICurve} from \\\"../../interfaces/ICurve.sol\\\";\\nimport {ICore} from \\\"../../interfaces/ICore.sol\\\";\\nimport {IPeak} from \\\"../../interfaces/IPeak.sol\\\";\\nimport {IController} from \\\"../../interfaces/IController.sol\\\";\\n\\nimport {Initializable} from \\\"../../common/Initializable.sol\\\";\\nimport {OwnableProxy} from \\\"../../common/OwnableProxy.sol\\\";\\n\\ncontract YVaultPeak is OwnableProxy, Initializable, IPeak {\\n    using SafeERC20 for IERC20;\\n    using SafeMath for uint;\\n    using Math for uint;\\n\\n    string constant ERR_INSUFFICIENT_FUNDS = \\\"INSUFFICIENT_FUNDS\\\";\\n    uint constant MAX = 10000;\\n\\n    uint min;\\n    uint redeemMultiplier;\\n    uint[4] feed; // unused for now but might need later\\n\\n    ICore core;\\n    ICurve ySwap;\\n    IERC20 yCrv;\\n    IERC20 yUSD;\\n\\n    IController controller;\\n\\n    function mintWithYcrv(uint inAmount) external returns(uint dusdAmount) {\\n        yCrv.safeTransferFrom(msg.sender, address(this), inAmount);\\n        dusdAmount = calcMintWithYcrv(inAmount);\\n        core.mint(dusdAmount, msg.sender);\\n        _reBalance();\\n    }\\n\\n    // Sets minimum required on-hand to keep small withdrawals cheap\\n    function _reBalance() internal {\\n        (uint here, uint total) = yCrvDistribution();\\n        uint shouldBeHere = total.mul(min).div(MAX);\\n        if (here > shouldBeHere) {\\n            _earn(here.sub(shouldBeHere));\\n        }\\n    }\\n\\n    function _earn(uint amount) internal {\\n        IYVault(address(yUSD)).deposit(amount);\\n    }\\n\\n    function yCrvDistribution() public view returns (uint here, uint total) {\\n        here = yCrv.balanceOf(address(this));\\n        total = yUSD.balanceOf(address(this))\\n            .mul(IYVault(address(yUSD)).pricePerShare())\\n            .div(1e18)\\n            .add(here);\\n    }\\n\\n    function calcMintWithYcrv(uint inAmount) public view returns (uint dusdAmount) {\\n        return inAmount.mul(yCrvToUsd()).div(1e18);\\n    }\\n\\n    function redeemInYcrv(uint dusdAmount, uint minOut) external returns(uint _yCrv) {\\n        core.redeem(dusdAmount, msg.sender);\\n        _yCrv = dusdAmount.mul(1e18).div(yCrvToUsd()).mul(redeemMultiplier).div(MAX);\\n        uint here = yCrv.balanceOf(address(this));\\n        if (here < _yCrv) {\\n            // withdraw only as much as needed from the vault\\n            uint _withdraw = _yCrv.sub(here).mul(1e18).div(IYVault(address(yUSD)).pricePerShare());\\n            IYVault(address(yUSD)).withdraw(_withdraw);\\n            _yCrv = yCrv.balanceOf(address(this));\\n        }\\n        require(_yCrv >= minOut, ERR_INSUFFICIENT_FUNDS);\\n        yCrv.safeTransfer(msg.sender, _yCrv);\\n    }\\n\\n    function calcRedeemInYcrv(uint dusdAmount) public view returns (uint _yCrv) {\\n        _yCrv = dusdAmount.mul(1e18).div(yCrvToUsd()).mul(redeemMultiplier).div(MAX);\\n        (,uint total) = yCrvDistribution();\\n        return _yCrv.min(total);\\n    }\\n\\n    function yCrvToUsd() public view returns (uint) {\\n        return ySwap.get_virtual_price();\\n    }\\n\\n    // yUSD\\n\\n    function mintWithYusd(uint inAmount) external {\\n        yUSD.safeTransferFrom(msg.sender, address(this), inAmount);\\n        core.mint(calcMintWithYusd(inAmount), msg.sender);\\n    }\\n\\n    function calcMintWithYusd(uint inAmount) public view returns (uint dusdAmount) {\\n        return inAmount.mul(yUSDToUsd()).div(1e18);\\n    }\\n\\n    function redeemInYusd(uint dusdAmount, uint minOut) external {\\n        core.redeem(dusdAmount, msg.sender);\\n        uint r = dusdAmount.mul(1e18).div(yUSDToUsd()).mul(redeemMultiplier).div(MAX);\\n        // there should be no reason that this contract has yUSD, however being safe doesn't hurt\\n        uint here = yUSD.balanceOf(address(this));\\n        if (here < r) {\\n            // if it is still not enough, we make a best effort to deposit yCRV to yUSD\\n            _earn(yCrv.balanceOf(address(this)));\\n            r = yUSD.balanceOf(address(this));\\n        }\\n        require(r >= minOut, ERR_INSUFFICIENT_FUNDS);\\n        yUSD.safeTransfer(msg.sender, r);\\n    }\\n\\n    function calcRedeemInYusd(uint dusdAmount) public view returns (uint) {\\n        uint r = dusdAmount.mul(1e18).div(yUSDToUsd()).mul(redeemMultiplier).div(MAX);\\n        return r.min(\\n            yUSD.balanceOf(address(this))\\n            .add(yUSD.balanceOf(address(this))));\\n    }\\n\\n    function yUSDToUsd() public view returns (uint) {\\n        return IYVault(address(yUSD)).pricePerShare() // # yCrv\\n            .mul(yCrvToUsd()) // USD price\\n            .div(1e18);\\n    }\\n\\n    function portfolioValue() public view returns(uint) {\\n        (,uint total) = yCrvDistribution();\\n        return total.mul(yCrvToUsd()).div(1e18);\\n    }\\n\\n    function vars() external view returns(\\n        address _core,\\n        address _ySwap,\\n        address _yCrv,\\n        address _yUSD,\\n        uint _redeemMultiplier,\\n        uint _min\\n    ) {\\n        return(\\n            address(core),\\n            address(ySwap),\\n            address(yCrv),\\n            address(yUSD),\\n            redeemMultiplier,\\n            min\\n        );\\n    }\\n\\n    // Privileged methods\\n\\n    function setParams(uint _min, uint _redeemMultiplier) external onlyOwner {\\n        _setParams(_min, _redeemMultiplier);\\n    }\\n\\n    function _setParams(uint _min, uint _redeemMultiplier) internal {\\n        require(min <= MAX && redeemMultiplier <= MAX, \\\"Invalid\\\");\\n        min = _min;\\n        redeemMultiplier = _redeemMultiplier;\\n    }\\n\\n    // Migration\\n\\n    function migrate() external {\\n        address newYusd = 0x4B5BfD52124784745c1071dcB244C6688d2533d3;\\n        require(address(yUSD) != newYusd, \\\"ALREADY_MIGRATED\\\");\\n        uint bal = yUSD.balanceOf(address(controller));\\n        controller.withdraw(yUSD, bal);\\n        IMigrate migrator = IMigrate(0x1824df8D751704FA10FA371d62A37f9B8772ab90);\\n        yUSD.safeApprove(address(migrator), bal);\\n        migrator.migrateAll(address(yUSD), newYusd);\\n\\n        yUSD = IERC20(newYusd);\\n        IERC20 dusd = IERC20(0x5BC25f649fc4e26069dDF4cF4010F9f706c23831);\\n        require(portfolioValue() > dusd.totalSupply(), \\\"SANITY_FAILED\\\");\\n\\n        yCrv.safeApprove(newYusd, uint(-1)); // Required henceforth\\n    }\\n}\\n\\ninterface IMigrate {\\n    function migrateAll(address, address) external;\\n}\\n\\ninterface IYVault {\\n    function deposit(uint) external;\\n    function withdraw(uint) external;\\n    function pricePerShare() external view returns(uint);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"pragma solidity ^0.5.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP. Does not include\\n * the optional functions; to access them see {ERC20Detailed}.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\": {\r\n      \"content\": \"pragma solidity ^0.5.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"../../math/SafeMath.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for ERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using SafeMath for uint256;\\n    using Address for address;\\n\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        // solhint-disable-next-line max-line-length\\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\\n        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \\\"SafeERC20: decreased allowance below zero\\\");\\n        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves.\\n\\n        // A Solidity high level call has three parts:\\n        //  1. The target address is checked to verify it contains contract code\\n        //  2. The call itself is made, and success asserted\\n        //  3. The return value is decoded, which in turn checks the size of the returned data.\\n        // solhint-disable-next-line max-line-length\\n        require(address(token).isContract(), \\\"SafeERC20: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = address(token).call(data);\\n        require(success, \\\"SafeERC20: low-level call failed\\\");\\n\\n        if (returndata.length > 0) { // Return data is optional\\n            // solhint-disable-next-line max-line-length\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/math/Math.sol\": {\r\n      \"content\": \"pragma solidity ^0.5.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a >= b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow, so we distribute\\n        return (a / 2) + (b / 2) + ((a % 2 + b % 2) / 2);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/ICurve.sol\": {\r\n      \"content\": \"pragma solidity 0.5.17;\\n\\ninterface ICurveDeposit {\\n    function add_liquidity(uint[4] calldata uamounts, uint min_mint_amount) external;\\n    function remove_liquidity(uint amount, uint[4] calldata min_uamounts) external;\\n    function remove_liquidity_imbalance(uint[4] calldata uamounts, uint max_burn_amount) external;\\n    function remove_liquidity_one_coin(uint _token_amount, int128 i, uint min_uamount) external;\\n    function calc_withdraw_one_coin(uint _token_amount, int128 i) external view returns(uint);\\n}\\n\\ninterface ICurve {\\n    function add_liquidity(uint[4] calldata uamounts, uint min_mint_amount) external;\\n    function remove_liquidity_imbalance(uint[4] calldata uamounts, uint max_burn_amount) external;\\n    function remove_liquidity(uint amount, uint[4] calldata min_amounts) external;\\n    function calc_token_amount(uint[4] calldata inAmounts, bool deposit) external view returns(uint);\\n    function balances(int128 i) external view returns(uint);\\n    function get_virtual_price() external view returns(uint);\\n    function exchange(int128 i, int128 j, uint256 dx, uint256 min_dy) external;\\n    // for tests\\n    function mock_add_to_balance(uint[4] calldata amounts) external;\\n}\\n\\ninterface IUtil {\\n    function get_D(uint[4] calldata uamounts) external pure returns(uint);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/ICore.sol\": {\r\n      \"content\": \"pragma solidity 0.5.17;\\n\\ninterface ICore {\\n    function mint(uint dusdAmount, address account) external returns(uint usd);\\n    function redeem(uint dusdAmount, address account) external returns(uint usd);\\n    function harvest() external;\\n\\n    function earned() external view returns(uint);\\n    function dusdToUsd(uint _dusd, bool fee) external view returns(uint usd);\\n    function peaks(address peak) external view returns (uint,uint,uint8);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IPeak.sol\": {\r\n      \"content\": \"pragma solidity 0.5.17;\\n\\ninterface IPeak {\\n    function portfolioValue() external view returns(uint);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IController.sol\": {\r\n      \"content\": \"pragma solidity 0.5.17;\\n\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ninterface IController {\\n    function earn(address _token) external;\\n    function vaultWithdraw(IERC20 token, uint _shares) external;\\n    function withdraw(IERC20 token, uint amount) external;\\n    function getPricePerFullShare(address token) external view returns(uint);\\n}\\n\"\r\n    },\r\n    \"contracts/common/Initializable.sol\": {\r\n      \"content\": \"pragma solidity 0.5.17;\\n\\ncontract Initializable {\\n    bool initialized = false;\\n\\n    modifier notInitialized() {\\n        require(!initialized, \\\"already initialized\\\");\\n        initialized = true;\\n        _;\\n    }\\n\\n    // Reserved storage space to allow for layout changes in the future.\\n    uint256[20] private _gap;\\n\\n    function getStore(uint a) internal view returns(uint) {\\n        require(a < 20, \\\"Not allowed\\\");\\n        return _gap[a];\\n    }\\n\\n    function setStore(uint a, uint val) internal {\\n        require(a < 20, \\\"Not allowed\\\");\\n        _gap[a] = val;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/common/OwnableProxy.sol\": {\r\n      \"content\": \"pragma solidity 0.5.17;\\n\\n\\ncontract OwnableProxy {\\n    bytes32 constant OWNER_SLOT = keccak256(\\\"proxy.owner\\\");\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    constructor() internal {\\n        _transferOwnership(msg.sender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view returns(address _owner) {\\n        bytes32 position = OWNER_SLOT;\\n        assembly {\\n            _owner := sload(position)\\n        }\\n    }\\n\\n    modifier onlyOwner() {\\n        require(isOwner(), \\\"NOT_OWNER\\\");\\n        _;\\n    }\\n\\n    function isOwner() public view returns (bool) {\\n        return owner() == msg.sender;\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     */\\n    function transferOwnership(address newOwner) public onlyOwner {\\n        _transferOwnership(newOwner);\\n    }\\n\\n    function _transferOwnership(address newOwner) internal {\\n        require(newOwner != address(0), \\\"OwnableProxy: new owner is the zero address\\\");\\n        emit OwnershipTransferred(owner(), newOwner);\\n        bytes32 position = OWNER_SLOT;\\n        assembly {\\n            sstore(position, newOwner)\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/math/SafeMath.sol\": {\r\n      \"content\": \"pragma solidity ^0.5.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return sub(a, b, \\\"SafeMath: subtraction overflow\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     * - Subtraction cannot overflow.\\n     *\\n     * _Available since v2.4.0._\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        uint256 c = a - b;\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     *\\n     * _Available since v2.4.0._\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        // Solidity only automatically asserts when dividing by 0\\n        require(b > 0, errorMessage);\\n        uint256 c = a / b;\\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return mod(a, b, \\\"SafeMath: modulo by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts with custom message when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     *\\n     * _Available since v2.4.0._\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b != 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"pragma solidity ^0.5.5;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following \\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\\n        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\\n        // for accounts without code, i.e. `keccak256('')`\\n        bytes32 codehash;\\n        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { codehash := extcodehash(account) }\\n        return (codehash != accountHash && codehash != 0x0);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` into `address payable`. Note that this is\\n     * simply a type cast: the actual underlying value is not changed.\\n     *\\n     * _Available since v2.4.0._\\n     */\\n    function toPayable(address account) internal pure returns (address payable) {\\n        return address(uint160(account));\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     *\\n     * _Available since v2.4.0._\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-call-value\\n        (bool success, ) = recipient.call.value(amount)(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": false,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}","ABI":"[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"inAmount\",\"type\":\"uint256\"}],\"name\":\"calcMintWithYcrv\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"dusdAmount\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"inAmount\",\"type\":\"uint256\"}],\"name\":\"calcMintWithYusd\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"dusdAmount\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"dusdAmount\",\"type\":\"uint256\"}],\"name\":\"calcRedeemInYcrv\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_yCrv\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"dusdAmount\",\"type\":\"uint256\"}],\"name\":\"calcRedeemInYusd\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isOwner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"migrate\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"inAmount\",\"type\":\"uint256\"}],\"name\":\"mintWithYcrv\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"dusdAmount\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"inAmount\",\"type\":\"uint256\"}],\"name\":\"mintWithYusd\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"portfolioValue\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"dusdAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minOut\",\"type\":\"uint256\"}],\"name\":\"redeemInYcrv\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_yCrv\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"dusdAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minOut\",\"type\":\"uint256\"}],\"name\":\"redeemInYusd\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_min\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_redeemMultiplier\",\"type\":\"uint256\"}],\"name\":\"setParams\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"vars\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"_core\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_ySwap\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_yCrv\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_yUSD\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_redeemMultiplier\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_min\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"yCrvDistribution\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"here\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"total\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"yCrvToUsd\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"yUSDToUsd\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"YVaultPeak","CompilerVersion":"v0.5.17+commit.d19bba13","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}