{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"settings\": {\r\n    \"evmVersion\": \"istanbul\",\r\n    \"libraries\": {},\r\n    \"metadata\": {\r\n      \"bytecodeHash\": \"none\",\r\n      \"useLiteralContent\": true\r\n    },\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 800\r\n    },\r\n    \"remappings\": [],\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  },\r\n  \"sources\": {\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor () {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/EnumerableSet.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping (bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) { // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            // When the value to delete is the last one, the swap operation is unnecessary. However, since this occurs\\n            // so rarely, we still do the swap anyway to avoid the gas cost of adding an 'if' statement.\\n\\n            bytes32 lastvalue = set._values[lastIndex];\\n\\n            // Move the last value to the index where the value to delete is\\n            set._values[toDeleteIndex] = lastvalue;\\n            // Update the index for the moved value\\n            set._indexes[lastvalue] = toDeleteIndex + 1; // All indexes are 1-based\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        require(set._values.length > index, \\\"EnumerableSet: index out of bounds\\\");\\n        return set._values[index];\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/OwnableProxyImplementation.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity =0.7.6;\\n\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * This is a modified implementation of OpenZeppelin's Ownable.sol.\\n * The modifications allow the contract to be inherited by a proxy's logic contract.\\n * Any owner-only functions on the base implementation will be unusable.\\n *\\n * By default, the owner account will be a null address which can be set by invoking\\n * a function with the `initializer` modifier. The owner can later be changed with\\n * {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner. It also makes available the `initializer` modifier, which will set\\n * the owner to `msg.sender` the first time the function is invoked, and will\\n * revert if the owner has already been set.\\n *\\n * Note: This contract should only be inherited by proxy implementation contracts\\n * where the implementation will only ever be used as the logic address for proxies.\\n * The constructor permanently locks the owner of the implementation contract, but the\\n * owner of the proxies can be configured by the first caller.\\n */\\ncontract OwnableProxyImplementation {\\n  address private _owner;\\n\\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n  constructor() {\\n    _owner = address(1);\\n    emit OwnershipTransferred(address(0), address(1));\\n  }\\n\\n  /**\\n   * @dev Returns the address of the current owner.\\n   */\\n  function owner() public view returns (address) {\\n    return _owner;\\n  }\\n\\n  /**\\n   * @dev Throws if called by any account other than the owner.\\n   */\\n  modifier onlyOwner {\\n    require(_owner == msg.sender, \\\"!owner\\\");\\n    _;\\n  }\\n\\n  /**\\n   * @dev Initializes the contract setting `initialOwner` as the initial owner.\\n   * Reverts if owner has already been set.\\n   */\\n  modifier initializer(address initialOwner) {\\n    require(_owner == address(0), \\\"already initialized\\\");\\n    _owner = initialOwner;\\n    emit OwnershipTransferred(address(0), initialOwner);\\n    _;\\n  }\\n\\n  /**\\n   * @dev Leaves the contract without owner. It will not be possible to call\\n   * `onlyOwner` functions anymore. Can only be called by the current owner.\\n   *\\n   * NOTE: Renouncing ownership will leave the contract without an owner,\\n   * thereby removing any functionality that is only available to the owner.\\n   */\\n  function renounceOwnership() public virtual onlyOwner {\\n    // Modified from OZ contract - sets owner to address(1) to prevent\\n    // the initializer from being invoked after ownership is revoked.\\n    emit OwnershipTransferred(_owner, address(1));\\n    _owner = address(1);\\n  }\\n\\n  /**\\n   * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n   * Can only be called by the current owner.\\n   */\\n  function transferOwnership(address newOwner) public virtual onlyOwner {\\n    require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n    emit OwnershipTransferred(_owner, newOwner);\\n    _owner = newOwner;\\n  }\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IAdapterRegistry.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity =0.7.6;\\n\\n\\ninterface IAdapterRegistry {\\n/* ========== Events ========== */\\n\\n  event ProtocolAdapterAdded(uint256 protocolId, address protocolAdapter);\\n\\n  event ProtocolAdapterRemoved(uint256 protocolId);\\n\\n  event TokenAdapterAdded(address adapter, uint256 protocolId, address underlying, address wrapper);\\n\\n  event TokenAdapterRemoved(address adapter, uint256 protocolId, address underlying, address wrapper);\\n\\n  event TokenSupportAdded(address underlying);\\n\\n  event TokenSupportRemoved(address underlying);\\n\\n  event VaultFactoryAdded(address factory);\\n\\n  event VaultFactoryRemoved(address factory);\\n\\n  event VaultAdded(address underlying, address vault);\\n\\n  event VaultRemoved(address underlying, address vault);\\n\\n/* ========== Structs ========== */\\n\\n  struct TokenAdapter {\\n    address adapter;\\n    uint96 protocolId;\\n  }\\n\\n/* ========== Storage ========== */\\n\\n  function protocolsCount() external view returns (uint256);\\n\\n  function protocolAdapters(uint256 id) external view returns (address protocolAdapter);\\n\\n  function protocolAdapterIds(address protocolAdapter) external view returns (uint256 id);\\n\\n  function vaultsByUnderlying(address underlying) external view returns (address vault);\\n\\n  function approvedVaultFactories(address factory) external view returns (bool approved);\\n\\n/* ========== Vault Factory Management ========== */\\n\\n  function addVaultFactory(address _factory) external;\\n\\n  function removeVaultFactory(address _factory) external;\\n\\n/* ========== Vault Management ========== */\\n\\n  function addVault(address vault) external;\\n\\n  function removeVault(address vault) external;\\n\\n/* ========== Protocol Adapter Management ========== */\\n\\n  function addProtocolAdapter(address protocolAdapter) external returns (uint256 id);\\n\\n  function removeProtocolAdapter(address protocolAdapter) external;\\n\\n/* ========== Token Adapter Management ========== */\\n\\n  function addTokenAdapter(address adapter) external;\\n\\n  function addTokenAdapters(address[] calldata adapters) external;\\n\\n  function removeTokenAdapter(address adapter) external;\\n\\n/* ========== Vault Queries ========== */\\n\\n  function getVaultsList() external view returns (address[] memory);\\n\\n  function haveVaultFor(address underlying) external view returns (bool);\\n\\n/* ========== Protocol Queries ========== */\\n\\n  function getProtocolAdaptersAndIds() external view returns (address[] memory adapters, uint256[] memory ids);\\n\\n  function getProtocolMetadata(uint256 id) external view returns (address protocolAdapter, string memory name);\\n\\n  function getProtocolForTokenAdapter(address adapter) external view returns (address protocolAdapter);\\n\\n/* ========== Supported Token Queries ========== */\\n\\n  function isSupported(address underlying) external view returns (bool);\\n\\n  function getSupportedTokens() external view returns (address[] memory list);\\n\\n/* ========== Token Adapter Queries ========== */\\n\\n  function isApprovedAdapter(address adapter) external view returns (bool);\\n\\n  function getAdaptersList(address underlying) external view returns (address[] memory list);\\n\\n  function getAdapterForWrapperToken(address wrapperToken) external view returns (address);\\n\\n  function getAdaptersCount(address underlying) external view returns (uint256);\\n\\n  function getAdaptersSortedByAPR(address underlying)\\n    external\\n    view\\n    returns (address[] memory adapters, uint256[] memory aprs);\\n\\n  function getAdaptersSortedByAPRWithDeposit(\\n    address underlying,\\n    uint256 deposit,\\n    address excludingAdapter\\n  )\\n    external\\n    view\\n    returns (address[] memory adapters, uint256[] memory aprs);\\n\\n  function getAdapterWithHighestAPR(address underlying) external view returns (address adapter, uint256 apr);\\n\\n  function getAdapterWithHighestAPRForDeposit(\\n    address underlying,\\n    uint256 deposit,\\n    address excludingAdapter\\n  ) external view returns (address adapter, uint256 apr);\\n}\\n\\n\"\r\n    },\r\n    \"contracts/interfaces/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity >=0.5.0;\\n\\n\\ninterface IERC20 {\\n  event Transfer(address indexed from, address indexed to, uint256 value);\\n  event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n  function totalSupply() external view returns (uint256);\\n  function balanceOf(address account) external view returns (uint256);\\n  function transfer(address recipient, uint256 amount) external returns (bool);\\n  function allowance(address owner, address spender) external view returns (uint256);\\n  function approve(address spender, uint256 amount) external returns (bool);\\n  function increaseAllowance(address spender, uint256 addedValue) external returns (bool);\\n  function decreaseAllowance(address spender, uint256 subtractedValue) external returns (bool);\\n  function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n}\"\r\n    },\r\n    \"contracts/interfaces/IERC20Metadata.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity >=0.5.0;\\n\\n\\ninterface IERC20Metadata {\\n  function name() external view returns (string memory);\\n  function symbol() external view returns (string memory);\\n  function decimals() external view returns (uint8);\\n}\\n\\n\\ninterface IERC20MetadataBytes32 {\\n  function name() external view returns (bytes32);\\n  function symbol() external view returns (bytes32);\\n}\"\r\n    },\r\n    \"contracts/interfaces/INirnVault.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity =0.7.6;\\npragma abicoder v2;\\n\\nimport \\\"./IAdapterRegistry.sol\\\";\\nimport \\\"./ITokenAdapter.sol\\\";\\nimport \\\"./IRewardsSeller.sol\\\";\\n\\n\\ninterface INirnVault {\\n/* ========== Events ========== */\\n\\n  /** @dev Emitted when an adapter is removed and its balance fully withdrawn. */\\n  event AdapterRemoved(IErc20Adapter adapter);\\n\\n  /** @dev Emitted when weights or adapters are updated. */\\n  event AllocationsUpdated(IErc20Adapter[] adapters, uint256[] weights);\\n\\n  /** @dev Emitted when performance fees are claimed. */\\n  event FeesClaimed(uint256 underlyingAmount, uint256 sharesMinted);\\n\\n  /** @dev Emitted when a rebalance happens without allocation changes. */\\n  event Rebalanced();\\n\\n  /** @dev Emitted when max underlying is updated. */\\n  event SetMaximumUnderlying(uint256 maxBalance);\\n\\n  /** @dev Emitted when fee recipient address is set. */\\n  event SetFeeRecipient(address feeRecipient);\\n\\n  /** @dev Emitted when performance fee is set. */\\n  event SetPerformanceFee(uint256 performanceFee);\\n\\n  /** @dev Emitted when reserve ratio is set. */\\n  event SetReserveRatio(uint256 reserveRatio);\\n\\n  /** @dev Emitted when rewards seller contract is set. */\\n  event SetRewardsSeller(address rewardsSeller);\\n\\n  /** @dev Emitted when a deposit is made. */\\n  event Deposit(uint256 shares, uint256 underlying);\\n\\n  /** @dev Emitted when a deposit is made. */\\n  event Withdrawal(uint256 shares, uint256 underlying);\\n\\n/* ========== Structs ========== */\\n\\n  struct DistributionParameters {\\n    IErc20Adapter[] adapters;\\n    uint256[] weights;\\n    uint256[] balances;\\n    int256[] liquidityDeltas;\\n    uint256 netAPR;\\n  }\\n\\n/* ========== Initializer ========== */\\n\\n  function initialize(\\n    address _underlying,\\n    address _rewardsSeller,\\n    address _feeRecipient,\\n    address _owner\\n  ) external;\\n\\n/* ========== Config Queries ========== */\\n\\n  function minimumAPRImprovement() external view returns (uint256);\\n\\n  function registry() external view returns (IAdapterRegistry);\\n\\n  function eoaSafeCaller() external view returns (address);\\n\\n  function underlying() external view returns (address);\\n\\n  function name() external view returns (string memory);\\n\\n  function symbol() external view returns (string memory);\\n\\n  function decimals() external view returns (uint8);\\n\\n  function feeRecipient() external view returns (address);\\n\\n  function rewardsSeller() external view returns (IRewardsSeller);\\n\\n  function lockedTokens(address) external view returns (bool);\\n\\n  function maximumUnderlying() external view returns (uint256);\\n\\n  function performanceFee() external view returns (uint64);\\n\\n  function reserveRatio() external view returns (uint64);\\n\\n  function priceAtLastFee() external view returns (uint128);\\n\\n  function minimumCompositionChangeDelay() external view returns (uint256);\\n\\n  function canChangeCompositionAfter() external view returns (uint96);\\n\\n/* ========== Admin Actions ========== */\\n\\n  function setMaximumUnderlying(uint256 _maximumUnderlying) external;\\n\\n  function setPerformanceFee(uint64 _performanceFee) external;\\n\\n  function setFeeRecipient(address _feeRecipient) external;\\n\\n  function setRewardsSeller(IRewardsSeller _rewardsSeller) external;\\n\\n  function setReserveRatio(uint64 _reserveRatio) external;\\n\\n/* ========== Balance Queries ========== */\\n\\n  function balance() external view returns (uint256 sum);\\n\\n  function reserveBalance() external view returns (uint256);\\n\\n/* ========== Fee Queries ========== */\\n\\n  function getPendingFees() external view returns (uint256);\\n\\n/* ========== Price Queries ========== */\\n\\n  function getPricePerFullShare() external view returns (uint256);\\n\\n  function getPricePerFullShareWithFee() external view returns (uint256);\\n\\n/* ========== Reward Token Sales ========== */\\n\\n  function sellRewards(address rewardsToken, bytes calldata params) external;\\n\\n/* ========== Adapter Queries ========== */\\n\\n  function getBalances() external view returns (uint256[] memory balances);\\n\\n  function getAdaptersAndWeights() external view returns (\\n    IErc20Adapter[] memory adapters,\\n    uint256[] memory weights\\n  );\\n\\n/* ========== Status Queries ========== */\\n\\n  function getCurrentLiquidityDeltas() external view returns (int256[] memory liquidityDeltas);\\n\\n  function getAPR() external view returns (uint256);\\n\\n  function currentDistribution() external view returns (\\n    DistributionParameters memory params,\\n    uint256 totalProductiveBalance,\\n    uint256 _reserveBalance\\n  );\\n\\n/* ========== Deposit/Withdraw ========== */\\n\\n  function deposit(uint256 amount) external returns (uint256 shares);\\n\\n  function depositTo(uint256 amount, address to) external returns (uint256 shares);\\n\\n  function withdraw(uint256 shares) external returns (uint256 owed);\\n\\n  function withdrawUnderlying(uint256 amount) external returns (uint256 shares);\\n\\n/* ========== Rebalance Actions ========== */\\n\\n  function rebalance() external;\\n\\n  function rebalanceWithNewWeights(uint256[] calldata proposedWeights) external;\\n\\n  function rebalanceWithNewAdapters(\\n    IErc20Adapter[] calldata proposedAdapters,\\n    uint256[] calldata proposedWeights\\n  ) external;\\n}\"\r\n    },\r\n    \"contracts/interfaces/IRewardsSeller.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity =0.7.6;\\n\\n\\ninterface IRewardsSeller {\\n  /**\\n   * @dev Sell `rewardsToken` for `underlyingToken`.\\n   * Should only be called after `rewardsToken` is transferred.\\n   * @param sender - Address of account that initially triggered the call. Can be used to restrict who can trigger a sale.\\n   * @param rewardsToken - Address of the token to sell.\\n   * @param underlyingToken - Address of the token to buy.\\n   * @param params - Any additional data that the caller provided.\\n   */\\n  function sellRewards(\\n    address sender,\\n    address rewardsToken,\\n    address underlyingToken,\\n    bytes calldata params\\n  ) external;\\n}\"\r\n    },\r\n    \"contracts/interfaces/ITokenAdapter.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity >=0.5.0;\\n\\n\\ninterface IErc20Adapter {\\n/* ========== Metadata ========== */\\n\\n  function underlying() external view returns (address);\\n\\n  function token() external view returns (address);\\n\\n  function name() external view returns (string memory);\\n\\n  function availableLiquidity() external view returns (uint256);\\n\\n/* ========== Conversion ========== */\\n\\n  function toUnderlyingAmount(uint256 tokenAmount) external view returns (uint256);\\n\\n  function toWrappedAmount(uint256 underlyingAmount) external view returns (uint256);\\n\\n/* ========== Performance Queries ========== */\\n\\n  function getAPR() external view returns (uint256);\\n\\n  function getHypotheticalAPR(int256 liquidityDelta) external view returns (uint256);\\n\\n  function getRevenueBreakdown()\\n    external\\n    view\\n    returns (\\n      address[] memory assets,\\n      uint256[] memory aprs\\n    );\\n\\n/* ========== Caller Balance Queries ========== */\\n\\n  function balanceWrapped() external view returns (uint256);\\n\\n  function balanceUnderlying() external view returns (uint256);\\n\\n/* ========== Interactions ========== */\\n\\n  function deposit(uint256 amountUnderlying) external returns (uint256 amountMinted);\\n\\n  function withdraw(uint256 amountToken) external returns (uint256 amountReceived);\\n\\n  function withdrawAll() external returns (uint256 amountReceived);\\n\\n  function withdrawUnderlying(uint256 amountUnderlying) external returns (uint256 amountBurned);\\n\\n  function withdrawUnderlyingUpTo(uint256 amountUnderlying) external returns (uint256 amountReceived);\\n}\\n\\ninterface IEtherAdapter is IErc20Adapter {\\n  function depositETH() external payable returns (uint256 amountMinted);\\n\\n  function withdrawAsETH(uint256 amountToken) external returns (uint256 amountReceived);\\n\\n  function withdrawAllAsETH() external returns (uint256 amountReceived);\\n\\n  function withdrawUnderlyingAsETH(uint256 amountUnderlying) external returns (uint256 amountBurned); \\n}\"\r\n    },\r\n    \"contracts/libraries/AdapterHelper.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.7.6;\\n\\nimport \\\"../interfaces/IAdapterRegistry.sol\\\";\\nimport \\\"../interfaces/ITokenAdapter.sol\\\";\\nimport \\\"../interfaces/IERC20.sol\\\";\\nimport \\\"../libraries/LowGasSafeMath.sol\\\";\\nimport \\\"../libraries/MinimalSignedMath.sol\\\";\\nimport \\\"../libraries/ArrayHelper.sol\\\";\\nimport \\\"../libraries/DynamicArrays.sol\\\";\\nimport \\\"../libraries/Fraction.sol\\\";\\nimport \\\"../libraries/SafeCast.sol\\\";\\n\\n\\nlibrary AdapterHelper {\\n  using Fraction for uint256;\\n  using LowGasSafeMath for uint256;\\n  using MinimalSignedMath for int256;\\n  using SafeCast for uint256;\\n  using SafeCast for int256;\\n  using ArrayHelper for address[];\\n  using ArrayHelper for uint256[];\\n  using DynamicArrays for uint256[];\\n\\n  function packAdapterAndWeight(\\n    IErc20Adapter adapter,\\n    uint256 weight\\n  )\\n    internal\\n    pure\\n    returns (bytes32 encoded)\\n  {\\n    assembly {\\n      encoded := or(shl(96, adapter), weight)\\n    }\\n  }\\n\\n  function packAdaptersAndWeights(\\n    IErc20Adapter[] memory adapters,\\n    uint256[] memory weights\\n  )\\n    internal\\n    pure\\n    returns (bytes32[] memory encodedArray)\\n  {\\n    uint256 len = adapters.length;\\n    encodedArray = new bytes32[](len);\\n    for (uint256 i; i < len; i++) {\\n      IErc20Adapter adapter = adapters[i];\\n      uint256 weight = weights[i];\\n      bytes32 encoded;\\n      assembly {\\n        encoded := or(shl(96, adapter), weight)\\n      }\\n      encodedArray[i] = encoded;\\n    }\\n  }\\n\\n  function unpackAdapterAndWeight(bytes32 encoded)\\n    internal\\n    pure\\n    returns (\\n      IErc20Adapter adapter,\\n      uint256 weight\\n    )\\n  {\\n    assembly {\\n      adapter := shr(96, encoded)\\n      weight := and(\\n        encoded,\\n        0x0000000000000000000000000000000000000000ffffffffffffffffffffffff\\n      )\\n    }\\n  }\\n\\n  function unpackAdaptersAndWeights(bytes32[] memory encodedArray)\\n    internal\\n    pure\\n    returns (\\n      IErc20Adapter[] memory adapters,\\n      uint256[] memory weights\\n    )\\n  {\\n    uint256 len = encodedArray.length;\\n    adapters = new IErc20Adapter[](len);\\n    weights = new uint256[](len);\\n    for (uint256 i; i < len; i++) {\\n      bytes32 encoded = encodedArray[i];\\n      IErc20Adapter adapter;\\n      uint256 weight;\\n      assembly {\\n        adapter := shr(96, encoded)\\n        weight := and(\\n          encoded,\\n          0x0000000000000000000000000000000000000000ffffffffffffffffffffffff\\n        )\\n      }\\n      adapters[i] = adapter;\\n      weights[i] = weight;\\n    }\\n  }\\n\\n  function getNetAPR(\\n    IErc20Adapter[] memory adapters,\\n    uint256[] memory weights,\\n    int256[] memory liquidityDeltas\\n  ) internal view returns (uint256 netAPR) {\\n    uint256 len = adapters.length;\\n    for (uint256 i; i < len; i++) {\\n      uint256 weight = weights[i];\\n      if (weight > 0) {\\n        netAPR = netAPR.add(\\n          adapters[i].getHypotheticalAPR(liquidityDeltas[i]).mulFractionE18(weight)\\n        );\\n      }\\n    }\\n  }\\n\\n  function getLiquidityDeltas(\\n    uint256 totalProductiveBalance,\\n    uint256[] memory balances,\\n    uint256[] memory weights\\n  ) internal pure returns (int256[] memory deltas) {\\n    uint256 len = balances.length;\\n    deltas = new int256[](len);\\n    for (uint256 i; i < len; i++) {\\n      uint256 targetBalance = totalProductiveBalance.mulFractionE18(weights[i]);\\n      deltas[i] = targetBalance.toInt256().sub(balances[i].toInt256());\\n    }\\n  }\\n\\n  function getBalances(IErc20Adapter[] memory adapters) internal view returns (uint256[] memory balances) {\\n    uint256 len = adapters.length;\\n    balances = new uint256[](len);\\n    for (uint256 i; i < len; i++) balances[i] = adapters[i].balanceUnderlying();\\n  }\\n\\n  function getExcludedAdapterIndices(\\n    IErc20Adapter[] memory oldAdapters,\\n    IErc20Adapter[] memory newAdapters\\n  ) internal pure returns (uint256[] memory excludedAdapterIndices) {\\n    uint256 selfLen = oldAdapters.length;\\n    uint256 otherLen = newAdapters.length;\\n    excludedAdapterIndices = DynamicArrays.dynamicUint256Array(selfLen);\\n    for (uint256 i; i < selfLen; i++) {\\n      IErc20Adapter element = oldAdapters[i];\\n      for (uint256 j; j < otherLen; j++) {\\n        if (element == newAdapters[j]) {\\n          element = IErc20Adapter(0);\\n          break;\\n        }\\n      }\\n      if (element != IErc20Adapter(0)) {\\n        excludedAdapterIndices.dynamicPush(i);\\n      }\\n    }\\n  }\\n\\n  /**\\n   * @dev Rebalances the vault by withdrawing tokens from adapters with negative liquidity deltas\\n   * and depositing to adapters with positive liquidity deltas.\\n   *\\n   * Note: This does not necessarily result in a vault composition that matches the assigned weights,\\n   * as some of the lending markets for adapters with negative deltas may have insufficient liquidity\\n   * to process withdrawals of the desired amounts. In this case, the vault will withdraw what it can\\n   * and deposit up to the amount withdrawn to the other markets.\\n   *\\n   * Returns an array with indices of the adapters that both have a weight of zero and were able to\\n   * process a withdrawal of the vault's full balance. This array is used to remove those adapters.\\n   */\\n  function rebalance(\\n    IErc20Adapter[] memory adapters,\\n    uint256[] memory weights,\\n    int256[] memory liquidityDeltas,\\n    uint256 reserveBalance\\n  ) internal returns (uint256[] memory removedIndices) {\\n    uint256 len = liquidityDeltas.length;\\n    removedIndices = DynamicArrays.dynamicUint256Array(len);\\n    uint256 totalAvailableBalance = reserveBalance;\\n    // Execute withdrawals first\\n    for (uint256 i; i < len; i++) {\\n      int256 delta = liquidityDeltas[i];\\n      if (delta < 0) {\\n        uint256 amountToWithdraw = (-delta).toUint256();\\n        uint256 amountWithdrawn = adapters[i].withdrawUnderlyingUpTo(amountToWithdraw);\\n        // If the weight is 0, `amountToWithdraw` is the balance of the vault in the adapter\\n        // and the vault intends to remove the adapter. If the rebalance is able to withdraw\\n        // the full balance, it will mark the index of the adapter as able to be removed\\n        // so that it can be deleted by the rebalance function.\\n        if (weights[i] == 0 && amountWithdrawn == amountToWithdraw) {\\n          removedIndices.dynamicPush(i);\\n        }\\n        totalAvailableBalance = totalAvailableBalance.add(amountWithdrawn);\\n      }\\n    }\\n    // Execute deposits after\\n    for (uint256 i; i < len; i++) {\\n      int256 delta = liquidityDeltas[i];\\n      if (delta > 0) {\\n        if (totalAvailableBalance == 0) break;\\n        uint256 amountToDeposit = delta.toUint256();\\n        if (amountToDeposit >= totalAvailableBalance) {\\n          IErc20Adapter(adapters[i]).deposit(totalAvailableBalance);\\n          break;\\n        }\\n        IErc20Adapter(adapters[i]).deposit(amountToDeposit);\\n        totalAvailableBalance = totalAvailableBalance.sub(amountToDeposit);\\n      }\\n    }\\n  }\\n}\"\r\n    },\r\n    \"contracts/libraries/ArrayHelper.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\npragma solidity >=0.5.0;\\n\\nimport \\\"@openzeppelin/contracts/utils/EnumerableSet.sol\\\";\\nimport \\\"../libraries/LowGasSafeMath.sol\\\";\\nimport \\\"../interfaces/ITokenAdapter.sol\\\";\\n\\n\\nlibrary ArrayHelper {\\n  using EnumerableSet for EnumerableSet.AddressSet;\\n  using LowGasSafeMath for uint256;\\n\\n/* ========== Type Cast ========== */\\n\\n  /**\\n   * @dev Cast an enumerable address set as an address array.\\n   * The enumerable set library stores the values as a bytes32 array, this function\\n   * casts it as an address array with a pointer assignment.\\n   */\\n  function toArray(EnumerableSet.AddressSet storage set) internal view returns (address[] memory arr) {\\n    bytes32[] memory bytes32Arr = set._inner._values;\\n    assembly { arr := bytes32Arr }\\n  }\\n\\n  /**\\n   * @dev Cast an array of IErc20Adapter to an array of address using a pointer assignment.\\n   * Note: The resulting array is the same as the original, so all changes to one will be\\n   * reflected in the other.\\n   */\\n  function toAddressArray(IErc20Adapter[] memory _arr) internal pure returns (address[] memory arr) {\\n    assembly { arr := _arr }\\n  }\\n\\n/* ========== Math ========== */\\n\\n  /**\\n   * @dev Computes the sum of a uint256 array.\\n   */\\n  function sum(uint256[] memory arr) internal pure returns (uint256 _sum) {\\n    uint256 len = arr.length;\\n    for (uint256 i; i < len; i++) _sum = _sum.add(arr[i]);\\n  }\\n\\n/* ========== Removal ========== */\\n\\n  /**\\n   * @dev Remove the element at `index` from an array and decrement its length.\\n   * If `index` is the last index in the array, pops it from the array.\\n   * Otherwise, stores the last element in the array at `index` and then pops the last element.\\n   */\\n  function mremove(uint256[] memory arr, uint256 index) internal pure {\\n    uint256 len = arr.length;\\n    if (index != len - 1) {\\n      uint256 last = arr[len - 1];\\n      arr[index] = last;\\n    }\\n    assembly { mstore(arr, sub(len, 1)) }\\n  }\\n\\n  /**\\n   * @dev Remove the element at `index` from an array and decrement its length.\\n   * If `index` is the last index in the array, pops it from the array.\\n   * Otherwise, stores the last element in the array at `index` and then pops the last element.\\n   */\\n  function mremove(address[] memory arr, uint256 index) internal pure {\\n    uint256 len = arr.length;\\n    if (index != len - 1) {\\n      address last = arr[len - 1];\\n      arr[index] = last;\\n    }\\n    assembly { mstore(arr, sub(len, 1)) }\\n  }\\n\\n  /**\\n   * @dev Remove the element at `index` from an array and decrement its length.\\n   * If `index` is the last index in the array, pops it from the array.\\n   * Otherwise, stores the last element in the array at `index` and then pops the last element.\\n   */\\n  function mremove(IErc20Adapter[] memory arr, uint256 index) internal pure {\\n    uint256 len = arr.length;\\n    if (index != len - 1) {\\n      IErc20Adapter last = arr[len - 1];\\n      arr[index] = last;\\n    }\\n    assembly { mstore(arr, sub(len, 1)) }\\n  }\\n\\n  /**\\n   * @dev Remove the element at `index` from an array and decrement its length.\\n   * If `index` is the last index in the array, pops it from the array.\\n   * Otherwise, stores the last element in the array at `index` and then pops the last element.\\n   */\\n  function remove(bytes32[] storage arr, uint256 index) internal {\\n    uint256 len = arr.length;\\n    if (index == len - 1) {\\n      arr.pop();\\n      return;\\n    }\\n    bytes32 last = arr[len - 1];\\n    arr[index] = last;\\n    arr.pop();\\n  }\\n\\n  /**\\n   * @dev Remove the element at `index` from an array and decrement its length.\\n   * If `index` is the last index in the array, pops it from the array.\\n   * Otherwise, stores the last element in the array at `index` and then pops the last element.\\n   */\\n  function remove(address[] storage arr, uint256 index) internal {\\n    uint256 len = arr.length;\\n    if (index == len - 1) {\\n      arr.pop();\\n      return;\\n    }\\n    address last = arr[len - 1];\\n    arr[index] = last;\\n    arr.pop();\\n  }\\n\\n/* ========== Search ========== */\\n\\n  /**\\n   * @dev Find the index of an address in an array.\\n   * If the address is not found, revert.\\n   */\\n  function indexOf(address[] memory arr, address find) internal pure returns (uint256) {\\n    uint256 len = arr.length;\\n    for (uint256 i; i < len; i++) if (arr[i] == find) return i;\\n    revert(\\\"element not found\\\");\\n  }\\n\\n  /**\\n   * @dev Determine whether an element is included in an array.\\n   */\\n  function includes(address[] memory arr, address find) internal pure returns (bool) {\\n    uint256 len = arr.length;\\n    for (uint256 i; i < len; i++) if (arr[i] == find) return true;\\n    return false;\\n  }\\n\\n/* ========== Sorting ========== */\\n\\n  /**\\n   * @dev Given an array of tokens and scores, sort by scores in descending order.\\n   * Maintains the relationship between elements of each array at the same index.\\n   */\\n  function sortByDescendingScore(\\n    address[] memory addresses,\\n    uint256[] memory scores\\n  ) internal pure {\\n    uint256 len = addresses.length;\\n    for (uint256 i = 0; i < len; i++) {\\n      uint256 score = scores[i];\\n      address _address = addresses[i];\\n      uint256 j = i - 1;\\n      while (int(j) >= 0 && scores[j] < score) {\\n        scores[j + 1] = scores[j];\\n        addresses[j + 1] = addresses[j];\\n        j--;\\n      }\\n      scores[j + 1] = score;\\n      addresses[j + 1] = _address;\\n    }\\n  }\\n}\"\r\n    },\r\n    \"contracts/libraries/DynamicArrays.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\npragma solidity >=0.5.0;\\n\\n/**\\n * @dev Library for handling dynamic in-memory arrays.\\n *\\n * There is a very good reason for Solidity not supporting this by default -- dynamic\\n * arrays in memory completely break memory management for Solidity when used improperly;\\n * however, they can be created manually in a safe way so long as the maximum size is known\\n * beforehand.\\n *\\n * This applies primarily to situations where a subset is taken from an existing array\\n * by some filtering process.\\n *\\n * This library should not be used to bypass Solidity's lack of dynamic memory array\\n * support in any situation where the code could potentially cause the array to exceed\\n * the maximum size assigned in the array creation call. Doing so is likely to have\\n * unintended and unpredictable side effects.\\n */\\nlibrary DynamicArrays {\\n  /**\\n   * @dev Reserves space in memory for an array of length `size`, but sets the length to 0.\\n   * This can be safely used for a dynamic array so long as the maximum possible size is\\n   * known beforehand. If the array can exceed `size`, pushing to it will corrupt memory.\\n   */\\n  function dynamicAddressArray(uint256 size) internal pure returns (address[] memory arr) {\\n    arr = new address[](size);\\n    assembly { mstore(arr, 0) }\\n  }\\n\\n  /**\\n   * @dev Reserves space in memory for an array of length `size`, but sets the length to 0.\\n   * This can be safely used for a dynamic array so long as the maximum possible size is\\n   * known beforehand. If the array can exceed length `size`, pushing to it will corrupt memory.\\n   */\\n  function dynamicUint256Array(uint256 size) internal pure returns (uint256[] memory arr) {\\n    arr = new uint256[](size);\\n    assembly { mstore(arr, 0) }\\n  }\\n\\n  /**\\n   * @dev Pushes an address to an in-memory array by reassigning the array length and storing\\n   * the element in the position used by solidity for the current array index.\\n   * Note: This should ONLY be used on an array created with `dynamicAddressArray`. Using it\\n   * on a typical array created with `new address[]()` will almost certainly have unintended\\n   * and unpredictable side effects.\\n   */\\n  function dynamicPush(address[] memory arr, address element) internal pure {\\n    assembly {\\n      let size := mload(arr)\\n      let ptr := add(\\n        add(arr, 32),\\n        mul(size, 32)\\n      )\\n      mstore(ptr, element)\\n      mstore(arr, add(size, 1))\\n    }\\n  }\\n\\n  /**\\n   * @dev Pushes a uint256 to an in-memory array by reassigning the array length and storing\\n   * the element in the position used by solidity for the current array index.\\n   * Note: This should ONLY be used on an array created with `dynamicUint256Array`. Using it\\n   * on a typical array created with `new uint256[]()` will almost certainly have unintended\\n   * and unpredictable side effects.\\n   */\\n  function dynamicPush(uint256[] memory arr, uint256 element) internal pure {\\n    assembly {\\n      let size := mload(arr)\\n      let ptr := add(\\n        add(arr, 32),\\n        mul(size, 32)\\n      )\\n      mstore(ptr, element)\\n      mstore(arr, add(size, 1))\\n    }\\n  }\\n}\"\r\n    },\r\n    \"contracts/libraries/Fraction.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity =0.7.6;\\n\\nimport \\\"../libraries/LowGasSafeMath.sol\\\";\\n\\n\\nlibrary Fraction {\\n  using LowGasSafeMath for uint256;\\n\\n  uint256 internal constant ONE_E18 = 1e18;\\n\\n  function mulFractionE18(uint256 a, uint256 fraction) internal pure returns (uint256) {\\n    return a.mul(fraction) / ONE_E18;\\n  }\\n\\n  function mulSubFractionE18(uint256 a, uint256 fraction) internal pure returns (uint256) {\\n    return a.sub(a.mul(fraction) / ONE_E18);\\n  }\\n\\n  function toFractionE18(uint256 a, uint256 b) internal pure returns (uint256) {\\n    return a.mul(ONE_E18) / b;\\n  }\\n}\"\r\n    },\r\n    \"contracts/libraries/LowGasSafeMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.7.0;\\n\\n/************************************************************************************************\\nOriginally from https://github.com/Uniswap/uniswap-v3-core/blob/main/contracts/libraries/LowGasSafeMath.sol\\n\\nThis source code has been modified from the original, which was copied from the github repository\\nat commit hash b83fcf497e895ae59b97c9d04e997023f69b5e97.\\n\\nSubject to the GPL-2.0 license\\n*************************************************************************************************/\\n\\n\\n/// @title Optimized overflow and underflow safe math operations\\n/// @notice Contains methods for doing math operations that revert on overflow or underflow for minimal gas cost\\nlibrary LowGasSafeMath {\\n  /// @notice Returns x + y, reverts if sum overflows uint256\\n  /// @param x The augend\\n  /// @param y The addend\\n  /// @return z The sum of x and y\\n  function add(uint256 x, uint256 y) internal pure returns (uint256 z) {\\n    require((z = x + y) >= x);\\n  }\\n\\n  /// @notice Returns x + y, reverts if sum overflows uint256\\n  /// @param x The augend\\n  /// @param y The addend\\n  /// @return z The sum of x and y\\n  function add(uint256 x, uint256 y, string memory errorMessage) internal pure returns (uint256 z) {\\n    require((z = x + y) >= x, errorMessage);\\n  }\\n\\n  /// @notice Returns x - y, reverts if underflows\\n  /// @param x The minuend\\n  /// @param y The subtrahend\\n  /// @return z The difference of x and y\\n  function sub(uint256 x, uint256 y) internal pure returns (uint256 z) {\\n    require(y <= x);\\n    z = x - y;\\n  }\\n\\n  /// @notice Returns x - y, reverts if underflows\\n  /// @param x The minuend\\n  /// @param y The subtrahend\\n  /// @return z The difference of x and y\\n  function sub(uint256 x, uint256 y, string memory errorMessage) internal pure returns (uint256 z) {\\n    require(y <= x, errorMessage);\\n    z = x - y;\\n  }\\n\\n  /// @notice Returns x * y, reverts if overflows\\n  /// @param x The multiplicand\\n  /// @param y The multiplier\\n  /// @return z The product of x and y\\n  function mul(uint256 x, uint256 y) internal pure returns (uint256 z) {\\n    if (x == 0) return 0;\\n    z = x * y;\\n    require(z / x == y);\\n  }\\n\\n  /// @notice Returns x * y, reverts if overflows\\n  /// @param x The multiplicand\\n  /// @param y The multiplier\\n  /// @return z The product of x and y\\n  function mul(uint256 x, uint256 y, string memory errorMessage) internal pure returns (uint256 z) {\\n    if (x == 0) return 0;\\n    z = x * y;\\n    require(z / x == y, errorMessage);\\n  }\\n\\n  /// @notice Returns ceil(x / y)\\n  /// @param x The numerator\\n  /// @param y The denominator\\n  /// @return z The quotient of x and y\\n  function divCeil(uint256 x, uint256 y) internal pure returns (uint256 z) {\\n    z = x % y == 0 ? x / y : (x/y) + 1;\\n  }\\n}\\n\"\r\n    },\r\n    \"contracts/libraries/MinimalSignedMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\n\\nlibrary MinimalSignedMath {\\n  function add(int256 a, int256 b) internal pure returns (int256) {\\n    int256 c = a + b;\\n    require((b >= 0 && c >= a) || (b < 0 && c < a), \\\"SignedSafeMath: addition overflow\\\");\\n\\n    return c;\\n  }\\n\\n  function sub(int256 a, int256 b) internal pure returns (int256) {\\n    int256 c = a - b;\\n    require((b >= 0 && c <= a) || (b < 0 && c > a), \\\"SignedSafeMath: subtraction overflow\\\");\\n\\n    return c;\\n  }\\n\\n  function add(uint256 a, int256 b) internal pure returns (uint256) {\\n    require(a < 2**255);\\n    int256 _a = int256(a);\\n    int256 c = _a + b;\\n    require((b >= 0 && c >= _a) || (b < 0 && c < _a));\\n    if (c < 0) return 0;\\n    return uint256(c);\\n  }\\n}\"\r\n    },\r\n    \"contracts/libraries/RebalanceValidation.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.7.6;\\n\\nimport \\\"../interfaces/IAdapterRegistry.sol\\\";\\nimport \\\"../interfaces/ITokenAdapter.sol\\\";\\nimport \\\"../libraries/LowGasSafeMath.sol\\\";\\nimport \\\"../libraries/Fraction.sol\\\";\\n\\n\\n\\nlibrary RebalanceValidation {\\n  using LowGasSafeMath for uint256;\\n  using Fraction for uint256;\\n\\n  function validateSufficientImprovement(\\n    uint256 currentAPR,\\n    uint256 newAPR,\\n    uint256 minImprovement\\n  ) internal pure {\\n    require(\\n      newAPR.sub(currentAPR, \\\"!increased\\\").toFractionE18(currentAPR) >= minImprovement,\\n      \\\"insufficient improvement\\\"\\n    );\\n  }\\n\\n  function validateProposedWeights(\\n    uint256[] memory currentWeights,\\n    uint256[] memory proposedWeights\\n  ) internal pure {\\n    uint256 len = currentWeights.length;\\n    require(proposedWeights.length == len, \\\"bad lengths\\\");\\n    uint256 _sum;\\n    for (uint256 i; i < len; i++) {\\n      uint256 weight = proposedWeights[i];\\n      _sum = _sum.add(weight);\\n      if (weight == 0) {\\n        require(currentWeights[i] == 0, \\\"can not set null weight\\\");\\n      } else {\\n        require(weight >= 5e16, \\\"weight < 5%\\\");\\n      }\\n    }\\n    require(_sum == 1e18, \\\"weights != 100%\\\");\\n  }\\n\\n  function validateAdaptersAndWeights(\\n    IAdapterRegistry registry,\\n    address underlying,\\n    IErc20Adapter[] memory adapters,\\n    uint256[] memory weights\\n  ) internal view {\\n    uint256 len = adapters.length;\\n    require(weights.length == len, \\\"bad lengths\\\");\\n    uint256 totalWeight;\\n    for (uint256 i; i < len; i++) {\\n      IErc20Adapter adapter = adapters[i];\\n      require(registry.isApprovedAdapter(address(adapter)), \\\"!approved\\\");\\n      require(adapter.underlying() == underlying, \\\"bad adapter\\\");\\n      for (uint256 j = i + 1; j < len; j++) {\\n        require(address(adapter) != address(adapters[j]), \\\"duplicate adapter\\\");\\n      }\\n      uint256 weight = weights[i];\\n      totalWeight = totalWeight.add(weight);\\n      require(weight >= 5e16, \\\"weight < 5%\\\");\\n    }\\n    require(totalWeight == 1e18, \\\"weights != 100%\\\");\\n  }\\n}\"\r\n    },\r\n    \"contracts/libraries/SafeCast.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\n/************************************************************************************************\\nOriginally from https://github.com/Uniswap/uniswap-v3-core/blob/main/contracts/libraries/SafeCast.sol\\n\\nThis source code has been modified from the original, which was copied from the github repository\\nat commit hash b83fcf497e895ae59b97c9d04e997023f69b5e97.\\n\\nSubject to the GPL-2.0 license\\n*************************************************************************************************/\\n\\n\\n/// @title Safe casting methods\\n/// @notice Contains methods for safely casting between types\\nlibrary SafeCast {\\n  /// @notice Cast a uint256 to a uint160, revert on overflow\\n  /// @param y The uint256 to be downcasted\\n  /// @return z The downcasted integer, now type uint160\\n  function toUint160(uint256 y) internal pure returns (uint160 z) {\\n    require((z = uint160(y)) == y);\\n  }\\n\\n  /// @notice Cast a uint256 to a uint128, revert on overflow\\n  /// @param y The uint256 to be downcasted\\n  /// @return z The downcasted integer, now type uint128\\n  function toUint128(uint256 y) internal pure returns (uint128 z) {\\n    require((z = uint128(y)) == y);\\n  }\\n\\n  /// @notice Cast a uint256 to a uint96, revert on overflow\\n  /// @param y The uint256 to be downcasted\\n  /// @return z The downcasted integer, now type uint96\\n  function toUint96(uint256 y) internal pure returns (uint96 z) {\\n    require((z = uint96(y)) == y);\\n  }\\n\\n  /// @notice Cast a int256 to a int128, revert on overflow or underflow\\n  /// @param y The int256 to be downcasted\\n  /// @return z The downcasted integer, now type int128\\n  function toInt128(int256 y) internal pure returns (int128 z) {\\n    require((z = int128(y)) == y);\\n  }\\n\\n  /// @notice Cast a uint256 to a int256, revert on overflow\\n  /// @param y The uint256 to be casted\\n  /// @return z The casted integer, now type int256\\n  function toInt256(uint256 y) internal pure returns (int256 z) {\\n    require(y < 2**255);\\n    z = int256(y);\\n  }\\n\\n  /// @notice Cast an int256 to a uint256, revert on overflow\\n  /// @param y The uint256 to be downcasted\\n  /// @return z The downcasted integer, now type uint160\\n  function toUint256(int256 y) internal pure returns (uint256 z) {\\n    require(y >= 0);\\n    z = uint256(y);\\n  }\\n}\\n\"\r\n    },\r\n    \"contracts/libraries/SymbolHelper.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity =0.7.6;\\n\\nimport \\\"../interfaces/IERC20Metadata.sol\\\";\\n\\n\\nlibrary SymbolHelper {\\n\\n  /**\\n   * @dev Returns the index of the lowest bit set in `self`.\\n   * Note: Requires that `self != 0`\\n   */\\n  function lowestBitSet(uint256 self) internal pure returns (uint256 _z) {\\n    require (self > 0, \\\"Bits::lowestBitSet: Value 0 has no bits set\\\");\\n    uint256 _magic = 0x00818283848586878898a8b8c8d8e8f929395969799a9b9d9e9faaeb6bedeeff;\\n    uint256 val = (self & -self) * _magic >> 248;\\n    uint256 _y = val >> 5;\\n    _z = (\\n      _y < 4\\n        ? _y < 2\\n          ? _y == 0\\n            ? 0x753a6d1b65325d0c552a4d1345224105391a310b29122104190a110309020100\\n            : 0xc976c13bb96e881cb166a933a55e490d9d56952b8d4e801485467d2362422606\\n          : _y == 2\\n            ? 0xe39ed557db96902cd38ed14fad815115c786af479b7e83247363534337271707\\n            : 0xf7cae577eec2a03cf3bad76fb589591debb2dd67e0aa9834bea6925f6a4a2e0e\\n        : _y < 6\\n          ? _y == 4\\n            ? 0xc8c0b887b0a8a4489c948c7f847c6125746c645c544c444038302820181008ff\\n            : 0xf6e4ed9ff2d6b458eadcdf97bd91692de2d4da8fd2d0ac50c6ae9a8272523616\\n          : _y == 6\\n            ? 0xf5ecf1b3e9debc68e1d9cfabc5997135bfb7a7a3938b7b606b5b4b3f2f1f0ffe\\n            : 0xf8f9cbfae6cc78fbefe7cdc3a1793dfcf4f0e8bbd8cec470b6a28a7a5a3e1efd\\n    );\\n    _z >>= (val & 0x1f) << 3;\\n    return _z & 0xff;\\n  }\\n\\n  function getSymbol(address token) internal view returns (string memory) {\\n    (bool success, bytes memory data) = token.staticcall(abi.encodeWithSignature(\\\"symbol()\\\"));\\n    if (!success) return \\\"UNKNOWN\\\";\\n    if (data.length != 32) return abi.decode(data, (string));\\n    uint256 symbol = abi.decode(data, (uint256));\\n    if (symbol == 0) return \\\"UNKNOWN\\\";\\n    uint256 emptyBits = 255 - lowestBitSet(symbol);\\n    uint256 size = (emptyBits / 8) + (emptyBits % 8 > 0 ? 1 : 0);\\n    assembly { mstore(data, size) }\\n    return string(data);\\n  }\\n\\n  function getName(address token) internal view returns (string memory) {\\n    (bool success, bytes memory data) = token.staticcall(abi.encodeWithSignature(\\\"name()\\\"));\\n    if (!success) return \\\"UNKNOWN\\\";\\n    if (data.length != 32) return abi.decode(data, (string));\\n    uint256 symbol = abi.decode(data, (uint256));\\n    if (symbol == 0) return \\\"UNKNOWN\\\";\\n    uint256 emptyBits = 255 - lowestBitSet(symbol);\\n    uint256 size = (emptyBits / 8) + (emptyBits % 8 > 0 ? 1 : 0);\\n    assembly { mstore(data, size) }\\n    return string(data);\\n  }\\n\\n  function getPrefixedSymbol(string memory prefix, address token) internal view returns (string memory prefixedSymbol) {\\n    prefixedSymbol = string(abi.encodePacked(\\n      prefix,\\n      getSymbol(token)\\n    ));\\n  }\\n\\n  function getPrefixedName(string memory prefix, address token) internal view returns (string memory prefixedName) {\\n    prefixedName = string(abi.encodePacked(\\n      prefix,\\n      getName(token)\\n    ));\\n  }\\n}\"\r\n    },\r\n    \"contracts/libraries/TransferHelper.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity =0.7.6;\\n\\n/************************************************************************************************\\nOriginally from https://github.com/Uniswap/uniswap-lib/blob/master/contracts/libraries/TransferHelper.sol\\n\\nThis source code has been modified from the original, which was copied from the github repository\\nat commit hash cfedb1f55864dcf8cc0831fdd8ec18eb045b7fd1.\\n\\nSubject to the MIT license\\n*************************************************************************************************/\\n\\n\\nlibrary TransferHelper {\\n  function safeApproveMax(address token, address to) internal {\\n    safeApprove(token, to, type(uint256).max);\\n  }\\n\\n  function safeUnapprove(address token, address to) internal {\\n    safeApprove(token, to, 0);\\n  }\\n\\n  function safeApprove(address token, address to, uint value) internal {\\n    // bytes4(keccak256(bytes(\\\"approve(address,uint256)\\\")));\\n    (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x095ea7b3, to, value));\\n    require(success && (data.length == 0 || abi.decode(data, (bool))), \\\"TH:SA\\\");\\n  }\\n\\n  function safeTransfer(address token, address to, uint value) internal {\\n    // bytes4(keccak256(bytes(\\\"transfer(address,uint256)\\\")));\\n    (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0xa9059cbb, to, value));\\n    require(success && (data.length == 0 || abi.decode(data, (bool))), \\\"TH:ST\\\");\\n  }\\n\\n  function safeTransferFrom(address token, address from, address to, uint value) internal {\\n    // bytes4(keccak256(bytes(\\\"transferFrom(address,address,uint256)\\\")));\\n    (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x23b872dd, from, to, value));\\n    require(success && (data.length == 0 || abi.decode(data, (bool))), \\\"TH:STF\\\");\\n  }\\n\\n  function safeTransferETH(address to, uint256 value) internal {\\n    (bool success, ) = to.call{value: value}(\\\"\\\");\\n    require(success, \\\"TH:STE\\\");\\n  }\\n}\"\r\n    },\r\n    \"contracts/vaults/ERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity =0.7.6;\\n\\nimport \\\"../libraries/LowGasSafeMath.sol\\\";\\nimport \\\"../interfaces/IERC20.sol\\\";\\n\\n\\ncontract ERC20 is IERC20 {\\n  using LowGasSafeMath for uint256;\\n\\n  mapping(address => uint256) public override balanceOf;\\n\\n  mapping(address => mapping(address => uint256)) public override allowance;\\n\\n  uint256 public override totalSupply;\\n\\n  function transfer(address recipient, uint256 amount) external override returns (bool) {\\n    _transfer(msg.sender, recipient, amount);\\n    return true;\\n  }\\n\\n  function approve(address spender, uint256 amount) external override returns (bool) {\\n    _approve(msg.sender, spender, amount);\\n    return true;\\n  }\\n\\n  function transferFrom(\\n    address sender,\\n    address recipient,\\n    uint256 amount\\n  ) external override returns (bool) {\\n    _transfer(sender, recipient, amount);\\n    _approve(\\n      sender,\\n      msg.sender,\\n      allowance[sender][msg.sender].sub(amount, \\\"ERC20: transfer amount exceeds allowance\\\")\\n    );\\n    return true;\\n  }\\n\\n  function increaseAllowance(address spender, uint256 addedValue) external override returns (bool) {\\n    _approve(msg.sender, spender, allowance[msg.sender][spender].add(addedValue));\\n    return true;\\n  }\\n\\n  function decreaseAllowance(address spender, uint256 subtractedValue) external override returns (bool) {\\n    _approve(\\n      msg.sender,\\n      spender,\\n      allowance[msg.sender][spender].sub(subtractedValue, \\\"ERC20: decreased allowance below zero\\\")\\n    );\\n    return true;\\n  }\\n\\n  function _transfer(\\n    address sender,\\n    address recipient,\\n    uint256 amount\\n  ) internal {\\n    require(sender != address(0), \\\"ERC20: transfer from the zero address\\\");\\n    require(recipient != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n    balanceOf[sender] = balanceOf[sender].sub(amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n    balanceOf[recipient] = balanceOf[recipient].add(amount);\\n    emit Transfer(sender, recipient, amount);\\n  }\\n\\n  function _mint(address account, uint256 amount) internal {\\n    require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n    totalSupply = totalSupply.add(amount);\\n    balanceOf[account] = balanceOf[account].add(amount);\\n    emit Transfer(address(0), account, amount);\\n  }\\n\\n  function _burn(address account, uint256 amount) internal {\\n    require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n    balanceOf[account] = balanceOf[account].sub(amount, \\\"ERC20: burn amount exceeds balance\\\");\\n    totalSupply = totalSupply.sub(amount);\\n    emit Transfer(account, address(0), amount);\\n  }\\n\\n  function _approve(\\n    address owner,\\n    address spender,\\n    uint256 amount\\n  ) internal {\\n    require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n    require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n    allowance[owner][spender] = amount;\\n    emit Approval(owner, spender, amount);\\n  }\\n\\n  function _burnFrom(address account, uint256 amount) internal {\\n    _burn(account, amount);\\n    _approve(\\n      account,\\n      msg.sender,\\n      allowance[account][msg.sender].sub(amount, \\\"ERC20: burn amount exceeds allowance\\\")\\n    );\\n  }\\n}\\n\"\r\n    },\r\n    \"contracts/vaults/NirnVault.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity =0.7.6;\\npragma abicoder v2;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"../libraries/RebalanceValidation.sol\\\";\\nimport \\\"../libraries/SafeCast.sol\\\";\\nimport \\\"./NirnVaultBase.sol\\\";\\n\\n\\ncontract NirnVault is NirnVaultBase {\\n  using Fraction for uint256;\\n  using TransferHelper for address;\\n  using LowGasSafeMath for uint256;\\n  using MinimalSignedMath for int256;\\n  using SafeCast for uint256;\\n  using SafeCast for int256;\\n  using ArrayHelper for uint256[];\\n  using ArrayHelper for bytes32[];\\n  using ArrayHelper for IErc20Adapter[];\\n  using DynamicArrays for uint256[];\\n  using AdapterHelper for IErc20Adapter[];\\n\\n/* ========== Constructor ========== */\\n\\n  constructor(\\n    address _registry,\\n    address _eoaSafeCaller\\n  ) NirnVaultBase(_registry, _eoaSafeCaller) {}\\n\\n/* ========== Status Queries ========== */\\n\\n  function getCurrentLiquidityDeltas() external view override returns (int256[] memory liquidityDeltas) {\\n    (IErc20Adapter[] memory adapters, uint256[] memory weights) = getAdaptersAndWeights();\\n    BalanceSheet memory balanceSheet = getBalanceSheet(adapters);\\n    liquidityDeltas = AdapterHelper.getLiquidityDeltas(\\n      balanceSheet.totalProductiveBalance,\\n      balanceSheet.balances,\\n      weights\\n    );\\n  }\\n\\n  function getAPR() external view override returns (uint256) {\\n    (DistributionParameters memory params,,) = currentDistribution();\\n    return params.netAPR;\\n  }\\n\\n/* ========== Deposit/Withdraw ========== */\\n\\n  function deposit(uint256 amount) external override returns (uint256 shares) {\\n    shares = depositTo(amount, msg.sender);\\n  }\\n\\n  function depositTo(uint256 amount, address to) public override returns (uint256 shares) {\\n    uint256 bal = balance();\\n    uint256 max = maximumUnderlying;\\n    if (max > 0) {\\n      require(bal.add(amount) <= max, \\\"maximumUnderlying\\\");\\n    }\\n    underlying.safeTransferFrom(msg.sender, address(this), amount);\\n    uint256 supply = claimFees(bal, totalSupply);\\n    shares = supply == 0 ? amount : amount.mul(supply) / bal;\\n    _mint(to, shares);\\n    emit Deposit(shares, amount);\\n  }\\n\\n  function withdraw(uint256 shares) external override returns (uint256 amountOut) {\\n    (IErc20Adapter[] memory adapters, uint256[] memory weights) = getAdaptersAndWeights();\\n    BalanceSheet memory balanceSheet = getBalanceSheet(adapters);\\n    uint256 supply = claimFees(balanceSheet.totalBalance, totalSupply);\\n    amountOut = shares.mul(balanceSheet.totalBalance) / supply;\\n    withdrawInternal(\\n      shares,\\n      amountOut,\\n      adapters,\\n      weights,\\n      balanceSheet\\n    );\\n  }\\n\\n  function withdrawUnderlying(uint256 amount) external override returns (uint256 shares) {\\n    (IErc20Adapter[] memory adapters, uint256[] memory weights) = getAdaptersAndWeights();\\n    BalanceSheet memory balanceSheet = getBalanceSheet(adapters);\\n    uint256 supply = claimFees(balanceSheet.totalBalance, totalSupply);\\n    shares = amount.mul(supply) / balanceSheet.totalBalance;\\n    withdrawInternal(\\n      shares,\\n      amount,\\n      adapters,\\n      weights,\\n      balanceSheet\\n    );\\n  }\\n\\n  function withdrawInternal(\\n    uint256 shares,\\n    uint256 amountOut,\\n    IErc20Adapter[] memory adapters,\\n    uint256[] memory weights,\\n    BalanceSheet memory balanceSheet\\n  ) internal {\\n    _burn(msg.sender, shares);\\n    emit Withdrawal(shares, amountOut);\\n    uint256 newReserves = balanceSheet.totalBalance.sub(amountOut).mulFractionE18(reserveRatio);\\n    withdrawToMatchAmount(\\n      adapters,\\n      weights,\\n      balanceSheet.balances,\\n      balanceSheet.reserveBalance,\\n      amountOut,\\n      newReserves\\n    );\\n    _transferOut(msg.sender, amountOut);\\n  }\\n\\n  function withdrawToMatchAmount(\\n    IErc20Adapter[] memory adapters,\\n    uint256[] memory weights,\\n    uint256[] memory balances,\\n    uint256 _reserveBalance,\\n    uint256 amount,\\n    uint256 newReserves\\n  ) internal {\\n    if (amount > _reserveBalance) {\\n      uint256 remainder = amount.sub(_reserveBalance);\\n      uint256 len = balances.length;\\n      uint256[] memory removeIndices = DynamicArrays.dynamicUint256Array(len);\\n      for (uint256 i; i < len; i++) {\\n        uint256 bal = balances[i];\\n        if (bal == 0) continue;\\n        // If the balance is sufficient to withdraw both the remainder and the new reserves,\\n        // withdraw the remainder and the new reserves. Otherwise, withdraw the balance.\\n        uint256 optimalWithdrawal = remainder.add(newReserves);\\n        uint256 amountToWithdraw = bal > optimalWithdrawal\\n          ? optimalWithdrawal\\n          : bal;\\n        uint256 amountWithdrawn = adapters[i].withdrawUnderlyingUpTo(amountToWithdraw);\\n        remainder = remainder >= amountWithdrawn ? remainder - amountWithdrawn : 0;\\n        if (weights[i] == 0 && amountWithdrawn == bal) {\\n          removeIndices.dynamicPush(i);\\n        }\\n        if (remainder == 0) break;\\n      }\\n      require(remainder == 0, \\\"insufficient available balance\\\");\\n      removeAdapters(removeIndices);\\n    }\\n  }\\n\\n/* ========== Rebalance Actions ========== */\\n\\n  function rebalance() external override onlyEOA {\\n    (IErc20Adapter[] memory adapters, uint256[] memory weights) = getAdaptersAndWeights();\\n    BalanceSheet memory balanceSheet = getBalanceSheet(adapters);\\n    int256[] memory liquidityDeltas = AdapterHelper.getLiquidityDeltas(balanceSheet.totalProductiveBalance, balanceSheet.balances, weights);\\n    uint256[] memory removedIndices = AdapterHelper.rebalance(\\n      adapters,\\n      weights,\\n      liquidityDeltas,\\n      balanceSheet.reserveBalance\\n    );\\n    removeAdapters(removedIndices);\\n    emit Rebalanced();\\n  }\\n\\n  function rebalanceWithNewWeights(uint256[] memory proposedWeights) external override onlyEOA changesComposition {\\n    (\\n      DistributionParameters memory params,\\n      uint256 totalProductiveBalance,\\n      uint256 _reserveBalance\\n    ) = currentDistribution();\\n    RebalanceValidation.validateProposedWeights(params.weights, proposedWeights);\\n    // Get liquidity deltas and APR for new weights\\n    int256[] memory proposedLiquidityDeltas = AdapterHelper.getLiquidityDeltas(totalProductiveBalance, params.balances, proposedWeights);\\n    uint256 proposedAPR = AdapterHelper.getNetAPR(params.adapters, proposedWeights, proposedLiquidityDeltas).mulSubFractionE18(reserveRatio);\\n    // Validate rebalance results in sufficient APR improvement\\n    RebalanceValidation.validateSufficientImprovement(params.netAPR, proposedAPR, minimumAPRImprovement);\\n    // Rebalance and remove adapters with 0 weight which the vault could fully exit.\\n    uint256[] memory removedIndices = AdapterHelper.rebalance(params.adapters, proposedWeights, proposedLiquidityDeltas, _reserveBalance);\\n    uint256 removeLen = removedIndices.length;\\n    if (removeLen > 0) {\\n      for (uint256 i = removeLen; i > 0; i--) {\\n        uint256 rI = removedIndices[i-1];\\n        emit AdapterRemoved(params.adapters[rI]);\\n        params.adapters.mremove(rI);\\n        proposedWeights.mremove(rI);\\n      }\\n    }\\n    setAdaptersAndWeights(params.adapters, proposedWeights);\\n  }\\n\\n  function currentDistribution() public view override returns (\\n    DistributionParameters memory params,\\n    uint256 totalProductiveBalance,\\n    uint256 _reserveBalance\\n  ) {\\n    uint256 _reserveRatio = reserveRatio;\\n    (params.adapters, params.weights) = getAdaptersAndWeights();\\n    uint256 len = params.adapters.length;\\n    uint256 netAPR;\\n    params.balances = params.adapters.getBalances();\\n    _reserveBalance = reserveBalance();\\n    totalProductiveBalance = params.balances.sum().add(_reserveBalance).mulSubFractionE18(_reserveRatio);\\n    params.liquidityDeltas = new int256[](len);\\n    for (uint256 i; i < len; i++) {\\n      IErc20Adapter adapter = params.adapters[i];\\n      uint256 weight = params.weights[i];\\n      uint256 targetBalance = totalProductiveBalance.mulFractionE18(weight);\\n      int256 liquidityDelta = targetBalance.toInt256().sub(params.balances[i].toInt256());\\n      netAPR = netAPR.add(\\n        adapter.getHypotheticalAPR(liquidityDelta).mulFractionE18(weight)\\n      );\\n      params.liquidityDeltas[i] = liquidityDelta;\\n    }\\n    params.netAPR = netAPR.mulSubFractionE18(_reserveRatio);\\n  }\\n\\n  function processProposedDistribution(\\n    DistributionParameters memory currentParams,\\n    uint256 totalProductiveBalance,\\n    IErc20Adapter[] calldata proposedAdapters,\\n    uint256[] calldata proposedWeights\\n  ) internal view returns (DistributionParameters memory params) {\\n    uint256[] memory excludedAdapterIndices = currentParams.adapters.getExcludedAdapterIndices(proposedAdapters);\\n    uint256 proposedSize = proposedAdapters.length;\\n    uint256 expandedSize = proposedAdapters.length + excludedAdapterIndices.length;\\n    params.adapters = new IErc20Adapter[](expandedSize);\\n    params.weights = new uint256[](expandedSize);\\n    params.balances = new uint256[](expandedSize);\\n    params.liquidityDeltas = new int256[](expandedSize);\\n    uint256 i;\\n    uint256 netAPR;\\n    for (; i < proposedSize; i++) {\\n      IErc20Adapter adapter = proposedAdapters[i];\\n      params.adapters[i] = adapter;\\n      uint256 weight = proposedWeights[i];\\n      params.weights[i] = weight;\\n      uint256 targetBalance = totalProductiveBalance.mulFractionE18(weight);\\n      uint256 _balance = adapter.balanceUnderlying();\\n      params.balances[i] = _balance;\\n      int256 liquidityDelta = targetBalance.toInt256().sub(_balance.toInt256());\\n      netAPR = netAPR.add(\\n        adapter.getHypotheticalAPR(liquidityDelta).mulFractionE18(weight)\\n      );\\n      params.liquidityDeltas[i] = liquidityDelta;\\n    }\\n    netAPR = netAPR.mulSubFractionE18(reserveRatio);\\n    RebalanceValidation.validateSufficientImprovement(currentParams.netAPR, netAPR, minimumAPRImprovement);\\n    for (; i < expandedSize; i++) {\\n      // i - proposedSize = index in excluded adapter indices array\\n      // The value in excludedAdapterIndices is the index in the current adapters array\\n      // for the adapter which is being removed.\\n      // The lending markets for these adapters may or may not have sufficient liquidity to\\n      // process a full withdrawal requested by the vault, so we keep those adapters in the\\n      // adapters list, but set a weight of 0 and a liquidity delta of -balance\\n      uint256 rI = excludedAdapterIndices[i - proposedSize];\\n      params.adapters[i] = currentParams.adapters[rI];\\n      params.weights[i] = 0;\\n      uint256 _balance = currentParams.balances[rI];\\n      params.balances[i] = _balance;\\n      params.liquidityDeltas[i] = -_balance.toInt256();\\n    }\\n  }\\n\\n  function rebalanceWithNewAdapters(\\n    IErc20Adapter[] calldata proposedAdapters,\\n    uint256[] calldata proposedWeights\\n  ) external override onlyEOA changesComposition {\\n    RebalanceValidation.validateAdaptersAndWeights(registry, underlying, proposedAdapters, proposedWeights);\\n    (\\n      DistributionParameters memory currentParams,\\n      uint256 totalProductiveBalance,\\n      uint256 _reserveBalance\\n    ) = currentDistribution();\\n    DistributionParameters memory proposedParams = processProposedDistribution(\\n      currentParams,\\n      totalProductiveBalance,\\n      proposedAdapters,\\n      proposedWeights\\n    );\\n    beforeAddAdapters(proposedParams.adapters);\\n    uint256[] memory removedIndices = AdapterHelper.rebalance(\\n      proposedParams.adapters,\\n      proposedParams.weights,\\n      proposedParams.liquidityDeltas,\\n      _reserveBalance\\n    );\\n    uint256 removedLen = removedIndices.length;\\n    if (removedLen > 0) {\\n      // The indices to remove are necessarily in ascending order, so as long as we remove\\n      // them in reverse, the removal of elements will not break the other indices.\\n      for (uint256 i = removedLen; i > 0; i--) {\\n        uint256 rI = removedIndices[i-1];\\n        emit AdapterRemoved(proposedParams.adapters[rI]);\\n        proposedParams.adapters.mremove(rI);\\n        proposedParams.weights.mremove(rI);\\n      }\\n    }\\n    setAdaptersAndWeights(proposedParams.adapters, proposedParams.weights);\\n  }\\n\\n  function _transferOut(address to, uint256 amount) internal {\\n    underlying.safeTransfer(to, amount);\\n  }\\n}\"\r\n    },\r\n    \"contracts/vaults/NirnVaultBase.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity =0.7.6;\\npragma abicoder v2;\\n\\nimport \\\"../OwnableProxyImplementation.sol\\\";\\nimport \\\"../interfaces/IAdapterRegistry.sol\\\";\\nimport \\\"../interfaces/IRewardsSeller.sol\\\";\\nimport \\\"../interfaces/INirnVault.sol\\\";\\nimport \\\"../libraries/LowGasSafeMath.sol\\\";\\nimport \\\"../libraries/SymbolHelper.sol\\\";\\nimport \\\"../libraries/TransferHelper.sol\\\";\\nimport \\\"../libraries/AdapterHelper.sol\\\";\\nimport \\\"./ERC20.sol\\\";\\n\\n\\n/**\\n * @dev Base contract defining the constant and storage variables\\n * for NirnVault, as well as basic state queries and setters.\\n */\\nabstract contract NirnVaultBase is ERC20, OwnableProxyImplementation(), INirnVault {\\n  using SafeCast for uint256;\\n  using TransferHelper for address;\\n  using Fraction for uint256;\\n  using LowGasSafeMath for uint256;\\n  using MinimalSignedMath for uint256;\\n  using MinimalSignedMath for int256;\\n  using ArrayHelper for uint256[];\\n  using ArrayHelper for address[];\\n  using ArrayHelper for bytes32[];\\n  using ArrayHelper for IErc20Adapter[];\\n  using AdapterHelper for bytes32;\\n  using AdapterHelper for bytes32[];\\n  using AdapterHelper for IErc20Adapter[];\\n\\n/* ========== Constants ========== */\\n\\n  /**\\n  * @dev Fraction of the current APR of the vault that a proposed rebalance must improve\\n  * the net APR by to be accepted, as a fraction of 1e18.\\n  * 5e16 means newAPR-currentAPR must be greater than or equal to currentAPR*1.05\\n  */\\n  uint256 public constant override minimumAPRImprovement = 5e16;\\n\\n  uint256 public constant override minimumCompositionChangeDelay = 1 hours;\\n\\n  /** @dev Nirn adapter registry */\\n  IAdapterRegistry public immutable override registry;\\n\\n  /** @dev Address of a contract which can only execute specific functions and only allows EOAs to call. */\\n  address public immutable override eoaSafeCaller;\\n\\n/* ========== Storage ========== */\\n\\n  /** @dev Underlying asset for the vault. */\\n  address public override underlying;\\n\\n  /** @dev Time at which a changing rebalance can be executed. */\\n  uint96 public override canChangeCompositionAfter;\\n\\n  /** @dev ERC20 name */\\n  string public override name;\\n\\n  /** @dev ERC20 symbol */\\n  string public override symbol;\\n\\n  /** @dev Tokens which can not be sold - wrapper tokens used by the adapters. */\\n  mapping(address => bool) public override lockedTokens;\\n\\n  /** @dev Account that receives performance fees. */\\n  address public override feeRecipient;\\n\\n  /** @dev Address of contract used to sell rewards. */\\n  IRewardsSeller public override rewardsSeller;\\n\\n  /**\\n   * @dev Maximum underlying balance that can be deposited.\\n   * If zero, no maximum.\\n   */\\n  uint256 public override maximumUnderlying;\\n\\n  /** @dev Fee taken on profit as a fraction of 1e18. */\\n  uint64 public override performanceFee;\\n\\n  /** @dev Ratio of underlying token to keep in the vault for cheap withdrawals as a fraction of 1e18. */\\n  uint64 public override reserveRatio;\\n\\n  /** @dev Last price at which fees were taken. */\\n  uint128 public override priceAtLastFee;\\n\\n  /** @dev Tightly packed token adapters encoded as (address,uint96). */\\n  bytes32[] internal packedAdaptersAndWeights;\\n\\n  /** @dev ERC20 decimals */\\n  function decimals() external view override returns (uint8) {\\n    try IERC20Metadata(underlying).decimals() returns (uint8 _decimals) {\\n      return _decimals;\\n    } catch {\\n      return 18;\\n    }\\n  }\\n\\n  function getAdaptersAndWeights() public view override returns (\\n    IErc20Adapter[] memory adapters,\\n    uint256[] memory weights\\n  ) {\\n    (adapters, weights) = packedAdaptersAndWeights.unpackAdaptersAndWeights();\\n  }\\n\\n  function setAdaptersAndWeights(IErc20Adapter[] memory adapters, uint256[] memory weights) internal {\\n    emit AllocationsUpdated(adapters, weights);\\n    packedAdaptersAndWeights = AdapterHelper.packAdaptersAndWeights(\\n      adapters,\\n      weights\\n    );\\n  }\\n\\n  function removeAdapters(uint256[] memory removeIndices) internal {\\n    uint256 len = removeIndices.length;\\n    if (len == 0) return;\\n    for (uint256 i = len; i > 0; i--) {\\n      uint256 rI = removeIndices[i - 1];\\n      (IErc20Adapter adapter,) = packedAdaptersAndWeights[rI].unpackAdapterAndWeight();\\n      emit AdapterRemoved(adapter);\\n      packedAdaptersAndWeights.remove(rI);\\n    }\\n  }\\n\\n/* ========== Modifiers ========== */\\n\\n  /**\\n   * @dev Prevents calls from arbitrary contracts.\\n   * Caller must be an EOA account or a pre-approved \\\"EOA-safe\\\" caller,\\n   * meaning a smart contract which can only be called by an EOA and has\\n   * a limited set of functions it can call.\\n   * This prevents griefing via flash loans that force the vault to use\\n   * adapters with low interest rates.\\n   */\\n  modifier onlyEOA {\\n    require(msg.sender == tx.origin || msg.sender == eoaSafeCaller, \\\"!EOA\\\");\\n    _;\\n  }\\n\\n  /**\\n   * @dev Prevents composition-changing rebalances from being executed more\\n   * frequently than the configured minimum delay;\\n   */\\n  modifier changesComposition {\\n    require(block.timestamp >= canChangeCompositionAfter, \\\"too soon\\\");\\n    canChangeCompositionAfter = block.timestamp.add(minimumCompositionChangeDelay).toUint96();\\n    _;\\n  }\\n\\n/* ========== Constructor ========== */\\n\\n  constructor(address _registry, address _eoaSafeCaller) {\\n    registry = IAdapterRegistry(_registry);\\n    eoaSafeCaller = _eoaSafeCaller;\\n  }\\n\\n  function initialize(\\n    address _underlying,\\n    address _rewardsSeller,\\n    address _feeRecipient,\\n    address _owner\\n  ) external override initializer(_owner) {\\n    require(_feeRecipient != address(0), \\\"null address\\\");\\n    underlying = _underlying;\\n    feeRecipient = _feeRecipient;\\n    rewardsSeller = IRewardsSeller(_rewardsSeller);\\n\\n    (address adapter,) = registry.getAdapterWithHighestAPR(_underlying);\\n    packedAdaptersAndWeights.push(AdapterHelper.packAdapterAndWeight(IErc20Adapter(adapter), 1e18));\\n    beforeAddAdapter(IErc20Adapter(adapter));\\n\\n    name = SymbolHelper.getPrefixedName(\\\"Indexed \\\", _underlying);\\n    symbol = SymbolHelper.getPrefixedSymbol(\\\"n\\\", _underlying);\\n    performanceFee = 1e17;\\n    reserveRatio = 1e17;\\n    priceAtLastFee = 1e18;\\n  }\\n\\n/* ========== Configuration Controls ========== */\\n\\n  function setMaximumUnderlying(uint256 _maximumUnderlying) external override onlyOwner {\\n    maximumUnderlying = _maximumUnderlying;\\n    emit SetMaximumUnderlying(_maximumUnderlying);\\n  }\\n\\n  function setPerformanceFee(uint64 _performanceFee) external override onlyOwner {\\n    claimFees(balance(), totalSupply);\\n    require(_performanceFee <= 2e17, \\\"fee > 20%\\\");\\n    performanceFee = _performanceFee;\\n    emit SetPerformanceFee(_performanceFee);\\n  }\\n\\n  function setReserveRatio(uint64 _reserveRatio) external override onlyOwner {\\n    require(_reserveRatio <= 2e17, \\\"reserve > 20%\\\");\\n    reserveRatio = _reserveRatio;\\n    emit SetReserveRatio(_reserveRatio);\\n  }\\n\\n  function setFeeRecipient(address _feeRecipient) external override onlyOwner {\\n    require(_feeRecipient != address(0), \\\"null address\\\");\\n    feeRecipient = _feeRecipient;\\n    emit SetFeeRecipient(_feeRecipient);\\n  }\\n\\n  function setRewardsSeller(IRewardsSeller _rewardsSeller) external override onlyOwner {\\n    rewardsSeller = _rewardsSeller;\\n    emit SetRewardsSeller(address(_rewardsSeller));\\n  }\\n\\n/* ========== Reward Token Sale ========== */\\n\\n  function sellRewards(address rewardsToken, bytes calldata params) external override onlyEOA {\\n    uint256 _balance = IERC20(rewardsToken).balanceOf(address(this));\\n    require(!lockedTokens[rewardsToken] && rewardsToken != underlying, \\\"token locked\\\");\\n    IRewardsSeller _rewardsSeller = rewardsSeller;\\n    require(address(_rewardsSeller) != address(0), \\\"null seller\\\");\\n    rewardsToken.safeTransfer(address(_rewardsSeller), _balance);\\n    _rewardsSeller.sellRewards(msg.sender, rewardsToken, underlying, params);\\n  }\\n\\n  function withdrawFromUnusedAdapter(IErc20Adapter adapter) external {\\n    (IErc20Adapter[] memory adapters,) = getAdaptersAndWeights();\\n    require(\\n      !adapters.toAddressArray().includes(address(adapter)),\\n      \\\"!unused\\\"\\n    );\\n    require(registry.isApprovedAdapter(address(adapter)), \\\"!approved\\\");\\n    address wrapper = adapter.token();\\n    wrapper.safeApproveMax(address(adapter));\\n    uint256 bal = adapter.balanceUnderlying();\\n    adapter.withdrawUnderlyingUpTo(bal);\\n    wrapper.safeUnapprove(address(adapter));\\n  }\\n\\n/* ========== Underlying Balance Queries ========== */\\n\\n  struct BalanceSheet {\\n    uint256[] balances;\\n    uint256 reserveBalance;\\n    uint256 totalBalance;\\n    uint256 totalProductiveBalance;\\n  }\\n\\n  function getBalanceSheet(\\n    IErc20Adapter[] memory adapters\\n  ) internal view returns (BalanceSheet memory sheet) {\\n    sheet.balances = adapters.getBalances();\\n    sheet.reserveBalance = reserveBalance();\\n    sheet.totalBalance = sheet.balances.sum().add(sheet.reserveBalance);\\n    sheet.totalProductiveBalance = sheet.totalBalance.mulSubFractionE18(reserveRatio);\\n  }\\n\\n  /**\\n   * @dev Returns the value in `underlying` of the vault's deposits\\n   * in each adapter.\\n   */\\n  function getBalances() public view override returns (uint256[] memory balances) {\\n    (IErc20Adapter[] memory adapters,) = getAdaptersAndWeights();\\n    return adapters.getBalances();\\n  }\\n\\n  /**\\n   * @dev Returns total value of vault in `underlying`\\n   */\\n  function balance() public view override returns (uint256 sum) {\\n    (IErc20Adapter[] memory adapters,) = getAdaptersAndWeights();\\n    uint256 len = adapters.length;\\n    for (uint256 i; i < len; i++) {\\n      sum = sum.add(adapters[i].balanceUnderlying());\\n    }\\n    sum = sum.add(reserveBalance());\\n  }\\n\\n  /**\\n   * @dev Returns current \\\"reserve\\\" balance, or balance of `underlying` held by the vault\\n   */\\n  function reserveBalance() public view override returns (uint256) {\\n    return IERC20(underlying).balanceOf(address(this));\\n  }\\n\\n/* ========== Fees ========== */\\n\\n  function calculateFee(uint256 totalBalance, uint256 supply) internal view returns (uint256) {\\n    uint256 valueAtLastCollectionPrice = supply.mulFractionE18(priceAtLastFee);\\n    if (totalBalance <= valueAtLastCollectionPrice) return 0;\\n    uint256 profit = totalBalance.sub(valueAtLastCollectionPrice);\\n    return profit.mulFractionE18(performanceFee);\\n  }\\n\\n  function getPendingFees() external view override returns (uint256) {\\n    return calculateFee(balance(), totalSupply);\\n  }\\n\\n  function claimFees(uint256 totalBalance, uint256 supply) internal returns (uint256 newSupply) {\\n    uint256 totalFees = calculateFee(totalBalance, supply);\\n    if (totalFees == 0) return supply;\\n    uint256 equivalentShares = totalFees.mul(supply) / totalBalance.sub(totalFees);\\n    emit FeesClaimed(totalFees, equivalentShares);\\n    _mint(feeRecipient, equivalentShares);\\n    newSupply = supply.add(equivalentShares);\\n    priceAtLastFee = totalBalance.toFractionE18(newSupply).toUint128();\\n  }\\n\\n  function claimFees() external {\\n    claimFees(balance(), totalSupply);\\n  }\\n\\n/* ========== Price Queries ========== */\\n\\n  function getPricePerFullShare() external view override returns (uint256) {\\n    return balance().toFractionE18(totalSupply);\\n  }\\n\\n  function getPricePerFullShareWithFee() public view override returns (uint256) {\\n    uint256 totalBalance = balance();\\n    uint256 supply = totalSupply;\\n    uint256 pendingFees = calculateFee(totalBalance, supply);\\n    if (pendingFees > 0) {\\n      uint256 equivalentShares = pendingFees.mul(supply) / totalBalance.sub(pendingFees);\\n      supply = supply.add(equivalentShares);\\n    }\\n    return totalBalance.toFractionE18(supply);\\n  }\\n\\n/* ========== Update Hooks ========== */\\n\\n  function beforeAddAdapter(IErc20Adapter adapter) internal {\\n    address wrapper = adapter.token();\\n    if (IERC20(wrapper).allowance(address(this), address(adapter)) > 0) return;\\n    lockedTokens[wrapper] = true;\\n    underlying.safeApproveMax(address(adapter));\\n    wrapper.safeApproveMax(address(adapter));\\n  }\\n\\n  function beforeAddAdapters(IErc20Adapter[] memory adapters) internal {\\n    uint256 len = adapters.length;\\n    for (uint256 i; i < len; i++) beforeAddAdapter(adapters[i]);\\n  }\\n}\"\r\n    }\r\n  }\r\n}}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_registry\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_eoaSafeCaller\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"contract IErc20Adapter\",\"name\":\"adapter\",\"type\":\"address\"}],\"name\":\"AdapterRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"contract IErc20Adapter[]\",\"name\":\"adapters\",\"type\":\"address[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"weights\",\"type\":\"uint256[]\"}],\"name\":\"AllocationsUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"underlying\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"underlyingAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"sharesMinted\",\"type\":\"uint256\"}],\"name\":\"FeesClaimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Rebalanced\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"feeRecipient\",\"type\":\"address\"}],\"name\":\"SetFeeRecipient\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"maxBalance\",\"type\":\"uint256\"}],\"name\":\"SetMaximumUnderlying\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"performanceFee\",\"type\":\"uint256\"}],\"name\":\"SetPerformanceFee\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"reserveRatio\",\"type\":\"uint256\"}],\"name\":\"SetReserveRatio\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"rewardsSeller\",\"type\":\"address\"}],\"name\":\"SetRewardsSeller\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"underlying\",\"type\":\"uint256\"}],\"name\":\"Withdrawal\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"balance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"sum\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"canChangeCompositionAfter\",\"outputs\":[{\"internalType\":\"uint96\",\"name\":\"\",\"type\":\"uint96\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currentDistribution\",\"outputs\":[{\"components\":[{\"internalType\":\"contract IErc20Adapter[]\",\"name\":\"adapters\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"weights\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"balances\",\"type\":\"uint256[]\"},{\"internalType\":\"int256[]\",\"name\":\"liquidityDeltas\",\"type\":\"int256[]\"},{\"internalType\":\"uint256\",\"name\":\"netAPR\",\"type\":\"uint256\"}],\"internalType\":\"struct INirnVault.DistributionParameters\",\"name\":\"params\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"totalProductiveBalance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_reserveBalance\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"depositTo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"eoaSafeCaller\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeRecipient\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAPR\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAdaptersAndWeights\",\"outputs\":[{\"internalType\":\"contract IErc20Adapter[]\",\"name\":\"adapters\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"weights\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBalances\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"balances\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCurrentLiquidityDeltas\",\"outputs\":[{\"internalType\":\"int256[]\",\"name\":\"liquidityDeltas\",\"type\":\"int256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPendingFees\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPricePerFullShare\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPricePerFullShareWithFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_underlying\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_rewardsSeller\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_feeRecipient\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"lockedTokens\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maximumUnderlying\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minimumAPRImprovement\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minimumCompositionChangeDelay\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"performanceFee\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"priceAtLastFee\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rebalance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IErc20Adapter[]\",\"name\":\"proposedAdapters\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"proposedWeights\",\"type\":\"uint256[]\"}],\"name\":\"rebalanceWithNewAdapters\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"proposedWeights\",\"type\":\"uint256[]\"}],\"name\":\"rebalanceWithNewWeights\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"registry\",\"outputs\":[{\"internalType\":\"contract IAdapterRegistry\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"reserveBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"reserveRatio\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardsSeller\",\"outputs\":[{\"internalType\":\"contract IRewardsSeller\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"rewardsToken\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"params\",\"type\":\"bytes\"}],\"name\":\"sellRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_feeRecipient\",\"type\":\"address\"}],\"name\":\"setFeeRecipient\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_maximumUnderlying\",\"type\":\"uint256\"}],\"name\":\"setMaximumUnderlying\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"_performanceFee\",\"type\":\"uint64\"}],\"name\":\"setPerformanceFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"_reserveRatio\",\"type\":\"uint64\"}],\"name\":\"setReserveRatio\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IRewardsSeller\",\"name\":\"_rewardsSeller\",\"type\":\"address\"}],\"name\":\"setRewardsSeller\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"underlying\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IErc20Adapter\",\"name\":\"adapter\",\"type\":\"address\"}],\"name\":\"withdrawFromUnusedAdapter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdrawUnderlying\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"NirnVault","CompilerVersion":"v0.7.6+commit.7338295f","OptimizationUsed":"1","Runs":"800","ConstructorArguments":"0000000000000000000000005f2945604013ee9f80ae2eddb384462b681859c4000000000000000000000000ca116aa63fc652d2e2b24d0ec260fa281a1dd4ca","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":""}]}