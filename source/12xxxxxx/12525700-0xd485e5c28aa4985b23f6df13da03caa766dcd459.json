{"status":"1","message":"OK","result":[{"SourceCode":"// SPDX-License-Identifier: Apache-2.0\r\n\r\n/*\r\n * Copyright 2021, Offchain Labs, Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *    http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n\r\npragma solidity ^0.6.11;\r\n\r\nabstract contract WhitelistConsumer {\r\n    address public whitelist;\r\n\r\n    event WhitelistSourceUpdated(address newSource);\r\n\r\n    modifier onlyWhitelisted {\r\n        if (whitelist != address(0)) {\r\n            require(Whitelist(whitelist).isAllowed(msg.sender), \"NOT_WHITELISTED\");\r\n        }\r\n        _;\r\n    }\r\n\r\n    function updateWhitelistSource(address newSource) external {\r\n        require(msg.sender == whitelist, \"NOT_FROM_LIST\");\r\n        whitelist = newSource;\r\n        emit WhitelistSourceUpdated(newSource);\r\n    }\r\n}\r\n\r\ncontract Whitelist {\r\n    address public owner;\r\n    mapping(address => bool) public isAllowed;\r\n\r\n    event OwnerUpdated(address newOwner);\r\n    event WhitelistUpgraded(address newWhitelist, address[] targets);\r\n\r\n    constructor() public {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    modifier onlyOwner {\r\n        require(msg.sender == owner, \"ONLY_OWNER\");\r\n        _;\r\n    }\r\n\r\n    function setOwner(address newOwner) external onlyOwner {\r\n        owner = newOwner;\r\n        emit OwnerUpdated(newOwner);\r\n    }\r\n\r\n    function setWhitelist(address[] memory user, bool[] memory val) external onlyOwner {\r\n        require(user.length == val.length, \"INVALID_INPUT\");\r\n\r\n        for (uint256 i = 0; i < user.length; i++) {\r\n            isAllowed[user[i]] = val[i];\r\n        }\r\n    }\r\n\r\n    // set new whitelist to address(0) to disable whitelist\r\n    function triggerConsumers(address newWhitelist, address[] memory targets) external onlyOwner {\r\n        for (uint256 i = 0; i < targets.length; i++) {\r\n            WhitelistConsumer(targets[i]).updateWhitelistSource(newWhitelist);\r\n        }\r\n        emit WhitelistUpgraded(newWhitelist, targets);\r\n    }\r\n}","ABI":"[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnerUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newWhitelist\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"targets\",\"type\":\"address[]\"}],\"name\":\"WhitelistUpgraded\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isAllowed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"setOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"user\",\"type\":\"address[]\"},{\"internalType\":\"bool[]\",\"name\":\"val\",\"type\":\"bool[]\"}],\"name\":\"setWhitelist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newWhitelist\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"targets\",\"type\":\"address[]\"}],\"name\":\"triggerConsumers\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"Whitelist","CompilerVersion":"v0.6.11+commit.5ef660b1","OptimizationUsed":"1","Runs":"100","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"Apache-2.0","Proxy":"0","Implementation":"","SwarmSource":"ipfs://c7fde565cc89de062e7434f9db5f072aa20960fc67d318bbc6d86499a2a9ed63"}]}