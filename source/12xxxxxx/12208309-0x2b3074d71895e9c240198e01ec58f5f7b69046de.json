{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity >=0.4.24;\r\n\r\ninterface IERC20 {\r\n    // ERC20 Optional Views\r\n    function name() external view returns (string memory);\r\n\r\n    function symbol() external view returns (string memory);\r\n\r\n    function decimals() external view returns (uint8);\r\n\r\n    // Views\r\n    function totalSupply() external view returns (uint);\r\n\r\n    function balanceOf(address owner) external view returns (uint);\r\n\r\n    function allowance(address owner, address spender) external view returns (uint);\r\n\r\n    // Mutative functions\r\n    function transfer(address to, uint value) external returns (bool);\r\n\r\n    function approve(address spender, uint value) external returns (bool);\r\n\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint value\r\n    ) external returns (bool);\r\n\r\n    // Events\r\n    event Transfer(address indexed from, address indexed to, uint value);\r\n\r\n    event Approval(address indexed owner, address indexed spender, uint value);\r\n}\r\n\r\n\r\n// https://docs.synthetix.io/contracts/source/contracts/owned\r\ncontract Owned {\r\n    address public owner;\r\n    address public nominatedOwner;\r\n\r\n    constructor(address _owner) public {\r\n        require(_owner != address(0), \"Owner address cannot be 0\");\r\n        owner = _owner;\r\n        emit OwnerChanged(address(0), _owner);\r\n    }\r\n\r\n    function nominateNewOwner(address _owner) external onlyOwner {\r\n        nominatedOwner = _owner;\r\n        emit OwnerNominated(_owner);\r\n    }\r\n\r\n    function acceptOwnership() external {\r\n        require(msg.sender == nominatedOwner, \"You must be nominated before you can accept ownership\");\r\n        emit OwnerChanged(owner, nominatedOwner);\r\n        owner = nominatedOwner;\r\n        nominatedOwner = address(0);\r\n    }\r\n\r\n    modifier onlyOwner {\r\n        _onlyOwner();\r\n        _;\r\n    }\r\n\r\n    function _onlyOwner() private view {\r\n        require(msg.sender == owner, \"Only the contract owner may perform this action\");\r\n    }\r\n\r\n    event OwnerNominated(address newOwner);\r\n    event OwnerChanged(address oldOwner, address newOwner);\r\n}\r\n\r\n\r\npragma solidity >=0.4.24;\r\n\r\ncontract RewardsDistribution is Owned {\r\n\r\n    /**\r\n     * @notice Authorised address able to call distributeReward\r\n     */\r\n    address public authority;\r\n\r\n    /**\r\n     * @notice Address of reward token\r\n     */\r\n    address public rewardAddress;\r\n\r\n    constructor(\r\n        address _owner,\r\n        address _authority,\r\n        address _rewardAddress\r\n    ) public Owned(_owner) {\r\n        authority = _authority;\r\n        rewardAddress = _rewardAddress;\r\n    }\r\n\r\n    // ========== EXTERNAL SETTERS ==========\r\n\r\n    function setRewardAddress(address _rewardAddress) public onlyOwner {\r\n        rewardAddress = _rewardAddress;\r\n    }\r\n\r\n    /**\r\n     * @notice Set the address of the contract authorised to call distributeReward()\r\n     * @param _authority Address of the authorised calling contract.\r\n     */\r\n    function setAuthority(address _authority) public onlyOwner {\r\n        authority = _authority;\r\n    }\r\n\r\n    function distributeReward(address destination, uint amount) public returns (bool) {\r\n        require(amount > 0, \"Nothing to distribute\");\r\n        require(destination != address(0), \"destination address is not set\");\r\n        require(msg.sender == authority, \"Caller is not authorised\");\r\n        require(rewardAddress != address(0), \"reward address is not set\");\r\n        require(\r\n            IERC20(rewardAddress).balanceOf(address(this)) >= amount,\r\n            \"RewardsDistribution contract does not have enough tokens to distribute\"\r\n        );\r\n\r\n        // Transfer the reward token\r\n        IERC20(rewardAddress).transfer(destination, amount);\r\n        // If the contract implements RewardsDistributionRecipient.sol, inform it how many reward token its received.\r\n        bytes memory payload = abi.encodeWithSignature(\"notifyRewardAmount(uint256)\", amount);\r\n        // solhint-disable avoid-low-level-calls\r\n        bool success = destination.call(payload);\r\n        if (!success) {\r\n            // Note: we're ignoring the return value as it will fail for contracts that do not implement RewardsDistributionRecipient.sol\r\n        }\r\n        emit RewardsDistributed(amount);\r\n        return true;\r\n    }\r\n\r\n    /* ========== Events ========== */\r\n    event RewardsDistributed(uint amount);\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"nominateNewOwner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"destination\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"distributeReward\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"nominatedOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_rewardAddress\",\"type\":\"address\"}],\"name\":\"setRewardAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"acceptOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_authority\",\"type\":\"address\"}],\"name\":\"setAuthority\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"rewardAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"authority\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_authority\",\"type\":\"address\"},{\"name\":\"_rewardAddress\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"RewardsDistributed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnerNominated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"oldOwner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnerChanged\",\"type\":\"event\"}]","ContractName":"RewardsDistribution","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"00000000000000000000000031497f6d5011627f2ae83d9afc1e58010f6fe23b00000000000000000000000031497f6d5011627f2ae83d9afc1e58010f6fe23b000000000000000000000000f3ae5d769e153ef72b4e3591ac004e89f48107a1","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"bzzr://3dda4a6f6546c0d59d83a7885891249435266d71e2971f6fa8f88a05a25e3286"}]}