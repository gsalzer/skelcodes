{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.7.0;\r\npragma experimental ABIEncoderV2;\r\n\r\ninterface CTokenInterface {\r\n    function underlying() external view returns (address);\r\n}\r\n\r\ninterface TokenInterface {\r\n    function balanceOf(address) external view returns (uint);\r\n    function decimals() external view returns (uint);\r\n}\r\n\r\ninterface OrcaleComp {\r\n    function getUnderlyingPrice(address) external view returns (uint);\r\n}\r\n\r\ninterface ComptrollerLensInterface {\r\n    function markets(address) external view returns (bool, uint, bool);\r\n}\r\n\r\ninterface InstaMapping {\r\n    function cTokenMapping(address) external view returns (address);\r\n}\r\n\r\ninterface ChainLinkInterface {\r\n    function latestAnswer() external view returns (int256);\r\n    function decimals() external view returns (uint256);\r\n}\r\n\r\ninterface AaveInterface {\r\n    function getReserveConfigurationData(address _reserve)\r\n    external\r\n    view\r\n    returns (\r\n        uint256 ltv,\r\n        uint256 liquidationThreshold,\r\n        uint256 liquidationBonus,\r\n        address interestRateStrategyAddress,\r\n        bool usageAsCollateralEnabled,\r\n        bool borrowingEnabled,\r\n        bool stableBorrowRateEnabled,\r\n        bool isActive\r\n    );\r\n}\r\n\r\ninterface AaveV2Interface {\r\n    function getReserveConfigurationData(address asset)\r\n    external\r\n    view\r\n    returns (\r\n        uint256 decimals,\r\n        uint256 ltv,\r\n        uint256 liquidationThreshold,\r\n        uint256 liquidationBonus,\r\n        uint256 reserveFactor,\r\n        bool usageAsCollateralEnabled,\r\n        bool borrowingEnabled,\r\n        bool stableBorrowRateEnabled,\r\n        bool isActive,\r\n        bool isFrozen\r\n    );\r\n}\r\n\r\ninterface AaveProviderInterface {\r\n    function getLendingPool() external view returns (address);\r\n    function getLendingPoolCore() external view returns (address);\r\n    function getPriceOracle() external view returns (address);\r\n}\r\n\r\ninterface AavePriceInterface {\r\n    function getAssetPrice(address _asset) external view returns (uint256);\r\n}\r\n\r\ninterface AaveCoreInterface {\r\n    function getReserveCurrentLiquidityRate(address _reserve) external view returns (uint256);\r\n    function getReserveCurrentVariableBorrowRate(address _reserve) external view returns (uint256);\r\n    function getReserveATokenAddress(address _reserve) external view returns (address);\r\n}\r\n\r\ninterface VatLike {\r\n    function ilks(bytes32) external view returns (uint, uint, uint, uint, uint);\r\n    function dai(address) external view returns (uint);\r\n    function urns(bytes32, address) external view returns (uint, uint);\r\n    function gem(bytes32, address) external view returns (uint);\r\n}\r\n\r\ninterface SpotLike {\r\n    function ilks(bytes32) external view returns (PipLike, uint);\r\n}\r\n\r\ninterface PipLike {\r\n    function peek() external view returns (bytes32, bool);\r\n}\r\n\r\ninterface InstaMcdAddress {\r\n    function manager() external view returns (address);\r\n    function vat() external view returns (address);\r\n    function jug() external view returns (address);\r\n    function spot() external view returns (address);\r\n    function pot() external view returns (address);\r\n    function getCdps() external view returns (address);\r\n}\r\n\r\n\r\ncontract DSMath {\r\n\r\n    function add(uint x, uint y) internal pure returns (uint z) {\r\n        require((z = x + y) >= x, \"math-not-safe\");\r\n    }\r\n\r\n    function mul(uint x, uint y) internal pure returns (uint z) {\r\n        require(y == 0 || (z = x * y) / y == x, \"math-not-safe\");\r\n    }\r\n\r\n    uint constant WAD = 10 ** 18;\r\n    uint constant RAY = 10 ** 27;\r\n\r\n    function rmul(uint x, uint y) internal pure returns (uint z) {\r\n        z = add(mul(x, y), RAY / 2) / RAY;\r\n    }\r\n\r\n    function wmul(uint x, uint y) internal pure returns (uint z) {\r\n        z = add(mul(x, y), WAD / 2) / WAD;\r\n    }\r\n\r\n    function rdiv(uint x, uint y) internal pure returns (uint z) {\r\n        z = add(mul(x, RAY), y / 2) / y;\r\n    }\r\n\r\n    function wdiv(uint x, uint y) internal pure returns (uint z) {\r\n        z = add(mul(x, WAD), y / 2) / y;\r\n    }\r\n\r\n    function sub(uint x, uint y) internal pure returns (uint z) {\r\n        require((z = x - y) <= x, \"ds-math-sub-underflow\");\r\n    }\r\n\r\n}\r\n\r\ncontract Helper is DSMath {\r\n     /**\r\n     * @dev Return ethereum address\r\n     */\r\n    function getEthAddress() internal pure returns (address) {\r\n        return 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE; // ETH Address\r\n    }\r\n\r\n    /**\r\n     * @dev Return WTH address\r\n     */\r\n    function getWethAddress() internal pure returns (address) {\r\n        return 0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2; // WETH Address mainnet\r\n    }\r\n\r\n     /**\r\n     * @dev Return eth price feed address\r\n     */\r\n    function getEthPriceFeed() internal pure returns (address) {\r\n        return 0x5f4eC3Df9cbd43714FE2740f5E3616155c5b8419; // mainnet\r\n    }\r\n}\r\n\r\ncontract CompoundHelpers is Helper {\r\n    /**\r\n     * @dev get Compound Comptroller\r\n     */\r\n    function getComptroller() public pure returns (ComptrollerLensInterface) {\r\n        return ComptrollerLensInterface(0x3d9819210A31b4961b30EF54bE2aeD79B9c9Cd3B); // mainnet\r\n    }\r\n\r\n    /**\r\n     * @dev get Compound Open Feed Oracle Address\r\n     */\r\n    function getOracleAddress() public pure returns (address) {\r\n        return 0x922018674c12a7F0D394ebEEf9B58F186CdE13c1;\r\n    }\r\n\r\n    /**\r\n     * @dev get ETH Address\r\n     */\r\n    function getCETHAddress() public pure returns (address) {\r\n        return 0x4Ddc2D193948926D02f9B1fE9e1daa0718270ED5;\r\n    }\r\n\r\n    /**\r\n     * @dev Return InstaDApp Mapping Addresses\r\n     */\r\n    function getMappingAddr() internal pure returns (address) {\r\n        return 0xe81F70Cc7C0D46e12d70efc60607F16bbD617E88; // InstaMapping Address\r\n    }\r\n\r\n    struct CompData {\r\n        uint tokenPriceInEth;\r\n        uint tokenPriceInUsd;\r\n    }\r\n}\r\n\r\n\r\ncontract CompoundResolver is CompoundHelpers {\r\n\r\n    function getCompPrice(CTokenInterface cToken) public view returns (uint tokenPrice, uint ethPrice) {\r\n        uint decimals = getCETHAddress() == address(cToken) ? 18 : TokenInterface(cToken.underlying()).decimals();\r\n        uint price = OrcaleComp(getOracleAddress()).getUnderlyingPrice(address(cToken));\r\n        ethPrice = OrcaleComp(getOracleAddress()).getUnderlyingPrice(getCETHAddress());\r\n        tokenPrice = price / 10 ** (18 - decimals);\r\n    }\r\n\r\n    function getCompoundData(address token, uint ethAmount) public view returns (uint) {\r\n        address cTokenAddr = InstaMapping(getMappingAddr()).cTokenMapping(token);\r\n        if (cTokenAddr == address(0)) return 0;\r\n        ComptrollerLensInterface comptroller = getComptroller();\r\n        (, uint cf, ) = comptroller.markets(getCETHAddress());\r\n        CTokenInterface cToken = CTokenInterface(cTokenAddr);\r\n        (uint tokenPrice, uint ethPrice) = getCompPrice(cToken);\r\n        uint ethColl = wmul(ethAmount, ethPrice);\r\n        ethColl = wmul(ethColl, sub(cf, 10**16));\r\n        uint debtCanBorrow = wdiv(ethColl, tokenPrice);\r\n        return debtCanBorrow;\r\n    }\r\n}\r\n\r\ncontract AaveHelpers is CompoundResolver {\r\n    /**\r\n     * @dev get Aave Provider Address\r\n    */\r\n    function getAaveProviderAddress() internal pure returns (address) {\r\n        return 0x24a42fD28C976A61Df5D00D0599C34c4f90748c8; //mainnet\r\n    }\r\n\r\n    struct AaveTokenData {\r\n        uint ltv;\r\n        uint threshold;\r\n        bool usageAsCollEnabled;\r\n        bool borrowEnabled;\r\n        bool stableBorrowEnabled;\r\n        bool isActive;\r\n    }\r\n\r\n    function collateralData(AaveInterface aave, address token) internal view returns(AaveTokenData memory) {\r\n        AaveTokenData memory aaveTokenData;\r\n        (\r\n            aaveTokenData.ltv,\r\n            aaveTokenData.threshold,\r\n            ,\r\n            ,\r\n            aaveTokenData.usageAsCollEnabled,\r\n            aaveTokenData.borrowEnabled,\r\n            aaveTokenData.stableBorrowEnabled,\r\n            aaveTokenData.isActive\r\n        ) = aave.getReserveConfigurationData(token);\r\n        return aaveTokenData;\r\n    }\r\n\r\n    function getAavePrices(AaveProviderInterface AaveProvider, address token) \r\n    public view returns(uint tokenPrice, uint ethPrice) {\r\n        uint tokenPriceInETH = AavePriceInterface(AaveProvider.getPriceOracle()).getAssetPrice(token);\r\n        uint ethPriceDecimals = ChainLinkInterface(getEthPriceFeed()).decimals();\r\n        ethPrice = uint(ChainLinkInterface(getEthPriceFeed()).latestAnswer());\r\n        ethPrice = ethPrice * (10 ** (18 - ethPriceDecimals));\r\n        tokenPrice = wmul(tokenPriceInETH, ethPrice);\r\n    }\r\n\r\n    function getAaveData(address token, uint ethAmount)\r\n    public view returns (uint) {\r\n        AaveProviderInterface AaveProvider = AaveProviderInterface(getAaveProviderAddress());\r\n        AaveInterface aave = AaveInterface(AaveProvider.getLendingPool());\r\n        AaveCoreInterface aaveCore = AaveCoreInterface(AaveProvider.getLendingPoolCore());\r\n        if (aaveCore.getReserveATokenAddress(token) == address(0)) return 0;\r\n        \r\n        AaveTokenData memory aaveToken = collateralData(aave, token);\r\n        AaveTokenData memory aaveEthToken = collateralData(aave, getEthAddress());\r\n        if (!aaveToken.borrowEnabled) return 0;\r\n        (uint tokenPrice, uint ethPrice) = getAavePrices(AaveProvider, token);\r\n        uint ethColl = wmul(ethAmount, ethPrice);\r\n        uint cf = sub(aaveEthToken.ltv, 1) * (10 ** 16);\r\n        ethColl = wmul(ethColl, cf);\r\n        uint debtCanBorrow = wdiv(ethColl, tokenPrice);\r\n        return debtCanBorrow;\r\n    }\r\n}\r\n\r\ncontract AaveV2Helpers is AaveHelpers {\r\n    /**\r\n     * @dev get Aave Provider Address\r\n    */\r\n    function getAaveV2ProviderAddress() internal pure returns (address) {\r\n        return 0xB53C1a33016B2DC2fF3653530bfF1848a515c8c5; //mainnet\r\n    }\r\n\r\n    function collateralData(AaveV2Interface aave, address token) internal view returns(AaveTokenData memory) {\r\n        AaveTokenData memory aaveTokenData;\r\n        (\r\n            ,\r\n            aaveTokenData.ltv,\r\n            aaveTokenData.threshold,\r\n            ,\r\n            ,\r\n            aaveTokenData.usageAsCollEnabled,\r\n            aaveTokenData.borrowEnabled,\r\n            aaveTokenData.stableBorrowEnabled,\r\n            aaveTokenData.isActive\r\n            ,\r\n        ) = aave.getReserveConfigurationData(token);\r\n        return aaveTokenData;\r\n    }\r\n\r\n    function getAaveV2Prices(AaveProviderInterface AaveProvider, address token) \r\n    public view returns(uint tokenPrice, uint ethPrice) {\r\n        uint tokenPriceInETH = AavePriceInterface(AaveProvider.getPriceOracle()).getAssetPrice(token);\r\n        uint ethPriceDecimals = ChainLinkInterface(getEthPriceFeed()).decimals();\r\n        ethPrice = uint(ChainLinkInterface(getEthPriceFeed()).latestAnswer());\r\n        ethPrice = ethPrice * (10 ** (18 - ethPriceDecimals));\r\n        tokenPrice = wmul(tokenPriceInETH, ethPrice);\r\n    }\r\n\r\n    function getAaveV2Data(address token, uint ethAmount)\r\n    public view returns (uint) {\r\n        AaveProviderInterface AaveProvider = AaveProviderInterface(getAaveV2ProviderAddress());\r\n        AaveV2Interface aave = AaveV2Interface(AaveProvider.getLendingPool());\r\n        AaveCoreInterface aaveCore = AaveCoreInterface(AaveProvider.getLendingPoolCore());\r\n        if (aaveCore.getReserveATokenAddress(token) == address(0)) return 0;\r\n        \r\n        AaveTokenData memory aaveToken = collateralData(aave, token);\r\n        AaveTokenData memory aaveEthToken = collateralData(aave, getEthAddress());\r\n        if (!aaveToken.borrowEnabled) return 0;\r\n        (uint tokenPrice, uint ethPrice) = getAaveV2Prices(AaveProvider, token);\r\n        uint ethColl = wmul(ethAmount, ethPrice);\r\n        uint cf = sub(aaveEthToken.ltv, 1) * (10 ** 16);\r\n        ethColl = wmul(ethColl, cf);\r\n        uint debtCanBorrow = wdiv(ethColl, tokenPrice);\r\n        return debtCanBorrow;\r\n    }\r\n}\r\n\r\ncontract MakerHelpers is AaveV2Helpers {\r\n    /**\r\n     * @dev get MakerDAO MCD Address contract\r\n     */\r\n    function getMcdAddresses() public pure returns (address) {\r\n        return 0xF23196DF1C440345DE07feFbe556a5eF0dcD29F0;\r\n    }\r\n\r\n     /**\r\n     * @dev get Dai address\r\n     */\r\n    function getDaiAddress() public pure returns (address) {\r\n        return 0x6B175474E89094C44Da98b954EedeAC495271d0F;\r\n    }\r\n\r\n    /**\r\n     * @dev Convert String to bytes32.\r\n    */\r\n    function stringToBytes32(string memory str) internal pure returns (bytes32 result) {\r\n        require(bytes(str).length != 0, \"String-Empty\");\r\n        // solium-disable-next-line security/no-inline-assembly\r\n        assembly {\r\n            result := mload(add(str, 32))\r\n        }\r\n    }\r\n\r\n    function getColPrice(bytes32 ilk) internal view returns (uint price) {\r\n        address spot = InstaMcdAddress(getMcdAddresses()).spot();\r\n        address vat = InstaMcdAddress(getMcdAddresses()).vat();\r\n        (, uint mat) = SpotLike(spot).ilks(ilk);\r\n        (,,uint spotPrice,,) = VatLike(vat).ilks(ilk);\r\n        price = rmul(mat, spotPrice);\r\n    }\r\n\r\n    function getColRatio(bytes32 ilk) internal view returns (uint ratio) {\r\n        address spot = InstaMcdAddress(getMcdAddresses()).spot();\r\n        (, ratio) = SpotLike(spot).ilks(ilk);\r\n        ratio = rdiv(RAY, ratio);\r\n    }\r\n}\r\n\r\n\r\ncontract MakerResolver is MakerHelpers {\r\n\r\n    function getMakerData(address token, uint ethAmt) public view returns (uint) {\r\n        if (token != getDaiAddress()) return 0;\r\n        bytes32 ilk = stringToBytes32(\"ETH-A\");\r\n        uint ethPrice = getColPrice(ilk);\r\n        ethPrice = ethPrice / 10 ** 9;\r\n        uint cf = getColRatio(ilk) / 10 ** 9;\r\n        uint ethColl = wmul(ethAmt, ethPrice);\r\n        ethColl = wmul(ethColl, cf);\r\n        uint debtCanBorrow = ethColl;\r\n        return debtCanBorrow;\r\n    }\r\n}\r\n\r\ncontract DydxFlashloanHelper is MakerResolver {\r\n    /**\r\n     * @dev get Dydx Solo Address\r\n    */\r\n    function getSoloAddress() public pure returns (address addr) {\r\n        addr = 0x1E0447b19BB6EcFdAe1e4AE1694b0C3659614e4e;\r\n    }\r\n}\r\n\r\ncontract DydxFlashloanResolver is DydxFlashloanHelper {\r\n    struct RouteData {\r\n        uint dydx;\r\n        uint maker;\r\n        uint compound;\r\n        uint aave;\r\n        uint aaveV2;\r\n    }\r\n    \r\n    function getTokenLimit(address token) public view returns (RouteData memory){\r\n        RouteData memory routeData;\r\n        uint ethBalanceSolo = TokenInterface(getWethAddress()).balanceOf(getSoloAddress());\r\n        routeData.dydx = token == getEthAddress() ? ethBalanceSolo : TokenInterface(token).balanceOf(getSoloAddress());\r\n        routeData.dydx = wmul(routeData.dydx, 99 * 10 ** 16);\r\n        routeData.maker = getMakerData(token, ethBalanceSolo);\r\n        routeData.compound = getCompoundData(token, ethBalanceSolo);\r\n        routeData.aave = getAaveData(token, ethBalanceSolo);\r\n        routeData.aaveV2 = getAaveV2Data(token, ethBalanceSolo);\r\n        return routeData;\r\n    }\r\n\r\n    function getTokensLimit(address[] memory tokens) public view returns (RouteData[] memory){\r\n        uint _len = tokens.length;\r\n        RouteData[] memory routeData = new RouteData[](_len);\r\n        for (uint i = 0; i < _len; i++) {\r\n            routeData[i] = getTokenLimit(tokens[i]);\r\n        }\r\n        return routeData;\r\n    }\r\n}\r\n\r\ncontract InstaPoolResolver is DydxFlashloanResolver {\r\n    string public constant name = \"instapool-Resolver-v2.2\";\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"ethAmount\",\"type\":\"uint256\"}],\"name\":\"getAaveData\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract AaveProviderInterface\",\"name\":\"AaveProvider\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"getAavePrices\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"ethPrice\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"ethAmount\",\"type\":\"uint256\"}],\"name\":\"getAaveV2Data\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract AaveProviderInterface\",\"name\":\"AaveProvider\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"getAaveV2Prices\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"ethPrice\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCETHAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract CTokenInterface\",\"name\":\"cToken\",\"type\":\"address\"}],\"name\":\"getCompPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"ethPrice\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"ethAmount\",\"type\":\"uint256\"}],\"name\":\"getCompoundData\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getComptroller\",\"outputs\":[{\"internalType\":\"contract ComptrollerLensInterface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getDaiAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"ethAmt\",\"type\":\"uint256\"}],\"name\":\"getMakerData\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMcdAddresses\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOracleAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getSoloAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"getTokenLimit\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"dydx\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maker\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"compound\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"aave\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"aaveV2\",\"type\":\"uint256\"}],\"internalType\":\"struct DydxFlashloanResolver.RouteData\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"tokens\",\"type\":\"address[]\"}],\"name\":\"getTokensLimit\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"dydx\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maker\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"compound\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"aave\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"aaveV2\",\"type\":\"uint256\"}],\"internalType\":\"struct DydxFlashloanResolver.RouteData[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"InstaPoolResolver","CompilerVersion":"v0.7.0+commit.9e61f92b","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://2a2b00927d2f4b610d056fcda1a5dfc4d33a913621ee030135bdd0a8a06fb465"}]}