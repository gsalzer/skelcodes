{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.6.0;//标明了版本符合标准\r\n\r\n    library SafeMath {//安全数值运算库\r\n        function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n            if (a == 0) {\r\n                return 0; \r\n            }\r\n            uint256 c = a * b;\r\n            assert(c / a == b);\r\n            return c; \r\n        }\r\n        function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n// assert(b > 0); // Solidity automatically throws when dividing by 0\r\n            uint256 c = a / b;\r\n// assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n            return c; \r\n        }\r\n\r\n        function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n            assert(b <= a);\r\n            return a - b; \r\n        }\r\n        function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n            uint256 c = a + b;\r\n            assert(c >= a);\r\n            return c; \r\n        }\r\n    }\r\n\r\n    contract ALPHA {\r\n        using SafeMath for uint;\r\n        string public name; // ERC20 标准\r\n        string public symbol; // ERC20 标准\r\n        uint256 public decimals; // ERC20 标准，decimals 可以有的小数点个数，最小的代币单位。18 是建议的默认值\r\n        uint256 public totalSupply; // ERC20 标准 总供应量\r\n        mapping (address => uint256) public balanceOf;\r\n        mapping (address => mapping (address => uint256)) public allowance;\r\n        event Transfer(address indexed from, address indexed to, uint256 value);\r\n        constructor(uint256 initialSupply, string memory tokenName, string memory tokenSymbol, uint256 _decimals) public {\r\n            totalSupply = initialSupply * 10 ** _decimals; // 供应的份额，份额跟最小的代币单位有关，份额 = 币数 * 10 ** decimals。\r\n            balanceOf[msg.sender] = totalSupply; // 创建者拥有所有的代币\r\n            name = tokenName; // 代币名称\r\n            symbol = tokenSymbol; // 代币符号\r\n            decimals = _decimals; \r\n        }\r\n\r\n        function _transfer(address _from, address _to, uint _value) internal {//检测了_to 是否为空地址，但未检测地址_to 和_from 是否为同地址\r\n            require(_to != address(0)&& _from != _to);\r\n            require(balanceOf[_from] >= _value);\r\n            require(balanceOf[_to].add(_value) > balanceOf[_to]);\r\n            uint previousBalances = balanceOf[_from].add(balanceOf[_to]); balanceOf[_from] = balanceOf[_from].sub(_value); balanceOf[_to] = balanceOf[_to].add(_value);\r\n            emit Transfer(_from, _to, _value);\r\n            assert(balanceOf[_from].add(balanceOf[_to]) == previousBalances); \r\n        }\r\n\r\n\r\n        function transfer(address _to, uint256 _value) public {\r\n            // require(_to != address(0) && _to != _from); \r\n            _transfer(msg.sender, _to, _value); \r\n        }\r\n\r\n\r\n        function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {//显示的返回了 true，检测地址_to 和_from 是否为同地址，检测地址_from 是否为空地址\r\n            require(_value <= allowance[_from][msg.sender]); // Check allowance\r\n            allowance[_from][msg.sender] = allowance[_from][msg.sender].sub(_value); _transfer(_from, _to, _value);\r\n            return true; \r\n        }\r\n\r\n\r\n        function approve(address _spender, uint256 _value) public//不存在交易顺序依赖\r\n            returns (bool success) {\r\n            require(_spender != address(0));\r\n            require((_value == 0) || (allowance[msg.sender][_spender] == 0));\r\n            allowance[msg.sender][_spender] = _value;\r\n            return true; \r\n        }\r\n\r\n        \r\n    }","ABI":"[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"initialSupply\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"tokenName\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"tokenSymbol\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"_decimals\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"ALPHA","CompilerVersion":"v0.6.0+commit.26b70077","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000000000000000000000000000000000003b9aca00000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000c000000000000000000000000000000000000000000000000000000000000000120000000000000000000000000000000000000000000000000000000000000005414c5048410000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005414c504841000000000000000000000000000000000000000000000000000000","EVMVersion":"Default","Library":"","LicenseType":"Unknown","Proxy":"0","Implementation":"","SwarmSource":"ipfs://8a4f4512efe09619265742eca4eabbd6e91b25141b1ca7f5cabf67d0e15ab17f"}]}