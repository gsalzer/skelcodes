{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/CouncilDilution.sol\": {\r\n      \"content\": \"// File contracts/Owned.sol\\n\\npragma solidity ^0.5.16;\\n\\n// https://docs.synthetix.io/contracts/source/contracts/owned\\ncontract Owned {\\n    address public owner;\\n    address public nominatedOwner;\\n\\n    constructor(address _owner) public {\\n        require(_owner != address(0), \\\"Owner address cannot be 0\\\");\\n        owner = _owner;\\n        emit OwnerChanged(address(0), _owner);\\n    }\\n\\n    function nominateNewOwner(address _owner) external onlyOwner {\\n        nominatedOwner = _owner;\\n        emit OwnerNominated(_owner);\\n    }\\n\\n    function acceptOwnership() external {\\n        require(msg.sender == nominatedOwner, \\\"You must be nominated before you can accept ownership\\\");\\n        emit OwnerChanged(owner, nominatedOwner);\\n        owner = nominatedOwner;\\n        nominatedOwner = address(0);\\n    }\\n\\n    modifier onlyOwner {\\n        _onlyOwner();\\n        _;\\n    }\\n\\n    function _onlyOwner() private view {\\n        require(msg.sender == owner, \\\"Only the contract owner may perform this action\\\");\\n    }\\n\\n    event OwnerNominated(address newOwner);\\n    event OwnerChanged(address oldOwner, address newOwner);\\n}\\n\\n// File @openzeppelin/contracts/math/SafeMath.sol@v2.4.0\\n\\npragma solidity ^0.5.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return sub(a, b, \\\"SafeMath: subtraction overflow\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     * - Subtraction cannot overflow.\\n     *\\n     * _Available since v2.4.0._\\n     */\\n    function sub(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        uint256 c = a - b;\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     *\\n     * _Available since v2.4.0._\\n     */\\n    function div(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        // Solidity only automatically asserts when dividing by 0\\n        require(b > 0, errorMessage);\\n        uint256 c = a / b;\\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return mod(a, b, \\\"SafeMath: modulo by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts with custom message when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     *\\n     * _Available since v2.4.0._\\n     */\\n    function mod(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        require(b != 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\\n// File contracts/SafeDecimalMath.sol\\n\\npragma solidity ^0.5.16;\\n\\n// Libraries\\n\\n// https://docs.synthetix.io/contracts/source/libraries/safedecimalmath\\nlibrary SafeDecimalMath {\\n    using SafeMath for uint;\\n\\n    /* Number of decimal places in the representations. */\\n    uint8 public constant decimals = 18;\\n    uint8 public constant highPrecisionDecimals = 27;\\n\\n    /* The number representing 1.0. */\\n    uint public constant UNIT = 10**uint(decimals);\\n\\n    /* The number representing 1.0 for higher fidelity numbers. */\\n    uint public constant PRECISE_UNIT = 10**uint(highPrecisionDecimals);\\n    uint private constant UNIT_TO_HIGH_PRECISION_CONVERSION_FACTOR = 10**uint(highPrecisionDecimals - decimals);\\n\\n    /**\\n     * @return Provides an interface to UNIT.\\n     */\\n    function unit() external pure returns (uint) {\\n        return UNIT;\\n    }\\n\\n    /**\\n     * @return Provides an interface to PRECISE_UNIT.\\n     */\\n    function preciseUnit() external pure returns (uint) {\\n        return PRECISE_UNIT;\\n    }\\n\\n    /**\\n     * @return The result of multiplying x and y, interpreting the operands as fixed-point\\n     * decimals.\\n     *\\n     * @dev A unit factor is divided out after the product of x and y is evaluated,\\n     * so that product must be less than 2**256. As this is an integer division,\\n     * the internal division always rounds down. This helps save on gas. Rounding\\n     * is more expensive on gas.\\n     */\\n    function multiplyDecimal(uint x, uint y) internal pure returns (uint) {\\n        /* Divide by UNIT to remove the extra factor introduced by the product. */\\n        return x.mul(y) / UNIT;\\n    }\\n\\n    /**\\n     * @return The result of safely multiplying x and y, interpreting the operands\\n     * as fixed-point decimals of the specified precision unit.\\n     *\\n     * @dev The operands should be in the form of a the specified unit factor which will be\\n     * divided out after the product of x and y is evaluated, so that product must be\\n     * less than 2**256.\\n     *\\n     * Unlike multiplyDecimal, this function rounds the result to the nearest increment.\\n     * Rounding is useful when you need to retain fidelity for small decimal numbers\\n     * (eg. small fractions or percentages).\\n     */\\n    function _multiplyDecimalRound(\\n        uint x,\\n        uint y,\\n        uint precisionUnit\\n    ) private pure returns (uint) {\\n        /* Divide by UNIT to remove the extra factor introduced by the product. */\\n        uint quotientTimesTen = x.mul(y) / (precisionUnit / 10);\\n\\n        if (quotientTimesTen % 10 >= 5) {\\n            quotientTimesTen += 10;\\n        }\\n\\n        return quotientTimesTen / 10;\\n    }\\n\\n    /**\\n     * @return The result of safely multiplying x and y, interpreting the operands\\n     * as fixed-point decimals of a precise unit.\\n     *\\n     * @dev The operands should be in the precise unit factor which will be\\n     * divided out after the product of x and y is evaluated, so that product must be\\n     * less than 2**256.\\n     *\\n     * Unlike multiplyDecimal, this function rounds the result to the nearest increment.\\n     * Rounding is useful when you need to retain fidelity for small decimal numbers\\n     * (eg. small fractions or percentages).\\n     */\\n    function multiplyDecimalRoundPrecise(uint x, uint y) internal pure returns (uint) {\\n        return _multiplyDecimalRound(x, y, PRECISE_UNIT);\\n    }\\n\\n    /**\\n     * @return The result of safely multiplying x and y, interpreting the operands\\n     * as fixed-point decimals of a standard unit.\\n     *\\n     * @dev The operands should be in the standard unit factor which will be\\n     * divided out after the product of x and y is evaluated, so that product must be\\n     * less than 2**256.\\n     *\\n     * Unlike multiplyDecimal, this function rounds the result to the nearest increment.\\n     * Rounding is useful when you need to retain fidelity for small decimal numbers\\n     * (eg. small fractions or percentages).\\n     */\\n    function multiplyDecimalRound(uint x, uint y) internal pure returns (uint) {\\n        return _multiplyDecimalRound(x, y, UNIT);\\n    }\\n\\n    /**\\n     * @return The result of safely dividing x and y. The return value is a high\\n     * precision decimal.\\n     *\\n     * @dev y is divided after the product of x and the standard precision unit\\n     * is evaluated, so the product of x and UNIT must be less than 2**256. As\\n     * this is an integer division, the result is always rounded down.\\n     * This helps save on gas. Rounding is more expensive on gas.\\n     */\\n    function divideDecimal(uint x, uint y) internal pure returns (uint) {\\n        /* Reintroduce the UNIT factor that will be divided out by y. */\\n        return x.mul(UNIT).div(y);\\n    }\\n\\n    /**\\n     * @return The result of safely dividing x and y. The return value is as a rounded\\n     * decimal in the precision unit specified in the parameter.\\n     *\\n     * @dev y is divided after the product of x and the specified precision unit\\n     * is evaluated, so the product of x and the specified precision unit must\\n     * be less than 2**256. The result is rounded to the nearest increment.\\n     */\\n    function _divideDecimalRound(\\n        uint x,\\n        uint y,\\n        uint precisionUnit\\n    ) private pure returns (uint) {\\n        uint resultTimesTen = x.mul(precisionUnit * 10).div(y);\\n\\n        if (resultTimesTen % 10 >= 5) {\\n            resultTimesTen += 10;\\n        }\\n\\n        return resultTimesTen / 10;\\n    }\\n\\n    /**\\n     * @return The result of safely dividing x and y. The return value is as a rounded\\n     * standard precision decimal.\\n     *\\n     * @dev y is divided after the product of x and the standard precision unit\\n     * is evaluated, so the product of x and the standard precision unit must\\n     * be less than 2**256. The result is rounded to the nearest increment.\\n     */\\n    function divideDecimalRound(uint x, uint y) internal pure returns (uint) {\\n        return _divideDecimalRound(x, y, UNIT);\\n    }\\n\\n    /**\\n     * @return The result of safely dividing x and y. The return value is as a rounded\\n     * high precision decimal.\\n     *\\n     * @dev y is divided after the product of x and the high precision unit\\n     * is evaluated, so the product of x and the high precision unit must\\n     * be less than 2**256. The result is rounded to the nearest increment.\\n     */\\n    function divideDecimalRoundPrecise(uint x, uint y) internal pure returns (uint) {\\n        return _divideDecimalRound(x, y, PRECISE_UNIT);\\n    }\\n\\n    /**\\n     * @dev Convert a standard decimal representation to a high precision one.\\n     */\\n    function decimalToPreciseDecimal(uint i) internal pure returns (uint) {\\n        return i.mul(UNIT_TO_HIGH_PRECISION_CONVERSION_FACTOR);\\n    }\\n\\n    /**\\n     * @dev Convert a high precision decimal to a standard decimal representation.\\n     */\\n    function preciseDecimalToDecimal(uint i) internal pure returns (uint) {\\n        uint quotientTimesTen = i / (UNIT_TO_HIGH_PRECISION_CONVERSION_FACTOR / 10);\\n\\n        if (quotientTimesTen % 10 >= 5) {\\n            quotientTimesTen += 10;\\n        }\\n\\n        return quotientTimesTen / 10;\\n    }\\n}\\n\\n// File contracts/CouncilDilution.sol\\n\\n//SPDX-License-Identifier: Unlicense\\npragma solidity ^0.5.16;\\n\\npragma experimental ABIEncoderV2;\\n\\n/**\\n@title A contract that allows for the dilution of Spartan Council voting weights\\n@author @andytcf\\n */\\ncontract CouncilDilution is Owned {\\n    using SafeDecimalMath for uint;\\n\\n    /* SCCP configurable values */\\n\\n    // @notice How many seats on the Spartan Council\\n    uint public numOfSeats;\\n\\n    // @notice The length of a proposal (SCCP/SIP) voting period\\n    uint public proposalPeriod;\\n\\n    /* Global variables */\\n\\n    // @notice The ipfs hash of the latest Spartan Council election proposal\\n    string public latestElectionHash;\\n\\n    struct ElectionLog {\\n        // @notice The ipfs hash of a particular Spartan Council election proposal\\n        string electionHash;\\n        // @notice A mapping of the votes allocated to each of the Spartan Council members\\n        mapping(address => uint) votesForMember;\\n        // @notice A mapping to check whether an address was an elected Council member in this election\\n        mapping(address => bool) councilMembers;\\n        // @notice The timestamp which the election log was stored\\n        uint created;\\n    }\\n\\n    struct ProposalLog {\\n        // @notice The ipfs hash of a particular SCCP/SIP proposal\\n        string proposalHash;\\n        // @notice The election hash of the current epoch when the proposal was made\\n        string electionHash;\\n        //  @notice The timestamp which the voting period begins\\n        uint start;\\n        // @notice The timestamp which the voting period of the proposal ends\\n        uint end;\\n        // @notice A boolean value to check whether a proposal log exists\\n        bool exist;\\n    }\\n\\n    struct DilutionReceipt {\\n        // @notice The ipfs hash of the proposal which the dilution happened on\\n        string proposalHash;\\n        // @notice The address of the council member diluted\\n        address memberDiluted;\\n        // @notice The total amount in which the council member was diluted by\\n        uint totalDilutionValue;\\n        // @notice A list of dilutors\\n        address[] dilutors;\\n        // @notice A mapping to show the value of dilution per dilutor\\n        mapping(address => uint) voterDilutions;\\n        // @notice A flag value to check whether a dilution exist\\n        bool exist;\\n    }\\n\\n    // @notice Given a election hash, return the ElectionLog struct associated\\n    mapping(string => ElectionLog) public electionHashToLog;\\n\\n    // @notice Given a voter address and a council member address, return the delegated vote weight for the most recent Spartan Council election\\n    mapping(address => mapping(address => uint)) public latestDelegatedVoteWeight;\\n\\n    // @notice Given a council member address, return the total delegated vote weight for the most recent Spartan Council election\\n    mapping(address => uint) public latestVotingWeight;\\n\\n    // @notice Given a propoal hash and a voting address, find out the member the user has voted for\\n    mapping(string => mapping(address => address)) public electionMemberVotedFor;\\n\\n    // @notice Given a proposal hash and a voting address, find if a member has diluted\\n    mapping(string => mapping(address => bool)) public hasAddressDilutedForProposal;\\n\\n    // @notice Given a proposal hash (SCCP/SIP), return the ProposalLog struct associated\\n    mapping(string => ProposalLog) public proposalHashToLog;\\n\\n    // @notice Given a proposal hash and a council member, return the DilutionReceipt if it exists\\n    mapping(string => mapping(address => DilutionReceipt)) public proposalHashToMemberDilution;\\n\\n    /* Events */\\n\\n    // @notice An event emitted when a new ElectionLog is created\\n    event ElectionLogged(\\n        string electionHash,\\n        address[] nominatedCouncilMembers,\\n        address[] voters,\\n        address[] nomineesVotedFor,\\n        uint[] assignedVoteWeights\\n    );\\n\\n    // @notice An event emitted when a new ProposalLog is created\\n    event ProposalLogged(string proposalHash, string electionHash, uint start, uint end);\\n\\n    // @notice An event emitted when a new DilutionReceipt is created\\n    event DilutionCreated(\\n        string proposalHash,\\n        address memberDiluted,\\n        uint totalDilutionValueBefore,\\n        uint totalDilutionValueAfter\\n    );\\n\\n    // @notice An event emitted when a DilutionReceipt is modified\\n    event DilutionModified(\\n        string proposalHash,\\n        address memberDiluted,\\n        uint totalDilutionValueBefore,\\n        uint totalDilutionValueAfter\\n    );\\n\\n    // @notice An event emitted when the number of council seats is modified\\n    event SeatsModified(uint previousNumberOfSeats, uint newNumberOfSeats);\\n\\n    // @notice An event emitted when the proposal period is modified\\n    event ProposalPeriodModified(uint previousProposalPeriod, uint newProposalPeriod);\\n\\n    /* */\\n\\n    // @notice Initialises the contract with a X number of council seats and a proposal period of 3 days\\n    constructor(uint _numOfSeats) public Owned(msg.sender) {\\n        numOfSeats = _numOfSeats;\\n        proposalPeriod = 3 days;\\n    }\\n\\n    /* Mutative Functions */\\n\\n    /**\\n    @notice A function to create a new ElectionLog, this is called to record the result of a Spartan Council election\\n    @param electionHash The ipfs hash of the Spartan Council election proposal to log\\n    @param nominatedCouncilMembers The array of the successful Spartan Council nominees addresses, must be the same length as the numOfSeats\\n    @param voters An ordered array of all the voter's addresses corresponding to `nomineesVotedFor`, `assignedVoteWeights`\\n    @param nomineesVotedFor An ordered array of all the nominee address that received votes corresponding to `voters`, `assignedVoteWeights`\\n    @param assignedVoteWeights An ordered array of the voting weights corresponding to `voters`, `nomineesVotedFor`\\n    @return electionHash\\n     */\\n    function logElection(\\n        string memory electionHash,\\n        address[] memory nominatedCouncilMembers,\\n        address[] memory voters,\\n        address[] memory nomineesVotedFor,\\n        uint[] memory assignedVoteWeights\\n    ) public onlyOwner() returns (string memory) {\\n        require(bytes(electionHash).length > 0, \\\"empty election hash provided\\\");\\n        require(voters.length > 0, \\\"empty voters array provided\\\");\\n        require(nomineesVotedFor.length > 0, \\\"empty nomineesVotedFor array provided\\\");\\n        require(assignedVoteWeights.length > 0, \\\"empty assignedVoteWeights array provided\\\");\\n        require(nominatedCouncilMembers.length == numOfSeats, \\\"invalid number of council members\\\");\\n\\n        ElectionLog memory newElectionLog = ElectionLog(electionHash, now);\\n\\n        electionHashToLog[electionHash] = newElectionLog;\\n\\n        // store the voting history for calculating the allocated voting weights\\n        for (uint i = 0; i < voters.length; i++) {\\n            latestDelegatedVoteWeight[voters[i]][nomineesVotedFor[i]] = assignedVoteWeights[i];\\n            latestVotingWeight[nomineesVotedFor[i]] = latestVotingWeight[nomineesVotedFor[i]] + assignedVoteWeights[i];\\n            electionMemberVotedFor[electionHash][voters[i]] = nomineesVotedFor[i];\\n        }\\n\\n        // store the total weight of each successful council member\\n        for (uint j = 0; j < nominatedCouncilMembers.length; j++) {\\n            electionHashToLog[electionHash].votesForMember[nominatedCouncilMembers[j]] = latestVotingWeight[\\n                nominatedCouncilMembers[j]\\n            ];\\n            electionHashToLog[electionHash].councilMembers[nominatedCouncilMembers[j]] = true;\\n        }\\n\\n        latestElectionHash = electionHash;\\n\\n        emit ElectionLogged(electionHash, nominatedCouncilMembers, voters, nomineesVotedFor, assignedVoteWeights);\\n\\n        return electionHash;\\n    }\\n\\n    /**\\n    @notice A function to created a new ProposalLog, this is called to record SCCP/SIPS created and allow for dilution to occur per proposal.\\n    @param proposalHash the ipfs hash of the proposal to be logged\\n    @return proposalHash\\n     */\\n    function logProposal(string memory proposalHash) public returns (string memory) {\\n        require(!proposalHashToLog[proposalHash].exist, \\\"proposal hash is not unique\\\");\\n        require(bytes(proposalHash).length > 0, \\\"proposal hash must not be empty\\\");\\n\\n        uint start = now;\\n\\n        uint end = start + proposalPeriod;\\n\\n        ProposalLog memory newProposalLog = ProposalLog(proposalHash, latestElectionHash, start, end, true);\\n\\n        proposalHashToLog[proposalHash] = newProposalLog;\\n\\n        emit ProposalLogged(proposalHash, latestElectionHash, start, end);\\n\\n        return proposalHash;\\n    }\\n\\n    /**\\n    @notice  A function to dilute a council member's voting weight for a particular proposal\\n    @param proposalHash the ipfs hash of the proposal to be logged\\n    @param memberToDilute the address of the member to dilute\\n     */\\n    function dilute(string memory proposalHash, address memberToDilute) public {\\n        require(memberToDilute != address(0), \\\"member to dilute must be a valid address\\\");\\n        require(\\n            electionHashToLog[latestElectionHash].councilMembers[memberToDilute],\\n            \\\"member to dilute must be a nominated council member\\\"\\n        );\\n        require(proposalHashToLog[proposalHash].exist, \\\"proposal does not exist\\\");\\n        require(\\n            latestDelegatedVoteWeight[msg.sender][memberToDilute] > 0,\\n            \\\"sender has not delegated voting weight for member\\\"\\n        );\\n        require(now < proposalHashToLog[proposalHash].end, \\\"dilution can only occur within the proposal voting period\\\");\\n        require(hasAddressDilutedForProposal[proposalHash][msg.sender] == false, \\\"sender has already diluted\\\");\\n\\n        if (proposalHashToMemberDilution[proposalHash][memberToDilute].exist) {\\n            DilutionReceipt storage receipt = proposalHashToMemberDilution[proposalHash][memberToDilute];\\n\\n            uint originalTotalDilutionValue = receipt.totalDilutionValue;\\n\\n            receipt.dilutors.push(msg.sender);\\n            receipt.voterDilutions[msg.sender] = latestDelegatedVoteWeight[msg.sender][memberToDilute];\\n            receipt.totalDilutionValue = receipt.totalDilutionValue + latestDelegatedVoteWeight[msg.sender][memberToDilute];\\n\\n            hasAddressDilutedForProposal[proposalHash][msg.sender] = true;\\n\\n            emit DilutionCreated(\\n                proposalHash,\\n                receipt.memberDiluted,\\n                originalTotalDilutionValue,\\n                receipt.totalDilutionValue\\n            );\\n        } else {\\n            address[] memory dilutors;\\n            DilutionReceipt memory newDilutionReceipt = DilutionReceipt(proposalHash, memberToDilute, 0, dilutors, true);\\n\\n            proposalHashToMemberDilution[proposalHash][memberToDilute] = newDilutionReceipt;\\n\\n            uint originalTotalDilutionValue = proposalHashToMemberDilution[proposalHash][memberToDilute].totalDilutionValue;\\n\\n            proposalHashToMemberDilution[proposalHash][memberToDilute].dilutors.push(msg.sender);\\n\\n            proposalHashToMemberDilution[proposalHash][memberToDilute].voterDilutions[\\n                msg.sender\\n            ] = latestDelegatedVoteWeight[msg.sender][memberToDilute];\\n\\n            proposalHashToMemberDilution[proposalHash][memberToDilute].totalDilutionValue = latestDelegatedVoteWeight[\\n                msg.sender\\n            ][memberToDilute];\\n\\n            hasAddressDilutedForProposal[proposalHash][msg.sender] = true;\\n\\n            emit DilutionCreated(\\n                proposalHash,\\n                memberToDilute,\\n                originalTotalDilutionValue,\\n                proposalHashToMemberDilution[proposalHash][memberToDilute].totalDilutionValue\\n            );\\n        }\\n    }\\n\\n    /**\\n    @notice  A function that allows a voter to undo a dilution\\n    @param proposalHash the ipfs hash of the proposal to be logged\\n    @param memberToUndilute the address of the member to undilute\\n     */\\n    function invalidateDilution(string memory proposalHash, address memberToUndilute) public {\\n        require(memberToUndilute != address(0), \\\"member to undilute must be a valid address\\\");\\n        require(proposalHashToLog[proposalHash].exist, \\\"proposal does not exist\\\");\\n        require(\\n            proposalHashToMemberDilution[proposalHash][memberToUndilute].exist,\\n            \\\"dilution receipt does not exist for this member and proposal hash\\\"\\n        );\\n        require(\\n            proposalHashToMemberDilution[proposalHash][memberToUndilute].voterDilutions[msg.sender] > 0 &&\\n                hasAddressDilutedForProposal[proposalHash][msg.sender] == true,\\n            \\\"voter has no dilution weight\\\"\\n        );\\n        require(now < proposalHashToLog[proposalHash].end, \\\"undo dilution can only occur within the proposal voting period\\\");\\n\\n        address caller = msg.sender;\\n\\n        DilutionReceipt storage receipt = proposalHashToMemberDilution[proposalHash][memberToUndilute];\\n\\n        uint originalTotalDilutionValue = receipt.totalDilutionValue;\\n\\n        uint voterDilutionValue = receipt.voterDilutions[msg.sender];\\n\\n        hasAddressDilutedForProposal[proposalHash][msg.sender] = false;\\n\\n        for (uint i = 0; i < receipt.dilutors.length; i++) {\\n            if (receipt.dilutors[i] == caller) {\\n                receipt.dilutors[i] = receipt.dilutors[receipt.dilutors.length - 1];\\n                break;\\n            }\\n        }\\n\\n        receipt.dilutors.pop();\\n\\n        receipt.voterDilutions[msg.sender] = 0;\\n        receipt.totalDilutionValue = receipt.totalDilutionValue - voterDilutionValue;\\n\\n        emit DilutionModified(proposalHash, receipt.memberDiluted, originalTotalDilutionValue, receipt.totalDilutionValue);\\n    }\\n\\n    /* Views */\\n\\n    /**\\n    @notice   A view function that checks which proposalHashes exist on the contract and return them\\n    @param proposalHashes a array of hashes to check validity against\\n    @return a array with elements either empty or with the valid proposal hash\\n     */\\n    function getValidProposals(string[] memory proposalHashes) public view returns (string[] memory) {\\n        string[] memory validHashes = new string[](proposalHashes.length);\\n\\n        for (uint i = 0; i < proposalHashes.length; i++) {\\n            string memory proposalHash = proposalHashes[i];\\n            if (proposalHashToLog[proposalHash].exist) {\\n                validHashes[i] = (proposalHashToLog[proposalHash].proposalHash);\\n            }\\n        }\\n\\n        return validHashes;\\n    }\\n\\n    /**\\n    @notice A view function that calculates the council member voting weight for a proposal after any dilution penalties\\n    @param proposalHash the ipfs hash of the proposal to check dilution against\\n    @param councilMember the council member to check diluted weight for \\n    @return the calculated diluted ratio (1e18)\\n     */\\n    function getDilutedWeightForProposal(string memory proposalHash, address councilMember) public view returns (uint) {\\n        require(proposalHashToLog[proposalHash].exist, \\\"proposal does not exist\\\");\\n\\n        string memory electionHash = proposalHashToLog[proposalHash].electionHash;\\n\\n        require(electionHashToLog[electionHash].councilMembers[councilMember], \\\"address must be a nominated council member\\\");\\n\\n        uint originalWeight = electionHashToLog[electionHash].votesForMember[councilMember];\\n        uint penaltyValue = proposalHashToMemberDilution[proposalHash][councilMember].totalDilutionValue;\\n\\n        return (originalWeight - penaltyValue).divideDecimal(originalWeight);\\n    }\\n\\n    /**\\n    @notice A view helper function to get the dilutors for a particular DilutionReceipt\\n    @param proposalHash the ipfs hash of the proposal to get the dilution receipt for\\n    @param memberDiluted the council member to get the dilution array for\\n    @return a list of the voters addresses who have diluted this member for this proposal\\n     */\\n    function getDilutorsForDilutionReceipt(string memory proposalHash, address memberDiluted)\\n        public\\n        view\\n        returns (address[] memory)\\n    {\\n        return proposalHashToMemberDilution[proposalHash][memberDiluted].dilutors;\\n    }\\n\\n    /**\\n    @notice A view helper function to get the weighting of a voter's dilution for a DilutionReceipt\\n    @param proposalHash the ipfs hash of the proposal to get the dilution receipt for\\n    @param memberDiluted the council member to check dilution weighting against\\n    @param voter the voter address to get the dilution weighting for\\n    @return the dilution weight of the voter, for a specific proposal and council member\\n     */\\n    function getVoterDilutionWeightingForDilutionReceipt(\\n        string memory proposalHash,\\n        address memberDiluted,\\n        address voter\\n    ) public view returns (uint) {\\n        return proposalHashToMemberDilution[proposalHash][memberDiluted].voterDilutions[voter];\\n    }\\n\\n    /* Restricted Functions */\\n\\n    /**\\n    @notice A function that can only be called by the OWNER that changes the number of seats on the Spartan Council\\n    @param _numOfSeats the number of seats to set the numOfSeats to\\n     */\\n    function modifySeats(uint _numOfSeats) public onlyOwner() {\\n        require(_numOfSeats > 0, \\\"number of seats must be greater than zero\\\");\\n        uint oldNumOfSeats = numOfSeats;\\n        numOfSeats = _numOfSeats;\\n\\n        emit SeatsModified(oldNumOfSeats, numOfSeats);\\n    }\\n\\n    /**\\n    @notice A function that can only be called by the owner that changes the proposal voting period length\\n    @param _proposalPeriod the proposal perod in seconds, to set the proposalPeriod variable to\\n     */\\n    function modifyProposalPeriod(uint _proposalPeriod) public onlyOwner() {\\n        uint oldProposalPeriod = proposalPeriod;\\n        proposalPeriod = _proposalPeriod;\\n\\n        emit ProposalPeriodModified(oldProposalPeriod, proposalPeriod);\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": false,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}","ABI":"[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_numOfSeats\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"proposalHash\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"memberDiluted\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalDilutionValueBefore\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalDilutionValueAfter\",\"type\":\"uint256\"}],\"name\":\"DilutionCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"proposalHash\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"memberDiluted\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalDilutionValueBefore\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalDilutionValueAfter\",\"type\":\"uint256\"}],\"name\":\"DilutionModified\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"electionHash\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"nominatedCouncilMembers\",\"type\":\"address[]\"},{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"voters\",\"type\":\"address[]\"},{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"nomineesVotedFor\",\"type\":\"address[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"assignedVoteWeights\",\"type\":\"uint256[]\"}],\"name\":\"ElectionLogged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldOwner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnerChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnerNominated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"proposalHash\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"electionHash\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"start\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"end\",\"type\":\"uint256\"}],\"name\":\"ProposalLogged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"previousProposalPeriod\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newProposalPeriod\",\"type\":\"uint256\"}],\"name\":\"ProposalPeriodModified\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"previousNumberOfSeats\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newNumberOfSeats\",\"type\":\"uint256\"}],\"name\":\"SeatsModified\",\"type\":\"event\"},{\"constant\":false,\"inputs\":[],\"name\":\"acceptOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"string\",\"name\":\"proposalHash\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"memberToDilute\",\"type\":\"address\"}],\"name\":\"dilute\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"name\":\"electionHashToLog\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"electionHash\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"created\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"electionMemberVotedFor\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"string\",\"name\":\"proposalHash\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"councilMember\",\"type\":\"address\"}],\"name\":\"getDilutedWeightForProposal\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"string\",\"name\":\"proposalHash\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"memberDiluted\",\"type\":\"address\"}],\"name\":\"getDilutorsForDilutionReceipt\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"string[]\",\"name\":\"proposalHashes\",\"type\":\"string[]\"}],\"name\":\"getValidProposals\",\"outputs\":[{\"internalType\":\"string[]\",\"name\":\"\",\"type\":\"string[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"string\",\"name\":\"proposalHash\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"memberDiluted\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"voter\",\"type\":\"address\"}],\"name\":\"getVoterDilutionWeightingForDilutionReceipt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"hasAddressDilutedForProposal\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"string\",\"name\":\"proposalHash\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"memberToUndilute\",\"type\":\"address\"}],\"name\":\"invalidateDilution\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"latestDelegatedVoteWeight\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"latestElectionHash\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"latestVotingWeight\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"string\",\"name\":\"electionHash\",\"type\":\"string\"},{\"internalType\":\"address[]\",\"name\":\"nominatedCouncilMembers\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"voters\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"nomineesVotedFor\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"assignedVoteWeights\",\"type\":\"uint256[]\"}],\"name\":\"logElection\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"string\",\"name\":\"proposalHash\",\"type\":\"string\"}],\"name\":\"logProposal\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_proposalPeriod\",\"type\":\"uint256\"}],\"name\":\"modifyProposalPeriod\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_numOfSeats\",\"type\":\"uint256\"}],\"name\":\"modifySeats\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"nominateNewOwner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"nominatedOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"numOfSeats\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"name\":\"proposalHashToLog\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"proposalHash\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"electionHash\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"start\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"end\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"exist\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"proposalHashToMemberDilution\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"proposalHash\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"memberDiluted\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"totalDilutionValue\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"exist\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"proposalPeriod\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"CouncilDilution","CompilerVersion":"v0.5.16+commit.9c3226ce","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"0000000000000000000000000000000000000000000000000000000000000008","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}