{"status":"1","message":"OK","result":[{"SourceCode":"// File: localhost/contracts/helpers/SafeMath.sol\r\n\r\n// SPDX-License-Identifier: bsl-1.1\r\n\r\n/*\r\n  Copyright 2020 Unit Protocol: Artem Zakharov (az@unit.xyz).\r\n*/\r\npragma solidity 0.7.6;\r\n\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n\r\n    /**\r\n    * @dev Multiplies two numbers, throws on overflow.\r\n    */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n        c = a * b;\r\n        assert(c / a == b);\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Integer division of two numbers, truncating the quotient.\r\n    */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b != 0, \"SafeMath: division by zero\");\r\n        return a / b;\r\n    }\r\n\r\n    /**\r\n    * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n    */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        assert(b <= a);\r\n        return a - b;\r\n    }\r\n\r\n    /**\r\n    * @dev Adds two numbers, throws on overflow.\r\n    */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n        c = a + b;\r\n        assert(c >= a);\r\n        return c;\r\n    }\r\n}\r\n\r\n// File: localhost/contracts/helpers/ReentrancyGuard.sol\r\n\r\npragma solidity 0.7.6;\r\n\r\n/**\r\n * @dev Contract module that helps prevent reentrant calls to a function.\r\n *\r\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\r\n * available, which can be applied to functions to make sure there are no nested\r\n * (reentrant) calls to them.\r\n *\r\n * Note that because there is a single `nonReentrant` guard, functions marked as\r\n * `nonReentrant` may not call one another. This can be worked around by making\r\n * those functions `private`, and then adding `external` `nonReentrant` entry\r\n * points to them.\r\n *\r\n * TIP: If you would like to learn more about reentrancy and alternative ways\r\n * to protect against it, check out our blog post\r\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\r\n */\r\ncontract ReentrancyGuard {\r\n    // Booleans are more expensive than uint256 or any type that takes up a full\r\n    // word because each write operation emits an extra SLOAD to first read the\r\n    // slot's contents, replace the bits taken up by the boolean, and then write\r\n    // back. This is the compiler's defense against contract upgrades and\r\n    // pointer aliasing, and it cannot be disabled.\r\n\r\n    // The values being non-zero value makes deployment a bit more expensive,\r\n    // but in exchange the refund on every call to nonReentrant will be lower in\r\n    // amount. Since refunds are capped to a percentage of the total\r\n    // transaction's gas, it is best to keep them low in cases like this one, to\r\n    // increase the likelihood of the full refund coming into effect.\r\n    uint256 private constant _NOT_ENTERED = 1;\r\n    uint256 private constant _ENTERED = 2;\r\n\r\n    uint256 private _status;\r\n\r\n    constructor () {\r\n        _status = _NOT_ENTERED;\r\n    }\r\n\r\n    /**\r\n     * @dev Prevents a contract from calling itself, directly or indirectly.\r\n     * Calling a `nonReentrant` function from another `nonReentrant`\r\n     * function is not supported. It is possible to prevent this from happening\r\n     * by making the `nonReentrant` function external, and make it call a\r\n     * `private` function that does the actual work.\r\n     */\r\n    modifier nonReentrant() {\r\n        // On the first call to nonReentrant, _notEntered will be true\r\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\r\n\r\n        // Any calls to nonReentrant after this point will fail\r\n        _status = _ENTERED;\r\n\r\n        _;\r\n\r\n        // By storing the original value once again, a refund is triggered (see\r\n        // https://eips.ethereum.org/EIPS/eip-2200)\r\n        _status = _NOT_ENTERED;\r\n    }\r\n}\r\n\r\n// File: localhost/contracts/interfaces/IToken.sol\r\n\r\ninterface IToken {\r\n    function decimals() external view returns (uint8);\r\n}\r\n// File: localhost/contracts/interfaces/IVaultParameters.sol\r\n\r\ninterface IVaultParameters {\r\n    function canModifyVault ( address ) external view returns ( bool );\r\n    function foundation (  ) external view returns ( address );\r\n    function isManager ( address ) external view returns ( bool );\r\n    function isOracleTypeEnabled ( uint256, address ) external view returns ( bool );\r\n    function liquidationFee ( address ) external view returns ( uint256 );\r\n    function setCollateral ( address asset, uint256 stabilityFeeValue, uint256 liquidationFeeValue, uint256 usdpLimit, uint256[] calldata oracles ) external;\r\n    function setFoundation ( address newFoundation ) external;\r\n    function setLiquidationFee ( address asset, uint256 newValue ) external;\r\n    function setManager ( address who, bool permit ) external;\r\n    function setOracleType ( uint256 _type, address asset, bool enabled ) external;\r\n    function setStabilityFee ( address asset, uint256 newValue ) external;\r\n    function setTokenDebtLimit ( address asset, uint256 limit ) external;\r\n    function setVaultAccess ( address who, bool permit ) external;\r\n    function stabilityFee ( address ) external view returns ( uint256 );\r\n    function tokenDebtLimit ( address ) external view returns ( uint256 );\r\n    function vault (  ) external view returns ( address );\r\n    function vaultParameters (  ) external view returns ( address );\r\n}\r\n\r\n// File: localhost/contracts/interfaces/IVaultManagerParameters.sol\r\n\r\ninterface IVaultManagerParameters {\r\n    function devaluationPeriod ( address ) external view returns ( uint256 );\r\n    function initialCollateralRatio ( address ) external view returns ( uint256 );\r\n    function liquidationDiscount ( address ) external view returns ( uint256 );\r\n    function liquidationRatio ( address ) external view returns ( uint256 );\r\n    function maxColPercent ( address ) external view returns ( uint256 );\r\n    function minColPercent ( address ) external view returns ( uint256 );\r\n    function setColPartRange ( address asset, uint256 min, uint256 max ) external;\r\n    function setCollateral (\r\n        address asset,\r\n        uint256 stabilityFeeValue,\r\n        uint256 liquidationFeeValue,\r\n        uint256 initialCollateralRatioValue,\r\n        uint256 liquidationRatioValue,\r\n        uint256 liquidationDiscountValue,\r\n        uint256 devaluationPeriodValue,\r\n        uint256 usdpLimit,\r\n        uint256[] calldata oracles,\r\n        uint256 minColP,\r\n        uint256 maxColP\r\n    ) external;\r\n    function setDevaluationPeriod ( address asset, uint256 newValue ) external;\r\n    function setInitialCollateralRatio ( address asset, uint256 newValue ) external;\r\n    function setLiquidationDiscount ( address asset, uint256 newValue ) external;\r\n    function setLiquidationRatio ( address asset, uint256 newValue ) external;\r\n    function vaultParameters (  ) external view returns ( address );\r\n}\r\n\r\n// File: localhost/contracts/interfaces/ICDPRegistry.sol\r\n\r\npragma experimental ABIEncoderV2;\r\n\r\n\r\ninterface ICDPRegistry {\r\n    \r\n    struct CDP {\r\n        address asset;\r\n        address owner;\r\n    }\r\n    \r\n    function batchCheckpoint ( address[] calldata assets, address[] calldata owners ) external;\r\n    function batchCheckpointForAsset ( address asset, address[] calldata owners ) external;\r\n    function checkpoint ( address asset, address owner ) external;\r\n    function cr (  ) external view returns ( address );\r\n    function getAllCdps (  ) external view returns ( CDP[] memory r );\r\n    function getCdpsByCollateral ( address asset ) external view returns ( CDP[] memory cdps );\r\n    function getCdpsByOwner ( address owner ) external view returns ( CDP[] memory r );\r\n    function getCdpsCount (  ) external view returns ( uint256 totalCdpCount );\r\n    function getCdpsCountForCollateral ( address asset ) external view returns ( uint256 );\r\n    function isAlive ( address asset, address owner ) external view returns ( bool );\r\n    function isListed ( address asset, address owner ) external view returns ( bool );\r\n    function vault (  ) external view returns ( address );\r\n}\r\n\r\n// File: localhost/contracts/interfaces/IVault.sol\r\n\r\ninterface IVault {\r\n    function DENOMINATOR_1E2 (  ) external view returns ( uint256 );\r\n    function DENOMINATOR_1E5 (  ) external view returns ( uint256 );\r\n    function borrow ( address asset, address user, uint256 amount ) external returns ( uint256 );\r\n    function calculateFee ( address asset, address user, uint256 amount ) external view returns ( uint256 );\r\n    function changeOracleType ( address asset, address user, uint256 newOracleType ) external;\r\n    function chargeFee ( address asset, address user, uint256 amount ) external;\r\n    function col (  ) external view returns ( address );\r\n    function colToken ( address, address ) external view returns ( uint256 );\r\n    function collaterals ( address, address ) external view returns ( uint256 );\r\n    function debts ( address, address ) external view returns ( uint256 );\r\n    function depositCol ( address asset, address user, uint256 amount ) external;\r\n    function depositEth ( address user ) external payable;\r\n    function depositMain ( address asset, address user, uint256 amount ) external;\r\n    function destroy ( address asset, address user ) external;\r\n    function getTotalDebt ( address asset, address user ) external view returns ( uint256 );\r\n    function lastUpdate ( address, address ) external view returns ( uint256 );\r\n    function liquidate ( address asset, address positionOwner, uint256 mainAssetToLiquidator, uint256 colToLiquidator, uint256 mainAssetToPositionOwner, uint256 colToPositionOwner, uint256 repayment, uint256 penalty, address liquidator ) external;\r\n    function liquidationBlock ( address, address ) external view returns ( uint256 );\r\n    function liquidationFee ( address, address ) external view returns ( uint256 );\r\n    function liquidationPrice ( address, address ) external view returns ( uint256 );\r\n    function oracleType ( address, address ) external view returns ( uint256 );\r\n    function repay ( address asset, address user, uint256 amount ) external returns ( uint256 );\r\n    function spawn ( address asset, address user, uint256 _oracleType ) external;\r\n    function stabilityFee ( address, address ) external view returns ( uint256 );\r\n    function tokenDebts ( address ) external view returns ( uint256 );\r\n    function triggerLiquidation ( address asset, address positionOwner, uint256 initialPrice ) external;\r\n    function update ( address asset, address user ) external;\r\n    function usdp (  ) external view returns ( address );\r\n    function vaultParameters (  ) external view returns ( address );\r\n    function weth (  ) external view returns ( address payable );\r\n    function withdrawCol ( address asset, address user, uint256 amount ) external;\r\n    function withdrawEth ( address user, uint256 amount ) external;\r\n    function withdrawMain ( address asset, address user, uint256 amount ) external;\r\n}\r\n\r\n// File: localhost/contracts/interfaces/IWETH.sol\r\n\r\ninterface IWETH {\r\n    function deposit() external payable;\r\n    function transfer(address to, uint value) external returns (bool);\r\n    function transferFrom(address from, address to, uint value) external returns (bool);\r\n    function withdraw(uint) external;\r\n}\r\n// File: localhost/contracts/interfaces/IOracleUsd.sol\r\n\r\ninterface IOracleUsd {\r\n\r\n    // returns Q112-encoded value\r\n    // returned value 10**18 * 2**112 is $1\r\n    function assetToUsd(address asset, uint amount) external view returns (uint);\r\n}\r\n\r\n// File: localhost/contracts/interfaces/IOracleRegistry.sol\r\n\r\n\r\ninterface IOracleRegistry {\r\n\r\n    struct Oracle {\r\n        uint oracleType;\r\n        address oracleAddress;\r\n    }\r\n\r\n    function WETH (  ) external view returns ( address );\r\n    function getKeydonixOracleTypes (  ) external view returns ( uint256[] memory );\r\n    function getOracles (  ) external view returns ( Oracle[] memory foundOracles );\r\n    function keydonixOracleTypes ( uint256 ) external view returns ( uint256 );\r\n    function maxOracleType (  ) external view returns ( uint256 );\r\n    function oracleByAsset ( address asset ) external view returns ( address );\r\n    function oracleByType ( uint256 ) external view returns ( address );\r\n    function oracleTypeByAsset ( address ) external view returns ( uint256 );\r\n    function oracleTypeByOracle ( address ) external view returns ( uint256 );\r\n    function setKeydonixOracleTypes ( uint256[] memory _keydonixOracleTypes ) external;\r\n    function setOracle ( uint256 oracleType, address oracle ) external;\r\n    function setOracleTypeForAsset ( address asset, uint256 oracleType ) external;\r\n    function setOracleTypeForAssets ( address[] memory assets, uint256 oracleType ) external;\r\n    function unsetOracle ( uint256 oracleType ) external;\r\n    function unsetOracleForAsset ( address asset ) external;\r\n    function unsetOracleForAssets ( address[] memory assets ) external;\r\n    function vaultParameters (  ) external view returns ( address );\r\n}\r\n\r\n// File: localhost/contracts/vault-managers/CDPManager01.sol\r\n\r\n/*\r\n  Copyright 2020 Unit Protocol: Artem Zakharov (az@unit.xyz).\r\n*/\r\npragma solidity 0.7.6;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n * @title CDPManager01\r\n **/\r\ncontract CDPManager01 is ReentrancyGuard {\r\n    using SafeMath for uint;\r\n\r\n    IVault public immutable vault;\r\n    IVaultManagerParameters public immutable vaultManagerParameters;\r\n    IOracleRegistry public immutable oracleRegistry;\r\n    ICDPRegistry public immutable cdpRegistry;\r\n    address payable public immutable WETH;\r\n\r\n    uint public constant Q112 = 2 ** 112;\r\n    uint public constant DENOMINATOR_1E5 = 1e5;\r\n\r\n    /**\r\n     * @dev Trigger when joins are happened\r\n    **/\r\n    event Join(address indexed asset, address indexed owner, uint main, uint usdp);\r\n\r\n    /**\r\n     * @dev Trigger when exits are happened\r\n    **/\r\n    event Exit(address indexed asset, address indexed owner, uint main, uint usdp);\r\n\r\n    /**\r\n     * @dev Trigger when liquidations are initiated\r\n    **/\r\n    event LiquidationTriggered(address indexed asset, address indexed owner);\r\n\r\n    modifier checkpoint(address asset, address owner) {\r\n        _;\r\n        cdpRegistry.checkpoint(asset, owner);\r\n    }\r\n\r\n    /**\r\n     * @param _vaultManagerParameters The address of the contract with Vault manager parameters\r\n     * @param _oracleRegistry The address of the oracle registry\r\n     * @param _cdpRegistry The address of the CDP registry\r\n     **/\r\n    constructor(address _vaultManagerParameters, address _oracleRegistry, address _cdpRegistry) {\r\n        require(\r\n            _vaultManagerParameters != address(0) && \r\n            _oracleRegistry != address(0) && \r\n            _cdpRegistry != address(0),\r\n                \"Unit Protocol: INVALID_ARGS\"\r\n        );\r\n        vaultManagerParameters = IVaultManagerParameters(_vaultManagerParameters);\r\n        vault = IVault(IVaultParameters(IVaultManagerParameters(_vaultManagerParameters).vaultParameters()).vault());\r\n        oracleRegistry = IOracleRegistry(_oracleRegistry);\r\n        WETH = IVault(IVaultParameters(IVaultManagerParameters(_vaultManagerParameters).vaultParameters()).vault()).weth();\r\n        cdpRegistry = ICDPRegistry(_cdpRegistry);\r\n    }\r\n\r\n    // only accept ETH via fallback from the WETH contract\r\n    receive() external payable {\r\n        require(msg.sender == WETH, \"Unit Protocol: RESTRICTED\");\r\n    }\r\n\r\n    /**\r\n      * @notice Depositing tokens must be pre-approved to Vault address\r\n      * @notice position actually considered as spawned only when debt > 0\r\n      * @dev Deposits collateral and/or borrows USDP\r\n      * @param asset The address of the collateral\r\n      * @param assetAmount The amount of the collateral to deposit\r\n      * @param usdpAmount The amount of USDP token to borrow\r\n      **/\r\n    function join(address asset, uint assetAmount, uint usdpAmount) public nonReentrant checkpoint(asset, msg.sender) {\r\n        require(usdpAmount != 0 || assetAmount != 0, \"Unit Protocol: USELESS_TX\");\r\n\r\n        require(IToken(asset).decimals() <= 18, \"Unit Protocol: NOT_SUPPORTED_DECIMALS\");\r\n\r\n        if (usdpAmount == 0) {\r\n\r\n            vault.depositMain(asset, msg.sender, assetAmount);\r\n\r\n        } else {\r\n\r\n            _ensureOracle(asset);\r\n\r\n            bool spawned = vault.debts(asset, msg.sender) != 0;\r\n\r\n            if (!spawned) {\r\n                // spawn a position\r\n                vault.spawn(asset, msg.sender, oracleRegistry.oracleTypeByAsset(asset));\r\n            }\r\n\r\n            if (assetAmount != 0) {\r\n                vault.depositMain(asset, msg.sender, assetAmount);\r\n            }\r\n\r\n            // mint USDP to owner\r\n            vault.borrow(asset, msg.sender, usdpAmount);\r\n\r\n            // check collateralization\r\n            _ensurePositionCollateralization(asset, msg.sender);\r\n\r\n        }\r\n\r\n        // fire an event\r\n        emit Join(asset, msg.sender, assetAmount, usdpAmount);\r\n    }\r\n\r\n    /**\r\n      * @dev Deposits ETH and/or borrows USDP\r\n      * @param usdpAmount The amount of USDP token to borrow\r\n      **/\r\n    function join_Eth(uint usdpAmount) external payable {\r\n\r\n        if (msg.value != 0) {\r\n            IWETH(WETH).deposit{value: msg.value}();\r\n            require(IWETH(WETH).transfer(msg.sender, msg.value), \"Unit Protocol: WETH_TRANSFER_FAILED\");\r\n        }\r\n\r\n        join(WETH, msg.value, usdpAmount);\r\n    }\r\n\r\n    /**\r\n      * @notice Tx sender must have a sufficient USDP balance to pay the debt\r\n      * @dev Withdraws collateral and repays specified amount of debt\r\n      * @param asset The address of the collateral\r\n      * @param assetAmount The amount of the collateral to withdraw\r\n      * @param usdpAmount The amount of USDP to repay\r\n      **/\r\n    function exit(address asset, uint assetAmount, uint usdpAmount) public nonReentrant checkpoint(asset, msg.sender) returns (uint) {\r\n\r\n        // check usefulness of tx\r\n        require(assetAmount != 0 || usdpAmount != 0, \"Unit Protocol: USELESS_TX\");\r\n\r\n        uint debt = vault.debts(asset, msg.sender);\r\n\r\n        // catch full repayment\r\n        if (usdpAmount > debt) { usdpAmount = debt; }\r\n\r\n        if (assetAmount == 0) {\r\n            _repay(asset, msg.sender, usdpAmount);\r\n        } else {\r\n            if (debt == usdpAmount) {\r\n                vault.withdrawMain(asset, msg.sender, assetAmount);\r\n                if (usdpAmount != 0) {\r\n                    _repay(asset, msg.sender, usdpAmount);\r\n                }\r\n            } else {\r\n                _ensureOracle(asset);\r\n\r\n                // withdraw collateral to the owner address\r\n                vault.withdrawMain(asset, msg.sender, assetAmount);\r\n\r\n                if (usdpAmount != 0) {\r\n                    _repay(asset, msg.sender, usdpAmount);\r\n                }\r\n\r\n                vault.update(asset, msg.sender);\r\n\r\n                _ensurePositionCollateralization(asset, msg.sender);\r\n            }\r\n        }\r\n\r\n        // fire an event\r\n        emit Exit(asset, msg.sender, assetAmount, usdpAmount);\r\n\r\n        return usdpAmount;\r\n    }\r\n\r\n    /**\r\n      * @notice Repayment is the sum of the principal and interest\r\n      * @dev Withdraws collateral and repays specified amount of debt\r\n      * @param asset The address of the collateral\r\n      * @param assetAmount The amount of the collateral to withdraw\r\n      * @param repayment The target repayment amount\r\n      **/\r\n    function exit_targetRepayment(address asset, uint assetAmount, uint repayment) external returns (uint) {\r\n\r\n        uint usdpAmount = _calcPrincipal(asset, msg.sender, repayment);\r\n\r\n        return exit(asset, assetAmount, usdpAmount);\r\n    }\r\n\r\n    /**\r\n      * @notice Withdraws WETH and converts to ETH\r\n      * @param ethAmount ETH amount to withdraw\r\n      * @param usdpAmount The amount of USDP token to repay\r\n      **/\r\n    function exit_Eth(uint ethAmount, uint usdpAmount) public returns (uint) {\r\n        usdpAmount = exit(WETH, ethAmount, usdpAmount);\r\n        require(IWETH(WETH).transferFrom(msg.sender, address(this), ethAmount), \"Unit Protocol: WETH_TRANSFER_FROM_FAILED\");\r\n        IWETH(WETH).withdraw(ethAmount);\r\n        (bool success, ) = msg.sender.call{value:ethAmount}(\"\");\r\n        require(success, \"Unit Protocol: ETH_TRANSFER_FAILED\");\r\n        return usdpAmount;\r\n    }\r\n\r\n    /**\r\n      * @notice Repayment is the sum of the principal and interest\r\n      * @notice Withdraws WETH and converts to ETH\r\n      * @param ethAmount ETH amount to withdraw\r\n      * @param repayment The target repayment amount\r\n      **/\r\n    function exit_Eth_targetRepayment(uint ethAmount, uint repayment) external returns (uint) {\r\n        uint usdpAmount = _calcPrincipal(WETH, msg.sender, repayment);\r\n        return exit_Eth(ethAmount, usdpAmount);\r\n    }\r\n\r\n    // decreases debt\r\n    function _repay(address asset, address owner, uint usdpAmount) internal {\r\n        uint fee = vault.calculateFee(asset, owner, usdpAmount);\r\n        vault.chargeFee(vault.usdp(), owner, fee);\r\n\r\n        // burn USDP from the owner's balance\r\n        uint debtAfter = vault.repay(asset, owner, usdpAmount);\r\n        if (debtAfter == 0) {\r\n            // clear unused storage\r\n            vault.destroy(asset, owner);\r\n        }\r\n    }\r\n\r\n    function _ensurePositionCollateralization(address asset, address owner) internal view {\r\n        // collateral value of the position in USD\r\n        uint usdValue_q112 = getCollateralUsdValue_q112(asset, owner);\r\n\r\n        // USD limit of the position\r\n        uint usdLimit = usdValue_q112 * vaultManagerParameters.initialCollateralRatio(asset) / Q112 / 100;\r\n\r\n        // revert if collateralization is not enough\r\n        require(vault.getTotalDebt(asset, owner) <= usdLimit, \"Unit Protocol: UNDERCOLLATERALIZED\");\r\n    }\r\n    \r\n    // Liquidation Trigger\r\n\r\n    /**\r\n     * @dev Triggers liquidation of a position\r\n     * @param asset The address of the collateral token of a position\r\n     * @param owner The owner of the position\r\n     **/\r\n    function triggerLiquidation(address asset, address owner) external nonReentrant {\r\n\r\n        _ensureOracle(asset);\r\n\r\n        // USD value of the collateral\r\n        uint usdValue_q112 = getCollateralUsdValue_q112(asset, owner);\r\n        \r\n        // reverts if a position is not liquidatable\r\n        require(_isLiquidatablePosition(asset, owner, usdValue_q112), \"Unit Protocol: SAFE_POSITION\");\r\n\r\n        uint liquidationDiscount_q112 = usdValue_q112.mul(\r\n            vaultManagerParameters.liquidationDiscount(asset)\r\n        ).div(DENOMINATOR_1E5);\r\n\r\n        uint initialLiquidationPrice = usdValue_q112.sub(liquidationDiscount_q112).div(Q112);\r\n\r\n        // sends liquidation command to the Vault\r\n        vault.triggerLiquidation(asset, owner, initialLiquidationPrice);\r\n\r\n        // fire an liquidation event\r\n        emit LiquidationTriggered(asset, owner);\r\n    }\r\n\r\n    function getCollateralUsdValue_q112(address asset, address owner) public view returns (uint) {\r\n        return IOracleUsd(oracleRegistry.oracleByAsset(asset)).assetToUsd(asset, vault.collaterals(asset, owner));\r\n    }\r\n\r\n    /**\r\n     * @dev Determines whether a position is liquidatable\r\n     * @param asset The address of the collateral\r\n     * @param owner The owner of the position\r\n     * @param usdValue_q112 Q112-encoded USD value of the collateral\r\n     * @return boolean value, whether a position is liquidatable\r\n     **/\r\n    function _isLiquidatablePosition(\r\n        address asset,\r\n        address owner,\r\n        uint usdValue_q112\r\n    ) internal view returns (bool) {\r\n        uint debt = vault.getTotalDebt(asset, owner);\r\n\r\n        // position is collateralized if there is no debt\r\n        if (debt == 0) return false;\r\n\r\n        return debt.mul(100).mul(Q112).div(usdValue_q112) >= vaultManagerParameters.liquidationRatio(asset);\r\n    }\r\n\r\n    function _ensureOracle(address asset) internal view {\r\n        uint oracleType = oracleRegistry.oracleTypeByAsset(asset);\r\n        require(oracleType != 0, \"Unit Protocol: INVALID_ORACLE_TYPE\");\r\n        address oracle = oracleRegistry.oracleByType(oracleType);\r\n        require(oracle != address(0), \"Unit Protocol: DISABLED_ORACLE\");\r\n    }\r\n\r\n    /**\r\n     * @dev Determines whether a position is liquidatable\r\n     * @param asset The address of the collateral\r\n     * @param owner The owner of the position\r\n     * @return boolean value, whether a position is liquidatable\r\n     **/\r\n    function isLiquidatablePosition(\r\n        address asset,\r\n        address owner\r\n    ) public view returns (bool) {\r\n        uint usdValue_q112 = getCollateralUsdValue_q112(asset, owner);\r\n\r\n        return _isLiquidatablePosition(asset, owner, usdValue_q112);\r\n    }\r\n\r\n    /**\r\n     * @dev Calculates current utilization ratio\r\n     * @param asset The address of the collateral\r\n     * @param owner The owner of the position\r\n     * @return utilization ratio\r\n     **/\r\n    function utilizationRatio(\r\n        address asset,\r\n        address owner\r\n    ) public view returns (uint) {\r\n        uint debt = vault.getTotalDebt(asset, owner);\r\n        if (debt == 0) return 0;\r\n        \r\n        uint usdValue_q112 = getCollateralUsdValue_q112(asset, owner);\r\n\r\n        return debt.mul(100).mul(Q112).div(usdValue_q112);\r\n    }\r\n    \r\n\r\n    /**\r\n     * @dev Calculates liquidation price\r\n     * @param asset The address of the collateral\r\n     * @param owner The owner of the position\r\n     * @return Q112-encoded liquidation price\r\n     **/\r\n    function liquidationPrice_q112(\r\n        address asset,\r\n        address owner\r\n    ) external view returns (uint) {\r\n\r\n        uint debt = vault.getTotalDebt(asset, owner);\r\n        if (debt == 0) return uint(-1);\r\n        \r\n        uint collateralLiqPrice = debt.mul(100).mul(Q112).div(vaultManagerParameters.liquidationRatio(asset));\r\n\r\n        require(IToken(asset).decimals() <= 18, \"Unit Protocol: NOT_SUPPORTED_DECIMALS\");\r\n\r\n        return collateralLiqPrice / vault.collaterals(asset, owner) / 10 ** (18 - IToken(asset).decimals());\r\n    }\r\n\r\n    function _calcPrincipal(address asset, address owner, uint repayment) internal view returns (uint) {\r\n        uint fee = vault.stabilityFee(asset, owner) * (block.timestamp - vault.lastUpdate(asset, owner)) / 365 days;\r\n        return repayment * DENOMINATOR_1E5 / (DENOMINATOR_1E5 + fee);\r\n    }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_vaultManagerParameters\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_oracleRegistry\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_cdpRegistry\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"main\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"usdp\",\"type\":\"uint256\"}],\"name\":\"Exit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"main\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"usdp\",\"type\":\"uint256\"}],\"name\":\"Join\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"LiquidationTriggered\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DENOMINATOR_1E5\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"Q112\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"WETH\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cdpRegistry\",\"outputs\":[{\"internalType\":\"contract ICDPRegistry\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"assetAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"usdpAmount\",\"type\":\"uint256\"}],\"name\":\"exit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"ethAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"usdpAmount\",\"type\":\"uint256\"}],\"name\":\"exit_Eth\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"ethAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"repayment\",\"type\":\"uint256\"}],\"name\":\"exit_Eth_targetRepayment\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"assetAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"repayment\",\"type\":\"uint256\"}],\"name\":\"exit_targetRepayment\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"getCollateralUsdValue_q112\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"isLiquidatablePosition\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"assetAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"usdpAmount\",\"type\":\"uint256\"}],\"name\":\"join\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"usdpAmount\",\"type\":\"uint256\"}],\"name\":\"join_Eth\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"liquidationPrice_q112\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"oracleRegistry\",\"outputs\":[{\"internalType\":\"contract IOracleRegistry\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"triggerLiquidation\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"utilizationRatio\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vault\",\"outputs\":[{\"internalType\":\"contract IVault\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vaultManagerParameters\",\"outputs\":[{\"internalType\":\"contract IVaultManagerParameters\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]","ContractName":"CDPManager01","CompilerVersion":"v0.7.6+commit.7338295f","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000203153522b9eaef4ae17c6e99851ee7b2f7d312e00000000000000000000000075fbfe26b21fd3ea008af0c764949f8214150c8f0000000000000000000000001a5ff58bc3246eb233fea20d32b79b5f01ec650c","EVMVersion":"Default","Library":"","LicenseType":"GNU GPLv3","Proxy":"0","Implementation":"","SwarmSource":"ipfs://fd75fdeb2db628db0bd9a0cd7d5e415029566d274ebf2a4c27062b07d7fb7d1d"}]}