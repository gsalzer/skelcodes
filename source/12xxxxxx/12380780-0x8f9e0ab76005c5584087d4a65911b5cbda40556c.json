{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.6.8;\r\n\r\n\r\n// SPDX-License-Identifier: MIT\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP. Does not include\r\n * the optional functions; to access them see {ERC20Detailed}.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\ninterface IWETH is IERC20 {\r\n    function deposit() external payable;\r\n    function withdraw(uint wad) external;\r\n}\r\n\r\ninterface IHandler {\r\n    /// @notice receive ETH\r\n    receive() external payable;\r\n\r\n    /**\r\n     * @notice Handle an order execution\r\n     * @param _inputToken - Address of the input token\r\n     * @param _outputToken - Address of the output token\r\n     * @param _inputAmount - uint256 of the input token amount\r\n     * @param _minReturn - uint256 of the min return amount of output token\r\n     * @param _data - Bytes of arbitrary data\r\n     * @return bought - Amount of output token bought\r\n     */\r\n    function handle(\r\n        IERC20 _inputToken,\r\n        IERC20 _outputToken,\r\n        uint256 _inputAmount,\r\n        uint256 _minReturn,\r\n        bytes calldata _data\r\n    ) external payable returns (uint256 bought);\r\n\r\n    /**\r\n     * @notice Check whether can handle an order execution\r\n     * @param _inputToken - Address of the input token\r\n     * @param _outputToken - Address of the output token\r\n     * @param _inputAmount - uint256 of the input token amount\r\n     * @param _minReturn - uint256 of the min return amount of output token\r\n     * @param _data - Bytes of arbitrary data\r\n     * @return bool - Whether the execution can be handled or not\r\n     */\r\n    function canHandle(\r\n        IERC20 _inputToken,\r\n        IERC20 _outputToken,\r\n        uint256 _inputAmount,\r\n        uint256 _minReturn,\r\n        bytes calldata _data\r\n    ) external view returns (bool);\r\n}\r\n\r\ninterface IPlasmaswapPair {\r\n    event Approval(address indexed owner, address indexed spender, uint value);\r\n    event Transfer(address indexed from, address indexed to, uint value);\r\n\r\n\r\n    event Mint(address indexed sender, uint amount0, uint amount1);\r\n    event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);\r\n    event Swap(\r\n        address indexed sender,\r\n        uint amount0In,\r\n        uint amount1In,\r\n        uint amount0Out,\r\n        uint amount1Out,\r\n        address indexed to\r\n    );\r\n    event Sync(uint112 reserve0, uint112 reserve1);\r\n\r\n    function MINIMUM_LIQUIDITY() external pure returns (uint);\r\n    function factory() external view returns (address);\r\n    function token0() external view returns (address);\r\n    function token1() external view returns (address);\r\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\r\n    function price0CumulativeLast() external view returns (uint);\r\n    function price1CumulativeLast() external view returns (uint);\r\n    function kLast() external view returns (uint);\r\n\r\n    function mint(address to) external returns (uint liquidity);\r\n    function burn(address to) external returns (uint amount0, uint amount1);\r\n    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\r\n    function skim(address to) external;\r\n    function sync() external;\r\n\r\n    function initialize(address, address) external;\r\n}\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts with custom message when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\nlibrary PlasmaswapUtils {\r\n    using SafeMath for uint256;\r\n\r\n    /**\r\n     * @notice Returns the current block timestamp within the range of uint32, i.e. [0, 2**32 - 1]\r\n     * @return uint32 - block timestamp\r\n     */\r\n    function currentBlockTimestamp() internal view returns (uint32) {\r\n        return uint32(block.timestamp % 2 ** 32);\r\n    }\r\n\r\n    /**\r\n     * @notice Returns sorted token addresses, used to handle return values from pairs sorted in this order\r\n     * @param _tokenA - Address of the token A\r\n     * @param _tokenB - Address of the token B\r\n     * @return token0 - Address of the lower token\r\n     * @return token1 - Address of the higher token\r\n     */\r\n    function sortTokens(address _tokenA, address _tokenB) internal pure returns (address token0, address token1) {\r\n        require(_tokenA != _tokenB, 'PlasmaswapUtils#sortTokens: IDENTICAL_ADDRESSES');\r\n        (token0, token1) = _tokenA < _tokenB ? (_tokenA, _tokenB) : (_tokenB, _tokenA);\r\n        require(token0 != address(0), 'PlasmaswapUtils#sortTokens: ZERO_ADDRESS');\r\n    }\r\n\r\n    /**\r\n     * @notice Calculates the CREATE2 address for a pair without making any external calls\r\n     * @param _factory - Address of the plasmaswap factory contract\r\n     * @param _tokenA - Address of the token A\r\n     * @param _tokenB - Address of the token B\r\n     * @param _initCodeHash - Bytes32 of the plasmaswap pair contract unit code hash\r\n     * @return pair - Address of the pair\r\n     */\r\n    function pairFor(address _factory, address _tokenA, address _tokenB, bytes32 _initCodeHash) internal pure returns (address pair) {\r\n        (address token0, address token1) = sortTokens(_tokenA, _tokenB);\r\n        pair = address(uint(keccak256(abi.encodePacked(\r\n                hex'ff',\r\n                _factory,\r\n                keccak256(abi.encodePacked(token0, token1)),\r\n                _initCodeHash // init code hash\r\n            ))));\r\n    }\r\n\r\n    /**\r\n     * @notice Calculates the CREATE2 address for a pair without making any external calls\r\n     * @dev Tokens should be in order\r\n     * @param _factory - Address of the plasmaswap factory contract\r\n     * @param _token0 - Address of the token 0\r\n     * @param _token1 - Address of the token 1\r\n     * @param _initCodeHash - Bytes32 of the plasmaswap pair contract unit code hash\r\n     * @return pair - Address of the pair\r\n     */\r\n    function pairForSorted(address _factory, address _token0, address _token1, bytes32 _initCodeHash) internal pure returns (address pair) {\r\n        pair = address(uint(keccak256(abi.encodePacked(\r\n                hex'ff',\r\n                _factory,\r\n                keccak256(abi.encodePacked(_token0, _token1)),\r\n                _initCodeHash // init code hash\r\n            ))));\r\n    }\r\n\r\n    /**\r\n     * @notice Given an input amount of an asset and pair reserves, returns the maximum output amount of the other asset\r\n     * @param _amountIn - uint of the input token's amount\r\n     * @param _reserveIn - uint of the input token's reserve\r\n     * @param _reserveOut - uint of the output token's reserve\r\n     * @return amountOut - Maximum output amount\r\n     */\r\n    function getAmountOut(uint _amountIn, uint _reserveIn, uint _reserveOut) internal pure returns (uint amountOut) {\r\n        require(_amountIn > 0, 'PlasmaswapUtils#getAmountOut: INSUFFICIENT_INPUT_AMOUNT');\r\n        require(_reserveIn > 0 && _reserveOut > 0, 'PlasmaswapUtils#getAmountOut: INSUFFICIENT_LIQUIDITY');\r\n        uint amountInWithFee = _amountIn.mul(997);\r\n        uint numerator = amountInWithFee.mul(_reserveOut);\r\n        uint denominator = _reserveIn.mul(1000).add(amountInWithFee);\r\n        amountOut = numerator / denominator;\r\n    }\r\n}\r\n\r\nlibrary SafeERC20 {\r\n    function transfer(IERC20 _token, address _to, uint256 _val) internal returns (bool) {\r\n        (bool success, bytes memory data) = address(_token).call(abi.encodeWithSelector(_token.transfer.selector, _to, _val));\r\n        return success && (data.length == 0 || abi.decode(data, (bool)));\r\n    }\r\n}\r\n\r\nlibrary HyperUtils {\r\n    address internal constant ETH_ADDRESS = address(0x00eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee);\r\n\r\n    /**\r\n     * @notice Get the account's balance of token or ETH\r\n     * @param _token - Address of the token\r\n     * @param _addr - Address of the account\r\n     * @return uint256 - Account's balance of token or ETH\r\n     */\r\n    function balanceOf(IERC20 _token, address _addr) internal view returns (uint256) {\r\n        if (ETH_ADDRESS == address(_token)) {\r\n            return _addr.balance;\r\n        }\r\n\r\n        return _token.balanceOf(_addr);\r\n    }\r\n\r\n     /**\r\n     * @notice Transfer token or ETH to a destinatary\r\n     * @param _token - Address of the token\r\n     * @param _to - Address of the recipient\r\n     * @param _val - Uint256 of the amount to transfer\r\n     * @return bool - Whether the transfer was success or not\r\n     */\r\n    function transfer(IERC20 _token, address _to, uint256 _val) internal returns (bool) {\r\n        if (ETH_ADDRESS == address(_token)) {\r\n            (bool success, ) = _to.call{value:_val}(\"\");\r\n            return success;\r\n        }\r\n\r\n        return SafeERC20.transfer(_token, _to, _val);\r\n    }\r\n}\r\n\r\n/// @notice Plasmaswap Handler used to execute an order\r\ncontract PlasmaswapHandler is IHandler {\r\n    using SafeMath for uint256;\r\n\r\n    IWETH public immutable WETH;\r\n    address public immutable FACTORY;\r\n    bytes32 public immutable FACTORY_CODE_HASH;\r\n\r\n    /**\r\n     * @notice Creates the handler\r\n     * @param _factory - Address of the plasmaswap factory contract\r\n     * @param _weth - Address of WETH contract\r\n     * @param _codeHash - Bytes32 of the plasmaswap pair contract unit code hash\r\n     */\r\n    constructor(address _factory, IWETH _weth, bytes32 _codeHash) public {\r\n        FACTORY = _factory;\r\n        WETH = _weth;\r\n        FACTORY_CODE_HASH = _codeHash;\r\n    }\r\n\r\n    /// @notice receive ETH\r\n    receive() external override payable {\r\n        require(msg.sender != tx.origin, \"PlasmaswapHandler#receive: NO_SEND_ETH_PLEASE\");\r\n    }\r\n\r\n    /**\r\n     * @notice Handle an order execution\r\n     * @param _inputToken - Address of the input token\r\n     * @param _outputToken - Address of the output token\r\n     * @param _data - Bytes of arbitrary data\r\n     * @return bought - Amount of output token bought\r\n     */\r\n    function handle(\r\n        IERC20 _inputToken,\r\n        IERC20 _outputToken,\r\n        uint256,\r\n        uint256,\r\n        bytes calldata _data\r\n    ) external payable override returns (uint256 bought) {\r\n         // Load real initial balance, don't trust provided value\r\n        uint256 amount = HyperUtils.balanceOf(_inputToken, address(this));\r\n        address inputToken = address(_inputToken);\r\n        address outputToken = address(_outputToken);\r\n        address weth = address(WETH);\r\n\r\n        // Decode extra data\r\n        (,address relayer, uint256 fee) = abi.decode(_data, (address, address, uint256));\r\n\r\n        if (inputToken == weth || inputToken == HyperUtils.ETH_ADDRESS) {\r\n            // Swap WETH -> outputToken\r\n            amount = amount.sub(fee);\r\n\r\n            // Convert from ETH to WETH if necessary\r\n            if (inputToken == HyperUtils.ETH_ADDRESS) {\r\n                WETH.deposit{ value: amount }();\r\n                inputToken = weth;\r\n            } else {\r\n                WETH.withdraw(fee);\r\n            }\r\n\r\n            // Trade\r\n            bought = _swap(inputToken, outputToken, amount, msg.sender);\r\n        } else if (outputToken == weth || outputToken == HyperUtils.ETH_ADDRESS) {\r\n            // Swap inputToken -> WETH\r\n            bought = _swap(inputToken, weth, amount, address(this));\r\n\r\n            // Convert from WETH to ETH if necessary\r\n            if (outputToken == HyperUtils.ETH_ADDRESS) {\r\n                WETH.withdraw(bought);\r\n            } else {\r\n                WETH.withdraw(fee);\r\n            }\r\n\r\n            // Transfer amount to sender\r\n            bought = bought.sub(fee);\r\n            HyperUtils.transfer(IERC20(outputToken), msg.sender, bought);\r\n        } else {\r\n            // Swap inputToken -> WETH -> outputToken\r\n            //  - inputToken -> WETH\r\n            bought = _swap(inputToken, weth, amount, address(this));\r\n\r\n            // Withdraw fee\r\n            WETH.withdraw(fee);\r\n\r\n            // - WETH -> outputToken\r\n            bought = _swap(weth, outputToken, bought.sub(fee), msg.sender);\r\n        }\r\n\r\n        // Send fee to relayer\r\n        (bool successRelayer,) = relayer.call{value: fee}(\"\");\r\n        require(successRelayer, \"PlasmaswapHandler#handle: TRANSFER_ETH_TO_RELAYER_FAILED\");\r\n    }\r\n\r\n    /**\r\n     * @notice Check whether can handle an order execution\r\n     * @param _inputToken - Address of the input token\r\n     * @param _outputToken - Address of the output token\r\n     * @param _inputAmount - uint256 of the input token amount\r\n     * @param _minReturn - uint256 of the min return amount of output token\r\n     * @param _data - Bytes of arbitrary data\r\n     * @return bool - Whether the execution can be handled or not\r\n     */\r\n    function canHandle(\r\n        IERC20 _inputToken,\r\n        IERC20 _outputToken,\r\n        uint256 _inputAmount,\r\n        uint256 _minReturn,\r\n        bytes calldata _data\r\n    ) external override view returns (bool) {\r\n        address inputToken = address(_inputToken);\r\n        address outputToken = address(_outputToken);\r\n        address weth = address(WETH);\r\n\r\n        // Decode extra data\r\n        (,, uint256 fee) = abi.decode(_data, (address, address, uint256));\r\n\r\n        if (inputToken == weth || inputToken == HyperUtils.ETH_ADDRESS) {\r\n            if (_inputAmount <= fee) {\r\n                 return false;\r\n            }\r\n\r\n            return _estimate(weth, outputToken, _inputAmount.sub(fee)) >= _minReturn;\r\n        } else if (outputToken == weth || outputToken == HyperUtils.ETH_ADDRESS) {\r\n            uint256 bought = _estimate(inputToken, weth, _inputAmount);\r\n\r\n            if (bought <= fee) {\r\n                 return false;\r\n            }\r\n\r\n            return bought.sub(fee) >= _minReturn;\r\n        } else {\r\n            uint256 bought = _estimate(inputToken, weth, _inputAmount);\r\n            if (bought <= fee) {\r\n                return false;\r\n            }\r\n\r\n            return _estimate(weth, outputToken, bought.sub(fee)) >= _minReturn;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @notice Simulate an order execution\r\n     * @param _inputToken - Address of the input token\r\n     * @param _outputToken - Address of the output token\r\n     * @param _inputAmount - uint256 of the input token amount\r\n     * @param _minReturn - uint256 of the min return amount of output token\r\n     * @param _data - Bytes of arbitrary data\r\n     * @return bool - Whether the execution can be handled or not\r\n     * @return uint256 - Amount of output token bought\r\n     */\r\n    function simulate(\r\n        IERC20 _inputToken,\r\n        IERC20 _outputToken,\r\n        uint256 _inputAmount,\r\n        uint256 _minReturn,\r\n        bytes calldata _data\r\n    ) external view returns (bool, uint256) {\r\n        address inputToken = address(_inputToken);\r\n        address outputToken = address(_outputToken);\r\n        address weth = address(WETH);\r\n\r\n        // Decode extra data\r\n        (,, uint256 fee) = abi.decode(_data, (address, address, uint256));\r\n\r\n        uint256 bought;\r\n\r\n        if (inputToken == weth || inputToken == HyperUtils.ETH_ADDRESS) {\r\n            if (_inputAmount <= fee) {\r\n                return (false, 0);\r\n            }\r\n\r\n            bought = _estimate(weth, outputToken, _inputAmount.sub(fee));\r\n        } else if (outputToken == weth || outputToken == HyperUtils.ETH_ADDRESS) {\r\n            bought = _estimate(inputToken, weth, _inputAmount);\r\n            if (bought <= fee) {\r\n                 return (false, 0);\r\n            }\r\n\r\n            bought = bought.sub(fee);\r\n        } else {\r\n            bought = _estimate(inputToken, weth, _inputAmount);\r\n            if (bought <= fee) {\r\n                return (false, 0);\r\n            }\r\n\r\n            bought = _estimate(weth, outputToken, bought.sub(fee));\r\n        }\r\n        return (bought >= _minReturn, bought);\r\n    }\r\n\r\n    /**\r\n     * @notice Estimate output token amount\r\n     * @param _inputToken - Address of the input token\r\n     * @param _outputToken - Address of the output token\r\n     * @param _inputAmount - uint256 of the input token amount\r\n     * @return bought - Amount of output token bought\r\n     */\r\n    function _estimate(address _inputToken, address _outputToken, uint256 _inputAmount) internal view returns (uint256 bought) {\r\n        // Get plasmaswap trading pair\r\n        (address token0, address token1) = PlasmaswapUtils.sortTokens(_inputToken, _outputToken);\r\n        IPlasmaswapPair pair = IPlasmaswapPair(PlasmaswapUtils.pairForSorted(FACTORY, token0, token1, FACTORY_CODE_HASH));\r\n\r\n        // Compute limit for plasmaswap trade\r\n        (uint112 reserve0, uint112 reserve1,) = pair.getReserves();\r\n\r\n        // Optimal amounts for plasmaswap trade\r\n        uint256 reserveIn; uint256 reserveOut;\r\n        if (_inputToken == token0) {\r\n            reserveIn = reserve0;\r\n            reserveOut = reserve1;\r\n        } else {\r\n            reserveIn = reserve1;\r\n            reserveOut = reserve0;\r\n        }\r\n\r\n        bought = PlasmaswapUtils.getAmountOut(_inputAmount, reserveIn, reserveOut);\r\n    }\r\n\r\n    /**\r\n     * @notice Swap input token to output token\r\n     * @param _inputToken - Address of the input token\r\n     * @param _outputToken - Address of the output token\r\n     * @param _inputAmount - uint256 of the input token amount\r\n     * @param _recipient - Address of the recipient\r\n     * @return bought - Amount of output token bought\r\n     */\r\n    function _swap(address _inputToken, address _outputToken, uint256 _inputAmount, address _recipient) internal returns (uint256 bought) {\r\n        // Get plasmaswap trading pair\r\n        (address token0, address token1) = PlasmaswapUtils.sortTokens(_inputToken, _outputToken);\r\n        IPlasmaswapPair pair = IPlasmaswapPair(PlasmaswapUtils.pairForSorted(FACTORY, token0, token1, FACTORY_CODE_HASH));\r\n\r\n        uint256 inputAmount = _inputAmount;\r\n        uint256 prevPairBalance;\r\n        if (_inputToken != address(WETH)) {\r\n            prevPairBalance = HyperUtils.balanceOf(IERC20(_inputToken), address(pair));\r\n        }\r\n\r\n        // Send tokens to plasmaswap pair\r\n        require(SafeERC20.transfer(IERC20(_inputToken), address(pair), inputAmount), \"PlasmaswapHandler#_swap: ERROR_SENDING_TOKENS\");\r\n\r\n        if (_inputToken != address(WETH)) {\r\n            inputAmount = HyperUtils.balanceOf(IERC20(_inputToken), address(pair)).sub(prevPairBalance);\r\n        }\r\n\r\n        // Get current reserves\r\n        (uint112 reserve0, uint112 reserve1,) = pair.getReserves();\r\n\r\n        // Optimal amounts for plasmaswap trade\r\n        {\r\n            uint256 reserveIn; uint256 reserveOut;\r\n            if (_inputToken == token0) {\r\n                reserveIn = reserve0;\r\n                reserveOut = reserve1;\r\n            } else {\r\n                reserveIn = reserve1;\r\n                reserveOut = reserve0;\r\n            }\r\n            bought = PlasmaswapUtils.getAmountOut(inputAmount, reserveIn, reserveOut);\r\n        }\r\n\r\n        // Determine if output amount is token1 or token0\r\n        uint256 amount1Out; uint256 amount0Out;\r\n        if (_inputToken == token0) {\r\n            amount1Out = bought;\r\n        } else {\r\n            amount0Out = bought;\r\n        }\r\n\r\n        // Execute swap\r\n        pair.swap(amount0Out, amount1Out, _recipient, bytes(\"\"));\r\n    }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_factory\",\"type\":\"address\"},{\"internalType\":\"contract IWETH\",\"name\":\"_weth\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"_codeHash\",\"type\":\"bytes32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"FACTORY\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"FACTORY_CODE_HASH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"WETH\",\"outputs\":[{\"internalType\":\"contract IWETH\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"_inputToken\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"_outputToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_inputAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_minReturn\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"canHandle\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"_inputToken\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"_outputToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"handle\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"bought\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"_inputToken\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"_outputToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_inputAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_minReturn\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"simulate\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]","ContractName":"PlasmaswapHandler","CompilerVersion":"v0.6.8+commit.0bbfe453","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000d87ad19db2c4ccbf897106de034d52e3dd90ea60000000000000000000000000c02aaa39b223fe8d0a0e5c4f27ead9083c756cc2611ee9501fb19c9df82695e66f6c58d69d86907b531dfbed652231515ae84081","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://9e32c8818920387c36ba6e908d750c517ee2090279a1619d8e60654e15d0171e"}]}