{"status":"1","message":"OK","result":[{"SourceCode":"// SPDX-License-Identifier: MIT\r\npragma solidity ^0.7.0;\r\n\r\n//@title SKY Token contract interface\r\ninterface Skycoin_token {                                     \r\n    function balanceOf(address owner) external returns (uint256);\r\n    function transfer(address to, uint256 amount) external returns (bool);\r\n    function transferFrom(address _from, address _to, uint256 _value) external returns (bool success);\r\n}\r\n\r\n//@title SKY Initial Distribution Contract\r\ncontract Skycoin_Sale {\r\n    uint256 public SKYPrice ;\r\n    \r\n    address public token_addr ; \r\n    Skycoin_token token_contract = Skycoin_token(token_addr) ;\r\n    \r\n    event sold(address seller, uint256 amount) ;\r\n    event bought(address buyer, uint256 amount) ;\r\n    event priceAdjusted(uint256 oldPrice, uint256 newPrice) ; \r\n    \r\n    address public owner ; \r\n    \r\n    uint256 public START_TIMESTAMP = 0 ; \r\n\r\n    constructor(uint256 SKYperETH) {\r\n        SKYPrice = SKYperETH ;\r\n        owner = msg.sender ; \r\n    }\r\n    \r\n    modifier onlyOwner {\r\n        require(msg.sender == owner, \"Sender not owner!\") ; \r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Multiply two integers with extra checking the result\r\n     * @param   a Integer 1 \r\n     *          b Integer 2\r\n     */\r\n    function safeMultiply(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0 ;\r\n        } else {\r\n            uint256 c = a * b ;\r\n            assert(c / a == b) ;\r\n            return c ;\r\n        }\r\n    }\r\n    \r\n    /**\r\n     * @dev Divide two integers with checking b is positive\r\n     * @param   a Integer 1 \r\n     *          b Integer 2\r\n     */\r\n    function safeDivide(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b > 0); \r\n        uint256 c = a / b;\r\n\r\n        return c;\r\n    }\r\n    \r\n    /**\r\n     * @dev Set SKY Token contract address\r\n     * @param addr Address of SKY Token contract\r\n     */\r\n    function set_token_contract(address addr) public onlyOwner {\r\n        token_addr = addr ;\r\n        token_contract = Skycoin_token(token_addr) ;\r\n    }\r\n\r\n    /**\r\n     * @dev Buy SKY tokens directly from the contract\r\n     */\r\n    function buy_SKY() public payable returns (bool success) {\r\n        require(msg.value > 0, \"Message value should exceed 0\") ; \r\n        uint256 scaledAmount = safeMultiply(msg.value, SKYPrice) ;\r\n        require(token_contract.balanceOf(address(this)) >= scaledAmount, \"Contract balance not sufficient\") ;\r\n        require(block.timestamp > START_TIMESTAMP, \"Sale has not yet started!\") ; \r\n\r\n        token_contract.transfer(msg.sender, scaledAmount) ;\r\n        \r\n        emit bought(msg.sender, scaledAmount) ; \r\n    \r\n        return true ; \r\n    }\r\n    \r\n    /**\r\n     * @dev Fallback function for when a user sends ether to the contract\r\n     * directly instead of calling the function\r\n     */\r\n    receive() external payable {\r\n        buy_SKY() ; \r\n    }\r\n\r\n    /**\r\n     * @dev Adjust the SKY token price\r\n     * @param   SKYperETH the amount of SKY a user receives for 1 ETH\r\n     */\r\n    function adjustPrice(uint SKYperETH) external onlyOwner {\r\n        require(block.timestamp < START_TIMESTAMP, \"Cannot adjust price during sale!\") ; \r\n        emit priceAdjusted(SKYPrice, SKYperETH) ; \r\n        \r\n        SKYPrice = SKYperETH ; \r\n    }\r\n\r\n    /**\r\n     * @dev End the SKY token distribution by sending all leftover tokens and ether to the contract owner\r\n     */\r\n    function endSKYDistr() external onlyOwner {             \r\n        require(token_contract.transfer(owner, token_contract.balanceOf(address(this))), \"Error during transfer\") ;\r\n\r\n        msg.sender.transfer(address(this).balance) ;\r\n    }\r\n    \r\n    /**\r\n     * @dev Withdraw ether to contract owner\r\n     */\r\n    function withdrawEther() external onlyOwner {\r\n        msg.sender.transfer(address(this).balance) ; \r\n    }\r\n    \r\n    /**\r\n     * @dev Withdraw stuck ERC20 tokens \r\n     * @param   tokenAddress Cntract address of stuck ERC20 address\r\n     *          amount Amount of tokens to be withdrawn\r\n     */\r\n    function withdrawERC20(address tokenAddress, uint amount) external onlyOwner {\r\n        Skycoin_token ERC20_contract = Skycoin_token(tokenAddress) ;\r\n        ERC20_contract.transfer(msg.sender, amount) ; \r\n    }\r\n    \r\n    /**\r\n     * @dev Renenounce ownership of sale contract to new owner address. Ensure newOwner can call owner functions.\r\n     * @param   newOwner address of new owner\r\n     */\r\n    function renounceOwnership(address newOwner) external onlyOwner {\r\n        owner = newOwner ; \r\n    }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"SKYperETH\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"bought\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldPrice\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newPrice\",\"type\":\"uint256\"}],\"name\":\"priceAdjusted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"sold\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"SKYPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"START_TIMESTAMP\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"SKYperETH\",\"type\":\"uint256\"}],\"name\":\"adjustPrice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buy_SKY\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"endSKYDistr\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"set_token_contract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token_addr\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdrawERC20\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawEther\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]","ContractName":"Skycoin_Sale","CompilerVersion":"v0.7.3+commit.9bfce1f6","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"0000000000000000000000000000000000000000000000000000000000000b86","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://5729a4436e682aa0ca30c2f84ad9a70c8ea2784de4f94972c30bc7f830461b1e"}]}