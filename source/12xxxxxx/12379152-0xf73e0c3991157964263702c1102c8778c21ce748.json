{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.7.6;\r\n\r\npragma abicoder v2;\r\n\r\ninterface IUniswapV3 {\r\n    \r\n    function tickSpacing() external view returns (int24);\r\n    \r\n    function slot0()\r\n        external\r\n        view\r\n        returns (\r\n            uint160 sqrtPriceX96,\r\n            int24 tick,\r\n            uint16 observationIndex,\r\n            uint16 observationCardinality,\r\n            uint16 observationCardinalityNext,\r\n            uint8 feeProtocol,\r\n            bool unlocked\r\n        );\r\n\r\n    function feeGrowthGlobal0X128() external view returns (uint256);\r\n    \r\n    function feeGrowthGlobal1X128() external view returns (uint256);\r\n\r\n    function protocolFees() external view returns (uint128 token0, uint128 token1);\r\n\r\n    function liquidity() external view returns (uint128);\r\n\r\n    function ticks(int24 tick)\r\n        external\r\n        view\r\n        returns (\r\n            uint128 liquidityGross,\r\n            int128 liquidityNet,\r\n            uint256 feeGrowthOutside0X128,\r\n            uint256 feeGrowthOutside1X128,\r\n            int56 tickCumulativeOutside,\r\n            uint160 secondsPerLiquidityOutsideX128,\r\n            uint32 secondsOutside,\r\n            bool initialized\r\n        );\r\n\r\n    function tickBitmap(int16 wordPosition) external view returns (uint256);\r\n\r\n    function positions(bytes32 key)\r\n        external\r\n        view\r\n        returns (\r\n            uint128 _liquidity,\r\n            uint256 feeGrowthInside0LastX128,\r\n            uint256 feeGrowthInside1LastX128,\r\n            uint128 tokensOwed0,\r\n            uint128 tokensOwed1\r\n        );\r\n\r\n    function observations(uint256 index)\r\n        external\r\n        view\r\n        returns (\r\n            uint32 blockTimestamp,\r\n            int56 tickCumulative,\r\n            uint160 secondsPerLiquidityCumulativeX128,\r\n            bool initialized\r\n        );\r\n}\r\n\r\n\r\ncontract UniV3Helper {\r\n    \r\n    int24 private constant MIN_TICK = -887272;\r\n    int24 private constant MAX_TICK = -MIN_TICK;\r\n    \r\n    struct Tick {\r\n        uint128 liquidityGross;\r\n        int128 liquidityNet;\r\n        uint256 feeGrowthOutside0X128;\r\n        uint256 feeGrowthOutside1X128;\r\n        int56 tickCumulativeOutside;\r\n        uint160 secondsPerLiquidityOutsideX128;\r\n        uint32 secondsOutside;\r\n        int24 index; // tick index\r\n    }\r\n    \r\n    function getTicks(IUniswapV3 pool) external view returns (bytes[] memory ticks) {\r\n        \r\n        int24 tickSpacing = pool.tickSpacing();\r\n        \r\n        int24[] memory initTicks = new int24[](uint(MAX_TICK * 2 / tickSpacing));\r\n\r\n        uint counter = 0;\r\n        for (int24 tickNum = (MIN_TICK / tickSpacing * tickSpacing); tickNum <=  (MAX_TICK / tickSpacing * tickSpacing); tickNum += 256) {\r\n            int16 pos = int16(tickNum >> 8);\r\n            uint256 bm = pool.tickBitmap(pos);   \r\n        \r\n             while (bm != 0) {\r\n                 uint8 bit = mostSignificantBit(bm);\r\n                 initTicks[counter] = (int24(pos) * 256 + int24(bit)) * tickSpacing;\r\n                 \r\n                 counter += 1;\r\n                 bm ^= 1 << bit;\r\n             }\r\n             \r\n        }\r\n        \r\n        ticks = new bytes[](counter);\r\n        for (uint i = 0; i < counter; i++) {\r\n            (           \r\n                uint128 liquidityGross,\r\n                int128 liquidityNet,\r\n                uint256 feeGrowthOutside0X128,\r\n                uint256 feeGrowthOutside1X128\r\n                , // int56 tickCumulativeOutside,\r\n                , // secondsPerLiquidityOutsideX128\r\n                , // uint32 secondsOutside\r\n                , // init\r\n            ) = pool.ticks(initTicks[i]);\r\n                 \r\n             ticks[i] = abi.encodePacked(\r\n                 liquidityGross,\r\n                 liquidityNet,\r\n                 feeGrowthOutside0X128,\r\n                 feeGrowthOutside1X128,\r\n                 // tickCumulativeOutside,\r\n                 // secondsPerLiquidityOutsideX128,\r\n                 // secondsOutside,\r\n                 initTicks[i]\r\n             );\r\n        }\r\n    }\r\n    \r\n    function mostSignificantBit(uint256 x) private pure returns (uint8 r) {\r\n        require(x > 0);\r\n\r\n        if (x >= 0x100000000000000000000000000000000) {\r\n            x >>= 128;\r\n            r += 128;\r\n        }\r\n        if (x >= 0x10000000000000000) {\r\n            x >>= 64;\r\n            r += 64;\r\n        }\r\n        if (x >= 0x100000000) {\r\n            x >>= 32;\r\n            r += 32;\r\n        }\r\n        if (x >= 0x10000) {\r\n            x >>= 16;\r\n            r += 16;\r\n        }\r\n        if (x >= 0x100) {\r\n            x >>= 8;\r\n            r += 8;\r\n        }\r\n        if (x >= 0x10) {\r\n            x >>= 4;\r\n            r += 4;\r\n        }\r\n        if (x >= 0x4) {\r\n            x >>= 2;\r\n            r += 2;\r\n        }\r\n        if (x >= 0x2) r += 1;\r\n    }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"contract IUniswapV3\",\"name\":\"pool\",\"type\":\"address\"}],\"name\":\"getTicks\",\"outputs\":[{\"internalType\":\"bytes[]\",\"name\":\"ticks\",\"type\":\"bytes[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"UniV3Helper","CompilerVersion":"v0.7.6+commit.7338295f","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"ipfs://25a114104e821233e1a000941bb3de59d3a6fe1a7452aa0b74ac53f0aea6a163"}]}