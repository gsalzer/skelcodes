{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"./contracts/BatchSwap.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.7.6;\\npragma abicoder v2;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Counters.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Pausable.sol\\\";\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC1155/IERC1155Receiver.sol\\\";\\n\\n//Interface\\nabstract contract ERC20Interface {\\n  function transferFrom(address from, address to, uint256 tokenId) public virtual;\\n  function transfer(address recipient, uint256 amount) public virtual;\\n}\\n\\nabstract contract ERC721Interface {\\n  function safeTransferFrom(address from, address to, uint256 tokenId, bytes memory data) public virtual;\\n  function balanceOf(address owner) public virtual view returns (uint256 balance) ;\\n}\\n\\nabstract contract ERC1155Interface {\\n  function safeBatchTransferFrom(address from, address to, uint256[] memory ids, uint256[] memory amounts, bytes memory data) public virtual;\\n}\\n\\nabstract contract CPInterface {\\n  function transferPunk(address to, uint index) public virtual;\\n  function punkIndexToAddress(uint index) public virtual view returns (address owner);\\n}\\n\\nabstract contract customInterface {\\n  function bridgeSafeTransferFrom(address dapp, address from, address to, uint256[] memory ids, uint256[] memory amounts, bytes memory data) public virtual;\\n}\\n\\ncontract PunkProxy {\\n    address private owner;\\n    address private punkOwner;\\n    constructor(address _owner, address _punkOwner) {\\n        owner = _owner;\\n        punkOwner = _punkOwner;\\n    }\\n\\n    function proxyTransferPunk(address _punkContract, address _to, uint256 _punkIndex) public {\\n        require(owner == msg.sender, \\\"You're not the contract owner\\\");\\n        require(CPInterface(_punkContract).punkIndexToAddress(_punkIndex) == address(this), \\\"Punk is missing from this Proxy\\\");\\n        CPInterface(_punkContract).transferPunk(_to, _punkIndex);\\n    }\\n\\n    function changeCurrentProxyOwner(address _newOwner) public {\\n        require(owner == msg.sender, \\\"You're not the contract owner\\\");\\n        owner = _newOwner;\\n    }\\n\\n    function recoverPunk(address _punkContract, address _recover, uint256 _punkIndex) public {\\n        require(owner == msg.sender, \\\"You're not the contract owner\\\");\\n        require(punkOwner == _recover, \\\"You're not the punk owner\\\");\\n        require(CPInterface(_punkContract).punkIndexToAddress(_punkIndex) == address(this), \\\"Punk is missing from this Proxy\\\");\\n        CPInterface(_punkContract).transferPunk(_recover, _punkIndex);\\n    }\\n}\\n\\ncontract BatchSwap is Ownable, Pausable, IERC721Receiver, IERC1155Receiver {\\n    address constant ERC20      = 0x90b7cf88476cc99D295429d4C1Bb1ff52448abeE;\\n    address constant ERC721     = 0x58874d2951524F7f851bbBE240f0C3cF0b992d79;\\n    address constant ERC1155    = 0xEDfdd7266667D48f3C9aB10194C3d325813d8c39;\\n\\n    address public CRYPTOPUNK = 0xb47e3cd837dDF8e4c57F05d70Ab865de6e193BBB;\\n    mapping (address => PunkProxy) punkProxies;\\n    mapping (uint256 => bool) punkInUse;\\n\\n    address public TRADESQUAD = 0xdbD4264248e2f814838702E0CB3015AC3a7157a1;\\n    address payable public VAULT = 0xdbD4264248e2f814838702E0CB3015AC3a7157a1;\\n\\n    mapping (address => address) dappRelations;\\n\\n    mapping (address => bool) whiteList;\\n    \\n    using Counters for Counters.Counter;\\n    using SafeMath for uint256;\\n\\n    uint256 constant secs = 86400;\\n    \\n    Counters.Counter private _swapIds;\\n\\n    // Flag for the createSwap\\n    bool private swapFlag;\\n    \\n    // Swap Struct\\n    struct swapStruct {\\n        address dapp;\\n        address typeStd;\\n        uint256[] tokenId;\\n        uint256[] blc;\\n        bytes data;\\n    }\\n    \\n    // Swap Status\\n    enum swapStatus { Opened, Closed, Cancelled }\\n    \\n    // SwapIntent Struct\\n    struct swapIntent {\\n        uint256 id;\\n        address payable addressOne;\\n        uint256 valueOne;\\n        address payable addressTwo;\\n        uint256 valueTwo;\\n        uint256 swapStart;\\n        uint256 swapEnd;\\n        uint256 swapFee;\\n        swapStatus status;\\n    }\\n    \\n    // NFT Mapping\\n    mapping(uint256 => swapStruct[]) nftsOne;\\n    mapping(uint256 => swapStruct[]) nftsTwo;\\n\\n    // Struct Payment\\n    struct paymentStruct {\\n        bool status;\\n        uint256 value;\\n    }\\n    \\n    // Mapping key/value for get the swap infos\\n    mapping (address => swapIntent[]) swapList;\\n    mapping (uint256 => uint256) swapMatch;\\n    \\n    // Struct for the payment rules\\n    paymentStruct payment;\\n    \\n    \\n    // Events\\n    event swapEvent(address indexed _creator, uint256 indexed time, swapStatus indexed _status, uint256 _swapId, address _swapCounterPart);\\n    event paymentReceived(address indexed _payer, uint256 _value);\\n\\n    receive() external payable { \\n        emit paymentReceived(msg.sender, msg.value);\\n    }\\n    \\n    // Create Swap\\n    function createSwapIntent(swapIntent memory _swapIntent, swapStruct[] memory _nftsOne, swapStruct[] memory _nftsTwo) payable public whenNotPaused {\\n        if(payment.status) {\\n            if(ERC721Interface(TRADESQUAD).balanceOf(msg.sender)==0) {\\n                require(msg.value>=payment.value.add(_swapIntent.valueOne), \\\"Not enought WEI for handle the transaction\\\");\\n                _swapIntent.swapFee = getWeiPayValueAmount() ;\\n            }\\n            else {\\n                require(msg.value>=_swapIntent.valueOne, \\\"Not enought WEI for handle the transaction\\\");\\n                _swapIntent.swapFee = 0 ;\\n            }\\n        }\\n        else\\n            require(msg.value>=_swapIntent.valueOne, \\\"Not enought WEI for handle the transaction\\\");\\n\\n        _swapIntent.addressOne = msg.sender;\\n        _swapIntent.id = _swapIds.current();\\n        _swapIntent.swapStart = block.timestamp;\\n        _swapIntent.swapEnd = 0;\\n        _swapIntent.status = swapStatus.Opened ;\\n\\n        swapMatch[_swapIds.current()] = swapList[msg.sender].length;\\n        swapList[msg.sender].push(_swapIntent);\\n        \\n        uint256 i;\\n        for(i=0; i<_nftsOne.length; i++)\\n            nftsOne[_swapIntent.id].push(_nftsOne[i]);\\n            \\n        for(i=0; i<_nftsTwo.length; i++)\\n            nftsTwo[_swapIntent.id].push(_nftsTwo[i]);\\n        \\n        for(i=0; i<nftsOne[_swapIntent.id].length; i++) {\\n            require(whiteList[nftsOne[_swapIntent.id][i].dapp], \\\"A DAPP is not handled by the system\\\");\\n            if(nftsOne[_swapIntent.id][i].typeStd == ERC20) {\\n                ERC20Interface(nftsOne[_swapIntent.id][i].dapp).transferFrom(_swapIntent.addressOne, address(this), nftsOne[_swapIntent.id][i].blc[0]);\\n            }\\n            else if(nftsOne[_swapIntent.id][i].typeStd == ERC721) {\\n                ERC721Interface(nftsOne[_swapIntent.id][i].dapp).safeTransferFrom(_swapIntent.addressOne, address(this), nftsOne[_swapIntent.id][i].tokenId[0], nftsOne[_swapIntent.id][i].data);\\n            }\\n            else if(nftsOne[_swapIntent.id][i].typeStd == ERC1155) {\\n                ERC1155Interface(nftsOne[_swapIntent.id][i].dapp).safeBatchTransferFrom(_swapIntent.addressOne, address(this), nftsOne[_swapIntent.id][i].tokenId, nftsOne[_swapIntent.id][i].blc, nftsOne[_swapIntent.id][i].data);\\n            }\\n            else if(nftsOne[_swapIntent.id][i].typeStd == CRYPTOPUNK) { // Controllo che il CP sia presente sul proxy e che non sia in uso in un altro trade\\n                require(punkInUse[nftsOne[_swapIntent.id][i].tokenId[0]] == false, \\\"Punk in use on another trade\\\");\\n                require(CPInterface(CRYPTOPUNK).punkIndexToAddress(nftsOne[_swapIntent.id][i].tokenId[0]) == address(punkProxies[msg.sender]), \\\"CryptoPunk missing\\\");\\n                punkInUse[nftsOne[_swapIntent.id][i].tokenId[0]] = true;\\n            }\\n            else {\\n                customInterface(dappRelations[nftsOne[_swapIntent.id][i].dapp]).bridgeSafeTransferFrom(nftsOne[_swapIntent.id][i].dapp, _swapIntent.addressOne, dappRelations[nftsOne[_swapIntent.id][i].dapp], nftsOne[_swapIntent.id][i].tokenId, nftsOne[_swapIntent.id][i].blc, nftsOne[_swapIntent.id][i].data);\\n            }\\n        }\\n\\n        emit swapEvent(msg.sender, (block.timestamp-(block.timestamp%secs)), _swapIntent.status, _swapIntent.id, _swapIntent.addressTwo);\\n        _swapIds.increment();\\n    }\\n    \\n    // Close the swap\\n    function closeSwapIntent(address _swapCreator, uint256 _swapId) payable public whenNotPaused {\\n        require(swapList[_swapCreator][swapMatch[_swapId]].status == swapStatus.Opened, \\\"Swap Status is not opened\\\");\\n        require(swapList[_swapCreator][swapMatch[_swapId]].addressTwo == msg.sender, \\\"You're not the interested counterpart\\\");\\n        if(payment.status) {\\n            if(ERC721Interface(TRADESQUAD).balanceOf(msg.sender)==0) {\\n                require(msg.value>=payment.value.add(swapList[_swapCreator][swapMatch[_swapId]].valueTwo), \\\"Not enought WEI for handle the transaction\\\");\\n                // Move the fees to the vault\\n                if(payment.value.add(swapList[_swapCreator][swapMatch[_swapId]].swapFee) > 0)\\n                    VAULT.transfer(payment.value.add(swapList[_swapCreator][swapMatch[_swapId]].swapFee));\\n            }\\n            else {\\n                require(msg.value>=swapList[_swapCreator][swapMatch[_swapId]].valueTwo, \\\"Not enought WEI for handle the transaction\\\");\\n                if(swapList[_swapCreator][swapMatch[_swapId]].swapFee>0)\\n                    VAULT.transfer(swapList[_swapCreator][swapMatch[_swapId]].swapFee);\\n            }\\n        }\\n        else\\n            require(msg.value>=swapList[_swapCreator][swapMatch[_swapId]].valueTwo, \\\"Not enought WEI for handle the transaction\\\");\\n        \\n        swapList[_swapCreator][swapMatch[_swapId]].addressTwo = msg.sender;\\n        swapList[_swapCreator][swapMatch[_swapId]].swapEnd = block.timestamp;\\n        swapList[_swapCreator][swapMatch[_swapId]].status = swapStatus.Closed;\\n        \\n        //From Owner 1 to Owner 2\\n        uint256 i;\\n        for(i=0; i<nftsOne[_swapId].length; i++) {\\n            require(whiteList[nftsOne[_swapId][i].dapp], \\\"A DAPP is not handled by the system\\\");\\n            if(nftsOne[_swapId][i].typeStd == ERC20) {\\n                ERC20Interface(nftsOne[_swapId][i].dapp).transfer(swapList[_swapCreator][swapMatch[_swapId]].addressTwo, nftsOne[_swapId][i].blc[0]);\\n            }\\n            else if(nftsOne[_swapId][i].typeStd == ERC721) {\\n                ERC721Interface(nftsOne[_swapId][i].dapp).safeTransferFrom(address(this), swapList[_swapCreator][swapMatch[_swapId]].addressTwo, nftsOne[_swapId][i].tokenId[0], nftsOne[_swapId][i].data);\\n            }\\n            else if(nftsOne[_swapId][i].typeStd == ERC1155) {\\n                ERC1155Interface(nftsOne[_swapId][i].dapp).safeBatchTransferFrom(address(this), swapList[_swapCreator][swapMatch[_swapId]].addressTwo, nftsOne[_swapId][i].tokenId, nftsOne[_swapId][i].blc, nftsOne[_swapId][i].data);\\n            }\\n            else if(nftsOne[_swapId][i].typeStd == CRYPTOPUNK) { // Controllo che il CP sia su questo smart contract\\n                require(CPInterface(CRYPTOPUNK).punkIndexToAddress(nftsOne[_swapId][i].tokenId[0]) == address(punkProxies[swapList[_swapCreator][swapMatch[_swapId]].addressOne]), \\\"CryptoPunk missing\\\");\\n                punkProxies[swapList[_swapCreator][swapMatch[_swapId]].addressOne].proxyTransferPunk(CRYPTOPUNK, swapList[_swapCreator][swapMatch[_swapId]].addressTwo, nftsOne[_swapId][i].tokenId[0]);\\n                punkInUse[nftsOne[_swapId][i].tokenId[0]] = false;\\n            }\\n            else {\\n                customInterface(dappRelations[nftsOne[_swapId][i].dapp]).bridgeSafeTransferFrom(nftsOne[_swapId][i].dapp, dappRelations[nftsOne[_swapId][i].dapp], swapList[_swapCreator][swapMatch[_swapId]].addressTwo, nftsOne[_swapId][i].tokenId, nftsOne[_swapId][i].blc, nftsOne[_swapId][i].data);\\n            }\\n        }\\n        if(swapList[_swapCreator][swapMatch[_swapId]].valueOne > 0)\\n            swapList[_swapCreator][swapMatch[_swapId]].addressTwo.transfer(swapList[_swapCreator][swapMatch[_swapId]].valueOne);\\n        \\n        //From Owner 2 to Owner 1\\n        for(i=0; i<nftsTwo[_swapId].length; i++) {\\n            require(whiteList[nftsTwo[_swapId][i].dapp], \\\"A DAPP is not handled by the system\\\");\\n            if(nftsTwo[_swapId][i].typeStd == ERC20) {\\n                ERC20Interface(nftsTwo[_swapId][i].dapp).transferFrom(swapList[_swapCreator][swapMatch[_swapId]].addressTwo, swapList[_swapCreator][swapMatch[_swapId]].addressOne, nftsTwo[_swapId][i].blc[0]);\\n            }\\n            else if(nftsTwo[_swapId][i].typeStd == ERC721) {\\n                ERC721Interface(nftsTwo[_swapId][i].dapp).safeTransferFrom(swapList[_swapCreator][swapMatch[_swapId]].addressTwo, swapList[_swapCreator][swapMatch[_swapId]].addressOne, nftsTwo[_swapId][i].tokenId[0], nftsTwo[_swapId][i].data);\\n            }\\n            else if(nftsTwo[_swapId][i].typeStd == ERC1155) {\\n                ERC1155Interface(nftsTwo[_swapId][i].dapp).safeBatchTransferFrom(swapList[_swapCreator][swapMatch[_swapId]].addressTwo, swapList[_swapCreator][swapMatch[_swapId]].addressOne, nftsTwo[_swapId][i].tokenId, nftsTwo[_swapId][i].blc, nftsTwo[_swapId][i].data);\\n            }\\n            else if(nftsTwo[_swapId][i].typeStd == CRYPTOPUNK) {\\n                require(CPInterface(CRYPTOPUNK).punkIndexToAddress(nftsTwo[_swapId][i].tokenId[0]) == address(punkProxies[swapList[_swapCreator][swapMatch[_swapId]].addressTwo]), \\\"CryptoPunk missing\\\");\\n                punkProxies[swapList[_swapCreator][swapMatch[_swapId]].addressTwo].proxyTransferPunk(CRYPTOPUNK, swapList[_swapCreator][swapMatch[_swapId]].addressOne, nftsTwo[_swapId][i].tokenId[0]);\\n                punkInUse[nftsTwo[_swapId][i].tokenId[0]] = false;\\n            }\\n            else {\\n                customInterface(dappRelations[nftsTwo[_swapId][i].dapp]).bridgeSafeTransferFrom(nftsTwo[_swapId][i].dapp, swapList[_swapCreator][swapMatch[_swapId]].addressTwo, swapList[_swapCreator][swapMatch[_swapId]].addressOne, nftsTwo[_swapId][i].tokenId, nftsTwo[_swapId][i].blc, nftsTwo[_swapId][i].data);\\n            }\\n        }\\n        if(swapList[_swapCreator][swapMatch[_swapId]].valueTwo>0)\\n            swapList[_swapCreator][swapMatch[_swapId]].addressOne.transfer(swapList[_swapCreator][swapMatch[_swapId]].valueTwo);\\n\\n        emit swapEvent(msg.sender, (block.timestamp-(block.timestamp%secs)), swapStatus.Closed, _swapId, _swapCreator);\\n    }\\n\\n    // Cancel Swap\\n    function cancelSwapIntent(uint256 _swapId) public {\\n        require(swapList[msg.sender][swapMatch[_swapId]].addressOne == msg.sender, \\\"You're not the interested counterpart\\\");\\n        require(swapList[msg.sender][swapMatch[_swapId]].status == swapStatus.Opened, \\\"Swap Status is not opened\\\");\\n        //Rollback\\n        if(swapList[msg.sender][swapMatch[_swapId]].swapFee>0)\\n            msg.sender.transfer(swapList[msg.sender][swapMatch[_swapId]].swapFee);\\n        uint256 i;\\n        for(i=0; i<nftsOne[_swapId].length; i++) {\\n            if(nftsOne[_swapId][i].typeStd == ERC20) {\\n                ERC20Interface(nftsOne[_swapId][i].dapp).transfer(swapList[msg.sender][swapMatch[_swapId]].addressOne, nftsOne[_swapId][i].blc[0]);\\n            }\\n            else if(nftsOne[_swapId][i].typeStd == ERC721) {\\n                ERC721Interface(nftsOne[_swapId][i].dapp).safeTransferFrom(address(this), swapList[msg.sender][swapMatch[_swapId]].addressOne, nftsOne[_swapId][i].tokenId[0], nftsOne[_swapId][i].data);\\n            }\\n            else if(nftsOne[_swapId][i].typeStd == ERC1155) {\\n                ERC1155Interface(nftsOne[_swapId][i].dapp).safeBatchTransferFrom(address(this), swapList[msg.sender][swapMatch[_swapId]].addressOne, nftsOne[_swapId][i].tokenId, nftsOne[_swapId][i].blc, nftsOne[_swapId][i].data);\\n            }\\n            else if(nftsOne[_swapId][i].typeStd == CRYPTOPUNK) { // Controllo che il CP sia presente sul proxy\\n                require(CPInterface(CRYPTOPUNK).punkIndexToAddress(nftsOne[_swapId][i].tokenId[0]) == address(punkProxies[msg.sender]), \\\"CryptoPunk missing\\\");\\n                punkProxies[msg.sender].proxyTransferPunk(CRYPTOPUNK, msg.sender, nftsOne[_swapId][i].tokenId[0]);\\n                punkInUse[nftsOne[_swapId][i].tokenId[0]] = false;\\n            }\\n            else {\\n                customInterface(dappRelations[nftsOne[_swapId][i].dapp]).bridgeSafeTransferFrom(nftsOne[_swapId][i].dapp, dappRelations[nftsOne[_swapId][i].dapp], swapList[msg.sender][swapMatch[_swapId]].addressOne, nftsOne[_swapId][i].tokenId, nftsOne[_swapId][i].blc, nftsOne[_swapId][i].data);\\n            }\\n        }\\n\\n        if(swapList[msg.sender][swapMatch[_swapId]].valueOne > 0)\\n            swapList[msg.sender][swapMatch[_swapId]].addressOne.transfer(swapList[msg.sender][swapMatch[_swapId]].valueOne);\\n\\n        swapList[msg.sender][swapMatch[_swapId]].swapEnd = block.timestamp;\\n        swapList[msg.sender][swapMatch[_swapId]].status = swapStatus.Cancelled;\\n        emit swapEvent(msg.sender, (block.timestamp-(block.timestamp%secs)), swapStatus.Cancelled, _swapId, address(0));\\n    }\\n\\n    // Set CP address\\n    function setCryptoPunkAddress(address _cryptoPunk) public onlyOwner {\\n        CRYPTOPUNK = _cryptoPunk ;\\n    }\\n\\n    // Register the punk proxy\\n    function registerPunkProxy() public {\\n        require(address(punkProxies[msg.sender])==address(0), \\\"Proxy already registered\\\");\\n        punkProxies[msg.sender] = new PunkProxy(address(this), msg.sender);\\n    }\\n\\n    // If the punk is not in use in a swap, I could recover it\\n    function claimPunkOnProxy(uint _punkId) public {\\n        require(punkInUse[_punkId]==false, \\\"Punk already in use in a swap\\\");\\n        punkProxies[msg.sender].recoverPunk(CRYPTOPUNK, msg.sender, _punkId);\\n    }\\n\\n    // Set Trade Squad address\\n    function setTradeSquadAddress(address _tradeSquad) public onlyOwner {\\n        TRADESQUAD = _tradeSquad ;\\n    }\\n\\n    // Set Vault address\\n    function setVaultAddress(address payable _vault) public onlyOwner {\\n        VAULT = _vault ;\\n    }\\n\\n    // Handle dapp relations for the bridges\\n    function setDappRelation(address _dapp, address _customInterface) public onlyOwner {\\n        dappRelations[_dapp] = _customInterface;\\n    }\\n\\n    // Handle the whitelist\\n    function setWhitelist(address _dapp, bool _status) public onlyOwner {\\n        whiteList[_dapp] = _status;\\n    }\\n\\n    // Edit CounterPart Address\\n    function editCounterPart(uint256 _swapId, address payable _counterPart) public {\\n        require(msg.sender == swapList[msg.sender][swapMatch[_swapId]].addressOne, \\\"Message sender must be the swap creator\\\");\\n        swapList[msg.sender][swapMatch[_swapId]].addressTwo = _counterPart;\\n    }\\n\\n    // Set the payment\\n    function setPayment(bool _status, uint256 _value) public onlyOwner whenNotPaused {\\n        payment.status = _status;\\n        payment.value = _value * (1 wei);\\n    }\\n\\n    // Get punk proxy address\\n    function getPunkProxy(address _address) public view returns(address) {\\n        return address(punkProxies[_address]) ;\\n    }\\n\\n    // Get whitelist status of an address\\n    function getWhiteList(address _address) public view returns(bool) {\\n        return whiteList[_address];\\n    }\\n\\n    // Get Trade fees\\n    function getWeiPayValueAmount() public view returns(uint256) {\\n        return payment.value;\\n    }\\n\\n    // Get swap infos\\n    function getSwapIntentByAddress(address _creator, uint256 _swapId) public view returns(swapIntent memory) {\\n        return swapList[_creator][swapMatch[_swapId]];\\n    }\\n    \\n    // Get swapStructLength\\n    function getSwapStructSize(uint256 _swapId, bool _nfts) public view returns(uint256) {\\n        if(_nfts)\\n            return nftsOne[_swapId].length ;\\n        else\\n            return nftsTwo[_swapId].length ;\\n    }\\n\\n    // Get swapStruct\\n    function getSwapStruct(uint256 _swapId, bool _nfts, uint256 _index) public view returns(swapStruct memory) {\\n        if(_nfts)\\n            return nftsOne[_swapId][_index] ;\\n        else\\n            return nftsTwo[_swapId][_index] ;\\n    }\\n\\n    //Interface IERC721/IERC1155\\n    function onERC721Received(address operator, address from, uint256 tokenId, bytes calldata data) external override returns (bytes4) {\\n        return bytes4(keccak256(\\\"onERC721Received(address,address,uint256,bytes)\\\"));\\n    }\\n    function onERC1155Received(address operator, address from, uint256 id, uint256 value, bytes calldata data) external override returns (bytes4) {\\n        return bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"));\\n    }\\n    function onERC1155BatchReceived(address operator, address from, uint256[] calldata id, uint256[] calldata value, bytes calldata data) external override returns (bytes4) {\\n        return bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"));\\n    }\\n    function supportsInterface(bytes4 interfaceID) public view virtual override returns (bool) {\\n        return  interfaceID == 0x01ffc9a7 || interfaceID == 0x4e2312e0;\\n    }\\n}\"\r\n    },\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor () internal {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Counters.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"../math/SafeMath.sol\\\";\\n\\n/**\\n * @title Counters\\n * @author Matt Condon (@shrugs)\\n * @dev Provides counters that can only be incremented or decremented by one. This can be used e.g. to track the number\\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\\n *\\n * Include with `using Counters for Counters.Counter;`\\n * Since it is not possible to overflow a 256 bit integer with increments of one, `increment` can skip the {SafeMath}\\n * overflow check, thereby saving gas. This does assume however correct usage, in that the underlying `_value` is never\\n * directly accessed.\\n */\\nlibrary Counters {\\n    using SafeMath for uint256;\\n\\n    struct Counter {\\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\\n        uint256 _value; // default: 0\\n    }\\n\\n    function current(Counter storage counter) internal view returns (uint256) {\\n        return counter._value;\\n    }\\n\\n    function increment(Counter storage counter) internal {\\n        // The {SafeMath} overflow check can be skipped here, see the comment at the top\\n        counter._value += 1;\\n    }\\n\\n    function decrement(Counter storage counter) internal {\\n        counter._value = counter._value.sub(1);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/math/SafeMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        uint256 c = a + b;\\n        if (c < a) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b > a) return (false, 0);\\n        return (true, a - b);\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) return (true, 0);\\n        uint256 c = a * b;\\n        if (c / a != b) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a / b);\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a % b);\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b <= a, \\\"SafeMath: subtraction overflow\\\");\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0) return 0;\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: division by zero\\\");\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: modulo by zero\\\");\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Pausable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"./Context.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract Pausable is Context {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    constructor () internal {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\\n     */\\n    function onERC721Received(address operator, address from, uint256 tokenId, bytes calldata data) external returns (bytes4);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC1155/IERC1155Receiver.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"../../introspection/IERC165.sol\\\";\\n\\n/**\\n * _Available since v3.1._\\n */\\ninterface IERC1155Receiver is IERC165 {\\n\\n    /**\\n        @dev Handles the receipt of a single ERC1155 token type. This function is\\n        called at the end of a `safeTransferFrom` after the balance has been updated.\\n        To accept the transfer, this must return\\n        `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))`\\n        (i.e. 0xf23a6e61, or its own function selector).\\n        @param operator The address which initiated the transfer (i.e. msg.sender)\\n        @param from The address which previously owned the token\\n        @param id The ID of the token being transferred\\n        @param value The amount of tokens being transferred\\n        @param data Additional data with no specified format\\n        @return `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))` if transfer is allowed\\n    */\\n    function onERC1155Received(\\n        address operator,\\n        address from,\\n        uint256 id,\\n        uint256 value,\\n        bytes calldata data\\n    )\\n        external\\n        returns(bytes4);\\n\\n    /**\\n        @dev Handles the receipt of a multiple ERC1155 token types. This function\\n        is called at the end of a `safeBatchTransferFrom` after the balances have\\n        been updated. To accept the transfer(s), this must return\\n        `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))`\\n        (i.e. 0xbc197c81, or its own function selector).\\n        @param operator The address which initiated the batch transfer (i.e. msg.sender)\\n        @param from The address which previously owned the token\\n        @param ids An array containing ids of each token being transferred (order and length must match values array)\\n        @param values An array containing amounts of each token being transferred (order and length must match ids array)\\n        @param data Additional data with no specified format\\n        @return `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))` if transfer is allowed\\n    */\\n    function onERC1155BatchReceived(\\n        address operator,\\n        address from,\\n        uint256[] calldata ids,\\n        uint256[] calldata values,\\n        bytes calldata data\\n    )\\n        external\\n        returns(bytes4);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/introspection/IERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"metadata\": {\r\n      \"useLiteralContent\": true\r\n    },\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}","ABI":"[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_payer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"paymentReceived\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_creator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"enum BatchSwap.swapStatus\",\"name\":\"_status\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_swapId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_swapCounterPart\",\"type\":\"address\"}],\"name\":\"swapEvent\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"CRYPTOPUNK\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"TRADESQUAD\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"VAULT\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_swapId\",\"type\":\"uint256\"}],\"name\":\"cancelSwapIntent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_punkId\",\"type\":\"uint256\"}],\"name\":\"claimPunkOnProxy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_swapCreator\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_swapId\",\"type\":\"uint256\"}],\"name\":\"closeSwapIntent\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"address payable\",\"name\":\"addressOne\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"valueOne\",\"type\":\"uint256\"},{\"internalType\":\"address payable\",\"name\":\"addressTwo\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"valueTwo\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"swapStart\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"swapEnd\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"swapFee\",\"type\":\"uint256\"},{\"internalType\":\"enum BatchSwap.swapStatus\",\"name\":\"status\",\"type\":\"uint8\"}],\"internalType\":\"struct BatchSwap.swapIntent\",\"name\":\"_swapIntent\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"dapp\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"typeStd\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"tokenId\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"blc\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"internalType\":\"struct BatchSwap.swapStruct[]\",\"name\":\"_nftsOne\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"dapp\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"typeStd\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"tokenId\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"blc\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"internalType\":\"struct BatchSwap.swapStruct[]\",\"name\":\"_nftsTwo\",\"type\":\"tuple[]\"}],\"name\":\"createSwapIntent\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_swapId\",\"type\":\"uint256\"},{\"internalType\":\"address payable\",\"name\":\"_counterPart\",\"type\":\"address\"}],\"name\":\"editCounterPart\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"getPunkProxy\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_creator\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_swapId\",\"type\":\"uint256\"}],\"name\":\"getSwapIntentByAddress\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"address payable\",\"name\":\"addressOne\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"valueOne\",\"type\":\"uint256\"},{\"internalType\":\"address payable\",\"name\":\"addressTwo\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"valueTwo\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"swapStart\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"swapEnd\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"swapFee\",\"type\":\"uint256\"},{\"internalType\":\"enum BatchSwap.swapStatus\",\"name\":\"status\",\"type\":\"uint8\"}],\"internalType\":\"struct BatchSwap.swapIntent\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_swapId\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_nfts\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"getSwapStruct\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"dapp\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"typeStd\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"tokenId\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"blc\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"internalType\":\"struct BatchSwap.swapStruct\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_swapId\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_nfts\",\"type\":\"bool\"}],\"name\":\"getSwapStructSize\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getWeiPayValueAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"getWhiteList\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"id\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"value\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"onERC1155BatchReceived\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"onERC1155Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"onERC721Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"registerPunkProxy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_cryptoPunk\",\"type\":\"address\"}],\"name\":\"setCryptoPunkAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_dapp\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_customInterface\",\"type\":\"address\"}],\"name\":\"setDappRelation\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_status\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"setPayment\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tradeSquad\",\"type\":\"address\"}],\"name\":\"setTradeSquadAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_vault\",\"type\":\"address\"}],\"name\":\"setVaultAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_dapp\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_status\",\"type\":\"bool\"}],\"name\":\"setWhitelist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceID\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]","ContractName":"BatchSwap","CompilerVersion":"v0.7.6+commit.7338295f","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://7c6afe2c4470236159a290c787a5bb758561175a25d0d28d387a7441f6408388"}]}