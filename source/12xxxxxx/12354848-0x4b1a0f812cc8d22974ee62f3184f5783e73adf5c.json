{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.15;\r\n\r\n/**\r\n * @title Doneth (Doneth)\r\n * @dev Doneth is a contract that allows shared access to funds\r\n * in the form of Ether and ERC20 tokens. It is especially relevant\r\n * to donation based projects. The admins of the contract determine \r\n * who is a member, and each member gets a number of shares. The \r\n * number of shares each member has determines how much Ether/ERC20 \r\n * the member can withdraw from the contract.\r\n */\r\n\r\n\r\ncontract Doneth {\r\n\r\n    address public implementation;\r\n    // constructor(address _implementation) public {}\r\n\r\n    address public owner;\r\n\r\n    function Ownable() public {\r\n        owner = tx.origin;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner || tx.origin == owner);\r\n        _;\r\n    }\r\n\r\n    function transferOwnership(address newOwner) onlyOwner public {\r\n        if (newOwner != address(0)) {\r\n            owner = newOwner;\r\n        }\r\n    }\r\n\r\n    using SafeMath for uint256;  \r\n\r\n    bool public initialized;\r\n\r\n    // Name of the contract\r\n    string public name;\r\n\r\n    // Sum of all shares allocated to members\r\n    uint256 public totalShares;\r\n\r\n    // Sum of all withdrawals done by members\r\n    uint256 public totalWithdrawn;\r\n\r\n    // Block number of when the contract was created\r\n    uint256 public genesisBlockNumber;\r\n\r\n    // Number of decimal places for floating point division\r\n    uint256 constant public PRECISION = 18;\r\n\r\n    // Variables for shared expense allocation\r\n    uint256 public sharedExpense;\r\n    uint256 public sharedExpenseWithdrawn;\r\n\r\n    // Used to keep track of members\r\n    mapping(address => Member) public members;\r\n    address[] public memberKeys;\r\n    struct Member {\r\n        bool exists;\r\n        bool admin;\r\n        uint256 shares;\r\n        uint256 withdrawn;\r\n        string memberName;\r\n        mapping(address => uint256) tokensWithdrawn;\r\n    }\r\n\r\n    // Used to keep track of ERC20 tokens used and how much withdrawn\r\n    mapping(address => uint256) public tokens;\r\n\r\n    function init() public {\r\n        require(!initialized);\r\n        initialized = true;\r\n\r\n        owner = tx.origin;\r\n        genesisBlockNumber = block.number;\r\n\r\n        Member memory newMember;\r\n        newMember.exists = true;\r\n        newMember.admin = true;\r\n        members[tx.origin] = newMember;\r\n        memberKeys.push(tx.origin);\r\n\r\n        totalShares = totalShares.add(1);\r\n        members[tx.origin].shares = members[tx.origin].shares.add(1);\r\n        AddShare(tx.origin, 1, members[tx.origin].shares);\r\n    }\r\n\r\n    event Deposit(address from, uint value);\r\n    event Withdraw(address from, uint value, uint256 newTotalWithdrawn);\r\n    event TokenWithdraw(address from, uint value, address token, uint amount);\r\n    event AddShare(address who, uint256 addedShares, uint256 newTotalShares);\r\n    event RemoveShare(address who, uint256 removedShares, uint256 newTotalShares);\r\n    event ChangePrivilege(address who, bool oldValue, bool newValue);\r\n    event ChangeContractName(string oldValue, string newValue);\r\n    event ChangeMemberName(address who, string oldValue, string newValue);\r\n    event ChangeSharedExpense(uint256 contractBalance, uint256 oldValue, uint256 newValue);\r\n    event WithdrawSharedExpense(address from, address to, uint value, uint256 newSharedExpenseWithdrawn);\r\n\r\n    // Fallback function accepts Ether from donators\r\n    function () public payable {\r\n        Deposit(msg.sender, msg.value);\r\n    }\r\n\r\n    modifier onlyAdmin() { \r\n        if (msg.sender != owner && !members[msg.sender].admin) revert();   \r\n        _;\r\n    }\r\n\r\n    modifier onlyExisting(address who) { \r\n        if (!members[who].exists) revert(); \r\n        _;\r\n    }\r\n\r\n    // Series of getter functions for contract data\r\n    function getMemberCount() public constant returns(uint) {\r\n        return memberKeys.length;\r\n    }\r\n    \r\n    function getMemberAtKey(uint key) public constant returns(address) {\r\n        return memberKeys[key];\r\n    }\r\n    \r\n    function getBalance() public constant returns(uint256 balance) {\r\n        return this.balance;\r\n    }\r\n    \r\n    function getContractInfo() public constant returns(string name, address owner,  uint256 genesisBlockNumber,  uint256 totalShares,  uint256 totalWithdrawn) {\r\n        return (string(name), owner, genesisBlockNumber, totalShares, totalWithdrawn);\r\n    }\r\n    \r\n    function returnMember(address _address) public constant onlyExisting(_address) returns(bool admin, uint256 shares, uint256 withdrawn, string memberName) {\r\n      Member memory m = members[_address];\r\n      return (m.admin, m.shares, m.withdrawn, m.memberName);\r\n    }\r\n\r\n    function checkERC20Balance(address token) public constant returns(uint256) {\r\n        return ERC20(token).balanceOf(address(this));\r\n    }\r\n\r\n    // Function to add members to the contract \r\n    function addMember(address who, uint256 shares, bool admin, string memberName) public onlyAdmin() {\r\n        // Don't allow the same member to be added twice\r\n        if (members[who].exists) revert();\r\n        if (bytes(memberName).length > 21) revert();\r\n\r\n        Member memory newMember;\r\n        newMember.exists = true;\r\n        newMember.admin = admin;\r\n        newMember.memberName = memberName;\r\n\r\n        members[who] = newMember;\r\n        memberKeys.push(who);\r\n        addShare(who, shares);\r\n    }\r\n\r\n    function updateMember(address who, uint256 shares, bool isAdmin, string name) public onlyAdmin() {\r\n        if (sha3(members[who].memberName) != sha3(name)) changeMemberName(who, name);\r\n        if (members[who].admin != isAdmin) changeAdminPrivilege(who, isAdmin);\r\n        if (members[who].shares != shares) allocateShares(who, shares);\r\n    }\r\n\r\n    // Only owner, admin or member can change member's name\r\n    function changeMemberName(address who, string newName) public onlyExisting(who) {\r\n        if (msg.sender != who && msg.sender != owner && !members[msg.sender].admin) revert();\r\n        if (bytes(newName).length > 21) revert();\r\n        ChangeMemberName(who, members[who].memberName, newName);\r\n        members[who].memberName = newName;\r\n    }\r\n\r\n    function changeAdminPrivilege(address who, bool newValue) public onlyAdmin() {\r\n        ChangePrivilege(who, members[who].admin, newValue);\r\n        members[who].admin = newValue; \r\n    }\r\n\r\n    // Only admins and owners can change the contract name\r\n    function changeContractName(string newName) public onlyAdmin() {\r\n        if (bytes(newName).length > 21) revert();\r\n        ChangeContractName(name, newName);\r\n        name = newName;\r\n    }\r\n\r\n    // Shared expense allocation allows admins to withdraw an amount to be used for shared\r\n    // expenses. Shared expense allocation subtracts from the total balance of the contract. \r\n    // Only owner can change this amount.\r\n    function changeSharedExpenseAllocation(uint256 newAllocation) public onlyOwner() {\r\n        if (newAllocation < sharedExpenseWithdrawn) revert();\r\n        if (newAllocation.sub(sharedExpenseWithdrawn) > this.balance) revert();\r\n\r\n        ChangeSharedExpense(this.balance, sharedExpense, newAllocation);\r\n        sharedExpense = newAllocation;\r\n    }\r\n\r\n    // Set share amount explicitly by calculating difference then adding or removing accordingly\r\n    function allocateShares(address who, uint256 amount) public onlyAdmin() onlyExisting(who) {\r\n        uint256 currentShares = members[who].shares;\r\n        if (amount == currentShares) revert();\r\n        if (amount > currentShares) {\r\n            addShare(who, amount.sub(currentShares));\r\n        } else {\r\n            removeShare(who, currentShares.sub(amount));\r\n        }\r\n    }\r\n\r\n    // Increment the number of shares for a member\r\n    function addShare(address who, uint256 amount) public onlyAdmin() onlyExisting(who) {\r\n        totalShares = totalShares.add(amount);\r\n        members[who].shares = members[who].shares.add(amount);\r\n        AddShare(who, amount, members[who].shares);\r\n    }\r\n\r\n    // Decrement the number of shares for a member\r\n    function removeShare(address who, uint256 amount) public onlyAdmin() onlyExisting(who) {\r\n        totalShares = totalShares.sub(amount);\r\n        members[who].shares = members[who].shares.sub(amount);\r\n        RemoveShare(who, amount, members[who].shares);\r\n    }\r\n\r\n    // Function for a member to withdraw Ether from the contract proportional\r\n    // to the amount of shares they have. Calculates the totalWithdrawableAmount\r\n    // in Ether based on the member's share and the Ether balance of the contract,\r\n    // then subtracts the amount of Ether that the member has already previously\r\n    // withdrawn.\r\n    function withdraw(uint256 amount) public onlyExisting(msg.sender) {\r\n        uint256 newTotal = calculateTotalWithdrawableAmount(msg.sender);\r\n        if (amount > newTotal.sub(members[msg.sender].withdrawn)) revert();\r\n        \r\n        members[msg.sender].withdrawn = members[msg.sender].withdrawn.add(amount);\r\n        totalWithdrawn = totalWithdrawn.add(amount);\r\n        msg.sender.transfer(amount);\r\n        Withdraw(msg.sender, amount, totalWithdrawn);\r\n    }\r\n\r\n    // Withdrawal function for ERC20 tokensx\r\n    function withdrawToken(uint256 amount, address token) public onlyExisting(msg.sender) {\r\n        uint256 newTotal = calculateTotalWithdrawableTokenAmount(msg.sender, token);\r\n        if (amount > newTotal.sub(members[msg.sender].tokensWithdrawn[token])) revert();\r\n\r\n        members[msg.sender].tokensWithdrawn[token] = members[msg.sender].tokensWithdrawn[token].add(amount);\r\n        tokens[token] = tokens[token].add(amount);\r\n        ERC20(token).transfer(msg.sender, amount);\r\n        TokenWithdraw(msg.sender, amount, token, tokens[token]);\r\n    }\r\n\r\n    // Withdraw from shared expense allocation. Total withdrawable is calculated as \r\n    // sharedExpense minus sharedExpenseWithdrawn. Only Admin can withdraw from shared expense.\r\n    function withdrawSharedExpense(uint256 amount, address to) public onlyAdmin() {\r\n        if (amount > calculateTotalExpenseWithdrawableAmount()) revert();\r\n        \r\n        sharedExpenseWithdrawn = sharedExpenseWithdrawn.add(amount);\r\n        to.transfer(amount);\r\n        WithdrawSharedExpense(msg.sender, to, amount, sharedExpenseWithdrawn);\r\n    }\r\n\r\n    // Converts from shares to Eth.\r\n    // Ex: 2 shares, 4 total shares, 40 Eth balance\r\n    // 40 Eth / 4 total shares = 10 eth per share * 2 shares = 20 Eth to cash out\r\n    function calculateTotalWithdrawableAmount(address who) public constant onlyExisting(who) returns (uint256) {\r\n        // Total balance to calculate share from = \r\n        // contract balance + totalWithdrawn - sharedExpense + sharedExpenseWithdrawn\r\n        uint256 balanceSum = this.balance.add(totalWithdrawn);\r\n        balanceSum = balanceSum.sub(sharedExpense);\r\n        balanceSum = balanceSum.add(sharedExpenseWithdrawn);\r\n        \r\n        // Need to use parts-per notation to compute percentages for lack of floating point division\r\n        uint256 ethPerSharePPN = balanceSum.percent(totalShares, PRECISION); \r\n        uint256 ethPPN = ethPerSharePPN.mul(members[who].shares);\r\n        uint256 ethVal = ethPPN.div(10**PRECISION); \r\n        return ethVal;\r\n    }\r\n\r\n\r\n    function calculateTotalWithdrawableTokenAmount(address who, address token) public constant returns(uint256) {\r\n        uint256 balanceSum = checkERC20Balance(token).add(tokens[token]);\r\n\r\n        // Need to use parts-per notation to compute percentages for lack of floating point division\r\n        uint256 tokPerSharePPN = balanceSum.percent(totalShares, PRECISION); \r\n        uint256 tokPPN = tokPerSharePPN.mul(members[who].shares);\r\n        uint256 tokVal = tokPPN.div(10**PRECISION); \r\n        return tokVal;\r\n    }\r\n\r\n    function calculateTotalExpenseWithdrawableAmount() public constant returns(uint256) {\r\n        return sharedExpense.sub(sharedExpenseWithdrawn);\r\n    }\r\n\r\n    // Used for testing\r\n    function delegatePercent(uint256 a, uint256 b, uint256 c) public constant returns (uint256) {\r\n        return a.percent(b, c);\r\n    }\r\n}\r\n\r\n/**\r\n * @title ERC20Basic\r\n * @dev Simpler version of ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/179\r\n */\r\ncontract ERC20Basic {\r\n  uint256 public totalSupply;\r\n  function balanceOf(address who) public constant returns (uint256);\r\n  function transfer(address to, uint256 value) public returns (bool);\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n\r\n\r\n/**\r\n * @title ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/20\r\n */\r\ncontract ERC20 is ERC20Basic {\r\n  function allowance(address owner, address spender) public constant returns (uint256);\r\n  function transferFrom(address from, address to, uint256 value) public returns (bool);\r\n  function approve(address spender, uint256 value) public returns (bool);\r\n  event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n    function mul(uint256 a, uint256 b) internal constant returns (uint256) {\r\n        uint256 c = a * b;\r\n        assert(a == 0 || c / a == b);\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal constant returns (uint256) {\r\n        // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal constant returns (uint256) {\r\n        assert(b <= a);\r\n        return a - b;\r\n    }\r\n\r\n    function add(uint256 a, uint256 b) internal constant returns (uint256) {\r\n        uint256 c = a + b;\r\n        assert(c >= a);\r\n        return c;\r\n    }\r\n\r\n    // Using from SO: https://stackoverflow.com/questions/42738640/division-in-ethereum-solidity/42739843#42739843\r\n    // Adapted to use SafeMath and uint256.\r\n    function percent(uint256 numerator, uint256 denominator, uint256 precision) internal constant returns(uint256 quotient) {\r\n        // caution, check safe-to-multiply here\r\n        uint256 _numerator = mul(numerator, 10 ** (precision+1));\r\n        // with rounding of last digit\r\n        uint256 _quotient = (div(_numerator, denominator) + 5) / 10;\r\n        return (_quotient);\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"genesisBlockNumber\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"members\",\"outputs\":[{\"name\":\"exists\",\"type\":\"bool\"},{\"name\":\"admin\",\"type\":\"bool\"},{\"name\":\"shares\",\"type\":\"uint256\"},{\"name\":\"withdrawn\",\"type\":\"uint256\"},{\"name\":\"memberName\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"who\",\"type\":\"address\"},{\"name\":\"newName\",\"type\":\"string\"}],\"name\":\"changeMemberName\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getBalance\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newAllocation\",\"type\":\"uint256\"}],\"name\":\"changeSharedExpenseAllocation\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"initialized\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"amount\",\"type\":\"uint256\"},{\"name\":\"to\",\"type\":\"address\"}],\"name\":\"withdrawSharedExpense\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"who\",\"type\":\"address\"},{\"name\":\"token\",\"type\":\"address\"}],\"name\":\"calculateTotalWithdrawableTokenAmount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"who\",\"type\":\"address\"}],\"name\":\"calculateTotalWithdrawableAmount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalShares\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"calculateTotalExpenseWithdrawableAmount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalWithdrawn\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"who\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"addShare\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"implementation\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"who\",\"type\":\"address\"},{\"name\":\"shares\",\"type\":\"uint256\"},{\"name\":\"admin\",\"type\":\"bool\"},{\"name\":\"memberName\",\"type\":\"string\"}],\"name\":\"addMember\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"sharedExpenseWithdrawn\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getContractInfo\",\"outputs\":[{\"name\":\"name\",\"type\":\"string\"},{\"name\":\"owner\",\"type\":\"address\"},{\"name\":\"genesisBlockNumber\",\"type\":\"uint256\"},{\"name\":\"totalShares\",\"type\":\"uint256\"},{\"name\":\"totalWithdrawn\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"a\",\"type\":\"uint256\"},{\"name\":\"b\",\"type\":\"uint256\"},{\"name\":\"c\",\"type\":\"uint256\"}],\"name\":\"delegatePercent\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"who\",\"type\":\"address\"},{\"name\":\"newValue\",\"type\":\"bool\"}],\"name\":\"changeAdminPrivilege\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"returnMember\",\"outputs\":[{\"name\":\"admin\",\"type\":\"bool\"},{\"name\":\"shares\",\"type\":\"uint256\"},{\"name\":\"withdrawn\",\"type\":\"uint256\"},{\"name\":\"memberName\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"Ownable\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"who\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"allocateShares\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getMemberCount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"token\",\"type\":\"address\"}],\"name\":\"checkERC20Balance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"sharedExpense\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"PRECISION\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newName\",\"type\":\"string\"}],\"name\":\"changeContractName\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"key\",\"type\":\"uint256\"}],\"name\":\"getMemberAtKey\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"amount\",\"type\":\"uint256\"},{\"name\":\"token\",\"type\":\"address\"}],\"name\":\"withdrawToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"who\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"removeShare\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"init\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"tokens\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"memberKeys\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"who\",\"type\":\"address\"},{\"name\":\"shares\",\"type\":\"uint256\"},{\"name\":\"isAdmin\",\"type\":\"bool\"},{\"name\":\"name\",\"type\":\"string\"}],\"name\":\"updateMember\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"newTotalWithdrawn\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TokenWithdraw\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"who\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"addedShares\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"newTotalShares\",\"type\":\"uint256\"}],\"name\":\"AddShare\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"who\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"removedShares\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"newTotalShares\",\"type\":\"uint256\"}],\"name\":\"RemoveShare\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"who\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"oldValue\",\"type\":\"bool\"},{\"indexed\":false,\"name\":\"newValue\",\"type\":\"bool\"}],\"name\":\"ChangePrivilege\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"oldValue\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"newValue\",\"type\":\"string\"}],\"name\":\"ChangeContractName\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"who\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"oldValue\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"newValue\",\"type\":\"string\"}],\"name\":\"ChangeMemberName\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"contractBalance\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"oldValue\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"newValue\",\"type\":\"uint256\"}],\"name\":\"ChangeSharedExpense\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"newSharedExpenseWithdrawn\",\"type\":\"uint256\"}],\"name\":\"WithdrawSharedExpense\",\"type\":\"event\"}]","ContractName":"Doneth","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"bzzr://979d5954ac7be6fcf0f0093ff6dc44d30346615c843c0782a80d2b5a5ced809a"}]}