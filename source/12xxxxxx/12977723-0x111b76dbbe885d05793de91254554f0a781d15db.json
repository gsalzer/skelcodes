{"status":"1","message":"OK","result":[{"SourceCode":"// SPDX-License-Identifier: MIT\r\npragma solidity >=0.8.0 <0.9.0;\r\n\r\ninterface Etheria {\r\n  function getOwner(uint8 col, uint8 row) external view returns(address);\r\n  function setOwner(uint8 col, uint8 row, address newOwner) external;\r\n}\r\n\r\ninterface MapElevationRetriever {\r\n  function getElevation(uint8 col, uint8 row) external view returns (uint8);\r\n}\r\n\r\ncontract EtheriaExchangeXL {\r\n\r\n  address public owner;\r\n  address public pendingOwner;\r\n\r\n  string public name = \"EtheriaExchangeXL\";\r\n\r\n  Etheria public constant etheria = Etheria(address(0xB21f8684f23Dbb1008508B4DE91a0aaEDEbdB7E4));\r\n  MapElevationRetriever public constant mapElevationRetriever = MapElevationRetriever(address(0x68549D7Dbb7A956f955Ec1263F55494f05972A6b));\r\n\r\n  uint128 public minBid = uint128(1 ether); // setting this to 10 finney throws compilation error for some reason\r\n  uint256 public feeRate = uint256(100);  // in basis points (100 is 1%)\r\n  uint256 public collectedFees;\r\n\r\n  struct Bid {\r\n    uint128 amount;\r\n    uint8 minCol;        // shortened all of these for readability\r\n    uint8 maxCol;\r\n    uint8 minRow;\r\n    uint8 maxRow;\r\n    uint8 minEle;\r\n    uint8 maxEle;\r\n    uint8 minWat;\r\n    uint8 maxWat;\r\n    uint64 biddersIndex; // renamed from bidderIndex because it's the Index of the bidders array\r\n  }\r\n\r\n  address[] public bidders;\r\n\r\n  mapping (address => Bid) public bidOf;                                          // renamed these three to be ultra-descriptive\r\n  mapping (address => uint256) public pendingWithdrawalOf;\r\n  mapping (uint16 => uint128) public askFor;\r\n\r\n  event OwnershipTransferInitiated(address indexed owner, address indexed pendingOwner);    // renamed some of these to conform to past tense verbs\r\n  event OwnershipTransferAccepted(address indexed oldOwner, address indexed newOwner);\r\n  event BidCreated(address indexed bidder, uint128 indexed amount, uint8 minCol, uint8 maxCol, uint8 minRow, uint8 maxRow, uint8 minEle, uint8 maxEle, uint8 minWat, uint8 maxWat);\r\n  event BidAccepted(address indexed seller, address indexed bidder, uint16 indexed index, uint128 amount, uint8 minCol, uint8 maxCol, uint8 minRow, uint8 maxRow, uint8 minEle, uint8 maxEle, uint8 minWat, uint8 maxWat);\r\n  event BidCancelled(address indexed bidder, uint128 indexed amount, uint8 minCol, uint8 maxCol, uint8 minRow, uint8 maxRow, uint8 minEle, uint8 maxEle, uint8 minWat, uint8 maxWat);\r\n  event AskCreated(address indexed owner, uint256 indexed price, uint16 indexed index);\r\n  event AskRemoved(address indexed owner, uint256 indexed price, uint16 indexed index);\r\n  event WithdrawalProcessed(address indexed account, address indexed destination, uint256 indexed amount);\r\n  \r\n  constructor() {\r\n    owner = msg.sender;\r\n  }\r\n\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner, \"EEXL: Not owner\");\r\n    _;\r\n  }\r\n\r\n  function transferOwnership(address newOwner) external onlyOwner {\r\n    pendingOwner = newOwner;\r\n    emit OwnershipTransferInitiated(msg.sender, newOwner);\r\n  }\r\n\r\n  function acceptOwnership() external {\r\n    require(msg.sender == pendingOwner, \"EEXL: Not pending owner\");\r\n    emit OwnershipTransferAccepted(owner, msg.sender);\r\n    owner = msg.sender;\r\n    pendingOwner = address(0);\r\n  }\r\n\r\n  function _safeTransferETH(address recipient, uint256 amount) internal {\r\n    // Secure transfer of ETH that is much less likely to be broken by future gas-schedule EIPs\r\n    (bool success, ) = recipient.call{ value: amount }(\"\"); // syntax: (bool success, bytes memory data) = _addr.call{value: msg.value, gas: 5000}(encoded function and data)\r\n    require(success, \"EEXL: ETH transfer failed\");\r\n  }\r\n\r\n  function collectFees() external onlyOwner {\r\n    uint256 amount = collectedFees;\r\n    collectedFees = uint256(0);\r\n    _safeTransferETH(msg.sender, amount);\r\n  }\r\n\r\n  function setFeeRate(uint256 newFeeRate) external onlyOwner {\r\n    // Set the feeRate to newFeeRate, then validate it\r\n    require((feeRate = newFeeRate) <= uint256(500), \"EEXL: Invalid feeRate\"); // feeRate will revert if req fails\r\n  }\r\n\r\n  function setMinBid(uint128 newMinBid) external onlyOwner {\r\n    minBid = newMinBid;                                                     // doubly beneficial because I could effectively kill new bids with a huge minBid \r\n  }                                                                         // in the event of an exchange upgrade or unforseen problem\r\n\r\n  function _getIndex(uint8 col, uint8 row) internal pure returns (uint16) {\r\n    require(_isValidColOrRow(col) && _isValidColOrRow(row), \"EEXL: Invalid col and/or row\");\r\n    return (uint16(col) * uint16(33)) + uint16(row);\r\n  }\r\n  \r\n  function _isValidColOrRow(uint8 value) internal pure returns (bool) {\r\n    return (value >= uint8(0)) && (value <= uint8(32));                    // while nobody should be checking, eg, getAsk when row/col=0/32, we do want to respond non-erroneously\r\n  }\r\n\r\n  function _isValidElevation(uint8 value) internal pure returns (bool) {\r\n    return (value >= uint8(125)) && (value <= uint8(216));\r\n  }\r\n\r\n  function _isWater(uint8 col, uint8 row) internal view returns (bool) {\r\n    return mapElevationRetriever.getElevation(col, row) < uint8(125);   \r\n  }\r\n\r\n  function _boolToUint8(bool value) internal pure returns (uint8) {\r\n    return value ? uint8(1) : uint8(0);\r\n  }\r\n\r\n  function _getSurroundingWaterCount(uint8 col, uint8 row) internal view returns (uint8 waterTiles) {  \r\n    require((col >= uint8(1)) && (col <= uint8(31)), \"EEXL: Water counting requres col 1-31\");\r\n    require((row >= uint8(1)) && (row <= uint8(31)), \"EEXL: Water counting requres col 1-31\");\r\n    if (row % uint8(2) == uint8(1)) {\r\n      waterTiles += _boolToUint8(_isWater(col + uint8(1), row + uint8(1)));  // northeast_hex\r\n      waterTiles += _boolToUint8(_isWater(col + uint8(1), row - uint8(1)));  // southeast_hex\r\n    } else {\r\n      waterTiles += _boolToUint8(_isWater(col - uint8(1), row - uint8(1)));  // southwest_hex\r\n      waterTiles += _boolToUint8(_isWater(col - uint8(1), row + uint8(1)));  // northwest_hex\r\n    }\r\n\r\n    waterTiles += _boolToUint8(_isWater(col, row - uint8(1)));               // southwest_hex or southeast_hex\r\n    waterTiles += _boolToUint8(_isWater(col, row + uint8(1)));               // northwest_hex or northeast_hex\r\n    waterTiles += _boolToUint8(_isWater(col + uint8(1), row));               // east_hex\r\n    waterTiles += _boolToUint8(_isWater(col - uint8(1), row));               // west_hex\r\n  }\r\n\r\n  function getBidders() public view returns (address[] memory) {\r\n    return bidders;\r\n  }\r\n\r\n  function getAsk(uint8 col, uint8 row) public view returns (uint128) {\r\n    return askFor[_getIndex(col, row)];\r\n  }\r\n\r\n  // we provide only the land tileIndices to minimize gas usage // should we have this function at all?\r\n//   function getAsks(uint16[] calldata tileIndices) external view returns (uint128[] memory asks) {\r\n//         uint256 length = tileIndices.length;\r\n//         asks = new uint128[](length);\r\n//         for (uint256 i; i < length; ++i) {\r\n//             asks[i] = askAt(tileIndices[i]);\r\n//         }\r\n//   }\r\n\r\n  function setAsk(uint8 col, uint8 row, uint128 price) external {\r\n    require(price > 0, \"EEXL: removeAsk instead\");\r\n    require(etheria.getOwner(col, row) == msg.sender, \"EEXL: Not tile owner\");\r\n    uint16 thisIndex = _getIndex(col, row);\r\n    emit AskCreated(msg.sender, askFor[thisIndex] = price, thisIndex);\r\n  }\r\n  \r\n  function removeAsk(uint8 col, uint8 row) external {\r\n    require(etheria.getOwner(col, row) == msg.sender, \"EEXL: Not tile owner\");\r\n    uint16 thisIndex = _getIndex(col, row);\r\n    uint128 price = askFor[thisIndex];\r\n    askFor[thisIndex] = 0;\r\n    emit AskRemoved(msg.sender, price, thisIndex); // price before it was zeroed\r\n  }\r\n\r\n  function makeBid(uint8 minCol, uint8 maxCol, uint8 minRow, uint8 maxRow, uint8 minEle, uint8 maxEle, uint8 minWat, uint8 maxWat) external payable {\r\n    require(msg.sender == tx.origin, \"EEXL: not EOA\");  // (EOA = Externally owned account) // Etheria doesn't allow tile ownership by contracts, this check prevents black-holing\r\n    \r\n    require(msg.value <= type(uint128).max, \"EEXL: value too high\");\r\n    require(msg.value >= minBid, \"EEXL: req bid amt >= minBid\");              \r\n    require(msg.value >= 0, \"EEXL: req bid amt >= 0\");\r\n    \r\n    require(bidOf[msg.sender].amount == uint128(0), \"EEXL: bid exists, cancel first\");\r\n\r\n    require(_isValidColOrRow(minCol), \"EEXL: minCol OOB\");\r\n    require(_isValidColOrRow(maxCol), \"EEXL: maxCol OOB\");\r\n    require(minCol <= maxCol, \"EEXL: req minCol <= maxCol\");\r\n\r\n    require(_isValidColOrRow(minRow), \"EEXL: minRow OOB\");\r\n    require(_isValidColOrRow(maxRow), \"EEXL: maxRow OOB\");\r\n    require(minRow <= maxRow, \"EEXL: req minRow <= maxRow\");\r\n\r\n    require(_isValidElevation(minEle), \"EEXL: minEle OOB\");   // these ele checks prevent water bidding, regardless of row/col\r\n    require(_isValidElevation(maxEle), \"EEXL: maxEle OOB\");\r\n    require(minEle <= maxEle, \"EEXL: req minEle <= maxEle\");\r\n\r\n    require(minWat <= uint8(6), \"EEXL: minWat OOB\");\r\n    require(maxWat <= uint8(6), \"EEXL: maxWat OOB\");\r\n    require(minWat <= maxWat, \"EEXL: req minWat <= maxWat\");\r\n\r\n    uint256 biddersArrayLength = bidders.length;                           \r\n    require(biddersArrayLength < type(uint64).max, \"EEXL: too many bids\"); \r\n\r\n    bidOf[msg.sender] = Bid({\r\n      amount: uint128(msg.value),\r\n      minCol: minCol,\r\n      maxCol: maxCol,\r\n      minRow: minRow,\r\n      maxRow: maxRow,\r\n      minEle: minEle,\r\n      maxEle: maxEle,\r\n      minWat: minWat,\r\n      maxWat: maxWat,\r\n      biddersIndex: uint64(biddersArrayLength)\r\n    });\r\n\r\n    bidders.push(msg.sender);\r\n\r\n    emit BidCreated(msg.sender, uint128(msg.value), minCol, maxCol, minRow, maxRow, minEle, maxEle, minWat, maxWat);\r\n  }\r\n\r\n  function _deleteBid(address bidder, uint64 biddersIndex) internal { // used by cancelBid and acceptBid\r\n    address lastBidder = bidders[bidders.length - uint256(1)];\r\n\r\n    // If bidder not last bidder, overwrite with last bidder \r\n    if (bidder != lastBidder) {\r\n      bidders[biddersIndex] = lastBidder;            // Overwrite the bidder at the index with the last bidder\r\n      bidOf[lastBidder].biddersIndex = biddersIndex;  // Update the bidder index of the bid of the previously last bidder\r\n    }\r\n\r\n    delete bidOf[bidder];\r\n    bidders.pop();\r\n  }\r\n\r\n  function cancelBid() external {\r\n    // Cancels the bid, getting the bid's amount, which is then added account's pending withdrawal\r\n    Bid storage bid = bidOf[msg.sender];\r\n    uint128 amount = bid.amount;\r\n\r\n    require(amount != uint128(0), \"EEXL: No existing bid\");\r\n\r\n    emit BidCancelled(msg.sender, amount, bid.minCol, bid.maxCol, bid.minRow, bid.maxRow, bid.minEle, bid.maxEle, bid.minWat, bid.maxWat);\r\n\r\n    _deleteBid(msg.sender, bid.biddersIndex);\r\n    pendingWithdrawalOf[msg.sender] += uint256(amount);\r\n  }\r\n\r\n  function acceptBid(uint8 col, uint8 row, address bidder, uint256 minAmount) external {\r\n    require(etheria.getOwner(col, row) == msg.sender, \"EEXL: Not owner\"); // etheria.setOwner will fail below if not owner, making this check unnecessary, but I want this here anyway\r\n    \r\n    Bid storage bid = bidOf[bidder];\r\n    uint128 amount = bid.amount;\r\n\r\n    require(\r\n      (amount >= minAmount) &&\r\n      (col >= bid.minCol) &&\r\n      (col <= bid.maxCol) &&\r\n      (row >= bid.minRow) &&\r\n      (row <= bid.maxRow) &&\r\n      (mapElevationRetriever.getElevation(col, row) >= bid.minEle) &&\r\n      (mapElevationRetriever.getElevation(col, row) <= bid.maxEle) &&\r\n      (_getSurroundingWaterCount(col, row) >= bid.minWat) &&\r\n      (_getSurroundingWaterCount(col, row) <= bid.maxWat),\r\n      \"EEXL: tile doesn't meet bid reqs\"\r\n    );\r\n\r\n    emit BidAccepted(msg.sender, bidder, _getIndex(col, row), amount, bid.minCol, bid.maxCol, bid.minRow, bid.maxRow, bid.minEle, bid.maxEle, bid.minWat, bid.maxWat);\r\n                                                                                                                                                        \r\n    _deleteBid(bidder, bid.biddersIndex);\r\n\r\n    etheria.setOwner(col, row, bidder);\r\n    require(etheria.getOwner(col, row) == bidder, \"EEXL: failed setting tile owner\"); // ok for require after event emission. Events are technically state changes and atomic as well.\r\n\r\n    uint256 fee = (uint256(amount) * feeRate) / uint256(10_000);\r\n    collectedFees += fee;\r\n\r\n    pendingWithdrawalOf[msg.sender] += (uint256(amount) - fee);\r\n\r\n    delete askFor[_getIndex(col, row)]; // don't emit AskRemoved here. It's not really a removal\r\n  }\r\n\r\n  function _withdraw(address account, address payable destination) internal {\r\n    uint256 amount = pendingWithdrawalOf[account];\r\n    require(amount > uint256(0), \"EEXL: nothing pending\");\r\n\r\n    pendingWithdrawalOf[account] = uint256(0);\r\n    _safeTransferETH(destination, amount);\r\n\r\n    emit WithdrawalProcessed(account, destination, amount);\r\n  }\r\n\r\n  function withdraw(address payable destination) external {\r\n    _withdraw(msg.sender, destination);\r\n  }\r\n\r\n  function withdraw() external {\r\n    _withdraw(msg.sender, payable(msg.sender));\r\n  }\r\n\r\n}","ABI":"[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint16\",\"name\":\"index\",\"type\":\"uint16\"}],\"name\":\"AskCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint16\",\"name\":\"index\",\"type\":\"uint16\"}],\"name\":\"AskRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"bidder\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint16\",\"name\":\"index\",\"type\":\"uint16\"},{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"amount\",\"type\":\"uint128\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"minCol\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"maxCol\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"minRow\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"maxRow\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"minEle\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"maxEle\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"minWat\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"maxWat\",\"type\":\"uint8\"}],\"name\":\"BidAccepted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"bidder\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint128\",\"name\":\"amount\",\"type\":\"uint128\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"minCol\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"maxCol\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"minRow\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"maxRow\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"minEle\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"maxEle\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"minWat\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"maxWat\",\"type\":\"uint8\"}],\"name\":\"BidCancelled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"bidder\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint128\",\"name\":\"amount\",\"type\":\"uint128\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"minCol\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"maxCol\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"minRow\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"maxRow\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"minEle\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"maxEle\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"minWat\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"maxWat\",\"type\":\"uint8\"}],\"name\":\"BidCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferAccepted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"pendingOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferInitiated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"destination\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"WithdrawalProcessed\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"col\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"row\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"bidder\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"minAmount\",\"type\":\"uint256\"}],\"name\":\"acceptBid\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"acceptOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"name\":\"askFor\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"bidOf\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"amount\",\"type\":\"uint128\"},{\"internalType\":\"uint8\",\"name\":\"minCol\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"maxCol\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"minRow\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"maxRow\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"minEle\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"maxEle\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"minWat\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"maxWat\",\"type\":\"uint8\"},{\"internalType\":\"uint64\",\"name\":\"biddersIndex\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"bidders\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cancelBid\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"collectFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"collectedFees\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"etheria\",\"outputs\":[{\"internalType\":\"contract Etheria\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"col\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"row\",\"type\":\"uint8\"}],\"name\":\"getAsk\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBidders\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"minCol\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"maxCol\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"minRow\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"maxRow\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"minEle\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"maxEle\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"minWat\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"maxWat\",\"type\":\"uint8\"}],\"name\":\"makeBid\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mapElevationRetriever\",\"outputs\":[{\"internalType\":\"contract MapElevationRetriever\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minBid\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pendingOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"pendingWithdrawalOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"col\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"row\",\"type\":\"uint8\"}],\"name\":\"removeAsk\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"col\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"row\",\"type\":\"uint8\"},{\"internalType\":\"uint128\",\"name\":\"price\",\"type\":\"uint128\"}],\"name\":\"setAsk\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newFeeRate\",\"type\":\"uint256\"}],\"name\":\"setFeeRate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint128\",\"name\":\"newMinBid\",\"type\":\"uint128\"}],\"name\":\"setMinBid\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"destination\",\"type\":\"address\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"EtheriaExchangeXL","CompilerVersion":"v0.8.6+commit.11564f7e","OptimizationUsed":"1","Runs":"999999","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://c03027760cca19df7d927d694ba74ebef1f3afd5ba086713c2df48fcc9d14e17"}]}