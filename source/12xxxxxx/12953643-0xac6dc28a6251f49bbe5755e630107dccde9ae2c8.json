{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/mainnet/connectors/reflexer/main.sol\": {\r\n      \"content\": \"pragma solidity ^0.7.0;\\n\\n/**\\n * @title Reflexer.\\n * @dev Collateralized Borrowing.\\n */\\n\\nimport { TokenInterface } from \\\"../../common/interfaces.sol\\\";\\nimport { Helpers } from \\\"./helpers.sol\\\";\\nimport { Events } from \\\"./events.sol\\\";\\nimport { SafeEngineLike, TokenJoinInterface } from \\\"./interface.sol\\\";\\n\\nabstract contract GebResolver is Helpers, Events {\\n    /**\\n     * @dev Open Safe\\n     * @notice Open a Reflexer Safe.\\n     * @param colType Type of Collateral.(eg: 'ETH-A')\\n    */\\n    function open(string calldata colType) external payable returns (string memory _eventName, bytes memory _eventParam) {\\n        bytes32 collateralType = stringToBytes32(colType);\\n        require(getCollateralJoinAddress(collateralType) != address(0), \\\"wrong-col-type\\\");\\n        uint256 safe = managerContract.openSAFE(collateralType, address(this));\\n\\n        _eventName = \\\"LogOpen(uint256,bytes32)\\\";\\n        _eventParam = abi.encode(safe, collateralType);\\n    }\\n\\n    /**\\n     * @dev Close Safe\\n     * @notice Close a Reflexer Safe.\\n     * @param safe Safe ID to close.\\n    */\\n    function close(uint256 safe) external payable returns (string memory _eventName, bytes memory _eventParam) {\\n        uint _safe = getSafe(safe);\\n        (bytes32 collateralType, address handler) = getSafeData(_safe);\\n        (uint collateral, uint debt) = SafeEngineLike(managerContract.safeEngine()).safes(collateralType, handler);\\n\\n        require(collateral == 0 && debt == 0, \\\"safe-has-assets\\\");\\n        require(managerContract.ownsSAFE(_safe) == address(this), \\\"not-owner\\\");\\n\\n        managerContract.transferSAFEOwnership(_safe, giveAddr);\\n\\n        _eventName = \\\"LogClose(uint256,bytes32)\\\";\\n        _eventParam = abi.encode(_safe, collateralType);\\n    }\\n\\n    /**\\n     * @dev Deposit ETH/ERC20_Token Collateral.\\n     * @notice Deposit collateral to a Reflexer safe\\n     * @param safe Safe ID.\\n     * @param amt token amount to deposit.\\n     * @param getId Get token amount at this ID from `InstaMemory` Contract.\\n     * @param setId Set token amount at this ID in `InstaMemory` Contract.\\n    */\\n    function deposit(\\n        uint256 safe,\\n        uint256 amt,\\n        uint256 getId,\\n        uint256 setId\\n    ) external payable returns (string memory _eventName, bytes memory _eventParam) {\\n        uint _amt = getUint(getId, amt);\\n        uint _safe = getSafe(safe);\\n        (bytes32 collateralType, address handler) = getSafeData(_safe);\\n\\n        address colAddr = getCollateralJoinAddress(collateralType);\\n        TokenJoinInterface tokenJoinContract = TokenJoinInterface(colAddr);\\n        TokenInterface tokenContract = tokenJoinContract.collateral();\\n\\n        if (isEth(address(tokenContract))) {\\n            _amt = _amt == uint(-1) ? address(this).balance : _amt;\\n            tokenContract.deposit{value: _amt}();\\n        } else {\\n            _amt = _amt == uint(-1) ?  tokenContract.balanceOf(address(this)) : _amt;\\n        }\\n\\n        approve(tokenContract, address(colAddr), _amt);\\n        tokenJoinContract.join(address(this), _amt);\\n\\n        SafeEngineLike(managerContract.safeEngine()).modifySAFECollateralization(\\n            collateralType,\\n            handler,\\n            address(this),\\n            address(this),\\n            toInt(convertTo18(tokenJoinContract.decimals(), _amt)),\\n            0\\n        );\\n\\n        setUint(setId, _amt);\\n\\n        _eventName = \\\"LogDeposit(uint256,bytes32,uint256,uint256,uint256)\\\";\\n        _eventParam = abi.encode(_safe, collateralType, _amt, getId, setId);\\n    }\\n\\n    /**\\n     * @dev Withdraw ETH/ERC20_Token Collateral.\\n     * @notice Withdraw collateral from a Reflexer Safe\\n     * @param safe Safe ID.\\n     * @param amt token amount to withdraw.\\n     * @param getId Get token amount at this ID from `InstaMemory` Contract.\\n     * @param setId Set token amount at this ID in `InstaMemory` Contract.\\n    */\\n    function withdraw(\\n        uint256 safe,\\n        uint256 amt,\\n        uint256 getId,\\n        uint256 setId\\n    ) external payable returns (string memory _eventName, bytes memory _eventParam) {\\n        uint _amt = getUint(getId, amt);\\n        uint _safe = getSafe(safe);\\n        (bytes32 collateralType, address handler) = getSafeData(_safe);\\n\\n        address colAddr = getCollateralJoinAddress(collateralType);\\n        TokenJoinInterface tokenJoinContract = TokenJoinInterface(colAddr);\\n\\n        uint _amt18;\\n        if (_amt == uint(-1)) {\\n            (_amt18,) = SafeEngineLike(managerContract.safeEngine()).safes(collateralType, handler);\\n            _amt = convert18ToDec(tokenJoinContract.decimals(), _amt18);\\n        } else {\\n            _amt18 = convertTo18(tokenJoinContract.decimals(), _amt);\\n        }\\n\\n        managerContract.modifySAFECollateralization(\\n            _safe,\\n            -toInt(_amt18),\\n            0\\n        );\\n\\n        managerContract.transferCollateral(\\n            _safe,\\n            address(this),\\n            _amt18\\n        );\\n\\n        TokenInterface tokenContract = tokenJoinContract.collateral();\\n\\n        if (isEth(address(tokenContract))) {\\n            tokenJoinContract.exit(address(this), _amt);\\n            tokenContract.withdraw(_amt);\\n        } else {\\n            tokenJoinContract.exit(address(this), _amt);\\n        }\\n\\n        setUint(setId, _amt);\\n\\n        _eventName = \\\"LogWithdraw(uint256,bytes32,uint256,uint256,uint256)\\\";\\n        _eventParam = abi.encode(_safe, collateralType, _amt, getId, setId);\\n    }\\n\\n    /**\\n     * @dev Borrow Coin.\\n     * @notice Borrow Coin using a Reflexer safe\\n     * @param safe Safe ID.\\n     * @param amt token amount to borrow.\\n     * @param getId Get token amount at this ID from `InstaMemory` Contract.\\n     * @param setId Set token amount at this ID in `InstaMemory` Contract.\\n    */\\n    function borrow(\\n        uint256 safe,\\n        uint256 amt,\\n        uint256 getId,\\n        uint256 setId\\n    ) external payable returns (string memory _eventName, bytes memory _eventParam) {\\n        uint _amt = getUint(getId, amt);\\n        uint _safe = getSafe(safe);\\n        (bytes32 collateralType, address handler) = getSafeData(_safe);\\n\\n        SafeEngineLike safeEngineContract = SafeEngineLike(managerContract.safeEngine());\\n\\n        managerContract.modifySAFECollateralization(\\n            _safe,\\n            0,\\n            _getBorrowAmt(\\n                address(safeEngineContract),\\n                handler,\\n                collateralType,\\n                _amt\\n            )\\n        );\\n\\n        managerContract.transferInternalCoins(\\n            _safe,\\n            address(this),\\n            toRad(_amt)\\n        );\\n\\n        if (safeEngineContract.safeRights(address(this), address(coinJoinContract)) == 0) {\\n            safeEngineContract.approveSAFEModification(address(coinJoinContract));\\n        }\\n\\n        coinJoinContract.exit(address(this), _amt);\\n\\n        setUint(setId, _amt);\\n\\n        _eventName = \\\"LogBorrow(uint256,bytes32,uint256,uint256,uint256)\\\";\\n        _eventParam = abi.encode(_safe, collateralType, _amt, getId, setId);\\n    }\\n\\n    /**\\n     * @dev Payback borrowed Coin.\\n     * @notice Payback Coin debt owed by a Reflexer safe\\n     * @param safe Safe ID.\\n     * @param amt token amount to payback.\\n     * @param getId Get token amount at this ID from `InstaMemory` Contract.\\n     * @param setId Set token amount at this ID in `InstaMemory` Contract.\\n    */\\n    function payback(\\n        uint256 safe,\\n        uint256 amt,\\n        uint256 getId,\\n        uint256 setId\\n    ) external payable returns (string memory _eventName, bytes memory _eventParam) {\\n        uint _amt = getUint(getId, amt);\\n        uint _safe = getSafe(safe);\\n        (bytes32 collateralType, address handler) = getSafeData(_safe);\\n\\n        address safeEngine = managerContract.safeEngine();\\n\\n        uint _maxDebt = _getSafeDebt(safeEngine, collateralType, handler);\\n\\n        _amt = _amt == uint(-1) ? _maxDebt : _amt;\\n\\n        require(_maxDebt >= _amt, \\\"paying-excess-debt\\\");\\n\\n        approve(coinJoinContract.systemCoin(), address(coinJoinContract), _amt);\\n        coinJoinContract.join(handler, _amt);\\n\\n        managerContract.modifySAFECollateralization(\\n            _safe,\\n            0,\\n            _getWipeAmt(\\n                safeEngine,\\n                SafeEngineLike(safeEngine).coinBalance(handler),\\n                handler,\\n                collateralType\\n            )\\n        );\\n\\n        setUint(setId, _amt);\\n\\n        _eventName = \\\"LogPayback(uint256,bytes32,uint256,uint256,uint256)\\\";\\n        _eventParam = abi.encode(_safe, collateralType, _amt, getId, setId);\\n    }\\n\\n    /**\\n     * @dev Withdraw leftover ETH/ERC20_Token after Liquidation.\\n     * @notice Withdraw leftover collateral after Liquidation.\\n     * @param safe Safe ID.\\n     * @param amt token amount to Withdraw.\\n     * @param getId Get token amount at this ID from `InstaMemory` Contract.\\n     * @param setId Set token amount at this ID in `InstaMemory` Contract.\\n    */\\n    function withdrawLiquidated(\\n        uint256 safe,\\n        uint256 amt,\\n        uint256 getId,\\n        uint256 setId\\n    ) external payable returns (string memory _eventName, bytes memory _eventParam) {\\n        uint _amt = getUint(getId, amt);\\n        (bytes32 collateralType, address handler) = getSafeData(safe);\\n\\n        address colAddr = getCollateralJoinAddress(collateralType);\\n        TokenJoinInterface tokenJoinContract = TokenJoinInterface(colAddr);\\n\\n        uint _amt18;\\n        if (_amt == uint(-1)) {\\n            _amt18 = SafeEngineLike(managerContract.safeEngine()).tokenCollateral(collateralType, handler);\\n            _amt = convert18ToDec(tokenJoinContract.decimals(), _amt18);\\n        } else {\\n            _amt18 = convertTo18(tokenJoinContract.decimals(), _amt);\\n        }\\n\\n        managerContract.transferCollateral(\\n            safe,\\n            address(this),\\n            _amt18\\n        );\\n\\n        TokenInterface tokenContract = tokenJoinContract.collateral();\\n        tokenJoinContract.exit(address(this), _amt);\\n        if (isEth(address(tokenContract))) {\\n            tokenContract.withdraw(_amt);\\n        }\\n\\n        setUint(setId, _amt);\\n\\n        _eventName = \\\"LogWithdrawLiquidated(uint256,bytes32,uint256,uint256,uint256)\\\";\\n        _eventParam = abi.encode(safe, collateralType, _amt, getId, setId);\\n    }\\n\\n    struct GebData {\\n        uint _safe;\\n        address colAddr;\\n        TokenJoinInterface tokenJoinContract;\\n        SafeEngineLike safeEngineContract;\\n        TokenInterface tokenContract;\\n    }\\n\\n    /**\\n     * @dev Deposit ETH/ERC20_Token Collateral and Borrow Coin.\\n     * @notice Deposit collateral and borrow Coin.\\n     * @param safe Safe ID.\\n     * @param depositAmt token deposit amount to Withdraw.\\n     * @param borrowAmt token borrow amount to Withdraw.\\n     * @param getIdDeposit Get deposit token amount at this ID from `InstaMemory` Contract.\\n     * @param getIdBorrow Get borrow token amount at this ID from `InstaMemory` Contract.\\n     * @param setIdDeposit Set deposit token amount at this ID in `InstaMemory` Contract.\\n     * @param setIdBorrow Set borrow token amount at this ID in `InstaMemory` Contract.\\n    */\\n    function depositAndBorrow(\\n        uint256 safe,\\n        uint256 depositAmt,\\n        uint256 borrowAmt,\\n        uint256 getIdDeposit,\\n        uint256 getIdBorrow,\\n        uint256 setIdDeposit,\\n        uint256 setIdBorrow\\n    ) external payable returns (string memory _eventName, bytes memory _eventParam) {\\n        GebData memory gebData;\\n        uint _amtDeposit = getUint(getIdDeposit, depositAmt);\\n        uint _amtBorrow = getUint(getIdBorrow, borrowAmt);\\n\\n        gebData._safe = getSafe(safe);\\n        (bytes32 collateralType, address handler) = getSafeData(gebData._safe);\\n\\n        gebData.colAddr = getCollateralJoinAddress(collateralType);\\n        gebData.tokenJoinContract = TokenJoinInterface(gebData.colAddr);\\n        gebData.safeEngineContract = SafeEngineLike(managerContract.safeEngine());\\n        gebData.tokenContract = gebData.tokenJoinContract.collateral();\\n\\n        if (isEth(address(gebData.tokenContract))) {\\n            _amtDeposit = _amtDeposit == uint(-1) ? address(this).balance : _amtDeposit;\\n            gebData.tokenContract.deposit{value: _amtDeposit}();\\n        } else {\\n            _amtDeposit = _amtDeposit == uint(-1) ?  gebData.tokenContract.balanceOf(address(this)) : _amtDeposit;\\n        }\\n\\n        approve(gebData.tokenContract, address(gebData.colAddr), _amtDeposit);\\n        gebData.tokenJoinContract.join(handler, _amtDeposit);\\n\\n        managerContract.modifySAFECollateralization(\\n            gebData._safe,\\n            toInt(convertTo18(gebData.tokenJoinContract.decimals(), _amtDeposit)),\\n            _getBorrowAmt(\\n                address(gebData.safeEngineContract),\\n                handler,\\n                collateralType,\\n                _amtBorrow\\n            )\\n        );\\n\\n        managerContract.transferInternalCoins(\\n            gebData._safe,\\n            address(this),\\n            toRad(_amtBorrow)\\n        );\\n\\n        if (gebData.safeEngineContract.safeRights(address(this), address(coinJoinContract)) == 0) {\\n            gebData.safeEngineContract.approveSAFEModification(address(coinJoinContract));\\n        }\\n\\n        coinJoinContract.exit(address(this), _amtBorrow);\\n\\n        setUint(setIdDeposit, _amtDeposit);\\n        setUint(setIdBorrow, _amtBorrow);\\n\\n        _eventName = \\\"LogDepositAndBorrow(uint256,bytes32,uint256,uint256,uint256,uint256,uint256,uint256)\\\";\\n        _eventParam = abi.encode(\\n            gebData._safe,\\n            collateralType,\\n            _amtDeposit,\\n            _amtBorrow,\\n            getIdDeposit,\\n            getIdBorrow,\\n            setIdDeposit,\\n            setIdBorrow\\n        );\\n    }\\n\\n    /**\\n     * @dev Exit Coin from handler.\\n     * @notice Exit Coin from handler.\\n     * @param safe Safe ID.\\n     * @param amt token amount to exit.\\n     * @param getId Get token amount at this ID from `InstaMemory` Contract.\\n     * @param setId Set token amount at this ID in `InstaMemory` Contract.\\n    */\\n    function exit(\\n        uint256 safe,\\n        uint256 amt,\\n        uint256 getId,\\n        uint256 setId\\n    ) external payable returns (string memory _eventName, bytes memory _eventParam) {\\n        uint _amt = getUint(getId, amt);\\n        uint _safe = getSafe(safe);\\n        (bytes32 collateralType, address handler) = getSafeData(_safe);\\n\\n        SafeEngineLike safeEngineContract = SafeEngineLike(managerContract.safeEngine());\\n        if(_amt == uint(-1)) {\\n            _amt = safeEngineContract.coinBalance(handler);\\n            _amt = _amt / 10 ** 27;\\n        }\\n\\n        managerContract.transferInternalCoins(\\n            _safe,\\n            address(this),\\n            toRad(_amt)\\n        );\\n\\n        if (safeEngineContract.safeRights(address(this), address(coinJoinContract)) == 0) {\\n            safeEngineContract.approveSAFEModification(address(coinJoinContract));\\n        }\\n\\n        coinJoinContract.exit(address(this), _amt);\\n\\n        setUint(setId, _amt);\\n\\n        _eventName = \\\"LogExit(uint256,bytes32,uint256,uint256,uint256)\\\";\\n        _eventParam = abi.encode(_safe, collateralType, _amt, getId, setId);\\n    }\\n\\n}\\n\\ncontract ConnectV2Reflexer is GebResolver {\\n    string public constant name = \\\"Reflexer-v1\\\";\\n}\\n\"\r\n    },\r\n    \"contracts/mainnet/common/interfaces.sol\": {\r\n      \"content\": \"pragma solidity ^0.7.0;\\n\\ninterface TokenInterface {\\n    function approve(address, uint256) external;\\n    function transfer(address, uint) external;\\n    function transferFrom(address, address, uint) external;\\n    function deposit() external payable;\\n    function withdraw(uint) external;\\n    function balanceOf(address) external view returns (uint);\\n    function decimals() external view returns (uint);\\n}\\n\\ninterface MemoryInterface {\\n    function getUint(uint id) external returns (uint num);\\n    function setUint(uint id, uint val) external;\\n}\\n\\ninterface InstaMapping {\\n    function cTokenMapping(address) external view returns (address);\\n    function gemJoinMapping(bytes32) external view returns (address);\\n}\\n\\ninterface AccountInterface {\\n    function enable(address) external;\\n    function disable(address) external;\\n    function isAuth(address) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"contracts/mainnet/connectors/reflexer/helpers.sol\": {\r\n      \"content\": \"pragma solidity ^0.7.0;\\n\\nimport { DSMath } from \\\"../../common/math.sol\\\";\\nimport { Basic } from \\\"../../common/basic.sol\\\";\\nimport { TokenInterface } from \\\"../../common/interfaces.sol\\\";\\nimport { \\n    ManagerLike, \\n    CoinJoinInterface, \\n    SafeEngineLike, \\n    TaxCollectorLike, \\n    TokenJoinInterface,\\n    GebMapping \\n} from \\\"./interface.sol\\\";\\n\\nabstract contract Helpers is DSMath, Basic {\\n    /**\\n     * @dev Manager Interface\\n     */\\n    ManagerLike internal constant managerContract = ManagerLike(0xEfe0B4cA532769a3AE758fD82E1426a03A94F185);\\n\\n    /**\\n     * @dev Coin Join\\n     */\\n    CoinJoinInterface internal constant coinJoinContract = CoinJoinInterface(0x0A5653CCa4DB1B6E265F47CAf6969e64f1CFdC45);\\n\\n    /**\\n     * @dev Reflexer Tax collector Address.\\n    */\\n    TaxCollectorLike internal constant taxCollectorContract = TaxCollectorLike(0xcDB05aEda142a1B0D6044C09C64e4226c1a281EB);\\n\\n    /**\\n     * @dev Return Close Safe Address.\\n    */\\n    address internal constant giveAddr = 0x4dD58550eb15190a5B3DfAE28BB14EeC181fC267;\\n\\n     /**\\n     * @dev Return Reflexer mapping Address.\\n     */\\n    function getGebMappingAddress() internal pure returns (address) {\\n        return 0x573e5132693C046D1A9F75Bac683889164bA41b4;\\n    }\\n\\n    function getCollateralJoinAddress(bytes32 collateralType) internal view returns (address) {\\n        return GebMapping(getGebMappingAddress()).collateralJoinMapping(collateralType);\\n    }\\n\\n    /**\\n     * @dev Get Safe's collateral type.\\n    */\\n    function getSafeData(uint safe) internal view returns (bytes32 collateralType, address handler) {\\n        collateralType = managerContract.collateralTypes(safe);\\n        handler = managerContract.safes(safe);\\n    }\\n\\n    /**\\n     * @dev Collateral Join address is ETH type collateral.\\n    */\\n    function isEth(address tknAddr) internal pure returns (bool) {\\n        return tknAddr == wethAddr ? true : false;\\n    }\\n\\n    /**\\n     * @dev Get Safe Debt Amount.\\n    */\\n    function _getSafeDebt(\\n        address safeEngine,\\n        bytes32 collateralType,\\n        address handler\\n    ) internal view returns (uint wad) {\\n        (, uint rate,,,) = SafeEngineLike(safeEngine).collateralTypes(collateralType);\\n        (, uint debt) = SafeEngineLike(safeEngine).safes(collateralType, handler);\\n        uint coin = SafeEngineLike(safeEngine).coinBalance(handler);\\n\\n        uint rad = sub(mul(debt, rate), coin);\\n        wad = rad / RAY;\\n\\n        wad = mul(wad, RAY) < rad ? wad + 1 : wad;\\n    }\\n\\n    /**\\n     * @dev Get Borrow Amount.\\n    */\\n    function _getBorrowAmt(\\n        address safeEngine,\\n        address handler,\\n        bytes32 collateralType,\\n        uint amt\\n    ) internal returns (int deltaDebt)\\n    {\\n        uint rate = taxCollectorContract.taxSingle(collateralType);\\n        uint coin = SafeEngineLike(safeEngine).coinBalance(handler);\\n        if (coin < mul(amt, RAY)) {\\n            deltaDebt = toInt(sub(mul(amt, RAY), coin) / rate);\\n            deltaDebt = mul(uint(deltaDebt), rate) < mul(amt, RAY) ? deltaDebt + 1 : deltaDebt;\\n        }\\n    }\\n\\n    /**\\n     * @dev Get Payback Amount.\\n    */\\n    function _getWipeAmt(\\n        address safeEngine,\\n        uint amt,\\n        address handler,\\n        bytes32 collateralType\\n    ) internal view returns (int deltaDebt)\\n    {\\n        (, uint rate,,,) = SafeEngineLike(safeEngine).collateralTypes(collateralType);\\n        (, uint debt) = SafeEngineLike(safeEngine).safes(collateralType, handler);\\n        deltaDebt = toInt(amt / rate);\\n        deltaDebt = uint(deltaDebt) <= debt ? - deltaDebt : - toInt(debt);\\n    }\\n\\n    /**\\n     * @dev Convert String to bytes32.\\n    */\\n    function stringToBytes32(string memory str) internal pure returns (bytes32 result) {\\n        require(bytes(str).length != 0, \\\"string-empty\\\");\\n        // solium-disable-next-line security/no-inline-assembly\\n        assembly {\\n            result := mload(add(str, 32))\\n        }\\n    }\\n\\n    /**\\n     * @dev Get safe ID. If `safe` is 0, get lastSAFEID opened safe.\\n    */\\n    function getSafe(uint safe) internal view returns (uint _safe) {\\n        if (safe == 0) {\\n            require(managerContract.safeCount(address(this)) > 0, \\\"no-safe-opened\\\");\\n            _safe = managerContract.lastSAFEID(address(this));\\n        } else {\\n            _safe = safe;\\n        }\\n    }\\n\\n}\"\r\n    },\r\n    \"contracts/mainnet/connectors/reflexer/events.sol\": {\r\n      \"content\": \"pragma solidity ^0.7.0;\\n\\ncontract Events {\\n    event LogOpen(uint256 indexed safe, bytes32 indexed collateralType);\\n    event LogClose(uint256 indexed safe, bytes32 indexed collateralType);\\n    event LogTransfer(uint256 indexed safe, bytes32 indexed collateralType, address newOwner);\\n    event LogDeposit(uint256 indexed safe, bytes32 indexed collateralType, uint256 tokenAmt, uint256 getId, uint256 setId);\\n    event LogWithdraw(uint256 indexed safe, bytes32 indexed collateralType, uint256 tokenAmt, uint256 getId, uint256 setId);\\n    event LogBorrow(uint256 indexed safe, bytes32 indexed collateralType, uint256 tokenAmt, uint256 getId, uint256 setId);\\n    event LogPayback(uint256 indexed safe, bytes32 indexed collateralType, uint256 tokenAmt, uint256 getId, uint256 setId);\\n    event LogWithdrawLiquidated(uint256 indexed safe, bytes32 indexed collateralType, uint256 tokenAmt, uint256 getId, uint256 setId);\\n    event LogExit(uint256 indexed safe, bytes32 indexed collateralType, uint256 tokenAmt, uint256 getId, uint256 setId);\\n    event LogDepositAndBorrow(\\n        uint256 indexed safe,\\n        bytes32 indexed collateralType,\\n        uint256 depositAmt,\\n        uint256 borrowAmt,\\n        uint256 getIdDeposit,\\n        uint256 getIdBorrow,\\n        uint256 setIdDeposit,\\n        uint256 setIdBorrow\\n    );\\n}\\n\"\r\n    },\r\n    \"contracts/mainnet/connectors/reflexer/interface.sol\": {\r\n      \"content\": \"pragma solidity ^0.7.0;\\n\\nimport { TokenInterface } from \\\"../../common/interfaces.sol\\\";\\n\\ninterface ManagerLike {\\n    function safeCan(address, uint, address) external view returns (uint);\\n    function collateralTypes(uint) external view returns (bytes32);\\n    function lastSAFEID(address) external view returns (uint);\\n    function safeCount(address) external view returns (uint);\\n    function ownsSAFE(uint) external view returns (address);\\n    function safes(uint) external view returns (address);\\n    function safeEngine() external view returns (address);\\n    function openSAFE(bytes32, address) external returns (uint);\\n    function transferSAFEOwnership(uint, address) external;\\n    function modifySAFECollateralization(uint, int, int) external;\\n    function transferCollateral(uint, address, uint) external;\\n    function transferInternalCoins(uint, address, uint) external;\\n}\\n\\ninterface SafeEngineLike {\\n    function safeRights(address, address) external view returns (uint);\\n    function collateralTypes(bytes32) external view returns (uint, uint, uint, uint, uint);\\n    function coinBalance(address) external view returns (uint);\\n    function safes(bytes32, address) external view returns (uint, uint);\\n    function modifySAFECollateralization(\\n        bytes32,\\n        address,\\n        address,\\n        address,\\n        int,\\n        int\\n    ) external;\\n    function approveSAFEModification(address) external;\\n    function transferInternalCoins(address, address, uint) external;\\n    function tokenCollateral(bytes32, address) external view returns (uint);\\n}\\n\\ninterface TokenJoinInterface {\\n    function decimals() external returns (uint);\\n    function collateral() external returns (TokenInterface);\\n    function collateralType() external returns (bytes32);\\n    function join(address, uint) external payable;\\n    function exit(address, uint) external;\\n}\\n\\ninterface CoinJoinInterface {\\n    function safeEngine() external returns (SafeEngineLike);\\n    function systemCoin() external returns (TokenInterface);\\n    function join(address, uint) external payable;\\n    function exit(address, uint) external;\\n}\\n\\ninterface TaxCollectorLike {\\n    function taxSingle(bytes32) external returns (uint);\\n}\\n\\ninterface ConnectorsInterface {\\n    function chief(address) external view returns (bool);\\n}\\n\\ninterface IndexInterface {\\n    function master() external view returns (address);\\n}\\n\\ninterface GebMapping {\\n    function collateralJoinMapping(bytes32) external view returns(address);\\n}\"\r\n    },\r\n    \"contracts/mainnet/common/math.sol\": {\r\n      \"content\": \"pragma solidity ^0.7.0;\\n\\nimport { SafeMath } from \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\n\\ncontract DSMath {\\n  uint constant WAD = 10 ** 18;\\n  uint constant RAY = 10 ** 27;\\n\\n  function add(uint x, uint y) internal pure returns (uint z) {\\n    z = SafeMath.add(x, y);\\n  }\\n\\n  function sub(uint x, uint y) internal virtual pure returns (uint z) {\\n    z = SafeMath.sub(x, y);\\n  }\\n\\n  function mul(uint x, uint y) internal pure returns (uint z) {\\n    z = SafeMath.mul(x, y);\\n  }\\n\\n  function div(uint x, uint y) internal pure returns (uint z) {\\n    z = SafeMath.div(x, y);\\n  }\\n\\n  function wmul(uint x, uint y) internal pure returns (uint z) {\\n    z = SafeMath.add(SafeMath.mul(x, y), WAD / 2) / WAD;\\n  }\\n\\n  function wdiv(uint x, uint y) internal pure returns (uint z) {\\n    z = SafeMath.add(SafeMath.mul(x, WAD), y / 2) / y;\\n  }\\n\\n  function rdiv(uint x, uint y) internal pure returns (uint z) {\\n    z = SafeMath.add(SafeMath.mul(x, RAY), y / 2) / y;\\n  }\\n\\n  function rmul(uint x, uint y) internal pure returns (uint z) {\\n    z = SafeMath.add(SafeMath.mul(x, y), RAY / 2) / RAY;\\n  }\\n\\n  function toInt(uint x) internal pure returns (int y) {\\n    y = int(x);\\n    require(y >= 0, \\\"int-overflow\\\");\\n  }\\n\\n  function toRad(uint wad) internal pure returns (uint rad) {\\n    rad = mul(wad, 10 ** 27);\\n  }\\n\\n}\\n\"\r\n    },\r\n    \"contracts/mainnet/common/basic.sol\": {\r\n      \"content\": \"pragma solidity ^0.7.0;\\n\\nimport { TokenInterface } from \\\"./interfaces.sol\\\";\\nimport { Stores } from \\\"./stores.sol\\\";\\nimport { DSMath } from \\\"./math.sol\\\";\\n\\nabstract contract Basic is DSMath, Stores {\\n\\n    function convert18ToDec(uint _dec, uint256 _amt) internal pure returns (uint256 amt) {\\n        amt = (_amt / 10 ** (18 - _dec));\\n    }\\n\\n    function convertTo18(uint _dec, uint256 _amt) internal pure returns (uint256 amt) {\\n        amt = mul(_amt, 10 ** (18 - _dec));\\n    }\\n\\n    function getTokenBal(TokenInterface token) internal view returns(uint _amt) {\\n        _amt = address(token) == ethAddr ? address(this).balance : token.balanceOf(address(this));\\n    }\\n\\n    function getTokensDec(TokenInterface buyAddr, TokenInterface sellAddr) internal view returns(uint buyDec, uint sellDec) {\\n        buyDec = address(buyAddr) == ethAddr ?  18 : buyAddr.decimals();\\n        sellDec = address(sellAddr) == ethAddr ?  18 : sellAddr.decimals();\\n    }\\n\\n    function encodeEvent(string memory eventName, bytes memory eventParam) internal pure returns (bytes memory) {\\n        return abi.encode(eventName, eventParam);\\n    }\\n\\n    function approve(TokenInterface token, address spender, uint256 amount) internal {\\n        try token.approve(spender, amount) {\\n\\n        } catch {\\n            token.approve(spender, 0);\\n            token.approve(spender, amount);\\n        }\\n    }\\n\\n    function changeEthAddress(address buy, address sell) internal pure returns(TokenInterface _buy, TokenInterface _sell){\\n        _buy = buy == ethAddr ? TokenInterface(wethAddr) : TokenInterface(buy);\\n        _sell = sell == ethAddr ? TokenInterface(wethAddr) : TokenInterface(sell);\\n    }\\n\\n    function convertEthToWeth(bool isEth, TokenInterface token, uint amount) internal {\\n        if(isEth) token.deposit{value: amount}();\\n    }\\n\\n    function convertWethToEth(bool isEth, TokenInterface token, uint amount) internal {\\n       if(isEth) {\\n            approve(token, address(token), amount);\\n            token.withdraw(amount);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/math/SafeMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        uint256 c = a + b;\\n        if (c < a) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b > a) return (false, 0);\\n        return (true, a - b);\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) return (true, 0);\\n        uint256 c = a * b;\\n        if (c / a != b) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a / b);\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a % b);\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b <= a, \\\"SafeMath: subtraction overflow\\\");\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0) return 0;\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: division by zero\\\");\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: modulo by zero\\\");\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/mainnet/common/stores.sol\": {\r\n      \"content\": \"pragma solidity ^0.7.0;\\n\\nimport { MemoryInterface, InstaMapping } from \\\"./interfaces.sol\\\";\\n\\n\\nabstract contract Stores {\\n\\n  /**\\n   * @dev Return ethereum address\\n   */\\n  address constant internal ethAddr = 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE;\\n\\n  /**\\n   * @dev Return Wrapped ETH address\\n   */\\n  address constant internal wethAddr = 0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2;\\n\\n  /**\\n   * @dev Return memory variable address\\n   */\\n  MemoryInterface constant internal instaMemory = MemoryInterface(0x8a5419CfC711B2343c17a6ABf4B2bAFaBb06957F);\\n\\n  /**\\n   * @dev Return InstaDApp Mapping Addresses\\n   */\\n  InstaMapping constant internal instaMapping = InstaMapping(0xe81F70Cc7C0D46e12d70efc60607F16bbD617E88);\\n\\n  /**\\n   * @dev Get Uint value from InstaMemory Contract.\\n   */\\n  function getUint(uint getId, uint val) internal returns (uint returnVal) {\\n    returnVal = getId == 0 ? val : instaMemory.getUint(getId);\\n  }\\n\\n  /**\\n  * @dev Set Uint value in InstaMemory Contract.\\n  */\\n  function setUint(uint setId, uint val) virtual internal {\\n    if (setId != 0) instaMemory.setUint(setId, val);\\n  }\\n\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": false,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"metadata\": {\r\n      \"useLiteralContent\": true\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}","ABI":"[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"safe\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"collateralType\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenAmt\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"getId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"setId\",\"type\":\"uint256\"}],\"name\":\"LogBorrow\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"safe\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"collateralType\",\"type\":\"bytes32\"}],\"name\":\"LogClose\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"safe\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"collateralType\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenAmt\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"getId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"setId\",\"type\":\"uint256\"}],\"name\":\"LogDeposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"safe\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"collateralType\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"depositAmt\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"borrowAmt\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"getIdDeposit\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"getIdBorrow\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"setIdDeposit\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"setIdBorrow\",\"type\":\"uint256\"}],\"name\":\"LogDepositAndBorrow\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"safe\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"collateralType\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenAmt\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"getId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"setId\",\"type\":\"uint256\"}],\"name\":\"LogExit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"safe\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"collateralType\",\"type\":\"bytes32\"}],\"name\":\"LogOpen\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"safe\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"collateralType\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenAmt\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"getId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"setId\",\"type\":\"uint256\"}],\"name\":\"LogPayback\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"safe\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"collateralType\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"LogTransfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"safe\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"collateralType\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenAmt\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"getId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"setId\",\"type\":\"uint256\"}],\"name\":\"LogWithdraw\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"safe\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"collateralType\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenAmt\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"getId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"setId\",\"type\":\"uint256\"}],\"name\":\"LogWithdrawLiquidated\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"safe\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"getId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"setId\",\"type\":\"uint256\"}],\"name\":\"borrow\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"_eventName\",\"type\":\"string\"},{\"internalType\":\"bytes\",\"name\":\"_eventParam\",\"type\":\"bytes\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"safe\",\"type\":\"uint256\"}],\"name\":\"close\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"_eventName\",\"type\":\"string\"},{\"internalType\":\"bytes\",\"name\":\"_eventParam\",\"type\":\"bytes\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"safe\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"getId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"setId\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"_eventName\",\"type\":\"string\"},{\"internalType\":\"bytes\",\"name\":\"_eventParam\",\"type\":\"bytes\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"safe\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"depositAmt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"borrowAmt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"getIdDeposit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"getIdBorrow\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"setIdDeposit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"setIdBorrow\",\"type\":\"uint256\"}],\"name\":\"depositAndBorrow\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"_eventName\",\"type\":\"string\"},{\"internalType\":\"bytes\",\"name\":\"_eventParam\",\"type\":\"bytes\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"safe\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"getId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"setId\",\"type\":\"uint256\"}],\"name\":\"exit\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"_eventName\",\"type\":\"string\"},{\"internalType\":\"bytes\",\"name\":\"_eventParam\",\"type\":\"bytes\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"colType\",\"type\":\"string\"}],\"name\":\"open\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"_eventName\",\"type\":\"string\"},{\"internalType\":\"bytes\",\"name\":\"_eventParam\",\"type\":\"bytes\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"safe\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"getId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"setId\",\"type\":\"uint256\"}],\"name\":\"payback\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"_eventName\",\"type\":\"string\"},{\"internalType\":\"bytes\",\"name\":\"_eventParam\",\"type\":\"bytes\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"safe\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"getId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"setId\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"_eventName\",\"type\":\"string\"},{\"internalType\":\"bytes\",\"name\":\"_eventParam\",\"type\":\"bytes\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"safe\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"getId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"setId\",\"type\":\"uint256\"}],\"name\":\"withdrawLiquidated\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"_eventName\",\"type\":\"string\"},{\"internalType\":\"bytes\",\"name\":\"_eventParam\",\"type\":\"bytes\"}],\"stateMutability\":\"payable\",\"type\":\"function\"}]","ContractName":"ConnectV2Reflexer","CompilerVersion":"v0.7.6+commit.7338295f","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}