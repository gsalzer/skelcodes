{"status":"1","message":"OK","result":[{"SourceCode":"{\"BurnableToken.sol\":{\"content\":\"pragma solidity ^0.5.17;\\r\\n\\r\\nimport \\\"./ERC20.sol\\\";\\r\\nimport \\\"./Ownable.sol\\\";\\r\\n\\r\\n/**\\r\\n * @dev Extension of {ERC20} that allows token holders to destroy both their own\\r\\n * tokens and those that they have an allowance for, in a way that can be\\r\\n * recognized off-chain (via event analysis).\\r\\n */\\r\\ncontract BurnableToken is ERC20, Ownable {\\r\\n    bool private _paused = false;\\r\\n\\r\\n    /**\\r\\n     * @dev Destroys `amount` tokens from the caller.\\r\\n     *\\r\\n     * See {ERC20-_burn}.\\r\\n     */\\r\\n    function burn(uint256 amount) public onlyOwner whenNotPaused {\\r\\n        _burn(msg.sender, amount);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns true if the contract is paused, and false otherwise.\\r\\n     */\\r\\n    function paused() public view returns (bool) {\\r\\n        return _paused;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\r\\n     */\\r\\n    modifier whenNotPaused() {\\r\\n        require(!_paused, \\\"Pausable: paused\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Modifier to make a function callable only when the contract is paused.\\r\\n     */\\r\\n    modifier whenPaused() {\\r\\n        require(_paused, \\\"Pausable: not paused\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Called by a pauser to pause, triggers stopped state.\\r\\n     */\\r\\n    function pause() public onlyOwner whenNotPaused {\\r\\n        _paused = true;\\r\\n        emit Paused(msg.sender);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Called by a pauser to unpause, returns to normal state.\\r\\n     */\\r\\n    function unpause() public onlyOwner whenPaused {\\r\\n        _paused = false;\\r\\n        emit Unpaused(msg.sender);\\r\\n    }\\r\\n    /**\\r\\n     * @dev Called when trasfering tokens.\\r\\n     */\\r\\n    function transfer(address to, uint256 value) public whenNotPaused returns (bool) {\\r\\n        return super.transfer(to, value);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Trasfers tokens from one adress to another\\r\\n     */\\r\\n    function transferFrom(address from, address to, uint256 value) public whenNotPaused returns (bool) {\\r\\n        return super.transferFrom(from, to, value);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Called by a pauser to unpause, returns to normal state.\\r\\n     */\\r\\n    function approve(address spender, uint256 value) public whenNotPaused returns (bool) {\\r\\n        return super.approve(spender, value);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Increaces allowance of a spender.\\r\\n     */\\r\\n    function increaseAllowance(address spender, uint256 addedValue) public whenNotPaused returns (bool) {\\r\\n        return super.increaseAllowance(spender, addedValue);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Decreases allowance of a spender.\\r\\n     */\\r\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public whenNotPaused returns (bool) {\\r\\n        return super.decreaseAllowance(spender, subtractedValue);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Emitted when the pause is triggered by a pauser (`account`).\\r\\n     */\\r\\n    event Paused(address account);\\r\\n\\r\\n    /**\\r\\n     * @dev Emitted when the pause is lifted by a pauser (`account`).\\r\\n     */\\r\\n    event Unpaused(address account);\\r\\n\\r\\n}\"},\"ERC20.sol\":{\"content\":\"pragma solidity ^0.5.17;\\r\\n\\r\\nimport \\\"./IERC20.sol\\\";\\r\\nimport \\\"./SafeMath.sol\\\";\\r\\n\\r\\n/**\\r\\n * @dev Implementation of the {IERC20} interface.\\r\\n *\\r\\n * This implementation is agnostic to the way tokens are created. This means\\r\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\r\\n * For a generic mechanism see {ERC20Mintable}.\\r\\n *\\r\\n * TIP: For a detailed writeup see our guide\\r\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\r\\n * to implement supply mechanisms].\\r\\n *\\r\\n * We have followed general OpenZeppelin guidelines: functions revert instead\\r\\n * of returning `false` on failure. This behavior is nonetheless conventional\\r\\n * and does not conflict with the expectations of ERC20 applications.\\r\\n *\\r\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\r\\n * This allows applications to reconstruct the allowance for all accounts just\\r\\n * by listening to said events. Other implementations of the EIP may not emit\\r\\n * these events, as it isn\\u0027t required by the specification.\\r\\n *\\r\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\r\\n * functions have been added to mitigate the well-known issues around setting\\r\\n * allowances. See {IERC20-approve}.\\r\\n */\\r\\ncontract ERC20 is IERC20 {\\r\\n    using SafeMath for uint256;\\r\\n\\r\\n    mapping (address =\\u003e uint256) internal _balances;\\r\\n\\r\\n    mapping (address =\\u003e mapping (address =\\u003e uint256)) internal _allowances;\\r\\n\\r\\n    uint256 internal _totalSupply;\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC20-totalSupply}.\\r\\n     */\\r\\n    function totalSupply() public view returns (uint256) {\\r\\n        return _totalSupply;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC20-balanceOf}.\\r\\n     */\\r\\n    function balanceOf(address account) public view returns (uint256) {\\r\\n        return _balances[account];\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC20-transfer}.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `recipient` cannot be the zero address.\\r\\n     * - the caller must have a balance of at least `amount`.\\r\\n     */\\r\\n    function transfer(address recipient, uint256 amount) public returns (bool) {\\r\\n        _transfer(msg.sender, recipient, amount);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC20-allowance}.\\r\\n     */\\r\\n    function allowance(address owner, address spender) public view returns (uint256) {\\r\\n        return _allowances[owner][spender];\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC20-approve}.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `spender` cannot be the zero address.\\r\\n     */\\r\\n    function approve(address spender, uint256 amount) public returns (bool) {\\r\\n        _approve(msg.sender, spender, amount);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC20-transferFrom}.\\r\\n     *\\r\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\r\\n     * required by the EIP. See the note at the beginning of {ERC20};\\r\\n     *\\r\\n     * Requirements:\\r\\n     * - `sender` and `recipient` cannot be the zero address.\\r\\n     * - `sender` must have a balance of at least `amount`.\\r\\n     * - the caller must have allowance for `sender`\\u0027s tokens of at least\\r\\n     * `amount`.\\r\\n     */\\r\\n    function transferFrom(address sender, address recipient, uint256 amount) public returns (bool) {\\r\\n        _transfer(sender, recipient, amount);\\r\\n        _approve(sender, msg.sender, _allowances[sender][msg.sender].sub(amount, \\\"ERC20: transfer amount exceeds allowance\\\"));\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\r\\n     *\\r\\n     * This is an alternative to {approve} that can be used as a mitigation for\\r\\n     * problems described in {IERC20-approve}.\\r\\n     *\\r\\n     * Emits an {Approval} event indicating the updated allowance.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `spender` cannot be the zero address.\\r\\n     */\\r\\n    function increaseAllowance(address spender, uint256 addedValue) public returns (bool) {\\r\\n        _approve(msg.sender, spender, _allowances[msg.sender][spender].add(addedValue));\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\r\\n     *\\r\\n     * This is an alternative to {approve} that can be used as a mitigation for\\r\\n     * problems described in {IERC20-approve}.\\r\\n     *\\r\\n     * Emits an {Approval} event indicating the updated allowance.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `spender` cannot be the zero address.\\r\\n     * - `spender` must have allowance for the caller of at least\\r\\n     * `subtractedValue`.\\r\\n     */\\r\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public returns (bool) {\\r\\n        _approve(msg.sender, spender, _allowances[msg.sender][spender].sub(subtractedValue, \\\"ERC20: decreased allowance below zero\\\"));\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\\r\\n     *\\r\\n     * This is internal function is equivalent to {transfer}, and can be used to\\r\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\r\\n     *\\r\\n     * Emits a {Transfer} event.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `sender` cannot be the zero address.\\r\\n     * - `recipient` cannot be the zero address.\\r\\n     * - `sender` must have a balance of at least `amount`.\\r\\n     */\\r\\n    function _transfer(address sender, address recipient, uint256 amount) internal {\\r\\n        require(sender != address(0), \\\"ERC20: transfer from the zero address\\\");\\r\\n        require(recipient != address(0), \\\"ERC20: transfer to the zero address\\\");\\r\\n\\r\\n        _balances[sender] = _balances[sender].sub(amount, \\\"ERC20: transfer amount exceeds balance\\\");\\r\\n        _balances[recipient] = _balances[recipient].add(amount);\\r\\n        emit Transfer(sender, recipient, amount);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\r\\n     * total supply.\\r\\n     *\\r\\n     * Emits a {Transfer} event with `to` set to the zero address.\\r\\n     *\\r\\n     * Requirements\\r\\n     *\\r\\n     * - `account` cannot be the zero address.\\r\\n     * - `account` must have at least `amount` tokens.\\r\\n     */\\r\\n    function _burn(address account, uint256 amount) internal {\\r\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\r\\n\\r\\n        _balances[account] = _balances[account].sub(amount, \\\"ERC20: burn amount exceeds balance\\\");\\r\\n        _totalSupply = _totalSupply.sub(amount);\\r\\n        emit Transfer(account, address(0), amount);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner`s tokens.\\r\\n     *\\r\\n     * This is internal function is equivalent to `approve`, and can be used to\\r\\n     * e.g. set automatic allowances for certain subsystems, etc.\\r\\n     *\\r\\n     * Emits an {Approval} event.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `owner` cannot be the zero address.\\r\\n     * - `spender` cannot be the zero address.\\r\\n     */\\r\\n    function _approve(address owner, address spender, uint256 amount) internal {\\r\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\r\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\r\\n\\r\\n        _allowances[owner][spender] = amount;\\r\\n        emit Approval(owner, spender, amount);\\r\\n    }\\r\\n}\"},\"ERC20Detailed.sol\":{\"content\":\"pragma solidity ^0.5.17;\\r\\n\\r\\n/**\\r\\n * @dev Optional functions from the ERC20 standard.\\r\\n */\\r\\ncontract ERC20Detailed {\\r\\n    string internal _name;\\r\\n    string internal _symbol;\\r\\n    uint8 internal _decimals;\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the name of the token.\\r\\n     */\\r\\n    function name() public view returns (string memory) {\\r\\n        return _name;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\r\\n     * name.\\r\\n     */\\r\\n    function symbol() public view returns (string memory) {\\r\\n        return _symbol;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the number of decimals used to get its user representation.\\r\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\r\\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\\r\\n     *\\r\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\r\\n     * Ether and Wei.\\r\\n     *\\r\\n     * NOTE: This information is only used for _display_ purposes: it in\\r\\n     * no way affects any of the arithmetic of the contract, including\\r\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\r\\n     */\\r\\n    function decimals() public view returns (uint8) {\\r\\n        return _decimals;\\r\\n    }\\r\\n}\"},\"IERC20.sol\":{\"content\":\"pragma solidity ^0.5.17;\\r\\n\\r\\n/**\\r\\n * @dev Interface of the ERC20 standard as defined in the EIP. Does not include\\r\\n * the optional functions; to access them see {ERC20Detailed}.\\r\\n */\\r\\ninterface IERC20 {\\r\\n    /**\\r\\n     * @dev Returns the amount of tokens in existence.\\r\\n     */\\r\\n    function totalSupply() external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the amount of tokens owned by `account`.\\r\\n     */\\r\\n    function balanceOf(address account) external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @dev Moves `amount` tokens from the caller\\u0027s account to `recipient`.\\r\\n     *\\r\\n     * Returns a boolean value indicating whether the operation succeeded.\\r\\n     *\\r\\n     * Emits a {Transfer} event.\\r\\n     */\\r\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the remaining number of tokens that `spender` will be\\r\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\r\\n     * zero by default.\\r\\n     *\\r\\n     * This value changes when {approve} or {transferFrom} are called.\\r\\n     */\\r\\n    function allowance(address owner, address spender) external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @dev Sets `amount` as the allowance of `spender` over the caller\\u0027s tokens.\\r\\n     *\\r\\n     * Returns a boolean value indicating whether the operation succeeded.\\r\\n     *\\r\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\r\\n     * that someone may use both the old and the new allowance by unfortunate\\r\\n     * transaction ordering. One possible solution to mitigate this race\\r\\n     * condition is to first reduce the spender\\u0027s allowance to 0 and set the\\r\\n     * desired value afterwards:\\r\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\r\\n     *\\r\\n     * Emits an {Approval} event.\\r\\n     */\\r\\n    function approve(address spender, uint256 amount) external returns (bool);\\r\\n\\r\\n    /**\\r\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\r\\n     * allowance mechanism. `amount` is then deducted from the caller\\u0027s\\r\\n     * allowance.\\r\\n     *\\r\\n     * Returns a boolean value indicating whether the operation succeeded.\\r\\n     *\\r\\n     * Emits a {Transfer} event.\\r\\n     */\\r\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\r\\n\\r\\n    /**\\r\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\r\\n     * another (`to`).\\r\\n     *\\r\\n     * Note that `value` may be zero.\\r\\n     */\\r\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\r\\n\\r\\n    /**\\r\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\r\\n     * a call to {approve}. `value` is the new allowance.\\r\\n     */\\r\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\r\\n}\"},\"Ownable.sol\":{\"content\":\"pragma solidity ^0.5.17;\\r\\n\\r\\n/**\\r\\n * @dev Contract module which provides a basic access control mechanism, where\\r\\n * there is an account (an owner) that can be granted exclusive access to\\r\\n * specific functions.\\r\\n *\\r\\n * This module is used through inheritance. It will make available the modifier\\r\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\r\\n * the owner.\\r\\n */\\r\\ncontract Ownable {\\r\\n    \\r\\n    address payable private _owner;\\r\\n\\r\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\r\\n\\r\\n    /**\\r\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\r\\n     */\\r\\n    constructor () internal {\\r\\n        _owner = msg.sender;\\r\\n        emit OwnershipTransferred(address(0), msg.sender);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the address of the current owner.\\r\\n     */\\r\\n    function owner() public view returns (address payable) {\\r\\n        return _owner;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Throws if called by any account other than the owner.\\r\\n     */\\r\\n    modifier onlyOwner() {\\r\\n        require(isOwner(), \\\"Ownable: caller is not the owner\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns true if the caller is the current owner.\\r\\n     */\\r\\n    function isOwner() public view returns (bool) {\\r\\n        return msg.sender == _owner;\\r\\n    }\\r\\n\\r\\n\\r\\n    /**\\r\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\r\\n     * Can only be called by the current owner.\\r\\n     */\\r\\n    function transferOwnership(address payable newOwner) public onlyOwner {\\r\\n        _transferOwnership(newOwner);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\r\\n     */\\r\\n    function _transferOwnership(address payable newOwner) internal {\\r\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\r\\n        emit OwnershipTransferred(_owner, newOwner);\\r\\n        _owner = newOwner;\\r\\n    }\\r\\n}\"},\"SafeMath.sol\":{\"content\":\"pragma solidity ^0.5.17;\\r\\n\\r\\n/**\\r\\n * @dev Wrappers over Solidity\\u0027s arithmetic operations with added overflow\\r\\n * checks.\\r\\n *\\r\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\r\\n * in bugs, because programmers usually assume that an overflow raises an\\r\\n * error, which is the standard behavior in high level programming languages.\\r\\n * `SafeMath` restores this intuition by reverting the transaction when an\\r\\n * operation overflows.\\r\\n *\\r\\n * Using this library instead of the unchecked operations eliminates an entire\\r\\n * class of bugs, so it\\u0027s recommended to use it always.\\r\\n */\\r\\nlibrary SafeMath {\\r\\n    /**\\r\\n     * @dev Returns the addition of two unsigned integers, reverting on\\r\\n     * overflow.\\r\\n     *\\r\\n     * Counterpart to Solidity\\u0027s `+` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     * - Addition cannot overflow.\\r\\n     */\\r\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        uint256 c = a + b;\\r\\n        require(c \\u003e= a, \\\"SafeMath: addition overflow\\\");\\r\\n\\r\\n        return c;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\r\\n     * overflow (when the result is negative).\\r\\n     *\\r\\n     * Counterpart to Solidity\\u0027s `-` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     * - Subtraction cannot overflow.\\r\\n     */\\r\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        return sub(a, b, \\\"SafeMath: subtraction overflow\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\r\\n     * overflow (when the result is negative).\\r\\n     *\\r\\n     * Counterpart to Solidity\\u0027s `-` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     * - Subtraction cannot overflow.\\r\\n     *\\r\\n     * _Available since v2.4.0._\\r\\n     */\\r\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\r\\n        require(b \\u003c= a, errorMessage);\\r\\n        uint256 c = a - b;\\r\\n\\r\\n        return c;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\r\\n     * overflow.\\r\\n     *\\r\\n     * Counterpart to Solidity\\u0027s `*` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     * - Multiplication cannot overflow.\\r\\n     */\\r\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        // Gas optimization: this is cheaper than requiring \\u0027a\\u0027 not being zero, but the\\r\\n        // benefit is lost if \\u0027b\\u0027 is also tested.\\r\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\r\\n        if (a == 0) {\\r\\n            return 0;\\r\\n        }\\r\\n\\r\\n        uint256 c = a * b;\\r\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\r\\n\\r\\n        return c;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the integer division of two unsigned integers. Reverts on\\r\\n     * division by zero. The result is rounded towards zero.\\r\\n     *\\r\\n     * Counterpart to Solidity\\u0027s `/` operator. Note: this function uses a\\r\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\r\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\r\\n     *\\r\\n     * Requirements:\\r\\n     * - The divisor cannot be zero.\\r\\n     */\\r\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\\r\\n     * division by zero. The result is rounded towards zero.\\r\\n     *\\r\\n     * Counterpart to Solidity\\u0027s `/` operator. Note: this function uses a\\r\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\r\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\r\\n     *\\r\\n     * Requirements:\\r\\n     * - The divisor cannot be zero.\\r\\n     *\\r\\n     * _Available since v2.4.0._\\r\\n     */\\r\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\r\\n        // Solidity only automatically asserts when dividing by 0\\r\\n        require(b \\u003e 0, errorMessage);\\r\\n        uint256 c = a / b;\\r\\n        // assert(a == b * c + a % b); // There is no case in which this doesn\\u0027t hold\\r\\n\\r\\n        return c;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\r\\n     * Reverts when dividing by zero.\\r\\n     *\\r\\n     * Counterpart to Solidity\\u0027s `%` operator. This function uses a `revert`\\r\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\r\\n     * invalid opcode to revert (consuming all remaining gas).\\r\\n     *\\r\\n     * Requirements:\\r\\n     * - The divisor cannot be zero.\\r\\n     */\\r\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        return mod(a, b, \\\"SafeMath: modulo by zero\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\r\\n     * Reverts with custom message when dividing by zero.\\r\\n     *\\r\\n     * Counterpart to Solidity\\u0027s `%` operator. This function uses a `revert`\\r\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\r\\n     * invalid opcode to revert (consuming all remaining gas).\\r\\n     *\\r\\n     * Requirements:\\r\\n     * - The divisor cannot be zero.\\r\\n     *\\r\\n     * _Available since v2.4.0._\\r\\n     */\\r\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\r\\n        require(b != 0, errorMessage);\\r\\n        return a % b;\\r\\n    }\\r\\n}\"},\"STUDTeamVesting.sol\":{\"content\":\"pragma solidity ^0.5.17;\\r\\n\\r\\nimport \\\"./IERC20.sol\\\";\\r\\nimport \\\"./Ownable.sol\\\";\\r\\nimport \\\"./SafeMath.sol\\\";\\r\\n\\r\\n/**\\r\\n * @title TokenVesting\\r\\n * @dev A token holder contract that can release its token balance gradually like a\\r\\n * typical vesting scheme, with a cliff and vesting period. Optionally revocable by the\\r\\n * owner.\\r\\n */\\r\\ncontract STUDTeamVesting is Ownable {\\r\\n    using SafeMath for uint256;\\r\\n\\r\\n    address private _beneficiary;\\r\\n    uint256 private _ieoEndTime; \\r\\n    uint256 private _totalAmount;\\r\\n    uint256 private _withdrawnAmount = 0;\\r\\n    uint256[] private _months = [0, 6, 12, 18, 21, 24, 27, 30, 33, 36];\\r\\n    uint256[] private _percentages = [100, 100, 100, 100, 100, 100, 100, 100, 100, 100];\\r\\n    IERC20 private _token;\\r\\n    uint256 private constant _daysInMonth = 30 days;\\r\\n\\r\\n    /**\\r\\n     * @dev Prevents other adresses except beneficiary.\\r\\n     */\\r\\n    modifier onlyBeneficiary {\\r\\n        require(msg.sender == _beneficiary, \\\"Sender has to be already set as a beneficiary\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Get the benficiary address.\\r\\n     * @return the beneficiary of the tokens.\\r\\n     */\\r\\n    function beneficiary() public view returns (address) {\\r\\n        return _beneficiary;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Creates a vesting contract that vests its balance of any ERC20 token to the\\r\\n     * beneficiary, gradually in a linear fashion until start + duration. By then all\\r\\n     * of the balance will have vested.\\r\\n     * @param beneficiaryAddress Address of the beneficiary to whom vested tokens are transferred.\\r\\n     * @param token Address of the token which will be vested.\\r\\n     * @param ieoEndTime IEO end time in UNIX.\\r\\n     * @param totalAmount Total amount of tokens stored in contract.\\r\\n     */\\r\\n    constructor (address token, address payable owner, address payable beneficiaryAddress, uint256 ieoEndTime, uint256 totalAmount) public {\\r\\n        require(token != address(0), \\\"Token is the zero address.\\\");\\r\\n        require(owner != address(0), \\\"Owner is the zero address.\\\");\\r\\n        require(beneficiaryAddress != address(0), \\\"Beneficiary is the zero address.\\\");\\r\\n        require(ieoEndTime \\u003e block.timestamp, \\\"IEO end time should be bigger than current timestamp.\\\");\\r\\n        require(totalAmount \\u003e 0, \\\"Total Amount should be bigger than 0.\\\");\\r\\n\\r\\n        _token = IERC20(token);\\r\\n        _beneficiary = beneficiaryAddress;\\r\\n        _ieoEndTime = ieoEndTime;\\r\\n        _totalAmount = totalAmount;\\r\\n        transferOwnership(owner);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Current amount of tokens possible to withdraw from contract.\\r\\n     */\\r\\n     function withdrawable() public view returns (uint256) {\\r\\n        uint256 percentageSum = 0;\\r\\n        for (uint256 i = 0; i\\u003c_months.length; i++) {\\r\\n    \\t    uint256 tempTime = _ieoEndTime + _months[i] * _daysInMonth;\\r\\n    \\t    if (block.timestamp \\u003e tempTime) {\\r\\n    \\t\\t    percentageSum += _percentages[i];\\r\\n    \\t    }\\r\\n        }\\r\\n        return _totalAmount * percentageSum / 1000.0 - _withdrawnAmount;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Withdraws the tokens from contract to beneficiary address.\\r\\n     */\\r\\n    function withdraw() public onlyBeneficiary  {\\r\\n        uint256 withdrawableAmount = withdrawable();\\r\\n        _withdrawnAmount += withdrawableAmount;\\r\\n        require (withdrawableAmount \\u003e 0, \\\"Withdrawable amount must be greater than zero.\\\");\\r\\n        _token.transfer(_beneficiary, withdrawableAmount);\\r\\n        emit TokensWithdrawed(_beneficiary, withdrawableAmount);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the timestamps of each payout. Beacause a month can have different number\\r\\n     * of days, months are represented as 30 day period in contract.\\r\\n     */\\r\\n    function getTimestamps() public view returns (uint256[] memory) {\\r\\n    \\tuint256[] memory timestamps = new uint256[](_months.length);\\r\\n    \\tfor (uint256 i = 0; i\\u003c_months.length; i++) {\\r\\n    \\t\\tuint256 timestamp = _ieoEndTime + _months[i] * _daysInMonth;\\r\\n    \\t\\ttimestamps[i] = timestamp;\\r\\n        }\\r\\n    \\treturn timestamps;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the IEO end time in UNIX timestamp\\r\\n     */\\r\\n    function getIeoEndTime() public view returns (uint256) {\\r\\n        return _ieoEndTime;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the total amount of tokens which was set during contract deployment.\\r\\n     */\\r\\n    function getTotalAmount() public view returns (uint256) {\\r\\n        return _totalAmount;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns currently withdrawn amount from contract.\\r\\n     */\\r\\n    function getWithDrawnAmount() public view returns (uint256) {\\r\\n        return _withdrawnAmount;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\r\\n     * @param _newBeneficiary New beneficiary address\\r\\n     */\\r\\n    function changeBeneficiary(address payable _newBeneficiary) public onlyOwner {\\r\\n        require(_newBeneficiary != address(0), \\\"Ownable: new owner is the zero address\\\");\\r\\n        emit BeneficiaryChanged(_beneficiary, _newBeneficiary);\\r\\n        _beneficiary = _newBeneficiary;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Revertible fallback to prevent Ether deposits.\\r\\n     */\\r\\n    function () external payable {\\r\\n        revert(\\\"Revert the ETH.\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Claim mistakenly sent tokens to the contract.\\r\\n     * @param _tokenAddress Address of the token to be extracted.\\r\\n     */\\r\\n    function claimTokens(address _tokenAddress) public onlyOwner {\\r\\n        if (_tokenAddress == address(0)) {\\r\\n            owner().transfer(address(this).balance);\\r\\n            return;\\r\\n        }\\r\\n\\r\\n        IERC20 token = IERC20(_tokenAddress);\\r\\n        uint balance = token.balanceOf(address(this));\\r\\n        token.transfer(owner(), balance);\\r\\n        emit ClaimedTokens(_tokenAddress, owner(), balance);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Emitted when the tokens are withdrawn from contract.\\r\\n     */\\r\\n    event TokensWithdrawed(address beneficiary, uint256 amount);\\r\\n    /**\\r\\n     * @dev Emitted when the mistakenly sent tokens are claimed.\\r\\n     */\\r\\n    event ClaimedTokens(address _token, address _owner, uint256 _amount);\\r\\n    /**\\r\\n     * @dev Emitted when a new beneficiary has been set.\\r\\n     */\\r\\n    event BeneficiaryChanged(address _beneficiary, address _newBeneficiary);\\r\\n\\r\\n\\r\\n}\"},\"STUDToken.sol\":{\"content\":\"pragma solidity ^0.5.17;\\r\\n\\r\\nimport \\\"./ERC20Detailed.sol\\\";\\r\\nimport \\\"./BurnableToken.sol\\\";\\r\\n\\r\\n/**\\r\\n * @dev Optional functions from the ERC20 standard.\\r\\n */\\r\\ncontract STUDToken is ERC20Detailed, BurnableToken {\\r\\n    using SafeMath for uint256;\\r\\n\\r\\n    /**\\r\\n     * @dev Sets the values for `name`, `symbol`, and `decimals`. All three of\\r\\n     * these values are immutable: they can only be set once during\\r\\n     * construction.\\r\\n     * @param _initialTotalSupply Total supply of STUD Token.\\r\\n     * @param _owner Owner of the STUD Token.\\r\\n     */\\r\\n    constructor (uint256 _initialTotalSupply, address payable _owner) public {\\r\\n        _name = \\\"Studyum Token\\\";\\r\\n        _symbol = \\\"STUD\\\";\\r\\n        _decimals = 18;\\r\\n        _totalSupply = _initialTotalSupply;\\r\\n        _balances[_owner] = _totalSupply;\\r\\n        transferOwnership(_owner);\\r\\n        emit Transfer(address(0), _owner, _totalSupply);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Used for bulk transfering. It can be used by anyone. Useful for airdrop.\\r\\n     * @param beneficiaries Array of addresses to receive tokens.\\r\\n     * @param amounts Array of token amounts addresses should receive.\\r\\n     */\\r\\n    function bulkTransfer(address[] calldata beneficiaries, uint256[] calldata amounts) external {\\r\\n        require(beneficiaries.length \\u003e 0, \\\"Beneficiaries shouldn\\u0027t be empty.\\\");\\r\\n        require(beneficiaries.length == amounts.length, \\\"Array lengths should be equal.\\\");\\r\\n        uint256 amountSum = 0;\\r\\n        for (uint256 i=0; i\\u003cbeneficiaries.length; i++) {\\r\\n            require(beneficiaries[i] != address(0), \\\"Beneficiary is address zero.\\\");\\r\\n            require(amounts[i]\\u003e0, \\\"Amount is zero.\\\");\\r\\n            amountSum += amounts[i];\\r\\n        }\\r\\n        require(amountSum \\u003c= balanceOf(msg.sender), \\\"Sender amount too low.\\\");\\r\\n        for (uint256 i=0; i\\u003cbeneficiaries.length; i++) {\\r\\n            transfer(beneficiaries[i], amounts[i]);\\r\\n        }\\r\\n        emit BulkTransfer(msg.sender, amountSum, beneficiaries.length);\\r\\n    }\\r\\n\\r\\n    \\r\\n    /**\\r\\n     * @dev Revertible fallback to prevent Ether deposits.\\r\\n     */\\r\\n    function () external payable {\\r\\n        revert(\\\"Revert the ETH.\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Claim mistakenly sent tokens to the contract.\\r\\n     * @param _tokenAddress Address of the token to be extracted.\\r\\n     */\\r\\n    function claimTokens(address _tokenAddress) public onlyOwner {\\r\\n        if (_tokenAddress == address(0)) {\\r\\n            owner().transfer(address(this).balance);\\r\\n            return;\\r\\n        }\\r\\n\\r\\n        IERC20 token = IERC20(_tokenAddress);\\r\\n        uint balance = token.balanceOf(address(this));\\r\\n        token.transfer(owner(), balance);\\r\\n        emit ClaimedTokens(_tokenAddress, owner(), balance);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Emitted when the mistakenly sent tokens are claimed.\\r\\n     */\\r\\n    event ClaimedTokens(address _token, address _owner, uint256 _amount);\\r\\n    /**\\r\\n     * @dev Emitted when the bulk transfer is executed.\\r\\n     */    \\r\\n    event BulkTransfer(address _sender, uint256 _totalAmount, uint256 _beneficiaryCount);\\r\\n\\r\\n}\"}}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"beneficiaryAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"ieoEndTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalAmount\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_beneficiary\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_newBeneficiary\",\"type\":\"address\"}],\"name\":\"BeneficiaryChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"ClaimedTokens\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"beneficiary\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TokensWithdrawed\",\"type\":\"event\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"constant\":true,\"inputs\":[],\"name\":\"beneficiary\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_newBeneficiary\",\"type\":\"address\"}],\"name\":\"changeBeneficiary\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"}],\"name\":\"claimTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getIeoEndTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getTimestamps\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getTotalAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getWithDrawnAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isOwner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"withdrawable\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"STUDTeamVesting","CompilerVersion":"v0.5.17+commit.d19bba13","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"0000000000000000000000008f48e457b4b0708c999a1e088c005e977cfdd707000000000000000000000000d25490d2c8704f4a7f561af543f18f2f91bd1b020000000000000000000000007e767ca2836c035d5a06519e2213358485ed8bed0000000000000000000000000000000000000000000000000000000060aad05f0000000000000000000000000000000000000000007c13bc4b2c133c56000000","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"bzzr://e437f8bf8860c601e123bd1d7aca147f7111f85270eb54d302e4a17d4c3942b6"}]}