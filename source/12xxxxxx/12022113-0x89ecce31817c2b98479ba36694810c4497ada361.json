{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.8.2;\r\n\r\ninterface PriceRouter {\r\n    function getAmountsOut(uint256 amountIn, address[] calldata path)\r\n        external\r\n        view\r\n        returns (uint256[] memory amounts);\r\n}\r\n\r\ninterface CurveRegistry {\r\n    function get_pool_from_lp_token(address arg0)\r\n        external\r\n        view\r\n        returns (address);\r\n\r\n    function get_underlying_coins(address arg0)\r\n        external\r\n        view\r\n        returns (address[8] memory);\r\n\r\n    function get_virtual_price_from_lp_token(address arg0)\r\n        external\r\n        view\r\n        returns (uint256);\r\n}\r\n\r\ninterface IERC20 {\r\n    function decimals() external view returns (uint8);\r\n}\r\n\r\ncontract Oracle {\r\n    // Routers\r\n    address sushiswapRouterAddress = 0xd9e1cE17f2641f24aE83637ab66a2cca9C378B9F;\r\n    address uniswapRouterAddress = 0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D;\r\n    PriceRouter sushiswapRouter = PriceRouter(sushiswapRouterAddress);\r\n    PriceRouter uniswapRouter = PriceRouter(uniswapRouterAddress);\r\n\r\n    // Constants\r\n    address usdcAddress = 0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48;\r\n    address wethAddress = 0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2;\r\n\r\n    // Uniswap/Sushiswap\r\n    function getPriceFromRouter(address token0Address, address token1Address)\r\n        public\r\n        view\r\n        returns (uint256)\r\n    {\r\n        address[] memory path = new address[](2);\r\n        path[0] = token0Address;\r\n        path[1] = token1Address;\r\n        IERC20 token0 = IERC20(token0Address);\r\n        uint256 amountIn = 10**uint256(token0.decimals());\r\n        uint256[] memory amountsOut;\r\n        try uniswapRouter.getAmountsOut(amountIn, path) returns (\r\n            uint256[] memory _amountsOut\r\n        ) {\r\n            amountsOut = _amountsOut;\r\n        } catch {\r\n            amountsOut = sushiswapRouter.getAmountsOut(amountIn, path);\r\n        }\r\n\r\n        uint256 amountOut = amountsOut[amountsOut.length - 1];\r\n        return amountOut;\r\n    }\r\n\r\n    function getPriceFromRouterUsdc(address tokenAddress)\r\n        public\r\n        view\r\n        returns (uint256)\r\n    {\r\n        return getPriceFromRouter(tokenAddress, usdcAddress);\r\n    }\r\n\r\n    function getPriceUsdc(address tokenAddress) public view returns (uint256) {\r\n        bool useCurveCalculation = isCurveLpToken(tokenAddress);\r\n        if (useCurveCalculation) {\r\n            return getCurvePriceUsdc(tokenAddress);\r\n        }\r\n        return getPriceFromRouterUsdc(tokenAddress);\r\n    }\r\n\r\n    // Curve\r\n    address curveRegistryAddress = 0x7D86446dDb609eD0F5f8684AcF30380a356b2B4c;\r\n    address zeroAddress = 0x0000000000000000000000000000000000000000;\r\n    CurveRegistry curveRegistry = CurveRegistry(curveRegistryAddress);\r\n\r\n    function getCurvePriceUsdc(address curveLpTokenAddress)\r\n        public\r\n        view\r\n        returns (uint256)\r\n    {\r\n        uint256 basePrice = getBasePrice(curveLpTokenAddress);\r\n        uint256 virtualPrice = getVirtualPrice(curveLpTokenAddress);\r\n        IERC20 usdc = IERC20(usdcAddress);\r\n        uint256 decimals = usdc.decimals();\r\n        uint256 decimalsAdjustment = 18 - decimals;\r\n        uint256 price =\r\n            (virtualPrice * basePrice * (10**decimalsAdjustment)) /\r\n                10**(decimalsAdjustment + 18);\r\n        return price;\r\n    }\r\n\r\n    function getBasePrice(address curveLpTokenAddress)\r\n        public\r\n        view\r\n        returns (uint256)\r\n    {\r\n        address poolAddress =\r\n            curveRegistry.get_pool_from_lp_token(curveLpTokenAddress);\r\n        address firstUnderlyingCoin =\r\n            getFirstUnderlyingCoinFromPool(poolAddress);\r\n        uint256 basePrice = getPriceFromRouterUsdc(firstUnderlyingCoin);\r\n        return basePrice;\r\n    }\r\n\r\n    function getVirtualPrice(address curveLpTokenAddress)\r\n        public\r\n        view\r\n        returns (uint256)\r\n    {\r\n        return\r\n            curveRegistry.get_virtual_price_from_lp_token(curveLpTokenAddress);\r\n    }\r\n\r\n    function isCurveLpToken(address tokenAddress) public view returns (bool) {\r\n        address poolAddress =\r\n            curveRegistry.get_pool_from_lp_token(tokenAddress);\r\n        bool tokenHasCurvePool = poolAddress != zeroAddress;\r\n        return tokenHasCurvePool;\r\n    }\r\n\r\n    function getFirstUnderlyingCoinFromPool(address poolAddress)\r\n        public\r\n        view\r\n        returns (address)\r\n    {\r\n        address[8] memory coins =\r\n            curveRegistry.get_underlying_coins(poolAddress);\r\n        address firstCoin = coins[0];\r\n        return firstCoin;\r\n    }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"curveLpTokenAddress\",\"type\":\"address\"}],\"name\":\"getBasePrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"curveLpTokenAddress\",\"type\":\"address\"}],\"name\":\"getCurvePriceUsdc\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"poolAddress\",\"type\":\"address\"}],\"name\":\"getFirstUnderlyingCoinFromPool\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token0Address\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token1Address\",\"type\":\"address\"}],\"name\":\"getPriceFromRouter\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"}],\"name\":\"getPriceFromRouterUsdc\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"}],\"name\":\"getPriceUsdc\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"curveLpTokenAddress\",\"type\":\"address\"}],\"name\":\"getVirtualPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"}],\"name\":\"isCurveLpToken\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"Oracle","CompilerVersion":"v0.8.2+commit.661d1103","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"ipfs://7fccde55ed7e7ac500b8272e8931674172e5de00e267f77e761a8a9945f7613f"}]}