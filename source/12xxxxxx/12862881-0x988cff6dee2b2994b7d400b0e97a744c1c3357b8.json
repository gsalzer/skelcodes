{"status":"1","message":"OK","result":[{"SourceCode":"// File: contracts/IERC20.sol\r\n\r\npragma solidity  >=0.5.0 <0.7.0;\r\ninterface IERC20 {\r\n\r\n    function totalSupply() external view returns (uint256);\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n    function decimals() external view returns (uint8);\r\n\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n    function burn(uint256 _value) external returns (bool success);\r\n    function burnFrom(address _from, uint256 _value) external returns (bool success);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n    event Burn(address indexed from, uint256 value); \r\n}\r\n\r\n// File: contracts/SafeMath.sol\r\n\r\npragma solidity  >=0.5.0 <0.7.0;\r\nlibrary SafeMath {\r\n\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts with custom message when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n\r\n  /**\r\n   * @dev gives square root of given x.\r\n   */\r\n  function sqrt(uint256 x)\r\n  internal\r\n  pure\r\n  returns(uint256 y) {\r\n    uint256 z = ((add(x, 1)) / 2);\r\n    y = x;\r\n    while (z < y) {\r\n      y = z;\r\n      z = ((add((x / z), z)) / 2);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @dev gives square. multiplies x by x\r\n   */\r\n  function sq(uint256 x)\r\n  internal\r\n  pure\r\n  returns(uint256) {\r\n    return (mul(x, x));\r\n  }\r\n\r\n  /**\r\n   * @dev x to the power of y\r\n   */\r\n  function pwr(uint256 x, uint256 y)\r\n  internal\r\n  pure\r\n  returns(uint256) {\r\n    if (x == 0)\r\n      return (0);\r\n    else if (y == 0)\r\n      return (1);\r\n    else {\r\n      uint256 z = x;\r\n      for (uint256 i = 1; i < y; i++)\r\n        z = mul(z, x);\r\n      return (z);\r\n    }\r\n  }\r\n}\r\n\r\n// File: contracts/owned.sol\r\n\r\npragma solidity ^0.5.10;\r\ncontract owned {\r\n    address public owner;\r\n \r\n    constructor() public {\r\n        owner = msg.sender;\r\n    }\r\n \r\n    modifier onlyOwner {\r\n        require (msg.sender == owner);\r\n        _;\r\n    }\r\n \r\n    function transferOwnership(address newOwner) onlyOwner public {\r\n        if (newOwner != address(0)) {\r\n        owner = newOwner;\r\n      }\r\n    }\r\n}\r\n\r\n// File: contracts/ECOPLocker.sol\r\n\r\npragma solidity ^0.5.10;\r\n\r\n\r\n\r\n\r\ncontract ECOPLocker is owned{\r\n    using SafeMath for uint256;\r\n\r\n    uint256[] public MONTH_TIER = [39718,33098,33098,33098,2207,2207,2207,2207,2207,2207,2207,2207,2202];\r\n    uint256 constant public TOTAL_AMOUNT = 158870*10**18;\r\n\r\n    event CoinWithdrawn(address indexed addr, uint256 amount);\r\n\r\n    address payable user_addr;\r\n\r\n    IERC20 ecop;\r\n\r\n    uint256 public withdraw_tokens;\r\n\r\n    uint40 public online_time;\r\n\r\n    constructor(address payable ecopContractAddress, address payable userAddress) public {\r\n\r\n    \tecop = IERC20(ecopContractAddress);\r\n\r\n\tuser_addr = userAddress;\r\n\r\n\twithdraw_tokens = 0;\r\n\r\n\t//init online time for 1 year later\r\n        online_time = uint40(block.timestamp+365*86400);\r\n    }\r\n\r\n    function setOnlineTime(uint40 ts) onlyOwner public {\r\n\r\n\tonline_time = ts;\r\n    }\r\n\r\n    function withdraw() public {\r\n\r\n\trequire(msg.sender == user_addr, \"only authorized user.\");\r\n\r\n\tuint256 amount = this.getAvailableAmount();\r\n\t\r\n        require(amount > 0, \"No available coins.\");\r\n\r\n\tuint256 ecop_balance = ecop.balanceOf(address(this));\r\n\r\n        require(ecop_balance >= amount, \"No ECOP left for withdrawing\");\r\n\r\n\tecop.transfer(msg.sender, amount);\r\n\r\n\twithdraw_tokens = withdraw_tokens.add(amount);\r\n\r\n\temit CoinWithdrawn(msg.sender, amount);\r\n    }\r\n\r\n    /*\r\n        Only external call\r\n    */\r\n    function getAvailableAmount() view external returns(uint256) {\r\n\tuint256 ts = block.timestamp;\r\n\tif(ts < online_time)\r\n\t\treturn 0;\r\n\tuint256 time_span = ts.sub(online_time);\r\n\tuint256 index = time_span.div(30*86400);\r\n\tuint256 amount = 0;\r\n\tfor(uint256 i=0; i <= index; i++)\r\n\t{\r\n\t\tamount = amount.add(MONTH_TIER[i].mul(10**18));\r\n\t}\r\n\tif(amount > TOTAL_AMOUNT)\r\n\t\tamount = TOTAL_AMOUNT;\r\n\tif(amount < withdraw_tokens)\r\n\t\tamount = 0;\r\n\telse\r\n\t\tamount = amount.sub(withdraw_tokens);\r\n\treturn amount;\r\n    }\r\n\r\n    function getContractInfo() view external returns(uint256 _total_amount, uint256 _withdraw_tokens,  uint256 _available_tokens, uint40 _online_time, address _user_addr) {\r\n    \t_total_amount = TOTAL_AMOUNT;\r\n\t_withdraw_tokens = withdraw_tokens;\r\n\t_available_tokens = this.getAvailableAmount();\r\n\t_online_time = online_time;\r\n\t_user_addr = user_addr;\r\n    }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"ts\",\"type\":\"uint40\"}],\"name\":\"setOnlineTime\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"withdraw_tokens\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"MONTH_TIER\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getAvailableAmount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getContractInfo\",\"outputs\":[{\"name\":\"_total_amount\",\"type\":\"uint256\"},{\"name\":\"_withdraw_tokens\",\"type\":\"uint256\"},{\"name\":\"_available_tokens\",\"type\":\"uint256\"},{\"name\":\"_online_time\",\"type\":\"uint40\"},{\"name\":\"_user_addr\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"TOTAL_AMOUNT\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"online_time\",\"outputs\":[{\"name\":\"\",\"type\":\"uint40\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"ecopContractAddress\",\"type\":\"address\"},{\"name\":\"userAddress\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"addr\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"CoinWithdrawn\",\"type\":\"event\"}]","ContractName":"ECOPLocker","CompilerVersion":"v0.5.10+commit.5a6ea5b1","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"0000000000000000000000000106a1122fe94a9cf151097c1fe17229ec78ffad000000000000000000000000c17e2eb8462f994456b9f193ab87ad803f1b3942","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"bzzr://2cfb3eb1f7487f55af201817f8bbf2f27eeb82a1d3a991e706320d66197a5c26"}]}