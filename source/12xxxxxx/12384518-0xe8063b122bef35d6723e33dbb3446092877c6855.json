{"status":"1","message":"OK","result":[{"SourceCode":"// Verified using https://dapp.tools\n\n// hevm: flattened sources of lib/geb-treasury-reimbursement/src/relayer/IncreasingRewardRelayer.sol\npragma solidity =0.6.7;\n\n////// lib/geb-treasury-reimbursement/src/math/GebMath.sol\n/* pragma solidity 0.6.7; */\n\ncontract GebMath {\n    uint256 public constant RAY = 10 ** 27;\n    uint256 public constant WAD = 10 ** 18;\n\n    function ray(uint x) public pure returns (uint z) {\n        z = multiply(x, 10 ** 9);\n    }\n    function rad(uint x) public pure returns (uint z) {\n        z = multiply(x, 10 ** 27);\n    }\n    function minimum(uint x, uint y) public pure returns (uint z) {\n        z = (x <= y) ? x : y;\n    }\n    function addition(uint x, uint y) public pure returns (uint z) {\n        z = x + y;\n        require(z >= x, \"uint-uint-add-overflow\");\n    }\n    function subtract(uint x, uint y) public pure returns (uint z) {\n        z = x - y;\n        require(z <= x, \"uint-uint-sub-underflow\");\n    }\n    function multiply(uint x, uint y) public pure returns (uint z) {\n        require(y == 0 || (z = x * y) / y == x, \"uint-uint-mul-overflow\");\n    }\n    function rmultiply(uint x, uint y) public pure returns (uint z) {\n        z = multiply(x, y) / RAY;\n    }\n    function rdivide(uint x, uint y) public pure returns (uint z) {\n        z = multiply(x, RAY) / y;\n    }\n    function wdivide(uint x, uint y) public pure returns (uint z) {\n        z = multiply(x, WAD) / y;\n    }\n    function wmultiply(uint x, uint y) public pure returns (uint z) {\n        z = multiply(x, y) / WAD;\n    }\n    function rpower(uint x, uint n, uint base) public pure returns (uint z) {\n        assembly {\n            switch x case 0 {switch n case 0 {z := base} default {z := 0}}\n            default {\n                switch mod(n, 2) case 0 { z := base } default { z := x }\n                let half := div(base, 2)  // for rounding.\n                for { n := div(n, 2) } n { n := div(n,2) } {\n                    let xx := mul(x, x)\n                    if iszero(eq(div(xx, x), x)) { revert(0,0) }\n                    let xxRound := add(xx, half)\n                    if lt(xxRound, xx) { revert(0,0) }\n                    x := div(xxRound, base)\n                    if mod(n,2) {\n                        let zx := mul(z, x)\n                        if and(iszero(iszero(x)), iszero(eq(div(zx, x), z))) { revert(0,0) }\n                        let zxRound := add(zx, half)\n                        if lt(zxRound, zx) { revert(0,0) }\n                        z := div(zxRound, base)\n                    }\n                }\n            }\n        }\n    }\n}\n\n////// lib/geb-treasury-reimbursement/src/reimbursement/IncreasingTreasuryReimbursement.sol\n/* pragma solidity 0.6.7; */\n\n/* import \"../math/GebMath.sol\"; */\n\nabstract contract StabilityFeeTreasuryLike {\n    function getAllowance(address) virtual external view returns (uint, uint);\n    function systemCoin() virtual external view returns (address);\n    function pullFunds(address, address, uint) virtual external;\n}\n\ncontract IncreasingTreasuryReimbursement is GebMath {\n    // --- Auth ---\n    mapping (address => uint) public authorizedAccounts;\n    /**\n     * @notice Add auth to an account\n     * @param account Account to add auth to\n     */\n    function addAuthorization(address account) virtual external isAuthorized {\n        authorizedAccounts[account] = 1;\n        emit AddAuthorization(account);\n    }\n    /**\n     * @notice Remove auth from an account\n     * @param account Account to remove auth from\n     */\n    function removeAuthorization(address account) virtual external isAuthorized {\n        authorizedAccounts[account] = 0;\n        emit RemoveAuthorization(account);\n    }\n    /**\n    * @notice Checks whether msg.sender can call an authed function\n    **/\n    modifier isAuthorized {\n        require(authorizedAccounts[msg.sender] == 1, \"IncreasingTreasuryReimbursement/account-not-authorized\");\n        _;\n    }\n\n    // --- Variables ---\n    // Starting reward for the fee receiver/keeper\n    uint256 public baseUpdateCallerReward;          // [wad]\n    // Max possible reward for the fee receiver/keeper\n    uint256 public maxUpdateCallerReward;           // [wad]\n    // Max delay taken into consideration when calculating the adjusted reward\n    uint256 public maxRewardIncreaseDelay;          // [seconds]\n    // Rate applied to baseUpdateCallerReward every extra second passed beyond a certain point (e.g next time when a specific function needs to be called)\n    uint256 public perSecondCallerRewardIncrease;   // [ray]\n\n    // SF treasury\n    StabilityFeeTreasuryLike  public treasury;\n\n    // --- Events ---\n    event AddAuthorization(address account);\n    event RemoveAuthorization(address account);\n    event ModifyParameters(\n      bytes32 parameter,\n      address addr\n    );\n    event ModifyParameters(\n      bytes32 parameter,\n      uint256 val\n    );\n    event FailRewardCaller(bytes revertReason, address feeReceiver, uint256 amount);\n\n    constructor(\n      address treasury_,\n      uint256 baseUpdateCallerReward_,\n      uint256 maxUpdateCallerReward_,\n      uint256 perSecondCallerRewardIncrease_\n    ) public {\n        if (address(treasury_) != address(0)) {\n          require(StabilityFeeTreasuryLike(treasury_).systemCoin() != address(0), \"IncreasingTreasuryReimbursement/treasury-coin-not-set\");\n        }\n        require(maxUpdateCallerReward_ >= baseUpdateCallerReward_, \"IncreasingTreasuryReimbursement/invalid-max-caller-reward\");\n        require(perSecondCallerRewardIncrease_ >= RAY, \"IncreasingTreasuryReimbursement/invalid-per-second-reward-increase\");\n        authorizedAccounts[msg.sender] = 1;\n\n        treasury                        = StabilityFeeTreasuryLike(treasury_);\n        baseUpdateCallerReward          = baseUpdateCallerReward_;\n        maxUpdateCallerReward           = maxUpdateCallerReward_;\n        perSecondCallerRewardIncrease   = perSecondCallerRewardIncrease_;\n        maxRewardIncreaseDelay          = uint(-1);\n\n        emit AddAuthorization(msg.sender);\n        emit ModifyParameters(\"treasury\", treasury_);\n        emit ModifyParameters(\"baseUpdateCallerReward\", baseUpdateCallerReward);\n        emit ModifyParameters(\"maxUpdateCallerReward\", maxUpdateCallerReward);\n        emit ModifyParameters(\"perSecondCallerRewardIncrease\", perSecondCallerRewardIncrease);\n    }\n\n    // --- Boolean Logic ---\n    function either(bool x, bool y) internal pure returns (bool z) {\n        assembly{ z := or(x, y)}\n    }\n\n    // --- Treasury ---\n    /**\n    * @notice This returns the stability fee treasury allowance for this contract by taking the minimum between the per block and the total allowances\n    **/\n    function treasuryAllowance() public view returns (uint256) {\n        (uint total, uint perBlock) = treasury.getAllowance(address(this));\n        return minimum(total, perBlock);\n    }\n    /*\n    * @notice Get the SF reward that can be sent to a function caller right now\n    * @param timeOfLastUpdate The last time when the function that the treasury pays for has been updated\n    * @param defaultDelayBetweenCalls Enforced delay between calls to the function for which the treasury reimburses callers\n    */\n    function getCallerReward(uint256 timeOfLastUpdate, uint256 defaultDelayBetweenCalls) public view returns (uint256) {\n        // If the rewards are null or if the time of the last update is in the future or present, return 0\n        bool nullRewards = (baseUpdateCallerReward == 0 && maxUpdateCallerReward == 0);\n        if (either(timeOfLastUpdate >= now, nullRewards)) return 0;\n\n        // If the time elapsed is smaller than defaultDelayBetweenCalls or if the base reward is zero, return 0\n        uint256 timeElapsed = (timeOfLastUpdate == 0) ? defaultDelayBetweenCalls : subtract(now, timeOfLastUpdate);\n        if (either(timeElapsed < defaultDelayBetweenCalls, baseUpdateCallerReward == 0)) {\n            return 0;\n        }\n\n        // If too much time elapsed, return the max reward\n        uint256 adjustedTime      = subtract(timeElapsed, defaultDelayBetweenCalls);\n        uint256 maxPossibleReward = minimum(maxUpdateCallerReward, treasuryAllowance() / RAY);\n        if (adjustedTime > maxRewardIncreaseDelay) {\n            return maxPossibleReward;\n        }\n\n        // Calculate the reward\n        uint256 calculatedReward = baseUpdateCallerReward;\n        if (adjustedTime > 0) {\n            calculatedReward = rmultiply(rpower(perSecondCallerRewardIncrease, adjustedTime, RAY), calculatedReward);\n        }\n\n        // If the reward is higher than max, set it to max\n        if (calculatedReward > maxPossibleReward) {\n            calculatedReward = maxPossibleReward;\n        }\n        return calculatedReward;\n    }\n    /**\n    * @notice Send a stability fee reward to an address\n    * @param proposedFeeReceiver The SF receiver\n    * @param reward The system coin amount to send\n    **/\n    function rewardCaller(address proposedFeeReceiver, uint256 reward) internal {\n        // If the receiver is the treasury itself or if the treasury is null or if the reward is zero, return\n        if (address(treasury) == proposedFeeReceiver) return;\n        if (either(address(treasury) == address(0), reward == 0)) return;\n\n        // Determine the actual receiver and send funds\n        address finalFeeReceiver = (proposedFeeReceiver == address(0)) ? msg.sender : proposedFeeReceiver;\n        try treasury.pullFunds(finalFeeReceiver, treasury.systemCoin(), reward) {}\n        catch(bytes memory revertReason) {\n            emit FailRewardCaller(revertReason, finalFeeReceiver, reward);\n        }\n    }\n}\n\n////// lib/geb-treasury-reimbursement/src/relayer/IncreasingRewardRelayer.sol\n/* pragma solidity 0.6.7; */\n\n/* import \"../reimbursement/IncreasingTreasuryReimbursement.sol\"; */\n\ncontract IncreasingRewardRelayer is IncreasingTreasuryReimbursement {\n    // --- Variables ---\n    // Address that can request funds\n    address public refundRequestor;\n    // Timestamp of the last reimbursement\n    uint256 public lastReimburseTime;       // [timestamp]\n    // Enforced gap between reimbursements\n    uint256 public reimburseDelay;          // [seconds]\n\n    constructor(\n      address refundRequestor_,\n      address treasury_,\n      uint256 baseUpdateCallerReward_,\n      uint256 maxUpdateCallerReward_,\n      uint256 perSecondCallerRewardIncrease_,\n      uint256 reimburseDelay_\n    ) public IncreasingTreasuryReimbursement(treasury_, baseUpdateCallerReward_, maxUpdateCallerReward_, perSecondCallerRewardIncrease_) {\n        require(refundRequestor_ != address(0), \"IncreasingRewardRelayer/null-refund-requestor\");\n        require(reimburseDelay_ > 0, \"IncreasingRewardRelayer/null-reimburse-delay\");\n\n        refundRequestor = refundRequestor_;\n        reimburseDelay  = reimburseDelay_;\n\n        emit ModifyParameters(\"refundRequestor\", refundRequestor);\n        emit ModifyParameters(\"reimburseDelay\", reimburseDelay);\n    }\n\n    // --- Administration ---\n    /*\n    * @notice Change the addresses of contracts that this wrapper is connected to\n    * @param parameter The contract whose address is changed\n    * @param addr The new contract address\n    */\n    function modifyParameters(bytes32 parameter, address addr) external isAuthorized {\n        require(addr != address(0), \"IncreasingRewardRelayer/null-addr\");\n        if (parameter == \"treasury\") {\n          require(StabilityFeeTreasuryLike(addr).systemCoin() != address(0), \"IncreasingRewardRelayer/treasury-coin-not-set\");\n          treasury = StabilityFeeTreasuryLike(addr);\n        } else if (parameter == \"refundRequestor\") {\n          refundRequestor = addr;\n        }\n        else revert(\"IncreasingRewardRelayer/modify-unrecognized-param\");\n        emit ModifyParameters(\n          parameter,\n          addr\n        );\n    }\n    /*\n    * @notify Modify a uint256 parameter\n    * @param parameter The parameter name\n    * @param val The new parameter value\n    */\n    function modifyParameters(bytes32 parameter, uint256 val) external isAuthorized {\n        if (parameter == \"baseUpdateCallerReward\") {\n          require(val <= maxUpdateCallerReward, \"IncreasingRewardRelayer/invalid-base-caller-reward\");\n          baseUpdateCallerReward = val;\n        }\n        else if (parameter == \"maxUpdateCallerReward\") {\n          require(val >= baseUpdateCallerReward, \"IncreasingRewardRelayer/invalid-max-caller-reward\");\n          maxUpdateCallerReward = val;\n        }\n        else if (parameter == \"perSecondCallerRewardIncrease\") {\n          require(val >= RAY, \"IncreasingRewardRelayer/invalid-caller-reward-increase\");\n          perSecondCallerRewardIncrease = val;\n        }\n        else if (parameter == \"maxRewardIncreaseDelay\") {\n          require(val > 0, \"IncreasingRewardRelayer/invalid-max-increase-delay\");\n          maxRewardIncreaseDelay = val;\n        }\n        else if (parameter == \"reimburseDelay\") {\n          require(val > 0, \"IncreasingRewardRelayer/invalid-reimburse-delay\");\n          reimburseDelay = val;\n        }\n        else revert(\"IncreasingRewardRelayer/modify-unrecognized-param\");\n        emit ModifyParameters(\n          parameter,\n          val\n        );\n    }\n\n    // --- Core Logic ---\n    /*\n    * @notice Send a stability fee reward to an address proposed by the refundRequestor\n    * @param feeReceiver Address that will receive the SF reward\n    */\n    function reimburseCaller(address feeReceiver) external {\n        // Perform checks\n        require(refundRequestor == msg.sender, \"IncreasingRewardRelayer/invalid-caller\");\n        require(feeReceiver != address(0), \"IncreasingRewardRelayer/null-fee-receiver\");\n        require(feeReceiver != refundRequestor, \"IncreasingRewardRelayer/requestor-cannot-receive-fees\");\n        // Check delay between calls\n        require(either(subtract(now, lastReimburseTime) >= reimburseDelay, lastReimburseTime == 0), \"IncreasingRewardRelayer/wait-more\");\n        // Get the caller's reward\n        uint256 callerReward = getCallerReward(lastReimburseTime, reimburseDelay);\n        // Store the timestamp of the reimbursement\n        lastReimburseTime = now;\n        // Pay the fee receiver\n        rewardCaller(feeReceiver, callerReward);\n    }\n}\n","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"refundRequestor_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"treasury_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"baseUpdateCallerReward_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxUpdateCallerReward_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"perSecondCallerRewardIncrease_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"reimburseDelay_\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"AddAuthorization\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"revertReason\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"feeReceiver\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"FailRewardCaller\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"parameter\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"ModifyParameters\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"parameter\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"val\",\"type\":\"uint256\"}],\"name\":\"ModifyParameters\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"RemoveAuthorization\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"RAY\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"WAD\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"addAuthorization\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"x\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"y\",\"type\":\"uint256\"}],\"name\":\"addition\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"z\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"authorizedAccounts\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"baseUpdateCallerReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"timeOfLastUpdate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"defaultDelayBetweenCalls\",\"type\":\"uint256\"}],\"name\":\"getCallerReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastReimburseTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxRewardIncreaseDelay\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxUpdateCallerReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"x\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"y\",\"type\":\"uint256\"}],\"name\":\"minimum\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"z\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"parameter\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"modifyParameters\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"parameter\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"val\",\"type\":\"uint256\"}],\"name\":\"modifyParameters\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"x\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"y\",\"type\":\"uint256\"}],\"name\":\"multiply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"z\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"perSecondCallerRewardIncrease\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"x\",\"type\":\"uint256\"}],\"name\":\"rad\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"z\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"x\",\"type\":\"uint256\"}],\"name\":\"ray\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"z\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"x\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"y\",\"type\":\"uint256\"}],\"name\":\"rdivide\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"z\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"refundRequestor\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"feeReceiver\",\"type\":\"address\"}],\"name\":\"reimburseCaller\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"reimburseDelay\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"removeAuthorization\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"x\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"y\",\"type\":\"uint256\"}],\"name\":\"rmultiply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"z\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"x\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"n\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"base\",\"type\":\"uint256\"}],\"name\":\"rpower\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"z\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"x\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"y\",\"type\":\"uint256\"}],\"name\":\"subtract\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"z\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"treasury\",\"outputs\":[{\"internalType\":\"contract StabilityFeeTreasuryLike\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"treasuryAllowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"x\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"y\",\"type\":\"uint256\"}],\"name\":\"wdivide\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"z\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"x\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"y\",\"type\":\"uint256\"}],\"name\":\"wmultiply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"z\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"}]","ContractName":"IncreasingRewardRelayer","CompilerVersion":"v0.6.7+commit.b8d736ae","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000b7e06d980b17f168ce1b57189f8aa34d0254fee200000000000000000000000083533fdd3285f48204215e9cf38c785371258e7600000000000000000000000000000000000000000000000000005af3107a400000000000000000000000000000000000000000000000000000005af3107a40000000000000000000000000000000000000000000033b2e3c9fd0803ce80000000000000000000000000000000000000000000000000000000000000000005460","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}