{"status":"1","message":"OK","result":[{"SourceCode":"// SPDX-License-Identifier: MIT\r\npragma solidity  ^0.7.6;\r\n\r\ninterface IERC20 {\r\n \r\n    modifier onlyPayloadSize(uint numWords) {\r\n        assert(msg.data.length >= numWords * 32 + 4);\r\n        _;\r\n    }\r\n\r\n  /**\r\n   *  Public functions\r\n   */\r\n  function transfer(address to, uint256 value) external returns (bool);\r\n  function approve(address spender, uint256 value) external returns (bool);\r\n  function transferFrom(address from, address to, uint256 value) external returns (bool);\r\n  function balanceOf(address who) external view returns (uint256);\r\n  function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n  /** \r\n   *  Events\r\n   */\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n  event Approval(address indexed owner, address indexed spender, uint256 value);\r\n  event Burn(address indexed from, uint256 value);\r\n}\r\n\r\n abstract contract Context {\r\n    function _msgSender() internal view virtual returns (address payable) {\r\n        return msg.sender;\r\n    }\r\n}\r\n  contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    constructor () {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n  /*\r\n  * ----------------------------------------------------------------------------------------------------------------------------------------------\r\n  * Functions for owner\r\n  * ----------------------------------------------------------------------------------------------------------------------------------------------\r\n  */\r\n  \r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n  }\r\n\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev   Unsigned math operations with safety checks that revert on error\r\n */\r\nlibrary SafeMath {\r\n  /**\r\n  * @dev Multiplies two unsigned integers, reverts on overflow.\r\n  */\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256){\r\n    if (a == 0){\r\n      return 0;\r\n    }\r\n    uint256 c = a * b;\r\n    require(c / a == b,\"Calculation error\");\r\n    return c;\r\n  }\r\n\r\n  /**\r\n   * @dev Integer division of two unsigned integers truncating the quotient, reverts on division by zero.\r\n   */\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256){\r\n    // Solidity only automatically asserts when dividing by 0\r\n    require(b > 0,\"Calculation error\");\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  /**\r\n   * @dev Subtracts two unsigned integers, reverts on overflow (i.e. if subtrahend is greater than minuend).\r\n   */\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256){\r\n    require(b <= a,\"Calculation error\");\r\n    uint256 c = a - b;\r\n    return c;\r\n  }\r\n\r\n  /**\r\n   * @dev Adds two unsigned integers, reverts on overflow.\r\n   */\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256){\r\n    uint256 c = a + b;\r\n    require(c >= a,\"Calculation error\");\r\n    return c;\r\n  }\r\n\r\n  /**\r\n   * @dev Divides two unsigned integers and returns the remainder (unsigned integer modulo),\r\n   * reverts when dividing by zero.\r\n   */\r\n  function mod(uint256 a, uint256 b) internal pure returns (uint256){\r\n    require(b != 0,\"Calculation error\");\r\n    return a % b;\r\n  }\r\n}\r\n\r\n\r\n/**\r\n * @title Standard ERC20 token\r\n */\r\ncontract StandardToken is IERC20, Ownable {\r\n  using SafeMath for uint256;\r\n\r\n  string  private _name;                          // Name of the token.\r\n  string  private _symbol;                        // symbol of the token.\r\n  uint8   private _decimal;                      // variable to maintain decimal precision of the token.\r\n  bool    private _stopped = false;               // state variable to check fail-safe for contract.\r\n  uint256 _totalSupply = 100000000000000000000000000;\r\n  bool crowdSaleStarted = false;\r\n\r\n    mapping (address => mapping (address => uint256)) internal allowed;\r\n    mapping(address => uint256) _balances;\r\n\r\n  /** @dev Returns number of tokens owned by given address\r\n   * @param _owner Address of token owner\r\n   * @return Balance of owner\r\n   */\r\n\r\n    function balanceOf(address _owner) public view override returns (uint256) {\r\n        return _balances[_owner];\r\n    }\r\n\r\n  /** @dev Transfers sender's tokens to a given address. Returns success\r\n   * @param _to Address of token receiver\r\n   * @param _value Number of tokens to transfer\r\n   * @return success Was transfer successful?\r\n   */\r\n\r\n    function transfer(address _to, uint256 _value) public override onlyPayloadSize(2) returns (bool success) {\r\n        if (_balances[msg.sender] >= _value && _value > 0 && _balances[_to].add(_value) > _balances[_to]) {\r\n            _balances[msg.sender] = _balances[msg.sender].sub(_value);\r\n            _balances[_to] = _balances[_to].add(_value);\r\n            emit Transfer(msg.sender, _to, _value); // solhint-disable-line\r\n            return true;\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    /** @dev Allows allowed third party to transfer tokens from one address to another. Returns success\r\n     * @param _from Address from where tokens are withdrawn\r\n     * @param _to Address to where tokens are sent\r\n     * @param _value Number of tokens to transfer\r\n     * @return Was transfer successful?\r\n     */\r\n\r\n    function transferFrom(address _from, address _to, uint256 _value) public override onlyPayloadSize(3) returns (bool) {\r\n        require(_to != address(0));\r\n        require(_value <= _balances[_from]);\r\n        require(_value <= allowed[_from][msg.sender]);\r\n\r\n        _balances[_from] = _balances[_from].sub(_value);\r\n        _balances[_to] = _balances[_to].add(_value);\r\n        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\r\n        emit Transfer(_from, _to, _value); // solhint-disable-line\r\n        return true;\r\n    }\r\n\r\n  /**\r\n   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _value The amount of tokens to be spent.\r\n   */\r\n\r\n    function approve(address _spender, uint256 _value) public override onlyPayloadSize(2) returns (bool) {\r\n        require(_value == 0 || (allowed[msg.sender][_spender] == 0));\r\n        allowed[msg.sender][_spender] = _value;\r\n        emit Approval(msg.sender, _spender, _value); // solhint-disable-line\r\n        return true;\r\n    }\r\n\r\n    function changeApproval(address _spender, uint256 _oldValue, uint256 _newValue) public onlyPayloadSize(3) returns (bool success) {\r\n        require(allowed[msg.sender][_spender] == _oldValue);\r\n        allowed[msg.sender][_spender] = _newValue;\r\n        emit Approval(msg.sender, _spender, _newValue); // solhint-disable-line\r\n        return true;\r\n    }\r\n\r\n  /**\r\n   * @dev Function to check the amount of tokens that an owner allowed to a spender.\r\n   * @param _owner address The address which owns the funds.\r\n   * @param _spender address The address which will spend the funds.\r\n   * @return A uint256 specifying the amount of tokens still available for the spender.\r\n   */\r\n    function allowance(address _owner, address _spender) public view override returns (uint256) {\r\n        return allowed[_owner][_spender];\r\n    }\r\n\r\n /** \r\n   * @dev Internal function that burns an amount of the token of a given account.\r\n   * @param account The account whose tokens will be burnt.\r\n   * @param value The amount that will be burnt.\r\n   */\r\n  function _burn(address account, uint256 value) internal {\r\n    require(account != address(0),\"Invalid account\");\r\n    require(value > 0, \"Invalid Amount\");\r\n    _totalSupply = _totalSupply.sub(value);\r\n    _balances[account] = _balances[account].sub(value);\r\n    emit Transfer(account, address(0), value);\r\n  }\r\n\r\n  /** \r\n   * @dev Burns a specific amount of tokens.\r\n   * @param _value The amount of token to be burned.\r\n   */\r\n  function burn(uint256 _value) public onlyOwner {\r\n    _burn(msg.sender, _value);\r\n  }\r\n    /** \r\n   * @dev Internal function that burns an amount of the token of a given account.\r\n   * @param value The amount that will be burnt.\r\n   */\r\n  function _burnForCrowdsale(uint256 value) internal {\r\n    require(value > 0, \"Invalid Amount\");\r\n    _totalSupply = _totalSupply.sub(value);\r\n    _balances[owner()] = _balances[owner()].sub(value);\r\n    emit Transfer(owner(), address(0), value);\r\n  }\r\n  \r\n  /** \r\n   * @dev Burns a specific amount of tokens.\r\n   * @param _value The amount of token to be burned.\r\n   */\r\n  function burnForCrowdsale(uint256 _value) public {\r\n    _burnForCrowdsale(_value);\r\n  }\r\n\r\n  /** \r\n   * @dev Set crowsales status.\r\n   * @param status status of crowdsale.\r\n   */ \r\n\r\n   function setCrowdSalesStatus(bool status) public {\r\n     crowdSaleStarted = status;\r\n  }\r\n\r\n}\r\n\r\ncontract Crowdsale is Ownable { \r\n \r\n  using SafeMath for uint256;\r\n  uint256 constant CUSTOM_GASLIMIT = 150000;\r\n\r\n  //Crowdsale Token Values\r\n  uint256 public hardCap = 5500000000000000000000;\r\n  uint256 public softCap = 200000000000000000000; \r\n    uint256 public tokensForCrowdSale = 14850000000000000000000000;\r\n  \r\n  uint256 public crowdSaleTokenSold = 0; \r\n  \r\n  //Sale minimum maximum values\r\n  uint256 public minimumTokensInCrowdSale = 0;\r\n  uint256 public MaximumTokensInCrowdSale = 80000000000000000000000;\r\n\r\n   //tokens per ETH in each sale \r\n  uint256 public crowdSaleTokensPerETH = 3200;\r\n  \r\n  uint256 userNum = 0;\r\n\r\n  struct tokenInfo {\r\n    address beneficiary;\r\n    uint256 tokens;\r\n  }\r\n\r\nmapping (uint256 => tokenInfo) public tokenBook;\r\n\r\n  // Address where funds are collected\r\n  address payable wallet = payable(0xd09eCD04f035a0A07a2F16cf442d9fc37692cdb8);\r\n\r\n  address public tokenContractAddress = address(0xa6630B22974F908a98a8139CB12Ec2EbABfbe9D4);\r\n\r\n  bool public crowdSaleStarted = false;\r\n  uint256 public totalRaisedInETH;\r\n  StandardToken token = StandardToken(tokenContractAddress);\r\n  enum Stages {CrowdSaleNotStarted, Pause, CrowdSaleStart, CrowdSaleEnd}\r\n\r\n  Stages currentStage;\r\n  Stages previousStage;\r\n  bool public Paused;\r\n   \r\n  \r\n   modifier CrowdsaleStarted(){\r\n      require(crowdSaleStarted, \"crowdsale not started yet\");\r\n      _;\r\n   }\r\n \r\n    /**\r\n    * Event for token purchase logging\r\n    * @param purchaser who paid for the tokens\r\n    * @param beneficiary who got the tokens\r\n    * @param value weis paid for purchase\r\n    * @param amount amount of tokens purchased\r\n    */\r\n    event TokenPurchase(address indexed purchaser, address indexed beneficiary, uint256 value, uint256 amount);\r\n\r\n    constructor(){\r\n        currentStage = Stages.CrowdSaleNotStarted;\r\n    }\r\n    \r\n    /**\r\n    * @dev fallback function ***DO NOT OVERRIDE***\r\n    */\r\n    receive () external payable {\r\n\r\n        buyTokens(msg.sender); \r\n\r\n    }\r\n\r\n    /**\r\n   * @dev Function for setting token price by owner\r\n   * @param _crowdSaleTokensPerETH token price\r\n   */\r\n  function setCrowdSaleTokenPrice(uint256 _crowdSaleTokensPerETH) public onlyOwner returns(bool){\r\n    require(_crowdSaleTokensPerETH > 0, \"Invalid Price\");\r\n    crowdSaleTokensPerETH = _crowdSaleTokensPerETH;\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Function to set minimum tokens\r\n   * @param value to set the new min value\r\n   */\r\n  function setMinTokensInCrowdSale(uint256 value) public onlyOwner returns(bool){\r\n    require(value > 0,\"Invalid Value\");\r\n    minimumTokensInCrowdSale = value;\r\n    return true;\r\n  }\r\n\r\n  \r\n  /**\r\n   * @dev Function to set maximum tokens\r\n   * @param value to set the new max value\r\n   */\r\n  function setMaxTokensInCrowdSale(uint256 value) public onlyOwner returns(bool){\r\n    require(value > 0,\"Invalid Value\");\r\n    MaximumTokensInCrowdSale = value;\r\n    return true;\r\n  }\r\n\r\n    /**\r\n    * @dev calling this function will pause the sale\r\n    */\r\n\r\n    function pause() public onlyOwner {\r\n      require(Paused == false);\r\n      require(crowdSaleStarted == true);\r\n      previousStage=currentStage;\r\n      currentStage=Stages.Pause;\r\n      Paused = true;\r\n    }\r\n  \r\n    function restartSale() public onlyOwner {\r\n      require(currentStage == Stages.Pause);\r\n      currentStage=previousStage;\r\n      Paused = false;\r\n    }\r\n\r\n    function startCrowdSale() public onlyOwner {\r\n    require(!crowdSaleStarted, \"Crowdsale already started\");\r\n      crowdSaleStarted = true;\r\n      currentStage = Stages.CrowdSaleStart;\r\n      token.setCrowdSalesStatus(true);\r\n    }\r\n\r\n    function endCrowdSale() public onlyOwner{\r\n    require(currentStage == Stages.CrowdSaleStart, \"Crowd sale not started\");\r\n    currentStage = Stages.CrowdSaleEnd;\r\n    for(uint256 i=0; i < userNum; i++){\r\n    token.transferFrom(owner(), tokenBook[i].beneficiary, tokenBook[i].tokens);\r\n    tokenBook[i].tokens = 0;\r\n    }\r\n    userNum = 0;\r\n    uint256 remainingTokens = tokensForCrowdSale.sub(crowdSaleTokenSold);\r\n    token.burnForCrowdsale(remainingTokens);\r\n    crowdSaleStarted = false;\r\n    token.setCrowdSalesStatus(false);\r\n    }\r\n\r\n\r\n    function getStage() public view returns (string memory) {\r\n    if (currentStage == Stages.CrowdSaleStart) return 'Crowd Sale Start';\r\n    else if (currentStage == Stages.CrowdSaleEnd) return 'Crowd Sale End';\r\n    else if (currentStage == Stages.Pause) return 'paused';\r\n    else if (currentStage == Stages.CrowdSaleNotStarted) return 'CrowdSale Not Started';\r\n    return 'Not Found';    \r\n    }\r\n    \r\n\r\n   /**\r\n   * @param beneficiary Address performing the token purchase\r\n   */\r\n   function buyTokens(address beneficiary) CrowdsaleStarted public payable {\r\n    require(Paused != true);\r\n    uint256 ETHAmount = msg.value;\r\n    require(ETHAmount != 0);    \r\n    // calculate token amount to be created\r\n    uint256 tokens = _getTokenAmount(ETHAmount);\r\n    _preValidatePurchase(tokens);\r\n    uint256 userId = userNum;\r\n    tokenBook[userId] = tokenInfo(beneficiary, tokens);\r\n    userNum++;\r\n    _validateCapLimits(ETHAmount);\r\n    wallet.transfer(msg.value);\r\n    if (currentStage == Stages.CrowdSaleStart){\r\n    crowdSaleTokenSold = crowdSaleTokenSold + tokens;   \r\n    }\r\n    emit TokenPurchase(msg.sender, beneficiary, ETHAmount, tokens);\r\n   }\r\n  \r\n   /**\r\n   * @dev Validation of an incoming purchase. Use require statemens to revert state when conditions are not met. Use super to concatenate validations.\r\n   * @param _ETH Value in ETH involved in the purchase\r\n   */\r\n   function _preValidatePurchase(uint256 _ETH) internal view { \r\n\r\n        require(_ETH >= minimumTokensInCrowdSale);\r\n        require(_ETH <= MaximumTokensInCrowdSale);\r\n\r\n      }\r\n    \r\n    /**\r\n    * @dev Validation of the capped restrictions.\r\n    * @param _ETH ETH amount\r\n    */\r\n\r\n    function _validateCapLimits(uint256 _ETH) internal {\r\n     \r\n      totalRaisedInETH = totalRaisedInETH.add(_ETH);\r\n      require(totalRaisedInETH <= hardCap);\r\n   }\r\n  \r\n\r\n  /**\r\n   * @param _ETH Value in ETH to be converted into tokens\r\n   * @return Number of tokens that can be purchased with the specified _ETH\r\n   */\r\n    function _getTokenAmount(uint256 _ETH) CrowdsaleStarted internal view returns (uint256) {\r\n      uint256 tokens;\r\n      if (currentStage == Stages.CrowdSaleStart) {\r\n         tokens = _ETH.mul(crowdSaleTokensPerETH);\r\n      }\r\n      return tokens;\r\n    }\r\n    \r\n\r\n    function isSoftCapReached() public view returns(bool){\r\n        if(totalRaisedInETH >= softCap){\r\n            return true;\r\n        }\r\n        else {\r\n            return false;\r\n        }\r\n    }\r\n\r\n}","ABI":"[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"purchaser\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"beneficiary\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TokenPurchase\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"MaximumTokensInCrowdSale\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"Paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"beneficiary\",\"type\":\"address\"}],\"name\":\"buyTokens\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"crowdSaleStarted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"crowdSaleTokenSold\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"crowdSaleTokensPerETH\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"endCrowdSale\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getStage\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"hardCap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isSoftCapReached\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minimumTokensInCrowdSale\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"restartSale\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_crowdSaleTokensPerETH\",\"type\":\"uint256\"}],\"name\":\"setCrowdSaleTokenPrice\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"setMaxTokensInCrowdSale\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"setMinTokensInCrowdSale\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"softCap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startCrowdSale\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"tokenBook\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"beneficiary\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokens\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenContractAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokensForCrowdSale\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalRaisedInETH\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]","ContractName":"Crowdsale","CompilerVersion":"v0.7.6+commit.7338295f","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://571af6c1b3e39e12aee63255dfee6e418b220ad3f192c74ae687be76c78d12ff"}]}