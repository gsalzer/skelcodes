{"status":"1","message":"OK","result":[{"SourceCode":"{\"Erc20Token.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.6.12;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./SafeMath.sol\\\";\\nimport \\\"./Ownable.sol\\\";\\n\\ncontract Erc20Token is IERC20, Ownable {\\n    using SafeMath for uint256;\\n\\n    mapping(address =\\u003e uint256) internal balances;\\n    mapping(address =\\u003e mapping(address =\\u003e uint256)) internal allowances;\\n    uint256 internal totalSupply_;\\n    string public name;\\n    string public symbol;\\n    uint8 public decimals;\\n    uint256 public inflationRate; // in 10**2\\n    uint256 private maximumSupply;\\n    uint256 public startTime;\\n    uint256 public lastTime;\\n\\n\\n    constructor(uint256 initialSupply, uint256 InfRate, uint256 mSupply) public {\\n        balances[mintAccessor] = initialSupply;\\n        totalSupply_ = initialSupply;\\n        emit Transfer(address(0), mintAccessor, initialSupply);\\n        inflationRate = InfRate;\\n        name = \\\"Pallapay\\\";\\n        symbol = \\\"PALL\\\";\\n        decimals = 8;\\n        maximumSupply = mSupply;\\n        startTime = block.timestamp;\\n        lastTime = block.timestamp;\\n    }\\n\\n\\n    /**\\n     * Transfer token from sender(caller) to \\u0027_to\\u0027 account\\n     *\\n     * Requirements:\\n     *\\n     * - `_to` cannot be the zero address.\\n     * - the sender(caller) must have a balance of at least `_value`.\\n     */\\n    function transfer(address _to, uint256 _value) public override returns (bool) {\\n        require (_value \\u003c= balances[msg.sender], \\\"transfer value should be smaller than your balance\\\");\\n        require (_to != address(0));\\n        balances[msg.sender] = balances[msg.sender].sub(_value);\\n        balances[_to] = balances[_to].add(_value);\\n        emit Transfer(msg.sender, _to, _value);\\n        return true;\\n    }\\n\\n\\n    /**\\n     * sender(caller) transfer \\u0027_value\\u0027 token to \\u0027_to\\u0027 address from \\u0027_from\\u0027 address\\n     *\\n     * Requirements:\\n     *\\n     * - `_to` and `_from` cannot be the zero address.\\n     * - `_from` must have a balance of at least `_value` .\\n     * - the sender(caller) must have allowance for `_from`\\u0027s tokens of at least `_value`.\\n     */\\n    function transferFrom(address _from, address _to, uint256 _value) public override returns (bool) {\\n        require (_from != address(0),\\\"_from address is not valid\\\");\\n        require (_to != address(0),\\\"_to address is not valid\\\");\\n        require(_value\\u003c=allowances[_from][msg.sender], \\\"_value should be smaller than your allowance\\\");\\n        require(_value\\u003c=balances[_from],\\\"_value should be smaller than _from\\u0027s balance\\\");\\n        balances[_from] = balances[_from].sub(_value);\\n        balances[_to] = balances[_to].add(_value);\\n        allowances[_from][msg.sender] = allowances[_from][msg.sender].sub(_value);\\n        emit Transfer(_from, _to, _value);\\n        return true;\\n    }\\n\\n    /**\\n     * change allowance of `_spender` to `_value` by sender(caller)\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address _spender, uint256 _value) public override returns (bool) {\\n        require (_spender != address(0),  \\\"_spender is not valid address\\\");\\n        allowances[msg.sender][_spender] = _value;\\n        emit Approval(msg.sender, _spender, _value);\\n        return true;\\n    }\\n\\n    /**\\n    * Atomically increases the allowance granted to `spender` by the sender(caller).\\n    * Emits an {Approval} event indicating the updated allowance.\\n    *\\n    * Requirements:\\n    *\\n    * - `spender` cannot be the zero address.\\n    */\\n    function increaseApproval(address _spender, uint _addedValue) public override returns (bool) {\\n        require (_spender != address(0),  \\\"_spender is not valid address\\\");\\n        allowances[msg.sender][_spender] = allowances[msg.sender][_spender].add(_addedValue);\\n        emit Approval(msg.sender, _spender, allowances[msg.sender][_spender]);\\n        return true;\\n    }\\n\\n    /**\\n    * Atomically decreases the allowance granted to `spender` by the sender(caller).\\n    * Emits an {Approval} event indicating the updated allowance.\\n    *\\n    * Requirements:\\n    *\\n    * - `_spender` cannot be the zero address.\\n    * - `_spender` must have allowance for the caller of at least `_subtractedValue`.\\n    */\\n    function decreaseApproval(address _spender, uint _subtractedValue) public override returns (bool) {\\n        require (_spender != address(0),  \\\"_spender is not valid address\\\");\\n        uint oldValue = allowances[msg.sender][_spender];\\n        allowances[msg.sender][_spender] = _subtractedValue \\u003e oldValue ? 0 : oldValue.sub(_subtractedValue);\\n        emit Approval(msg.sender, _spender, allowances[msg.sender][_spender]);\\n        return true;\\n    }\\n\\n\\n    /**\\n    * Destroys `amount` tokens from `account`, reducing the\\n    * total supply.\\n    * Emits a {Transfer} event with `to` set to the zero address.\\n    *\\n    * Requirements:\\n    * - `amount` cannot be less than zero.\\n    * - `amount` cannot be more than sender(caller)\\u0027s balance.\\n    */\\n    function burn(uint256 amount) public {\\n        require(amount \\u003e 0, \\\"amount cannot be less than zero\\\");\\n        require(amount \\u003c= balances[msg.sender], \\\"amount to burn is more than the caller\\u0027s balance\\\");\\n        balances[msg.sender] = balances[msg.sender].sub(amount);\\n        totalSupply_ = totalSupply_.sub(amount);\\n        emit Transfer(msg.sender, address(0), amount);\\n    }\\n    \\n\\n    /**\\n    * sender(caller) create a \\u0027value\\u0027 token mint request.\\n    *\\n    * Requirement:\\n    * - sender(Caller) should be mintAccessorAddress\\n    */\\n    function mint(uint256 value) public {\\n        require(msg.sender == mintAccessor,\\\"you are not permitted to create mint request!\\\");\\n        \\n        if (block.timestamp.sub(lastTime) \\u003e= 366 days) {\\n            maximumSupply = maximumSupply.mul(10**4 + inflationRate).div(10**4);\\n            lastTime = block.timestamp;\\n        }\\n\\n        require(totalSupply().add(value) \\u003c= maxSupply(), \\\"mint value more than maxSupply is not allowed!\\\");\\n\\n        totalSupply_ = totalSupply_.add(value);\\n        balances[mintDest] = balances[mintDest].add(value);\\n        emit Transfer(address(0), mintDest, value);\\n    }\\n\\n    function totalSupply() public view returns (uint256) {\\n        return totalSupply_;\\n    }\\n\\n    function balanceOf(address _owner) public view returns (uint256) {\\n        return balances[_owner];\\n    }\\n\\n    function allowance(address _owner, address _spender) public view returns (uint256) {\\n        return allowances[_owner][_spender];\\n    }\\n\\n\\n    function maxSupply() public view returns(uint256) {\\n        return maximumSupply.add(maximumSupply.mul(inflationRate).mul(block.timestamp.sub(lastTime)).div(366 days).div(10**4));\\n    }\\n}\\n\"},\"IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.6.12;\\n\\n\\ninterface IERC20 {\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\\n\\n    function approve(address spender, uint256 value) external returns (bool);\\n\\n    function increaseApproval(address _spender, uint _addedValue) external returns (bool);\\n\\n    function decreaseApproval(address _spender, uint _subtractedValue) external returns (bool);\\n\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n}\\n\\n\"},\"Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.12;\\n\\nimport \\\"./SafeMath.sol\\\";\\nimport \\\"./IERC20.sol\\\";\\ncontract Ownable {\\n    using SafeMath for uint256;\\n    \\n    address public mintAccessor = 0x8ee4ab8b16472eB836Aae484B2C8A642334d3c6e;\\n    address public mintDest = 0x00c06b1ce2FCA0fB76B1Da089894978CfbCc6E8D;\\n    address public mintAccessorChanger = 0xF96EEC085534DAfB6069B24C9464D89DCE4Eb888;\\n    address public mintDestChanger = 0xa5537E58488440A73f6b7958b321bBdDe9af4B59;\\n    \\n    event MintAccessorChanged (address indexed from, address indexed to);\\n    event MintDestChanged (address indexed from, address indexed to);\\n    event MintAccessorChangerChanged (address indexed from, address indexed to);\\n    event MintDestChangerChanged (address indexed from, address indexed to);\\n    \\n    /**\\n    * change destination of mint address\\n    */\\n    function changeMintDestAddress(address addr) public{\\n        require(msg.sender == mintDestChanger);\\n        emit MintDestChanged(mintDest, addr);\\n        mintDest = addr;\\n    }\\n    \\n    /**\\n    * change the mint destination changer\\n    */\\n    function changeMintDestChangerAddress(address addr) public{\\n        require(msg.sender == mintDestChanger);\\n        emit MintDestChangerChanged(mintDestChanger, addr);\\n        mintDestChanger = addr;\\n    }\\n    \\n     /**\\n    * change the mint accessor changer\\n    */\\n    function changeMintAccessorChanger(address addr) public{\\n        require(msg.sender == mintAccessorChanger);\\n        emit MintAccessorChangerChanged(mintAccessorChanger, addr);\\n        mintAccessorChanger = addr;\\n    }\\n    \\n     /**\\n    * change accessor of mint function\\n    */\\n    function changeMintAccessorAddress(address addr) public{\\n        require(msg.sender == mintAccessorChanger);\\n        emit MintAccessorChanged(mintAccessor, addr);\\n        mintAccessor = addr;\\n    }\\n}\\n\\n\"},\"SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.12;\\n\\nlibrary SafeMath {\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c \\u003e= a, \\\"SafeMath: addition overflow\\\");\\n\\n        return c;\\n    }\\n\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return sub(a, b, \\\"SafeMath: subtraction overflow\\\");\\n    }\\n\\n\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b \\u003c= a, errorMessage);\\n        uint256 c = a - b;\\n\\n        return c;\\n    }\\n    \\n    function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\\n        if (a == 0) {\\n          return 0;\\n        }\\n        c = a * b;\\n        assert(c / a == b);\\n        return c;\\n      }\\n    \\n      /**\\n      * @dev Integer division of two numbers, truncating the quotient.\\n      */\\n      function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // assert(b \\u003e 0); // Solidity automatically throws when dividing by 0\\n        // uint256 c = a / b;\\n        // assert(a == b * c + a % b); // There is no case in which this doesn\\u0027t hold\\n        return a / b;\\n      }\\n\\n\\n}\\n\"}}","ABI":"[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"initialSupply\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"InfRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"mSupply\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"MintAccessorChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"MintAccessorChangerChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"MintDestChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"MintDestChangerChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"changeMintAccessorAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"changeMintAccessorChanger\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"changeMintDestAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"changeMintDestChangerAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseApproval\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseApproval\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"inflationRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mintAccessor\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mintAccessorChanger\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mintDest\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mintDestChanger\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"Erc20Token","CompilerVersion":"v0.6.12+commit.27d51765","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000000000000000000000000000016345785d8a000000000000000000000000000000000000000000000000000000000000000001140000000000000000000000000000000000000000000000000164227d0a5429e9","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"ipfs://6b151d5108e509be54427661d3e1f60126e3f00fea6d1c79e6c38a7fdfb567e3"}]}