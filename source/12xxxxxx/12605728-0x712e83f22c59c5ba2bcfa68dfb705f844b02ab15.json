{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.5.16;\r\n\r\ncontract ChainlinkLike {\r\n    function latestAnswer() external view returns(int);\r\n}\r\n\r\ncontract BudConnectorLike {\r\n    function read(bytes32 ilk) external view returns (bytes32);\r\n}\r\n\r\n\r\ncontract BChainlinkInfo {\r\n    address constant ADMIN = 0xf7D44D5a28d5AF27a7F9c8fc6eFe0129e554d7c4;\r\n    address constant POOL_ADMIN = 0x7Ba651De9B7186F6F9665cf5Cc0f19e491dB3538;\r\n    mapping(bytes32 => address) public chainlink;\r\n   \r\n    function setChainlink(bytes32 ilk, address c) external {\r\n        if(chainlink[ilk] == address(0)) require(msg.sender == ADMIN, \"!admin\");\r\n        else require(msg.sender == POOL_ADMIN, \"!poolAdmin\");\r\n        \r\n        chainlink[ilk] = c;\r\n    }\r\n   \r\n    function latestAnswer(bytes32 ilk) external view returns(int) {\r\n        return ChainlinkLike(chainlink[ilk]).latestAnswer();\r\n    }\r\n}\r\n\r\ncontract BudInfo {\r\n    address constant ADMIN = 0xf7D44D5a28d5AF27a7F9c8fc6eFe0129e554d7c4;\r\n    address constant POOL_ADMIN = 0x7Ba651De9B7186F6F9665cf5Cc0f19e491dB3538;\r\n    BudConnectorLike BUD_CONNECTOR = BudConnectorLike(0x2325aa20DEAa9770a978f1dc7C073589ffC79DC3);\r\n   \r\n    mapping(address => bool) public auth;\r\n\r\n    function authorize(address c) external {\r\n        require(msg.sender == ADMIN, \"!admin\");\r\n        auth[c] = true;\r\n    }\r\n    \r\n    function deauthorize(address c) external {\r\n        require(msg.sender == POOL_ADMIN, \"!poolAdmin\");\r\n        auth[c] = false;\r\n    }\r\n\r\n    function latestAnswer(bytes32 ilk) external view returns(int) {\r\n        require(auth[msg.sender], \"!auth\");\r\n        return int(uint(BUD_CONNECTOR.read(ilk)));\r\n    }\r\n}\r\n\r\ncontract ChainlinkDAIWBTC {\r\n    ChainlinkLike constant DAI_USD = ChainlinkLike(0xAed0c38402a5d19df6E4c03F4E2DceD6e29c1ee9);\r\n    ChainlinkLike constant USD_BTC = ChainlinkLike(0xF4030086522a5bEEa4988F8cA5B36dbC97BeE88c);\r\n    \r\n    function latestAnswer() external view returns(int) {\r\n        int daiusd = DAI_USD.latestAnswer();\r\n        int usdbtc = USD_BTC.latestAnswer();\r\n        \r\n        return daiusd * 1e10 * 1e8 / usdbtc;\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"latestAnswer\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"ChainlinkDAIWBTC","CompilerVersion":"v0.5.16+commit.9c3226ce","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"BSD-3-Clause","Proxy":"0","Implementation":"","SwarmSource":"bzzr://4efe792b64a6ab62534d686fcc1c07d4702616e7442e7e13fb1811b3bbfa0aff"}]}