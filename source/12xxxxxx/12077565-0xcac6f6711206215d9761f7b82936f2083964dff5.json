{"status":"1","message":"OK","result":[{"SourceCode":"// SPDX-License-Identifier: UNLICENSED\r\n//   _    _ _   _                __ _                            \r\n//  | |  (_) | | |              / _(_)                           \r\n//  | | ___| |_| |_ ___ _ __   | |_ _ _ __   __ _ _ __   ___ ___ \r\n//  | |/ / | __| __/ _ \\ '_ \\  |  _| | '_ \\ / _` | '_ \\ / __/ _ \\\r\n//  |   <| | |_| ||  __/ | | |_| | | | | | | (_| | | | | (_|  __/\r\n//  |_|\\_\\_|\\__|\\__\\___|_| |_(_)_| |_|_| |_|\\__,_|_| |_|\\___\\___|\r\n//\r\n//  Kitten.Finance Lending\r\n//\r\n//  https://Kitten.Finance\r\n//  https://kittenswap.org\r\n//\r\npragma solidity ^0.6.12;\r\n\r\nlibrary SafeMath {\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require (c >= a, \"!!add\");\r\n        return c;\r\n    }\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require (b <= a, \"!!sub\");\r\n        uint256 c = a - b;\r\n        return c;\r\n    }\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require (b <= a, errorMessage);\r\n        uint c = a - b;\r\n        return c;\r\n    }    \r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n        uint256 c = a * b;\r\n        require (c / a == b, \"!!mul\");\r\n        return c;\r\n    }\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require (b > 0, \"!!div\");\r\n        uint256 c = a / b;\r\n        return c;\r\n    }\r\n}\r\n\r\n////////////////////////////////////////////////////////////////////////////////\r\n\r\ninterface ERC20\r\n{\r\n    function balanceOf ( address account ) external view returns ( uint256 );\r\n    function transfer ( address recipient, uint256 amount ) external returns ( bool );\r\n    function transferFrom ( address sender, address recipient, uint256 amount ) external returns ( bool );\r\n}\r\n\r\n////////////////////////////////////////////////////////////////////////////////\r\n\r\ncontract KittenLending\r\n{\r\n    using SafeMath for uint;\r\n\r\n    ////////////////////////////////////////////////////////////////////////////////\r\n    \r\n    address public govAddr;\r\n    address public treasuryAddr;\r\n    uint public treasuryAmtTotal = 0;\r\n        \r\n    constructor () public {\r\n        govAddr = msg.sender;\r\n        treasuryAddr = msg.sender;\r\n    }\r\n    \r\n    modifier govOnly() {\r\n    \trequire (msg.sender == govAddr, \"!gov\");\r\n    \t_;\r\n    }\r\n    \r\n    function govTransferAddr(address newAddr) external govOnly {\r\n    \trequire (newAddr != address(0), \"!addr\");\r\n    \tgovAddr = newAddr;\r\n    }\r\n    \r\n    function govSetTreasury(address newAddr) external govOnly\r\n    {\r\n    \trequire(newAddr != address(0), \"!addr\");\r\n    \ttreasuryAddr = newAddr;\r\n    }    \r\n    \r\n    uint8 public DEFAULT_devFeeBP = 0;\r\n    \r\n    function govSet_DEFAULT_devFeeBP(uint8 $DEFAULT_devFeeBP) external govOnly {\r\n    \tDEFAULT_devFeeBP = $DEFAULT_devFeeBP;\r\n    }\r\n    \r\n    function govSet_devFeeBP(uint vaultId, uint8 $devFeeBP) external govOnly {\r\n    \tVAULT[vaultId].devFeeBP = $devFeeBP;\r\n    }\r\n    \r\n    mapping (address => uint) public tokenStatus; // 0 = normal, if >= TOKEN_STATUS_BANNED then banned\r\n    uint constant TOKEN_STATUS_BANNED = 1e60;\r\n    uint8 constant VAULT_STATUS_BANNED = 200;\r\n    \r\n    function govSet_tokenStatus(address token, uint $tokenStatus) external govOnly {\r\n    \ttokenStatus[token] = $tokenStatus;\r\n    }\r\n    \r\n    function govSet_vaultStatus(uint vaultId, uint8 $vaultStatus) external govOnly {\r\n    \tVAULT[vaultId].vaultStatus = $vaultStatus;\r\n    }\r\n    \r\n    ////////////////////////////////////////////////////////////////////////////////\r\n\r\n    struct VAULT_INFO \r\n    {\r\n        address token;              // underlying token\r\n\r\n        uint32 tEnd;                // timestamp\r\n        uint128 priceEndScaled;     // scaled by PRICE_SCALE\r\n        uint24 apyBP;               // APY%% in Basis Points\r\n        uint8 devFeeBP;             // devFee%% in Basis Points\r\n        \r\n        uint8 vaultStatus;          // 0 = new, if >= VAULT_STATUS_BANNED then banned\r\n        \r\n        mapping (address => uint) share; // deposit ETH for vaultShare\r\n        uint shareTotal;\r\n        \r\n        mapping (address => uint) tllll; // token locked\r\n        uint tllllTotal;\r\n        \r\n        uint ethTotal;\r\n    }\r\n\r\n    uint constant PRICE_SCALE = 10 ** 18;\r\n\r\n    VAULT_INFO[] public VAULT;\r\n    \r\n    event CREATE_VAULT(address indexed token, uint indexed vaultId, address indexed user, uint32 tEnd, uint128 priceEndScaled, uint24 apyBP);\r\n\r\n    function createVault(address token, uint32 tEnd, uint128 priceEndScaled, uint24 apyBP) external \r\n    {\r\n        VAULT_INFO memory m;\r\n        require (token != address(0), \"!token\");\r\n        require (tokenStatus[token] < TOKEN_STATUS_BANNED, '!tokenBanned');\r\n        require (tEnd > block.timestamp, \"!tEnd\");\r\n        require (priceEndScaled > 0, \"!priceEndScaled\");\r\n        require (apyBP > 0, \"!apyBP\");\r\n    \r\n        m.token = token;\r\n    \tm.tEnd = tEnd;\r\n    \tm.priceEndScaled = priceEndScaled;\r\n        m.apyBP = apyBP;\r\n\r\n    \tm.devFeeBP = DEFAULT_devFeeBP;\r\n    \t\r\n    \tif (msg.sender == govAddr) {\r\n    \t    m.vaultStatus = 100;\r\n    \t}\r\n    \t\r\n    \tVAULT.push(m);\r\n    \t\r\n    \temit CREATE_VAULT(token, VAULT.length - 1, msg.sender, tEnd, priceEndScaled, apyBP);\r\n    }\r\n    \r\n    ////////////////////////////////////////////////////////////////////////////////\r\n    \r\n    function vaultCount() external view returns (uint)\r\n    {\r\n        return VAULT.length;\r\n    }\r\n    \r\n    function getVaultStatForUser(uint vaultId, address user) external view returns (uint share, uint tllll)\r\n    {\r\n        share = VAULT[vaultId].share[user];\r\n        tllll = VAULT[vaultId].tllll[user];\r\n    }\r\n    \r\n    ////////////////////////////////////////////////////////////////////////////////\r\n    \r\n    function getVaultValueInEth(uint vaultId) public view returns (uint)\r\n    {\r\n        VAULT_INFO memory m = VAULT[vaultId];\r\n        \r\n        uint priceNowScaled;\r\n        if (block.timestamp >= m.tEnd)\r\n            priceNowScaled = m.priceEndScaled;\r\n        else {\r\n            uint FACTOR = 10**18;\r\n            priceNowScaled = uint(m.priceEndScaled) * FACTOR / (FACTOR + FACTOR * uint(m.apyBP) * (m.tEnd - block.timestamp) / (365 days) / 10000);\r\n        }\r\n        \r\n        uint ethValue = m.ethTotal;\r\n        uint tokenValue = (m.tllllTotal).mul(priceNowScaled) / (PRICE_SCALE);\r\n        \r\n        return ethValue.add(tokenValue);\r\n    }\r\n    \r\n    function getVaultPriceScaled(uint vaultId) public view returns (uint)\r\n    {\r\n        VAULT_INFO memory m = VAULT[vaultId];\r\n        \r\n        uint priceNowScaled;\r\n        if (block.timestamp >= m.tEnd)\r\n            priceNowScaled = m.priceEndScaled;\r\n        else {\r\n            uint FACTOR = 10**18;\r\n            priceNowScaled = uint(m.priceEndScaled) * FACTOR / (FACTOR + FACTOR * uint(m.apyBP) * (m.tEnd - block.timestamp) / (365 days) / 10000);\r\n        }\r\n        \r\n        return priceNowScaled;\r\n    }\r\n    \r\n    ////////////////////////////////////////////////////////////////////////////////\r\n    \r\n    event LOCK_ETH(uint indexed vaultId, address indexed user, uint ethAmt, uint shareAmt);\r\n    event UNLOCK_ETH(uint indexed vaultId, address indexed user, uint ethAmt, uint shareAmt);\r\n    \r\n    function _mintShare(VAULT_INFO storage m, address user, uint mintAmt) internal {\r\n        m.share[user] = (m.share[user]).add(mintAmt);\r\n        m.shareTotal = (m.shareTotal).add(mintAmt);        \r\n    }\r\n    function _burnShare(VAULT_INFO storage m, address user, uint burnAmt) internal {\r\n        m.share[user] = (m.share[user]).sub(burnAmt, '!notEnoughShare');\r\n        m.shareTotal = (m.shareTotal).sub(burnAmt, '!notEnoughShare');        \r\n    }\r\n    \r\n    function _mintTllll(VAULT_INFO storage m, address user, uint mintAmt) internal {\r\n        m.tllll[user] = (m.tllll[user]).add(mintAmt);\r\n        m.tllllTotal = (m.tllllTotal).add(mintAmt);        \r\n    }\r\n    function _burnTllll(VAULT_INFO storage m, address user, uint burnAmt) internal {\r\n        m.tllll[user] = (m.tllll[user]).sub(burnAmt, '!notEnoughTokenLocked');\r\n        m.tllllTotal = (m.tllllTotal).sub(burnAmt, '!notEnoughTokenLocked');        \r\n    }\r\n    \r\n    function _sendEth(VAULT_INFO storage m, address payable user, uint outAmt) internal {\r\n        m.ethTotal = (m.ethTotal).sub(outAmt, '!notEnoughEthInVault');\r\n        user.transfer(outAmt);\r\n    }\r\n\r\n    function lockEth(uint vaultId) external payable // lock ETH for lending, and mint vaultShare\r\n    {\r\n        VAULT_INFO storage m = VAULT[vaultId];\r\n    \trequire (block.timestamp < m.tEnd, '!vaultEnded');\r\n\r\n        //-------- receive ETH from user --------\r\n        address user = msg.sender;\r\n        uint ethInAmt = msg.value;\r\n        require (ethInAmt > 0, '!ethInAmt');\r\n        \r\n        //-------- compute vaultShare mint amt --------\r\n        uint shareMintAmt = 0;\r\n        if (m.shareTotal == 0) { \r\n            shareMintAmt = ethInAmt; // initial price: 1 share = 1 ETH\r\n        }\r\n        else {                \r\n            shareMintAmt = ethInAmt.mul(m.shareTotal).div(getVaultValueInEth(vaultId));\r\n        }\r\n\r\n        m.ethTotal = (m.ethTotal).add(ethInAmt); // add ETH after computing shareMintAmt\r\n        \r\n        //-------- mint vaultShare to user --------\r\n        _mintShare(m, user, shareMintAmt);\r\n        \r\n        emit LOCK_ETH(vaultId, user, ethInAmt, shareMintAmt);\r\n    }\r\n    \r\n    function unlockEth(uint vaultId, uint shareBurnAmt) external // unlock ETH, and burn vaultShare\r\n    {\r\n        VAULT_INFO storage m = VAULT[vaultId];\r\n    \trequire (block.timestamp < m.tEnd, '!vaultEnded');        \r\n\r\n        require (shareBurnAmt > 0, '!shareBurnAmt');\r\n        address payable user = msg.sender;\r\n        \r\n        //-------- compute ETH out amt --------\r\n        uint ethOutAmt = shareBurnAmt.mul(getVaultValueInEth(vaultId)).div(m.shareTotal);\r\n\r\n        //-------- burn vaultShare from user --------\r\n        _burnShare(m, user, shareBurnAmt);\r\n\r\n        //-------- send ETH to user --------\r\n        _sendEth(m, user, ethOutAmt);\r\n        emit UNLOCK_ETH(vaultId, user, ethOutAmt, shareBurnAmt);\r\n    }\r\n    \r\n    ////////////////////////////////////////////////////////////////////////////////\r\n    \r\n    event LOCK_TOKEN(uint indexed vaultId, address indexed user, uint tokenAmt, uint ethAmt);\r\n    event UNLOCK_TOKEN(uint indexed vaultId, address indexed user, uint tokenAmt, uint ethAmt); \r\n    \r\n    function lockToken(uint vaultId, uint tokenInAmt) external // lock TOKEN to borrow ETH\r\n    {\r\n        VAULT_INFO storage m = VAULT[vaultId];\r\n    \trequire (block.timestamp < m.tEnd, '!vaultEnded');        \r\n\r\n    \trequire (m.vaultStatus < VAULT_STATUS_BANNED, '!vaultBanned');\r\n    \trequire (tokenStatus[m.token] < TOKEN_STATUS_BANNED, '!tokenBanned');\r\n\r\n        require (tokenInAmt > 0, '!tokenInAmt');\r\n        address payable user = msg.sender;\r\n        \r\n        //-------- compute ETH out amt --------\r\n        uint ethOutAmt = tokenInAmt.mul(getVaultPriceScaled(vaultId)) / (PRICE_SCALE);\r\n        \r\n        if (m.devFeeBP > 0) \r\n        {\r\n            uint treasuryAmt = ethOutAmt.mul(uint(m.devFeeBP)) / (10000);\r\n            treasuryAmtTotal = treasuryAmtTotal.add(treasuryAmt);\r\n            \r\n            ethOutAmt = ethOutAmt.sub(treasuryAmt);\r\n            m.ethTotal = (m.ethTotal).sub(treasuryAmt, '!ethInVault'); // remove treasuryAmt\r\n        }\r\n\r\n        //--------  send TOKEN to contract --------\r\n        ERC20(m.token).transferFrom(user, address(this), tokenInAmt);\r\n        _mintTllll(m, user, tokenInAmt);\r\n\r\n        //-------- send ETH to user --------\r\n        _sendEth(m, user, ethOutAmt);\r\n        emit LOCK_TOKEN(vaultId, user, tokenInAmt, ethOutAmt);\r\n    }\r\n    \r\n    function unlockToken(uint vaultId) external payable // payback ETH to unlock TOKEN\r\n    {\r\n        VAULT_INFO storage m = VAULT[vaultId];\r\n    \trequire (block.timestamp < m.tEnd, '!vaultEnded');         \r\n\r\n        //-------- receive ETH from user --------\r\n        uint ethInAmt = msg.value;\r\n        require (ethInAmt > 0, '!ethInAmt');\r\n        \r\n        uint ethReturnAmt = 0;\r\n        address payable user = msg.sender;\r\n        \r\n        //-------- compute LIQUID out amt --------\r\n        uint priceScaled = getVaultPriceScaled(vaultId);\r\n\r\n        uint tokenOutAmt = ethInAmt.mul(PRICE_SCALE).div(priceScaled);\r\n        if (tokenOutAmt > m.tllll[user])\r\n        {\r\n            tokenOutAmt = m.tllll[user];\r\n            ethReturnAmt = ethInAmt.sub(\r\n                    tokenOutAmt.mul(priceScaled) / (PRICE_SCALE)\r\n                );\r\n        }\r\n        \r\n        //-------- send TOKEN to user --------\r\n        _burnTllll(m, user, tokenOutAmt);\r\n        ERC20(m.token).transfer(user, tokenOutAmt);\r\n        \r\n        //-------- return extra ETH to user --------\r\n        m.ethTotal = (m.ethTotal).add(ethInAmt); // add input ETH first\r\n        if (ethReturnAmt > 0)\r\n            _sendEth(m, user, ethReturnAmt);\r\n        emit UNLOCK_TOKEN(vaultId, user, tokenOutAmt, ethInAmt.sub(ethReturnAmt));\r\n    }\r\n    \r\n    ////////////////////////////////////////////////////////////////////////////////\r\n    \r\n    event EXIT_SHARE(uint indexed vaultId, address indexed user, uint shareAmt);\r\n    \r\n    function exitShare(uint vaultId, address payable user) external // exit vaultShare after vault is closed\r\n    {\r\n        VAULT_INFO storage m = VAULT[vaultId];\r\n    \trequire (block.timestamp > m.tEnd, '!vaultStillOpen');\r\n\r\n    \t//-------- compute ETH & TOKEN out amt --------\r\n    \tuint userShareAmt = m.share[user];\r\n    \trequire (userShareAmt > 0, '!userShareAmt');\r\n\r\n    \tuint ethOutAmt = (m.ethTotal).mul(userShareAmt).div(m.shareTotal);\r\n    \tuint tokenOutAmt = (m.tllllTotal).mul(userShareAmt).div(m.shareTotal);\r\n\r\n        //-------- burn vaultShare from user --------\r\n        _burnShare(m, user, userShareAmt);\r\n\r\n        //-------- send ETH & TOKEN to user --------\r\n        if (tokenOutAmt > 0) {\r\n            m.tllllTotal = (m.tllllTotal).sub(tokenOutAmt); // remove tllll\r\n            ERC20(m.token).transfer(user, tokenOutAmt);\r\n        }\r\n        if (ethOutAmt > 0)\r\n            _sendEth(m, user, ethOutAmt);\r\n        \r\n        emit EXIT_SHARE(vaultId, user, userShareAmt);\r\n    }\r\n    \r\n    ////////////////////////////////////////////////////////////////////////////////\r\n\r\n    function treasurySend(uint amt) external\r\n    {\r\n        treasuryAmtTotal = treasuryAmtTotal.sub(amt);\r\n        \r\n        address payable _treasuryAddr = address(uint160(treasuryAddr));\r\n        _treasuryAddr.transfer(amt);\r\n    }    \r\n}","ABI":"[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"vaultId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"tEnd\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"priceEndScaled\",\"type\":\"uint128\"},{\"indexed\":false,\"internalType\":\"uint24\",\"name\":\"apyBP\",\"type\":\"uint24\"}],\"name\":\"CREATE_VAULT\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"vaultId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"shareAmt\",\"type\":\"uint256\"}],\"name\":\"EXIT_SHARE\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"vaultId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"ethAmt\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"shareAmt\",\"type\":\"uint256\"}],\"name\":\"LOCK_ETH\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"vaultId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenAmt\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"ethAmt\",\"type\":\"uint256\"}],\"name\":\"LOCK_TOKEN\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"vaultId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"ethAmt\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"shareAmt\",\"type\":\"uint256\"}],\"name\":\"UNLOCK_ETH\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"vaultId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenAmt\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"ethAmt\",\"type\":\"uint256\"}],\"name\":\"UNLOCK_TOKEN\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DEFAULT_devFeeBP\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"VAULT\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"tEnd\",\"type\":\"uint32\"},{\"internalType\":\"uint128\",\"name\":\"priceEndScaled\",\"type\":\"uint128\"},{\"internalType\":\"uint24\",\"name\":\"apyBP\",\"type\":\"uint24\"},{\"internalType\":\"uint8\",\"name\":\"devFeeBP\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"vaultStatus\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"shareTotal\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tllllTotal\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"ethTotal\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"tEnd\",\"type\":\"uint32\"},{\"internalType\":\"uint128\",\"name\":\"priceEndScaled\",\"type\":\"uint128\"},{\"internalType\":\"uint24\",\"name\":\"apyBP\",\"type\":\"uint24\"}],\"name\":\"createVault\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"vaultId\",\"type\":\"uint256\"},{\"internalType\":\"address payable\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"exitShare\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"vaultId\",\"type\":\"uint256\"}],\"name\":\"getVaultPriceScaled\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"vaultId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getVaultStatForUser\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"share\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tllll\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"vaultId\",\"type\":\"uint256\"}],\"name\":\"getVaultValueInEth\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"govAddr\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newAddr\",\"type\":\"address\"}],\"name\":\"govSetTreasury\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"$DEFAULT_devFeeBP\",\"type\":\"uint8\"}],\"name\":\"govSet_DEFAULT_devFeeBP\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"vaultId\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"$devFeeBP\",\"type\":\"uint8\"}],\"name\":\"govSet_devFeeBP\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"$tokenStatus\",\"type\":\"uint256\"}],\"name\":\"govSet_tokenStatus\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"vaultId\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"$vaultStatus\",\"type\":\"uint8\"}],\"name\":\"govSet_vaultStatus\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newAddr\",\"type\":\"address\"}],\"name\":\"govTransferAddr\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"vaultId\",\"type\":\"uint256\"}],\"name\":\"lockEth\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"vaultId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenInAmt\",\"type\":\"uint256\"}],\"name\":\"lockToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"tokenStatus\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"treasuryAddr\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"treasuryAmtTotal\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amt\",\"type\":\"uint256\"}],\"name\":\"treasurySend\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"vaultId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"shareBurnAmt\",\"type\":\"uint256\"}],\"name\":\"unlockEth\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"vaultId\",\"type\":\"uint256\"}],\"name\":\"unlockToken\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vaultCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"KittenLending","CompilerVersion":"v0.6.12+commit.27d51765","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"ipfs://ba97274f482c94d3c8fa015288167aa16cc0ce4e8e59e4f31f4eb88a1c77be15"}]}