{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/staking/ERC721Staking.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity 0.6.12;\\n\\n// Libraries\\nimport \\\"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\\\";\\n\\n// Contracts\\nimport \\\"./StakingBase.sol\\\";\\n\\n// Interfaces\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721Enumerable.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"../tokens/IMintableERC20.sol\\\";\\nimport \\\"./IERC721Staking.sol\\\";\\n\\ncontract ERC721Staking is StakingBase, IERC721Staking, IERC721Receiver {\\n    using SafeERC20 for IERC20;\\n\\n    constructor(\\n        address settingsAddress,\\n        address outputAddress,\\n        address feeReceiverAddress,\\n        address tokenValuatorAddress,\\n        uint256 outputAmountPerBlock,\\n        uint256 startBlockNumber,\\n        uint256 bonusEndBlockNumber\\n    )\\n        public\\n        StakingBase(\\n            settingsAddress,\\n            outputAddress,\\n            feeReceiverAddress,\\n            tokenValuatorAddress,\\n            outputAmountPerBlock,\\n            startBlockNumber,\\n            bonusEndBlockNumber\\n        )\\n    {}\\n\\n    function stake(uint256 pid, uint256 id)\\n        external\\n        override\\n        existPool(pid)\\n        whenPlatformIsNotPaused()\\n        whenPoolIsNotPaused(pid)\\n        onlyEOAIfSet(msg.sender)\\n    {\\n        _stake(pid, id);\\n    }\\n\\n    function stakeAll(uint256 pid, uint256[] calldata ids)\\n        external\\n        override\\n        existPool(pid)\\n        whenPlatformIsNotPaused()\\n        whenPoolIsNotPaused(pid)\\n        onlyEOAIfSet(msg.sender)\\n    {\\n        require(ids.length > 0, \\\"TOKEN_IDS_REQUIRED\\\");\\n        for (uint256 indexAt = 0; indexAt < ids.length; indexAt++) {\\n            _stake(pid, ids[indexAt]);\\n        }\\n    }\\n\\n    function stakeAll(uint256 pid)\\n        external\\n        override\\n        existPool(pid)\\n        whenPlatformIsNotPaused()\\n        whenPoolIsNotPaused(pid)\\n        onlyEOAIfSet(msg.sender)\\n    {\\n        PoolInfoLib.PoolInfo storage pool = poolInfo[pid];\\n        uint256 userBalance = IERC721Enumerable(pool.token).balanceOf(msg.sender);\\n        require(userBalance > 0, \\\"USER_HASNT_STAKED_TOKENS\\\");\\n        for (uint256 indexAt = 0; indexAt < userBalance; indexAt++) {\\n            _stake(\\n                pid,\\n                IERC721Enumerable(pool.token).tokenOfOwnerByIndex(\\n                    msg.sender,\\n                    userBalance.sub(1).sub(indexAt)\\n                )\\n            );\\n        }\\n    }\\n\\n    function unstake(uint256 pid, uint256 id)\\n        external\\n        override\\n        existPool(pid)\\n        whenPlatformIsNotPaused()\\n        whenPoolIsNotPaused(pid)\\n        onlyEOAIfSet(msg.sender)\\n    {\\n        _unstake(pid, id);\\n    }\\n\\n    function unstakeAll(uint256 pid)\\n        external\\n        override\\n        existPool(pid)\\n        whenPlatformIsNotPaused()\\n        whenPoolIsNotPaused(pid)\\n        onlyEOAIfSet(msg.sender)\\n    {\\n        UserInfoLib.UserInfo storage user = userInfo[pid][msg.sender];\\n        uint256[] memory tokenIDs = user.getTokenIds();\\n        require(tokenIDs.length > 0, \\\"USER_HASNT_STAKED_TOKENS\\\");\\n        for (uint256 indexAt = 0; indexAt < tokenIDs.length; indexAt++) {\\n            _unstake(pid, tokenIDs[indexAt]);\\n        }\\n    }\\n\\n    function unstakeAll(uint256 pid, uint256[] memory ids)\\n        external\\n        override\\n        existPool(pid)\\n        whenPlatformIsNotPaused()\\n        whenPoolIsNotPaused(pid)\\n        onlyEOAIfSet(msg.sender)\\n    {\\n        require(ids.length > 0, \\\"TOKEN_IDS_REQUIRED\\\");\\n        for (uint256 indexAt = 0; indexAt < ids.length; indexAt++) {\\n            _unstake(pid, ids[indexAt]);\\n        }\\n    }\\n\\n    function onERC721Received(\\n        address,\\n        address,\\n        uint256,\\n        bytes calldata\\n    ) external override returns (bytes4) {\\n        // It is implemented to support ERC721 transfers.\\n        return IERC721Receiver.onERC721Received.selector;\\n    }\\n\\n    /* View Functions */\\n\\n    /* Internal Funcctions  */\\n\\n    function _afterUserStake(\\n        uint256 amountOrId,\\n        uint256 valuedAmountOrId,\\n        PoolInfoLib.PoolInfo storage pool,\\n        UserInfoLib.UserInfo storage user\\n    ) internal override {\\n        valuedAmountOrId;\\n        pool;\\n        user.addTokenId(amountOrId);\\n    }\\n\\n    function _afterUserUnstake(\\n        uint256 amountOrId,\\n        uint256 valuedAmountOrId,\\n        PoolInfoLib.PoolInfo storage pool,\\n        UserInfoLib.UserInfo storage user\\n    ) internal override {\\n        valuedAmountOrId;\\n        pool;\\n        user.removeTokenId(amountOrId);\\n    }\\n\\n    function _beforeUserUnstake(\\n        address account,\\n        uint256 amountOrId,\\n        uint256 valuedAmountOrId,\\n        PoolInfoLib.PoolInfo storage pool,\\n        UserInfoLib.UserInfo storage user\\n    ) internal view override {\\n        account;\\n        valuedAmountOrId;\\n        pool;\\n        user.requireHasTokenId(amountOrId);\\n    }\\n\\n    function _safePoolTokenTransferFrom(\\n        address poolToken,\\n        address from,\\n        address to,\\n        uint256,\\n        uint256 amount\\n    ) internal override {\\n        IERC721(poolToken).safeTransferFrom(from, to, amount);\\n    }\\n\\n    function _safePoolTokenTransfer(\\n        address poolToken,\\n        address from,\\n        address to,\\n        uint256,\\n        uint256 amount\\n    ) internal override {\\n        IERC721(poolToken).safeTransferFrom(from, to, amount);\\n    }\\n\\n    function _getPoolTokenBalance(\\n        address poolToken,\\n        address account,\\n        uint256\\n    ) internal view override returns (uint256) {\\n        return IERC721(poolToken).balanceOf(account);\\n    }\\n\\n    function _safeOutputTokenTransfer(\\n        address,\\n        address to,\\n        uint256,\\n        uint256 amount\\n    ) internal override {\\n        uint256 outputBalance = IERC20(output).balanceOf(address(this));\\n        if (amount > outputBalance) {\\n            IERC20(output).safeTransfer(to, outputBalance);\\n        } else {\\n            IERC20(output).safeTransfer(to, amount);\\n        }\\n    }\\n\\n    function _safeOutputTokenMint(\\n        address,\\n        address to,\\n        uint256,\\n        uint256 amount\\n    ) internal override {\\n        IMintableERC20(output).mint(to, amount);\\n    }\\n\\n    function _emergencyUnstakeAll(\\n        address userAccount,\\n        uint256 pid,\\n        PoolInfoLib.PoolInfo storage pool,\\n        UserInfoLib.UserInfo storage user\\n    ) internal override {\\n        user.emergencyUnstakeAll();\\n\\n        uint256 totalTokens = user.getTotalTokens();\\n        require(totalTokens > 0, \\\"USER_HASNT_STAKED_TOKENS\\\");\\n        uint256 totalValuedAmountOrId;\\n        for (uint256 indexAt = 0; indexAt < totalTokens; indexAt++) {\\n            uint256 tokenId = user.getTokenIdAt(indexAt);\\n            uint256 valuedAmountOrId =\\n                ITokenValuator(tokenValuator).valuate(pool.token, userAccount, pid, tokenId);\\n            totalValuedAmountOrId = totalValuedAmountOrId.add(valuedAmountOrId);\\n\\n            _safePoolTokenTransfer(pool.token, address(this), userAccount, pid, tokenId);\\n        }\\n        user.cleanTokenIDs();\\n        pool.totalDeposit = pool.totalDeposit.sub(totalValuedAmountOrId);\\n    }\\n\\n    function _sweep(\\n        address token,\\n        uint256 id,\\n        address to\\n    ) internal override returns (uint256) {\\n        IERC721(token).safeTransferFrom(address(this), to, id);\\n        return id;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"../../math/SafeMath.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using SafeMath for uint256;\\n    using Address for address;\\n\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        // solhint-disable-next-line max-line-length\\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \\\"SafeERC20: decreased allowance below zero\\\");\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) { // Return data is optional\\n            // solhint-disable-next-line max-line-length\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/staking/StakingBase.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity 0.6.12;\\n\\n// Libraries\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\nimport \\\"../libs/UserInfoLib.sol\\\";\\nimport \\\"../libs/PoolInfoLib.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\n\\n// Contracts\\nimport \\\"../base/Base.sol\\\";\\n\\n// Interfaces\\nimport \\\"./IStaking.sol\\\";\\nimport \\\"../valuators/ITokenValuator.sol\\\";\\n\\nabstract contract StakingBase is Base, IStaking {\\n    using Address for address;\\n    using SafeMath for uint256;\\n    using UserInfoLib for UserInfoLib.UserInfo;\\n    using PoolInfoLib for PoolInfoLib.PoolInfo;\\n\\n    uint256 public constant AMOUNT_SCALE = 1e12;\\n\\n    uint256 public constant PERCENTAGE_100 = 100;\\n\\n    uint256 public constant DEFAULT_FEE = 10;\\n\\n    address public immutable output;\\n\\n    address public tokenValuator;\\n\\n    address public feeReceiver;\\n\\n    uint256 public outputPerBlock;\\n\\n    uint256 public startBlock;\\n\\n    // Block number where the bonus rewards end.\\n    uint256 public bonusEndBlock;\\n\\n    // Total allocation poitns. Must be the sum of all allocation points in all pools.\\n    uint256 public totalAllocPoint;\\n\\n    // Info of each pool.\\n    PoolInfoLib.PoolInfo[] public poolInfo;\\n\\n    // Info of each user that stakes tokens.\\n    mapping(uint256 => mapping(address => UserInfoLib.UserInfo)) internal userInfo;\\n\\n    mapping(address => bool) public existsPool;\\n\\n    constructor(\\n        address settingsAddress,\\n        address outputAddress,\\n        address feeReceiverAddress,\\n        address tokenValuatorAddress,\\n        uint256 outputAmountPerBlock,\\n        uint256 startBlockNumber,\\n        uint256 bonusEndBlockNumber\\n    ) public Base(settingsAddress) {\\n        require(outputAddress.isContract(), \\\"OUTPUT_TOKEN_MUST_BE_CONTRACT\\\");\\n        require(feeReceiverAddress != address(0x0), \\\"FEE_RECEIVER_IS_REQUIRED\\\");\\n        require(tokenValuatorAddress.isContract(), \\\"VALUATOR_MUST_BE_CONTRACT\\\");\\n        require(outputAmountPerBlock > 0, \\\"OUTPUT_AMOUNT_GT_ZERO\\\");\\n        require(startBlockNumber > 0, \\\"START_BLOCK_GT_ZERO\\\");\\n        require(startBlockNumber <= bonusEndBlockNumber, \\\"START_LTE_BONUS_END\\\");\\n\\n        output = outputAddress;\\n        feeReceiver = feeReceiverAddress;\\n        tokenValuator = tokenValuatorAddress;\\n        outputPerBlock = outputAmountPerBlock;\\n        startBlock = startBlockNumber;\\n        bonusEndBlock = bonusEndBlockNumber;\\n    }\\n\\n    // Add a new token to the pool. Can only be called by the owner.\\n    // @dev DO NOT add the same token more than once. Rewards will be messed up if you do. A validation was added to verify it.\\n    function addPool(\\n        uint256 allocationPoints,\\n        address token,\\n        bool withUpdate\\n    ) external override onlyConfigurator(msg.sender) {\\n        require(token.isContract(), \\\"TOKEN_MUST_BE_CONTRACT\\\");\\n        require(!existsPool[token], \\\"POOL_FOR_TOKEN_ALREADY_EXISTS\\\");\\n        ITokenValuator(tokenValuator).requireIsConfigured(token);\\n        if (withUpdate) {\\n            _massUpdatePools();\\n        }\\n        uint256 lastRewardBlock = block.number > startBlock ? block.number : startBlock;\\n        totalAllocPoint = totalAllocPoint.add(allocationPoints);\\n        poolInfo.push(\\n            PoolInfoLib.PoolInfo({\\n                totalDeposit: 0,\\n                token: token,\\n                allocPoint: allocationPoints,\\n                lastRewardBlock: lastRewardBlock,\\n                accTokenPerShare: 0,\\n                isPaused: false\\n            })\\n        );\\n        existsPool[token] = true;\\n        emit NewPoolAdded(token, poolInfo.length - 1, allocationPoints, totalAllocPoint);\\n    }\\n\\n    function pausePool(uint256 pid) external override existPool(pid) onlyPauser(msg.sender) {\\n        PoolInfoLib.PoolInfo storage pool = poolInfo[pid];\\n        pool.requireIsNotPaused();\\n        pool.setIsPaused(true);\\n\\n        emit PoolPauseSet(pid, true);\\n    }\\n\\n    function unpausePool(uint256 pid) external override existPool(pid) onlyPauser(msg.sender) {\\n        PoolInfoLib.PoolInfo storage pool = poolInfo[pid];\\n        pool.requireIsPaused();\\n        pool.setIsPaused(false);\\n\\n        emit PoolPauseSet(pid, false);\\n    }\\n\\n    // Update reward variables for all pools. Be careful of gas spending!\\n    function massUpdatePools() external override {\\n        _massUpdatePools();\\n    }\\n\\n    // Withdraw without caring about rewards. EMERGENCY ONLY.\\n    function emergencyUnstakeAll(uint256 pid)\\n        external\\n        override\\n        existPool(pid)\\n        onlyEOAIfSet(msg.sender)\\n    {\\n        PoolInfoLib.PoolInfo storage pool = poolInfo[pid];\\n        UserInfoLib.UserInfo storage user = userInfo[pid][msg.sender];\\n\\n        _emergencyUnstakeAll(msg.sender, pid, pool, user);\\n\\n        emit EmergencyUnstake(msg.sender, pid);\\n    }\\n\\n    function setOutputPerBlock(uint256 newOutputPerBlock)\\n        external\\n        override\\n        onlyConfigurator(msg.sender)\\n    {\\n        require(\\n            newOutputPerBlock > 0 && outputPerBlock != newOutputPerBlock,\\n            \\\"NEW_OUTPUT_PER_BLOCK_INVALID\\\"\\n        );\\n        uint256 oldOutputPerBlock = outputPerBlock;\\n        outputPerBlock = newOutputPerBlock;\\n        emit OutputPerBlockUpdated(oldOutputPerBlock, newOutputPerBlock);\\n    }\\n\\n    function setFeeReceiver(address newFeeReceiver) external override onlyConfigurator(msg.sender) {\\n        require(\\n            newFeeReceiver != address(0x0) && newFeeReceiver != feeReceiver,\\n            \\\"NEW_FEE_RECEIVER_INVALID\\\"\\n        );\\n        address oldFeeReceiver = feeReceiver;\\n        feeReceiver = newFeeReceiver;\\n        emit FeeReceiverUpdated(oldFeeReceiver, newFeeReceiver);\\n    }\\n\\n    function setTokenValuator(address newTokenValuator)\\n        external\\n        override\\n        onlyConfigurator(msg.sender)\\n    {\\n        require(newTokenValuator.isContract(), \\\"TOKEN_VALUATOR_MUST_BE_CONTRACT\\\");\\n        require(newTokenValuator != tokenValuator, \\\"TOKEN_VALUATOR_MUST_BE_NEW\\\");\\n        address oldTokenValutor = tokenValuator;\\n        tokenValuator = newTokenValuator;\\n        emit TokenValuatorUpdated(oldTokenValutor, newTokenValuator);\\n    }\\n\\n    // Update the given pool's token allocation point. Can only be called by the owner.\\n    function setAllocPoint(\\n        uint256 pid,\\n        uint256 newAllocPoint,\\n        bool withUpdate\\n    ) external override onlyConfigurator(msg.sender) existPool(pid) {\\n        if (withUpdate) {\\n            _massUpdatePools();\\n        }\\n        uint256 oldAllocPoint = poolInfo[pid].allocPoint;\\n        totalAllocPoint = totalAllocPoint.sub(poolInfo[pid].allocPoint).add(newAllocPoint);\\n        poolInfo[pid].allocPoint = newAllocPoint;\\n\\n        emit AllocPointsUpdated(pid, oldAllocPoint, newAllocPoint);\\n    }\\n\\n    /* View Functions */\\n    function getTotalPools() external view override returns (uint256) {\\n        return poolInfo.length;\\n    }\\n\\n    function getInfo()\\n        external\\n        view\\n        override\\n        returns (\\n            uint256 totalPools,\\n            uint256 outputPerBlockNumber,\\n            uint256 startBlockNumber,\\n            uint256 bonusEndBlockNumber,\\n            bool bonusFinished,\\n            uint256 totalAllocPoints\\n        )\\n    {\\n        return (\\n            poolInfo.length,\\n            outputPerBlock,\\n            startBlock,\\n            bonusEndBlock,\\n            bonusEndBlock < block.number,\\n            totalAllocPoint\\n        );\\n    }\\n\\n    function getUserInfoForPool(uint256 pid, address account)\\n        external\\n        view\\n        override\\n        returns (\\n            uint256 amount,\\n            uint256 rewardDebt,\\n            uint256[] memory tokenIDs\\n        )\\n    {\\n        amount = userInfo[pid][account].amount;\\n        rewardDebt = userInfo[pid][account].rewardDebt;\\n        tokenIDs = userInfo[pid][account].getTokenIds();\\n    }\\n\\n    function getPoolInfoFor(uint256 pid)\\n        external\\n        view\\n        override\\n        returns (\\n            uint256 totalDeposit,\\n            address token,\\n            uint256 allocPoint,\\n            uint256 lastRewardBlock,\\n            uint256 accTokenPerShare,\\n            bool isPaused\\n        )\\n    {\\n        if (pid >= poolInfo.length) {\\n            return (0, address(0x0), 0, 0, 0, false);\\n        }\\n        totalDeposit = poolInfo[pid].totalDeposit;\\n        token = poolInfo[pid].token;\\n        allocPoint = poolInfo[pid].allocPoint;\\n        lastRewardBlock = poolInfo[pid].lastRewardBlock;\\n        accTokenPerShare = poolInfo[pid].accTokenPerShare;\\n        isPaused = poolInfo[pid].isPaused;\\n    }\\n\\n    // Return reward multiplier over the given fromBlock to toBlock block.\\n    function getMultiplier(uint256 fromBlock, uint256 toBlock)\\n        external\\n        view\\n        override\\n        returns (uint256)\\n    {\\n        return _getMultiplier(fromBlock, toBlock);\\n    }\\n\\n    function getPendingTokens(uint256 pid, address account)\\n        external\\n        view\\n        override\\n        returns (uint256)\\n    {\\n        return _getPendingTokens(pid, account);\\n    }\\n\\n    function getAllPendingTokens(address account) external view override returns (uint256) {\\n        uint256 allPendingTokens = 0;\\n        for (uint256 index = 0; index < poolInfo.length; index += 1) {\\n            allPendingTokens = allPendingTokens.add(_getPendingTokens(index, account));\\n        }\\n        return allPendingTokens;\\n    }\\n\\n    function getPools()\\n        external\\n        view\\n        override\\n        returns (\\n            address[] memory tokens,\\n            uint256[] memory totalDeposit,\\n            uint256[] memory allocPoints,\\n            uint256[] memory lastRewardBlocks,\\n            uint256[] memory accTokenPerShares,\\n            bool[] memory isPaused,\\n            uint256 totalPools\\n        )\\n    {\\n        totalPools = poolInfo.length;\\n        tokens = new address[](totalPools);\\n        totalDeposit = new uint256[](totalPools);\\n        allocPoints = new uint256[](totalPools);\\n        lastRewardBlocks = new uint256[](totalPools);\\n        accTokenPerShares = new uint256[](totalPools);\\n        isPaused = new bool[](totalPools);\\n        for (uint256 indexAt = 0; indexAt < totalPools; indexAt++) {\\n            tokens[indexAt] = poolInfo[indexAt].token;\\n            totalDeposit[indexAt] = poolInfo[indexAt].totalDeposit;\\n            allocPoints[indexAt] = poolInfo[indexAt].allocPoint;\\n            lastRewardBlocks[indexAt] = poolInfo[indexAt].lastRewardBlock;\\n            accTokenPerShares[indexAt] = poolInfo[indexAt].accTokenPerShare;\\n            isPaused[indexAt] = poolInfo[indexAt].isPaused;\\n        }\\n    }\\n\\n    function sweep(address token, uint256 amountOrId) external override onlyOwner(msg.sender) {\\n        require(!existsPool[token], \\\"TOKEN_POOL_EXIST\\\");\\n        uint256 amountOrIdSweeped = _sweep(token, amountOrId, msg.sender);\\n\\n        emit TokenSweeped(token, amountOrIdSweeped);\\n    }\\n\\n    /* Internal Funcctions  */\\n\\n    // Staking tokens for token allocation.\\n    function _stake(uint256 pid, uint256 amountOrId) internal {\\n        PoolInfoLib.PoolInfo storage pool = poolInfo[pid];\\n        UserInfoLib.UserInfo storage user = userInfo[pid][msg.sender];\\n        uint256 valuedAmountOrId =\\n            ITokenValuator(tokenValuator).valuate(pool.token, msg.sender, pid, amountOrId);\\n\\n        _beforeUserStake(msg.sender, amountOrId, valuedAmountOrId, pool, user);\\n        _updatePool(pid);\\n        if (user.amount > 0) {\\n            uint256 pending =\\n                user.amount.mul(pool.accTokenPerShare).div(AMOUNT_SCALE).sub(user.rewardDebt);\\n            _safeOutputTokenTransfer(address(this), msg.sender, pid, pending);\\n        }\\n\\n        _safePoolTokenTransferFrom(pool.token, msg.sender, address(this), pid, amountOrId);\\n\\n        user.stake(valuedAmountOrId, pool.accTokenPerShare);\\n        pool.stake(valuedAmountOrId);\\n\\n        _afterUserStake(amountOrId, valuedAmountOrId, pool, user);\\n        emit Staked(msg.sender, pid, amountOrId, valuedAmountOrId);\\n    }\\n\\n    // Unstake tokens from this contract.\\n    function _unstake(uint256 pid, uint256 amountOrId) internal {\\n        PoolInfoLib.PoolInfo storage pool = poolInfo[pid];\\n        UserInfoLib.UserInfo storage user = userInfo[pid][msg.sender];\\n\\n        uint256 valuedAmountOrId =\\n            ITokenValuator(tokenValuator).valuate(pool.token, msg.sender, pid, amountOrId);\\n        _beforeUserUnstake(msg.sender, amountOrId, valuedAmountOrId, pool, user);\\n        require(user.amount >= valuedAmountOrId, \\\"VALUED_AMOUNT_EXCEEDS_STAKED\\\");\\n        _updatePool(pid);\\n        uint256 pending =\\n            user.amount.mul(pool.accTokenPerShare).div(AMOUNT_SCALE).sub(user.rewardDebt);\\n        _safeOutputTokenTransfer(address(this), msg.sender, pid, pending);\\n\\n        user.unstake(valuedAmountOrId, pool.accTokenPerShare);\\n        pool.unstake(valuedAmountOrId);\\n        _afterUserUnstake(amountOrId, valuedAmountOrId, pool, user);\\n\\n        _safePoolTokenTransfer(pool.token, address(this), msg.sender, pid, amountOrId);\\n\\n        emit Unstaked(msg.sender, pid, amountOrId, valuedAmountOrId);\\n    }\\n\\n    function _beforeUserStake(\\n        address account,\\n        uint256 amountOrId,\\n        uint256 valuedAmountOrId,\\n        PoolInfoLib.PoolInfo storage pool,\\n        UserInfoLib.UserInfo storage user\\n    ) internal view virtual {}\\n\\n    function _afterUserStake(\\n        uint256 amountOrId,\\n        uint256 valuedAmountOrId,\\n        PoolInfoLib.PoolInfo storage pool,\\n        UserInfoLib.UserInfo storage user\\n    ) internal virtual {}\\n\\n    function _afterUserUnstake(\\n        uint256 amountOrId,\\n        uint256 valuedAmountOrId,\\n        PoolInfoLib.PoolInfo storage pool,\\n        UserInfoLib.UserInfo storage user\\n    ) internal virtual {}\\n\\n    function _beforeUserUnstake(\\n        address account,\\n        uint256 amountOrId,\\n        uint256 valuedAmountOrId,\\n        PoolInfoLib.PoolInfo storage pool,\\n        UserInfoLib.UserInfo storage user\\n    ) internal view virtual {}\\n\\n    function _emergencyUnstakeAll(\\n        address userAccount,\\n        uint256 pid,\\n        PoolInfoLib.PoolInfo storage pool,\\n        UserInfoLib.UserInfo storage user\\n    ) internal virtual {}\\n\\n    function _safePoolTokenTransferFrom(\\n        address poolToken,\\n        address from,\\n        address to,\\n        uint256 pid,\\n        uint256 amountOrIId\\n    ) internal virtual;\\n\\n    function _safePoolTokenTransfer(\\n        address poolToken,\\n        address from,\\n        address to,\\n        uint256 pid,\\n        uint256 amountOrIId\\n    ) internal virtual;\\n\\n    function _getPoolTokenBalance(\\n        address poolToken,\\n        address account,\\n        uint256 pid\\n    ) internal view virtual returns (uint256);\\n\\n    function _safeOutputTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 pid,\\n        uint256 amount\\n    ) internal virtual;\\n\\n    function _safeOutputTokenMint(\\n        address from,\\n        address to,\\n        uint256 pid,\\n        uint256 amount\\n    ) internal virtual;\\n\\n    function _sweep(\\n        address token,\\n        uint256 amountOrId,\\n        address to\\n    ) internal virtual returns (uint256);\\n\\n    // Update reward variables of the given pool to be up-to-date.\\n    function _updatePool(uint256 pid) internal {\\n        PoolInfoLib.PoolInfo storage pool = poolInfo[pid];\\n        if (block.number <= pool.lastRewardBlock) {\\n            return;\\n        }\\n\\n        uint256 tokenSupply = _getPoolTokenBalance(pool.token, address(this), pid);\\n        if (tokenSupply == 0) {\\n            pool.lastRewardBlock = block.number;\\n            return;\\n        }\\n        uint256 multiplier = _getMultiplier(pool.lastRewardBlock, block.number);\\n        uint256 tokenReward =\\n            multiplier.mul(outputPerBlock).mul(pool.allocPoint).div(totalAllocPoint);\\n\\n        _safeOutputTokenMint(\\n            address(this),\\n            feeReceiver,\\n            pid,\\n            tokenReward.mul(_getFee()).div(PERCENTAGE_100)\\n        );\\n        _safeOutputTokenMint(address(this), address(this), pid, tokenReward);\\n\\n        pool.accTokenPerShare = pool.accTokenPerShare.add(\\n            tokenReward.mul(AMOUNT_SCALE).div(tokenSupply)\\n        );\\n        pool.lastRewardBlock = block.number;\\n    }\\n\\n    function _massUpdatePools() internal {\\n        uint256 length = poolInfo.length;\\n        for (uint256 pid = 0; pid < length; ++pid) {\\n            _updatePool(pid);\\n        }\\n    }\\n\\n    function _getFee() internal view returns (uint256) {\\n        uint256 fee = _getPlatformSettingsValue(_settingsConsts().FEE());\\n        return fee == 0 ? DEFAULT_FEE : fee;\\n    }\\n\\n    /**\\n        @return The bonus muliplier for early stakers.\\n     */\\n    function _getBonusMultiplier() internal view returns (uint256) {\\n        uint256 bonusMultiplier = _getPlatformSettingsValue(_settingsConsts().BONUS_MULTIPLIER());\\n        return bonusMultiplier == 0 ? 1 : bonusMultiplier;\\n    }\\n\\n    // Return reward multiplier over the given fromBlock to toBlock block.\\n    function _getMultiplier(uint256 fromBlock, uint256 toBlock) internal view returns (uint256) {\\n        uint256 bonusMultiplier = _getBonusMultiplier();\\n\\n        if (toBlock <= bonusEndBlock) {\\n            return toBlock.sub(fromBlock).mul(bonusMultiplier);\\n        } else if (fromBlock >= bonusEndBlock) {\\n            return toBlock.sub(fromBlock);\\n        } else {\\n            return\\n                bonusEndBlock.sub(fromBlock).mul(bonusMultiplier).add(toBlock.sub(bonusEndBlock));\\n        }\\n    }\\n\\n    function _getPendingTokens(uint256 pid, address account) internal view returns (uint256) {\\n        if (pid >= poolInfo.length) {\\n            return 0;\\n        }\\n        PoolInfoLib.PoolInfo storage pool = poolInfo[pid];\\n        UserInfoLib.UserInfo storage user = userInfo[pid][account];\\n        uint256 accTokenPerShare = pool.accTokenPerShare;\\n        uint256 tokenSupply = _getPoolTokenBalance(pool.token, address(this), pid);\\n\\n        if (block.number > pool.lastRewardBlock && tokenSupply != 0) {\\n            uint256 multiplier = _getMultiplier(pool.lastRewardBlock, block.number);\\n            uint256 tokenReward =\\n                multiplier.mul(outputPerBlock).mul(pool.allocPoint).div(totalAllocPoint);\\n            accTokenPerShare = accTokenPerShare.add(tokenReward.mul(AMOUNT_SCALE).div(tokenSupply));\\n        }\\n        return user.amount.mul(accTokenPerShare).div(AMOUNT_SCALE).sub(user.rewardDebt);\\n    }\\n\\n    /** Modifiers */\\n\\n    modifier onlyEOAIfSet(address account) {\\n        uint256 allowOnlyEOA = _getPlatformSettingsValue(_settingsConsts().ALLOW_ONLY_EOA());\\n        if (account.isContract()) {\\n            // allowOnlyEOA = 0 => Contracts and External Owned Accounts\\n            // allowOnlyEOA = 1 => Only External Owned Accounts (not contracts).\\n            require(allowOnlyEOA == 0, \\\"ONLY_EOA_ALLOWED\\\");\\n        }\\n        _;\\n    }\\n\\n    modifier existPool(uint256 pid) {\\n        require(poolInfo.length > pid, \\\"POOL_ID_DOESNT_EXIST\\\");\\n        _;\\n    }\\n\\n    modifier whenPoolIsNotPaused(uint256 pid) {\\n        PoolInfoLib.PoolInfo storage pool = poolInfo[pid];\\n        require(!pool.isPaused, \\\"POOL_IS_PAUSED\\\");\\n        _;\\n    }\\n\\n    modifier whenPoolIsPaused(uint256 pid) {\\n        PoolInfoLib.PoolInfo storage pool = poolInfo[pid];\\n        require(pool.isPaused, \\\"POOL_ISNT_PAUSED\\\");\\n        _;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/IERC721.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.2 <0.8.0;\\n\\nimport \\\"../../introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    /**\\n      * @dev Safely transfers `tokenId` token from `from` to `to`.\\n      *\\n      * Requirements:\\n      *\\n      * - `from` cannot be the zero address.\\n      * - `to` cannot be the zero address.\\n      * - `tokenId` token must exist and be owned by `from`.\\n      * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n      * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n      *\\n      * Emits a {Transfer} event.\\n      */\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\\n     */\\n    function onERC721Received(address operator, address from, uint256 tokenId, bytes calldata data) external returns (bytes4);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/IERC721Enumerable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.2 <0.8.0;\\n\\nimport \\\"./IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Enumerable is IERC721 {\\n\\n    /**\\n     * @dev Returns the total amount of tokens stored by the contract.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns a token ID owned by `owner` at a given `index` of its token list.\\n     * Use along with {balanceOf} to enumerate all of ``owner``'s tokens.\\n     */\\n    function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256 tokenId);\\n\\n    /**\\n     * @dev Returns a token ID at a given `index` of all the tokens stored by the contract.\\n     * Use along with {totalSupply} to enumerate all tokens.\\n     */\\n    function tokenByIndex(uint256 index) external view returns (uint256);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"contracts/tokens/IMintableERC20.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity 0.6.12;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ninterface IMintableERC20 is IERC20 {\\n    function mint(address account, uint256 amount) external;\\n}\\n\"\r\n    },\r\n    \"contracts/staking/IERC721Staking.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity 0.6.12;\\n\\n// Libraries\\n\\n// Contracts\\n\\n// Interfaces\\nimport \\\"./IStaking.sol\\\";\\n\\ninterface IERC721Staking is IStaking {\\n    function stakeAll(uint256 pid, uint256[] calldata ids) external;\\n\\n    function stakeAll(uint256 pid) external;\\n\\n    function unstakeAll(uint256 pid) external;\\n\\n    function unstakeAll(uint256 pid, uint256[] memory ids) external;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/math/SafeMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        uint256 c = a + b;\\n        if (c < a) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b > a) return (false, 0);\\n        return (true, a - b);\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) return (true, 0);\\n        uint256 c = a * b;\\n        if (c / a != b) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a / b);\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a % b);\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b <= a, \\\"SafeMath: subtraction overflow\\\");\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0) return 0;\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: division by zero\\\");\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: modulo by zero\\\");\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.2 <0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/libs/UserInfoLib.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity 0.6.12;\\n\\n// Libraries\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/EnumerableSet.sol\\\";\\n\\nlibrary UserInfoLib {\\n    using EnumerableSet for EnumerableSet.UintSet;\\n    using SafeMath for uint256;\\n\\n    uint256 private constant AMOUNT_SCALE = 1e12;\\n\\n    // Info of each user.\\n    struct UserInfo {\\n        EnumerableSet.UintSet tokenIds;\\n        uint256 amount; // How many tokens the user has provided.\\n        uint256 rewardDebt; // Reward debt. See explanation below.\\n        //\\n        // We do some fancy math here. Basically, any point in time, the amount of TOKENs\\n        // entitled to a user but is pending to be distributed is:\\n        //\\n        //   pending reward = (user.amount * pool.accTokenPerShare) - user.rewardDebt\\n        //\\n        // Whenever a user deposits or withdraws LP tokens to a pool. Here's what happens:\\n        //   1. The pool's `accTokenPerShare` (and `lastRewardBlock`) gets updated.\\n        //   2. User receives the pending reward sent to his/her address.\\n        //   3. User's `amount` gets updated.\\n        //   4. User's `rewardDebt` gets updated.\\n    }\\n\\n    function hasTokenId(UserInfo storage self, uint256 tokenId) internal view returns (bool) {\\n        return self.tokenIds.contains(tokenId);\\n    }\\n\\n    function getTotalTokens(UserInfo storage self) internal view returns (uint256) {\\n        return self.tokenIds.length();\\n    }\\n\\n    function getTokenIdAt(UserInfo storage self, uint256 index) internal view returns (uint256) {\\n        return self.tokenIds.at(index);\\n    }\\n\\n    function getTokenIds(UserInfo storage self) internal view returns (uint256[] memory tokenIDs) {\\n        tokenIDs = new uint256[](self.tokenIds.length());\\n        for (uint256 indexAt = 0; indexAt < self.tokenIds.length(); indexAt++) {\\n            tokenIDs[indexAt] = self.tokenIds.at(indexAt);\\n        }\\n        return tokenIDs;\\n    }\\n\\n    function requireHasTokenId(UserInfo storage self, uint256 tokenId) internal view {\\n        require(hasTokenId(self, tokenId), \\\"ACCOUNT_DIDNT_STAKE_TOKEN_ID\\\");\\n    }\\n\\n    function addTokenId(UserInfo storage self, uint256 tokenId) internal {\\n        self.tokenIds.add(tokenId);\\n    }\\n\\n    function removeTokenId(UserInfo storage self, uint256 tokenId) internal {\\n        self.tokenIds.remove(tokenId);\\n    }\\n\\n    function stake(\\n        UserInfo storage self,\\n        uint256 valuedAmountOrId,\\n        uint256 accTokenPerShare\\n    ) internal {\\n        self.amount = self.amount.add(valuedAmountOrId);\\n        self.rewardDebt = self.amount.mul(accTokenPerShare).div(AMOUNT_SCALE);\\n    }\\n\\n    function unstake(\\n        UserInfo storage self,\\n        uint256 valuedAmountOrId,\\n        uint256 accTokenPerShare\\n    ) internal {\\n        self.amount = self.amount.sub(valuedAmountOrId);\\n        self.rewardDebt = self.amount.mul(accTokenPerShare).div(AMOUNT_SCALE);\\n    }\\n\\n    function emergencyUnstakeAll(UserInfo storage self) internal {\\n        self.amount = 0;\\n        self.rewardDebt = 0;\\n    }\\n\\n    function cleanTokenIDs(UserInfo storage self) internal {\\n        delete self.tokenIds;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/libs/PoolInfoLib.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity 0.6.12;\\n\\n// Interfaces\\n\\n// Libraries\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\n\\nlibrary PoolInfoLib {\\n    using SafeMath for uint256;\\n\\n    // Info of each pool.\\n    struct PoolInfo {\\n        uint256 totalDeposit;\\n        address token; // Address of token contract.\\n        uint256 allocPoint; // How many allocation points assigned to this pool. Tokens to distribute per block.\\n        uint256 lastRewardBlock; // Last block number that tokens distribution occurs.\\n        uint256 accTokenPerShare; // Accumulated tokens per share, times 1e12. See below.\\n        bool isPaused;\\n    }\\n\\n    function setIsPaused(PoolInfo storage self, bool newIsPaused) internal {\\n        self.isPaused = newIsPaused;\\n    }\\n\\n    function requireIsNotPaused(PoolInfo storage self) internal view {\\n        require(!self.isPaused, \\\"POOL_IS_PAUSED\\\");\\n    }\\n\\n    function requireIsPaused(PoolInfo storage self) internal view {\\n        require(self.isPaused, \\\"POOL_ISNT_PAUSED\\\");\\n    }\\n\\n    function stake(PoolInfo storage self, uint256 valuedAmount) internal {\\n        self.totalDeposit = self.totalDeposit.add(valuedAmount);\\n    }\\n\\n    function unstake(PoolInfo storage self, uint256 valuedAmount) internal {\\n        self.totalDeposit = self.totalDeposit.sub(valuedAmount);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/base/Base.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity 0.6.12;\\n\\n// Contracts\\nimport \\\"../roles/RolesManagerConsts.sol\\\";\\nimport \\\"../settings/PlatformSettingsConsts.sol\\\";\\n\\n// Libraries\\nimport \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\n\\n// Interfaces\\nimport \\\"../settings/IPlatformSettings.sol\\\";\\nimport \\\"../roles/IRolesManager.sol\\\";\\n\\nabstract contract Base {\\n    using Address for address;\\n\\n    /* Constant Variables */\\n\\n    /* State Variables */\\n\\n    address public settings;\\n\\n    /* Modifiers */\\n\\n    modifier whenPlatformIsPaused() {\\n        require(_settings().isPaused(), \\\"PLATFORM_ISNT_PAUSED\\\");\\n        _;\\n    }\\n\\n    modifier whenPlatformIsNotPaused() {\\n        require(!_settings().isPaused(), \\\"PLATFORM_IS_PAUSED\\\");\\n        _;\\n    }\\n\\n    modifier onlyOwner(address account) {\\n        _requireHasRole(\\n            RolesManagerConsts(_rolesManager().consts()).OWNER_ROLE(),\\n            account,\\n            \\\"SENDER_ISNT_OWNER\\\"\\n        );\\n        _;\\n    }\\n\\n    modifier onlyMinter(address account) {\\n        _requireHasRole(\\n            RolesManagerConsts(_rolesManager().consts()).MINTER_ROLE(),\\n            account,\\n            \\\"SENDER_ISNT_MINTER\\\"\\n        );\\n        _;\\n    }\\n\\n    modifier onlyConfigurator(address account) {\\n        _requireHasRole(\\n            RolesManagerConsts(_rolesManager().consts()).CONFIGURATOR_ROLE(),\\n            account,\\n            \\\"SENDER_ISNT_CONFIGURATOR\\\"\\n        );\\n        _;\\n    }\\n\\n    modifier onlyPauser(address account) {\\n        _requireHasRole(\\n            RolesManagerConsts(_rolesManager().consts()).PAUSER_ROLE(),\\n            account,\\n            \\\"SENDER_ISNT_PAUSER\\\"\\n        );\\n        _;\\n    }\\n\\n    /* Constructor */\\n\\n    constructor(address settingsAddress) internal {\\n        require(settingsAddress.isContract(), \\\"SETTINGS_MUST_BE_CONTRACT\\\");\\n        settings = settingsAddress;\\n    }\\n\\n    function setSettings(address newSettings) external onlyOwner(msg.sender) {\\n        require(newSettings.isContract(), \\\"SETTINGS_MUST_BE_CONTRACT\\\");\\n        require(newSettings != settings, \\\"SETTINGS_MUST_BE_NEW\\\");\\n        address oldSettings = settings;\\n        settings = newSettings;\\n        emit PlatformSettingsUpdated(oldSettings, newSettings);\\n    }\\n\\n    /** Internal Functions */\\n\\n    function _settings() internal view returns (IPlatformSettings) {\\n        return IPlatformSettings(settings);\\n    }\\n\\n    function _settingsConsts() internal view returns (PlatformSettingsConsts) {\\n        return PlatformSettingsConsts(_settings().consts());\\n    }\\n\\n    function _rolesManager() internal view returns (IRolesManager) {\\n        return IRolesManager(IPlatformSettings(settings).rolesManager());\\n    }\\n\\n    function _requireHasRole(\\n        bytes32 role,\\n        address account,\\n        string memory message\\n    ) internal view {\\n        IRolesManager rolesManager = _rolesManager();\\n        rolesManager.requireHasRole(role, account, message);\\n    }\\n\\n    function _getPlatformSettingsValue(bytes32 name) internal view returns (uint256) {\\n        return _settings().getSettingValue(name);\\n    }\\n\\n    /** Events */\\n\\n    event PlatformSettingsUpdated(address indexed oldSettings, address indexed newSettings);\\n}\\n\"\r\n    },\r\n    \"contracts/staking/IStaking.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity 0.6.12;\\n\\n// Libraries\\n\\n// Contracts\\n\\n// Interfaces\\n\\ninterface IStaking {\\n    function stake(uint256 pid, uint256 amountOrId) external;\\n\\n    function unstake(uint256 pid, uint256 amountOrId) external;\\n\\n    function addPool(\\n        uint256 allocationPoints,\\n        address token,\\n        bool withUpdate\\n    ) external;\\n\\n    function pausePool(uint256 pid) external;\\n\\n    function unpausePool(uint256 pid) external;\\n\\n    function sweep(address token, uint256 amountOrId) external;\\n\\n    // Update reward variables for all pools. Be careful of gas spending!\\n    function massUpdatePools() external;\\n\\n    // Withdraw without caring about rewards. EMERGENCY ONLY.\\n    function emergencyUnstakeAll(uint256 pid) external;\\n\\n    // Update the given pool's token allocation point. Can only be called by the owner.\\n    function setAllocPoint(\\n        uint256 pid,\\n        uint256 newAllocPoint,\\n        bool withUpdate\\n    ) external;\\n\\n    function setOutputPerBlock(uint256 newOutputPerBlock) external;\\n\\n    function setFeeReceiver(address newFeeReceiver) external;\\n\\n    function setTokenValuator(address newTokenValuator) external;\\n\\n    /* View Functions */\\n\\n    function getTotalPools() external view returns (uint256);\\n\\n    function getInfo()\\n        external\\n        view\\n        returns (\\n            uint256 totalPools,\\n            uint256 outputPerBlockNumber,\\n            uint256 startBlockNumber,\\n            uint256 bonusEndBlockNumber,\\n            bool bonusFinished,\\n            uint256 totalAllocPoints\\n        );\\n\\n    function getUserInfoForPool(uint256 pid, address account)\\n        external\\n        view\\n        returns (\\n            uint256 amount,\\n            uint256 rewardDebt,\\n            uint256[] memory tokenIDs\\n        );\\n\\n    function getPoolInfoFor(uint256 pid)\\n        external\\n        view\\n        returns (\\n            uint256 totalDeposit,\\n            address token,\\n            uint256 allocPoint,\\n            uint256 lastRewardBlock,\\n            uint256 accTokenPerShare,\\n            bool isPaused\\n        );\\n\\n    // Return reward multiplier over the given fromBlock to toBlock block.\\n    function getMultiplier(uint256 fromBlock, uint256 toBlock) external view returns (uint256);\\n\\n    function getPendingTokens(uint256 pid, address account) external view returns (uint256);\\n\\n    function getAllPendingTokens(address account) external view returns (uint256);\\n\\n    function getPools()\\n        external\\n        view\\n        returns (\\n            address[] memory tokens,\\n            uint256[] memory totalDeposit,\\n            uint256[] memory allocPoints,\\n            uint256[] memory lastRewardBlocks,\\n            uint256[] memory accTokenPerShares,\\n            bool[] memory isPaused,\\n            uint256 totalPools\\n        );\\n\\n    /// @notice event emitted when a user has staked a token\\n    event Staked(address indexed user, uint256 pid, uint256 amount, uint256 valuedAmount);\\n\\n    /// @notice event emitted when a user has unstaked a token\\n    event Unstaked(address indexed user, uint256 pid, uint256 amount, uint256 valuedAmount);\\n\\n    /// @notice event emitted when a user claims reward\\n    event RewardPaid(address indexed user, uint256 pid, uint256 reward);\\n\\n    /// @notice Emergency unstake tokens without rewards\\n    event EmergencyUnstake(address indexed user, uint256 pid);\\n\\n    event OutputPerBlockUpdated(uint256 oldOutputPerBlock, uint256 newOutputPerBlock);\\n\\n    event TokenValuatorUpdated(address indexed oldTokenValuator, address indexed newTokenValuator);\\n\\n    event FeeReceiverUpdated(address indexed oldFeeReceiver, address indexed newFeeReceiver);\\n\\n    event AllocPointsUpdated(uint256 pid, uint256 oldAllocPoints, uint256 newAllocPoints);\\n\\n    event NewPoolAdded(\\n        address indexed token,\\n        uint256 pid,\\n        uint256 allocPoint,\\n        uint256 totalAllocPoint\\n    );\\n\\n    event PoolPauseSet(uint256 pid, bool pause);\\n\\n    event TokenSweeped(address indexed token, uint256 amountOrId);\\n}\\n\"\r\n    },\r\n    \"contracts/valuators/ITokenValuator.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity 0.6.12;\\n\\ninterface ITokenValuator {\\n    function valuate(\\n        address token,\\n        address user,\\n        uint256 pid,\\n        uint256 amountOrId\\n    ) external view returns (uint256);\\n\\n    function isConfigured(address token) external view returns (bool);\\n\\n    function requireIsConfigured(address token) external view;\\n\\n    function hasValuation(\\n        address token,\\n        address user,\\n        uint256 pid,\\n        uint256 amountOrId\\n    ) external view returns (bool);\\n\\n    function requireHasValuation(\\n        address token,\\n        address user,\\n        uint256 pid,\\n        uint256 amountOrId\\n    ) external view;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/EnumerableSet.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping (bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) { // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            // When the value to delete is the last one, the swap operation is unnecessary. However, since this occurs\\n            // so rarely, we still do the swap anyway to avoid the gas cost of adding an 'if' statement.\\n\\n            bytes32 lastvalue = set._values[lastIndex];\\n\\n            // Move the last value to the index where the value to delete is\\n            set._values[toDeleteIndex] = lastvalue;\\n            // Update the index for the moved value\\n            set._indexes[lastvalue] = toDeleteIndex + 1; // All indexes are 1-based\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        require(set._values.length > index, \\\"EnumerableSet: index out of bounds\\\");\\n        return set._values[index];\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/roles/RolesManagerConsts.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity 0.6.12;\\n\\ncontract RolesManagerConsts {\\n    /**\\n        @notice It is the AccessControl.DEFAULT_ADMIN_ROLE role.\\n     */\\n    bytes32 public constant OWNER_ROLE = keccak256(\\\"\\\");\\n\\n    bytes32 public constant PAUSER_ROLE = keccak256(\\\"PAUSER_ROLE\\\");\\n\\n    bytes32 public constant MINTER_ROLE = keccak256(\\\"MINTER_ROLE\\\");\\n\\n    bytes32 public constant CONFIGURATOR_ROLE = keccak256(\\\"CONFIGURATOR_ROLE\\\");\\n}\\n\"\r\n    },\r\n    \"contracts/settings/PlatformSettingsConsts.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity 0.6.12;\\n\\ncontract PlatformSettingsConsts {\\n    bytes32 public constant FEE = \\\"Fee\\\";\\n\\n    bytes32 public constant BONUS_MULTIPLIER = \\\"BonusMultiplier\\\";\\n\\n    bytes32 public constant ALLOW_ONLY_EOA = \\\"AllowOnlyEOA\\\";\\n\\n    bytes32 public constant RATE_TOKEN_PAUSED = \\\"RATETokenPaused\\\";\\n}\\n\"\r\n    },\r\n    \"contracts/settings/IPlatformSettings.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity 0.6.12;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"../libs/SettingsLib.sol\\\";\\n\\ninterface IPlatformSettings {\\n    event PlatformPaused(address indexed pauser);\\n\\n    event PlatformUnpaused(address indexed unpauser);\\n\\n    event PlatformSettingCreated(\\n        bytes32 indexed name,\\n        address indexed creator,\\n        uint256 value,\\n        uint256 minValue,\\n        uint256 maxValue\\n    );\\n\\n    event PlatformSettingRemoved(bytes32 indexed name, address indexed remover, uint256 value);\\n\\n    event PlatformSettingUpdated(\\n        bytes32 indexed name,\\n        address indexed remover,\\n        uint256 oldValue,\\n        uint256 newValue\\n    );\\n\\n    function createSetting(\\n        bytes32 name,\\n        uint256 value,\\n        uint256 min,\\n        uint256 max\\n    ) external;\\n\\n    function removeSetting(bytes32 name) external;\\n\\n    function getSetting(bytes32 name) external view returns (SettingsLib.Setting memory);\\n\\n    function getSettingValue(bytes32 name) external view returns (uint256);\\n\\n    function hasSetting(bytes32 name) external view returns (bool);\\n\\n    function rolesManager() external view returns (address);\\n\\n    function isPaused() external view returns (bool);\\n\\n    function requireIsPaused() external view;\\n\\n    function requireIsNotPaused() external view;\\n\\n    function consts() external view returns (address);\\n\\n    function pause() external;\\n\\n    function unpause() external;\\n}\\n\"\r\n    },\r\n    \"contracts/roles/IRolesManager.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity 0.6.12;\\n\\ninterface IRolesManager {\\n    event MaxMultiItemsUpdated(address indexed updater, uint8 oldValue, uint8 newValue);\\n\\n    function setMaxMultiItems(uint8 newMaxMultiItems) external;\\n\\n    function multiGrantRole(bytes32 role, address[] calldata accounts) external;\\n\\n    function multiRevokeRole(bytes32 role, address[] calldata accounts) external;\\n\\n    function setRoleAdmin(bytes32 role, bytes32 adminRole) external;\\n\\n    function consts() external view returns (address);\\n\\n    function maxMultiItems() external view returns (uint8);\\n\\n    function requireHasRole(bytes32 role, address account) external view;\\n\\n    function requireHasRole(\\n        bytes32 role,\\n        address account,\\n        string calldata message\\n    ) external view;\\n}\\n\"\r\n    },\r\n    \"contracts/libs/SettingsLib.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity 0.6.12;\\n\\nlibrary SettingsLib {\\n    /**\\n        It defines a setting. It includes: value, min, and max values.\\n     */\\n    struct Setting {\\n        uint256 value;\\n        uint256 min;\\n        uint256 max;\\n        bool exists;\\n    }\\n\\n    /**\\n        @notice It creates a new setting given a name, min and max values.\\n        @param value initial value for the setting.\\n        @param min min value allowed for the setting.\\n        @param max max value allowed for the setting.\\n     */\\n    function create(\\n        Setting storage self,\\n        uint256 value,\\n        uint256 min,\\n        uint256 max\\n    ) internal {\\n        requireNotExists(self);\\n        require(value >= min, \\\"VALUE_MUST_BE_GT_MIN_VALUE\\\");\\n        require(value <= max, \\\"VALUE_MUST_BE_LT_MAX_VALUE\\\");\\n        self.value = value;\\n        self.min = min;\\n        self.max = max;\\n        self.exists = true;\\n    }\\n\\n    /**\\n        @notice Checks whether the current setting exists or not.\\n        @dev It throws a require error if the setting already exists.\\n        @param self the current setting.\\n     */\\n    function requireNotExists(Setting storage self) internal view {\\n        require(!self.exists, \\\"SETTING_ALREADY_EXISTS\\\");\\n    }\\n\\n    /**\\n        @notice Checks whether the current setting exists or not.\\n        @dev It throws a require error if the current setting doesn't exist.\\n        @param self the current setting.\\n     */\\n    function requireExists(Setting storage self) internal view {\\n        require(self.exists, \\\"SETTING_NOT_EXISTS\\\");\\n    }\\n\\n    /**\\n        @notice It updates a current setting.\\n        @dev It throws a require error if:\\n            - The new value is equal to the current value.\\n            - The new value is not lower than the max value.\\n            - The new value is not greater than the min value\\n        @param self the current setting.\\n        @param newValue the new value to set in the setting.\\n     */\\n    function update(Setting storage self, uint256 newValue) internal returns (uint256 oldValue) {\\n        requireExists(self);\\n        require(self.value != newValue, \\\"NEW_VALUE_REQUIRED\\\");\\n        require(newValue >= self.min, \\\"NEW_VALUE_MUST_BE_GT_MIN_VALUE\\\");\\n        require(newValue <= self.max, \\\"NEW_VALUE_MUST_BE_LT_MAX_VALUE\\\");\\n        oldValue = self.value;\\n        self.value = newValue;\\n    }\\n\\n    /**\\n        @notice It removes a current setting.\\n        @param self the current setting to remove.\\n     */\\n    function remove(Setting storage self) internal {\\n        requireExists(self);\\n        self.value = 0;\\n        self.min = 0;\\n        self.max = 0;\\n        self.exists = false;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/introspection/IERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"settingsAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"outputAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"feeReceiverAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenValuatorAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"outputAmountPerBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"startBlockNumber\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"bonusEndBlockNumber\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldAllocPoints\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newAllocPoints\",\"type\":\"uint256\"}],\"name\":\"AllocPointsUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"}],\"name\":\"EmergencyUnstake\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldFeeReceiver\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newFeeReceiver\",\"type\":\"address\"}],\"name\":\"FeeReceiverUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"allocPoint\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalAllocPoint\",\"type\":\"uint256\"}],\"name\":\"NewPoolAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldOutputPerBlock\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newOutputPerBlock\",\"type\":\"uint256\"}],\"name\":\"OutputPerBlockUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldSettings\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newSettings\",\"type\":\"address\"}],\"name\":\"PlatformSettingsUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"pause\",\"type\":\"bool\"}],\"name\":\"PoolPauseSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"}],\"name\":\"RewardPaid\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"valuedAmount\",\"type\":\"uint256\"}],\"name\":\"Staked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountOrId\",\"type\":\"uint256\"}],\"name\":\"TokenSweeped\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldTokenValuator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newTokenValuator\",\"type\":\"address\"}],\"name\":\"TokenValuatorUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"valuedAmount\",\"type\":\"uint256\"}],\"name\":\"Unstaked\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"AMOUNT_SCALE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DEFAULT_FEE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PERCENTAGE_100\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"allocationPoints\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"withUpdate\",\"type\":\"bool\"}],\"name\":\"addPool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"bonusEndBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"}],\"name\":\"emergencyUnstakeAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"existsPool\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeReceiver\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getAllPendingTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"totalPools\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"outputPerBlockNumber\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"startBlockNumber\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"bonusEndBlockNumber\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"bonusFinished\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"totalAllocPoints\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"fromBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"toBlock\",\"type\":\"uint256\"}],\"name\":\"getMultiplier\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getPendingTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"}],\"name\":\"getPoolInfoFor\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"totalDeposit\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"allocPoint\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastRewardBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"accTokenPerShare\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isPaused\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPools\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"tokens\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"totalDeposit\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"allocPoints\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"lastRewardBlocks\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"accTokenPerShares\",\"type\":\"uint256[]\"},{\"internalType\":\"bool[]\",\"name\":\"isPaused\",\"type\":\"bool[]\"},{\"internalType\":\"uint256\",\"name\":\"totalPools\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTotalPools\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getUserInfoForPool\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewardDebt\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"tokenIDs\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"massUpdatePools\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC721Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"output\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"outputPerBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"}],\"name\":\"pausePool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"poolInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"totalDeposit\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"allocPoint\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastRewardBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"accTokenPerShare\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isPaused\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"newAllocPoint\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"withUpdate\",\"type\":\"bool\"}],\"name\":\"setAllocPoint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newFeeReceiver\",\"type\":\"address\"}],\"name\":\"setFeeReceiver\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newOutputPerBlock\",\"type\":\"uint256\"}],\"name\":\"setOutputPerBlock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newSettings\",\"type\":\"address\"}],\"name\":\"setSettings\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newTokenValuator\",\"type\":\"address\"}],\"name\":\"setTokenValuator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"settings\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"stake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"}],\"name\":\"stakeAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"}],\"name\":\"stakeAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountOrId\",\"type\":\"uint256\"}],\"name\":\"sweep\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenValuator\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalAllocPoint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"}],\"name\":\"unpausePool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"unstake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"}],\"name\":\"unstakeAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"}],\"name\":\"unstakeAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"ERC721Staking","CompilerVersion":"v0.6.12+commit.27d51765","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000464ff37c2e09df6e7ded8438e2c74a07aaba1aa8000000000000000000000000507309a20014ea377f149fe28fe389fbfc6e0e4e0000000000000000000000008fd894e8698280273fb63f0e62c6a46fbcb64ccd000000000000000000000000220c9320a3b60159cd68c524511f14269497727f00000000000000000000000000000000000000000000000000071afd498d00000000000000000000000000000000000000000000000000000000000000be20fa0000000000000000000000000000000000000000000000000000000000e3a5ca","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}