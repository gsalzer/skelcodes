{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.8.0;\r\n\r\n\r\n// \r\n/**\r\n * @dev These functions deal with verification of Merkle Trees proofs.\r\n *\r\n * The proofs can be generated using the JavaScript library\r\n * https://github.com/miguelmota/merkletreejs[merkletreejs].\r\n * Note: the hashing algorithm should be keccak256 and pair sorting should be enabled.\r\n *\r\n * See `test/utils/cryptography/MerkleProof.test.js` for some examples.\r\n */\r\nlibrary MerkleProof {\r\n    /**\r\n     * @dev Returns true if a `leaf` can be proved to be a part of a Merkle tree\r\n     * defined by `root`. For this, a `proof` must be provided, containing\r\n     * sibling hashes on the branch from the leaf to the root of the tree. Each\r\n     * pair of leaves and each pair of pre-images are assumed to be sorted.\r\n     */\r\n    function verify(bytes32[] memory proof, bytes32 root, bytes32 leaf) internal pure returns (bool) {\r\n        bytes32 computedHash = leaf;\r\n\r\n        for (uint256 i = 0; i < proof.length; i++) {\r\n            bytes32 proofElement = proof[i];\r\n\r\n            if (computedHash <= proofElement) {\r\n                // Hash(current computed hash + current element of the proof)\r\n                computedHash = keccak256(abi.encodePacked(computedHash, proofElement));\r\n            } else {\r\n                // Hash(current element of the proof + current computed hash)\r\n                computedHash = keccak256(abi.encodePacked(proofElement, computedHash));\r\n            }\r\n        }\r\n\r\n        // Check if the computed hash (root) is equal to the provided root\r\n        return computedHash == root;\r\n    }\r\n}\r\n\r\ninterface IERC721Mintable {\r\n\tfunction claim(\r\n\t\taddress to, \r\n\t\tuint256 tokenId, \r\n\t\tuint256 universeId, \r\n\t\tuint256 earthId,\r\n\t\tuint256 personId, \r\n\t\tuint256 blockchainId,\r\n\t\tuint256 sattoshiId) external returns (bool);\r\n}\r\n\r\ncontract MerkleDistribution {\r\n\tbytes32 public root;\r\n\tIERC721Mintable  public token;\r\n\tmapping (bytes32=>bool) claimedMap;\r\n\t\r\n\tevent Claim(address, uint256);\r\n\r\n\tconstructor(address _token, bytes32 _root) public{\r\n\t\ttoken = IERC721Mintable(_token);\r\n\t\troot = _root;\r\n\t} \r\n\r\n\tfunction isClaimed(\r\n\t\taddress _addr, \r\n\t\tuint256 _id,\r\n\t\tuint256 _universeId,\r\n\t\tuint256 _earthId,\r\n\t\tuint256 _personId,\r\n\t\tuint256 _blockchainId,\r\n\t\tuint256 _sattoshiId )\r\n\t\tpublic view returns(bool){\r\n\t\tbytes32 node = keccak256(abi.encodePacked(_id, _universeId, _earthId, _personId, _blockchainId, _sattoshiId, _addr));\r\n\t\treturn claimedMap[node];\r\n\t}\r\n\r\n\tfunction setClaimed(bytes32 _node) private {\r\n\t\tclaimedMap[_node] = true;\r\n\t}\r\n\r\n\tfunction claim(\r\n\t\taddress _addr, \r\n\t\tuint256 _id,\r\n\t\tuint256 _universeId,\r\n\t\tuint256 _earthId,\r\n\t\tuint256 _personId,\r\n\t\tuint256 _blockchainId,\r\n\t\tuint256 _sattoshiId,\r\n\t\tbytes32[] calldata merkleProof) external {\r\n\t\tbytes32 node = keccak256(abi.encodePacked(_id, _universeId, _earthId, _personId, _blockchainId, _sattoshiId, _addr));\r\n\t\trequire(!claimedMap[node], \"token id of this address is already claimed\");\r\n\t\trequire(MerkleProof.verify(merkleProof, root, node), \"MerkleDistribution: Invalid Proof\");\r\n\t\tsetClaimed(node);\r\n\t\trequire(token.claim(_addr, _id, _universeId, _earthId, _personId, _blockchainId, _sattoshiId), \"MerkleDistribution: Mint Failed\");\r\n\t\temit Claim(_addr, _id);\r\n\t}\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"_root\",\"type\":\"bytes32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"Claim\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_universeId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_earthId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_personId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_blockchainId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_sattoshiId\",\"type\":\"uint256\"},{\"internalType\":\"bytes32[]\",\"name\":\"merkleProof\",\"type\":\"bytes32[]\"}],\"name\":\"claim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_universeId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_earthId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_personId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_blockchainId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_sattoshiId\",\"type\":\"uint256\"}],\"name\":\"isClaimed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"root\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"internalType\":\"contract IERC721Mintable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"MerkleDistribution","CompilerVersion":"v0.8.4+commit.c7e474f2","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"0000000000000000000000000322b8fcc82f28ab412a24e0fea6cc0ac80b6c0ff87310202f8b436eb1b613094754264ca70c21f496a862dc37755e81c34766e7","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"ipfs://3d7eb5b74ce54ef53dece1a9a7d78d79d1bb7d980e0cca37cde43a0415ad09f7"}]}