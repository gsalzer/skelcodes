{"status":"1","message":"OK","result":[{"SourceCode":"// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.4;\r\n\r\ncontract Ownable {\r\n    event OwnerChanged(address newOwner);\r\n\r\n    address public owner;\r\n\r\n    /**\r\n     * @dev Initializes contact owner\r\n     *\r\n     * Emits an {OwnerChanged} event.\r\n     *\r\n     * @param _owner contract owner\r\n     */\r\n    function initializeOwnable(address _owner) public {\r\n        owner = _owner;\r\n        emit OwnerChanged(_owner);\r\n    }\r\n\r\n    /**\r\n     * @dev Updates contract owner\r\n     *\r\n     * Emits an {OwnerChanged} event.\r\n     */\r\n    function setOwner(address new_owner) public onlyOwner{\r\n        owner = new_owner;\r\n        emit OwnerChanged(new_owner);\r\n    }\r\n\r\n\r\n    /**\r\n     * @dev Permits actions only from owner\r\n     */\r\n    modifier onlyOwner {\r\n        require(msg.sender == owner, \"Only the contract owner may perform this action\");\r\n        _;\r\n    }\r\n}\r\n\r\n\r\ninterface IERC20 {\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n}\r\n\r\n\r\ncontract Claimer is Ownable {\r\n    /**\r\n    * @dev Emitted when ETH has claimed.\r\n    */\r\n    event Claimed(address recipient, uint256 amount);\r\n\r\n\r\n    /**\r\n    * @dev Emitted when ERC20 has claimed.\r\n    */\r\n    event ClaimedERC20(address recipient, address token, uint256 amount);\r\n\r\n\r\n    /**\r\n     * @dev Initializes contact with owner address\r\n     *\r\n     * Emits an {OwnerChanged} event.\r\n     *\r\n     * @param _owner contract owner\r\n     */\r\n    function initialize(address _owner) public {\r\n        require(owner == address(0));\r\n        initializeOwnable(_owner);\r\n    }\r\n\r\n\r\n    /**\r\n     * @dev Transfer all contract ETH to recipient. Only owner can use it\r\n     *\r\n     * Emits an {Claimed} event.\r\n     *\r\n     * @param recipient Account for transfer ETH\r\n     */\r\n    function claim(address payable recipient)  public onlyOwner {\r\n        uint256 amount = address(this).balance;\r\n        (bool sent, ) = recipient.call{value: amount}(\"\");\r\n        require(sent, \"Failed to send Ether\");\r\n        emit Claimed(recipient, amount);\r\n    }\r\n\r\n\r\n    /**\r\n     * @dev Transfer all contract amount of specified tokent to recipient. Only owner can use it\r\n     *\r\n     * Emits an {ClaimedERC20} event.\r\n     *\r\n     * @param recipient Account for transfer ERC20 token\r\n     * @param token Address of ERC20 token\r\n     */\r\n    function claimERC20(address payable recipient, address token) public onlyOwner {\r\n        uint256 amount = IERC20(token).balanceOf(address(this));\r\n        IERC20(token).transfer(recipient, amount);\r\n        emit ClaimedERC20(recipient, token, amount);\r\n    }\r\n\r\n}","ABI":"[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Claimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"ClaimedERC20\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnerChanged\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"recipient\",\"type\":\"address\"}],\"name\":\"claim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"claimERC20\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"initializeOwnable\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"new_owner\",\"type\":\"address\"}],\"name\":\"setOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"Claimer","CompilerVersion":"v0.8.4+commit.c7e474f2","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://585bd519d47cb8d24e6c0176e94ed04e3b6d9df2985befa3765cce1eebfd8589"}]}