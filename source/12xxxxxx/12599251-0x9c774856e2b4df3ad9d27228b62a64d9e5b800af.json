{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"/Users/davidroon/projects/tribute-contracts/contracts/core/CloneFactory.sol\": {\r\n      \"content\": \"pragma solidity ^0.8.0;\\n\\n// SPDX-License-Identifier: MIT\\n\\n/*\\nThe MIT License (MIT)\\nCopyright (c) 2018 Murray Software, LLC.\\nPermission is hereby granted, free of charge, to any person obtaining\\na copy of this software and associated documentation files (the\\n\\\"Software\\\"), to deal in the Software without restriction, including\\nwithout limitation the rights to use, copy, modify, merge, publish,\\ndistribute, sublicense, and/or sell copies of the Software, and to\\npermit persons to whom the Software is furnished to do so, subject to\\nthe following conditions:\\nThe above copyright notice and this permission notice shall be included\\nin all copies or substantial portions of the Software.\\nTHE SOFTWARE IS PROVIDED \\\"AS IS\\\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\\nOR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\\nIN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\\nCLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,\\nTORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\\nSOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\\n*/\\n//solhint-disable max-line-length\\n//solhint-disable no-inline-assembly\\n\\ncontract CloneFactory {\\n    function _createClone(address target)\\n        internal\\n        returns (address payable result)\\n    {\\n        bytes20 targetBytes = bytes20(target);\\n        assembly {\\n            let clone := mload(0x40)\\n            mstore(\\n                clone,\\n                0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000000000000000000000\\n            )\\n            mstore(add(clone, 0x14), targetBytes)\\n            mstore(\\n                add(clone, 0x28),\\n                0x5af43d82803e903d91602b57fd5bf30000000000000000000000000000000000\\n            )\\n            result := create(0, clone, 0x37)\\n        }\\n    }\\n\\n    function _isClone(address target, address query)\\n        internal\\n        view\\n        returns (bool result)\\n    {\\n        bytes20 targetBytes = bytes20(target);\\n        assembly {\\n            let clone := mload(0x40)\\n            mstore(\\n                clone,\\n                0x363d3d373d3d3d363d7300000000000000000000000000000000000000000000\\n            )\\n            mstore(add(clone, 0xa), targetBytes)\\n            mstore(\\n                add(clone, 0x1e),\\n                0x5af43d82803e903d91602b57fd5bf30000000000000000000000000000000000\\n            )\\n\\n            let other := add(clone, 0x40)\\n            extcodecopy(query, other, 0, 0x2d)\\n            result := and(\\n                eq(mload(clone), mload(other)),\\n                eq(mload(add(clone, 0xd)), mload(add(other, 0xd)))\\n            )\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"/Users/davidroon/projects/tribute-contracts/contracts/core/DaoConstants.sol\": {\r\n      \"content\": \"pragma solidity ^0.8.0;\\n\\n// SPDX-License-Identifier: MIT\\n\\n/**\\nMIT License\\n\\nCopyright (c) 2020 Openlaw\\n\\nPermission is hereby granted, free of charge, to any person obtaining a copy\\nof this software and associated documentation files (the \\\"Software\\\"), to deal\\nin the Software without restriction, including without limitation the rights\\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\\ncopies of the Software, and to permit persons to whom the Software is\\nfurnished to do so, subject to the following conditions:\\n\\nThe above copyright notice and this permission notice shall be included in all\\ncopies or substantial portions of the Software.\\n\\nTHE SOFTWARE IS PROVIDED \\\"AS IS\\\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\\nSOFTWARE.\\n */\\n\\nabstract contract DaoConstants {\\n    // Adapters\\n    bytes32 internal constant VOTING = keccak256(\\\"voting\\\");\\n    bytes32 internal constant ONBOARDING = keccak256(\\\"onboarding\\\");\\n    bytes32 internal constant NONVOTING_ONBOARDING =\\n        keccak256(\\\"nonvoting-onboarding\\\");\\n    bytes32 internal constant TRIBUTE = keccak256(\\\"tribute\\\");\\n    bytes32 internal constant FINANCING = keccak256(\\\"financing\\\");\\n    bytes32 internal constant MANAGING = keccak256(\\\"managing\\\");\\n    bytes32 internal constant RAGEQUIT = keccak256(\\\"ragequit\\\");\\n    bytes32 internal constant GUILDKICK = keccak256(\\\"guildkick\\\");\\n    bytes32 internal constant EXECUTION = keccak256(\\\"execution\\\");\\n    bytes32 internal constant CONFIGURATION = keccak256(\\\"configuration\\\");\\n    bytes32 internal constant DISTRIBUTE = keccak256(\\\"distribute\\\");\\n    bytes32 internal constant TRIBUTE_NFT = keccak256(\\\"tribute-nft\\\");\\n\\n    // Extensions\\n    bytes32 internal constant BANK = keccak256(\\\"bank\\\");\\n    bytes32 internal constant NFT = keccak256(\\\"nft\\\");\\n    bytes32 internal constant ERC20_EXT = keccak256(\\\"erc20-ext\\\");\\n\\n    // Reserved Addresses\\n    address internal constant GUILD = address(0xdead);\\n    address internal constant TOTAL = address(0xbabe);\\n    address internal constant ESCROW = address(0x4bec);\\n    address internal constant UNITS = address(0xFF1CE);\\n    address internal constant LOOT = address(0xB105F00D);\\n    address internal constant ETH_TOKEN = address(0x0);\\n    address internal constant MEMBER_COUNT = address(0xDECAFBAD);\\n\\n    uint8 internal constant MAX_TOKENS_GUILD_BANK = 200;\\n\\n    //helper\\n    function getFlag(uint256 flags, uint256 flag) public pure returns (bool) {\\n        return (flags >> uint8(flag)) % 2 == 1;\\n    }\\n\\n    function setFlag(\\n        uint256 flags,\\n        uint256 flag,\\n        bool value\\n    ) public pure returns (uint256) {\\n        if (getFlag(flags, flag) != value) {\\n            if (value) {\\n                return flags + 2**flag;\\n            } else {\\n                return flags - 2**flag;\\n            }\\n        } else {\\n            return flags;\\n        }\\n    }\\n\\n    /**\\n     * @notice Checks if a given address is reserved.\\n     */\\n    function isNotReservedAddress(address addr) public pure returns (bool) {\\n        return addr != GUILD && addr != TOTAL && addr != ESCROW;\\n    }\\n\\n    /**\\n     * @notice Checks if a given address is zeroed.\\n     */\\n    function isNotZeroAddress(address addr) public pure returns (bool) {\\n        return addr != address(0x0);\\n    }\\n}\\n\"\r\n    },\r\n    \"/Users/davidroon/projects/tribute-contracts/contracts/core/DaoRegistry.sol\": {\r\n      \"content\": \"pragma solidity ^0.8.0;\\n\\n// SPDX-License-Identifier: MIT\\n\\nimport \\\"./DaoConstants.sol\\\";\\nimport \\\"../guards/AdapterGuard.sol\\\";\\nimport \\\"../guards/MemberGuard.sol\\\";\\nimport \\\"../extensions/IExtension.sol\\\";\\n\\n/**\\nMIT License\\n\\nCopyright (c) 2020 Openlaw\\n\\nPermission is hereby granted, free of charge, to any person obtaining a copy\\nof this software and associated documentation files (the \\\"Software\\\"), to deal\\nin the Software without restriction, including without limitation the rights\\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\\ncopies of the Software, and to permit persons to whom the Software is\\nfurnished to do so, subject to the following conditions:\\n\\nThe above copyright notice and this permission notice shall be included in all\\ncopies or substantial portions of the Software.\\n\\nTHE SOFTWARE IS PROVIDED \\\"AS IS\\\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\\nSOFTWARE.\\n */\\n\\ncontract DaoRegistry is MemberGuard, AdapterGuard {\\n    bool public initialized = false; // internally tracks deployment under eip-1167 proxy pattern\\n\\n    enum DaoState {CREATION, READY}\\n\\n    /*\\n     * EVENTS\\n     */\\n    /// @dev - Events for Proposals\\n    event SubmittedProposal(bytes32 proposalId, uint256 flags);\\n    event SponsoredProposal(\\n        bytes32 proposalId,\\n        uint256 flags,\\n        address votingAdapter\\n    );\\n    event ProcessedProposal(bytes32 proposalId, uint256 flags);\\n    event AdapterAdded(\\n        bytes32 adapterId,\\n        address adapterAddress,\\n        uint256 flags\\n    );\\n    event AdapterRemoved(bytes32 adapterId);\\n\\n    event ExtensionAdded(bytes32 extensionId, address extensionAddress);\\n    event ExtensionRemoved(bytes32 extensionId);\\n\\n    /// @dev - Events for Members\\n    event UpdateDelegateKey(address memberAddress, address newDelegateKey);\\n    event ConfigurationUpdated(bytes32 key, uint256 value);\\n    event AddressConfigurationUpdated(bytes32 key, address value);\\n\\n    enum MemberFlag {EXISTS}\\n\\n    enum ProposalFlag {EXISTS, SPONSORED, PROCESSED}\\n\\n    enum AclFlag {\\n        REPLACE_ADAPTER,\\n        SUBMIT_PROPOSAL,\\n        UPDATE_DELEGATE_KEY,\\n        SET_CONFIGURATION,\\n        ADD_EXTENSION,\\n        REMOVE_EXTENSION,\\n        NEW_MEMBER\\n    }\\n\\n    /*\\n     * STRUCTURES\\n     */\\n    struct Proposal {\\n        // the structure to track all the proposals in the DAO\\n        address adapterAddress; // the adapter address that called the functions to change the DAO state\\n        uint256 flags; // flags to track the state of the proposal: exist, sponsored, processed, canceled, etc.\\n    }\\n\\n    struct Member {\\n        // the structure to track all the members in the DAO\\n        uint256 flags; // flags to track the state of the member: exists, etc\\n    }\\n\\n    struct Checkpoint {\\n        // A checkpoint for marking number of votes from a given block\\n        uint96 fromBlock;\\n        uint160 amount;\\n    }\\n\\n    struct DelegateCheckpoint {\\n        // A checkpoint for marking number of votes from a given block\\n        uint96 fromBlock;\\n        address delegateKey;\\n    }\\n\\n    struct AdapterEntry {\\n        bytes32 id;\\n        uint256 acl;\\n    }\\n\\n    struct ExtensionEntry {\\n        bytes32 id;\\n        mapping(address => uint256) acl;\\n    }\\n\\n    /*\\n     * PUBLIC VARIABLES\\n     */\\n    mapping(address => Member) public members; // the map to track all members of the DAO\\n    address[] private _members;\\n\\n    // delegate key => member address mapping\\n    mapping(address => address) public memberAddressesByDelegatedKey;\\n\\n    // memberAddress => checkpointNum => DelegateCheckpoint\\n    mapping(address => mapping(uint32 => DelegateCheckpoint)) checkpoints;\\n    // memberAddress => numDelegateCheckpoints\\n    mapping(address => uint32) numCheckpoints;\\n\\n    DaoState public state;\\n\\n    /// @notice The map that keeps track of all proposasls submitted to the DAO\\n    mapping(bytes32 => Proposal) public proposals;\\n    /// @notice The map that tracks the voting adapter address per proposalId\\n    mapping(bytes32 => address) public votingAdapter;\\n    /// @notice The map that keeps track of all adapters registered in the DAO\\n    mapping(bytes32 => address) public adapters;\\n    /// @notice The inverse map to get the adapter id based on its address\\n    mapping(address => AdapterEntry) public inverseAdapters;\\n    /// @notice The map that keeps track of all extensions registered in the DAO\\n    mapping(bytes32 => address) public extensions;\\n    /// @notice The inverse map to get the extension id based on its address\\n    mapping(address => ExtensionEntry) public inverseExtensions;\\n    /// @notice The map that keeps track of configuration parameters for the DAO and adapters\\n    mapping(bytes32 => uint256) public mainConfiguration;\\n    mapping(bytes32 => address) public addressConfiguration;\\n\\n    uint256 public lockedAt;\\n\\n    /// @notice Clonable contract must have an empty constructor\\n    // constructor() {\\n    // }\\n\\n    /**\\n     * @notice Initialises the DAO\\n     * @dev Involves initialising available tokens, checkpoints, and membership of creator\\n     * @dev Can only be called once\\n     * @param creator The DAO's creator, who will be an initial member\\n     * @param payer The account which paid for the transaction to create the DAO, who will be an initial member\\n     */\\n    function initialize(address creator, address payer) external {\\n        require(!initialized, \\\"dao already initialized\\\");\\n        potentialNewMember(msg.sender);\\n        potentialNewMember(payer);\\n        potentialNewMember(creator);\\n\\n        initialized = true;\\n    }\\n\\n    /**\\n     * @notice default fallback function to prevent from sending ether to the contract\\n     */\\n    receive() external payable {\\n        revert(\\\"you cannot send money back directly\\\");\\n    }\\n\\n    /**\\n     * @dev Sets the state of the dao to READY\\n     */\\n    function finalizeDao() external {\\n        state = DaoState.READY;\\n    }\\n\\n    function lockSession() external {\\n        if (isAdapter(msg.sender) || isExtension(msg.sender)) {\\n            lockedAt = block.number;\\n        }\\n    }\\n\\n    function unlockSession() external {\\n        if (isAdapter(msg.sender) || isExtension(msg.sender)) {\\n            lockedAt = 0;\\n        }\\n    }\\n\\n    /**\\n     * @notice Sets a configuration value\\n     * @dev Changes the value of a key in the configuration mapping\\n     * @param key The configuration key for which the value will be set\\n     * @param value The value to set the key\\n     */\\n    function setConfiguration(bytes32 key, uint256 value)\\n        external\\n        hasAccess(this, AclFlag.SET_CONFIGURATION)\\n    {\\n        mainConfiguration[key] = value;\\n\\n        emit ConfigurationUpdated(key, value);\\n    }\\n\\n    function potentialNewMember(address memberAddress)\\n        public\\n        hasAccess(this, AclFlag.NEW_MEMBER)\\n    {\\n        require(memberAddress != address(0x0), \\\"invalid member address\\\");\\n\\n        Member storage member = members[memberAddress];\\n        if (!getFlag(member.flags, uint8(MemberFlag.EXISTS))) {\\n            require(\\n                memberAddressesByDelegatedKey[memberAddress] == address(0x0),\\n                \\\"member address already taken as delegated key\\\"\\n            );\\n            member.flags = setFlag(\\n                member.flags,\\n                uint8(MemberFlag.EXISTS),\\n                true\\n            );\\n            memberAddressesByDelegatedKey[memberAddress] = memberAddress;\\n            _members.push(memberAddress);\\n        }\\n\\n        address bankAddress = extensions[BANK];\\n        if (bankAddress != address(0x0)) {\\n            BankExtension bank = BankExtension(bankAddress);\\n            if (bank.balanceOf(memberAddress, MEMBER_COUNT) == 0) {\\n                bank.addToBalance(memberAddress, MEMBER_COUNT, 1);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @notice Sets an configuration value\\n     * @dev Changes the value of a key in the configuration mapping\\n     * @param key The configuration key for which the value will be set\\n     * @param value The value to set the key\\n     */\\n    function setAddressConfiguration(bytes32 key, address value)\\n        external\\n        hasAccess(this, AclFlag.SET_CONFIGURATION)\\n    {\\n        addressConfiguration[key] = value;\\n\\n        emit AddressConfigurationUpdated(key, value);\\n    }\\n\\n    /**\\n     * @return The configuration value of a particular key\\n     * @param key The key to look up in the configuration mapping\\n     */\\n    function getConfiguration(bytes32 key) external view returns (uint256) {\\n        return mainConfiguration[key];\\n    }\\n\\n    /**\\n     * @return The configuration value of a particular key\\n     * @param key The key to look up in the configuration mapping\\n     */\\n    function getAddressConfiguration(bytes32 key)\\n        external\\n        view\\n        returns (address)\\n    {\\n        return addressConfiguration[key];\\n    }\\n\\n    /**\\n     * @notice Adds a new extension to the registry\\n     * @param extensionId The unique identifier of the new extension\\n     * @param extension The address of the extension\\n     * @param creator The DAO's creator, who will be an initial member\\n     */\\n    function addExtension(\\n        bytes32 extensionId,\\n        IExtension extension,\\n        address creator\\n    ) external hasAccess(this, AclFlag.ADD_EXTENSION) {\\n        require(extensionId != bytes32(0), \\\"extension id must not be empty\\\");\\n        require(\\n            extensions[extensionId] == address(0x0),\\n            \\\"extension Id already in use\\\"\\n        );\\n        extensions[extensionId] = address(extension);\\n        inverseExtensions[address(extension)].id = extensionId;\\n        extension.initialize(this, creator);\\n        emit ExtensionAdded(extensionId, address(extension));\\n    }\\n\\n    function setAclToExtensionForAdapter(\\n        address extensionAddress,\\n        address adapterAddress,\\n        uint256 acl\\n    ) external hasAccess(this, AclFlag.ADD_EXTENSION) {\\n        require(isAdapter(adapterAddress), \\\"not an adapter\\\");\\n        require(isExtension(extensionAddress), \\\"not an extension\\\");\\n        inverseExtensions[extensionAddress].acl[adapterAddress] = acl;\\n    }\\n\\n    /**\\n     * @notice Replaces an adapter in the registry in a single step.\\n     * @notice It handles addition and removal of adapters as special cases.\\n     * @dev It removes the current adapter if the adapterId maps to an existing adapter address.\\n     * @dev It adds an adapter if the adapterAddress parameter is not zeroed.\\n     * @param adapterId The unique identifier of the adapter\\n     * @param adapterAddress The address of the new adapter or zero if it is a removal operation\\n     * @param acl The flags indicating the access control layer or permissions of the new adapter\\n     * @param keys The keys indicating the adapter configuration names.\\n     * @param values The values indicating the adapter configuration values.\\n     */\\n    function replaceAdapter(\\n        bytes32 adapterId,\\n        address adapterAddress,\\n        uint128 acl,\\n        bytes32[] calldata keys,\\n        uint256[] calldata values\\n    ) external hasAccess(this, AclFlag.REPLACE_ADAPTER) {\\n        require(adapterId != bytes32(0), \\\"adapterId must not be empty\\\");\\n\\n        address currentAdapterAddr = adapters[adapterId];\\n        if (currentAdapterAddr != address(0x0)) {\\n            delete inverseAdapters[currentAdapterAddr];\\n            delete adapters[adapterId];\\n            emit AdapterRemoved(adapterId);\\n        }\\n\\n        for (uint256 i = 0; i < keys.length; i++) {\\n            bytes32 key = keys[i];\\n            uint256 value = values[i];\\n            mainConfiguration[key] = value;\\n            emit ConfigurationUpdated(key, value);\\n        }\\n\\n        if (adapterAddress != address(0x0)) {\\n            require(\\n                inverseAdapters[adapterAddress].id == bytes32(0),\\n                \\\"adapterAddress already in use\\\"\\n            );\\n            adapters[adapterId] = adapterAddress;\\n            inverseAdapters[adapterAddress].id = adapterId;\\n            inverseAdapters[adapterAddress].acl = acl;\\n            emit AdapterAdded(adapterId, adapterAddress, acl);\\n        }\\n    }\\n\\n    /**\\n     * @notice Removes an adapter from the registry\\n     * @param extensionId The unique identifier of the extension\\n     */\\n    function removeExtension(bytes32 extensionId)\\n        external\\n        hasAccess(this, AclFlag.REMOVE_EXTENSION)\\n    {\\n        require(extensionId != bytes32(0), \\\"extensionId must not be empty\\\");\\n        require(\\n            extensions[extensionId] != address(0x0),\\n            \\\"extensionId not registered\\\"\\n        );\\n        delete inverseExtensions[extensions[extensionId]];\\n        delete extensions[extensionId];\\n        emit ExtensionRemoved(extensionId);\\n    }\\n\\n    /**\\n     * @notice Looks up if there is an extension of a given address\\n     * @return Whether or not the address is an extension\\n     * @param extensionAddr The address to look up\\n     */\\n    function isExtension(address extensionAddr) public view returns (bool) {\\n        return inverseExtensions[extensionAddr].id != bytes32(0);\\n    }\\n\\n    /**\\n     * @notice Looks up if there is an adapter of a given address\\n     * @return Whether or not the address is an adapter\\n     * @param adapterAddress The address to look up\\n     */\\n    function isAdapter(address adapterAddress) public view returns (bool) {\\n        return inverseAdapters[adapterAddress].id != bytes32(0);\\n    }\\n\\n    /**\\n     * @notice Checks if an adapter has a given ACL flag\\n     * @return Whether or not the given adapter has the given flag set\\n     * @param adapterAddress The address to look up\\n     * @param flag The ACL flag to check against the given address\\n     */\\n    function hasAdapterAccess(address adapterAddress, AclFlag flag)\\n        public\\n        view\\n        returns (bool)\\n    {\\n        return getFlag(inverseAdapters[adapterAddress].acl, uint8(flag));\\n    }\\n\\n    /**\\n     * @notice Checks if an adapter has a given ACL flag\\n     * @return Whether or not the given adapter has the given flag set\\n     * @param adapterAddress The address to look up\\n     * @param flag The ACL flag to check against the given address\\n     */\\n    function hasAdapterAccessToExtension(\\n        address adapterAddress,\\n        address extensionAddress,\\n        uint8 flag\\n    ) public view returns (bool) {\\n        return\\n            isAdapter(adapterAddress) &&\\n            getFlag(\\n                inverseExtensions[extensionAddress].acl[adapterAddress],\\n                uint8(flag)\\n            );\\n    }\\n\\n    /**\\n     * @return The address of a given adapter ID\\n     * @param adapterId The ID to look up\\n     */\\n    function getAdapterAddress(bytes32 adapterId)\\n        external\\n        view\\n        returns (address)\\n    {\\n        require(adapters[adapterId] != address(0), \\\"adapter not found\\\");\\n        return adapters[adapterId];\\n    }\\n\\n    /**\\n     * @return The address of a given extension Id\\n     * @param extensionId The ID to look up\\n     */\\n    function getExtensionAddress(bytes32 extensionId)\\n        external\\n        view\\n        returns (address)\\n    {\\n        require(extensions[extensionId] != address(0), \\\"extension not found\\\");\\n        return extensions[extensionId];\\n    }\\n\\n    /**\\n     * PROPOSALS\\n     */\\n    /**\\n     * @notice Submit proposals to the DAO registry\\n     */\\n    function submitProposal(bytes32 proposalId)\\n        public\\n        hasAccess(this, AclFlag.SUBMIT_PROPOSAL)\\n    {\\n        require(proposalId != bytes32(0), \\\"invalid proposalId\\\");\\n        require(\\n            !getProposalFlag(proposalId, ProposalFlag.EXISTS),\\n            \\\"proposalId must be unique\\\"\\n        );\\n        proposals[proposalId] = Proposal(msg.sender, 1); // 1 means that only the first flag is being set i.e. EXISTS\\n        emit SubmittedProposal(proposalId, 1);\\n    }\\n\\n    /**\\n     * @notice Sponsor proposals that were submitted to the DAO registry\\n     * @dev adds SPONSORED to the proposal flag\\n     * @param proposalId The ID of the proposal to sponsor\\n     * @param sponsoringMember The member who is sponsoring the proposal\\n     */\\n    function sponsorProposal(\\n        bytes32 proposalId,\\n        address sponsoringMember,\\n        address votingAdapterAddr\\n    ) external onlyMember2(this, sponsoringMember) {\\n        // also checks if the flag was already set\\n        Proposal storage proposal =\\n            _setProposalFlag(proposalId, ProposalFlag.SPONSORED);\\n\\n        uint256 flags = proposal.flags;\\n\\n        require(\\n            proposal.adapterAddress == msg.sender,\\n            \\\"only the adapter that submitted the proposal can process it\\\"\\n        );\\n\\n        require(\\n            !getFlag(flags, uint8(ProposalFlag.PROCESSED)),\\n            \\\"proposal already processed\\\"\\n        );\\n        votingAdapter[proposalId] = votingAdapterAddr;\\n        emit SponsoredProposal(proposalId, flags, votingAdapterAddr);\\n    }\\n\\n    /**\\n     * @notice Mark a proposal as processed in the DAO registry\\n     * @param proposalId The ID of the proposal that is being processed\\n     */\\n    function processProposal(bytes32 proposalId) external {\\n        Proposal storage proposal =\\n            _setProposalFlag(proposalId, ProposalFlag.PROCESSED);\\n\\n        require(proposal.adapterAddress == msg.sender, \\\"err::adapter mismatch\\\");\\n        uint256 flags = proposal.flags;\\n\\n        emit ProcessedProposal(proposalId, flags);\\n    }\\n\\n    /**\\n     * @notice Sets a flag of a proposal\\n     * @dev Reverts if the proposal is already processed\\n     * @param proposalId The ID of the proposal to be changed\\n     * @param flag The flag that will be set on the proposal\\n     */\\n    function _setProposalFlag(bytes32 proposalId, ProposalFlag flag)\\n        internal\\n        returns (Proposal storage)\\n    {\\n        Proposal storage proposal = proposals[proposalId];\\n\\n        uint256 flags = proposal.flags;\\n        require(\\n            getFlag(flags, uint8(ProposalFlag.EXISTS)),\\n            \\\"proposal does not exist for this dao\\\"\\n        );\\n\\n        require(\\n            proposal.adapterAddress == msg.sender,\\n            \\\"only the adapter that submitted the proposal can set its flag\\\"\\n        );\\n\\n        require(!getFlag(flags, uint8(flag)), \\\"flag already set\\\");\\n\\n        flags = setFlag(flags, uint8(flag), true);\\n        proposals[proposalId].flags = flags;\\n\\n        return proposals[proposalId];\\n    }\\n\\n    /*\\n     * MEMBERS\\n     */\\n\\n    /**\\n     * @return Whether or not a given address is a member of the DAO.\\n     * @dev it will resolve by delegate key, not member address.\\n     * @param addr The address to look up\\n     */\\n    function isMember(address addr) public view returns (bool) {\\n        address memberAddress = memberAddressesByDelegatedKey[addr];\\n        return getMemberFlag(memberAddress, MemberFlag.EXISTS);\\n    }\\n\\n    /**\\n     * @return Whether or not a flag is set for a given proposal\\n     * @param proposalId The proposal to check against flag\\n     * @param flag The flag to check in the proposal\\n     */\\n    function getProposalFlag(bytes32 proposalId, ProposalFlag flag)\\n        public\\n        view\\n        returns (bool)\\n    {\\n        return getFlag(proposals[proposalId].flags, uint8(flag));\\n    }\\n\\n    /**\\n     * @return Whether or not a flag is set for a given member\\n     * @param memberAddress The member to check against flag\\n     * @param flag The flag to check in the member\\n     */\\n    function getMemberFlag(address memberAddress, MemberFlag flag)\\n        public\\n        view\\n        returns (bool)\\n    {\\n        return getFlag(members[memberAddress].flags, uint8(flag));\\n    }\\n\\n    function getNbMembers() public view returns (uint256) {\\n        return _members.length;\\n    }\\n\\n    function getMemberAddress(uint256 index) public view returns (address) {\\n        return _members[index];\\n    }\\n\\n    /**\\n     * @notice Updates the delegate key of a member\\n     * @param memberAddr The member doing the delegation\\n     * @param newDelegateKey The member who is being delegated to\\n     */\\n    function updateDelegateKey(address memberAddr, address newDelegateKey)\\n        external\\n        hasAccess(this, AclFlag.UPDATE_DELEGATE_KEY)\\n    {\\n        require(newDelegateKey != address(0x0), \\\"newDelegateKey cannot be 0\\\");\\n\\n        // skip checks if member is setting the delegate key to their member address\\n        if (newDelegateKey != memberAddr) {\\n            require(\\n                // newDelegate must not be delegated to\\n                memberAddressesByDelegatedKey[newDelegateKey] == address(0x0),\\n                \\\"cannot overwrite existing delegated keys\\\"\\n            );\\n        } else {\\n            require(\\n                memberAddressesByDelegatedKey[memberAddr] == address(0x0),\\n                \\\"address already taken as delegated key\\\"\\n            );\\n        }\\n\\n        Member storage member = members[memberAddr];\\n        require(\\n            getFlag(member.flags, uint8(MemberFlag.EXISTS)),\\n            \\\"member does not exist\\\"\\n        );\\n\\n        // Reset the delegation of the previous delegate\\n        memberAddressesByDelegatedKey[\\n            getCurrentDelegateKey(memberAddr)\\n        ] = address(0x0);\\n\\n        memberAddressesByDelegatedKey[newDelegateKey] = memberAddr;\\n\\n        _createNewDelegateCheckpoint(memberAddr, newDelegateKey);\\n        emit UpdateDelegateKey(memberAddr, newDelegateKey);\\n    }\\n\\n    /**\\n     * Public read-only functions\\n     */\\n\\n    /**\\n     * @param checkAddr The address to check for a delegate\\n     * @return the delegated address or the checked address if it is not a delegate\\n     */\\n    function getAddressIfDelegated(address checkAddr)\\n        public\\n        view\\n        returns (address)\\n    {\\n        address delegatedKey = memberAddressesByDelegatedKey[checkAddr];\\n        return delegatedKey == address(0x0) ? checkAddr : delegatedKey;\\n    }\\n\\n    /**\\n     * @param memberAddr The member whose delegate will be returned\\n     * @return the delegate key at the current time for a member\\n     */\\n    function getCurrentDelegateKey(address memberAddr)\\n        public\\n        view\\n        returns (address)\\n    {\\n        uint32 nCheckpoints = numCheckpoints[memberAddr];\\n        return\\n            nCheckpoints > 0\\n                ? checkpoints[memberAddr][nCheckpoints - 1].delegateKey\\n                : memberAddr;\\n    }\\n\\n    /**\\n     * @param memberAddr The member address to look up\\n     * @return The delegate key address for memberAddr at the second last checkpoint number\\n     */\\n    function getPreviousDelegateKey(address memberAddr)\\n        public\\n        view\\n        returns (address)\\n    {\\n        uint32 nCheckpoints = numCheckpoints[memberAddr];\\n        return\\n            nCheckpoints > 1\\n                ? checkpoints[memberAddr][nCheckpoints - 2].delegateKey\\n                : memberAddr;\\n    }\\n\\n    /**\\n     * @notice Determine the prior number of votes for an account as of a block number\\n     * @dev Block number must be a finalized block or else this function will revert to prevent misinformation.\\n     * @param memberAddr The address of the account to check\\n     * @param blockNumber The block number to get the vote balance at\\n     * @return The number of votes the account had as of the given block\\n     */\\n    function getPriorDelegateKey(address memberAddr, uint256 blockNumber)\\n        external\\n        view\\n        returns (address)\\n    {\\n        require(\\n            blockNumber < block.number,\\n            \\\"Uni::getPriorDelegateKey: not yet determined\\\"\\n        );\\n\\n        uint32 nCheckpoints = numCheckpoints[memberAddr];\\n        if (nCheckpoints == 0) {\\n            return memberAddr;\\n        }\\n\\n        // First check most recent balance\\n        if (\\n            checkpoints[memberAddr][nCheckpoints - 1].fromBlock <= blockNumber\\n        ) {\\n            return checkpoints[memberAddr][nCheckpoints - 1].delegateKey;\\n        }\\n\\n        // Next check implicit zero balance\\n        if (checkpoints[memberAddr][0].fromBlock > blockNumber) {\\n            return memberAddr;\\n        }\\n\\n        uint32 lower = 0;\\n        uint32 upper = nCheckpoints - 1;\\n        while (upper > lower) {\\n            uint32 center = upper - (upper - lower) / 2; // ceil, avoiding overflow\\n            DelegateCheckpoint memory cp = checkpoints[memberAddr][center];\\n            if (cp.fromBlock == blockNumber) {\\n                return cp.delegateKey;\\n            } else if (cp.fromBlock < blockNumber) {\\n                lower = center;\\n            } else {\\n                upper = center - 1;\\n            }\\n        }\\n        return checkpoints[memberAddr][lower].delegateKey;\\n    }\\n\\n    /**\\n     * @notice Creates a new delegate checkpoint of a certain member\\n     * @param member The member whose delegate checkpoints will be added to\\n     * @param newDelegateKey The delegate key that will be written into the new checkpoint\\n     */\\n    function _createNewDelegateCheckpoint(\\n        address member,\\n        address newDelegateKey\\n    ) internal {\\n        uint32 nCheckpoints = numCheckpoints[member];\\n        if (\\n            nCheckpoints > 0 &&\\n            checkpoints[member][nCheckpoints - 1].fromBlock == block.number\\n        ) {\\n            checkpoints[member][nCheckpoints - 1].delegateKey = newDelegateKey;\\n        } else {\\n            checkpoints[member][nCheckpoints] = DelegateCheckpoint(\\n                uint96(block.number),\\n                newDelegateKey\\n            );\\n            numCheckpoints[member] = nCheckpoints + 1;\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"/Users/davidroon/projects/tribute-contracts/contracts/extensions/IExtension.sol\": {\r\n      \"content\": \"pragma solidity ^0.8.0;\\nimport \\\"../core/DaoRegistry.sol\\\";\\n\\n// SPDX-License-Identifier: MIT\\n\\n/**\\nMIT License\\n\\nCopyright (c) 2020 Openlaw\\n\\nPermission is hereby granted, free of charge, to any person obtaining a copy\\nof this software and associated documentation files (the \\\"Software\\\"), to deal\\nin the Software without restriction, including without limitation the rights\\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\\ncopies of the Software, and to permit persons to whom the Software is\\nfurnished to do so, subject to the following conditions:\\n\\nThe above copyright notice and this permission notice shall be included in all\\ncopies or substantial portions of the Software.\\n\\nTHE SOFTWARE IS PROVIDED \\\"AS IS\\\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\\nSOFTWARE.\\n */\\n\\ninterface IExtension {\\n    function initialize(DaoRegistry dao, address creator) external;\\n}\\n\"\r\n    },\r\n    \"/Users/davidroon/projects/tribute-contracts/contracts/extensions/bank/Bank.sol\": {\r\n      \"content\": \"pragma solidity ^0.8.0;\\n\\n// SPDX-License-Identifier: MIT\\n\\nimport \\\"../../core/DaoConstants.sol\\\";\\nimport \\\"../../core/DaoRegistry.sol\\\";\\nimport \\\"../IExtension.sol\\\";\\nimport \\\"../../guards/AdapterGuard.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\n\\n/**\\nMIT License\\n\\nCopyright (c) 2020 Openlaw\\n\\nPermission is hereby granted, free of charge, to any person obtaining a copy\\nof this software and associated documentation files (the \\\"Software\\\"), to deal\\nin the Software without restriction, including without limitation the rights\\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\\ncopies of the Software, and to permit persons to whom the Software is\\nfurnished to do so, subject to the following conditions:\\n\\nThe above copyright notice and this permission notice shall be included in all\\ncopies or substantial portions of the Software.\\n\\nTHE SOFTWARE IS PROVIDED \\\"AS IS\\\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\\nSOFTWARE.\\n */\\n\\ncontract BankExtension is DaoConstants, AdapterGuard, IExtension {\\n    using Address for address payable;\\n    using SafeERC20 for IERC20;\\n\\n    uint8 public maxExternalTokens; // the maximum number of external tokens that can be stored in the bank\\n\\n    bool public initialized = false; // internally tracks deployment under eip-1167 proxy pattern\\n    DaoRegistry public dao;\\n\\n    enum AclFlag {\\n        ADD_TO_BALANCE,\\n        SUB_FROM_BALANCE,\\n        INTERNAL_TRANSFER,\\n        WITHDRAW,\\n        EXECUTE,\\n        REGISTER_NEW_TOKEN,\\n        REGISTER_NEW_INTERNAL_TOKEN,\\n        UPDATE_TOKEN\\n    }\\n\\n    modifier noProposal {\\n        require(dao.lockedAt() < block.number, \\\"proposal lock\\\");\\n        _;\\n    }\\n\\n    /// @dev - Events for Bank\\n    event NewBalance(address member, address tokenAddr, uint160 amount);\\n\\n    event Withdraw(address account, address tokenAddr, uint160 amount);\\n\\n    /*\\n     * STRUCTURES\\n     */\\n\\n    struct Checkpoint {\\n        // A checkpoint for marking number of votes from a given block\\n        uint96 fromBlock;\\n        uint160 amount;\\n    }\\n\\n    address[] public tokens;\\n    address[] public internalTokens;\\n    // tokenAddress => availability\\n    mapping(address => bool) public availableTokens;\\n    mapping(address => bool) public availableInternalTokens;\\n    // tokenAddress => memberAddress => checkpointNum => Checkpoint\\n    mapping(address => mapping(address => mapping(uint32 => Checkpoint)))\\n        public checkpoints;\\n    // tokenAddress => memberAddress => numCheckpoints\\n    mapping(address => mapping(address => uint32)) public numCheckpoints;\\n\\n    /// @notice Clonable contract must have an empty constructor\\n    // constructor() {\\n    // }\\n\\n    modifier hasExtensionAccess(AclFlag flag) {\\n        require(\\n            address(this) == msg.sender ||\\n                address(dao) == msg.sender ||\\n                dao.state() == DaoRegistry.DaoState.CREATION ||\\n                dao.hasAdapterAccessToExtension(\\n                    msg.sender,\\n                    address(this),\\n                    uint8(flag)\\n                ),\\n            \\\"bank::accessDenied\\\"\\n        );\\n        _;\\n    }\\n\\n    /**\\n     * @notice Initialises the DAO\\n     * @dev Involves initialising available tokens, checkpoints, and membership of creator\\n     * @dev Can only be called once\\n     * @param creator The DAO's creator, who will be an initial member\\n     */\\n    function initialize(DaoRegistry _dao, address creator) external override {\\n        require(!initialized, \\\"bank already initialized\\\");\\n        require(_dao.isMember(creator), \\\"bank::not member\\\");\\n        dao = _dao;\\n        initialized = true;\\n\\n        availableInternalTokens[UNITS] = true;\\n        internalTokens.push(UNITS);\\n\\n        availableInternalTokens[MEMBER_COUNT] = true;\\n        internalTokens.push(MEMBER_COUNT);\\n        uint256 nbMembers = _dao.getNbMembers();\\n        for (uint256 i = 0; i < nbMembers; i++) {\\n            addToBalance(_dao.getMemberAddress(i), MEMBER_COUNT, 1);\\n        }\\n\\n        _createNewAmountCheckpoint(creator, UNITS, 1);\\n        _createNewAmountCheckpoint(TOTAL, UNITS, 1);\\n    }\\n\\n    function withdraw(\\n        address payable member,\\n        address tokenAddr,\\n        uint256 amount\\n    ) external hasExtensionAccess(AclFlag.WITHDRAW) {\\n        require(\\n            balanceOf(member, tokenAddr) >= amount,\\n            \\\"bank::withdraw::not enough funds\\\"\\n        );\\n        subtractFromBalance(member, tokenAddr, amount);\\n        if (tokenAddr == ETH_TOKEN) {\\n            member.sendValue(amount);\\n        } else {\\n            IERC20 erc20 = IERC20(tokenAddr);\\n            erc20.safeTransfer(member, amount);\\n        }\\n\\n        emit Withdraw(member, tokenAddr, uint160(amount));\\n    }\\n\\n    /**\\n     * @return Whether or not the given token is an available internal token in the bank\\n     * @param token The address of the token to look up\\n     */\\n    function isInternalToken(address token) external view returns (bool) {\\n        return availableInternalTokens[token];\\n    }\\n\\n    /**\\n     * @return Whether or not the given token is an available token in the bank\\n     * @param token The address of the token to look up\\n     */\\n    function isTokenAllowed(address token) public view returns (bool) {\\n        return availableTokens[token];\\n    }\\n\\n    /**\\n     * @notice Sets the maximum amount of external tokens allowed in the bank\\n     * @param maxTokens The maximum amount of token allowed\\n     */\\n    function setMaxExternalTokens(uint8 maxTokens) external {\\n        require(!initialized, \\\"bank already initialized\\\");\\n        require(\\n            maxTokens > 0 && maxTokens <= MAX_TOKENS_GUILD_BANK,\\n            \\\"max number of external tokens should be (0,200)\\\"\\n        );\\n        maxExternalTokens = maxTokens;\\n    }\\n\\n    /*\\n     * BANK\\n     */\\n\\n    /**\\n     * @notice Registers a potential new token in the bank\\n     * @dev Can not be a reserved token or an available internal token\\n     * @param token The address of the token\\n     */\\n    function registerPotentialNewToken(address token)\\n        external\\n        hasExtensionAccess(AclFlag.REGISTER_NEW_TOKEN)\\n    {\\n        require(isNotReservedAddress(token), \\\"reservedToken\\\");\\n        require(!availableInternalTokens[token], \\\"internalToken\\\");\\n        require(\\n            tokens.length <= maxExternalTokens,\\n            \\\"exceeds the maximum tokens allowed\\\"\\n        );\\n\\n        if (!availableTokens[token]) {\\n            availableTokens[token] = true;\\n            tokens.push(token);\\n        }\\n    }\\n\\n    /**\\n     * @notice Registers a potential new internal token in the bank\\n     * @dev Can not be a reserved token or an available token\\n     * @param token The address of the token\\n     */\\n    function registerPotentialNewInternalToken(address token)\\n        external\\n        hasExtensionAccess(AclFlag.REGISTER_NEW_INTERNAL_TOKEN)\\n    {\\n        require(isNotReservedAddress(token), \\\"reservedToken\\\");\\n        require(!availableTokens[token], \\\"availableToken\\\");\\n\\n        if (!availableInternalTokens[token]) {\\n            availableInternalTokens[token] = true;\\n            internalTokens.push(token);\\n        }\\n    }\\n\\n    function updateToken(address tokenAddr)\\n        external\\n        hasExtensionAccess(AclFlag.UPDATE_TOKEN)\\n    {\\n        require(isTokenAllowed(tokenAddr), \\\"token not allowed\\\");\\n        uint256 totalBalance = balanceOf(TOTAL, tokenAddr);\\n\\n        uint256 realBalance;\\n\\n        if (tokenAddr == ETH_TOKEN) {\\n            realBalance = address(this).balance;\\n        } else {\\n            IERC20 erc20 = IERC20(tokenAddr);\\n            realBalance = erc20.balanceOf(address(this));\\n        }\\n\\n        if (totalBalance < realBalance) {\\n            addToBalance(GUILD, tokenAddr, realBalance - totalBalance);\\n        } else if (totalBalance > realBalance) {\\n            uint256 tokensToRemove = totalBalance - realBalance;\\n            uint256 guildBalance = balanceOf(GUILD, tokenAddr);\\n            if (guildBalance > tokensToRemove) {\\n                subtractFromBalance(GUILD, tokenAddr, tokensToRemove);\\n            } else {\\n                subtractFromBalance(GUILD, tokenAddr, guildBalance);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * Public read-only functions\\n     */\\n\\n    /**\\n     * Internal bookkeeping\\n     */\\n\\n    /**\\n     * @return The token from the bank of a given index\\n     * @param index The index to look up in the bank's tokens\\n     */\\n    function getToken(uint256 index) external view returns (address) {\\n        return tokens[index];\\n    }\\n\\n    /**\\n     * @return The amount of token addresses in the bank\\n     */\\n    function nbTokens() external view returns (uint256) {\\n        return tokens.length;\\n    }\\n\\n    /**\\n     * @return All the tokens registered in the bank.\\n     */\\n    function getTokens() external view returns (address[] memory) {\\n        return tokens;\\n    }\\n\\n    /**\\n     * @return The internal token at a given index\\n     * @param index The index to look up in the bank's array of internal tokens\\n     */\\n    function getInternalToken(uint256 index) external view returns (address) {\\n        return internalTokens[index];\\n    }\\n\\n    /**\\n     * @return The amount of internal token addresses in the bank\\n     */\\n    function nbInternalTokens() external view returns (uint256) {\\n        return internalTokens.length;\\n    }\\n\\n    /**\\n     * @notice Adds to a member's balance of a given token\\n     * @param member The member whose balance will be updated\\n     * @param token The token to update\\n     * @param amount The new balance\\n     */\\n    function addToBalance(\\n        address member,\\n        address token,\\n        uint256 amount\\n    ) public payable hasExtensionAccess(AclFlag.ADD_TO_BALANCE) {\\n        require(\\n            availableTokens[token] || availableInternalTokens[token],\\n            \\\"unknown token address\\\"\\n        );\\n        uint256 newAmount = balanceOf(member, token) + amount;\\n        uint256 newTotalAmount = balanceOf(TOTAL, token) + amount;\\n\\n        _createNewAmountCheckpoint(member, token, newAmount);\\n        _createNewAmountCheckpoint(TOTAL, token, newTotalAmount);\\n    }\\n\\n    /**\\n     * @notice Remove from a member's balance of a given token\\n     * @param member The member whose balance will be updated\\n     * @param token The token to update\\n     * @param amount The new balance\\n     */\\n    function subtractFromBalance(\\n        address member,\\n        address token,\\n        uint256 amount\\n    ) public hasExtensionAccess(AclFlag.SUB_FROM_BALANCE) {\\n        uint256 newAmount = balanceOf(member, token) - amount;\\n        uint256 newTotalAmount = balanceOf(TOTAL, token) - amount;\\n\\n        _createNewAmountCheckpoint(member, token, newAmount);\\n        _createNewAmountCheckpoint(TOTAL, token, newTotalAmount);\\n    }\\n\\n    /**\\n     * @notice Make an internal token transfer\\n     * @param from The member who is sending tokens\\n     * @param to The member who is receiving tokens\\n     * @param amount The new amount to transfer\\n     */\\n    function internalTransfer(\\n        address from,\\n        address to,\\n        address token,\\n        uint256 amount\\n    ) public hasExtensionAccess(AclFlag.INTERNAL_TRANSFER) {\\n        uint256 newAmount = balanceOf(from, token) - amount;\\n        uint256 newAmount2 = balanceOf(to, token) + amount;\\n\\n        _createNewAmountCheckpoint(from, token, newAmount);\\n        _createNewAmountCheckpoint(to, token, newAmount2);\\n    }\\n\\n    /**\\n     * @notice Returns an member's balance of a given token\\n     * @param member The address to look up\\n     * @param tokenAddr The token where the member's balance of which will be returned\\n     * @return The amount in account's tokenAddr balance\\n     */\\n    function balanceOf(address member, address tokenAddr)\\n        public\\n        view\\n        returns (uint160)\\n    {\\n        uint32 nCheckpoints = numCheckpoints[tokenAddr][member];\\n        return\\n            nCheckpoints > 0\\n                ? checkpoints[tokenAddr][member][nCheckpoints - 1].amount\\n                : 0;\\n    }\\n\\n    /**\\n     * @notice Determine the prior number of votes for an account as of a block number\\n     * @dev Block number must be a finalized block or else this function will revert to prevent misinformation.\\n     * @param account The address of the account to check\\n     * @param blockNumber The block number to get the vote balance at\\n     * @return The number of votes the account had as of the given block\\n     */\\n    function getPriorAmount(\\n        address account,\\n        address tokenAddr,\\n        uint256 blockNumber\\n    ) external view returns (uint256) {\\n        require(\\n            blockNumber < block.number,\\n            \\\"Uni::getPriorAmount: not yet determined\\\"\\n        );\\n\\n        uint32 nCheckpoints = numCheckpoints[tokenAddr][account];\\n        if (nCheckpoints == 0) {\\n            return 0;\\n        }\\n\\n        // First check most recent balance\\n        if (\\n            checkpoints[tokenAddr][account][nCheckpoints - 1].fromBlock <=\\n            blockNumber\\n        ) {\\n            return checkpoints[tokenAddr][account][nCheckpoints - 1].amount;\\n        }\\n\\n        // Next check implicit zero balance\\n        if (checkpoints[tokenAddr][account][0].fromBlock > blockNumber) {\\n            return 0;\\n        }\\n\\n        uint32 lower = 0;\\n        uint32 upper = nCheckpoints - 1;\\n        while (upper > lower) {\\n            uint32 center = upper - (upper - lower) / 2; // ceil, avoiding overflow\\n            Checkpoint memory cp = checkpoints[tokenAddr][account][center];\\n            if (cp.fromBlock == blockNumber) {\\n                return cp.amount;\\n            } else if (cp.fromBlock < blockNumber) {\\n                lower = center;\\n            } else {\\n                upper = center - 1;\\n            }\\n        }\\n        return checkpoints[tokenAddr][account][lower].amount;\\n    }\\n\\n    /**\\n     * @notice Creates a new amount checkpoint for a token of a certain member\\n     * @dev Reverts if the amount is greater than 2**64-1\\n     * @param member The member whose checkpoints will be added to\\n     * @param token The token of which the balance will be changed\\n     * @param amount The amount to be written into the new checkpoint\\n     */\\n    function _createNewAmountCheckpoint(\\n        address member,\\n        address token,\\n        uint256 amount\\n    ) internal {\\n        bool isValidToken = false;\\n        if (availableInternalTokens[token]) {\\n            require(\\n                amount < type(uint88).max,\\n                \\\"token amount exceeds the maximum limit for internal tokens\\\"\\n            );\\n            isValidToken = true;\\n        } else if (availableTokens[token]) {\\n            require(\\n                amount < type(uint160).max,\\n                \\\"token amount exceeds the maximum limit for external tokens\\\"\\n            );\\n            isValidToken = true;\\n        }\\n        uint160 newAmount = uint160(amount);\\n\\n        require(isValidToken, \\\"token not registered\\\");\\n\\n        uint32 nCheckpoints = numCheckpoints[token][member];\\n        if (\\n            nCheckpoints > 0 &&\\n            checkpoints[token][member][nCheckpoints - 1].fromBlock ==\\n            block.number\\n        ) {\\n            checkpoints[token][member][nCheckpoints - 1].amount = newAmount;\\n        } else {\\n            checkpoints[token][member][nCheckpoints] = Checkpoint(\\n                uint96(block.number),\\n                newAmount\\n            );\\n            numCheckpoints[token][member] = nCheckpoints + 1;\\n        }\\n        emit NewBalance(member, token, newAmount);\\n    }\\n}\\n\"\r\n    },\r\n    \"/Users/davidroon/projects/tribute-contracts/contracts/extensions/nft/NFT.sol\": {\r\n      \"content\": \"pragma solidity ^0.8.0;\\n\\n// SPDX-License-Identifier: MIT\\n\\nimport \\\"../../core/DaoConstants.sol\\\";\\nimport \\\"../../core/DaoRegistry.sol\\\";\\nimport \\\"../../guards/AdapterGuard.sol\\\";\\nimport \\\"../IExtension.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\\\";\\n\\n/**\\nMIT License\\n\\nCopyright (c) 2020 Openlaw\\n\\nPermission is hereby granted, free of charge, to any person obtaining a copy\\nof this software and associated documentation files (the \\\"Software\\\"), to deal\\nin the Software without restriction, including without limitation the rights\\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\\ncopies of the Software, and to permit persons to whom the Software is\\nfurnished to do so, subject to the following conditions:\\n\\nThe above copyright notice and this permission notice shall be included in all\\ncopies or substantial portions of the Software.\\n\\nTHE SOFTWARE IS PROVIDED \\\"AS IS\\\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\\nSOFTWARE.\\n */\\n\\ncontract NFTExtension is\\n    DaoConstants,\\n    AdapterGuard,\\n    IExtension,\\n    IERC721Receiver\\n{\\n    using Address for address payable;\\n    // Add the library methods\\n    using EnumerableSet for EnumerableSet.UintSet;\\n    using EnumerableSet for EnumerableSet.AddressSet;\\n\\n    bool public initialized = false; // internally tracks deployment under eip-1167 proxy pattern\\n    DaoRegistry public dao;\\n\\n    enum AclFlag {WITHDRAW_NFT, COLLECT_NFT, INTERNAL_TRANSFER}\\n\\n    event CollectedNFT(address nftAddr, uint256 nftTokenId);\\n    event TransferredNFT(\\n        address nftAddr,\\n        uint256 nftTokenId,\\n        address oldOwner,\\n        address newOwner\\n    );\\n    event WithdrawnNFT(address nftAddr, uint256 nftTokenId, address toAddress);\\n\\n    // All the Token IDs that belong to an NFT address stored in the GUILD collection\\n    mapping(address => EnumerableSet.UintSet) private _nfts;\\n\\n    // The internal owner of record of an NFT that has been transferred to the extension\\n    mapping(bytes32 => address) private _ownership;\\n\\n    // All the NFTs addresses collected and stored in the GUILD collection\\n    EnumerableSet.AddressSet private _nftAddresses;\\n\\n    modifier hasExtensionAccess(IExtension extension, AclFlag flag) {\\n        require(\\n            dao.state() == DaoRegistry.DaoState.CREATION ||\\n                dao.hasAdapterAccessToExtension(\\n                    msg.sender,\\n                    address(extension),\\n                    uint8(flag)\\n                ),\\n            \\\"nft::accessDenied\\\"\\n        );\\n        _;\\n    }\\n\\n    /// @notice Clonable contract must have an empty constructor\\n    constructor() {}\\n\\n    /**\\n     * @notice Initializes the extension with the DAO address that it belongs to.\\n     * @param _dao The address of the DAO that owns the extension.\\n     * @param creator The owner of the DAO and Extension that is also a member of the DAO.\\n     */\\n    function initialize(DaoRegistry _dao, address creator) external override {\\n        require(!initialized, \\\"already initialized\\\");\\n        require(_dao.isMember(creator), \\\"not a member\\\");\\n\\n        initialized = true;\\n        dao = _dao;\\n    }\\n\\n    /**\\n     * @notice Collects the NFT from the owner and moves it to the NFT extension.\\n     * @notice It must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * @dev Reverts if the NFT is not in ERC721 standard.\\n     * @param nftAddr The NFT contract address.\\n     * @param nftTokenId The NFT token id.\\n     */\\n    function collect(address nftAddr, uint256 nftTokenId)\\n        external\\n        hasExtensionAccess(this, AclFlag.COLLECT_NFT)\\n    {\\n        IERC721 erc721 = IERC721(nftAddr);\\n        // Move the NFT to the contract address\\n        address currentOwner = erc721.ownerOf(nftTokenId);\\n        //If the NFT is already in the NFTExtension, update the ownership if not set already\\n        if (currentOwner == address(this)) {\\n            if (_ownership[getNFTId(nftAddr, nftTokenId)] == address(0x0)) {\\n                _saveNft(nftAddr, nftTokenId, GUILD);\\n\\n                emit CollectedNFT(nftAddr, nftTokenId);\\n            }\\n            //If the NFT is not in the NFTExtension, we try to transfer from the current owner of the NFT to the extension\\n        } else {\\n            erc721.safeTransferFrom(currentOwner, address(this), nftTokenId);\\n            _saveNft(nftAddr, nftTokenId, GUILD);\\n\\n            emit CollectedNFT(nftAddr, nftTokenId);\\n        }\\n    }\\n\\n    /**\\n     * @notice Transfers the NFT token from the extension address to the new owner.\\n     * @notice It also updates the internal state to keep track of the all the NFTs collected by the extension.\\n     * @notice The caller must have the ACL Flag: WITHDRAW_NFT\\n     * @dev Reverts if the NFT is not in ERC721 standard.\\n     * @param newOwner The address of the new owner.\\n     * @param nftAddr The NFT address that must be in ERC721 standard.\\n     * @param nftTokenId The NFT token id.\\n     */\\n    function withdrawNFT(\\n        address newOwner,\\n        address nftAddr,\\n        uint256 nftTokenId\\n    ) public hasExtensionAccess(this, AclFlag.WITHDRAW_NFT) {\\n        // Remove the NFT from the contract address to the actual owner\\n        IERC721 erc721 = IERC721(nftAddr);\\n        erc721.safeTransferFrom(address(this), newOwner, nftTokenId);\\n        // Remove the asset from the extension\\n        _nfts[nftAddr].remove(nftTokenId);\\n        delete _ownership[getNFTId(nftAddr, nftTokenId)];\\n\\n        // If we dont hold asset from this address anymore, we can remove it\\n        if (_nfts[nftAddr].length() == 0) {\\n            _nftAddresses.remove(nftAddr);\\n        }\\n\\n        emit WithdrawnNFT(nftAddr, nftTokenId, newOwner);\\n    }\\n\\n    /**\\n     * @notice Updates internally the ownership of the NFT.\\n     * @notice The caller must have the ACL Flag: INTERNAL_TRANSFER\\n     * @dev Reverts if the NFT is not already internally owned in the extension.\\n     * @param nftAddr The NFT address.\\n     * @param nftTokenId The NFT token id.\\n     * @param newOwner The address of the new owner.\\n     */\\n    function internalTransfer(\\n        address nftAddr,\\n        uint256 nftTokenId,\\n        address newOwner\\n    ) public hasExtensionAccess(this, AclFlag.INTERNAL_TRANSFER) {\\n        require(newOwner != address(0x0), \\\"new owner is 0\\\");\\n        address currentOwner = _ownership[getNFTId(nftAddr, nftTokenId)];\\n        require(currentOwner != address(0x0), \\\"nft not found\\\");\\n\\n        _ownership[getNFTId(nftAddr, nftTokenId)] = newOwner;\\n\\n        emit TransferredNFT(nftAddr, nftTokenId, currentOwner, newOwner);\\n    }\\n\\n    /**\\n     * @notice Gets ID generated from an NFT address and token id (used internally to map ownership).\\n     * @param nftAddress The NFT address.\\n     * @param tokenId The NFT token id.\\n     */\\n    function getNFTId(address nftAddress, uint256 tokenId)\\n        public\\n        pure\\n        returns (bytes32)\\n    {\\n        return keccak256(abi.encodePacked(nftAddress, tokenId));\\n    }\\n\\n    /**\\n     * @notice Returns the total amount of token ids collected for an NFT address.\\n     * @param tokenAddr The NFT address.\\n     */\\n    function nbNFTs(address tokenAddr) public view returns (uint256) {\\n        return _nfts[tokenAddr].length();\\n    }\\n\\n    /**\\n     * @notice Returns token id associated with an NFT address stored in the GUILD collection at the specified index.\\n     * @param tokenAddr The NFT address.\\n     * @param index The index to get the token id if it exists.\\n     */\\n    function getNFT(address tokenAddr, uint256 index)\\n        public\\n        view\\n        returns (uint256)\\n    {\\n        return _nfts[tokenAddr].at(index);\\n    }\\n\\n    /**\\n     * @notice Returns the total amount of NFT addresses collected.\\n     */\\n    function nbNFTAddresses() external view returns (uint256) {\\n        return _nftAddresses.length();\\n    }\\n\\n    /**\\n     * @notice Returns NFT address stored in the GUILD collection at the specified index.\\n     * @param index The index to get the NFT address if it exists.\\n     */\\n    function getNFTAddress(uint256 index) external view returns (address) {\\n        return _nftAddresses.at(index);\\n    }\\n\\n    /**\\n     * @notice Returns owner of NFT that has been transferred to the extension.\\n     * @param nftAddress The NFT address.\\n     * @param tokenId The NFT token id.\\n     */\\n    function getNFTOwner(address nftAddress, uint256 tokenId)\\n        public\\n        view\\n        returns (address)\\n    {\\n        return _ownership[getNFTId(nftAddress, tokenId)];\\n    }\\n\\n    /**\\n     * @notice Required function from IERC721 standard to be able to receive assets to this contract address.\\n     */\\n    function onERC721Received(\\n        address,\\n        address,\\n        uint256,\\n        bytes calldata\\n    ) external pure override returns (bytes4) {\\n        return this.onERC721Received.selector;\\n    }\\n\\n    /**\\n     * @notice Helper function to update the extension states for an NFT collected by the extension.\\n     * @param nftAddr The NFT address.\\n     * @param nftTokenId The token id.\\n     * @param owner The address of the owner.\\n     */\\n    function _saveNft(\\n        address nftAddr,\\n        uint256 nftTokenId,\\n        address owner\\n    ) private {\\n        // Save the asset\\n        _nfts[nftAddr].add(nftTokenId);\\n        // set ownership to the GUILD\\n        _ownership[getNFTId(nftAddr, nftTokenId)] = owner;\\n        // Keep track of the collected assets\\n        _nftAddresses.add(nftAddr);\\n    }\\n}\\n\"\r\n    },\r\n    \"/Users/davidroon/projects/tribute-contracts/contracts/extensions/nft/NFTCollectionFactory.sol\": {\r\n      \"content\": \"pragma solidity ^0.8.0;\\n\\n// SPDX-License-Identifier: MIT\\n\\nimport \\\"../../core/DaoConstants.sol\\\";\\nimport \\\"../../core/DaoRegistry.sol\\\";\\nimport \\\"../../core/CloneFactory.sol\\\";\\nimport \\\"./NFT.sol\\\";\\n\\n/**\\nMIT License\\n\\nCopyright (c) 2020 Openlaw\\n\\nPermission is hereby granted, free of charge, to any person obtaining a copy\\nof this software and associated documentation files (the \\\"Software\\\"), to deal\\nin the Software without restriction, including without limitation the rights\\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\\ncopies of the Software, and to permit persons to whom the Software is\\nfurnished to do so, subject to the following conditions:\\n\\nThe above copyright notice and this permission notice shall be included in all\\ncopies or substantial portions of the Software.\\n\\nTHE SOFTWARE IS PROVIDED \\\"AS IS\\\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\\nSOFTWARE.\\n */\\n\\ncontract NFTCollectionFactory is CloneFactory, DaoConstants {\\n    address public identityAddress;\\n\\n    event NFTCollectionCreated(address nftCollAddress);\\n\\n    constructor(address _identityAddress) {\\n        identityAddress = _identityAddress;\\n    }\\n\\n    /**\\n     * @notice Create and initialize a new Standard NFT Extension which is based on ERC712\\n     */\\n    function createNFTCollection() external {\\n        NFTExtension extension = NFTExtension(_createClone(identityAddress));\\n        emit NFTCollectionCreated(address(extension));\\n    }\\n}\\n\"\r\n    },\r\n    \"/Users/davidroon/projects/tribute-contracts/contracts/guards/AdapterGuard.sol\": {\r\n      \"content\": \"pragma solidity ^0.8.0;\\n\\n// SPDX-License-Identifier: MIT\\n\\nimport \\\"../core/DaoRegistry.sol\\\";\\nimport \\\"../extensions/IExtension.sol\\\";\\n\\n/**\\nMIT License\\n\\nCopyright (c) 2020 Openlaw\\n\\nPermission is hereby granted, free of charge, to any person obtaining a copy\\nof this software and associated documentation files (the \\\"Software\\\"), to deal\\nin the Software without restriction, including without limitation the rights\\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\\ncopies of the Software, and to permit persons to whom the Software is\\nfurnished to do so, subject to the following conditions:\\n\\nThe above copyright notice and this permission notice shall be included in all\\ncopies or substantial portions of the Software.\\n\\nTHE SOFTWARE IS PROVIDED \\\"AS IS\\\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\\nSOFTWARE.\\n */\\nabstract contract AdapterGuard {\\n    /**\\n     * @dev Only registered adapters are allowed to execute the function call.\\n     */\\n    modifier onlyAdapter(DaoRegistry dao) {\\n        require(\\n            (dao.state() == DaoRegistry.DaoState.CREATION &&\\n                creationModeCheck(dao)) || dao.isAdapter(msg.sender),\\n            \\\"onlyAdapter\\\"\\n        );\\n        _;\\n    }\\n\\n    modifier reentrancyGuard(DaoRegistry dao) {\\n        require(dao.lockedAt() != block.number, \\\"reentrancy guard\\\");\\n        dao.lockSession();\\n        _;\\n        dao.unlockSession();\\n    }\\n\\n    modifier hasAccess(DaoRegistry dao, DaoRegistry.AclFlag flag) {\\n        require(\\n            (dao.state() == DaoRegistry.DaoState.CREATION &&\\n                creationModeCheck(dao)) ||\\n                dao.hasAdapterAccess(msg.sender, flag),\\n            \\\"accessDenied\\\"\\n        );\\n        _;\\n    }\\n\\n    function creationModeCheck(DaoRegistry dao) internal view returns (bool) {\\n        return\\n            dao.getNbMembers() == 0 ||\\n            dao.isMember(msg.sender) ||\\n            dao.isAdapter(msg.sender);\\n    }\\n}\\n\"\r\n    },\r\n    \"/Users/davidroon/projects/tribute-contracts/contracts/guards/MemberGuard.sol\": {\r\n      \"content\": \"pragma solidity ^0.8.0;\\n\\n// SPDX-License-Identifier: MIT\\n\\nimport \\\"../core/DaoRegistry.sol\\\";\\nimport \\\"../extensions/bank/Bank.sol\\\";\\n\\n/**\\nMIT License\\n\\nCopyright (c) 2020 Openlaw\\n\\nPermission is hereby granted, free of charge, to any person obtaining a copy\\nof this software and associated documentation files (the \\\"Software\\\"), to deal\\nin the Software without restriction, including without limitation the rights\\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\\ncopies of the Software, and to permit persons to whom the Software is\\nfurnished to do so, subject to the following conditions:\\n\\nThe above copyright notice and this permission notice shall be included in all\\ncopies or substantial portions of the Software.\\n\\nTHE SOFTWARE IS PROVIDED \\\"AS IS\\\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\\nSOFTWARE.\\n */\\nabstract contract MemberGuard is DaoConstants {\\n    /**\\n     * @dev Only members of the DAO are allowed to execute the function call.\\n     */\\n    modifier onlyMember(DaoRegistry dao) {\\n        _onlyMember(dao, msg.sender);\\n        _;\\n    }\\n\\n    modifier onlyMember2(DaoRegistry dao, address _addr) {\\n        _onlyMember(dao, _addr);\\n        _;\\n    }\\n\\n    function _onlyMember(DaoRegistry dao, address _addr) internal view {\\n        require(isActiveMember(dao, _addr), \\\"onlyMember\\\");\\n    }\\n\\n    function isActiveMember(DaoRegistry dao, address _addr)\\n        public\\n        view\\n        returns (bool)\\n    {\\n        address bankAddress = dao.extensions(BANK);\\n        if (bankAddress != address(0x0)) {\\n            address memberAddr = dao.getAddressIfDelegated(_addr);\\n            return BankExtension(bankAddress).balanceOf(memberAddr, UNITS) > 0;\\n        }\\n\\n        return dao.isMember(_addr);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        // solhint-disable-next-line max-line-length\\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) { // Return data is optional\\n            // solhint-disable-next-line max-line-length\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/IERC721.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    /**\\n      * @dev Safely transfers `tokenId` token from `from` to `to`.\\n      *\\n      * Requirements:\\n      *\\n      * - `from` cannot be the zero address.\\n      * - `to` cannot be the zero address.\\n      * - `tokenId` token must exist and be owned by `from`.\\n      * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n      * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n      *\\n      * Emits a {Transfer} event.\\n      */\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\\n     */\\n    function onERC721Received(address operator, address from, uint256 tokenId, bytes calldata data) external returns (bytes4);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/introspection/IERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping (bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) { // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            // When the value to delete is the last one, the swap operation is unnecessary. However, since this occurs\\n            // so rarely, we still do the swap anyway to avoid the gas cost of adding an 'if' statement.\\n\\n            bytes32 lastvalue = set._values[lastIndex];\\n\\n            // Move the last value to the index where the value to delete is\\n            set._values[toDeleteIndex] = lastvalue;\\n            // Update the index for the moved value\\n            set._indexes[lastvalue] = toDeleteIndex + 1; // All indexes are 1-based\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        require(set._values.length > index, \\\"EnumerableSet: index out of bounds\\\");\\n        return set._values[index];\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"remappings\": [],\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 10000\r\n    },\r\n    \"evmVersion\": \"istanbul\",\r\n    \"libraries\": {},\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_identityAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"nftCollAddress\",\"type\":\"address\"}],\"name\":\"NFTCollectionCreated\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"createNFTCollection\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"flags\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"flag\",\"type\":\"uint256\"}],\"name\":\"getFlag\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"identityAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"isNotReservedAddress\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"isNotZeroAddress\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"flags\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"flag\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"value\",\"type\":\"bool\"}],\"name\":\"setFlag\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"}]","ContractName":"NFTCollectionFactory","CompilerVersion":"v0.8.0+commit.c7dfd78e","OptimizationUsed":"1","Runs":"10000","ConstructorArguments":"0000000000000000000000005a23de16ad8c550a6bf90498ef311d92625be8f6","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}