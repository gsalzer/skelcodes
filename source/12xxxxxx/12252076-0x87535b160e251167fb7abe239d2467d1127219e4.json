{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"settings\": {\r\n    \"evmVersion\": \"istanbul\",\r\n    \"libraries\": {},\r\n    \"metadata\": {\r\n      \"bytecodeHash\": \"ipfs\",\r\n      \"useLiteralContent\": true\r\n    },\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 99999\r\n    },\r\n    \"remappings\": [],\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  },\r\n  \"sources\": {\r\n    \"contracts/ArcherSwapRouter.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n/*\\n  Copyright 2021 Archer DAO: Chris Piatt (chris@archerdao.io).\\n*/\\n\\nimport \\\"./interfaces/IUniRouter.sol\\\";\\nimport \\\"./interfaces/ITipJar.sol\\\";\\nimport \\\"./interfaces/IERC20Extended.sol\\\";\\nimport \\\"./lib/SafeERC20.sol\\\";\\n\\n/**\\n * @title ArcherSwapRouter\\n * @dev Allows Uniswap V2 Router-compliant trades to be paid via % tips instead of gas\\n */\\ncontract ArcherSwapRouter {\\n    using SafeERC20 for IERC20Extended;\\n\\n    /// @notice Receive function to allow contract to accept ETH\\n    receive() external payable {}\\n    \\n    /// @notice Fallback function in case receive function is not matched\\n    fallback() external payable {}\\n\\n    /// @notice TipJar proxy\\n    ITipJar public immutable tipJar;\\n\\n    /// @notice Trade details\\n    struct Trade {\\n        uint amountIn;\\n        uint amountOut;\\n        address[] path;\\n        address payable to;\\n        uint256 deadline;\\n    }\\n\\n    /// @notice Add Liquidity details\\n    struct AddLiquidity {\\n        address tokenA;\\n        address tokenB;\\n        uint amountADesired;\\n        uint amountBDesired;\\n        uint amountAMin;\\n        uint amountBMin;\\n        address to;\\n        uint deadline;\\n    }\\n\\n    /// @notice Remove Liquidity details\\n    struct RemoveLiquidity {\\n        IERC20Extended lpToken;\\n        address tokenA;\\n        address tokenB;\\n        uint liquidity;\\n        uint amountAMin;\\n        uint amountBMin;\\n        address to;\\n        uint deadline;\\n    }\\n\\n    /// @notice Permit details\\n    struct Permit {\\n        IERC20Extended token;\\n        uint256 amount;\\n        uint deadline;\\n        uint8 v;\\n        bytes32 r; \\n        bytes32 s;\\n    }\\n\\n    /**\\n     * @notice Contructs a new ArcherSwap Router\\n     * @param _tipJar Address of TipJar contract\\n     */\\n    constructor(address _tipJar) {\\n        tipJar = ITipJar(_tipJar);\\n    }\\n\\n    /**\\n     * @notice Add liquidity to token pair\\n     * @param router Uniswap V2-compliant Router contract\\n     * @param liquidity Liquidity details\\n     */\\n    function addLiquidityAndTipAmount(\\n        IUniRouter router,\\n        AddLiquidity calldata liquidity\\n    ) external payable {\\n        require(msg.value > 0, \\\"tip amount must be > 0\\\");\\n        _tipAmountETH(msg.value);\\n        _addLiquidity(\\n            router,\\n            liquidity.tokenA, \\n            liquidity.tokenB, \\n            liquidity.amountADesired, \\n            liquidity.amountBDesired, \\n            liquidity.amountAMin,\\n            liquidity.amountBMin,\\n            liquidity.to,\\n            liquidity.deadline\\n        );\\n    }\\n\\n    /**\\n     * @notice Add liquidity to pair, using permit for approvals\\n     * @param router Uniswap V2-compliant Router contract\\n     * @param liquidity Liquidity details\\n     * @param permitA Permit details for token A\\n     * @param permitB Permit details for token B\\n     */\\n    function addLiquidityWithPermitAndTipAmount(\\n        IUniRouter router,\\n        AddLiquidity calldata liquidity,\\n        Permit calldata permitA,\\n        Permit calldata permitB\\n    ) external payable {\\n        require(msg.value > 0, \\\"tip amount must be > 0\\\");\\n        if(permitA.amount > 0) {\\n            _permit(permitA.token, permitA.amount, permitA.deadline, permitA.v, permitA.r, permitA.s);\\n        }\\n        if(permitB.amount > 0) {\\n            _permit(permitB.token, permitB.amount, permitB.deadline, permitB.v, permitB.r, permitB.s);\\n        }\\n        _tipAmountETH(msg.value);\\n        _addLiquidity(\\n            router,\\n            liquidity.tokenA, \\n            liquidity.tokenB, \\n            liquidity.amountADesired, \\n            liquidity.amountBDesired, \\n            liquidity.amountAMin, \\n            liquidity.amountBMin,\\n            liquidity.to,\\n            liquidity.deadline\\n        );\\n    }\\n\\n    /**\\n     * @notice Add liquidity to ETH>Token pair\\n     * @param router Uniswap V2-compliant Router contract\\n     * @param liquidity Liquidity details\\n     * @param tipAmount tip amount\\n     */\\n    function addLiquidityETHAndTipAmount(\\n        IUniRouter router,\\n        AddLiquidity calldata liquidity,\\n        uint256 tipAmount\\n    ) external payable {\\n        require(tipAmount > 0, \\\"tip amount must be > 0\\\");\\n        require(msg.value >= liquidity.amountBDesired + tipAmount, \\\"must send ETH to cover tip + liquidity\\\");\\n        _tipAmountETH(tipAmount);\\n        _addLiquidityETH(\\n            router,\\n            liquidity.tokenA,\\n            liquidity.amountADesired, \\n            liquidity.amountBDesired, \\n            liquidity.amountAMin,\\n            liquidity.amountBMin,\\n            liquidity.to,\\n            liquidity.deadline\\n        );\\n    }\\n\\n    /**\\n     * @notice Add liquidity to ETH>Token pair\\n     * @param router Uniswap V2-compliant Router contract\\n     * @param liquidity Liquidity details\\n     * @param tipAmount tip amount\\n     */\\n    function addLiquidityETHWithPermitAndTipAmount(\\n        IUniRouter router,\\n        AddLiquidity calldata liquidity,\\n        Permit calldata permit,\\n        uint256 tipAmount\\n    ) external payable {\\n        require(tipAmount > 0, \\\"tip amount must be > 0\\\");\\n        require(msg.value >= liquidity.amountBDesired + tipAmount, \\\"must send ETH to cover tip + liquidity\\\");\\n        _permit(permit.token, permit.amount, permit.deadline, permit.v, permit.r, permit.s);\\n        _tipAmountETH(tipAmount);\\n        _addLiquidityETH(\\n            router,\\n            liquidity.tokenA,\\n            liquidity.amountADesired, \\n            liquidity.amountBDesired, \\n            liquidity.amountAMin,\\n            liquidity.amountBMin,\\n            liquidity.to,\\n            liquidity.deadline\\n        );\\n    }\\n\\n    /**\\n     * @notice Remove liquidity from token>token pair\\n     * @param router Uniswap V2-compliant Router contract\\n     * @param liquidity Liquidity details\\n     */\\n    function removeLiquidityAndTipAmount(\\n        IUniRouter router,\\n        RemoveLiquidity calldata liquidity\\n    ) external payable {\\n        require(msg.value > 0, \\\"tip amount must be > 0\\\");\\n        _tipAmountETH(msg.value);\\n        _removeLiquidity(\\n            router,\\n            liquidity.lpToken,\\n            liquidity.tokenA, \\n            liquidity.tokenB, \\n            liquidity.liquidity,\\n            liquidity.amountAMin,\\n            liquidity.amountBMin,\\n            liquidity.to,\\n            liquidity.deadline\\n        );\\n    }\\n\\n    /**\\n     * @notice Remove liquidity from ETH>token pair\\n     * @param router Uniswap V2-compliant Router contract\\n     * @param liquidity Liquidity details\\n     */\\n    function removeLiquidityETHAndTipAmount(\\n        IUniRouter router,\\n        RemoveLiquidity calldata liquidity\\n    ) external payable {\\n        require(msg.value > 0, \\\"tip amount must be > 0\\\");\\n        _tipAmountETH(msg.value);\\n        _removeLiquidityETH(\\n            router,\\n            liquidity.lpToken,\\n            liquidity.tokenA,\\n            liquidity.liquidity, \\n            liquidity.amountAMin,\\n            liquidity.amountBMin,\\n            liquidity.to,\\n            liquidity.deadline\\n        );\\n    }\\n\\n    /**\\n     * @notice Remove liquidity from token>token pair, using permit for approval\\n     * @param router Uniswap V2-compliant Router contract\\n     * @param liquidity Liquidity details\\n     * @param permit Permit details\\n     */\\n    function removeLiquidityWithPermitAndTipAmount(\\n        IUniRouter router,\\n        RemoveLiquidity calldata liquidity,\\n        Permit calldata permit\\n    ) external payable {\\n        require(msg.value > 0, \\\"tip amount must be > 0\\\");\\n        _tipAmountETH(msg.value);\\n        _permit(permit.token, permit.amount, permit.deadline, permit.v, permit.r, permit.s);\\n        _removeLiquidity(\\n            router,\\n            liquidity.lpToken,\\n            liquidity.tokenA, \\n            liquidity.tokenB, \\n            liquidity.liquidity,\\n            liquidity.amountAMin,\\n            liquidity.amountBMin,\\n            liquidity.to,\\n            liquidity.deadline\\n        );\\n    }\\n\\n    /**\\n     * @notice Remove liquidity from ETH>token pair, using permit for approval\\n     * @param router Uniswap V2-compliant Router contract\\n     * @param liquidity Liquidity details\\n     * @param permit Permit details\\n     */\\n    function removeLiquidityETHWithPermitAndTipAmount(\\n        IUniRouter router,\\n        RemoveLiquidity calldata liquidity,\\n        Permit calldata permit\\n    ) external payable {\\n        require(msg.value > 0, \\\"tip amount must be > 0\\\");\\n        _tipAmountETH(msg.value);\\n        _permit(permit.token, permit.amount, permit.deadline, permit.v, permit.r, permit.s);\\n        _removeLiquidityETH(\\n            router,\\n            liquidity.lpToken,\\n            liquidity.tokenA,\\n            liquidity.liquidity, \\n            liquidity.amountAMin,\\n            liquidity.amountBMin,\\n            liquidity.to,\\n            liquidity.deadline\\n        );\\n    }\\n\\n    /**\\n     * @notice Swap tokens for ETH and pay amount of ETH as tip\\n     * @param router Uniswap V2-compliant Router contract\\n     * @param trade Trade details\\n     */\\n    function swapExactTokensForETHAndTipAmount(\\n        IUniRouter router,\\n        Trade calldata trade\\n    ) external payable {\\n        require(msg.value > 0, \\\"tip amount must be > 0\\\");\\n        _tipAmountETH(msg.value);\\n        _swapExactTokensForETH(router, trade.amountIn, trade.amountOut, trade.path, trade.to, trade.deadline);\\n    }\\n\\n    /**\\n     * @notice Swap tokens for ETH and pay amount of ETH as tip, using permit for approval\\n     * @param router Uniswap V2-compliant Router contract\\n     * @param trade Trade details\\n     * @param permit Permit details\\n     */\\n    function swapExactTokensForETHWithPermitAndTipAmount(\\n        IUniRouter router,\\n        Trade calldata trade,\\n        Permit calldata permit\\n    ) external payable {\\n        require(msg.value > 0, \\\"tip amount must be > 0\\\");\\n        _permit(permit.token, permit.amount, permit.deadline, permit.v, permit.r, permit.s);\\n        _tipAmountETH(msg.value);\\n        _swapExactTokensForETH(router, trade.amountIn, trade.amountOut, trade.path, trade.to, trade.deadline);\\n    }\\n\\n    /**\\n     * @notice Swap tokens for ETH and pay % of ETH as tip\\n     * @param router Uniswap V2-compliant Router contract\\n     * @param trade Trade details\\n     * @param tipPct % of resulting ETH to pay as tip\\n     */\\n    function swapExactTokensForETHAndTipPct(\\n        IUniRouter router,\\n        Trade calldata trade,\\n        uint32 tipPct\\n    ) external payable {\\n        require(tipPct > 0, \\\"tipPct must be > 0\\\");\\n        _swapExactTokensForETH(router, trade.amountIn, trade.amountOut, trade.path, address(this), trade.deadline);\\n        _tipPctETH(tipPct);\\n        _transferContractETHBalance(trade.to);\\n    }\\n\\n    /**\\n     * @notice Swap tokens for ETH and pay % of ETH as tip, using permit for approval\\n     * @param router Uniswap V2-compliant Router contract\\n     * @param trade Trade details\\n     * @param permit Permit details\\n     * @param tipPct % of resulting ETH to pay as tip\\n     */\\n    function swapExactTokensForETHWithPermitAndTipPct(\\n        IUniRouter router,\\n        Trade calldata trade,\\n        Permit calldata permit,\\n        uint32 tipPct\\n    ) external payable {\\n        require(tipPct > 0, \\\"tipPct must be > 0\\\");\\n        _permit(permit.token, permit.amount, permit.deadline, permit.v, permit.r, permit.s);\\n        _swapExactTokensForETH(router, trade.amountIn, trade.amountOut, trade.path, address(this), trade.deadline);\\n        _tipPctETH(tipPct);\\n        _transferContractETHBalance(trade.to);\\n    }\\n\\n    /**\\n     * @notice Swap tokens for ETH and pay amount of ETH as tip\\n     * @param router Uniswap V2-compliant Router contract\\n     * @param trade Trade details\\n     */\\n    function swapTokensForExactETHAndTipAmount(\\n        IUniRouter router,\\n        Trade calldata trade\\n    ) external payable {\\n        require(msg.value > 0, \\\"tip amount must be > 0\\\");\\n        _tipAmountETH(msg.value);\\n        _swapTokensForExactETH(router, trade.amountOut, trade.amountIn, trade.path, trade.to, trade.deadline);\\n    }\\n\\n    /**\\n     * @notice Swap tokens for ETH and pay amount of ETH as tip, using permit for approval\\n     * @param router Uniswap V2-compliant Router contract\\n     * @param trade Trade details\\n     * @param permit Permit details\\n     */\\n    function swapTokensForExactETHWithPermitAndTipAmount(\\n        IUniRouter router,\\n        Trade calldata trade,\\n        Permit calldata permit\\n    ) external payable {\\n        require(msg.value > 0, \\\"tip amount must be > 0\\\");\\n        _tipAmountETH(msg.value);\\n        _permit(permit.token, permit.amount, permit.deadline, permit.v, permit.r, permit.s);\\n        _swapTokensForExactETH(router, trade.amountOut, trade.amountIn, trade.path, trade.to, trade.deadline);\\n    }\\n\\n    /**\\n     * @notice Swap tokens for ETH and pay % of ETH as tip\\n     * @param router Uniswap V2-compliant Router contract\\n     * @param trade Trade details\\n     * @param tipPct % of resulting ETH to pay as tip\\n     */\\n    function swapTokensForExactETHAndTipPct(\\n        IUniRouter router,\\n        Trade calldata trade,\\n        uint32 tipPct\\n    ) external payable {\\n        require(tipPct > 0, \\\"tipPct must be > 0\\\");\\n        _swapTokensForExactETH(router, trade.amountOut, trade.amountIn, trade.path, address(this), trade.deadline);\\n        _tipPctETH(tipPct);\\n        _transferContractETHBalance(trade.to);\\n    }\\n\\n    /**\\n     * @notice Swap tokens for ETH and pay % of ETH as tip, using permit for approval\\n     * @param router Uniswap V2-compliant Router contract\\n     * @param trade Trade details\\n     * @param permit Permit details\\n     * @param tipPct % of resulting ETH to pay as tip\\n     */\\n    function swapTokensForExactETHWithPermitAndTipPct(\\n        IUniRouter router,\\n        Trade calldata trade,\\n        Permit calldata permit,\\n        uint32 tipPct\\n    ) external payable {\\n        require(tipPct > 0, \\\"tipPct must be > 0\\\");\\n        _permit(permit.token, permit.amount, permit.deadline, permit.v, permit.r, permit.s);\\n        _swapTokensForExactETH(router, trade.amountOut, trade.amountIn, trade.path, address(this), trade.deadline);\\n        _tipPctETH(tipPct);\\n        _transferContractETHBalance(trade.to);\\n    }\\n\\n    /**\\n     * @notice Swap ETH for tokens and pay % of ETH input as tip\\n     * @param router Uniswap V2-compliant Router contract\\n     * @param trade Trade details\\n     * @param tipAmount amount of ETH to pay as tip\\n     */\\n    function swapExactETHForTokensWithTipAmount(\\n        IUniRouter router,\\n        Trade calldata trade,\\n        uint256 tipAmount\\n    ) external payable {\\n        require(tipAmount > 0, \\\"tip amount must be > 0\\\");\\n        require(msg.value >= tipAmount, \\\"must send ETH to cover tip\\\");\\n        _tipAmountETH(tipAmount);\\n        _swapExactETHForTokens(router, trade.amountIn, trade.amountOut, trade.path, trade.to, trade.deadline);\\n    }\\n\\n    /**\\n     * @notice Swap ETH for tokens and pay % of ETH input as tip\\n     * @param router Uniswap V2-compliant Router contract\\n     * @param trade Trade details\\n     * @param tipPct % of ETH to pay as tip\\n     */\\n    function swapExactETHForTokensWithTipPct(\\n        IUniRouter router,\\n        Trade calldata trade,\\n        uint32 tipPct\\n    ) external payable {\\n        require(tipPct > 0, \\\"tipPct must be > 0\\\");\\n        require(msg.value > 0, \\\"must send ETH to cover tip\\\");\\n        uint256 tipAmount = (msg.value * tipPct) / 1000000;\\n        _tipAmountETH(tipAmount);\\n        _swapExactETHForTokens(router, trade.amountIn, trade.amountOut, trade.path, trade.to, trade.deadline);\\n    }\\n\\n    /**\\n     * @notice Swap ETH for tokens and pay amount of ETH input as tip\\n     * @param router Uniswap V2-compliant Router contract\\n     * @param trade Trade details\\n     * @param tipAmount amount of ETH to pay as tip\\n     */\\n    function swapETHForExactTokensWithTipAmount(\\n        IUniRouter router,\\n        Trade calldata trade,\\n        uint256 tipAmount\\n    ) external payable {\\n        require(tipAmount > 0, \\\"tip amount must be > 0\\\");\\n        require(msg.value >= tipAmount, \\\"must send ETH to cover tip\\\");\\n        _tipAmountETH(tipAmount);\\n        _swapETHForExactTokens(router, trade.amountOut, trade.amountIn, trade.path, trade.to, trade.deadline);\\n    }\\n\\n    /**\\n     * @notice Swap ETH for tokens and pay % of ETH input as tip\\n     * @param router Uniswap V2-compliant Router contract\\n     * @param trade Trade details\\n     * @param tipPct % of ETH to pay as tip\\n     */\\n    function swapETHForExactTokensWithTipPct(\\n        IUniRouter router,\\n        Trade calldata trade,\\n        uint32 tipPct\\n    ) external payable {\\n        require(tipPct > 0, \\\"tipPct must be > 0\\\");\\n        require(msg.value > 0, \\\"must send ETH to cover tip\\\");\\n        uint256 tipAmount = (msg.value * tipPct) / 1000000;\\n        _tipAmountETH(tipAmount);\\n        _swapETHForExactTokens(router, trade.amountOut, trade.amountIn, trade.path, trade.to, trade.deadline);\\n    }\\n\\n    /**\\n     * @notice Swap tokens for tokens and pay ETH amount as tip\\n     * @param router Uniswap V2-compliant Router contract\\n     * @param trade Trade details\\n     */\\n    function swapExactTokensForTokensWithTipAmount(\\n        IUniRouter router,\\n        Trade calldata trade\\n    ) external payable {\\n        require(msg.value > 0, \\\"tip amount must be > 0\\\");\\n        _tipAmountETH(msg.value);\\n        _swapExactTokensForTokens(router, trade.amountIn, trade.amountOut, trade.path, trade.to, trade.deadline);\\n    }\\n\\n    /**\\n     * @notice Swap tokens for tokens and pay ETH amount as tip\\n     * @param router Uniswap V2-compliant Router contract\\n     * @param trade Trade details\\n     * @param permit Permit details\\n     */\\n    function swapExactTokensForTokensWithPermitAndTipAmount(\\n        IUniRouter router,\\n        Trade calldata trade,\\n        Permit calldata permit\\n    ) external payable {\\n        require(msg.value > 0, \\\"tip amount must be > 0\\\");\\n        _tipAmountETH(msg.value);\\n        _permit(permit.token, permit.amount, permit.deadline, permit.v, permit.r, permit.s);\\n        _swapExactTokensForTokens(router, trade.amountIn, trade.amountOut, trade.path, trade.to, trade.deadline);\\n    }\\n\\n    /**\\n     * @notice Swap tokens for tokens and pay % of tokens as tip\\n     * @param router Uniswap V2-compliant Router contract\\n     * @param trade Trade details\\n     * @param pathToEth Path to ETH for tip\\n     * @param minEth ETH minimum for tip conversion\\n     * @param tipPct % of resulting tokens to pay as tip\\n     */\\n    function swapExactTokensForTokensWithTipPct(\\n        IUniRouter router,\\n        Trade calldata trade,\\n        address[] calldata pathToEth,\\n        uint256 minEth,\\n        uint32 tipPct\\n    ) external payable {\\n        require(tipPct > 0, \\\"tipPct must be > 0\\\");\\n        _swapExactTokensForTokens(router, trade.amountIn, trade.amountOut, trade.path, address(this), trade.deadline);\\n        IERC20Extended toToken = IERC20Extended(pathToEth[0]);\\n        uint256 contractTokenBalance = toToken.balanceOf(address(this));\\n        uint256 tipAmount = (contractTokenBalance * tipPct) / 1000000;\\n        _tipWithTokens(router, tipAmount, pathToEth, trade.deadline, minEth);\\n        _transferContractTokenBalance(toToken, trade.to);\\n    }\\n\\n    /**\\n     * @notice Swap tokens for tokens and pay % of tokens as tip, using permit for approval\\n     * @param router Uniswap V2-compliant Router contract\\n     * @param trade Trade details\\n     * @param permit Permit details\\n     * @param pathToEth Path to ETH for tip\\n     * @param minEth ETH minimum for tip conversion\\n     * @param tipPct % of resulting tokens to pay as tip\\n     */\\n    function swapExactTokensForTokensWithPermitAndTipPct(\\n        IUniRouter router,\\n        Trade calldata trade,\\n        Permit calldata permit,\\n        address[] calldata pathToEth,\\n        uint256 minEth,\\n        uint32 tipPct\\n    ) external payable {\\n        require(tipPct > 0, \\\"tipPct must be > 0\\\");\\n        _permit(permit.token, permit.amount, permit.deadline, permit.v, permit.r, permit.s);\\n        _swapExactTokensForTokens(router, trade.amountIn, trade.amountOut, trade.path, address(this), trade.deadline);\\n        IERC20Extended toToken = IERC20Extended(pathToEth[0]);\\n        uint256 contractTokenBalance = toToken.balanceOf(address(this));\\n        uint256 tipAmount = (contractTokenBalance * tipPct) / 1000000;\\n        _tipWithTokens(router, tipAmount, pathToEth, trade.deadline, minEth);\\n        _transferContractTokenBalance(toToken, trade.to);\\n    }\\n\\n    /**\\n     * @notice Swap tokens for tokens and pay ETH amount as tip\\n     * @param router Uniswap V2-compliant Router contract\\n     * @param trade Trade details\\n     */\\n    function swapTokensForExactTokensWithTipAmount(\\n        IUniRouter router,\\n        Trade calldata trade\\n    ) external payable {\\n        require(msg.value > 0, \\\"tip amount must be > 0\\\");\\n        _tipAmountETH(msg.value);\\n        _swapTokensForExactTokens(router, trade.amountOut, trade.amountIn, trade.path, trade.to, trade.deadline);\\n    }\\n\\n    /**\\n     * @notice Swap tokens for tokens and pay ETH amount as tip\\n     * @param router Uniswap V2-compliant Router contract\\n     * @param trade Trade details\\n     * @param permit Permit details\\n     */\\n    function swapTokensForExactTokensWithPermitAndTipAmount(\\n        IUniRouter router,\\n        Trade calldata trade,\\n        Permit calldata permit\\n    ) external payable {\\n        require(msg.value > 0, \\\"tip amount must be > 0\\\");\\n        _tipAmountETH(msg.value);\\n        _permit(permit.token, permit.amount, permit.deadline, permit.v, permit.r, permit.s);\\n        _swapTokensForExactTokens(router, trade.amountOut, trade.amountIn, trade.path, trade.to, trade.deadline);\\n    }\\n\\n    /**\\n     * @notice Swap tokens for tokens and pay % of tokens as tip\\n     * @param router Uniswap V2-compliant Router contract\\n     * @param trade Trade details\\n     * @param pathToEth Path to ETH for tip\\n     * @param minEth ETH minimum for tip conversion\\n     * @param tipPct % of resulting tokens to pay as tip\\n     */\\n    function swapTokensForExactTokensWithTipPct(\\n        IUniRouter router,\\n        Trade calldata trade,\\n        address[] calldata pathToEth,\\n        uint256 minEth,\\n        uint32 tipPct\\n    ) external payable {\\n        require(tipPct > 0, \\\"tipPct must be > 0\\\");\\n        _swapTokensForExactTokens(router, trade.amountOut, trade.amountIn, trade.path, address(this), trade.deadline);\\n        IERC20Extended toToken = IERC20Extended(pathToEth[0]);\\n        uint256 contractTokenBalance = toToken.balanceOf(address(this));\\n        uint256 tipAmount = (contractTokenBalance * tipPct) / 1000000;\\n        _tipWithTokens(router, tipAmount, pathToEth, trade.deadline, minEth);\\n        _transferContractTokenBalance(toToken, trade.to);\\n    }\\n\\n    /**\\n     * @notice Swap tokens for tokens and pay % of tokens as tip, using permit for approval\\n     * @param router Uniswap V2-compliant Router contract\\n     * @param trade Trade details\\n     * @param permit Permit details\\n     * @param pathToEth Path to ETH for tip\\n     * @param minEth ETH minimum for tip conversion\\n     * @param tipPct % of resulting tokens to pay as tip\\n     */\\n    function swapTokensForExactTokensWithPermitAndTipPct(\\n        IUniRouter router,\\n        Trade calldata trade,\\n        Permit calldata permit,\\n        address[] calldata pathToEth,\\n        uint256 minEth,\\n        uint32 tipPct\\n    ) external payable {\\n        require(tipPct > 0, \\\"tipPct must be > 0\\\");\\n        _permit(permit.token, permit.amount, permit.deadline, permit.v, permit.r, permit.s);\\n        _swapTokensForExactTokens(router, trade.amountOut, trade.amountIn, trade.path, address(this), trade.deadline);\\n        IERC20Extended toToken = IERC20Extended(pathToEth[0]);\\n        uint256 contractTokenBalance = toToken.balanceOf(address(this));\\n        uint256 tipAmount = (contractTokenBalance * tipPct) / 1000000;\\n        _tipWithTokens(router, tipAmount, pathToEth, trade.deadline, minEth);\\n        _transferContractTokenBalance(toToken, trade.to);\\n    }\\n\\n    function _addLiquidity(\\n        IUniRouter router,\\n        address tokenA,\\n        address tokenB,\\n        uint amountADesired,\\n        uint amountBDesired,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline\\n    ) internal {\\n        IERC20Extended fromToken = IERC20Extended(tokenA);\\n        IERC20Extended toToken = IERC20Extended(tokenB);\\n        fromToken.safeTransferFrom(msg.sender, address(this), amountADesired);\\n        fromToken.safeIncreaseAllowance(address(router), amountADesired);\\n        toToken.safeTransferFrom(msg.sender, address(this), amountBDesired);\\n        toToken.safeIncreaseAllowance(address(router), amountBDesired);\\n        (uint256 amountA, uint256 amountB, ) = router.addLiquidity(tokenA, tokenB, amountADesired, amountBDesired, amountAMin, amountBMin, to, deadline);\\n        if(amountADesired > amountA) {\\n            fromToken.safeTransfer(msg.sender, fromToken.balanceOf(address(this)));\\n        }\\n        if(amountBDesired > amountB) {\\n            toToken.safeTransfer(msg.sender, toToken.balanceOf(address(this)));\\n        }\\n    }\\n\\n    function _addLiquidityETH(\\n        IUniRouter router,\\n        address token,\\n        uint amountTokenDesired,\\n        uint amountETHDesired,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) internal {\\n        IERC20Extended fromToken = IERC20Extended(token);\\n        fromToken.safeTransferFrom(msg.sender, address(this), amountTokenDesired);\\n        fromToken.safeIncreaseAllowance(address(router), amountTokenDesired);\\n        (uint256 amountToken, uint256 amountETH, ) = router.addLiquidityETH{value: amountETHDesired}(token, amountTokenDesired, amountTokenMin, amountETHMin, to, deadline);\\n        if(amountTokenDesired > amountToken) {\\n            fromToken.safeTransfer(msg.sender, amountTokenDesired - amountToken);\\n        }\\n        if(amountETHDesired > amountETH) {\\n            (bool success, ) = msg.sender.call{value: amountETHDesired - amountETH}(\\\"\\\");\\n            require(success);\\n        }\\n    }\\n\\n    function _removeLiquidity(\\n        IUniRouter router,\\n        IERC20Extended lpToken,\\n        address tokenA,\\n        address tokenB,\\n        uint liquidity,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline\\n    ) internal {\\n        lpToken.safeTransferFrom(msg.sender, address(this), liquidity);\\n        lpToken.safeIncreaseAllowance(address(router), liquidity);\\n        (uint256 amountA, uint256 amountB) = router.removeLiquidity(tokenA, tokenB, liquidity, amountAMin, amountBMin, to, deadline);\\n        IERC20Extended fromToken = IERC20Extended(tokenA);\\n        IERC20Extended toToken = IERC20Extended(tokenB);\\n        fromToken.safeTransfer(msg.sender, amountA);\\n        toToken.safeTransfer(msg.sender, amountB);\\n    }\\n\\n    function _removeLiquidityETH(\\n        IUniRouter router,\\n        IERC20Extended lpToken,\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) internal {\\n        lpToken.safeTransferFrom(msg.sender, address(this), liquidity);\\n        lpToken.safeIncreaseAllowance(address(router), liquidity);\\n        (uint256 amountToken, uint256 amountETH) = router.removeLiquidityETH(token, liquidity, amountTokenMin, amountETHMin, to, deadline);\\n        IERC20Extended fromToken = IERC20Extended(token);\\n        fromToken.safeTransfer(msg.sender, amountToken);\\n        (bool success, ) = msg.sender.call{value: amountETH}(\\\"\\\");\\n        require(success);\\n    }\\n\\n    /**\\n     * @notice Internal implementation of swap ETH for tokens\\n     * @param amountIn Amount to swap\\n     * @param amountOutMin Minimum amount out\\n     * @param path Path for swap\\n     * @param deadline Block timestamp deadline for trade\\n     */\\n    function _swapExactETHForTokens(\\n        IUniRouter router,\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) internal {\\n        router.swapExactETHForTokensSupportingFeeOnTransferTokens{value: amountIn}(amountOutMin, path, to, deadline);\\n    }\\n\\n    /**\\n     * @notice Internal implementation of swap ETH for tokens\\n     * @param amountOut Amount of ETH out\\n     * @param amountInMax Max amount in\\n     * @param path Path for swap\\n     * @param to Address to receive ETH\\n     * @param deadline Block timestamp deadline for trade\\n     */\\n    function _swapETHForExactTokens(\\n        IUniRouter router,\\n        uint amountOut,\\n        uint amountInMax,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) internal {\\n        router.swapETHForExactTokens{value: amountInMax}(amountOut, path, to, deadline);\\n    }\\n\\n    /**\\n     * @notice Internal implementation of swap tokens for ETH\\n     * @param amountOut Amount of ETH out\\n     * @param amountInMax Max amount in\\n     * @param path Path for swap\\n     * @param to Address to receive ETH\\n     * @param deadline Block timestamp deadline for trade\\n     */\\n    function _swapTokensForExactETH(\\n        IUniRouter router,\\n        uint amountOut,\\n        uint amountInMax,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) internal {\\n        IERC20Extended fromToken = IERC20Extended(path[0]);\\n        fromToken.safeTransferFrom(msg.sender, address(this), amountInMax);\\n        fromToken.safeIncreaseAllowance(address(router), amountInMax);\\n        router.swapTokensForExactETH(amountOut, amountInMax, path, to, deadline);\\n    }\\n\\n    /**\\n     * @notice Internal implementation of swap tokens for ETH\\n     * @param amountIn Amount to swap\\n     * @param amountOutMin Minimum amount out\\n     * @param path Path for swap\\n     * @param deadline Block timestamp deadline for trade\\n     */\\n    function _swapExactTokensForETH(\\n        IUniRouter router,\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) internal {\\n        IERC20Extended fromToken = IERC20Extended(path[0]);\\n        fromToken.safeTransferFrom(msg.sender, address(this), amountIn);\\n        fromToken.safeIncreaseAllowance(address(router), amountIn);\\n        router.swapExactTokensForETHSupportingFeeOnTransferTokens(amountIn, amountOutMin, path, to, deadline);\\n    }\\n\\n    /**\\n     * @notice Internal implementation of swap tokens for tokens\\n     * @param amountIn Amount to swap\\n     * @param amountOutMin Minimum amount out\\n     * @param path Path for swap\\n     * @param deadline Block timestamp deadline for trade\\n     */\\n    function _swapExactTokensForTokens(\\n        IUniRouter router,\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) internal {\\n        IERC20Extended fromToken = IERC20Extended(path[0]);\\n        fromToken.safeTransferFrom(msg.sender, address(this), amountIn);\\n        fromToken.safeIncreaseAllowance(address(router), amountIn);\\n        router.swapExactTokensForTokensSupportingFeeOnTransferTokens(amountIn, amountOutMin, path, to, deadline);\\n    }\\n\\n    /**\\n     * @notice Internal implementation of swap tokens for tokens\\n     * @param amountOut Amount of tokens out\\n     * @param amountInMax Max amount in\\n     * @param path Path for swap\\n     * @param to Address to receive tokens\\n     * @param deadline Block timestamp deadline for trade\\n     */\\n    function _swapTokensForExactTokens(\\n        IUniRouter router,\\n        uint amountOut,\\n        uint amountInMax,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) internal {\\n        IERC20Extended fromToken = IERC20Extended(path[0]);\\n        fromToken.safeTransferFrom(msg.sender, address(this), amountInMax);\\n        fromToken.safeIncreaseAllowance(address(router), amountInMax);\\n        router.swapTokensForExactTokens(amountOut, amountInMax, path, to, deadline);\\n    }\\n\\n    /**\\n     * @notice Tip % of ETH contract balance\\n     * @param tipPct % to tip\\n     */\\n    function _tipPctETH(uint32 tipPct) internal {\\n        uint256 contractBalance = address(this).balance;\\n        uint256 tipAmount = (contractBalance * tipPct) / 1000000;\\n        tipJar.tip{value: tipAmount}();\\n    }\\n\\n    /**\\n     * @notice Tip specific amount of ETH\\n     * @param tipAmount Amount to tip\\n     */\\n    function _tipAmountETH(uint256 tipAmount) internal {\\n        tipJar.tip{value: tipAmount}();\\n    }\\n\\n    /**\\n     * @notice Transfer contract ETH balance to specified user\\n     * @param to User to receive transfer\\n     */\\n    function _transferContractETHBalance(address payable to) internal {\\n        (bool success, ) = to.call{value: address(this).balance}(\\\"\\\");\\n        require(success);\\n    }\\n\\n    /**\\n     * @notice Transfer contract token balance to specified user\\n     * @param token Token to transfer\\n     * @param to User to receive transfer\\n     */\\n    function _transferContractTokenBalance(IERC20Extended token, address payable to) internal {\\n        token.safeTransfer(to, token.balanceOf(address(this)));\\n    }\\n\\n    /**\\n     * @notice Convert a token balance into ETH and then tip\\n     * @param amountIn Amount to swap\\n     * @param path Path for swap\\n     * @param deadline Block timestamp deadline for trade\\n     */\\n    function _tipWithTokens(\\n        IUniRouter router,\\n        uint amountIn,\\n        address[] memory path,\\n        uint256 deadline,\\n        uint256 minEth\\n    ) internal {\\n        IERC20Extended(path[0]).safeIncreaseAllowance(address(router), amountIn);\\n        router.swapExactTokensForETHSupportingFeeOnTransferTokens(amountIn, minEth, path, address(this), deadline);\\n        tipJar.tip{value: address(this).balance}();\\n    }\\n\\n    /**\\n     * @notice Permit contract to spend user's balance\\n     * @param token Token to permit\\n     * @param amount Amount to permit\\n     * @param deadline Block timestamp deadline for permit\\n     * @param v The recovery byte of the signature\\n     * @param r Half of the ECDSA signature pair\\n     * @param s Half of the ECDSA signature pair\\n     */\\n    function _permit(\\n        IERC20Extended token, \\n        uint amount,\\n        uint deadline,\\n        uint8 v, \\n        bytes32 r, \\n        bytes32 s\\n    ) internal {\\n        token.permit(msg.sender, address(this), amount, deadline, v, r, s);\\n    }\\n}\"\r\n    },\r\n    \"contracts/interfaces/IERC20Extended.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\ninterface IERC20Extended {\\n    function name() external view returns (string memory);\\n    function symbol() external view returns (string memory);\\n    function decimals() external view returns (uint8);\\n    function totalSupply() external view returns (uint256);\\n    function version() external view returns (uint8);\\n    function balanceOf(address account) external view returns (uint256);\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n    function transferWithAuthorization(address from, address to, uint256 value, uint256 validAfter, uint256 validBefore, bytes32 nonce, uint8 v, bytes32 r, bytes32 s) external;\\n    function receiveWithAuthorization(address from, address to, uint256 value, uint256 validAfter, uint256 validBefore, bytes32 nonce, uint8 v, bytes32 r, bytes32 s) external;\\n    function allowance(address owner, address spender) external view returns (uint256);\\n    function approve(address spender, uint256 amount) external returns (bool);\\n    function increaseAllowance(address spender, uint256 addedValue) external returns (bool);\\n    function decreaseAllowance(address spender, uint256 subtractedValue) external returns (bool);\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n    function permit(address owner, address spender, uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) external;\\n    function nonces(address) external view returns (uint);\\n    function getDomainSeparator() external view returns (bytes32);\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n    function DOMAIN_TYPEHASH() external view returns (bytes32);\\n    function VERSION_HASH() external view returns (bytes32);\\n    function PERMIT_TYPEHASH() external view returns (bytes32);\\n    function TRANSFER_WITH_AUTHORIZATION_TYPEHASH() external view returns (bytes32);\\n    function RECEIVE_WITH_AUTHORIZATION_TYPEHASH() external view returns (bytes32);\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n    event AuthorizationUsed(address indexed authorizer, bytes32 indexed nonce);\\n}\"\r\n    },\r\n    \"contracts/interfaces/ITipJar.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface ITipJar {\\n    function tip() external payable;\\n    function updateMinerSplit(address minerAddress, address splitTo, uint32 splitPct) external;\\n    function setFeeCollector(address newCollector) external;\\n    function setFee(uint32 newFee) external;\\n    function changeAdmin(address newAdmin) external;\\n    function upgradeTo(address newImplementation) external;\\n    function upgradeToAndCall(address newImplementation, bytes calldata data) external payable; \\n}\"\r\n    },\r\n    \"contracts/interfaces/IUniRouter.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: MIT\\npragma solidity >=0.6.2;\\n\\ninterface IUniswapV2Router01 {\\n    function factory() external pure returns (address);\\n    function WETH() external pure returns (address);\\n\\n    function addLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint amountADesired,\\n        uint amountBDesired,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountA, uint amountB, uint liquidity);\\n    function addLiquidityETH(\\n        address token,\\n        uint amountTokenDesired,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\\n    function removeLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint liquidity,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountA, uint amountB);\\n    function removeLiquidityETH(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountToken, uint amountETH);\\n    function removeLiquidityWithPermit(\\n        address tokenA,\\n        address tokenB,\\n        uint liquidity,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\n    ) external returns (uint amountA, uint amountB);\\n    function removeLiquidityETHWithPermit(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\n    ) external returns (uint amountToken, uint amountETH);\\n    function swapExactTokensForTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external returns (uint[] memory amounts);\\n    function swapTokensForExactTokens(\\n        uint amountOut,\\n        uint amountInMax,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external returns (uint[] memory amounts);\\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\\n        external\\n        payable\\n        returns (uint[] memory amounts);\\n    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\\n        external\\n        returns (uint[] memory amounts);\\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\\n        external\\n        returns (uint[] memory amounts);\\n    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\\n        external\\n        payable\\n        returns (uint[] memory amounts);\\n\\n    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\\n    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\\n}\\n\\ninterface IUniRouter is IUniswapV2Router01 {\\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountETH);\\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\n    ) external returns (uint amountETH);\\n\\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external;\\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external payable;\\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external;\\n}\"\r\n    },\r\n    \"contracts/lib/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\"\r\n    },\r\n    \"contracts/lib/SafeERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../interfaces/IERC20Extended.sol\\\";\\nimport \\\"./Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20Extended;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(IERC20Extended token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(IERC20Extended token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20Extended-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20Extended token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        // solhint-disable-next-line max-line-length\\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(IERC20Extended token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(IERC20Extended token, address spender, uint256 value) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20Extended token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) { // Return data is optional\\n            // solhint-disable-next-line max-line-length\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\"\r\n    }\r\n  }\r\n}}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tipJar\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[{\"internalType\":\"contract IUniRouter\",\"name\":\"router\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"tokenA\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenB\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountADesired\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountBDesired\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountAMin\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountBMin\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"internalType\":\"struct ArcherSwapRouter.AddLiquidity\",\"name\":\"liquidity\",\"type\":\"tuple\"}],\"name\":\"addLiquidityAndTipAmount\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IUniRouter\",\"name\":\"router\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"tokenA\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenB\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountADesired\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountBDesired\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountAMin\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountBMin\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"internalType\":\"struct ArcherSwapRouter.AddLiquidity\",\"name\":\"liquidity\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"tipAmount\",\"type\":\"uint256\"}],\"name\":\"addLiquidityETHAndTipAmount\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IUniRouter\",\"name\":\"router\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"tokenA\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenB\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountADesired\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountBDesired\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountAMin\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountBMin\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"internalType\":\"struct ArcherSwapRouter.AddLiquidity\",\"name\":\"liquidity\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"contract IERC20Extended\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"internalType\":\"struct ArcherSwapRouter.Permit\",\"name\":\"permit\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"tipAmount\",\"type\":\"uint256\"}],\"name\":\"addLiquidityETHWithPermitAndTipAmount\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IUniRouter\",\"name\":\"router\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"tokenA\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenB\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountADesired\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountBDesired\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountAMin\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountBMin\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"internalType\":\"struct ArcherSwapRouter.AddLiquidity\",\"name\":\"liquidity\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"contract IERC20Extended\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"internalType\":\"struct ArcherSwapRouter.Permit\",\"name\":\"permitA\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"contract IERC20Extended\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"internalType\":\"struct ArcherSwapRouter.Permit\",\"name\":\"permitB\",\"type\":\"tuple\"}],\"name\":\"addLiquidityWithPermitAndTipAmount\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IUniRouter\",\"name\":\"router\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"contract IERC20Extended\",\"name\":\"lpToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenA\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenB\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"liquidity\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountAMin\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountBMin\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"internalType\":\"struct ArcherSwapRouter.RemoveLiquidity\",\"name\":\"liquidity\",\"type\":\"tuple\"}],\"name\":\"removeLiquidityAndTipAmount\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IUniRouter\",\"name\":\"router\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"contract IERC20Extended\",\"name\":\"lpToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenA\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenB\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"liquidity\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountAMin\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountBMin\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"internalType\":\"struct ArcherSwapRouter.RemoveLiquidity\",\"name\":\"liquidity\",\"type\":\"tuple\"}],\"name\":\"removeLiquidityETHAndTipAmount\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IUniRouter\",\"name\":\"router\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"contract IERC20Extended\",\"name\":\"lpToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenA\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenB\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"liquidity\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountAMin\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountBMin\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"internalType\":\"struct ArcherSwapRouter.RemoveLiquidity\",\"name\":\"liquidity\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"contract IERC20Extended\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"internalType\":\"struct ArcherSwapRouter.Permit\",\"name\":\"permit\",\"type\":\"tuple\"}],\"name\":\"removeLiquidityETHWithPermitAndTipAmount\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IUniRouter\",\"name\":\"router\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"contract IERC20Extended\",\"name\":\"lpToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenA\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenB\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"liquidity\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountAMin\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountBMin\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"internalType\":\"struct ArcherSwapRouter.RemoveLiquidity\",\"name\":\"liquidity\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"contract IERC20Extended\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"internalType\":\"struct ArcherSwapRouter.Permit\",\"name\":\"permit\",\"type\":\"tuple\"}],\"name\":\"removeLiquidityWithPermitAndTipAmount\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IUniRouter\",\"name\":\"router\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"},{\"internalType\":\"address payable\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"internalType\":\"struct ArcherSwapRouter.Trade\",\"name\":\"trade\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"tipAmount\",\"type\":\"uint256\"}],\"name\":\"swapETHForExactTokensWithTipAmount\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IUniRouter\",\"name\":\"router\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"},{\"internalType\":\"address payable\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"internalType\":\"struct ArcherSwapRouter.Trade\",\"name\":\"trade\",\"type\":\"tuple\"},{\"internalType\":\"uint32\",\"name\":\"tipPct\",\"type\":\"uint32\"}],\"name\":\"swapETHForExactTokensWithTipPct\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IUniRouter\",\"name\":\"router\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"},{\"internalType\":\"address payable\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"internalType\":\"struct ArcherSwapRouter.Trade\",\"name\":\"trade\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"tipAmount\",\"type\":\"uint256\"}],\"name\":\"swapExactETHForTokensWithTipAmount\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IUniRouter\",\"name\":\"router\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"},{\"internalType\":\"address payable\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"internalType\":\"struct ArcherSwapRouter.Trade\",\"name\":\"trade\",\"type\":\"tuple\"},{\"internalType\":\"uint32\",\"name\":\"tipPct\",\"type\":\"uint32\"}],\"name\":\"swapExactETHForTokensWithTipPct\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IUniRouter\",\"name\":\"router\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"},{\"internalType\":\"address payable\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"internalType\":\"struct ArcherSwapRouter.Trade\",\"name\":\"trade\",\"type\":\"tuple\"}],\"name\":\"swapExactTokensForETHAndTipAmount\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IUniRouter\",\"name\":\"router\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"},{\"internalType\":\"address payable\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"internalType\":\"struct ArcherSwapRouter.Trade\",\"name\":\"trade\",\"type\":\"tuple\"},{\"internalType\":\"uint32\",\"name\":\"tipPct\",\"type\":\"uint32\"}],\"name\":\"swapExactTokensForETHAndTipPct\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IUniRouter\",\"name\":\"router\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"},{\"internalType\":\"address payable\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"internalType\":\"struct ArcherSwapRouter.Trade\",\"name\":\"trade\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"contract IERC20Extended\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"internalType\":\"struct ArcherSwapRouter.Permit\",\"name\":\"permit\",\"type\":\"tuple\"}],\"name\":\"swapExactTokensForETHWithPermitAndTipAmount\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IUniRouter\",\"name\":\"router\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"},{\"internalType\":\"address payable\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"internalType\":\"struct ArcherSwapRouter.Trade\",\"name\":\"trade\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"contract IERC20Extended\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"internalType\":\"struct ArcherSwapRouter.Permit\",\"name\":\"permit\",\"type\":\"tuple\"},{\"internalType\":\"uint32\",\"name\":\"tipPct\",\"type\":\"uint32\"}],\"name\":\"swapExactTokensForETHWithPermitAndTipPct\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IUniRouter\",\"name\":\"router\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"},{\"internalType\":\"address payable\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"internalType\":\"struct ArcherSwapRouter.Trade\",\"name\":\"trade\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"contract IERC20Extended\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"internalType\":\"struct ArcherSwapRouter.Permit\",\"name\":\"permit\",\"type\":\"tuple\"}],\"name\":\"swapExactTokensForTokensWithPermitAndTipAmount\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IUniRouter\",\"name\":\"router\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"},{\"internalType\":\"address payable\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"internalType\":\"struct ArcherSwapRouter.Trade\",\"name\":\"trade\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"contract IERC20Extended\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"internalType\":\"struct ArcherSwapRouter.Permit\",\"name\":\"permit\",\"type\":\"tuple\"},{\"internalType\":\"address[]\",\"name\":\"pathToEth\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"minEth\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"tipPct\",\"type\":\"uint32\"}],\"name\":\"swapExactTokensForTokensWithPermitAndTipPct\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IUniRouter\",\"name\":\"router\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"},{\"internalType\":\"address payable\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"internalType\":\"struct ArcherSwapRouter.Trade\",\"name\":\"trade\",\"type\":\"tuple\"}],\"name\":\"swapExactTokensForTokensWithTipAmount\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IUniRouter\",\"name\":\"router\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"},{\"internalType\":\"address payable\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"internalType\":\"struct ArcherSwapRouter.Trade\",\"name\":\"trade\",\"type\":\"tuple\"},{\"internalType\":\"address[]\",\"name\":\"pathToEth\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"minEth\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"tipPct\",\"type\":\"uint32\"}],\"name\":\"swapExactTokensForTokensWithTipPct\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IUniRouter\",\"name\":\"router\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"},{\"internalType\":\"address payable\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"internalType\":\"struct ArcherSwapRouter.Trade\",\"name\":\"trade\",\"type\":\"tuple\"}],\"name\":\"swapTokensForExactETHAndTipAmount\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IUniRouter\",\"name\":\"router\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"},{\"internalType\":\"address payable\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"internalType\":\"struct ArcherSwapRouter.Trade\",\"name\":\"trade\",\"type\":\"tuple\"},{\"internalType\":\"uint32\",\"name\":\"tipPct\",\"type\":\"uint32\"}],\"name\":\"swapTokensForExactETHAndTipPct\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IUniRouter\",\"name\":\"router\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"},{\"internalType\":\"address payable\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"internalType\":\"struct ArcherSwapRouter.Trade\",\"name\":\"trade\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"contract IERC20Extended\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"internalType\":\"struct ArcherSwapRouter.Permit\",\"name\":\"permit\",\"type\":\"tuple\"}],\"name\":\"swapTokensForExactETHWithPermitAndTipAmount\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IUniRouter\",\"name\":\"router\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"},{\"internalType\":\"address payable\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"internalType\":\"struct ArcherSwapRouter.Trade\",\"name\":\"trade\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"contract IERC20Extended\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"internalType\":\"struct ArcherSwapRouter.Permit\",\"name\":\"permit\",\"type\":\"tuple\"},{\"internalType\":\"uint32\",\"name\":\"tipPct\",\"type\":\"uint32\"}],\"name\":\"swapTokensForExactETHWithPermitAndTipPct\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IUniRouter\",\"name\":\"router\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"},{\"internalType\":\"address payable\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"internalType\":\"struct ArcherSwapRouter.Trade\",\"name\":\"trade\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"contract IERC20Extended\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"internalType\":\"struct ArcherSwapRouter.Permit\",\"name\":\"permit\",\"type\":\"tuple\"}],\"name\":\"swapTokensForExactTokensWithPermitAndTipAmount\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IUniRouter\",\"name\":\"router\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"},{\"internalType\":\"address payable\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"internalType\":\"struct ArcherSwapRouter.Trade\",\"name\":\"trade\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"contract IERC20Extended\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"internalType\":\"struct ArcherSwapRouter.Permit\",\"name\":\"permit\",\"type\":\"tuple\"},{\"internalType\":\"address[]\",\"name\":\"pathToEth\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"minEth\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"tipPct\",\"type\":\"uint32\"}],\"name\":\"swapTokensForExactTokensWithPermitAndTipPct\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IUniRouter\",\"name\":\"router\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"},{\"internalType\":\"address payable\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"internalType\":\"struct ArcherSwapRouter.Trade\",\"name\":\"trade\",\"type\":\"tuple\"}],\"name\":\"swapTokensForExactTokensWithTipAmount\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IUniRouter\",\"name\":\"router\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"},{\"internalType\":\"address payable\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"internalType\":\"struct ArcherSwapRouter.Trade\",\"name\":\"trade\",\"type\":\"tuple\"},{\"internalType\":\"address[]\",\"name\":\"pathToEth\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"minEth\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"tipPct\",\"type\":\"uint32\"}],\"name\":\"swapTokensForExactTokensWithTipPct\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tipJar\",\"outputs\":[{\"internalType\":\"contract ITipJar\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]","ContractName":"ArcherSwapRouter","CompilerVersion":"v0.8.3+commit.8d00100c","OptimizationUsed":"1","Runs":"99999","ConstructorArguments":"0000000000000000000000005312b0d160e16feeeec13437a0053009e7564287","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":""}]}