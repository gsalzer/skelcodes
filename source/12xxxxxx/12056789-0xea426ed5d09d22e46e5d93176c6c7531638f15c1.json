{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.6.10;\r\npragma experimental ABIEncoderV2;\r\n\r\ninterface TokenInterface {\r\n    function balanceOf(address) external view returns (uint);\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n    function decimals() external view returns (uint);\r\n    function name() external view returns (string memory);\r\n    function symbol() external view returns (string memory);\r\n\r\n}\r\n\r\ncontract Resolver {\r\n    struct TokenData {\r\n        bool isToken;\r\n        string name;\r\n        string symbol;\r\n        uint256 decimals;\r\n    }\r\n\r\n    function getTokenDetails(address[] memory tknAddress) public view returns (TokenData[] memory) {\r\n        TokenData[] memory tokenDatas = new TokenData[](tknAddress.length);\r\n        for (uint i = 0; i < tknAddress.length; i++) {\r\n            if (tknAddress[i] == 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE) {\r\n                tokenDatas[i] = TokenData(\r\n                    true,\r\n                    \"ETHER\",\r\n                    \"ETH\",\r\n                    18\r\n                );\r\n            } else {\r\n                TokenInterface token = TokenInterface(tknAddress[i]);\r\n                bool isToken = true;\r\n                \r\n                try token.symbol() {\r\n                } catch {\r\n                    isToken = false;\r\n                    continue;\r\n                }\r\n                \r\n                try token.name() {\r\n                } catch {\r\n                    isToken = false;\r\n                    continue;\r\n                }\r\n                \r\n                try token.decimals() {\r\n                } catch {\r\n                    isToken = false;\r\n                    continue;\r\n                }\r\n                \r\n                tokenDatas[i] = TokenData(\r\n                        true,\r\n                        token.name(),\r\n                        token.symbol(),\r\n                        token.decimals()\r\n                );\r\n            }\r\n        }\r\n        return tokenDatas;\r\n    }\r\n\r\n    function getBalances(address owner, address[] memory tknAddress) public view returns (uint[] memory) {\r\n        uint[] memory tokensBal = new uint[](tknAddress.length);\r\n        for (uint i = 0; i < tknAddress.length; i++) {\r\n            if (tknAddress[i] == 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE) {\r\n                tokensBal[i] = owner.balance;\r\n            } else {\r\n                TokenInterface token = TokenInterface(tknAddress[i]);\r\n                tokensBal[i] = token.balanceOf(owner);\r\n            }\r\n        }\r\n        return tokensBal;\r\n    }\r\n\r\n    function getAllowances(address owner, address spender, address[] memory tknAddress) public view returns (uint[] memory) {\r\n        uint[] memory tokenAllowances = new uint[](tknAddress.length);\r\n        for (uint i = 0; i < tknAddress.length; i++) {\r\n            if (tknAddress[i] == 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE) {\r\n                tokenAllowances[i] = 0;\r\n            } else {\r\n                TokenInterface token = TokenInterface(tknAddress[i]);\r\n                tokenAllowances[i] = token.allowance(owner, spender);\r\n            }\r\n        }\r\n        return tokenAllowances;\r\n    }\r\n\r\n}\r\n\r\n\r\ncontract InstaERC20Resolver is Resolver {\r\n\r\n    string public constant name = \"ERC20-Resolver-v1.1\";\r\n\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"tknAddress\",\"type\":\"address[]\"}],\"name\":\"getAllowances\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"tknAddress\",\"type\":\"address[]\"}],\"name\":\"getBalances\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"tknAddress\",\"type\":\"address[]\"}],\"name\":\"getTokenDetails\",\"outputs\":[{\"components\":[{\"internalType\":\"bool\",\"name\":\"isToken\",\"type\":\"bool\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"decimals\",\"type\":\"uint256\"}],\"internalType\":\"struct Resolver.TokenData[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"InstaERC20Resolver","CompilerVersion":"v0.6.12+commit.27d51765","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://26be3f3f6f5e8b836939327fac8640d5ddd7323d01003cde928091debea421dc"}]}