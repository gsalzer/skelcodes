{"status":"1","message":"OK","result":[{"SourceCode":"// File contracts/interfaces/IWhitelist.sol\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * Source: https://raw.githubusercontent.com/simple-restricted-token/reference-implementation/master/contracts/token/ERC1404/ERC1404.sol\r\n * With ERC-20 APIs removed (will be implemented as a separate contract).\r\n * And adding authorizeTransfer.\r\n */\r\ninterface IWhitelist {\r\n  /**\r\n   * @notice Detects if a transfer will be reverted and if so returns an appropriate reference code\r\n   * @param from Sending address\r\n   * @param to Receiving address\r\n   * @param value Amount of tokens being transferred\r\n   * @return Code by which to reference message for rejection reasoning\r\n   * @dev Overwrite with your custom transfer restriction logic\r\n   */\r\n  function detectTransferRestriction(\r\n    address from,\r\n    address to,\r\n    uint value\r\n  ) external view returns (uint8);\r\n\r\n  /**\r\n   * @notice Returns a human-readable message for a given restriction code\r\n   * @param restrictionCode Identifier for looking up a message\r\n   * @return Text showing the restriction's reasoning\r\n   * @dev Overwrite with your custom message and restrictionCode handling\r\n   */\r\n  function messageForTransferRestriction(uint8 restrictionCode)\r\n    external\r\n    pure\r\n    returns (string memory);\r\n\r\n  /**\r\n   * @notice Called by the DAT contract before a transfer occurs.\r\n   * @dev This call will revert when the transfer is not authorized.\r\n   * This is a mutable call to allow additional data to be recorded,\r\n   * such as when the user aquired their tokens.\r\n   */\r\n  function authorizeTransfer(\r\n    address _from,\r\n    address _to,\r\n    uint _value,\r\n    bool _isSell\r\n  ) external;\r\n}\r\n\r\n\r\n// File @openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol@v4.0.0\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Collection of functions related to the address type\r\n */\r\nlibrary AddressUpgradeable {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     *\r\n     * Among others, `isContract` will return false for the following\r\n     * types of addresses:\r\n     *\r\n     *  - an externally-owned account\r\n     *  - a contract in construction\r\n     *  - an address where a contract will be created\r\n     *  - an address where a contract lived, but was destroyed\r\n     * ====\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // This method relies on extcodesize, which returns 0 for contracts in\r\n        // construction, since the code is only stored at the end of the\r\n        // constructor execution.\r\n\r\n        uint256 size;\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly { size := extcodesize(account) }\r\n        return size > 0;\r\n    }\r\n\r\n    /**\r\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * IMPORTANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     */\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\r\n        (bool success, ) = recipient.call{ value: amount }(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n\r\n    /**\r\n     * @dev Performs a Solidity function call using a low level `call`. A\r\n     * plain`call` is an unsafe replacement for a function call: use this\r\n     * function instead.\r\n     *\r\n     * If `target` reverts with a revert reason, it is bubbled up by this\r\n     * function (like regular Solidity function calls).\r\n     *\r\n     * Returns the raw returned data. To convert to the expected return value,\r\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `target` must be a contract.\r\n     * - calling `target` with `data` must not revert.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n      return functionCall(target, data, \"Address: low-level call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\r\n     * `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but also transferring `value` wei to `target`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the calling contract must have an ETH balance of at least `value`.\r\n     * - the called Solidity function must be `payable`.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\r\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\r\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\r\n        require(isContract(target), \"Address: call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\r\n        return _verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\r\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\r\n        require(isContract(target), \"Address: static call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.staticcall(data);\r\n        return _verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            // Look for revert reason and bubble it up if present\r\n            if (returndata.length > 0) {\r\n                // The easiest way to bubble the revert reason is using memory via assembly\r\n\r\n                // solhint-disable-next-line no-inline-assembly\r\n                assembly {\r\n                    let returndata_size := mload(returndata)\r\n                    revert(add(32, returndata), returndata_size)\r\n                }\r\n            } else {\r\n                revert(errorMessage);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n\r\n// File @openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol@v4.0.0\r\n\r\n\r\n// solhint-disable-next-line compiler-version\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\r\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\r\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\r\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\r\n *\r\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\r\n * possible by providing the encoded function call as the `_data` argument to {UpgradeableProxy-constructor}.\r\n *\r\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\r\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\r\n */\r\nabstract contract Initializable {\r\n\r\n    /**\r\n     * @dev Indicates that the contract has been initialized.\r\n     */\r\n    bool private _initialized;\r\n\r\n    /**\r\n     * @dev Indicates that the contract is in the process of being initialized.\r\n     */\r\n    bool private _initializing;\r\n\r\n    /**\r\n     * @dev Modifier to protect an initializer function from being invoked twice.\r\n     */\r\n    modifier initializer() {\r\n        require(_initializing || !_initialized, \"Initializable: contract is already initialized\");\r\n\r\n        bool isTopLevelCall = !_initializing;\r\n        if (isTopLevelCall) {\r\n            _initializing = true;\r\n            _initialized = true;\r\n        }\r\n\r\n        _;\r\n\r\n        if (isTopLevelCall) {\r\n            _initializing = false;\r\n        }\r\n    }\r\n}\r\n\r\n\r\n// File @openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol@v4.0.0\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/*\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract ContextUpgradeable is Initializable {\r\n    function __Context_init() internal initializer {\r\n        __Context_init_unchained();\r\n    }\r\n\r\n    function __Context_init_unchained() internal initializer {\r\n    }\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n    uint256[50] private __gap;\r\n}\r\n\r\n\r\n// File @openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol@v4.0.0\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    function __Ownable_init() internal initializer {\r\n        __Context_init_unchained();\r\n        __Ownable_init_unchained();\r\n    }\r\n\r\n    function __Ownable_init_unchained() internal initializer {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n    uint256[49] private __gap;\r\n}\r\n\r\n\r\n// File contracts/mixins/OperatorRole.sol\r\n\r\npragma solidity ^0.8.0;\r\n\r\n// Original source: openzeppelin's SignerRole\r\n\r\n/**\r\n * @notice allows a single owner to manage a group of operators which may\r\n * have some special permissions in the contract.\r\n */\r\ncontract OperatorRole is OwnableUpgradeable {\r\n    mapping (address => bool) internal _operators;\r\n\r\n    event OperatorAdded(address indexed account);\r\n    event OperatorRemoved(address indexed account);\r\n\r\n    function _initializeOperatorRole() internal {\r\n        __Ownable_init();\r\n        _addOperator(msg.sender);\r\n    }\r\n\r\n    modifier onlyOperator() {\r\n        require(\r\n            isOperator(msg.sender),\r\n            \"OperatorRole: caller does not have the Operator role\"\r\n        );\r\n        _;\r\n    }\r\n\r\n    function isOperator(address account) public view returns (bool) {\r\n        return _operators[account];\r\n    }\r\n\r\n    function addOperator(address account) public onlyOwner {\r\n        _addOperator(account);\r\n    }\r\n\r\n    function removeOperator(address account) public onlyOwner {\r\n        _removeOperator(account);\r\n    }\r\n\r\n    function renounceOperator() public {\r\n        _removeOperator(msg.sender);\r\n    }\r\n\r\n    function _addOperator(address account) internal {\r\n        _operators[account] = true;\r\n        emit OperatorAdded(account);\r\n    }\r\n\r\n    function _removeOperator(address account) internal {\r\n        _operators[account] = false;\r\n        emit OperatorRemoved(account);\r\n    }\r\n\r\n    uint[50] private ______gap;\r\n}\r\n\r\n\r\n// File @openzeppelin/contracts/token/ERC20/IERC20.sol@v4.0.0\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n\r\n// File contracts/Whitelist.sol\r\n\r\npragma solidity 0.8.3;\r\n\r\n\r\n\r\n/**\r\n * @notice whitelist which manages KYC approvals, token lockup, and transfer\r\n * restrictions for a DAT token.\r\n */\r\ncontract Whitelist is OwnableUpgradeable, OperatorRole {\r\n    // uint8 status codes as suggested by the ERC-1404 spec\r\n    enum ErrorMessage {\r\n        Success,\r\n        JurisdictionFlow,\r\n        LockUp,\r\n        UserUnknown,\r\n        JurisdictionHalt\r\n    }\r\n\r\n    event ConfigWhitelist(\r\n        uint _startDate,\r\n        uint _lockupGranularity,\r\n        address indexed _operator\r\n    );\r\n    event UpdateJurisdictionFlow(\r\n        uint indexed _fromJurisdictionId,\r\n        uint indexed _toJurisdictionId,\r\n        uint _lockupLength,\r\n        address indexed _operator\r\n    );\r\n    event ApproveNewUser(\r\n        address indexed _trader,\r\n        uint indexed _jurisdictionId,\r\n        address indexed _operator\r\n    );\r\n    event AddApprovedUserWallet(\r\n        address indexed _userId,\r\n        address indexed _newWallet,\r\n        address indexed _operator\r\n    );\r\n    event RevokeUserWallet(address indexed _wallet, address indexed _operator);\r\n    event UpdateJurisdictionForUserId(\r\n        address indexed _userId,\r\n        uint indexed _jurisdictionId,\r\n        address indexed _operator\r\n    );\r\n    event AddLockup(\r\n        address indexed _userId,\r\n        uint _lockupExpirationDate,\r\n        uint _numberOfTokensLocked,\r\n        address indexed _operator\r\n    );\r\n    event UnlockTokens(\r\n        address indexed _userId,\r\n        uint _tokensUnlocked,\r\n        address indexed _operator\r\n    );\r\n    event Halt(uint indexed _jurisdictionId, uint _until);\r\n    event Resume(uint indexed _jurisdictionId);\r\n    event MaxInvestorsChanged(uint _limit);\r\n    event MaxInvestorsByJurisdictionChanged(uint indexed _jurisdictionId, uint _limit);\r\n\r\n    /**\r\n     * @notice the address of the contract this whitelist manages.\r\n     * @dev this cannot change after initialization\r\n     */\r\n    IERC20 public callingContract;\r\n\r\n    /**\r\n     * @notice Merges lockup entries when the time delta between\r\n     * them is less than this value.\r\n     * @dev this can be changed by the owner at any time\r\n     */\r\n    struct Config {\r\n        uint64 startDate;\r\n        uint64 lockupGranularity;\r\n    }\r\n\r\n    Config internal config;\r\n\r\n    struct InvestorLimit {\r\n        uint128 max;\r\n        uint128 current;\r\n    }\r\n\r\n    InvestorLimit public globalInvestorLimit;\r\n\r\n    mapping(uint => InvestorLimit) public jurisdictionInvestorLimit;\r\n\r\n    /**\r\n     * @notice Maps Jurisdiction Id to it's halt due\r\n     */\r\n    mapping(uint => uint64) public jurisdictionHaltsUntil;\r\n\r\n    mapping(uint => mapping(uint => uint64)) internal jurisdictionFlows;\r\n\r\n    enum Status {\r\n        Unknown,\r\n        Activated,\r\n        Revoked,\r\n        Counted\r\n    }\r\n\r\n    struct UserInfo {\r\n        // to check if user is counted\r\n        Status status;\r\n        // The user's current jurisdictionId or 0 for unknown (the default)\r\n        uint8 jurisdictionId;\r\n        // The first applicable entry in userIdLockups\r\n        uint32 startIndex;\r\n        // The last applicable entry in userIdLockups + 1\r\n        uint32 endIndex;\r\n        // The number of tokens locked, with details tracked in userIdLockups\r\n        uint128 totalTokensLocked;\r\n        // The number of wallet in use\r\n        uint48 walletCount;\r\n    }\r\n\r\n    mapping(address => UserInfo) internal userInfo;\r\n\r\n    /**\r\n     * info stored for each token lockup.\r\n     */\r\n    struct Lockup {\r\n        // The date/time that this lockup entry has expired and the tokens may be transferred\r\n        uint64 lockupExpirationDate;\r\n        // How many tokens locked until the given expiration date.\r\n        uint128 numberOfTokensLocked;\r\n    }\r\n\r\n    mapping(address => mapping(uint => Lockup)) internal userIdLockups;\r\n\r\n    struct WalletInfo {\r\n        Status status;\r\n        address userId;\r\n    }\r\n\r\n    mapping(address => WalletInfo) public walletInfo;\r\n\r\n    bytes32 private constant BEACON_SLOT = keccak256(abi.encodePacked(\"fairmint.beaconproxy.beacon\"));\r\n\r\n    modifier onlyBeaconOperator() {\r\n        bytes32 slot = BEACON_SLOT;\r\n        address beacon;\r\n        assembly {\r\n            beacon := sload(slot)\r\n        }\r\n        require(beacon == address(0) || OperatorRole(beacon).isOperator(msg.sender), \"!BeaconOperator\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @notice checks for transfer restrictions between jurisdictions.\r\n     * @return lockupLength if transfers between these jurisdictions are allowed and if a\r\n     * token lockup should apply:\r\n     * - 0 means transfers between these jurisdictions is blocked (the default)\r\n     * - 1 is supported with no token lockup required\r\n     * - >1 is supported and this value defines the lockup length in seconds\r\n     */\r\n    function getJurisdictionFlow(\r\n        uint _fromJurisdictionId,\r\n        uint _toJurisdictionId\r\n    ) external view returns (uint lockupLength) {\r\n        return jurisdictionFlows[_fromJurisdictionId][_toJurisdictionId];\r\n    }\r\n\r\n    /**\r\n     * @notice checks details for a given userId.\r\n     */\r\n    function getAuthorizedUserIdInfo(address _userId)\r\n        external\r\n        view\r\n        returns (\r\n            uint jurisdictionId,\r\n            uint totalTokensLocked,\r\n            uint startIndex,\r\n            uint endIndex\r\n        )\r\n    {\r\n        UserInfo memory info = userInfo[_userId];\r\n        return (\r\n            info.jurisdictionId,\r\n            info.totalTokensLocked,\r\n            info.startIndex,\r\n            info.endIndex\r\n        );\r\n    }\r\n\r\n    function getInvestorInfo() external view returns(uint256 maxInvestor, uint256 currentInvestor) {\r\n        return (globalInvestorLimit.max, globalInvestorLimit.current);\r\n    }\r\n\r\n    function getJurisdictionInfo(uint256 _jurisdictionId) external view returns(uint256 halt, uint256 maxInvestor, uint256 currentInvestor){\r\n        InvestorLimit memory limit = jurisdictionInvestorLimit[_jurisdictionId];\r\n        return (jurisdictionHaltsUntil[_jurisdictionId], limit.max, limit.current);\r\n    }\r\n\r\n    /**\r\n     * @notice gets a specific lockup entry for a userId.\r\n     * @dev use `getAuthorizedUserIdInfo` to determine the range of applicable lockupIndex.\r\n     */\r\n    function getUserIdLockup(address _userId, uint _lockupIndex)\r\n        external\r\n        view\r\n        returns (uint lockupExpirationDate, uint numberOfTokensLocked)\r\n    {\r\n        Lockup memory lockup = userIdLockups[_userId][_lockupIndex];\r\n        return (lockup.lockupExpirationDate, lockup.numberOfTokensLocked);\r\n    }\r\n\r\n    /**\r\n     * @notice Returns the number of unlocked tokens a given userId has available.\r\n     * @dev this is a `view`-only way to determine how many tokens are still locked\r\n     * (info.totalTokensLocked is only accurate after processing lockups which changes state)\r\n     */\r\n    function getLockedTokenCount(address _userId)\r\n        external\r\n        view\r\n        returns (uint lockedTokens)\r\n    {\r\n        UserInfo memory info = userInfo[_userId];\r\n        lockedTokens = info.totalTokensLocked;\r\n        uint endIndex = info.endIndex;\r\n        for (uint i = info.startIndex; i < endIndex; i++) {\r\n            Lockup memory lockup = userIdLockups[_userId][i];\r\n            if (lockup.lockupExpirationDate > block.timestamp) {\r\n                // no more eligible entries\r\n                break;\r\n            }\r\n            // this lockup entry has expired and would be processed on the next tx\r\n            lockedTokens -= lockup.numberOfTokensLocked;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @notice Checks if there is a transfer restriction for the given addresses.\r\n     * Does not consider tokenLockup. Use `getLockedTokenCount` for that.\r\n     * @dev this function is from the erc-1404 standard and currently in use by the DAT\r\n     * for the `pay` feature.\r\n     */\r\n    function detectTransferRestriction(\r\n        address _from,\r\n        address _to,\r\n        uint /*_value*/\r\n    ) external view returns (uint8 status) {\r\n        WalletInfo memory from = walletInfo[_from];\r\n        WalletInfo memory to = walletInfo[_to];\r\n        if (\r\n            ((from.status == Status.Unknown || from.status == Status.Revoked) && _from != address(0)) ||\r\n            ((to.status == Status.Unknown || to.status == Status.Revoked) && _to != address(0))\r\n        ) {\r\n            return uint8(ErrorMessage.UserUnknown);\r\n        }\r\n        if (from.userId != to.userId) {\r\n            uint fromJurisdictionId = userInfo[from.userId]\r\n                .jurisdictionId;\r\n            uint toJurisdictionId = userInfo[to.userId].jurisdictionId;\r\n            if (_isJurisdictionHalted(fromJurisdictionId) || _isJurisdictionHalted(toJurisdictionId)){\r\n                return uint8(ErrorMessage.JurisdictionHalt);\r\n            }\r\n            if (jurisdictionFlows[fromJurisdictionId][toJurisdictionId] == 0) {\r\n                return uint8(ErrorMessage.JurisdictionFlow);\r\n            }\r\n        }\r\n\r\n        return uint8(ErrorMessage.Success);\r\n    }\r\n\r\n    function messageForTransferRestriction(uint8 _restrictionCode)\r\n        external\r\n        pure\r\n        returns (string memory)\r\n    {\r\n        if (_restrictionCode == uint8(ErrorMessage.Success)) {\r\n            return \"SUCCESS\";\r\n        }\r\n        if (_restrictionCode == uint8(ErrorMessage.JurisdictionFlow)) {\r\n            return \"DENIED: JURISDICTION_FLOW\";\r\n        }\r\n        if (_restrictionCode == uint8(ErrorMessage.LockUp)) {\r\n            return \"DENIED: LOCKUP\";\r\n        }\r\n        if (_restrictionCode == uint8(ErrorMessage.UserUnknown)) {\r\n            return \"DENIED: USER_UNKNOWN\";\r\n        }\r\n        if (_restrictionCode == uint8(ErrorMessage.JurisdictionHalt)){\r\n            return \"DENIED: JURISDICTION_HALT\";\r\n        }\r\n        return \"DENIED: UNKNOWN_ERROR\";\r\n    }\r\n\r\n    /**\r\n     * @notice Called once to complete configuration for this contract.\r\n     * @dev Done with `initialize` instead of a constructor in order to support\r\n     * using this contract via an Upgradable Proxy.\r\n     */\r\n    function initialize(address _callingContract) public onlyBeaconOperator{\r\n        _initializeOperatorRole();\r\n        callingContract = IERC20(_callingContract);\r\n    }\r\n\r\n    /**\r\n     * @notice Called by the owner to update the startDate or lockupGranularity.\r\n     */\r\n    function configWhitelist(uint _startDate, uint _lockupGranularity)\r\n        external\r\n        onlyOwner()\r\n    {\r\n        config = Config({\r\n            startDate: uint64(_startDate),\r\n            lockupGranularity: uint64(_lockupGranularity)\r\n        });\r\n        emit ConfigWhitelist(_startDate, _lockupGranularity, msg.sender);\r\n    }\r\n\r\n    function startDate() external view returns(uint256) {\r\n        return config.startDate;\r\n    }\r\n\r\n    function lockupGranularity() external view returns(uint256) {\r\n        return config.lockupGranularity;\r\n    }\r\n\r\n    function authorizedWalletToUserId(address wallet) external view returns(address userId) {\r\n        return walletInfo[wallet].userId;\r\n    }\r\n\r\n    /**\r\n     * @notice Called by the owner to define or update jurisdiction flows.\r\n     * @param _lockupLengths defines transfer restrictions where:\r\n     * - 0 is not supported (the default)\r\n     * - 1 is supported with no token lockup required\r\n     * - >1 is supported and this value defines the lockup length in seconds.\r\n     * @dev note that this can be called with a partial list, only including entries\r\n     * to be added or which have changed.\r\n     */\r\n    function updateJurisdictionFlows(\r\n        uint[] calldata _fromJurisdictionIds,\r\n        uint[] calldata _toJurisdictionIds,\r\n        uint[] calldata _lockupLengths\r\n    ) external onlyOwner() {\r\n        uint count = _fromJurisdictionIds.length;\r\n        for (uint i = 0; i < count; i++) {\r\n            uint fromJurisdictionId = _fromJurisdictionIds[i];\r\n            uint toJurisdictionId = _toJurisdictionIds[i];\r\n            require(\r\n                fromJurisdictionId > 0 && toJurisdictionId > 0,\r\n                \"INVALID_JURISDICTION_ID\"\r\n            );\r\n            jurisdictionFlows[fromJurisdictionId][toJurisdictionId] = uint64(_lockupLengths[i]);\r\n            emit UpdateJurisdictionFlow(\r\n                fromJurisdictionId,\r\n                toJurisdictionId,\r\n                _lockupLengths[i],\r\n                msg.sender\r\n            );\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @notice Called by an operator to add new traders.\r\n     * @dev The trader will be assigned a userId equal to their wallet address.\r\n     */\r\n    function approveNewUsers(\r\n        address[] calldata _traders,\r\n        uint[] calldata _jurisdictionIds\r\n    ) external onlyOperator() {\r\n        uint length = _traders.length;\r\n        for (uint i = 0; i < length; i++) {\r\n            address trader = _traders[i];\r\n            require(\r\n                walletInfo[trader].userId == address(0),\r\n                \"USER_WALLET_ALREADY_ADDED\"\r\n            );\r\n\r\n            uint jurisdictionId = _jurisdictionIds[i];\r\n            require(jurisdictionId != 0, \"INVALID_JURISDICTION_ID\");\r\n\r\n            walletInfo[trader] = WalletInfo({\r\n                status: Status.Activated,\r\n                userId: trader\r\n            });\r\n            userInfo[trader] = UserInfo({\r\n                status: Status.Activated,\r\n                jurisdictionId : uint8(jurisdictionId),\r\n                startIndex : 0,\r\n                endIndex : 0,\r\n                totalTokensLocked: 0,\r\n                walletCount : 1\r\n            });\r\n            require(globalInvestorLimit.max == 0 || globalInvestorLimit.max < globalInvestorLimit.current, \"EXCEEDING_MAX_INVESTORS\");\r\n            InvestorLimit memory limit = jurisdictionInvestorLimit[jurisdictionId];\r\n            require(limit.max == 0 || limit.max < limit.current, \"EXCEEDING_JURISDICTION_MAX_INVESTORS\");\r\n            jurisdictionInvestorLimit[jurisdictionId].current++;\r\n            globalInvestorLimit.current++;\r\n            emit ApproveNewUser(trader, jurisdictionId, msg.sender);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @notice Called by an operator to add wallets to known userIds.\r\n     */\r\n    function addApprovedUserWallets(\r\n        address[] calldata _userIds,\r\n        address[] calldata _newWallets\r\n    ) external onlyOperator() {\r\n        uint length = _userIds.length;\r\n        for (uint i = 0; i < length; i++) {\r\n            address userId = _userIds[i];\r\n            require(\r\n                userInfo[userId].status != Status.Unknown,\r\n                \"USER_ID_UNKNOWN\"\r\n            );\r\n            address newWallet = _newWallets[i];\r\n            WalletInfo storage info = walletInfo[newWallet];\r\n            require(\r\n                info.status == Status.Unknown ||\r\n                (info.status == Status.Revoked && info.userId == userId),\r\n                \"WALLET_ALREADY_ADDED\"\r\n            );\r\n            walletInfo[newWallet] = WalletInfo({\r\n                status: Status.Activated,\r\n                userId: userId\r\n            });\r\n            if(userInfo[userId].walletCount == 0){\r\n                userInfo[userId].status = Status.Activated;\r\n                jurisdictionInvestorLimit[userInfo[userId].jurisdictionId].current++;\r\n                globalInvestorLimit.current++;\r\n            }\r\n            userInfo[userId].walletCount++;\r\n            emit AddApprovedUserWallet(userId, newWallet, msg.sender);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @notice Called by an operator to revoke approval for the given wallets.\r\n     * @dev If this is called in error, you can restore access with `addApprovedUserWallets`.\r\n     */\r\n    function revokeUserWallets(address[] calldata _wallets)\r\n        external\r\n        onlyOperator()\r\n    {\r\n        uint length = _wallets.length;\r\n        for (uint i = 0; i < length; i++) {\r\n            WalletInfo memory wallet = walletInfo[_wallets[i]];\r\n            require(\r\n                wallet.status != Status.Unknown,\r\n                \"WALLET_NOT_FOUND\"\r\n            );\r\n            userInfo[wallet.userId].walletCount--;\r\n            if(userInfo[wallet.userId].walletCount == 0){\r\n                userInfo[wallet.userId].status = Status.Revoked;\r\n                jurisdictionInvestorLimit[userInfo[wallet.userId].jurisdictionId].current--;\r\n                globalInvestorLimit.current--;\r\n            }\r\n            walletInfo[_wallets[i]].status = Status.Revoked;\r\n            emit RevokeUserWallet(_wallets[i], msg.sender);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @notice Called by an operator to change the jurisdiction\r\n     * for the given userIds.\r\n     */\r\n    function updateJurisdictionsForUserIds(\r\n        address[] calldata _userIds,\r\n        uint[] calldata _jurisdictionIds\r\n    ) external onlyOperator() {\r\n        uint length = _userIds.length;\r\n        for (uint i = 0; i < length; i++) {\r\n            address userId = _userIds[i];\r\n            require(\r\n                userInfo[userId].status != Status.Unknown,\r\n                \"USER_ID_UNKNOWN\"\r\n            );\r\n            uint jurisdictionId = _jurisdictionIds[i];\r\n            require(jurisdictionId != 0, \"INVALID_JURISDICTION_ID\");\r\n            jurisdictionInvestorLimit[userInfo[userId].jurisdictionId].current--;\r\n            userInfo[userId].jurisdictionId = uint8(jurisdictionId);\r\n            jurisdictionInvestorLimit[jurisdictionId].current++;\r\n            emit UpdateJurisdictionForUserId(userId, jurisdictionId, msg.sender);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @notice Adds a tokenLockup for the userId.\r\n     * @dev A no-op if lockup is not required for this transfer.\r\n     * The lockup entry is merged with the most recent lockup for that user\r\n     * if the expiration date is <= `lockupGranularity` from the previous entry.\r\n     */\r\n    function _addLockup(\r\n        address _userId,\r\n        uint _lockupExpirationDate,\r\n        uint _numberOfTokensLocked\r\n    ) internal {\r\n        if (\r\n            _numberOfTokensLocked == 0 ||\r\n            _lockupExpirationDate <= block.timestamp\r\n        ) {\r\n            // This is a no-op\r\n            return;\r\n        }\r\n        emit AddLockup(\r\n            _userId,\r\n            _lockupExpirationDate,\r\n            _numberOfTokensLocked,\r\n            msg.sender\r\n        );\r\n        UserInfo storage info = userInfo[_userId];\r\n        require(info.status != Status.Unknown, \"USER_ID_UNKNOWN\");\r\n        require(info.totalTokensLocked + _numberOfTokensLocked >= _numberOfTokensLocked, \"OVERFLOW\");\r\n        info.totalTokensLocked = info.totalTokensLocked + uint128(_numberOfTokensLocked);\r\n        if (info.endIndex > 0) {\r\n            Lockup storage lockup = userIdLockups[_userId][info.endIndex - 1];\r\n            if (\r\n                lockup.lockupExpirationDate + config.lockupGranularity >= _lockupExpirationDate\r\n            ) {\r\n                // Merge with the previous entry\r\n                // if totalTokensLocked can't overflow then this value will not either\r\n                lockup.numberOfTokensLocked += uint128(_numberOfTokensLocked);\r\n                return;\r\n            }\r\n        }\r\n        // Add a new lockup entry\r\n        userIdLockups[_userId][info.endIndex] = Lockup(\r\n            uint64(_lockupExpirationDate),\r\n            uint128(_numberOfTokensLocked)\r\n        );\r\n        info.endIndex++;\r\n    }\r\n\r\n    /**\r\n     * @notice Operators can manually add lockups for userIds.\r\n     * This may be used by the organization before transfering tokens\r\n     * from the initial supply.\r\n     */\r\n    function addLockups(\r\n        address[] calldata _userIds,\r\n        uint[] calldata _lockupExpirationDates,\r\n        uint[] calldata _numberOfTokensLocked\r\n    ) external onlyOperator() {\r\n        uint length = _userIds.length;\r\n        for (uint i = 0; i < length; i++) {\r\n            _addLockup(\r\n                _userIds[i],\r\n                _lockupExpirationDates[i],\r\n                _numberOfTokensLocked[i]\r\n            );\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @notice Checks the next lockup entry for a given user and unlocks\r\n     * those tokens if applicable.\r\n     * @param _ignoreExpiration bypasses the recorded expiration date and\r\n     * removes the lockup entry if there are any remaining for this user.\r\n     */\r\n    function _processLockup(\r\n        UserInfo storage info,\r\n        address _userId,\r\n        bool _ignoreExpiration\r\n    ) internal returns (bool isDone) {\r\n        if (info.startIndex >= info.endIndex) {\r\n            // no lockups for this user\r\n            return true;\r\n        }\r\n        Lockup storage lockup = userIdLockups[_userId][info.startIndex];\r\n        if (lockup.lockupExpirationDate > block.timestamp && !_ignoreExpiration) {\r\n            // no more eligable entries\r\n            return true;\r\n        }\r\n        emit UnlockTokens(_userId, lockup.numberOfTokensLocked, msg.sender);\r\n        info.totalTokensLocked -= lockup.numberOfTokensLocked;\r\n        info.startIndex++;\r\n        // Free up space we don't need anymore\r\n        lockup.lockupExpirationDate = 0;\r\n        lockup.numberOfTokensLocked = 0;\r\n        // There may be another entry\r\n        return false;\r\n    }\r\n\r\n    /**\r\n     * @notice Anyone can process lockups for a userId.\r\n     * This is generally unused but may be required if a given userId\r\n     * has a lot of individual lockup entries which are expired.\r\n     */\r\n    function processLockups(address _userId, uint _maxCount) external {\r\n        UserInfo storage info = userInfo[_userId];\r\n        require(info.status != Status.Unknown, \"USER_ID_UNKNOWN\");\r\n        for (uint i = 0; i < _maxCount; i++) {\r\n            if (_processLockup(info, _userId, false)) {\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @notice Allows operators to remove lockup entries, bypassing the\r\n     * recorded expiration date.\r\n     * @dev This should generally remain unused. It could be used in combination with\r\n     * `addLockups` to fix an incorrect lockup expiration date or quantity.\r\n     */\r\n    function forceUnlockUpTo(address _userId, uint _maxLockupIndex)\r\n        external\r\n        onlyOperator()\r\n    {\r\n        UserInfo storage info = userInfo[_userId];\r\n        require(info.status != Status.Unknown, \"USER_ID_UNKNOWN\");\r\n        require(_maxLockupIndex > info.startIndex, \"ALREADY_UNLOCKED\");\r\n        uint maxCount = _maxLockupIndex - info.startIndex;\r\n        for (uint i = 0; i < maxCount; i++) {\r\n            if (_processLockup(info, _userId, true)) {\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    function _isJurisdictionHalted(uint _jurisdictionId) internal view returns(bool){\r\n        uint until = jurisdictionHaltsUntil[_jurisdictionId];\r\n        return until != 0 && until > block.timestamp;\r\n    }\r\n\r\n    /**\r\n     * @notice halts jurisdictions of id `_jurisdictionIds` for `_duration` seconds\r\n     * @dev only owner can call this function\r\n     * @param _jurisdictionIds ids of the jurisdictions to halt\r\n     * @param _expirationTimestamps due when halt ends\r\n     **/\r\n    function halt(uint[] calldata _jurisdictionIds, uint[] calldata _expirationTimestamps) external onlyOwner {\r\n        uint length = _jurisdictionIds.length;\r\n        for(uint i = 0; i<length; i++){\r\n            _halt(_jurisdictionIds[i], _expirationTimestamps[i]);\r\n        }\r\n    }\r\n\r\n    function _halt(uint _jurisdictionId, uint _until) internal {\r\n        require(_until > block.timestamp, \"HALT_DUE_SHOULD_BE_FUTURE\");\r\n        jurisdictionHaltsUntil[_jurisdictionId] = uint64(_until);\r\n        emit Halt(_jurisdictionId, _until);\r\n    }\r\n\r\n    /**\r\n     * @notice resume halted jurisdiction\r\n     * @dev only owner can call this function\r\n     * @param _jurisdictionIds list of jurisdiction ids to resume\r\n     **/\r\n    function resume(uint[] calldata _jurisdictionIds) external onlyOwner{\r\n        uint length = _jurisdictionIds.length;\r\n        for(uint i = 0; i < length; i++){\r\n            _resume(_jurisdictionIds[i]);\r\n        }\r\n    }\r\n\r\n    function _resume(uint _jurisdictionId) internal {\r\n        require(jurisdictionHaltsUntil[_jurisdictionId] != 0, \"ATTEMPT_TO_RESUME_NONE_HALTED_JURISDICATION\");\r\n        jurisdictionHaltsUntil[_jurisdictionId] = 0;\r\n        emit Resume(_jurisdictionId);\r\n    }\r\n\r\n    /**\r\n     * @notice changes max investors limit of the contract to `_limit`\r\n     * @dev only owner can call this function\r\n     * @param _limit new investor limit for contract\r\n     */\r\n    function setInvestorLimit(uint _limit) external onlyOwner {\r\n        require(_limit >= globalInvestorLimit.current, \"LIMIT_SHOULD_BE_LARGER_THAN_CURRENT_INVESTORS\");\r\n        globalInvestorLimit.max = uint128(_limit);\r\n        emit MaxInvestorsChanged(_limit);\r\n    }\r\n\r\n    /**\r\n     * @notice changes max investors limit of the `_jurisdcitionId` to `_limit`\r\n     * @dev only owner can call this function\r\n     * @param _jurisdictionIds jurisdiction id to update\r\n     * @param _limits new investor limit for jurisdiction\r\n     */\r\n    function setInvestorLimitForJurisdiction(uint[] calldata _jurisdictionIds, uint[] calldata _limits) external onlyOwner {\r\n        for(uint i = 0; i<_jurisdictionIds.length; i++){\r\n            uint jurisdictionId = _jurisdictionIds[i];\r\n            uint limit = _limits[i];\r\n            require(limit >= jurisdictionInvestorLimit[jurisdictionId].current, \"LIMIT_SHOULD_BE_LARGER_THAN_CURRENT_INVESTORS\");\r\n            jurisdictionInvestorLimit[jurisdictionId].max = uint128(limit);\r\n            emit MaxInvestorsByJurisdictionChanged(jurisdictionId, limit);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @notice Called by the callingContract before a transfer occurs.\r\n     * @dev This call will revert when the transfer is not authorized.\r\n     * This is a mutable call to allow additional data to be recorded,\r\n     * such as when the user aquired their tokens.\r\n     **/\r\n    function authorizeTransfer(\r\n        address _from,\r\n        address _to,\r\n        uint _value,\r\n        bool _isSell\r\n    ) external {\r\n        require(address(callingContract) == msg.sender, \"CALL_VIA_CONTRACT_ONLY\");\r\n\r\n        if (_to == address(0) && !_isSell) {\r\n            // This is a burn, no authorization required\r\n            // You can burn locked tokens. Burning will effectively burn unlocked tokens,\r\n            // and then burn locked tokens starting with those that will be unlocked first.\r\n            return;\r\n        }\r\n        WalletInfo memory from = walletInfo[_from];\r\n        require(\r\n            (from.status != Status.Unknown && from.status != Status.Revoked) ||\r\n            _from == address(0),\r\n            \"FROM_USER_UNKNOWN\"\r\n        );\r\n        WalletInfo memory to = walletInfo[_to];\r\n        require(\r\n            (to.status != Status.Unknown && to.status != Status.Revoked) ||\r\n            _to == address(0),\r\n            \"TO_USER_UNKNOWN\"\r\n        );\r\n\r\n        // A single user can move funds between wallets they control without restriction\r\n        if (from.userId != to.userId) {\r\n            uint fromJurisdictionId = userInfo[from.userId]\r\n            .jurisdictionId;\r\n            uint toJurisdictionId = userInfo[to.userId].jurisdictionId;\r\n\r\n            require(!_isJurisdictionHalted(fromJurisdictionId), \"FROM_JURISDICTION_HALTED\");\r\n            require(!_isJurisdictionHalted(toJurisdictionId), \"TO_JURISDICTION_HALTED\");\r\n\r\n            uint lockupLength = jurisdictionFlows[fromJurisdictionId][toJurisdictionId];\r\n            require(lockupLength > 0, \"DENIED: JURISDICTION_FLOW\");\r\n\r\n            // If the lockupLength is 1 then we interpret this as approved without any lockup\r\n            // This means any token lockup period must be at least 2 seconds long in order to apply.\r\n            if (lockupLength > 1 && _to != address(0)) {\r\n                // Lockup may apply for any action other than burn/sell (e.g. buy/pay/transfer)\r\n                uint lockupExpirationDate = block.timestamp + lockupLength;\r\n                _addLockup(to.userId, lockupExpirationDate, _value);\r\n            }\r\n\r\n            if (_from == address(0)) {\r\n                // This is minting (buy or pay)\r\n                require(block.timestamp >= config.startDate, \"WAIT_FOR_START_DATE\");\r\n            } else {\r\n                // This is a transfer (or sell)\r\n                UserInfo storage info = userInfo[from.userId];\r\n                while (true) {\r\n                    if (_processLockup(info, from.userId, false)) {\r\n                        break;\r\n                    }\r\n                }\r\n                uint balance = callingContract.balanceOf(_from);\r\n                // This first require is redundant, but allows us to provide\r\n                // a more clear error message.\r\n                require(balance >= _value, \"INSUFFICIENT_BALANCE\");\r\n                require(\r\n                    _isSell ||\r\n                    balance >= info.totalTokensLocked + _value,\r\n                    \"INSUFFICIENT_TRANSFERABLE_BALANCE\"\r\n                );\r\n            }\r\n        }\r\n    }\r\n}","ABI":"[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_userId\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_newWallet\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_operator\",\"type\":\"address\"}],\"name\":\"AddApprovedUserWallet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_userId\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_lockupExpirationDate\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_numberOfTokensLocked\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_operator\",\"type\":\"address\"}],\"name\":\"AddLockup\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_trader\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_jurisdictionId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_operator\",\"type\":\"address\"}],\"name\":\"ApproveNewUser\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_startDate\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_lockupGranularity\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_operator\",\"type\":\"address\"}],\"name\":\"ConfigWhitelist\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_jurisdictionId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_until\",\"type\":\"uint256\"}],\"name\":\"Halt\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_jurisdictionId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_limit\",\"type\":\"uint256\"}],\"name\":\"MaxInvestorsByJurisdictionChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_limit\",\"type\":\"uint256\"}],\"name\":\"MaxInvestorsChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"OperatorAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"OperatorRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_jurisdictionId\",\"type\":\"uint256\"}],\"name\":\"Resume\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_wallet\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_operator\",\"type\":\"address\"}],\"name\":\"RevokeUserWallet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_userId\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_tokensUnlocked\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_operator\",\"type\":\"address\"}],\"name\":\"UnlockTokens\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_fromJurisdictionId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_toJurisdictionId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_lockupLength\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_operator\",\"type\":\"address\"}],\"name\":\"UpdateJurisdictionFlow\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_userId\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_jurisdictionId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_operator\",\"type\":\"address\"}],\"name\":\"UpdateJurisdictionForUserId\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_userIds\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"_newWallets\",\"type\":\"address[]\"}],\"name\":\"addApprovedUserWallets\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_userIds\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_lockupExpirationDates\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_numberOfTokensLocked\",\"type\":\"uint256[]\"}],\"name\":\"addLockups\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"addOperator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_traders\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_jurisdictionIds\",\"type\":\"uint256[]\"}],\"name\":\"approveNewUsers\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_isSell\",\"type\":\"bool\"}],\"name\":\"authorizeTransfer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"}],\"name\":\"authorizedWalletToUserId\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"userId\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"callingContract\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_startDate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_lockupGranularity\",\"type\":\"uint256\"}],\"name\":\"configWhitelist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"detectTransferRestriction\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"status\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_userId\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_maxLockupIndex\",\"type\":\"uint256\"}],\"name\":\"forceUnlockUpTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_userId\",\"type\":\"address\"}],\"name\":\"getAuthorizedUserIdInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"jurisdictionId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalTokensLocked\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"startIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endIndex\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getInvestorInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"maxInvestor\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"currentInvestor\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_fromJurisdictionId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_toJurisdictionId\",\"type\":\"uint256\"}],\"name\":\"getJurisdictionFlow\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"lockupLength\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_jurisdictionId\",\"type\":\"uint256\"}],\"name\":\"getJurisdictionInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"halt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxInvestor\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"currentInvestor\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_userId\",\"type\":\"address\"}],\"name\":\"getLockedTokenCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"lockedTokens\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_userId\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_lockupIndex\",\"type\":\"uint256\"}],\"name\":\"getUserIdLockup\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"lockupExpirationDate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"numberOfTokensLocked\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"globalInvestorLimit\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"max\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"current\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_jurisdictionIds\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_expirationTimestamps\",\"type\":\"uint256[]\"}],\"name\":\"halt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_callingContract\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isOperator\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"jurisdictionHaltsUntil\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"jurisdictionInvestorLimit\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"max\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"current\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lockupGranularity\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"_restrictionCode\",\"type\":\"uint8\"}],\"name\":\"messageForTransferRestriction\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_userId\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_maxCount\",\"type\":\"uint256\"}],\"name\":\"processLockups\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"removeOperator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOperator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_jurisdictionIds\",\"type\":\"uint256[]\"}],\"name\":\"resume\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_wallets\",\"type\":\"address[]\"}],\"name\":\"revokeUserWallets\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_limit\",\"type\":\"uint256\"}],\"name\":\"setInvestorLimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_jurisdictionIds\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_limits\",\"type\":\"uint256[]\"}],\"name\":\"setInvestorLimitForJurisdiction\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startDate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_fromJurisdictionIds\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_toJurisdictionIds\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_lockupLengths\",\"type\":\"uint256[]\"}],\"name\":\"updateJurisdictionFlows\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_userIds\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_jurisdictionIds\",\"type\":\"uint256[]\"}],\"name\":\"updateJurisdictionsForUserIds\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"walletInfo\",\"outputs\":[{\"internalType\":\"enum Whitelist.Status\",\"name\":\"status\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"userId\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"Whitelist","CompilerVersion":"v0.8.3+commit.8d00100c","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://73af2cecce2f2337ef7dbeb99f3b5cb59581d71ae7459166a4faf559aa3805a8"}]}