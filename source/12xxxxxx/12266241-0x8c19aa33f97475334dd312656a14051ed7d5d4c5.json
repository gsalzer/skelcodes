{"status":"1","message":"OK","result":[{"SourceCode":"// Sources flattened with hardhat v2.1.1 https://hardhat.org\r\n\r\n// File @openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol@v3.4.1\r\n\r\n// SPDX-License-Identifier: MIT\r\n\r\npragma solidity >=0.6.2 <0.8.0;\r\n\r\n/**\r\n * @dev Collection of functions related to the address type\r\n */\r\nlibrary AddressUpgradeable {\r\n  /**\r\n   * @dev Returns true if `account` is a contract.\r\n   *\r\n   * [IMPORTANT]\r\n   * ====\r\n   * It is unsafe to assume that an address for which this function returns\r\n   * false is an externally-owned account (EOA) and not a contract.\r\n   *\r\n   * Among others, `isContract` will return false for the following\r\n   * types of addresses:\r\n   *\r\n   *  - an externally-owned account\r\n   *  - a contract in construction\r\n   *  - an address where a contract will be created\r\n   *  - an address where a contract lived, but was destroyed\r\n   * ====\r\n   */\r\n  function isContract(address account) internal view returns (bool) {\r\n    // This method relies on extcodesize, which returns 0 for contracts in\r\n    // construction, since the code is only stored at the end of the\r\n    // constructor execution.\r\n\r\n    uint256 size;\r\n    // solhint-disable-next-line no-inline-assembly\r\n    assembly {\r\n      size := extcodesize(account)\r\n    }\r\n    return size > 0;\r\n  }\r\n\r\n  /**\r\n   * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n   * `recipient`, forwarding all available gas and reverting on errors.\r\n   *\r\n   * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n   * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n   * imposed by `transfer`, making them unable to receive funds via\r\n   * `transfer`. {sendValue} removes this limitation.\r\n   *\r\n   * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n   *\r\n   * IMPORTANT: because control is transferred to `recipient`, care must be\r\n   * taken to not create reentrancy vulnerabilities. Consider using\r\n   * {ReentrancyGuard} or the\r\n   * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n   */\r\n  function sendValue(address payable recipient, uint256 amount) internal {\r\n    require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n    // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\r\n    (bool success, ) = recipient.call{ value: amount }(\"\");\r\n    require(\r\n      success,\r\n      \"Address: unable to send value, recipient may have reverted\"\r\n    );\r\n  }\r\n\r\n  /**\r\n   * @dev Performs a Solidity function call using a low level `call`. A\r\n   * plain`call` is an unsafe replacement for a function call: use this\r\n   * function instead.\r\n   *\r\n   * If `target` reverts with a revert reason, it is bubbled up by this\r\n   * function (like regular Solidity function calls).\r\n   *\r\n   * Returns the raw returned data. To convert to the expected return value,\r\n   * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\r\n   *\r\n   * Requirements:\r\n   *\r\n   * - `target` must be a contract.\r\n   * - calling `target` with `data` must not revert.\r\n   *\r\n   * _Available since v3.1._\r\n   */\r\n  function functionCall(address target, bytes memory data)\r\n    internal\r\n    returns (bytes memory)\r\n  {\r\n    return functionCall(target, data, \"Address: low-level call failed\");\r\n  }\r\n\r\n  /**\r\n   * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\r\n   * `errorMessage` as a fallback revert reason when `target` reverts.\r\n   *\r\n   * _Available since v3.1._\r\n   */\r\n  function functionCall(\r\n    address target,\r\n    bytes memory data,\r\n    string memory errorMessage\r\n  ) internal returns (bytes memory) {\r\n    return functionCallWithValue(target, data, 0, errorMessage);\r\n  }\r\n\r\n  /**\r\n   * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n   * but also transferring `value` wei to `target`.\r\n   *\r\n   * Requirements:\r\n   *\r\n   * - the calling contract must have an ETH balance of at least `value`.\r\n   * - the called Solidity function must be `payable`.\r\n   *\r\n   * _Available since v3.1._\r\n   */\r\n  function functionCallWithValue(\r\n    address target,\r\n    bytes memory data,\r\n    uint256 value\r\n  ) internal returns (bytes memory) {\r\n    return\r\n      functionCallWithValue(\r\n        target,\r\n        data,\r\n        value,\r\n        \"Address: low-level call with value failed\"\r\n      );\r\n  }\r\n\r\n  /**\r\n   * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\r\n   * with `errorMessage` as a fallback revert reason when `target` reverts.\r\n   *\r\n   * _Available since v3.1._\r\n   */\r\n  function functionCallWithValue(\r\n    address target,\r\n    bytes memory data,\r\n    uint256 value,\r\n    string memory errorMessage\r\n  ) internal returns (bytes memory) {\r\n    require(\r\n      address(this).balance >= value,\r\n      \"Address: insufficient balance for call\"\r\n    );\r\n    require(isContract(target), \"Address: call to non-contract\");\r\n\r\n    // solhint-disable-next-line avoid-low-level-calls\r\n    (bool success, bytes memory returndata) = target.call{ value: value }(data);\r\n    return _verifyCallResult(success, returndata, errorMessage);\r\n  }\r\n\r\n  /**\r\n   * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n   * but performing a static call.\r\n   *\r\n   * _Available since v3.3._\r\n   */\r\n  function functionStaticCall(address target, bytes memory data)\r\n    internal\r\n    view\r\n    returns (bytes memory)\r\n  {\r\n    return\r\n      functionStaticCall(target, data, \"Address: low-level static call failed\");\r\n  }\r\n\r\n  /**\r\n   * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n   * but performing a static call.\r\n   *\r\n   * _Available since v3.3._\r\n   */\r\n  function functionStaticCall(\r\n    address target,\r\n    bytes memory data,\r\n    string memory errorMessage\r\n  ) internal view returns (bytes memory) {\r\n    require(isContract(target), \"Address: static call to non-contract\");\r\n\r\n    // solhint-disable-next-line avoid-low-level-calls\r\n    (bool success, bytes memory returndata) = target.staticcall(data);\r\n    return _verifyCallResult(success, returndata, errorMessage);\r\n  }\r\n\r\n  function _verifyCallResult(\r\n    bool success,\r\n    bytes memory returndata,\r\n    string memory errorMessage\r\n  ) private pure returns (bytes memory) {\r\n    if (success) {\r\n      return returndata;\r\n    } else {\r\n      // Look for revert reason and bubble it up if present\r\n      if (returndata.length > 0) {\r\n        // The easiest way to bubble the revert reason is using memory via assembly\r\n\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly {\r\n          let returndata_size := mload(returndata)\r\n          revert(add(32, returndata), returndata_size)\r\n        }\r\n      } else {\r\n        revert(errorMessage);\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\n// File @openzeppelin/contracts-upgradeable/proxy/Initializable.sol@v3.4.1\r\n\r\n// solhint-disable-next-line compiler-version\r\npragma solidity >=0.4.24 <0.8.0;\r\n\r\n/**\r\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\r\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\r\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\r\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\r\n *\r\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\r\n * possible by providing the encoded function call as the `_data` argument to {UpgradeableProxy-constructor}.\r\n *\r\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\r\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\r\n */\r\nabstract contract Initializable {\r\n  /**\r\n   * @dev Indicates that the contract has been initialized.\r\n   */\r\n  bool private _initialized;\r\n\r\n  /**\r\n   * @dev Indicates that the contract is in the process of being initialized.\r\n   */\r\n  bool private _initializing;\r\n\r\n  /**\r\n   * @dev Modifier to protect an initializer function from being invoked twice.\r\n   */\r\n  modifier initializer() {\r\n    require(\r\n      _initializing || _isConstructor() || !_initialized,\r\n      \"Initializable: contract is already initialized\"\r\n    );\r\n\r\n    bool isTopLevelCall = !_initializing;\r\n    if (isTopLevelCall) {\r\n      _initializing = true;\r\n      _initialized = true;\r\n    }\r\n\r\n    _;\r\n\r\n    if (isTopLevelCall) {\r\n      _initializing = false;\r\n    }\r\n  }\r\n\r\n  /// @dev Returns true if and only if the function is running in the constructor\r\n  function _isConstructor() private view returns (bool) {\r\n    return !AddressUpgradeable.isContract(address(this));\r\n  }\r\n}\r\n\r\n// File @openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol@v3.4.1\r\n\r\npragma solidity >=0.6.0 <0.8.0;\r\n\r\n/*\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with GSN meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract ContextUpgradeable is Initializable {\r\n  function __Context_init() internal initializer {\r\n    __Context_init_unchained();\r\n  }\r\n\r\n  function __Context_init_unchained() internal initializer {}\r\n\r\n  function _msgSender() internal view virtual returns (address payable) {\r\n    return msg.sender;\r\n  }\r\n\r\n  function _msgData() internal view virtual returns (bytes memory) {\r\n    this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n    return msg.data;\r\n  }\r\n\r\n  uint256[50] private __gap;\r\n}\r\n\r\n// File @openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol@v3.4.1\r\n\r\npragma solidity >=0.6.0 <0.8.0;\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\r\n  address private _owner;\r\n\r\n  event OwnershipTransferred(\r\n    address indexed previousOwner,\r\n    address indexed newOwner\r\n  );\r\n\r\n  /**\r\n   * @dev Initializes the contract setting the deployer as the initial owner.\r\n   */\r\n  function __Ownable_init() internal initializer {\r\n    __Context_init_unchained();\r\n    __Ownable_init_unchained();\r\n  }\r\n\r\n  function __Ownable_init_unchained() internal initializer {\r\n    address msgSender = _msgSender();\r\n    _owner = msgSender;\r\n    emit OwnershipTransferred(address(0), msgSender);\r\n  }\r\n\r\n  /**\r\n   * @dev Returns the address of the current owner.\r\n   */\r\n  function owner() public view virtual returns (address) {\r\n    return _owner;\r\n  }\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Leaves the contract without owner. It will not be possible to call\r\n   * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n   *\r\n   * NOTE: Renouncing ownership will leave the contract without an owner,\r\n   * thereby removing any functionality that is only available to the owner.\r\n   */\r\n  function renounceOwnership() public virtual onlyOwner {\r\n    emit OwnershipTransferred(_owner, address(0));\r\n    _owner = address(0);\r\n  }\r\n\r\n  /**\r\n   * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n   * Can only be called by the current owner.\r\n   */\r\n  function transferOwnership(address newOwner) public virtual onlyOwner {\r\n    require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n    emit OwnershipTransferred(_owner, newOwner);\r\n    _owner = newOwner;\r\n  }\r\n\r\n  uint256[49] private __gap;\r\n}\r\n\r\n// File @openzeppelin/contracts/token/ERC20/IERC20.sol@v3.4.1\r\n\r\npragma solidity >=0.6.0 <0.8.0;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n  /**\r\n   * @dev Returns the amount of tokens in existence.\r\n   */\r\n  function totalSupply() external view returns (uint256);\r\n\r\n  /**\r\n   * @dev Returns the amount of tokens owned by `account`.\r\n   */\r\n  function balanceOf(address account) external view returns (uint256);\r\n\r\n  /**\r\n   * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n   *\r\n   * Returns a boolean value indicating whether the operation succeeded.\r\n   *\r\n   * Emits a {Transfer} event.\r\n   */\r\n  function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n  /**\r\n   * @dev Returns the remaining number of tokens that `spender` will be\r\n   * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n   * zero by default.\r\n   *\r\n   * This value changes when {approve} or {transferFrom} are called.\r\n   */\r\n  function allowance(address owner, address spender)\r\n    external\r\n    view\r\n    returns (uint256);\r\n\r\n  /**\r\n   * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n   *\r\n   * Returns a boolean value indicating whether the operation succeeded.\r\n   *\r\n   * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n   * that someone may use both the old and the new allowance by unfortunate\r\n   * transaction ordering. One possible solution to mitigate this race\r\n   * condition is to first reduce the spender's allowance to 0 and set the\r\n   * desired value afterwards:\r\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n   *\r\n   * Emits an {Approval} event.\r\n   */\r\n  function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n  /**\r\n   * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n   * allowance mechanism. `amount` is then deducted from the caller's\r\n   * allowance.\r\n   *\r\n   * Returns a boolean value indicating whether the operation succeeded.\r\n   *\r\n   * Emits a {Transfer} event.\r\n   */\r\n  function transferFrom(\r\n    address sender,\r\n    address recipient,\r\n    uint256 amount\r\n  ) external returns (bool);\r\n\r\n  /**\r\n   * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n   * another (`to`).\r\n   *\r\n   * Note that `value` may be zero.\r\n   */\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n  /**\r\n   * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n   * a call to {approve}. `value` is the new allowance.\r\n   */\r\n  event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n// File @openzeppelin/contracts/math/SafeMath.sol@v3.4.1\r\n\r\npragma solidity >=0.6.0 <0.8.0;\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n  /**\r\n   * @dev Returns the addition of two unsigned integers, with an overflow flag.\r\n   *\r\n   * _Available since v3.4._\r\n   */\r\n  function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n    uint256 c = a + b;\r\n    if (c < a) return (false, 0);\r\n    return (true, c);\r\n  }\r\n\r\n  /**\r\n   * @dev Returns the substraction of two unsigned integers, with an overflow flag.\r\n   *\r\n   * _Available since v3.4._\r\n   */\r\n  function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n    if (b > a) return (false, 0);\r\n    return (true, a - b);\r\n  }\r\n\r\n  /**\r\n   * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\r\n   *\r\n   * _Available since v3.4._\r\n   */\r\n  function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n    // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n    // benefit is lost if 'b' is also tested.\r\n    // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n    if (a == 0) return (true, 0);\r\n    uint256 c = a * b;\r\n    if (c / a != b) return (false, 0);\r\n    return (true, c);\r\n  }\r\n\r\n  /**\r\n   * @dev Returns the division of two unsigned integers, with a division by zero flag.\r\n   *\r\n   * _Available since v3.4._\r\n   */\r\n  function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n    if (b == 0) return (false, 0);\r\n    return (true, a / b);\r\n  }\r\n\r\n  /**\r\n   * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\r\n   *\r\n   * _Available since v3.4._\r\n   */\r\n  function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n    if (b == 0) return (false, 0);\r\n    return (true, a % b);\r\n  }\r\n\r\n  /**\r\n   * @dev Returns the addition of two unsigned integers, reverting on\r\n   * overflow.\r\n   *\r\n   * Counterpart to Solidity's `+` operator.\r\n   *\r\n   * Requirements:\r\n   *\r\n   * - Addition cannot overflow.\r\n   */\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    require(c >= a, \"SafeMath: addition overflow\");\r\n    return c;\r\n  }\r\n\r\n  /**\r\n   * @dev Returns the subtraction of two unsigned integers, reverting on\r\n   * overflow (when the result is negative).\r\n   *\r\n   * Counterpart to Solidity's `-` operator.\r\n   *\r\n   * Requirements:\r\n   *\r\n   * - Subtraction cannot overflow.\r\n   */\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    require(b <= a, \"SafeMath: subtraction overflow\");\r\n    return a - b;\r\n  }\r\n\r\n  /**\r\n   * @dev Returns the multiplication of two unsigned integers, reverting on\r\n   * overflow.\r\n   *\r\n   * Counterpart to Solidity's `*` operator.\r\n   *\r\n   * Requirements:\r\n   *\r\n   * - Multiplication cannot overflow.\r\n   */\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    if (a == 0) return 0;\r\n    uint256 c = a * b;\r\n    require(c / a == b, \"SafeMath: multiplication overflow\");\r\n    return c;\r\n  }\r\n\r\n  /**\r\n   * @dev Returns the integer division of two unsigned integers, reverting on\r\n   * division by zero. The result is rounded towards zero.\r\n   *\r\n   * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n   * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n   * uses an invalid opcode to revert (consuming all remaining gas).\r\n   *\r\n   * Requirements:\r\n   *\r\n   * - The divisor cannot be zero.\r\n   */\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    require(b > 0, \"SafeMath: division by zero\");\r\n    return a / b;\r\n  }\r\n\r\n  /**\r\n   * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n   * reverting when dividing by zero.\r\n   *\r\n   * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n   * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n   * invalid opcode to revert (consuming all remaining gas).\r\n   *\r\n   * Requirements:\r\n   *\r\n   * - The divisor cannot be zero.\r\n   */\r\n  function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    require(b > 0, \"SafeMath: modulo by zero\");\r\n    return a % b;\r\n  }\r\n\r\n  /**\r\n   * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n   * overflow (when the result is negative).\r\n   *\r\n   * CAUTION: This function is deprecated because it requires allocating memory for the error\r\n   * message unnecessarily. For custom revert reasons use {trySub}.\r\n   *\r\n   * Counterpart to Solidity's `-` operator.\r\n   *\r\n   * Requirements:\r\n   *\r\n   * - Subtraction cannot overflow.\r\n   */\r\n  function sub(\r\n    uint256 a,\r\n    uint256 b,\r\n    string memory errorMessage\r\n  ) internal pure returns (uint256) {\r\n    require(b <= a, errorMessage);\r\n    return a - b;\r\n  }\r\n\r\n  /**\r\n   * @dev Returns the integer division of two unsigned integers, reverting with custom message on\r\n   * division by zero. The result is rounded towards zero.\r\n   *\r\n   * CAUTION: This function is deprecated because it requires allocating memory for the error\r\n   * message unnecessarily. For custom revert reasons use {tryDiv}.\r\n   *\r\n   * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n   * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n   * uses an invalid opcode to revert (consuming all remaining gas).\r\n   *\r\n   * Requirements:\r\n   *\r\n   * - The divisor cannot be zero.\r\n   */\r\n  function div(\r\n    uint256 a,\r\n    uint256 b,\r\n    string memory errorMessage\r\n  ) internal pure returns (uint256) {\r\n    require(b > 0, errorMessage);\r\n    return a / b;\r\n  }\r\n\r\n  /**\r\n   * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n   * reverting with custom message when dividing by zero.\r\n   *\r\n   * CAUTION: This function is deprecated because it requires allocating memory for the error\r\n   * message unnecessarily. For custom revert reasons use {tryMod}.\r\n   *\r\n   * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n   * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n   * invalid opcode to revert (consuming all remaining gas).\r\n   *\r\n   * Requirements:\r\n   *\r\n   * - The divisor cannot be zero.\r\n   */\r\n  function mod(\r\n    uint256 a,\r\n    uint256 b,\r\n    string memory errorMessage\r\n  ) internal pure returns (uint256) {\r\n    require(b > 0, errorMessage);\r\n    return a % b;\r\n  }\r\n}\r\n\r\n// File @openzeppelin/contracts/utils/Address.sol@v3.4.1\r\n\r\npragma solidity >=0.6.2 <0.8.0;\r\n\r\n/**\r\n * @dev Collection of functions related to the address type\r\n */\r\nlibrary Address {\r\n  /**\r\n   * @dev Returns true if `account` is a contract.\r\n   *\r\n   * [IMPORTANT]\r\n   * ====\r\n   * It is unsafe to assume that an address for which this function returns\r\n   * false is an externally-owned account (EOA) and not a contract.\r\n   *\r\n   * Among others, `isContract` will return false for the following\r\n   * types of addresses:\r\n   *\r\n   *  - an externally-owned account\r\n   *  - a contract in construction\r\n   *  - an address where a contract will be created\r\n   *  - an address where a contract lived, but was destroyed\r\n   * ====\r\n   */\r\n  function isContract(address account) internal view returns (bool) {\r\n    // This method relies on extcodesize, which returns 0 for contracts in\r\n    // construction, since the code is only stored at the end of the\r\n    // constructor execution.\r\n\r\n    uint256 size;\r\n    // solhint-disable-next-line no-inline-assembly\r\n    assembly {\r\n      size := extcodesize(account)\r\n    }\r\n    return size > 0;\r\n  }\r\n\r\n  /**\r\n   * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n   * `recipient`, forwarding all available gas and reverting on errors.\r\n   *\r\n   * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n   * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n   * imposed by `transfer`, making them unable to receive funds via\r\n   * `transfer`. {sendValue} removes this limitation.\r\n   *\r\n   * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n   *\r\n   * IMPORTANT: because control is transferred to `recipient`, care must be\r\n   * taken to not create reentrancy vulnerabilities. Consider using\r\n   * {ReentrancyGuard} or the\r\n   * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n   */\r\n  function sendValue(address payable recipient, uint256 amount) internal {\r\n    require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n    // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\r\n    (bool success, ) = recipient.call{ value: amount }(\"\");\r\n    require(\r\n      success,\r\n      \"Address: unable to send value, recipient may have reverted\"\r\n    );\r\n  }\r\n\r\n  /**\r\n   * @dev Performs a Solidity function call using a low level `call`. A\r\n   * plain`call` is an unsafe replacement for a function call: use this\r\n   * function instead.\r\n   *\r\n   * If `target` reverts with a revert reason, it is bubbled up by this\r\n   * function (like regular Solidity function calls).\r\n   *\r\n   * Returns the raw returned data. To convert to the expected return value,\r\n   * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\r\n   *\r\n   * Requirements:\r\n   *\r\n   * - `target` must be a contract.\r\n   * - calling `target` with `data` must not revert.\r\n   *\r\n   * _Available since v3.1._\r\n   */\r\n  function functionCall(address target, bytes memory data)\r\n    internal\r\n    returns (bytes memory)\r\n  {\r\n    return functionCall(target, data, \"Address: low-level call failed\");\r\n  }\r\n\r\n  /**\r\n   * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\r\n   * `errorMessage` as a fallback revert reason when `target` reverts.\r\n   *\r\n   * _Available since v3.1._\r\n   */\r\n  function functionCall(\r\n    address target,\r\n    bytes memory data,\r\n    string memory errorMessage\r\n  ) internal returns (bytes memory) {\r\n    return functionCallWithValue(target, data, 0, errorMessage);\r\n  }\r\n\r\n  /**\r\n   * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n   * but also transferring `value` wei to `target`.\r\n   *\r\n   * Requirements:\r\n   *\r\n   * - the calling contract must have an ETH balance of at least `value`.\r\n   * - the called Solidity function must be `payable`.\r\n   *\r\n   * _Available since v3.1._\r\n   */\r\n  function functionCallWithValue(\r\n    address target,\r\n    bytes memory data,\r\n    uint256 value\r\n  ) internal returns (bytes memory) {\r\n    return\r\n      functionCallWithValue(\r\n        target,\r\n        data,\r\n        value,\r\n        \"Address: low-level call with value failed\"\r\n      );\r\n  }\r\n\r\n  /**\r\n   * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\r\n   * with `errorMessage` as a fallback revert reason when `target` reverts.\r\n   *\r\n   * _Available since v3.1._\r\n   */\r\n  function functionCallWithValue(\r\n    address target,\r\n    bytes memory data,\r\n    uint256 value,\r\n    string memory errorMessage\r\n  ) internal returns (bytes memory) {\r\n    require(\r\n      address(this).balance >= value,\r\n      \"Address: insufficient balance for call\"\r\n    );\r\n    require(isContract(target), \"Address: call to non-contract\");\r\n\r\n    // solhint-disable-next-line avoid-low-level-calls\r\n    (bool success, bytes memory returndata) = target.call{ value: value }(data);\r\n    return _verifyCallResult(success, returndata, errorMessage);\r\n  }\r\n\r\n  /**\r\n   * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n   * but performing a static call.\r\n   *\r\n   * _Available since v3.3._\r\n   */\r\n  function functionStaticCall(address target, bytes memory data)\r\n    internal\r\n    view\r\n    returns (bytes memory)\r\n  {\r\n    return\r\n      functionStaticCall(target, data, \"Address: low-level static call failed\");\r\n  }\r\n\r\n  /**\r\n   * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n   * but performing a static call.\r\n   *\r\n   * _Available since v3.3._\r\n   */\r\n  function functionStaticCall(\r\n    address target,\r\n    bytes memory data,\r\n    string memory errorMessage\r\n  ) internal view returns (bytes memory) {\r\n    require(isContract(target), \"Address: static call to non-contract\");\r\n\r\n    // solhint-disable-next-line avoid-low-level-calls\r\n    (bool success, bytes memory returndata) = target.staticcall(data);\r\n    return _verifyCallResult(success, returndata, errorMessage);\r\n  }\r\n\r\n  /**\r\n   * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n   * but performing a delegate call.\r\n   *\r\n   * _Available since v3.4._\r\n   */\r\n  function functionDelegateCall(address target, bytes memory data)\r\n    internal\r\n    returns (bytes memory)\r\n  {\r\n    return\r\n      functionDelegateCall(\r\n        target,\r\n        data,\r\n        \"Address: low-level delegate call failed\"\r\n      );\r\n  }\r\n\r\n  /**\r\n   * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n   * but performing a delegate call.\r\n   *\r\n   * _Available since v3.4._\r\n   */\r\n  function functionDelegateCall(\r\n    address target,\r\n    bytes memory data,\r\n    string memory errorMessage\r\n  ) internal returns (bytes memory) {\r\n    require(isContract(target), \"Address: delegate call to non-contract\");\r\n\r\n    // solhint-disable-next-line avoid-low-level-calls\r\n    (bool success, bytes memory returndata) = target.delegatecall(data);\r\n    return _verifyCallResult(success, returndata, errorMessage);\r\n  }\r\n\r\n  function _verifyCallResult(\r\n    bool success,\r\n    bytes memory returndata,\r\n    string memory errorMessage\r\n  ) private pure returns (bytes memory) {\r\n    if (success) {\r\n      return returndata;\r\n    } else {\r\n      // Look for revert reason and bubble it up if present\r\n      if (returndata.length > 0) {\r\n        // The easiest way to bubble the revert reason is using memory via assembly\r\n\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly {\r\n          let returndata_size := mload(returndata)\r\n          revert(add(32, returndata), returndata_size)\r\n        }\r\n      } else {\r\n        revert(errorMessage);\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\n// File @openzeppelin/contracts/token/ERC20/SafeERC20.sol@v3.4.1\r\n\r\npragma solidity >=0.6.0 <0.8.0;\r\n\r\n/**\r\n * @title SafeERC20\r\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\r\n * contract returns false). Tokens that return no value (and instead revert or\r\n * throw on failure) are also supported, non-reverting calls are assumed to be\r\n * successful.\r\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\r\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\r\n */\r\nlibrary SafeERC20 {\r\n  using SafeMath for uint256;\r\n  using Address for address;\r\n\r\n  function safeTransfer(\r\n    IERC20 token,\r\n    address to,\r\n    uint256 value\r\n  ) internal {\r\n    _callOptionalReturn(\r\n      token,\r\n      abi.encodeWithSelector(token.transfer.selector, to, value)\r\n    );\r\n  }\r\n\r\n  function safeTransferFrom(\r\n    IERC20 token,\r\n    address from,\r\n    address to,\r\n    uint256 value\r\n  ) internal {\r\n    _callOptionalReturn(\r\n      token,\r\n      abi.encodeWithSelector(token.transferFrom.selector, from, to, value)\r\n    );\r\n  }\r\n\r\n  /**\r\n   * @dev Deprecated. This function has issues similar to the ones found in\r\n   * {IERC20-approve}, and its usage is discouraged.\r\n   *\r\n   * Whenever possible, use {safeIncreaseAllowance} and\r\n   * {safeDecreaseAllowance} instead.\r\n   */\r\n  function safeApprove(\r\n    IERC20 token,\r\n    address spender,\r\n    uint256 value\r\n  ) internal {\r\n    // safeApprove should only be called when setting an initial allowance,\r\n    // or when resetting it to zero. To increase and decrease it, use\r\n    // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\r\n    // solhint-disable-next-line max-line-length\r\n    require(\r\n      (value == 0) || (token.allowance(address(this), spender) == 0),\r\n      \"SafeERC20: approve from non-zero to non-zero allowance\"\r\n    );\r\n    _callOptionalReturn(\r\n      token,\r\n      abi.encodeWithSelector(token.approve.selector, spender, value)\r\n    );\r\n  }\r\n\r\n  function safeIncreaseAllowance(\r\n    IERC20 token,\r\n    address spender,\r\n    uint256 value\r\n  ) internal {\r\n    uint256 newAllowance = token.allowance(address(this), spender).add(value);\r\n    _callOptionalReturn(\r\n      token,\r\n      abi.encodeWithSelector(token.approve.selector, spender, newAllowance)\r\n    );\r\n  }\r\n\r\n  function safeDecreaseAllowance(\r\n    IERC20 token,\r\n    address spender,\r\n    uint256 value\r\n  ) internal {\r\n    uint256 newAllowance =\r\n      token.allowance(address(this), spender).sub(\r\n        value,\r\n        \"SafeERC20: decreased allowance below zero\"\r\n      );\r\n    _callOptionalReturn(\r\n      token,\r\n      abi.encodeWithSelector(token.approve.selector, spender, newAllowance)\r\n    );\r\n  }\r\n\r\n  /**\r\n   * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\r\n   * on the return value: the return value is optional (but if data is returned, it must not be false).\r\n   * @param token The token targeted by the call.\r\n   * @param data The call data (encoded using abi.encode or one of its variants).\r\n   */\r\n  function _callOptionalReturn(IERC20 token, bytes memory data) private {\r\n    // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\r\n    // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\r\n    // the target address contains contract code and also asserts for success in the low-level call.\r\n\r\n    bytes memory returndata =\r\n      address(token).functionCall(data, \"SafeERC20: low-level call failed\");\r\n    if (returndata.length > 0) {\r\n      // Return data is optional\r\n      // solhint-disable-next-line max-line-length\r\n      require(\r\n        abi.decode(returndata, (bool)),\r\n        \"SafeERC20: ERC20 operation did not succeed\"\r\n      );\r\n    }\r\n  }\r\n}\r\n\r\n// File contracts/lib/EIP712MetaTransactionUpgradeable/EIP712BaseUpgradeable.sol\r\n\r\npragma solidity ^0.7.4;\r\n\r\ncontract EIP712BaseUpgradeable is Initializable {\r\n  struct EIP712Domain {\r\n    string name;\r\n    string version;\r\n    uint256 salt;\r\n    address verifyingContract;\r\n  }\r\n\r\n  bytes32 internal constant EIP712_DOMAIN_TYPEHASH =\r\n    keccak256(\r\n      bytes(\r\n        \"EIP712Domain(string name,string version,uint256 salt,address verifyingContract)\"\r\n      )\r\n    );\r\n\r\n  bytes32 internal domainSeperator;\r\n\r\n  function _initialize(string memory name, string memory version)\r\n    public\r\n    virtual\r\n    initializer\r\n  {\r\n    domainSeperator = keccak256(\r\n      abi.encode(\r\n        EIP712_DOMAIN_TYPEHASH,\r\n        keccak256(bytes(name)),\r\n        keccak256(bytes(version)),\r\n        getChainID(),\r\n        address(this)\r\n      )\r\n    );\r\n  }\r\n\r\n  function getChainID() internal pure returns (uint256 id) {\r\n    assembly {\r\n      id := chainid()\r\n    }\r\n  }\r\n\r\n  function getDomainSeperator() private view returns (bytes32) {\r\n    return domainSeperator;\r\n  }\r\n\r\n  /**\r\n   * Accept message hash and returns hash message in EIP712 compatible form\r\n   * So that it can be used to recover signer from signature signed using EIP712 formatted data\r\n   * https://eips.ethereum.org/EIPS/eip-712\r\n   * \"\\\\x19\" makes the encoding deterministic\r\n   * \"\\\\x01\" is the version byte to make it compatible to EIP-191\r\n   */\r\n  function toTypedMessageHash(bytes32 messageHash)\r\n    internal\r\n    view\r\n    returns (bytes32)\r\n  {\r\n    return\r\n      keccak256(\r\n        abi.encodePacked(\"\\x19\\x01\", getDomainSeperator(), messageHash)\r\n      );\r\n  }\r\n}\r\n\r\n// File contracts/lib/EIP712MetaTransactionUpgradeable/EIP712MetaTransactionUpgradeable.sol\r\n\r\npragma solidity ^0.7.4;\r\n\r\ncontract EIP712MetaTransactionUpgradeable is\r\n  Initializable,\r\n  EIP712BaseUpgradeable\r\n{\r\n  using SafeMath for uint256;\r\n  bytes32 private constant META_TRANSACTION_TYPEHASH =\r\n    keccak256(\r\n      bytes(\r\n        \"MetaTransaction(uint256 nonce,address from,bytes functionSignature)\"\r\n      )\r\n    );\r\n\r\n  event MetaTransactionExecuted(\r\n    address userAddress,\r\n    address payable relayerAddress,\r\n    bytes functionSignature\r\n  );\r\n  mapping(address => uint256) private nonces;\r\n\r\n  /*\r\n   * Meta transaction structure.\r\n   * No point of including value field here as if user is doing value transfer then he has the funds to pay for gas\r\n   * He should call the desired function directly in that case.\r\n   */\r\n  struct MetaTransaction {\r\n    uint256 nonce;\r\n    address from;\r\n    bytes functionSignature;\r\n  }\r\n\r\n  function _initialize(string memory _name, string memory _version)\r\n    public\r\n    override\r\n    initializer\r\n  {\r\n    EIP712BaseUpgradeable._initialize(_name, _version);\r\n  }\r\n\r\n  function convertBytesToBytes4(bytes memory inBytes)\r\n    internal\r\n    pure\r\n    returns (bytes4 outBytes4)\r\n  {\r\n    if (inBytes.length == 0) {\r\n      return 0x0;\r\n    }\r\n\r\n    assembly {\r\n      outBytes4 := mload(add(inBytes, 32))\r\n    }\r\n  }\r\n\r\n  function executeMetaTransaction(\r\n    address userAddress,\r\n    bytes memory functionSignature,\r\n    bytes32 sigR,\r\n    bytes32 sigS,\r\n    uint8 sigV\r\n  ) public payable virtual returns (bytes memory) {\r\n    bytes4 destinationFunctionSig = convertBytesToBytes4(functionSignature);\r\n    require(\r\n      destinationFunctionSig != msg.sig,\r\n      \"functionSignature can not be of executeMetaTransaction method\"\r\n    );\r\n    MetaTransaction memory metaTx =\r\n      MetaTransaction({\r\n        nonce: nonces[userAddress],\r\n        from: userAddress,\r\n        functionSignature: functionSignature\r\n      });\r\n    require(\r\n      verify(userAddress, metaTx, sigR, sigS, sigV),\r\n      \"Signer and signature do not match\"\r\n    );\r\n    nonces[userAddress] = nonces[userAddress].add(1);\r\n    // Append userAddress at the end to extract it from calling context\r\n    (bool success, bytes memory returnData) =\r\n      address(this).call(abi.encodePacked(functionSignature, userAddress));\r\n\r\n    require(success, \"Function call not successful\");\r\n    emit MetaTransactionExecuted(userAddress, msg.sender, functionSignature);\r\n    return returnData;\r\n  }\r\n\r\n  function hashMetaTransaction(MetaTransaction memory metaTx)\r\n    internal\r\n    pure\r\n    returns (bytes32)\r\n  {\r\n    return\r\n      keccak256(\r\n        abi.encode(\r\n          META_TRANSACTION_TYPEHASH,\r\n          metaTx.nonce,\r\n          metaTx.from,\r\n          keccak256(metaTx.functionSignature)\r\n        )\r\n      );\r\n  }\r\n\r\n  function getNonce(address user) external view returns (uint256 nonce) {\r\n    nonce = nonces[user];\r\n  }\r\n\r\n  function verify(\r\n    address user,\r\n    MetaTransaction memory metaTx,\r\n    bytes32 sigR,\r\n    bytes32 sigS,\r\n    uint8 sigV\r\n  ) internal view returns (bool) {\r\n    address signer =\r\n      ecrecover(\r\n        toTypedMessageHash(hashMetaTransaction(metaTx)),\r\n        sigV,\r\n        sigR,\r\n        sigS\r\n      );\r\n    require(signer != address(0), \"Invalid signature\");\r\n    return signer == user;\r\n  }\r\n\r\n  function msgSender() internal view returns (address sender) {\r\n    if (msg.sender == address(this)) {\r\n      bytes memory array = msg.data;\r\n      uint256 index = msg.data.length;\r\n      assembly {\r\n        // Load the 32 bytes word from memory with the address on the lower 20 bytes, and mask those.\r\n        sender := and(\r\n          mload(add(array, index)),\r\n          0xffffffffffffffffffffffffffffffffffffffff\r\n        )\r\n      }\r\n    } else {\r\n      sender = msg.sender;\r\n    }\r\n    return sender;\r\n  }\r\n}\r\n\r\n// File hardhat/console.sol@v2.1.1\r\n\r\npragma solidity >=0.4.22 <0.9.0;\r\n\r\nlibrary console {\r\n  address constant CONSOLE_ADDRESS =\r\n    address(0x000000000000000000636F6e736F6c652e6c6f67);\r\n\r\n  function _sendLogPayload(bytes memory payload) private view {\r\n    uint256 payloadLength = payload.length;\r\n    address consoleAddress = CONSOLE_ADDRESS;\r\n    assembly {\r\n      let payloadStart := add(payload, 32)\r\n      let r := staticcall(\r\n        gas(),\r\n        consoleAddress,\r\n        payloadStart,\r\n        payloadLength,\r\n        0,\r\n        0\r\n      )\r\n    }\r\n  }\r\n\r\n  function log() internal view {\r\n    _sendLogPayload(abi.encodeWithSignature(\"log()\"));\r\n  }\r\n\r\n  function logInt(int256 p0) internal view {\r\n    _sendLogPayload(abi.encodeWithSignature(\"log(int)\", p0));\r\n  }\r\n\r\n  function logUint(uint256 p0) internal view {\r\n    _sendLogPayload(abi.encodeWithSignature(\"log(uint)\", p0));\r\n  }\r\n\r\n  function logString(string memory p0) internal view {\r\n    _sendLogPayload(abi.encodeWithSignature(\"log(string)\", p0));\r\n  }\r\n\r\n  function logBool(bool p0) internal view {\r\n    _sendLogPayload(abi.encodeWithSignature(\"log(bool)\", p0));\r\n  }\r\n\r\n  function logAddress(address p0) internal view {\r\n    _sendLogPayload(abi.encodeWithSignature(\"log(address)\", p0));\r\n  }\r\n\r\n  function logBytes(bytes memory p0) internal view {\r\n    _sendLogPayload(abi.encodeWithSignature(\"log(bytes)\", p0));\r\n  }\r\n\r\n  function logBytes1(bytes1 p0) internal view {\r\n    _sendLogPayload(abi.encodeWithSignature(\"log(bytes1)\", p0));\r\n  }\r\n\r\n  function logBytes2(bytes2 p0) internal view {\r\n    _sendLogPayload(abi.encodeWithSignature(\"log(bytes2)\", p0));\r\n  }\r\n\r\n  function logBytes3(bytes3 p0) internal view {\r\n    _sendLogPayload(abi.encodeWithSignature(\"log(bytes3)\", p0));\r\n  }\r\n\r\n  function logBytes4(bytes4 p0) internal view {\r\n    _sendLogPayload(abi.encodeWithSignature(\"log(bytes4)\", p0));\r\n  }\r\n\r\n  function logBytes5(bytes5 p0) internal view {\r\n    _sendLogPayload(abi.encodeWithSignature(\"log(bytes5)\", p0));\r\n  }\r\n\r\n  function logBytes6(bytes6 p0) internal view {\r\n    _sendLogPayload(abi.encodeWithSignature(\"log(bytes6)\", p0));\r\n  }\r\n\r\n  function logBytes7(bytes7 p0) internal view {\r\n    _sendLogPayload(abi.encodeWithSignature(\"log(bytes7)\", p0));\r\n  }\r\n\r\n  function logBytes8(bytes8 p0) internal view {\r\n    _sendLogPayload(abi.encodeWithSignature(\"log(bytes8)\", p0));\r\n  }\r\n\r\n  function logBytes9(bytes9 p0) internal view {\r\n    _sendLogPayload(abi.encodeWithSignature(\"log(bytes9)\", p0));\r\n  }\r\n\r\n  function logBytes10(bytes10 p0) internal view {\r\n    _sendLogPayload(abi.encodeWithSignature(\"log(bytes10)\", p0));\r\n  }\r\n\r\n  function logBytes11(bytes11 p0) internal view {\r\n    _sendLogPayload(abi.encodeWithSignature(\"log(bytes11)\", p0));\r\n  }\r\n\r\n  function logBytes12(bytes12 p0) internal view {\r\n    _sendLogPayload(abi.encodeWithSignature(\"log(bytes12)\", p0));\r\n  }\r\n\r\n  function logBytes13(bytes13 p0) internal view {\r\n    _sendLogPayload(abi.encodeWithSignature(\"log(bytes13)\", p0));\r\n  }\r\n\r\n  function logBytes14(bytes14 p0) internal view {\r\n    _sendLogPayload(abi.encodeWithSignature(\"log(bytes14)\", p0));\r\n  }\r\n\r\n  function logBytes15(bytes15 p0) internal view {\r\n    _sendLogPayload(abi.encodeWithSignature(\"log(bytes15)\", p0));\r\n  }\r\n\r\n  function logBytes16(bytes16 p0) internal view {\r\n    _sendLogPayload(abi.encodeWithSignature(\"log(bytes16)\", p0));\r\n  }\r\n\r\n  function logBytes17(bytes17 p0) internal view {\r\n    _sendLogPayload(abi.encodeWithSignature(\"log(bytes17)\", p0));\r\n  }\r\n\r\n  function logBytes18(bytes18 p0) internal view {\r\n    _sendLogPayload(abi.encodeWithSignature(\"log(bytes18)\", p0));\r\n  }\r\n\r\n  function logBytes19(bytes19 p0) internal view {\r\n    _sendLogPayload(abi.encodeWithSignature(\"log(bytes19)\", p0));\r\n  }\r\n\r\n  function logBytes20(bytes20 p0) internal view {\r\n    _sendLogPayload(abi.encodeWithSignature(\"log(bytes20)\", p0));\r\n  }\r\n\r\n  function logBytes21(bytes21 p0) internal view {\r\n    _sendLogPayload(abi.encodeWithSignature(\"log(bytes21)\", p0));\r\n  }\r\n\r\n  function logBytes22(bytes22 p0) internal view {\r\n    _sendLogPayload(abi.encodeWithSignature(\"log(bytes22)\", p0));\r\n  }\r\n\r\n  function logBytes23(bytes23 p0) internal view {\r\n    _sendLogPayload(abi.encodeWithSignature(\"log(bytes23)\", p0));\r\n  }\r\n\r\n  function logBytes24(bytes24 p0) internal view {\r\n    _sendLogPayload(abi.encodeWithSignature(\"log(bytes24)\", p0));\r\n  }\r\n\r\n  function logBytes25(bytes25 p0) internal view {\r\n    _sendLogPayload(abi.encodeWithSignature(\"log(bytes25)\", p0));\r\n  }\r\n\r\n  function logBytes26(bytes26 p0) internal view {\r\n    _sendLogPayload(abi.encodeWithSignature(\"log(bytes26)\", p0));\r\n  }\r\n\r\n  function logBytes27(bytes27 p0) internal view {\r\n    _sendLogPayload(abi.encodeWithSignature(\"log(bytes27)\", p0));\r\n  }\r\n\r\n  function logBytes28(bytes28 p0) internal view {\r\n    _sendLogPayload(abi.encodeWithSignature(\"log(bytes28)\", p0));\r\n  }\r\n\r\n  function logBytes29(bytes29 p0) internal view {\r\n    _sendLogPayload(abi.encodeWithSignature(\"log(bytes29)\", p0));\r\n  }\r\n\r\n  function logBytes30(bytes30 p0) internal view {\r\n    _sendLogPayload(abi.encodeWithSignature(\"log(bytes30)\", p0));\r\n  }\r\n\r\n  function logBytes31(bytes31 p0) internal view {\r\n    _sendLogPayload(abi.encodeWithSignature(\"log(bytes31)\", p0));\r\n  }\r\n\r\n  function logBytes32(bytes32 p0) internal view {\r\n    _sendLogPayload(abi.encodeWithSignature(\"log(bytes32)\", p0));\r\n  }\r\n\r\n  function log(uint256 p0) internal view {\r\n    _sendLogPayload(abi.encodeWithSignature(\"log(uint)\", p0));\r\n  }\r\n\r\n  function log(string memory p0) internal view {\r\n    _sendLogPayload(abi.encodeWithSignature(\"log(string)\", p0));\r\n  }\r\n\r\n  function log(bool p0) internal view {\r\n    _sendLogPayload(abi.encodeWithSignature(\"log(bool)\", p0));\r\n  }\r\n\r\n  function log(address p0) internal view {\r\n    _sendLogPayload(abi.encodeWithSignature(\"log(address)\", p0));\r\n  }\r\n\r\n  function log(uint256 p0, uint256 p1) internal view {\r\n    _sendLogPayload(abi.encodeWithSignature(\"log(uint,uint)\", p0, p1));\r\n  }\r\n\r\n  function log(uint256 p0, string memory p1) internal view {\r\n    _sendLogPayload(abi.encodeWithSignature(\"log(uint,string)\", p0, p1));\r\n  }\r\n\r\n  function log(uint256 p0, bool p1) internal view {\r\n    _sendLogPayload(abi.encodeWithSignature(\"log(uint,bool)\", p0, p1));\r\n  }\r\n\r\n  function log(uint256 p0, address p1) internal view {\r\n    _sendLogPayload(abi.encodeWithSignature(\"log(uint,address)\", p0, p1));\r\n  }\r\n\r\n  function log(string memory p0, uint256 p1) internal view {\r\n    _sendLogPayload(abi.encodeWithSignature(\"log(string,uint)\", p0, p1));\r\n  }\r\n\r\n  function log(string memory p0, string memory p1) internal view {\r\n    _sendLogPayload(abi.encodeWithSignature(\"log(string,string)\", p0, p1));\r\n  }\r\n\r\n  function log(string memory p0, bool p1) internal view {\r\n    _sendLogPayload(abi.encodeWithSignature(\"log(string,bool)\", p0, p1));\r\n  }\r\n\r\n  function log(string memory p0, address p1) internal view {\r\n    _sendLogPayload(abi.encodeWithSignature(\"log(string,address)\", p0, p1));\r\n  }\r\n\r\n  function log(bool p0, uint256 p1) internal view {\r\n    _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint)\", p0, p1));\r\n  }\r\n\r\n  function log(bool p0, string memory p1) internal view {\r\n    _sendLogPayload(abi.encodeWithSignature(\"log(bool,string)\", p0, p1));\r\n  }\r\n\r\n  function log(bool p0, bool p1) internal view {\r\n    _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool)\", p0, p1));\r\n  }\r\n\r\n  function log(bool p0, address p1) internal view {\r\n    _sendLogPayload(abi.encodeWithSignature(\"log(bool,address)\", p0, p1));\r\n  }\r\n\r\n  function log(address p0, uint256 p1) internal view {\r\n    _sendLogPayload(abi.encodeWithSignature(\"log(address,uint)\", p0, p1));\r\n  }\r\n\r\n  function log(address p0, string memory p1) internal view {\r\n    _sendLogPayload(abi.encodeWithSignature(\"log(address,string)\", p0, p1));\r\n  }\r\n\r\n  function log(address p0, bool p1) internal view {\r\n    _sendLogPayload(abi.encodeWithSignature(\"log(address,bool)\", p0, p1));\r\n  }\r\n\r\n  function log(address p0, address p1) internal view {\r\n    _sendLogPayload(abi.encodeWithSignature(\"log(address,address)\", p0, p1));\r\n  }\r\n\r\n  function log(\r\n    uint256 p0,\r\n    uint256 p1,\r\n    uint256 p2\r\n  ) internal view {\r\n    _sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,uint)\", p0, p1, p2));\r\n  }\r\n\r\n  function log(\r\n    uint256 p0,\r\n    uint256 p1,\r\n    string memory p2\r\n  ) internal view {\r\n    _sendLogPayload(\r\n      abi.encodeWithSignature(\"log(uint,uint,string)\", p0, p1, p2)\r\n    );\r\n  }\r\n\r\n  function log(\r\n    uint256 p0,\r\n    uint256 p1,\r\n    bool p2\r\n  ) internal view {\r\n    _sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,bool)\", p0, p1, p2));\r\n  }\r\n\r\n  function log(\r\n    uint256 p0,\r\n    uint256 p1,\r\n    address p2\r\n  ) internal view {\r\n    _sendLogPayload(\r\n      abi.encodeWithSignature(\"log(uint,uint,address)\", p0, p1, p2)\r\n    );\r\n  }\r\n\r\n  function log(\r\n    uint256 p0,\r\n    string memory p1,\r\n    uint256 p2\r\n  ) internal view {\r\n    _sendLogPayload(\r\n      abi.encodeWithSignature(\"log(uint,string,uint)\", p0, p1, p2)\r\n    );\r\n  }\r\n\r\n  function log(\r\n    uint256 p0,\r\n    string memory p1,\r\n    string memory p2\r\n  ) internal view {\r\n    _sendLogPayload(\r\n      abi.encodeWithSignature(\"log(uint,string,string)\", p0, p1, p2)\r\n    );\r\n  }\r\n\r\n  function log(\r\n    uint256 p0,\r\n    string memory p1,\r\n    bool p2\r\n  ) internal view {\r\n    _sendLogPayload(\r\n      abi.encodeWithSignature(\"log(uint,string,bool)\", p0, p1, p2)\r\n    );\r\n  }\r\n\r\n  function log(\r\n    uint256 p0,\r\n    string memory p1,\r\n    address p2\r\n  ) internal view {\r\n    _sendLogPayload(\r\n      abi.encodeWithSignature(\"log(uint,string,address)\", p0, p1, p2)\r\n    );\r\n  }\r\n\r\n  function log(\r\n    uint256 p0,\r\n    bool p1,\r\n    uint256 p2\r\n  ) internal view {\r\n    _sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,uint)\", p0, p1, p2));\r\n  }\r\n\r\n  function log(\r\n    uint256 p0,\r\n    bool p1,\r\n    string memory p2\r\n  ) internal view {\r\n    _sendLogPayload(\r\n      abi.encodeWithSignature(\"log(uint,bool,string)\", p0, p1, p2)\r\n    );\r\n  }\r\n\r\n  function log(\r\n    uint256 p0,\r\n    bool p1,\r\n    bool p2\r\n  ) internal view {\r\n    _sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,bool)\", p0, p1, p2));\r\n  }\r\n\r\n  function log(\r\n    uint256 p0,\r\n    bool p1,\r\n    address p2\r\n  ) internal view {\r\n    _sendLogPayload(\r\n      abi.encodeWithSignature(\"log(uint,bool,address)\", p0, p1, p2)\r\n    );\r\n  }\r\n\r\n  function log(\r\n    uint256 p0,\r\n    address p1,\r\n    uint256 p2\r\n  ) internal view {\r\n    _sendLogPayload(\r\n      abi.encodeWithSignature(\"log(uint,address,uint)\", p0, p1, p2)\r\n    );\r\n  }\r\n\r\n  function log(\r\n    uint256 p0,\r\n    address p1,\r\n    string memory p2\r\n  ) internal view {\r\n    _sendLogPayload(\r\n      abi.encodeWithSignature(\"log(uint,address,string)\", p0, p1, p2)\r\n    );\r\n  }\r\n\r\n  function log(\r\n    uint256 p0,\r\n    address p1,\r\n    bool p2\r\n  ) internal view {\r\n    _sendLogPayload(\r\n      abi.encodeWithSignature(\"log(uint,address,bool)\", p0, p1, p2)\r\n    );\r\n  }\r\n\r\n  function log(\r\n    uint256 p0,\r\n    address p1,\r\n    address p2\r\n  ) internal view {\r\n    _sendLogPayload(\r\n      abi.encodeWithSignature(\"log(uint,address,address)\", p0, p1, p2)\r\n    );\r\n  }\r\n\r\n  function log(\r\n    string memory p0,\r\n    uint256 p1,\r\n    uint256 p2\r\n  ) internal view {\r\n    _sendLogPayload(\r\n      abi.encodeWithSignature(\"log(string,uint,uint)\", p0, p1, p2)\r\n    );\r\n  }\r\n\r\n  function log(\r\n    string memory p0,\r\n    uint256 p1,\r\n    string memory p2\r\n  ) internal view {\r\n    _sendLogPayload(\r\n      abi.encodeWithSignature(\"log(string,uint,string)\", p0, p1, p2)\r\n    );\r\n  }\r\n\r\n  function log(\r\n    string memory p0,\r\n    uint256 p1,\r\n    bool p2\r\n  ) internal view {\r\n    _sendLogPayload(\r\n      abi.encodeWithSignature(\"log(string,uint,bool)\", p0, p1, p2)\r\n    );\r\n  }\r\n\r\n  function log(\r\n    string memory p0,\r\n    uint256 p1,\r\n    address p2\r\n  ) internal view {\r\n    _sendLogPayload(\r\n      abi.encodeWithSignature(\"log(string,uint,address)\", p0, p1, p2)\r\n    );\r\n  }\r\n\r\n  function log(\r\n    string memory p0,\r\n    string memory p1,\r\n    uint256 p2\r\n  ) internal view {\r\n    _sendLogPayload(\r\n      abi.encodeWithSignature(\"log(string,string,uint)\", p0, p1, p2)\r\n    );\r\n  }\r\n\r\n  function log(\r\n    string memory p0,\r\n    string memory p1,\r\n    string memory p2\r\n  ) internal view {\r\n    _sendLogPayload(\r\n      abi.encodeWithSignature(\"log(string,string,string)\", p0, p1, p2)\r\n    );\r\n  }\r\n\r\n  function log(\r\n    string memory p0,\r\n    string memory p1,\r\n    bool p2\r\n  ) internal view {\r\n    _sendLogPayload(\r\n      abi.encodeWithSignature(\"log(string,string,bool)\", p0, p1, p2)\r\n    );\r\n  }\r\n\r\n  function log(\r\n    string memory p0,\r\n    string memory p1,\r\n    address p2\r\n  ) internal view {\r\n    _sendLogPayload(\r\n      abi.encodeWithSignature(\"log(string,string,address)\", p0, p1, p2)\r\n    );\r\n  }\r\n\r\n  function log(\r\n    string memory p0,\r\n    bool p1,\r\n    uint256 p2\r\n  ) internal view {\r\n    _sendLogPayload(\r\n      abi.encodeWithSignature(\"log(string,bool,uint)\", p0, p1, p2)\r\n    );\r\n  }\r\n\r\n  function log(\r\n    string memory p0,\r\n    bool p1,\r\n    string memory p2\r\n  ) internal view {\r\n    _sendLogPayload(\r\n      abi.encodeWithSignature(\"log(string,bool,string)\", p0, p1, p2)\r\n    );\r\n  }\r\n\r\n  function log(\r\n    string memory p0,\r\n    bool p1,\r\n    bool p2\r\n  ) internal view {\r\n    _sendLogPayload(\r\n      abi.encodeWithSignature(\"log(string,bool,bool)\", p0, p1, p2)\r\n    );\r\n  }\r\n\r\n  function log(\r\n    string memory p0,\r\n    bool p1,\r\n    address p2\r\n  ) internal view {\r\n    _sendLogPayload(\r\n      abi.encodeWithSignature(\"log(string,bool,address)\", p0, p1, p2)\r\n    );\r\n  }\r\n\r\n  function log(\r\n    string memory p0,\r\n    address p1,\r\n    uint256 p2\r\n  ) internal view {\r\n    _sendLogPayload(\r\n      abi.encodeWithSignature(\"log(string,address,uint)\", p0, p1, p2)\r\n    );\r\n  }\r\n\r\n  function log(\r\n    string memory p0,\r\n    address p1,\r\n    string memory p2\r\n  ) internal view {\r\n    _sendLogPayload(\r\n      abi.encodeWithSignature(\"log(string,address,string)\", p0, p1, p2)\r\n    );\r\n  }\r\n\r\n  function log(\r\n    string memory p0,\r\n    address p1,\r\n    bool p2\r\n  ) internal view {\r\n    _sendLogPayload(\r\n      abi.encodeWithSignature(\"log(string,address,bool)\", p0, p1, p2)\r\n    );\r\n  }\r\n\r\n  function log(\r\n    string memory p0,\r\n    address p1,\r\n    address p2\r\n  ) internal view {\r\n    _sendLogPayload(\r\n      abi.encodeWithSignature(\"log(string,address,address)\", p0, p1, p2)\r\n    );\r\n  }\r\n\r\n  function log(\r\n    bool p0,\r\n    uint256 p1,\r\n    uint256 p2\r\n  ) internal view {\r\n    _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,uint)\", p0, p1, p2));\r\n  }\r\n\r\n  function log(\r\n    bool p0,\r\n    uint256 p1,\r\n    string memory p2\r\n  ) internal view {\r\n    _sendLogPayload(\r\n      abi.encodeWithSignature(\"log(bool,uint,string)\", p0, p1, p2)\r\n    );\r\n  }\r\n\r\n  function log(\r\n    bool p0,\r\n    uint256 p1,\r\n    bool p2\r\n  ) internal view {\r\n    _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,bool)\", p0, p1, p2));\r\n  }\r\n\r\n  function log(\r\n    bool p0,\r\n    uint256 p1,\r\n    address p2\r\n  ) internal view {\r\n    _sendLogPayload(\r\n      abi.encodeWithSignature(\"log(bool,uint,address)\", p0, p1, p2)\r\n    );\r\n  }\r\n\r\n  function log(\r\n    bool p0,\r\n    string memory p1,\r\n    uint256 p2\r\n  ) internal view {\r\n    _sendLogPayload(\r\n      abi.encodeWithSignature(\"log(bool,string,uint)\", p0, p1, p2)\r\n    );\r\n  }\r\n\r\n  function log(\r\n    bool p0,\r\n    string memory p1,\r\n    string memory p2\r\n  ) internal view {\r\n    _sendLogPayload(\r\n      abi.encodeWithSignature(\"log(bool,string,string)\", p0, p1, p2)\r\n    );\r\n  }\r\n\r\n  function log(\r\n    bool p0,\r\n    string memory p1,\r\n    bool p2\r\n  ) internal view {\r\n    _sendLogPayload(\r\n      abi.encodeWithSignature(\"log(bool,string,bool)\", p0, p1, p2)\r\n    );\r\n  }\r\n\r\n  function log(\r\n    bool p0,\r\n    string memory p1,\r\n    address p2\r\n  ) internal view {\r\n    _sendLogPayload(\r\n      abi.encodeWithSignature(\"log(bool,string,address)\", p0, p1, p2)\r\n    );\r\n  }\r\n\r\n  function log(\r\n    bool p0,\r\n    bool p1,\r\n    uint256 p2\r\n  ) internal view {\r\n    _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,uint)\", p0, p1, p2));\r\n  }\r\n\r\n  function log(\r\n    bool p0,\r\n    bool p1,\r\n    string memory p2\r\n  ) internal view {\r\n    _sendLogPayload(\r\n      abi.encodeWithSignature(\"log(bool,bool,string)\", p0, p1, p2)\r\n    );\r\n  }\r\n\r\n  function log(\r\n    bool p0,\r\n    bool p1,\r\n    bool p2\r\n  ) internal view {\r\n    _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,bool)\", p0, p1, p2));\r\n  }\r\n\r\n  function log(\r\n    bool p0,\r\n    bool p1,\r\n    address p2\r\n  ) internal view {\r\n    _sendLogPayload(\r\n      abi.encodeWithSignature(\"log(bool,bool,address)\", p0, p1, p2)\r\n    );\r\n  }\r\n\r\n  function log(\r\n    bool p0,\r\n    address p1,\r\n    uint256 p2\r\n  ) internal view {\r\n    _sendLogPayload(\r\n      abi.encodeWithSignature(\"log(bool,address,uint)\", p0, p1, p2)\r\n    );\r\n  }\r\n\r\n  function log(\r\n    bool p0,\r\n    address p1,\r\n    string memory p2\r\n  ) internal view {\r\n    _sendLogPayload(\r\n      abi.encodeWithSignature(\"log(bool,address,string)\", p0, p1, p2)\r\n    );\r\n  }\r\n\r\n  function log(\r\n    bool p0,\r\n    address p1,\r\n    bool p2\r\n  ) internal view {\r\n    _sendLogPayload(\r\n      abi.encodeWithSignature(\"log(bool,address,bool)\", p0, p1, p2)\r\n    );\r\n  }\r\n\r\n  function log(\r\n    bool p0,\r\n    address p1,\r\n    address p2\r\n  ) internal view {\r\n    _sendLogPayload(\r\n      abi.encodeWithSignature(\"log(bool,address,address)\", p0, p1, p2)\r\n    );\r\n  }\r\n\r\n  function log(\r\n    address p0,\r\n    uint256 p1,\r\n    uint256 p2\r\n  ) internal view {\r\n    _sendLogPayload(\r\n      abi.encodeWithSignature(\"log(address,uint,uint)\", p0, p1, p2)\r\n    );\r\n  }\r\n\r\n  function log(\r\n    address p0,\r\n    uint256 p1,\r\n    string memory p2\r\n  ) internal view {\r\n    _sendLogPayload(\r\n      abi.encodeWithSignature(\"log(address,uint,string)\", p0, p1, p2)\r\n    );\r\n  }\r\n\r\n  function log(\r\n    address p0,\r\n    uint256 p1,\r\n    bool p2\r\n  ) internal view {\r\n    _sendLogPayload(\r\n      abi.encodeWithSignature(\"log(address,uint,bool)\", p0, p1, p2)\r\n    );\r\n  }\r\n\r\n  function log(\r\n    address p0,\r\n    uint256 p1,\r\n    address p2\r\n  ) internal view {\r\n    _sendLogPayload(\r\n      abi.encodeWithSignature(\"log(address,uint,address)\", p0, p1, p2)\r\n    );\r\n  }\r\n\r\n  function log(\r\n    address p0,\r\n    string memory p1,\r\n    uint256 p2\r\n  ) internal view {\r\n    _sendLogPayload(\r\n      abi.encodeWithSignature(\"log(address,string,uint)\", p0, p1, p2)\r\n    );\r\n  }\r\n\r\n  function log(\r\n    address p0,\r\n    string memory p1,\r\n    string memory p2\r\n  ) internal view {\r\n    _sendLogPayload(\r\n      abi.encodeWithSignature(\"log(address,string,string)\", p0, p1, p2)\r\n    );\r\n  }\r\n\r\n  function log(\r\n    address p0,\r\n    string memory p1,\r\n    bool p2\r\n  ) internal view {\r\n    _sendLogPayload(\r\n      abi.encodeWithSignature(\"log(address,string,bool)\", p0, p1, p2)\r\n    );\r\n  }\r\n\r\n  function log(\r\n    address p0,\r\n    string memory p1,\r\n    address p2\r\n  ) internal view {\r\n    _sendLogPayload(\r\n      abi.encodeWithSignature(\"log(address,string,address)\", p0, p1, p2)\r\n    );\r\n  }\r\n\r\n  function log(\r\n    address p0,\r\n    bool p1,\r\n    uint256 p2\r\n  ) internal view {\r\n    _sendLogPayload(\r\n      abi.encodeWithSignature(\"log(address,bool,uint)\", p0, p1, p2)\r\n    );\r\n  }\r\n\r\n  function log(\r\n    address p0,\r\n    bool p1,\r\n    string memory p2\r\n  ) internal view {\r\n    _sendLogPayload(\r\n      abi.encodeWithSignature(\"log(address,bool,string)\", p0, p1, p2)\r\n    );\r\n  }\r\n\r\n  function log(\r\n    address p0,\r\n    bool p1,\r\n    bool p2\r\n  ) internal view {\r\n    _sendLogPayload(\r\n      abi.encodeWithSignature(\"log(address,bool,bool)\", p0, p1, p2)\r\n    );\r\n  }\r\n\r\n  function log(\r\n    address p0,\r\n    bool p1,\r\n    address p2\r\n  ) internal view {\r\n    _sendLogPayload(\r\n      abi.encodeWithSignature(\"log(address,bool,address)\", p0, p1, p2)\r\n    );\r\n  }\r\n\r\n  function log(\r\n    address p0,\r\n    address p1,\r\n    uint256 p2\r\n  ) internal view {\r\n    _sendLogPayload(\r\n      abi.encodeWithSignature(\"log(address,address,uint)\", p0, p1, p2)\r\n    );\r\n  }\r\n\r\n  function log(\r\n    address p0,\r\n    address p1,\r\n    string memory p2\r\n  ) internal view {\r\n    _sendLogPayload(\r\n      abi.encodeWithSignature(\"log(address,address,string)\", p0, p1, p2)\r\n    );\r\n  }\r\n\r\n  function log(\r\n    address p0,\r\n    address p1,\r\n    bool p2\r\n  ) internal view {\r\n    _sendLogPayload(\r\n      abi.encodeWithSignature(\"log(address,address,bool)\", p0, p1, p2)\r\n    );\r\n  }\r\n\r\n  function log(\r\n    address p0,\r\n    address p1,\r\n    address p2\r\n  ) internal view {\r\n    _sendLogPayload(\r\n      abi.encodeWithSignature(\"log(address,address,address)\", p0, p1, p2)\r\n    );\r\n  }\r\n\r\n  function log(\r\n    uint256 p0,\r\n    uint256 p1,\r\n    uint256 p2,\r\n    uint256 p3\r\n  ) internal view {\r\n    _sendLogPayload(\r\n      abi.encodeWithSignature(\"log(uint,uint,uint,uint)\", p0, p1, p2, p3)\r\n    );\r\n  }\r\n\r\n  function log(\r\n    uint256 p0,\r\n    uint256 p1,\r\n    uint256 p2,\r\n    string memory p3\r\n  ) internal view {\r\n    _sendLogPayload(\r\n      abi.encodeWithSignature(\"log(uint,uint,uint,string)\", p0, p1, p2, p3)\r\n    );\r\n  }\r\n\r\n  function log(\r\n    uint256 p0,\r\n    uint256 p1,\r\n    uint256 p2,\r\n    bool p3\r\n  ) internal view {\r\n    _sendLogPayload(\r\n      abi.encodeWithSignature(\"log(uint,uint,uint,bool)\", p0, p1, p2, p3)\r\n    );\r\n  }\r\n\r\n  function log(\r\n    uint256 p0,\r\n    uint256 p1,\r\n    uint256 p2,\r\n    address p3\r\n  ) internal view {\r\n    _sendLogPayload(\r\n      abi.encodeWithSignature(\"log(uint,uint,uint,address)\", p0, p1, p2, p3)\r\n    );\r\n  }\r\n\r\n  function log(\r\n    uint256 p0,\r\n    uint256 p1,\r\n    string memory p2,\r\n    uint256 p3\r\n  ) internal view {\r\n    _sendLogPayload(\r\n      abi.encodeWithSignature(\"log(uint,uint,string,uint)\", p0, p1, p2, p3)\r\n    );\r\n  }\r\n\r\n  function log(\r\n    uint256 p0,\r\n    uint256 p1,\r\n    string memory p2,\r\n    string memory p3\r\n  ) internal view {\r\n    _sendLogPayload(\r\n      abi.encodeWithSignature(\"log(uint,uint,string,string)\", p0, p1, p2, p3)\r\n    );\r\n  }\r\n\r\n  function log(\r\n    uint256 p0,\r\n    uint256 p1,\r\n    string memory p2,\r\n    bool p3\r\n  ) internal view {\r\n    _sendLogPayload(\r\n      abi.encodeWithSignature(\"log(uint,uint,string,bool)\", p0, p1, p2, p3)\r\n    );\r\n  }\r\n\r\n  function log(\r\n    uint256 p0,\r\n    uint256 p1,\r\n    string memory p2,\r\n    address p3\r\n  ) internal view {\r\n    _sendLogPayload(\r\n      abi.encodeWithSignature(\"log(uint,uint,string,address)\", p0, p1, p2, p3)\r\n    );\r\n  }\r\n\r\n  function log(\r\n    uint256 p0,\r\n    uint256 p1,\r\n    bool p2,\r\n    uint256 p3\r\n  ) internal view {\r\n    _sendLogPayload(\r\n      abi.encodeWithSignature(\"log(uint,uint,bool,uint)\", p0, p1, p2, p3)\r\n    );\r\n  }\r\n\r\n  function log(\r\n    uint256 p0,\r\n    uint256 p1,\r\n    bool p2,\r\n    string memory p3\r\n  ) internal view {\r\n    _sendLogPayload(\r\n      abi.encodeWithSignature(\"log(uint,uint,bool,string)\", p0, p1, p2, p3)\r\n    );\r\n  }\r\n\r\n  function log(\r\n    uint256 p0,\r\n    uint256 p1,\r\n    bool p2,\r\n    bool p3\r\n  ) internal view {\r\n    _sendLogPayload(\r\n      abi.encodeWithSignature(\"log(uint,uint,bool,bool)\", p0, p1, p2, p3)\r\n    );\r\n  }\r\n\r\n  function log(\r\n    uint256 p0,\r\n    uint256 p1,\r\n    bool p2,\r\n    address p3\r\n  ) internal view {\r\n    _sendLogPayload(\r\n      abi.encodeWithSignature(\"log(uint,uint,bool,address)\", p0, p1, p2, p3)\r\n    );\r\n  }\r\n\r\n  function log(\r\n    uint256 p0,\r\n    uint256 p1,\r\n    address p2,\r\n    uint256 p3\r\n  ) internal view {\r\n    _sendLogPayload(\r\n      abi.encodeWithSignature(\"log(uint,uint,address,uint)\", p0, p1, p2, p3)\r\n    );\r\n  }\r\n\r\n  function log(\r\n    uint256 p0,\r\n    uint256 p1,\r\n    address p2,\r\n    string memory p3\r\n  ) internal view {\r\n    _sendLogPayload(\r\n      abi.encodeWithSignature(\"log(uint,uint,address,string)\", p0, p1, p2, p3)\r\n    );\r\n  }\r\n\r\n  function log(\r\n    uint256 p0,\r\n    uint256 p1,\r\n    address p2,\r\n    bool p3\r\n  ) internal view {\r\n    _sendLogPayload(\r\n      abi.encodeWithSignature(\"log(uint,uint,address,bool)\", p0, p1, p2, p3)\r\n    );\r\n  }\r\n\r\n  function log(\r\n    uint256 p0,\r\n    uint256 p1,\r\n    address p2,\r\n    address p3\r\n  ) internal view {\r\n    _sendLogPayload(\r\n      abi.encodeWithSignature(\"log(uint,uint,address,address)\", p0, p1, p2, p3)\r\n    );\r\n  }\r\n\r\n  function log(\r\n    uint256 p0,\r\n    string memory p1,\r\n    uint256 p2,\r\n    uint256 p3\r\n  ) internal view {\r\n    _sendLogPayload(\r\n      abi.encodeWithSignature(\"log(uint,string,uint,uint)\", p0, p1, p2, p3)\r\n    );\r\n  }\r\n\r\n  function log(\r\n    uint256 p0,\r\n    string memory p1,\r\n    uint256 p2,\r\n    string memory p3\r\n  ) internal view {\r\n    _sendLogPayload(\r\n      abi.encodeWithSignature(\"log(uint,string,uint,string)\", p0, p1, p2, p3)\r\n    );\r\n  }\r\n\r\n  function log(\r\n    uint256 p0,\r\n    string memory p1,\r\n    uint256 p2,\r\n    bool p3\r\n  ) internal view {\r\n    _sendLogPayload(\r\n      abi.encodeWithSignature(\"log(uint,string,uint,bool)\", p0, p1, p2, p3)\r\n    );\r\n  }\r\n\r\n  function log(\r\n    uint256 p0,\r\n    string memory p1,\r\n    uint256 p2,\r\n    address p3\r\n  ) internal view {\r\n    _sendLogPayload(\r\n      abi.encodeWithSignature(\"log(uint,string,uint,address)\", p0, p1, p2, p3)\r\n    );\r\n  }\r\n\r\n  function log(\r\n    uint256 p0,\r\n    string memory p1,\r\n    string memory p2,\r\n    uint256 p3\r\n  ) internal view {\r\n    _sendLogPayload(\r\n      abi.encodeWithSignature(\"log(uint,string,string,uint)\", p0, p1, p2, p3)\r\n    );\r\n  }\r\n\r\n  function log(\r\n    uint256 p0,\r\n    string memory p1,\r\n    string memory p2,\r\n    string memory p3\r\n  ) internal view {\r\n    _sendLogPayload(\r\n      abi.encodeWithSignature(\"log(uint,string,string,string)\", p0, p1, p2, p3)\r\n    );\r\n  }\r\n\r\n  function log(\r\n    uint256 p0,\r\n    string memory p1,\r\n    string memory p2,\r\n    bool p3\r\n  ) internal view {\r\n    _sendLogPayload(\r\n      abi.encodeWithSignature(\"log(uint,string,string,bool)\", p0, p1, p2, p3)\r\n    );\r\n  }\r\n\r\n  function log(\r\n    uint256 p0,\r\n    string memory p1,\r\n    string memory p2,\r\n    address p3\r\n  ) internal view {\r\n    _sendLogPayload(\r\n      abi.encodeWithSignature(\"log(uint,string,string,address)\", p0, p1, p2, p3)\r\n    );\r\n  }\r\n\r\n  function log(\r\n    uint256 p0,\r\n    string memory p1,\r\n    bool p2,\r\n    uint256 p3\r\n  ) internal view {\r\n    _sendLogPayload(\r\n      abi.encodeWithSignature(\"log(uint,string,bool,uint)\", p0, p1, p2, p3)\r\n    );\r\n  }\r\n\r\n  function log(\r\n    uint256 p0,\r\n    string memory p1,\r\n    bool p2,\r\n    string memory p3\r\n  ) internal view {\r\n    _sendLogPayload(\r\n      abi.encodeWithSignature(\"log(uint,string,bool,string)\", p0, p1, p2, p3)\r\n    );\r\n  }\r\n\r\n  function log(\r\n    uint256 p0,\r\n    string memory p1,\r\n    bool p2,\r\n    bool p3\r\n  ) internal view {\r\n    _sendLogPayload(\r\n      abi.encodeWithSignature(\"log(uint,string,bool,bool)\", p0, p1, p2, p3)\r\n    );\r\n  }\r\n\r\n  function log(\r\n    uint256 p0,\r\n    string memory p1,\r\n    bool p2,\r\n    address p3\r\n  ) internal view {\r\n    _sendLogPayload(\r\n      abi.encodeWithSignature(\"log(uint,string,bool,address)\", p0, p1, p2, p3)\r\n    );\r\n  }\r\n\r\n  function log(\r\n    uint256 p0,\r\n    string memory p1,\r\n    address p2,\r\n    uint256 p3\r\n  ) internal view {\r\n    _sendLogPayload(\r\n      abi.encodeWithSignature(\"log(uint,string,address,uint)\", p0, p1, p2, p3)\r\n    );\r\n  }\r\n\r\n  function log(\r\n    uint256 p0,\r\n    string memory p1,\r\n    address p2,\r\n    string memory p3\r\n  ) internal view {\r\n    _sendLogPayload(\r\n      abi.encodeWithSignature(\"log(uint,string,address,string)\", p0, p1, p2, p3)\r\n    );\r\n  }\r\n\r\n  function log(\r\n    uint256 p0,\r\n    string memory p1,\r\n    address p2,\r\n    bool p3\r\n  ) internal view {\r\n    _sendLogPayload(\r\n      abi.encodeWithSignature(\"log(uint,string,address,bool)\", p0, p1, p2, p3)\r\n    );\r\n  }\r\n\r\n  function log(\r\n    uint256 p0,\r\n    string memory p1,\r\n    address p2,\r\n    address p3\r\n  ) internal view {\r\n    _sendLogPayload(\r\n      abi.encodeWithSignature(\r\n        \"log(uint,string,address,address)\",\r\n        p0,\r\n        p1,\r\n        p2,\r\n        p3\r\n      )\r\n    );\r\n  }\r\n\r\n  function log(\r\n    uint256 p0,\r\n    bool p1,\r\n    uint256 p2,\r\n    uint256 p3\r\n  ) internal view {\r\n    _sendLogPayload(\r\n      abi.encodeWithSignature(\"log(uint,bool,uint,uint)\", p0, p1, p2, p3)\r\n    );\r\n  }\r\n\r\n  function log(\r\n    uint256 p0,\r\n    bool p1,\r\n    uint256 p2,\r\n    string memory p3\r\n  ) internal view {\r\n    _sendLogPayload(\r\n      abi.encodeWithSignature(\"log(uint,bool,uint,string)\", p0, p1, p2, p3)\r\n    );\r\n  }\r\n\r\n  function log(\r\n    uint256 p0,\r\n    bool p1,\r\n    uint256 p2,\r\n    bool p3\r\n  ) internal view {\r\n    _sendLogPayload(\r\n      abi.encodeWithSignature(\"log(uint,bool,uint,bool)\", p0, p1, p2, p3)\r\n    );\r\n  }\r\n\r\n  function log(\r\n    uint256 p0,\r\n    bool p1,\r\n    uint256 p2,\r\n    address p3\r\n  ) internal view {\r\n    _sendLogPayload(\r\n      abi.encodeWithSignature(\"log(uint,bool,uint,address)\", p0, p1, p2, p3)\r\n    );\r\n  }\r\n\r\n  function log(\r\n    uint256 p0,\r\n    bool p1,\r\n    string memory p2,\r\n    uint256 p3\r\n  ) internal view {\r\n    _sendLogPayload(\r\n      abi.encodeWithSignature(\"log(uint,bool,string,uint)\", p0, p1, p2, p3)\r\n    );\r\n  }\r\n\r\n  function log(\r\n    uint256 p0,\r\n    bool p1,\r\n    string memory p2,\r\n    string memory p3\r\n  ) internal view {\r\n    _sendLogPayload(\r\n      abi.encodeWithSignature(\"log(uint,bool,string,string)\", p0, p1, p2, p3)\r\n    );\r\n  }\r\n\r\n  function log(\r\n    uint256 p0,\r\n    bool p1,\r\n    string memory p2,\r\n    bool p3\r\n  ) internal view {\r\n    _sendLogPayload(\r\n      abi.encodeWithSignature(\"log(uint,bool,string,bool)\", p0, p1, p2, p3)\r\n    );\r\n  }\r\n\r\n  function log(\r\n    uint256 p0,\r\n    bool p1,\r\n    string memory p2,\r\n    address p3\r\n  ) internal view {\r\n    _sendLogPayload(\r\n      abi.encodeWithSignature(\"log(uint,bool,string,address)\", p0, p1, p2, p3)\r\n    );\r\n  }\r\n\r\n  function log(\r\n    uint256 p0,\r\n    bool p1,\r\n    bool p2,\r\n    uint256 p3\r\n  ) internal view {\r\n    _sendLogPayload(\r\n      abi.encodeWithSignature(\"log(uint,bool,bool,uint)\", p0, p1, p2, p3)\r\n    );\r\n  }\r\n\r\n  function log(\r\n    uint256 p0,\r\n    bool p1,\r\n    bool p2,\r\n    string memory p3\r\n  ) internal view {\r\n    _sendLogPayload(\r\n      abi.encodeWithSignature(\"log(uint,bool,bool,string)\", p0, p1, p2, p3)\r\n    );\r\n  }\r\n\r\n  function log(\r\n    uint256 p0,\r\n    bool p1,\r\n    bool p2,\r\n    bool p3\r\n  ) internal view {\r\n    _sendLogPayload(\r\n      abi.encodeWithSignature(\"log(uint,bool,bool,bool)\", p0, p1, p2, p3)\r\n    );\r\n  }\r\n\r\n  function log(\r\n    uint256 p0,\r\n    bool p1,\r\n    bool p2,\r\n    address p3\r\n  ) internal view {\r\n    _sendLogPayload(\r\n      abi.encodeWithSignature(\"log(uint,bool,bool,address)\", p0, p1, p2, p3)\r\n    );\r\n  }\r\n\r\n  function log(\r\n    uint256 p0,\r\n    bool p1,\r\n    address p2,\r\n    uint256 p3\r\n  ) internal view {\r\n    _sendLogPayload(\r\n      abi.encodeWithSignature(\"log(uint,bool,address,uint)\", p0, p1, p2, p3)\r\n    );\r\n  }\r\n\r\n  function log(\r\n    uint256 p0,\r\n    bool p1,\r\n    address p2,\r\n    string memory p3\r\n  ) internal view {\r\n    _sendLogPayload(\r\n      abi.encodeWithSignature(\"log(uint,bool,address,string)\", p0, p1, p2, p3)\r\n    );\r\n  }\r\n\r\n  function log(\r\n    uint256 p0,\r\n    bool p1,\r\n    address p2,\r\n    bool p3\r\n  ) internal view {\r\n    _sendLogPayload(\r\n      abi.encodeWithSignature(\"log(uint,bool,address,bool)\", p0, p1, p2, p3)\r\n    );\r\n  }\r\n\r\n  function log(\r\n    uint256 p0,\r\n    bool p1,\r\n    address p2,\r\n    address p3\r\n  ) internal view {\r\n    _sendLogPayload(\r\n      abi.encodeWithSignature(\"log(uint,bool,address,address)\", p0, p1, p2, p3)\r\n    );\r\n  }\r\n\r\n  function log(\r\n    uint256 p0,\r\n    address p1,\r\n    uint256 p2,\r\n    uint256 p3\r\n  ) internal view {\r\n    _sendLogPayload(\r\n      abi.encodeWithSignature(\"log(uint,address,uint,uint)\", p0, p1, p2, p3)\r\n    );\r\n  }\r\n\r\n  function log(\r\n    uint256 p0,\r\n    address p1,\r\n    uint256 p2,\r\n    string memory p3\r\n  ) internal view {\r\n    _sendLogPayload(\r\n      abi.encodeWithSignature(\"log(uint,address,uint,string)\", p0, p1, p2, p3)\r\n    );\r\n  }\r\n\r\n  function log(\r\n    uint256 p0,\r\n    address p1,\r\n    uint256 p2,\r\n    bool p3\r\n  ) internal view {\r\n    _sendLogPayload(\r\n      abi.encodeWithSignature(\"log(uint,address,uint,bool)\", p0, p1, p2, p3)\r\n    );\r\n  }\r\n\r\n  function log(\r\n    uint256 p0,\r\n    address p1,\r\n    uint256 p2,\r\n    address p3\r\n  ) internal view {\r\n    _sendLogPayload(\r\n      abi.encodeWithSignature(\"log(uint,address,uint,address)\", p0, p1, p2, p3)\r\n    );\r\n  }\r\n\r\n  function log(\r\n    uint256 p0,\r\n    address p1,\r\n    string memory p2,\r\n    uint256 p3\r\n  ) internal view {\r\n    _sendLogPayload(\r\n      abi.encodeWithSignature(\"log(uint,address,string,uint)\", p0, p1, p2, p3)\r\n    );\r\n  }\r\n\r\n  function log(\r\n    uint256 p0,\r\n    address p1,\r\n    string memory p2,\r\n    string memory p3\r\n  ) internal view {\r\n    _sendLogPayload(\r\n      abi.encodeWithSignature(\"log(uint,address,string,string)\", p0, p1, p2, p3)\r\n    );\r\n  }\r\n\r\n  function log(\r\n    uint256 p0,\r\n    address p1,\r\n    string memory p2,\r\n    bool p3\r\n  ) internal view {\r\n    _sendLogPayload(\r\n      abi.encodeWithSignature(\"log(uint,address,string,bool)\", p0, p1, p2, p3)\r\n    );\r\n  }\r\n\r\n  function log(\r\n    uint256 p0,\r\n    address p1,\r\n    string memory p2,\r\n    address p3\r\n  ) internal view {\r\n    _sendLogPayload(\r\n      abi.encodeWithSignature(\r\n        \"log(uint,address,string,address)\",\r\n        p0,\r\n        p1,\r\n        p2,\r\n        p3\r\n      )\r\n    );\r\n  }\r\n\r\n  function log(\r\n    uint256 p0,\r\n    address p1,\r\n    bool p2,\r\n    uint256 p3\r\n  ) internal view {\r\n    _sendLogPayload(\r\n      abi.encodeWithSignature(\"log(uint,address,bool,uint)\", p0, p1, p2, p3)\r\n    );\r\n  }\r\n\r\n  function log(\r\n    uint256 p0,\r\n    address p1,\r\n    bool p2,\r\n    string memory p3\r\n  ) internal view {\r\n    _sendLogPayload(\r\n      abi.encodeWithSignature(\"log(uint,address,bool,string)\", p0, p1, p2, p3)\r\n    );\r\n  }\r\n\r\n  function log(\r\n    uint256 p0,\r\n    address p1,\r\n    bool p2,\r\n    bool p3\r\n  ) internal view {\r\n    _sendLogPayload(\r\n      abi.encodeWithSignature(\"log(uint,address,bool,bool)\", p0, p1, p2, p3)\r\n    );\r\n  }\r\n\r\n  function log(\r\n    uint256 p0,\r\n    address p1,\r\n    bool p2,\r\n    address p3\r\n  ) internal view {\r\n    _sendLogPayload(\r\n      abi.encodeWithSignature(\"log(uint,address,bool,address)\", p0, p1, p2, p3)\r\n    );\r\n  }\r\n\r\n  function log(\r\n    uint256 p0,\r\n    address p1,\r\n    address p2,\r\n    uint256 p3\r\n  ) internal view {\r\n    _sendLogPayload(\r\n      abi.encodeWithSignature(\"log(uint,address,address,uint)\", p0, p1, p2, p3)\r\n    );\r\n  }\r\n\r\n  function log(\r\n    uint256 p0,\r\n    address p1,\r\n    address p2,\r\n    string memory p3\r\n  ) internal view {\r\n    _sendLogPayload(\r\n      abi.encodeWithSignature(\r\n        \"log(uint,address,address,string)\",\r\n        p0,\r\n        p1,\r\n        p2,\r\n        p3\r\n      )\r\n    );\r\n  }\r\n\r\n  function log(\r\n    uint256 p0,\r\n    address p1,\r\n    address p2,\r\n    bool p3\r\n  ) internal view {\r\n    _sendLogPayload(\r\n      abi.encodeWithSignature(\"log(uint,address,address,bool)\", p0, p1, p2, p3)\r\n    );\r\n  }\r\n\r\n  function log(\r\n    uint256 p0,\r\n    address p1,\r\n    address p2,\r\n    address p3\r\n  ) internal view {\r\n    _sendLogPayload(\r\n      abi.encodeWithSignature(\r\n        \"log(uint,address,address,address)\",\r\n        p0,\r\n        p1,\r\n        p2,\r\n        p3\r\n      )\r\n    );\r\n  }\r\n\r\n  function log(\r\n    string memory p0,\r\n    uint256 p1,\r\n    uint256 p2,\r\n    uint256 p3\r\n  ) internal view {\r\n    _sendLogPayload(\r\n      abi.encodeWithSignature(\"log(string,uint,uint,uint)\", p0, p1, p2, p3)\r\n    );\r\n  }\r\n\r\n  function log(\r\n    string memory p0,\r\n    uint256 p1,\r\n    uint256 p2,\r\n    string memory p3\r\n  ) internal view {\r\n    _sendLogPayload(\r\n      abi.encodeWithSignature(\"log(string,uint,uint,string)\", p0, p1, p2, p3)\r\n    );\r\n  }\r\n\r\n  function log(\r\n    string memory p0,\r\n    uint256 p1,\r\n    uint256 p2,\r\n    bool p3\r\n  ) internal view {\r\n    _sendLogPayload(\r\n      abi.encodeWithSignature(\"log(string,uint,uint,bool)\", p0, p1, p2, p3)\r\n    );\r\n  }\r\n\r\n  function log(\r\n    string memory p0,\r\n    uint256 p1,\r\n    uint256 p2,\r\n    address p3\r\n  ) internal view {\r\n    _sendLogPayload(\r\n      abi.encodeWithSignature(\"log(string,uint,uint,address)\", p0, p1, p2, p3)\r\n    );\r\n  }\r\n\r\n  function log(\r\n    string memory p0,\r\n    uint256 p1,\r\n    string memory p2,\r\n    uint256 p3\r\n  ) internal view {\r\n    _sendLogPayload(\r\n      abi.encodeWithSignature(\"log(string,uint,string,uint)\", p0, p1, p2, p3)\r\n    );\r\n  }\r\n\r\n  function log(\r\n    string memory p0,\r\n    uint256 p1,\r\n    string memory p2,\r\n    string memory p3\r\n  ) internal view {\r\n    _sendLogPayload(\r\n      abi.encodeWithSignature(\"log(string,uint,string,string)\", p0, p1, p2, p3)\r\n    );\r\n  }\r\n\r\n  function log(\r\n    string memory p0,\r\n    uint256 p1,\r\n    string memory p2,\r\n    bool p3\r\n  ) internal view {\r\n    _sendLogPayload(\r\n      abi.encodeWithSignature(\"log(string,uint,string,bool)\", p0, p1, p2, p3)\r\n    );\r\n  }\r\n\r\n  function log(\r\n    string memory p0,\r\n    uint256 p1,\r\n    string memory p2,\r\n    address p3\r\n  ) internal view {\r\n    _sendLogPayload(\r\n      abi.encodeWithSignature(\"log(string,uint,string,address)\", p0, p1, p2, p3)\r\n    );\r\n  }\r\n\r\n  function log(\r\n    string memory p0,\r\n    uint256 p1,\r\n    bool p2,\r\n    uint256 p3\r\n  ) internal view {\r\n    _sendLogPayload(\r\n      abi.encodeWithSignature(\"log(string,uint,bool,uint)\", p0, p1, p2, p3)\r\n    );\r\n  }\r\n\r\n  function log(\r\n    string memory p0,\r\n    uint256 p1,\r\n    bool p2,\r\n    string memory p3\r\n  ) internal view {\r\n    _sendLogPayload(\r\n      abi.encodeWithSignature(\"log(string,uint,bool,string)\", p0, p1, p2, p3)\r\n    );\r\n  }\r\n\r\n  function log(\r\n    string memory p0,\r\n    uint256 p1,\r\n    bool p2,\r\n    bool p3\r\n  ) internal view {\r\n    _sendLogPayload(\r\n      abi.encodeWithSignature(\"log(string,uint,bool,bool)\", p0, p1, p2, p3)\r\n    );\r\n  }\r\n\r\n  function log(\r\n    string memory p0,\r\n    uint256 p1,\r\n    bool p2,\r\n    address p3\r\n  ) internal view {\r\n    _sendLogPayload(\r\n      abi.encodeWithSignature(\"log(string,uint,bool,address)\", p0, p1, p2, p3)\r\n    );\r\n  }\r\n\r\n  function log(\r\n    string memory p0,\r\n    uint256 p1,\r\n    address p2,\r\n    uint256 p3\r\n  ) internal view {\r\n    _sendLogPayload(\r\n      abi.encodeWithSignature(\"log(string,uint,address,uint)\", p0, p1, p2, p3)\r\n    );\r\n  }\r\n\r\n  function log(\r\n    string memory p0,\r\n    uint256 p1,\r\n    address p2,\r\n    string memory p3\r\n  ) internal view {\r\n    _sendLogPayload(\r\n      abi.encodeWithSignature(\"log(string,uint,address,string)\", p0, p1, p2, p3)\r\n    );\r\n  }\r\n\r\n  function log(\r\n    string memory p0,\r\n    uint256 p1,\r\n    address p2,\r\n    bool p3\r\n  ) internal view {\r\n    _sendLogPayload(\r\n      abi.encodeWithSignature(\"log(string,uint,address,bool)\", p0, p1, p2, p3)\r\n    );\r\n  }\r\n\r\n  function log(\r\n    string memory p0,\r\n    uint256 p1,\r\n    address p2,\r\n    address p3\r\n  ) internal view {\r\n    _sendLogPayload(\r\n      abi.encodeWithSignature(\r\n        \"log(string,uint,address,address)\",\r\n        p0,\r\n        p1,\r\n        p2,\r\n        p3\r\n      )\r\n    );\r\n  }\r\n\r\n  function log(\r\n    string memory p0,\r\n    string memory p1,\r\n    uint256 p2,\r\n    uint256 p3\r\n  ) internal view {\r\n    _sendLogPayload(\r\n      abi.encodeWithSignature(\"log(string,string,uint,uint)\", p0, p1, p2, p3)\r\n    );\r\n  }\r\n\r\n  function log(\r\n    string memory p0,\r\n    string memory p1,\r\n    uint256 p2,\r\n    string memory p3\r\n  ) internal view {\r\n    _sendLogPayload(\r\n      abi.encodeWithSignature(\"log(string,string,uint,string)\", p0, p1, p2, p3)\r\n    );\r\n  }\r\n\r\n  function log(\r\n    string memory p0,\r\n    string memory p1,\r\n    uint256 p2,\r\n    bool p3\r\n  ) internal view {\r\n    _sendLogPayload(\r\n      abi.encodeWithSignature(\"log(string,string,uint,bool)\", p0, p1, p2, p3)\r\n    );\r\n  }\r\n\r\n  function log(\r\n    string memory p0,\r\n    string memory p1,\r\n    uint256 p2,\r\n    address p3\r\n  ) internal view {\r\n    _sendLogPayload(\r\n      abi.encodeWithSignature(\"log(string,string,uint,address)\", p0, p1, p2, p3)\r\n    );\r\n  }\r\n\r\n  function log(\r\n    string memory p0,\r\n    string memory p1,\r\n    string memory p2,\r\n    uint256 p3\r\n  ) internal view {\r\n    _sendLogPayload(\r\n      abi.encodeWithSignature(\"log(string,string,string,uint)\", p0, p1, p2, p3)\r\n    );\r\n  }\r\n\r\n  function log(\r\n    string memory p0,\r\n    string memory p1,\r\n    string memory p2,\r\n    string memory p3\r\n  ) internal view {\r\n    _sendLogPayload(\r\n      abi.encodeWithSignature(\r\n        \"log(string,string,string,string)\",\r\n        p0,\r\n        p1,\r\n        p2,\r\n        p3\r\n      )\r\n    );\r\n  }\r\n\r\n  function log(\r\n    string memory p0,\r\n    string memory p1,\r\n    string memory p2,\r\n    bool p3\r\n  ) internal view {\r\n    _sendLogPayload(\r\n      abi.encodeWithSignature(\"log(string,string,string,bool)\", p0, p1, p2, p3)\r\n    );\r\n  }\r\n\r\n  function log(\r\n    string memory p0,\r\n    string memory p1,\r\n    string memory p2,\r\n    address p3\r\n  ) internal view {\r\n    _sendLogPayload(\r\n      abi.encodeWithSignature(\r\n        \"log(string,string,string,address)\",\r\n        p0,\r\n        p1,\r\n        p2,\r\n        p3\r\n      )\r\n    );\r\n  }\r\n\r\n  function log(\r\n    string memory p0,\r\n    string memory p1,\r\n    bool p2,\r\n    uint256 p3\r\n  ) internal view {\r\n    _sendLogPayload(\r\n      abi.encodeWithSignature(\"log(string,string,bool,uint)\", p0, p1, p2, p3)\r\n    );\r\n  }\r\n\r\n  function log(\r\n    string memory p0,\r\n    string memory p1,\r\n    bool p2,\r\n    string memory p3\r\n  ) internal view {\r\n    _sendLogPayload(\r\n      abi.encodeWithSignature(\"log(string,string,bool,string)\", p0, p1, p2, p3)\r\n    );\r\n  }\r\n\r\n  function log(\r\n    string memory p0,\r\n    string memory p1,\r\n    bool p2,\r\n    bool p3\r\n  ) internal view {\r\n    _sendLogPayload(\r\n      abi.encodeWithSignature(\"log(string,string,bool,bool)\", p0, p1, p2, p3)\r\n    );\r\n  }\r\n\r\n  function log(\r\n    string memory p0,\r\n    string memory p1,\r\n    bool p2,\r\n    address p3\r\n  ) internal view {\r\n    _sendLogPayload(\r\n      abi.encodeWithSignature(\"log(string,string,bool,address)\", p0, p1, p2, p3)\r\n    );\r\n  }\r\n\r\n  function log(\r\n    string memory p0,\r\n    string memory p1,\r\n    address p2,\r\n    uint256 p3\r\n  ) internal view {\r\n    _sendLogPayload(\r\n      abi.encodeWithSignature(\"log(string,string,address,uint)\", p0, p1, p2, p3)\r\n    );\r\n  }\r\n\r\n  function log(\r\n    string memory p0,\r\n    string memory p1,\r\n    address p2,\r\n    string memory p3\r\n  ) internal view {\r\n    _sendLogPayload(\r\n      abi.encodeWithSignature(\r\n        \"log(string,string,address,string)\",\r\n        p0,\r\n        p1,\r\n        p2,\r\n        p3\r\n      )\r\n    );\r\n  }\r\n\r\n  function log(\r\n    string memory p0,\r\n    string memory p1,\r\n    address p2,\r\n    bool p3\r\n  ) internal view {\r\n    _sendLogPayload(\r\n      abi.encodeWithSignature(\"log(string,string,address,bool)\", p0, p1, p2, p3)\r\n    );\r\n  }\r\n\r\n  function log(\r\n    string memory p0,\r\n    string memory p1,\r\n    address p2,\r\n    address p3\r\n  ) internal view {\r\n    _sendLogPayload(\r\n      abi.encodeWithSignature(\r\n        \"log(string,string,address,address)\",\r\n        p0,\r\n        p1,\r\n        p2,\r\n        p3\r\n      )\r\n    );\r\n  }\r\n\r\n  function log(\r\n    string memory p0,\r\n    bool p1,\r\n    uint256 p2,\r\n    uint256 p3\r\n  ) internal view {\r\n    _sendLogPayload(\r\n      abi.encodeWithSignature(\"log(string,bool,uint,uint)\", p0, p1, p2, p3)\r\n    );\r\n  }\r\n\r\n  function log(\r\n    string memory p0,\r\n    bool p1,\r\n    uint256 p2,\r\n    string memory p3\r\n  ) internal view {\r\n    _sendLogPayload(\r\n      abi.encodeWithSignature(\"log(string,bool,uint,string)\", p0, p1, p2, p3)\r\n    );\r\n  }\r\n\r\n  function log(\r\n    string memory p0,\r\n    bool p1,\r\n    uint256 p2,\r\n    bool p3\r\n  ) internal view {\r\n    _sendLogPayload(\r\n      abi.encodeWithSignature(\"log(string,bool,uint,bool)\", p0, p1, p2, p3)\r\n    );\r\n  }\r\n\r\n  function log(\r\n    string memory p0,\r\n    bool p1,\r\n    uint256 p2,\r\n    address p3\r\n  ) internal view {\r\n    _sendLogPayload(\r\n      abi.encodeWithSignature(\"log(string,bool,uint,address)\", p0, p1, p2, p3)\r\n    );\r\n  }\r\n\r\n  function log(\r\n    string memory p0,\r\n    bool p1,\r\n    string memory p2,\r\n    uint256 p3\r\n  ) internal view {\r\n    _sendLogPayload(\r\n      abi.encodeWithSignature(\"log(string,bool,string,uint)\", p0, p1, p2, p3)\r\n    );\r\n  }\r\n\r\n  function log(\r\n    string memory p0,\r\n    bool p1,\r\n    string memory p2,\r\n    string memory p3\r\n  ) internal view {\r\n    _sendLogPayload(\r\n      abi.encodeWithSignature(\"log(string,bool,string,string)\", p0, p1, p2, p3)\r\n    );\r\n  }\r\n\r\n  function log(\r\n    string memory p0,\r\n    bool p1,\r\n    string memory p2,\r\n    bool p3\r\n  ) internal view {\r\n    _sendLogPayload(\r\n      abi.encodeWithSignature(\"log(string,bool,string,bool)\", p0, p1, p2, p3)\r\n    );\r\n  }\r\n\r\n  function log(\r\n    string memory p0,\r\n    bool p1,\r\n    string memory p2,\r\n    address p3\r\n  ) internal view {\r\n    _sendLogPayload(\r\n      abi.encodeWithSignature(\"log(string,bool,string,address)\", p0, p1, p2, p3)\r\n    );\r\n  }\r\n\r\n  function log(\r\n    string memory p0,\r\n    bool p1,\r\n    bool p2,\r\n    uint256 p3\r\n  ) internal view {\r\n    _sendLogPayload(\r\n      abi.encodeWithSignature(\"log(string,bool,bool,uint)\", p0, p1, p2, p3)\r\n    );\r\n  }\r\n\r\n  function log(\r\n    string memory p0,\r\n    bool p1,\r\n    bool p2,\r\n    string memory p3\r\n  ) internal view {\r\n    _sendLogPayload(\r\n      abi.encodeWithSignature(\"log(string,bool,bool,string)\", p0, p1, p2, p3)\r\n    );\r\n  }\r\n\r\n  function log(\r\n    string memory p0,\r\n    bool p1,\r\n    bool p2,\r\n    bool p3\r\n  ) internal view {\r\n    _sendLogPayload(\r\n      abi.encodeWithSignature(\"log(string,bool,bool,bool)\", p0, p1, p2, p3)\r\n    );\r\n  }\r\n\r\n  function log(\r\n    string memory p0,\r\n    bool p1,\r\n    bool p2,\r\n    address p3\r\n  ) internal view {\r\n    _sendLogPayload(\r\n      abi.encodeWithSignature(\"log(string,bool,bool,address)\", p0, p1, p2, p3)\r\n    );\r\n  }\r\n\r\n  function log(\r\n    string memory p0,\r\n    bool p1,\r\n    address p2,\r\n    uint256 p3\r\n  ) internal view {\r\n    _sendLogPayload(\r\n      abi.encodeWithSignature(\"log(string,bool,address,uint)\", p0, p1, p2, p3)\r\n    );\r\n  }\r\n\r\n  function log(\r\n    string memory p0,\r\n    bool p1,\r\n    address p2,\r\n    string memory p3\r\n  ) internal view {\r\n    _sendLogPayload(\r\n      abi.encodeWithSignature(\"log(string,bool,address,string)\", p0, p1, p2, p3)\r\n    );\r\n  }\r\n\r\n  function log(\r\n    string memory p0,\r\n    bool p1,\r\n    address p2,\r\n    bool p3\r\n  ) internal view {\r\n    _sendLogPayload(\r\n      abi.encodeWithSignature(\"log(string,bool,address,bool)\", p0, p1, p2, p3)\r\n    );\r\n  }\r\n\r\n  function log(\r\n    string memory p0,\r\n    bool p1,\r\n    address p2,\r\n    address p3\r\n  ) internal view {\r\n    _sendLogPayload(\r\n      abi.encodeWithSignature(\r\n        \"log(string,bool,address,address)\",\r\n        p0,\r\n        p1,\r\n        p2,\r\n        p3\r\n      )\r\n    );\r\n  }\r\n\r\n  function log(\r\n    string memory p0,\r\n    address p1,\r\n    uint256 p2,\r\n    uint256 p3\r\n  ) internal view {\r\n    _sendLogPayload(\r\n      abi.encodeWithSignature(\"log(string,address,uint,uint)\", p0, p1, p2, p3)\r\n    );\r\n  }\r\n\r\n  function log(\r\n    string memory p0,\r\n    address p1,\r\n    uint256 p2,\r\n    string memory p3\r\n  ) internal view {\r\n    _sendLogPayload(\r\n      abi.encodeWithSignature(\"log(string,address,uint,string)\", p0, p1, p2, p3)\r\n    );\r\n  }\r\n\r\n  function log(\r\n    string memory p0,\r\n    address p1,\r\n    uint256 p2,\r\n    bool p3\r\n  ) internal view {\r\n    _sendLogPayload(\r\n      abi.encodeWithSignature(\"log(string,address,uint,bool)\", p0, p1, p2, p3)\r\n    );\r\n  }\r\n\r\n  function log(\r\n    string memory p0,\r\n    address p1,\r\n    uint256 p2,\r\n    address p3\r\n  ) internal view {\r\n    _sendLogPayload(\r\n      abi.encodeWithSignature(\r\n        \"log(string,address,uint,address)\",\r\n        p0,\r\n        p1,\r\n        p2,\r\n        p3\r\n      )\r\n    );\r\n  }\r\n\r\n  function log(\r\n    string memory p0,\r\n    address p1,\r\n    string memory p2,\r\n    uint256 p3\r\n  ) internal view {\r\n    _sendLogPayload(\r\n      abi.encodeWithSignature(\"log(string,address,string,uint)\", p0, p1, p2, p3)\r\n    );\r\n  }\r\n\r\n  function log(\r\n    string memory p0,\r\n    address p1,\r\n    string memory p2,\r\n    string memory p3\r\n  ) internal view {\r\n    _sendLogPayload(\r\n      abi.encodeWithSignature(\r\n        \"log(string,address,string,string)\",\r\n        p0,\r\n        p1,\r\n        p2,\r\n        p3\r\n      )\r\n    );\r\n  }\r\n\r\n  function log(\r\n    string memory p0,\r\n    address p1,\r\n    string memory p2,\r\n    bool p3\r\n  ) internal view {\r\n    _sendLogPayload(\r\n      abi.encodeWithSignature(\"log(string,address,string,bool)\", p0, p1, p2, p3)\r\n    );\r\n  }\r\n\r\n  function log(\r\n    string memory p0,\r\n    address p1,\r\n    string memory p2,\r\n    address p3\r\n  ) internal view {\r\n    _sendLogPayload(\r\n      abi.encodeWithSignature(\r\n        \"log(string,address,string,address)\",\r\n        p0,\r\n        p1,\r\n        p2,\r\n        p3\r\n      )\r\n    );\r\n  }\r\n\r\n  function log(\r\n    string memory p0,\r\n    address p1,\r\n    bool p2,\r\n    uint256 p3\r\n  ) internal view {\r\n    _sendLogPayload(\r\n      abi.encodeWithSignature(\"log(string,address,bool,uint)\", p0, p1, p2, p3)\r\n    );\r\n  }\r\n\r\n  function log(\r\n    string memory p0,\r\n    address p1,\r\n    bool p2,\r\n    string memory p3\r\n  ) internal view {\r\n    _sendLogPayload(\r\n      abi.encodeWithSignature(\"log(string,address,bool,string)\", p0, p1, p2, p3)\r\n    );\r\n  }\r\n\r\n  function log(\r\n    string memory p0,\r\n    address p1,\r\n    bool p2,\r\n    bool p3\r\n  ) internal view {\r\n    _sendLogPayload(\r\n      abi.encodeWithSignature(\"log(string,address,bool,bool)\", p0, p1, p2, p3)\r\n    );\r\n  }\r\n\r\n  function log(\r\n    string memory p0,\r\n    address p1,\r\n    bool p2,\r\n    address p3\r\n  ) internal view {\r\n    _sendLogPayload(\r\n      abi.encodeWithSignature(\r\n        \"log(string,address,bool,address)\",\r\n        p0,\r\n        p1,\r\n        p2,\r\n        p3\r\n      )\r\n    );\r\n  }\r\n\r\n  function log(\r\n    string memory p0,\r\n    address p1,\r\n    address p2,\r\n    uint256 p3\r\n  ) internal view {\r\n    _sendLogPayload(\r\n      abi.encodeWithSignature(\r\n        \"log(string,address,address,uint)\",\r\n        p0,\r\n        p1,\r\n        p2,\r\n        p3\r\n      )\r\n    );\r\n  }\r\n\r\n  function log(\r\n    string memory p0,\r\n    address p1,\r\n    address p2,\r\n    string memory p3\r\n  ) internal view {\r\n    _sendLogPayload(\r\n      abi.encodeWithSignature(\r\n        \"log(string,address,address,string)\",\r\n        p0,\r\n        p1,\r\n        p2,\r\n        p3\r\n      )\r\n    );\r\n  }\r\n\r\n  function log(\r\n    string memory p0,\r\n    address p1,\r\n    address p2,\r\n    bool p3\r\n  ) internal view {\r\n    _sendLogPayload(\r\n      abi.encodeWithSignature(\r\n        \"log(string,address,address,bool)\",\r\n        p0,\r\n        p1,\r\n        p2,\r\n        p3\r\n      )\r\n    );\r\n  }\r\n\r\n  function log(\r\n    string memory p0,\r\n    address p1,\r\n    address p2,\r\n    address p3\r\n  ) internal view {\r\n    _sendLogPayload(\r\n      abi.encodeWithSignature(\r\n        \"log(string,address,address,address)\",\r\n        p0,\r\n        p1,\r\n        p2,\r\n        p3\r\n      )\r\n    );\r\n  }\r\n\r\n  function log(\r\n    bool p0,\r\n    uint256 p1,\r\n    uint256 p2,\r\n    uint256 p3\r\n  ) internal view {\r\n    _sendLogPayload(\r\n      abi.encodeWithSignature(\"log(bool,uint,uint,uint)\", p0, p1, p2, p3)\r\n    );\r\n  }\r\n\r\n  function log(\r\n    bool p0,\r\n    uint256 p1,\r\n    uint256 p2,\r\n    string memory p3\r\n  ) internal view {\r\n    _sendLogPayload(\r\n      abi.encodeWithSignature(\"log(bool,uint,uint,string)\", p0, p1, p2, p3)\r\n    );\r\n  }\r\n\r\n  function log(\r\n    bool p0,\r\n    uint256 p1,\r\n    uint256 p2,\r\n    bool p3\r\n  ) internal view {\r\n    _sendLogPayload(\r\n      abi.encodeWithSignature(\"log(bool,uint,uint,bool)\", p0, p1, p2, p3)\r\n    );\r\n  }\r\n\r\n  function log(\r\n    bool p0,\r\n    uint256 p1,\r\n    uint256 p2,\r\n    address p3\r\n  ) internal view {\r\n    _sendLogPayload(\r\n      abi.encodeWithSignature(\"log(bool,uint,uint,address)\", p0, p1, p2, p3)\r\n    );\r\n  }\r\n\r\n  function log(\r\n    bool p0,\r\n    uint256 p1,\r\n    string memory p2,\r\n    uint256 p3\r\n  ) internal view {\r\n    _sendLogPayload(\r\n      abi.encodeWithSignature(\"log(bool,uint,string,uint)\", p0, p1, p2, p3)\r\n    );\r\n  }\r\n\r\n  function log(\r\n    bool p0,\r\n    uint256 p1,\r\n    string memory p2,\r\n    string memory p3\r\n  ) internal view {\r\n    _sendLogPayload(\r\n      abi.encodeWithSignature(\"log(bool,uint,string,string)\", p0, p1, p2, p3)\r\n    );\r\n  }\r\n\r\n  function log(\r\n    bool p0,\r\n    uint256 p1,\r\n    string memory p2,\r\n    bool p3\r\n  ) internal view {\r\n    _sendLogPayload(\r\n      abi.encodeWithSignature(\"log(bool,uint,string,bool)\", p0, p1, p2, p3)\r\n    );\r\n  }\r\n\r\n  function log(\r\n    bool p0,\r\n    uint256 p1,\r\n    string memory p2,\r\n    address p3\r\n  ) internal view {\r\n    _sendLogPayload(\r\n      abi.encodeWithSignature(\"log(bool,uint,string,address)\", p0, p1, p2, p3)\r\n    );\r\n  }\r\n\r\n  function log(\r\n    bool p0,\r\n    uint256 p1,\r\n    bool p2,\r\n    uint256 p3\r\n  ) internal view {\r\n    _sendLogPayload(\r\n      abi.encodeWithSignature(\"log(bool,uint,bool,uint)\", p0, p1, p2, p3)\r\n    );\r\n  }\r\n\r\n  function log(\r\n    bool p0,\r\n    uint256 p1,\r\n    bool p2,\r\n    string memory p3\r\n  ) internal view {\r\n    _sendLogPayload(\r\n      abi.encodeWithSignature(\"log(bool,uint,bool,string)\", p0, p1, p2, p3)\r\n    );\r\n  }\r\n\r\n  function log(\r\n    bool p0,\r\n    uint256 p1,\r\n    bool p2,\r\n    bool p3\r\n  ) internal view {\r\n    _sendLogPayload(\r\n      abi.encodeWithSignature(\"log(bool,uint,bool,bool)\", p0, p1, p2, p3)\r\n    );\r\n  }\r\n\r\n  function log(\r\n    bool p0,\r\n    uint256 p1,\r\n    bool p2,\r\n    address p3\r\n  ) internal view {\r\n    _sendLogPayload(\r\n      abi.encodeWithSignature(\"log(bool,uint,bool,address)\", p0, p1, p2, p3)\r\n    );\r\n  }\r\n\r\n  function log(\r\n    bool p0,\r\n    uint256 p1,\r\n    address p2,\r\n    uint256 p3\r\n  ) internal view {\r\n    _sendLogPayload(\r\n      abi.encodeWithSignature(\"log(bool,uint,address,uint)\", p0, p1, p2, p3)\r\n    );\r\n  }\r\n\r\n  function log(\r\n    bool p0,\r\n    uint256 p1,\r\n    address p2,\r\n    string memory p3\r\n  ) internal view {\r\n    _sendLogPayload(\r\n      abi.encodeWithSignature(\"log(bool,uint,address,string)\", p0, p1, p2, p3)\r\n    );\r\n  }\r\n\r\n  function log(\r\n    bool p0,\r\n    uint256 p1,\r\n    address p2,\r\n    bool p3\r\n  ) internal view {\r\n    _sendLogPayload(\r\n      abi.encodeWithSignature(\"log(bool,uint,address,bool)\", p0, p1, p2, p3)\r\n    );\r\n  }\r\n\r\n  function log(\r\n    bool p0,\r\n    uint256 p1,\r\n    address p2,\r\n    address p3\r\n  ) internal view {\r\n    _sendLogPayload(\r\n      abi.encodeWithSignature(\"log(bool,uint,address,address)\", p0, p1, p2, p3)\r\n    );\r\n  }\r\n\r\n  function log(\r\n    bool p0,\r\n    string memory p1,\r\n    uint256 p2,\r\n    uint256 p3\r\n  ) internal view {\r\n    _sendLogPayload(\r\n      abi.encodeWithSignature(\"log(bool,string,uint,uint)\", p0, p1, p2, p3)\r\n    );\r\n  }\r\n\r\n  function log(\r\n    bool p0,\r\n    string memory p1,\r\n    uint256 p2,\r\n    string memory p3\r\n  ) internal view {\r\n    _sendLogPayload(\r\n      abi.encodeWithSignature(\"log(bool,string,uint,string)\", p0, p1, p2, p3)\r\n    );\r\n  }\r\n\r\n  function log(\r\n    bool p0,\r\n    string memory p1,\r\n    uint256 p2,\r\n    bool p3\r\n  ) internal view {\r\n    _sendLogPayload(\r\n      abi.encodeWithSignature(\"log(bool,string,uint,bool)\", p0, p1, p2, p3)\r\n    );\r\n  }\r\n\r\n  function log(\r\n    bool p0,\r\n    string memory p1,\r\n    uint256 p2,\r\n    address p3\r\n  ) internal view {\r\n    _sendLogPayload(\r\n      abi.encodeWithSignature(\"log(bool,string,uint,address)\", p0, p1, p2, p3)\r\n    );\r\n  }\r\n\r\n  function log(\r\n    bool p0,\r\n    string memory p1,\r\n    string memory p2,\r\n    uint256 p3\r\n  ) internal view {\r\n    _sendLogPayload(\r\n      abi.encodeWithSignature(\"log(bool,string,string,uint)\", p0, p1, p2, p3)\r\n    );\r\n  }\r\n\r\n  function log(\r\n    bool p0,\r\n    string memory p1,\r\n    string memory p2,\r\n    string memory p3\r\n  ) internal view {\r\n    _sendLogPayload(\r\n      abi.encodeWithSignature(\"log(bool,string,string,string)\", p0, p1, p2, p3)\r\n    );\r\n  }\r\n\r\n  function log(\r\n    bool p0,\r\n    string memory p1,\r\n    string memory p2,\r\n    bool p3\r\n  ) internal view {\r\n    _sendLogPayload(\r\n      abi.encodeWithSignature(\"log(bool,string,string,bool)\", p0, p1, p2, p3)\r\n    );\r\n  }\r\n\r\n  function log(\r\n    bool p0,\r\n    string memory p1,\r\n    string memory p2,\r\n    address p3\r\n  ) internal view {\r\n    _sendLogPayload(\r\n      abi.encodeWithSignature(\"log(bool,string,string,address)\", p0, p1, p2, p3)\r\n    );\r\n  }\r\n\r\n  function log(\r\n    bool p0,\r\n    string memory p1,\r\n    bool p2,\r\n    uint256 p3\r\n  ) internal view {\r\n    _sendLogPayload(\r\n      abi.encodeWithSignature(\"log(bool,string,bool,uint)\", p0, p1, p2, p3)\r\n    );\r\n  }\r\n\r\n  function log(\r\n    bool p0,\r\n    string memory p1,\r\n    bool p2,\r\n    string memory p3\r\n  ) internal view {\r\n    _sendLogPayload(\r\n      abi.encodeWithSignature(\"log(bool,string,bool,string)\", p0, p1, p2, p3)\r\n    );\r\n  }\r\n\r\n  function log(\r\n    bool p0,\r\n    string memory p1,\r\n    bool p2,\r\n    bool p3\r\n  ) internal view {\r\n    _sendLogPayload(\r\n      abi.encodeWithSignature(\"log(bool,string,bool,bool)\", p0, p1, p2, p3)\r\n    );\r\n  }\r\n\r\n  function log(\r\n    bool p0,\r\n    string memory p1,\r\n    bool p2,\r\n    address p3\r\n  ) internal view {\r\n    _sendLogPayload(\r\n      abi.encodeWithSignature(\"log(bool,string,bool,address)\", p0, p1, p2, p3)\r\n    );\r\n  }\r\n\r\n  function log(\r\n    bool p0,\r\n    string memory p1,\r\n    address p2,\r\n    uint256 p3\r\n  ) internal view {\r\n    _sendLogPayload(\r\n      abi.encodeWithSignature(\"log(bool,string,address,uint)\", p0, p1, p2, p3)\r\n    );\r\n  }\r\n\r\n  function log(\r\n    bool p0,\r\n    string memory p1,\r\n    address p2,\r\n    string memory p3\r\n  ) internal view {\r\n    _sendLogPayload(\r\n      abi.encodeWithSignature(\"log(bool,string,address,string)\", p0, p1, p2, p3)\r\n    );\r\n  }\r\n\r\n  function log(\r\n    bool p0,\r\n    string memory p1,\r\n    address p2,\r\n    bool p3\r\n  ) internal view {\r\n    _sendLogPayload(\r\n      abi.encodeWithSignature(\"log(bool,string,address,bool)\", p0, p1, p2, p3)\r\n    );\r\n  }\r\n\r\n  function log(\r\n    bool p0,\r\n    string memory p1,\r\n    address p2,\r\n    address p3\r\n  ) internal view {\r\n    _sendLogPayload(\r\n      abi.encodeWithSignature(\r\n        \"log(bool,string,address,address)\",\r\n        p0,\r\n        p1,\r\n        p2,\r\n        p3\r\n      )\r\n    );\r\n  }\r\n\r\n  function log(\r\n    bool p0,\r\n    bool p1,\r\n    uint256 p2,\r\n    uint256 p3\r\n  ) internal view {\r\n    _sendLogPayload(\r\n      abi.encodeWithSignature(\"log(bool,bool,uint,uint)\", p0, p1, p2, p3)\r\n    );\r\n  }\r\n\r\n  function log(\r\n    bool p0,\r\n    bool p1,\r\n    uint256 p2,\r\n    string memory p3\r\n  ) internal view {\r\n    _sendLogPayload(\r\n      abi.encodeWithSignature(\"log(bool,bool,uint,string)\", p0, p1, p2, p3)\r\n    );\r\n  }\r\n\r\n  function log(\r\n    bool p0,\r\n    bool p1,\r\n    uint256 p2,\r\n    bool p3\r\n  ) internal view {\r\n    _sendLogPayload(\r\n      abi.encodeWithSignature(\"log(bool,bool,uint,bool)\", p0, p1, p2, p3)\r\n    );\r\n  }\r\n\r\n  function log(\r\n    bool p0,\r\n    bool p1,\r\n    uint256 p2,\r\n    address p3\r\n  ) internal view {\r\n    _sendLogPayload(\r\n      abi.encodeWithSignature(\"log(bool,bool,uint,address)\", p0, p1, p2, p3)\r\n    );\r\n  }\r\n\r\n  function log(\r\n    bool p0,\r\n    bool p1,\r\n    string memory p2,\r\n    uint256 p3\r\n  ) internal view {\r\n    _sendLogPayload(\r\n      abi.encodeWithSignature(\"log(bool,bool,string,uint)\", p0, p1, p2, p3)\r\n    );\r\n  }\r\n\r\n  function log(\r\n    bool p0,\r\n    bool p1,\r\n    string memory p2,\r\n    string memory p3\r\n  ) internal view {\r\n    _sendLogPayload(\r\n      abi.encodeWithSignature(\"log(bool,bool,string,string)\", p0, p1, p2, p3)\r\n    );\r\n  }\r\n\r\n  function log(\r\n    bool p0,\r\n    bool p1,\r\n    string memory p2,\r\n    bool p3\r\n  ) internal view {\r\n    _sendLogPayload(\r\n      abi.encodeWithSignature(\"log(bool,bool,string,bool)\", p0, p1, p2, p3)\r\n    );\r\n  }\r\n\r\n  function log(\r\n    bool p0,\r\n    bool p1,\r\n    string memory p2,\r\n    address p3\r\n  ) internal view {\r\n    _sendLogPayload(\r\n      abi.encodeWithSignature(\"log(bool,bool,string,address)\", p0, p1, p2, p3)\r\n    );\r\n  }\r\n\r\n  function log(\r\n    bool p0,\r\n    bool p1,\r\n    bool p2,\r\n    uint256 p3\r\n  ) internal view {\r\n    _sendLogPayload(\r\n      abi.encodeWithSignature(\"log(bool,bool,bool,uint)\", p0, p1, p2, p3)\r\n    );\r\n  }\r\n\r\n  function log(\r\n    bool p0,\r\n    bool p1,\r\n    bool p2,\r\n    string memory p3\r\n  ) internal view {\r\n    _sendLogPayload(\r\n      abi.encodeWithSignature(\"log(bool,bool,bool,string)\", p0, p1, p2, p3)\r\n    );\r\n  }\r\n\r\n  function log(\r\n    bool p0,\r\n    bool p1,\r\n    bool p2,\r\n    bool p3\r\n  ) internal view {\r\n    _sendLogPayload(\r\n      abi.encodeWithSignature(\"log(bool,bool,bool,bool)\", p0, p1, p2, p3)\r\n    );\r\n  }\r\n\r\n  function log(\r\n    bool p0,\r\n    bool p1,\r\n    bool p2,\r\n    address p3\r\n  ) internal view {\r\n    _sendLogPayload(\r\n      abi.encodeWithSignature(\"log(bool,bool,bool,address)\", p0, p1, p2, p3)\r\n    );\r\n  }\r\n\r\n  function log(\r\n    bool p0,\r\n    bool p1,\r\n    address p2,\r\n    uint256 p3\r\n  ) internal view {\r\n    _sendLogPayload(\r\n      abi.encodeWithSignature(\"log(bool,bool,address,uint)\", p0, p1, p2, p3)\r\n    );\r\n  }\r\n\r\n  function log(\r\n    bool p0,\r\n    bool p1,\r\n    address p2,\r\n    string memory p3\r\n  ) internal view {\r\n    _sendLogPayload(\r\n      abi.encodeWithSignature(\"log(bool,bool,address,string)\", p0, p1, p2, p3)\r\n    );\r\n  }\r\n\r\n  function log(\r\n    bool p0,\r\n    bool p1,\r\n    address p2,\r\n    bool p3\r\n  ) internal view {\r\n    _sendLogPayload(\r\n      abi.encodeWithSignature(\"log(bool,bool,address,bool)\", p0, p1, p2, p3)\r\n    );\r\n  }\r\n\r\n  function log(\r\n    bool p0,\r\n    bool p1,\r\n    address p2,\r\n    address p3\r\n  ) internal view {\r\n    _sendLogPayload(\r\n      abi.encodeWithSignature(\"log(bool,bool,address,address)\", p0, p1, p2, p3)\r\n    );\r\n  }\r\n\r\n  function log(\r\n    bool p0,\r\n    address p1,\r\n    uint256 p2,\r\n    uint256 p3\r\n  ) internal view {\r\n    _sendLogPayload(\r\n      abi.encodeWithSignature(\"log(bool,address,uint,uint)\", p0, p1, p2, p3)\r\n    );\r\n  }\r\n\r\n  function log(\r\n    bool p0,\r\n    address p1,\r\n    uint256 p2,\r\n    string memory p3\r\n  ) internal view {\r\n    _sendLogPayload(\r\n      abi.encodeWithSignature(\"log(bool,address,uint,string)\", p0, p1, p2, p3)\r\n    );\r\n  }\r\n\r\n  function log(\r\n    bool p0,\r\n    address p1,\r\n    uint256 p2,\r\n    bool p3\r\n  ) internal view {\r\n    _sendLogPayload(\r\n      abi.encodeWithSignature(\"log(bool,address,uint,bool)\", p0, p1, p2, p3)\r\n    );\r\n  }\r\n\r\n  function log(\r\n    bool p0,\r\n    address p1,\r\n    uint256 p2,\r\n    address p3\r\n  ) internal view {\r\n    _sendLogPayload(\r\n      abi.encodeWithSignature(\"log(bool,address,uint,address)\", p0, p1, p2, p3)\r\n    );\r\n  }\r\n\r\n  function log(\r\n    bool p0,\r\n    address p1,\r\n    string memory p2,\r\n    uint256 p3\r\n  ) internal view {\r\n    _sendLogPayload(\r\n      abi.encodeWithSignature(\"log(bool,address,string,uint)\", p0, p1, p2, p3)\r\n    );\r\n  }\r\n\r\n  function log(\r\n    bool p0,\r\n    address p1,\r\n    string memory p2,\r\n    string memory p3\r\n  ) internal view {\r\n    _sendLogPayload(\r\n      abi.encodeWithSignature(\"log(bool,address,string,string)\", p0, p1, p2, p3)\r\n    );\r\n  }\r\n\r\n  function log(\r\n    bool p0,\r\n    address p1,\r\n    string memory p2,\r\n    bool p3\r\n  ) internal view {\r\n    _sendLogPayload(\r\n      abi.encodeWithSignature(\"log(bool,address,string,bool)\", p0, p1, p2, p3)\r\n    );\r\n  }\r\n\r\n  function log(\r\n    bool p0,\r\n    address p1,\r\n    string memory p2,\r\n    address p3\r\n  ) internal view {\r\n    _sendLogPayload(\r\n      abi.encodeWithSignature(\r\n        \"log(bool,address,string,address)\",\r\n        p0,\r\n        p1,\r\n        p2,\r\n        p3\r\n      )\r\n    );\r\n  }\r\n\r\n  function log(\r\n    bool p0,\r\n    address p1,\r\n    bool p2,\r\n    uint256 p3\r\n  ) internal view {\r\n    _sendLogPayload(\r\n      abi.encodeWithSignature(\"log(bool,address,bool,uint)\", p0, p1, p2, p3)\r\n    );\r\n  }\r\n\r\n  function log(\r\n    bool p0,\r\n    address p1,\r\n    bool p2,\r\n    string memory p3\r\n  ) internal view {\r\n    _sendLogPayload(\r\n      abi.encodeWithSignature(\"log(bool,address,bool,string)\", p0, p1, p2, p3)\r\n    );\r\n  }\r\n\r\n  function log(\r\n    bool p0,\r\n    address p1,\r\n    bool p2,\r\n    bool p3\r\n  ) internal view {\r\n    _sendLogPayload(\r\n      abi.encodeWithSignature(\"log(bool,address,bool,bool)\", p0, p1, p2, p3)\r\n    );\r\n  }\r\n\r\n  function log(\r\n    bool p0,\r\n    address p1,\r\n    bool p2,\r\n    address p3\r\n  ) internal view {\r\n    _sendLogPayload(\r\n      abi.encodeWithSignature(\"log(bool,address,bool,address)\", p0, p1, p2, p3)\r\n    );\r\n  }\r\n\r\n  function log(\r\n    bool p0,\r\n    address p1,\r\n    address p2,\r\n    uint256 p3\r\n  ) internal view {\r\n    _sendLogPayload(\r\n      abi.encodeWithSignature(\"log(bool,address,address,uint)\", p0, p1, p2, p3)\r\n    );\r\n  }\r\n\r\n  function log(\r\n    bool p0,\r\n    address p1,\r\n    address p2,\r\n    string memory p3\r\n  ) internal view {\r\n    _sendLogPayload(\r\n      abi.encodeWithSignature(\r\n        \"log(bool,address,address,string)\",\r\n        p0,\r\n        p1,\r\n        p2,\r\n        p3\r\n      )\r\n    );\r\n  }\r\n\r\n  function log(\r\n    bool p0,\r\n    address p1,\r\n    address p2,\r\n    bool p3\r\n  ) internal view {\r\n    _sendLogPayload(\r\n      abi.encodeWithSignature(\"log(bool,address,address,bool)\", p0, p1, p2, p3)\r\n    );\r\n  }\r\n\r\n  function log(\r\n    bool p0,\r\n    address p1,\r\n    address p2,\r\n    address p3\r\n  ) internal view {\r\n    _sendLogPayload(\r\n      abi.encodeWithSignature(\r\n        \"log(bool,address,address,address)\",\r\n        p0,\r\n        p1,\r\n        p2,\r\n        p3\r\n      )\r\n    );\r\n  }\r\n\r\n  function log(\r\n    address p0,\r\n    uint256 p1,\r\n    uint256 p2,\r\n    uint256 p3\r\n  ) internal view {\r\n    _sendLogPayload(\r\n      abi.encodeWithSignature(\"log(address,uint,uint,uint)\", p0, p1, p2, p3)\r\n    );\r\n  }\r\n\r\n  function log(\r\n    address p0,\r\n    uint256 p1,\r\n    uint256 p2,\r\n    string memory p3\r\n  ) internal view {\r\n    _sendLogPayload(\r\n      abi.encodeWithSignature(\"log(address,uint,uint,string)\", p0, p1, p2, p3)\r\n    );\r\n  }\r\n\r\n  function log(\r\n    address p0,\r\n    uint256 p1,\r\n    uint256 p2,\r\n    bool p3\r\n  ) internal view {\r\n    _sendLogPayload(\r\n      abi.encodeWithSignature(\"log(address,uint,uint,bool)\", p0, p1, p2, p3)\r\n    );\r\n  }\r\n\r\n  function log(\r\n    address p0,\r\n    uint256 p1,\r\n    uint256 p2,\r\n    address p3\r\n  ) internal view {\r\n    _sendLogPayload(\r\n      abi.encodeWithSignature(\"log(address,uint,uint,address)\", p0, p1, p2, p3)\r\n    );\r\n  }\r\n\r\n  function log(\r\n    address p0,\r\n    uint256 p1,\r\n    string memory p2,\r\n    uint256 p3\r\n  ) internal view {\r\n    _sendLogPayload(\r\n      abi.encodeWithSignature(\"log(address,uint,string,uint)\", p0, p1, p2, p3)\r\n    );\r\n  }\r\n\r\n  function log(\r\n    address p0,\r\n    uint256 p1,\r\n    string memory p2,\r\n    string memory p3\r\n  ) internal view {\r\n    _sendLogPayload(\r\n      abi.encodeWithSignature(\"log(address,uint,string,string)\", p0, p1, p2, p3)\r\n    );\r\n  }\r\n\r\n  function log(\r\n    address p0,\r\n    uint256 p1,\r\n    string memory p2,\r\n    bool p3\r\n  ) internal view {\r\n    _sendLogPayload(\r\n      abi.encodeWithSignature(\"log(address,uint,string,bool)\", p0, p1, p2, p3)\r\n    );\r\n  }\r\n\r\n  function log(\r\n    address p0,\r\n    uint256 p1,\r\n    string memory p2,\r\n    address p3\r\n  ) internal view {\r\n    _sendLogPayload(\r\n      abi.encodeWithSignature(\r\n        \"log(address,uint,string,address)\",\r\n        p0,\r\n        p1,\r\n        p2,\r\n        p3\r\n      )\r\n    );\r\n  }\r\n\r\n  function log(\r\n    address p0,\r\n    uint256 p1,\r\n    bool p2,\r\n    uint256 p3\r\n  ) internal view {\r\n    _sendLogPayload(\r\n      abi.encodeWithSignature(\"log(address,uint,bool,uint)\", p0, p1, p2, p3)\r\n    );\r\n  }\r\n\r\n  function log(\r\n    address p0,\r\n    uint256 p1,\r\n    bool p2,\r\n    string memory p3\r\n  ) internal view {\r\n    _sendLogPayload(\r\n      abi.encodeWithSignature(\"log(address,uint,bool,string)\", p0, p1, p2, p3)\r\n    );\r\n  }\r\n\r\n  function log(\r\n    address p0,\r\n    uint256 p1,\r\n    bool p2,\r\n    bool p3\r\n  ) internal view {\r\n    _sendLogPayload(\r\n      abi.encodeWithSignature(\"log(address,uint,bool,bool)\", p0, p1, p2, p3)\r\n    );\r\n  }\r\n\r\n  function log(\r\n    address p0,\r\n    uint256 p1,\r\n    bool p2,\r\n    address p3\r\n  ) internal view {\r\n    _sendLogPayload(\r\n      abi.encodeWithSignature(\"log(address,uint,bool,address)\", p0, p1, p2, p3)\r\n    );\r\n  }\r\n\r\n  function log(\r\n    address p0,\r\n    uint256 p1,\r\n    address p2,\r\n    uint256 p3\r\n  ) internal view {\r\n    _sendLogPayload(\r\n      abi.encodeWithSignature(\"log(address,uint,address,uint)\", p0, p1, p2, p3)\r\n    );\r\n  }\r\n\r\n  function log(\r\n    address p0,\r\n    uint256 p1,\r\n    address p2,\r\n    string memory p3\r\n  ) internal view {\r\n    _sendLogPayload(\r\n      abi.encodeWithSignature(\r\n        \"log(address,uint,address,string)\",\r\n        p0,\r\n        p1,\r\n        p2,\r\n        p3\r\n      )\r\n    );\r\n  }\r\n\r\n  function log(\r\n    address p0,\r\n    uint256 p1,\r\n    address p2,\r\n    bool p3\r\n  ) internal view {\r\n    _sendLogPayload(\r\n      abi.encodeWithSignature(\"log(address,uint,address,bool)\", p0, p1, p2, p3)\r\n    );\r\n  }\r\n\r\n  function log(\r\n    address p0,\r\n    uint256 p1,\r\n    address p2,\r\n    address p3\r\n  ) internal view {\r\n    _sendLogPayload(\r\n      abi.encodeWithSignature(\r\n        \"log(address,uint,address,address)\",\r\n        p0,\r\n        p1,\r\n        p2,\r\n        p3\r\n      )\r\n    );\r\n  }\r\n\r\n  function log(\r\n    address p0,\r\n    string memory p1,\r\n    uint256 p2,\r\n    uint256 p3\r\n  ) internal view {\r\n    _sendLogPayload(\r\n      abi.encodeWithSignature(\"log(address,string,uint,uint)\", p0, p1, p2, p3)\r\n    );\r\n  }\r\n\r\n  function log(\r\n    address p0,\r\n    string memory p1,\r\n    uint256 p2,\r\n    string memory p3\r\n  ) internal view {\r\n    _sendLogPayload(\r\n      abi.encodeWithSignature(\"log(address,string,uint,string)\", p0, p1, p2, p3)\r\n    );\r\n  }\r\n\r\n  function log(\r\n    address p0,\r\n    string memory p1,\r\n    uint256 p2,\r\n    bool p3\r\n  ) internal view {\r\n    _sendLogPayload(\r\n      abi.encodeWithSignature(\"log(address,string,uint,bool)\", p0, p1, p2, p3)\r\n    );\r\n  }\r\n\r\n  function log(\r\n    address p0,\r\n    string memory p1,\r\n    uint256 p2,\r\n    address p3\r\n  ) internal view {\r\n    _sendLogPayload(\r\n      abi.encodeWithSignature(\r\n        \"log(address,string,uint,address)\",\r\n        p0,\r\n        p1,\r\n        p2,\r\n        p3\r\n      )\r\n    );\r\n  }\r\n\r\n  function log(\r\n    address p0,\r\n    string memory p1,\r\n    string memory p2,\r\n    uint256 p3\r\n  ) internal view {\r\n    _sendLogPayload(\r\n      abi.encodeWithSignature(\"log(address,string,string,uint)\", p0, p1, p2, p3)\r\n    );\r\n  }\r\n\r\n  function log(\r\n    address p0,\r\n    string memory p1,\r\n    string memory p2,\r\n    string memory p3\r\n  ) internal view {\r\n    _sendLogPayload(\r\n      abi.encodeWithSignature(\r\n        \"log(address,string,string,string)\",\r\n        p0,\r\n        p1,\r\n        p2,\r\n        p3\r\n      )\r\n    );\r\n  }\r\n\r\n  function log(\r\n    address p0,\r\n    string memory p1,\r\n    string memory p2,\r\n    bool p3\r\n  ) internal view {\r\n    _sendLogPayload(\r\n      abi.encodeWithSignature(\"log(address,string,string,bool)\", p0, p1, p2, p3)\r\n    );\r\n  }\r\n\r\n  function log(\r\n    address p0,\r\n    string memory p1,\r\n    string memory p2,\r\n    address p3\r\n  ) internal view {\r\n    _sendLogPayload(\r\n      abi.encodeWithSignature(\r\n        \"log(address,string,string,address)\",\r\n        p0,\r\n        p1,\r\n        p2,\r\n        p3\r\n      )\r\n    );\r\n  }\r\n\r\n  function log(\r\n    address p0,\r\n    string memory p1,\r\n    bool p2,\r\n    uint256 p3\r\n  ) internal view {\r\n    _sendLogPayload(\r\n      abi.encodeWithSignature(\"log(address,string,bool,uint)\", p0, p1, p2, p3)\r\n    );\r\n  }\r\n\r\n  function log(\r\n    address p0,\r\n    string memory p1,\r\n    bool p2,\r\n    string memory p3\r\n  ) internal view {\r\n    _sendLogPayload(\r\n      abi.encodeWithSignature(\"log(address,string,bool,string)\", p0, p1, p2, p3)\r\n    );\r\n  }\r\n\r\n  function log(\r\n    address p0,\r\n    string memory p1,\r\n    bool p2,\r\n    bool p3\r\n  ) internal view {\r\n    _sendLogPayload(\r\n      abi.encodeWithSignature(\"log(address,string,bool,bool)\", p0, p1, p2, p3)\r\n    );\r\n  }\r\n\r\n  function log(\r\n    address p0,\r\n    string memory p1,\r\n    bool p2,\r\n    address p3\r\n  ) internal view {\r\n    _sendLogPayload(\r\n      abi.encodeWithSignature(\r\n        \"log(address,string,bool,address)\",\r\n        p0,\r\n        p1,\r\n        p2,\r\n        p3\r\n      )\r\n    );\r\n  }\r\n\r\n  function log(\r\n    address p0,\r\n    string memory p1,\r\n    address p2,\r\n    uint256 p3\r\n  ) internal view {\r\n    _sendLogPayload(\r\n      abi.encodeWithSignature(\r\n        \"log(address,string,address,uint)\",\r\n        p0,\r\n        p1,\r\n        p2,\r\n        p3\r\n      )\r\n    );\r\n  }\r\n\r\n  function log(\r\n    address p0,\r\n    string memory p1,\r\n    address p2,\r\n    string memory p3\r\n  ) internal view {\r\n    _sendLogPayload(\r\n      abi.encodeWithSignature(\r\n        \"log(address,string,address,string)\",\r\n        p0,\r\n        p1,\r\n        p2,\r\n        p3\r\n      )\r\n    );\r\n  }\r\n\r\n  function log(\r\n    address p0,\r\n    string memory p1,\r\n    address p2,\r\n    bool p3\r\n  ) internal view {\r\n    _sendLogPayload(\r\n      abi.encodeWithSignature(\r\n        \"log(address,string,address,bool)\",\r\n        p0,\r\n        p1,\r\n        p2,\r\n        p3\r\n      )\r\n    );\r\n  }\r\n\r\n  function log(\r\n    address p0,\r\n    string memory p1,\r\n    address p2,\r\n    address p3\r\n  ) internal view {\r\n    _sendLogPayload(\r\n      abi.encodeWithSignature(\r\n        \"log(address,string,address,address)\",\r\n        p0,\r\n        p1,\r\n        p2,\r\n        p3\r\n      )\r\n    );\r\n  }\r\n\r\n  function log(\r\n    address p0,\r\n    bool p1,\r\n    uint256 p2,\r\n    uint256 p3\r\n  ) internal view {\r\n    _sendLogPayload(\r\n      abi.encodeWithSignature(\"log(address,bool,uint,uint)\", p0, p1, p2, p3)\r\n    );\r\n  }\r\n\r\n  function log(\r\n    address p0,\r\n    bool p1,\r\n    uint256 p2,\r\n    string memory p3\r\n  ) internal view {\r\n    _sendLogPayload(\r\n      abi.encodeWithSignature(\"log(address,bool,uint,string)\", p0, p1, p2, p3)\r\n    );\r\n  }\r\n\r\n  function log(\r\n    address p0,\r\n    bool p1,\r\n    uint256 p2,\r\n    bool p3\r\n  ) internal view {\r\n    _sendLogPayload(\r\n      abi.encodeWithSignature(\"log(address,bool,uint,bool)\", p0, p1, p2, p3)\r\n    );\r\n  }\r\n\r\n  function log(\r\n    address p0,\r\n    bool p1,\r\n    uint256 p2,\r\n    address p3\r\n  ) internal view {\r\n    _sendLogPayload(\r\n      abi.encodeWithSignature(\"log(address,bool,uint,address)\", p0, p1, p2, p3)\r\n    );\r\n  }\r\n\r\n  function log(\r\n    address p0,\r\n    bool p1,\r\n    string memory p2,\r\n    uint256 p3\r\n  ) internal view {\r\n    _sendLogPayload(\r\n      abi.encodeWithSignature(\"log(address,bool,string,uint)\", p0, p1, p2, p3)\r\n    );\r\n  }\r\n\r\n  function log(\r\n    address p0,\r\n    bool p1,\r\n    string memory p2,\r\n    string memory p3\r\n  ) internal view {\r\n    _sendLogPayload(\r\n      abi.encodeWithSignature(\"log(address,bool,string,string)\", p0, p1, p2, p3)\r\n    );\r\n  }\r\n\r\n  function log(\r\n    address p0,\r\n    bool p1,\r\n    string memory p2,\r\n    bool p3\r\n  ) internal view {\r\n    _sendLogPayload(\r\n      abi.encodeWithSignature(\"log(address,bool,string,bool)\", p0, p1, p2, p3)\r\n    );\r\n  }\r\n\r\n  function log(\r\n    address p0,\r\n    bool p1,\r\n    string memory p2,\r\n    address p3\r\n  ) internal view {\r\n    _sendLogPayload(\r\n      abi.encodeWithSignature(\r\n        \"log(address,bool,string,address)\",\r\n        p0,\r\n        p1,\r\n        p2,\r\n        p3\r\n      )\r\n    );\r\n  }\r\n\r\n  function log(\r\n    address p0,\r\n    bool p1,\r\n    bool p2,\r\n    uint256 p3\r\n  ) internal view {\r\n    _sendLogPayload(\r\n      abi.encodeWithSignature(\"log(address,bool,bool,uint)\", p0, p1, p2, p3)\r\n    );\r\n  }\r\n\r\n  function log(\r\n    address p0,\r\n    bool p1,\r\n    bool p2,\r\n    string memory p3\r\n  ) internal view {\r\n    _sendLogPayload(\r\n      abi.encodeWithSignature(\"log(address,bool,bool,string)\", p0, p1, p2, p3)\r\n    );\r\n  }\r\n\r\n  function log(\r\n    address p0,\r\n    bool p1,\r\n    bool p2,\r\n    bool p3\r\n  ) internal view {\r\n    _sendLogPayload(\r\n      abi.encodeWithSignature(\"log(address,bool,bool,bool)\", p0, p1, p2, p3)\r\n    );\r\n  }\r\n\r\n  function log(\r\n    address p0,\r\n    bool p1,\r\n    bool p2,\r\n    address p3\r\n  ) internal view {\r\n    _sendLogPayload(\r\n      abi.encodeWithSignature(\"log(address,bool,bool,address)\", p0, p1, p2, p3)\r\n    );\r\n  }\r\n\r\n  function log(\r\n    address p0,\r\n    bool p1,\r\n    address p2,\r\n    uint256 p3\r\n  ) internal view {\r\n    _sendLogPayload(\r\n      abi.encodeWithSignature(\"log(address,bool,address,uint)\", p0, p1, p2, p3)\r\n    );\r\n  }\r\n\r\n  function log(\r\n    address p0,\r\n    bool p1,\r\n    address p2,\r\n    string memory p3\r\n  ) internal view {\r\n    _sendLogPayload(\r\n      abi.encodeWithSignature(\r\n        \"log(address,bool,address,string)\",\r\n        p0,\r\n        p1,\r\n        p2,\r\n        p3\r\n      )\r\n    );\r\n  }\r\n\r\n  function log(\r\n    address p0,\r\n    bool p1,\r\n    address p2,\r\n    bool p3\r\n  ) internal view {\r\n    _sendLogPayload(\r\n      abi.encodeWithSignature(\"log(address,bool,address,bool)\", p0, p1, p2, p3)\r\n    );\r\n  }\r\n\r\n  function log(\r\n    address p0,\r\n    bool p1,\r\n    address p2,\r\n    address p3\r\n  ) internal view {\r\n    _sendLogPayload(\r\n      abi.encodeWithSignature(\r\n        \"log(address,bool,address,address)\",\r\n        p0,\r\n        p1,\r\n        p2,\r\n        p3\r\n      )\r\n    );\r\n  }\r\n\r\n  function log(\r\n    address p0,\r\n    address p1,\r\n    uint256 p2,\r\n    uint256 p3\r\n  ) internal view {\r\n    _sendLogPayload(\r\n      abi.encodeWithSignature(\"log(address,address,uint,uint)\", p0, p1, p2, p3)\r\n    );\r\n  }\r\n\r\n  function log(\r\n    address p0,\r\n    address p1,\r\n    uint256 p2,\r\n    string memory p3\r\n  ) internal view {\r\n    _sendLogPayload(\r\n      abi.encodeWithSignature(\r\n        \"log(address,address,uint,string)\",\r\n        p0,\r\n        p1,\r\n        p2,\r\n        p3\r\n      )\r\n    );\r\n  }\r\n\r\n  function log(\r\n    address p0,\r\n    address p1,\r\n    uint256 p2,\r\n    bool p3\r\n  ) internal view {\r\n    _sendLogPayload(\r\n      abi.encodeWithSignature(\"log(address,address,uint,bool)\", p0, p1, p2, p3)\r\n    );\r\n  }\r\n\r\n  function log(\r\n    address p0,\r\n    address p1,\r\n    uint256 p2,\r\n    address p3\r\n  ) internal view {\r\n    _sendLogPayload(\r\n      abi.encodeWithSignature(\r\n        \"log(address,address,uint,address)\",\r\n        p0,\r\n        p1,\r\n        p2,\r\n        p3\r\n      )\r\n    );\r\n  }\r\n\r\n  function log(\r\n    address p0,\r\n    address p1,\r\n    string memory p2,\r\n    uint256 p3\r\n  ) internal view {\r\n    _sendLogPayload(\r\n      abi.encodeWithSignature(\r\n        \"log(address,address,string,uint)\",\r\n        p0,\r\n        p1,\r\n        p2,\r\n        p3\r\n      )\r\n    );\r\n  }\r\n\r\n  function log(\r\n    address p0,\r\n    address p1,\r\n    string memory p2,\r\n    string memory p3\r\n  ) internal view {\r\n    _sendLogPayload(\r\n      abi.encodeWithSignature(\r\n        \"log(address,address,string,string)\",\r\n        p0,\r\n        p1,\r\n        p2,\r\n        p3\r\n      )\r\n    );\r\n  }\r\n\r\n  function log(\r\n    address p0,\r\n    address p1,\r\n    string memory p2,\r\n    bool p3\r\n  ) internal view {\r\n    _sendLogPayload(\r\n      abi.encodeWithSignature(\r\n        \"log(address,address,string,bool)\",\r\n        p0,\r\n        p1,\r\n        p2,\r\n        p3\r\n      )\r\n    );\r\n  }\r\n\r\n  function log(\r\n    address p0,\r\n    address p1,\r\n    string memory p2,\r\n    address p3\r\n  ) internal view {\r\n    _sendLogPayload(\r\n      abi.encodeWithSignature(\r\n        \"log(address,address,string,address)\",\r\n        p0,\r\n        p1,\r\n        p2,\r\n        p3\r\n      )\r\n    );\r\n  }\r\n\r\n  function log(\r\n    address p0,\r\n    address p1,\r\n    bool p2,\r\n    uint256 p3\r\n  ) internal view {\r\n    _sendLogPayload(\r\n      abi.encodeWithSignature(\"log(address,address,bool,uint)\", p0, p1, p2, p3)\r\n    );\r\n  }\r\n\r\n  function log(\r\n    address p0,\r\n    address p1,\r\n    bool p2,\r\n    string memory p3\r\n  ) internal view {\r\n    _sendLogPayload(\r\n      abi.encodeWithSignature(\r\n        \"log(address,address,bool,string)\",\r\n        p0,\r\n        p1,\r\n        p2,\r\n        p3\r\n      )\r\n    );\r\n  }\r\n\r\n  function log(\r\n    address p0,\r\n    address p1,\r\n    bool p2,\r\n    bool p3\r\n  ) internal view {\r\n    _sendLogPayload(\r\n      abi.encodeWithSignature(\"log(address,address,bool,bool)\", p0, p1, p2, p3)\r\n    );\r\n  }\r\n\r\n  function log(\r\n    address p0,\r\n    address p1,\r\n    bool p2,\r\n    address p3\r\n  ) internal view {\r\n    _sendLogPayload(\r\n      abi.encodeWithSignature(\r\n        \"log(address,address,bool,address)\",\r\n        p0,\r\n        p1,\r\n        p2,\r\n        p3\r\n      )\r\n    );\r\n  }\r\n\r\n  function log(\r\n    address p0,\r\n    address p1,\r\n    address p2,\r\n    uint256 p3\r\n  ) internal view {\r\n    _sendLogPayload(\r\n      abi.encodeWithSignature(\r\n        \"log(address,address,address,uint)\",\r\n        p0,\r\n        p1,\r\n        p2,\r\n        p3\r\n      )\r\n    );\r\n  }\r\n\r\n  function log(\r\n    address p0,\r\n    address p1,\r\n    address p2,\r\n    string memory p3\r\n  ) internal view {\r\n    _sendLogPayload(\r\n      abi.encodeWithSignature(\r\n        \"log(address,address,address,string)\",\r\n        p0,\r\n        p1,\r\n        p2,\r\n        p3\r\n      )\r\n    );\r\n  }\r\n\r\n  function log(\r\n    address p0,\r\n    address p1,\r\n    address p2,\r\n    bool p3\r\n  ) internal view {\r\n    _sendLogPayload(\r\n      abi.encodeWithSignature(\r\n        \"log(address,address,address,bool)\",\r\n        p0,\r\n        p1,\r\n        p2,\r\n        p3\r\n      )\r\n    );\r\n  }\r\n\r\n  function log(\r\n    address p0,\r\n    address p1,\r\n    address p2,\r\n    address p3\r\n  ) internal view {\r\n    _sendLogPayload(\r\n      abi.encodeWithSignature(\r\n        \"log(address,address,address,address)\",\r\n        p0,\r\n        p1,\r\n        p2,\r\n        p3\r\n      )\r\n    );\r\n  }\r\n}\r\n\r\n// File contracts/Coinvise.sol\r\n\r\npragma solidity ^0.7.4;\r\npragma experimental ABIEncoderV2;\r\n\r\ninterface IERC20Extended is IERC20 {\r\n  function decimals() external view returns (uint8);\r\n}\r\n\r\ncontract CoinviseFlattened is\r\n  Initializable,\r\n  OwnableUpgradeable,\r\n  EIP712MetaTransactionUpgradeable\r\n{\r\n  using SafeMath for uint256;\r\n  using SafeERC20 for IERC20Extended;\r\n  using SafeERC20 for IERC20;\r\n\r\n  event CampaignCreated(uint256 indexed campaignId);\r\n  event UserRewarded(\r\n    address indexed managerAddress,\r\n    uint256 indexed campaignId,\r\n    address indexed userAddress,\r\n    address tokenAddress,\r\n    uint256 amount\r\n  );\r\n  event Multisent(\r\n    address indexed tokenAddress,\r\n    uint256 recipientsAmount,\r\n    uint256 amount\r\n  );\r\n  event Withdrawn(address indexed recipient, uint256 amount);\r\n\r\n  event Deposited(\r\n    uint256 depositId,\r\n    address indexed depositor,\r\n    address token,\r\n    uint256 amount,\r\n    uint256 price\r\n  );\r\n  event Bought(\r\n    address user,\r\n    uint256 depositId,\r\n    address owner,\r\n    address token,\r\n    uint256 amount,\r\n    uint256 price\r\n  );\r\n  event WithdrawnDepositOwnerBalance(address user, uint256 amount);\r\n\r\n  struct Campaign {\r\n    uint256 campaignId;\r\n    address manager;\r\n    address tokenAddress;\r\n    uint256 initialBalance;\r\n    uint256 remainingBalance;\r\n    uint256 linksAmount;\r\n    uint256 amountPerLink;\r\n    uint256 linksRewardedCount;\r\n  }\r\n\r\n  struct Deposit {\r\n    uint256 depositId;\r\n    address owner;\r\n    address token;\r\n    uint256 initialBalance;\r\n    uint256 remainingBalance;\r\n    uint256 price;\r\n  }\r\n\r\n  /**\r\n   * @dev Following are the state variables for this contract\r\n   *      Due to resrictions of the proxy pattern, do not change the type or order\r\n   *      of the state variables.\r\n   *      https://docs.openzeppelin.com/upgrades-plugins/1.x/writing-upgradeable\r\n   */\r\n\r\n  uint256 totalDepositOwnersBalanceInWei;\r\n\r\n  // Next campaign ID by manager\r\n  mapping(address => uint256) internal nextCampaignId;\r\n\r\n  // All campaigns (userAddress => campaignId => Campaign)\r\n  mapping(address => mapping(uint256 => Campaign)) internal campaigns;\r\n\r\n  // All campaign IDs of a user (userAddress => campaignIds[])\r\n  mapping(address => uint256[]) internal campaignIds;\r\n\r\n  // Rewarded addresses by a campaign (campaignId => userAddress[])\r\n  mapping(address => mapping(uint256 => mapping(address => bool)))\r\n    internal addressRewarded;\r\n\r\n  // Rewarded links by a campaign (campaignId => slug[])\r\n  mapping(uint256 => mapping(string => bool)) internal linksRewarded;\r\n\r\n  // Next deposit ID by owner\r\n  mapping(address => uint256) internal nextDepositId;\r\n\r\n  // Deposits by user (userAddress => (depositId => deposit)\r\n  mapping(address => mapping(uint256 => Deposit)) internal deposits;\r\n\r\n  // All deposits IDs of a user (userAddress => depositIds[])\r\n  mapping(address => uint256[]) internal depositIds;\r\n\r\n  // Balances by owner\r\n  mapping(address => uint256) internal depositOwnersBalancesInWei;\r\n\r\n  // This is an address whose private key lives in the coinvise backend\r\n  // Used for signature verification\r\n  address private trustedAddress;\r\n\r\n  // Premiums Charged on Various Services\r\n  uint256 public airdropPerLinkWeiCharged;\r\n  uint256 public multisendPerLinkWeiCharged;\r\n  uint256 public depositPercentageCharged;\r\n  uint256 public depositPercentageChargedDecimals;\r\n\r\n  // Add any new state variables here\r\n  // End of state variables\r\n\r\n  /**\r\n   * @dev We cannot have constructors in upgradeable contracts,\r\n   *      therefore we define an initialize function which we call\r\n   *      manually once the contract is deployed.\r\n   *      the initializer modififer ensures that this can only be called once.\r\n   *      in practice, the openzeppelin library automatically calls the intitazie\r\n   *      function once deployed.\r\n   */\r\n  function initialize(\r\n    address _trustedAddress,\r\n    uint256 _airdropPerLinkWeiCharged,\r\n    uint256 _multisendPerLinkWeiCharged,\r\n    uint256 _depositPercentageCharged,\r\n    uint256 _depositPercentageChargedDecimals\r\n  ) public initializer {\r\n    // Call intialize of Base Contracts\r\n    OwnableUpgradeable.__Ownable_init();\r\n    EIP712MetaTransactionUpgradeable._initialize(\"Coinvise\", \"1\");\r\n    trustedAddress = _trustedAddress;\r\n\r\n    // Set premiums\r\n    airdropPerLinkWeiCharged = _airdropPerLinkWeiCharged;\r\n    multisendPerLinkWeiCharged = _multisendPerLinkWeiCharged;\r\n    depositPercentageCharged = _depositPercentageCharged;\r\n    depositPercentageChargedDecimals = _depositPercentageChargedDecimals;\r\n  }\r\n\r\n  function setAirdropPremiums(uint256 _airdropPerLinkWeiCharged)\r\n    external\r\n    onlyOwner\r\n  {\r\n    airdropPerLinkWeiCharged = _airdropPerLinkWeiCharged;\r\n  }\r\n\r\n  function setMultisendPremiums(uint256 _mulisendPerLinkWeiCharged)\r\n    external\r\n    onlyOwner\r\n  {\r\n    multisendPerLinkWeiCharged = _mulisendPerLinkWeiCharged;\r\n  }\r\n\r\n  function setDepositPremiums(\r\n    uint256 _depositPercentageCharged,\r\n    uint256 _depositPercentageChargedDecimals\r\n  ) external onlyOwner {\r\n    depositPercentageCharged = _depositPercentageCharged;\r\n    depositPercentageChargedDecimals = _depositPercentageChargedDecimals;\r\n  }\r\n\r\n  function setTrustedAddress(address _trustedAddress) external onlyOwner {\r\n    trustedAddress = _trustedAddress;\r\n  }\r\n\r\n  function withdraw() external onlyOwner {\r\n    uint256 totalBalance = address(this).balance;\r\n    uint256 balance = totalBalance.sub(totalDepositOwnersBalanceInWei);\r\n    msg.sender.transfer(balance);\r\n    emit Withdrawn(msg.sender, balance);\r\n  }\r\n\r\n  // Generate Links\r\n  function _createCampaign(\r\n    address _tokenAddress,\r\n    uint256 _linksAmount,\r\n    uint256 _amountPerLink\r\n  ) internal returns (uint256 _campaignId) {\r\n    require(_linksAmount > 0, \"ERR__LINKS_AMOUNT_MUST_BE_GREATHER_THAN_ZERO\");\r\n    require(\r\n      _amountPerLink > 0,\r\n      \"ERR__AMOUNT_PER_LINK_MUST_BE_GREATHER_THAN_ZERO\"\r\n    );\r\n\r\n    uint256 _initialBalance = _linksAmount.mul(_amountPerLink);\r\n    address _sender = msgSender();\r\n\r\n    IERC20(_tokenAddress).safeTransferFrom(\r\n      _sender,\r\n      address(this),\r\n      _initialBalance\r\n    );\r\n\r\n    _campaignId = getCampaignId();\r\n\r\n    Campaign memory _campaign =\r\n      Campaign({\r\n        campaignId: _campaignId,\r\n        manager: _sender,\r\n        tokenAddress: _tokenAddress,\r\n        initialBalance: _initialBalance,\r\n        remainingBalance: _initialBalance,\r\n        linksAmount: _linksAmount,\r\n        amountPerLink: _amountPerLink,\r\n        linksRewardedCount: 0\r\n      });\r\n\r\n    campaigns[_sender][_campaignId] = _campaign;\r\n    campaignIds[_sender].push(_campaignId);\r\n\r\n    emit CampaignCreated(_campaignId);\r\n\r\n    return _campaignId;\r\n  }\r\n\r\n  // Generate Links\r\n  function createCampaignMeta(\r\n    address _tokenAddress,\r\n    uint256 _linksAmount,\r\n    uint256 _amountPerLink\r\n  ) external returns (uint256) {\r\n    return _createCampaign(_tokenAddress, _linksAmount, _amountPerLink);\r\n  }\r\n\r\n  function createCampaign(\r\n    address _tokenAddress,\r\n    uint256 _linksAmount,\r\n    uint256 _amountPerLink\r\n  ) external payable returns (uint256 _campaignId) {\r\n    uint256 priceInWei = airdropPerLinkWeiCharged * _linksAmount;\r\n    require(msg.value == priceInWei, \"ERR__CAMPAIGN_PRICE_MUST_BE_PAID\");\r\n\r\n    return _createCampaign(_tokenAddress, _linksAmount, _amountPerLink);\r\n  }\r\n\r\n  function getCampaign(address _campaignManager, uint256 _campaignId)\r\n    external\r\n    view\r\n    returns (\r\n      uint256,\r\n      address,\r\n      address,\r\n      uint256,\r\n      uint256,\r\n      uint256,\r\n      uint256,\r\n      uint256\r\n    )\r\n  {\r\n    require(\r\n      campaigns[_campaignManager][_campaignId].campaignId == _campaignId,\r\n      \"ERR__CAMPAIGN_DOES_NOT_EXIST\"\r\n    );\r\n\r\n    Campaign memory _campaign = campaigns[_campaignManager][_campaignId];\r\n\r\n    return (\r\n      _campaign.campaignId,\r\n      _campaign.manager,\r\n      _campaign.tokenAddress,\r\n      _campaign.initialBalance,\r\n      _campaign.remainingBalance,\r\n      _campaign.linksAmount,\r\n      _campaign.amountPerLink,\r\n      _campaign.linksRewardedCount\r\n    );\r\n  }\r\n\r\n  function getCampaignIdsFromManager(address _campaignManager)\r\n    external\r\n    view\r\n    returns (uint256[] memory)\r\n  {\r\n    return campaignIds[_campaignManager];\r\n  }\r\n\r\n  function claim(\r\n    address _campaignManager,\r\n    uint256 _campaignId,\r\n    bytes32 r,\r\n    bytes32 s,\r\n    uint8 v\r\n  ) external {\r\n    require(\r\n      campaigns[_campaignManager][_campaignId].campaignId == _campaignId,\r\n      \"ERR__CAMPAIGN_DOES_NOT_EXIST\"\r\n    );\r\n\r\n    address _claimer = msgSender();\r\n    Campaign memory _campaign = campaigns[_campaignManager][_campaignId];\r\n\r\n    require(\r\n      addressRewarded[_campaignManager][_campaignId][_claimer] != true,\r\n      \"ERR__ADDRESS_ALREADY_REWARDED\"\r\n    );\r\n    // require(linksRewarded[_campaignId][_slug] != true, \"ERR__LINK_ALREADY_REWARDED\");\r\n\r\n    // Check if signature is correct\r\n    bytes32 messageHash =\r\n      keccak256(\r\n        abi.encodePacked(\r\n          \"\\x19Ethereum Signed Message:\\n32\",\r\n          keccak256(abi.encode(_campaignManager, _campaignId, _claimer))\r\n        )\r\n      );\r\n    address signer = ecrecover(messageHash, v, r, s);\r\n    require(signer == trustedAddress, \"ERR__INVALID_SIGNER\");\r\n\r\n    require(\r\n      _campaign.linksRewardedCount < _campaign.linksAmount,\r\n      \"ERR__ALL_LINKS_USED\"\r\n    );\r\n    require(\r\n      _campaign.remainingBalance >= _campaign.amountPerLink,\r\n      \"ERR_NOT_ENOUGH_BALANCE_FOR_REWARDING\"\r\n    );\r\n\r\n    address _token = _campaign.tokenAddress;\r\n\r\n    IERC20(_token).safeTransfer(_claimer, _campaign.amountPerLink);\r\n\r\n    // Mark as rewarded\r\n    addressRewarded[_campaignManager][_campaignId][_claimer] = true;\r\n    campaigns[_campaignManager][_campaignId].linksRewardedCount = _campaign\r\n      .linksRewardedCount\r\n      .add(1);\r\n    campaigns[_campaignManager][_campaignId].remainingBalance = _campaign\r\n      .remainingBalance\r\n      .sub(_campaign.amountPerLink);\r\n\r\n    // Emit event\r\n    emit UserRewarded(\r\n      _campaignManager,\r\n      _campaignId,\r\n      _claimer,\r\n      _token,\r\n      _campaign.amountPerLink\r\n    );\r\n  }\r\n\r\n  function _multisend(\r\n    address _token,\r\n    address[] memory _recipients,\r\n    uint256[] memory _amounts\r\n  ) internal {\r\n    uint256 recipientsLength = _recipients.length;\r\n    uint256 amountsLength = _amounts.length;\r\n\r\n    require(amountsLength == recipientsLength, \"ERR__INVALID_ARGS\");\r\n\r\n    address _user = msgSender();\r\n    uint256 _totalAmount = 0;\r\n\r\n    uint8 i = 0;\r\n    for (i; i < recipientsLength; i++) {\r\n      IERC20(_token).safeTransferFrom(_user, _recipients[i], _amounts[i]);\r\n      _totalAmount = _totalAmount.add(_amounts[i]);\r\n    }\r\n\r\n    // Emit event\r\n    emit Multisent(_token, recipientsLength, _totalAmount);\r\n  }\r\n\r\n  function multisend(\r\n    address _token,\r\n    address[] memory _recipients,\r\n    uint256[] memory _amounts\r\n  ) external payable {\r\n    uint256 recipientsLength = _recipients.length;\r\n\r\n    require(\r\n      msg.value == multisendPerLinkWeiCharged * recipientsLength,\r\n      \"ERR__MULTISEND_PRICE_MUST_BE_PAID\"\r\n    );\r\n\r\n    _multisend(_token, _recipients, _amounts);\r\n  }\r\n\r\n  function multisendMeta(\r\n    address _token,\r\n    address[] memory _recipients,\r\n    uint256[] memory _amounts\r\n  ) external {\r\n    _multisend(_token, _recipients, _amounts);\r\n  }\r\n\r\n  function getCampaignId() internal returns (uint256 _campaignId) {\r\n    address _campaignManager = msg.sender;\r\n    _campaignId = nextCampaignId[_campaignManager];\r\n\r\n    if (_campaignId <= 0) {\r\n      _campaignId = 1;\r\n    }\r\n\r\n    nextCampaignId[_campaignManager] = _campaignId.add(1);\r\n\r\n    return _campaignId;\r\n  }\r\n\r\n  function getCampaignRewardedCount(address _manager, uint256 _campaignId)\r\n    external\r\n    view\r\n    returns (uint256)\r\n  {\r\n    return campaigns[_manager][_campaignId].linksRewardedCount;\r\n  }\r\n\r\n  function _depositToken(\r\n    address _token,\r\n    uint256 _amount,\r\n    uint256 _price\r\n  ) internal returns (uint256 _depositId) {\r\n    require(_amount > 0, \"ERR__AMOUNT_MUST_BE_GREATHER_THAN_ZERO\");\r\n    require(_price > 0, \"ERR__PRICE_MUST_BE_GREATHER_THAN_ZERO\");\r\n\r\n    IERC20Extended tokenContract = IERC20Extended(_token);\r\n\r\n    address _owner = msg.sender;\r\n    tokenContract.safeTransferFrom(_owner, address(this), _amount);\r\n\r\n    _depositId = getDepositId();\r\n    Deposit memory _deposit =\r\n      Deposit({\r\n        depositId: _depositId,\r\n        owner: _owner,\r\n        token: _token,\r\n        initialBalance: _amount,\r\n        remainingBalance: _amount,\r\n        price: _price\r\n      });\r\n\r\n    deposits[_owner][_depositId] = _deposit;\r\n    depositIds[_owner].push(_depositId);\r\n\r\n    emit Deposited(_depositId, _owner, _token, _amount, _price);\r\n  }\r\n\r\n  function depositToken(\r\n    address _token,\r\n    uint256 _amount,\r\n    uint256 _price\r\n  ) external payable returns (uint256 _depositId) {\r\n    IERC20Extended tokenContract = IERC20Extended(_token);\r\n    uint256 decimalsZeros = 10**tokenContract.decimals();\r\n    uint256 priceInWei =\r\n      _price\r\n        .mul(_amount.div(decimalsZeros))\r\n        .div(100)\r\n        .mul(depositPercentageCharged)\r\n        .div(10**depositPercentageChargedDecimals); // depositPercentageCharged% fee\r\n    require(msg.value == priceInWei, \"ERR__PRICE_MUST_BE_PAID\");\r\n\r\n    return _depositToken(_token, _amount, _price);\r\n  }\r\n\r\n  function getDepositIdsFromOwner(address _owner)\r\n    external\r\n    view\r\n    returns (uint256[] memory)\r\n  {\r\n    return depositIds[_owner];\r\n  }\r\n\r\n  function getDeposit(address _owner, uint256 _depositId)\r\n    external\r\n    view\r\n    returns (\r\n      uint256,\r\n      address,\r\n      address,\r\n      uint256,\r\n      uint256,\r\n      uint256\r\n    )\r\n  {\r\n    require(\r\n      deposits[_owner][_depositId].depositId == _depositId,\r\n      \"ERR__DEPOSIT_DOES_NOT_EXIST\"\r\n    );\r\n\r\n    Deposit memory _deposit = deposits[_owner][_depositId];\r\n\r\n    return (\r\n      _deposit.depositId,\r\n      _deposit.owner,\r\n      _deposit.token,\r\n      _deposit.initialBalance,\r\n      _deposit.remainingBalance,\r\n      _deposit.price\r\n    );\r\n  }\r\n\r\n  function buyToken(\r\n    uint256 _depositId,\r\n    address payable _owner,\r\n    uint256 _amount\r\n  ) external payable {\r\n    require(\r\n      deposits[_owner][_depositId].depositId == _depositId,\r\n      \"ERR__DEPOSIT_DOES_NOT_EXIST\"\r\n    );\r\n    Deposit memory _deposit = deposits[_owner][_depositId];\r\n    require(_amount > 0, \"ERR__AMOUNT_MUST_BE_GREATHER_THAN_ZERO\");\r\n    require(\r\n      _deposit.remainingBalance >= _amount,\r\n      \"ERR_NOT_ENOUGH_BALANCE_TO_BUY\"\r\n    );\r\n\r\n    IERC20Extended tokenContract = IERC20Extended(_deposit.token);\r\n    uint256 decimalsZeros = 10**tokenContract.decimals();\r\n    uint256 totalPrice = _deposit.price.mul(_amount.div(decimalsZeros));\r\n    require(msg.value == totalPrice, \"ERR__TOTAL_PRICE_MUST_BE_PAID\");\r\n\r\n    deposits[_owner][_depositId].remainingBalance = _deposit\r\n      .remainingBalance\r\n      .sub(_amount);\r\n    IERC20(_deposit.token).safeTransfer(msg.sender, _amount);\r\n\r\n    depositOwnersBalancesInWei[_owner] = depositOwnersBalancesInWei[_owner].add(\r\n      msg.value\r\n    );\r\n    totalDepositOwnersBalanceInWei = totalDepositOwnersBalanceInWei.add(\r\n      msg.value\r\n    );\r\n\r\n    emit Bought(\r\n      msg.sender,\r\n      _depositId,\r\n      _owner,\r\n      _deposit.token,\r\n      _amount,\r\n      _deposit.price\r\n    );\r\n  }\r\n\r\n  function withdrawDepositOwnerBalance() external {\r\n    address payable owner = msg.sender;\r\n    require(\r\n      depositOwnersBalancesInWei[owner] > 0,\r\n      \"ERR_NO_BALANCE_TO_WITHDRAW\"\r\n    );\r\n    uint256 toWithdraw = depositOwnersBalancesInWei[owner];\r\n    depositOwnersBalancesInWei[owner] = 0;\r\n    totalDepositOwnersBalanceInWei = totalDepositOwnersBalanceInWei.sub(\r\n      toWithdraw\r\n    );\r\n    require(\r\n      totalDepositOwnersBalanceInWei >= 0,\r\n      \"ERR_NO_GENERAL_BALANCE_TO_WITHDRAW\"\r\n    );\r\n\r\n    owner.transfer(toWithdraw);\r\n\r\n    emit WithdrawnDepositOwnerBalance(owner, toWithdraw);\r\n  }\r\n\r\n  function getDepositOwnerBalance() external view returns (uint256) {\r\n    return depositOwnersBalancesInWei[msg.sender];\r\n  }\r\n\r\n  function getCoinviseBalance() external view returns (uint256) {\r\n    uint256 totalBalance = address(this).balance;\r\n    return totalBalance.sub(totalDepositOwnersBalanceInWei);\r\n  }\r\n\r\n  function getDepositId() internal returns (uint256 _depositId) {\r\n    _depositId = nextDepositId[msg.sender];\r\n\r\n    if (_depositId <= 0) {\r\n      _depositId = 1;\r\n    }\r\n\r\n    nextDepositId[msg.sender] = _depositId.add(1);\r\n\r\n    return _depositId;\r\n  }\r\n}","ABI":"[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"depositId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"Bought\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"campaignId\",\"type\":\"uint256\"}],\"name\":\"CampaignCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"depositId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"depositor\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"Deposited\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address payable\",\"name\":\"relayerAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"functionSignature\",\"type\":\"bytes\"}],\"name\":\"MetaTransactionExecuted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"recipientsAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Multisent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"managerAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"campaignId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"UserRewarded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Withdrawn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"WithdrawnDepositOwnerBalance\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_version\",\"type\":\"string\"}],\"name\":\"_initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"airdropPerLinkWeiCharged\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_depositId\",\"type\":\"uint256\"},{\"internalType\":\"address payable\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"buyToken\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_campaignManager\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_campaignId\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"}],\"name\":\"claim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_linksAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amountPerLink\",\"type\":\"uint256\"}],\"name\":\"createCampaign\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_campaignId\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_linksAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amountPerLink\",\"type\":\"uint256\"}],\"name\":\"createCampaignMeta\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"depositPercentageCharged\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"depositPercentageChargedDecimals\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_price\",\"type\":\"uint256\"}],\"name\":\"depositToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_depositId\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"functionSignature\",\"type\":\"bytes\"},{\"internalType\":\"bytes32\",\"name\":\"sigR\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"sigS\",\"type\":\"bytes32\"},{\"internalType\":\"uint8\",\"name\":\"sigV\",\"type\":\"uint8\"}],\"name\":\"executeMetaTransaction\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_campaignManager\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_campaignId\",\"type\":\"uint256\"}],\"name\":\"getCampaign\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_campaignManager\",\"type\":\"address\"}],\"name\":\"getCampaignIdsFromManager\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_manager\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_campaignId\",\"type\":\"uint256\"}],\"name\":\"getCampaignRewardedCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCoinviseBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_depositId\",\"type\":\"uint256\"}],\"name\":\"getDeposit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"getDepositIdsFromOwner\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getDepositOwnerBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getNonce\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_trustedAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_airdropPerLinkWeiCharged\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_multisendPerLinkWeiCharged\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_depositPercentageCharged\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_depositPercentageChargedDecimals\",\"type\":\"uint256\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"_recipients\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_amounts\",\"type\":\"uint256[]\"}],\"name\":\"multisend\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"_recipients\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_amounts\",\"type\":\"uint256[]\"}],\"name\":\"multisendMeta\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"multisendPerLinkWeiCharged\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_airdropPerLinkWeiCharged\",\"type\":\"uint256\"}],\"name\":\"setAirdropPremiums\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_depositPercentageCharged\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_depositPercentageChargedDecimals\",\"type\":\"uint256\"}],\"name\":\"setDepositPremiums\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_mulisendPerLinkWeiCharged\",\"type\":\"uint256\"}],\"name\":\"setMultisendPremiums\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_trustedAddress\",\"type\":\"address\"}],\"name\":\"setTrustedAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawDepositOwnerBalance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"CoinviseFlattened","CompilerVersion":"v0.7.4+commit.3f05b770","OptimizationUsed":"1","Runs":"99999","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"Unlicense","Proxy":"0","Implementation":"","SwarmSource":"ipfs://f42fbe399e04db95b0a0cf6182cdd4a861286d09353fd5aa154743963d0ebab6"}]}