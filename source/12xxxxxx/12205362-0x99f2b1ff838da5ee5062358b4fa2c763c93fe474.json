{"status":"1","message":"OK","result":[{"SourceCode":"// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.0;\n\n\n\n// Part: IERC721\n\ninterface IERC721 {\n    /// @notice Transfer ownership of an NFT -- THE CALLER IS RESPONSIBLE\n    ///  TO CONFIRM THAT `_to` IS CAPABLE OF RECEIVING NFTS OR ELSE\n    ///  THEY MAY BE PERMANENTLY LOST\n    /// @dev Throws unless `msg.sender` is the current owner, an authorized\n    ///  operator, or the approved address for this NFT. Throws if `_from` is\n    ///  not the current owner. Throws if `_to` is the zero address. Throws if\n    ///  `_tokenId` is not a valid NFT.\n    /// @param _from The current owner of the NFT\n    /// @param _to The new owner\n    /// @param _tokenId The NFT to transfer\n    function transferFrom(address _from, address _to, uint256 _tokenId) external payable;\n\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes memory _data) external;\n    \n    function setApprovalForAll(address operator, bool approved) external;\n\n    function approve(address to, uint256 tokenId) external;\n    \n    function isApprovedForAll(address owner, address operator) external returns (bool);\n}\n\n// Part: ISuperRare\n\ninterface ISuperRare {\n    /**\n     * @dev Purchases the token if it is for sale.\n     * @param _originContract address of the contract storing the token.\n     * @param _tokenId uint256 ID of the token.\n     */\n    function buy(address _originContract, uint256 _tokenId) external payable;\n\n    /**\n     * @dev Gets the sale price of the token including the marketplace fee.\n     * @param _originContract address of the contract storing the token.\n     * @param _tokenId uint256 ID of the token\n     * @return uint256 sale price of the token including the fee.\n     */\n    function tokenPriceFeeIncluded(address _originContract, uint256 _tokenId)\n    external\n    view\n    returns (uint256);\n}\n\n// File: SuperRareMarket.sol\n\nlibrary SuperRareMarket {\n\n    address public constant SUPERRARE = 0x65B49f7AEE40347f5A90b714be4eF086f3fe5E2C;\n    address public constant SUPR = 0xb932a70A57673d89f4acfFBE830E8ed7f75Fb9e0;\n\n    function buyAssetsForEth(bytes memory data, address recipient) public {\n        uint256[] memory tokenIds;\n        (tokenIds) = abi.decode(\n            data,\n            (uint256[])\n        );\n        for (uint256 i = 0; i < tokenIds.length; i++) {\n            _buyAssetForEth(tokenIds[i], estimateAssetPriceInEth(tokenIds[i]), recipient);\n        }\n    }\n\n    function estimateAssetPriceInEth(uint256 tokenId) public view returns(uint256) {\n        return ISuperRare(SUPERRARE).tokenPriceFeeIncluded(SUPR, tokenId);\n    }\n\n    function estimateBatchAssetPriceInEth(bytes memory data) public view returns(uint256 totalCost) {\n        uint256[] memory tokenIds;\n        (tokenIds) = abi.decode(\n            data,\n            (uint256[])\n        );\n        for (uint256 i = 0; i < tokenIds.length; i++) {\n            totalCost += ISuperRare(SUPERRARE).tokenPriceFeeIncluded(SUPR, tokenIds[i]);\n        }\n    }\n\n    function _buyAssetForEth(uint256 _tokenId, uint256 _price, address _recipient) internal {\n        bytes memory _data = abi.encodeWithSelector(ISuperRare(SUPERRARE).buy.selector, SUPR, _tokenId);\n\n        (bool success, ) = SUPERRARE.call{value:_price}(_data);\n        require(success, \"_buyAssetForEth: SuperRare buy failed.\");\n\n        IERC721(SUPR).transferFrom(address(this), _recipient, _tokenId);        \n    }\n}\n","ABI":"[{\"inputs\":[],\"name\":\"SUPERRARE\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"SUPR\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"estimateAssetPriceInEth\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"estimateBatchAssetPriceInEth\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"totalCost\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"SuperRareMarket","CompilerVersion":"v0.8.0+commit.c7dfd78e","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":""}]}