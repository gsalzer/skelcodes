{"status":"1","message":"OK","result":[{"SourceCode":"// File: @openzeppelin/contracts/math/SafeMath.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     * - Subtraction cannot overflow.\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        // Solidity only automatically asserts when dividing by 0\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts with custom message when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n// File: contracts/interface/IAddressConfig.sol\r\n\r\n// SPDX-License-Identifier: MPL-2.0\r\npragma solidity >=0.5.17;\r\n\r\ninterface IAddressConfig {\r\n\tfunction token() external view returns (address);\r\n\r\n\tfunction allocator() external view returns (address);\r\n\r\n\tfunction allocatorStorage() external view returns (address);\r\n\r\n\tfunction withdraw() external view returns (address);\r\n\r\n\tfunction withdrawStorage() external view returns (address);\r\n\r\n\tfunction marketFactory() external view returns (address);\r\n\r\n\tfunction marketGroup() external view returns (address);\r\n\r\n\tfunction propertyFactory() external view returns (address);\r\n\r\n\tfunction propertyGroup() external view returns (address);\r\n\r\n\tfunction metricsGroup() external view returns (address);\r\n\r\n\tfunction metricsFactory() external view returns (address);\r\n\r\n\tfunction policy() external view returns (address);\r\n\r\n\tfunction policyFactory() external view returns (address);\r\n\r\n\tfunction policySet() external view returns (address);\r\n\r\n\tfunction policyGroup() external view returns (address);\r\n\r\n\tfunction lockup() external view returns (address);\r\n\r\n\tfunction lockupStorage() external view returns (address);\r\n\r\n\tfunction voteTimes() external view returns (address);\r\n\r\n\tfunction voteTimesStorage() external view returns (address);\r\n\r\n\tfunction voteCounter() external view returns (address);\r\n\r\n\tfunction voteCounterStorage() external view returns (address);\r\n\r\n\tfunction setAllocator(address _addr) external;\r\n\r\n\tfunction setAllocatorStorage(address _addr) external;\r\n\r\n\tfunction setWithdraw(address _addr) external;\r\n\r\n\tfunction setWithdrawStorage(address _addr) external;\r\n\r\n\tfunction setMarketFactory(address _addr) external;\r\n\r\n\tfunction setMarketGroup(address _addr) external;\r\n\r\n\tfunction setPropertyFactory(address _addr) external;\r\n\r\n\tfunction setPropertyGroup(address _addr) external;\r\n\r\n\tfunction setMetricsFactory(address _addr) external;\r\n\r\n\tfunction setMetricsGroup(address _addr) external;\r\n\r\n\tfunction setPolicyFactory(address _addr) external;\r\n\r\n\tfunction setPolicyGroup(address _addr) external;\r\n\r\n\tfunction setPolicySet(address _addr) external;\r\n\r\n\tfunction setPolicy(address _addr) external;\r\n\r\n\tfunction setToken(address _addr) external;\r\n\r\n\tfunction setLockup(address _addr) external;\r\n\r\n\tfunction setLockupStorage(address _addr) external;\r\n\r\n\tfunction setVoteTimes(address _addr) external;\r\n\r\n\tfunction setVoteTimesStorage(address _addr) external;\r\n\r\n\tfunction setVoteCounter(address _addr) external;\r\n\r\n\tfunction setVoteCounterStorage(address _addr) external;\r\n}\r\n\r\n// File: contracts/src/common/config/UsingConfig.sol\r\n\r\npragma solidity 0.5.17;\r\n\r\n\r\n/**\r\n * Module for using AddressConfig contracts.\r\n */\r\ncontract UsingConfig {\r\n\taddress private _config;\r\n\r\n\t/**\r\n\t * Initialize the argument as AddressConfig address.\r\n\t */\r\n\tconstructor(address _addressConfig) public {\r\n\t\t_config = _addressConfig;\r\n\t}\r\n\r\n\t/**\r\n\t * Returns the latest AddressConfig instance.\r\n\t */\r\n\tfunction config() internal view returns (IAddressConfig) {\r\n\t\treturn IAddressConfig(_config);\r\n\t}\r\n\r\n\t/**\r\n\t * Returns the latest AddressConfig address.\r\n\t */\r\n\tfunction configAddress() external view returns (address) {\r\n\t\treturn _config;\r\n\t}\r\n}\r\n\r\n// File: contracts/interface/IUsingStorage.sol\r\n\r\n// SPDX-License-Identifier: MPL-2.0\r\npragma solidity >=0.5.17;\r\n\r\ninterface IUsingStorage {\r\n\tfunction getStorageAddress() external view returns (address);\r\n\r\n\tfunction createStorage() external;\r\n\r\n\tfunction setStorage(address _storageAddress) external;\r\n\r\n\tfunction changeOwner(address newOwner) external;\r\n}\r\n\r\n// File: @openzeppelin/contracts/GSN/Context.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n/*\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with GSN meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\ncontract Context {\r\n    // Empty internal constructor, to prevent people from mistakenly deploying\r\n    // an instance of this contract, which should be used via inheritance.\r\n    constructor () internal { }\r\n    // solhint-disable-previous-line no-empty-blocks\r\n\r\n    function _msgSender() internal view returns (address payable) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view returns (bytes memory) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/ownership/Ownable.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\ncontract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor () internal {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(isOwner(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the caller is the current owner.\r\n     */\r\n    function isOwner() public view returns (bool) {\r\n        return _msgSender() == _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     */\r\n    function _transferOwnership(address newOwner) internal {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\n// File: contracts/src/common/storage/EternalStorage.sol\r\n\r\npragma solidity 0.5.17;\r\n\r\n/**\r\n * Module for persisting states.\r\n * Stores a map for `uint256`, `string`, `address`, `bytes32`, `bool`, and `int256` type with `bytes32` type as a key.\r\n */\r\ncontract EternalStorage {\r\n\taddress private currentOwner = msg.sender;\r\n\r\n\tmapping(bytes32 => uint256) private uIntStorage;\r\n\tmapping(bytes32 => string) private stringStorage;\r\n\tmapping(bytes32 => address) private addressStorage;\r\n\tmapping(bytes32 => bytes32) private bytesStorage;\r\n\tmapping(bytes32 => bool) private boolStorage;\r\n\tmapping(bytes32 => int256) private intStorage;\r\n\r\n\t/**\r\n\t * Modifiers to validate that only the owner can execute.\r\n\t */\r\n\tmodifier onlyCurrentOwner() {\r\n\t\trequire(msg.sender == currentOwner, \"not current owner\");\r\n\t\t_;\r\n\t}\r\n\r\n\t/**\r\n\t * Transfer the owner.\r\n\t * Only the owner can execute this function.\r\n\t */\r\n\tfunction changeOwner(address _newOwner) external {\r\n\t\trequire(msg.sender == currentOwner, \"not current owner\");\r\n\t\tcurrentOwner = _newOwner;\r\n\t}\r\n\r\n\t// *** Getter Methods ***\r\n\r\n\t/**\r\n\t * Returns the value of the `uint256` type that mapped to the given key.\r\n\t */\r\n\tfunction getUint(bytes32 _key) external view returns (uint256) {\r\n\t\treturn uIntStorage[_key];\r\n\t}\r\n\r\n\t/**\r\n\t * Returns the value of the `string` type that mapped to the given key.\r\n\t */\r\n\tfunction getString(bytes32 _key) external view returns (string memory) {\r\n\t\treturn stringStorage[_key];\r\n\t}\r\n\r\n\t/**\r\n\t * Returns the value of the `address` type that mapped to the given key.\r\n\t */\r\n\tfunction getAddress(bytes32 _key) external view returns (address) {\r\n\t\treturn addressStorage[_key];\r\n\t}\r\n\r\n\t/**\r\n\t * Returns the value of the `bytes32` type that mapped to the given key.\r\n\t */\r\n\tfunction getBytes(bytes32 _key) external view returns (bytes32) {\r\n\t\treturn bytesStorage[_key];\r\n\t}\r\n\r\n\t/**\r\n\t * Returns the value of the `bool` type that mapped to the given key.\r\n\t */\r\n\tfunction getBool(bytes32 _key) external view returns (bool) {\r\n\t\treturn boolStorage[_key];\r\n\t}\r\n\r\n\t/**\r\n\t * Returns the value of the `int256` type that mapped to the given key.\r\n\t */\r\n\tfunction getInt(bytes32 _key) external view returns (int256) {\r\n\t\treturn intStorage[_key];\r\n\t}\r\n\r\n\t// *** Setter Methods ***\r\n\r\n\t/**\r\n\t * Maps a value of `uint256` type to a given key.\r\n\t * Only the owner can execute this function.\r\n\t */\r\n\tfunction setUint(bytes32 _key, uint256 _value) external onlyCurrentOwner {\r\n\t\tuIntStorage[_key] = _value;\r\n\t}\r\n\r\n\t/**\r\n\t * Maps a value of `string` type to a given key.\r\n\t * Only the owner can execute this function.\r\n\t */\r\n\tfunction setString(bytes32 _key, string calldata _value)\r\n\t\texternal\r\n\t\tonlyCurrentOwner\r\n\t{\r\n\t\tstringStorage[_key] = _value;\r\n\t}\r\n\r\n\t/**\r\n\t * Maps a value of `address` type to a given key.\r\n\t * Only the owner can execute this function.\r\n\t */\r\n\tfunction setAddress(bytes32 _key, address _value)\r\n\t\texternal\r\n\t\tonlyCurrentOwner\r\n\t{\r\n\t\taddressStorage[_key] = _value;\r\n\t}\r\n\r\n\t/**\r\n\t * Maps a value of `bytes32` type to a given key.\r\n\t * Only the owner can execute this function.\r\n\t */\r\n\tfunction setBytes(bytes32 _key, bytes32 _value) external onlyCurrentOwner {\r\n\t\tbytesStorage[_key] = _value;\r\n\t}\r\n\r\n\t/**\r\n\t * Maps a value of `bool` type to a given key.\r\n\t * Only the owner can execute this function.\r\n\t */\r\n\tfunction setBool(bytes32 _key, bool _value) external onlyCurrentOwner {\r\n\t\tboolStorage[_key] = _value;\r\n\t}\r\n\r\n\t/**\r\n\t * Maps a value of `int256` type to a given key.\r\n\t * Only the owner can execute this function.\r\n\t */\r\n\tfunction setInt(bytes32 _key, int256 _value) external onlyCurrentOwner {\r\n\t\tintStorage[_key] = _value;\r\n\t}\r\n\r\n\t// *** Delete Methods ***\r\n\r\n\t/**\r\n\t * Deletes the value of the `uint256` type that mapped to the given key.\r\n\t * Only the owner can execute this function.\r\n\t */\r\n\tfunction deleteUint(bytes32 _key) external onlyCurrentOwner {\r\n\t\tdelete uIntStorage[_key];\r\n\t}\r\n\r\n\t/**\r\n\t * Deletes the value of the `string` type that mapped to the given key.\r\n\t * Only the owner can execute this function.\r\n\t */\r\n\tfunction deleteString(bytes32 _key) external onlyCurrentOwner {\r\n\t\tdelete stringStorage[_key];\r\n\t}\r\n\r\n\t/**\r\n\t * Deletes the value of the `address` type that mapped to the given key.\r\n\t * Only the owner can execute this function.\r\n\t */\r\n\tfunction deleteAddress(bytes32 _key) external onlyCurrentOwner {\r\n\t\tdelete addressStorage[_key];\r\n\t}\r\n\r\n\t/**\r\n\t * Deletes the value of the `bytes32` type that mapped to the given key.\r\n\t * Only the owner can execute this function.\r\n\t */\r\n\tfunction deleteBytes(bytes32 _key) external onlyCurrentOwner {\r\n\t\tdelete bytesStorage[_key];\r\n\t}\r\n\r\n\t/**\r\n\t * Deletes the value of the `bool` type that mapped to the given key.\r\n\t * Only the owner can execute this function.\r\n\t */\r\n\tfunction deleteBool(bytes32 _key) external onlyCurrentOwner {\r\n\t\tdelete boolStorage[_key];\r\n\t}\r\n\r\n\t/**\r\n\t * Deletes the value of the `int256` type that mapped to the given key.\r\n\t * Only the owner can execute this function.\r\n\t */\r\n\tfunction deleteInt(bytes32 _key) external onlyCurrentOwner {\r\n\t\tdelete intStorage[_key];\r\n\t}\r\n}\r\n\r\n// File: contracts/src/common/storage/UsingStorage.sol\r\n\r\npragma solidity 0.5.17;\r\n\r\n\r\n\r\n\r\n/**\r\n * Module for contrast handling EternalStorage.\r\n */\r\ncontract UsingStorage is Ownable, IUsingStorage {\r\n\taddress private _storage;\r\n\r\n\t/**\r\n\t * Modifier to verify that EternalStorage is set.\r\n\t */\r\n\tmodifier hasStorage() {\r\n\t\trequire(_storage != address(0), \"storage is not set\");\r\n\t\t_;\r\n\t}\r\n\r\n\t/**\r\n\t * Returns the set EternalStorage instance.\r\n\t */\r\n\tfunction eternalStorage()\r\n\t\tinternal\r\n\t\tview\r\n\t\thasStorage\r\n\t\treturns (EternalStorage)\r\n\t{\r\n\t\treturn EternalStorage(_storage);\r\n\t}\r\n\r\n\t/**\r\n\t * Returns the set EternalStorage address.\r\n\t */\r\n\tfunction getStorageAddress() external view hasStorage returns (address) {\r\n\t\treturn _storage;\r\n\t}\r\n\r\n\t/**\r\n\t * Create a new EternalStorage contract.\r\n\t * This function call will fail if the EternalStorage contract is already set.\r\n\t * Also, only the owner can execute it.\r\n\t */\r\n\tfunction createStorage() external onlyOwner {\r\n\t\trequire(_storage == address(0), \"storage is set\");\r\n\t\tEternalStorage tmp = new EternalStorage();\r\n\t\t_storage = address(tmp);\r\n\t}\r\n\r\n\t/**\r\n\t * Assigns the EternalStorage contract that has already been created.\r\n\t * Only the owner can execute this function.\r\n\t */\r\n\tfunction setStorage(address _storageAddress) external onlyOwner {\r\n\t\t_storage = _storageAddress;\r\n\t}\r\n\r\n\t/**\r\n\t * Delegates the owner of the current EternalStorage contract.\r\n\t * Only the owner can execute this function.\r\n\t */\r\n\tfunction changeOwner(address newOwner) external onlyOwner {\r\n\t\tEternalStorage(_storage).changeOwner(newOwner);\r\n\t}\r\n}\r\n\r\n// File: contracts/interface/IMetrics.sol\r\n\r\n// SPDX-License-Identifier: MPL-2.0\r\npragma solidity >=0.5.17;\r\n\r\ninterface IMetrics {\r\n\tfunction market() external view returns (address);\r\n\r\n\tfunction property() external view returns (address);\r\n}\r\n\r\n// File: contracts/interface/IMetricsGroup.sol\r\n\r\n// SPDX-License-Identifier: MPL-2.0\r\npragma solidity >=0.5.17;\r\n\r\ninterface IMetricsGroup {\r\n\tfunction addGroup(address _addr) external;\r\n\r\n\tfunction removeGroup(address _addr) external;\r\n\r\n\tfunction isGroup(address _addr) external view returns (bool);\r\n\r\n\tfunction totalIssuedMetrics() external view returns (uint256);\r\n\r\n\tfunction hasAssets(address _property) external view returns (bool);\r\n\r\n\tfunction getMetricsCountPerProperty(address _property)\r\n\t\texternal\r\n\t\tview\r\n\t\treturns (uint256);\r\n\r\n\tfunction totalAuthenticatedProperties() external view returns (uint256);\r\n\r\n\t// deplicated!!!!!!!\r\n\tfunction setTotalAuthenticatedPropertiesAdmin(uint256 _value) external;\r\n}\r\n\r\n// File: contracts/src/metrics/MetricsGroup.sol\r\n\r\npragma solidity 0.5.17;\r\n\r\n\r\n\r\n\r\n\r\n\r\ncontract MetricsGroup is UsingConfig, UsingStorage, IMetricsGroup {\r\n\tusing SafeMath for uint256;\r\n\r\n\tconstructor(address _config) public UsingConfig(_config) {}\r\n\r\n\tfunction addGroup(address _addr) external {\r\n\t\trequire(\r\n\t\t\tmsg.sender == config().metricsFactory(),\r\n\t\t\t\"this is illegal address\"\r\n\t\t);\r\n\r\n\t\trequire(\r\n\t\t\teternalStorage().getBool(getGroupKey(_addr)) == false,\r\n\t\t\t\"already enabled\"\r\n\t\t);\r\n\t\teternalStorage().setBool(getGroupKey(_addr), true);\r\n\t\taddress property = IMetrics(_addr).property();\r\n\t\tuint256 totalCount = eternalStorage().getUint(getTotalCountKey());\r\n\t\tuint256 metricsCountPerProperty = getMetricsCountPerProperty(property);\r\n\t\tif (metricsCountPerProperty == 0) {\r\n\t\t\tuint256 tmp =\r\n\t\t\t\teternalStorage().getUint(getTotalAuthenticatedPropertiesKey());\r\n\t\t\tsetTotalAuthenticatedProperties(tmp.add(1));\r\n\t\t}\r\n\t\ttotalCount = totalCount.add(1);\r\n\t\tmetricsCountPerProperty = metricsCountPerProperty.add(1);\r\n\t\tsetTotalIssuedMetrics(totalCount);\r\n\t\tsetMetricsCountPerProperty(property, metricsCountPerProperty);\r\n\t}\r\n\r\n\tfunction removeGroup(address _addr) external {\r\n\t\trequire(\r\n\t\t\tmsg.sender == config().metricsFactory(),\r\n\t\t\t\"this is illegal address\"\r\n\t\t);\r\n\r\n\t\trequire(\r\n\t\t\teternalStorage().getBool(getGroupKey(_addr)),\r\n\t\t\t\"address is not group\"\r\n\t\t);\r\n\t\teternalStorage().setBool(getGroupKey(_addr), false);\r\n\t\taddress property = IMetrics(_addr).property();\r\n\t\tuint256 totalCount = eternalStorage().getUint(getTotalCountKey());\r\n\t\tuint256 metricsCountPerProperty = getMetricsCountPerProperty(property);\r\n\t\tif (metricsCountPerProperty == 1) {\r\n\t\t\tuint256 tmp =\r\n\t\t\t\teternalStorage().getUint(getTotalAuthenticatedPropertiesKey());\r\n\t\t\tsetTotalAuthenticatedProperties(tmp.sub(1));\r\n\t\t}\r\n\t\ttotalCount = totalCount.sub(1);\r\n\t\tmetricsCountPerProperty = metricsCountPerProperty.sub(1);\r\n\t\tsetTotalIssuedMetrics(totalCount);\r\n\t\tsetMetricsCountPerProperty(property, metricsCountPerProperty);\r\n\t}\r\n\r\n\tfunction isGroup(address _addr) external view returns (bool) {\r\n\t\treturn eternalStorage().getBool(getGroupKey(_addr));\r\n\t}\r\n\r\n\tfunction totalIssuedMetrics() external view returns (uint256) {\r\n\t\treturn eternalStorage().getUint(getTotalCountKey());\r\n\t}\r\n\r\n\tfunction totalAuthenticatedProperties() external view returns (uint256) {\r\n\t\treturn eternalStorage().getUint(getTotalAuthenticatedPropertiesKey());\r\n\t}\r\n\r\n\tfunction hasAssets(address _property) external view returns (bool) {\r\n\t\treturn getMetricsCountPerProperty(_property) > 0;\r\n\t}\r\n\r\n\tfunction getMetricsCountPerProperty(address _property)\r\n\t\tpublic\r\n\t\tview\r\n\t\treturns (uint256)\r\n\t{\r\n\t\treturn\r\n\t\t\teternalStorage().getUint(getMetricsCountPerPropertyKey(_property));\r\n\t}\r\n\r\n\tfunction setMetricsCountPerProperty(address _property, uint256 _value)\r\n\t\tinternal\r\n\t{\r\n\t\teternalStorage().setUint(\r\n\t\t\tgetMetricsCountPerPropertyKey(_property),\r\n\t\t\t_value\r\n\t\t);\r\n\t}\r\n\r\n\tfunction setTotalIssuedMetrics(uint256 _value) private {\r\n\t\teternalStorage().setUint(getTotalCountKey(), _value);\r\n\t}\r\n\r\n\tfunction setTotalAuthenticatedProperties(uint256 _value) private {\r\n\t\teternalStorage().setUint(getTotalAuthenticatedPropertiesKey(), _value);\r\n\t}\r\n\r\n\t// deplicated!!!!!!!\r\n\tfunction setTotalAuthenticatedPropertiesAdmin(uint256 _value)\r\n\t\texternal\r\n\t\tonlyOwner\r\n\t{\r\n\t\teternalStorage().setUint(getTotalAuthenticatedPropertiesKey(), _value);\r\n\t}\r\n\r\n\tfunction getTotalCountKey() private pure returns (bytes32) {\r\n\t\treturn keccak256(abi.encodePacked(\"_totalCount\"));\r\n\t}\r\n\r\n\tfunction getMetricsCountPerPropertyKey(address _property)\r\n\t\tprivate\r\n\t\tpure\r\n\t\treturns (bytes32)\r\n\t{\r\n\t\treturn\r\n\t\t\tkeccak256(abi.encodePacked(\"_metricsCountPerProperty\", _property));\r\n\t}\r\n\r\n\tfunction getGroupKey(address _addr) private pure returns (bytes32) {\r\n\t\treturn keccak256(abi.encodePacked(\"_group\", _addr));\r\n\t}\r\n\r\n\tfunction getTotalAuthenticatedPropertiesKey()\r\n\t\tprivate\r\n\t\tpure\r\n\t\treturns (bytes32)\r\n\t{\r\n\t\treturn keccak256(abi.encodePacked(\"_totalAuthenticatedProperties\"));\r\n\t}\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_config\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"addGroup\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"changeOwner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"configAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"createStorage\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_property\",\"type\":\"address\"}],\"name\":\"getMetricsCountPerProperty\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getStorageAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_property\",\"type\":\"address\"}],\"name\":\"hasAssets\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"isGroup\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isOwner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"removeGroup\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_storageAddress\",\"type\":\"address\"}],\"name\":\"setStorage\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"setTotalAuthenticatedPropertiesAdmin\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalAuthenticatedProperties\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalIssuedMetrics\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"MetricsGroup","CompilerVersion":"v0.5.17+commit.d19bba13","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"0000000000000000000000001d415aa39d647834786eb9b5a333a50e9935b796","EVMVersion":"Default","Library":"","LicenseType":"MPL-2.0","Proxy":"0","Implementation":"","SwarmSource":"bzzr://d3550dee58addd2fb63cdcf986d207ad7c797b61779cbd9fd8510d6cae21b3d8"}]}