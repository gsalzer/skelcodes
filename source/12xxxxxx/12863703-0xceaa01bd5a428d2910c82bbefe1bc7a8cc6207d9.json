{"status":"1","message":"OK","result":[{"SourceCode":"// SPDX-License-Identifier: GPL-3.0-only\r\npragma solidity ^0.8.0;\r\n\r\ninterface IERC20 {\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n}\r\n\r\ninterface ENS {\r\n    function owner(bytes32 node) external view returns (address);\r\n    function resolver(bytes32 node) external view returns (address);\r\n}\r\n\r\ninterface ReverseRegistrar {\r\n    function setName(string memory name) external returns (bytes32);\r\n}\r\n\r\n/// A Radicle Org.\r\ncontract OrgV1 {\r\n    /// Object anchor.\r\n    struct Anchor {\r\n        // A tag that can be used to discriminate between anchor types.\r\n        uint32 tag;\r\n        // The hash being anchored in multihash format.\r\n        bytes multihash;\r\n    }\r\n\r\n    /// Output of namehash(\"addr.reverse\").\r\n    bytes32 public constant ADDR_REVERSE_NODE =\r\n        0x91d1777781884d03a6757a803996e38de2a42967fb37eeaca72729271025a9e2;\r\n\r\n    /// Org owner.\r\n    address public owner;\r\n\r\n    /// Latest anchor for each object.\r\n    mapping (bytes32 => Anchor) public anchors;\r\n\r\n    // -- EVENTS --\r\n\r\n    /// An object was anchored.\r\n    event Anchored(bytes32 id, uint32 tag, bytes multihash);\r\n\r\n    /// An object was unanchored.\r\n    event Unanchored(bytes32 id);\r\n\r\n    /// The org owner changed.\r\n    event OwnerChanged(address newOwner);\r\n\r\n    /// The org name changed.\r\n    event NameChanged(string name);\r\n\r\n    /// Construct a new org instance, by providing an owner address.\r\n    constructor(address _owner) {\r\n        owner = _owner;\r\n    }\r\n\r\n    // -- OWNER METHODS --\r\n\r\n    /// Functions that can only be called by the org owner.\r\n    modifier ownerOnly {\r\n        require(msg.sender == owner, \"Org: Only the org owner can perform this action\");\r\n        _;\r\n    }\r\n\r\n    /// Set the org owner.\r\n    function setOwner(address newOwner) public ownerOnly {\r\n        owner = newOwner;\r\n        emit OwnerChanged(newOwner);\r\n    }\r\n\r\n    /// Anchor an object to the org, by providing its hash in *multihash* format.\r\n    /// This method should be used for adding new objects to the org, as well as\r\n    /// updating existing ones.\r\n    ///\r\n    /// The `id` parameter is the unique identifier of the object being anchored.\r\n    ///\r\n    /// The `tag` parameter may be used to discriminate between different types\r\n    /// of anchors.\r\n    function anchor(\r\n        bytes32 id,\r\n        uint32 tag,\r\n        bytes calldata multihash\r\n    ) public ownerOnly {\r\n        anchors[id] = Anchor(tag, multihash);\r\n        emit Anchored(id, tag, multihash);\r\n    }\r\n\r\n    /// Unanchor an object from the org.\r\n    function unanchor(bytes32 id) public ownerOnly {\r\n        delete anchors[id];\r\n        emit Unanchored(id);\r\n    }\r\n\r\n    /// Transfer funds from this contract to the owner contract.\r\n    function recoverFunds(IERC20 token, uint256 amount) public ownerOnly returns (bool) {\r\n        return token.transfer(msg.sender, amount);\r\n    }\r\n\r\n    /// Configures the caller's reverse ENS record to point to the provided name.\r\n    /// The address of the ENS registry is passed as the second parameter.\r\n    function setName(string memory name, ENS ens) public ownerOnly returns (bytes32) {\r\n        ReverseRegistrar registrar = ReverseRegistrar(ens.owner(ADDR_REVERSE_NODE));\r\n        bytes32 node = registrar.setName(name);\r\n        emit NameChanged(name);\r\n\r\n        return node;\r\n    }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"tag\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"multihash\",\"type\":\"bytes\"}],\"name\":\"Anchored\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"}],\"name\":\"NameChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnerChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"}],\"name\":\"Unanchored\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"ADDR_REVERSE_NODE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"},{\"internalType\":\"uint32\",\"name\":\"tag\",\"type\":\"uint32\"},{\"internalType\":\"bytes\",\"name\":\"multihash\",\"type\":\"bytes\"}],\"name\":\"anchor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"anchors\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"tag\",\"type\":\"uint32\"},{\"internalType\":\"bytes\",\"name\":\"multihash\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"recoverFunds\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"contract ENS\",\"name\":\"ens\",\"type\":\"address\"}],\"name\":\"setName\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"setOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"}],\"name\":\"unanchor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"OrgV1","CompilerVersion":"v0.8.0+commit.c7dfd78e","OptimizationUsed":"1","Runs":"1","ConstructorArguments":"000000000000000000000000efeba186fc1445fb93deaea12ed6f206a4b5d974","EVMVersion":"Default","Library":"","LicenseType":"GNU GPLv3","Proxy":"0","Implementation":"","SwarmSource":"ipfs://edb195f1fe0bcfddb1e15573dbada0eb76f7ce624cffc2468ce95a21cb0e49aa"}]}