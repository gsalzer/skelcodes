{"status":"1","message":"OK","result":[{"SourceCode":"{\"Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size \\u003e 0;\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance \\u003e= value);\\n        require(isContract(target));\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length \\u003e 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"},\"Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\"},\"Distribution.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\npragma experimental ABIEncoderV2;\\r\\n\\r\\nimport \\u0027./IERC20.sol\\u0027;\\r\\nimport \\u0027./IERC721.sol\\u0027;\\r\\nimport \\\"./IERC721Receiver.sol\\\";\\r\\nimport \\\"./ERC165.sol\\\";\\r\\nimport \\u0027./Ownable.sol\\u0027;\\r\\nimport \\u0027./SafeMath.sol\\u0027;\\r\\nimport \\u0027./Address.sol\\u0027;\\r\\nimport \\u0027./Context.sol\\u0027;\\r\\n\\r\\ninterface ILink is IERC20 {\\r\\n    function transferAndCall(\\r\\n        address to,\\r\\n        uint256 value,\\r\\n        bytes calldata data\\r\\n    ) external returns (bool success);\\r\\n}\\r\\n\\r\\ninterface IApymonPack {\\r\\n    function depositErc20IntoEgg(\\r\\n        uint256 eggId,\\r\\n        address[] memory tokens,\\r\\n        uint256[] memory amounts\\r\\n    ) external;\\r\\n    function depositErc721IntoEgg(\\r\\n        uint256 eggId,\\r\\n        address token,\\r\\n        uint256[] memory tokenIds\\r\\n    ) external;\\r\\n    function isOpened(\\r\\n        uint256 eggId\\r\\n    ) external view returns (bool);\\r\\n}\\r\\n\\r\\ninterface IApymon {\\r\\n    function ownerOf(uint256 tokenId) external view returns (address);\\r\\n}\\r\\n\\r\\ninterface ICryptoPunk {\\r\\n    function transferPunk(address to, uint punkIndex) external;\\r\\n}\\r\\n\\r\\ncontract VRFRequestIDBase {\\r\\n    function makeVRFInputSeed(\\r\\n        bytes32 _keyHash,\\r\\n        uint256 _userSeed,\\r\\n        address _requester,\\r\\n        uint256 _nonce\\r\\n    ) internal pure returns (uint256) {\\r\\n        return  uint256(keccak256(abi.encode(_keyHash, _userSeed, _requester, _nonce)));\\r\\n    }\\r\\n    function makeRequestId(\\r\\n        bytes32 _keyHash,\\r\\n        uint256 _vRFInputSeed\\r\\n    ) internal pure returns (bytes32) {\\r\\n        return keccak256(abi.encodePacked(_keyHash, _vRFInputSeed));\\r\\n    }\\r\\n}\\r\\n\\r\\ninterface LinkTokenInterface {\\r\\n  function allowance(address owner, address spender) external view returns (uint256 remaining);\\r\\n  function approve(address spender, uint256 value) external returns (bool success);\\r\\n  function balanceOf(address owner) external view returns (uint256 balance);\\r\\n  function decimals() external view returns (uint8 decimalPlaces);\\r\\n  function decreaseApproval(address spender, uint256 addedValue) external returns (bool success);\\r\\n  function increaseApproval(address spender, uint256 subtractedValue) external;\\r\\n  function name() external view returns (string memory tokenName);\\r\\n  function symbol() external view returns (string memory tokenSymbol);\\r\\n  function totalSupply() external view returns (uint256 totalTokensIssued);\\r\\n  function transfer(address to, uint256 value) external returns (bool success);\\r\\n  function transferAndCall(address to, uint256 value, bytes calldata data) external returns (bool success);\\r\\n  function transferFrom(address from, address to, uint256 value) external returns (bool success);\\r\\n}\\r\\n\\r\\nabstract contract VRFConsumerBase is VRFRequestIDBase {\\r\\n    using SafeMath for uint256;\\r\\n    \\r\\n    function fulfillRandomness(\\r\\n        bytes32 requestId,\\r\\n        uint256 randomness\\r\\n    ) internal virtual;\\r\\n\\r\\n    function requestRandomness(\\r\\n        bytes32 _keyHash,\\r\\n        uint256 _fee,\\r\\n        uint256 _seed\\r\\n    ) internal returns (bytes32 requestId) {\\r\\n        LINK.transferAndCall(vrfCoordinator, _fee, abi.encode(_keyHash, _seed));\\r\\n        uint256 vRFSeed  = makeVRFInputSeed(_keyHash, _seed, address(this), nonces[_keyHash]);\\r\\n        nonces[_keyHash] = nonces[_keyHash].add(1);\\r\\n        return makeRequestId(_keyHash, vRFSeed);\\r\\n    }\\r\\n\\r\\n    LinkTokenInterface immutable internal LINK;\\r\\n\\r\\n    address immutable private vrfCoordinator;\\r\\n    mapping(bytes32 /* keyHash */ =\\u003e uint256 /* nonce */) private nonces;\\r\\n\\r\\n    constructor(\\r\\n        address _vrfCoordinator,\\r\\n        address _link\\r\\n    ) {\\r\\n        vrfCoordinator = _vrfCoordinator;\\r\\n        LINK = LinkTokenInterface(_link);\\r\\n    }\\r\\n\\r\\n    function rawFulfillRandomness(\\r\\n        bytes32 requestId,\\r\\n        uint256 randomness\\r\\n    ) external {\\r\\n        require(msg.sender == vrfCoordinator, \\\"Only VRFCoordinator can fulfill\\\");\\r\\n        fulfillRandomness(requestId, randomness);\\r\\n    }\\r\\n}\\r\\n\\r\\ncontract RandomNumberConsumer is VRFConsumerBase {\\r\\n    bytes32 internal keyHash;\\r\\n    uint256 internal fee;\\r\\n    \\r\\n    bool private progress = false;\\r\\n    uint256 private winner = 0;\\r\\n    address private distributer;\\r\\n    \\r\\n    modifier onlyDistributer() {\\r\\n        require(distributer == msg.sender, \\\"Ownable: caller is not the owner\\\");\\r\\n        _;\\r\\n    }\\r\\n    \\r\\n    /**\\r\\n     * Constructor inherits VRFConsumerBase\\r\\n     * \\r\\n     * Network: Kovan\\r\\n     * Chainlink VRF Coordinator address: 0xdD3782915140c8f3b190B5D67eAc6dc5760C46E9\\r\\n     * LINK token address:                0xa36085F69e2889c224210F603D836748e7dC0088\\r\\n     * Key Hash: 0x6c3699283bda56ad74f6b855546325b68d482e983852a7a82979cc4807b641f4\\r\\n     */\\r\\n    constructor(address _distributer) \\r\\n        VRFConsumerBase(\\r\\n            0xf0d54349aDdcf704F77AE15b96510dEA15cb7952, // VRF Coordinator\\r\\n            0x514910771AF9Ca656af840dff83E8264EcF986CA  // LINK Token\\r\\n        )\\r\\n    {\\r\\n        keyHash = 0xAA77729D3466CA35AE8D28B3BBAC7CC36A5031EFDC430821C02BC31A238AF445;\\r\\n        fee = 2 * 10 ** 18; // 2 LINK\\r\\n        distributer = _distributer;\\r\\n    }\\r\\n    \\r\\n    /** \\r\\n     * Requests randomness from a user-provided seed\\r\\n     */\\r\\n    function getRandomNumber(uint256 userProvidedSeed) public onlyDistributer returns (bytes32 requestId) {        \\r\\n        require(LINK.balanceOf(address(this)) \\u003e= fee, \\\"Not enough LINK - fill contract with faucet\\\");\\r\\n        require(!progress, \\\"now getting an random number.\\\");\\r\\n        winner = 0;\\r\\n        progress = true;\\r\\n        return requestRandomness(keyHash, fee, userProvidedSeed);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * Callback function used by VRF Coordinator\\r\\n     */\\r\\n    function fulfillRandomness(bytes32 requestId, uint256 randomness) internal override {\\r\\n        requestId = 0;\\r\\n        progress = false;\\r\\n        winner = randomness;\\r\\n    }\\r\\n\\r\\n    function getWinner() external view onlyDistributer returns (uint256) {\\r\\n        if(progress)\\r\\n            return 0;\\r\\n        return winner;\\r\\n    }\\r\\n}\\r\\n\\r\\ncontract Distribution is ERC165, IERC721Receiver, Context, Ownable {\\r\\n    using SafeMath for uint256;\\r\\n    using Address for address;\\r\\n\\r\\n    RandomNumberConsumer public rnGenerator;\\r\\n    \\r\\n    ICryptoPunk public _cryptoPunk = ICryptoPunk(0xb47e3cd837dDF8e4c57F05d70Ab865de6e193BBB);\\r\\n    IApymonPack public _apymonPack = IApymonPack(0x3dFCB488F6e96654e827Ab2aB10a463B9927d4f9);\\r\\n    IApymonPack public _apymonPack721 = IApymonPack(0x74F9177825E3b0B7b242e0fEb03c38b3fF2dcB18);\\r\\n    IApymon public _apymon = IApymon(0x9C008A22D71B6182029b694B0311486e4C0e53DB);\\r\\n    address public wethAddr = 0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2;\\r\\n\\r\\n    uint256 public _randomCallCount = 0;\\r\\n    uint256 public _prevRandomCallCount = 0;\\r\\n\\r\\n    uint256 public _endIdForEthDistribution = 0;\\r\\n\\r\\n    // mapping eggId-\\u003epunkId\\r\\n    mapping(uint256 =\\u003e uint256) private _eggIdsOwnedPunk;\\r\\n\\r\\n    event WithdrawERC20(address indexed owner, address indexed token, uint256 amount);\\r\\n    event WithdrawERC721(address indexed owner, address indexed token, uint256 id);\\r\\n    event WithdrawPunk(address indexed owner, uint256 id);\\r\\n    \\r\\n    constructor () {\\r\\n        rnGenerator = new RandomNumberConsumer(address(this));\\r\\n    }\\r\\n\\r\\n    function getRandomNumber() external onlyOwner {\\r\\n        rnGenerator.getRandomNumber(_randomCallCount);\\r\\n        _randomCallCount = _randomCallCount + 1;\\r\\n    }\\r\\n\\r\\n    function distributeFirstCryptoPunk() external onlyOwner {\\r\\n        require(_prevRandomCallCount != _randomCallCount, \\\"Please generate random number.\\\");\\r\\n        require(rnGenerator.getWinner() != 0, \\\"Please wait until random number generated.\\\");\\r\\n\\r\\n        _prevRandomCallCount = _randomCallCount;\\r\\n        uint256 eggId = rnGenerator.getWinner().mod(6000); // distribute first cryptoPunk to 0~5999\\r\\n        _eggIdsOwnedPunk[eggId] = 7207;\\r\\n    }\\r\\n\\r\\n    function distributeSecondCryptoPunk() external onlyOwner {\\r\\n        require(_prevRandomCallCount != _randomCallCount, \\\"Please generate random number.\\\");\\r\\n        require(rnGenerator.getWinner() != 0, \\\"Please wait until random number generated.\\\");\\r\\n\\r\\n        _prevRandomCallCount = _randomCallCount;\\r\\n        uint256 eggId = rnGenerator.getWinner().mod(400) + 6000; // distribute first cryptoPunk to 6000~6399\\r\\n        _eggIdsOwnedPunk[eggId] = 7006;\\r\\n    }\\r\\n\\r\\n    function withdrawPunk(uint256 eggId) external {\\r\\n        address eggOwner = _apymon.ownerOf(eggId);\\r\\n\\r\\n        require(eggOwner == msg.sender, \\\"Invalid egg owner\\\");\\r\\n        require(_apymonPack.isOpened(eggId), \\\"Unopened egg\\\");\\r\\n\\r\\n        uint256 punkId = _eggIdsOwnedPunk[eggId];\\r\\n\\r\\n        require(punkId \\u003e 0, \\\"Invalid punk id\\\");\\r\\n\\r\\n        _cryptoPunk.transferPunk(msg.sender, punkId);\\r\\n        _eggIdsOwnedPunk[eggId] = 0;\\r\\n    }\\r\\n\\r\\n    function checkPunk(uint256 eggId) external view returns(uint256 punkId) {\\r\\n        address eggOwner = _apymon.ownerOf(eggId);\\r\\n\\r\\n        require(eggOwner == msg.sender, \\\"Invalid egg owner\\\");\\r\\n        require(_apymonPack.isOpened(eggId), \\\"Unopened egg\\\");\\r\\n\\r\\n        punkId = _eggIdsOwnedPunk[eggId];\\r\\n\\r\\n        require(punkId \\u003e 0, \\\"Invalid punk id\\\");\\r\\n    }\\r\\n\\r\\n    function distributeERC20Token(address token, uint256 amount) external onlyOwner returns (uint256 eggId) {\\r\\n        require(token != address(0));\\r\\n        require(amount \\u003e 0, \\\"Invalide erc20 amount to deposit\\\");\\r\\n        require(_prevRandomCallCount != _randomCallCount, \\\"Please generate random number.\\\");\\r\\n        require(rnGenerator.getWinner() != 0, \\u0027Please wait until random number generated.\\u0027);\\r\\n\\r\\n        _prevRandomCallCount = _randomCallCount;\\r\\n        eggId = rnGenerator.getWinner().mod(6400);\\r\\n        \\r\\n        address[] memory tokens = new address[](1);\\r\\n        uint256[] memory amounts = new uint256[](1);\\r\\n        \\r\\n        tokens[0] = token;\\r\\n        amounts[0] = amount;\\r\\n        \\r\\n        IERC20(token).approve(address(_apymonPack), amount);\\r\\n        _apymonPack.depositErc20IntoEgg(eggId, tokens, amounts);\\r\\n    }\\r\\n\\r\\n    function distributeERC721Token(address token, uint256 tokenId) external onlyOwner {\\r\\n        require(token != address(0));\\r\\n        require(_prevRandomCallCount != _randomCallCount, \\\"Please generate random number.\\\");\\r\\n        require(rnGenerator.getWinner() != 0, \\u0027Please wait until random number generated.\\u0027);\\r\\n\\r\\n        _prevRandomCallCount = _randomCallCount;\\r\\n\\r\\n        uint256 eggId = rnGenerator.getWinner().mod(6400);\\r\\n        uint256[] memory tokenIds = new uint256[](1);\\r\\n\\r\\n        tokenIds[0] = tokenId;\\r\\n        \\r\\n        IERC721(token).approve(address(_apymonPack721), tokenId);\\r\\n        _apymonPack721.depositErc721IntoEgg(eggId, token, tokenIds);        \\r\\n    }\\r\\n\\r\\n    function distributeApymonToken(uint256 tokenId) external onlyOwner {\\r\\n        require(_prevRandomCallCount != _randomCallCount, \\\"Please generate random number.\\\");\\r\\n        require(rnGenerator.getWinner() != 0, \\u0027Please wait until random number generated.\\u0027);\\r\\n\\r\\n        _prevRandomCallCount = _randomCallCount;\\r\\n\\r\\n        uint256 eggId = rnGenerator.getWinner().mod(6400);\\r\\n        if(eggId == tokenId) {\\r\\n            if(eggId \\u003e= 3200)\\r\\n                eggId = eggId - 1;\\r\\n            else\\r\\n                eggId = eggId + 1;\\r\\n        }\\r\\n        \\r\\n        uint256[] memory tokenIds = new uint256[](1);\\r\\n\\r\\n        tokenIds[0] = tokenId;\\r\\n        \\r\\n        IERC721(address(_apymon)).approve(address(_apymonPack721), tokenId);\\r\\n        _apymonPack721.depositErc721IntoEgg(eggId, address(_apymon), tokenIds);\\r\\n    }\\r\\n\\r\\n    function approveWethToPack() external {\\r\\n        IERC20(wethAddr).approve(address(_apymonPack), 100 ether);\\r\\n    }\\r\\n\\r\\n    function distributeWeth(uint256 startId, uint256 endId) external onlyOwner {\\r\\n        require((_endIdForEthDistribution == 0 \\u0026\\u0026 startId == 0) || (startId == _endIdForEthDistribution + 1), \\\"startId is incorrect.\\\");\\r\\n        require(endId \\u003e= startId \\u0026\\u0026 endId \\u003c= 6399, \\\"endId is incorrect.\\\");\\r\\n\\r\\n        _endIdForEthDistribution = endId;\\r\\n\\r\\n        address[] memory tokens = new address[](1);\\r\\n        uint256[] memory amounts = new uint256[](1);\\r\\n        \\r\\n        tokens[0] = wethAddr;\\r\\n\\r\\n        for (uint256 i = startId; i \\u003c= endId; i++) {\\r\\n            if (i \\u003e 6395) { // 6396 ~ 6400\\r\\n                amounts[0] = 0.2 ether;\\r\\n            } else if (i \\u003e 6365) { // 6366 ~ 6395\\r\\n                amounts[0] = 0.1 ether;\\r\\n            } else if (i \\u003e 6300) { // 6301 ~ 6365\\r\\n               amounts[0] = 0.064 ether;\\r\\n            } else if (i \\u003e 6000) { // 6001 ~ 6300\\r\\n                amounts[0] = 0.032 ether;\\r\\n            } else if (i \\u003e 4000) { // 4001 ~ 6000\\r\\n                amounts[0] = 0.016 ether;\\r\\n            } else if (i \\u003e 500) { // 501 ~ 4000\\r\\n                amounts[0] = 0.008 ether;\\r\\n            } else {\\r\\n                amounts[0] = 0.004 ether; // 1 ~ 500\\r\\n            }\\r\\n\\r\\n            IApymonPack(_apymonPack).depositErc20IntoEgg(i, tokens, amounts);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function withdrawERC20ToOwner(address token) external onlyOwner {\\r\\n        uint256 amount = IERC20(token).balanceOf(address(this));\\r\\n        IERC20(token).transfer(owner(), amount);\\r\\n        emit WithdrawERC20(owner(), token, amount);\\r\\n    }\\r\\n    \\r\\n    function withdrawERC721ToOwner(address token, uint256 id) external onlyOwner {\\r\\n        IERC721(token).safeTransferFrom(address(this), owner(), id);\\r\\n        emit WithdrawERC721(owner(), token, id);\\r\\n    }\\r\\n\\r\\n    function withdrawPunkToOwner(uint256 id) external onlyOwner {\\r\\n        _cryptoPunk.transferPunk(owner(), id);\\r\\n        emit WithdrawPunk(owner(), id);\\r\\n    }\\r\\n\\r\\n    function onERC721Received(\\r\\n        address,\\r\\n        address,\\r\\n        uint256,\\r\\n        bytes calldata\\r\\n    ) external pure override returns (bytes4) {\\r\\n        return this.onERC721Received.selector;\\r\\n    }\\r\\n}\\r\\n\"},\"ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /*\\n     * bytes4(keccak256(\\u0027supportsInterface(bytes4)\\u0027)) == 0x01ffc9a7\\n     */\\n    bytes4 private constant _INTERFACE_ID_ERC165 = 0x01ffc9a7;\\n\\n    /**\\n     * @dev Mapping of interface ids to whether or not it\\u0027s supported.\\n     */\\n    mapping(bytes4 =\\u003e bool) private _supportedInterfaces;\\n\\n    constructor () {\\n        // Derived contracts need only register support for their own interfaces,\\n        // we register support for ERC165 itself here\\n        _registerInterface(_INTERFACE_ID_ERC165);\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     *\\n     * Time complexity O(1), guaranteed to always use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return _supportedInterfaces[interfaceId];\\n    }\\n\\n    /**\\n     * @dev Registers the contract as an implementer of the interface defined by\\n     * `interfaceId`. Support of the actual ERC165 interface is automatic and\\n     * registering its interface id is not required.\\n     *\\n     * See {IERC165-supportsInterface}.\\n     *\\n     * Requirements:\\n     *\\n     * - `interfaceId` cannot be the ERC165 invalid interface (`0xffffffff`).\\n     */\\n    function _registerInterface(bytes4 interfaceId) internal virtual {\\n        require(interfaceId != 0xffffffff, \\\"ERC165: invalid interface id\\\");\\n        _supportedInterfaces[interfaceId] = true;\\n    }\\n}\\n\"},\"IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"},\"IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    function balanceOf(address account) external view returns (uint256);\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n    function approve(address spender, uint256 amount) external returns (bool);\\n}\\n\"},\"IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``\\u0027s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    /**\\n      * @dev Safely transfers `tokenId` token from `from` to `to`.\\n      *\\n      * Requirements:\\n      *\\n      * - `from` cannot be the zero address.\\n      * - `to` cannot be the zero address.\\n      * - `tokenId` token must exist and be owned by `from`.\\n      * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n      * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n      *\\n      * Emits a {Transfer} event.\\n      */\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\\n}\\n\"},\"IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\\n     */\\n    function onERC721Received(address operator, address from, uint256 tokenId, bytes calldata data) external returns (bytes4);\\n}\\n\"},\"Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./Context.sol\\\";\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor () {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n}\\n\"},\"SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler\\u0027s built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity\\u0027s arithmetic operations.\\n *\\n * NOTE: `SafeMath` is no longer needed starting with Solidity 0.8. The compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity\\u0027s `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity\\u0027s `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity\\u0027s `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity\\u0027s `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity\\u0027s `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity\\u0027s `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        unchecked {\\n            require(b \\u003c= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity\\u0027s `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Counterpart to Solidity\\u0027s `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        unchecked {\\n            require(b \\u003e 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity\\u0027s `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        unchecked {\\n            require(b \\u003e 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\"}}","ABI":"[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"WithdrawERC20\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"WithdrawERC721\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"WithdrawPunk\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"_apymon\",\"outputs\":[{\"internalType\":\"contract IApymon\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_apymonPack\",\"outputs\":[{\"internalType\":\"contract IApymonPack\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_apymonPack721\",\"outputs\":[{\"internalType\":\"contract IApymonPack\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_cryptoPunk\",\"outputs\":[{\"internalType\":\"contract ICryptoPunk\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_endIdForEthDistribution\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_prevRandomCallCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_randomCallCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"approveWethToPack\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"eggId\",\"type\":\"uint256\"}],\"name\":\"checkPunk\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"punkId\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"distributeApymonToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"distributeERC20Token\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"eggId\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"distributeERC721Token\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"distributeFirstCryptoPunk\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"distributeSecondCryptoPunk\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"startId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endId\",\"type\":\"uint256\"}],\"name\":\"distributeWeth\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRandomNumber\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC721Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rnGenerator\",\"outputs\":[{\"internalType\":\"contract RandomNumberConsumer\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"wethAddr\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"withdrawERC20ToOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"withdrawERC721ToOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"eggId\",\"type\":\"uint256\"}],\"name\":\"withdrawPunk\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"withdrawPunkToOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"Distribution","CompilerVersion":"v0.8.1+commit.df193b15","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://502b11ee60b5ea0070e993451ccd57e37b5ae5ed5c67931b86a6a051dd94ab61"}]}