{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.5.16;\r\npragma experimental ABIEncoderV2;\r\n\r\n\r\ncontract ComptrollerLike {\r\n    function getAllMarkets() public view returns (address[] memory);\r\n    function allMarkets(uint m) public view returns(address);\r\n    function markets(address cTokenAddress) public view returns (bool, uint, bool);\r\n    function oracle() public view returns(address);\r\n    function claimComp(address holder) public;    \r\n    function compAccrued(address holder) public view returns(uint);\r\n    function getCompAddress() public view returns (address);\r\n    function getAssetsIn(address account) public view returns(address[] memory);\r\n}\r\n\r\ncontract BComptrollerLike {\r\n    function c2b(address ctoken) public view returns(address);\r\n}\r\n\r\ncontract OracleLike {\r\n    function getUnderlyingPrice(address cToken) external view returns (uint);\r\n}\r\n\r\ncontract ERC20Like {\r\n    function decimals() public returns(uint);\r\n    function name() public returns(string memory);\r\n    function balanceOf(address user) public returns(uint);\r\n    function allowance(address owner, address spender) public returns(uint);\r\n}\r\n\r\ncontract CTokenLike {\r\n    function underlying() public returns(address);\r\n    function exchangeRateCurrent() public returns (uint);\r\n    function borrowRatePerBlock() public returns (uint);\r\n    function supplyRatePerBlock() public returns (uint);\r\n    function borrowBalanceCurrent(address account) public returns (uint);\r\n    function totalSupply() public returns (uint);\r\n}\r\n\r\ncontract RegistryLike {\r\n    function getAvatar(address user) public returns(address);\r\n    function avatarLength() public view returns(uint);\r\n    function avatars(uint i) public view returns(address);\r\n    function comptroller() public view returns(address);\r\n    function score() public view returns(address);\r\n}\r\n\r\ncontract JarConnectorLike {\r\n    function getUserScore(address user) external view returns (uint);\r\n    function getGlobalScore() external view returns (uint);    \r\n    function getUserScoreProgressPerSec(address user) external view returns (uint);\r\n}\r\n\r\ncontract ScoreLike {\r\n    function updateIndex(address[] calldata cTokens) external;\r\n}\r\n\r\n\r\ncontract UserInfo {\r\n    struct TvlInfo {\r\n        uint numAccounts;\r\n        uint[] ctokenBalance;\r\n        uint[] ctokenBorrow;\r\n    }\r\n\r\n    function getTvlInfo(address[] memory ctokens, address registry) public returns(TvlInfo memory info) {\r\n        info.ctokenBalance = new uint[](ctokens.length);\r\n        uint numAvatars = RegistryLike(registry).avatarLength();\r\n        for(uint i = 0 ; i < numAvatars ; i++) {\r\n            address avatar = RegistryLike(registry).avatars(i);\r\n            for(uint j = 0 ; j < ctokens.length ; j++) {\r\n                info.ctokenBalance[j] += ERC20Like(ctokens[j]).balanceOf(avatar);\r\n                info.ctokenBorrow[j] += CTokenLike(ctokens[j]).borrowBalanceCurrent(avatar);\r\n            }\r\n        }\r\n        \r\n        info.numAccounts = numAvatars;\r\n    }\r\n}\r\n\r\ncontract FakeBComptroller {\r\n    function c2b(address a) pure public returns(address) { return a;}\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"ctokens\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"registry\",\"type\":\"address\"}],\"name\":\"getTvlInfo\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"numAccounts\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"ctokenBalance\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"ctokenBorrow\",\"type\":\"uint256[]\"}],\"internalType\":\"struct UserInfo.TvlInfo\",\"name\":\"info\",\"type\":\"tuple\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"UserInfo","CompilerVersion":"v0.5.16+commit.9c3226ce","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"BSD-3-Clause","Proxy":"0","Implementation":"","SwarmSource":"bzzr://77751ab90e5e234fa095bcd01b628a66e2b17148617f1626818a83771902ea24"}]}