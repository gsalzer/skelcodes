{"status":"1","message":"OK","result":[{"SourceCode":"//SPDX-License-Identifier: Unlicense\r\npragma solidity ^0.6.6;\r\n\r\nabstract contract ReentrancyGuard {\r\n    // Booleans are more expensive than uint256 or any type that takes up a full\r\n    // word because each write operation emits an extra SLOAD to first read the\r\n    // slot's contents, replace the bits taken up by the boolean, and then write\r\n    // back. This is the compiler's defense against contract upgrades and\r\n    // pointer aliasing, and it cannot be disabled.\r\n\r\n    // The values being non-zero value makes deployment a bit more expensive,\r\n    // but in exchange the refund on every call to nonReentrant will be lower in\r\n    // amount. Since refunds are capped to a percentage of the total\r\n    // transaction's gas, it is best to keep them low in cases like this one, to\r\n    // increase the likelihood of the full reafund coming into effect.\r\n    uint256 private constant _NOT_ENTERED = 1;\r\n    uint256 private constant _ENTERED = 2;\r\n\r\n    uint256 private _status;\r\n\r\n    constructor () internal {\r\n        _status = _NOT_ENTERED;\r\n    }\r\n\r\n    /**\r\n     * @dev Prevents a contract from calling itself, directly or indirectly.\r\n     * Calling a `nonReentrant` function from another `nonReentrant`\r\n     * function is not supported. It is possible to prevent this from happening\r\n     * by making the `nonReentrant` function external, and make it call a\r\n     * `private` function that does the actual work.\r\n     */\r\n    modifier nonReentrant() {\r\n        // On the first call to nonReentrant, _notEntered will be true\r\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\r\n\r\n        // Any calls to nonReentrant after this point will fail\r\n        _status = _ENTERED;\r\n\r\n        _;\r\n\r\n        // By storing the original value once again, a refund is triggered (see\r\n        // https://eips.ethereum.org/EIPS/eip-2200)\r\n        _status = _NOT_ENTERED;\r\n    }\r\n}\r\ninterface IWETH {\r\n    function deposit() external payable;\r\n    function transfer(address to, uint value) external returns (bool);\r\n    function withdraw(uint) external;\r\n}\r\n\r\n\r\nlibrary TransferHelper {\r\n    function safeApprove(address token, address to, uint value) internal {\r\n        // bytes4(keccak256(bytes('approve(address,uint256)')));\r\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x095ea7b3, to, value));\r\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'TransferHelper: APPROVE_FAILED');\r\n    }\r\n\r\n    function safeTransfer(address token, address to, uint value) internal {\r\n        // bytes4(keccak256(bytes('transfer(address,uint256)')));\r\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0xa9059cbb, to, value));\r\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'TransferHelper: TRANSFER_FAILED');\r\n    }\r\n\r\n    function safeTransferFrom(address token, address from, address to, uint value) internal {\r\n        // bytes4(keccak256(bytes('transferFrom(address,address,uint256)')));\r\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x23b872dd, from, to, value));\r\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'TransferHelper: TRANSFER_FROM_FAILED');\r\n    }\r\n\r\n    function safeTransferETH(address to, uint value) internal {\r\n        (bool success,) = to.call{value:value}(new bytes(0));\r\n        require(success, 'TransferHelper: ETH_TRANSFER_FAILED');\r\n    }\r\n}\r\n\r\ncontract DepositManager is ReentrancyGuard {\r\n    address public Owner; // manager\r\n    address public Operator; // withdraw manager\r\n    address public Gotter; // receive\r\n    address public WETH;\r\n    mapping(address => uint8) public WhiteTokenList; // token => nozore\r\n    mapping(address => uint8) public BlackTokenList; // token => nozore\r\n\r\n    uint256 Status; // 1 - availabe\r\n    uint256 DepositIndex = 0;\r\n    bool WhitelistAvailable = false;\r\n\r\n    modifier onlyOwner() {\r\n        require(msg.sender == Owner, \"not owner\");\r\n        _;\r\n    }\r\n\r\n    modifier onlyOper() {\r\n        require(msg.sender == Operator, \"not operator\");\r\n        _;\r\n    }\r\n\r\n    modifier isActive() {\r\n        require(Status == 0, \"Not availabe\");\r\n        _;\r\n    }\r\n\r\n    event Deposit(\r\n        uint256 index,\r\n        address token,\r\n        address from,\r\n        bytes32 maddr,\r\n        uint256 amount\r\n    );\r\n\r\n    // event Transfer( ) ;\r\n\r\n    constructor(address owner, address weth) public {\r\n        WETH = weth;\r\n        Owner = owner;\r\n        Operator = owner;\r\n        modifyWhiteToken(weth, 1);\r\n    }\r\n\r\n    function modifyManager(\r\n        address owner,\r\n        address oper,\r\n        address gotter\r\n    ) public onlyOwner {\r\n        Owner = owner;\r\n        Operator = oper;\r\n        Gotter = gotter;\r\n    }\r\n\r\n    function modifyOperator(address oper) public onlyOwner {\r\n        Operator = oper;\r\n    }\r\n\r\n    function modifyWETH(address weth) public onlyOwner {\r\n        WETH = weth;\r\n    }\r\n\r\n    function modifyStatus(uint256 status) public onlyOwner {\r\n        Status = status;\r\n    }\r\n\r\n    function modifyWhitelistAvailable(bool availabe) public onlyOwner {\r\n        WhitelistAvailable = availabe;\r\n    }\r\n\r\n    function modifyGotter(address gotter) public onlyOwner {\r\n        Gotter = gotter;\r\n    }\r\n\r\n    function modifyWhiteToken(address token, uint8 auth) public onlyOwner {\r\n        WhiteTokenList[token] = auth;\r\n    }\r\n\r\n    function modifyBlackToken(address token, uint8 auth) public onlyOwner {\r\n        BlackTokenList[token] = auth;\r\n    }\r\n\r\n    function depositToken(\r\n        address token,\r\n        bytes32 to,\r\n        uint256 amount\r\n    ) public isActive nonReentrant {\r\n        require(BlackTokenList[token] == 0, \" in blacklist \");\r\n        address from = msg.sender;\r\n        require(\r\n            !WhitelistAvailable || WhiteTokenList[token] == 1,\r\n            \"Not in whitelist \"\r\n        );\r\n        TransferHelper.safeTransferFrom(token, from, address(this), amount);\r\n        DepositIndex = DepositIndex + 1;\r\n        emit Deposit( DepositIndex, token, from, to, amount);\r\n    }\r\n\r\n    function depositETH(bytes32 to) public payable isActive nonReentrant {\r\n        uint256 amount = msg.value;\r\n        address from = msg.sender;\r\n        require(amount > 0, \"ETH value must be more than 0 .\");\r\n        IWETH(WETH).deposit{value: amount}();\r\n        DepositIndex = DepositIndex + 1;\r\n        emit Deposit( DepositIndex, WETH, from, to, amount);\r\n    }\r\n\r\n    function superTransferETH(uint256 amount) public onlyOper {\r\n        TransferHelper.safeTransferETH(Gotter, amount);\r\n    }\r\n\r\n    function superTransferToken(address token, uint256 amount) public onlyOper {\r\n        TransferHelper.safeTransfer(token, Gotter, amount);\r\n    }\r\n\r\n    function superTransfer(address token, uint256 amount) public onlyOper {\r\n        address to = Gotter;\r\n        if (token == WETH) {\r\n            IWETH(token).transfer(to, amount);\r\n            // TransferHelper.safeTransferETH( to , amount );\r\n        } else {\r\n            TransferHelper.safeTransfer(token, to, amount);\r\n        }\r\n    }\r\n\r\n    receive() external payable {\r\n        // accept eth from weth only.\r\n\r\n        require(WETH == msg.sender, \"Accept eth from weth only.\");\r\n    }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"weth\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"maddr\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"BlackTokenList\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"Gotter\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"Operator\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"Owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"WETH\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"WhiteTokenList\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"to\",\"type\":\"bytes32\"}],\"name\":\"depositETH\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"to\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"depositToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"auth\",\"type\":\"uint8\"}],\"name\":\"modifyBlackToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"gotter\",\"type\":\"address\"}],\"name\":\"modifyGotter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"oper\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"gotter\",\"type\":\"address\"}],\"name\":\"modifyManager\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"oper\",\"type\":\"address\"}],\"name\":\"modifyOperator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"status\",\"type\":\"uint256\"}],\"name\":\"modifyStatus\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"weth\",\"type\":\"address\"}],\"name\":\"modifyWETH\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"auth\",\"type\":\"uint8\"}],\"name\":\"modifyWhiteToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"availabe\",\"type\":\"bool\"}],\"name\":\"modifyWhitelistAvailable\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"superTransfer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"superTransferETH\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"superTransferToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]","ContractName":"DepositManager","CompilerVersion":"v0.6.6+commit.6c089d02","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"0000000000000000000000005c8028c56d77e73ee02c408d2f9246e03a15e4bb000000000000000000000000c02aaa39b223fe8d0a0e5c4f27ead9083c756cc2","EVMVersion":"Default","Library":"","LicenseType":"Unlicense","Proxy":"0","Implementation":"","SwarmSource":"ipfs://e98ca0dc9d3f9a50467cdc5c5b58f9548629f044e997df279839d5ee3c5b8a2d"}]}