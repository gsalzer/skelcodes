{"status":"1","message":"OK","result":[{"SourceCode":"/*\r\n    .'''''''''''..     ..''''''''''''''''..       ..'''''''''''''''..\r\n    .;;;;;;;;;;;'.   .';;;;;;;;;;;;;;;;;;,.     .,;;;;;;;;;;;;;;;;;,.\r\n    .;;;;;;;;;;,.   .,;;;;;;;;;;;;;;;;;;;,.    .,;;;;;;;;;;;;;;;;;;,.\r\n    .;;;;;;;;;,.   .,;;;;;;;;;;;;;;;;;;;;,.   .;;;;;;;;;;;;;;;;;;;;,.\r\n    ';;;;;;;;'.  .';;;;;;;;;;;;;;;;;;;;;;,. .';;;;;;;;;;;;;;;;;;;;;,.\r\n    ';;;;;,..   .';;;;;;;;;;;;;;;;;;;;;;;,..';;;;;;;;;;;;;;;;;;;;;;,.\r\n    ......     .';;;;;;;;;;;;;,'''''''''''.,;;;;;;;;;;;;;,'''''''''..\r\n              .,;;;;;;;;;;;;;.           .,;;;;;;;;;;;;;.\r\n             .,;;;;;;;;;;;;,.           .,;;;;;;;;;;;;,.\r\n            .,;;;;;;;;;;;;,.           .,;;;;;;;;;;;;,.\r\n           .,;;;;;;;;;;;;,.           .;;;;;;;;;;;;;,.     .....\r\n          .;;;;;;;;;;;;;'.         ..';;;;;;;;;;;;;'.    .',;;;;,'.\r\n        .';;;;;;;;;;;;;'.         .';;;;;;;;;;;;;;'.   .';;;;;;;;;;.\r\n       .';;;;;;;;;;;;;'.         .';;;;;;;;;;;;;;'.    .;;;;;;;;;;;,.\r\n      .,;;;;;;;;;;;;;'...........,;;;;;;;;;;;;;;.      .;;;;;;;;;;;,.\r\n     .,;;;;;;;;;;;;,..,;;;;;;;;;;;;;;;;;;;;;;;,.       ..;;;;;;;;;,.\r\n    .,;;;;;;;;;;;;,. .,;;;;;;;;;;;;;;;;;;;;;;,.          .',;;;,,..\r\n   .,;;;;;;;;;;;;,.  .,;;;;;;;;;;;;;;;;;;;;;,.              ....\r\n    ..',;;;;;;;;,.   .,;;;;;;;;;;;;;;;;;;;;,.\r\n       ..',;;;;'.    .,;;;;;;;;;;;;;;;;;;;'.\r\n          ...'..     .';;;;;;;;;;;;;;,,,'.\r\n                       ...............\r\n*/\r\n\r\n// https://github.com/trusttoken/smart-contracts\r\n// Dependency file: @openzeppelin/contracts/token/ERC20/IERC20.sol\r\n\r\n// SPDX-License-Identifier: MIT\r\n\r\n// pragma solidity ^0.6.0;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * // importANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n\r\n// Dependency file: @openzeppelin/contracts/math/SafeMath.sol\r\n\r\n\r\n// pragma solidity ^0.6.0;\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts with custom message when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n\r\n// Dependency file: contracts/trusttoken/interface/IBurnableERC20.sol\r\n\r\n// pragma solidity 0.6.10;\r\n\r\n// import {IERC20} from \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\r\n\r\ninterface IBurnableERC20 is IERC20 {\r\n    function burn(uint256 amount) external;\r\n}\r\n\r\n\r\n// Dependency file: contracts/governance/interface/IVoteToken.sol\r\n\r\n// pragma solidity ^0.6.10;\r\n\r\n// import {IERC20} from \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\r\n\r\ninterface IVoteToken {\r\n    function delegate(address delegatee) external;\r\n\r\n    function delegateBySig(\r\n        address delegatee,\r\n        uint256 nonce,\r\n        uint256 expiry,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    ) external;\r\n\r\n    function getCurrentVotes(address account) external view returns (uint96);\r\n\r\n    function getPriorVotes(address account, uint256 blockNumber) external view returns (uint96);\r\n}\r\n\r\ninterface IVoteTokenWithERC20 is IVoteToken, IERC20 {}\r\n\r\n\r\n// Dependency file: @openzeppelin/contracts/GSN/Context.sol\r\n\r\n\r\n// pragma solidity ^0.6.0;\r\n\r\n/*\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with GSN meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address payable) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes memory) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n\r\n// Dependency file: contracts/common/Initializable.sol\r\n\r\n// Copied from https://github.com/OpenZeppelin/openzeppelin-contracts-ethereum-package/blob/v3.0.0/contracts/Initializable.sol\r\n// Added public isInitialized() view of private initialized bool.\r\n\r\n// pragma solidity 0.6.10;\r\n\r\n/**\r\n * @title Initializable\r\n *\r\n * @dev Helper contract to support initializer functions. To use it, replace\r\n * the constructor with a function that has the `initializer` modifier.\r\n * WARNING: Unlike constructors, initializer functions must be manually\r\n * invoked. This applies both to deploying an Initializable contract, as well\r\n * as extending an Initializable contract via inheritance.\r\n * WARNING: When used with inheritance, manual care must be taken to not invoke\r\n * a parent initializer twice, or ensure that all initializers are idempotent,\r\n * because this is not dealt with automatically as with constructors.\r\n */\r\ncontract Initializable {\r\n    /**\r\n     * @dev Indicates that the contract has been initialized.\r\n     */\r\n    bool private initialized;\r\n\r\n    /**\r\n     * @dev Indicates that the contract is in the process of being initialized.\r\n     */\r\n    bool private initializing;\r\n\r\n    /**\r\n     * @dev Modifier to use in the initializer function of a contract.\r\n     */\r\n    modifier initializer() {\r\n        require(initializing || isConstructor() || !initialized, \"Contract instance has already been initialized\");\r\n\r\n        bool isTopLevelCall = !initializing;\r\n        if (isTopLevelCall) {\r\n            initializing = true;\r\n            initialized = true;\r\n        }\r\n\r\n        _;\r\n\r\n        if (isTopLevelCall) {\r\n            initializing = false;\r\n        }\r\n    }\r\n\r\n    /// @dev Returns true if and only if the function is running in the constructor\r\n    function isConstructor() private view returns (bool) {\r\n        // extcodesize checks the size of the code stored in an address, and\r\n        // address returns the current address. Since the code is still not\r\n        // deployed when running a constructor, any checks on its code size will\r\n        // yield zero, making it an effective way to detect if a contract is\r\n        // under construction or not.\r\n        address self = address(this);\r\n        uint256 cs;\r\n        assembly {\r\n            cs := extcodesize(self)\r\n        }\r\n        return cs == 0;\r\n    }\r\n\r\n    /**\r\n     * @dev Return true if and only if the contract has been initialized\r\n     * @return whether the contract has been initialized\r\n     */\r\n    function isInitialized() public view returns (bool) {\r\n        return initialized;\r\n    }\r\n\r\n    // Reserved storage space to allow for layout changes in the future.\r\n    uint256[50] private ______gap;\r\n}\r\n\r\n\r\n// Dependency file: contracts/common/UpgradeableOwnable.sol\r\n\r\n// pragma solidity 0.6.10;\r\n\r\n// import {Context} from \"@openzeppelin/contracts/GSN/Context.sol\";\r\n\r\n// import {Initializable} from \"contracts/common/Initializable.sol\";\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\ncontract Ownable is Initializable, Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    function initialize() internal initializer {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\n\r\n// Dependency file: contracts/truefi/interface/IArbitraryDistributor.sol\r\n\r\n// pragma solidity 0.6.10;\r\n\r\ninterface IArbitraryDistributor {\r\n    function amount() external returns (uint256);\r\n\r\n    function remaining() external returns (uint256);\r\n\r\n    function beneficiary() external returns (address);\r\n\r\n    function distribute(uint256 _amount) external;\r\n\r\n    function empty() external;\r\n}\r\n\r\n\r\n// Dependency file: contracts/truefi/interface/ILoanFactory.sol\r\n\r\n// pragma solidity 0.6.10;\r\n\r\ninterface ILoanFactory {\r\n    function createLoanToken(\r\n        uint256 _amount,\r\n        uint256 _term,\r\n        uint256 _apy\r\n    ) external;\r\n\r\n    function isLoanToken(address) external view returns (bool);\r\n}\r\n\r\n\r\n// Dependency file: contracts/truefi/interface/ILoanToken.sol\r\n\r\n// pragma solidity 0.6.10;\r\n\r\n// import {IERC20} from \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\r\n\r\ninterface ILoanToken is IERC20 {\r\n    enum Status {Awaiting, Funded, Withdrawn, Settled, Defaulted, Liquidated}\r\n\r\n    function borrower() external view returns (address);\r\n\r\n    function amount() external view returns (uint256);\r\n\r\n    function term() external view returns (uint256);\r\n\r\n    function apy() external view returns (uint256);\r\n\r\n    function start() external view returns (uint256);\r\n\r\n    function lender() external view returns (address);\r\n\r\n    function debt() external view returns (uint256);\r\n\r\n    function profit() external view returns (uint256);\r\n\r\n    function status() external view returns (Status);\r\n\r\n    function borrowerFee() external view returns (uint256);\r\n\r\n    function receivedAmount() external view returns (uint256);\r\n\r\n    function isLoanToken() external pure returns (bool);\r\n\r\n    function getParameters()\r\n        external\r\n        view\r\n        returns (\r\n            uint256,\r\n            uint256,\r\n            uint256\r\n        );\r\n\r\n    function fund() external;\r\n\r\n    function withdraw(address _beneficiary) external;\r\n\r\n    function settle() external;\r\n\r\n    function enterDefault() external;\r\n\r\n    function liquidate() external;\r\n\r\n    function redeem(uint256 _amount) external;\r\n\r\n    function repay(address _sender, uint256 _amount) external;\r\n\r\n    function repayInFull(address _sender) external;\r\n\r\n    function reclaim() external;\r\n\r\n    function allowTransfer(address account, bool _status) external;\r\n\r\n    function repaid() external view returns (uint256);\r\n\r\n    function isRepaid() external view returns (bool);\r\n\r\n    function balance() external view returns (uint256);\r\n\r\n    function value(uint256 _balance) external view returns (uint256);\r\n\r\n    function currencyToken() external view returns (IERC20);\r\n\r\n    function version() external pure returns (uint8);\r\n}\r\n\r\n\r\n// Dependency file: contracts/truefi/interface/ITrueFiPool.sol\r\n\r\n// pragma solidity 0.6.10;\r\n\r\n// import {IERC20} from \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\r\n\r\n/**\r\n * TruePool is an ERC20 which represents a share of a pool\r\n *\r\n * This contract can be used to wrap opportunities to be compatible\r\n * with TrueFi and allow users to directly opt-in through the TUSD contract\r\n *\r\n * Each TruePool is also a staking opportunity for TRU\r\n */\r\ninterface ITrueFiPool is IERC20 {\r\n    /// @dev pool token (TUSD)\r\n    function currencyToken() external view returns (IERC20);\r\n\r\n    /// @dev stake token (TRU)\r\n    function stakeToken() external view returns (IERC20);\r\n\r\n    /**\r\n     * @dev join pool\r\n     * 1. Transfer TUSD from sender\r\n     * 2. Mint pool tokens based on value to sender\r\n     */\r\n    function join(uint256 amount) external;\r\n\r\n    /**\r\n     * @dev exit pool\r\n     * 1. Transfer pool tokens from sender\r\n     * 2. Burn pool tokens\r\n     * 3. Transfer value of pool tokens in TUSD to sender\r\n     */\r\n    function exit(uint256 amount) external;\r\n\r\n    /**\r\n     * @dev borrow from pool\r\n     * 1. Transfer TUSD to sender\r\n     * 2. Only lending pool should be allowed to call this\r\n     */\r\n    function borrow(uint256 amount, uint256 fee) external;\r\n\r\n    /**\r\n     * @dev join pool\r\n     * 1. Transfer TUSD from sender\r\n     * 2. Only lending pool should be allowed to call this\r\n     */\r\n    function repay(uint256 amount) external;\r\n}\r\n\r\n\r\n// Dependency file: contracts/truefi/interface/ITrueRatingAgencyV2.sol\r\n\r\n// pragma solidity 0.6.10;\r\n\r\ninterface ITrueRatingAgencyV2 {\r\n    function getResults(address id)\r\n        external\r\n        view\r\n        returns (\r\n            uint256,\r\n            uint256,\r\n            uint256\r\n        );\r\n\r\n    function submit(address id) external;\r\n\r\n    function retract(address id) external;\r\n\r\n    function resetCastRatings(address id) external;\r\n\r\n    function yes(address id) external;\r\n\r\n    function no(address id) external;\r\n\r\n    function claim(address id, address voter) external;\r\n}\r\n\r\n\r\n// Root file: contracts/truefi/TrueRatingAgencyV2.sol\r\n\r\npragma solidity 0.6.10;\r\n\r\n// import {IERC20} from \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\r\n// import {SafeMath} from \"@openzeppelin/contracts/math/SafeMath.sol\";\r\n\r\n// import {IBurnableERC20} from \"contracts/trusttoken/interface/IBurnableERC20.sol\";\r\n// import {IVoteTokenWithERC20} from \"contracts/governance/interface/IVoteToken.sol\";\r\n\r\n// import {Ownable} from \"contracts/common/UpgradeableOwnable.sol\";\r\n// import {IArbitraryDistributor} from \"contracts/truefi/interface/IArbitraryDistributor.sol\";\r\n// import {ILoanFactory} from \"contracts/truefi/interface/ILoanFactory.sol\";\r\n// import {ILoanToken} from \"contracts/truefi/interface/ILoanToken.sol\";\r\n// import {ITrueFiPool} from \"contracts/truefi/interface/ITrueFiPool.sol\";\r\n// import {ITrueRatingAgencyV2} from \"contracts/truefi/interface/ITrueRatingAgencyV2.sol\";\r\n\r\n/**\r\n * @title TrueRatingAgencyV2\r\n * @dev Credit prediction market for LoanTokens\r\n *\r\n * TrueFi uses use a prediction market to signal how risky a loan is.\r\n * The Credit Prediction Market estimates the likelihood of a loan defaulting.\r\n * Any stkTRU holder can rate YES or NO and stake TRU as collateral on their rate.\r\n * Voting weight is equal to delegated governance power (see VoteToken.sol)\r\n * If a loan is funded, TRU is rewarded as incentive for participation\r\n * Rating stkTRU in the prediction market allows raters to earn and claim TRU\r\n * incentive when the loan is approved\r\n *\r\n * Voting Lifecycle:\r\n * - Borrowers can apply for loans at any time by deploying a LoanToken\r\n * - LoanTokens are registered with the prediction market contract\r\n * - Once registered, stkTRU holders can rate at any time\r\n *\r\n * States:\r\n * Void:        Rated loan is invalid\r\n * Pending:     Waiting to be funded\r\n * Retracted:   Rating has been cancelled\r\n * Running:     Rated loan has been funded\r\n * Settled:     Rated loan has been paid back in full\r\n * Defaulted:   Rated loan has not been paid back in full\r\n * Liquidated:  Rated loan has defaulted and stakers have been liquidated\r\n */\r\ncontract TrueRatingAgencyV2 is ITrueRatingAgencyV2, Ownable {\r\n    using SafeMath for uint256;\r\n\r\n    enum LoanStatus {Void, Pending, Retracted, Running, Settled, Defaulted, Liquidated}\r\n\r\n    struct Loan {\r\n        address creator;\r\n        uint256 timestamp;\r\n        uint256 blockNumber;\r\n        mapping(bool => uint256) prediction;\r\n        mapping(address => mapping(bool => uint256)) ratings;\r\n        mapping(address => uint256) claimed;\r\n        uint256 reward;\r\n    }\r\n\r\n    // TRU is 1e8 decimals\r\n    uint256 private constant TOKEN_PRECISION_DIFFERENCE = 10**10;\r\n\r\n    // ================ WARNING ==================\r\n    // ===== THIS CONTRACT IS INITIALIZABLE ======\r\n    // === STORAGE VARIABLES ARE DECLARED BELOW ==\r\n    // REMOVAL OR REORDER OF VARIABLES WILL RESULT\r\n    // ========= IN STORAGE CORRUPTION ===========\r\n\r\n    mapping(address => bool) public allowedSubmitters;\r\n    mapping(address => Loan) public loans;\r\n\r\n    IBurnableERC20 public TRU;\r\n    IVoteTokenWithERC20 public stkTRU;\r\n    IArbitraryDistributor public distributor;\r\n    ILoanFactory public factory;\r\n\r\n    /**\r\n     * @dev % multiplied by 100. e.g. 10.5% = 1050\r\n     */\r\n    uint256 public ratersRewardFactor;\r\n\r\n    // reward multiplier for raters\r\n    uint256 public rewardMultiplier;\r\n\r\n    // are submissions paused?\r\n    bool public submissionPauseStatus;\r\n\r\n    mapping(address => bool) public canChangeAllowance;\r\n\r\n    // ======= STORAGE DECLARATION END ============\r\n\r\n    event CanChangeAllowanceChanged(address indexed who, bool status);\r\n    event Allowed(address indexed who, bool status);\r\n    event RatersRewardFactorChanged(uint256 ratersRewardFactor);\r\n    event LoanSubmitted(address id);\r\n    event LoanRetracted(address id);\r\n    event Rated(address loanToken, address rater, bool choice, uint256 stake);\r\n    event Withdrawn(address loanToken, address rater, uint256 stake, uint256 received, uint256 burned);\r\n    event RewardMultiplierChanged(uint256 newRewardMultiplier);\r\n    event Claimed(address loanToken, address rater, uint256 claimedReward);\r\n    event SubmissionPauseStatusChanged(bool status);\r\n    event LoanFactoryChanged(address newLoanFactory);\r\n\r\n    /**\r\n     * @dev Only whitelisted borrowers can submit for credit ratings\r\n     */\r\n    modifier onlyAllowedSubmitters() {\r\n        require(allowedSubmitters[msg.sender], \"TrueRatingAgencyV2: Sender is not allowed to submit\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Only loan submitter can perform certain actions\r\n     */\r\n    modifier onlyCreator(address id) {\r\n        require(loans[id].creator == msg.sender, \"TrueRatingAgencyV2: Not sender's loan\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Cannot submit the same loan multiple times\r\n     */\r\n    modifier onlyNotExistingLoans(address id) {\r\n        require(status(id) == LoanStatus.Void, \"TrueRatingAgencyV2: Loan was already created\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Only loans in Pending state\r\n     */\r\n    modifier onlyPendingLoans(address id) {\r\n        require(status(id) == LoanStatus.Pending, \"TrueRatingAgencyV2: Loan is not currently pending\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Only loans that have been funded\r\n     */\r\n    modifier onlyFundedLoans(address id) {\r\n        require(status(id) >= LoanStatus.Running, \"TrueRatingAgencyV2: Loan was not funded\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Initialize Rating Agency\r\n     * Distributor contract decides how much TRU is rewarded to stakers\r\n     * @param _TRU TRU contract\r\n     * @param _distributor Distributor contract\r\n     * @param _factory Factory contract for deploying tokens\r\n     */\r\n    function initialize(\r\n        IBurnableERC20 _TRU,\r\n        IVoteTokenWithERC20 _stkTRU,\r\n        IArbitraryDistributor _distributor,\r\n        ILoanFactory _factory\r\n    ) public initializer {\r\n        require(address(this) == _distributor.beneficiary(), \"TrueRatingAgencyV2: Invalid distributor beneficiary\");\r\n        Ownable.initialize();\r\n\r\n        TRU = _TRU;\r\n        stkTRU = _stkTRU;\r\n        distributor = _distributor;\r\n        factory = _factory;\r\n\r\n        ratersRewardFactor = 10000;\r\n    }\r\n\r\n    /**\r\n     * @dev Set new loan factory.\r\n     * @param _factory New LoanFactory contract address\r\n     */\r\n    function setLoanFactory(ILoanFactory _factory) external onlyOwner {\r\n        factory = _factory;\r\n        emit LoanFactoryChanged(address(_factory));\r\n    }\r\n\r\n    /**\r\n     * @dev Set rater reward factor.\r\n     * Reward factor decides what percentage of rewarded TRU is goes to raters\r\n     */\r\n    function setRatersRewardFactor(uint256 newRatersRewardFactor) external onlyOwner {\r\n        require(newRatersRewardFactor <= 10000, \"TrueRatingAgencyV2: Raters reward factor cannot be greater than 100%\");\r\n        ratersRewardFactor = newRatersRewardFactor;\r\n        emit RatersRewardFactorChanged(newRatersRewardFactor);\r\n    }\r\n\r\n    /**\r\n     * @dev Set reward multiplier.\r\n     * Reward multiplier increases reward for TRU stakers\r\n     */\r\n    function setRewardMultiplier(uint256 newRewardMultiplier) external onlyOwner {\r\n        rewardMultiplier = newRewardMultiplier;\r\n        emit RewardMultiplierChanged(newRewardMultiplier);\r\n    }\r\n\r\n    /**\r\n     * @dev Get number of NO ratings for a specific account and loan\r\n     * @param id Loan ID\r\n     * @param rater Rater account\r\n     */\r\n    function getNoRate(address id, address rater) public view returns (uint256) {\r\n        return loans[id].ratings[rater][false];\r\n    }\r\n\r\n    /**\r\n     * @dev Get number of YES ratings for a specific account and loan\r\n     * @param id Loan ID\r\n     * @param rater Rater account\r\n     */\r\n    function getYesRate(address id, address rater) public view returns (uint256) {\r\n        return loans[id].ratings[rater][true];\r\n    }\r\n\r\n    /**\r\n     * @dev Get total NO ratings for a specific loan\r\n     * @param id Loan ID\r\n     */\r\n    function getTotalNoRatings(address id) public view returns (uint256) {\r\n        return loans[id].prediction[false];\r\n    }\r\n\r\n    /**\r\n     * @dev Get total YES ratings for a specific loan\r\n     * @param id Loan ID\r\n     */\r\n    function getTotalYesRatings(address id) public view returns (uint256) {\r\n        return loans[id].prediction[true];\r\n    }\r\n\r\n    /**\r\n     * @dev Get timestamp at which voting started for a specific loan\r\n     * @param id Loan ID\r\n     */\r\n    function getVotingStart(address id) public view returns (uint256) {\r\n        return loans[id].timestamp;\r\n    }\r\n\r\n    /**\r\n     * @dev Get current results for a specific loan\r\n     * @param id Loan ID\r\n     * @return (start_time, total_no, total_yes)\r\n     */\r\n    function getResults(address id)\r\n        external\r\n        override\r\n        view\r\n        returns (\r\n            uint256,\r\n            uint256,\r\n            uint256\r\n        )\r\n    {\r\n        return (getVotingStart(id), getTotalNoRatings(id), getTotalYesRatings(id));\r\n    }\r\n\r\n    /**\r\n     * @dev Allows addresses to whitelist borrowers\r\n     */\r\n    function allowChangingAllowances(address who, bool status) external onlyOwner {\r\n        canChangeAllowance[who] = status;\r\n        emit CanChangeAllowanceChanged(who, status);\r\n    }\r\n\r\n    /**\r\n     * @dev Whitelist borrowers to submit loans for rating\r\n     * @param who Account to whitelist\r\n     * @param status Flag to whitelist accounts\r\n     */\r\n    function allow(address who, bool status) external {\r\n        require(canChangeAllowance[msg.sender], \"TrueFiPool: Cannot change allowances\");\r\n        allowedSubmitters[who] = status;\r\n        emit Allowed(who, status);\r\n    }\r\n\r\n    /**\r\n     * @dev Pause submitting loans for rating\r\n     * @param status Flag of the status\r\n     */\r\n    function pauseSubmissions(bool status) public onlyOwner {\r\n        submissionPauseStatus = status;\r\n        emit SubmissionPauseStatusChanged(status);\r\n    }\r\n\r\n    /**\r\n     * @dev Submit a loan for rating\r\n     * Cannot submit the same loan twice\r\n     * @param id Loan ID\r\n     */\r\n    function submit(address id) external override onlyAllowedSubmitters onlyNotExistingLoans(id) {\r\n        require(!submissionPauseStatus, \"TrueRatingAgencyV2: New submissions are paused\");\r\n        require(ILoanToken(id).borrower() == msg.sender, \"TrueRatingAgencyV2: Sender is not borrower\");\r\n        require(factory.isLoanToken(id), \"TrueRatingAgencyV2: Only LoanTokens created via LoanFactory are supported\");\r\n        loans[id] = Loan({creator: msg.sender, timestamp: block.timestamp, blockNumber: block.number, reward: 0});\r\n        emit LoanSubmitted(id);\r\n    }\r\n\r\n    /**\r\n     * @dev Remove Loan from rating agency\r\n     * Can only be retracted by loan creator\r\n     * @param id Loan ID\r\n     */\r\n    function retract(address id) external override onlyPendingLoans(id) onlyCreator(id) {\r\n        loans[id].creator = address(0);\r\n        loans[id].prediction[true] = 0;\r\n        loans[id].prediction[false] = 0;\r\n\r\n        emit LoanRetracted(id);\r\n    }\r\n\r\n    /**\r\n     * @dev Rate on a loan by staking TRU\r\n     * @param id Loan ID\r\n     * @param choice Rater choice. false = NO, true = YES\r\n     */\r\n    function rate(address id, bool choice) internal {\r\n        uint256 stake = stkTRU.getPriorVotes(msg.sender, loans[id].blockNumber);\r\n        require(stake > 0, \"TrueRatingAgencyV2: Cannot rate with empty balance\");\r\n\r\n        resetCastRatings(id);\r\n\r\n        loans[id].prediction[choice] = loans[id].prediction[choice].add(stake);\r\n        loans[id].ratings[msg.sender][choice] = loans[id].ratings[msg.sender][choice].add(stake);\r\n\r\n        emit Rated(id, msg.sender, choice, stake);\r\n    }\r\n\r\n    /**\r\n     * @dev Internal function to help reset ratings\r\n     * @param id Loan ID\r\n     * @param choice Boolean representing choice\r\n     */\r\n    function _resetCastRatings(address id, bool choice) internal {\r\n        loans[id].prediction[choice] = loans[id].prediction[choice].sub(loans[id].ratings[msg.sender][choice]);\r\n        loans[id].ratings[msg.sender][choice] = 0;\r\n    }\r\n\r\n    /**\r\n     * @dev Cancel ratings of msg.sender\r\n     * @param id ID to cancel ratings for\r\n     */\r\n    function resetCastRatings(address id) public override onlyPendingLoans(id) {\r\n        if (getYesRate(id, msg.sender) > 0) {\r\n            _resetCastRatings(id, true);\r\n        } else if (getNoRate(id, msg.sender) > 0) {\r\n            _resetCastRatings(id, false);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Rate YES on a loan by staking TRU\r\n     * @param id Loan ID\r\n     */\r\n    function yes(address id) external override onlyPendingLoans(id) {\r\n        rate(id, true);\r\n    }\r\n\r\n    /**\r\n     * @dev Rate NO on a loan by staking TRU\r\n     * @param id Loan ID\r\n     */\r\n    function no(address id) external override onlyPendingLoans(id) {\r\n        rate(id, false);\r\n    }\r\n\r\n    /**\r\n     * @dev Internal view to convert values to 8 decimals precision\r\n     * @param input Value to convert to TRU precision\r\n     * @return output TRU amount\r\n     */\r\n    function toTRU(uint256 input) internal pure returns (uint256 output) {\r\n        output = input.div(TOKEN_PRECISION_DIFFERENCE);\r\n    }\r\n\r\n    /**\r\n     * @dev Update total TRU reward for a Loan\r\n     * Reward is divided proportionally based on # TRU staked\r\n     * chi = (TRU remaining in distributor) / (Total TRU allocated for distribution)\r\n     * interest = (loan APY * term * principal)\r\n     * R = Total Reward = (interest * chi * rewardFactor)\r\n     * @param id Loan ID\r\n     */\r\n    modifier calculateTotalReward(address id) {\r\n        if (loans[id].reward == 0) {\r\n            uint256 interest = ILoanToken(id).profit();\r\n\r\n            // calculate reward\r\n            // prettier-ignore\r\n            uint256 totalReward = toTRU(\r\n                interest\r\n                    .mul(distributor.remaining())\r\n                    .mul(rewardMultiplier)\r\n                    .div(distributor.amount())\r\n            );\r\n\r\n            uint256 ratersReward = totalReward.mul(ratersRewardFactor).div(10000);\r\n            loans[id].reward = ratersReward;\r\n            if (totalReward > 0) {\r\n                distributor.distribute(totalReward);\r\n                TRU.transfer(address(stkTRU), totalReward.sub(ratersReward));\r\n            }\r\n        }\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Claim TRU rewards for raters\r\n     * - Only can claim TRU rewards for funded loans\r\n     * - Claimed automatically when a user withdraws stake\r\n     *\r\n     * chi = (TRU remaining in distributor) / (Total TRU allocated for distribution)\r\n     * interest = (loan APY * term * principal)\r\n     * R = Total Reward = (interest * chi)\r\n     * R is distributed to raters based on their proportion of ratings/total_ratings\r\n     *\r\n     * Claimable reward = R x (current time / total time)\r\n     *      * (account TRU staked / total TRU staked) - (amount claimed)\r\n     *\r\n     * @param id Loan ID\r\n     * @param rater Rater account\r\n     */\r\n    function claim(address id, address rater) external override onlyFundedLoans(id) calculateTotalReward(id) {\r\n        uint256 claimableRewards = claimable(id, rater);\r\n\r\n        if (claimableRewards > 0) {\r\n            // track amount of claimed tokens\r\n            loans[id].claimed[rater] = loans[id].claimed[rater].add(claimableRewards);\r\n            // transfer tokens\r\n            require(TRU.transfer(rater, claimableRewards));\r\n            emit Claimed(id, rater, claimableRewards);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Get amount claimed for loan ID and rater address\r\n     * @param id Loan ID\r\n     * @param rater Rater address\r\n     * @return Amount claimed for id and address\r\n     */\r\n    function claimed(address id, address rater) external view returns (uint256) {\r\n        return loans[id].claimed[rater];\r\n    }\r\n\r\n    /**\r\n     * @dev Get amount claimable for loan ID and rater address\r\n     * @param id Loan ID\r\n     * @param rater Rater address\r\n     * @return Amount claimable for id and address\r\n     */\r\n    function claimable(address id, address rater) public view returns (uint256) {\r\n        if (status(id) < LoanStatus.Running) {\r\n            return 0;\r\n        }\r\n\r\n        // calculate how many tokens user can claim\r\n        // claimable = stakedByRater / totalStaked\r\n        uint256 stakedByRater = loans[id].ratings[rater][false].add(loans[id].ratings[rater][true]);\r\n        uint256 totalStaked = loans[id].prediction[false].add(loans[id].prediction[true]);\r\n\r\n        // calculate claimable rewards at current time\r\n        uint256 totalClaimable = loans[id].reward.mul(stakedByRater).div(totalStaked);\r\n\r\n        return totalClaimable.sub(loans[id].claimed[rater]);\r\n    }\r\n\r\n    /**\r\n     * @dev Get status for a specific loan\r\n     * We rely on correct implementation of LoanToken\r\n     * @param id Loan ID\r\n     * @return Status of loan\r\n     */\r\n    function status(address id) public view returns (LoanStatus) {\r\n        Loan storage loan = loans[id];\r\n        // Void loan doesn't exist because timestamp is zero\r\n        if (loan.creator == address(0) && loan.timestamp == 0) {\r\n            return LoanStatus.Void;\r\n        }\r\n        // Retracted loan was cancelled by borrower\r\n        if (loan.creator == address(0) && loan.timestamp != 0) {\r\n            return LoanStatus.Retracted;\r\n        }\r\n        // get internal status\r\n        ILoanToken.Status loanInternalStatus = ILoanToken(id).status();\r\n\r\n        // Running is Funded || Withdrawn\r\n        if (loanInternalStatus == ILoanToken.Status.Funded || loanInternalStatus == ILoanToken.Status.Withdrawn) {\r\n            return LoanStatus.Running;\r\n        }\r\n        // Settled has been paid back in full and past term\r\n        if (loanInternalStatus == ILoanToken.Status.Settled) {\r\n            return LoanStatus.Settled;\r\n        }\r\n        // Defaulted has not been paid back in full and past term\r\n        if (loanInternalStatus == ILoanToken.Status.Defaulted) {\r\n            return LoanStatus.Defaulted;\r\n        }\r\n        // Liquidated is same as defaulted and stakers have been liquidated\r\n        if (loanInternalStatus == ILoanToken.Status.Liquidated) {\r\n            return LoanStatus.Liquidated;\r\n        }\r\n        // otherwise return Pending\r\n        return LoanStatus.Pending;\r\n    }\r\n}","ABI":"[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"status\",\"type\":\"bool\"}],\"name\":\"Allowed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"status\",\"type\":\"bool\"}],\"name\":\"CanChangeAllowanceChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"loanToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"rater\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"claimedReward\",\"type\":\"uint256\"}],\"name\":\"Claimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newLoanFactory\",\"type\":\"address\"}],\"name\":\"LoanFactoryChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"id\",\"type\":\"address\"}],\"name\":\"LoanRetracted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"id\",\"type\":\"address\"}],\"name\":\"LoanSubmitted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"loanToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"rater\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"choice\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"stake\",\"type\":\"uint256\"}],\"name\":\"Rated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"ratersRewardFactor\",\"type\":\"uint256\"}],\"name\":\"RatersRewardFactorChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newRewardMultiplier\",\"type\":\"uint256\"}],\"name\":\"RewardMultiplierChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"status\",\"type\":\"bool\"}],\"name\":\"SubmissionPauseStatusChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"loanToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"rater\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"stake\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"received\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"burned\",\"type\":\"uint256\"}],\"name\":\"Withdrawn\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"TRU\",\"outputs\":[{\"internalType\":\"contract IBurnableERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"status\",\"type\":\"bool\"}],\"name\":\"allow\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"status\",\"type\":\"bool\"}],\"name\":\"allowChangingAllowances\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"allowedSubmitters\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"canChangeAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"id\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"rater\",\"type\":\"address\"}],\"name\":\"claim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"id\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"rater\",\"type\":\"address\"}],\"name\":\"claimable\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"id\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"rater\",\"type\":\"address\"}],\"name\":\"claimed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"distributor\",\"outputs\":[{\"internalType\":\"contract IArbitraryDistributor\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"factory\",\"outputs\":[{\"internalType\":\"contract ILoanFactory\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"id\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"rater\",\"type\":\"address\"}],\"name\":\"getNoRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"id\",\"type\":\"address\"}],\"name\":\"getResults\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"id\",\"type\":\"address\"}],\"name\":\"getTotalNoRatings\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"id\",\"type\":\"address\"}],\"name\":\"getTotalYesRatings\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"id\",\"type\":\"address\"}],\"name\":\"getVotingStart\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"id\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"rater\",\"type\":\"address\"}],\"name\":\"getYesRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IBurnableERC20\",\"name\":\"_TRU\",\"type\":\"address\"},{\"internalType\":\"contract IVoteTokenWithERC20\",\"name\":\"_stkTRU\",\"type\":\"address\"},{\"internalType\":\"contract IArbitraryDistributor\",\"name\":\"_distributor\",\"type\":\"address\"},{\"internalType\":\"contract ILoanFactory\",\"name\":\"_factory\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isInitialized\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"loans\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"blockNumber\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"id\",\"type\":\"address\"}],\"name\":\"no\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"status\",\"type\":\"bool\"}],\"name\":\"pauseSubmissions\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ratersRewardFactor\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"id\",\"type\":\"address\"}],\"name\":\"resetCastRatings\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"id\",\"type\":\"address\"}],\"name\":\"retract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardMultiplier\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ILoanFactory\",\"name\":\"_factory\",\"type\":\"address\"}],\"name\":\"setLoanFactory\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newRatersRewardFactor\",\"type\":\"uint256\"}],\"name\":\"setRatersRewardFactor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newRewardMultiplier\",\"type\":\"uint256\"}],\"name\":\"setRewardMultiplier\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"id\",\"type\":\"address\"}],\"name\":\"status\",\"outputs\":[{\"internalType\":\"enum TrueRatingAgencyV2.LoanStatus\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stkTRU\",\"outputs\":[{\"internalType\":\"contract IVoteTokenWithERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"submissionPauseStatus\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"id\",\"type\":\"address\"}],\"name\":\"submit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"id\",\"type\":\"address\"}],\"name\":\"yes\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"TrueRatingAgencyV2","CompilerVersion":"v0.6.10+commit.00c0fcaf","OptimizationUsed":"1","Runs":"20000","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://86324196ff6ec89da252cff7edb8014f598a22bef36b8eefae78a8d5728a7076"}]}