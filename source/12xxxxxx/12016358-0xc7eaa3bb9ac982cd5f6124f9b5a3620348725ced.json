{"status":"1","message":"OK","result":[{"SourceCode":"{\"Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity \\u003e=0.6.2 \\u003c0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size \\u003e 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity\\u0027s `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance \\u003e= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance \\u003e= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length \\u003e 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"},\"ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity \\u003e=0.6.0 \\u003c0.8.0;\\nimport \\\"./Initializable.sol\\\";\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal initializer {\\n        __Context_init_unchained();\\n    }\\n\\n    function __Context_init_unchained() internal initializer {\\n    }\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n    uint256[50] private __gap;\\n}\\n\"},\"CVaultETHLP.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.6.12;\\npragma experimental ABIEncoderV2;\\n\\n/*\\n  ___                      _   _\\n | _ )_  _ _ _  _ _ _  _  | | | |\\n | _ \\\\ || | \\u0027 \\\\| \\u0027 \\\\ || | |_| |_|\\n |___/\\\\_,_|_||_|_||_\\\\_, | (_) (_)\\n                    |__/\\n\\n*\\n* MIT License\\n* ===========\\n*\\n* Copyright (c) 2020 BunnyFinance\\n*\\n* Permission is hereby granted, free of charge, to any person obtaining a copy\\n* of this software and associated documentation files (the \\\"Software\\\"), to deal\\n* in the Software without restriction, including without limitation the rights\\n* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\\n* copies of the Software, and to permit persons to whom the Software is\\n* furnished to do so, subject to the following conditions:\\n*\\n* The above copyright notice and this permission notice shall be included in all\\n* copies or substantial portions of the Software.\\n*\\n* THE SOFTWARE IS PROVIDED \\\"AS IS\\\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\\n* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\\n* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\\n* AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\\n* LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\\n* OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\\n*/\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./SafeERC20.sol\\\";\\nimport \\\"./Math.sol\\\";\\nimport \\\"./OwnableUpgradeable.sol\\\";\\n\\nimport \\\"./IUniswapV2Pair.sol\\\";\\nimport \\\"./ICVaultETHLP.sol\\\";\\nimport \\\"./ICVaultRelayer.sol\\\";\\nimport \\\"./IZap.sol\\\";\\nimport \\\"./Whitelist.sol\\\";\\nimport \\\"./CVaultETHLPState.sol\\\";\\nimport \\\"./CVaultETHLPStorage.sol\\\";\\n\\n\\ncontract CVaultETHLP is ICVaultETHLP, CVaultETHLPStorage, Whitelist {\\n    using SafeMath for uint;\\n    using SafeERC20 for IERC20;\\n\\n    uint8 private constant SIG_DEPOSIT = 10;\\n    uint8 private constant SIG_LEVERAGE = 20;\\n    uint8 private constant SIG_WITHDRAW = 30;\\n    uint8 private constant SIG_LIQUIDATE = 40;\\n    uint8 private constant SIG_EMERGENCY = 50;\\n    uint8 private constant SIG_CLEAR = 63;          // only owner can execute if state is idle but the BSC position remains.\\n\\n    /* ========== STATE VARIABLES ========== */\\n\\n    IZap public zap;\\n    address public treasury;\\n\\n    uint public relayerCost;\\n    uint public minimumDepositValue;\\n    uint public liquidationCollateralRatio;\\n\\n    /* ========== EVENTS ========== */\\n\\n    // Relay Request Events\\n    event DepositRequested(address indexed lp, address indexed account, uint indexed eventId, uint lpAmount, uint leverage);\\n    event UpdateLeverageRequested(address indexed lp, address indexed account, uint indexed eventId, uint leverage, uint collateral);\\n    event WithdrawRequested(address indexed lp, address indexed account, uint indexed eventId, uint lpAmount);\\n    event WithdrawAllRequested(address indexed lp, address indexed account, uint indexed eventId);\\n    event LiquidateRequested(address indexed lp, address indexed account, uint indexed eventId, uint lpAmount, address liquidator);\\n    event EmergencyExitRequested(address indexed lp, address indexed account, uint indexed eventId, uint lpAmount);\\n\\n    // Impossible Situation: only owner can execute if state is idle but the BSC position remains.\\n    event ClearBSCState(address indexed lp, address indexed account, uint indexed eventId);\\n\\n    // Relay Response Events\\n    event NotifyDeposited(address indexed lp, address indexed account, uint indexed eventId, uint bscBNBDebtShare, uint bscFlipBalance);\\n    event NotifyUpdatedLeverage(address indexed lp, address indexed account, uint indexed eventId, uint bscBNBDebtShare, uint bscFlipBalance);\\n    event NotifyWithdrawnAll(address indexed lp, address indexed account, uint indexed eventId, uint lpAmount, uint ethProfit, uint ethLoss);\\n    event NotifyLiquidated(address indexed lp, address indexed account, uint indexed eventId, uint ethProfit, uint ethLoss, uint penaltyLPAmount, address liquidator);\\n    event NotifyResolvedEmergency(address indexed lp, address indexed account, uint indexed eventId);\\n\\n    // User Events\\n    event CollateralAdded(address indexed lp, address indexed account, uint lpAmount);\\n    event CollateralRemoved(address indexed lp, address indexed account, uint lpAmount);\\n    event UnpaidProfitClaimed(address indexed account, uint ethValue);\\n    event LossRealized(address indexed lp, address indexed account, uint indexed eventId, uint soldLPAmount, uint ethValue);\\n\\n    /* ========== MODIFIERS ========== */\\n\\n    modifier onlyCVaultRelayer() {\\n        require(address(relayer) != address(0) \\u0026\\u0026 msg.sender == address(relayer), \\\"CVaultETHLP: caller is not the relayer\\\");\\n        _;\\n    }\\n\\n    modifier canRemoveCollateral(address lp, address _account, uint amount) {\\n        Account memory account = accountOf(lp, msg.sender);\\n        uint ratio = relayer.collateralRatioOnETH(lp, account.collateral.sub(amount), bscFlipOf(lp), account.bscFlipBalance, account.bscBNBDebt);\\n        require(ratio \\u003e= COLLATERAL_RATIO_MIN, \\\"CVaultETHLP: can withdraw only up to 180% of the collateral ratio\\\");\\n        _;\\n    }\\n\\n    modifier hasEnoughBalance(uint value) {\\n        require(address(this).balance \\u003e= value, \\\"CVaultETHLP: not enough balance, please try after UTC 00:00\\\");\\n        _;\\n    }\\n\\n    modifier costs {\\n        uint txFee = relayerCost;\\n        require(msg.value \\u003e= txFee, \\\"CVaultETHLP: Not enough ether provided\\\");\\n        _;\\n        if (msg.value \\u003e txFee) {\\n            msg.sender.transfer(msg.value.sub(txFee));\\n        }\\n    }\\n\\n    /* ========== INITIALIZER ========== */\\n\\n    function initialize() external initializer {\\n        __CVaultETHLPStorage_init();\\n        __Whitelist_init();\\n\\n        relayerCost = 0.015 ether;\\n        minimumDepositValue = 100e18;\\n        liquidationCollateralRatio = 125e16;        // 125% == debt ratio 80%\\n    }\\n\\n    /* ========== RESTRICTED FUNCTIONS ========== */\\n\\n    function setZap(address newZap) external onlyOwner {\\n        zap = IZap(newZap);\\n    }\\n\\n    function setPool(address lp, address bscFlip) external onlyOwner {\\n        _setPool(lp, bscFlip);\\n        IERC20(lp).safeApprove(address(zap), uint(- 1));\\n    }\\n\\n    function recoverToken(address token, uint amount) external onlyOwner {\\n        require(bscFlipOf(token) == address(0), \\\"CVaultETHLP: lp token can\\u0027t be recovered\\\");\\n        IERC20(token).safeTransfer(owner(), amount);\\n    }\\n\\n    function setTreasury(address newTreasury) external onlyOwner {\\n        require(newTreasury != address(0), \\\"CVaultETHLP: invalid treasury address\\\");\\n        treasury = newTreasury;\\n    }\\n\\n    function setRelayerCost(uint newValue) external onlyOwner {\\n        relayerCost = newValue;\\n    }\\n\\n    function setMinimumDepositValue(uint newValue) external onlyOwner {\\n        require(newValue \\u003e 0, \\\"CVaultETHLP: minimum deposit value is zero\\\");\\n        minimumDepositValue = newValue;\\n    }\\n\\n    function updateLiquidationCollateralRatio(uint newCollateralRatio) external onlyOwner {\\n        require(newCollateralRatio \\u003c COLLATERAL_RATIO_MIN, \\\"CVaultETHLP: liquidation collateral ratio must be lower than COLLATERAL_RATIO_MIN\\\");\\n        liquidationCollateralRatio = newCollateralRatio;\\n    }\\n\\n    function clearBSCState(address lp, address _account) external onlyOwner {\\n        require(stateOf(lp, _account) == State.Idle, \\\"CVaultETHLP: account should be idle state\\\");\\n\\n        uint eventId = relayer.requestRelayOnETH(lp, _account, SIG_CLEAR, 0, 0, 0);\\n        emit ClearBSCState(lp, _account, eventId);\\n    }\\n\\n    /* ========== VIEW FUNCTIONS ========== */\\n\\n    function validateRequest(uint8 signature, address _lp, address _account, uint128 _leverage, uint _collateral) external override view returns (uint8 validation, uint112 nonce) {\\n        Account memory account = accountOf(_lp, _account);\\n        bool isValid = false;\\n        if (signature == SIG_DEPOSIT) {\\n            isValid =\\n            account.state == State.Depositing\\n            \\u0026\\u0026 account.collateral \\u003e 0\\n            \\u0026\\u0026 account.collateral == _collateral\\n            \\u0026\\u0026 account.leverage == _leverage\\n            \\u0026\\u0026 account.updatedAt + EMERGENCY_EXIT_TIMELOCK - 10 minutes \\u003e block.timestamp;\\n        }\\n        else if (signature == SIG_LEVERAGE) {\\n            isValid =\\n            account.state == State.UpdatingLeverage\\n            \\u0026\\u0026 account.collateral \\u003e 0\\n            \\u0026\\u0026 account.collateral == _collateral\\n            \\u0026\\u0026 account.leverage == _leverage\\n            \\u0026\\u0026 account.updatedAt + EMERGENCY_EXIT_TIMELOCK - 10 minutes \\u003e block.timestamp;\\n        }\\n        else if (signature == SIG_WITHDRAW) {\\n            isValid =\\n            account.state == State.Withdrawing\\n            \\u0026\\u0026 account.collateral \\u003e 0\\n            \\u0026\\u0026 account.leverage == 0\\n            \\u0026\\u0026 account.updatedAt + EMERGENCY_EXIT_TIMELOCK - 10 minutes \\u003e block.timestamp;\\n        }\\n        else if (signature == SIG_EMERGENCY) {\\n            isValid =\\n            account.state == State.EmergencyExited\\n            \\u0026\\u0026 account.collateral == 0\\n            \\u0026\\u0026 account.leverage == 0;\\n        }\\n        else if (signature == SIG_LIQUIDATE) {\\n            isValid =\\n            account.state == State.Liquidating\\n            \\u0026\\u0026 account.liquidator != address(0);\\n        }\\n        else if (signature == SIG_CLEAR) {\\n            isValid = account.state == State.Idle \\u0026\\u0026 account.collateral == 0;\\n        }\\n\\n        validation = isValid ? uint8(1) : uint8(0);\\n        nonce = account.nonce;\\n    }\\n\\n    function canLiquidate(address lp, address _account) public override view returns (bool) {\\n        Account memory account = accountOf(lp, _account);\\n        return account.state == State.Farming \\u0026\\u0026 collateralRatioOf(lp, _account) \\u003c liquidationCollateralRatio;\\n    }\\n\\n    function collateralRatioOf(address lp, address _account) public view returns (uint) {\\n        Account memory account = accountOf(lp, _account);\\n        return relayer.collateralRatioOnETH(lp, account.collateral, bscFlipOf(lp), account.bscFlipBalance, account.bscBNBDebt);\\n    }\\n\\n    /* ========== MUTATIVE FUNCTIONS ========== */\\n\\n    function deposit(address lp, uint amount, uint128 leverage) external notPaused notPausedPool(lp) validLeverage(leverage) onlyWhitelisted payable costs {\\n        require(relayer.isUtilizable(lp, amount, leverage), \\\"CVaultETHLP: not enough balance to loan in the bank\\\");\\n        require(relayer.valueOfAsset(lp, amount) \\u003e= minimumDepositValue, \\\"CVaultETHLP: less than minimum deposit\\\");\\n\\n        convertState(lp, msg.sender, State.Depositing);\\n\\n        uint collateral = _addCollateral(lp, msg.sender, amount);\\n        setLeverage(lp, msg.sender, leverage);\\n\\n        uint eventId = relayer.requestRelayOnETH(lp, msg.sender, SIG_DEPOSIT, leverage, collateral, amount);\\n        emit DepositRequested(lp, msg.sender, eventId, amount, leverage);\\n    }\\n\\n    function updateLeverage(address lp, uint128 leverage) external notPaused notPausedPool(lp) validLeverage(leverage) payable costs {\\n        convertState(lp, msg.sender, State.UpdatingLeverage);\\n        Account memory account = accountOf(lp, msg.sender);\\n        uint leverageDiff = Math.max(account.leverage, leverage).sub(Math.min(account.leverage, leverage));\\n\\n        setLeverage(lp, msg.sender, leverage);\\n\\n        uint eventId = relayer.requestRelayOnETH(lp, msg.sender, SIG_LEVERAGE, leverage, account.collateral, account.collateral.mul(leverageDiff).div(UNIT));\\n        emit UpdateLeverageRequested(lp, msg.sender, eventId, leverage, accountOf(lp, msg.sender).collateral);\\n    }\\n\\n    function withdraw(address lp, uint amount) external payable costs {\\n        convertState(lp, msg.sender, State.UpdatingLeverage);\\n\\n        Account memory account = accountOf(lp, msg.sender);\\n        uint targetCollateral = account.collateral.sub(amount);\\n        uint leverage = uint(account.leverage).mul(targetCollateral).div(account.collateral);\\n        require(LEVERAGE_MIN \\u003c= leverage \\u0026\\u0026 leverage \\u003c= LEVERAGE_MAX, \\\"CVaultETHLP: leverage range should be [10%-150%]\\\");\\n\\n        setLeverage(lp, msg.sender, uint128(leverage));\\n        setWithdrawalRequestAmount(lp, msg.sender, amount);\\n\\n        uint eventId = relayer.requestRelayOnETH(lp, msg.sender, SIG_LEVERAGE, uint128(leverage), account.collateral, amount);\\n        emit UpdateLeverageRequested(lp, msg.sender, eventId, leverage, accountOf(lp, msg.sender).collateral);\\n        emit WithdrawRequested(lp, msg.sender, eventId, amount);\\n    }\\n\\n    function withdrawAll(address lp) external payable costs {\\n        convertState(lp, msg.sender, State.Withdrawing);\\n        setLeverage(lp, msg.sender, 0);\\n\\n        Account memory account = accountOf(lp, msg.sender);\\n        uint eventId = relayer.requestRelayOnETH(lp, msg.sender, SIG_WITHDRAW, account.leverage, account.collateral, account.collateral);\\n        emit WithdrawAllRequested(lp, msg.sender, eventId);\\n    }\\n\\n    function claimUnpaidETH(uint value) external hasEnoughBalance(value) {\\n        decreaseUnpaidETHValue(msg.sender, value);\\n        payable(msg.sender).transfer(value);\\n        emit UnpaidProfitClaimed(msg.sender, value);\\n    }\\n\\n    function emergencyExit(address lp) external {\\n        convertState(lp, msg.sender, State.EmergencyExited);\\n        setLeverage(lp, msg.sender, 0);\\n\\n        Account memory account = accountOf(lp, msg.sender);\\n        _removeCollateral(lp, msg.sender, account.collateral);\\n\\n        uint eventId = relayer.requestRelayOnETH(lp, msg.sender, SIG_EMERGENCY, 0, account.collateral, account.collateral);\\n        emit EmergencyExitRequested(lp, msg.sender, eventId, account.collateral);\\n    }\\n\\n    function addCollateral(address lp, uint amount) external onlyStateFarming(lp) {\\n        _addCollateral(lp, msg.sender, amount);\\n        emit CollateralAdded(lp, msg.sender, amount);\\n    }\\n\\n    function removeCollateral(address lp, uint amount) external onlyStateFarming(lp) canRemoveCollateral(lp, msg.sender, amount) {\\n        _removeCollateral(lp, msg.sender, amount);\\n        emit CollateralRemoved(lp, msg.sender, amount);\\n    }\\n\\n    function askLiquidation(address lp, address account) external payable costs {\\n        relayer.askLiquidationFromCVaultETH(lp, account, msg.sender);\\n    }\\n\\n    function executeLiquidation(address lp, address _account, address _liquidator) external override onlyCVaultRelayer {\\n        if (!canLiquidate(lp, _account)) return;\\n\\n        setLiquidator(lp, _account, _liquidator);\\n        convertState(lp, _account, State.Liquidating);\\n\\n        Account memory account = accountOf(lp, _account);\\n        uint eventId = relayer.requestRelayOnETH(lp, _account, SIG_LIQUIDATE, account.leverage, account.collateral, account.collateral);\\n        emit LiquidateRequested(lp, _account, eventId, account.collateral, _liquidator);\\n    }\\n\\n    /* ========== RELAYER FUNCTIONS ========== */\\n\\n    function notifyDeposited(address lp, address _account, uint128 eventId, uint112 nonce, uint bscBNBDebt, uint bscFlipBalance) external override increaseNonceOnlyRelayers(lp, _account, nonce) {\\n        _notifyDeposited(lp, _account, bscBNBDebt, bscFlipBalance);\\n        emit NotifyDeposited(lp, _account, eventId, bscBNBDebt, bscFlipBalance);\\n    }\\n\\n    function notifyUpdatedLeverage(address lp, address _account, uint128 eventId, uint112 nonce, uint bscBNBDebt, uint bscFlipBalance) external override increaseNonceOnlyRelayers(lp, _account, nonce) {\\n        _notifyDeposited(lp, _account, bscBNBDebt, bscFlipBalance);\\n        emit NotifyUpdatedLeverage(lp, _account, eventId, bscBNBDebt, bscFlipBalance);\\n\\n        uint withdrawalRequestAmount = accountOf(lp, _account).withdrawalRequestAmount;\\n        if (withdrawalRequestAmount \\u003e 0) {\\n            setWithdrawalRequestAmount(lp, _account, 0);\\n            _removeCollateral(lp, _account, withdrawalRequestAmount);\\n            emit CollateralRemoved(lp, _account, withdrawalRequestAmount);\\n        }\\n    }\\n\\n    function notifyWithdrawnAll(address lp, address _account, uint128 eventId, uint112 nonce, uint ethProfit, uint ethLoss) external override increaseNonceOnlyRelayers(lp, _account, nonce) {\\n        require(stateOf(lp, _account) == State.Withdrawing, \\\"CVaultETHLP: state not Withdrawing\\\");\\n        if (ethLoss \\u003e 0) {\\n            _repayLoss(lp, _account, eventId, ethLoss);\\n        }\\n\\n        uint lpAmount = accountOf(lp, _account).collateral;\\n        _removeCollateral(lp, _account, lpAmount);\\n\\n        if (ethProfit \\u003e 0) {\\n            _payProfit(_account, ethProfit);\\n        }\\n\\n        convertState(lp, _account, State.Idle);\\n        emit NotifyWithdrawnAll(lp, _account, eventId, lpAmount, ethProfit, ethLoss);\\n    }\\n\\n    function notifyLiquidated(address lp, address _account, uint128 eventId, uint112 nonce, uint ethProfit, uint ethLoss) external override increaseNonceOnlyRelayers(lp, _account, nonce) {\\n        require(stateOf(lp, _account) == State.Liquidating, \\\"CVaultETHLP: state not Liquidating\\\");\\n        if (ethLoss \\u003e 0) {\\n            _repayLoss(lp, _account, eventId, ethLoss);\\n        }\\n\\n        Account memory account = accountOf(lp, _account);\\n        address liquidator = account.liquidator;\\n\\n        uint penalty = account.collateral.mul(LIQUIDATION_PENALTY).div(UNIT);\\n        _payLiquidationPenalty(lp, _account, penalty, account.liquidator);\\n        _removeCollateral(lp, _account, account.collateral.sub(penalty));\\n\\n        if (ethProfit \\u003e 0) {\\n            _payProfit(_account, ethProfit);\\n        }\\n        convertState(lp, _account, State.Idle);\\n        emit NotifyLiquidated(lp, _account, eventId, ethProfit, ethLoss, penalty, liquidator);\\n    }\\n\\n    function notifyResolvedEmergency(address lp, address _account, uint128 eventId, uint112 nonce) external override increaseNonceOnlyRelayers(lp, _account, nonce) {\\n        require(stateOf(lp, _account) == State.EmergencyExited, \\\"CVaultETHLP: state not EmergencyExited\\\");\\n        convertState(lp, _account, State.Idle);\\n\\n        emit NotifyResolvedEmergency(lp, _account, eventId);\\n    }\\n\\n    /* ========== PRIVATE FUNCTIONS ========== */\\n\\n    function _addCollateral(address lp, address _account, uint amount) private returns (uint collateral) {\\n        IERC20(lp).transferFrom(_account, address(this), amount);\\n        collateral = increaseCollateral(lp, _account, amount);\\n    }\\n\\n    function _removeCollateral(address lp, address _account, uint amount) private returns (uint collateral) {\\n        collateral = decreaseCollateral(lp, _account, amount);\\n\\n        uint _fee = withdrawalFee(lp, _account, amount);\\n        if (_fee \\u003e 0) {\\n            _zapOutAll(lp, _fee);\\n        }\\n        IERC20(lp).safeTransfer(_account, amount.sub(_fee));\\n    }\\n\\n    function _notifyDeposited(address lp, address _account, uint bscBNBDebt, uint bscFlipBalance) private {\\n        convertState(lp, _account, State.Farming);\\n\\n        setBSCBNBDebt(lp, _account, bscBNBDebt);\\n        setBSCFlipBalance(lp, _account, bscFlipBalance);\\n    }\\n\\n    function _payProfit(address _account, uint value) private {\\n        uint transfer;\\n        uint balance = address(this).balance;\\n        if (balance \\u003e= value) {\\n            transfer = value;\\n        } else {\\n            transfer = balance;\\n            increaseUnpaidETHValue(_account, value.sub(balance));\\n        }\\n\\n        if (transfer \\u003e 0) {\\n            payable(_account).transfer(transfer);\\n        }\\n    }\\n\\n    function _repayLoss(address lp, address _account, uint128 eventId, uint value) private {\\n        if (unpaidETH(_account) \\u003e= value) {\\n            decreaseUnpaidETHValue(_account, value);\\n            return;\\n        }\\n\\n        Account memory account = accountOf(lp, _account);\\n        uint price = relayer.priceOf(lp);\\n        uint amount = Math.min(value.mul(1e18).div(price).mul(1000).div(997), account.collateral);\\n        uint before = address(this).balance;\\n        _zapOutAll(lp, amount);\\n        uint soldValue = address(this).balance.sub(before);\\n        decreaseCollateral(lp, _account, amount);\\n\\n        emit LossRealized(lp, _account, eventId, amount, soldValue);\\n    }\\n\\n    function _payLiquidationPenalty(address lp, address _account, uint penalty, address liquidator) private {\\n        require(liquidator != address(0), \\\"CVaultETHLP: liquidator should not be zero\\\");\\n        decreaseCollateral(lp, _account, penalty);\\n\\n        uint fee = penalty.mul(LIQUIDATION_FEE).div(UNIT);\\n        IERC20(lp).safeTransfer(treasury, fee);\\n        IERC20(lp).safeTransfer(liquidator, penalty.sub(fee));\\n    }\\n\\n    function _zapOutAll(address lp, uint amount) private {\\n        zap.zapOut(lp, amount);\\n\\n        address token0 = IUniswapV2Pair(lp).token0();\\n        address token1 = IUniswapV2Pair(lp).token1();\\n        if (token0 != WETH) {\\n            _approveZap(token0);\\n            zap.zapOut(token0, IERC20(token0).balanceOf(address(this)));\\n        }\\n        if (token1 != WETH) {\\n            _approveZap(token1);\\n            zap.zapOut(token1, IERC20(token1).balanceOf(address(this)));\\n        }\\n    }\\n\\n    function _approveZap(address token) private {\\n        if (IERC20(token).allowance(address(this), address(zap)) == 0) {\\n            IERC20(token).safeApprove(address(zap), uint(-1));\\n        }\\n    }\\n}\\n\"},\"CVaultETHLPState.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.6.12;\\npragma experimental ABIEncoderV2;\\n\\ninterface CVaultETHLPState {\\n    enum State {\\n        Idle, Depositing, Farming, Withdrawing, UpdatingLeverage, Liquidating, EmergencyExited\\n    }\\n\\n    struct Account {\\n        uint collateral;\\n        uint bscBNBDebt;         // BSC - Borrowing BNB shares\\n        uint bscFlipBalance;     // BSC - Farming FLIP amount\\n        uint128 leverage;\\n        uint112 nonce;\\n        uint64 updatedAt;\\n        uint64 depositedAt;\\n        address liquidator;\\n        State state;\\n        uint withdrawalRequestAmount;\\n    }\\n\\n    struct Pool {\\n        address bscFlip;\\n        bool paused;\\n        uint totalCollateral;\\n\\n        mapping (address =\\u003e Account) accounts;\\n    }\\n}\\n\"},\"CVaultETHLPStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.6.12;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"./SafeMath.sol\\\";\\nimport \\\"./CVaultETHLPState.sol\\\";\\nimport \\\"./PausableUpgradeable.sol\\\";\\nimport \\\"./ICVaultRelayer.sol\\\";\\n\\n\\ncontract CVaultETHLPStorage is CVaultETHLPState, PausableUpgradeable {\\n    using SafeMath for uint;\\n\\n    address public constant WETH = 0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2;\\n\\n    uint public constant EMERGENCY_EXIT_TIMELOCK = 72 hours;\\n    uint public constant COLLATERAL_RATIO_MIN = 18e17;  // 180%\\n\\n    uint128 public constant LEVERAGE_MAX = 15e17;       // 150%\\n    uint128 public constant LEVERAGE_MIN = 1e17;        // 10%\\n\\n    uint public constant LIQUIDATION_PENALTY = 5e16;    // 5%\\n    uint public constant LIQUIDATION_FEE = 30e16;       // 30%  *** 30% of 5% penalty goes to treasury\\n    uint public constant UNIT = 1e18;                   // 100%\\n\\n    uint public constant WITHDRAWAL_FEE_PERIOD = 3 days;\\n    uint public constant WITHDRAWAL_FEE = 5e15;         // 0.5%\\n\\n    ICVaultRelayer public relayer;\\n    mapping(address =\\u003e Pool) private _pools;\\n    mapping(address =\\u003e uint) private _unpaidETH;\\n\\n    uint public totalUnpaidETH;\\n\\n    uint[50] private _gap;\\n\\n    modifier increaseNonceOnlyRelayers(address lp, address _account, uint112 nonce) {\\n        require(msg.sender == address(relayer), \\\"CVaultETHLPStorage: not a relayer\\\");\\n        require(accountOf(lp, _account).nonce == nonce, \\\"CVaultETHLPStorage: invalid nonce\\\");\\n        _;\\n        increaseNonce(lp, _account);\\n    }\\n\\n    modifier onlyStateFarming(address lp) {\\n        require(stateOf(lp, msg.sender) == State.Farming, \\\"CVaultETHLPStorage: not farming state\\\");\\n        _;\\n    }\\n\\n    modifier validLeverage(uint128 leverage) {\\n        require(LEVERAGE_MIN \\u003c= leverage \\u0026\\u0026 leverage \\u003c= LEVERAGE_MAX, \\\"CVaultETHLPStorage: leverage range should be [10%-150%]\\\");\\n        _;\\n    }\\n\\n    modifier notPausedPool(address lp) {\\n        require(_pools[lp].paused == false, \\\"CVaultETHLPStorage: paused pool\\\");\\n        _;\\n    }\\n\\n    receive() external payable {}\\n\\n    // ---------- INITIALIZER ----------\\n\\n    function __CVaultETHLPStorage_init() internal initializer {\\n        __PausableUpgradeable_init();\\n    }\\n\\n    // ---------- RESTRICTED ----------\\n\\n    function _setPool(address lp, address bscFlip) internal onlyOwner {\\n        require(_pools[lp].bscFlip == address(0), \\\"CVaultETHLPStorage: setPool already\\\");\\n        _pools[lp].bscFlip = bscFlip;\\n    }\\n\\n    function pausePool(address lp, bool paused) external onlyOwner {\\n        _pools[lp].paused = paused;\\n    }\\n\\n    function setCVaultRelayer(address newRelayer) external onlyOwner {\\n        relayer = ICVaultRelayer(newRelayer);\\n    }\\n\\n    // ---------- VIEW ----------\\n\\n    function bscFlipOf(address lp) public view returns (address) {\\n        return _pools[lp].bscFlip;\\n    }\\n\\n    function totalCollateralOf(address lp) public view returns (uint) {\\n        return _pools[lp].totalCollateral;\\n    }\\n\\n    function stateOf(address lp, address account) public view returns (State) {\\n        return _pools[lp].accounts[account].state;\\n    }\\n\\n    function accountOf(address lp, address account) public view returns (Account memory) {\\n        return _pools[lp].accounts[account];\\n    }\\n\\n    function unpaidETH(address account) public view returns (uint) {\\n        return _unpaidETH[account];\\n    }\\n\\n    function withdrawalFee(address lp, address account, uint amount) public view returns (uint) {\\n        if (_pools[lp].accounts[account].depositedAt + WITHDRAWAL_FEE_PERIOD \\u003c block.timestamp) {\\n            return 0;\\n        }\\n\\n        return amount.mul(WITHDRAWAL_FEE).div(UNIT);\\n    }\\n\\n    // ---------- SET ----------\\n    function increaseUnpaidETHValue(address _account, uint value) internal {\\n        _unpaidETH[_account] = _unpaidETH[_account].add(value);\\n        totalUnpaidETH = totalUnpaidETH.add(value);\\n    }\\n\\n    function decreaseUnpaidETHValue(address _account, uint value) internal {\\n        _unpaidETH[_account] = _unpaidETH[_account].sub(value);\\n        totalUnpaidETH = totalUnpaidETH.sub(value);\\n    }\\n\\n    function increaseCollateral(address lp, address _account, uint amount) internal returns (uint collateral) {\\n        Account storage account = _pools[lp].accounts[_account];\\n        collateral = account.collateral.add(amount);\\n        account.collateral = collateral;\\n\\n        _pools[lp].totalCollateral = _pools[lp].totalCollateral.add(amount);\\n    }\\n\\n    function decreaseCollateral(address lp, address _account, uint amount) internal returns (uint collateral) {\\n        Account storage account = _pools[lp].accounts[_account];\\n        collateral = account.collateral.sub(amount);\\n        account.collateral = collateral;\\n\\n        _pools[lp].totalCollateral = _pools[lp].totalCollateral.sub(amount);\\n    }\\n\\n    function setLeverage(address lp, address _account, uint128 leverage) internal {\\n        _pools[lp].accounts[_account].leverage = leverage;\\n    }\\n\\n    function setWithdrawalRequestAmount(address lp, address _account, uint amount) internal {\\n        _pools[lp].accounts[_account].withdrawalRequestAmount = amount;\\n    }\\n\\n    function setBSCBNBDebt(address lp, address _account, uint bscBNBDebt) internal {\\n        _pools[lp].accounts[_account].bscBNBDebt = bscBNBDebt;\\n    }\\n\\n    function setBSCFlipBalance(address lp, address _account, uint bscFlipBalance) internal {\\n        _pools[lp].accounts[_account].bscFlipBalance = bscFlipBalance;\\n    }\\n\\n    function increaseNonce(address lp, address _account) private {\\n        _pools[lp].accounts[_account].nonce++;\\n    }\\n\\n    function setUpdatedAt(address lp, address _account) private {\\n        _pools[lp].accounts[_account].updatedAt = uint64(block.timestamp);\\n    }\\n\\n    function setDepositedAt(address lp, address _account) private {\\n        _pools[lp].accounts[_account].depositedAt = uint64(block.timestamp);\\n    }\\n\\n    function setLiquidator(address lp, address _account, address liquidator) internal {\\n        _pools[lp].accounts[_account].liquidator = liquidator;\\n    }\\n\\n    function setState(address lp, address _account, State state) private {\\n        _pools[lp].accounts[_account].state = state;\\n    }\\n\\n    function resetAccountExceptNonceAndState(address lp, address _account) private {\\n        Account memory account = _pools[lp].accounts[_account];\\n        _pools[lp].accounts[_account] = Account(0, 0, 0, 0, account.nonce, 0, 0, address(0), account.state, 0);\\n    }\\n\\n    function convertState(address lp, address _account, State state) internal {\\n        Account memory account = _pools[lp].accounts[_account];\\n        State currentState = account.state;\\n        if (state == State.Idle) {\\n            require(msg.sender == address(relayer), \\\"CVaultETHLPStorage: only relayer can resolve emergency state\\\");\\n            require(currentState == State.Withdrawing || currentState == State.Liquidating || currentState == State.EmergencyExited,\\n                \\\"CVaultETHLPStorage: can\\u0027t convert to Idle\\\"\\n            );\\n            resetAccountExceptNonceAndState(lp, _account);\\n        } else if (state == State.Depositing) {\\n            require(currentState == State.Idle || currentState == State.Farming,\\n                \\\"CVaultETHLPStorage: can\\u0027t convert to Depositing\\\");\\n            setDepositedAt(lp, _account);\\n        } else if (state == State.Farming) {\\n            require(currentState == State.Depositing || currentState == State.UpdatingLeverage,\\n                \\\"CVaultETHLPStorage: can\\u0027t convert to Farming\\\");\\n        } else if (state == State.Withdrawing) {\\n            require(currentState == State.Farming,\\n                \\\"CVaultETHLPStorage: can\\u0027t convert to Withdrawing\\\");\\n        } else if (state == State.UpdatingLeverage) {\\n            require(currentState == State.Farming,\\n                \\\"CVaultETHLPStorage: can\\u0027t convert to UpdatingLeverage\\\");\\n        } else if (state == State.Liquidating) {\\n            require(currentState == State.Farming,\\n                \\\"CVaultETHLPStorage: can\\u0027t convert to Liquidating\\\"\\n            );\\n        } else if (state == State.EmergencyExited) {\\n            require(_account == msg.sender, \\\"CVaultETHLPStorage: msg.sender is not the owner of account\\\");\\n            require(currentState == State.Depositing || currentState == State.Withdrawing || currentState == State.UpdatingLeverage, \\\"CVaultETHLPStorage: unavailable state to emergency exit\\\");\\n            require(account.updatedAt + EMERGENCY_EXIT_TIMELOCK \\u003c block.timestamp, \\\"CVaultETHLPStorage: timelocked\\\");\\n        } else {\\n            revert(\\\"Invalid state\\\");\\n        }\\n\\n        setState(lp, _account, state);\\n        setUpdatedAt(lp, _account);\\n    }\\n}\\n\"},\"ICVaultETHLP.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.6.12;\\n\\n/*\\n  ___                      _   _\\n | _ )_  _ _ _  _ _ _  _  | | | |\\n | _ \\\\ || | \\u0027 \\\\| \\u0027 \\\\ || | |_| |_|\\n |___/\\\\_,_|_||_|_||_\\\\_, | (_) (_)\\n                    |__/\\n\\n*\\n* MIT License\\n* ===========\\n*\\n* Copyright (c) 2020 BunnyFinance\\n*\\n* Permission is hereby granted, free of charge, to any person obtaining a copy\\n* of this software and associated documentation files (the \\\"Software\\\"), to deal\\n* in the Software without restriction, including without limitation the rights\\n* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\\n* copies of the Software, and to permit persons to whom the Software is\\n* furnished to do so, subject to the following conditions:\\n*\\n* The above copyright notice and this permission notice shall be included in all\\n* copies or substantial portions of the Software.\\n*\\n* THE SOFTWARE IS PROVIDED \\\"AS IS\\\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\\n* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\\n* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\\n* AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\\n* LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\\n* OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\\n*/\\n\\n\\ninterface ICVaultETHLP {\\n    function validateRequest(uint8 signature, address lp, address account, uint128 leverage, uint collateral) external view returns (uint8 validation, uint112 nonce);\\n    function canLiquidate(address lp, address account) external view returns (bool);\\n    function executeLiquidation(address lp, address _account, address _liquidator) external;\\n\\n    function notifyDeposited(address lp, address account, uint128 eventId, uint112 nonce, uint bscBNBDebt, uint bscFlipBalance) external;\\n    function notifyUpdatedLeverage(address lp, address account, uint128 eventId, uint112 nonce, uint bscBNBDebt, uint bscFlipBalance) external;\\n    function notifyWithdrawnAll(address lp, address account, uint128 eventId, uint112 nonce, uint ethProfit, uint ethLoss) external;\\n    function notifyLiquidated(address lp, address account, uint128 eventId, uint112 nonce, uint ethProfit, uint ethLoss) external;\\n    function notifyResolvedEmergency(address lp, address account, uint128 eventId, uint112 nonce) external;\\n}\\n\"},\"ICVaultRelayer.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.6.12;\\npragma experimental ABIEncoderV2;\\n\\n/*\\n  ___                      _   _\\n | _ )_  _ _ _  _ _ _  _  | | | |\\n | _ \\\\ || | \\u0027 \\\\| \\u0027 \\\\ || | |_| |_|\\n |___/\\\\_,_|_||_|_||_\\\\_, | (_) (_)\\n                    |__/\\n\\n*\\n* MIT License\\n* ===========\\n*\\n* Copyright (c) 2020 BunnyFinance\\n*\\n* Permission is hereby granted, free of charge, to any person obtaining a copy\\n* of this software and associated documentation files (the \\\"Software\\\"), to deal\\n* in the Software without restriction, including without limitation the rights\\n* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\\n* copies of the Software, and to permit persons to whom the Software is\\n* furnished to do so, subject to the following conditions:\\n*\\n* The above copyright notice and this permission notice shall be included in all\\n* copies or substantial portions of the Software.\\n*\\n* THE SOFTWARE IS PROVIDED \\\"AS IS\\\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\\n* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\\n* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\\n* AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\\n* LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\\n* OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\\n*/\\n\\n\\ninterface ICVaultRelayer {\\n\\n    struct RelayRequest {\\n        address lp;\\n        address account;\\n        uint8 signature;\\n        uint8 validation;\\n        uint112 nonce;\\n        uint128 requestId;\\n        uint128 leverage;\\n        uint collateral;\\n        uint lpValue;\\n    }\\n\\n    struct RelayResponse {\\n        address lp;\\n        address account;\\n        uint8 signature;\\n        uint8 validation;\\n        uint112 nonce;\\n        uint128 requestId;\\n        uint bscBNBDebtShare;\\n        uint bscFlipBalance;\\n        uint ethProfit;\\n        uint ethLoss;\\n    }\\n\\n    struct RelayLiquidation {\\n        address lp;\\n        address account;\\n        address liquidator;\\n    }\\n\\n    struct RelayUtilization {\\n        uint liquidity;\\n        uint utilized;\\n    }\\n\\n    struct RelayHistory {\\n        uint128 requestId;\\n        RelayRequest request;\\n        RelayResponse response;\\n    }\\n\\n    struct RelayOracleData {\\n        address token;\\n        uint price;\\n    }\\n\\n    function requestRelayOnETH(address lp, address account, uint8 signature, uint128 leverage, uint collateral, uint lpAmount) external returns(uint requestId);\\n\\n    function askLiquidationFromHandler(RelayLiquidation[] memory _candidate) external;\\n    function askLiquidationFromCVaultETH(address lp, address account, address liquidator) external;\\n    function executeLiquidationOnETH() external;\\n\\n    function valueOfAsset(address token, uint amount) external view returns(uint);\\n    function priceOf(address token) external view returns(uint);\\n    function collateralRatioOnETH(address lp, uint lpAmount, address flip, uint flipAmount, uint debt) external view returns(uint);\\n    function utilizationInfo() external view returns (uint total, uint utilized);\\n    function isUtilizable(address lp, uint amount, uint leverage) external view returns(bool);\\n}\\n\"},\"IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity \\u003e=0.6.0 \\u003c0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller\\u0027s account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller\\u0027s tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender\\u0027s allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller\\u0027s\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"},\"Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\n// solhint-disable-next-line compiler-version\\npragma solidity \\u003e=0.4.24 \\u003c0.8.0;\\n\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since a proxied contract can\\u0027t have a constructor, it\\u0027s common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {UpgradeableProxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n */\\nabstract contract Initializable {\\n\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        require(_initializing || _isConstructor() || !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n\\n    /// @dev Returns true if and only if the function is running in the constructor\\n    function _isConstructor() private view returns (bool) {\\n        // extcodesize checks the size of the code stored in an address, and\\n        // address returns the current address. Since the code is still not\\n        // deployed when running a constructor, any checks on its code size will\\n        // yield zero, making it an effective way to detect if a contract is\\n        // under construction or not.\\n        address self = address(this);\\n        uint256 cs;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { cs := extcodesize(self) }\\n        return cs == 0;\\n    }\\n}\\n\"},\"IUniswapV2Pair.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity \\u003e=0.5.0;\\n\\n// https://github.com/Uniswap/uniswap-v2-core/blob/master/contracts/interfaces/IUniswapV2Pair.sol\\n\\ninterface IUniswapV2Pair {\\n    event Approval(address indexed owner, address indexed spender, uint value);\\n    event Transfer(address indexed from, address indexed to, uint value);\\n\\n    function name() external pure returns (string memory);\\n\\n    function symbol() external pure returns (string memory);\\n\\n    function decimals() external pure returns (uint8);\\n\\n    function totalSupply() external view returns (uint);\\n\\n    function balanceOf(address owner) external view returns (uint);\\n\\n    function allowance(address owner, address spender) external view returns (uint);\\n\\n    function approve(address spender, uint value) external returns (bool);\\n\\n    function transfer(address to, uint value) external returns (bool);\\n\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint value\\n    ) external returns (bool);\\n\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n\\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\\n\\n    function nonces(address owner) external view returns (uint);\\n\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint value,\\n        uint deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    event Mint(address indexed sender, uint amount0, uint amount1);\\n    event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);\\n    event Swap(\\n        address indexed sender,\\n        uint amount0In,\\n        uint amount1In,\\n        uint amount0Out,\\n        uint amount1Out,\\n        address indexed to\\n    );\\n    event Sync(uint112 reserve0, uint112 reserve1);\\n\\n    function MINIMUM_LIQUIDITY() external pure returns (uint);\\n\\n    function factory() external view returns (address);\\n\\n    function token0() external view returns (address);\\n\\n    function token1() external view returns (address);\\n\\n    function getReserves()\\n    external\\n    view\\n    returns (\\n        uint112 reserve0,\\n        uint112 reserve1,\\n        uint32 blockTimestampLast\\n    );\\n\\n    function price0CumulativeLast() external view returns (uint);\\n\\n    function price1CumulativeLast() external view returns (uint);\\n\\n    function kLast() external view returns (uint);\\n\\n    function mint(address to) external returns (uint liquidity);\\n\\n    function burn(address to) external returns (uint amount0, uint amount1);\\n\\n    function swap(\\n        uint amount0Out,\\n        uint amount1Out,\\n        address to,\\n        bytes calldata data\\n    ) external;\\n\\n    function skim(address to) external;\\n\\n    function sync() external;\\n\\n    function initialize(address, address) external;\\n}\\n\"},\"IZap.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.6.12;\\n\\ninterface IZap {\\n    function zapOut(address _from, uint amount) external;\\n    function zapIn(address _to) external payable;\\n    function zapInToken(address _from, uint amount, address _to) external;\\n}\"},\"Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity \\u003e=0.6.0 \\u003c0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a \\u003e= b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a \\u003c b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow, so we distribute\\n        return (a / 2) + (b / 2) + ((a % 2 + b % 2) / 2);\\n    }\\n}\\n\"},\"OwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity \\u003e=0.6.0 \\u003c0.8.0;\\n\\nimport \\\"./ContextUpgradeable.sol\\\";\\nimport \\\"./Initializable.sol\\\";\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal initializer {\\n        __Context_init_unchained();\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal initializer {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(_owner == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n    uint256[49] private __gap;\\n}\\n\"},\"PausableUpgradeable.sol\":{\"content\":\"/*\\n   ____            __   __        __   _\\n  / __/__ __ ___  / /_ / /  ___  / /_ (_)__ __\\n _\\\\ \\\\ / // // _ \\\\/ __// _ \\\\/ -_)/ __// / \\\\ \\\\ /\\n/___/ \\\\_, //_//_/\\\\__//_//_/\\\\__/ \\\\__//_/ /_\\\\_\\\\\\n     /___/\\n\\n* Docs: https://docs.synthetix.io/\\n*\\n*\\n* MIT License\\n* ===========\\n*\\n* Copyright (c) 2020 Synthetix\\n*\\n* Permission is hereby granted, free of charge, to any person obtaining a copy\\n* of this software and associated documentation files (the \\\"Software\\\"), to deal\\n* in the Software without restriction, including without limitation the rights\\n* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\\n* copies of the Software, and to permit persons to whom the Software is\\n* furnished to do so, subject to the following conditions:\\n*\\n* The above copyright notice and this permission notice shall be included in all\\n* copies or substantial portions of the Software.\\n*\\n* THE SOFTWARE IS PROVIDED \\\"AS IS\\\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\\n* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\\n* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\\n* AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\\n* LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\\n* OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\\n*/\\n\\n// SPDX-License-Identifier: MIT\\npragma solidity ^0.6.2;\\n\\nimport \\\"./OwnableUpgradeable.sol\\\";\\n\\n\\nabstract contract PausableUpgradeable is OwnableUpgradeable {\\n    uint public lastPauseTime;\\n    bool public paused;\\n\\n    event PauseChanged(bool isPaused);\\n\\n    modifier notPaused {\\n        require(!paused, \\\"PausableUpgradeable: cannot be performed while the contract is paused\\\");\\n        _;\\n    }\\n\\n    function __PausableUpgradeable_init() internal initializer {\\n        __Ownable_init();\\n        require(owner() != address(0), \\\"PausableUpgradeable: owner must be set\\\");\\n    }\\n\\n    function setPaused(bool _paused) external onlyOwner {\\n        if (_paused == paused) {\\n            return;\\n        }\\n\\n        paused = _paused;\\n        if (paused) {\\n            lastPauseTime = now;\\n        }\\n\\n        emit PauseChanged(paused);\\n    }\\n    uint256[50] private __gap;\\n}\\n\"},\"SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity \\u003e=0.6.0 \\u003c0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./SafeMath.sol\\\";\\nimport \\\"./Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using SafeMath for uint256;\\n    using Address for address;\\n\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // \\u0027safeIncreaseAllowance\\u0027 and \\u0027safeDecreaseAllowance\\u0027\\n        // solhint-disable-next-line max-line-length\\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \\\"SafeERC20: decreased allowance below zero\\\");\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity\\u0027s return data size checking mechanism, since\\n        // we\\u0027re implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length \\u003e 0) { // Return data is optional\\n            // solhint-disable-next-line max-line-length\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\"},\"SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity \\u003e=0.6.0 \\u003c0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity\\u0027s arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it\\u0027s recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity\\u0027s `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c \\u003e= a, \\\"SafeMath: addition overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity\\u0027s `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return sub(a, b, \\\"SafeMath: subtraction overflow\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity\\u0027s `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b \\u003c= a, errorMessage);\\n        uint256 c = a - b;\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity\\u0027s `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // Gas optimization: this is cheaper than requiring \\u0027a\\u0027 not being zero, but the\\n        // benefit is lost if \\u0027b\\u0027 is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity\\u0027s `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity\\u0027s `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b \\u003e 0, errorMessage);\\n        uint256 c = a / b;\\n        // assert(a == b * c + a % b); // There is no case in which this doesn\\u0027t hold\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts when dividing by zero.\\n     *\\n     * Counterpart to Solidity\\u0027s `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return mod(a, b, \\\"SafeMath: modulo by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts with custom message when dividing by zero.\\n     *\\n     * Counterpart to Solidity\\u0027s `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b != 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\"},\"Whitelist.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.6.12;\\n\\n/*\\n  ___                      _   _\\n | _ )_  _ _ _  _ _ _  _  | | | |\\n | _ \\\\ || | \\u0027 \\\\| \\u0027 \\\\ || | |_| |_|\\n |___/\\\\_,_|_||_|_||_\\\\_, | (_) (_)\\n                    |__/\\n\\n*\\n* MIT License\\n* ===========\\n*\\n* Copyright (c) 2020 BunnyFinance\\n*\\n* Permission is hereby granted, free of charge, to any person obtaining a copy\\n* of this software and associated documentation files (the \\\"Software\\\"), to deal\\n* in the Software without restriction, including without limitation the rights\\n* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\\n* copies of the Software, and to permit persons to whom the Software is\\n* furnished to do so, subject to the following conditions:\\n*\\n* The above copyright notice and this permission notice shall be included in all\\n* copies or substantial portions of the Software.\\n*\\n* THE SOFTWARE IS PROVIDED \\\"AS IS\\\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\\n* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\\n* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\\n* AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\\n* LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\\n* OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\\n*/\\n\\nimport \\\"./OwnableUpgradeable.sol\\\";\\n\\ncontract Whitelist is OwnableUpgradeable {\\n    mapping (address =\\u003e bool) private _whitelist;\\n    bool private _disable;                      // default - false means whitelist feature is working on. if true no more use of whitelist\\n\\n    event Whitelisted(address indexed _address, bool whitelist);\\n    event EnableWhitelist();\\n    event DisableWhitelist();\\n\\n    modifier onlyWhitelisted {\\n        require(_disable || _whitelist[msg.sender], \\\"Whitelist: caller is not on the whitelist\\\");\\n        _;\\n    }\\n\\n    function __Whitelist_init() internal initializer {\\n        __Ownable_init();\\n    }\\n\\n    function isWhitelist(address _address) public view returns(bool) {\\n        return _whitelist[_address];\\n    }\\n\\n    function setWhitelist(address _address, bool _on) external onlyOwner {\\n        _whitelist[_address] = _on;\\n\\n        emit Whitelisted(_address, _on);\\n    }\\n\\n    function disableWhitelist(bool disable) external onlyOwner {\\n        _disable = disable;\\n        if (disable) {\\n            emit DisableWhitelist();\\n        } else {\\n            emit EnableWhitelist();\\n        }\\n    }\\n\\n    uint256[49] private __gap;\\n}\\n\"}}","ABI":"[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"lp\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"eventId\",\"type\":\"uint256\"}],\"name\":\"ClearBSCState\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"lp\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"lpAmount\",\"type\":\"uint256\"}],\"name\":\"CollateralAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"lp\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"lpAmount\",\"type\":\"uint256\"}],\"name\":\"CollateralRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"lp\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"eventId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"lpAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"leverage\",\"type\":\"uint256\"}],\"name\":\"DepositRequested\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"DisableWhitelist\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"lp\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"eventId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"lpAmount\",\"type\":\"uint256\"}],\"name\":\"EmergencyExitRequested\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"EnableWhitelist\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"lp\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"eventId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"lpAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"liquidator\",\"type\":\"address\"}],\"name\":\"LiquidateRequested\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"lp\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"eventId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"soldLPAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"ethValue\",\"type\":\"uint256\"}],\"name\":\"LossRealized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"lp\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"eventId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"bscBNBDebtShare\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"bscFlipBalance\",\"type\":\"uint256\"}],\"name\":\"NotifyDeposited\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"lp\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"eventId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"ethProfit\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"ethLoss\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"penaltyLPAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"liquidator\",\"type\":\"address\"}],\"name\":\"NotifyLiquidated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"lp\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"eventId\",\"type\":\"uint256\"}],\"name\":\"NotifyResolvedEmergency\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"lp\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"eventId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"bscBNBDebtShare\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"bscFlipBalance\",\"type\":\"uint256\"}],\"name\":\"NotifyUpdatedLeverage\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"lp\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"eventId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"lpAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"ethProfit\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"ethLoss\",\"type\":\"uint256\"}],\"name\":\"NotifyWithdrawnAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isPaused\",\"type\":\"bool\"}],\"name\":\"PauseChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"ethValue\",\"type\":\"uint256\"}],\"name\":\"UnpaidProfitClaimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"lp\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"eventId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"leverage\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"collateral\",\"type\":\"uint256\"}],\"name\":\"UpdateLeverageRequested\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"whitelist\",\"type\":\"bool\"}],\"name\":\"Whitelisted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"lp\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"eventId\",\"type\":\"uint256\"}],\"name\":\"WithdrawAllRequested\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"lp\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"eventId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"lpAmount\",\"type\":\"uint256\"}],\"name\":\"WithdrawRequested\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"COLLATERAL_RATIO_MIN\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"EMERGENCY_EXIT_TIMELOCK\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"LEVERAGE_MAX\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"LEVERAGE_MIN\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"LIQUIDATION_FEE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"LIQUIDATION_PENALTY\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"UNIT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"WETH\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"WITHDRAWAL_FEE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"WITHDRAWAL_FEE_PERIOD\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"lp\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"accountOf\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"collateral\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"bscBNBDebt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"bscFlipBalance\",\"type\":\"uint256\"},{\"internalType\":\"uint128\",\"name\":\"leverage\",\"type\":\"uint128\"},{\"internalType\":\"uint112\",\"name\":\"nonce\",\"type\":\"uint112\"},{\"internalType\":\"uint64\",\"name\":\"updatedAt\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"depositedAt\",\"type\":\"uint64\"},{\"internalType\":\"address\",\"name\":\"liquidator\",\"type\":\"address\"},{\"internalType\":\"enum CVaultETHLPState.State\",\"name\":\"state\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"withdrawalRequestAmount\",\"type\":\"uint256\"}],\"internalType\":\"struct CVaultETHLPState.Account\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"lp\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"addCollateral\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"lp\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"askLiquidation\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"lp\",\"type\":\"address\"}],\"name\":\"bscFlipOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"lp\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"canLiquidate\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"claimUnpaidETH\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"lp\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"clearBSCState\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"lp\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"collateralRatioOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"lp\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint128\",\"name\":\"leverage\",\"type\":\"uint128\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"disable\",\"type\":\"bool\"}],\"name\":\"disableWhitelist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"lp\",\"type\":\"address\"}],\"name\":\"emergencyExit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"lp\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_liquidator\",\"type\":\"address\"}],\"name\":\"executeLiquidation\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"isWhitelist\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastPauseTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liquidationCollateralRatio\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minimumDepositValue\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"lp\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"},{\"internalType\":\"uint128\",\"name\":\"eventId\",\"type\":\"uint128\"},{\"internalType\":\"uint112\",\"name\":\"nonce\",\"type\":\"uint112\"},{\"internalType\":\"uint256\",\"name\":\"bscBNBDebt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"bscFlipBalance\",\"type\":\"uint256\"}],\"name\":\"notifyDeposited\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"lp\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"},{\"internalType\":\"uint128\",\"name\":\"eventId\",\"type\":\"uint128\"},{\"internalType\":\"uint112\",\"name\":\"nonce\",\"type\":\"uint112\"},{\"internalType\":\"uint256\",\"name\":\"ethProfit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"ethLoss\",\"type\":\"uint256\"}],\"name\":\"notifyLiquidated\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"lp\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"},{\"internalType\":\"uint128\",\"name\":\"eventId\",\"type\":\"uint128\"},{\"internalType\":\"uint112\",\"name\":\"nonce\",\"type\":\"uint112\"}],\"name\":\"notifyResolvedEmergency\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"lp\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"},{\"internalType\":\"uint128\",\"name\":\"eventId\",\"type\":\"uint128\"},{\"internalType\":\"uint112\",\"name\":\"nonce\",\"type\":\"uint112\"},{\"internalType\":\"uint256\",\"name\":\"bscBNBDebt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"bscFlipBalance\",\"type\":\"uint256\"}],\"name\":\"notifyUpdatedLeverage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"lp\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"},{\"internalType\":\"uint128\",\"name\":\"eventId\",\"type\":\"uint128\"},{\"internalType\":\"uint112\",\"name\":\"nonce\",\"type\":\"uint112\"},{\"internalType\":\"uint256\",\"name\":\"ethProfit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"ethLoss\",\"type\":\"uint256\"}],\"name\":\"notifyWithdrawnAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"lp\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"paused\",\"type\":\"bool\"}],\"name\":\"pausePool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"recoverToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"relayer\",\"outputs\":[{\"internalType\":\"contract ICVaultRelayer\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"relayerCost\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"lp\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"removeCollateral\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newRelayer\",\"type\":\"address\"}],\"name\":\"setCVaultRelayer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newValue\",\"type\":\"uint256\"}],\"name\":\"setMinimumDepositValue\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_paused\",\"type\":\"bool\"}],\"name\":\"setPaused\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"lp\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"bscFlip\",\"type\":\"address\"}],\"name\":\"setPool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newValue\",\"type\":\"uint256\"}],\"name\":\"setRelayerCost\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newTreasury\",\"type\":\"address\"}],\"name\":\"setTreasury\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_on\",\"type\":\"bool\"}],\"name\":\"setWhitelist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newZap\",\"type\":\"address\"}],\"name\":\"setZap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"lp\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"stateOf\",\"outputs\":[{\"internalType\":\"enum CVaultETHLPState.State\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"lp\",\"type\":\"address\"}],\"name\":\"totalCollateralOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalUnpaidETH\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"treasury\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"unpaidETH\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"lp\",\"type\":\"address\"},{\"internalType\":\"uint128\",\"name\":\"leverage\",\"type\":\"uint128\"}],\"name\":\"updateLeverage\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newCollateralRatio\",\"type\":\"uint256\"}],\"name\":\"updateLiquidationCollateralRatio\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"signature\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"_lp\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"},{\"internalType\":\"uint128\",\"name\":\"_leverage\",\"type\":\"uint128\"},{\"internalType\":\"uint256\",\"name\":\"_collateral\",\"type\":\"uint256\"}],\"name\":\"validateRequest\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"validation\",\"type\":\"uint8\"},{\"internalType\":\"uint112\",\"name\":\"nonce\",\"type\":\"uint112\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"lp\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"lp\",\"type\":\"address\"}],\"name\":\"withdrawAll\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"lp\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdrawalFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"zap\",\"outputs\":[{\"internalType\":\"contract IZap\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]","ContractName":"CVaultETHLP","CompilerVersion":"v0.6.12+commit.27d51765","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://be748dd4fd5468dae6aedc033cfcbadf465c53b6ac45d3efad898744f5190d76"}]}