{"status":"1","message":"OK","result":[{"SourceCode":"// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.4;\r\n\r\ncontract Ownable {\r\n    address private m_Owner;\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    constructor () {\r\n        m_Owner = msg.sender;\r\n        emit OwnershipTransferred(address(0), msg.sender);\r\n    }\r\n\r\n    function owner() public view returns (address) {\r\n        return m_Owner;\r\n    }\r\n    \r\n    function transferOwnership(address _address) public virtual {\r\n        require(msg.sender == m_Owner);\r\n        m_Owner = _address;\r\n        emit OwnershipTransferred(msg.sender, _address);\r\n    }                                                                                        \r\n}\r\n\r\nlibrary SafeMath {\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n        return c;\r\n    }\r\n\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        return c;\r\n    }\r\n}\r\n\r\ninterface UniFactory {\r\n    function getPair(address tokenA, address tokenB) external view returns (address);\r\n}\r\n\r\ninterface UniV2Pair { \r\n    function balanceOf(address _address) external view returns (uint256);\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n    function totalSupply() external view returns (uint256);\r\n    function token0() external returns (address);\r\n    function token1() external returns (address);\r\n}\r\n\r\ncontract FTPLiqLock is Ownable {\r\n    using SafeMath for uint256;\r\n    \r\n    UniFactory private Factory;\r\n\r\n    address private m_WebThree;\r\n    address private m_Factory = 0x5C69bEe701ef814a2B6a3EDD4B1652CB9cc5aA6f;\r\n\r\n    mapping (address => bool) private m_Locked;\r\n    mapping (address => uint256) private m_PairRelease;\r\n    mapping (address => address) private m_PayoutAddress;\r\n    \r\n    event Lock (address Contract);\r\n\r\n    constructor() {\r\n        Factory = UniFactory(m_Factory);\r\n    }\r\n\r\n    function setWebThree(address _address) external {\r\n        require(msg.sender == owner() || msg.sender == m_WebThree);\r\n        m_WebThree = _address;\r\n    }\r\n\r\n    function lockTokens(address _uniPair, uint256 _epoch, address _tokenPayout) external {\r\n        require(Factory.getPair(UniV2Pair(_uniPair).token0(), UniV2Pair(_uniPair).token1()) == _uniPair, \"Please only deposit UniV2 tokens\");\r\n        require(!m_Locked[_uniPair], \"Liquidity already locked before\");\r\n        require(UniV2Pair(_uniPair).balanceOf(msg.sender).mul(100).div(UniV2Pair(_uniPair).totalSupply()) >= 98, \"Caller must hold all UniV2 tokens\");\r\n        m_PairRelease[_uniPair] = _epoch;\r\n        m_PayoutAddress[_uniPair] = _tokenPayout;\r\n        UniV2Pair(_uniPair).transferFrom(address(msg.sender), address(this), UniV2Pair(_uniPair).balanceOf(msg.sender));\r\n        m_Locked[_uniPair] = true;\r\n        \r\n        emit Lock(_uniPair);\r\n    }\r\n    \r\n    function releaseTokens(address _uniPair) external {\r\n        require(msg.sender == m_WebThree || msg.sender == m_PayoutAddress[_uniPair]);\r\n        require(m_Locked[_uniPair], \"No liquidity locked currently\");\r\n        require(UniV2Pair(_uniPair).balanceOf(address(this)) > 0, \"No tokens to release\");\r\n        require(block.timestamp > m_PairRelease[_uniPair], \"Lock expiration not reached\");\r\n\r\n        UniV2Pair(_uniPair).approve(address(this), UniV2Pair(_uniPair).balanceOf(address(this)));\r\n        UniV2Pair(_uniPair).transfer(m_PayoutAddress[_uniPair], UniV2Pair(_uniPair).balanceOf(address(this)));\r\n    }\r\n\r\n    function getLockedTokens(address _uniPair) external view returns (bool Locked, uint256 ReleaseDate) {\r\n        if(block.timestamp < m_PairRelease[_uniPair])\r\n            return (true, m_PairRelease[_uniPair]);\r\n        return (false, m_PairRelease[_uniPair]);\r\n    }\r\n}","ABI":"[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"Contract\",\"type\":\"address\"}],\"name\":\"Lock\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_uniPair\",\"type\":\"address\"}],\"name\":\"getLockedTokens\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"Locked\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"ReleaseDate\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_uniPair\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_epoch\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_tokenPayout\",\"type\":\"address\"}],\"name\":\"lockTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_uniPair\",\"type\":\"address\"}],\"name\":\"releaseTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"setWebThree\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"FTPLiqLock","CompilerVersion":"v0.8.4+commit.c7e474f2","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://f73e12e3c83703a03f140efea39f0e7869c35fb16cc983f0d0e3033063c6c150"}]}