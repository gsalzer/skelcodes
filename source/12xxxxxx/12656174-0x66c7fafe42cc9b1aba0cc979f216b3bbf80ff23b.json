{"status":"1","message":"OK","result":[{"SourceCode":"# Copyright (C) 2021 VolumeFi Software, Inc.\r\n\r\n#  This program is free software: you can redistribute it and/or modify\r\n#  it under the terms of the Apache 2.0 License. \r\n#  This program is distributed WITHOUT ANY WARRANTY without even the implied warranty of\r\n#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\r\n#  @author VolumeFi, Software Inc.\r\n#  @notice This Vyper contract adds liquidity to any Uniswap V3 pool using ETH or any ERC20 Token.\r\n#  SPDX-License-Identifier: Apache-2.0\r\n\r\n# @version >=0.2.12\r\n\r\nstruct RemoveParams:\r\n    liquidity: uint256\r\n    recipient: address\r\n    deadline: uint256\r\n\r\ninterface ERC20:\r\n    def allowance(owner: address, spender: address) -> uint256: view\r\n\r\ninterface ERC721:\r\n    def transferFrom(_from: address, _to: address, _tokenId: uint256): payable\r\n\r\ninterface NonfungiblePositionManager:\r\n    def burn(tokenId: uint256): payable\r\n\r\ninterface UniswapV2Factory:\r\n    def getPair(tokenA: address, tokenB: address) -> address: view\r\n\r\ninterface UniswapV2Pair:\r\n    def token0() -> address: view\r\n    def token1() -> address: view\r\n    def getReserves() -> (uint256, uint256, uint256): view\r\n\r\ninterface WrappedEth:\r\n    def withdraw(amount: uint256): nonpayable\r\n\r\nevent RemovedLiquidity:\r\n    tokenId: indexed(uint256)\r\n    token0: indexed(address)\r\n    token1: indexed(address)\r\n    liquidity: uint256\r\n    amount0: uint256\r\n    amount1: uint256\r\n\r\nevent Paused:\r\n    paused: bool\r\n\r\nevent FeeChanged:\r\n    newFee: uint256\r\n\r\nNONFUNGIBLEPOSITIONMANAGER: constant(address) = 0xC36442b4a4522E871399CD717aBDD847Ab11FE88\r\nUNISWAPV2ROUTER02: constant(address) = 0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D\r\nUNISWAPV2FACTORY: constant(address) = 0x5C69bEe701ef814a2B6a3EDD4B1652CB9cc5aA6f\r\n\r\nVETH: constant(address) = 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE\r\nWETH: constant(address) = 0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2\r\nDEADLINE: constant(uint256) = MAX_UINT256\r\n\r\nAPPROVE_MID: constant(Bytes[4]) = method_id(\"approve(address,uint256)\")\r\nSWAPETFT_MID: constant(Bytes[4]) = method_id(\"swapExactTokensForTokens(uint256,uint256,address[],address,uint256)\")\r\nTRANSFER_MID: constant(Bytes[4]) = method_id(\"transfer(address,uint256)\")\r\nPOSITIONS_MID: constant(Bytes[4]) = method_id(\"positions(uint256)\")\r\nDECREASELIQUIDITY_MID: constant(Bytes[4]) = method_id(\"decreaseLiquidity((uint256,uint128,uint256,uint256,uint256))\")\r\nCOLLECT_MID: constant(Bytes[4]) = method_id(\"collect((uint256,address,uint128,uint128))\")\r\n\r\n\r\npaused: public(bool)\r\nadmin: public(address)\r\nfeeAddress: public(address)\r\nfeeAmount: public(uint256)\r\n\r\n@external\r\ndef __init__():\r\n    self.paused = False\r\n    self.admin = msg.sender\r\n    self.feeAddress = 0xf29399fB3311082d9F8e62b988cBA44a5a98ebeD\r\n    self.feeAmount = 5 * 10 ** 15\r\n\r\n@internal\r\ndef safeTransfer(_token: address, _to: address, _value: uint256):\r\n    _response: Bytes[32] = raw_call(\r\n        _token,\r\n        concat(\r\n            TRANSFER_MID,\r\n            convert(_to, bytes32),\r\n            convert(_value, bytes32)\r\n        ),\r\n        max_outsize=32\r\n    )  # dev: failed transfer\r\n    if len(_response) > 0:\r\n        assert convert(_response, bool), \"Transfer failed\"  # dev: failed transfer\r\n\r\n@internal\r\n@pure\r\ndef _getPairTokens(pair: address) -> (address, address):\r\n    token0: address = UniswapV2Pair(pair).token0()\r\n    token1: address = UniswapV2Pair(pair).token1()\r\n    return (token0, token1)\r\n\r\n@internal\r\n@view\r\ndef _getLiquidityInPool(midToken: address, pair: address) -> uint256:\r\n    res0: uint256 = 0\r\n    res1: uint256 = 0\r\n    token0: address = ZERO_ADDRESS\r\n    token1: address = ZERO_ADDRESS\r\n    blockTimestampLast: uint256 = 0\r\n    (res0, res1, blockTimestampLast) = UniswapV2Pair(pair).getReserves()\r\n    (token0, token1) = self._getPairTokens(pair)\r\n    if token0 == midToken:\r\n        return res0\r\n    else:\r\n        return res1\r\n\r\n@internal\r\n@view\r\ndef _getMidToken(midToken: address, token0: address, token1: address) -> address:\r\n    if token0 == midToken or token1 == midToken:\r\n        return midToken\r\n    pair0: address = UniswapV2Factory(UNISWAPV2FACTORY).getPair(midToken, token0)\r\n    pair1: address = UniswapV2Factory(UNISWAPV2FACTORY).getPair(midToken, token1)\r\n    eth0: uint256 = self._getLiquidityInPool(midToken, pair0)\r\n    eth1: uint256 = self._getLiquidityInPool(midToken, pair1)\r\n    if eth0 > eth1:\r\n        return token0\r\n    else:\r\n        return token1\r\n\r\n@internal\r\ndef _token2Token(fromToken: address, toToken: address, tokens2Trade: uint256, deadline: uint256) -> uint256:\r\n    if fromToken == toToken:\r\n        return tokens2Trade\r\n    _response32: Bytes[32] = empty(Bytes[32])\r\n    if ERC20(fromToken).allowance(self, UNISWAPV2ROUTER02) == 0:\r\n        _response32 = raw_call(\r\n            fromToken,\r\n            concat(\r\n                APPROVE_MID,\r\n                convert(UNISWAPV2ROUTER02, bytes32),\r\n                convert(MAX_UINT256, bytes32)\r\n            ),\r\n            max_outsize=32\r\n        )  # dev: failed approve\r\n        if len(_response32) > 0:\r\n            assert convert(_response32, bool), \"Approve failed\"  # dev: failed approve\r\n    \r\n    addrBytes: Bytes[288] = concat(convert(tokens2Trade, bytes32), convert(0, bytes32), convert(160, bytes32), convert(self, bytes32), convert(deadline, bytes32), convert(2, bytes32), convert(fromToken, bytes32), convert(toToken, bytes32))\r\n    funcsig: Bytes[4] = SWAPETFT_MID\r\n    full_data: Bytes[292] = concat(funcsig, addrBytes)\r\n    \r\n    _response128: Bytes[128] = raw_call(\r\n        UNISWAPV2ROUTER02,\r\n        full_data,\r\n        max_outsize=128\r\n    )\r\n    tokenBought: uint256 = convert(slice(_response128, 96, 32), uint256)\r\n    assert tokenBought > 0, \"Error Swapping Token 2\"\r\n    return tokenBought\r\n\r\n@internal\r\ndef removeLiquidity(_tokenId: uint256, _removeParams: RemoveParams, _isBurn: bool=True, _recipient: address=ZERO_ADDRESS) -> (address, address, uint256, uint256):\r\n    _response384: Bytes[384] = raw_call(\r\n        NONFUNGIBLEPOSITIONMANAGER,\r\n        concat(\r\n            POSITIONS_MID,\r\n            convert(_tokenId, bytes32)\r\n        ),\r\n        max_outsize=384,\r\n        is_static_call=True\r\n    )\r\n    token0: address = convert(convert(slice(_response384, 64, 32), uint256), address)\r\n    token1: address = convert(convert(slice(_response384, 96, 32), uint256), address)\r\n    liquidity: uint256 = convert(slice(_response384, 224, 32), uint256)\r\n    isBurn: bool = _isBurn\r\n    if isBurn and liquidity > _removeParams.liquidity:\r\n        liquidity = _removeParams.liquidity\r\n        isBurn = False\r\n\r\n    _response64: Bytes[64] = raw_call(\r\n        NONFUNGIBLEPOSITIONMANAGER,\r\n        concat(\r\n            DECREASELIQUIDITY_MID,\r\n            convert(_tokenId, bytes32),\r\n            convert(liquidity, bytes32),\r\n            convert(0, bytes32),\r\n            convert(0, bytes32),\r\n            convert(_removeParams.deadline, bytes32)\r\n        ),\r\n        max_outsize=64\r\n    )\r\n\r\n    recipient: address = _recipient\r\n    if _recipient == ZERO_ADDRESS:\r\n        recipient = _removeParams.recipient\r\n\r\n    _response64 = raw_call(\r\n        NONFUNGIBLEPOSITIONMANAGER,\r\n        concat(\r\n            COLLECT_MID,\r\n            convert(_tokenId, bytes32),\r\n            convert(recipient, bytes32),\r\n            convert(2 ** 128 - 1, bytes32),\r\n            convert(2 ** 128 - 1, bytes32)\r\n        ),\r\n        max_outsize=64\r\n    )\r\n    amount0: uint256 = convert(slice(_response64, 0, 32), uint256)\r\n    amount1: uint256 = convert(slice(_response64, 32, 32), uint256)\r\n    if isBurn:\r\n        NonfungiblePositionManager(NONFUNGIBLEPOSITIONMANAGER).burn(_tokenId)\r\n\r\n    log RemovedLiquidity(_tokenId, token0, token1, liquidity, amount0, amount1)\r\n\r\n    return (token0, token1, amount0, amount1)\r\n\r\n@external\r\n@payable\r\n@nonreentrant('lock')\r\ndef removeLiquidityFromUniV3NFLP(_tokenId: uint256, _removeParams: RemoveParams, isBurn: bool=True):\r\n    assert _tokenId != 0, \"Wrong Token ID\"\r\n\r\n    fee: uint256 = self.feeAmount\r\n    if msg.value > fee:\r\n        send(msg.sender, msg.value - fee)\r\n    else:\r\n        assert msg.value == fee, \"Insufficient fee\"\r\n    if fee > 0:\r\n        send(self.feeAddress, fee)\r\n\r\n    ERC721(NONFUNGIBLEPOSITIONMANAGER).transferFrom(msg.sender, self, _tokenId)\r\n\r\n    self.removeLiquidity(_tokenId, _removeParams, isBurn)\r\n\r\n@external\r\n@payable\r\n@nonreentrant('lock')\r\ndef removeLiquidityEthFromUniV3NFLP(_tokenId: uint256, _removeParams: RemoveParams, isBurn: bool=True):\r\n    assert _tokenId != 0, \"Wrong Token ID\"\r\n\r\n    fee: uint256 = self.feeAmount\r\n    if msg.value > fee:\r\n        send(msg.sender, msg.value - fee)\r\n    else:\r\n        assert msg.value == fee, \"Insufficient fee\"\r\n    if fee > 0:\r\n        send(self.feeAddress, fee)\r\n\r\n    ERC721(NONFUNGIBLEPOSITIONMANAGER).transferFrom(msg.sender, self, _tokenId)\r\n\r\n    token0: address = ZERO_ADDRESS\r\n    token1: address = ZERO_ADDRESS\r\n    amount0: uint256 = 0\r\n    amount1: uint256 = 0\r\n    (token0, token1, amount0, amount1) = self.removeLiquidity(_tokenId, _removeParams, isBurn, self)\r\n    if token0 == WETH and token1 != WETH:\r\n        WrappedEth(token0).withdraw(amount0)\r\n        send(_removeParams.recipient, amount0)\r\n        self.safeTransfer(token1, _removeParams.recipient, amount1)\r\n    elif token1 == WETH and token0 != WETH:\r\n        WrappedEth(token1).withdraw(amount1)\r\n        send(_removeParams.recipient, amount1)\r\n        self.safeTransfer(token0, _removeParams.recipient, amount0)\r\n    else:\r\n        raise \"Not Eth Pair\"\r\n\r\n@external\r\n@payable\r\n@nonreentrant('lock')\r\ndef divestUniV3NFLPToToken(_tokenId: uint256, _token: address, _removeParams: RemoveParams, minTokenAmount: uint256, isBurn: bool=True, deadline: uint256=MAX_UINT256) -> uint256:\r\n    assert not self.paused, \"Paused\"\r\n    fee: uint256 = self.feeAmount\r\n    msg_value: uint256 = msg.value\r\n\r\n    assert msg.value >= fee, \"Insufficient fee\"\r\n    if msg.value > fee:\r\n        send(msg.sender, msg.value - fee)\r\n    send(self.feeAddress, fee)\r\n\r\n    token: address = _token\r\n    if token == VETH or token == ZERO_ADDRESS:\r\n        token = WETH\r\n\r\n    token0: address = ZERO_ADDRESS\r\n    token1: address = ZERO_ADDRESS\r\n    amount0: uint256 = 0\r\n    amount1: uint256 = 0\r\n    (token0, token1, amount0, amount1) = self.removeLiquidity(_tokenId, _removeParams, isBurn, self)\r\n\r\n    amount: uint256 = 0\r\n    if token0 == token:\r\n        amount = self._token2Token(token1, token0, amount1, deadline)\r\n    elif token1 == token:\r\n        amount = self._token2Token(token0, token1, amount0, deadline)\r\n    else:\r\n        midToken: address = self._getMidToken(WETH, token0, token1)\r\n        if midToken == token0:\r\n            amount = self._token2Token(token1, token0, amount1, deadline)\r\n            amount = self._token2Token(token0, WETH, amount + amount0, deadline)\r\n            amount = self._token2Token(WETH, token, amount, deadline)\r\n        else:\r\n            amount = self._token2Token(token0, token1, amount0, deadline)\r\n            amount = self._token2Token(token1, WETH, amount + amount1, deadline)\r\n            amount = self._token2Token(WETH, token, amount, deadline)\r\n\r\n    assert amount >= minTokenAmount, \"High Slippage\"\r\n\r\n    if token != _token:\r\n        WrappedEth(WETH).withdraw(amount)\r\n        send(msg.sender, amount)\r\n    else:\r\n        self.safeTransfer(token, msg.sender, amount)\r\n    return amount\r\n\r\n# Admin functions\r\n@external\r\ndef pause(_paused: bool):\r\n    assert msg.sender == self.admin, \"Not admin\"\r\n    self.paused = _paused\r\n    log Paused(_paused)\r\n\r\n@external\r\ndef newAdmin(_admin: address):\r\n    assert msg.sender == self.admin, \"Not admin\"\r\n    self.admin = _admin\r\n\r\n@external\r\ndef newFeeAmount(_feeAmount: uint256):\r\n    assert msg.sender == self.admin, \"Not admin\"\r\n    self.feeAmount = _feeAmount\r\n    log FeeChanged(_feeAmount)\r\n\r\n@external\r\ndef newFeeAddress(_feeAddress: address):\r\n    assert msg.sender == self.admin, \"Not admin\"\r\n    self.feeAddress = _feeAddress\r\n\r\n@external\r\n@nonreentrant('lock')\r\ndef batchWithdraw(token: address[8], amount: uint256[8], to: address[8]):\r\n    assert msg.sender == self.admin, \"Not admin\"\r\n    for i in range(8):\r\n        if token[i] == VETH:\r\n            send(to[i], amount[i])\r\n        elif token[i] != ZERO_ADDRESS:\r\n            self.safeTransfer(token[i], to[i], amount[i])\r\n\r\n@external\r\n@nonreentrant('lock')\r\ndef withdraw(token: address, amount: uint256, to: address):\r\n    assert msg.sender == self.admin, \"Not admin\"\r\n    if token == VETH:\r\n        send(to, amount)\r\n    elif token != ZERO_ADDRESS:\r\n        self.safeTransfer(token, to, amount)\r\n\r\n@external\r\n@payable\r\ndef __default__():\r\n    assert msg.sender == WETH, \"can't receive Eth\"","ABI":"[{\"name\":\"RemovedLiquidity\",\"inputs\":[{\"name\":\"tokenId\",\"type\":\"uint256\",\"indexed\":true},{\"name\":\"token0\",\"type\":\"address\",\"indexed\":true},{\"name\":\"token1\",\"type\":\"address\",\"indexed\":true},{\"name\":\"liquidity\",\"type\":\"uint256\",\"indexed\":false},{\"name\":\"amount0\",\"type\":\"uint256\",\"indexed\":false},{\"name\":\"amount1\",\"type\":\"uint256\",\"indexed\":false}],\"anonymous\":false,\"type\":\"event\"},{\"name\":\"Paused\",\"inputs\":[{\"name\":\"paused\",\"type\":\"bool\",\"indexed\":false}],\"anonymous\":false,\"type\":\"event\"},{\"name\":\"FeeChanged\",\"inputs\":[{\"name\":\"newFee\",\"type\":\"uint256\",\"indexed\":false}],\"anonymous\":false,\"type\":\"event\"},{\"stateMutability\":\"nonpayable\",\"type\":\"constructor\",\"inputs\":[],\"outputs\":[]},{\"stateMutability\":\"payable\",\"type\":\"function\",\"name\":\"removeLiquidityFromUniV3NFLP\",\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"name\":\"_removeParams\",\"type\":\"tuple\",\"components\":[{\"name\":\"liquidity\",\"type\":\"uint256\"},{\"name\":\"recipient\",\"type\":\"address\"},{\"name\":\"deadline\",\"type\":\"uint256\"}]}],\"outputs\":[]},{\"stateMutability\":\"payable\",\"type\":\"function\",\"name\":\"removeLiquidityFromUniV3NFLP\",\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"name\":\"_removeParams\",\"type\":\"tuple\",\"components\":[{\"name\":\"liquidity\",\"type\":\"uint256\"},{\"name\":\"recipient\",\"type\":\"address\"},{\"name\":\"deadline\",\"type\":\"uint256\"}]},{\"name\":\"isBurn\",\"type\":\"bool\"}],\"outputs\":[]},{\"stateMutability\":\"payable\",\"type\":\"function\",\"name\":\"removeLiquidityEthFromUniV3NFLP\",\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"name\":\"_removeParams\",\"type\":\"tuple\",\"components\":[{\"name\":\"liquidity\",\"type\":\"uint256\"},{\"name\":\"recipient\",\"type\":\"address\"},{\"name\":\"deadline\",\"type\":\"uint256\"}]}],\"outputs\":[]},{\"stateMutability\":\"payable\",\"type\":\"function\",\"name\":\"removeLiquidityEthFromUniV3NFLP\",\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"name\":\"_removeParams\",\"type\":\"tuple\",\"components\":[{\"name\":\"liquidity\",\"type\":\"uint256\"},{\"name\":\"recipient\",\"type\":\"address\"},{\"name\":\"deadline\",\"type\":\"uint256\"}]},{\"name\":\"isBurn\",\"type\":\"bool\"}],\"outputs\":[]},{\"stateMutability\":\"payable\",\"type\":\"function\",\"name\":\"divestUniV3NFLPToToken\",\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"name\":\"_token\",\"type\":\"address\"},{\"name\":\"_removeParams\",\"type\":\"tuple\",\"components\":[{\"name\":\"liquidity\",\"type\":\"uint256\"},{\"name\":\"recipient\",\"type\":\"address\"},{\"name\":\"deadline\",\"type\":\"uint256\"}]},{\"name\":\"minTokenAmount\",\"type\":\"uint256\"}],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}]},{\"stateMutability\":\"payable\",\"type\":\"function\",\"name\":\"divestUniV3NFLPToToken\",\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"name\":\"_token\",\"type\":\"address\"},{\"name\":\"_removeParams\",\"type\":\"tuple\",\"components\":[{\"name\":\"liquidity\",\"type\":\"uint256\"},{\"name\":\"recipient\",\"type\":\"address\"},{\"name\":\"deadline\",\"type\":\"uint256\"}]},{\"name\":\"minTokenAmount\",\"type\":\"uint256\"},{\"name\":\"isBurn\",\"type\":\"bool\"}],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}]},{\"stateMutability\":\"payable\",\"type\":\"function\",\"name\":\"divestUniV3NFLPToToken\",\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"name\":\"_token\",\"type\":\"address\"},{\"name\":\"_removeParams\",\"type\":\"tuple\",\"components\":[{\"name\":\"liquidity\",\"type\":\"uint256\"},{\"name\":\"recipient\",\"type\":\"address\"},{\"name\":\"deadline\",\"type\":\"uint256\"}]},{\"name\":\"minTokenAmount\",\"type\":\"uint256\"},{\"name\":\"isBurn\",\"type\":\"bool\"},{\"name\":\"deadline\",\"type\":\"uint256\"}],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}]},{\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"pause\",\"inputs\":[{\"name\":\"_paused\",\"type\":\"bool\"}],\"outputs\":[],\"gas\":39101},{\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"newAdmin\",\"inputs\":[{\"name\":\"_admin\",\"type\":\"address\"}],\"outputs\":[],\"gas\":37784},{\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"newFeeAmount\",\"inputs\":[{\"name\":\"_feeAmount\",\"type\":\"uint256\"}],\"outputs\":[],\"gas\":39061},{\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"newFeeAddress\",\"inputs\":[{\"name\":\"_feeAddress\",\"type\":\"address\"}],\"outputs\":[],\"gas\":37844},{\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"batchWithdraw\",\"inputs\":[{\"name\":\"token\",\"type\":\"address[8]\"},{\"name\":\"amount\",\"type\":\"uint256[8]\"},{\"name\":\"to\",\"type\":\"address[8]\"}],\"outputs\":[],\"gas\":352157},{\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"withdraw\",\"inputs\":[{\"name\":\"token\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"},{\"name\":\"to\",\"type\":\"address\"}],\"outputs\":[],\"gas\":96457},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"paused\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"gas\":2748},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"admin\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"gas\":2778},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"feeAddress\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"gas\":2808},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"feeAmount\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"gas\":2838}]","ContractName":"Vyper_contract","CompilerVersion":"vyper:0.2.12","OptimizationUsed":"0","Runs":"0","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"Apache-2.0","Proxy":"0","Implementation":"","SwarmSource":""}]}