{"status":"1","message":"OK","result":[{"SourceCode":"// SPDX-License-Identifier: MIT\r\n\r\npragma solidity 0.6.12;\r\npragma experimental ABIEncoderV2;\r\n\r\n\r\n\r\n// Part: IBalancerPool\r\n\r\ninterface IBalancerPool {\r\n  function getFinalTokens() external view returns (address[] memory);\r\n\r\n  function getNormalizedWeight(address token) external view returns (uint);\r\n\r\n  function getSwapFee() external view returns (uint);\r\n\r\n  function getNumTokens() external view returns (uint);\r\n\r\n  function getBalance(address token) external view returns (uint);\r\n\r\n  function totalSupply() external view returns (uint);\r\n\r\n  function joinPool(uint poolAmountOut, uint[] calldata maxAmountsIn) external;\r\n\r\n  function swapExactAmountOut(\r\n    address tokenIn,\r\n    uint maxAmountIn,\r\n    address tokenOut,\r\n    uint tokenAmountOut,\r\n    uint maxPrice\r\n  ) external returns (uint tokenAmountIn, uint spotPriceAfter);\r\n\r\n  function joinswapExternAmountIn(\r\n    address tokenIn,\r\n    uint tokenAmountIn,\r\n    uint minPoolAmountOut\r\n  ) external returns (uint poolAmountOut);\r\n\r\n  function exitPool(uint poolAmoutnIn, uint[] calldata minAmountsOut) external;\r\n\r\n  function exitswapExternAmountOut(\r\n    address tokenOut,\r\n    uint tokenAmountOut,\r\n    uint maxPoolAmountIn\r\n  ) external returns (uint poolAmountIn);\r\n}\r\n\r\n// Part: IBank\r\n\r\ninterface IBank {\r\n  /// The governor adds a new bank gets added to the system.\r\n  event AddBank(address token, address cToken);\r\n  /// The governor sets the address of the oracle smart contract.\r\n  event SetOracle(address oracle);\r\n  /// The governor sets the basis point fee of the bank.\r\n  event SetFeeBps(uint feeBps);\r\n  /// The governor withdraw tokens from the reserve of a bank.\r\n  event WithdrawReserve(address user, address token, uint amount);\r\n  /// Someone borrows tokens from a bank via a spell caller.\r\n  event Borrow(uint positionId, address caller, address token, uint amount, uint share);\r\n  /// Someone repays tokens to a bank via a spell caller.\r\n  event Repay(uint positionId, address caller, address token, uint amount, uint share);\r\n  /// Someone puts tokens as collateral via a spell caller.\r\n  event PutCollateral(uint positionId, address caller, address token, uint id, uint amount);\r\n  /// Someone takes tokens from collateral via a spell caller.\r\n  event TakeCollateral(uint positionId, address caller, address token, uint id, uint amount);\r\n  /// Someone calls liquidatation on a position, paying debt and taking collateral tokens.\r\n  event Liquidate(\r\n    uint positionId,\r\n    address liquidator,\r\n    address debtToken,\r\n    uint amount,\r\n    uint share,\r\n    uint bounty\r\n  );\r\n\r\n  /// @dev Return the current position while under execution.\r\n  function POSITION_ID() external view returns (uint);\r\n\r\n  /// @dev Return the current target while under execution.\r\n  function SPELL() external view returns (address);\r\n\r\n  /// @dev Return the current executor (the owner of the current position).\r\n  function EXECUTOR() external view returns (address);\r\n\r\n  /// @dev Return bank information for the given token.\r\n  function getBankInfo(address token)\r\n    external\r\n    view\r\n    returns (\r\n      bool isListed,\r\n      address cToken,\r\n      uint reserve,\r\n      uint totalDebt,\r\n      uint totalShare\r\n    );\r\n\r\n  /// @dev Return position information for the given position id.\r\n  function getPositionInfo(uint positionId)\r\n    external\r\n    view\r\n    returns (\r\n      address owner,\r\n      address collToken,\r\n      uint collId,\r\n      uint collateralSize\r\n    );\r\n\r\n  /// @dev Return the borrow balance for given positon and token without trigger interest accrual.\r\n  function borrowBalanceStored(uint positionId, address token) external view returns (uint);\r\n\r\n  /// @dev Trigger interest accrual and return the current borrow balance.\r\n  function borrowBalanceCurrent(uint positionId, address token) external returns (uint);\r\n\r\n  /// @dev Borrow tokens from the bank.\r\n  function borrow(address token, uint amount) external;\r\n\r\n  /// @dev Repays tokens to the bank.\r\n  function repay(address token, uint amountCall) external;\r\n\r\n  /// @dev Transmit user assets to the spell.\r\n  function transmit(address token, uint amount) external;\r\n\r\n  /// @dev Put more collateral for users.\r\n  function putCollateral(\r\n    address collToken,\r\n    uint collId,\r\n    uint amountCall\r\n  ) external;\r\n\r\n  /// @dev Take some collateral back.\r\n  function takeCollateral(\r\n    address collToken,\r\n    uint collId,\r\n    uint amount\r\n  ) external;\r\n\r\n  /// @dev Liquidate a position.\r\n  function liquidate(\r\n    uint positionId,\r\n    address debtToken,\r\n    uint amountCall\r\n  ) external;\r\n\r\n  function getBorrowETHValue(uint positionId) external view returns (uint);\r\n\r\n  function accrue(address token) external;\r\n\r\n  function nextPositionId() external view returns (uint);\r\n\r\n  /// @dev Return current position information.\r\n  function getCurrentPositionInfo()\r\n    external\r\n    view\r\n    returns (\r\n      address owner,\r\n      address collToken,\r\n      uint collId,\r\n      uint collateralSize\r\n    );\r\n\r\n  function support(address token) external view returns (bool);\r\n\r\n}\r\n\r\n// Part: IERC20Wrapper\r\n\r\ninterface IERC20Wrapper {\r\n  /// @dev Return the underlying ERC-20 for the given ERC-1155 token id.\r\n  function getUnderlyingToken(uint id) external view returns (address);\r\n\r\n  /// @dev Return the conversion rate from ERC-1155 to ERC-20, multiplied by 2**112.\r\n  function getUnderlyingRate(uint id) external view returns (uint);\r\n}\r\n\r\n// Part: IWETH\r\n\r\ninterface IWETH {\r\n  function balanceOf(address user) external returns (uint);\r\n\r\n  function approve(address to, uint value) external returns (bool);\r\n\r\n  function transfer(address to, uint value) external returns (bool);\r\n\r\n  function deposit() external payable;\r\n\r\n  function withdraw(uint) external;\r\n}\r\n\r\n// Part: OpenZeppelin/openzeppelin-contracts@3.4.0/Address\r\n\r\n/**\r\n * @dev Collection of functions related to the address type\r\n */\r\nlibrary Address {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     *\r\n     * Among others, `isContract` will return false for the following\r\n     * types of addresses:\r\n     *\r\n     *  - an externally-owned account\r\n     *  - a contract in construction\r\n     *  - an address where a contract will be created\r\n     *  - an address where a contract lived, but was destroyed\r\n     * ====\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // This method relies on extcodesize, which returns 0 for contracts in\r\n        // construction, since the code is only stored at the end of the\r\n        // constructor execution.\r\n\r\n        uint256 size;\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly { size := extcodesize(account) }\r\n        return size > 0;\r\n    }\r\n\r\n    /**\r\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * IMPORTANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     */\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\r\n        (bool success, ) = recipient.call{ value: amount }(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n\r\n    /**\r\n     * @dev Performs a Solidity function call using a low level `call`. A\r\n     * plain`call` is an unsafe replacement for a function call: use this\r\n     * function instead.\r\n     *\r\n     * If `target` reverts with a revert reason, it is bubbled up by this\r\n     * function (like regular Solidity function calls).\r\n     *\r\n     * Returns the raw returned data. To convert to the expected return value,\r\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `target` must be a contract.\r\n     * - calling `target` with `data` must not revert.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n      return functionCall(target, data, \"Address: low-level call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\r\n     * `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but also transferring `value` wei to `target`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the calling contract must have an ETH balance of at least `value`.\r\n     * - the called Solidity function must be `payable`.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\r\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\r\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\r\n        require(isContract(target), \"Address: call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\r\n        return _verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\r\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\r\n        require(isContract(target), \"Address: static call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.staticcall(data);\r\n        return _verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\r\n        require(isContract(target), \"Address: delegate call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.delegatecall(data);\r\n        return _verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            // Look for revert reason and bubble it up if present\r\n            if (returndata.length > 0) {\r\n                // The easiest way to bubble the revert reason is using memory via assembly\r\n\r\n                // solhint-disable-next-line no-inline-assembly\r\n                assembly {\r\n                    let returndata_size := mload(returndata)\r\n                    revert(add(32, returndata), returndata_size)\r\n                }\r\n            } else {\r\n                revert(errorMessage);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n// Part: OpenZeppelin/openzeppelin-contracts@3.4.0/IERC165\r\n\r\n/**\r\n * @dev Interface of the ERC165 standard, as defined in the\r\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\r\n *\r\n * Implementers can declare support of contract interfaces, which can then be\r\n * queried by others ({ERC165Checker}).\r\n *\r\n * For an implementation, see {ERC165}.\r\n */\r\ninterface IERC165 {\r\n    /**\r\n     * @dev Returns true if this contract implements the interface defined by\r\n     * `interfaceId`. See the corresponding\r\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\r\n     * to learn more about how these ids are created.\r\n     *\r\n     * This function call must use less than 30 000 gas.\r\n     */\r\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\r\n}\r\n\r\n// Part: OpenZeppelin/openzeppelin-contracts@3.4.0/IERC20\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n// Part: OpenZeppelin/openzeppelin-contracts@3.4.0/SafeMath\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        uint256 c = a + b;\r\n        if (c < a) return (false, 0);\r\n        return (true, c);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        if (b > a) return (false, 0);\r\n        return (true, a - b);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) return (true, 0);\r\n        uint256 c = a * b;\r\n        if (c / a != b) return (false, 0);\r\n        return (true, c);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        if (b == 0) return (false, 0);\r\n        return (true, a / b);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        if (b == 0) return (false, 0);\r\n        return (true, a % b);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b <= a, \"SafeMath: subtraction overflow\");\r\n        return a - b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) return 0;\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers, reverting on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b > 0, \"SafeMath: division by zero\");\r\n        return a / b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * reverting when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b > 0, \"SafeMath: modulo by zero\");\r\n        return a % b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\r\n     * message unnecessarily. For custom revert reasons use {trySub}.\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        return a - b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\r\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        return a / b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * reverting with custom message when dividing by zero.\r\n     *\r\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\r\n     * message unnecessarily. For custom revert reasons use {tryMod}.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n// Part: HomoraMath\r\n\r\nlibrary HomoraMath {\r\n  using SafeMath for uint;\r\n\r\n  function divCeil(uint lhs, uint rhs) internal pure returns (uint) {\r\n    return lhs.add(rhs).sub(1) / rhs;\r\n  }\r\n\r\n  function fmul(uint lhs, uint rhs) internal pure returns (uint) {\r\n    return lhs.mul(rhs) / (2**112);\r\n  }\r\n\r\n  function fdiv(uint lhs, uint rhs) internal pure returns (uint) {\r\n    return lhs.mul(2**112) / rhs;\r\n  }\r\n\r\n  // implementation from https://github.com/Uniswap/uniswap-lib/commit/99f3f28770640ba1bb1ff460ac7c5292fb8291a0\r\n  // original implementation: https://github.com/abdk-consulting/abdk-libraries-solidity/blob/master/ABDKMath64x64.sol#L687\r\n  function sqrt(uint x) internal pure returns (uint) {\r\n    if (x == 0) return 0;\r\n    uint xx = x;\r\n    uint r = 1;\r\n\r\n    if (xx >= 0x100000000000000000000000000000000) {\r\n      xx >>= 128;\r\n      r <<= 64;\r\n    }\r\n\r\n    if (xx >= 0x10000000000000000) {\r\n      xx >>= 64;\r\n      r <<= 32;\r\n    }\r\n    if (xx >= 0x100000000) {\r\n      xx >>= 32;\r\n      r <<= 16;\r\n    }\r\n    if (xx >= 0x10000) {\r\n      xx >>= 16;\r\n      r <<= 8;\r\n    }\r\n    if (xx >= 0x100) {\r\n      xx >>= 8;\r\n      r <<= 4;\r\n    }\r\n    if (xx >= 0x10) {\r\n      xx >>= 4;\r\n      r <<= 2;\r\n    }\r\n    if (xx >= 0x8) {\r\n      r <<= 1;\r\n    }\r\n\r\n    r = (r + x / r) >> 1;\r\n    r = (r + x / r) >> 1;\r\n    r = (r + x / r) >> 1;\r\n    r = (r + x / r) >> 1;\r\n    r = (r + x / r) >> 1;\r\n    r = (r + x / r) >> 1;\r\n    r = (r + x / r) >> 1; // Seven iterations should be enough\r\n    uint r1 = x / r;\r\n    return (r < r1 ? r : r1);\r\n  }\r\n}\r\n\r\n// Part: OpenZeppelin/openzeppelin-contracts@3.4.0/ERC165\r\n\r\n/**\r\n * @dev Implementation of the {IERC165} interface.\r\n *\r\n * Contracts may inherit from this and call {_registerInterface} to declare\r\n * their support of an interface.\r\n */\r\nabstract contract ERC165 is IERC165 {\r\n    /*\r\n     * bytes4(keccak256('supportsInterface(bytes4)')) == 0x01ffc9a7\r\n     */\r\n    bytes4 private constant _INTERFACE_ID_ERC165 = 0x01ffc9a7;\r\n\r\n    /**\r\n     * @dev Mapping of interface ids to whether or not it's supported.\r\n     */\r\n    mapping(bytes4 => bool) private _supportedInterfaces;\r\n\r\n    constructor () internal {\r\n        // Derived contracts need only register support for their own interfaces,\r\n        // we register support for ERC165 itself here\r\n        _registerInterface(_INTERFACE_ID_ERC165);\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC165-supportsInterface}.\r\n     *\r\n     * Time complexity O(1), guaranteed to always use less than 30 000 gas.\r\n     */\r\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\r\n        return _supportedInterfaces[interfaceId];\r\n    }\r\n\r\n    /**\r\n     * @dev Registers the contract as an implementer of the interface defined by\r\n     * `interfaceId`. Support of the actual ERC165 interface is automatic and\r\n     * registering its interface id is not required.\r\n     *\r\n     * See {IERC165-supportsInterface}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `interfaceId` cannot be the ERC165 invalid interface (`0xffffffff`).\r\n     */\r\n    function _registerInterface(bytes4 interfaceId) internal virtual {\r\n        require(interfaceId != 0xffffffff, \"ERC165: invalid interface id\");\r\n        _supportedInterfaces[interfaceId] = true;\r\n    }\r\n}\r\n\r\n// Part: OpenZeppelin/openzeppelin-contracts@3.4.0/IERC1155\r\n\r\n/**\r\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\r\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\r\n *\r\n * _Available since v3.1._\r\n */\r\ninterface IERC1155 is IERC165 {\r\n    /**\r\n     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\r\n     */\r\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\r\n\r\n    /**\r\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\r\n     * transfers.\r\n     */\r\n    event TransferBatch(address indexed operator, address indexed from, address indexed to, uint256[] ids, uint256[] values);\r\n\r\n    /**\r\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\r\n     * `approved`.\r\n     */\r\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\r\n\r\n    /**\r\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\r\n     *\r\n     * If an {URI} event was emitted for `id`, the standard\r\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\r\n     * returned by {IERC1155MetadataURI-uri}.\r\n     */\r\n    event URI(string value, uint256 indexed id);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `account` cannot be the zero address.\r\n     */\r\n    function balanceOf(address account, uint256 id) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `accounts` and `ids` must have the same length.\r\n     */\r\n    function balanceOfBatch(address[] calldata accounts, uint256[] calldata ids) external view returns (uint256[] memory);\r\n\r\n    /**\r\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\r\n     *\r\n     * Emits an {ApprovalForAll} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `operator` cannot be the caller.\r\n     */\r\n    function setApprovalForAll(address operator, bool approved) external;\r\n\r\n    /**\r\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\r\n     *\r\n     * See {setApprovalForAll}.\r\n     */\r\n    function isApprovedForAll(address account, address operator) external view returns (bool);\r\n\r\n    /**\r\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\r\n     *\r\n     * Emits a {TransferSingle} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `to` cannot be the zero address.\r\n     * - If the caller is not `from`, it must be have been approved to spend ``from``'s tokens via {setApprovalForAll}.\r\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\r\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\r\n     * acceptance magic value.\r\n     */\r\n    function safeTransferFrom(address from, address to, uint256 id, uint256 amount, bytes calldata data) external;\r\n\r\n    /**\r\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\r\n     *\r\n     * Emits a {TransferBatch} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `ids` and `amounts` must have the same length.\r\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\r\n     * acceptance magic value.\r\n     */\r\n    function safeBatchTransferFrom(address from, address to, uint256[] calldata ids, uint256[] calldata amounts, bytes calldata data) external;\r\n}\r\n\r\n// Part: OpenZeppelin/openzeppelin-contracts@3.4.0/IERC1155Receiver\r\n\r\n/**\r\n * _Available since v3.1._\r\n */\r\ninterface IERC1155Receiver is IERC165 {\r\n\r\n    /**\r\n        @dev Handles the receipt of a single ERC1155 token type. This function is\r\n        called at the end of a `safeTransferFrom` after the balance has been updated.\r\n        To accept the transfer, this must return\r\n        `bytes4(keccak256(\"onERC1155Received(address,address,uint256,uint256,bytes)\"))`\r\n        (i.e. 0xf23a6e61, or its own function selector).\r\n        @param operator The address which initiated the transfer (i.e. msg.sender)\r\n        @param from The address which previously owned the token\r\n        @param id The ID of the token being transferred\r\n        @param value The amount of tokens being transferred\r\n        @param data Additional data with no specified format\r\n        @return `bytes4(keccak256(\"onERC1155Received(address,address,uint256,uint256,bytes)\"))` if transfer is allowed\r\n    */\r\n    function onERC1155Received(\r\n        address operator,\r\n        address from,\r\n        uint256 id,\r\n        uint256 value,\r\n        bytes calldata data\r\n    )\r\n        external\r\n        returns(bytes4);\r\n\r\n    /**\r\n        @dev Handles the receipt of a multiple ERC1155 token types. This function\r\n        is called at the end of a `safeBatchTransferFrom` after the balances have\r\n        been updated. To accept the transfer(s), this must return\r\n        `bytes4(keccak256(\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\"))`\r\n        (i.e. 0xbc197c81, or its own function selector).\r\n        @param operator The address which initiated the batch transfer (i.e. msg.sender)\r\n        @param from The address which previously owned the token\r\n        @param ids An array containing ids of each token being transferred (order and length must match values array)\r\n        @param values An array containing amounts of each token being transferred (order and length must match ids array)\r\n        @param data Additional data with no specified format\r\n        @return `bytes4(keccak256(\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\"))` if transfer is allowed\r\n    */\r\n    function onERC1155BatchReceived(\r\n        address operator,\r\n        address from,\r\n        uint256[] calldata ids,\r\n        uint256[] calldata values,\r\n        bytes calldata data\r\n    )\r\n        external\r\n        returns(bytes4);\r\n}\r\n\r\n// Part: OpenZeppelin/openzeppelin-contracts@3.4.0/Initializable\r\n\r\n/**\r\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\r\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\r\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\r\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\r\n *\r\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\r\n * possible by providing the encoded function call as the `_data` argument to {UpgradeableProxy-constructor}.\r\n *\r\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\r\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\r\n */\r\nabstract contract Initializable {\r\n\r\n    /**\r\n     * @dev Indicates that the contract has been initialized.\r\n     */\r\n    bool private _initialized;\r\n\r\n    /**\r\n     * @dev Indicates that the contract is in the process of being initialized.\r\n     */\r\n    bool private _initializing;\r\n\r\n    /**\r\n     * @dev Modifier to protect an initializer function from being invoked twice.\r\n     */\r\n    modifier initializer() {\r\n        require(_initializing || _isConstructor() || !_initialized, \"Initializable: contract is already initialized\");\r\n\r\n        bool isTopLevelCall = !_initializing;\r\n        if (isTopLevelCall) {\r\n            _initializing = true;\r\n            _initialized = true;\r\n        }\r\n\r\n        _;\r\n\r\n        if (isTopLevelCall) {\r\n            _initializing = false;\r\n        }\r\n    }\r\n\r\n    /// @dev Returns true if and only if the function is running in the constructor\r\n    function _isConstructor() private view returns (bool) {\r\n        return !Address.isContract(address(this));\r\n    }\r\n}\r\n\r\n// Part: OpenZeppelin/openzeppelin-contracts@3.4.0/SafeERC20\r\n\r\n/**\r\n * @title SafeERC20\r\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\r\n * contract returns false). Tokens that return no value (and instead revert or\r\n * throw on failure) are also supported, non-reverting calls are assumed to be\r\n * successful.\r\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\r\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\r\n */\r\nlibrary SafeERC20 {\r\n    using SafeMath for uint256;\r\n    using Address for address;\r\n\r\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\r\n    }\r\n\r\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\r\n    }\r\n\r\n    /**\r\n     * @dev Deprecated. This function has issues similar to the ones found in\r\n     * {IERC20-approve}, and its usage is discouraged.\r\n     *\r\n     * Whenever possible, use {safeIncreaseAllowance} and\r\n     * {safeDecreaseAllowance} instead.\r\n     */\r\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\r\n        // safeApprove should only be called when setting an initial allowance,\r\n        // or when resetting it to zero. To increase and decrease it, use\r\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\r\n        // solhint-disable-next-line max-line-length\r\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\r\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\r\n        );\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\r\n    }\r\n\r\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \"SafeERC20: decreased allowance below zero\");\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    /**\r\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\r\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\r\n     * @param token The token targeted by the call.\r\n     * @param data The call data (encoded using abi.encode or one of its variants).\r\n     */\r\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\r\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\r\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\r\n        // the target address contains contract code and also asserts for success in the low-level call.\r\n\r\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\r\n        if (returndata.length > 0) { // Return data is optional\r\n            // solhint-disable-next-line max-line-length\r\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\r\n        }\r\n    }\r\n}\r\n\r\n// Part: Governable\r\n\r\ncontract Governable is Initializable {\r\n  event SetGovernor(address governor);\r\n  event SetPendingGovernor(address pendingGovernor);\r\n  event AcceptGovernor(address governor);\r\n\r\n  address public governor; // The current governor.\r\n  address public pendingGovernor; // The address pending to become the governor once accepted.\r\n\r\n  bytes32[64] _gap; // reserve space for upgrade\r\n\r\n  modifier onlyGov() {\r\n    require(msg.sender == governor, 'not the governor');\r\n    _;\r\n  }\r\n\r\n  /// @dev Initialize using msg.sender as the first governor.\r\n  function __Governable__init() internal initializer {\r\n    governor = msg.sender;\r\n    pendingGovernor = address(0);\r\n    emit SetGovernor(msg.sender);\r\n  }\r\n\r\n  /// @dev Set the pending governor, which will be the governor once accepted.\r\n  /// @param _pendingGovernor The address to become the pending governor.\r\n  function setPendingGovernor(address _pendingGovernor) external onlyGov {\r\n    pendingGovernor = _pendingGovernor;\r\n    emit SetPendingGovernor(_pendingGovernor);\r\n  }\r\n\r\n  /// @dev Accept to become the new governor. Must be called by the pending governor.\r\n  function acceptGovernor() external {\r\n    require(msg.sender == pendingGovernor, 'not the pending governor');\r\n    pendingGovernor = address(0);\r\n    governor = msg.sender;\r\n    emit AcceptGovernor(msg.sender);\r\n  }\r\n}\r\n\r\n// Part: IWERC20\r\n\r\ninterface IWERC20 is IERC1155, IERC20Wrapper {\r\n  /// @dev Return the underlying ERC20 balance for the user.\r\n  function balanceOfERC20(address token, address user) external view returns (uint);\r\n\r\n  /// @dev Mint ERC1155 token for the given ERC20 token.\r\n  function mint(address token, uint amount) external;\r\n\r\n  /// @dev Burn ERC1155 token to redeem ERC20 token back.\r\n  function burn(address token, uint amount) external;\r\n}\r\n\r\n// Part: IWStakingRewards\r\n\r\ninterface IWStakingRewards is IERC1155, IERC20Wrapper {\r\n  /// @dev Mint ERC1155 token for the given ERC20 token.\r\n  function mint(uint amount) external returns (uint id);\r\n\r\n  /// @dev Burn ERC1155 token to redeem ERC20 token back.\r\n  function burn(uint id, uint amount) external returns (uint);\r\n\r\n  function reward() external returns (address);\r\n}\r\n\r\n// Part: OpenZeppelin/openzeppelin-contracts@3.4.0/ERC1155Receiver\r\n\r\n/**\r\n * @dev _Available since v3.1._\r\n */\r\nabstract contract ERC1155Receiver is ERC165, IERC1155Receiver {\r\n    constructor() internal {\r\n        _registerInterface(\r\n            ERC1155Receiver(address(0)).onERC1155Received.selector ^\r\n            ERC1155Receiver(address(0)).onERC1155BatchReceived.selector\r\n        );\r\n    }\r\n}\r\n\r\n// Part: ERC1155NaiveReceiver\r\n\r\ncontract ERC1155NaiveReceiver is ERC1155Receiver {\r\n  bytes32[64] __gap; // reserve space for upgrade\r\n\r\n  function onERC1155Received(\r\n    address, /* operator */\r\n    address, /* from */\r\n    uint, /* id */\r\n    uint, /* value */\r\n    bytes calldata /* data */\r\n  ) external override returns (bytes4) {\r\n    return this.onERC1155Received.selector;\r\n  }\r\n\r\n  function onERC1155BatchReceived(\r\n    address, /* operator */\r\n    address, /* from */\r\n    uint[] calldata, /* ids */\r\n    uint[] calldata, /* values */\r\n    bytes calldata /* data */\r\n  ) external override returns (bytes4) {\r\n    return this.onERC1155BatchReceived.selector;\r\n  }\r\n}\r\n\r\n// Part: BasicSpell\r\n\r\nabstract contract BasicSpell is ERC1155NaiveReceiver {\r\n  using SafeERC20 for IERC20;\r\n\r\n  IBank public immutable bank;\r\n  IWERC20 public immutable werc20;\r\n  address public immutable weth;\r\n\r\n  mapping(address => mapping(address => bool)) public approved; // Mapping from token to (mapping from spender to approve status)\r\n\r\n  constructor(\r\n    IBank _bank,\r\n    address _werc20,\r\n    address _weth\r\n  ) public {\r\n    bank = _bank;\r\n    werc20 = IWERC20(_werc20);\r\n    weth = _weth;\r\n    ensureApprove(_weth, address(_bank));\r\n    IWERC20(_werc20).setApprovalForAll(address(_bank), true);\r\n  }\r\n\r\n  /// @dev Ensure that the spell has approved the given spender to spend all of its tokens.\r\n  /// @param token The token to approve.\r\n  /// @param spender The spender to allow spending.\r\n  /// NOTE: This is safe because spell is never built to hold fund custody.\r\n  function ensureApprove(address token, address spender) internal {\r\n    if (!approved[token][spender]) {\r\n      IERC20(token).safeApprove(spender, uint(-1));\r\n      approved[token][spender] = true;\r\n    }\r\n  }\r\n\r\n  /// @dev Internal call to convert msg.value ETH to WETH inside the contract.\r\n  function doTransmitETH() internal {\r\n    if (msg.value > 0) {\r\n      IWETH(weth).deposit{value: msg.value}();\r\n    }\r\n  }\r\n\r\n  /// @dev Internal call to transmit tokens from the bank if amount is positive.\r\n  /// @param token The token to perform the transmit action.\r\n  /// @param amount The amount to transmit.\r\n  /// @notice Do not use `amount` input argument to handle the received amount.\r\n  function doTransmit(address token, uint amount) internal {\r\n    if (amount > 0) {\r\n      bank.transmit(token, amount);\r\n    }\r\n  }\r\n\r\n  /// @dev Internal call to refund tokens to the current bank executor.\r\n  /// @param token The token to perform the refund action.\r\n  function doRefund(address token) internal {\r\n    uint balance = IERC20(token).balanceOf(address(this));\r\n    if (balance > 0) {\r\n      IERC20(token).safeTransfer(bank.EXECUTOR(), balance);\r\n    }\r\n  }\r\n\r\n  /// @dev Internal call to refund all WETH to the current executor as native ETH.\r\n  function doRefundETH() internal {\r\n    uint balance = IWETH(weth).balanceOf(address(this));\r\n    if (balance > 0) {\r\n      IWETH(weth).withdraw(balance);\r\n      (bool success, ) = bank.EXECUTOR().call{value: balance}(new bytes(0));\r\n      require(success, 'refund ETH failed');\r\n    }\r\n  }\r\n\r\n  /// @dev Internal call to borrow tokens from the bank on behalf of the current executor.\r\n  /// @param token The token to borrow from the bank.\r\n  /// @param amount The amount to borrow.\r\n  /// @notice Do not use `amount` input argument to handle the received amount.\r\n  function doBorrow(address token, uint amount) internal {\r\n    if (amount > 0) {\r\n      bank.borrow(token, amount);\r\n    }\r\n  }\r\n\r\n  /// @dev Internal call to repay tokens to the bank on behalf of the current executor.\r\n  /// @param token The token to repay to the bank.\r\n  /// @param amount The amount to repay.\r\n  function doRepay(address token, uint amount) internal {\r\n    if (amount > 0) {\r\n      ensureApprove(token, address(bank));\r\n      bank.repay(token, amount);\r\n    }\r\n  }\r\n\r\n  /// @dev Internal call to put collateral tokens in the bank.\r\n  /// @param token The token to put in the bank.\r\n  /// @param amount The amount to put in the bank.\r\n  function doPutCollateral(address token, uint amount) internal {\r\n    if (amount > 0) {\r\n      ensureApprove(token, address(werc20));\r\n      werc20.mint(token, amount);\r\n      bank.putCollateral(address(werc20), uint(token), amount);\r\n    }\r\n  }\r\n\r\n  /// @dev Internal call to take collateral tokens from the bank.\r\n  /// @param token The token to take back.\r\n  /// @param amount The amount to take back.\r\n  function doTakeCollateral(address token, uint amount) internal {\r\n    if (amount > 0) {\r\n      if (amount == uint(-1)) {\r\n        (, , , amount) = bank.getCurrentPositionInfo();\r\n      }\r\n      bank.takeCollateral(address(werc20), uint(token), amount);\r\n      werc20.burn(token, amount);\r\n    }\r\n  }\r\n\r\n  /// @dev Fallback function. Can only receive ETH from WETH contract.\r\n  receive() external payable {\r\n    require(msg.sender == weth, 'ETH must come from WETH');\r\n  }\r\n}\r\n\r\n// Part: WhitelistSpell\r\n\r\ncontract WhitelistSpell is BasicSpell, Governable {\r\n  mapping(address => bool) public whitelistedLpTokens; // mapping from lp token to whitelist status\r\n\r\n  constructor(\r\n    IBank _bank,\r\n    address _werc20,\r\n    address _weth\r\n  ) public BasicSpell(_bank, _werc20, _weth) {\r\n    __Governable__init();\r\n  }\r\n\r\n  /// @dev Set whitelist LP token statuses for spell\r\n  /// @param lpTokens LP tokens to set whitelist statuses\r\n  /// @param statuses Whitelist statuses\r\n  function setWhitelistLPTokens(address[] calldata lpTokens, bool[] calldata statuses)\r\n    external\r\n    onlyGov\r\n  {\r\n    require(lpTokens.length == statuses.length, 'lpTokens & statuses length mismatched');\r\n    for (uint idx = 0; idx < lpTokens.length; idx++) {\r\n      if (statuses[idx]) {\r\n        require(bank.support(lpTokens[idx]), 'oracle not support lp token');\r\n      }\r\n      whitelistedLpTokens[lpTokens[idx]] = statuses[idx];\r\n    }\r\n  }\r\n}\r\n\r\n// File: BalancerSpellV1.sol\r\n\r\ncontract BalancerSpellV1 is WhitelistSpell {\r\n  using SafeMath for uint;\r\n  using HomoraMath for uint;\r\n\r\n  mapping(address => address[2]) public pairs; // Mapping from lp token to underlying token (only pairs)\r\n\r\n  constructor(\r\n    IBank _bank,\r\n    address _werc20,\r\n    address _weth\r\n  ) public WhitelistSpell(_bank, _werc20, _weth) {}\r\n\r\n  /// @dev Return the underlying pairs for the lp token.\r\n  /// @param lp LP token\r\n  function getAndApprovePair(address lp) public returns (address, address) {\r\n    address[2] memory ulTokens = pairs[lp];\r\n    if (ulTokens[0] == address(0) || ulTokens[1] == address(0)) {\r\n      address[] memory tokens = IBalancerPool(lp).getFinalTokens();\r\n      require(tokens.length == 2, 'underlying tokens not 2');\r\n      ulTokens[0] = tokens[0];\r\n      ulTokens[1] = tokens[1];\r\n      pairs[lp] = ulTokens;\r\n      ensureApprove(ulTokens[0], lp);\r\n      ensureApprove(ulTokens[1], lp);\r\n    }\r\n    return (ulTokens[0], ulTokens[1]);\r\n  }\r\n\r\n  struct Amounts {\r\n    uint amtAUser; // Supplied tokenA amount\r\n    uint amtBUser; // Supplied tokenB amount\r\n    uint amtLPUser; // Supplied LP token amount\r\n    uint amtABorrow; // Borrow tokenA amount\r\n    uint amtBBorrow; // Borrow tokenB amount\r\n    uint amtLPBorrow; // Borrow LP token amount\r\n    uint amtLPDesired; // Desired LP token amount (slippage control)\r\n  }\r\n\r\n  /// @dev Add liquidity to Balancer pool\r\n  /// @param lp LP token for the pool\r\n  /// @param amt Amounts of tokens to supply, borrow, and get.\r\n  /// @return added lp amount\r\n  function addLiquidityInternal(address lp, Amounts calldata amt) internal returns (uint) {\r\n    require(whitelistedLpTokens[lp], 'lp token not whitelisted');\r\n    (address tokenA, address tokenB) = getAndApprovePair(lp);\r\n\r\n    // 1. Get user input amounts\r\n    doTransmitETH();\r\n    doTransmit(tokenA, amt.amtAUser);\r\n    doTransmit(tokenB, amt.amtBUser);\r\n    doTransmit(lp, amt.amtLPUser);\r\n\r\n    // 2. Borrow specified amounts\r\n    doBorrow(tokenA, amt.amtABorrow);\r\n    doBorrow(tokenB, amt.amtBBorrow);\r\n    doBorrow(lp, amt.amtLPBorrow);\r\n\r\n    // 3.1 Add Liquidity using equal value two side to minimize swap fee\r\n    uint[] memory maxAmountsIn = new uint[](2);\r\n    maxAmountsIn[0] = IERC20(tokenA).balanceOf(address(this));\r\n    maxAmountsIn[1] = IERC20(tokenB).balanceOf(address(this));\r\n    uint totalLPSupply = IBalancerPool(lp).totalSupply();\r\n    uint poolAmountFromA =\r\n      maxAmountsIn[0].mul(1e18).div(IBalancerPool(lp).getBalance(tokenA)).mul(totalLPSupply).div(\r\n        1e18\r\n      ); // compute in reverse order of how Balancer's `joinPool` computes tokenAmountIn\r\n    uint poolAmountFromB =\r\n      maxAmountsIn[1].mul(1e18).div(IBalancerPool(lp).getBalance(tokenB)).mul(totalLPSupply).div(\r\n        1e18\r\n      ); // compute in reverse order of how Balancer's `joinPool` computes tokenAmountIn\r\n\r\n    uint poolAmountOut = poolAmountFromA > poolAmountFromB ? poolAmountFromB : poolAmountFromA;\r\n    if (poolAmountOut > 0) IBalancerPool(lp).joinPool(poolAmountOut, maxAmountsIn);\r\n\r\n    // 3.2 Add Liquidity leftover for each token\r\n    uint ABal = IERC20(tokenA).balanceOf(address(this));\r\n    uint BBal = IERC20(tokenB).balanceOf(address(this));\r\n    if (ABal > 0) IBalancerPool(lp).joinswapExternAmountIn(tokenA, ABal, 0);\r\n    if (BBal > 0) IBalancerPool(lp).joinswapExternAmountIn(tokenB, BBal, 0);\r\n\r\n    // 4. Slippage control\r\n    uint lpBalance = IERC20(lp).balanceOf(address(this));\r\n    require(lpBalance >= amt.amtLPDesired, 'lp desired not met');\r\n\r\n    return lpBalance;\r\n  }\r\n\r\n  /// @dev Add liquidity to Balancer pool (with 2 underlying tokens), without staking rewards (use WERC20 wrapper)\r\n  /// @param lp LP token for the pool\r\n  /// @param amt Amounts of tokens to supply, borrow, and get.\r\n  function addLiquidityWERC20(address lp, Amounts calldata amt) external payable {\r\n    // 1-4. add liquidity\r\n    uint lpBalance = addLiquidityInternal(lp, amt);\r\n\r\n    // 5. Put collateral\r\n    doPutCollateral(lp, lpBalance);\r\n\r\n    // 6. Refund leftovers to users\r\n    (address tokenA, address tokenB) = getAndApprovePair(lp);\r\n    doRefundETH();\r\n    doRefund(tokenA);\r\n    doRefund(tokenB);\r\n  }\r\n\r\n  /// @dev Add liquidity to Balancer pool (with 2 underlying tokens), with staking rewards (use WStakingRewards)\r\n  /// @param lp LP token for the pool\r\n  /// @param amt Amounts of tokens to supply, borrow, and desire.\r\n  /// @param wstaking Wrapped staking rewards contract address\r\n  function addLiquidityWStakingRewards(\r\n    address lp,\r\n    Amounts calldata amt,\r\n    address wstaking\r\n  ) external payable {\r\n    // 1-4. add liquidity\r\n    addLiquidityInternal(lp, amt);\r\n\r\n    // 5. Take out collateral\r\n    (, address collToken, uint collId, uint collSize) = bank.getCurrentPositionInfo();\r\n    if (collSize > 0) {\r\n      require(IWStakingRewards(collToken).getUnderlyingToken(collId) == lp, 'incorrect underlying');\r\n      require(collToken == wstaking, 'collateral token & wstaking mismatched');\r\n      bank.takeCollateral(wstaking, collId, collSize);\r\n      IWStakingRewards(wstaking).burn(collId, collSize);\r\n    }\r\n\r\n    // 6. Put collateral\r\n    ensureApprove(lp, wstaking);\r\n    uint amount = IERC20(lp).balanceOf(address(this));\r\n    uint id = IWStakingRewards(wstaking).mint(amount);\r\n    if (!IWStakingRewards(wstaking).isApprovedForAll(address(this), address(bank))) {\r\n      IWStakingRewards(wstaking).setApprovalForAll(address(bank), true);\r\n    }\r\n    bank.putCollateral(address(wstaking), id, amount);\r\n\r\n    // 7. Refund leftovers to users\r\n    (address tokenA, address tokenB) = getAndApprovePair(lp);\r\n    doRefundETH();\r\n    doRefund(tokenA);\r\n    doRefund(tokenB);\r\n\r\n    // 8. Refund reward\r\n    doRefund(IWStakingRewards(wstaking).reward());\r\n  }\r\n\r\n  struct RepayAmounts {\r\n    uint amtLPTake; // Take out LP token amount (from Homora)\r\n    uint amtLPWithdraw; // Withdraw LP token amount (back to caller)\r\n    uint amtARepay; // Repay tokenA amount\r\n    uint amtBRepay; // Repay tokenB amount\r\n    uint amtLPRepay; // Repay LP token amount\r\n    uint amtAMin; // Desired tokenA amount (slippage control)\r\n    uint amtBMin; // Desired tokenB amount (slippage control)\r\n  }\r\n\r\n  /// @dev Remove liquidity from Balancer pool (with 2 underlying tokens)\r\n  /// @param lp LP token for the pool\r\n  /// @param amt Amounts of tokens to take out, withdraw, repay and get.\r\n  function removeLiquidityInternal(address lp, RepayAmounts calldata amt) internal {\r\n    require(whitelistedLpTokens[lp], 'lp token not whitelisted');\r\n    (address tokenA, address tokenB) = getAndApprovePair(lp);\r\n    uint amtARepay = amt.amtARepay;\r\n    uint amtBRepay = amt.amtBRepay;\r\n    uint amtLPRepay = amt.amtLPRepay;\r\n\r\n    // 2. Compute repay amount if MAX_INT is supplied (max debt)\r\n    {\r\n      uint positionId = bank.POSITION_ID();\r\n      if (amtARepay == uint(-1)) {\r\n        amtARepay = bank.borrowBalanceCurrent(positionId, tokenA);\r\n      }\r\n      if (amtBRepay == uint(-1)) {\r\n        amtBRepay = bank.borrowBalanceCurrent(positionId, tokenB);\r\n      }\r\n      if (amtLPRepay == uint(-1)) {\r\n        amtLPRepay = bank.borrowBalanceCurrent(positionId, lp);\r\n      }\r\n    }\r\n\r\n    // 3.1 Remove liquidity 2 sides\r\n    uint amtLPToRemove = IERC20(lp).balanceOf(address(this)).sub(amt.amtLPWithdraw);\r\n\r\n    if (amtLPToRemove > 0) {\r\n      uint[] memory minAmountsOut = new uint[](2);\r\n      IBalancerPool(lp).exitPool(amtLPToRemove, minAmountsOut);\r\n    }\r\n\r\n    // 3.2 Minimize trading\r\n    uint amtADesired = amtARepay.add(amt.amtAMin);\r\n    uint amtBDesired = amtBRepay.add(amt.amtBMin);\r\n\r\n    uint amtA = IERC20(tokenA).balanceOf(address(this));\r\n    uint amtB = IERC20(tokenB).balanceOf(address(this));\r\n\r\n    if (amtA < amtADesired && amtB > amtBDesired) {\r\n      IBalancerPool(lp).swapExactAmountOut(\r\n        tokenB,\r\n        amtB.sub(amtBDesired),\r\n        tokenA,\r\n        amtADesired.sub(amtA),\r\n        uint(-1)\r\n      );\r\n    } else if (amtA > amtADesired && amtB < amtBDesired) {\r\n      IBalancerPool(lp).swapExactAmountOut(\r\n        tokenA,\r\n        amtA.sub(amtADesired),\r\n        tokenB,\r\n        amtBDesired.sub(amtB),\r\n        uint(-1)\r\n      );\r\n    }\r\n\r\n    // 4. Repay\r\n    doRepay(tokenA, amtARepay);\r\n    doRepay(tokenB, amtBRepay);\r\n    doRepay(lp, amtLPRepay);\r\n\r\n    // 5. Slippage control\r\n    require(IERC20(tokenA).balanceOf(address(this)) >= amt.amtAMin);\r\n    require(IERC20(tokenB).balanceOf(address(this)) >= amt.amtBMin);\r\n    require(IERC20(lp).balanceOf(address(this)) >= amt.amtLPWithdraw);\r\n\r\n    // 6. Refund leftover\r\n    doRefundETH();\r\n    doRefund(tokenA);\r\n    doRefund(tokenB);\r\n    doRefund(lp);\r\n  }\r\n\r\n  /// @dev Remove liquidity from Balancer pool (with 2 underlying tokens), without staking rewards (use WERC20 wrapper)\r\n  /// @param lp LP token for the pool\r\n  /// @param amt Amounts of tokens to take out, withdraw, repay, and get.\r\n  function removeLiquidityWERC20(address lp, RepayAmounts calldata amt) external {\r\n    // 1. Take out collateral\r\n    doTakeCollateral(lp, amt.amtLPTake);\r\n\r\n    // 2-6. remove liquidity\r\n    removeLiquidityInternal(lp, amt);\r\n  }\r\n\r\n  /// @dev Remove liquidity from Balancer pool (with 2 underlying tokens), with staking rewards\r\n  /// @param lp LP token for the pool\r\n  /// @param amt Amounts of tokens to take out, withdraw, repay, and get.v\r\n  function removeLiquidityWStakingRewards(\r\n    address lp,\r\n    RepayAmounts calldata amt,\r\n    address wstaking\r\n  ) external {\r\n    (, address collToken, uint collId, ) = bank.getCurrentPositionInfo();\r\n\r\n    // 1. Take out collateral\r\n    require(IWStakingRewards(collToken).getUnderlyingToken(collId) == lp, 'incorrect underlying');\r\n    require(collToken == wstaking, 'collateral token & wstaking mismatched');\r\n    bank.takeCollateral(wstaking, collId, amt.amtLPTake);\r\n    IWStakingRewards(wstaking).burn(collId, amt.amtLPTake);\r\n\r\n    // 2-6. remove liquidity\r\n    removeLiquidityInternal(lp, amt);\r\n\r\n    // 7. Refund reward\r\n    doRefund(IWStakingRewards(wstaking).reward());\r\n  }\r\n\r\n  /// @dev Harvest staking reward tokens to in-exec position's owner\r\n  /// @param wstaking Wrapped staking rewards\r\n  function harvestWStakingRewards(address wstaking) external {\r\n    (, address collToken, uint collId, ) = bank.getCurrentPositionInfo();\r\n    address lp = IWStakingRewards(wstaking).getUnderlyingToken(collId);\r\n    require(whitelistedLpTokens[lp], 'lp token not whitelisted');\r\n    require(collToken == wstaking, 'collateral token & wstaking mismatched');\r\n\r\n    // 1. Take out collateral\r\n    bank.takeCollateral(wstaking, collId, uint(-1));\r\n    IWStakingRewards(wstaking).burn(collId, uint(-1));\r\n\r\n    // 2. put collateral\r\n    uint amount = IERC20(lp).balanceOf(address(this));\r\n    ensureApprove(lp, wstaking);\r\n    uint id = IWStakingRewards(wstaking).mint(amount);\r\n    bank.putCollateral(wstaking, id, amount);\r\n\r\n    // 3. Refund reward\r\n    doRefund(IWStakingRewards(wstaking).reward());\r\n  }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"contract IBank\",\"name\":\"_bank\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_werc20\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_weth\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"governor\",\"type\":\"address\"}],\"name\":\"AcceptGovernor\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"governor\",\"type\":\"address\"}],\"name\":\"SetGovernor\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"pendingGovernor\",\"type\":\"address\"}],\"name\":\"SetPendingGovernor\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"acceptGovernor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"lp\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"amtAUser\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amtBUser\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amtLPUser\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amtABorrow\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amtBBorrow\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amtLPBorrow\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amtLPDesired\",\"type\":\"uint256\"}],\"internalType\":\"struct BalancerSpellV1.Amounts\",\"name\":\"amt\",\"type\":\"tuple\"}],\"name\":\"addLiquidityWERC20\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"lp\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"amtAUser\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amtBUser\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amtLPUser\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amtABorrow\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amtBBorrow\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amtLPBorrow\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amtLPDesired\",\"type\":\"uint256\"}],\"internalType\":\"struct BalancerSpellV1.Amounts\",\"name\":\"amt\",\"type\":\"tuple\"},{\"internalType\":\"address\",\"name\":\"wstaking\",\"type\":\"address\"}],\"name\":\"addLiquidityWStakingRewards\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"approved\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"bank\",\"outputs\":[{\"internalType\":\"contract IBank\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"lp\",\"type\":\"address\"}],\"name\":\"getAndApprovePair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"governor\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"wstaking\",\"type\":\"address\"}],\"name\":\"harvestWStakingRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC1155BatchReceived\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC1155Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"pairs\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pendingGovernor\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"lp\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"amtLPTake\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amtLPWithdraw\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amtARepay\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amtBRepay\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amtLPRepay\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amtAMin\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amtBMin\",\"type\":\"uint256\"}],\"internalType\":\"struct BalancerSpellV1.RepayAmounts\",\"name\":\"amt\",\"type\":\"tuple\"}],\"name\":\"removeLiquidityWERC20\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"lp\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"amtLPTake\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amtLPWithdraw\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amtARepay\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amtBRepay\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amtLPRepay\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amtAMin\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amtBMin\",\"type\":\"uint256\"}],\"internalType\":\"struct BalancerSpellV1.RepayAmounts\",\"name\":\"amt\",\"type\":\"tuple\"},{\"internalType\":\"address\",\"name\":\"wstaking\",\"type\":\"address\"}],\"name\":\"removeLiquidityWStakingRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_pendingGovernor\",\"type\":\"address\"}],\"name\":\"setPendingGovernor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"lpTokens\",\"type\":\"address[]\"},{\"internalType\":\"bool[]\",\"name\":\"statuses\",\"type\":\"bool[]\"}],\"name\":\"setWhitelistLPTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"werc20\",\"outputs\":[{\"internalType\":\"contract IWERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"weth\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"whitelistedLpTokens\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]","ContractName":"BalancerSpellV1","CompilerVersion":"v0.6.12+commit.27d51765","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000ba5ebaf3fc1fcca67147050bf80462393814e54b00000000000000000000000006799a1e4792001aa9114f0012b9650ca28059a3000000000000000000000000c02aaa39b223fe8d0a0e5c4f27ead9083c756cc2","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://d1cde81426803f1caae72c1a6d3940e96f1f51a4d86090e4f2a2128ceccba8f1"}]}