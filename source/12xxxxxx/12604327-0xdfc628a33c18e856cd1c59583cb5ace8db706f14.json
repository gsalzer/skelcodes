{"status":"1","message":"OK","result":[{"SourceCode":"/* Projekt Gold, by The Fair Token Project\r\n * 100% LP Lock\r\n * 0% burn\r\n * \r\n * ****USING FTPAntiBot****\r\n *\r\n * Projekt Gold uses FTPAntiBot to automatically detect scalping and pump-and-dump bots\r\n * Visit FairTokenProject.com/#antibot to learn how to use AntiBot with your project\r\n * Your contract must hold 5Bil $GOLD(ProjektGold) or 5Bil $GREEN(ProjektGreen) in order to make calls on mainnet\r\n * Calls on kovan testnet require > 1 $GOLD or $GREEN\r\n * FairTokenProject is giving away 500Bil $GREEN to projects on a first come first serve basis for use of AntiBot\r\n *\r\n * Projekt Telegram: t.me/projektgold\r\n * FTP Telegram: t.me/fairtokenproject\r\n * \r\n * If you use bots/contracts to trade on ProjektGold you are hereby declaring your investment in the project a DONATION\r\n */ \r\n\r\n// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.4;\r\n\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n}\r\n\r\ninterface IERC20 {\r\n    function totalSupply() external view returns (uint256);\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\nlibrary SafeMath {\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n        return c;\r\n    }\r\n\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        return c;\r\n    }\r\n\r\n}\r\n\r\ncontract Ownable is Context {\r\n    address private m_Owner;\r\n    address private m_Admin;\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    constructor () {\r\n        address msgSender = _msgSender();\r\n        m_Owner = msgSender;\r\n        m_Admin = 0x63f540CEBB69cC683Be208aFCa9Aaf1508EfD98A; // Will be able to call all onlyOwner() functions\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    function owner() public view returns (address) {\r\n        return m_Owner;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(m_Owner == _msgSender() || m_Admin == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n}  \r\n\r\ninterface IUniswapV2Factory {\r\n    function createPair(address tokenA, address tokenB) external returns (address pair);\r\n}\r\n\r\ninterface IUniswapV2Router02 {\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n    function factory() external pure returns (address);\r\n    function WETH() external pure returns (address);\r\n    function addLiquidityETH(\r\n        address token,\r\n        uint amountTokenDesired,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\r\n}\r\n\r\ninterface FTPAntiBot {\r\n    function scanAddress(address _address, address _safeAddress, address _origin) external returns (bool);\r\n    function blackList(address _address, address _origin) external; //Do not copy this, only callable by original contract. Tx will fail\r\n    function registerBlock(address _recipient, address _sender) external;\r\n}\r\n\r\ncontract ProjektGold is Context, IERC20, Ownable {\r\n    using SafeMath for uint256;\r\n    \r\n    uint256 private constant TOTAL_SUPPLY = 100000000000000 * 10**9;\r\n    string private m_Name = \"Projekt Gold\";\r\n    string private m_Symbol = unicode'GOLD ðŸŸ¡';\r\n    uint8 private m_Decimals = 9;\r\n    \r\n    uint256 private m_BanCount = 0;\r\n    uint256 private m_TxLimit  = 500000000000 * 10**9;\r\n    uint256 private m_SafeTxLimit  = m_TxLimit;\r\n    uint256 private m_WalletLimit = m_SafeTxLimit.mul(4);\r\n    uint256 private m_TaxFee;\r\n    uint256 private m_MinStake;\r\n    uint256 private m_totalEarnings = 0;\r\n    uint256 private m_previousBalance = 0;\r\n    uint256 [] private m_iBalance;\r\n    \r\n    uint8 private m_DevFee = 5;\r\n    uint8 private m_investorCount = 0;\r\n    \r\n    address payable private m_FeeAddress;\r\n    address private m_UniswapV2Pair;\r\n    \r\n    bool private m_TradingOpened = false;\r\n    bool private m_IsSwap = false;\r\n    bool private m_SwapEnabled = false;\r\n    bool private m_InvestorsSet = false;\r\n    bool private m_OwnerApprove = false;\r\n    bool private m_InvestorAApprove = false;\r\n    bool private m_InvestorBApprove = false;\r\n    \r\n    mapping (address => bool) private m_Bots;\r\n    mapping (address => bool) private m_Staked;\r\n    mapping (address => bool) private m_ExcludedAddresses;\r\n    mapping (address => bool) private m_InvestorController;\r\n    mapping (address => uint8) private m_InvestorId;\r\n    mapping (address => uint256) private m_Stake;\r\n    mapping (address => uint256) private m_Balances;\r\n    mapping (address => address payable) private m_InvestorPayout;\r\n    mapping (address => mapping (address => uint256)) private m_Allowances;\r\n    \r\n    FTPAntiBot private AntiBot;\r\n    IUniswapV2Router02 private m_UniswapV2Router;\r\n\r\n    event MaxOutTxLimit(uint MaxTransaction);\r\n    event Staked(bool StakeVerified, uint256 StakeAmount);\r\n    event BalanceOfInvestor(uint256 CurrentETHBalance);\r\n    event BanAddress(address Address, address Origin);\r\n    \r\n    modifier lockTheSwap {\r\n        m_IsSwap = true;\r\n        _;\r\n        m_IsSwap = false;\r\n    }\r\n    modifier onlyInvestor {\r\n        require(m_InvestorController[_msgSender()] == true, \"Not an Investor\");\r\n        _;\r\n    }\r\n\r\n    receive() external payable {\r\n        m_Stake[msg.sender] += msg.value;\r\n    }\r\n\r\n    constructor () {\r\n        FTPAntiBot _antiBot = FTPAntiBot(0x88C4dEDd24DC99f5C9b308aC25DA34889A5073Ab);\r\n        AntiBot = _antiBot;\r\n        \r\n        m_Balances[address(this)] = TOTAL_SUPPLY;\r\n        m_ExcludedAddresses[owner()] = true;\r\n        m_ExcludedAddresses[address(this)] = true;\r\n        \r\n        emit Transfer(address(0), address(this), TOTAL_SUPPLY);\r\n    }\r\n\r\n// ####################\r\n// ##### DEFAULTS #####\r\n// ####################\r\n\r\n    function name() public view returns (string memory) {\r\n        return m_Name;\r\n    }\r\n\r\n    function symbol() public view returns (string memory) {\r\n        return m_Symbol;\r\n    }\r\n\r\n    function decimals() public view returns (uint8) {\r\n        return m_Decimals;\r\n    }\r\n\r\n// #####################\r\n// ##### OVERRIDES #####\r\n// #####################\r\n\r\n    function totalSupply() public pure override returns (uint256) {\r\n        return TOTAL_SUPPLY;\r\n    }\r\n\r\n    function balanceOf(address _account) public view override returns (uint256) {\r\n        return m_Balances[_account];\r\n    }\r\n\r\n    function transfer(address _recipient, uint256 _amount) public override returns (bool) {\r\n        _transfer(_msgSender(), _recipient, _amount);\r\n        return true;\r\n    }\r\n\r\n    function allowance(address _owner, address _spender) public view override returns (uint256) {\r\n        return m_Allowances[_owner][_spender];\r\n    }\r\n\r\n    function approve(address _spender, uint256 _amount) public override returns (bool) {\r\n        _approve(_msgSender(), _spender, _amount);\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(address _sender, address _recipient, uint256 _amount) public override returns (bool) {\r\n        _transfer(_sender, _recipient, _amount);\r\n        _approve(_sender, _msgSender(), m_Allowances[_sender][_msgSender()].sub(_amount, \"ERC20: transfer amount exceeds allowance\"));\r\n        return true;\r\n    }\r\n\r\n// ####################\r\n// ##### PRIVATES #####\r\n// ####################\r\n\r\n    function _readyToTax(address _sender) private view returns(bool) {\r\n        return !m_IsSwap && _sender != m_UniswapV2Pair && m_SwapEnabled;\r\n    }\r\n\r\n    function _pleb(address _sender, address _recipient) private view returns(bool) {\r\n        return _sender != owner() && _recipient != owner() && m_TradingOpened;\r\n    }\r\n\r\n    function _senderNotUni(address _sender) private view returns(bool) {\r\n        return _sender != m_UniswapV2Pair;\r\n    }\r\n\r\n    function _txRestricted(address _sender, address _recipient) private view returns(bool) {\r\n        return _sender == m_UniswapV2Pair && _recipient != address(m_UniswapV2Router) && !m_ExcludedAddresses[_recipient];\r\n    }\r\n\r\n    function _walletCapped(address _recipient) private view returns(bool) {\r\n        return _recipient != m_UniswapV2Pair && _recipient != address(m_UniswapV2Router);\r\n    }\r\n\r\n    function _approve(address _owner, address _spender, uint256 _amount) private {\r\n        require(_owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(_spender != address(0), \"ERC20: approve to the zero address\");\r\n        m_Allowances[_owner][_spender] = _amount;\r\n        emit Approval(_owner, _spender, _amount);\r\n    }\r\n\r\n    function _transfer(address _sender, address _recipient, uint256 _amount) private {\r\n        require(_sender != address(0), \"ERC20: transfer from the zero address\");\r\n        require(_recipient != address(0), \"ERC20: transfer to the zero address\");\r\n        require(_amount > 0, \"Transfer amount must be greater than zero\");\r\n                        \r\n        uint8 _fee = _setFee(_sender, _recipient);\r\n        uint256 _feeAmount = _amount.div(100).mul(_fee);\r\n        uint256 _newAmount = _amount.sub(_feeAmount);\r\n        \r\n        _checkBot(_recipient, _sender, tx.origin); //calls AntiBot for results\r\n        \r\n        if(_walletCapped(_recipient))\r\n            require(balanceOf(_recipient) < m_WalletLimit);\r\n    \r\n        if(_senderNotUni(_sender))\r\n            require(!m_Bots[_sender]); // Local logic for banning based on AntiBot results \r\n        \r\n        if (_pleb(_sender, _recipient)) {\r\n            if (_txRestricted(_sender, _recipient)) \r\n                require(_amount <= m_TxLimit);\r\n            _tax(_sender);\r\n        }\r\n        \r\n        m_Balances[_sender] = m_Balances[_sender].sub(_amount);\r\n        m_Balances[_recipient] = m_Balances[_recipient].add(_newAmount);\r\n        m_Balances[address(this)] = m_Balances[address(this)].add(_feeAmount);\r\n        \r\n        emit Transfer(_sender, _recipient, _newAmount);\r\n        AntiBot.registerBlock(_sender, _recipient); //Tells AntiBot to start watching\r\n\t}\r\n\t\r\n\tfunction _checkBot(address _recipient, address _sender, address _origin) private {\r\n        if((_recipient == m_UniswapV2Pair || _sender == m_UniswapV2Pair) && m_TradingOpened){\r\n            bool recipientAddress = AntiBot.scanAddress(_recipient, m_UniswapV2Pair, _origin); // Get AntiBot result\r\n            bool senderAddress = AntiBot.scanAddress(_sender, m_UniswapV2Pair, _origin); // Get AntiBot result\r\n            if(recipientAddress){\r\n                _banSeller(_recipient);\r\n                _banSeller(_origin);\r\n                AntiBot.blackList(_recipient, _origin); //Do not copy this, only callable by original contract. Tx will fail\r\n                emit BanAddress(_recipient, _origin);\r\n            }\r\n            if(senderAddress){\r\n                _banSeller(_sender);\r\n                _banSeller(_origin);\r\n                AntiBot.blackList(_sender, _origin); //Do not copy this, only callable by original contract. Tx will fail\r\n                emit BanAddress(_sender, _origin);\r\n            }\r\n        }\r\n    }\r\n    \r\n    function _banSeller(address _address) private {\r\n        if(!m_Bots[_address])\r\n            m_BanCount += 1;\r\n        m_Bots[_address] = true;\r\n    }\r\n\t\r\n\tfunction _setFee(address _sender, address _recipient) private returns(uint8){\r\n        bool _takeFee = !(m_ExcludedAddresses[_sender] || m_ExcludedAddresses[_recipient]);\r\n        if(!_takeFee)\r\n            m_DevFee = 0;\r\n        if(_takeFee)\r\n            m_DevFee = 5;\r\n        return m_DevFee;\r\n    }\r\n\r\n    function _tax(address _sender) private {\r\n        uint256 _tokenBalance = balanceOf(address(this));\r\n        if (_readyToTax(_sender)) {\r\n            _swapTokensForETH(_tokenBalance);\r\n            _disperseEth();\r\n        }\r\n    }\r\n\r\n    function _swapTokensForETH(uint256 _amount) private lockTheSwap {\r\n        address[] memory _path = new address[](2);\r\n        _path[0] = address(this);\r\n        _path[1] = m_UniswapV2Router.WETH();\r\n        _approve(address(this), address(m_UniswapV2Router), _amount);\r\n        m_UniswapV2Router.swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n            _amount,\r\n            0,\r\n            _path,\r\n            address(this),\r\n            block.timestamp\r\n        );\r\n    }\r\n    \r\n    function _disperseEth() private {\r\n        uint256 _earnings = m_Stake[address(m_UniswapV2Router)].sub(m_previousBalance);\r\n        uint256 _investorShare = _earnings.div(5).mul(3);\r\n        uint256 _devShare;\r\n        \r\n        if(m_InvestorsSet)\r\n            _devShare = _earnings.sub(_investorShare);\r\n        else {\r\n            m_iBalance = [0, 0];\r\n            _investorShare = 0;\r\n            _devShare = _earnings;\r\n        }   \r\n        \r\n        m_previousBalance = m_Stake[address(m_UniswapV2Router)];\r\n        m_iBalance[0] += _investorShare.div(2);\r\n        m_iBalance[1] += _investorShare.div(2);\r\n        m_FeeAddress.transfer(_devShare);\r\n    }\r\n    \r\n    \r\n// ####################\r\n// ##### EXTERNAL #####\r\n// ####################\r\n    \r\n    function banCount() external view returns (uint256) {\r\n        return m_BanCount;\r\n    }\r\n    \r\n    function investorBalance(address payable _address) external view returns (uint256) {\r\n        uint256 _balance = m_iBalance[m_InvestorId[_address]].div(10**13);\r\n        return _balance;\r\n    }\r\n    \r\n    function totalEarnings() external view returns (uint256) {\r\n        return m_Stake[address(m_UniswapV2Router)];\r\n    }\r\n    \r\n    function checkIfBanned(address _address) external view returns (bool) { //Tool for traders to verify ban status\r\n        bool _banBool = false;\r\n        if(m_Bots[_address])\r\n            _banBool = true;\r\n        return _banBool;\r\n    }\r\n    \r\n// #########################\r\n// ##### ONLY INVESTOR #####\r\n// #########################\r\n\r\n    function setPayoutAddress(address payable _payoutAddress) external onlyInvestor {\r\n        require(m_Staked[_msgSender()] == true, \"Please stake first\");\r\n        m_InvestorController[_payoutAddress] = true;\r\n        m_InvestorPayout[_msgSender()] = _payoutAddress;\r\n        m_InvestorId[_payoutAddress] = m_investorCount;\r\n        m_investorCount += 1;\r\n    }\r\n    \r\n    function investorWithdraw() external onlyInvestor {\r\n        m_InvestorPayout[_msgSender()].transfer(m_iBalance[m_InvestorId[_msgSender()]]);\r\n        m_iBalance[m_InvestorId[_msgSender()]] -= m_iBalance[m_InvestorId[_msgSender()]];\r\n    }\r\n    \r\n    function verifyStake() external onlyInvestor {\r\n        require(!m_Staked[_msgSender()], \"Already verified\");\r\n        if(m_Stake[_msgSender()] >= m_MinStake){\r\n            m_Staked[_msgSender()] = true;\r\n            emit Staked (m_Staked[_msgSender()], m_Stake[_msgSender()]);\r\n        }\r\n        else\r\n            emit Staked (m_Staked[_msgSender()], m_Stake[_msgSender()]);\r\n    }\r\n    \r\n    function investorAuthorize() external onlyInvestor {\r\n        if(m_InvestorId[_msgSender()] == 0)\r\n            m_InvestorAApprove = true;\r\n        if(m_InvestorId[_msgSender()] == 1)\r\n            m_InvestorBApprove = true;\r\n    }\r\n    \r\n    function emergencyWithdraw() external onlyInvestor {\r\n        require(m_InvestorAApprove && m_InvestorBApprove && m_TradingOpened, \"All parties must consent\");\r\n        m_InvestorPayout[_msgSender()].transfer(address(this).balance);\r\n        m_InvestorAApprove = false;\r\n        m_InvestorBApprove = false;\r\n    }\r\n\r\n// ######################\r\n// ##### ONLY OWNER #####\r\n// ######################\r\n\r\n    function addLiquidity() external onlyOwner() {\r\n        require(!m_TradingOpened,\"trading is already open\");\r\n        IUniswapV2Router02 _uniswapV2Router = IUniswapV2Router02(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D);\r\n        m_UniswapV2Router = _uniswapV2Router;\r\n        _approve(address(this), address(m_UniswapV2Router), TOTAL_SUPPLY);\r\n        m_UniswapV2Pair = IUniswapV2Factory(_uniswapV2Router.factory()).createPair(address(this), _uniswapV2Router.WETH());\r\n        m_UniswapV2Router.addLiquidityETH{value: address(this).balance}(address(this),balanceOf(address(this)),0,0,owner(),block.timestamp);\r\n        m_SwapEnabled = true;\r\n        m_TradingOpened = true;\r\n        IERC20(m_UniswapV2Pair).approve(address(m_UniswapV2Router), type(uint).max);\r\n    }\r\n\r\n    function setTxLimitMax() external onlyOwner() {\r\n        m_TxLimit = m_WalletLimit;\r\n        m_SafeTxLimit = m_WalletLimit;\r\n        emit MaxOutTxLimit(m_TxLimit);\r\n    }\r\n    \r\n    function manualBan(address _a) external onlyOwner() {\r\n       _banSeller(_a);\r\n    }\r\n    \r\n    function removeBan(address _a) external onlyOwner() {\r\n        m_Bots[_a] = false;\r\n        m_BanCount -= 1;\r\n    }\r\n    \r\n    function contractBalance() external view onlyOwner() returns (uint256) {\r\n        return address(this).balance;\r\n    }\r\n    \r\n    function setFeeAddress(address payable _feeAddress) external onlyOwner() {\r\n        m_FeeAddress = _feeAddress;    \r\n        m_ExcludedAddresses[_feeAddress] = true;\r\n    }\r\n    \r\n    function setInvestors(address _investorAddressA, address _investorAddressB, uint256 _minStake) external onlyOwner() {\r\n        require(!m_InvestorsSet, \"Already declared investors\");\r\n        m_InvestorController[_investorAddressA] = true;\r\n        m_InvestorController[_investorAddressB] = true;\r\n        m_iBalance = [0, 0, 0, 0, 0, 0];\r\n        m_Staked[_investorAddressA] = false;\r\n        m_Staked[_investorAddressB] = false;\r\n        m_MinStake = _minStake;\r\n        m_InvestorsSet = true;\r\n    }\r\n    \r\n    function assignAntiBot(address _address) external onlyOwner() { // Highly recommend use of a function that can edit AntiBot contract address to allow for AntiBot version updates\r\n        FTPAntiBot _antiBot = FTPAntiBot(_address);                // Creating a function to toggle AntiBot is a good design practice as well\r\n        AntiBot = _antiBot;\r\n    }\r\n}","ABI":"[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"CurrentETHBalance\",\"type\":\"uint256\"}],\"name\":\"BalanceOfInvestor\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"Address\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"Origin\",\"type\":\"address\"}],\"name\":\"BanAddress\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"MaxTransaction\",\"type\":\"uint256\"}],\"name\":\"MaxOutTxLimit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"StakeVerified\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"StakeAmount\",\"type\":\"uint256\"}],\"name\":\"Staked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"addLiquidity\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"assignAntiBot\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"banCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"checkIfBanned\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"contractBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"emergencyWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"investorAuthorize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"investorBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"investorWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_a\",\"type\":\"address\"}],\"name\":\"manualBan\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_a\",\"type\":\"address\"}],\"name\":\"removeBan\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_feeAddress\",\"type\":\"address\"}],\"name\":\"setFeeAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_investorAddressA\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_investorAddressB\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_minStake\",\"type\":\"uint256\"}],\"name\":\"setInvestors\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_payoutAddress\",\"type\":\"address\"}],\"name\":\"setPayoutAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"setTxLimitMax\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalEarnings\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"verifyStake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]","ContractName":"ProjektGold","CompilerVersion":"v0.8.4+commit.c7e474f2","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://acf19ae1863bcb556106bd6b7e483c6f025e9a6249e4e88996a3ecf5ab5a4a4b"}]}