{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"/C/Users/carme/OneDrive/Documents/Crypto/projects/ethereum/Koji_Perm/contracts/KojiCrowdSale.sol\": {\r\n      \"content\": \"/*\\r\\n        \\r\\n                                          ,╓╦▄▄▄█████████████▄▄╦╖,\\r\\n                                   ,╓▄████████████████████████████████▄w,\\r\\n                              ,╓▄██████████████████████████████████████████▄w,\\r\\n                           ╓▄███████████████████████████████████████████████████w\\r\\n                        ╔███████████████████████████████████████████████▓▓███████▓█▄\\r\\n                     ╓█████████████████████████████████████████████████▓███▓██▓▓▓▓▓▓▓█w\\r\\n                   ▄█▓▓▓▓▓▓██████▓██▓▓███▓▓▓▓▓▓▓▓▓█████▓▓▓▓▓▓▓▓█▒▀╛'²▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓█▄\\r\\n                 ▄▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▀` \\\\ ╓╜▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▄\\r\\n               g▓▓▓▓▓▓▓▓▓▓▌]╢╢╢╢╣▒▒▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▀\\\"`╓╫   ╓╩▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▄\\r\\n             ╓█▓▓▓▓▓▓▓▓▓▓▓█`╙▓╢╢╣╢╢╢╢╢╢╢╢╢╣▓▓▓▓▓▓▓▓▓▓▓▓▓▀╜,g▓▓▌╙╖▀▓`]▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓W\\r\\n            ▄▓▓▓▓▓▓▓▓▓▓▓▓▓▓▌─¿'▓╢╢╢╢╢╢╢╢╢╢╢╢╢╢╢╢▓▀▀▓█▀`,φ▓▓▓▓▓▓▓▓▓▓ ]▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓█\\r\\n          ,█▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓ ╣ ,~╙▓╢╢╢╢╢╢╢╣╣╣╣╣╢╣▓╜ ╓@╙▀▓▓▓▓▓▓▓▓▓▓▓L]▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓,\\r\\n         ┌▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓└  `\\\"Ç~╙▓╢╢╢╢╢╢╢╣╢▓`╓▓▓▓w     ▀▀▓▓▓▓▓▓[ ▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓L\\r\\n        ╒▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▌ (:]w`\\\\▒,\\\"▓╢╢▓▓\\\"╔▓▓▓▓▓▓▓▓▓,      '╨▓▓▌ ▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▄\\r\\n       ╒▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓U',²`╓╙.▒\\\"╦≥ ╨▓▓▓▓▓▓▓▓▓▓▓▓▓▓▄        ` ▓▓▓▓▓▓▓╣▓▓╢▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓L\\r\\n       ▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓W\\\\ ╙¡Ü╗*▒░,╙╨╖─\\\"▀▓▓▓▓▓▓▓▓▓▓▓▓N,         \\\"▀▓╣╣╣╣▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓\\r\\n      ▓╣╣╢╢▓╣╣╬▓▓╣╣╢╢▓╣╢╢╣▓╣▓▓╣╢▓Ç. '` ▒H`╚▒»╙╝╦▒╥,▀▓▓▓▓▓╣▓▓▓▓▓╖           \\\"▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓\\r\\n     ╒▓▓╣▓▓╣╢╣╣╣╢╬╣╣╢╣╣╢╣╢╣╢╣╣╣╣╣▓▓Ç ⁿ╕    \\\"w║▓Ü╢▒▓╥Z═Ç▀▓▓╣▓▓▓▓▓▓▓M═ W,,,     `▀▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓L\\r\\n     ▓▓▓▓▓▓▓╢▓▓╣╢▓▓▓▓╣╢╣╣▓▓╢▓▓▓▓▓▓▓╣▓@`~ r,╨  `\\\\[cN╗\\\"╟▓▓▓ⁿ«▓▓▓╢╢╢▓▓B [         ```╙▓╣╢╢╣╢╢╢╣╢╣╣╢╢╣╢╢╢╢▓\\r\\n     ▓▓▓▓▓▓╣▓▓▓▓▓▓▓▓▓╢▓▓▓▓▓▓▓▓▓▓▓▓▓╣▓@╦  ]m\\\"`,.╜H\\\"╙H╖▒▓▓▓▓▓R╩Ö▓╣▓▓╣Ü ╟▓\\\"\\\"\\\"\\\"\\\"\\\"\\\"\\\"\\\"\\\"``` ╙▓╢╢╢╢╢╢╢╢╢╢╢╢╢╢╢╢\\r\\n    ]▓▓╢╣╢╣▒╢╢╢╢▓╢▒╢╢╢╢╢╢╣╢╣▓▓▓╣╢╢▓▓▓╝▓▓▓M╣╣╖\\\"=∩╖   ╖▀║▄╓╗▄Ö▓▓▓▓▓▓▓ÑW╟▓▓╖              J▓╣╢╢╢╢╢╣╢╢╢╢╢╣╢╡\\r\\n    ╟╢╣╣╢╣╢╢╢╢▒▒▒╢╢╢╢▒╢╢╢╣╢╢╣╣╢╢╢╣╢▓µ╣▓▓▓k\\\"╖ ]╝~>  â▓▓▓▓▓▓▓╬▓▓▓@▓▓▓▓▓▓▓▓▓▓▄,,.⌐══^\\\"`     .▓╢╣╢╢╢╢╢╢╢╣╢╣╣\\r\\n    ╟▒▒╣▒▒╢▒▒▒▒▒▒▒▒▒▒╢╢╣╢╢╣╣╣╣╣╣╢╢▓║▓░╙▓╦╣▐▄▄▄,   φ▓▄▓▀▀Θ╫╙▓▄▓▓▓▀▓▓▓▀▓▓▓█▓▓▓▓▓█▓▄╥╥ç^`    ╓▒▒▒▒▒▒▒▒▒▒▒▒▒\\r\\n    ╟╢▒╢╢╢╢╢╢╢▒▒╢╢╢╣╢╢╢╢╢╢╢╢╢╢╢╢╢╢╨╨▀~`─╗,▓▓▄p╜╟▓╙▓▓▓▄▄▓▓▓▓▓▓▀`▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒\\r\\n    ╚╣╢╢╢╢╢╣╢╢╢╢╢╢╣╢╢╣╢╢╢╢╢╢╢╢╢╢╢╣&▓%▓▓▓▓▓▓▓▓▓▓▒╣╢╣▓\\\"║▓▓▀▓▓▓▓╬▓▓▓▓▓╣▓▓▓▀▓▓▓▓▓▓▓▓▓▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▌\\r\\n    j╢╣╣╢╢╢╢╢╢╣╢╢╢╢╢╣╣╢╢╢╣╢╣╢╣╢╢╣╣╣▒Ü╣┐╛\\\"\\\"  ╫▓▓▓▓▓█▒║\\\"╓ ╒▐▓▓▓▓▓▒╢╢▓▓▓╢║▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒[\\r\\n     ╫╢╣╢╢╢╢╣╣╣╣╣▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒@▒▒[    ╘╢▓▓▓▓▓▓▓╜,▄▌▓▓▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒\\r\\n     ▐▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒[▒; ▒    ╙╣╢▓▓▓▓▓▓▓▓▓▓▓▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒░░░░░░░░░░░░░░░░░░░░░░░╝\\r\\n      ╣▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒║@M ⁿ     ╚╣╣▓▓▓▓▓▓▓▓▓▓▒▒▒▒▒▒░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░\\r\\n      ╘▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒ ░ ]╥╥gq@▓▓▓▓▓▓▓▓▓▓▓▓░░░░░░░░░░░░░░░░░░░░░░░░ ░░ `   '         ╛\\r\\n       ╚▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒░░░░░░░░▒ ▒ ▒░▒∩L   ▌`\\\"▓▓▓▓░░░░░░░░░'░░░                               ╜\\r\\n        ╟░░░░░░░░░░░░░░░░░░░░░░░░░░░░▒]▒ ▒▒▒┘╙Φ²\\\"`\\\",╙▓▓▓░                                          ▒\\r\\n         ╟░░░░░░░░░░░░░░             `[─ ▒╜╓┐  ╟┴,▓▓ ╙▓▓▓                                         ▒\\r\\n          ╙░                            `∩ ░[  ]M▓▓╢╝ ╥╙▓▓                                       ▒\\r\\n           └░                          ^╙     ╓]╦`╔╜╓┐ L`╟▓▄╖                                   `\\r\\n             ║                     `  ````  ,╢Üg╙▓▄╗▄▄▓▓▓▓▓@▓                                 ░\\r\\n              ╙@Ñ▓▓@@@@gggm@╣@@▓@gr   mrr,`╓,,,╓╖,, , :──, ╔█▓▄,  ,,,,╓╓╓╓╓╓╓╖╖,,   ,,,,,╓,,,\\r\\n                ╙╜╜╙╜╜╜╜╙░░▄▄╜''`'─╧▓╢  /         ░⌡ w╓▄▄▄ ▐▓▓▓`,   ,        ,,            ┘\\r\\n                  ╙▓▓╢╢╣▒▓▒███▓███▀▀▀▀█▓▓▀▓▓▓█▀▀█████`▀▀▄█▓███████▒▓█▀▀▒▀╜▀▀▀▓█╜▓▓╣▓▓▓▒[h╜\\r\\n                    ╙▓]╬▓▄▓███▄▄▓▄▄▄▓▓█▓▓▓▓▓▓▓▓▓█▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓██▓▓▓▓▓▓▀▓█ ▀▒▓██▓`\\r\\n                       ╙╢▒▒██▒░▒░▒▒▒░░░░▒▒▒▒▒▒▒▒▒▒▒▒░▒▒▒▒▒▒▒▒▒▒▒░░░░▒░░░░░░░░░░░░░░▒╝\\r\\n                          ╚▓█╣╣╫╣╣╣╬╬@╬╣▓╣╫▒▓╨╜╙╜║╜╨╜╙╢╜▒▒▒▒▒╢▒▒░╙╜╜╙╙╙╙╙╙╜*└─░▒╢╜`\\r\\n                             \\\"╩▓╢╢╢╣╢╢╣╜▓██▓@░▒░░▒▒▒▒▒╖╓░░╓≤pHU▒▒╨╜░╙╝╨╩╜` ▒╜╜\\\"\\r\\n                                 `╙▀▓╬▒ ▓█╣▓▓▓█████▓▒╠╙  '░,╙░`   ` *╜^ ╚╜`\\r\\n                                       `\\\"╨▓▓▓▓╜▀███▓▄▒,╓╖▒░╓╖░,,▒╩╨╙`\\r\\n                                                  ```````\\r\\n                    \\\"The universe is a big place, until one day it lands on your doorstep\\\"\\r\\n    \\r\\n            KOJI Public Sale {                                               koji.earth properties {\\r\\n                400 B Hardcap                                                   First NFT Collectible Comic \\r\\n                Refundable if softcap not met                                   1% to Charity         \\r\\n                Tokens can't be withdrawn until LP added                        Deflationary\\r\\n                https://publicsale.koji.earth                                   Public Ambassador\\r\\n            }                                                                   Doxxed Team\\r\\n                                                                            }\\r\\n             Hi Mom!\\r\\n     \\r\\n*/\\r\\npragma solidity ^0.5.0;\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/crowdsale/Crowdsale.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/crowdsale/emission/AllowanceCrowdsale.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/crowdsale/validation/TimedCrowdsale.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/crowdsale/validation/CappedCrowdsale.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/crowdsale/distribution/RefundableCrowdsale.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/crowdsale/distribution/FinalizableCrowdsale.sol\\\";   \\r\\nimport \\\"@openzeppelin/contracts/crowdsale/distribution/PostDeliveryCrowdsale.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/access/roles/CapperRole.sol\\\";\\r\\n\\r\\ncontract KojiCrowdSale is Crowdsale, AllowanceCrowdsale, TimedCrowdsale, FinalizableCrowdsale, RefundableCrowdsale, PostDeliveryCrowdsale, CappedCrowdsale, CapperRole {  \\r\\n    \\r\\n   using SafeMath for uint256;\\r\\n\\r\\n    mapping(address => uint256) private _contributions;\\r\\n    mapping(address => uint256) private _caps;\\r\\n    \\r\\n    uint256 private _individualDefaultCap;\\r\\n     \\r\\n    \\r\\n    constructor(\\r\\n    uint256 _rate,           //000000003 = 3 billion per eth\\r\\n    address payable _wallet, //where the eth goes\\r\\n    IERC20 _token,           //token contract address\\r\\n    address _tokenWallet,    //address holding the tokens\\r\\n    uint256 _openingTime,    //start time in unix time\\r\\n    uint256 _closingTime,    //end time in unix time\\r\\n    uint256 individualCap,   //per wallet cap in wei\\r\\n    uint256 _softcap,        //minimum goal \\r\\n    uint256 _cap             //total sale cap in wei   \\r\\n  ) \\r\\n        \\r\\n    public \\r\\n    AllowanceCrowdsale(_tokenWallet)\\r\\n    Crowdsale(_rate, _wallet, _token)\\r\\n    TimedCrowdsale(_openingTime, _closingTime)\\r\\n    FinalizableCrowdsale()\\r\\n    RefundableCrowdsale(_softcap)\\r\\n    PostDeliveryCrowdsale(_softcap)\\r\\n    CappedCrowdsale(_cap) \\r\\n    {\\r\\n    _individualDefaultCap = individualCap;\\r\\n    }\\r\\n  \\r\\n    \\r\\n    address payable owner = msg.sender;\\r\\n\\r\\n    modifier onlyOwner() {\\r\\n        require(msg.sender == owner);\\r\\n    _;\\r\\n    }\\r\\n    \\r\\n    function withdrawUnsoldTokens(address tokenAddress) onlyOwner public\\r\\n    {\\r\\n        require(msg.sender == owner);\\r\\n        ERC20 mytoken = ERC20(tokenAddress);\\r\\n        uint256 unsold = mytoken.balanceOf(address(this));\\r\\n        mytoken.transfer(owner, unsold);\\r\\n    }\\r\\n    \\r\\n\\r\\n    /**\\r\\n     * @dev Sets a specific beneficiary's maximum contribution.\\r\\n     * @param beneficiary Address to be capped\\r\\n     * @param cap Wei limit for individual contribution\\r\\n     */\\r\\n    function setCap(address beneficiary, uint256 cap) external onlyCapper {\\r\\n        _caps[beneficiary] = cap;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the cap of a specific beneficiary.\\r\\n     * @param beneficiary Address whose cap is to be checked\\r\\n     * @return Current cap for individual beneficiary\\r\\n     */\\r\\n    function getCap(address beneficiary) public view returns (uint256) {\\r\\n        uint256 cap = _caps[beneficiary];\\r\\n        if (cap == 0) {\\r\\n            cap = _individualDefaultCap;\\r\\n        }\\r\\n        return cap;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the amount contributed so far by a specific beneficiary.\\r\\n     * @param beneficiary Address of contributor\\r\\n     * @return Beneficiary contribution so far\\r\\n     */\\r\\n    function getContribution(address beneficiary) public view returns (uint256) {\\r\\n        return _contributions[beneficiary];\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Extend parent behavior requiring purchase to respect the beneficiary's funding cap.\\r\\n     * @param beneficiary Token purchaser\\r\\n     * @param weiAmount Amount of wei contributed\\r\\n     */\\r\\n    function _preValidatePurchase(address beneficiary, uint256 weiAmount) internal view {\\r\\n        super._preValidatePurchase(beneficiary, weiAmount);\\r\\n        // solhint-disable-next-line max-line-length\\r\\n        require(_contributions[beneficiary].add(weiAmount) <= getCap(beneficiary), \\\"KOJISale: wallet cap exceeded\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Extend parent behavior to update beneficiary contributions.\\r\\n     * @param beneficiary Token purchaser\\r\\n     * @param weiAmount Amount of wei contributed\\r\\n     */\\r\\n    function _updatePurchasingState(address beneficiary, uint256 weiAmount) internal {\\r\\n        super._updatePurchasingState(beneficiary, weiAmount);\\r\\n        _contributions[beneficiary] = _contributions[beneficiary].add(weiAmount);\\r\\n      }\\r\\n\\r\\n    \\r\\n    \\r\\n   \\r\\n}\\r\\n\\r\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/Roles.sol\": {\r\n      \"content\": \"pragma solidity ^0.5.0;\\n\\n/**\\n * @title Roles\\n * @dev Library for managing addresses assigned to a Role.\\n */\\nlibrary Roles {\\n    struct Role {\\n        mapping (address => bool) bearer;\\n    }\\n\\n    /**\\n     * @dev Give an account access to this role.\\n     */\\n    function add(Role storage role, address account) internal {\\n        require(!has(role, account), \\\"Roles: account already has role\\\");\\n        role.bearer[account] = true;\\n    }\\n\\n    /**\\n     * @dev Remove an account's access to this role.\\n     */\\n    function remove(Role storage role, address account) internal {\\n        require(has(role, account), \\\"Roles: account does not have role\\\");\\n        role.bearer[account] = false;\\n    }\\n\\n    /**\\n     * @dev Check if an account has this role.\\n     * @return bool\\n     */\\n    function has(Role storage role, address account) internal view returns (bool) {\\n        require(account != address(0), \\\"Roles: account is the zero address\\\");\\n        return role.bearer[account];\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/roles/CapperRole.sol\": {\r\n      \"content\": \"pragma solidity ^0.5.0;\\n\\nimport \\\"../Roles.sol\\\";\\n\\ncontract CapperRole {\\n    using Roles for Roles.Role;\\n\\n    event CapperAdded(address indexed account);\\n    event CapperRemoved(address indexed account);\\n\\n    Roles.Role private _cappers;\\n\\n    constructor () internal {\\n        _addCapper(msg.sender);\\n    }\\n\\n    modifier onlyCapper() {\\n        require(isCapper(msg.sender), \\\"CapperRole: caller does not have the Capper role\\\");\\n        _;\\n    }\\n\\n    function isCapper(address account) public view returns (bool) {\\n        return _cappers.has(account);\\n    }\\n\\n    function addCapper(address account) public onlyCapper {\\n        _addCapper(account);\\n    }\\n\\n    function renounceCapper() public {\\n        _removeCapper(msg.sender);\\n    }\\n\\n    function _addCapper(address account) internal {\\n        _cappers.add(account);\\n        emit CapperAdded(account);\\n    }\\n\\n    function _removeCapper(address account) internal {\\n        _cappers.remove(account);\\n        emit CapperRemoved(account);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/crowdsale/Crowdsale.sol\": {\r\n      \"content\": \"pragma solidity ^0.5.0;\\n\\nimport \\\"../token/ERC20/IERC20.sol\\\";\\nimport \\\"../math/SafeMath.sol\\\";\\nimport \\\"../token/ERC20/SafeERC20.sol\\\";\\nimport \\\"../utils/ReentrancyGuard.sol\\\";\\n\\n/**\\n * @title Crowdsale\\n * @dev Crowdsale is a base contract for managing a token crowdsale,\\n * allowing investors to purchase tokens with ether. This contract implements\\n * such functionality in its most fundamental form and can be extended to provide additional\\n * functionality and/or custom behavior.\\n * The external interface represents the basic interface for purchasing tokens, and conforms\\n * the base architecture for crowdsales. It is *not* intended to be modified / overridden.\\n * The internal interface conforms the extensible and modifiable surface of crowdsales. Override\\n * the methods to add functionality. Consider using 'super' where appropriate to concatenate\\n * behavior.\\n */\\ncontract Crowdsale is ReentrancyGuard {\\n    using SafeMath for uint256;\\n    using SafeERC20 for IERC20;\\n\\n    // The token being sold\\n    IERC20 private _token;\\n\\n    // Address where funds are collected\\n    address payable private _wallet;\\n\\n    // How many token units a buyer gets per wei.\\n    // The rate is the conversion between wei and the smallest and indivisible token unit.\\n    // So, if you are using a rate of 1 with a ERC20Detailed token with 3 decimals called TOK\\n    // 1 wei will give you 1 unit, or 0.001 TOK.\\n    uint256 private _rate;\\n\\n    // Amount of wei raised\\n    uint256 private _weiRaised;\\n\\n    /**\\n     * Event for token purchase logging\\n     * @param purchaser who paid for the tokens\\n     * @param beneficiary who got the tokens\\n     * @param value weis paid for purchase\\n     * @param amount amount of tokens purchased\\n     */\\n    event TokensPurchased(address indexed purchaser, address indexed beneficiary, uint256 value, uint256 amount);\\n\\n    /**\\n     * @param rate Number of token units a buyer gets per wei\\n     * @dev The rate is the conversion between wei and the smallest and indivisible\\n     * token unit. So, if you are using a rate of 1 with a ERC20Detailed token\\n     * with 3 decimals called TOK, 1 wei will give you 1 unit, or 0.001 TOK.\\n     * @param wallet Address where collected funds will be forwarded to\\n     * @param token Address of the token being sold\\n     */\\n    constructor (uint256 rate, address payable wallet, IERC20 token) public {\\n        require(rate > 0, \\\"Crowdsale: rate is 0\\\");\\n        require(wallet != address(0), \\\"Crowdsale: wallet is the zero address\\\");\\n        require(address(token) != address(0), \\\"Crowdsale: token is the zero address\\\");\\n\\n        _rate = rate;\\n        _wallet = wallet;\\n        _token = token;\\n    }\\n\\n    /**\\n     * @dev fallback function ***DO NOT OVERRIDE***\\n     * Note that other contracts will transfer funds with a base gas stipend\\n     * of 2300, which is not enough to call buyTokens. Consider calling\\n     * buyTokens directly when purchasing tokens from a contract.\\n     */\\n    function () external payable {\\n        buyTokens(msg.sender);\\n    }\\n\\n    /**\\n     * @return the token being sold.\\n     */\\n    function token() public view returns (IERC20) {\\n        return _token;\\n    }\\n\\n    /**\\n     * @return the address where funds are collected.\\n     */\\n    function wallet() public view returns (address payable) {\\n        return _wallet;\\n    }\\n\\n    /**\\n     * @return the number of token units a buyer gets per wei.\\n     */\\n    function rate() public view returns (uint256) {\\n        return _rate;\\n    }\\n\\n    /**\\n     * @return the amount of wei raised.\\n     */\\n    function weiRaised() public view returns (uint256) {\\n        return _weiRaised;\\n    }\\n\\n    /**\\n     * @dev low level token purchase ***DO NOT OVERRIDE***\\n     * This function has a non-reentrancy guard, so it shouldn't be called by\\n     * another `nonReentrant` function.\\n     * @param beneficiary Recipient of the token purchase\\n     */\\n    function buyTokens(address beneficiary) public nonReentrant payable {\\n        uint256 weiAmount = msg.value;\\n        _preValidatePurchase(beneficiary, weiAmount);\\n\\n        // calculate token amount to be created\\n        uint256 tokens = _getTokenAmount(weiAmount);\\n\\n        // update state\\n        _weiRaised = _weiRaised.add(weiAmount);\\n\\n        _processPurchase(beneficiary, tokens);\\n        emit TokensPurchased(msg.sender, beneficiary, weiAmount, tokens);\\n\\n        _updatePurchasingState(beneficiary, weiAmount);\\n\\n        _forwardFunds();\\n        _postValidatePurchase(beneficiary, weiAmount);\\n    }\\n\\n    /**\\n     * @dev Validation of an incoming purchase. Use require statements to revert state when conditions are not met.\\n     * Use `super` in contracts that inherit from Crowdsale to extend their validations.\\n     * Example from CappedCrowdsale.sol's _preValidatePurchase method:\\n     *     super._preValidatePurchase(beneficiary, weiAmount);\\n     *     require(weiRaised().add(weiAmount) <= cap);\\n     * @param beneficiary Address performing the token purchase\\n     * @param weiAmount Value in wei involved in the purchase\\n     */\\n    function _preValidatePurchase(address beneficiary, uint256 weiAmount) internal view {\\n        require(beneficiary != address(0), \\\"Crowdsale: beneficiary is the zero address\\\");\\n        require(weiAmount != 0, \\\"Crowdsale: weiAmount is 0\\\");\\n    }\\n\\n    /**\\n     * @dev Validation of an executed purchase. Observe state and use revert statements to undo rollback when valid\\n     * conditions are not met.\\n     * @param beneficiary Address performing the token purchase\\n     * @param weiAmount Value in wei involved in the purchase\\n     */\\n    function _postValidatePurchase(address beneficiary, uint256 weiAmount) internal view {\\n        // solhint-disable-previous-line no-empty-blocks\\n    }\\n\\n    /**\\n     * @dev Source of tokens. Override this method to modify the way in which the crowdsale ultimately gets and sends\\n     * its tokens.\\n     * @param beneficiary Address performing the token purchase\\n     * @param tokenAmount Number of tokens to be emitted\\n     */\\n    function _deliverTokens(address beneficiary, uint256 tokenAmount) internal {\\n        _token.safeTransfer(beneficiary, tokenAmount);\\n    }\\n\\n    /**\\n     * @dev Executed when a purchase has been validated and is ready to be executed. Doesn't necessarily emit/send\\n     * tokens.\\n     * @param beneficiary Address receiving the tokens\\n     * @param tokenAmount Number of tokens to be purchased\\n     */\\n    function _processPurchase(address beneficiary, uint256 tokenAmount) internal {\\n        _deliverTokens(beneficiary, tokenAmount);\\n    }\\n\\n    /**\\n     * @dev Override for extensions that require an internal state to check for validity (current user contributions,\\n     * etc.)\\n     * @param beneficiary Address receiving the tokens\\n     * @param weiAmount Value in wei involved in the purchase\\n     */\\n    function _updatePurchasingState(address beneficiary, uint256 weiAmount) internal {\\n        // solhint-disable-previous-line no-empty-blocks\\n    }\\n\\n    /**\\n     * @dev Override to extend the way in which ether is converted to tokens.\\n     * @param weiAmount Value in wei to be converted into tokens\\n     * @return Number of tokens that can be purchased with the specified _weiAmount\\n     */\\n    function _getTokenAmount(uint256 weiAmount) internal view returns (uint256) {\\n        return weiAmount.mul(_rate);\\n    }\\n\\n    /**\\n     * @dev Determines how ETH is stored/forwarded on purchases.\\n     */\\n    function _forwardFunds() internal {\\n        _wallet.transfer(msg.value);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/crowdsale/distribution/FinalizableCrowdsale.sol\": {\r\n      \"content\": \"pragma solidity ^0.5.0;\\n\\nimport \\\"../../math/SafeMath.sol\\\";\\nimport \\\"../validation/TimedCrowdsale.sol\\\";\\n\\n/**\\n * @title FinalizableCrowdsale\\n * @dev Extension of TimedCrowdsale with a one-off finalization action, where one\\n * can do extra work after finishing.\\n */\\ncontract FinalizableCrowdsale is TimedCrowdsale {\\n    using SafeMath for uint256;\\n\\n    bool private _finalized;\\n\\n    event CrowdsaleFinalized();\\n\\n    constructor () internal {\\n        _finalized = false;\\n    }\\n\\n    /**\\n     * @return true if the crowdsale is finalized, false otherwise.\\n     */\\n    function finalized() public view returns (bool) {\\n        return _finalized;\\n    }\\n\\n    /**\\n     * @dev Must be called after crowdsale ends, to do some extra finalization\\n     * work. Calls the contract's finalization function.\\n     */\\n    function finalize() public {\\n        require(!_finalized, \\\"FinalizableCrowdsale: already finalized\\\");\\n        //require(hasClosed(), \\\"FinalizableCrowdsale: not closed\\\");\\n\\n        _finalized = true;\\n\\n        _finalization();\\n        emit CrowdsaleFinalized();\\n    }\\n\\n    /**\\n     * @dev Can be overridden to add finalization logic. The overriding function\\n     * should call super._finalization() to ensure the chain of finalization is\\n     * executed entirely.\\n     */\\n    function _finalization() internal {\\n        // solhint-disable-previous-line no-empty-blocks\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/crowdsale/distribution/PostDeliveryCrowdsale.sol\": {\r\n      \"content\": \"pragma solidity ^0.5.0;\\n\\nimport \\\"../validation/TimedCrowdsale.sol\\\";\\nimport \\\"./FinalizableCrowdsale.sol\\\";\\nimport \\\"../../math/SafeMath.sol\\\";\\nimport \\\"../../ownership/Secondary.sol\\\";\\nimport \\\"../../token/ERC20/IERC20.sol\\\";\\n\\n/**\\n * @title PostDeliveryCrowdsale\\n * @dev Crowdsale that locks tokens from withdrawal until it ends.\\n */\\ncontract PostDeliveryCrowdsale is TimedCrowdsale, FinalizableCrowdsale {\\n    using SafeMath for uint256;\\n\\n    // minimum amount of funds to be raised in weis\\n    uint256 private _goal;\\n\\n    mapping(address => uint256) private _balances;\\n    __unstable__TokenVault private _vault;\\n\\n    constructor (uint256 goal) public {\\n        require(goal > 0, \\\"RefundableCrowdsale: goal is 0\\\");\\n        _vault = new __unstable__TokenVault();\\n        _goal = goal;\\n    }\\n\\n    /**\\n     * @dev Withdraw tokens only after crowdsale ends.\\n     * @param beneficiary Whose tokens will be withdrawn.\\n     */\\n    function withdrawTokens(address beneficiary) public {\\n       require(goalReached(), \\\"RefundableCrowdsale: goal not reached\\\");\\n       //require(hasClosed(), \\\"PostDeliveryCrowdsale: not closed\\\");\\n       require(finalized(), \\\"Withdraw Tokens: crowdsale not finalized\\\");\\n        uint256 amount = _balances[beneficiary];\\n        require(amount > 0, \\\"PostDeliveryCrowdsale: beneficiary is not due any tokens\\\");\\n\\n        _balances[beneficiary] = 0;\\n        _vault.transfer(token(), beneficiary, amount);\\n    }\\n\\n     /**\\n     * @dev Checks whether funding goal was reached.\\n     * @return Whether funding goal was reached\\n     */\\n    function goalReached() public view returns (bool) {\\n        return weiRaised() >= _goal;\\n    }\\n\\n    /**\\n     * @return the balance of an account.\\n     */\\n    function balanceOf(address account) public view returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev Overrides parent by storing due balances, and delivering tokens to the vault instead of the end user. This\\n     * ensures that the tokens will be available by the time they are withdrawn (which may not be the case if\\n     * `_deliverTokens` was called later).\\n     * @param beneficiary Token purchaser\\n     * @param tokenAmount Amount of tokens purchased\\n     */\\n    function _processPurchase(address beneficiary, uint256 tokenAmount) internal {\\n        _balances[beneficiary] = _balances[beneficiary].add(tokenAmount);\\n        _deliverTokens(address(_vault), tokenAmount);\\n    }\\n}\\n\\n/**\\n * @title __unstable__TokenVault\\n * @dev Similar to an Escrow for tokens, this contract allows its primary account to spend its tokens as it sees fit.\\n * This contract is an internal helper for PostDeliveryCrowdsale, and should not be used outside of this context.\\n */\\n// solhint-disable-next-line contract-name-camelcase\\ncontract __unstable__TokenVault is Secondary {\\n    function transfer(IERC20 token, address to, uint256 amount) public onlyPrimary {\\n        token.transfer(to, amount);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/crowdsale/distribution/RefundableCrowdsale.sol\": {\r\n      \"content\": \"pragma solidity ^0.5.0;\\n\\nimport \\\"../validation/TimedCrowdsale.sol\\\";\\nimport \\\"../../math/SafeMath.sol\\\";\\nimport \\\"./FinalizableCrowdsale.sol\\\";\\nimport \\\"../../payment/escrow/RefundEscrow.sol\\\";\\n\\n/**\\n * @title RefundableCrowdsale\\n * @dev Extension of `FinalizableCrowdsale` contract that adds a funding goal, and the possibility of users\\n * getting a refund if goal is not met.\\n *\\n * Deprecated, use `RefundablePostDeliveryCrowdsale` instead. Note that if you allow tokens to be traded before the goal\\n * is met, then an attack is possible in which the attacker purchases tokens from the crowdsale and when they sees that\\n * the goal is unlikely to be met, they sell their tokens (possibly at a discount). The attacker will be refunded when\\n * the crowdsale is finalized, and the users that purchased from them will be left with worthless tokens.\\n */\\ncontract RefundableCrowdsale is FinalizableCrowdsale {\\n    using SafeMath for uint256;\\n\\n    // minimum amount of funds to be raised in weis\\n    uint256 private _goal;\\n\\n    // refund escrow used to hold funds while crowdsale is running\\n    RefundEscrow private _escrow;\\n\\n    /**\\n     * @dev Constructor, creates RefundEscrow.\\n     * @param goal Funding goal\\n     */\\n    constructor (uint256 goal) public {\\n        require(goal > 0, \\\"RefundableCrowdsale: goal is 0\\\");\\n        _escrow = new RefundEscrow(wallet());\\n        _goal = goal;\\n\\n    }\\n\\n    address payable owner = msg.sender;\\n\\n    modifier onlyOwner() {\\n        require(msg.sender == owner);\\n    _;\\n    }\\n   \\n\\n    /**\\n     * @return minimum amount of funds to be raised in wei.\\n     */\\n    function goal() public view returns (uint256) {\\n        return _goal;\\n    }\\n\\n    /**\\n     * @dev Investors can claim refunds here if crowdsale is unsuccessful.\\n     * @param refundee Whose refund will be claimed.\\n     */\\n    function claimRefund(address payable refundee) public {\\n        require(finalized(), \\\"RefundableCrowdsale: not finalized\\\");\\n        require(!goalReached(), \\\"RefundableCrowdsale: goal reached\\\");\\n\\n        _escrow.withdraw(refundee);\\n    }\\n\\n    /**\\n     * @dev Checks whether funding goal was reached.\\n     * @return Whether funding goal was reached\\n     */\\n    function goalReached() public view returns (bool) {\\n        return weiRaised() >= _goal;\\n    }\\n\\n    /**\\n     * @dev Escrow finalization task, called when finalize() is called.\\n     */\\n    function _finalization() internal {\\n        if (goalReached()) {\\n            //escrow used to get transferred here, but that allows people to withdraw tokens before LP is created\\n        } else {\\n            _escrow.enableRefunds();\\n        }\\n\\n        super._finalization();\\n    }\\n\\n    /**\\n     * @dev Escrow withdraw, called seperately from finalize().\\n            This is called prior to finalize() to allow ETH + Token to be added to LP. Once added, finalize can be called\\n            to allow token withdrawal and trading.\\n     */\\n    function withdrawETH() onlyOwner public {\\n       require(goalReached(), \\\"RefundableCrowdsale: goal not reached\\\");\\n       //require(hasClosed(), \\\"PostDeliveryCrowdsale: not closed\\\");\\n\\n       _escrow.close();\\n       _escrow.beneficiaryWithdraw();\\n    }\\n\\n    /**\\n     * @dev Overrides Crowdsale fund forwarding, sending funds to escrow.\\n     */\\n    function _forwardFunds() internal {\\n        _escrow.deposit.value(msg.value)(msg.sender);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/crowdsale/emission/AllowanceCrowdsale.sol\": {\r\n      \"content\": \"pragma solidity ^0.5.0;\\n\\nimport \\\"../Crowdsale.sol\\\";\\nimport \\\"../../token/ERC20/IERC20.sol\\\";\\nimport \\\"../../token/ERC20/SafeERC20.sol\\\";\\nimport \\\"../../math/SafeMath.sol\\\";\\nimport \\\"../../math/Math.sol\\\";\\n\\n/**\\n * @title AllowanceCrowdsale\\n * @dev Extension of Crowdsale where tokens are held by a wallet, which approves an allowance to the crowdsale.\\n */\\ncontract AllowanceCrowdsale is Crowdsale {\\n    using SafeMath for uint256;\\n    using SafeERC20 for IERC20;\\n\\n    address private _tokenWallet;\\n\\n    /**\\n     * @dev Constructor, takes token wallet address.\\n     * @param tokenWallet Address holding the tokens, which has approved allowance to the crowdsale.\\n     */\\n    constructor (address tokenWallet) public {\\n        require(tokenWallet != address(0), \\\"AllowanceCrowdsale: token wallet is the zero address\\\");\\n        _tokenWallet = tokenWallet;\\n    }\\n\\n    /**\\n     * @return the address of the wallet that will hold the tokens.\\n     */\\n    function tokenWallet() public view returns (address) {\\n        return _tokenWallet;\\n    }\\n\\n    /**\\n     * @dev Checks the amount of tokens left in the allowance.\\n     * @return Amount of tokens left in the allowance\\n     */\\n    function remainingTokens() public view returns (uint256) {\\n        return Math.min(token().balanceOf(_tokenWallet), token().allowance(_tokenWallet, address(this)));\\n    }\\n\\n    /**\\n     * @dev Overrides parent behavior by transferring tokens from wallet.\\n     * @param beneficiary Token purchaser\\n     * @param tokenAmount Amount of tokens purchased\\n     */\\n    function _deliverTokens(address beneficiary, uint256 tokenAmount) internal {\\n        token().safeTransferFrom(_tokenWallet, beneficiary, tokenAmount);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/crowdsale/validation/CappedCrowdsale.sol\": {\r\n      \"content\": \"pragma solidity ^0.5.0;\\n\\nimport \\\"../../math/SafeMath.sol\\\";\\nimport \\\"../Crowdsale.sol\\\";\\n\\n/**\\n * @title CappedCrowdsale\\n * @dev Crowdsale with a limit for total contributions.\\n */\\ncontract CappedCrowdsale is Crowdsale {\\n    using SafeMath for uint256;\\n\\n    uint256 private _cap;\\n\\n    /**\\n     * @dev Constructor, takes maximum amount of wei accepted in the crowdsale.\\n     * @param cap Max amount of wei to be contributed\\n     */\\n    constructor (uint256 cap) public {\\n        require(cap > 0, \\\"CappedCrowdsale: cap is 0\\\");\\n        _cap = cap;\\n    }\\n\\n    /**\\n     * @return the cap of the crowdsale.\\n     */\\n    function cap() public view returns (uint256) {\\n        return _cap;\\n    }\\n\\n    /**\\n     * @dev Checks whether the cap has been reached.\\n     * @return Whether the cap was reached\\n     */\\n    function capReached() public view returns (bool) {\\n        return weiRaised() >= _cap;\\n    }\\n\\n    /**\\n     * @dev Extend parent behavior requiring purchase to respect the funding cap.\\n     * @param beneficiary Token purchaser\\n     * @param weiAmount Amount of wei contributed\\n     */\\n    function _preValidatePurchase(address beneficiary, uint256 weiAmount) internal view {\\n        super._preValidatePurchase(beneficiary, weiAmount);\\n        require(weiRaised().add(weiAmount) <= _cap, \\\"CappedCrowdsale: cap exceeded\\\");\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/crowdsale/validation/TimedCrowdsale.sol\": {\r\n      \"content\": \"pragma solidity ^0.5.0;\\n\\nimport \\\"../../math/SafeMath.sol\\\";\\nimport \\\"../Crowdsale.sol\\\";\\n\\n/**\\n * @title TimedCrowdsale\\n * @dev Crowdsale accepting contributions only within a time frame.\\n */\\ncontract TimedCrowdsale is Crowdsale {\\n    using SafeMath for uint256;\\n\\n    uint256 private _openingTime;\\n    uint256 private _closingTime;\\n\\n    /**\\n     * Event for crowdsale extending\\n     * @param newClosingTime new closing time\\n     * @param prevClosingTime old closing time\\n     */\\n    event TimedCrowdsaleExtended(uint256 prevClosingTime, uint256 newClosingTime);\\n\\n    /**\\n     * @dev Reverts if not in crowdsale time range.\\n     */\\n    modifier onlyWhileOpen {\\n        require(isOpen(), \\\"TimedCrowdsale: not open\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Constructor, takes crowdsale opening and closing times.\\n     * @param openingTime Crowdsale opening time\\n     * @param closingTime Crowdsale closing time\\n     */\\n    constructor (uint256 openingTime, uint256 closingTime) public {\\n        // solhint-disable-next-line not-rely-on-time\\n        //require(openingTime >= block.timestamp, \\\"TimedCrowdsale: opening time is before current time\\\");\\n        // solhint-disable-next-line max-line-length\\n        require(closingTime > openingTime, \\\"TimedCrowdsale: opening time is not before closing time\\\");\\n\\n        _openingTime = openingTime;\\n        _closingTime = closingTime;\\n    }\\n\\n    /**\\n     * @return the crowdsale opening time.\\n     */\\n    function openingTime() public view returns (uint256) {\\n        return _openingTime;\\n    }\\n\\n    /**\\n     * @return the crowdsale closing time.\\n     */\\n    function closingTime() public view returns (uint256) {\\n        return _closingTime;\\n    }\\n\\n    /**\\n     * @return true if the crowdsale is open, false otherwise.\\n     */\\n    function isOpen() public view returns (bool) {\\n        // solhint-disable-next-line not-rely-on-time\\n        return block.timestamp >= _openingTime && block.timestamp <= _closingTime;\\n    }\\n\\n    /**\\n     * @dev Checks whether the period in which the crowdsale is open has already elapsed.\\n     * @return Whether crowdsale period has elapsed\\n     */\\n    function hasClosed() public view returns (bool) {\\n        // solhint-disable-next-line not-rely-on-time\\n        return block.timestamp > _closingTime;\\n    }\\n\\n    /**\\n     * @dev Extend parent behavior requiring to be within contributing period.\\n     * @param beneficiary Token purchaser\\n     * @param weiAmount Amount of wei contributed\\n     */\\n    function _preValidatePurchase(address beneficiary, uint256 weiAmount) internal onlyWhileOpen view {\\n        super._preValidatePurchase(beneficiary, weiAmount);\\n    }\\n\\n    /**\\n     * @dev Extend crowdsale.\\n     * @param newClosingTime Crowdsale closing time\\n     */\\n    function _extendTime(uint256 newClosingTime) internal {\\n        require(!hasClosed(), \\\"TimedCrowdsale: already closed\\\");\\n        // solhint-disable-next-line max-line-length\\n        require(newClosingTime > _closingTime, \\\"TimedCrowdsale: new closing time is before current closing time\\\");\\n\\n        emit TimedCrowdsaleExtended(_closingTime, newClosingTime);\\n        _closingTime = newClosingTime;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/math/Math.sol\": {\r\n      \"content\": \"pragma solidity ^0.5.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a >= b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow, so we distribute\\n        return (a / 2) + (b / 2) + ((a % 2 + b % 2) / 2);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/math/SafeMath.sol\": {\r\n      \"content\": \"pragma solidity ^0.5.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b <= a, \\\"SafeMath: subtraction overflow\\\");\\n        uint256 c = a - b;\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // Solidity only automatically asserts when dividing by 0\\n        require(b > 0, \\\"SafeMath: division by zero\\\");\\n        uint256 c = a / b;\\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b != 0, \\\"SafeMath: modulo by zero\\\");\\n        return a % b;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/ownership/Secondary.sol\": {\r\n      \"content\": \"pragma solidity ^0.5.0;\\n\\n/**\\n * @dev A Secondary contract can only be used by its primary account (the one that created it).\\n */\\ncontract Secondary {\\n    address private _primary;\\n\\n    /**\\n     * @dev Emitted when the primary contract changes.\\n     */\\n    event PrimaryTransferred(\\n        address recipient\\n    );\\n\\n    /**\\n     * @dev Sets the primary account to the one that is creating the Secondary contract.\\n     */\\n    constructor () internal {\\n        _primary = msg.sender;\\n        emit PrimaryTransferred(_primary);\\n    }\\n\\n    /**\\n     * @dev Reverts if called from any account other than the primary.\\n     */\\n    modifier onlyPrimary() {\\n        require(msg.sender == _primary, \\\"Secondary: caller is not the primary account\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @return the address of the primary.\\n     */\\n    function primary() public view returns (address) {\\n        return _primary;\\n    }\\n\\n    /**\\n     * @dev Transfers contract to a new primary.\\n     * @param recipient The address of new primary.\\n     */\\n    function transferPrimary(address recipient) public onlyPrimary {\\n        require(recipient != address(0), \\\"Secondary: new primary is the zero address\\\");\\n        _primary = recipient;\\n        emit PrimaryTransferred(_primary);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/payment/escrow/ConditionalEscrow.sol\": {\r\n      \"content\": \"pragma solidity ^0.5.0;\\n\\nimport \\\"./Escrow.sol\\\";\\n\\n/**\\n * @title ConditionalEscrow\\n * @dev Base abstract escrow to only allow withdrawal if a condition is met.\\n * @dev Intended usage: See Escrow.sol. Same usage guidelines apply here.\\n */\\ncontract ConditionalEscrow is Escrow {\\n    /**\\n     * @dev Returns whether an address is allowed to withdraw their funds. To be\\n     * implemented by derived contracts.\\n     * @param payee The destination address of the funds.\\n     */\\n    function withdrawalAllowed(address payee) public view returns (bool);\\n\\n    function withdraw(address payable payee) public {\\n        require(withdrawalAllowed(payee), \\\"ConditionalEscrow: payee is not allowed to withdraw\\\");\\n        super.withdraw(payee);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/payment/escrow/Escrow.sol\": {\r\n      \"content\": \"pragma solidity ^0.5.0;\\n\\nimport \\\"../../math/SafeMath.sol\\\";\\nimport \\\"../../ownership/Secondary.sol\\\";\\n\\n /**\\n  * @title Escrow\\n  * @dev Base escrow contract, holds funds designated for a payee until they\\n  * withdraw them.\\n  * @dev Intended usage: This contract (and derived escrow contracts) should be a\\n  * standalone contract, that only interacts with the contract that instantiated\\n  * it. That way, it is guaranteed that all Ether will be handled according to\\n  * the Escrow rules, and there is no need to check for payable functions or\\n  * transfers in the inheritance tree. The contract that uses the escrow as its\\n  * payment method should be its primary, and provide public methods redirecting\\n  * to the escrow's deposit and withdraw.\\n  */\\ncontract Escrow is Secondary {\\n    using SafeMath for uint256;\\n\\n    event Deposited(address indexed payee, uint256 weiAmount);\\n    event Withdrawn(address indexed payee, uint256 weiAmount);\\n\\n    mapping(address => uint256) private _deposits;\\n\\n    function depositsOf(address payee) public view returns (uint256) {\\n        return _deposits[payee];\\n    }\\n\\n    /**\\n     * @dev Stores the sent amount as credit to be withdrawn.\\n     * @param payee The destination address of the funds.\\n     */\\n    function deposit(address payee) public onlyPrimary payable {\\n        uint256 amount = msg.value;\\n        _deposits[payee] = _deposits[payee].add(amount);\\n\\n        emit Deposited(payee, amount);\\n    }\\n\\n    /**\\n     * @dev Withdraw accumulated balance for a payee.\\n     * @param payee The address whose funds will be withdrawn and transferred to.\\n     */\\n    function withdraw(address payable payee) public onlyPrimary {\\n        uint256 payment = _deposits[payee];\\n\\n        _deposits[payee] = 0;\\n\\n        payee.transfer(payment);\\n\\n        emit Withdrawn(payee, payment);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/payment/escrow/RefundEscrow.sol\": {\r\n      \"content\": \"pragma solidity ^0.5.0;\\n\\nimport \\\"./ConditionalEscrow.sol\\\";\\n\\n/**\\n * @title RefundEscrow\\n * @dev Escrow that holds funds for a beneficiary, deposited from multiple\\n * parties.\\n * @dev Intended usage: See Escrow.sol. Same usage guidelines apply here.\\n * @dev The primary account (that is, the contract that instantiates this\\n * contract) may deposit, close the deposit period, and allow for either\\n * withdrawal by the beneficiary, or refunds to the depositors. All interactions\\n * with RefundEscrow will be made through the primary contract. See the\\n * RefundableCrowdsale contract for an example of RefundEscrow’s use.\\n */\\ncontract RefundEscrow is ConditionalEscrow {\\n    enum State { Active, Refunding, Closed }\\n\\n    event RefundsClosed();\\n    event RefundsEnabled();\\n\\n    State private _state;\\n    address payable private _beneficiary;\\n\\n    /**\\n     * @dev Constructor.\\n     * @param beneficiary The beneficiary of the deposits.\\n     */\\n    constructor (address payable beneficiary) public {\\n        require(beneficiary != address(0), \\\"RefundEscrow: beneficiary is the zero address\\\");\\n        _beneficiary = beneficiary;\\n        _state = State.Active;\\n    }\\n\\n    /**\\n     * @return The current state of the escrow.\\n     */\\n    function state() public view returns (State) {\\n        return _state;\\n    }\\n\\n    /**\\n     * @return The beneficiary of the escrow.\\n     */\\n    function beneficiary() public view returns (address) {\\n        return _beneficiary;\\n    }\\n\\n    /**\\n     * @dev Stores funds that may later be refunded.\\n     * @param refundee The address funds will be sent to if a refund occurs.\\n     */\\n    function deposit(address refundee) public payable {\\n        require(_state == State.Active, \\\"RefundEscrow: can only deposit while active\\\");\\n        super.deposit(refundee);\\n    }\\n\\n    /**\\n     * @dev Allows for the beneficiary to withdraw their funds, rejecting\\n     * further deposits.\\n     */\\n    function close() public onlyPrimary {\\n        require(_state == State.Active, \\\"RefundEscrow: can only close while active\\\");\\n        _state = State.Closed;\\n        emit RefundsClosed();\\n    }\\n\\n    /**\\n     * @dev Allows for refunds to take place, rejecting further deposits.\\n     */\\n    function enableRefunds() public onlyPrimary {\\n        require(_state == State.Active, \\\"RefundEscrow: can only enable refunds while active\\\");\\n        _state = State.Refunding;\\n        emit RefundsEnabled();\\n    }\\n\\n    /**\\n     * @dev Withdraws the beneficiary's funds.\\n     */\\n    function beneficiaryWithdraw() public {\\n        require(_state == State.Closed, \\\"RefundEscrow: beneficiary can only withdraw while closed\\\");\\n        _beneficiary.transfer(address(this).balance);\\n    }\\n\\n    /**\\n     * @dev Returns whether refundees can withdraw their deposits (be refunded). The overridden function receives a\\n     * 'payee' argument, but we ignore it here since the condition is global, not per-payee.\\n     */\\n    function withdrawalAllowed(address) public view returns (bool) {\\n        return _state == State.Refunding;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/ERC20.sol\": {\r\n      \"content\": \"pragma solidity ^0.5.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"../../math/SafeMath.sol\\\";\\n\\n/**\\n * @dev Implementation of the `IERC20` interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using `_mint`.\\n * For a generic mechanism see `ERC20Mintable`.\\n *\\n * *For a detailed writeup see our guide [How to implement supply\\n * mechanisms](https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226).*\\n *\\n * We have followed general OpenZeppelin guidelines: functions revert instead\\n * of returning `false` on failure. This behavior is nonetheless conventional\\n * and does not conflict with the expectations of ERC20 applications.\\n *\\n * Additionally, an `Approval` event is emitted on calls to `transferFrom`.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard `decreaseAllowance` and `increaseAllowance`\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See `IERC20.approve`.\\n */\\ncontract ERC20 is IERC20 {\\n    using SafeMath for uint256;\\n\\n    mapping (address => uint256) private _balances;\\n\\n    mapping (address => mapping (address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    /**\\n     * @dev See `IERC20.totalSupply`.\\n     */\\n    function totalSupply() public view returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See `IERC20.balanceOf`.\\n     */\\n    function balanceOf(address account) public view returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See `IERC20.transfer`.\\n     *\\n     * Requirements:\\n     *\\n     * - `recipient` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address recipient, uint256 amount) public returns (bool) {\\n        _transfer(msg.sender, recipient, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See `IERC20.allowance`.\\n     */\\n    function allowance(address owner, address spender) public view returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See `IERC20.approve`.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 value) public returns (bool) {\\n        _approve(msg.sender, spender, value);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See `IERC20.transferFrom`.\\n     *\\n     * Emits an `Approval` event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of `ERC20`;\\n     *\\n     * Requirements:\\n     * - `sender` and `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `value`.\\n     * - the caller must have allowance for `sender`'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) public returns (bool) {\\n        _transfer(sender, recipient, amount);\\n        _approve(sender, msg.sender, _allowances[sender][msg.sender].sub(amount));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to `approve` that can be used as a mitigation for\\n     * problems described in `IERC20.approve`.\\n     *\\n     * Emits an `Approval` event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public returns (bool) {\\n        _approve(msg.sender, spender, _allowances[msg.sender][spender].add(addedValue));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to `approve` that can be used as a mitigation for\\n     * problems described in `IERC20.approve`.\\n     *\\n     * Emits an `Approval` event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public returns (bool) {\\n        _approve(msg.sender, spender, _allowances[msg.sender][spender].sub(subtractedValue));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\\n     *\\n     * This is internal function is equivalent to `transfer`, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a `Transfer` event.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` cannot be the zero address.\\n     * - `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     */\\n    function _transfer(address sender, address recipient, uint256 amount) internal {\\n        require(sender != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(recipient != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _balances[sender] = _balances[sender].sub(amount);\\n        _balances[recipient] = _balances[recipient].add(amount);\\n        emit Transfer(sender, recipient, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a `Transfer` event with `from` set to the zero address.\\n     *\\n     * Requirements\\n     *\\n     * - `to` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _totalSupply = _totalSupply.add(amount);\\n        _balances[account] = _balances[account].add(amount);\\n        emit Transfer(address(0), account, amount);\\n    }\\n\\n     /**\\n     * @dev Destoys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a `Transfer` event with `to` set to the zero address.\\n     *\\n     * Requirements\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 value) internal {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _totalSupply = _totalSupply.sub(value);\\n        _balances[account] = _balances[account].sub(value);\\n        emit Transfer(account, address(0), value);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner`s tokens.\\n     *\\n     * This is internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an `Approval` event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(address owner, address spender, uint256 value) internal {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = value;\\n        emit Approval(owner, spender, value);\\n    }\\n\\n    /**\\n     * @dev Destoys `amount` tokens from `account`.`amount` is then deducted\\n     * from the caller's allowance.\\n     *\\n     * See `_burn` and `_approve`.\\n     */\\n    function _burnFrom(address account, uint256 amount) internal {\\n        _burn(account, amount);\\n        _approve(account, msg.sender, _allowances[account][msg.sender].sub(amount));\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"pragma solidity ^0.5.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP. Does not include\\n * the optional functions; to access them see `ERC20Detailed`.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a `Transfer` event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through `transferFrom`. This is\\n     * zero by default.\\n     *\\n     * This value changes when `approve` or `transferFrom` are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * > Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an `Approval` event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a `Transfer` event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to `approve`. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\": {\r\n      \"content\": \"pragma solidity ^0.5.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"../../math/SafeMath.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for ERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using SafeMath for uint256;\\n    using Address for address;\\n\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        // solhint-disable-next-line max-line-length\\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\\n        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value);\\n        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves.\\n\\n        // A Solidity high level call has three parts:\\n        //  1. The target address is checked to verify it contains contract code\\n        //  2. The call itself is made, and success asserted\\n        //  3. The return value is decoded, which in turn checks the size of the returned data.\\n        // solhint-disable-next-line max-line-length\\n        require(address(token).isContract(), \\\"SafeERC20: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = address(token).call(data);\\n        require(success, \\\"SafeERC20: low-level call failed\\\");\\n\\n        if (returndata.length > 0) { // Return data is optional\\n            // solhint-disable-next-line max-line-length\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"pragma solidity ^0.5.0;\\n\\n/**\\n * @dev Collection of functions related to the address type,\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * This test is non-exhaustive, and there may be false-negatives: during the\\n     * execution of a contract's constructor, its address will be reported as\\n     * not containing a contract.\\n     *\\n     * > It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies in extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/ReentrancyGuard.sol\": {\r\n      \"content\": \"pragma solidity ^0.5.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the `nonReentrant` modifier\\n * available, which can be aplied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n */\\ncontract ReentrancyGuard {\\n    /// @dev counter to allow mutex lock with only one SSTORE operation\\n    uint256 private _guardCounter;\\n\\n    constructor () internal {\\n        // The counter starts at one to prevent changing it from zero to a non-zero\\n        // value, which is a more expensive operation.\\n        _guardCounter = 1;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and make it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _guardCounter += 1;\\n        uint256 localCounter = _guardCounter;\\n        _;\\n        require(localCounter == _guardCounter, \\\"ReentrancyGuard: reentrant call\\\");\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"remappings\": [],\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"evmVersion\": \"byzantium\",\r\n    \"libraries\": {},\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"hasClosed\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"beneficiary\",\"type\":\"address\"}],\"name\":\"getContribution\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"rate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"cap\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isCapper\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"goal\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"weiRaised\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isOpen\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"beneficiary\",\"type\":\"address\"}],\"name\":\"withdrawTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"closingTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"finalize\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"capReached\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"wallet\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceCapper\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"tokenAddress\",\"type\":\"address\"}],\"name\":\"withdrawUnsoldTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"goalReached\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"beneficiary\",\"type\":\"address\"},{\"name\":\"cap\",\"type\":\"uint256\"}],\"name\":\"setCap\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"account\",\"type\":\"address\"}],\"name\":\"addCapper\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"beneficiary\",\"type\":\"address\"}],\"name\":\"getCap\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"finalized\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"openingTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"remainingTokens\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokenWallet\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"refundee\",\"type\":\"address\"}],\"name\":\"claimRefund\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdrawETH\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"beneficiary\",\"type\":\"address\"}],\"name\":\"buyTokens\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_rate\",\"type\":\"uint256\"},{\"name\":\"_wallet\",\"type\":\"address\"},{\"name\":\"_token\",\"type\":\"address\"},{\"name\":\"_tokenWallet\",\"type\":\"address\"},{\"name\":\"_openingTime\",\"type\":\"uint256\"},{\"name\":\"_closingTime\",\"type\":\"uint256\"},{\"name\":\"individualCap\",\"type\":\"uint256\"},{\"name\":\"_softcap\",\"type\":\"uint256\"},{\"name\":\"_cap\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"account\",\"type\":\"address\"}],\"name\":\"CapperAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"account\",\"type\":\"address\"}],\"name\":\"CapperRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"CrowdsaleFinalized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"prevClosingTime\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"newClosingTime\",\"type\":\"uint256\"}],\"name\":\"TimedCrowdsaleExtended\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"purchaser\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"beneficiary\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TokensPurchased\",\"type\":\"event\"}]","ContractName":"KojiCrowdSale","CompilerVersion":"v0.5.0+commit.1d4f565a","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"00000000000000000000000000000000000000000000000000000000b2d05e000000000000000000000000001930f96d7aff9321836e3fbcce96b0f48dad890e0000000000000000000000001c8266a4369af6d80df2659ba47b3c98f35cb8be0000000000000000000000001930f96d7aff9321836e3fbcce96b0f48dad890e0000000000000000000000000000000000000000000000000000000060a527f00000000000000000000000000000000000000000000000000000000060a91c700000000000000000000000000000000000000000000000001bc16d674ec800000000000000000000000000000000000000000000000000047fdb3c3f456c000000000000000000000000000000000000000000000000000735beeb55f6f40000","EVMVersion":"byzantium","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}