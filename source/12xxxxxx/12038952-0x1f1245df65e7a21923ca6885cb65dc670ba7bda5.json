{"status":"1","message":"OK","result":[{"SourceCode":"// SPDX-License-Identifier: MIT\r\npragma solidity >=0.6.0 <0.7.0;\r\n\r\nlibrary EnumerableSet {\r\n  struct Set {\r\n    bytes32[] _values;\r\n    mapping (bytes32 => uint256) _indexes;\r\n  }\r\n\r\n  function _add(Set storage set, bytes32 value) private returns (bool) {\r\n    if (!_contains(set, value)) {\r\n      set._values.push(value);\r\n      set._indexes[value] = set._values.length;\r\n      return true;\r\n    } else {\r\n      return false;\r\n    }\r\n  }\r\n\r\n  function _remove(Set storage set, bytes32 value) private returns (bool) {\r\n    uint256 valueIndex = set._indexes[value];\r\n    if (valueIndex != 0) {\r\n      uint256 toDeleteIndex = valueIndex - 1;\r\n      uint256 lastIndex = set._values.length - 1;\r\n      bytes32 lastvalue = set._values[lastIndex];\r\n      set._values[toDeleteIndex] = lastvalue;\r\n      set._indexes[lastvalue] = toDeleteIndex + 1;\r\n      set._values.pop();\r\n      delete set._indexes[value];\r\n      return true;\r\n    } else {\r\n      return false;\r\n    }\r\n  }\r\n\r\n  function _contains(Set storage set, bytes32 value) private view returns (bool) {\r\n    return set._indexes[value] != 0;\r\n  }\r\n\r\n  function _length(Set storage set) private view returns (uint256) {\r\n    return set._values.length;\r\n  }\r\n\r\n  function _at(Set storage set, uint256 index) private view returns (bytes32) {\r\n    require(set._values.length > index, \"EnumerableSet: index out of bounds\");\r\n    return set._values[index];\r\n  }\r\n\r\n  struct AddressSet {\r\n    Set _inner;\r\n  }\r\n\r\n  function add(AddressSet storage set, address value) internal returns (bool) {\r\n    return _add(set._inner, bytes32(uint256(value)));\r\n  }\r\n\r\n  function remove(AddressSet storage set, address value) internal returns (bool) {\r\n    return _remove(set._inner, bytes32(uint256(value)));\r\n  }\r\n\r\n  function contains(AddressSet storage set, address value) internal view returns (bool) {\r\n    return _contains(set._inner, bytes32(uint256(value)));\r\n  }\r\n\r\n  function length(AddressSet storage set) internal view returns (uint256) {\r\n    return _length(set._inner);\r\n  }\r\n\r\n  function at(AddressSet storage set, uint256 index) internal view returns (address) {\r\n    return address(uint256(_at(set._inner, index)));\r\n  }\r\n\r\n  struct UintSet {\r\n    Set _inner;\r\n  }\r\n\r\n  function add(UintSet storage set, uint256 value) internal returns (bool) {\r\n    return _add(set._inner, bytes32(value));\r\n  }\r\n\r\n  function remove(UintSet storage set, uint256 value) internal returns (bool) {\r\n    return _remove(set._inner, bytes32(value));\r\n  }\r\n\r\n  function contains(UintSet storage set, uint256 value) internal view returns (bool) {\r\n    return _contains(set._inner, bytes32(value));\r\n  }\r\n\r\n  function length(UintSet storage set) internal view returns (uint256) {\r\n    return _length(set._inner);\r\n  }\r\n\r\n  function at(UintSet storage set, uint256 index) internal view returns (uint256) {\r\n    return uint256(_at(set._inner, index));\r\n  }\r\n}\r\n\r\nabstract contract Context {\r\n  function _msgSender() internal view virtual returns (address payable) {\r\n    return msg.sender;\r\n  }\r\n}\r\n\r\nabstract contract Ownable is Context {\r\n  address private _owner;\r\n\r\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n  constructor () internal {\r\n    address msgSender = _msgSender();\r\n    _owner = msgSender;\r\n    emit OwnershipTransferred(address(0), msgSender);\r\n  }\r\n\r\n  function owner() public view returns (address) {\r\n    return _owner;\r\n  }\r\n\r\n  modifier onlyOwner() {\r\n    require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\r\n    _;\r\n  }\r\n\r\n  function renounceOwnership() public virtual onlyOwner {\r\n    emit OwnershipTransferred(_owner, address(0));\r\n    _owner = address(0);\r\n  }\r\n\r\n  function transferOwnership(address newOwner) public virtual onlyOwner {\r\n    require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n    emit OwnershipTransferred(_owner, newOwner);\r\n    _owner = newOwner;\r\n  }\r\n}\r\n\r\n\r\ncontract FarmFactory is Context, Ownable {\r\n  using EnumerableSet for EnumerableSet.AddressSet;\r\n\r\n  EnumerableSet.AddressSet private farms;\r\n  EnumerableSet.AddressSet private farmGenerators;\r\n\r\n  mapping (address => EnumerableSet.AddressSet) private userFarms;\r\n\r\n  constructor() public { }\r\n\r\n  function adminAllowFarmGenerator(address _address, bool _allow) public onlyOwner {\r\n    if (_allow) {\r\n      farmGenerators.add(_address);\r\n    } else {\r\n      farmGenerators.remove(_address);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @notice called by a registered FarmGenerator upon Farm creation\r\n   */\r\n  function registerFarm(address _farmAddress) public {\r\n    require(farmGenerators.contains(_msgSender()), 'FORBIDDEN');\r\n    farms.add(_farmAddress);\r\n  }\r\n\r\n  /**\r\n   * @notice Number of allowed FarmGenerators\r\n   */\r\n  function farmGeneratorsLength() external view returns (uint256) {\r\n    return farmGenerators.length();\r\n  }\r\n\r\n  /**\r\n   * @notice Gets the address of a registered FarmGenerator at specifiex index\r\n   */\r\n  function farmGeneratorAtIndex(uint256 _index) external view returns (address) {\r\n    return farmGenerators.at(_index);\r\n  }\r\n\r\n  /**\r\n   * @notice The length of all farms on the platform\r\n   */\r\n  function farmsLength() external view returns (uint256) {\r\n    return farms.length();\r\n  }\r\n\r\n  /**\r\n   * @notice gets a farm at a specific index. Although using Enumerable Set, since farms are only added and not removed this will never change\r\n   * @return the address of the Farm contract at index\r\n   */\r\n  function farmAtIndex(uint256 _index) external view returns (address) {\r\n    return farms.at(_index);\r\n  }\r\n\r\n  /**\r\n   * @notice called by a Farm contract when lp token balance changes from 0 to > 0 to allow tracking all farms a user is active in\r\n   */\r\n  function userEnteredFarm(address _user) public {\r\n    // msgSender = farm contract\r\n    address msgSender = _msgSender();\r\n    require(farms.contains(msgSender), 'FORBIDDEN');\r\n    EnumerableSet.AddressSet storage set = userFarms[_user];\r\n    set.add(msgSender);\r\n  }\r\n\r\n  /**\r\n   * @notice called by a Farm contract when all LP tokens have been withdrawn, removing the farm from the users active farm list\r\n   */\r\n  function userLeftFarm(address _user) public {\r\n    // msgSender = farm contract\r\n    address msgSender = _msgSender();\r\n    require(farms.contains(msgSender), 'FORBIDDEN');\r\n    EnumerableSet.AddressSet storage set = userFarms[_user];\r\n    set.remove(msgSender);\r\n  }\r\n\r\n  /**\r\n   * @notice returns the number of farms the user is active in\r\n   */\r\n  function userFarmsLength(address _user) external view returns (uint256) {\r\n    EnumerableSet.AddressSet storage set = userFarms[_user];\r\n    return set.length();\r\n  }\r\n\r\n  /**\r\n   * @notice called by a Farm contract when all LP tokens have been withdrawn, removing the farm from the users active farm list\r\n   * @return the address of the Farm contract the user is farming\r\n   */\r\n  function userFarmAtIndex(address _user, uint256 _index) external view returns (address) {\r\n    EnumerableSet.AddressSet storage set = userFarms[_user];\r\n    return set.at(_index);\r\n  }\r\n}","ABI":"[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_allow\",\"type\":\"bool\"}],\"name\":\"adminAllowFarmGenerator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"farmAtIndex\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"farmGeneratorAtIndex\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"farmGeneratorsLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"farmsLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_farmAddress\",\"type\":\"address\"}],\"name\":\"registerFarm\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"userEnteredFarm\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"userFarmAtIndex\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"userFarmsLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"userLeftFarm\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"FarmFactory","CompilerVersion":"v0.6.12+commit.27d51765","OptimizationUsed":"1","Runs":"999999","ConstructorArguments":"","EVMVersion":"istanbul","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://b5c0e1f2a656f38d05de532f3839847ff3707ae47888a54dc0c0055ee5d1d838"}]}