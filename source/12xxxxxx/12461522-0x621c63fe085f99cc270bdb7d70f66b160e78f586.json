{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"/C/Users/khera/Documents/GitHub/GasSwapTokens/contracts/GSVECore.sol\": {\r\n      \"content\": \"/*\\r\\nGAS SAVE PROTOCOL - $GSVE TOKEN!\\r\\n████████████████████████████████████████████████████████████\\r\\n███████████████████████▀▀▀▀▀▀▀▀▀▀▀▀▀▀███████████████████████\\r\\n████████████████▀▀░░░░░░░░░░░░░░░░░░░░░░░░▀▀▀███████████████\\r\\n██████████████░▄░░░░░░░░░░░░░░░░░░░░░░░░░░░░▄░██████████████\\r\\n██████████████▄░▀▀░░░▄▄▄░░░░░░░░░░░░░▄▄░░░▀▀▄░██████████████\\r\\n███████████████░░░▀▀░░░░▄▄▄▄▄▄▄▄▄▄▄▄▄▄░░▀▀░░░░██████████████\\r\\n███████████████░░░░░░░░░░░░░░░░█░░░░░░░░░░░░░░██████████████\\r\\n███████████████░░░░░░░░░░░░░░░░█░░░░░░░░░░░░░░██████████████\\r\\n███████████████░░░░░░░░░░░░░░░░█░░░░░░░░░░░░░░██████████████\\r\\n███████████████░░░░░░░░░░░░░░░░█░░░░░░░░░░░░░░██████████████\\r\\n██████████████░░░░░░░░░░░░░░░░░█░░░░░░░░░░░░░░██████████████\\r\\n██████████████▄░░░░░░░░░░░░░░░░█░░░░░░░░░░░░░░██████████████\\r\\n███████████████░▀▀░░▄▄▄▄░░░░░░░▀░░░░░▄▄▄░░▀▀░░██████████████\\r\\n███████████████░░░░░░░░░░░░░░░░█░░░░░░░░░░░░░░██████████████\\r\\n███████████████░░░░░░░░░░░░░░░░█░░░░░░░░░░░░░░██████████████\\r\\n███████████████░░░░░░░░░░░░░░░░█░░░░░░░░░░░░░░██████████████\\r\\n███████████████░░░░░░░░░░░░░░░░█░░░░░░░░░░░░░░██████████████\\r\\n██████████████▀░░░░░░░░░░░░░░░░█░░░░░░░░░░░░░░██████████████\\r\\n██████████████░░░░░░░░░░░░░░░░░█░░░░░░░░░░░░░░██████████████\\r\\n███████████████░▄▄░░░░░░░░░░░░▄█░░░░░░░░░░▄▄░░██████████████\\r\\n███████████████░░░░░▀▀▀▀░░░░░░▄▄░░░░▀▀▀▀░░░░░░██████████████\\r\\n███████████████░░░░░░░░░░░░░░░░█░░░░░░░░░░░░░░██████████████\\r\\n███████████████░░░░░░░░░░░░░░░░█░░░░░░░░░░░░░░██████████████\\r\\n███████████████░░░░░░░░░░░░░░░▄█░░░░▄░░░░░░░░░██████████████\\r\\n███████████████░░░░░░░░░░░░░░░██░░░░█░░░░░░░░░██████████████\\r\\n██████████████░░░░░░░░░░░░░░░░██░░░░█░░░░░░░░░██████████████\\r\\n██████████████▄░░░░░░░░░░░░░░░██░░░░█░░░░░░░░░██████████████\\r\\n█████████████████▄▄▄░░░░░░░░░░░░░░░░░░░░░▄▄▄████████████████\\r\\n██████████████████████████████▄▄▄▄██████████████████████████\\r\\n████████████████████████████████████████████████████████████\\r\\n*/\\r\\n\\r\\n// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/utils/math/Math.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\r\\n\\r\\n/**\\r\\n * @dev Interface of the wrapped Gas Token Type\\r\\n */\\r\\ninterface IGasTokenMint {\\r\\n    function mint(uint256 value) external; \\r\\n    function discountedMint(uint256 value, uint256 discountedFee, address recipient) external; \\r\\n}\\r\\n\\r\\n\\r\\n/**\\r\\n* @dev Interface for interacting with protocol token\\r\\n*/\\r\\ninterface IGSVEProtocolToken {\\r\\n    function burn(uint256 amount) external ;\\r\\n    function burnFrom(address account, uint256 amount) external;\\r\\n}\\r\\n\\r\\n/**\\r\\n* @dev Interface for interacting with the gas vault\\r\\n*/\\r\\ninterface IGSVEVault {\\r\\n    function transferToken(address token, address recipient, uint256 amount) external;\\r\\n}\\r\\n\\r\\ncontract GSVECore is Ownable, ReentrancyGuard{\\r\\n    using SafeMath for uint256;\\r\\n    \\r\\n    //address of our protocol utility token\\r\\n    address private GSVEToken;\\r\\n    address private GSVEVault;\\r\\n\\r\\n    //system is in place to prevent reentrancy from untrusted tokens\\r\\n    mapping(address => uint256) private _mintingType;\\r\\n    mapping(address => bool) private _claimable;\\r\\n\\r\\n    uint256 private _totalStaked;\\r\\n\\r\\n    //staking  \\r\\n    mapping(address => uint256) private userStakes;\\r\\n    mapping(address => uint256) private userStakeTimes;\\r\\n    mapping(address => uint256) private userTotalRewards;\\r\\n    mapping(address => uint256) private userClaimTimes;\\r\\n\\r\\n    //protocol values\\r\\n    mapping(uint256=>uint256) private tierThreshholds;\\r\\n    uint256 rewardEnableTime;\\r\\n\\r\\n    bool rewardsEnabled = false;\\r\\n    uint256 burnToSaveFee = 25*10**16;\\r\\n    uint256 burnToClaimGasTokens = 1*10**17;\\r\\n    uint256 mintingReward = 5*10**17;\\r\\n\\r\\n\\r\\n    /**\\r\\n     * @dev A function that enables protocol rewards\\r\\n     */\\r\\n    function enableRewards() public onlyOwner {\\r\\n        require(rewardsEnabled == false, \\\"GSVE: Rewards already enabled\\\");\\r\\n        rewardsEnabled = true;\\r\\n        rewardEnableTime = block.timestamp;\\r\\n        emit protocolUpdated(0x656e61626c655570646174650000000000000000000000000000000000000000, 1);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n    * @dev A function that disables rewards\\r\\n    */\\r\\n    function disableRewards() public onlyOwner {\\r\\n        require(rewardsEnabled, \\\"GSVE: Rewards not already enabled\\\");\\r\\n        rewardsEnabled = false;\\r\\n        rewardEnableTime = 0;\\r\\n        emit protocolUpdated(0x656e61626c655570646174650000000000000000000000000000000000000000, 0);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev A function that allows us to update the tier threshold\\r\\n     */\\r\\n    function updateTier(uint256 tier, uint256 value) public onlyOwner {\\r\\n        require(value > 10**18, \\\"GSVE: Tier value seems to be low.\\\");\\r\\n        tierThreshholds[tier] = value;\\r\\n        emit TierUpdate(tier, value);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev A function that allows us to update the burn gsve:save fee ratio\\r\\n     */\\r\\n    function updateBurnSaveFee(uint256 value) public onlyOwner{\\r\\n        require(value > 10**17, \\\"GSVE: Value seems to be low.\\\");\\r\\n        burnToSaveFee = value;\\r\\n        emit protocolUpdated(0x6275726e00000000000000000000000000000000000000000000000000000000, value);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev A function that allows us to update the burn gsve:claim gastoken ratio\\r\\n     */\\r\\n    function updateBurnClaimFee(uint256 value) public onlyOwner{\\r\\n        require(value > 10**17, \\\"GSVE: Value seems to be low.\\\");\\r\\n        burnToClaimGasTokens= value;\\r\\n        emit protocolUpdated(0x636c61696d000000000000000000000000000000000000000000000000000000, value);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev A function that allows us to update the burn gsve:claim gastoken ratio\\r\\n     */\\r\\n    function updateMintingReward(uint256 value) public onlyOwner{\\r\\n        require(value > 10**17, \\\"GSVE: Value seems to be low.\\\");\\r\\n        mintingReward = value;\\r\\n        emit protocolUpdated(0x6d696e74696e6700000000000000000000000000000000000000000000000000, value);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev A function that allows us to reassign ownership of the contracts that this contract owns. \\r\\n     /* Enabling future smartcontract upgrades without the complexity of proxy/proxy upgrades.\\r\\n     */\\r\\n    function transferOwnershipOfSubcontract(address ownedContract, address newOwner) public onlyOwner{\\r\\n        Ownable(ownedContract).transferOwnership(newOwner);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev the constructor allows us to set the gsve token\\r\\n     * as the token we are using for staking and other protocol features\\r\\n     * also lets us set the vault address.\\r\\n     */\\r\\n    constructor(address _tokenAddress, address _vaultAddress, address wchi, address wgst2, address wgst1) {\\r\\n        GSVEToken = _tokenAddress;\\r\\n        GSVEVault = _vaultAddress;\\r\\n        tierThreshholds[1] = 250*(10**18);\\r\\n        tierThreshholds[2] = 1000*(10**18);\\r\\n        _claimable[_tokenAddress] = false;\\r\\n\\r\\n        _claimable[0x0000000000004946c0e9F43F4Dee607b0eF1fA1c] = true;\\r\\n        _mintingType[0x0000000000004946c0e9F43F4Dee607b0eF1fA1c] = 1;\\r\\n\\r\\n        _claimable[0x0000000000b3F879cb30FE243b4Dfee438691c04] = true;\\r\\n        _mintingType[0x0000000000b3F879cb30FE243b4Dfee438691c04] = 1;\\r\\n\\r\\n        _claimable[0x88d60255F917e3eb94eaE199d827DAd837fac4cB] = true;\\r\\n        _mintingType[0x88d60255F917e3eb94eaE199d827DAd837fac4cB] = 1;\\r\\n        \\r\\n\\r\\n        _claimable[wchi] = true;\\r\\n        _mintingType[wchi] = 2;\\r\\n\\r\\n        _claimable[wgst2] = true;\\r\\n        _mintingType[wgst2] = 2;\\r\\n\\r\\n        _claimable[wgst1] = true;\\r\\n        _mintingType[wgst1] = 2;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev A function that allows a user to stake tokens. \\r\\n     * If they have a rewards from a stake already, they must claim this first.\\r\\n     */\\r\\n    function stake(uint256 value) public nonReentrant() {\\r\\n\\r\\n        if (value == 0){\\r\\n            return;\\r\\n        }\\r\\n        require(IERC20(GSVEToken).transferFrom(msg.sender, address(this), value));\\r\\n        userStakes[msg.sender] = userStakes[msg.sender].add(value);\\r\\n        userStakeTimes[msg.sender] = block.timestamp;\\r\\n        userClaimTimes[msg.sender] = block.timestamp;\\r\\n        _totalStaked = _totalStaked.add(value);\\r\\n        emit Staked(msg.sender, value);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev A function that allows a user to fully unstake.\\r\\n     */\\r\\n    function unstake() public nonReentrant() {\\r\\n        uint256 stakeSize = userStakes[msg.sender];\\r\\n        if (stakeSize == 0){\\r\\n            return;\\r\\n        }\\r\\n        userStakes[msg.sender] = 0;\\r\\n        userStakeTimes[msg.sender] = 0;\\r\\n        userClaimTimes[msg.sender] = 0;\\r\\n        _totalStaked = _totalStaked.sub(stakeSize);\\r\\n        require(IERC20(GSVEToken).transfer(msg.sender, stakeSize));\\r\\n        emit Unstaked(msg.sender, stakeSize);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev A function that allows us to calculate the total rewards a user has not claimed yet.\\r\\n     */\\r\\n    function calculateStakeReward(address rewardedAddress) public view returns(uint256){\\r\\n        if(userStakeTimes[rewardedAddress] == 0){\\r\\n            return 0;\\r\\n        }\\r\\n\\r\\n        if(rewardsEnabled == false){\\r\\n            return 0;\\r\\n        }\\r\\n\\r\\n        uint256 initialTime = Math.max(userStakeTimes[rewardedAddress], rewardEnableTime);\\r\\n        uint256 timeDifference = block.timestamp.sub(initialTime);\\r\\n        uint256 rewardPeriod = timeDifference.div((60*60*6));\\r\\n        uint256 rewardPerPeriod = userStakes[rewardedAddress].div(4000);\\r\\n        uint256 reward = rewardPeriod.mul(rewardPerPeriod);\\r\\n\\r\\n        return reward;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev A function that allows a user to collect the stake reward entitled to them\\r\\n     * in the situation where the rewards pool does not have enough tokens\\r\\n     * then the user is given as much as they can be given.\\r\\n     */\\r\\n    function collectReward() public nonReentrant() {\\r\\n        uint256 remainingRewards = totalRewards();\\r\\n        require(remainingRewards > 0, \\\"GSVE: contract has ran out of rewards to give\\\");\\r\\n        require(rewardsEnabled, \\\"GSVE: Rewards are not enabled\\\");\\r\\n\\r\\n        uint256 reward = calculateStakeReward(msg.sender);\\r\\n        if(reward == 0){\\r\\n            return;\\r\\n        }\\r\\n\\r\\n        reward = Math.min(remainingRewards, reward);\\r\\n        userStakeTimes[msg.sender] = block.timestamp;\\r\\n        userTotalRewards[msg.sender] = userTotalRewards[msg.sender] + reward;\\r\\n        IGSVEVault(GSVEVault).transferToken(GSVEToken, msg.sender, reward);\\r\\n        emit Reward(msg.sender, reward);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev A function that allows a user to burn some GSVE to avoid paying the protocol mint/wrap fee.\\r\\n     */\\r\\n    function burnDiscountedMinting(address gasTokenAddress, uint256 value) public nonReentrant() {\\r\\n        uint256 mintType = _mintingType[gasTokenAddress];\\r\\n        require(mintType != 0, \\\"GSVE: Unsupported Token\\\");\\r\\n        IGSVEProtocolToken(GSVEToken).burnFrom(msg.sender, burnToSaveFee);\\r\\n\\r\\n        if(mintType == 1){\\r\\n            convenientMinting(gasTokenAddress, value, 0);\\r\\n        }\\r\\n        else if (mintType == 2){\\r\\n            IGasTokenMint(gasTokenAddress).discountedMint(value, 0, msg.sender);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev A function that allows a user to benefit from a lower protocol fee, based on the stake that they have.\\r\\n     */\\r\\n    function discountedMinting(address gasTokenAddress, uint256 value) public nonReentrant(){\\r\\n        uint256 mintType = _mintingType[gasTokenAddress];\\r\\n        require(mintType != 0, \\\"GSVE: Unsupported Token\\\");\\r\\n        require(userStakes[msg.sender] >= tierThreshholds[1] , \\\"GSVE: User has not staked enough to discount\\\");\\r\\n\\r\\n        if(mintType == 1){\\r\\n            convenientMinting(gasTokenAddress, value, 1);\\r\\n        }\\r\\n        else if (mintType == 2){\\r\\n            IGasTokenMint(gasTokenAddress).discountedMint(value, 1, msg.sender);\\r\\n        }\\r\\n    }\\r\\n    \\r\\n    /**\\r\\n     * @dev A function that allows a user to be rewarded tokens by minting or wrapping\\r\\n     * they pay full fees for this operation.\\r\\n     */\\r\\n    function rewardedMinting(address gasTokenAddress, uint256 value) public nonReentrant(){\\r\\n        uint256 mintType = _mintingType[gasTokenAddress];\\r\\n        require(mintType != 0, \\\"GSVE: Unsupported Token\\\");\\r\\n        require(totalRewards() > 0, \\\"GSVE: contract has ran out of rewards to give\\\");\\r\\n        require(rewardsEnabled, \\\"GSVE: Rewards are not enabled\\\");\\r\\n        if(mintType == 1){\\r\\n            convenientMinting(gasTokenAddress, value, 2);\\r\\n        }\\r\\n        else if (mintType == 2){\\r\\n            IGasTokenMint(gasTokenAddress).discountedMint(value, 2, msg.sender);\\r\\n        }\\r\\n\\r\\n        IGSVEVault(GSVEVault).transferToken(GSVEToken, msg.sender, mintingReward);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev A function that allows us to mint non-wrapped tokens from the convenience of this smart contract.\\r\\n     * taking a portion of portion of the minted tokens as payment for this convenience.\\r\\n     */\\r\\n    function convenientMinting(address gasTokenAddress, uint256 value, uint256 fee) internal {\\r\\n        uint256 mintType = _mintingType[gasTokenAddress];\\r\\n        require(mintType == 1, \\\"GSVE: Unsupported Token\\\");\\r\\n\\r\\n        uint256 userTokens = value.sub(fee);\\r\\n        require(userTokens > 0, \\\"GSVE: User attempted to mint too little\\\");\\r\\n        IGasTokenMint(gasTokenAddress).mint(value);\\r\\n        IERC20(gasTokenAddress).transfer(msg.sender, userTokens);\\r\\n        if(fee > 0){\\r\\n            IERC20(gasTokenAddress).transfer(GSVEVault, fee);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    \\r\\n    /**\\r\\n     * @dev public entry to the convenient minting function\\r\\n     */\\r\\n    function mintGasToken(address gasTokenAddress, uint256 value) public {\\r\\n        convenientMinting(gasTokenAddress, value, 2);\\r\\n    }\\r\\n\\r\\n\\r\\n    /**\\r\\n     * @dev A function that allows a user to claim tokens from the pool\\r\\n     * The user burns 1 GSVE for each token they take.\\r\\n     * They are limited to one claim action every 6 hours, and can claim up to 5 tokens per claim.\\r\\n     */\\r\\n    function claimToken(address gasTokenAddress, uint256 value) public nonReentrant() {\\r\\n\\r\\n        bool isClaimable = _claimable[gasTokenAddress];\\r\\n        require(isClaimable, \\\"GSVE: Token not claimable\\\");\\r\\n        require(userStakes[msg.sender] >= tierThreshholds[2] , \\\"GSVE: User has not staked enough to claim from the pool\\\");\\r\\n        require(block.timestamp.sub(userClaimTimes[msg.sender]) > 60 * 60 * 6, \\\"GSVE: User cannot claim the gas tokens twice in 6 hours\\\");\\r\\n\\r\\n        uint256 tokensGiven = value;\\r\\n\\r\\n        uint256 tokensAvailableToClaim = IERC20(gasTokenAddress).balanceOf(GSVEVault);\\r\\n        tokensGiven = Math.min(Math.min(5, tokensAvailableToClaim), tokensGiven);\\r\\n\\r\\n        if(tokensGiven == 0){\\r\\n            return;\\r\\n        }\\r\\n\\r\\n        IGSVEProtocolToken(GSVEToken).burnFrom(msg.sender, tokensGiven * burnToClaimGasTokens);\\r\\n        IGSVEVault(GSVEVault).transferToken(gasTokenAddress, msg.sender, tokensGiven);\\r\\n        userClaimTimes[msg.sender] = block.timestamp;\\r\\n        emit Claimed(msg.sender, gasTokenAddress, tokensGiven);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev A function that allows us to enable gas tokens for use with this contract.\\r\\n     */\\r\\n    function addGasToken(address gasToken, uint256 mintType, bool isClaimable) public onlyOwner{\\r\\n        _mintingType[gasToken] = mintType;\\r\\n        _claimable[gasToken] = isClaimable;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev A function that allows us to easily check claim type of the token.\\r\\n     */\\r\\n    function claimable(address gasToken) public view returns (bool){\\r\\n        return _claimable[gasToken];\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev A function that allows us to check the mint type of the token.\\r\\n     */\\r\\n    function mintingType(address gasToken) public view returns (uint256){\\r\\n        return _mintingType[gasToken];\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev A function that allows us to see the total stake of everyone in the protocol.\\r\\n     */\\r\\n    function totalStaked() public view returns (uint256){\\r\\n        return _totalStaked;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev A function that allows us to see the stake size of a specific staker.\\r\\n     */\\r\\n    function userStakeSize(address user)  public view returns (uint256){\\r\\n        return userStakes[user]; \\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev A function that allows us to see how much rewards the vault has available right now.\\r\\n     */    \\r\\n     function totalRewards()  public view returns (uint256){\\r\\n        return IERC20(GSVEToken).balanceOf(GSVEVault); \\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev A function that allows us to see how much rewards a user has claimed\\r\\n     */\\r\\n    function totalRewardUser(address user)  public view returns (uint256){\\r\\n        return userTotalRewards[user]; \\r\\n    }\\r\\n\\r\\n    /**\\r\\n    * @dev A function that allows us to get a tier threshold\\r\\n    */\\r\\n    function getTierThreshold(uint256 tier)  public view returns (uint256){\\r\\n        return tierThreshholds[tier];\\r\\n    }\\r\\n\\r\\n    /**\\r\\n    * @dev A function that allows us to get the time rewards where enabled\\r\\n    */\\r\\n    function getRewardEnableTime()  public view returns (uint256){\\r\\n        return rewardEnableTime;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n    * @dev A function that allows us to get the time rewards where enabled\\r\\n    */\\r\\n    function getRewardEnabled()  public view returns (bool){\\r\\n        return rewardsEnabled;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n    * @dev A function that allows us to get the burnToSaveFee \\r\\n    */\\r\\n    function getBurnToSaveFee()  public view returns (uint256){\\r\\n        return burnToSaveFee;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n    * @dev A function that allows us to get the burnToClaimGasTokens \\r\\n    */\\r\\n    function getBurnToClaimGasTokens()  public view returns (uint256){\\r\\n        return burnToClaimGasTokens;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n    * @dev A function that allows us to get the burnToClaimGasTokens \\r\\n    */\\r\\n    function getMintingReward()  public view returns (uint256){\\r\\n        return mintingReward;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n    * @dev A function that allows us to get the stake times\\r\\n    */\\r\\n    function getStakeTimes(address staker)  public view returns (uint256){\\r\\n        return userStakeTimes[staker];\\r\\n    }\\r\\n\\r\\n    /**\\r\\n    * @dev A function that allows us to get the claim times\\r\\n    */\\r\\n    function getClaimTimes(address staker)  public view returns (uint256){\\r\\n        return userClaimTimes[staker];\\r\\n    }\\r\\n    \\r\\n    event Claimed(address indexed _from, address indexed _token, uint256 _value);\\r\\n\\r\\n    event Reward(address indexed _from, uint256 _value);\\r\\n\\r\\n    event Staked(address indexed _from, uint256 _value);\\r\\n\\r\\n    event Unstaked(address indexed _from, uint256 _value);\\r\\n\\r\\n    event TierUpdate(uint256 _tier, uint256 _value);\\r\\n\\r\\n    event protocolUpdated(bytes32 _type, uint256 _value);\\r\\n}\\r\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor () {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/security/ReentrancyGuard.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor () {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and make it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/math/Math.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a >= b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow, so we distribute\\n        return (a / 2) + (b / 2) + ((a % 2 + b % 2) / 2);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/math/SafeMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is no longer needed starting with Solidity 0.8. The compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"remappings\": [],\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"evmVersion\": \"istanbul\",\r\n    \"libraries\": {},\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_vaultAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"wchi\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"wgst2\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"wgst1\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Claimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Reward\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Staked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_tier\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"TierUpdate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Unstaked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"_type\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"protocolUpdated\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"gasToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"mintType\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isClaimable\",\"type\":\"bool\"}],\"name\":\"addGasToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"gasTokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"burnDiscountedMinting\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"rewardedAddress\",\"type\":\"address\"}],\"name\":\"calculateStakeReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"gasTokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"claimToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"gasToken\",\"type\":\"address\"}],\"name\":\"claimable\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"collectReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"disableRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"gasTokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"discountedMinting\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"enableRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBurnToClaimGasTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBurnToSaveFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"}],\"name\":\"getClaimTimes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMintingReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRewardEnableTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRewardEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"}],\"name\":\"getStakeTimes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tier\",\"type\":\"uint256\"}],\"name\":\"getTierThreshold\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"gasTokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"mintGasToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"gasToken\",\"type\":\"address\"}],\"name\":\"mintingType\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"gasTokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"rewardedMinting\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"stake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"totalRewardUser\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalStaked\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"ownedContract\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnershipOfSubcontract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unstake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"updateBurnClaimFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"updateBurnSaveFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"updateMintingReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tier\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"updateTier\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"userStakeSize\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"GSVECore","CompilerVersion":"v0.8.4+commit.c7e474f2","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000000000000000e01999859eebfe39ecd039f67a540000000000000000000000009e4309be6ac12de5a9a979047ff426f5aa73d90800000000000000000000000047536fd7c0cdb9338ce495694be6463a303145820000000000000000000000001f4dd5a297ca59cc086f6f24c36a8a032c4ddbad000000000000000000000000e39b8dc27ffdca3f2591eb801c7548fce7d87d72","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}