{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/Whitelist.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: NO-LICENSE\\n\\npragma solidity ^0.8.4;\\n\\nimport \\\"../interfaces/IWhitelist.sol\\\";\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IWhitelist} interface.\\n *\\n * This implementation is used for a general whitelisting of address that\\n * can take part in the Bollycoin eco-system.\\n *\\n * It provides flexibility and buffers the platform from bad actors.\\n *\\n * Note: Governed by a single governance address.\\n */\\n\\ncontract WhiteList is IWhiteList, Context {\\n    address public governor;\\n\\n    /**\\n     * @dev returns whether an address is whitelisted.\\n     */\\n    mapping(address => bool) private _whitelisted;\\n\\n    /**\\n     * @dev validates the `caller`\\n     *\\n     * If `caller` is not the `governor` returns an error.\\n     */\\n    modifier onlyGovernor() {\\n        require(msgSender() == governor, \\\"Error: access denied.\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Sets the values for {governor}.\\n     *\\n     * To change the governor in later stage use the transferGovernor\\n     * function.\\n     */\\n    constructor() {\\n        governor = msgSender();\\n    }\\n\\n    /**\\n     * @dev Emitted when governor is changed from one account(`from`)\\n     * to another account(`to`)\\n     *\\n     * Note: `from` and `to` cannot be a zero address.\\n     */\\n    event RevokeAccess(address indexed from, address indexed to);\\n\\n    /**\\n     * @dev Emitted when an address is whitelisted.\\n     */\\n    event Whitelist(address indexed whitelistedAccount);\\n\\n    /**\\n     * @dev Emitted when an account is blacklisted.\\n     */\\n    event Blacklist(address indexed blacklistedAccount);\\n\\n    /**\\n     * @dev transfers the control of whitelisting to another wallet.\\n     *\\n     * Requirements:\\n     * `_newGovernor` should not be a zero address.\\n     * `caller` should be the current governor.\\n     *\\n     * returns a bool to represent the status of the transaction.\\n     */\\n    function transferGovernor(address _newGovernor)\\n        public\\n        virtual\\n        override\\n        onlyGovernor\\n        returns (bool)\\n    {\\n        require(\\n            _newGovernor != address(0),\\n            \\\"Error: governor cannot be zero address\\\"\\n        );\\n\\n        address oldGovernor = governor;\\n        governor = _newGovernor;\\n\\n        emit RevokeAccess(oldGovernor, _newGovernor);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev whitelist the `_user` for purchase.\\n     *\\n     * Requirements:\\n     * `_user` should not be a zero address.\\n     * `_user` should not be already whitelisted.\\n     *\\n     * returns a bool to represent the status of the transaction.\\n     */\\n    function whitelist(address _user)\\n        public\\n        virtual\\n        override\\n        onlyGovernor\\n        returns (bool)\\n    {\\n        require(_user != address(0), \\\"Error: cannot whitelist zero address\\\");\\n\\n        _whitelisted[_user] = true;\\n\\n        emit Whitelist(_user);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev blacklists the `user` from sale.\\n     *\\n     * Requirements:\\n     * `_user` should be whitelisted before.\\n     * `_user` cannot be a zero address.\\n     *\\n     * returns a bool to represent the status of the transaction.\\n     */\\n    function blacklist(address _user)\\n        public\\n        virtual\\n        override\\n        onlyGovernor\\n        returns (bool)\\n    {\\n        require(_user != address(0), \\\"Error: cannot blacklist zero address\\\");\\n\\n        _whitelisted[_user] = false;\\n\\n        emit Blacklist(_user);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev returns a bool to represent the whitelisting status of a wallet.\\n     *\\n     * true - address is whitelisted and can purchase tokens.\\n     * false - prevented from sale.\\n     */\\n    function whitelisted(address _user) public view override returns (bool) {\\n        return (_whitelisted[_user]);\\n    }\\n}\\n\"\r\n    },\r\n    \"interfaces/IWhitelist.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\n\\npragma solidity ^0.8.4;\\n\\n/**\\n * @dev interface of Whitelist Contract.\\n */\\n\\ninterface IWhiteList {\\n    /**\\n     * @dev whitelist the `_user` for purchase.\\n     *\\n     * Requirements:\\n     * `_user` should not be a zero address.\\n     * `_user` should not be already whitelisted.\\n     *\\n     * returns a bool to represent the status of the transaction.\\n     */\\n    function whitelist(address _user) external returns (bool);\\n\\n    /**\\n     * @dev blacklists the `user` from sale.\\n     *\\n     * Requirements:\\n     * `_user` should be whitelisted before.\\n     * `_user` cannot be a zero address.\\n     *\\n     * returns a bool to represent the status of the transaction.\\n     */\\n    function blacklist(address _user) external returns (bool);\\n\\n    /**\\n     * @dev transfers the control of whitelisting to another wallet.\\n     *\\n     * Requirements:\\n     * `_newGovernor` should not be a zero address.\\n     * `caller` should be the current governor.\\n     *\\n     * returns a bool to represent the status of the transaction.\\n     */\\n    function transferGovernor(address _newGovernor) external returns (bool);\\n\\n    /**\\n     * @dev returns a bool to represent the whitelisting status of a wallet.\\n     *\\n     * true - address is whitelisted and can purchase tokens.\\n     * false - prevented from sale.\\n     */\\n    function whitelisted(address _user) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: ISC\\n\\npragma solidity ^0.8.4;\\n\\n/**\\n * Library Like Contract. Not Required for deployment\\n */\\nabstract contract Context {\\n\\n    function msgSender() internal view virtual returns(address) {\\n        return msg.sender;\\n    }\\n\\n    function msgData() internal view virtual returns(bytes calldata) {\\n        this;\\n        return msg.data;\\n    }\\n\\n    function msgValue() internal view virtual returns(uint256) {\\n        return msg.value;\\n    }\\n\\n}\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": false,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}","ABI":"[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"blacklistedAccount\",\"type\":\"address\"}],\"name\":\"Blacklist\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"RevokeAccess\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"whitelistedAccount\",\"type\":\"address\"}],\"name\":\"Whitelist\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"blacklist\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"governor\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newGovernor\",\"type\":\"address\"}],\"name\":\"transferGovernor\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"whitelist\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"whitelisted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"WhiteList","CompilerVersion":"v0.8.4+commit.c7e474f2","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}