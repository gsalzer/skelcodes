{"status":"1","message":"OK","result":[{"SourceCode":"// File: openzeppelin-solidity/contracts/token/ERC20/IERC20.sol\r\n\r\n// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.6.0;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/math/SafeMath.sol\r\n\r\n// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.6.0;\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts with custom message when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n// File: contracts/CloneLib.sol\r\n\r\npragma solidity 0.6.6;\r\n//solhint-disable avoid-low-level-calls\r\n//solhint-disable no-inline-assembly\r\n\r\nlibrary CloneLib {\r\n    /**\r\n     * Returns bytecode of a new contract that clones template\r\n     * Adapted from https://raw.githubusercontent.com/OpenZeppelin/openzeppelin-sdk/master/packages/lib/contracts/upgradeability/ProxyFactory.sol\r\n     * Which in turn adapted it from https://github.com/optionality/clone-factory/blob/32782f82dfc5a00d103a7e61a17a5dedbd1e8e9d/contracts/CloneFactory.sol\r\n     */\r\n    function cloneBytecode(address template) internal pure returns (bytes memory code) {\r\n        bytes20 targetBytes = bytes20(template);\r\n        assembly {\r\n            code := mload(0x40)\r\n            mstore(0x40, add(code, 0x57)) // code length is 0x37 plus 0x20 for bytes length field. update free memory pointer\r\n            mstore(code, 0x37) // store length in first 32 bytes\r\n\r\n            // store clone source address after first 32 bytes\r\n            mstore(add(code, 0x20), 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000000000000000000000)\r\n            mstore(add(code, 0x34), targetBytes)\r\n            mstore(add(code, 0x48), 0x5af43d82803e903d91602b57fd5bf30000000000000000000000000000000000)\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Predict the CREATE2 address.\r\n     * See https://github.com/ethereum/EIPs/blob/master/EIPS/eip-1014.md for calculation details\r\n     */\r\n    function predictCloneAddressCreate2(\r\n        address template,\r\n        address deployer,\r\n        bytes32 salt\r\n    ) internal pure returns (address proxy) {\r\n        bytes32 codehash = keccak256(cloneBytecode(template));\r\n        return address(uint160(uint256(keccak256(abi.encodePacked(\r\n            bytes1(0xff),\r\n            deployer,\r\n            salt,\r\n            codehash\r\n        )))));\r\n    }\r\n\r\n    /**\r\n     * Deploy given bytecode using CREATE2, address can be known in advance, get it from predictCloneAddressCreate2\r\n     * Optional 2-step deployment first runs the constructor, then supplies an initialization function call.\r\n     * @param code EVM bytecode that would be used in a contract deploy transaction (to=null)\r\n     * @param initData if non-zero, send an initialization function call in the same tx with given tx input data (e.g. encoded Solidity function call)\r\n     */\r\n    function deployCodeAndInitUsingCreate2(\r\n        bytes memory code,\r\n        bytes memory initData,\r\n        bytes32 salt\r\n    ) internal returns (address payable proxy) {\r\n        uint256 len = code.length;\r\n        assembly {\r\n            proxy := create2(0, add(code, 0x20), len, salt)\r\n        }\r\n        require(proxy != address(0), \"error_alreadyCreated\");\r\n        if (initData.length != 0) {\r\n            (bool success, ) = proxy.call(initData);\r\n            require(success, \"error_initialization\");\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Deploy given bytecode using old-style CREATE, address is hash(sender, nonce)\r\n     * Optional 2-step deployment first runs the constructor, then supplies an initialization function call.\r\n     * @param code EVM bytecode that would be used in a contract deploy transaction (to=null)\r\n     * @param initData if non-zero, send an initialization function call in the same tx with given tx input data (e.g. encoded Solidity function call)\r\n     */\r\n    function deployCodeAndInitUsingCreate(\r\n        bytes memory code,\r\n        bytes memory initData\r\n    ) internal returns (address payable proxy) {\r\n        uint256 len = code.length;\r\n        assembly {\r\n            proxy := create(0, add(code, 0x20), len)\r\n        }\r\n        require(proxy != address(0), \"error_create\");\r\n        if (initData.length != 0) {\r\n            (bool success, ) = proxy.call(initData);\r\n            require(success, \"error_initialization\");\r\n        }\r\n    }\r\n}\r\n\r\n// File: contracts/IAMB.sol\r\n\r\npragma solidity 0.6.6;\r\n\r\n// Tokenbridge Arbitrary Message Bridge\r\ninterface IAMB {\r\n\r\n    //only on mainnet AMB:\r\n    function executeSignatures(bytes calldata _data, bytes calldata _signatures) external;\r\n\r\n    function messageSender() external view returns (address);\r\n\r\n    function maxGasPerTx() external view returns (uint256);\r\n\r\n    function transactionHash() external view returns (bytes32);\r\n\r\n    function messageId() external view returns (bytes32);\r\n\r\n    function messageSourceChainId() external view returns (bytes32);\r\n\r\n    function messageCallStatus(bytes32 _messageId) external view returns (bool);\r\n\r\n    function requiredSignatures() external view returns (uint256);\r\n    function numMessagesSigned(bytes32 _message) external view returns (uint256);\r\n    function signature(bytes32 _hash, uint256 _index) external view returns (bytes memory);\r\n    function message(bytes32 _hash) external view returns (bytes memory);\r\n    function failedMessageDataHash(bytes32 _messageId)\r\n        external\r\n        view\r\n        returns (bytes32);\r\n\r\n    function failedMessageReceiver(bytes32 _messageId)\r\n        external\r\n        view\r\n        returns (address);\r\n\r\n    function failedMessageSender(bytes32 _messageId)\r\n        external\r\n        view\r\n        returns (address);\r\n\r\n    function requireToPassMessage(\r\n        address _contract,\r\n        bytes calldata _data,\r\n        uint256 _gas\r\n    ) external returns (bytes32);\r\n}\r\n\r\n// File: contracts/ITokenMediator.sol\r\n\r\npragma solidity 0.6.6;\r\n\r\ninterface ITokenMediator {\r\n    function bridgeContract() external view returns (address);\r\n\r\n    //returns:\r\n    //Multi-token mediator: 0xb1516c26 == bytes4(keccak256(abi.encodePacked(\"multi-erc-to-erc-amb\")))\r\n    //Single-token mediator: 0x76595b56 ==  bytes4(keccak256(abi.encodePacked(\"erc-to-erc-amb\")))\r\n    function getBridgeMode() external pure returns (bytes4 _data);\r\n\r\n    function relayTokensAndCall(address token, address _receiver, uint256 _value, bytes calldata _data) external;\r\n}\r\n\r\n// File: contracts/FactoryConfig.sol\r\n\r\npragma solidity 0.6.6;\r\n\r\ninterface FactoryConfig {\r\n    function currentToken() external view returns (address);\r\n    function currentMediator() external view returns (address);\r\n}\r\n\r\n// File: contracts/DataUnionFactoryMainnet.sol\r\n\r\npragma solidity 0.6.6;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\ninterface IDataUnionMainnet {\r\n    function sidechainAddress() external view returns (address proxy);\r\n}\r\n\r\ncontract DataUnionFactoryMainnet {\r\n    event MainnetDUCreated(address indexed mainnet, address indexed sidechain, address indexed owner, address template);\r\n\r\n    address public dataUnionMainnetTemplate;\r\n\r\n    // needed to calculate address of sidechain contract\r\n    address public dataUnionSidechainTemplate;\r\n    address public dataUnionSidechainFactory;\r\n    uint256 public sidechainMaxGas;\r\n    FactoryConfig public migrationManager;\r\n\r\n    constructor(address _migrationManager,\r\n                address _dataUnionMainnetTemplate,\r\n                address _dataUnionSidechainTemplate,\r\n                address _dataUnionSidechainFactory,\r\n                uint256 _sidechainMaxGas)\r\n        public\r\n    {\r\n        migrationManager = FactoryConfig(_migrationManager);\r\n        dataUnionMainnetTemplate = _dataUnionMainnetTemplate;\r\n        dataUnionSidechainTemplate = _dataUnionSidechainTemplate;\r\n        dataUnionSidechainFactory = _dataUnionSidechainFactory;\r\n        sidechainMaxGas = _sidechainMaxGas;\r\n    }\r\n\r\n    function amb() public view returns (IAMB) {\r\n        return IAMB(ITokenMediator(migrationManager.currentMediator()).bridgeContract());\r\n    }\r\n \r\n    function token() public view returns (address) {\r\n        return migrationManager.currentToken();\r\n    }\r\n\r\n\r\n    function sidechainAddress(address mainetAddress)\r\n        public view\r\n        returns (address)\r\n    {\r\n        return CloneLib.predictCloneAddressCreate2(\r\n            dataUnionSidechainTemplate,\r\n            dataUnionSidechainFactory,\r\n            bytes32(uint256(mainetAddress))\r\n        );\r\n    }\r\n    /*\r\n\r\n    */\r\n    function mainnetAddress(address deployer, string memory name)\r\n        public view\r\n        returns (address)\r\n    {\r\n        bytes32 salt = keccak256(abi.encode(bytes(name), deployer));\r\n        return CloneLib.predictCloneAddressCreate2(\r\n            dataUnionMainnetTemplate,\r\n            address(this),\r\n            salt\r\n        );\r\n    }\r\n\r\n\r\n/*\r\n    function initialize(\r\n        address _token,\r\n        address _tokenMediator,\r\n        address _sidechainDataUnionFactory,\r\n        uint256 _sidechainMaxgas,\r\n        address _sidechainTemplateDataUnion,\r\n        address _owner,\r\n        uint256 adminFeeFraction,\r\n        address[] memory agents\r\n    )  public {\r\n    users can only deploy with salt = their key.\r\n*/\r\n    function deployNewDataUnion(address owner, uint256 adminFeeFraction, address[] memory agents, string memory name)\r\n        public\r\n        returns (address)\r\n    {\r\n        bytes32 salt = keccak256(abi.encode(bytes(name), msg.sender));\r\n        bytes memory data = abi.encodeWithSignature(\"initialize(address,address,uint256,address,address,uint256,address[])\",\r\n            migrationManager,\r\n            dataUnionSidechainFactory,\r\n            sidechainMaxGas,\r\n            dataUnionSidechainTemplate,\r\n            owner,\r\n            adminFeeFraction,\r\n            agents\r\n        );\r\n        address du = CloneLib.deployCodeAndInitUsingCreate2(CloneLib.cloneBytecode(dataUnionMainnetTemplate), data, salt);\r\n        emit MainnetDUCreated(du, sidechainAddress(du), owner, dataUnionMainnetTemplate);\r\n        return du;\r\n    }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_migrationManager\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_dataUnionMainnetTemplate\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_dataUnionSidechainTemplate\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_dataUnionSidechainFactory\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_sidechainMaxGas\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"mainnet\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sidechain\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"template\",\"type\":\"address\"}],\"name\":\"MainnetDUCreated\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"amb\",\"outputs\":[{\"internalType\":\"contract IAMB\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dataUnionMainnetTemplate\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dataUnionSidechainFactory\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dataUnionSidechainTemplate\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"adminFeeFraction\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"agents\",\"type\":\"address[]\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"}],\"name\":\"deployNewDataUnion\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"deployer\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"}],\"name\":\"mainnetAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"migrationManager\",\"outputs\":[{\"internalType\":\"contract FactoryConfig\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"mainetAddress\",\"type\":\"address\"}],\"name\":\"sidechainAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sidechainMaxGas\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"DataUnionFactoryMainnet","CompilerVersion":"v0.6.6+commit.6c089d02","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000f32219e61c840300d1b35c939ed9e54a861633340000000000000000000000005fe790e3751dd775cb92e9086acd34a2adeb8c7b000000000000000000000000f1e9d6e254bea3f0129018aca1a50aecb7d528be0000000000000000000000001b55587beea0b5bc96bb2ada56bd692870522e9f00000000000000000000000000000000000000000000000000000000001e8480","EVMVersion":"istanbul","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"ipfs://702891fcf8408669cbdee25db30a65a167e3f515672e7418ff79ea04b8066010"}]}