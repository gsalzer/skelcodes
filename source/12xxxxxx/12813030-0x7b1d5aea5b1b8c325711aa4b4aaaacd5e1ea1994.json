{"status":"1","message":"OK","result":[{"SourceCode":"// Sources flattened with hardhat v2.4.0 https://hardhat.org\r\n\r\n// File contracts/external/polygon/lib/RLPReader.sol\r\n\r\n// Copied mostly from Polygon demo FxTunnel repo: https://github.com/jdkanani/fx-portal.\r\n// There are two modifications such that this contract compiles with Solidity v8:\r\n// - Line 86: cannot convert directly from uint256 --> address\r\n// - Line 226: cannot rely on wrapping arithmetic, must explicitly catch underflow/overflow with an unchecked{...}\r\n//   statement\r\n// More details on Solidity v0.8.0 breaking changes here:\r\n// https://docs.soliditylang.org/en/v0.8.4/080-breaking-changes.html#new-restrictions\r\npragma solidity ^0.8.0;\r\n\r\nlibrary RLPReader {\r\n    uint8 constant STRING_SHORT_START = 0x80;\r\n    uint8 constant STRING_LONG_START = 0xb8;\r\n    uint8 constant LIST_SHORT_START = 0xc0;\r\n    uint8 constant LIST_LONG_START = 0xf8;\r\n    uint8 constant WORD_SIZE = 32;\r\n\r\n    struct RLPItem {\r\n        uint256 len;\r\n        uint256 memPtr;\r\n    }\r\n\r\n    /*\r\n     * @param item RLP encoded bytes\r\n     */\r\n    function toRlpItem(bytes memory item) internal pure returns (RLPItem memory) {\r\n        require(item.length > 0, \"RLPReader: INVALID_BYTES_LENGTH\");\r\n        uint256 memPtr;\r\n        assembly {\r\n            memPtr := add(item, 0x20)\r\n        }\r\n\r\n        return RLPItem(item.length, memPtr);\r\n    }\r\n\r\n    /*\r\n     * @param item RLP encoded list in bytes\r\n     */\r\n    function toList(RLPItem memory item) internal pure returns (RLPItem[] memory) {\r\n        require(isList(item), \"RLPReader: ITEM_NOT_LIST\");\r\n\r\n        uint256 items = numItems(item);\r\n        RLPItem[] memory result = new RLPItem[](items);\r\n        uint256 listLength = _itemLength(item.memPtr);\r\n        require(listLength == item.len, \"RLPReader: LIST_DECODED_LENGTH_MISMATCH\");\r\n\r\n        uint256 memPtr = item.memPtr + _payloadOffset(item.memPtr);\r\n        uint256 dataLen;\r\n        for (uint256 i = 0; i < items; i++) {\r\n            dataLen = _itemLength(memPtr);\r\n            result[i] = RLPItem(dataLen, memPtr);\r\n            memPtr = memPtr + dataLen;\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    // @return indicator whether encoded payload is a list. negate this function call for isData.\r\n    function isList(RLPItem memory item) internal pure returns (bool) {\r\n        uint8 byte0;\r\n        uint256 memPtr = item.memPtr;\r\n        assembly {\r\n            byte0 := byte(0, mload(memPtr))\r\n        }\r\n\r\n        if (byte0 < LIST_SHORT_START) return false;\r\n        return true;\r\n    }\r\n\r\n    /** RLPItem conversions into data types **/\r\n\r\n    // @returns raw rlp encoding in bytes\r\n    function toRlpBytes(RLPItem memory item) internal pure returns (bytes memory) {\r\n        bytes memory result = new bytes(item.len);\r\n\r\n        uint256 ptr;\r\n        assembly {\r\n            ptr := add(0x20, result)\r\n        }\r\n\r\n        copy(item.memPtr, ptr, item.len);\r\n        return result;\r\n    }\r\n\r\n    function toAddress(RLPItem memory item) internal pure returns (address) {\r\n        require(!isList(item), \"RLPReader: DECODING_LIST_AS_ADDRESS\");\r\n        // 1 byte for the length prefix\r\n        require(item.len == 21, \"RLPReader: INVALID_ADDRESS_LENGTH\");\r\n\r\n        return address(uint160(toUint(item)));\r\n    }\r\n\r\n    function toUint(RLPItem memory item) internal pure returns (uint256) {\r\n        require(!isList(item), \"RLPReader: DECODING_LIST_AS_UINT\");\r\n        require(item.len <= 33, \"RLPReader: INVALID_UINT_LENGTH\");\r\n\r\n        uint256 itemLength = _itemLength(item.memPtr);\r\n        require(itemLength == item.len, \"RLPReader: UINT_DECODED_LENGTH_MISMATCH\");\r\n\r\n        uint256 offset = _payloadOffset(item.memPtr);\r\n        uint256 len = item.len - offset;\r\n        uint256 result;\r\n        uint256 memPtr = item.memPtr + offset;\r\n        assembly {\r\n            result := mload(memPtr)\r\n\r\n            // shfit to the correct location if neccesary\r\n            if lt(len, 32) {\r\n                result := div(result, exp(256, sub(32, len)))\r\n            }\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    // enforces 32 byte length\r\n    function toUintStrict(RLPItem memory item) internal pure returns (uint256) {\r\n        uint256 itemLength = _itemLength(item.memPtr);\r\n        require(itemLength == item.len, \"RLPReader: UINT_STRICT_DECODED_LENGTH_MISMATCH\");\r\n        // one byte prefix\r\n        require(item.len == 33, \"RLPReader: INVALID_UINT_STRICT_LENGTH\");\r\n\r\n        uint256 result;\r\n        uint256 memPtr = item.memPtr + 1;\r\n        assembly {\r\n            result := mload(memPtr)\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    function toBytes(RLPItem memory item) internal pure returns (bytes memory) {\r\n        uint256 listLength = _itemLength(item.memPtr);\r\n        require(listLength == item.len, \"RLPReader: BYTES_DECODED_LENGTH_MISMATCH\");\r\n        uint256 offset = _payloadOffset(item.memPtr);\r\n\r\n        uint256 len = item.len - offset; // data length\r\n        bytes memory result = new bytes(len);\r\n\r\n        uint256 destPtr;\r\n        assembly {\r\n            destPtr := add(0x20, result)\r\n        }\r\n\r\n        copy(item.memPtr + offset, destPtr, len);\r\n        return result;\r\n    }\r\n\r\n    /*\r\n     * Private Helpers\r\n     */\r\n\r\n    // @return number of payload items inside an encoded list.\r\n    function numItems(RLPItem memory item) private pure returns (uint256) {\r\n        // add `isList` check if `item` is expected to be passsed without a check from calling function\r\n        // require(isList(item), \"RLPReader: NUM_ITEMS_NOT_LIST\");\r\n\r\n        uint256 count = 0;\r\n        uint256 currPtr = item.memPtr + _payloadOffset(item.memPtr);\r\n        uint256 endPtr = item.memPtr + item.len;\r\n        while (currPtr < endPtr) {\r\n            currPtr = currPtr + _itemLength(currPtr); // skip over an item\r\n            require(currPtr <= endPtr, \"RLPReader: NUM_ITEMS_DECODED_LENGTH_MISMATCH\");\r\n            count++;\r\n        }\r\n\r\n        return count;\r\n    }\r\n\r\n    // @return entire rlp item byte length\r\n    function _itemLength(uint256 memPtr) private pure returns (uint256) {\r\n        uint256 itemLen;\r\n        uint256 byte0;\r\n        assembly {\r\n            byte0 := byte(0, mload(memPtr))\r\n        }\r\n\r\n        if (byte0 < STRING_SHORT_START) itemLen = 1;\r\n        else if (byte0 < STRING_LONG_START) itemLen = byte0 - STRING_SHORT_START + 1;\r\n        else if (byte0 < LIST_SHORT_START) {\r\n            assembly {\r\n                let byteLen := sub(byte0, 0xb7) // # of bytes the actual length is\r\n                memPtr := add(memPtr, 1) // skip over the first byte\r\n\r\n                /* 32 byte word size */\r\n                let dataLen := div(mload(memPtr), exp(256, sub(32, byteLen))) // right shifting to get the len\r\n                itemLen := add(dataLen, add(byteLen, 1))\r\n            }\r\n        } else if (byte0 < LIST_LONG_START) {\r\n            itemLen = byte0 - LIST_SHORT_START + 1;\r\n        } else {\r\n            assembly {\r\n                let byteLen := sub(byte0, 0xf7)\r\n                memPtr := add(memPtr, 1)\r\n\r\n                let dataLen := div(mload(memPtr), exp(256, sub(32, byteLen))) // right shifting to the correct length\r\n                itemLen := add(dataLen, add(byteLen, 1))\r\n            }\r\n        }\r\n\r\n        return itemLen;\r\n    }\r\n\r\n    // @return number of bytes until the data\r\n    function _payloadOffset(uint256 memPtr) private pure returns (uint256) {\r\n        uint256 byte0;\r\n        assembly {\r\n            byte0 := byte(0, mload(memPtr))\r\n        }\r\n\r\n        if (byte0 < STRING_SHORT_START) return 0;\r\n        else if (byte0 < STRING_LONG_START || (byte0 >= LIST_SHORT_START && byte0 < LIST_LONG_START)) return 1;\r\n        else if (byte0 < LIST_SHORT_START)\r\n            // being explicit\r\n            return byte0 - (STRING_LONG_START - 1) + 1;\r\n        else return byte0 - (LIST_LONG_START - 1) + 1;\r\n    }\r\n\r\n    /*\r\n     * @param src Pointer to source\r\n     * @param dest Pointer to destination\r\n     * @param len Amount of memory to copy from the source\r\n     */\r\n    function copy(\r\n        uint256 src,\r\n        uint256 dest,\r\n        uint256 len\r\n    ) private pure {\r\n        if (len == 0) return;\r\n\r\n        // copy as many word sizes as possible\r\n        for (; len >= WORD_SIZE; len -= WORD_SIZE) {\r\n            assembly {\r\n                mstore(dest, mload(src))\r\n            }\r\n\r\n            src += WORD_SIZE;\r\n            dest += WORD_SIZE;\r\n        }\r\n\r\n        unchecked {\r\n            // left over bytes. Mask is used to remove unwanted bytes from the word\r\n            uint256 mask = 256**(WORD_SIZE - len) - 1;\r\n            assembly {\r\n                let srcpart := and(mload(src), not(mask)) // zero out src\r\n                let destpart := and(mload(dest), mask) // retrieve the bytes\r\n                mstore(dest, or(destpart, srcpart))\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n\r\n// File contracts/external/polygon/lib/MerklePatriciaProof.sol\r\n\r\n// Copied with no modifications from Polygon demo FxTunnel repo: https://github.com/jdkanani/fx-portal\r\n// except bumping version from 0.7.3 --> 0.8\r\npragma solidity ^0.8.0;\r\n\r\nlibrary MerklePatriciaProof {\r\n    /*\r\n     * @dev Verifies a merkle patricia proof.\r\n     * @param value The terminating value in the trie.\r\n     * @param encodedPath The path in the trie leading to value.\r\n     * @param rlpParentNodes The rlp encoded stack of nodes.\r\n     * @param root The root hash of the trie.\r\n     * @return The boolean validity of the proof.\r\n     */\r\n    function verify(\r\n        bytes memory value,\r\n        bytes memory encodedPath,\r\n        bytes memory rlpParentNodes,\r\n        bytes32 root\r\n    ) internal pure returns (bool) {\r\n        RLPReader.RLPItem memory item = RLPReader.toRlpItem(rlpParentNodes);\r\n        RLPReader.RLPItem[] memory parentNodes = RLPReader.toList(item);\r\n\r\n        bytes memory currentNode;\r\n        RLPReader.RLPItem[] memory currentNodeList;\r\n\r\n        bytes32 nodeKey = root;\r\n        uint256 pathPtr = 0;\r\n\r\n        bytes memory path = _getNibbleArray(encodedPath);\r\n        if (path.length == 0) {\r\n            return false;\r\n        }\r\n\r\n        for (uint256 i = 0; i < parentNodes.length; i++) {\r\n            if (pathPtr > path.length) {\r\n                return false;\r\n            }\r\n\r\n            currentNode = RLPReader.toRlpBytes(parentNodes[i]);\r\n            if (nodeKey != keccak256(currentNode)) {\r\n                return false;\r\n            }\r\n            currentNodeList = RLPReader.toList(parentNodes[i]);\r\n\r\n            if (currentNodeList.length == 17) {\r\n                if (pathPtr == path.length) {\r\n                    if (keccak256(RLPReader.toBytes(currentNodeList[16])) == keccak256(value)) {\r\n                        return true;\r\n                    } else {\r\n                        return false;\r\n                    }\r\n                }\r\n\r\n                uint8 nextPathNibble = uint8(path[pathPtr]);\r\n                if (nextPathNibble > 16) {\r\n                    return false;\r\n                }\r\n                nodeKey = bytes32(RLPReader.toUintStrict(currentNodeList[nextPathNibble]));\r\n                pathPtr += 1;\r\n            } else if (currentNodeList.length == 2) {\r\n                uint256 traversed = _nibblesToTraverse(RLPReader.toBytes(currentNodeList[0]), path, pathPtr);\r\n                if (pathPtr + traversed == path.length) {\r\n                    //leaf node\r\n                    if (keccak256(RLPReader.toBytes(currentNodeList[1])) == keccak256(value)) {\r\n                        return true;\r\n                    } else {\r\n                        return false;\r\n                    }\r\n                }\r\n\r\n                //extension node\r\n                if (traversed == 0) {\r\n                    return false;\r\n                }\r\n\r\n                pathPtr += traversed;\r\n                nodeKey = bytes32(RLPReader.toUintStrict(currentNodeList[1]));\r\n            } else {\r\n                return false;\r\n            }\r\n        }\r\n    }\r\n\r\n    function _nibblesToTraverse(\r\n        bytes memory encodedPartialPath,\r\n        bytes memory path,\r\n        uint256 pathPtr\r\n    ) private pure returns (uint256) {\r\n        uint256 len = 0;\r\n        // encodedPartialPath has elements that are each two hex characters (1 byte), but partialPath\r\n        // and slicedPath have elements that are each one hex character (1 nibble)\r\n        bytes memory partialPath = _getNibbleArray(encodedPartialPath);\r\n        bytes memory slicedPath = new bytes(partialPath.length);\r\n\r\n        // pathPtr counts nibbles in path\r\n        // partialPath.length is a number of nibbles\r\n        for (uint256 i = pathPtr; i < pathPtr + partialPath.length; i++) {\r\n            bytes1 pathNibble = path[i];\r\n            slicedPath[i - pathPtr] = pathNibble;\r\n        }\r\n\r\n        if (keccak256(partialPath) == keccak256(slicedPath)) {\r\n            len = partialPath.length;\r\n        } else {\r\n            len = 0;\r\n        }\r\n        return len;\r\n    }\r\n\r\n    // bytes b must be hp encoded\r\n    function _getNibbleArray(bytes memory b) internal pure returns (bytes memory) {\r\n        bytes memory nibbles = \"\";\r\n        if (b.length > 0) {\r\n            uint8 offset;\r\n            uint8 hpNibble = uint8(_getNthNibbleOfBytes(0, b));\r\n            if (hpNibble == 1 || hpNibble == 3) {\r\n                nibbles = new bytes(b.length * 2 - 1);\r\n                bytes1 oddNibble = _getNthNibbleOfBytes(1, b);\r\n                nibbles[0] = oddNibble;\r\n                offset = 1;\r\n            } else {\r\n                nibbles = new bytes(b.length * 2 - 2);\r\n                offset = 0;\r\n            }\r\n\r\n            for (uint256 i = offset; i < nibbles.length; i++) {\r\n                nibbles[i] = _getNthNibbleOfBytes(i - offset + 2, b);\r\n            }\r\n        }\r\n        return nibbles;\r\n    }\r\n\r\n    function _getNthNibbleOfBytes(uint256 n, bytes memory str) private pure returns (bytes1) {\r\n        return bytes1(n % 2 == 0 ? uint8(str[n / 2]) / 0x10 : uint8(str[n / 2]) % 0x10);\r\n    }\r\n}\r\n\r\n\r\n// File contracts/external/polygon/lib/Merkle.sol\r\n\r\n// Copied with no modifications from Polygon demo FxTunnel repo: https://github.com/jdkanani/fx-portal\r\n// except bumping version from 0.7.3 --> 0.8\r\npragma solidity ^0.8.0;\r\n\r\nlibrary Merkle {\r\n    function checkMembership(\r\n        bytes32 leaf,\r\n        uint256 index,\r\n        bytes32 rootHash,\r\n        bytes memory proof\r\n    ) internal pure returns (bool) {\r\n        require(proof.length % 32 == 0, \"Invalid proof length\");\r\n        uint256 proofHeight = proof.length / 32;\r\n        // Proof of size n means, height of the tree is n+1.\r\n        // In a tree of height n+1, max #leafs possible is 2 ^ n\r\n        require(index < 2**proofHeight, \"Leaf index is too big\");\r\n\r\n        bytes32 proofElement;\r\n        bytes32 computedHash = leaf;\r\n        for (uint256 i = 32; i <= proof.length; i += 32) {\r\n            assembly {\r\n                proofElement := mload(add(proof, i))\r\n            }\r\n\r\n            if (index % 2 == 0) {\r\n                computedHash = keccak256(abi.encodePacked(computedHash, proofElement));\r\n            } else {\r\n                computedHash = keccak256(abi.encodePacked(proofElement, computedHash));\r\n            }\r\n\r\n            index = index / 2;\r\n        }\r\n        return computedHash == rootHash;\r\n    }\r\n}\r\n\r\n\r\n// File contracts/external/polygon/tunnel/FxBaseRootTunnel.sol\r\n\r\n// Copied with no modifications from Polygon demo FxTunnel repo: https://github.com/jdkanani/fx-portal\r\n// except bumping version from 0.7.3 --> 0.8\r\npragma solidity ^0.8.0;\r\n\r\n\r\n\r\ninterface IFxStateSender {\r\n    function sendMessageToChild(address _receiver, bytes calldata _data) external;\r\n}\r\n\r\ncontract ICheckpointManager {\r\n    struct HeaderBlock {\r\n        bytes32 root;\r\n        uint256 start;\r\n        uint256 end;\r\n        uint256 createdAt;\r\n        address proposer;\r\n    }\r\n\r\n    /**\r\n     * @notice mapping of checkpoint header numbers to block details\r\n     * @dev These checkpoints are submited by plasma contracts\r\n     */\r\n    mapping(uint256 => HeaderBlock) public headerBlocks;\r\n}\r\n\r\nabstract contract FxBaseRootTunnel {\r\n    using RLPReader for bytes;\r\n    using RLPReader for RLPReader.RLPItem;\r\n    using Merkle for bytes32;\r\n\r\n    // keccak256(MessageSent(bytes))\r\n    bytes32 public constant SEND_MESSAGE_EVENT_SIG = 0x8c5261668696ce22758910d05bab8f186d6eb247ceac2af2e82c7dc17669b036;\r\n\r\n    // state sender contract\r\n    IFxStateSender public fxRoot;\r\n    // root chain manager\r\n    ICheckpointManager public checkpointManager;\r\n    // child tunnel contract which receives and sends messages\r\n    address public fxChildTunnel;\r\n\r\n    // storage to avoid duplicate exits\r\n    mapping(bytes32 => bool) public processedExits;\r\n\r\n    constructor(address _checkpointManager, address _fxRoot) {\r\n        checkpointManager = ICheckpointManager(_checkpointManager);\r\n        fxRoot = IFxStateSender(_fxRoot);\r\n    }\r\n\r\n    // set fxChildTunnel if not set already\r\n    function setFxChildTunnel(address _fxChildTunnel) public {\r\n        require(fxChildTunnel == address(0x0), \"FxBaseRootTunnel: CHILD_TUNNEL_ALREADY_SET\");\r\n        fxChildTunnel = _fxChildTunnel;\r\n    }\r\n\r\n    /**\r\n     * @notice Send bytes message to Child Tunnel\r\n     * @param message bytes message that will be sent to Child Tunnel\r\n     * some message examples -\r\n     *   abi.encode(tokenId);\r\n     *   abi.encode(tokenId, tokenMetadata);\r\n     *   abi.encode(messageType, messageData);\r\n     */\r\n    function _sendMessageToChild(bytes memory message) internal {\r\n        fxRoot.sendMessageToChild(fxChildTunnel, message);\r\n    }\r\n\r\n    function _validateAndExtractMessage(bytes memory inputData) internal returns (bytes memory) {\r\n        RLPReader.RLPItem[] memory inputDataRLPList = inputData.toRlpItem().toList();\r\n\r\n        // checking if exit has already been processed\r\n        // unique exit is identified using hash of (blockNumber, branchMask, receiptLogIndex)\r\n        bytes32 exitHash =\r\n            keccak256(\r\n                abi.encodePacked(\r\n                    inputDataRLPList[2].toUint(), // blockNumber\r\n                    // first 2 nibbles are dropped while generating nibble array\r\n                    // this allows branch masks that are valid but bypass exitHash check (changing first 2 nibbles only)\r\n                    // so converting to nibble array and then hashing it\r\n                    MerklePatriciaProof._getNibbleArray(inputDataRLPList[8].toBytes()), // branchMask\r\n                    inputDataRLPList[9].toUint() // receiptLogIndex\r\n                )\r\n            );\r\n        require(processedExits[exitHash] == false, \"FxRootTunnel: EXIT_ALREADY_PROCESSED\");\r\n        processedExits[exitHash] = true;\r\n\r\n        RLPReader.RLPItem[] memory receiptRLPList = inputDataRLPList[6].toBytes().toRlpItem().toList();\r\n        RLPReader.RLPItem memory logRLP =\r\n            receiptRLPList[3].toList()[\r\n                inputDataRLPList[9].toUint() // receiptLogIndex\r\n            ];\r\n\r\n        RLPReader.RLPItem[] memory logRLPList = logRLP.toList();\r\n\r\n        // check child tunnel\r\n        require(fxChildTunnel == RLPReader.toAddress(logRLPList[0]), \"FxRootTunnel: INVALID_FX_CHILD_TUNNEL\");\r\n\r\n        // verify receipt inclusion\r\n        require(\r\n            MerklePatriciaProof.verify(\r\n                inputDataRLPList[6].toBytes(), // receipt\r\n                inputDataRLPList[8].toBytes(), // branchMask\r\n                inputDataRLPList[7].toBytes(), // receiptProof\r\n                bytes32(inputDataRLPList[5].toUint()) // receiptRoot\r\n            ),\r\n            \"FxRootTunnel: INVALID_RECEIPT_PROOF\"\r\n        );\r\n\r\n        // verify checkpoint inclusion\r\n        _checkBlockMembershipInCheckpoint(\r\n            inputDataRLPList[2].toUint(), // blockNumber\r\n            inputDataRLPList[3].toUint(), // blockTime\r\n            bytes32(inputDataRLPList[4].toUint()), // txRoot\r\n            bytes32(inputDataRLPList[5].toUint()), // receiptRoot\r\n            inputDataRLPList[0].toUint(), // headerNumber\r\n            inputDataRLPList[1].toBytes() // blockProof\r\n        );\r\n\r\n        RLPReader.RLPItem[] memory logTopicRLPList = logRLPList[1].toList(); // topics\r\n\r\n        require(\r\n            bytes32(logTopicRLPList[0].toUint()) == SEND_MESSAGE_EVENT_SIG, // topic0 is event sig\r\n            \"FxRootTunnel: INVALID_SIGNATURE\"\r\n        );\r\n\r\n        // received message data\r\n        bytes memory receivedData = logRLPList[2].toBytes();\r\n        bytes memory message = abi.decode(receivedData, (bytes)); // event decodes params again, so decoding bytes to get message\r\n        return message;\r\n    }\r\n\r\n    function _checkBlockMembershipInCheckpoint(\r\n        uint256 blockNumber,\r\n        uint256 blockTime,\r\n        bytes32 txRoot,\r\n        bytes32 receiptRoot,\r\n        uint256 headerNumber,\r\n        bytes memory blockProof\r\n    ) private view returns (uint256) {\r\n        (bytes32 headerRoot, uint256 startBlock, , uint256 createdAt, ) = checkpointManager.headerBlocks(headerNumber);\r\n\r\n        require(\r\n            keccak256(abi.encodePacked(blockNumber, blockTime, txRoot, receiptRoot)).checkMembership(\r\n                blockNumber - startBlock,\r\n                headerRoot,\r\n                blockProof\r\n            ),\r\n            \"FxRootTunnel: INVALID_HEADER\"\r\n        );\r\n        return createdAt;\r\n    }\r\n\r\n    /**\r\n     * @notice receive message from  L2 to L1, validated by proof\r\n     * @dev This function verifies if the transaction actually happened on child chain\r\n     *\r\n     * @param inputData RLP encoded data of the reference tx containing following list of fields\r\n     *  0 - headerNumber - Checkpoint header block number containing the reference tx\r\n     *  1 - blockProof - Proof that the block header (in the child chain) is a leaf in the submitted merkle root\r\n     *  2 - blockNumber - Block number containing the reference tx on child chain\r\n     *  3 - blockTime - Reference tx block time\r\n     *  4 - txRoot - Transactions root of block\r\n     *  5 - receiptRoot - Receipts root of block\r\n     *  6 - receipt - Receipt of the reference transaction\r\n     *  7 - receiptProof - Merkle proof of the reference receipt\r\n     *  8 - branchMask - 32 bits denoting the path of receipt in merkle tree\r\n     *  9 - receiptLogIndex - Log Index to read from the receipt\r\n     */\r\n    function receiveMessage(bytes memory inputData) public virtual {\r\n        bytes memory message = _validateAndExtractMessage(inputData);\r\n        _processMessageFromChild(message);\r\n    }\r\n\r\n    /**\r\n     * @notice Process message received from Child Tunnel\r\n     * @dev function needs to be implemented to handle message as per requirement\r\n     * This is called by onStateReceive function.\r\n     * Since it is called via a system call, any event will not be emitted during its execution.\r\n     * @param message bytes message that was sent from Child Tunnel\r\n     */\r\n    function _processMessageFromChild(bytes memory message) internal virtual;\r\n}\r\n\r\n\r\n// File contracts/oracle/interfaces/FinderInterface.sol\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @title Provides addresses of the live contracts implementing certain interfaces.\r\n * @dev Examples are the Oracle or Store interfaces.\r\n */\r\ninterface FinderInterface {\r\n    /**\r\n     * @notice Updates the address of the contract that implements `interfaceName`.\r\n     * @param interfaceName bytes32 encoding of the interface name that is either changed or registered.\r\n     * @param implementationAddress address of the deployed contract that implements the interface.\r\n     */\r\n    function changeImplementationAddress(bytes32 interfaceName, address implementationAddress) external;\r\n\r\n    /**\r\n     * @notice Gets the address of the contract that implements the given `interfaceName`.\r\n     * @param interfaceName queried interface.\r\n     * @return implementationAddress address of the deployed contract that implements the interface.\r\n     */\r\n    function getImplementationAddress(bytes32 interfaceName) external view returns (address);\r\n}\r\n\r\n\r\n// File contracts/oracle/implementation/Constants.sol\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @title Stores common interface names used throughout the DVM by registration in the Finder.\r\n */\r\nlibrary OracleInterfaces {\r\n    bytes32 public constant Oracle = \"Oracle\";\r\n    bytes32 public constant IdentifierWhitelist = \"IdentifierWhitelist\";\r\n    bytes32 public constant Store = \"Store\";\r\n    bytes32 public constant FinancialContractsAdmin = \"FinancialContractsAdmin\";\r\n    bytes32 public constant Registry = \"Registry\";\r\n    bytes32 public constant CollateralWhitelist = \"CollateralWhitelist\";\r\n    bytes32 public constant OptimisticOracle = \"OptimisticOracle\";\r\n    bytes32 public constant Bridge = \"Bridge\";\r\n    bytes32 public constant GenericHandler = \"GenericHandler\";\r\n}\r\n\r\n\r\n// File contracts/polygon/OracleBaseTunnel.sol\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n/**\r\n * @notice Enforces lifecycle of price requests for deriving contract.\r\n */\r\nabstract contract OracleBaseTunnel {\r\n    enum RequestState { NeverRequested, Requested, Resolved }\r\n\r\n    struct Price {\r\n        RequestState state;\r\n        int256 price;\r\n    }\r\n\r\n    // This value must be <= the Voting contract's `ancillaryBytesLimit` value otherwise it is possible\r\n    // that a price can be requested to this contract successfully, but cannot be resolved by the DVM which refuses\r\n    // to accept a price request made with ancillary data length over a certain size.\r\n    uint256 public constant ancillaryBytesLimit = 8192;\r\n\r\n    // Mapping of encoded price requests {identifier, time, ancillaryData} to Price objects.\r\n    mapping(bytes32 => Price) internal prices;\r\n\r\n    // Finder to provide addresses for DVM system contracts.\r\n    FinderInterface public finder;\r\n\r\n    event PriceRequestAdded(bytes32 indexed identifier, uint256 time, bytes ancillaryData, bytes32 indexed requestHash);\r\n    event PushedPrice(\r\n        bytes32 indexed identifier,\r\n        uint256 time,\r\n        bytes ancillaryData,\r\n        int256 price,\r\n        bytes32 indexed requestHash\r\n    );\r\n\r\n    /**\r\n     * @notice Constructor.\r\n     * @param _finderAddress finder to use to get addresses of DVM contracts.\r\n     */\r\n    constructor(address _finderAddress) {\r\n        finder = FinderInterface(_finderAddress);\r\n    }\r\n\r\n    /**\r\n     * @notice Enqueues a request (if a request isn't already present) for the given (identifier, time,\r\n     * ancillary data) combination. Will only emit an event if the request has never been requested.\r\n     */\r\n    function _requestPrice(\r\n        bytes32 identifier,\r\n        uint256 time,\r\n        bytes memory ancillaryData\r\n    ) internal {\r\n        require(ancillaryData.length <= ancillaryBytesLimit, \"Invalid ancillary data\");\r\n        bytes32 priceRequestId = _encodePriceRequest(identifier, time, ancillaryData);\r\n        Price storage lookup = prices[priceRequestId];\r\n        if (lookup.state == RequestState.NeverRequested) {\r\n            lookup.state = RequestState.Requested;\r\n            emit PriceRequestAdded(identifier, time, ancillaryData, priceRequestId);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @notice Publishes price for a requested query. Will only emit an event if the request has never been resolved.\r\n     */\r\n    function _publishPrice(\r\n        bytes32 identifier,\r\n        uint256 time,\r\n        bytes memory ancillaryData,\r\n        int256 price\r\n    ) internal {\r\n        bytes32 priceRequestId = _encodePriceRequest(identifier, time, ancillaryData);\r\n        Price storage lookup = prices[priceRequestId];\r\n        if (lookup.state == RequestState.Requested) {\r\n            lookup.price = price;\r\n            lookup.state = RequestState.Resolved;\r\n            emit PushedPrice(identifier, time, ancillaryData, lookup.price, priceRequestId);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @notice Returns the convenient way to store price requests, uniquely identified by {identifier, time,\r\n     * ancillaryData }.\r\n     */\r\n    function _encodePriceRequest(\r\n        bytes32 identifier,\r\n        uint256 time,\r\n        bytes memory ancillaryData\r\n    ) internal pure returns (bytes32) {\r\n        return keccak256(abi.encode(identifier, time, ancillaryData));\r\n    }\r\n}\r\n\r\n\r\n// File contracts/oracle/interfaces/OracleAncillaryInterface.sol\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @title Financial contract facing Oracle interface.\r\n * @dev Interface used by financial contracts to interact with the Oracle. Voters will use a different interface.\r\n */\r\nabstract contract OracleAncillaryInterface {\r\n    /**\r\n     * @notice Enqueues a request (if a request isn't already present) for the given `identifier`, `time` pair.\r\n     * @dev Time must be in the past and the identifier must be supported.\r\n     * @param identifier uniquely identifies the price requested. eg BTC/USD (encoded as bytes32) could be requested.\r\n     * @param ancillaryData arbitrary data appended to a price request to give the voters more info from the caller.\r\n     * @param time unix timestamp for the price request.\r\n     */\r\n\r\n    function requestPrice(\r\n        bytes32 identifier,\r\n        uint256 time,\r\n        bytes memory ancillaryData\r\n    ) public virtual;\r\n\r\n    /**\r\n     * @notice Whether the price for `identifier` and `time` is available.\r\n     * @dev Time must be in the past and the identifier must be supported.\r\n     * @param identifier uniquely identifies the price requested. eg BTC/USD (encoded as bytes32) could be requested.\r\n     * @param time unix timestamp for the price request.\r\n     * @param ancillaryData arbitrary data appended to a price request to give the voters more info from the caller.\r\n     * @return bool if the DVM has resolved to a price for the given identifier and timestamp.\r\n     */\r\n    function hasPrice(\r\n        bytes32 identifier,\r\n        uint256 time,\r\n        bytes memory ancillaryData\r\n    ) public view virtual returns (bool);\r\n\r\n    /**\r\n     * @notice Gets the price for `identifier` and `time` if it has already been requested and resolved.\r\n     * @dev If the price is not available, the method reverts.\r\n     * @param identifier uniquely identifies the price requested. eg BTC/USD (encoded as bytes32) could be requested.\r\n     * @param time unix timestamp for the price request.\r\n     * @param ancillaryData arbitrary data appended to a price request to give the voters more info from the caller.\r\n     * @return int256 representing the resolved price for the given identifier and timestamp.\r\n     */\r\n\r\n    function getPrice(\r\n        bytes32 identifier,\r\n        uint256 time,\r\n        bytes memory ancillaryData\r\n    ) public view virtual returns (int256);\r\n}\r\n\r\n\r\n// File contracts/common/implementation/Lockable.sol\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @title A contract that provides modifiers to prevent reentrancy to state-changing and view-only methods. This contract\r\n * is inspired by https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/utils/ReentrancyGuard.sol\r\n * and https://github.com/balancer-labs/balancer-core/blob/master/contracts/BPool.sol.\r\n */\r\ncontract Lockable {\r\n    bool private _notEntered;\r\n\r\n    constructor() {\r\n        // Storing an initial non-zero value makes deployment a bit more expensive, but in exchange the refund on every\r\n        // call to nonReentrant will be lower in amount. Since refunds are capped to a percentage of the total\r\n        // transaction's gas, it is best to keep them low in cases like this one, to increase the likelihood of the full\r\n        // refund coming into effect.\r\n        _notEntered = true;\r\n    }\r\n\r\n    /**\r\n     * @dev Prevents a contract from calling itself, directly or indirectly.\r\n     * Calling a `nonReentrant` function from another `nonReentrant` function is not supported. It is possible to\r\n     * prevent this from happening by making the `nonReentrant` function external, and making it call a `private`\r\n     * function that does the actual state modification.\r\n     */\r\n    modifier nonReentrant() {\r\n        _preEntranceCheck();\r\n        _preEntranceSet();\r\n        _;\r\n        _postEntranceReset();\r\n    }\r\n\r\n    /**\r\n     * @dev Designed to prevent a view-only method from being re-entered during a call to a `nonReentrant()` state-changing method.\r\n     */\r\n    modifier nonReentrantView() {\r\n        _preEntranceCheck();\r\n        _;\r\n    }\r\n\r\n    // Internal methods are used to avoid copying the require statement's bytecode to every `nonReentrant()` method.\r\n    // On entry into a function, `_preEntranceCheck()` should always be called to check if the function is being\r\n    // re-entered. Then, if the function modifies state, it should call `_postEntranceSet()`, perform its logic, and\r\n    // then call `_postEntranceReset()`.\r\n    // View-only methods can simply call `_preEntranceCheck()` to make sure that it is not being re-entered.\r\n    function _preEntranceCheck() internal view {\r\n        // On the first call to nonReentrant, _notEntered will be true\r\n        require(_notEntered, \"ReentrancyGuard: reentrant call\");\r\n    }\r\n\r\n    function _preEntranceSet() internal {\r\n        // Any calls to nonReentrant after this point will fail\r\n        _notEntered = false;\r\n    }\r\n\r\n    function _postEntranceReset() internal {\r\n        // By storing the original value once again, a refund is triggered (see\r\n        // https://eips.ethereum.org/EIPS/eip-2200)\r\n        _notEntered = true;\r\n    }\r\n}\r\n\r\n\r\n// File contracts/polygon/OracleRootTunnel.sol\r\n\r\n// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.0;\r\n\r\n\r\n\r\n\r\n/**\r\n * @title Adapter deployed on mainnet that validates and sends price requests from sidechain to the DVM on mainnet.\r\n * @dev This contract must be a registered financial contract in order to make DVM price requests.\r\n */\r\ncontract OracleRootTunnel is OracleBaseTunnel, FxBaseRootTunnel, Lockable {\r\n    constructor(\r\n        address _checkpointManager,\r\n        address _fxRoot,\r\n        address _finderAddress\r\n    ) OracleBaseTunnel(_finderAddress) FxBaseRootTunnel(_checkpointManager, _fxRoot) {}\r\n\r\n    /**\r\n     * @notice This is the first method that should be called in order to publish a price request to the sidechain.\r\n     * @dev Publishes the DVM resolved price for the price request, or reverts if not resolved yet. This contract must\r\n     * be registered with the DVM to query price requests.\r\n     * @param identifier Identifier of price request to resolve.\r\n     * @param time Timestamp of price request to resolve.\r\n     * @param ancillaryData extra data of price request to resolve.\r\n     */\r\n    function publishPrice(\r\n        bytes32 identifier,\r\n        uint256 time,\r\n        bytes memory ancillaryData\r\n    ) public nonReentrant() {\r\n        // `getPrice` will revert if there is no price.\r\n        int256 price = _getOracle().getPrice(identifier, time, ancillaryData);\r\n        // This implementation allows duplicate MessageSent events via _sendMessageToRoot. The child tunnel on the\r\n        // sidechain will not have a problem handling duplicate price resolutions (it will just ignore them). This is\r\n        // potentially a fallback in case the automatic state sync to the sidechain is missing the `publishPrice`\r\n        // transaction for some reason. There is little risk in duplicating MessageSent emissions because the sidechain\r\n        // bridge does not impose any rate-limiting.\r\n        _publishPrice(identifier, time, ancillaryData, price);\r\n        _sendMessageToChild(abi.encode(identifier, time, ancillaryData, price));\r\n    }\r\n\r\n    /**\r\n     * @notice Submits a price request.\r\n     * @dev This internal method will be called inside `receiveMessage(bytes memory inputData)`. The `inputData` is a\r\n     * proof of transaction that is derived from the transaction hash of the transaction on the child chain that\r\n     * originated the cross-chain price request via _sendMessageToRoot. This contract must be registered with the DVM\r\n     * to submit price requests.\r\n     * @param data ABI encoded params with which to call `requestPrice`.\r\n     */\r\n    function _processMessageFromChild(bytes memory data) internal override {\r\n        (bytes32 identifier, uint256 time, bytes memory ancillaryData) = abi.decode(data, (bytes32, uint256, bytes));\r\n        _requestPrice(identifier, time, ancillaryData);\r\n        _getOracle().requestPrice(identifier, time, ancillaryData);\r\n    }\r\n\r\n    /**\r\n     * @notice Return DVM for this network.\r\n     */\r\n    function _getOracle() internal view returns (OracleAncillaryInterface) {\r\n        return OracleAncillaryInterface(finder.getImplementationAddress(OracleInterfaces.Oracle));\r\n    }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_checkpointManager\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_fxRoot\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_finderAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"identifier\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"ancillaryData\",\"type\":\"bytes\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"requestHash\",\"type\":\"bytes32\"}],\"name\":\"PriceRequestAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"identifier\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"ancillaryData\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"price\",\"type\":\"int256\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"requestHash\",\"type\":\"bytes32\"}],\"name\":\"PushedPrice\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"SEND_MESSAGE_EVENT_SIG\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ancillaryBytesLimit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"checkpointManager\",\"outputs\":[{\"internalType\":\"contract ICheckpointManager\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"finder\",\"outputs\":[{\"internalType\":\"contract FinderInterface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fxChildTunnel\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fxRoot\",\"outputs\":[{\"internalType\":\"contract IFxStateSender\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"processedExits\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"identifier\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"ancillaryData\",\"type\":\"bytes\"}],\"name\":\"publishPrice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"inputData\",\"type\":\"bytes\"}],\"name\":\"receiveMessage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_fxChildTunnel\",\"type\":\"address\"}],\"name\":\"setFxChildTunnel\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"OracleRootTunnel","CompilerVersion":"v0.8.4+commit.c7e474f2","OptimizationUsed":"1","Runs":"1000000","ConstructorArguments":"00000000000000000000000086e4dc95c7fbdbf52e33d563bbdb00823894c287000000000000000000000000fe5e5d361b2ad62c541bab87c45a0b9b018389a200000000000000000000000040f941e48a552bf496b154af6bf55725f18d77c3","EVMVersion":"Default","Library":"","LicenseType":"GNU GPLv3","Proxy":"0","Implementation":"","SwarmSource":"ipfs://67adf2f68b8217fe13f706da9481a3205a4684deb8fc52c0d41432410a4f46a6"}]}