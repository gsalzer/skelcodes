{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/Raphael.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/utils/ERC721Holder.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\nimport \\\"./IStaking.sol\\\";\\nimport \\\"./IVITA.sol\\\";\\n\\ncontract Raphael is ERC721Holder, Ownable, ReentrancyGuard {\\n    // Different stages of a proposal\\n    enum ProposalStatus {\\n        VOTING_NOT_STARTED,\\n        VOTING,\\n        VOTES_FINISHED,\\n        RESOLVED,\\n        CANCELLED,\\n        QUORUM_FAILED\\n    }\\n\\n    struct Proposal {\\n        string details;\\n        uint256 votesFor;\\n        uint256 votesAgainst;\\n        uint256 startBlock;\\n        uint256 endBlock;\\n        ProposalStatus status;\\n    }\\n\\n    // key is a self-incrementing number\\n    mapping(uint256 => Proposal) private proposals;\\n\\n    mapping(uint256 => mapping(address => bool)) private voted; //global voted mapping\\n\\n    uint256 public proposalCount;\\n\\n    uint256 private minVotesNeeded;\\n    address private nativeTokenAddress;\\n    address private stakingContractAddress;\\n    address[] private nftContractAddresses;\\n\\n    bool private shutdown = false;\\n\\n    uint256 public CREATE_TO_VOTE_PROPOSAL_DELAY = 13091; // ~2 days\\n    uint256 public VOTING_DURATION = 91636; // ~14 days\\n\\n    uint256 public constant MIN_DURATION = 5; // ~ 1 minute\\n    uint256 public constant MAX_DURATION = 200000; // ~1 month\\n\\n    event VotingDelayChanged(uint256 newDuration);\\n    event VotingDurationChanged(uint256 newDuration);\\n    event NativeTokenChanged(\\n        address newAddress,\\n        address oldAddress,\\n        address changedBy\\n    );\\n    event StakingAddressChanged(\\n        address newAddress,\\n        address oldAddress,\\n        address changedBy\\n    );\\n    event NativeTokenTransferred(\\n        address authorizedBy,\\n        address to,\\n        uint256 amount\\n    );\\n    event NFTReceived(address nftContract, address sender, uint256 tokenId);\\n    event NFTTransferred(address nftContract, address to, uint256 tokenId);\\n    event EmergencyShutdown(address triggeredBy, uint256 currentBlock);\\n    event EmergencyNFTApproval(\\n        address triggeredBy,\\n        address[] nftContractAddresses,\\n        uint256 startIndex,\\n        uint256 endIndex\\n    );\\n    event EmergencyNFTApprovalFail(address nftContractAddress);\\n\\n    event ProposalCreated(\\n        uint256 proposalId,\\n        string details,\\n        uint256 vote_start,\\n        uint256 vote_end\\n    );\\n    event ProposalStatusChanged(uint256 proposalId, ProposalStatus newStatus);\\n\\n    event Voted(address voter, uint256 proposalId, uint256 weight, bool direction);\\n\\n    modifier notShutdown() {\\n        require(!shutdown, \\\"cannot be called after shutdown\\\");\\n        _;\\n    }\\n\\n    modifier onlyShutdown() {\\n        require(shutdown, \\\"can only call after shutdown\\\");\\n        _;\\n    }\\n\\n    constructor() Ownable() {\\n        proposalCount = 0; //starts with 0 proposals\\n        minVotesNeeded = 965390 * 1e18; // 5% of initial distribution\\n    }\\n\\n    function getDidVote(uint256 proposalIndex) public view returns (bool) {\\n        return voted[proposalIndex][_msgSender()];\\n    }\\n\\n    /**\\n     * @dev returns all data for a specified proposal\\n     * @param proposalIndex           uint index of proposal\\n     * @return string, 5 x uint (the parts of a Proposal object)\\n     */\\n    function getProposalData(uint256 proposalIndex)\\n        public\\n        view\\n        returns (\\n            string memory,\\n            uint256,\\n            uint256,\\n            uint256,\\n            uint256,\\n            uint8\\n        )\\n    {\\n        require(proposalIndex <= proposalCount && proposalIndex !=0, \\\"Proposal doesn't exist\\\");\\n        return (\\n            proposals[proposalIndex].details,\\n            proposals[proposalIndex].votesFor,\\n            proposals[proposalIndex].votesAgainst,\\n            proposals[proposalIndex].startBlock,\\n            proposals[proposalIndex].endBlock,\\n            uint8(proposals[proposalIndex].status)\\n        );\\n    }\\n\\n    /**\\n     * @dev returns result of a proposal\\n     * @param proposalIndex           uint index of proposal\\n     * @return true if proposal passed, otherwise false\\n     */\\n    function getProposalResult(uint256 proposalIndex)\\n        public\\n        view\\n        returns (bool)\\n    {\\n        require(proposalIndex <= proposalCount && proposalIndex !=0, \\\"Proposal doesn't exist\\\");\\n        require(\\n            proposals[proposalIndex].status == ProposalStatus.VOTES_FINISHED ||\\n                proposals[proposalIndex].status == ProposalStatus.RESOLVED ||\\n                proposals[proposalIndex].status == ProposalStatus.QUORUM_FAILED,\\n            \\\"Proposal must be after voting\\\"\\n        );\\n        bool result; // is already false, only need to cover the true case\\n        if (proposals[proposalIndex].votesFor >\\n            proposals[proposalIndex].votesAgainst && (\\n                proposals[proposalIndex].status == ProposalStatus.VOTES_FINISHED ||\\n                proposals[proposalIndex].status == ProposalStatus.RESOLVED   \\n            )) {\\n            result = true;\\n        }\\n\\n        return result;\\n    }\\n\\n    /**\\n     * @dev returns minimum amount of votes needed for a proposal to pass\\n     * @return minVotesNeeded value\\n     */\\n    function getMinVotesNeeded() public view returns (uint256) {\\n        return minVotesNeeded;\\n    }\\n\\n    /**\\n     * @dev returns address of the token associated with the DAO\\n     *\\n     * @return the address of the token contract\\n     */\\n    function getNativeTokenAddress() public view returns (address) {\\n        return nativeTokenAddress;\\n    }\\n\\n    /**\\n     * @dev returns the DAO's balance of the native token\\n     */\\n    function getNativeTokenBalance() public view returns (uint256) {\\n        IVITA nativeTokenContract = IVITA(nativeTokenAddress);\\n        return nativeTokenContract.balanceOf(address(this));\\n    }\\n\\n    /**\\n     * @dev returns an array of the NFTs owned by the DAO\\n     *\\n     * @return an array of nft structs\\n     */\\n    function getNftContractAddresses() public view returns (address[] memory) {\\n        return nftContractAddresses;\\n    }\\n\\n    function getStakingAddress() public view returns (address) {\\n        return stakingContractAddress;\\n    }\\n\\n    /**\\n     * @dev returns if DAO is shutdown or not\\n     */\\n    function isShutdown() public view returns (bool) {\\n        return shutdown;\\n    }\\n\\n    /****************************\\n     * STATE CHANGING FUNCTIONS *\\n     ***************************/\\n\\n    ////////////////////////\\n    // PLATFORM VARIABLES //\\n    ////////////////////////\\n\\n    function setVotingDelayDuration(uint256 newDuration) public onlyOwner {\\n        require(\\n            newDuration > MIN_DURATION && newDuration < MAX_DURATION,\\n            \\\"duration must be >5 <190000\\\"\\n        );\\n        CREATE_TO_VOTE_PROPOSAL_DELAY = newDuration;\\n\\n        emit VotingDelayChanged(newDuration);\\n    }\\n\\n    function setVotingDuration(uint256 newDuration) public onlyOwner {\\n        require(\\n            newDuration > MIN_DURATION && newDuration < MAX_DURATION,\\n            \\\"duration must be >5 <190000\\\"\\n        );\\n        VOTING_DURATION = newDuration;\\n\\n        emit VotingDurationChanged(newDuration);\\n    }\\n\\n    /**\\n     * @dev Updates the min total votes needed for a proposal to pass\\n     * @param newVotesNeeded          uint new min vote threshold\\n     */\\n    function setMinVotesNeeded(uint256 newVotesNeeded)\\n        public\\n        onlyOwner\\n        notShutdown\\n    {\\n        IVITA nativeTokenContract = IVITA(nativeTokenAddress);\\n        require(newVotesNeeded > 0, \\\"quorum cannot be 0\\\");\\n        require(\\n            newVotesNeeded <= nativeTokenContract.totalSupply(),\\n            \\\"votes needed > token supply\\\"\\n        );\\n        minVotesNeeded = newVotesNeeded;\\n    }\\n\\n    /**\\n     * @dev allows admins to set the address of the staking contract associated with the DAO\\n     *\\n     * @param _stakingContractAddress  the (new) address of the staking contract\\n     */\\n    function setStakingAddress(address _stakingContractAddress)\\n        public\\n        onlyOwner\\n        notShutdown\\n    {\\n        address oldAddress = stakingContractAddress;\\n        stakingContractAddress = _stakingContractAddress;\\n        emit StakingAddressChanged(\\n            stakingContractAddress,\\n            oldAddress,\\n            _msgSender()\\n        );\\n    }\\n\\n    /**\\n     * @dev allows admins to set the address of the token associated with the DAO\\n     *\\n     * @param tokenContractAddress  the address of the ERC20 asset\\n     */\\n    function setNativeTokenAddress(address tokenContractAddress)\\n        public\\n        onlyOwner\\n        notShutdown\\n    {\\n        address oldAddress = nativeTokenAddress;\\n        nativeTokenAddress = tokenContractAddress;\\n        emit NativeTokenChanged(nativeTokenAddress, oldAddress, _msgSender());\\n    }\\n\\n    //////////////////////////\\n    // PROPOSALS AND VOTING //\\n    //////////////////////////\\n\\n    /**\\n     * @dev Creates a proposal\\n     * @param details           string with proposal details\\n     *\\n     */\\n    function createProposal(string memory details)\\n        public\\n        notShutdown\\n        nonReentrant\\n    {\\n        IStaking stakingContract = IStaking(stakingContractAddress);\\n        require(\\n            stakingContract.getStakedBalance(_msgSender()) > 0,\\n            \\\"must stake to create proposal\\\"\\n        );\\n        uint256 start_block = block.number + CREATE_TO_VOTE_PROPOSAL_DELAY;\\n        uint256 end_block = start_block + VOTING_DURATION;\\n\\n        Proposal memory newProposal =\\n            Proposal(\\n                details,\\n                0, //votesFor\\n                0, //votesAgainst\\n                start_block,\\n                end_block,\\n                ProposalStatus.VOTING_NOT_STARTED\\n            );\\n\\n        require(\\n            stakingContract.voted(_msgSender(), newProposal.endBlock),\\n            \\\"createProposal: token lock fail\\\"\\n        );\\n        proposalCount += 1;\\n        // Add new Proposal instance\\n        proposals[proposalCount] = newProposal;\\n\\n        // lock staked tokens for duration of proposal\\n\\n        emit ProposalCreated(proposalCount, details, start_block, end_block);\\n    }\\n\\n    /**\\n     * @dev Moves proposal to the status it should be in\\n     *\\n     * @param proposalIndex          uint proposal key\\n     */\\n    function updateProposalStatus(uint256 proposalIndex) public notShutdown {\\n        require(proposalIndex <= proposalCount && proposalIndex !=0, \\\"Proposal doesn't exist\\\");\\n\\n        Proposal storage currentProp = proposals[proposalIndex];\\n        // Can't change status of CANCELLED or RESOLVED proposals\\n        require(\\n            currentProp.status != ProposalStatus.CANCELLED,\\n            \\\"Proposal cancelled\\\"\\n        );\\n        require(\\n            currentProp.status != ProposalStatus.RESOLVED,\\n            \\\"Proposal already resolved\\\"\\n        );\\n        require(\\n            currentProp.status != ProposalStatus.QUORUM_FAILED,\\n            \\\"Proposal failed to meet quorum\\\"\\n        );\\n\\n        // revert if no change needed\\n        if (\\n            // still before voting period\\n            currentProp.status == ProposalStatus.VOTING_NOT_STARTED &&\\n            block.number < currentProp.startBlock\\n        ) {\\n            revert(\\\"Too early to move to voting\\\");\\n        } else if (\\n            // still in voting period\\n            currentProp.status == ProposalStatus.VOTING &&\\n            block.number >= currentProp.startBlock &&\\n            block.number <= currentProp.endBlock\\n        ) {\\n            revert(\\\"Still in voting period\\\");\\n        }\\n\\n        if (\\n            block.number >= currentProp.startBlock &&\\n            block.number <= currentProp.endBlock &&\\n            currentProp.status != ProposalStatus.VOTING\\n        ) {\\n            currentProp.status = ProposalStatus.VOTING;\\n        } else if (\\n            block.number < currentProp.startBlock &&\\n            currentProp.status != ProposalStatus.VOTING_NOT_STARTED\\n        ) {\\n            currentProp.status = ProposalStatus.VOTING_NOT_STARTED;\\n        } else if (\\n            block.number > currentProp.endBlock &&\\n            currentProp.status != ProposalStatus.VOTES_FINISHED\\n        ) {\\n            if (\\n                currentProp.votesFor + currentProp.votesAgainst >=\\n                minVotesNeeded\\n            ) {\\n                currentProp.status = ProposalStatus.VOTES_FINISHED;\\n            } else {\\n                currentProp.status = ProposalStatus.QUORUM_FAILED;\\n            }\\n        }\\n\\n        // Save changes in the proposal mapping\\n        proposals[proposalIndex] = currentProp;\\n\\n        emit ProposalStatusChanged(proposalIndex, currentProp.status);\\n    }\\n\\n    /**\\n     * @dev Only for setting proposal to RESOLVED.\\n     * @dev Only callable from the multi-sig\\n     * @param proposalIndex          uint proposal key\\n     *\\n     */\\n    function setProposalToResolved(uint256 proposalIndex)\\n        public\\n        onlyOwner\\n        notShutdown\\n    {\\n        require(proposalIndex <= proposalCount && proposalIndex !=0, \\\"Proposal doesn't exist\\\");\\n        require(\\n            proposals[proposalIndex].status == ProposalStatus.VOTES_FINISHED,\\n            \\\"Proposal not in VOTES_FINISHED\\\"\\n        );\\n        proposals[proposalIndex].status = ProposalStatus.RESOLVED;\\n        emit ProposalStatusChanged(proposalIndex, ProposalStatus.RESOLVED);\\n    }\\n\\n    /**\\n     * @dev Only for setting proposal to CANCELLED.\\n     * @dev Only callable from the multi-sig\\n     * @param proposalIndex          uint proposal key\\n     *\\n     */\\n    function setProposalToCancelled(uint256 proposalIndex)\\n        public\\n        onlyOwner\\n        notShutdown\\n    {\\n        require(proposalIndex <= proposalCount && proposalIndex !=0, \\\"Proposal doesn't exist\\\");\\n        require(\\n            proposals[proposalIndex].status != ProposalStatus.VOTES_FINISHED,\\n            \\\"Can't cancel if vote finished\\\"\\n        );\\n        require(\\n            proposals[proposalIndex].status != ProposalStatus.RESOLVED,\\n            \\\"Proposal already resolved\\\"\\n        );\\n        require(\\n            proposals[proposalIndex].status != ProposalStatus.QUORUM_FAILED,\\n            \\\"Proposal already failed quorum\\\"\\n        );\\n        require(\\n            proposals[proposalIndex].status != ProposalStatus.CANCELLED,\\n            \\\"Proposal already cancelled\\\"\\n        );\\n\\n        proposals[proposalIndex].status = ProposalStatus.CANCELLED;\\n        emit ProposalStatusChanged(proposalIndex, ProposalStatus.CANCELLED);\\n    }\\n\\n    /**\\n     * @dev Allows any address to vote on a proposal\\n     * @param proposalIndex           key to proposal in mapping\\n     * @param _vote                   true = for, false = against\\n     */\\n    function vote(uint256 proposalIndex, bool _vote) public notShutdown nonReentrant {\\n        require(proposalIndex <= proposalCount && proposalIndex !=0, \\\"Proposal doesn't exist\\\");\\n\\n        IStaking stakingContract = IStaking(stakingContractAddress);\\n        uint256 stakedBalance = stakingContract.getStakedBalance(_msgSender());\\n        require(stakedBalance > 0, \\\"must stake to vote\\\");\\n        // check msg.sender hasn't already voted\\n        require(\\n            voted[proposalIndex][_msgSender()] == false,\\n            \\\"Already voted from this address\\\"\\n        );\\n\\n        Proposal storage currentProp = proposals[proposalIndex];\\n\\n        // Call updateProposalStatus() if proposal should be in VOTING stage\\n        require(\\n            currentProp.status == ProposalStatus.VOTING &&\\n                block.number <= currentProp.endBlock,\\n            \\\"Proposal not in voting period\\\"\\n        );\\n\\n        if (_vote) {\\n            currentProp.votesFor += stakedBalance;\\n        } else {\\n            currentProp.votesAgainst += stakedBalance;\\n        }\\n\\n        voted[proposalIndex][_msgSender()] = true;\\n        require(\\n            stakingContract.voted(\\n                _msgSender(),\\n                proposals[proposalIndex].endBlock\\n            ),\\n            \\\"vote: token lock fail\\\"\\n        );\\n\\n        // Save changes in the proposal mapping\\n        proposals[proposalIndex] = currentProp;\\n\\n        emit Voted(_msgSender(), proposalIndex, stakedBalance, _vote);\\n    }\\n\\n    //////////////////////\\n    // ASSET MANAGEMENT //\\n    //////////////////////\\n\\n    /**\\n     * @dev                 enables DAO to mint native tokens\\n     * @param _amount       the amount of tokens to mint\\n     */\\n    function mintNativeToken(uint256 _amount) public onlyOwner notShutdown {\\n        require(_amount > 0, \\\"Can't mint 0 tokens\\\");\\n        IVITA nativeTokenContract = IVITA(nativeTokenAddress);\\n        \\n        nativeTokenContract.mint(address(this), _amount);\\n    } \\n\\n    /**\\n     * @dev enables DAO to transfer the token it is associated with\\n     *\\n     * @param to                    the address to send tokens to\\n     * @param amount                the amount to send\\n     *\\n     * @return success or fail bool\\n     */\\n    function transferNativeToken(address to, uint256 amount)\\n        public\\n        onlyOwner\\n        notShutdown\\n        returns (bool)\\n    {\\n        IVITA nativeTokenContract = IVITA(nativeTokenAddress);\\n        require(\\n            nativeTokenContract.transfer(to, amount),\\n            \\\"ERC20 transfer failed\\\"\\n        );\\n\\n        emit NativeTokenTransferred(_msgSender(), to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev enables DAO to transfer NFTs received\\n     *\\n     * @param nftContractAddress    the address of the NFT contract\\n     * @param recipient             the address to send the NFT to\\n     * @param tokenId               the id of the token in the NFT contract\\n     *\\n     * @return success or fail bool\\n     */\\n    function transferNFT(\\n        address nftContractAddress,\\n        address recipient,\\n        uint256 tokenId\\n    ) public onlyOwner notShutdown returns (bool) {\\n        IERC721 nftContract = IERC721(nftContractAddress);\\n        nftContract.safeTransferFrom(\\n            address(this),\\n            recipient,\\n            tokenId // what if there isn't one?\\n        );\\n        require(\\n            nftContract.ownerOf(tokenId) == recipient,\\n            \\\"NFT transfer failed\\\"\\n        );\\n\\n        emit NFTTransferred(nftContractAddress, recipient, tokenId);\\n        return true;\\n    }\\n\\n    ////////////////////////\\n    // EMERGENCY SHUTDOWN //\\n    ////////////////////////\\n\\n     /**\\n      * @dev cancels unfinished proposals in a specific range\\n      * @param startIndex       the index to start cancelling from\\n      * @param endIndex         the index the cancelling will stop before\\n      *\\n      * @notice can only be called after shutdown, is called during shutdown\\n      */\\n    function emergencyProposalCancellation(uint256 startIndex, uint256 endIndex) external onlyShutdown onlyOwner {\\n        require(endIndex > startIndex, \\\"end index must be > start index\\\");\\n        // there is no proposal in the zero slot\\n        require(startIndex > 0, \\\"starting index must exceed 0\\\");\\n        // needs to be proposal count + 1 since end index is one past the last cancelled proposal\\n        require(endIndex <= proposalCount + 1, \\\"end index > proposal count + 1\\\");\\n        for (uint256 i = startIndex; i < endIndex; i++) {\\n            if (\\n                proposals[i].status != ProposalStatus.RESOLVED &&\\n                proposals[i].status != ProposalStatus.QUORUM_FAILED\\n            ) {\\n                proposals[i].status = ProposalStatus.CANCELLED;\\n                emit ProposalStatusChanged(i, ProposalStatus.CANCELLED);\\n            }\\n        }\\n    }\\n\\n    /**\\n      * @dev approves admin on all NFT contracts\\n      * @param startIndex       the index to start cancelling from\\n      * @param endIndex         the index the cancelling will stop before\\n      *\\n      * @notice can only be called after shutdown, is called during shutdown\\n      */\\n    function emergencyNftApproval(uint256 startIndex, uint256 endIndex) external onlyOwner onlyShutdown nonReentrant {\\n        require(endIndex > startIndex, \\\"end index must be > start index\\\");\\n        require(endIndex <= nftContractAddresses.length, \\\"end index > nft array len\\\");\\n        for (uint256 i = startIndex; i < endIndex; i++) {\\n            if (nftContractAddresses[i] != address(0)) {\\n                IERC721 nftContract = IERC721(nftContractAddresses[i]);\\n                if (!nftContract.isApprovedForAll(address(this), owner())) {\\n                    try nftContract.setApprovalForAll(owner(), true) {\\n                    } catch {\\n                        emit EmergencyNFTApprovalFail(nftContractAddresses[i]);\\n                    }\\n                }\\n            }\\n        }\\n\\n        emit EmergencyNFTApproval(_msgSender(), nftContractAddresses, startIndex, endIndex);\\n    }\\n\\n    /**\\n     * @dev allows the admins to shut down the DAO (proposals, voting, transfers)\\n     * and also sweeps out any NFTs and native tokens owned by the DAO\\n     *\\n     * @notice this is an irreversible process!\\n     */\\n    function emergencyShutdown() public onlyOwner notShutdown nonReentrant {  \\n        IStaking stakingContract = IStaking(stakingContractAddress);\\n        stakingContract.emergencyShutdown(_msgSender());\\n        shutdown = true;\\n        emit EmergencyShutdown(_msgSender(), block.number);\\n    }\\n\\n    /**\\n     * @dev function for receiving and recording an NFT\\n     * @notice calls \\\"super\\\" to the OpenZeppelin function inherited\\n     *\\n     * @param operator          the sender of the NFT (I think)\\n     * @param from              not really sure, has generally been the zero address\\n     * @param tokenId           the tokenId of the NFT\\n     * @param data              any additional data sent with the NFT\\n     *\\n     * @return `IERC721Receiver.onERC721Received.selector`\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) public override notShutdown returns (bytes4) {\\n        nftContractAddresses.push(_msgSender());\\n\\n        emit NFTReceived(_msgSender(), operator, tokenId);\\n\\n        return super.onERC721Received(operator, from, tokenId, data);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/IERC721.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    /**\\n      * @dev Safely transfers `tokenId` token from `from` to `to`.\\n      *\\n      * Requirements:\\n      *\\n      * - `from` cannot be the zero address.\\n      * - `to` cannot be the zero address.\\n      * - `tokenId` token must exist and be owned by `from`.\\n      * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n      * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n      *\\n      * Emits a {Transfer} event.\\n      */\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/utils/ERC721Holder.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721Receiver.sol\\\";\\n\\n  /**\\n   * @dev Implementation of the {IERC721Receiver} interface.\\n   *\\n   * Accepts all token transfers.\\n   * Make sure the contract is able to use its token with {IERC721-safeTransferFrom}, {IERC721-approve} or {IERC721-setApprovalForAll}.\\n   */\\ncontract ERC721Holder is IERC721Receiver {\\n\\n    /**\\n     * @dev See {IERC721Receiver-onERC721Received}.\\n     *\\n     * Always returns `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(address, address, uint256, bytes memory) public virtual override returns (bytes4) {\\n        return this.onERC721Received.selector;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor () {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/security/ReentrancyGuard.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor () {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and make it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/IStaking.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\ninterface IStaking{\\n    function getStakedBalance(address staker) external view returns(uint256);\\n    function getUnlockTime(address staker) external view returns(uint256);\\n    function isShutdown() external view returns(bool);\\n    function voted(address voter, uint256 endBlock) external returns(bool);\\n    function stake(uint256 amount) external;\\n    function withdraw(uint256 amount) external;\\n    function emergencyShutdown(address admin) external;\\n}\"\r\n    },\r\n    \"contracts/IVITA.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.4;\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ninterface IVITA is IERC20 {\\n    function mint(address account, uint256 amount) external;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/introspection/IERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\\n     */\\n    function onERC721Received(address operator, address from, uint256 tokenId, bytes calldata data) external returns (bytes4);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}","ABI":"[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"triggeredBy\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"nftContractAddresses\",\"type\":\"address[]\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"startIndex\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"endIndex\",\"type\":\"uint256\"}],\"name\":\"EmergencyNFTApproval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"nftContractAddress\",\"type\":\"address\"}],\"name\":\"EmergencyNFTApprovalFail\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"triggeredBy\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"currentBlock\",\"type\":\"uint256\"}],\"name\":\"EmergencyShutdown\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"nftContract\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"NFTReceived\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"nftContract\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"NFTTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"changedBy\",\"type\":\"address\"}],\"name\":\"NativeTokenChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"authorizedBy\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"NativeTokenTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"proposalId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"details\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"vote_start\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"vote_end\",\"type\":\"uint256\"}],\"name\":\"ProposalCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"proposalId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"enum Raphael.ProposalStatus\",\"name\":\"newStatus\",\"type\":\"uint8\"}],\"name\":\"ProposalStatusChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"changedBy\",\"type\":\"address\"}],\"name\":\"StakingAddressChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"voter\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"proposalId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"weight\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"direction\",\"type\":\"bool\"}],\"name\":\"Voted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newDuration\",\"type\":\"uint256\"}],\"name\":\"VotingDelayChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newDuration\",\"type\":\"uint256\"}],\"name\":\"VotingDurationChanged\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"CREATE_TO_VOTE_PROPOSAL_DELAY\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_DURATION\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MIN_DURATION\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"VOTING_DURATION\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"details\",\"type\":\"string\"}],\"name\":\"createProposal\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"startIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endIndex\",\"type\":\"uint256\"}],\"name\":\"emergencyNftApproval\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"startIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endIndex\",\"type\":\"uint256\"}],\"name\":\"emergencyProposalCancellation\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"emergencyShutdown\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"proposalIndex\",\"type\":\"uint256\"}],\"name\":\"getDidVote\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMinVotesNeeded\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getNativeTokenAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getNativeTokenBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getNftContractAddresses\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"proposalIndex\",\"type\":\"uint256\"}],\"name\":\"getProposalData\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"proposalIndex\",\"type\":\"uint256\"}],\"name\":\"getProposalResult\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getStakingAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isShutdown\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"mintNativeToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"onERC721Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"proposalCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newVotesNeeded\",\"type\":\"uint256\"}],\"name\":\"setMinVotesNeeded\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenContractAddress\",\"type\":\"address\"}],\"name\":\"setNativeTokenAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"proposalIndex\",\"type\":\"uint256\"}],\"name\":\"setProposalToCancelled\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"proposalIndex\",\"type\":\"uint256\"}],\"name\":\"setProposalToResolved\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_stakingContractAddress\",\"type\":\"address\"}],\"name\":\"setStakingAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newDuration\",\"type\":\"uint256\"}],\"name\":\"setVotingDelayDuration\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newDuration\",\"type\":\"uint256\"}],\"name\":\"setVotingDuration\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"nftContractAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferNFT\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferNativeToken\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"proposalIndex\",\"type\":\"uint256\"}],\"name\":\"updateProposalStatus\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"proposalIndex\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_vote\",\"type\":\"bool\"}],\"name\":\"vote\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"Raphael","CompilerVersion":"v0.8.4+commit.c7e474f2","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}