{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"settings\": {\r\n    \"evmVersion\": \"istanbul\",\r\n    \"libraries\": {},\r\n    \"metadata\": {\r\n      \"bytecodeHash\": \"none\",\r\n      \"useLiteralContent\": true\r\n    },\r\n    \"optimizer\": {\r\n      \"enabled\": false,\r\n      \"runs\": 200\r\n    },\r\n    \"remappings\": [],\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  },\r\n  \"sources\": {\r\n    \"@etherspot/contracts/src/common/libs/ECDSALib.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.6.12;\\n\\n/**\\n * @title ECDSA library\\n *\\n * @dev Based on https://github.com/OpenZeppelin/openzeppelin-contracts/blob/v3.3.0/contracts/cryptography/ECDSA.sol#L26\\n */\\nlibrary ECDSALib {\\n  function recoverAddress(\\n    bytes32 messageHash,\\n    bytes memory signature\\n  )\\n    internal\\n    pure\\n    returns (address)\\n  {\\n    address result = address(0);\\n\\n    if (signature.length == 65) {\\n      bytes32 r;\\n      bytes32 s;\\n      uint8 v;\\n\\n      // solhint-disable-next-line no-inline-assembly\\n      assembly {\\n        r := mload(add(signature, 0x20))\\n        s := mload(add(signature, 0x40))\\n        v := byte(0, mload(add(signature, 0x60)))\\n      }\\n\\n      if (v < 27) {\\n        v += 27;\\n      }\\n\\n      if (v == 27 || v == 28) {\\n        result = ecrecover(messageHash, v, r, s);\\n      }\\n    }\\n\\n    return result;\\n  }\\n\\n  function toEthereumSignedMessageHash(\\n    bytes32 messageHash\\n  )\\n    internal\\n    pure\\n    returns (bytes32)\\n  {\\n    return keccak256(abi.encodePacked(\\n      \\\"\\\\x19Ethereum Signed Message:\\\\n32\\\",\\n      messageHash\\n    ));\\n  }\\n}\\n\"\r\n    },\r\n    \"@etherspot/contracts/src/common/lifecycle/Initializable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.6.12;\\n\\n/**\\n * @title Initializable\\n *\\n * @dev Contract module which provides access control mechanism, where\\n * there is the initializer account that can be granted exclusive access to\\n * specific functions.\\n *\\n * The initializer account will be tx.origin during contract deployment and will be removed on first use.\\n * Use `onlyInitializer` modifier on contract initialize process.\\n *\\n * @author Stanisław Głogowski <stan@pillarproject.io>\\n */\\ncontract Initializable {\\n  address private initializer;\\n\\n  // events\\n\\n  /**\\n   * @dev Emitted after `onlyInitializer`\\n   * @param initializer initializer address\\n   */\\n  event Initialized(\\n    address initializer\\n  );\\n\\n  // modifiers\\n\\n  /**\\n   * @dev Throws if tx.origin is not the initializer\\n   */\\n  modifier onlyInitializer() {\\n    require(\\n      // solhint-disable-next-line avoid-tx-origin\\n      tx.origin == initializer,\\n      \\\"Initializable: tx.origin is not the initializer\\\"\\n    );\\n\\n    /// @dev removes initializer\\n    initializer = address(0);\\n\\n    _;\\n\\n    emit Initialized(\\n      // solhint-disable-next-line avoid-tx-origin\\n      tx.origin\\n    );\\n  }\\n\\n  /**\\n   * @dev Internal constructor\\n   */\\n  constructor()\\n    internal\\n  {\\n    // solhint-disable-next-line avoid-tx-origin\\n    initializer = tx.origin;\\n  }\\n\\n   // external functions (views)\\n\\n  /**\\n   * @notice Check if contract is initialized\\n   * @return true when contract is initialized\\n   */\\n  function isInitialized()\\n    external\\n    view\\n    returns (bool)\\n  {\\n    return initializer == address(0);\\n  }\\n}\\n\"\r\n    },\r\n    \"src/ArchanovaAccount.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.6.12;\\n\\n/**\\n * @title Archanova account\\n *\\n * @author Stanisław Głogowski <stan@pillarproject.io>\\n */\\nabstract contract ArchanovaAccount {\\n  struct Device {\\n    bool isOwner;\\n    bool exists;\\n    bool existed;\\n  }\\n\\n  mapping(address => Device) public devices;\\n\\n  // events\\n\\n  event DeviceAdded(\\n    address device,\\n    bool isOwner\\n  );\\n\\n  event DeviceRemoved(\\n    address device\\n  );\\n\\n  event TransactionExecuted(\\n    address recipient,\\n    uint256 value,\\n    bytes data,\\n    bytes response\\n  );\\n\\n  // external functions\\n\\n  function addDevice(\\n    address device,\\n    bool isOwner\\n  )\\n    virtual\\n    external;\\n\\n  function removeDevice(\\n    address device\\n  )\\n    virtual\\n    external;\\n\\n  function executeTransaction(\\n    address payable recipient,\\n    uint256 value,\\n    bytes calldata data\\n  )\\n    virtual\\n    external\\n    returns (bytes memory);\\n}\\n\"\r\n    },\r\n    \"src/ArchanovaMigrator.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.6.12;\\n\\nimport \\\"@etherspot/contracts/src/common/libs/ECDSALib.sol\\\";\\nimport \\\"@etherspot/contracts/src/common/lifecycle/Initializable.sol\\\";\\nimport \\\"./ArchanovaAccount.sol\\\";\\n\\n\\n/**\\n * @title Archanova migrator\\n *\\n * @author Stanisław Głogowski <stan@pillarproject.io>\\n */\\ncontract ArchanovaMigrator is Initializable {\\n  using ECDSALib for bytes32;\\n\\n  bytes32 constant private MIGRATION_MESSAGE_PREFIX = keccak256(abi.encodePacked(\\\"etherspot <> archanova migration\\\"));\\n  bytes4 constant private TRANSFER_SELECTOR = bytes4(keccak256(abi.encodePacked(\\\"transfer(address,uint256)\\\")));\\n  bytes4 constant private TRANSFER_FROM_SELECTOR = bytes4(keccak256(abi.encodePacked(\\\"transferFrom(address,address,uint256)\\\")));\\n  bytes4 constant private SET_ADDR_SELECTOR = bytes4(keccak256(abi.encodePacked(\\\"setAddr(bytes32,address)\\\")));\\n  bytes4 constant private SYNC_ADDR_SELECTOR = bytes4(keccak256(abi.encodePacked(\\\"syncAddr(bytes32)\\\")));\\n  bytes4 constant private SET_OWNER_SELECTOR = bytes4(keccak256(abi.encodePacked(\\\"setOwner(bytes32,address)\\\")));\\n  bytes4 constant private SET_RESOLVER_SELECTOR = bytes4(keccak256(abi.encodePacked(\\\"setResolver(bytes32,address)\\\")));\\n\\n  address payable public ensController;\\n  address payable public ensRegistry;\\n\\n  uint256 private chainId;\\n\\n  // events\\n\\n  event BalanceTransferred(\\n    address archanovaAccount,\\n    address etherspotAccount,\\n    uint256 value\\n  );\\n\\n  event ERC20TokenTransferred(\\n    address archanovaAccount,\\n    address etherspotAccount,\\n    address token,\\n    uint256 tokenAmount\\n  );\\n\\n  event ERC721TokenTransferred(\\n    address archanovaAccount,\\n    address etherspotAccount,\\n    address token,\\n    uint256 tokenId\\n  );\\n\\n  event ENSNodeTransferred(\\n    address archanovaAccount,\\n    address etherspotAccount,\\n    bytes32 ensNode\\n  );\\n\\n\\n  /**\\n   * @dev public constructor\\n   */\\n  constructor()\\n    public\\n    Initializable()\\n  {\\n    uint chainId_;\\n\\n    // solhint-disable-next-line no-inline-assembly\\n    assembly {\\n      chainId_ := chainid()\\n    }\\n\\n    chainId = chainId_;\\n  }\\n\\n  // external functions\\n\\n  /**\\n   * @notice Initializes `ArchanovaMigrator` contract\\n   * @param ensController_ ens controller address\\n   * @param ensRegistry_ ens registry address\\n   */\\n  function initialize(\\n    address payable ensController_,\\n    address payable ensRegistry_\\n  )\\n    external\\n    onlyInitializer\\n  {\\n    ensController = ensController_;\\n    ensRegistry = ensRegistry_;\\n  }\\n\\n  function transferBalance(\\n    address payable archanovaAccount,\\n    address payable etherspotAccount,\\n    uint256 value,\\n    bytes calldata archanovaAccountDeviceSignature\\n  )\\n    external\\n  {\\n    _verifyArchanovaAccountOwner(\\n      archanovaAccount,\\n      etherspotAccount,\\n      archanovaAccountDeviceSignature\\n    );\\n\\n    _transferBalance(\\n      archanovaAccount,\\n      etherspotAccount,\\n      value\\n    );\\n  }\\n\\n  function transferERC20Tokens(\\n    address payable archanovaAccount,\\n    address payable etherspotAccount,\\n    address[] calldata erc20Tokens,\\n    uint256[] calldata erc20TokensAmounts,\\n    bytes calldata archanovaAccountDeviceSignature\\n  )\\n    external\\n  {\\n    _verifyArchanovaAccountOwner(\\n      archanovaAccount,\\n      etherspotAccount,\\n      archanovaAccountDeviceSignature\\n    );\\n\\n    _transferERC20Tokens(\\n      archanovaAccount,\\n      etherspotAccount,\\n      erc20Tokens,\\n      erc20TokensAmounts\\n    );\\n  }\\n\\n  function transferBalanceAndERC20Tokens(\\n    address payable archanovaAccount,\\n    address payable etherspotAccount,\\n    uint256 value,\\n    address[] calldata erc20Tokens,\\n    uint256[] calldata erc20TokensAmounts,\\n    bytes calldata archanovaAccountDeviceSignature\\n  )\\n    external\\n  {\\n    _verifyArchanovaAccountOwner(\\n      archanovaAccount,\\n      etherspotAccount,\\n      archanovaAccountDeviceSignature\\n    );\\n\\n    _transferBalance(\\n      archanovaAccount,\\n      etherspotAccount,\\n      value\\n    );\\n\\n    _transferERC20Tokens(\\n      archanovaAccount,\\n      etherspotAccount,\\n      erc20Tokens,\\n      erc20TokensAmounts\\n    );\\n  }\\n\\n  function transferERC721Tokens(\\n    address payable archanovaAccount,\\n    address payable etherspotAccount,\\n    address[] calldata erc721Tokens,\\n    uint256[] calldata erc721TokensIds,\\n    bytes calldata archanovaAccountDeviceSignature\\n  )\\n    external\\n  {\\n    _verifyArchanovaAccountOwner(\\n      archanovaAccount,\\n      etherspotAccount,\\n      archanovaAccountDeviceSignature\\n    );\\n\\n    _transferERC721Tokens(\\n      archanovaAccount,\\n      etherspotAccount,\\n      erc721Tokens,\\n      erc721TokensIds\\n    );\\n  }\\n\\n  function transferBalanceAndERC721Tokens(\\n    address payable archanovaAccount,\\n    address payable etherspotAccount,\\n    uint256 value,\\n    address[] calldata erc721Tokens,\\n    uint256[] calldata erc721TokensIds,\\n    bytes calldata archanovaAccountDeviceSignature\\n  )\\n    external\\n  {\\n    _verifyArchanovaAccountOwner(\\n      archanovaAccount,\\n      etherspotAccount,\\n      archanovaAccountDeviceSignature\\n    );\\n\\n    _transferBalance(\\n      archanovaAccount,\\n      etherspotAccount,\\n      value\\n    );\\n\\n    _transferERC721Tokens(\\n      archanovaAccount,\\n      etherspotAccount,\\n      erc721Tokens,\\n      erc721TokensIds\\n    );\\n  }\\n\\n  function transferERC20TokensAndERC721Tokens(\\n    address payable archanovaAccount,\\n    address payable etherspotAccount,\\n    address[] calldata erc20Tokens,\\n    uint256[] calldata erc20TokensAmounts,\\n    address[] calldata erc721Tokens,\\n    uint256[] calldata erc721TokensIds,\\n    bytes calldata archanovaAccountDeviceSignature\\n  )\\n    external\\n  {\\n    _verifyArchanovaAccountOwner(\\n      archanovaAccount,\\n      etherspotAccount,\\n      archanovaAccountDeviceSignature\\n    );\\n\\n    _transferERC20Tokens(\\n      archanovaAccount,\\n      etherspotAccount,\\n      erc20Tokens,\\n      erc20TokensAmounts\\n    );\\n\\n    _transferERC721Tokens(\\n      archanovaAccount,\\n      etherspotAccount,\\n      erc721Tokens,\\n      erc721TokensIds\\n    );\\n  }\\n\\n  function transferBalanceAndERC20TokensAndERC721Tokens(\\n    address payable archanovaAccount,\\n    address payable etherspotAccount,\\n    uint256 value,\\n    address[] calldata erc20Tokens,\\n    uint256[] calldata erc20TokensAmounts,\\n    address[] calldata erc721Tokens,\\n    uint256[] calldata erc721TokensIds,\\n    bytes calldata archanovaAccountDeviceSignature\\n  )\\n    external\\n  {\\n    _verifyArchanovaAccountOwner(\\n      archanovaAccount,\\n      etherspotAccount,\\n      archanovaAccountDeviceSignature\\n    );\\n\\n    _transferBalance(\\n      archanovaAccount,\\n      etherspotAccount,\\n      value\\n    );\\n\\n    _transferERC20Tokens(\\n      archanovaAccount,\\n      etherspotAccount,\\n      erc20Tokens,\\n      erc20TokensAmounts\\n    );\\n\\n    _transferERC721Tokens(\\n      archanovaAccount,\\n      etherspotAccount,\\n      erc721Tokens,\\n      erc721TokensIds\\n    );\\n  }\\n\\n  function transferENSNode(\\n    address payable archanovaAccount,\\n    address payable etherspotAccount,\\n    bytes32 ensNode,\\n    bytes calldata archanovaAccountDeviceSignature\\n  )\\n    external\\n  {\\n    _verifyArchanovaAccountOwner(\\n      archanovaAccount,\\n      etherspotAccount,\\n      archanovaAccountDeviceSignature\\n    );\\n\\n    _transferENSNode(\\n      archanovaAccount,\\n      etherspotAccount,\\n      ensNode\\n    );\\n  }\\n\\n\\n  function transferBalanceAndENSNode(\\n    address payable archanovaAccount,\\n    address payable etherspotAccount,\\n    uint256 value,\\n    bytes32 ensNode,\\n    bytes calldata archanovaAccountDeviceSignature\\n  )\\n    external\\n  {\\n    _verifyArchanovaAccountOwner(\\n      archanovaAccount,\\n      etherspotAccount,\\n      archanovaAccountDeviceSignature\\n    );\\n\\n    _transferBalance(\\n      archanovaAccount,\\n      etherspotAccount,\\n      value\\n    );\\n\\n    _transferENSNode(\\n      archanovaAccount,\\n      etherspotAccount,\\n      ensNode\\n    );\\n  }\\n\\n  function transferERC20TokensAndENSNode(\\n    address payable archanovaAccount,\\n    address payable etherspotAccount,\\n    address[] calldata erc20Tokens,\\n    uint256[] calldata erc20TokensAmounts,\\n    bytes32 ensNode,\\n    bytes calldata archanovaAccountDeviceSignature\\n  )\\n    external\\n  {\\n    _verifyArchanovaAccountOwner(\\n      archanovaAccount,\\n      etherspotAccount,\\n      archanovaAccountDeviceSignature\\n    );\\n\\n    _transferERC20Tokens(\\n      archanovaAccount,\\n      etherspotAccount,\\n      erc20Tokens,\\n      erc20TokensAmounts\\n    );\\n\\n    _transferENSNode(\\n      archanovaAccount,\\n      etherspotAccount,\\n      ensNode\\n    );\\n  }\\n\\n  function transferBalanceAndERC20TokensAndENSNode(\\n    address payable archanovaAccount,\\n    address payable etherspotAccount,\\n    uint256 value,\\n    address[] calldata erc20Tokens,\\n    uint256[] calldata erc20TokensAmounts,\\n    bytes32 ensNode,\\n    bytes calldata archanovaAccountDeviceSignature\\n  )\\n    external\\n  {\\n    _verifyArchanovaAccountOwner(\\n      archanovaAccount,\\n      etherspotAccount,\\n      archanovaAccountDeviceSignature\\n    );\\n\\n    _transferBalance(\\n      archanovaAccount,\\n      etherspotAccount,\\n      value\\n    );\\n\\n    _transferERC20Tokens(\\n      archanovaAccount,\\n      etherspotAccount,\\n      erc20Tokens,\\n      erc20TokensAmounts\\n    );\\n\\n    _transferENSNode(\\n      archanovaAccount,\\n      etherspotAccount,\\n      ensNode\\n    );\\n  }\\n\\n  function transferERC721TokensAndENSNode(\\n    address payable archanovaAccount,\\n    address payable etherspotAccount,\\n    address[] calldata erc721Tokens,\\n    uint256[] calldata erc721TokensIds,\\n    bytes32 ensNode,\\n    bytes calldata archanovaAccountDeviceSignature\\n  )\\n    external\\n  {\\n    _verifyArchanovaAccountOwner(\\n      archanovaAccount,\\n      etherspotAccount,\\n      archanovaAccountDeviceSignature\\n    );\\n\\n    _transferERC721Tokens(\\n      archanovaAccount,\\n      etherspotAccount,\\n      erc721Tokens,\\n      erc721TokensIds\\n    );\\n\\n    _transferENSNode(\\n      archanovaAccount,\\n      etherspotAccount,\\n      ensNode\\n    );\\n  }\\n\\n  function transferBalanceAndERC721TokensAndENSNode(\\n    address payable archanovaAccount,\\n    address payable etherspotAccount,\\n    uint256 value,\\n    address[] calldata erc721Tokens,\\n    uint256[] calldata erc721TokensIds,\\n    bytes32 ensNode,\\n    bytes calldata archanovaAccountDeviceSignature\\n  )\\n    external\\n  {\\n    _verifyArchanovaAccountOwner(\\n      archanovaAccount,\\n      etherspotAccount,\\n      archanovaAccountDeviceSignature\\n    );\\n\\n    _transferBalance(\\n      archanovaAccount,\\n      etherspotAccount,\\n      value\\n    );\\n\\n    _transferERC721Tokens(\\n      archanovaAccount,\\n      etherspotAccount,\\n      erc721Tokens,\\n      erc721TokensIds\\n    );\\n\\n    _transferENSNode(\\n      archanovaAccount,\\n      etherspotAccount,\\n      ensNode\\n    );\\n  }\\n\\n  function transferERC20TokensAndERC721TokensAndENSNode(\\n    address payable archanovaAccount,\\n    address payable etherspotAccount,\\n    address[] calldata erc20Tokens,\\n    uint256[] calldata erc20TokensAmounts,\\n    address[] calldata erc721Tokens,\\n    uint256[] calldata erc721TokensIds,\\n    bytes32 ensNode,\\n    bytes calldata archanovaAccountDeviceSignature\\n  )\\n    external\\n  {\\n    _verifyArchanovaAccountOwner(\\n      archanovaAccount,\\n      etherspotAccount,\\n      archanovaAccountDeviceSignature\\n    );\\n\\n    _transferERC20Tokens(\\n      archanovaAccount,\\n      etherspotAccount,\\n      erc20Tokens,\\n      erc20TokensAmounts\\n    );\\n\\n    _transferERC721Tokens(\\n      archanovaAccount,\\n      etherspotAccount,\\n      erc721Tokens,\\n      erc721TokensIds\\n    );\\n\\n    _transferENSNode(\\n      archanovaAccount,\\n      etherspotAccount,\\n      ensNode\\n    );\\n  }\\n\\n  function transferBalanceAndERC20TokensAndERC721TokensAndENSNode(\\n    address payable archanovaAccount,\\n    address payable etherspotAccount,\\n    uint256 value,\\n    address[] calldata erc20Tokens,\\n    uint256[] calldata erc20TokensAmounts,\\n    address[] calldata erc721Tokens,\\n    uint256[] calldata erc721TokensIds,\\n    bytes32 ensNode,\\n    bytes calldata archanovaAccountDeviceSignature\\n  )\\n    external\\n  {\\n    _verifyArchanovaAccountOwner(\\n      archanovaAccount,\\n      etherspotAccount,\\n      archanovaAccountDeviceSignature\\n    );\\n\\n    _transferBalance(\\n      archanovaAccount,\\n      etherspotAccount,\\n      value\\n    );\\n\\n    _transferERC20Tokens(\\n      archanovaAccount,\\n      etherspotAccount,\\n      erc20Tokens,\\n      erc20TokensAmounts\\n    );\\n\\n    _transferERC721Tokens(\\n      archanovaAccount,\\n      etherspotAccount,\\n      erc721Tokens,\\n      erc721TokensIds\\n    );\\n\\n    _transferENSNode(\\n      archanovaAccount,\\n      etherspotAccount,\\n      ensNode\\n    );\\n  }\\n\\n  // private functions\\n\\n  function _transferBalance(\\n    address payable archanovaAccount,\\n    address payable etherspotAccount,\\n    uint256 value\\n  )\\n    private\\n  {\\n    ArchanovaAccount(archanovaAccount).executeTransaction(\\n      etherspotAccount,\\n      value,\\n      new bytes(0)\\n    );\\n\\n    emit BalanceTransferred(\\n      archanovaAccount,\\n      etherspotAccount,\\n      value\\n    );\\n  }\\n\\n  function _transferERC20Tokens(\\n    address payable archanovaAccount,\\n    address payable etherspotAccount,\\n    address[] memory tokens,\\n    uint256[] memory tokensAmounts\\n  )\\n    private\\n  {\\n    uint tokensLen = tokens.length;\\n\\n    for (uint i = 0; i < tokensLen; i++) {\\n      _transferERC20Token(\\n        archanovaAccount,\\n        etherspotAccount,\\n        payable(tokens[i]),\\n        tokensAmounts[i]\\n      );\\n    }\\n  }\\n\\n  function _transferERC20Token(\\n    address payable archanovaAccount,\\n    address payable etherspotAccount,\\n    address payable token,\\n    uint256 tokensAmount\\n  )\\n    private\\n  {\\n    bytes memory data = abi.encodeWithSelector(\\n      TRANSFER_SELECTOR,\\n      etherspotAccount,\\n      tokensAmount\\n    );\\n\\n    bytes memory response = ArchanovaAccount(archanovaAccount).executeTransaction(\\n      token,\\n      0,\\n      data\\n    );\\n\\n    if (response.length > 0) {\\n      require(\\n        abi.decode(response, (bool)),\\n        \\\"ArchanovaMigrator: ERC20Token transfer reverted\\\"\\n      );\\n    }\\n  }\\n\\n  function _transferERC721Tokens(\\n    address payable archanovaAccount,\\n    address payable etherspotAccount,\\n    address[] memory tokens,\\n    uint256[] memory tokensIds\\n  )\\n    private\\n  {\\n    uint tokensLen = tokens.length;\\n\\n    for (uint i = 0; i < tokensLen; i++) {\\n      _transferERC721Token(\\n        archanovaAccount,\\n        etherspotAccount,\\n        payable(tokens[i]),\\n        tokensIds[i]\\n      );\\n    }\\n  }\\n\\n  function _transferERC721Token(\\n    address payable archanovaAccount,\\n    address payable etherspotAccount,\\n    address payable token,\\n    uint256 tokenId\\n  )\\n  private\\n  {\\n    bytes memory data = abi.encodeWithSelector(\\n      TRANSFER_FROM_SELECTOR,\\n      archanovaAccount,\\n      etherspotAccount,\\n      tokenId\\n    );\\n\\n    bytes memory response = ArchanovaAccount(archanovaAccount).executeTransaction(\\n      token,\\n      0,\\n      data\\n    );\\n\\n    if (response.length > 0) {\\n      require(\\n        abi.decode(response, (bool)),\\n        \\\"ArchanovaMigrator: ERC721 transfer from reverted\\\"\\n      );\\n    }\\n  }\\n\\n  function _transferENSNode(\\n    address payable archanovaAccount,\\n    address payable etherspotAccount,\\n    bytes32 ensNode\\n  )\\n    private\\n  {\\n    ArchanovaAccount(archanovaAccount).executeTransaction(\\n      ensRegistry,\\n      0,\\n      abi.encodeWithSelector(\\n        SET_RESOLVER_SELECTOR,\\n        ensNode,\\n        address(ensController)\\n      )\\n    );\\n\\n    ArchanovaAccount(archanovaAccount).executeTransaction(\\n      ensController,\\n      0,\\n      abi.encodeWithSelector(\\n        SYNC_ADDR_SELECTOR,\\n        ensNode\\n      )\\n    );\\n\\n    ArchanovaAccount(archanovaAccount).executeTransaction(\\n      ensController,\\n      0,\\n      abi.encodeWithSelector(\\n        SET_ADDR_SELECTOR,\\n        ensNode,\\n        etherspotAccount\\n      )\\n    );\\n\\n    ArchanovaAccount(archanovaAccount).executeTransaction(\\n      ensRegistry,\\n      0,\\n      abi.encodeWithSelector(\\n        SET_OWNER_SELECTOR,\\n        ensNode,\\n        etherspotAccount\\n      )\\n    );\\n\\n    emit ENSNodeTransferred(\\n      archanovaAccount,\\n      etherspotAccount,\\n      ensNode\\n    );\\n  }\\n\\n  // private functions (views)\\n\\n  function _verifyArchanovaAccountOwner(\\n    address payable archanovaAccount,\\n    address payable etherspotAccount,\\n    bytes memory archanovaAccountDeviceSignature\\n  )\\n    private\\n    view\\n  {\\n    address recovered = keccak256(abi.encodePacked(\\n        \\\"\\\\x19Ethereum Signed Message:\\\\n32\\\",\\n        keccak256(abi.encodePacked(\\n          chainId,\\n          address(this),\\n          MIGRATION_MESSAGE_PREFIX,\\n          archanovaAccount,\\n          etherspotAccount\\n        ))\\n      )).recoverAddress(archanovaAccountDeviceSignature);\\n\\n    (bool exists, bool isOwner, ) = ArchanovaAccount(archanovaAccount).devices(\\n      recovered\\n    );\\n\\n    require(\\n      exists && isOwner,\\n      \\\"ArchanovaMigrator: Invalid archanova account device signature\\\"\\n    );\\n  }\\n}\\n\"\r\n    }\r\n  }\r\n}}","ABI":"[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"archanovaAccount\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"etherspotAccount\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"BalanceTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"archanovaAccount\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"etherspotAccount\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"ensNode\",\"type\":\"bytes32\"}],\"name\":\"ENSNodeTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"archanovaAccount\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"etherspotAccount\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenAmount\",\"type\":\"uint256\"}],\"name\":\"ERC20TokenTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"archanovaAccount\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"etherspotAccount\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ERC721TokenTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"initializer\",\"type\":\"address\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"ensController\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ensRegistry\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"ensController_\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"ensRegistry_\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isInitialized\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"archanovaAccount\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"etherspotAccount\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"archanovaAccountDeviceSignature\",\"type\":\"bytes\"}],\"name\":\"transferBalance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"archanovaAccount\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"etherspotAccount\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"ensNode\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"archanovaAccountDeviceSignature\",\"type\":\"bytes\"}],\"name\":\"transferBalanceAndENSNode\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"archanovaAccount\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"etherspotAccount\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"erc20Tokens\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"erc20TokensAmounts\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"archanovaAccountDeviceSignature\",\"type\":\"bytes\"}],\"name\":\"transferBalanceAndERC20Tokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"archanovaAccount\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"etherspotAccount\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"erc20Tokens\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"erc20TokensAmounts\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes32\",\"name\":\"ensNode\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"archanovaAccountDeviceSignature\",\"type\":\"bytes\"}],\"name\":\"transferBalanceAndERC20TokensAndENSNode\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"archanovaAccount\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"etherspotAccount\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"erc20Tokens\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"erc20TokensAmounts\",\"type\":\"uint256[]\"},{\"internalType\":\"address[]\",\"name\":\"erc721Tokens\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"erc721TokensIds\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"archanovaAccountDeviceSignature\",\"type\":\"bytes\"}],\"name\":\"transferBalanceAndERC20TokensAndERC721Tokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"archanovaAccount\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"etherspotAccount\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"erc20Tokens\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"erc20TokensAmounts\",\"type\":\"uint256[]\"},{\"internalType\":\"address[]\",\"name\":\"erc721Tokens\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"erc721TokensIds\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes32\",\"name\":\"ensNode\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"archanovaAccountDeviceSignature\",\"type\":\"bytes\"}],\"name\":\"transferBalanceAndERC20TokensAndERC721TokensAndENSNode\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"archanovaAccount\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"etherspotAccount\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"erc721Tokens\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"erc721TokensIds\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"archanovaAccountDeviceSignature\",\"type\":\"bytes\"}],\"name\":\"transferBalanceAndERC721Tokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"archanovaAccount\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"etherspotAccount\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"erc721Tokens\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"erc721TokensIds\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes32\",\"name\":\"ensNode\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"archanovaAccountDeviceSignature\",\"type\":\"bytes\"}],\"name\":\"transferBalanceAndERC721TokensAndENSNode\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"archanovaAccount\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"etherspotAccount\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"ensNode\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"archanovaAccountDeviceSignature\",\"type\":\"bytes\"}],\"name\":\"transferENSNode\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"archanovaAccount\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"etherspotAccount\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"erc20Tokens\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"erc20TokensAmounts\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"archanovaAccountDeviceSignature\",\"type\":\"bytes\"}],\"name\":\"transferERC20Tokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"archanovaAccount\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"etherspotAccount\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"erc20Tokens\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"erc20TokensAmounts\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes32\",\"name\":\"ensNode\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"archanovaAccountDeviceSignature\",\"type\":\"bytes\"}],\"name\":\"transferERC20TokensAndENSNode\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"archanovaAccount\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"etherspotAccount\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"erc20Tokens\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"erc20TokensAmounts\",\"type\":\"uint256[]\"},{\"internalType\":\"address[]\",\"name\":\"erc721Tokens\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"erc721TokensIds\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"archanovaAccountDeviceSignature\",\"type\":\"bytes\"}],\"name\":\"transferERC20TokensAndERC721Tokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"archanovaAccount\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"etherspotAccount\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"erc20Tokens\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"erc20TokensAmounts\",\"type\":\"uint256[]\"},{\"internalType\":\"address[]\",\"name\":\"erc721Tokens\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"erc721TokensIds\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes32\",\"name\":\"ensNode\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"archanovaAccountDeviceSignature\",\"type\":\"bytes\"}],\"name\":\"transferERC20TokensAndERC721TokensAndENSNode\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"archanovaAccount\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"etherspotAccount\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"erc721Tokens\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"erc721TokensIds\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"archanovaAccountDeviceSignature\",\"type\":\"bytes\"}],\"name\":\"transferERC721Tokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"archanovaAccount\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"etherspotAccount\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"erc721Tokens\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"erc721TokensIds\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes32\",\"name\":\"ensNode\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"archanovaAccountDeviceSignature\",\"type\":\"bytes\"}],\"name\":\"transferERC721TokensAndENSNode\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"ArchanovaMigrator","CompilerVersion":"v0.6.12+commit.27d51765","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":""}]}