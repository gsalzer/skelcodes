{"status":"1","message":"OK","result":[{"SourceCode":"// SPDX-License-Identifier: MIT\r\n\r\n/*\r\n *       $$$$$$_$$__$$__$$$$__$$$$$$\r\n *       ____$$_$$__$$_$$_______$$\r\n *       ____$$_$$__$$__$$$$____$$\r\n *       $$__$$_$$__$$_____$$___$$\r\n *       _$$$$___$$$$___$$$$____$$\r\n *\r\n *       $$__$$_$$$$$$_$$$$$__$$_____$$$$$\r\n *       _$$$$____$$___$$_____$$_____$$__$$\r\n *       __$$_____$$___$$$$___$$_____$$__$$\r\n *       __$$_____$$___$$_____$$_____$$__$$\r\n *       __$$___$$$$$$_$$$$$__$$$$$$_$$$$$\r\n *\r\n *       $$___$_$$$$$$_$$$$$$_$$__$$\r\n *       $$___$___$$_____$$___$$__$$\r\n *       $$_$_$___$$_____$$___$$$$$$\r\n *       $$$$$$___$$_____$$___$$__$$\r\n *       _$$_$$_$$$$$$___$$___$$__$$\r\n *\r\n *       $$__$$_$$$$$__$$\r\n *       _$$$$__$$_____$$\r\n *       __$$___$$$$___$$\r\n *       __$$___$$_____$$\r\n *       __$$___$$$$$__$$$$$$\r\n */\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/*\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor () {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\n/**\r\n * @dev Contract module that helps prevent reentrant calls to a function.\r\n *\r\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\r\n * available, which can be applied to functions to make sure there are no nested\r\n * (reentrant) calls to them.\r\n *\r\n * Note that because there is a single `nonReentrant` guard, functions marked as\r\n * `nonReentrant` may not call one another. This can be worked around by making\r\n * those functions `private`, and then adding `external` `nonReentrant` entry\r\n * points to them.\r\n *\r\n * TIP: If you would like to learn more about reentrancy and alternative ways\r\n * to protect against it, check out our blog post\r\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\r\n */\r\nabstract contract ReentrancyGuard {\r\n    // Booleans are more expensive than uint256 or any type that takes up a full\r\n    // word because each write operation emits an extra SLOAD to first read the\r\n    // slot's contents, replace the bits taken up by the boolean, and then write\r\n    // back. This is the compiler's defense against contract upgrades and\r\n    // pointer aliasing, and it cannot be disabled.\r\n\r\n    // The values being non-zero value makes deployment a bit more expensive,\r\n    // but in exchange the refund on every call to nonReentrant will be lower in\r\n    // amount. Since refunds are capped to a percentage of the total\r\n    // transaction's gas, it is best to keep them low in cases like this one, to\r\n    // increase the likelihood of the full refund coming into effect.\r\n    uint256 private constant _NOT_ENTERED = 1;\r\n    uint256 private constant _ENTERED = 2;\r\n\r\n    uint256 private _status;\r\n\r\n    constructor() {\r\n        _status = _NOT_ENTERED;\r\n    }\r\n\r\n    /**\r\n     * @dev Prevents a contract from calling itself, directly or indirectly.\r\n     * Calling a `nonReentrant` function from another `nonReentrant`\r\n     * function is not supported. It is possible to prevent this from happening\r\n     * by making the `nonReentrant` function external, and make it call a\r\n     * `private` function that does the actual work.\r\n     */\r\n    modifier nonReentrant() {\r\n        // On the first call to nonReentrant, _notEntered will be true\r\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\r\n\r\n        // Any calls to nonReentrant after this point will fail\r\n        _status = _ENTERED;\r\n\r\n        _;\r\n\r\n        // By storing the original value once again, a refund is triggered (see\r\n        // https://eips.ethereum.org/EIPS/eip-2200)\r\n        _status = _NOT_ENTERED;\r\n    }\r\n}\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n\r\ninterface AggregatorV3Interface {\r\n\r\n    function decimals() external view returns (uint8);\r\n    function description() external view returns (string memory);\r\n    function version() external view returns (uint256);\r\n\r\n    // getRoundData and latestRoundData should both raise \"No data present\"\r\n    // if they do not have data to report, instead of returning unset values\r\n    // which could be misinterpreted as actual reported values.\r\n    function getRoundData(uint80 _roundId)\r\n    external\r\n    view\r\n    returns (\r\n        uint80 roundId,\r\n        int256 answer,\r\n        uint256 startedAt,\r\n        uint256 updatedAt,\r\n        uint80 answeredInRound\r\n    );\r\n    function latestRoundData()\r\n    external\r\n    view\r\n    returns (\r\n        uint80 roundId,\r\n        int256 answer,\r\n        uint256 startedAt,\r\n        uint256 updatedAt,\r\n        uint80 answeredInRound\r\n    );\r\n\r\n}\r\n\r\n\r\ncontract TokenSale is Ownable, ReentrancyGuard {\r\n    address public token;\r\n    address public oracle;\r\n    uint256 public threshold; // with 1e18\r\n\r\n    uint256 public initialPrice; // with 1e18\r\n    uint256 public tokenPriceUSD; // with 1e18\r\n\r\n    uint256 public weiRaised; // with 1e18\r\n    uint256 public notClaimedTokens; // with 1e18\r\n\r\n    uint256 public presaleStartsAt;\r\n    uint256 public presaleEndsAt;\r\n    uint256 public claimStartsAt;\r\n\r\n    mapping(address => uint256) public contributionInWei;\r\n    mapping(address => uint256) public contributionInUSD;\r\n\r\n    event Withdraw(address indexed owner, uint256 indexed amount);\r\n    event BuyTokens(address indexed buyer, uint256 indexed tokens, uint256 indexed pricePerToken, uint256 buyingPower);\r\n    event PreBuyTokens(address indexed buyer, uint256 indexed tokens, uint256 indexed pricePerToken, uint256 buyingPower);\r\n    event ClaimedTokens(address indexed buyer, uint256 indexed tokens);\r\n\r\n    constructor(\r\n        address _token,\r\n        address _oracle,\r\n        uint256 _initialPrice,\r\n        uint256 _threshold,\r\n        uint256 _presaleStartsAt,\r\n        uint256 _presaleEndsAt,\r\n        uint256 _claimStartsAt\r\n        ) public {\r\n\r\n        require(_token != address(0));\r\n        require(_oracle != address(0));\r\n\r\n        require(_initialPrice > 0, \"Price should be bigger than 0\");\r\n        require(_threshold > 0, \"Threshold should be bigger than 0\");\r\n        require(_presaleStartsAt > block.timestamp, \"Presale should start now or in the future\");\r\n        require(_presaleStartsAt < _presaleEndsAt, \"Presale cannot start after end date\");\r\n        require(_presaleEndsAt < _claimStartsAt, \"Presale end date cannot be after claim date\");\r\n\r\n        token = _token;\r\n        oracle = _oracle;\r\n\r\n        threshold = _threshold * 1e18;\r\n        initialPrice = _initialPrice;\r\n        tokenPriceUSD = _initialPrice;\r\n        presaleStartsAt = _presaleStartsAt;\r\n        presaleEndsAt = _presaleEndsAt;\r\n        claimStartsAt = _claimStartsAt;\r\n    }\r\n\r\n\r\n    modifier isPresale {\r\n        require(block.timestamp >= presaleStartsAt && block.timestamp <= presaleEndsAt, \"It's not presale period\");\r\n\r\n        _;\r\n    }\r\n\r\n    modifier hasTokensToClaim {\r\n        require(contributionInWei[msg.sender] > 0, \"User has NO tokens\");\r\n\r\n        _;\r\n    }\r\n\r\n    modifier claimStart {\r\n        require(block.timestamp >= claimStartsAt, \"Claim period not started\");\r\n\r\n        _;\r\n    }\r\n\r\n    receive() external payable {\r\n        buyTokens();\r\n    }\r\n\r\n    function claimTokens() public claimStart hasTokensToClaim nonReentrant{\r\n        uint256 userWeis = contributionInWei[msg.sender];\r\n        contributionInWei[msg.sender] = 0;\r\n        uint256 _priceInWeiPerToken = getPriceInWeiPerToken(tokenPriceUSD);\r\n        uint256 usersTokens = 1e18 * userWeis / _priceInWeiPerToken;\r\n\r\n        if (notClaimedTokens >= usersTokens) {\r\n            notClaimedTokens -= usersTokens;\r\n        } else {\r\n            notClaimedTokens = 0;\r\n        }\r\n\r\n        IERC20(token).transfer(msg.sender, usersTokens);\r\n        emit ClaimedTokens(msg.sender, usersTokens);\r\n    }\r\n\r\n    function withdraw() external onlyOwner nonReentrant {\r\n        uint256 amount = address(this).balance;\r\n        address payable ownerPayable = payable(msg.sender);\r\n        ownerPayable.transfer(amount);\r\n\r\n        emit Withdraw(msg.sender, amount);\r\n    }\r\n\r\n    function withdrawTokens() external onlyOwner claimStart nonReentrant {\r\n        uint256 unsoldTokens = IERC20(token).balanceOf(address(this));\r\n\r\n        IERC20(token).transfer(msg.sender, unsoldTokens - notClaimedTokens);\r\n    }\r\n\r\n    function buyTokens() public payable isPresale nonReentrant {\r\n        uint256 maxTokenPriceUSD = initialPrice * 2**4;\r\n        uint256 _priceInWeiPerToken = getPriceInWeiPerToken(tokenPriceUSD);\r\n        uint256 tokens = 1e18 * msg.value / _priceInWeiPerToken;\r\n        uint256 tokensByMaxPrice = tokens / (maxTokenPriceUSD/tokenPriceUSD);\r\n        require(tokens > 0, \"Insufficient funds\");\r\n\r\n        uint256 buyLimitTokens = remainingTokensByMaxPrice();\r\n        require(buyLimitTokens > tokensByMaxPrice, \"There is no more tokens to sell\");\r\n\r\n        uint256 tradeAmountInUSD = tokens * tokenPriceUSD / 1e36; // in USD\r\n\r\n        contributionInWei[msg.sender] += msg.value;\r\n        contributionInUSD[msg.sender] += tradeAmountInUSD;\r\n        weiRaised += msg.value;\r\n        notClaimedTokens += tokens;\r\n\r\n        updateTokenPrice(_priceInWeiPerToken);\r\n\r\n        emit PreBuyTokens(msg.sender, tokens, _priceInWeiPerToken, msg.value);\r\n    }\r\n\r\n    function remainingTokensByMaxPrice() internal returns(uint256) {\r\n        uint256 maxTokenPriceUSD = initialPrice * 2**4;\r\n        uint256 _priceInWeiPerToken = getPriceInWeiPerToken(maxTokenPriceUSD);\r\n        uint256 purchesedTokensByMaxPrice = 1e18 * weiRaised / _priceInWeiPerToken;\r\n\r\n        return threshold - purchesedTokensByMaxPrice;\r\n    }\r\n\r\n    function remainingTokensByCurrentPrice() public view returns(uint256) {\r\n        uint256 _priceInWeiPerToken = getPriceInWeiPerToken(tokenPriceUSD);\r\n        uint256 purchesedTokens = 1e18 * weiRaised / _priceInWeiPerToken;\r\n\r\n        return threshold - purchesedTokens;\r\n    }\r\n\r\n    function updateTokenPrice(uint256 _priceInWeiPerToken) internal {\r\n        uint256 purchesedTokens = 1e18 * weiRaised / _priceInWeiPerToken;\r\n        while (purchesedTokens > threshold && tokenPriceUSD / initialPrice < 16) {\r\n            tokenPriceUSD = tokenPriceUSD * 2;\r\n            notClaimedTokens = notClaimedTokens / 2;\r\n            purchesedTokens = 1e18 * weiRaised / getPriceInWeiPerToken(tokenPriceUSD);\r\n        }\r\n    }\r\n\r\n    function balanceOf(address adr) public view returns(uint256) {\r\n        uint256 userWeis = contributionInWei[adr];\r\n        uint256 _priceInWeiPerToken = getPriceInWeiPerToken(tokenPriceUSD);\r\n        uint256 tokens = 1e18 * userWeis / _priceInWeiPerToken;\r\n        return tokens;\r\n    }\r\n\r\n    function getPriceInWeiPerToken(uint256 _tokenPriceUSD) public view returns(uint256) {\r\n        int oraclePriceTemp = getLatestPriceETHUSD(); // with 10**getDecimalsOracle()\r\n        require(oraclePriceTemp > 0, \"Invalid price\");\r\n\r\n        return _tokenPriceUSD * 10**getDecimalsOracle() / uint256(oraclePriceTemp); // result with 1e18\r\n    }\r\n\r\n    function getPriceInWeiPerToken() public view returns(uint256) {\r\n        return getPriceInWeiPerToken(tokenPriceUSD);\r\n    }\r\n\r\n    function getLatestPriceETHUSD() public view returns (int) {\r\n        (\r\n            uint80 roundID,\r\n            int price,\r\n            uint startedAt,\r\n            uint timeStamp,\r\n            uint80 answeredInRound\r\n        ) = AggregatorV3Interface(oracle).latestRoundData();\r\n\r\n        return price;\r\n    }\r\n\r\n    function getDecimalsOracle() public view returns (uint8) {\r\n        (\r\n            uint8 decimals\r\n        ) = AggregatorV3Interface(oracle).decimals();\r\n\r\n        return decimals;\r\n    }\r\n\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_oracle\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_initialPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_threshold\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_presaleStartsAt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_presaleEndsAt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_claimStartsAt\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokens\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"pricePerToken\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"buyingPower\",\"type\":\"uint256\"}],\"name\":\"BuyTokens\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"ClaimedTokens\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokens\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"pricePerToken\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"buyingPower\",\"type\":\"uint256\"}],\"name\":\"PreBuyTokens\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"adr\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyTokens\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimStartsAt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"contributionInUSD\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"contributionInWei\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getDecimalsOracle\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLatestPriceETHUSD\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPriceInWeiPerToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenPriceUSD\",\"type\":\"uint256\"}],\"name\":\"getPriceInWeiPerToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initialPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"notClaimedTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"oracle\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"presaleEndsAt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"presaleStartsAt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"remainingTokensByCurrentPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"threshold\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenPriceUSD\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"weiRaised\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]","ContractName":"TokenSale","CompilerVersion":"v0.8.6+commit.11564f7e","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"000000000000000000000000819a8f6458de5d8876c637be8ebbb662961d02930000000000000000000000005f4ec3df9cbd43714fe2740f5e3616155c5b84190000000000000000000000000000000000000000000000000000b5e620f4800000000000000000000000000000000000000000000000000000000000017d78400000000000000000000000000000000000000000000000000000000060faaf400000000000000000000000000000000000000000000000000000000060fc39000000000000000000000000000000000000000000000000000000000060fc393c","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://0f56a87e9ece96d97a143056eb4f0aac81e838d8c33474a40fce2e69ec955368"}]}