{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"MoonCatAcclimator.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-only\\r\\npragma solidity ^0.7.3;\\r\\n\\r\\nimport \\\"./openzeppelin/contracts/token/ERC721/ERC721.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC721/ERC721Holder.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/utils/Pausable.sol\\\";\\r\\nimport \\\"./IERC998.sol\\\";\\r\\nimport \\\"./MoonCatOrderLookup.sol\\\";\\r\\n\\r\\n//        ##          ##\\r\\n//      ##  ##      ##  ##\\r\\n//      ##..  ######  ..##\\r\\n//    ####              ####\\r\\n//    ##                  ##\\r\\n//    ##    ()      ()    ##\\r\\n//    ##                  ##\\r\\n//    ##     \\\\  ##  /     ##\\r\\n//    ##      \\\\/  \\\\/      ##\\r\\n//      ##              ##\\r\\n//        ##############\\r\\n//\\r\\n//    #AcclimatedMoonCatsGlow\\r\\n//  https://mooncat.community/\\r\\n\\r\\n\\r\\n/**\\r\\n * @title MoonCatâ€‹Acclimator\\r\\n * @notice Accepts an original MoonCat and wraps it to present an ERC721- and ERC998-compliant asset\\r\\n * @notice Accepts a MoonCat wrapped with the older wrapping contract (at 0x7C40c3...) and re-wraps them\\r\\n * @notice Ownable by an admin address. Rights of the Owner are to pause and unpause the contract, and update metadata URL\\r\\n */\\r\\ncontract MoonCatAcclimator is\\r\\n    ERC721,\\r\\n    ERC721Holder,\\r\\n    Ownable,\\r\\n    Pausable,\\r\\n    IERC998ERC721TopDown,\\r\\n    IERC998ERC721TopDownEnumerable\\r\\n{\\r\\n    bytes32 private constant ERC998_MAGIC_VALUE = 0x00000000000000000000000000000000000000000000000000000000cd740db5;\\r\\n    bytes4 private constant _INTERFACE_ID_ERC998ERC721TopDown = 0x1efdf36a;\\r\\n\\r\\n    MoonCatOrderLookup public rescueOrderLookup;\\r\\n\\r\\n    MoonCatRescue MCR = MoonCatRescue(0x60cd862c9C687A9dE49aecdC3A99b74A4fc54aB6);\\r\\n    MoonCatsWrapped OLD_MCRW = MoonCatsWrapped(0x7C40c393DC0f283F318791d746d894DdD3693572);\\r\\n\\r\\n    constructor(string memory baseURI)\\r\\n        ERC721(unicode\\\"Acclimatedâ€‹MoonCats\\\", unicode\\\"ðŸ˜º\\\")\\r\\n        Ownable()\\r\\n    {\\r\\n        _registerInterface(_INTERFACE_ID_ERC998ERC721TopDown);\\r\\n        rescueOrderLookup = new MoonCatOrderLookup();\\r\\n        setBaseURI(baseURI);\\r\\n        _pause(); // Start in a paused state\\r\\n    }\\r\\n\\r\\n    function pause() public whenNotPaused onlyOwner {\\r\\n        _pause();\\r\\n    }\\r\\n    function unpause() public whenPaused onlyOwner {\\r\\n        _unpause();\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Emitted when `catId` token is wrapped into `tokenId`, owned by `owner`.\\r\\n     */\\r\\n    event MoonCatAcclimated(\\r\\n        uint256 tokenId,\\r\\n        address indexed owner\\r\\n    );\\r\\n\\r\\n    /**\\r\\n     * @dev Emitted when `catId` token is unwrapped from `tokenId`, owned by `owner`.\\r\\n     */\\r\\n    event MoonCatDeacclimated(\\r\\n        uint256 tokenId,\\r\\n        address indexed owner\\r\\n    );\\r\\n\\r\\n    /**\\r\\n     * @dev returns tokenId of newly minted wrapped MoonCat\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - Do not need to check if _msgSender() is MoonCat owner as the wrapped token is assigned to owner (even if that's not _msgSender())\\r\\n     * - Owner needs to call makeAdoptionOfferToAddress() in moonCatRescue first.\\r\\n     * Emits a {Transfer} ERC721 event.\\r\\n     * @param _rescueOrder the minting order of the MoonCat to wrap\\r\\n     * @return the ID (rescue order) of the minted token\\r\\n     */\\r\\n    function wrap(uint256 _rescueOrder) public returns (uint256) {\\r\\n        bytes5 catId = MCR.rescueOrder(_rescueOrder);\\r\\n        address _owner = MCR.catOwners(catId);\\r\\n        MCR.acceptAdoptionOffer(catId);\\r\\n        return _wrap(_owner, _rescueOrder);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev returns tokenId of newly minted wrapped MoonCat\\r\\n     *\\r\\n     * This method must not allow an adoption offer specifically to the new Wrapper address to be buy-able by anyone,\\r\\n     * because that is how the real owner sets up a manual wrapping of the MoonCat (where they don't really intend to sell).\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - MoonCat at `_rescueOrder` must be offered for sale to any address.\\r\\n     * - Must have active makeAdoptionOffer() in moonCatRescue contract.\\r\\n     * Emits a {Transfer} and {MoonCatAcclimated} event.\\r\\n     * @param _rescueOrder the minting order of the MoonCat to wrap\\r\\n     * @return the ID (rescue order) of the minted token\\r\\n     */\\r\\n    function buyAndWrap(uint256 _rescueOrder) public payable returns (uint256) {\\r\\n        bytes5 catId = MCR.rescueOrder(_rescueOrder);\\r\\n        (bool exists, , , , address onlyOfferTo) = MCR.adoptionOffers(catId);\\r\\n        require(\\r\\n            onlyOfferTo == address(0) && exists,\\r\\n            \\\"That MoonCat is not for sale\\\"\\r\\n        );\\r\\n        MCR.acceptAdoptionOffer{value: msg.value}(catId);\\r\\n        return _wrap(_msgSender(), _rescueOrder);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev returns tokenId of burned unwrapped MoonCat\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - msgSender() must be owner.\\r\\n     * Emits a {Transfer} and {MoonCatDeacclimated} event.\\r\\n     * @param _tokenId the minting order of the MoonCat to unwrap\\r\\n     * @return the ID (rescue order) of the burned token\\r\\n     */\\r\\n    function unwrap(uint256 _tokenId) public returns (uint256) {\\r\\n        require(ownerOf(_tokenId) == _msgSender(), \\\"Not your MoonCat!\\\");\\r\\n        require(\\r\\n            super._exists(_tokenId),\\r\\n            \\\"That MoonCat is not wrapped in this contract\\\"\\r\\n        );\\r\\n        bytes5 catId = MCR.rescueOrder(_tokenId);\\r\\n        MCR.giveCat(catId, ownerOf(_tokenId));\\r\\n        _burn(_tokenId);\\r\\n        emit MoonCatDeacclimated(_tokenId, _msgSender());\\r\\n        return _tokenId;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev wraps MoonCat that was safeTransferFrom() the old MoonCat wrapper directly in one transaction\\r\\n     *\\r\\n     * Requirements:\\r\\n     * - Owner of old wrapped MoonCat must include the rescueOrder in the calldata as a bytes32\\r\\n     * Emits a {Transfer} and {MoonCatAcclimated} event.\\r\\n     * @param _to the address that is to be the owner of the newly-wrapped token\\r\\n     * @param _oldTokenID the ID of the token in the other wrapping contract\\r\\n     * @param _rescueOrder the minting order of the MoonCat being wrapped\\r\\n     * @return the ID (rescue order) of the minted token\\r\\n     */\\r\\n    function _wrapOnSafeTransferFromReceipt(\\r\\n        address _to,\\r\\n        uint256 _oldTokenID,\\r\\n        uint256 _rescueOrder\\r\\n    ) internal returns (uint256) {\\r\\n        if (\\r\\n            MCR.rescueOrder(_rescueOrder) !=\\r\\n            OLD_MCRW._tokenIDToCatID(_oldTokenID)\\r\\n        ) {\\r\\n            // Look up rescue order in Lookup contract\\r\\n            require(\\r\\n                rescueOrderLookup.oldTokenIdExists(_oldTokenID),\\r\\n                \\\"Unable to determine proper rescueOrder for this old token ID\\\"\\r\\n            );\\r\\n            _rescueOrder = rescueOrderLookup.oldTokenIdToRescueOrder(\\r\\n                _oldTokenID\\r\\n            );\\r\\n            require(\\r\\n                MCR.rescueOrder(_rescueOrder) ==\\r\\n                    OLD_MCRW._tokenIDToCatID(_oldTokenID),\\r\\n                \\\"_oldTokenID and _rescueOrder do not match same catID\\\"\\r\\n            );\\r\\n        }\\r\\n        OLD_MCRW.unwrap(_oldTokenID);\\r\\n        return _wrap(_to, _rescueOrder);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev wraps an unwrapped MoonCat\\r\\n     *\\r\\n     * notes:\\r\\n     * Emits a {Transfer} and {MoonCatAcclimated} event.\\r\\n     * @param _owner the address that should be the new owner of the newly-created token\\r\\n     * @param _tokenId the ID of the token to create (rescue order of the MoonCat)\\r\\n     * @return the ID (rescue order) of the minted token\\r\\n     */\\r\\n    function _wrap(address _owner, uint256 _tokenId)\\r\\n        internal\\r\\n        returns (uint256)\\r\\n    {\\r\\n        require(!paused(), \\\"Attempted wrap while paused\\\");\\r\\n        _mint(_owner, _tokenId);\\r\\n        emit MoonCatAcclimated(_tokenId, _msgSender());\\r\\n        return _tokenId;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Always returns `IERC721Receiver.onERC721Received.selector`\\r\\n     *\\r\\n     * This function handles both automatic rewrapping of old-wrapped MoonCats, and assigning ERC721 tokens as \\\"child assets\\\"\\r\\n     * of MoonCats already wrapped with this contract.\\r\\n     *\\r\\n     * If the incoming token is an old-wrapped Mooncat, the `_data` variable is structured as\\r\\n     * the first 32 bytes are the rescue order of the transferred MoonCat, subsequent 20 bytes\\r\\n     * are the new owner's address. If the rescue order is not supplied, the `_oldTokenId` is\\r\\n     * looked up in the {MoonCatOrderLookup} contract. If a new owner's address is not\\r\\n     * supplied, the new owner will be assigned as the `_from` sender.\\r\\n     * Emits a {Transfer} and {MoonCatAcclimated} event.\\r\\n     *\\r\\n     * If the incoming token is any other type of ERC721, the `_data` variable is structured as\\r\\n     * the first 32 bytes are the token ID (rescue order) of the MoonCat that is to receive that assest.\\r\\n     * Emits a {ReceivedChild} event.\\r\\n     *\\r\\n     * @param _operator the _msgSender of the transaction\\r\\n     * @param _from the address of the former owner of the incoming token\\r\\n     * @param _oldTokenId the ID of the incoming token\\r\\n     * @param _data additional metdata\\r\\n     */\\r\\n    function onERC721Received(\\r\\n        address _operator,\\r\\n        address _from,\\r\\n        uint256 _oldTokenId,\\r\\n        bytes calldata _data\\r\\n    ) public override(ERC721Holder, IERC998ERC721TopDown) returns (bytes4) {\\r\\n        // Using msg.sender here instead of _operator because we want to know the most recent transaction source,\\r\\n        // not the start of the chain\\r\\n        if (msg.sender == address(0x7C40c393DC0f283F318791d746d894DdD3693572)) {\\r\\n            // This is a Wrapped MoonCat incoming. Don't make it a child, instead unwrap and re-wrap it\\r\\n\\r\\n            // Who should own this MoonCat after wrapping?\\r\\n            address _to =\\r\\n                (_data.length >= 32 + 20 && bytesToAddress(_data, 32) != address(0))\\r\\n                    ? bytesToAddress(_data, 32)\\r\\n                    : _from;\\r\\n            require(\\r\\n                _to != address(0) && _to != address(this),\\r\\n                \\\"Invalid destination owner specified\\\"\\r\\n            );\\r\\n\\r\\n            _wrapOnSafeTransferFromReceipt(\\r\\n                _to,\\r\\n                _oldTokenId,\\r\\n                (_data.length >= 32) ? toUint256(_data, 0) : 0\\r\\n            );\\r\\n            return ERC721Holder.onERC721Received(_operator, _from, _oldTokenId, _data);\\r\\n        }\\r\\n\\r\\n        // Otherwise, handle as ERC998 Child incoming\\r\\n        require(_data.length > 0, \\\"_data must contain the uint256 tokenId to transfer the child token to\\\");\\r\\n        // convert up to 32 bytes of_data to uint256, owner NFT tokenId passed as uint in bytes\\r\\n        uint256 tokenId;\\r\\n        assembly {tokenId := calldataload(164)}\\r\\n        if (_data.length < 32) {\\r\\n            tokenId = tokenId >> 256 - _data.length * 8;\\r\\n        }\\r\\n        _receiveChild(_from, tokenId, msg.sender, _oldTokenId);\\r\\n        require(ERC721(msg.sender).ownerOf(_oldTokenId) != address(0), \\\"Child token not owned\\\");\\r\\n        return ERC721Holder.onERC721Received(_operator, _from, _oldTokenId, _data);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev sets the base URI\\r\\n     *\\r\\n     * notes:\\r\\n     * - only callable by the contract owner\\r\\n     */\\r\\n    function setBaseURI(string memory _newBaseURI) public onlyOwner {\\r\\n        _setBaseURI(_newBaseURI);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC721-balanceOf}.\\r\\n     * This contract returns the locally-wrapped token count as well as old-wrapped MoonCats\\r\\n     * that are mapped in the {MoonCatOrderLookup} contract.\\r\\n     */\\r\\n    function balanceOf(address _owner) public view override returns (uint256) {\\r\\n        return\\r\\n            super.balanceOf(_owner) +\\r\\n            rescueOrderLookup.entriesPerAddress(_owner);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n    * @dev See {IERC721Enumerable-tokenOfOwnerByIndex}.\\r\\n     * This contract enumerates the locally-wrapped token count as well as old-wrapped MoonCats\\r\\n     * that are mapped in the {MoonCatOrderLookup} contract.\\r\\n    */\\r\\n    function tokenOfOwnerByIndex(address _owner, uint256 _index)\\r\\n        public\\r\\n        view\\r\\n        override\\r\\n        returns (uint256)\\r\\n    {\\r\\n        uint256 localBalance = super.balanceOf(_owner);\\r\\n        if (_index < localBalance) {\\r\\n            // This index is in the range of tokens owned by that address here in this contract\\r\\n            return super.tokenOfOwnerByIndex(_owner, _index);\\r\\n        }\\r\\n\\r\\n        // Looking to enumerate a token that's mapped to the old wrapping contract\\r\\n        uint16 countFound = 0;\\r\\n        for (uint256 i = 0; i < OLD_MCRW.balanceOf(_owner); i++) {\\r\\n            uint256 oldTokenId = OLD_MCRW.tokenOfOwnerByIndex(_owner, i);\\r\\n            if (rescueOrderLookup.oldTokenIdExists(oldTokenId)) {\\r\\n                countFound++;\\r\\n                if (countFound == _index - localBalance + 1) {\\r\\n                    return\\r\\n                        rescueOrderLookup.oldTokenIdToRescueOrder(oldTokenId);\\r\\n                }\\r\\n            }\\r\\n        }\\r\\n        revert(\\\"Cannot find token ID for that index\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n    * @dev See {IERC721-ownerOf}.\\r\\n    */\\r\\n    function ownerOf(uint256 _tokenId) public view override returns (address) {\\r\\n        if (super._exists(_tokenId)) {\\r\\n            return super.ownerOf(_tokenId);\\r\\n        }\\r\\n\\r\\n        // Check other wrapper\\r\\n\\r\\n        // First see if we're dealing with the MoonCat that was the zeroth-wrapped MoonCat in other wrapper\\r\\n        bytes5 thisMoonCatID = MCR.rescueOrder(_tokenId);\\r\\n        if (thisMoonCatID == OLD_MCRW._tokenIDToCatID(0)) {\\r\\n            return OLD_MCRW.ownerOf(0);\\r\\n        }\\r\\n        uint256 otherID = OLD_MCRW._catIDToTokenID(thisMoonCatID);\\r\\n        // We're not dealing with the zeroth-wrapped MoonCat, so a zero here is an indication they don't exist\\r\\n        require(otherID > 0, \\\"That MoonCat is not wrapped\\\");\\r\\n        return OLD_MCRW.ownerOf(otherID);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC721-isApprovedForAll}.\\r\\n     */\\r\\n    function isApprovedForAll(address _owner, address _operator)\\r\\n        public\\r\\n        view\\r\\n        virtual\\r\\n        override\\r\\n        returns (bool)\\r\\n    {\\r\\n        return\\r\\n            rescueOrderLookup.entriesPerAddress(_owner) == 0\\r\\n                ? super.isApprovedForAll(_owner, _operator)\\r\\n                : super.isApprovedForAll(_owner, _operator) &&\\r\\n                    OLD_MCRW.isApprovedForAll(_owner, address(this));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {ERC721-_isApprovedOrOwner}.\\r\\n     */\\r\\n    function _isApprovedOrOwner(address _spender, uint256 _tokenId)\\r\\n        internal\\r\\n        view\\r\\n        override\\r\\n        returns (bool)\\r\\n    {\\r\\n        require(\\r\\n            _exists(_tokenId),\\r\\n            \\\"ERC721: operator query for nonexistent token\\\"\\r\\n        );\\r\\n        // Differs here from OpenZeppelin standard:\\r\\n        // Calls `ownerOf` instead of `ERC721.ownerOf`\\r\\n        address _owner = ownerOf(_tokenId);\\r\\n        return (_spender == _owner ||\\r\\n            getApproved(_tokenId) == _spender ||\\r\\n            ERC721.isApprovedForAll(_owner, _spender));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {ERC721-approve}.\\r\\n     */\\r\\n    function approve(address _to, uint256 _tokenId) public override {\\r\\n        address _owner = ownerOf(_tokenId);\\r\\n        require(_to != _owner, \\\"ERC721: approval to current owner\\\");\\r\\n        // Differs here from OpenZeppelin standard:\\r\\n        // Calls `isApprovedForAll` instead of `ERC721.isApprovedForAll`\\r\\n        require(\\r\\n            _msgSender() == _owner || isApprovedForAll(_owner, _msgSender()),\\r\\n            \\\"ERC721: approve caller is not owner nor approved for all\\\"\\r\\n        );\\r\\n\\r\\n        _approve(_to, _tokenId);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev rewrap several MoonCats from the old wrapper at once\\r\\n     * Owner needs to call setApprovalForAll in old wrapper first.\\r\\n     * @param _rescueOrders an array of MoonCats, identified by rescue order, to rewrap\\r\\n     * @param _oldTokenIds an array holding the corresponding token ID\\r\\n     *        in the old wrapper for each MoonCat to be rewrapped\\r\\n     */\\r\\n    function batchReWrap(\\r\\n        uint256[] memory _rescueOrders,\\r\\n        uint256[] memory _oldTokenIds\\r\\n    ) public {\\r\\n        for (uint16 i = 0; i < _rescueOrders.length; i++) {\\r\\n            address _owner = OLD_MCRW.ownerOf(_oldTokenIds[i]);\\r\\n            OLD_MCRW.safeTransferFrom(\\r\\n                _owner,\\r\\n                address(this),\\r\\n                _oldTokenIds[i],\\r\\n                abi.encodePacked(\\r\\n                    uintToBytes(_rescueOrders[i]),\\r\\n                    addressToBytes(_owner)\\r\\n                )\\r\\n            );\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Take a list of unwrapped MoonCat rescue orders and wrap them.\\r\\n     * @param _rescueOrders an array of MoonCats, identified by rescue order, to rewrap\\r\\n     */\\r\\n    function batchWrap(uint256[] memory _rescueOrders) public {\\r\\n        for (uint16 i = 0; i < _rescueOrders.length; i++) {\\r\\n            wrap(_rescueOrders[i]);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Take a list of MoonCats wrapped in this contract and unwrap them.\\r\\n     * @param _rescueOrders an array of MoonCats, identified by rescue order, to unwrap\\r\\n     */\\r\\n    function batchUnwrap(uint256[] memory _rescueOrders) public {\\r\\n        for (uint16 i = 0; i < _rescueOrders.length; i++) {\\r\\n            unwrap(_rescueOrders[i]);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {ERC721-_transfer}.\\r\\n     * If the token being transferred exists in this contract, the standard ERC721 logic is used.\\r\\n     * If the token does not exist in this contract, look it up in the old wrapping contract,\\r\\n     * and attempt to wrap-then-transfer it.\\r\\n     */\\r\\n    function _transfer(\\r\\n        address _from,\\r\\n        address _to,\\r\\n        uint256 _tokenId\\r\\n    ) internal override {\\r\\n        if (super._exists(_tokenId)) {\\r\\n            return super._transfer(_from, _to, _tokenId);\\r\\n        }\\r\\n\\r\\n        require(_to != address(0), \\\"ERC721: transfer to the zero address\\\");\\r\\n\\r\\n        if (_to == address(this)) {\\r\\n            // Sending the token to be owned by this contract? That's not what they meant; make it owned by the original owner after re-wrapping\\r\\n            _to = _from;\\r\\n        }\\r\\n        uint256 oldTokenId =\\r\\n            OLD_MCRW._catIDToTokenID(MCR.rescueOrder(_tokenId));\\r\\n        OLD_MCRW.safeTransferFrom(\\r\\n            _from,\\r\\n            address(this),\\r\\n            oldTokenId,\\r\\n            abi.encodePacked(uintToBytes(_tokenId), addressToBytes(_to))\\r\\n        );\\r\\n        rescueOrderLookup.removeEntry(oldTokenId);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {ERC721-_exists}.\\r\\n     * If the token being queried exists in this contract, the standard ERC721 logic is used.\\r\\n     * If the token does not exist in this contract, look it up in the old wrapping contract,\\r\\n     * and see if it exists there.\\r\\n     */\\r\\n    function _exists(uint256 _tokenId) internal view override returns (bool) {\\r\\n        if (super._exists(_tokenId)) {\\r\\n            return true;\\r\\n        }\\r\\n\\r\\n        // Check if exists in old wrapping contract\\r\\n        bytes5 realMoonCatZero = OLD_MCRW._tokenIDToCatID(0);\\r\\n        bytes5 thisMoonCatID = MCR.rescueOrder(_tokenId);\\r\\n        if (thisMoonCatID == realMoonCatZero) {\\r\\n            return true;\\r\\n        }\\r\\n\\r\\n        return OLD_MCRW._catIDToTokenID(thisMoonCatID) != 0;\\r\\n    }\\r\\n\\r\\n    ///// ERC998 /////\\r\\n    using EnumerableSet for EnumerableSet.UintSet;\\r\\n    using EnumerableSet for EnumerableSet.AddressSet;\\r\\n\\r\\n    /// @dev mapping of local token IDs, and which addresses they own children at.\\r\\n    /// tokenId => child contract\\r\\n    mapping(uint256 => EnumerableSet.AddressSet) private childContracts;\\r\\n\\r\\n    /// @dev mapping of local token IDs, addresses they own children at, and IDs of the specific child tokens\\r\\n    /// tokenId => (child address => array of child tokens)\\r\\n    mapping(uint256 => mapping(address => EnumerableSet.UintSet)) private childTokens;\\r\\n\\r\\n    /// @dev mapping of addresses of child tokens, the specific child token IDs, and which local token owns them\\r\\n    /// child address => childId => tokenId\\r\\n    mapping(address => mapping(uint256 => uint256)) internal childTokenOwner;\\r\\n    uint8 constant TOKEN_OWNER_OFFSET = 10;\\r\\n\\r\\n    /**\\r\\n     * @dev a token has been transferred to this contract mark which local token is to now own it\\r\\n     * Emits a {ReceivedChild} event.\\r\\n     *\\r\\n     * @param _from the address who sent the token to this contract\\r\\n     * @param _tokenId the local token ID that is to be the parent\\r\\n     * @param _childContract the address of the child token's contract\\r\\n     * @param _childTokenId the ID value of teh incoming child token\\r\\n     */\\r\\n    function _receiveChild(address _from, uint256 _tokenId, address _childContract, uint256 _childTokenId) private {\\r\\n        require(!paused(), \\\"Child received while paused\\\");\\r\\n        require(super._exists(_tokenId), \\\"That MoonCat is not wrapped in this contract\\\");\\r\\n        require(childTokens[_tokenId][_childContract].contains(_childTokenId) == false, \\\"Cannot receive child token because it has already been received\\\");\\r\\n        childContracts[_tokenId].add(_childContract);\\r\\n        childTokens[_tokenId][_childContract].add(_childTokenId);\\r\\n        childTokenOwner[_childContract][_childTokenId] = _tokenId + TOKEN_OWNER_OFFSET;\\r\\n        emit ReceivedChild(_from, _tokenId, _childContract, _childTokenId);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC998ERC721TopDown-getChild}.\\r\\n     */\\r\\n    function getChild(\\r\\n        address _from,\\r\\n        uint256 _tokenId,\\r\\n        address _childContract,\\r\\n        uint256 _childTokenId\\r\\n    ) public override {\\r\\n        _receiveChild(_from, _tokenId, _childContract, _childTokenId);\\r\\n        IERC721(_childContract).transferFrom(_from, address(this), _childTokenId);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Given a child address/ID that is owned by some token in this contract, return that owning token's owner\\r\\n     * @param _childContract the address of the child asset being queried\\r\\n     * @param _childTokenId the specific ID of the child asset being queried\\r\\n     * @return parentTokenOwner the address of the owner of that child's parent asset\\r\\n     * @return parentTokenId the local token ID that is the parent of that child asset\\r\\n     */\\r\\n    function _ownerOfChild(address _childContract, uint256 _childTokenId) internal view returns (address parentTokenOwner, uint256 parentTokenId) {\\r\\n        parentTokenId = childTokenOwner[_childContract][_childTokenId];\\r\\n        require(parentTokenId > 0, \\\"That child is not owned by a token in this contract\\\");\\r\\n        return (ownerOf(parentTokenId - TOKEN_OWNER_OFFSET), parentTokenId - TOKEN_OWNER_OFFSET);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC998ERC721TopDown-ownerOfChild}.\\r\\n     */\\r\\n    function ownerOfChild(address _childContract, uint256 _childTokenId)\\r\\n        public\\r\\n        override\\r\\n        view\\r\\n        returns (bytes32 parentTokenOwner, uint256 parentTokenId)\\r\\n    {\\r\\n        parentTokenId = childTokenOwner[_childContract][_childTokenId];\\r\\n        require(parentTokenId > 0, \\\"That child is not owned by a token in this contract\\\");\\r\\n        return (ERC998_MAGIC_VALUE << 224 | bytes32(uint256(ownerOf(parentTokenId - TOKEN_OWNER_OFFSET))), parentTokenId - TOKEN_OWNER_OFFSET);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC998ERC721TopDown-rootOwnerOf}.\\r\\n     */\\r\\n    function rootOwnerOf(uint256 _tokenId)\\r\\n        public\\r\\n        override\\r\\n        view\\r\\n        returns (bytes32 rootOwner)\\r\\n    {\\r\\n        return rootOwnerOfChild(address(0), _tokenId);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC998ERC721TopDown-rootOwnerOfChild}.\\r\\n     */\\r\\n    function rootOwnerOfChild(address _childContract, uint256 _childTokenId)\\r\\n        public\\r\\n        override\\r\\n        view\\r\\n        returns (bytes32 rootOwner)\\r\\n    {\\r\\n        address rootOwnerAddress;\\r\\n        if (_childContract != address(0)) {\\r\\n            (rootOwnerAddress, _childTokenId) = _ownerOfChild(_childContract, _childTokenId);\\r\\n        } else {\\r\\n            rootOwnerAddress = ownerOf(_childTokenId);\\r\\n        }\\r\\n        // Case 1: Token owner is this contract and token.\\r\\n        while (rootOwnerAddress == address(this)) {\\r\\n            (rootOwnerAddress, _childTokenId) = _ownerOfChild(rootOwnerAddress, _childTokenId);\\r\\n        }\\r\\n\\r\\n        (bool callSuccess, bytes memory data) = rootOwnerAddress.staticcall(abi.encodeWithSelector(0xed81cdda, address(this), _childTokenId));\\r\\n        if (data.length != 0) {\\r\\n            rootOwner = abi.decode(data, (bytes32));\\r\\n        }\\r\\n\\r\\n        if(callSuccess == true && rootOwner >> 224 == ERC998_MAGIC_VALUE) {\\r\\n            // Case 2: Token owner is other top-down composable\\r\\n            return rootOwner;\\r\\n        }\\r\\n        else {\\r\\n            // Case 3: Token owner is other contract\\r\\n            // Or\\r\\n            // Case 4: Token owner is user\\r\\n            return ERC998_MAGIC_VALUE << 224 | bytes32(uint256(rootOwnerAddress));\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev remove internal records linking a given child to a given parent\\r\\n     * @param _tokenId the local token ID that is the parent of the child asset\\r\\n     * @param _childContract the address of the child asset to remove\\r\\n     * @param _childTokenId the specific ID representing the child asset to be removed\\r\\n     */\\r\\n    function _removeChild(uint256 _tokenId, address _childContract, uint256 _childTokenId) private {\\r\\n        require(\\r\\n            childTokens[_tokenId][_childContract].contains(_childTokenId),\\r\\n            \\\"Child token not owned by token\\\"\\r\\n        );\\r\\n\\r\\n        // remove child token\\r\\n        childTokens[_tokenId][_childContract].remove(_childTokenId);\\r\\n        delete childTokenOwner[_childContract][_childTokenId];\\r\\n\\r\\n        // remove contract\\r\\n        if (childTokens[_tokenId][_childContract].length() == 0) {\\r\\n            childContracts[_tokenId].remove(_childContract);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev check permissions are correct for a transfer of a child asset\\r\\n     * @param _fromTokenId the local ID of the token that is the parent\\r\\n     * @param _to the address this child token is being transferred to\\r\\n     * @param _childContract the address of the child asset's contract\\r\\n     * @param _childTokenId the specific ID for the child asset being transferred\\r\\n     */\\r\\n    function _checkTransferChild(\\r\\n        uint256 _fromTokenId,\\r\\n        address _to,\\r\\n        address _childContract,\\r\\n        uint256 _childTokenId\\r\\n    ) private view {\\r\\n        require(!paused(), \\\"Child transfer while paused\\\");\\r\\n        uint256 tokenId = childTokenOwner[_childContract][_childTokenId];\\r\\n        require(tokenId > 0, \\\"Child asset is not owned by a token in this contract\\\");\\r\\n        tokenId -= TOKEN_OWNER_OFFSET;\\r\\n        require(tokenId == _fromTokenId, \\\"That MoonCat does not own that asset\\\");\\r\\n        require(_to != address(0), \\\"Transfer to zero address\\\");\\r\\n        address rootOwner = address(uint160(uint256(rootOwnerOf(_fromTokenId))));\\r\\n        require(\\r\\n            _msgSender() == rootOwner || getApproved(_fromTokenId) == _msgSender() || ERC721.isApprovedForAll(rootOwner, _msgSender()),\\r\\n            \\\"Not allowed to transfer child assets of that MoonCat\\\"\\r\\n        );\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC998ERC721TopDown-safeTransferChild}.\\r\\n     */\\r\\n    function safeTransferChild(\\r\\n        uint256 _fromTokenId,\\r\\n        address _to,\\r\\n        address _childContract,\\r\\n        uint256 _childTokenId\\r\\n    ) public override {\\r\\n        _checkTransferChild(_fromTokenId, _to, _childContract, _childTokenId);\\r\\n        _removeChild(_fromTokenId, _childContract, _childTokenId);\\r\\n        ERC721(_childContract).safeTransferFrom(address(this), _to, _childTokenId);\\r\\n        emit TransferChild(_fromTokenId, _to, _childContract, _childTokenId);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC998ERC721TopDown-safeTransferChild}.\\r\\n     */\\r\\n    function safeTransferChild(\\r\\n        uint256 _fromTokenId,\\r\\n        address _to,\\r\\n        address _childContract,\\r\\n        uint256 _childTokenId,\\r\\n        bytes calldata _data\\r\\n    ) public override {\\r\\n        _checkTransferChild(_fromTokenId, _to, _childContract, _childTokenId);\\r\\n        _removeChild(_fromTokenId, _childContract, _childTokenId);\\r\\n        ERC721(_childContract).safeTransferFrom(address(this), _to, _childTokenId, _data);\\r\\n        emit TransferChild(_fromTokenId, _to, _childContract, _childTokenId);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC998ERC721TopDown-transferChild}.\\r\\n     */\\r\\n    function transferChild(\\r\\n        uint256 _fromTokenId,\\r\\n        address _to,\\r\\n        address _childContract,\\r\\n        uint256 _childTokenId\\r\\n    ) public override {\\r\\n        _checkTransferChild(_fromTokenId, _to, _childContract, _childTokenId);\\r\\n        _removeChild(_fromTokenId, _childContract, _childTokenId);\\r\\n        //this is here to be compatible with cryptokitties and other old contracts that require being owner and approved\\r\\n        // before transferring.\\r\\n        //does not work with current standard which does not allow approving self, so we must let it fail in that case.\\r\\n        //0x095ea7b3 == \\\"approve(address,uint256)\\\"\\r\\n        (bool success, bytes memory data) = _childContract.call(abi.encodeWithSelector(0x095ea7b3, this, _childTokenId));\\r\\n        require(\\r\\n            success && (data.length == 0 || abi.decode(data, (bool))),\\r\\n            'Failed to Approve'\\r\\n        );\\r\\n        ERC721(_childContract).transferFrom(address(this), _to, _childTokenId);\\r\\n        emit TransferChild(_fromTokenId, _to, _childContract, _childTokenId);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC998ERC721TopDown-transferChildToParent}.\\r\\n     */\\r\\n    function transferChildToParent(\\r\\n        uint256 _fromTokenId,\\r\\n        address _toContract,\\r\\n        uint256 _toTokenId,\\r\\n        address _childContract,\\r\\n        uint256 _childTokenId,\\r\\n        bytes calldata _data\\r\\n    ) public override {\\r\\n        _checkTransferChild(_fromTokenId, _toContract, _childContract, _childTokenId);\\r\\n        _removeChild(_fromTokenId, _childContract, _childTokenId);\\r\\n        IERC998ERC721BottomUp(_childContract).transferToParent(address(this), _toContract, _toTokenId, _childTokenId, _data);\\r\\n        emit TransferChild(_fromTokenId, _toContract, _childContract, _childTokenId);\\r\\n    }\\r\\n\\r\\n    ///// ERC998 Enumerable\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC998ERC721TopDownEnumerable-totalChildContracts}.\\r\\n     */\\r\\n    function totalChildContracts(uint256 _tokenId)\\r\\n        external\\r\\n        override\\r\\n        view\\r\\n        returns (uint256)\\r\\n    {\\r\\n        return childContracts[_tokenId].length();\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC998ERC721TopDownEnumerable-childContractByIndex}.\\r\\n     */\\r\\n    function childContractByIndex(uint256 _tokenId, uint256 _index)\\r\\n        external\\r\\n        override\\r\\n        view\\r\\n        returns (address childContract)\\r\\n    {\\r\\n        return childContracts[_tokenId].at(_index);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC998ERC721TopDownEnumerable-totalChildTokens}.\\r\\n     */\\r\\n    function totalChildTokens(uint256 _tokenId, address _childContract) external override view returns (uint256) {\\r\\n        return childTokens[_tokenId][_childContract].length();\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC998ERC721TopDownEnumerable-childTokenByIndex}.\\r\\n     */\\r\\n    function childTokenByIndex(uint256 _tokenId, address _childContract, uint256 _index) external override view returns (uint256 childTokenId) {\\r\\n        return childTokens[_tokenId][_childContract].at(_index);\\r\\n    }\\r\\n}\\r\\n\\r\\n// UTILITIES\\r\\n\\r\\n/**\\r\\n * @dev converts bytes (which is at least 32 bytes long) to uint256\\r\\n */\\r\\nfunction toUint256(bytes memory _bytes, uint256 _start) pure returns (uint256) {\\r\\n    require(_start + 32 >= _start, \\\"toUint256_overflow\\\");\\r\\n    require(_bytes.length >= _start + 32, \\\"toUint256_outOfBounds\\\");\\r\\n    uint256 tempUint;\\r\\n\\r\\n    assembly {\\r\\n        tempUint := mload(add(add(_bytes, 0x20), _start))\\r\\n    }\\r\\n\\r\\n    return tempUint;\\r\\n}\\r\\n\\r\\n/**\\r\\n * @dev converts uint256 to a bytes(32) object\\r\\n */\\r\\nfunction uintToBytes(uint256 x) pure returns (bytes memory b) {\\r\\n    b = new bytes(32);\\r\\n    assembly {\\r\\n        mstore(add(b, 32), x)\\r\\n    }\\r\\n}\\r\\n\\r\\n/**\\r\\n * @dev converts bytes (which is at least 20 bytes long) to address\\r\\n */\\r\\nfunction bytesToAddress(bytes memory bys, uint256 _start)\\r\\n    pure\\r\\n    returns (address addr)\\r\\n{\\r\\n    assembly {\\r\\n        addr := mload(add(add(bys, 20), _start))\\r\\n    }\\r\\n}\\r\\n\\r\\n/**\\r\\n * @dev converts address to a bytes(32) object\\r\\n */\\r\\nfunction addressToBytes(address a) pure returns (bytes memory) {\\r\\n    return abi.encodePacked(a);\\r\\n}\\r\\n\"\r\n    },\r\n    \"openzeppelin/contracts/token/ERC721/ERC721.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity >=0.6.0 <0.8.0;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721Metadata.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721Enumerable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/introspection/ERC165.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/utils/EnumerableSet.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/utils/EnumerableMap.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\r\\n\\r\\n/**\\r\\n * @title ERC721 Non-Fungible Token Standard basic implementation\\r\\n * @dev see https://eips.ethereum.org/EIPS/eip-721\\r\\n */\\r\\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata, IERC721Enumerable {\\r\\n    using SafeMath for uint256;\\r\\n    using Address for address;\\r\\n    using EnumerableSet for EnumerableSet.UintSet;\\r\\n    using EnumerableMap for EnumerableMap.UintToAddressMap;\\r\\n    using Strings for uint256;\\r\\n\\r\\n    // Equals to `bytes4(keccak256(\\\"onERC721Received(address,address,uint256,bytes)\\\"))`\\r\\n    // which can be also obtained as `IERC721Receiver(0).onERC721Received.selector`\\r\\n    bytes4 private constant _ERC721_RECEIVED = 0x150b7a02;\\r\\n\\r\\n    // Mapping from holder address to their (enumerable) set of owned tokens\\r\\n    mapping (address => EnumerableSet.UintSet) private _holderTokens;\\r\\n\\r\\n    // Enumerable mapping from token ids to their owners\\r\\n    EnumerableMap.UintToAddressMap private _tokenOwners;\\r\\n\\r\\n    // Mapping from token ID to approved address\\r\\n    mapping (uint256 => address) private _tokenApprovals;\\r\\n\\r\\n    // Mapping from owner to operator approvals\\r\\n    mapping (address => mapping (address => bool)) private _operatorApprovals;\\r\\n\\r\\n    // Token name\\r\\n    string private _name;\\r\\n\\r\\n    // Token symbol\\r\\n    string private _symbol;\\r\\n\\r\\n    // Optional mapping for token URIs\\r\\n    mapping (uint256 => string) private _tokenURIs;\\r\\n\\r\\n    // Base URI\\r\\n    string private _baseURI;\\r\\n\\r\\n    /*\\r\\n     *     bytes4(keccak256('balanceOf(address)')) == 0x70a08231\\r\\n     *     bytes4(keccak256('ownerOf(uint256)')) == 0x6352211e\\r\\n     *     bytes4(keccak256('approve(address,uint256)')) == 0x095ea7b3\\r\\n     *     bytes4(keccak256('getApproved(uint256)')) == 0x081812fc\\r\\n     *     bytes4(keccak256('setApprovalForAll(address,bool)')) == 0xa22cb465\\r\\n     *     bytes4(keccak256('isApprovedForAll(address,address)')) == 0xe985e9c5\\r\\n     *     bytes4(keccak256('transferFrom(address,address,uint256)')) == 0x23b872dd\\r\\n     *     bytes4(keccak256('safeTransferFrom(address,address,uint256)')) == 0x42842e0e\\r\\n     *     bytes4(keccak256('safeTransferFrom(address,address,uint256,bytes)')) == 0xb88d4fde\\r\\n     *\\r\\n     *     => 0x70a08231 ^ 0x6352211e ^ 0x095ea7b3 ^ 0x081812fc ^\\r\\n     *        0xa22cb465 ^ 0xe985e9c5 ^ 0x23b872dd ^ 0x42842e0e ^ 0xb88d4fde == 0x80ac58cd\\r\\n     */\\r\\n    bytes4 private constant _INTERFACE_ID_ERC721 = 0x80ac58cd;\\r\\n\\r\\n    /*\\r\\n     *     bytes4(keccak256('name()')) == 0x06fdde03\\r\\n     *     bytes4(keccak256('symbol()')) == 0x95d89b41\\r\\n     *     bytes4(keccak256('tokenURI(uint256)')) == 0xc87b56dd\\r\\n     *\\r\\n     *     => 0x06fdde03 ^ 0x95d89b41 ^ 0xc87b56dd == 0x5b5e139f\\r\\n     */\\r\\n    bytes4 private constant _INTERFACE_ID_ERC721_METADATA = 0x5b5e139f;\\r\\n\\r\\n    /*\\r\\n     *     bytes4(keccak256('totalSupply()')) == 0x18160ddd\\r\\n     *     bytes4(keccak256('tokenOfOwnerByIndex(address,uint256)')) == 0x2f745c59\\r\\n     *     bytes4(keccak256('tokenByIndex(uint256)')) == 0x4f6ccce7\\r\\n     *\\r\\n     *     => 0x18160ddd ^ 0x2f745c59 ^ 0x4f6ccce7 == 0x780e9d63\\r\\n     */\\r\\n    bytes4 private constant _INTERFACE_ID_ERC721_ENUMERABLE = 0x780e9d63;\\r\\n\\r\\n    /**\\r\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\r\\n     */\\r\\n    constructor (string memory name_, string memory symbol_) public {\\r\\n        _name = name_;\\r\\n        _symbol = symbol_;\\r\\n\\r\\n        // register the supported interfaces to conform to ERC721 via ERC165\\r\\n        _registerInterface(_INTERFACE_ID_ERC721);\\r\\n        _registerInterface(_INTERFACE_ID_ERC721_METADATA);\\r\\n        _registerInterface(_INTERFACE_ID_ERC721_ENUMERABLE);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC721-balanceOf}.\\r\\n     */\\r\\n    function balanceOf(address owner) public view virtual override returns (uint256) {\\r\\n        require(owner != address(0), \\\"ERC721: balance query for the zero address\\\");\\r\\n        return _holderTokens[owner].length();\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC721-ownerOf}.\\r\\n     */\\r\\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\\r\\n        return _tokenOwners.get(tokenId, \\\"ERC721: owner query for nonexistent token\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC721Metadata-name}.\\r\\n     */\\r\\n    function name() public view virtual override returns (string memory) {\\r\\n        return _name;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC721Metadata-symbol}.\\r\\n     */\\r\\n    function symbol() public view virtual override returns (string memory) {\\r\\n        return _symbol;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC721Metadata-tokenURI}.\\r\\n     */\\r\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\r\\n        require(_exists(tokenId), \\\"ERC721Metadata: URI query for nonexistent token\\\");\\r\\n\\r\\n        string memory _tokenURI = _tokenURIs[tokenId];\\r\\n        string memory base = baseURI();\\r\\n\\r\\n        // If there is no base URI, return the token URI.\\r\\n        if (bytes(base).length == 0) {\\r\\n            return _tokenURI;\\r\\n        }\\r\\n        // If both are set, concatenate the baseURI and tokenURI (via abi.encodePacked).\\r\\n        if (bytes(_tokenURI).length > 0) {\\r\\n            return string(abi.encodePacked(base, _tokenURI));\\r\\n        }\\r\\n        // If there is a baseURI but no tokenURI, concatenate the tokenID to the baseURI.\\r\\n        return string(abi.encodePacked(base, tokenId.toString()));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n    * @dev Returns the base URI set via {_setBaseURI}. This will be\\r\\n    * automatically added as a prefix in {tokenURI} to each token's URI, or\\r\\n    * to the token ID if no specific URI is set for that token ID.\\r\\n    */\\r\\n    function baseURI() public view virtual returns (string memory) {\\r\\n        return _baseURI;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC721Enumerable-tokenOfOwnerByIndex}.\\r\\n     */\\r\\n    function tokenOfOwnerByIndex(address owner, uint256 index) public view virtual override returns (uint256) {\\r\\n        return _holderTokens[owner].at(index);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n    * @dev Return an array of all tokens this\\r\\n    * CUSTOM FUNCTION, NOT IN OPENZEPPELIN TEMPLATE\\r\\n    */\\r\\n    function tokensIdsByOwner(address owner) public view returns (uint256[] memory) {\\r\\n        uint256[] memory tokens = new uint256[](_holderTokens[owner].length());\\r\\n        for (uint i = 0; i < _holderTokens[owner].length(); i++) {\\r\\n            tokens[i] = _holderTokens[owner].at(i);\\r\\n        }\\r\\n        return tokens;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC721Enumerable-totalSupply}.\\r\\n     */\\r\\n    function totalSupply() public view virtual override returns (uint256) {\\r\\n        // _tokenOwners are indexed by tokenIds, so .length() returns the number of tokenIds\\r\\n        return _tokenOwners.length();\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC721Enumerable-tokenByIndex}.\\r\\n     */\\r\\n    function tokenByIndex(uint256 index) public view virtual override returns (uint256) {\\r\\n        (uint256 tokenId, ) = _tokenOwners.at(index);\\r\\n        return tokenId;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC721-approve}.\\r\\n     */\\r\\n    function approve(address to, uint256 tokenId) public virtual override {\\r\\n        address owner = ERC721.ownerOf(tokenId);\\r\\n        require(to != owner, \\\"ERC721: approval to current owner\\\");\\r\\n\\r\\n        require(_msgSender() == owner || ERC721.isApprovedForAll(owner, _msgSender()),\\r\\n            \\\"ERC721: approve caller is not owner nor approved for all\\\"\\r\\n        );\\r\\n\\r\\n        _approve(to, tokenId);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC721-getApproved}.\\r\\n     */\\r\\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\\r\\n        require(_exists(tokenId), \\\"ERC721: approved query for nonexistent token\\\");\\r\\n\\r\\n        return _tokenApprovals[tokenId];\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC721-setApprovalForAll}.\\r\\n     */\\r\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\r\\n        require(operator != _msgSender(), \\\"ERC721: approve to caller\\\");\\r\\n\\r\\n        _operatorApprovals[_msgSender()][operator] = approved;\\r\\n        emit ApprovalForAll(_msgSender(), operator, approved);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC721-isApprovedForAll}.\\r\\n     */\\r\\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\\r\\n        return _operatorApprovals[owner][operator];\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC721-transferFrom}.\\r\\n     */\\r\\n    function transferFrom(address from, address to, uint256 tokenId) public virtual override {\\r\\n        //solhint-disable-next-line max-line-length\\r\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: transfer caller is not owner nor approved\\\");\\r\\n\\r\\n        _transfer(from, to, tokenId);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC721-safeTransferFrom}.\\r\\n     */\\r\\n    function safeTransferFrom(address from, address to, uint256 tokenId) public virtual override {\\r\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC721-safeTransferFrom}.\\r\\n     */\\r\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes memory _data) public virtual override {\\r\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: transfer caller is not owner nor approved\\\");\\r\\n        _safeTransfer(from, to, tokenId, _data);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\r\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\r\\n     *\\r\\n     * `_data` is additional data, it has no specified format and it is sent in call to `to`.\\r\\n     *\\r\\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\\r\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `from` cannot be the zero address.\\r\\n     * - `to` cannot be the zero address.\\r\\n     * - `tokenId` token must exist and be owned by `from`.\\r\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\r\\n     *\\r\\n     * Emits a {Transfer} event.\\r\\n     */\\r\\n    function _safeTransfer(address from, address to, uint256 tokenId, bytes memory _data) internal virtual {\\r\\n        _transfer(from, to, tokenId);\\r\\n        require(_checkOnERC721Received(from, to, tokenId, _data), \\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns whether `tokenId` exists.\\r\\n     *\\r\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\r\\n     *\\r\\n     * Tokens start existing when they are minted (`_mint`),\\r\\n     * and stop existing when they are burned (`_burn`).\\r\\n     */\\r\\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\\r\\n        return _tokenOwners.contains(tokenId);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `tokenId` must exist.\\r\\n     */\\r\\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\\r\\n        require(_exists(tokenId), \\\"ERC721: operator query for nonexistent token\\\");\\r\\n        address owner = ERC721.ownerOf(tokenId);\\r\\n        return (spender == owner || getApproved(tokenId) == spender || ERC721.isApprovedForAll(owner, spender));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Safely mints `tokenId` and transfers it to `to`.\\r\\n     *\\r\\n     * Requirements:\\r\\n     d*\\r\\n     * - `tokenId` must not exist.\\r\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\r\\n     *\\r\\n     * Emits a {Transfer} event.\\r\\n     */\\r\\n    function _safeMint(address to, uint256 tokenId) internal virtual {\\r\\n        _safeMint(to, tokenId, \\\"\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\r\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\r\\n     */\\r\\n    function _safeMint(address to, uint256 tokenId, bytes memory _data) internal virtual {\\r\\n        _mint(to, tokenId);\\r\\n        require(_checkOnERC721Received(address(0), to, tokenId, _data), \\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Mints `tokenId` and transfers it to `to`.\\r\\n     *\\r\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `tokenId` must not exist.\\r\\n     * - `to` cannot be the zero address.\\r\\n     *\\r\\n     * Emits a {Transfer} event.\\r\\n     */\\r\\n    function _mint(address to, uint256 tokenId) internal virtual {\\r\\n        require(to != address(0), \\\"ERC721: mint to the zero address\\\");\\r\\n        // DIFFERENT FROM OPENZEPPELIN STANDARD\\r\\n        // Calls `ERC721._exists` rather than `_exists`\\r\\n        require(!ERC721._exists(tokenId), \\\"ERC721: token already minted\\\");\\r\\n\\r\\n        _beforeTokenTransfer(address(0), to, tokenId);\\r\\n\\r\\n        _holderTokens[to].add(tokenId);\\r\\n\\r\\n        _tokenOwners.set(tokenId, to);\\r\\n\\r\\n        emit Transfer(address(0), to, tokenId);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Destroys `tokenId`.\\r\\n     * The approval is cleared when the token is burned.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `tokenId` must exist.\\r\\n     *\\r\\n     * Emits a {Transfer} event.\\r\\n     */\\r\\n    function _burn(uint256 tokenId) internal virtual {\\r\\n        address owner = ERC721.ownerOf(tokenId); // internal owner\\r\\n\\r\\n        _beforeTokenTransfer(owner, address(0), tokenId);\\r\\n\\r\\n        // Clear approvals\\r\\n        _approve(address(0), tokenId);\\r\\n\\r\\n        // Clear metadata (if any)\\r\\n        if (bytes(_tokenURIs[tokenId]).length != 0) {\\r\\n            delete _tokenURIs[tokenId];\\r\\n        }\\r\\n\\r\\n        _holderTokens[owner].remove(tokenId);\\r\\n\\r\\n        _tokenOwners.remove(tokenId);\\r\\n\\r\\n        emit Transfer(owner, address(0), tokenId);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Transfers `tokenId` from `from` to `to`.\\r\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `to` cannot be the zero address.\\r\\n     * - `tokenId` token must be owned by `from`.\\r\\n     *\\r\\n     * Emits a {Transfer} event.\\r\\n     */\\r\\n    function _transfer(address from, address to, uint256 tokenId) internal virtual {\\r\\n        require(ERC721.ownerOf(tokenId) == from, \\\"ERC721: transfer of token that is not own\\\"); // internal owner\\r\\n        require(to != address(0), \\\"ERC721: transfer to the zero address\\\");\\r\\n\\r\\n        _beforeTokenTransfer(from, to, tokenId);\\r\\n\\r\\n        // Clear approvals from the previous owner\\r\\n        _approve(address(0), tokenId);\\r\\n\\r\\n        _holderTokens[from].remove(tokenId);\\r\\n        _holderTokens[to].add(tokenId);\\r\\n\\r\\n        _tokenOwners.set(tokenId, to);\\r\\n\\r\\n        emit Transfer(from, to, tokenId);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Sets `_tokenURI` as the tokenURI of `tokenId`.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `tokenId` must exist.\\r\\n     */\\r\\n    function _setTokenURI(uint256 tokenId, string memory _tokenURI) internal virtual {\\r\\n        require(_exists(tokenId), \\\"ERC721Metadata: URI set of nonexistent token\\\");\\r\\n        _tokenURIs[tokenId] = _tokenURI;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Internal function to set the base URI for all token IDs. It is\\r\\n     * automatically added as a prefix to the value returned in {tokenURI},\\r\\n     * or to the token ID if {tokenURI} is empty.\\r\\n     */\\r\\n    function _setBaseURI(string memory baseURI_) internal virtual {\\r\\n        _baseURI = baseURI_;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\\r\\n     * The call is not executed if the target address is not a contract.\\r\\n     *\\r\\n     * @param from address representing the previous owner of the given token ID\\r\\n     * @param to target address that will receive the tokens\\r\\n     * @param tokenId uint256 ID of the token to be transferred\\r\\n     * @param _data bytes optional data to send along with the call\\r\\n     * @return bool whether the call correctly returned the expected magic value\\r\\n     */\\r\\n    function _checkOnERC721Received(address from, address to, uint256 tokenId, bytes memory _data)\\r\\n        private returns (bool)\\r\\n    {\\r\\n        if (!to.isContract()) {\\r\\n            return true;\\r\\n        }\\r\\n        bytes memory returndata = to.functionCall(abi.encodeWithSelector(\\r\\n            IERC721Receiver(to).onERC721Received.selector,\\r\\n            _msgSender(),\\r\\n            from,\\r\\n            tokenId,\\r\\n            _data\\r\\n        ), \\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\r\\n        bytes4 retval = abi.decode(returndata, (bytes4));\\r\\n        return (retval == _ERC721_RECEIVED);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Approve `to` to operate on `tokenId`\\r\\n     *\\r\\n     * Emits an {Approval} event.\\r\\n     */\\r\\n    function _approve(address to, uint256 tokenId) internal virtual {\\r\\n        _tokenApprovals[tokenId] = to;\\r\\n        // DIFFERENT FROM OPENZEPPELIN STANDARD\\r\\n        // Calls `ownerOf` rather than `ERC721.ownerOf`\\r\\n        emit Approval(ownerOf(tokenId), to, tokenId);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Hook that is called before any token transfer. This includes minting\\r\\n     * and burning.\\r\\n     *\\r\\n     * Calling conditions:\\r\\n     *\\r\\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\\r\\n     * transferred to `to`.\\r\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\r\\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\\r\\n     * - `from` cannot be the zero address.\\r\\n     * - `to` cannot be the zero address.\\r\\n     *\\r\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\r\\n     */\\r\\n    function _beforeTokenTransfer(address from, address to, uint256 tokenId) internal virtual { }\\r\\n}\\r\\n\"\r\n    },\r\n    \"MoonCatOrderLookup.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-only\\r\\npragma solidity ^0.7.3;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\r\\nimport \\\"./IMoonCatRescue.sol\\\";\\r\\nimport \\\"./IMoonCatsWrapped.sol\\\";\\r\\n\\r\\n/**\\r\\n * @title MoonCat Order Lookup\\r\\n * @notice A space to have an on-chain record mapping token IDs for OLD_MCRW to their original \\\"rescue order\\\" IDs\\r\\n * @dev This contract exists because there is no MoonCat ID => Rescue ID function\\r\\n * on the original MoonCatRescue contract. The only way to tell a given MoonCat's\\r\\n * rescue order if you don't know it is to iterate through the whole `rescueOrder`\\r\\n * array. Looping through that whole array in a smart contract would be\\r\\n * prohibitively high gas-usage, and so this alternative is needed.\\r\\n */\\r\\ncontract MoonCatOrderLookup is Ownable {\\r\\n\\r\\n    MoonCatRescue MCR = MoonCatRescue(0x60cd862c9C687A9dE49aecdC3A99b74A4fc54aB6);\\r\\n    MoonCatsWrapped OLD_MCRW = MoonCatsWrapped(0x7C40c393DC0f283F318791d746d894DdD3693572);\\r\\n\\r\\n    uint256[25600] private _oldTokenIdToRescueOrder;\\r\\n    uint8 constant VALUE_OFFSET = 10;\\r\\n\\r\\n    constructor() Ownable() {}\\r\\n\\r\\n    /**\\r\\n      * @dev Submit a batch of token IDs, and their associated rescue orders\\r\\n      * This is the primary method for the utility of the contract. Anyone\\r\\n      * can submit this pairing information (not just the owners of the token)\\r\\n      * and the information can be submitted in batches.\\r\\n      *\\r\\n      * Submitting pairs of token IDs with their rescue orders is verified with\\r\\n      * the original MoonCatRescue contract before recording.\\r\\n      *\\r\\n      * Within the private array holding this information, a VALUE_OFFSET is used\\r\\n      * to differentiate between \\\"not set\\\" and \\\"set to zero\\\" (because Solidity\\r\\n      * has no concept of \\\"null\\\" or \\\"undefined\\\"). Because the maximum value of the\\r\\n      * rescue ordering can only be 25,600, we can safely shift the stored values\\r\\n      * up, and not hit the uint256 limit.\\r\\n      */\\r\\n    function submitRescueOrder(\\r\\n        uint256[] memory oldTokenIds,\\r\\n        uint16[] memory rescueOrders\\r\\n    ) public {\\r\\n        for (uint256 i = 0; i < oldTokenIds.length; i++) {\\r\\n            require(\\r\\n                MCR.rescueOrder(rescueOrders[i]) == OLD_MCRW._tokenIDToCatID(oldTokenIds[i]),\\r\\n                \\\"Pair does not match!\\\"\\r\\n            );\\r\\n            _oldTokenIdToRescueOrder[oldTokenIds[i]] = rescueOrders[i] + VALUE_OFFSET;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n      * @dev verify a given old token ID is mapped yet or not\\r\\n      *\\r\\n      * This function can use just a zero-check because internally all values are\\r\\n      * stored with a VALUE_OFFSET added onto them (e.g. storing an actual zero\\r\\n      * is saved as 0 + VALUE_OFFSET = 10, internally), so anything set to an\\r\\n      * actual zero means \\\"unset\\\".\\r\\n      */\\r\\n    function _exists(uint256 oldTokenId) internal view returns (bool) {\\r\\n        return _oldTokenIdToRescueOrder[oldTokenId] != 0;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev public function to verify whether a given old token ID is mapped or not\\r\\n     */\\r\\n    function oldTokenIdExists(uint256 oldTokenId) public view returns(bool) {\\r\\n        return _exists(oldTokenId);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev given an old token ID, return the rescue order of that MoonCat\\r\\n     *\\r\\n     * Throws an error if that particular token ID does not have a recorded\\r\\n     * mapping to a rescue order.\\r\\n     */\\r\\n    function oldTokenIdToRescueOrder(uint256 oldTokenId) public view returns(uint256) {\\r\\n        require(_exists(oldTokenId), \\\"That token ID is not mapped yet\\\");\\r\\n        return _oldTokenIdToRescueOrder[oldTokenId] - VALUE_OFFSET;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev remove a mapping from the data structure\\r\\n     *\\r\\n     * This allows reclaiming some gas, so as part of the re-wrapping process,\\r\\n     * this gets called by the Acclimator contract, to recoup some gas for the\\r\\n     * MoonCat owner.\\r\\n     */\\r\\n    function removeEntry(uint256 _oldTokenId) public onlyOwner {\\r\\n        delete _oldTokenIdToRescueOrder[_oldTokenId];\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev for a given address, iterate through all the tokens they own in the\\r\\n     * old wrapping contract, and for each of them, determine how many are mapped\\r\\n     * in this lookup contract.\\r\\n     *\\r\\n     * This method is used by the Acclimator `balanceOf` and `tokenOfOwnerByIndex`\\r\\n     * to be able to enumerate old-wrapped MoonCats as if they were already\\r\\n     * re-wrapped in the Acclimator contract.\\r\\n     */\\r\\n    function entriesPerAddress(address _owner) public view returns (uint256) {\\r\\n        uint256 countMapped = 0;\\r\\n        for (uint256 i = 0; i < OLD_MCRW.balanceOf(_owner); i++) {\\r\\n            uint256 oldTokenId = OLD_MCRW.tokenOfOwnerByIndex(_owner, i);\\r\\n            if (_exists(oldTokenId)) {\\r\\n                countMapped++;\\r\\n            }\\r\\n        }\\r\\n        return countMapped;\\r\\n    }\\r\\n}\\r\\n\"\r\n    },\r\n    \"IERC998.sol\": {\r\n      \"content\": \"pragma solidity ^0.7.3;\\r\\n\\r\\n/**\\r\\n * @title ERC998ERC721 Top-Down Composable Non-Fungible Token\\r\\n * @dev See https://github.com/ethereum/EIPs/blob/master/EIPS/eip-998.md\\r\\n * Note: the ERC-165 identifier for this interface is 0x1efdf36a\\r\\n */\\r\\ninterface IERC998ERC721TopDown {\\r\\n    /**\\r\\n     * @dev This emits when a token receives a child token.\\r\\n     * @param _from The prior owner of the token.\\r\\n     * @param _toTokenId The token that receives the child token.\\r\\n     */\\r\\n    event ReceivedChild(\\r\\n        address indexed _from,\\r\\n        uint256 indexed _toTokenId,\\r\\n        address indexed _childContract,\\r\\n        uint256 _childTokenId\\r\\n    );\\r\\n\\r\\n    /**\\r\\n     * @dev This emits when a child token is transferred from a token to an address.\\r\\n     * @param _fromTokenId The parent token that the child token is being transferred from.\\r\\n     * @param _to The new owner address of the child token.\\r\\n     */\\r\\n    event TransferChild(\\r\\n        uint256 indexed _fromTokenId,\\r\\n        address indexed _to,\\r\\n        address indexed _childContract,\\r\\n        uint256 _childTokenId\\r\\n    );\\r\\n\\r\\n    /**\\r\\n     * @notice Get the root owner of tokenId.\\r\\n     * @param _tokenId The token to query for a root owner address\\r\\n     * @return rootOwner The root owner at the top of tree of tokens and ERC998 magic value.\\r\\n     */\\r\\n    function rootOwnerOf(uint256 _tokenId)\\r\\n        external\\r\\n        view\\r\\n        returns (bytes32 rootOwner);\\r\\n\\r\\n    /**\\r\\n     * @notice Get the root owner of a child token.\\r\\n     * @param _childContract The contract address of the child token.\\r\\n     * @param _childTokenId The tokenId of the child.\\r\\n     * @return rootOwner The root owner at the top of tree of tokens and ERC998 magic value.\\r\\n     */\\r\\n    function rootOwnerOfChild(address _childContract, uint256 _childTokenId)\\r\\n        external\\r\\n        view\\r\\n        returns (bytes32 rootOwner);\\r\\n\\r\\n    /**\\r\\n     * @notice Get the parent tokenId of a child token.\\r\\n     * @param _childContract The contract address of the child token.\\r\\n     * @param _childTokenId The tokenId of the child.\\r\\n     * @return parentTokenOwner The parent address of the parent token and ERC998 magic value\\r\\n     * @return parentTokenId The parent tokenId of _tokenId\\r\\n     */\\r\\n    function ownerOfChild(address _childContract, uint256 _childTokenId)\\r\\n        external\\r\\n        view\\r\\n        returns (bytes32 parentTokenOwner, uint256 parentTokenId);\\r\\n\\r\\n    /**\\r\\n     * @notice A token receives a child token\\r\\n     * @param _operator The address that caused the transfer.\\r\\n     * @param _from The owner of the child token.\\r\\n     * @param _childTokenId The token that is being transferred to the parent.\\r\\n     * @param _data Up to the first 32 bytes contains an integer which is the receiving parent tokenId.\\r\\n     */\\r\\n    function onERC721Received(\\r\\n        address _operator,\\r\\n        address _from,\\r\\n        uint256 _childTokenId,\\r\\n        bytes calldata _data\\r\\n    ) external returns (bytes4);\\r\\n\\r\\n    /**\\r\\n     * @notice Transfer child token from top-down composable to address.\\r\\n     * @param _fromTokenId The owning token to transfer from.\\r\\n     * @param _to The address that receives the child token\\r\\n     * @param _childContract The ERC721 contract of the child token.\\r\\n     * @param _childTokenId The tokenId of the token that is being transferred.\\r\\n     */\\r\\n    function transferChild(\\r\\n        uint256 _fromTokenId,\\r\\n        address _to,\\r\\n        address _childContract,\\r\\n        uint256 _childTokenId\\r\\n    ) external;\\r\\n\\r\\n    /**\\r\\n     * @notice Transfer child token from top-down composable to address.\\r\\n     * @param _fromTokenId The owning token to transfer from.\\r\\n     * @param _to The address that receives the child token\\r\\n     * @param _childContract The ERC721 contract of the child token.\\r\\n     * @param _childTokenId The tokenId of the token that is being transferred.\\r\\n     */\\r\\n    function safeTransferChild(\\r\\n        uint256 _fromTokenId,\\r\\n        address _to,\\r\\n        address _childContract,\\r\\n        uint256 _childTokenId\\r\\n    ) external;\\r\\n\\r\\n    /**\\r\\n     * @notice Transfer child token from top-down composable to address.\\r\\n     * @param _fromTokenId The owning token to transfer from.\\r\\n     * @param _to The address that receives the child token\\r\\n     * @param _childContract The ERC721 contract of the child token.\\r\\n     * @param _childTokenId The tokenId of the token that is being transferred.\\r\\n     * @param _data Additional data with no specified format\\r\\n     */\\r\\n    function safeTransferChild(\\r\\n        uint256 _fromTokenId,\\r\\n        address _to,\\r\\n        address _childContract,\\r\\n        uint256 _childTokenId,\\r\\n        bytes calldata _data\\r\\n    ) external;\\r\\n\\r\\n    /**\\r\\n     * @notice Transfer bottom-up composable child token from top-down composable to other ERC721 token.\\r\\n     * @param _fromTokenId The owning token to transfer from.\\r\\n     * @param _toContract The ERC721 contract of the receiving token\\r\\n     * @param _toTokenId The receiving token\\r\\n     * @param _childContract The bottom-up composable contract of the child token.\\r\\n     * @param _childTokenId The token that is being transferred.\\r\\n     * @param _data Additional data with no specified format\\r\\n     */\\r\\n    function transferChildToParent(\\r\\n        uint256 _fromTokenId,\\r\\n        address _toContract,\\r\\n        uint256 _toTokenId,\\r\\n        address _childContract,\\r\\n        uint256 _childTokenId,\\r\\n        bytes calldata _data\\r\\n    ) external;\\r\\n\\r\\n    /**\\r\\n     * @notice Get a child token from an ERC721 contract.\\r\\n     * @param _from The address that owns the child token.\\r\\n     * @param _tokenId The token that becomes the parent owner\\r\\n     * @param _childContract The ERC721 contract of the child token\\r\\n     * @param _childTokenId The tokenId of the child token\\r\\n     */\\r\\n    function getChild(\\r\\n        address _from,\\r\\n        uint256 _tokenId,\\r\\n        address _childContract,\\r\\n        uint256 _childTokenId\\r\\n    ) external;\\r\\n}\\r\\n\\r\\n/**\\r\\n * @dev The ERC-165 identifier for this interface is 0xa344afe4\\r\\n */\\r\\ninterface IERC998ERC721TopDownEnumerable {\\r\\n    /**\\r\\n     * @notice Get the total number of child contracts with tokens that are owned by tokenId.\\r\\n     * @param _tokenId The parent token of child tokens in child contracts\\r\\n     * @return uint256 The total number of child contracts with tokens owned by tokenId.\\r\\n     */\\r\\n    function totalChildContracts(uint256 _tokenId)\\r\\n        external\\r\\n        view\\r\\n        returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @notice Get child contract by tokenId and index\\r\\n     * @param _tokenId The parent token of child tokens in child contract\\r\\n     * @param _index The index position of the child contract\\r\\n     * @return childContract The contract found at the tokenId and index.\\r\\n     */\\r\\n    function childContractByIndex(uint256 _tokenId, uint256 _index)\\r\\n        external\\r\\n        view\\r\\n        returns (address childContract);\\r\\n\\r\\n    /**\\r\\n     * @notice Get the total number of child tokens owned by tokenId that exist in a child contract.\\r\\n     * @param _tokenId The parent token of child tokens\\r\\n     * @param _childContract The child contract containing the child tokens\\r\\n     * @return uint256 The total number of child tokens found in child contract that are owned by tokenId.\\r\\n     */\\r\\n    function totalChildTokens(uint256 _tokenId, address _childContract)\\r\\n        external\\r\\n        view\\r\\n        returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @notice Get child token owned by tokenId, in child contract, at index position\\r\\n     * @param _tokenId The parent token of the child token\\r\\n     * @param _childContract The child contract of the child token\\r\\n     * @param _index The index position of the child token.\\r\\n     * @return childTokenId The child tokenId for the parent token, child token and index\\r\\n     */\\r\\n    function childTokenByIndex(\\r\\n        uint256 _tokenId,\\r\\n        address _childContract,\\r\\n        uint256 _index\\r\\n    ) external view returns (uint256 childTokenId);\\r\\n}\\r\\n\\r\\ninterface IERC998ERC721BottomUp {\\r\\n    /**\\r\\n     * @notice Transfer token from owner address to a token\\r\\n     * @param _from The owner address\\r\\n     * @param _toContract The ERC721 contract of the receiving token\\r\\n     * @param _toTokenId The receiving token\\r\\n     * @param _data Additional data with no specified format\\r\\n     */\\r\\n    function transferToParent(\\r\\n        address _from,\\r\\n        address _toContract,\\r\\n        uint256 _toTokenId,\\r\\n        uint256 _tokenId,\\r\\n        bytes calldata _data\\r\\n    ) external;\\r\\n}\"\r\n    },\r\n    \"IMoonCatRescue.sol\": {\r\n      \"content\": \"pragma solidity ^0.7.3;\\r\\ninterface MoonCatRescue {\\r\\n    function getCatDetails(bytes5 catId)\\r\\n        external\\r\\n        view\\r\\n        returns (\\r\\n            bytes5 id,\\r\\n            address owner,\\r\\n            bytes32 name,\\r\\n            address onlyOfferTo,\\r\\n            uint256 offerPrice,\\r\\n            address requester,\\r\\n            uint256 requestPrice\\r\\n        );\\r\\n\\r\\n    function rescueOrder(uint256 _rescueOrder)\\r\\n        external\\r\\n        view\\r\\n        returns (bytes5 catId);\\r\\n\\r\\n    function acceptAdoptionOffer(bytes5 catId) external payable;\\r\\n\\r\\n    function acceptAdoptionRequest(bytes5 catId) external;\\r\\n\\r\\n    function adoptionRequests(bytes5 _catId)\\r\\n        external\\r\\n        view\\r\\n        returns (\\r\\n            bool exists,\\r\\n            bytes5 catId,\\r\\n            address requester,\\r\\n            uint256 price\\r\\n        );\\r\\n\\r\\n    function adoptionOffers(bytes5 _catId)\\r\\n        external\\r\\n        view\\r\\n        returns (\\r\\n            bool exists,\\r\\n            bytes5 catId,\\r\\n            address seller,\\r\\n            uint256 price,\\r\\n            address offerOnlyTo\\r\\n        );\\r\\n\\r\\n    function giveCat(bytes5 catId, address to) external;\\r\\n\\r\\n    function catOwners(bytes5) external view returns (address);\\r\\n\\r\\n    function makeAdoptionOfferToAddress(bytes5 catId, uint256 price, address to) external;\\r\\n\\r\\n    function makeAdoptionOffer(bytes5 catId, uint256 price) external;\\r\\n\\r\\n    function withdraw() external;\\r\\n}\\r\\n\"\r\n    },\r\n    \"IMoonCatsWrapped.sol\": {\r\n      \"content\": \"pragma solidity ^0.7.3;\\r\\ninterface MoonCatsWrapped {\\r\\n\\r\\n    /**\\r\\n     * @dev in the original contract, this is a public map property, so is\\r\\n     * using the default getter action, which does NOT check for \\\"exists\\\";\\r\\n     * if this returns a zero, it might be referencing token ID #0, or it might\\r\\n     * be meaning \\\"that MoonCat ID is not wrapped in this contract\\\".\\r\\n     */\\r\\n    function _catIDToTokenID(bytes5 catId) external pure\\r\\n        returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @dev in the original contract, this is a public map property, so is\\r\\n     * using the default getter action, which does NOT check for \\\"exists\\\".\\r\\n     * However, no MoonCat has an ID of `0x0000000000`, so if this returns\\r\\n     * all zeroes, it means \\\"that token ID does not exist in this contract\\\".\\r\\n     */\\r\\n    function _tokenIDToCatID(uint256 _tokenID) external pure\\r\\n        returns (bytes5 catId);\\r\\n\\r\\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\\r\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes memory _data) external;\\r\\n    function balanceOf(address owner) external view returns (uint256 balance);\\r\\n    function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256 tokenId);\\r\\n    function wrap(bytes5 catId) external;\\r\\n    function unwrap(uint256 tokenID) external;\\r\\n    function ownerOf(uint256 tokenID) external view returns(address);\\r\\n    function setApprovalForAll(address operator, bool _approved) external;\\r\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\r\\n    function approve(address to, uint256 tokenId) external;\\r\\n}\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity >=0.6.0 <0.8.0;\\r\\n\\r\\n/*\\r\\n * @dev Provides information about the current execution context, including the\\r\\n * sender of the transaction and its data. While these are generally available\\r\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\r\\n * manner, since when dealing with GSN meta-transactions the account sending and\\r\\n * paying for execution may not be the actual sender (as far as an application\\r\\n * is concerned).\\r\\n *\\r\\n * This contract is only required for intermediate, library-like contracts.\\r\\n */\\r\\nabstract contract Context {\\r\\n    function _msgSender() internal view virtual returns (address payable) {\\r\\n        return msg.sender;\\r\\n    }\\r\\n\\r\\n    function _msgData() internal view virtual returns (bytes memory) {\\r\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\r\\n        return msg.data;\\r\\n    }\\r\\n}\\r\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity >=0.6.0 <0.8.0;\\r\\n\\r\\nimport \\\"../utils/Context.sol\\\";\\r\\n/**\\r\\n * @dev Contract module which provides a basic access control mechanism, where\\r\\n * there is an account (an owner) that can be granted exclusive access to\\r\\n * specific functions.\\r\\n *\\r\\n * By default, the owner account will be the one that deploys the contract. This\\r\\n * can later be changed with {transferOwnership}.\\r\\n *\\r\\n * This module is used through inheritance. It will make available the modifier\\r\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\r\\n * the owner.\\r\\n */\\r\\nabstract contract Ownable is Context {\\r\\n    address private _owner;\\r\\n\\r\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\r\\n\\r\\n    /**\\r\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\r\\n     */\\r\\n    constructor () internal {\\r\\n        address msgSender = _msgSender();\\r\\n        _owner = msgSender;\\r\\n        emit OwnershipTransferred(address(0), msgSender);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the address of the current owner.\\r\\n     */\\r\\n    function owner() public view virtual returns (address) {\\r\\n        return _owner;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Throws if called by any account other than the owner.\\r\\n     */\\r\\n    modifier onlyOwner() {\\r\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Leaves the contract without owner. It will not be possible to call\\r\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\r\\n     *\\r\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\r\\n     * thereby removing any functionality that is only available to the owner.\\r\\n     */\\r\\n    function renounceOwnership() public virtual onlyOwner {\\r\\n        emit OwnershipTransferred(_owner, address(0));\\r\\n        _owner = address(0);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\r\\n     * Can only be called by the current owner.\\r\\n     */\\r\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\r\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\r\\n        emit OwnershipTransferred(_owner, newOwner);\\r\\n        _owner = newOwner;\\r\\n    }\\r\\n}\\r\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Pausable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity >=0.6.0 <0.8.0;\\r\\n\\r\\nimport \\\"./Context.sol\\\";\\r\\n\\r\\n/**\\r\\n * @dev Contract module which allows children to implement an emergency stop\\r\\n * mechanism that can be triggered by an authorized account.\\r\\n *\\r\\n * This module is used through inheritance. It will make available the\\r\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\r\\n * the functions of your contract. Note that they will not be pausable by\\r\\n * simply including this module, only once the modifiers are put in place.\\r\\n */\\r\\nabstract contract Pausable is Context {\\r\\n    /**\\r\\n     * @dev Emitted when the pause is triggered by `account`.\\r\\n     */\\r\\n    event Paused(address account);\\r\\n\\r\\n    /**\\r\\n     * @dev Emitted when the pause is lifted by `account`.\\r\\n     */\\r\\n    event Unpaused(address account);\\r\\n\\r\\n    bool private _paused;\\r\\n\\r\\n    /**\\r\\n     * @dev Initializes the contract in unpaused state.\\r\\n     */\\r\\n    constructor () internal {\\r\\n        _paused = false;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns true if the contract is paused, and false otherwise.\\r\\n     */\\r\\n    function paused() public view virtual returns (bool) {\\r\\n        return _paused;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - The contract must not be paused.\\r\\n     */\\r\\n    modifier whenNotPaused() {\\r\\n        require(!paused(), \\\"Pausable: paused\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Modifier to make a function callable only when the contract is paused.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - The contract must be paused.\\r\\n     */\\r\\n    modifier whenPaused() {\\r\\n        require(paused(), \\\"Pausable: not paused\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Triggers stopped state.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - The contract must not be paused.\\r\\n     */\\r\\n    function _pause() internal virtual whenNotPaused {\\r\\n        _paused = true;\\r\\n        emit Paused(_msgSender());\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns to normal state.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - The contract must be paused.\\r\\n     */\\r\\n    function _unpause() internal virtual whenPaused {\\r\\n        _paused = false;\\r\\n        emit Unpaused(_msgSender());\\r\\n    }\\r\\n}\\r\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/IERC721.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity >=0.6.2 <0.8.0;\\r\\n\\r\\nimport \\\"../../introspection/IERC165.sol\\\";\\r\\n\\r\\n/**\\r\\n * @dev Required interface of an ERC721 compliant contract.\\r\\n */\\r\\ninterface IERC721 is IERC165 {\\r\\n    /**\\r\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\r\\n     */\\r\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\r\\n\\r\\n    /**\\r\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\r\\n     */\\r\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\r\\n\\r\\n    /**\\r\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\r\\n     */\\r\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the number of tokens in ``owner``'s account.\\r\\n     */\\r\\n    function balanceOf(address owner) external view returns (uint256 balance);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the owner of the `tokenId` token.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `tokenId` must exist.\\r\\n     */\\r\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\r\\n\\r\\n    /**\\r\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\r\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `from` cannot be the zero address.\\r\\n     * - `to` cannot be the zero address.\\r\\n     * - `tokenId` token must exist and be owned by `from`.\\r\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\r\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\r\\n     *\\r\\n     * Emits a {Transfer} event.\\r\\n     */\\r\\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\\r\\n\\r\\n    /**\\r\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\r\\n     *\\r\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `from` cannot be the zero address.\\r\\n     * - `to` cannot be the zero address.\\r\\n     * - `tokenId` token must be owned by `from`.\\r\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\r\\n     *\\r\\n     * Emits a {Transfer} event.\\r\\n     */\\r\\n    function transferFrom(address from, address to, uint256 tokenId) external;\\r\\n\\r\\n    /**\\r\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\r\\n     * The approval is cleared when the token is transferred.\\r\\n     *\\r\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - The caller must own the token or be an approved operator.\\r\\n     * - `tokenId` must exist.\\r\\n     *\\r\\n     * Emits an {Approval} event.\\r\\n     */\\r\\n    function approve(address to, uint256 tokenId) external;\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the account approved for `tokenId` token.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `tokenId` must exist.\\r\\n     */\\r\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\r\\n\\r\\n    /**\\r\\n     * @dev Approve or remove `operator` as an operator for the caller.\\r\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - The `operator` cannot be the caller.\\r\\n     *\\r\\n     * Emits an {ApprovalForAll} event.\\r\\n     */\\r\\n    function setApprovalForAll(address operator, bool _approved) external;\\r\\n\\r\\n    /**\\r\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\r\\n     *\\r\\n     * See {setApprovalForAll}\\r\\n     */\\r\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\r\\n\\r\\n    /**\\r\\n      * @dev Safely transfers `tokenId` token from `from` to `to`.\\r\\n      *\\r\\n      * Requirements:\\r\\n      *\\r\\n      * - `from` cannot be the zero address.\\r\\n      * - `to` cannot be the zero address.\\r\\n      * - `tokenId` token must exist and be owned by `from`.\\r\\n      * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\r\\n      * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\r\\n      *\\r\\n      * Emits a {Transfer} event.\\r\\n      */\\r\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\\r\\n}\\r\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/IERC721Metadata.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity >=0.6.2 <0.8.0;\\r\\n\\r\\nimport \\\"./IERC721.sol\\\";\\r\\n\\r\\n/**\\r\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\r\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\r\\n */\\r\\ninterface IERC721Metadata is IERC721 {\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the token collection name.\\r\\n     */\\r\\n    function name() external view returns (string memory);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the token collection symbol.\\r\\n     */\\r\\n    function symbol() external view returns (string memory);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\r\\n     */\\r\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\r\\n}\\r\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/IERC721Enumerable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity >=0.6.2 <0.8.0;\\r\\n\\r\\nimport \\\"./IERC721.sol\\\";\\r\\n\\r\\n/**\\r\\n * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\\r\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\r\\n */\\r\\ninterface IERC721Enumerable is IERC721 {\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the total amount of tokens stored by the contract.\\r\\n     */\\r\\n    function totalSupply() external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns a token ID owned by `owner` at a given `index` of its token list.\\r\\n     * Use along with {balanceOf} to enumerate all of ``owner``'s tokens.\\r\\n     */\\r\\n    function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256 tokenId);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns a token ID at a given `index` of all the tokens stored by the contract.\\r\\n     * Use along with {totalSupply} to enumerate all tokens.\\r\\n     */\\r\\n    function tokenByIndex(uint256 index) external view returns (uint256);\\r\\n}\\r\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity >=0.6.0 <0.8.0;\\r\\n\\r\\n/**\\r\\n * @title ERC721 token receiver interface\\r\\n * @dev Interface for any contract that wants to support safeTransfers\\r\\n * from ERC721 asset contracts.\\r\\n */\\r\\ninterface IERC721Receiver {\\r\\n    /**\\r\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\r\\n     * by `operator` from `from`, this function is called.\\r\\n     *\\r\\n     * It must return its Solidity selector to confirm the token transfer.\\r\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\r\\n     *\\r\\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\\r\\n     */\\r\\n    function onERC721Received(address operator, address from, uint256 tokenId, bytes calldata data) external returns (bytes4);\\r\\n}\\r\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/ERC721Holder.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity >=0.6.0 <0.8.0;\\r\\n\\r\\nimport \\\"./IERC721Receiver.sol\\\";\\r\\n\\r\\n  /**\\r\\n   * @dev Implementation of the {IERC721Receiver} interface.\\r\\n   *\\r\\n   * Accepts all token transfers. \\r\\n   * Make sure the contract is able to use its token with {IERC721-safeTransferFrom}, {IERC721-approve} or {IERC721-setApprovalForAll}.\\r\\n   */\\r\\ncontract ERC721Holder is IERC721Receiver {\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC721Receiver-onERC721Received}.\\r\\n     *\\r\\n     * Always returns `IERC721Receiver.onERC721Received.selector`.\\r\\n     */\\r\\n    function onERC721Received(address, address, uint256, bytes memory) public virtual override returns (bytes4) {\\r\\n        return this.onERC721Received.selector;\\r\\n    }\\r\\n}\\r\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/introspection/ERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity >=0.6.0 <0.8.0;\\r\\n\\r\\nimport \\\"./IERC165.sol\\\";\\r\\n\\r\\n/**\\r\\n * @dev Implementation of the {IERC165} interface.\\r\\n *\\r\\n * Contracts may inherit from this and call {_registerInterface} to declare\\r\\n * their support of an interface.\\r\\n */\\r\\nabstract contract ERC165 is IERC165 {\\r\\n    /*\\r\\n     * bytes4(keccak256('supportsInterface(bytes4)')) == 0x01ffc9a7\\r\\n     */\\r\\n    bytes4 private constant _INTERFACE_ID_ERC165 = 0x01ffc9a7;\\r\\n\\r\\n    /**\\r\\n     * @dev Mapping of interface ids to whether or not it's supported.\\r\\n     */\\r\\n    mapping(bytes4 => bool) private _supportedInterfaces;\\r\\n\\r\\n    constructor () internal {\\r\\n        // Derived contracts need only register support for their own interfaces,\\r\\n        // we register support for ERC165 itself here\\r\\n        _registerInterface(_INTERFACE_ID_ERC165);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC165-supportsInterface}.\\r\\n     *\\r\\n     * Time complexity O(1), guaranteed to always use less than 30 000 gas.\\r\\n     */\\r\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\r\\n        return _supportedInterfaces[interfaceId];\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Registers the contract as an implementer of the interface defined by\\r\\n     * `interfaceId`. Support of the actual ERC165 interface is automatic and\\r\\n     * registering its interface id is not required.\\r\\n     *\\r\\n     * See {IERC165-supportsInterface}.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `interfaceId` cannot be the ERC165 invalid interface (`0xffffffff`).\\r\\n     */\\r\\n    function _registerInterface(bytes4 interfaceId) internal virtual {\\r\\n        require(interfaceId != 0xffffffff, \\\"ERC165: invalid interface id\\\");\\r\\n        _supportedInterfaces[interfaceId] = true;\\r\\n    }\\r\\n}\\r\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/introspection/IERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity >=0.6.0 <0.8.0;\\r\\n\\r\\n/**\\r\\n * @dev Interface of the ERC165 standard, as defined in the\\r\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\r\\n *\\r\\n * Implementers can declare support of contract interfaces, which can then be\\r\\n * queried by others ({ERC165Checker}).\\r\\n *\\r\\n * For an implementation, see {ERC165}.\\r\\n */\\r\\ninterface IERC165 {\\r\\n    /**\\r\\n     * @dev Returns true if this contract implements the interface defined by\\r\\n     * `interfaceId`. See the corresponding\\r\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\r\\n     * to learn more about how these ids are created.\\r\\n     *\\r\\n     * This function call must use less than 30 000 gas.\\r\\n     */\\r\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\r\\n}\\r\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/math/SafeMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity >=0.6.0 <0.8.0;\\r\\n\\r\\n/**\\r\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\r\\n * checks.\\r\\n *\\r\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\r\\n * in bugs, because programmers usually assume that an overflow raises an\\r\\n * error, which is the standard behavior in high level programming languages.\\r\\n * `SafeMath` restores this intuition by reverting the transaction when an\\r\\n * operation overflows.\\r\\n *\\r\\n * Using this library instead of the unchecked operations eliminates an entire\\r\\n * class of bugs, so it's recommended to use it always.\\r\\n */\\r\\nlibrary SafeMath {\\r\\n    /**\\r\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\r\\n     *\\r\\n     * _Available since v3.4._\\r\\n     */\\r\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\r\\n        uint256 c = a + b;\\r\\n        if (c < a) return (false, 0);\\r\\n        return (true, c);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\r\\n     *\\r\\n     * _Available since v3.4._\\r\\n     */\\r\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\r\\n        if (b > a) return (false, 0);\\r\\n        return (true, a - b);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\r\\n     *\\r\\n     * _Available since v3.4._\\r\\n     */\\r\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\r\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\r\\n        // benefit is lost if 'b' is also tested.\\r\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\r\\n        if (a == 0) return (true, 0);\\r\\n        uint256 c = a * b;\\r\\n        if (c / a != b) return (false, 0);\\r\\n        return (true, c);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\r\\n     *\\r\\n     * _Available since v3.4._\\r\\n     */\\r\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\r\\n        if (b == 0) return (false, 0);\\r\\n        return (true, a / b);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\r\\n     *\\r\\n     * _Available since v3.4._\\r\\n     */\\r\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\r\\n        if (b == 0) return (false, 0);\\r\\n        return (true, a % b);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the addition of two unsigned integers, reverting on\\r\\n     * overflow.\\r\\n     *\\r\\n     * Counterpart to Solidity's `+` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - Addition cannot overflow.\\r\\n     */\\r\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        uint256 c = a + b;\\r\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\r\\n        return c;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\r\\n     * overflow (when the result is negative).\\r\\n     *\\r\\n     * Counterpart to Solidity's `-` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - Subtraction cannot overflow.\\r\\n     */\\r\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        require(b <= a, \\\"SafeMath: subtraction overflow\\\");\\r\\n        return a - b;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\r\\n     * overflow.\\r\\n     *\\r\\n     * Counterpart to Solidity's `*` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - Multiplication cannot overflow.\\r\\n     */\\r\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        if (a == 0) return 0;\\r\\n        uint256 c = a * b;\\r\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\r\\n        return c;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\r\\n     * division by zero. The result is rounded towards zero.\\r\\n     *\\r\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\r\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\r\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - The divisor cannot be zero.\\r\\n     */\\r\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        require(b > 0, \\\"SafeMath: division by zero\\\");\\r\\n        return a / b;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\r\\n     * reverting when dividing by zero.\\r\\n     *\\r\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\r\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\r\\n     * invalid opcode to revert (consuming all remaining gas).\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - The divisor cannot be zero.\\r\\n     */\\r\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        require(b > 0, \\\"SafeMath: modulo by zero\\\");\\r\\n        return a % b;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\r\\n     * overflow (when the result is negative).\\r\\n     *\\r\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\r\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\r\\n     *\\r\\n     * Counterpart to Solidity's `-` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - Subtraction cannot overflow.\\r\\n     */\\r\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\r\\n        require(b <= a, errorMessage);\\r\\n        return a - b;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\r\\n     * division by zero. The result is rounded towards zero.\\r\\n     *\\r\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\r\\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\\r\\n     *\\r\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\r\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\r\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - The divisor cannot be zero.\\r\\n     */\\r\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\r\\n        require(b > 0, errorMessage);\\r\\n        return a / b;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\r\\n     * reverting with custom message when dividing by zero.\\r\\n     *\\r\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\r\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\r\\n     *\\r\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\r\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\r\\n     * invalid opcode to revert (consuming all remaining gas).\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - The divisor cannot be zero.\\r\\n     */\\r\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\r\\n        require(b > 0, errorMessage);\\r\\n        return a % b;\\r\\n    }\\r\\n}\\r\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity >=0.6.2 <0.8.0;\\r\\n\\r\\n/**\\r\\n * @dev Collection of functions related to the address type\\r\\n */\\r\\nlibrary Address {\\r\\n    /**\\r\\n     * @dev Returns true if `account` is a contract.\\r\\n     *\\r\\n     * [IMPORTANT]\\r\\n     * ====\\r\\n     * It is unsafe to assume that an address for which this function returns\\r\\n     * false is an externally-owned account (EOA) and not a contract.\\r\\n     *\\r\\n     * Among others, `isContract` will return false for the following\\r\\n     * types of addresses:\\r\\n     *\\r\\n     *  - an externally-owned account\\r\\n     *  - a contract in construction\\r\\n     *  - an address where a contract will be created\\r\\n     *  - an address where a contract lived, but was destroyed\\r\\n     * ====\\r\\n     */\\r\\n    function isContract(address account) internal view returns (bool) {\\r\\n        // This method relies on extcodesize, which returns 0 for contracts in\\r\\n        // construction, since the code is only stored at the end of the\\r\\n        // constructor execution.\\r\\n\\r\\n        uint256 size;\\r\\n        // solhint-disable-next-line no-inline-assembly\\r\\n        assembly { size := extcodesize(account) }\\r\\n        return size > 0;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\r\\n     * `recipient`, forwarding all available gas and reverting on errors.\\r\\n     *\\r\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\r\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\r\\n     * imposed by `transfer`, making them unable to receive funds via\\r\\n     * `transfer`. {sendValue} removes this limitation.\\r\\n     *\\r\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\r\\n     *\\r\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\r\\n     * taken to not create reentrancy vulnerabilities. Consider using\\r\\n     * {ReentrancyGuard} or the\\r\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\r\\n     */\\r\\n    function sendValue(address payable recipient, uint256 amount) internal {\\r\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\r\\n\\r\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\r\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\r\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Performs a Solidity function call using a low level `call`. A\\r\\n     * plain`call` is an unsafe replacement for a function call: use this\\r\\n     * function instead.\\r\\n     *\\r\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\r\\n     * function (like regular Solidity function calls).\\r\\n     *\\r\\n     * Returns the raw returned data. To convert to the expected return value,\\r\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `target` must be a contract.\\r\\n     * - calling `target` with `data` must not revert.\\r\\n     *\\r\\n     * _Available since v3.1._\\r\\n     */\\r\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\r\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\r\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\r\\n     *\\r\\n     * _Available since v3.1._\\r\\n     */\\r\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\r\\n        return functionCallWithValue(target, data, 0, errorMessage);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\r\\n     * but also transferring `value` wei to `target`.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - the calling contract must have an ETH balance of at least `value`.\\r\\n     * - the called Solidity function must be `payable`.\\r\\n     *\\r\\n     * _Available since v3.1._\\r\\n     */\\r\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\r\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\r\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\r\\n     *\\r\\n     * _Available since v3.1._\\r\\n     */\\r\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\r\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\r\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\r\\n\\r\\n        // solhint-disable-next-line avoid-low-level-calls\\r\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\r\\n        return _verifyCallResult(success, returndata, errorMessage);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\r\\n     * but performing a static call.\\r\\n     *\\r\\n     * _Available since v3.3._\\r\\n     */\\r\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\r\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\r\\n     * but performing a static call.\\r\\n     *\\r\\n     * _Available since v3.3._\\r\\n     */\\r\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\r\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\r\\n\\r\\n        // solhint-disable-next-line avoid-low-level-calls\\r\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\r\\n        return _verifyCallResult(success, returndata, errorMessage);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\r\\n     * but performing a delegate call.\\r\\n     *\\r\\n     * _Available since v3.4._\\r\\n     */\\r\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\r\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\r\\n     * but performing a delegate call.\\r\\n     *\\r\\n     * _Available since v3.4._\\r\\n     */\\r\\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\r\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\r\\n\\r\\n        // solhint-disable-next-line avoid-low-level-calls\\r\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\r\\n        return _verifyCallResult(success, returndata, errorMessage);\\r\\n    }\\r\\n\\r\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\r\\n        if (success) {\\r\\n            return returndata;\\r\\n        } else {\\r\\n            // Look for revert reason and bubble it up if present\\r\\n            if (returndata.length > 0) {\\r\\n                // The easiest way to bubble the revert reason is using memory via assembly\\r\\n\\r\\n                // solhint-disable-next-line no-inline-assembly\\r\\n                assembly {\\r\\n                    let returndata_size := mload(returndata)\\r\\n                    revert(add(32, returndata), returndata_size)\\r\\n                }\\r\\n            } else {\\r\\n                revert(errorMessage);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/EnumerableSet.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity >=0.6.0 <0.8.0;\\r\\n\\r\\n/**\\r\\n * @dev Library for managing\\r\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\r\\n * types.\\r\\n *\\r\\n * Sets have the following properties:\\r\\n *\\r\\n * - Elements are added, removed, and checked for existence in constant time\\r\\n * (O(1)).\\r\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\r\\n *\\r\\n * ```\\r\\n * contract Example {\\r\\n *     // Add the library methods\\r\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\r\\n *\\r\\n *     // Declare a set state variable\\r\\n *     EnumerableSet.AddressSet private mySet;\\r\\n * }\\r\\n * ```\\r\\n *\\r\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\r\\n * and `uint256` (`UintSet`) are supported.\\r\\n */\\r\\nlibrary EnumerableSet {\\r\\n    // To implement this library for multiple types with as little code\\r\\n    // repetition as possible, we write it in terms of a generic Set type with\\r\\n    // bytes32 values.\\r\\n    // The Set implementation uses private functions, and user-facing\\r\\n    // implementations (such as AddressSet) are just wrappers around the\\r\\n    // underlying Set.\\r\\n    // This means that we can only create new EnumerableSets for types that fit\\r\\n    // in bytes32.\\r\\n\\r\\n    struct Set {\\r\\n        // Storage of set values\\r\\n        bytes32[] _values;\\r\\n\\r\\n        // Position of the value in the `values` array, plus 1 because index 0\\r\\n        // means a value is not in the set.\\r\\n        mapping (bytes32 => uint256) _indexes;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Add a value to a set. O(1).\\r\\n     *\\r\\n     * Returns true if the value was added to the set, that is if it was not\\r\\n     * already present.\\r\\n     */\\r\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\r\\n        if (!_contains(set, value)) {\\r\\n            set._values.push(value);\\r\\n            // The value is stored at length-1, but we add 1 to all indexes\\r\\n            // and use 0 as a sentinel value\\r\\n            set._indexes[value] = set._values.length;\\r\\n            return true;\\r\\n        } else {\\r\\n            return false;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Removes a value from a set. O(1).\\r\\n     *\\r\\n     * Returns true if the value was removed from the set, that is if it was\\r\\n     * present.\\r\\n     */\\r\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\r\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\r\\n        uint256 valueIndex = set._indexes[value];\\r\\n\\r\\n        if (valueIndex != 0) { // Equivalent to contains(set, value)\\r\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\r\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\r\\n            // This modifies the order of the array, as noted in {at}.\\r\\n\\r\\n            uint256 toDeleteIndex = valueIndex - 1;\\r\\n            uint256 lastIndex = set._values.length - 1;\\r\\n\\r\\n            // When the value to delete is the last one, the swap operation is unnecessary. However, since this occurs\\r\\n            // so rarely, we still do the swap anyway to avoid the gas cost of adding an 'if' statement.\\r\\n\\r\\n            bytes32 lastvalue = set._values[lastIndex];\\r\\n\\r\\n            // Move the last value to the index where the value to delete is\\r\\n            set._values[toDeleteIndex] = lastvalue;\\r\\n            // Update the index for the moved value\\r\\n            set._indexes[lastvalue] = toDeleteIndex + 1; // All indexes are 1-based\\r\\n\\r\\n            // Delete the slot where the moved value was stored\\r\\n            set._values.pop();\\r\\n\\r\\n            // Delete the index for the deleted slot\\r\\n            delete set._indexes[value];\\r\\n\\r\\n            return true;\\r\\n        } else {\\r\\n            return false;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns true if the value is in the set. O(1).\\r\\n     */\\r\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\r\\n        return set._indexes[value] != 0;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the number of values on the set. O(1).\\r\\n     */\\r\\n    function _length(Set storage set) private view returns (uint256) {\\r\\n        return set._values.length;\\r\\n    }\\r\\n\\r\\n   /**\\r\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\r\\n    *\\r\\n    * Note that there are no guarantees on the ordering of values inside the\\r\\n    * array, and it may change when more values are added or removed.\\r\\n    *\\r\\n    * Requirements:\\r\\n    *\\r\\n    * - `index` must be strictly less than {length}.\\r\\n    */\\r\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\r\\n        require(set._values.length > index, \\\"EnumerableSet: index out of bounds\\\");\\r\\n        return set._values[index];\\r\\n    }\\r\\n\\r\\n    // Bytes32Set\\r\\n\\r\\n    struct Bytes32Set {\\r\\n        Set _inner;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Add a value to a set. O(1).\\r\\n     *\\r\\n     * Returns true if the value was added to the set, that is if it was not\\r\\n     * already present.\\r\\n     */\\r\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\r\\n        return _add(set._inner, value);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Removes a value from a set. O(1).\\r\\n     *\\r\\n     * Returns true if the value was removed from the set, that is if it was\\r\\n     * present.\\r\\n     */\\r\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\r\\n        return _remove(set._inner, value);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns true if the value is in the set. O(1).\\r\\n     */\\r\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\r\\n        return _contains(set._inner, value);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the number of values in the set. O(1).\\r\\n     */\\r\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\r\\n        return _length(set._inner);\\r\\n    }\\r\\n\\r\\n   /**\\r\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\r\\n    *\\r\\n    * Note that there are no guarantees on the ordering of values inside the\\r\\n    * array, and it may change when more values are added or removed.\\r\\n    *\\r\\n    * Requirements:\\r\\n    *\\r\\n    * - `index` must be strictly less than {length}.\\r\\n    */\\r\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\r\\n        return _at(set._inner, index);\\r\\n    }\\r\\n\\r\\n    // AddressSet\\r\\n\\r\\n    struct AddressSet {\\r\\n        Set _inner;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Add a value to a set. O(1).\\r\\n     *\\r\\n     * Returns true if the value was added to the set, that is if it was not\\r\\n     * already present.\\r\\n     */\\r\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\r\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Removes a value from a set. O(1).\\r\\n     *\\r\\n     * Returns true if the value was removed from the set, that is if it was\\r\\n     * present.\\r\\n     */\\r\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\r\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns true if the value is in the set. O(1).\\r\\n     */\\r\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\r\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the number of values in the set. O(1).\\r\\n     */\\r\\n    function length(AddressSet storage set) internal view returns (uint256) {\\r\\n        return _length(set._inner);\\r\\n    }\\r\\n\\r\\n   /**\\r\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\r\\n    *\\r\\n    * Note that there are no guarantees on the ordering of values inside the\\r\\n    * array, and it may change when more values are added or removed.\\r\\n    *\\r\\n    * Requirements:\\r\\n    *\\r\\n    * - `index` must be strictly less than {length}.\\r\\n    */\\r\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\r\\n        return address(uint160(uint256(_at(set._inner, index))));\\r\\n    }\\r\\n\\r\\n\\r\\n    // UintSet\\r\\n\\r\\n    struct UintSet {\\r\\n        Set _inner;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Add a value to a set. O(1).\\r\\n     *\\r\\n     * Returns true if the value was added to the set, that is if it was not\\r\\n     * already present.\\r\\n     */\\r\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\r\\n        return _add(set._inner, bytes32(value));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Removes a value from a set. O(1).\\r\\n     *\\r\\n     * Returns true if the value was removed from the set, that is if it was\\r\\n     * present.\\r\\n     */\\r\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\r\\n        return _remove(set._inner, bytes32(value));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns true if the value is in the set. O(1).\\r\\n     */\\r\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\r\\n        return _contains(set._inner, bytes32(value));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the number of values on the set. O(1).\\r\\n     */\\r\\n    function length(UintSet storage set) internal view returns (uint256) {\\r\\n        return _length(set._inner);\\r\\n    }\\r\\n\\r\\n   /**\\r\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\r\\n    *\\r\\n    * Note that there are no guarantees on the ordering of values inside the\\r\\n    * array, and it may change when more values are added or removed.\\r\\n    *\\r\\n    * Requirements:\\r\\n    *\\r\\n    * - `index` must be strictly less than {length}.\\r\\n    */\\r\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\r\\n        return uint256(_at(set._inner, index));\\r\\n    }\\r\\n}\\r\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/EnumerableMap.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity >=0.6.0 <0.8.0;\\r\\n\\r\\n/**\\r\\n * @dev Library for managing an enumerable variant of Solidity's\\r\\n * https://solidity.readthedocs.io/en/latest/types.html#mapping-types[`mapping`]\\r\\n * type.\\r\\n *\\r\\n * Maps have the following properties:\\r\\n *\\r\\n * - Entries are added, removed, and checked for existence in constant time\\r\\n * (O(1)).\\r\\n * - Entries are enumerated in O(n). No guarantees are made on the ordering.\\r\\n *\\r\\n * ```\\r\\n * contract Example {\\r\\n *     // Add the library methods\\r\\n *     using EnumerableMap for EnumerableMap.UintToAddressMap;\\r\\n *\\r\\n *     // Declare a set state variable\\r\\n *     EnumerableMap.UintToAddressMap private myMap;\\r\\n * }\\r\\n * ```\\r\\n *\\r\\n * As of v3.0.0, only maps of type `uint256 -> address` (`UintToAddressMap`) are\\r\\n * supported.\\r\\n */\\r\\nlibrary EnumerableMap {\\r\\n    // To implement this library for multiple types with as little code\\r\\n    // repetition as possible, we write it in terms of a generic Map type with\\r\\n    // bytes32 keys and values.\\r\\n    // The Map implementation uses private functions, and user-facing\\r\\n    // implementations (such as Uint256ToAddressMap) are just wrappers around\\r\\n    // the underlying Map.\\r\\n    // This means that we can only create new EnumerableMaps for types that fit\\r\\n    // in bytes32.\\r\\n\\r\\n    struct MapEntry {\\r\\n        bytes32 _key;\\r\\n        bytes32 _value;\\r\\n    }\\r\\n\\r\\n    struct Map {\\r\\n        // Storage of map keys and values\\r\\n        MapEntry[] _entries;\\r\\n\\r\\n        // Position of the entry defined by a key in the `entries` array, plus 1\\r\\n        // because index 0 means a key is not in the map.\\r\\n        mapping (bytes32 => uint256) _indexes;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Adds a key-value pair to a map, or updates the value for an existing\\r\\n     * key. O(1).\\r\\n     *\\r\\n     * Returns true if the key was added to the map, that is if it was not\\r\\n     * already present.\\r\\n     */\\r\\n    function _set(Map storage map, bytes32 key, bytes32 value) private returns (bool) {\\r\\n        // We read and store the key's index to prevent multiple reads from the same storage slot\\r\\n        uint256 keyIndex = map._indexes[key];\\r\\n\\r\\n        if (keyIndex == 0) { // Equivalent to !contains(map, key)\\r\\n            map._entries.push(MapEntry({ _key: key, _value: value }));\\r\\n            // The entry is stored at length-1, but we add 1 to all indexes\\r\\n            // and use 0 as a sentinel value\\r\\n            map._indexes[key] = map._entries.length;\\r\\n            return true;\\r\\n        } else {\\r\\n            map._entries[keyIndex - 1]._value = value;\\r\\n            return false;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Removes a key-value pair from a map. O(1).\\r\\n     *\\r\\n     * Returns true if the key was removed from the map, that is if it was present.\\r\\n     */\\r\\n    function _remove(Map storage map, bytes32 key) private returns (bool) {\\r\\n        // We read and store the key's index to prevent multiple reads from the same storage slot\\r\\n        uint256 keyIndex = map._indexes[key];\\r\\n\\r\\n        if (keyIndex != 0) { // Equivalent to contains(map, key)\\r\\n            // To delete a key-value pair from the _entries array in O(1), we swap the entry to delete with the last one\\r\\n            // in the array, and then remove the last entry (sometimes called as 'swap and pop').\\r\\n            // This modifies the order of the array, as noted in {at}.\\r\\n\\r\\n            uint256 toDeleteIndex = keyIndex - 1;\\r\\n            uint256 lastIndex = map._entries.length - 1;\\r\\n\\r\\n            // When the entry to delete is the last one, the swap operation is unnecessary. However, since this occurs\\r\\n            // so rarely, we still do the swap anyway to avoid the gas cost of adding an 'if' statement.\\r\\n\\r\\n            MapEntry storage lastEntry = map._entries[lastIndex];\\r\\n\\r\\n            // Move the last entry to the index where the entry to delete is\\r\\n            map._entries[toDeleteIndex] = lastEntry;\\r\\n            // Update the index for the moved entry\\r\\n            map._indexes[lastEntry._key] = toDeleteIndex + 1; // All indexes are 1-based\\r\\n\\r\\n            // Delete the slot where the moved entry was stored\\r\\n            map._entries.pop();\\r\\n\\r\\n            // Delete the index for the deleted slot\\r\\n            delete map._indexes[key];\\r\\n\\r\\n            return true;\\r\\n        } else {\\r\\n            return false;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns true if the key is in the map. O(1).\\r\\n     */\\r\\n    function _contains(Map storage map, bytes32 key) private view returns (bool) {\\r\\n        return map._indexes[key] != 0;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the number of key-value pairs in the map. O(1).\\r\\n     */\\r\\n    function _length(Map storage map) private view returns (uint256) {\\r\\n        return map._entries.length;\\r\\n    }\\r\\n\\r\\n   /**\\r\\n    * @dev Returns the key-value pair stored at position `index` in the map. O(1).\\r\\n    *\\r\\n    * Note that there are no guarantees on the ordering of entries inside the\\r\\n    * array, and it may change when more entries are added or removed.\\r\\n    *\\r\\n    * Requirements:\\r\\n    *\\r\\n    * - `index` must be strictly less than {length}.\\r\\n    */\\r\\n    function _at(Map storage map, uint256 index) private view returns (bytes32, bytes32) {\\r\\n        require(map._entries.length > index, \\\"EnumerableMap: index out of bounds\\\");\\r\\n\\r\\n        MapEntry storage entry = map._entries[index];\\r\\n        return (entry._key, entry._value);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Tries to returns the value associated with `key`.  O(1).\\r\\n     * Does not revert if `key` is not in the map.\\r\\n     */\\r\\n    function _tryGet(Map storage map, bytes32 key) private view returns (bool, bytes32) {\\r\\n        uint256 keyIndex = map._indexes[key];\\r\\n        if (keyIndex == 0) return (false, 0); // Equivalent to contains(map, key)\\r\\n        return (true, map._entries[keyIndex - 1]._value); // All indexes are 1-based\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the value associated with `key`.  O(1).\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `key` must be in the map.\\r\\n     */\\r\\n    function _get(Map storage map, bytes32 key) private view returns (bytes32) {\\r\\n        uint256 keyIndex = map._indexes[key];\\r\\n        require(keyIndex != 0, \\\"EnumerableMap: nonexistent key\\\"); // Equivalent to contains(map, key)\\r\\n        return map._entries[keyIndex - 1]._value; // All indexes are 1-based\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {_get}, with a custom error message when `key` is not in the map.\\r\\n     *\\r\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\r\\n     * message unnecessarily. For custom revert reasons use {_tryGet}.\\r\\n     */\\r\\n    function _get(Map storage map, bytes32 key, string memory errorMessage) private view returns (bytes32) {\\r\\n        uint256 keyIndex = map._indexes[key];\\r\\n        require(keyIndex != 0, errorMessage); // Equivalent to contains(map, key)\\r\\n        return map._entries[keyIndex - 1]._value; // All indexes are 1-based\\r\\n    }\\r\\n\\r\\n    // UintToAddressMap\\r\\n\\r\\n    struct UintToAddressMap {\\r\\n        Map _inner;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Adds a key-value pair to a map, or updates the value for an existing\\r\\n     * key. O(1).\\r\\n     *\\r\\n     * Returns true if the key was added to the map, that is if it was not\\r\\n     * already present.\\r\\n     */\\r\\n    function set(UintToAddressMap storage map, uint256 key, address value) internal returns (bool) {\\r\\n        return _set(map._inner, bytes32(key), bytes32(uint256(uint160(value))));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Removes a value from a set. O(1).\\r\\n     *\\r\\n     * Returns true if the key was removed from the map, that is if it was present.\\r\\n     */\\r\\n    function remove(UintToAddressMap storage map, uint256 key) internal returns (bool) {\\r\\n        return _remove(map._inner, bytes32(key));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns true if the key is in the map. O(1).\\r\\n     */\\r\\n    function contains(UintToAddressMap storage map, uint256 key) internal view returns (bool) {\\r\\n        return _contains(map._inner, bytes32(key));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the number of elements in the map. O(1).\\r\\n     */\\r\\n    function length(UintToAddressMap storage map) internal view returns (uint256) {\\r\\n        return _length(map._inner);\\r\\n    }\\r\\n\\r\\n   /**\\r\\n    * @dev Returns the element stored at position `index` in the set. O(1).\\r\\n    * Note that there are no guarantees on the ordering of values inside the\\r\\n    * array, and it may change when more values are added or removed.\\r\\n    *\\r\\n    * Requirements:\\r\\n    *\\r\\n    * - `index` must be strictly less than {length}.\\r\\n    */\\r\\n    function at(UintToAddressMap storage map, uint256 index) internal view returns (uint256, address) {\\r\\n        (bytes32 key, bytes32 value) = _at(map._inner, index);\\r\\n        return (uint256(key), address(uint160(uint256(value))));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Tries to returns the value associated with `key`.  O(1).\\r\\n     * Does not revert if `key` is not in the map.\\r\\n     *\\r\\n     * _Available since v3.4._\\r\\n     */\\r\\n    function tryGet(UintToAddressMap storage map, uint256 key) internal view returns (bool, address) {\\r\\n        (bool success, bytes32 value) = _tryGet(map._inner, bytes32(key));\\r\\n        return (success, address(uint160(uint256(value))));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the value associated with `key`.  O(1).\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `key` must be in the map.\\r\\n     */\\r\\n    function get(UintToAddressMap storage map, uint256 key) internal view returns (address) {\\r\\n        return address(uint160(uint256(_get(map._inner, bytes32(key)))));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {get}, with a custom error message when `key` is not in the map.\\r\\n     *\\r\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\r\\n     * message unnecessarily. For custom revert reasons use {tryGet}.\\r\\n     */\\r\\n    function get(UintToAddressMap storage map, uint256 key, string memory errorMessage) internal view returns (address) {\\r\\n        return address(uint160(uint256(_get(map._inner, bytes32(key), errorMessage))));\\r\\n    }\\r\\n}\\r\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Strings.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity >=0.6.0 <0.8.0;\\r\\n\\r\\n/**\\r\\n * @dev String operations.\\r\\n */\\r\\nlibrary Strings {\\r\\n    /**\\r\\n     * @dev Converts a `uint256` to its ASCII `string` representation.\\r\\n     */\\r\\n    function toString(uint256 value) internal pure returns (string memory) {\\r\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\r\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\r\\n\\r\\n        if (value == 0) {\\r\\n            return \\\"0\\\";\\r\\n        }\\r\\n        uint256 temp = value;\\r\\n        uint256 digits;\\r\\n        while (temp != 0) {\\r\\n            digits++;\\r\\n            temp /= 10;\\r\\n        }\\r\\n        bytes memory buffer = new bytes(digits);\\r\\n        uint256 index = digits - 1;\\r\\n        temp = value;\\r\\n        while (temp != 0) {\\r\\n            buffer[index--] = bytes1(uint8(48 + temp % 10));\\r\\n            temp /= 10;\\r\\n        }\\r\\n        return string(buffer);\\r\\n    }\\r\\n}\\r\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}","ABI":"[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"entriesPerAddress\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"oldTokenId\",\"type\":\"uint256\"}],\"name\":\"oldTokenIdExists\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"oldTokenId\",\"type\":\"uint256\"}],\"name\":\"oldTokenIdToRescueOrder\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_oldTokenId\",\"type\":\"uint256\"}],\"name\":\"removeEntry\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"oldTokenIds\",\"type\":\"uint256[]\"},{\"internalType\":\"uint16[]\",\"name\":\"rescueOrders\",\"type\":\"uint16[]\"}],\"name\":\"submitRescueOrder\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"MoonCatOrderLookup","CompilerVersion":"v0.7.3+commit.9bfce1f6","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"GNU GPLv3","Proxy":"0","Implementation":"","SwarmSource":"ipfs://967d8a62f01db6229c1e4a60a677bd1f9686db8d0dceaf3e976bd7b2dac9a009"}]}