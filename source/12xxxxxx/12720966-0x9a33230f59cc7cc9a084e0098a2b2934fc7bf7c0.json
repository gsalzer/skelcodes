{"status":"1","message":"OK","result":[{"SourceCode":"/**\r\n * SPDX-License-Identifier: UNLICENSED\r\n */\r\npragma solidity =0.6.10;\r\n\r\npragma experimental ABIEncoderV2;\r\n\r\n// File: contracts/packages/oz/SafeMath.sol\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        // Solidity only automatically asserts when dividing by 0\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts with custom message when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n// File: contracts/packages/oz/Context.sol\r\n\r\n/*\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with GSN meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal virtual view returns (address payable) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal virtual view returns (bytes memory) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n// File: contracts/packages/oz/Ownable.sol\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\ncontract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor() internal {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\n// File: contracts/interfaces/OtokenInterface.sol\r\n\r\ninterface OtokenInterface {\r\n    function addressBook() external view returns (address);\r\n\r\n    function underlyingAsset() external view returns (address);\r\n\r\n    function strikeAsset() external view returns (address);\r\n\r\n    function collateralAsset() external view returns (address);\r\n\r\n    function strikePrice() external view returns (uint256);\r\n\r\n    function expiryTimestamp() external view returns (uint256);\r\n\r\n    function isPut() external view returns (bool);\r\n\r\n    function init(\r\n        address _addressBook,\r\n        address _underlyingAsset,\r\n        address _strikeAsset,\r\n        address _collateralAsset,\r\n        uint256 _strikePrice,\r\n        uint256 _expiry,\r\n        bool _isPut\r\n    ) external;\r\n\r\n    function getOtokenDetails()\r\n        external\r\n        view\r\n        returns (\r\n            address,\r\n            address,\r\n            address,\r\n            uint256,\r\n            uint256,\r\n            bool\r\n        );\r\n\r\n    function mintOtoken(address account, uint256 amount) external;\r\n\r\n    function burnOtoken(address account, uint256 amount) external;\r\n}\r\n\r\n// File: contracts/interfaces/OracleInterface.sol\r\n\r\ninterface OracleInterface {\r\n    function isLockingPeriodOver(address _asset, uint256 _expiryTimestamp) external view returns (bool);\r\n\r\n    function isDisputePeriodOver(address _asset, uint256 _expiryTimestamp) external view returns (bool);\r\n\r\n    function getExpiryPrice(address _asset, uint256 _expiryTimestamp) external view returns (uint256, bool);\r\n\r\n    function getDisputer() external view returns (address);\r\n\r\n    function getPricer(address _asset) external view returns (address);\r\n\r\n    function getPrice(address _asset) external view returns (uint256);\r\n\r\n    function getPricerLockingPeriod(address _pricer) external view returns (uint256);\r\n\r\n    function getPricerDisputePeriod(address _pricer) external view returns (uint256);\r\n\r\n    function getChainlinkRoundData(address _asset, uint80 _roundId) external view returns (uint256, uint256);\r\n\r\n    // Non-view function\r\n\r\n    function setAssetPricer(address _asset, address _pricer) external;\r\n\r\n    function setLockingPeriod(address _pricer, uint256 _lockingPeriod) external;\r\n\r\n    function setDisputePeriod(address _pricer, uint256 _disputePeriod) external;\r\n\r\n    function setExpiryPrice(\r\n        address _asset,\r\n        uint256 _expiryTimestamp,\r\n        uint256 _price\r\n    ) external;\r\n\r\n    function disputeExpiryPrice(\r\n        address _asset,\r\n        uint256 _expiryTimestamp,\r\n        uint256 _price\r\n    ) external;\r\n\r\n    function setDisputer(address _disputer) external;\r\n}\r\n\r\n// File: contracts/interfaces/ERC20Interface.sol\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface ERC20Interface {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n\r\n    function decimals() external view returns (uint8);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n// File: contracts/packages/oz/SignedSafeMath.sol\r\n\r\n/**\r\n * @title SignedSafeMath\r\n * @dev Signed math operations with safety checks that revert on error.\r\n */\r\nlibrary SignedSafeMath {\r\n    int256 private constant _INT256_MIN = -2**255;\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two signed integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(int256 a, int256 b) internal pure returns (int256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        require(!(a == -1 && b == _INT256_MIN), \"SignedSafeMath: multiplication overflow\");\r\n\r\n        int256 c = a * b;\r\n        require(c / a == b, \"SignedSafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two signed integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(int256 a, int256 b) internal pure returns (int256) {\r\n        require(b != 0, \"SignedSafeMath: division by zero\");\r\n        require(!(b == -1 && a == _INT256_MIN), \"SignedSafeMath: division overflow\");\r\n\r\n        int256 c = a / b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two signed integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(int256 a, int256 b) internal pure returns (int256) {\r\n        int256 c = a - b;\r\n        require((b >= 0 && c <= a) || (b < 0 && c > a), \"SignedSafeMath: subtraction overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the addition of two signed integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(int256 a, int256 b) internal pure returns (int256) {\r\n        int256 c = a + b;\r\n        require((b >= 0 && c >= a) || (b < 0 && c < a), \"SignedSafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n}\r\n\r\n// File: contracts/libs/SignedConverter.sol\r\n\r\n/**\r\n * @title SignedConverter\r\n * @author Opyn Team\r\n * @notice A library to convert an unsigned integer to signed integer or signed integer to unsigned integer.\r\n */\r\nlibrary SignedConverter {\r\n    /**\r\n     * @notice convert an unsigned integer to a signed integer\r\n     * @param a uint to convert into a signed integer\r\n     * @return converted signed integer\r\n     */\r\n    function uintToInt(uint256 a) internal pure returns (int256) {\r\n        require(a < 2**255, \"FixedPointInt256: out of int range\");\r\n\r\n        return int256(a);\r\n    }\r\n\r\n    /**\r\n     * @notice convert a signed integer to an unsigned integer\r\n     * @param a int to convert into an unsigned integer\r\n     * @return converted unsigned integer\r\n     */\r\n    function intToUint(int256 a) internal pure returns (uint256) {\r\n        if (a < 0) {\r\n            return uint256(-a);\r\n        } else {\r\n            return uint256(a);\r\n        }\r\n    }\r\n}\r\n\r\n// File: contracts/libs/FixedPointInt256.sol\r\n\r\n/**\r\n * @title FixedPointInt256\r\n * @author Opyn Team\r\n * @notice FixedPoint library\r\n */\r\nlibrary FPI {\r\n    using SignedSafeMath for int256;\r\n    using SignedConverter for int256;\r\n    using SafeMath for uint256;\r\n    using SignedConverter for uint256;\r\n\r\n    int256 private constant SCALING_FACTOR = 1e27;\r\n    uint256 private constant BASE_DECIMALS = 27;\r\n\r\n    struct FixedPointInt {\r\n        int256 value;\r\n    }\r\n\r\n    /**\r\n     * @notice constructs an `FixedPointInt` from an unscaled int, e.g., `b=5` gets stored internally as `5**27`.\r\n     * @param a int to convert into a FixedPoint.\r\n     * @return the converted FixedPoint.\r\n     */\r\n    function fromUnscaledInt(int256 a) internal pure returns (FixedPointInt memory) {\r\n        return FixedPointInt(a.mul(SCALING_FACTOR));\r\n    }\r\n\r\n    /**\r\n     * @notice constructs an FixedPointInt from an scaled uint with {_decimals} decimals\r\n     * Examples:\r\n     * (1)  USDC    decimals = 6\r\n     *      Input:  5 * 1e6 USDC  =>    Output: 5 * 1e27 (FixedPoint 5.0 USDC)\r\n     * (2)  cUSDC   decimals = 8\r\n     *      Input:  5 * 1e6 cUSDC =>    Output: 5 * 1e25 (FixedPoint 0.05 cUSDC)\r\n     * @param _a uint256 to convert into a FixedPoint.\r\n     * @param _decimals  original decimals _a has\r\n     * @return the converted FixedPoint, with 27 decimals.\r\n     */\r\n    function fromScaledUint(uint256 _a, uint256 _decimals) internal pure returns (FixedPointInt memory) {\r\n        FixedPointInt memory fixedPoint;\r\n\r\n        if (_decimals == BASE_DECIMALS) {\r\n            fixedPoint = FixedPointInt(_a.uintToInt());\r\n        } else if (_decimals > BASE_DECIMALS) {\r\n            uint256 exp = _decimals.sub(BASE_DECIMALS);\r\n            fixedPoint = FixedPointInt((_a.div(10**exp)).uintToInt());\r\n        } else {\r\n            uint256 exp = BASE_DECIMALS - _decimals;\r\n            fixedPoint = FixedPointInt((_a.mul(10**exp)).uintToInt());\r\n        }\r\n\r\n        return fixedPoint;\r\n    }\r\n\r\n    /**\r\n     * @notice convert a FixedPointInt number to an uint256 with a specific number of decimals\r\n     * @param _a FixedPointInt to convert\r\n     * @param _decimals number of decimals that the uint256 should be scaled to\r\n     * @param _roundDown True to round down the result, False to round up\r\n     * @return the converted uint256\r\n     */\r\n    function toScaledUint(\r\n        FixedPointInt memory _a,\r\n        uint256 _decimals,\r\n        bool _roundDown\r\n    ) internal pure returns (uint256) {\r\n        uint256 scaledUint;\r\n\r\n        if (_decimals == BASE_DECIMALS) {\r\n            scaledUint = _a.value.intToUint();\r\n        } else if (_decimals > BASE_DECIMALS) {\r\n            uint256 exp = _decimals - BASE_DECIMALS;\r\n            scaledUint = (_a.value).intToUint().mul(10**exp);\r\n        } else {\r\n            uint256 exp = BASE_DECIMALS - _decimals;\r\n            uint256 tailing;\r\n            if (!_roundDown) {\r\n                uint256 remainer = (_a.value).intToUint().mod(10**exp);\r\n                if (remainer > 0) tailing = 1;\r\n            }\r\n            scaledUint = (_a.value).intToUint().div(10**exp).add(tailing);\r\n        }\r\n\r\n        return scaledUint;\r\n    }\r\n\r\n    /**\r\n     * @notice add two signed integers, a + b\r\n     * @param a FixedPointInt\r\n     * @param b FixedPointInt\r\n     * @return sum of the two signed integers\r\n     */\r\n    function add(FixedPointInt memory a, FixedPointInt memory b) internal pure returns (FixedPointInt memory) {\r\n        return FixedPointInt(a.value.add(b.value));\r\n    }\r\n\r\n    /**\r\n     * @notice subtract two signed integers, a-b\r\n     * @param a FixedPointInt\r\n     * @param b FixedPointInt\r\n     * @return difference of two signed integers\r\n     */\r\n    function sub(FixedPointInt memory a, FixedPointInt memory b) internal pure returns (FixedPointInt memory) {\r\n        return FixedPointInt(a.value.sub(b.value));\r\n    }\r\n\r\n    /**\r\n     * @notice multiply two signed integers, a by b\r\n     * @param a FixedPointInt\r\n     * @param b FixedPointInt\r\n     * @return mul of two signed integers\r\n     */\r\n    function mul(FixedPointInt memory a, FixedPointInt memory b) internal pure returns (FixedPointInt memory) {\r\n        return FixedPointInt((a.value.mul(b.value)) / SCALING_FACTOR);\r\n    }\r\n\r\n    /**\r\n     * @notice divide two signed integers, a by b\r\n     * @param a FixedPointInt\r\n     * @param b FixedPointInt\r\n     * @return div of two signed integers\r\n     */\r\n    function div(FixedPointInt memory a, FixedPointInt memory b) internal pure returns (FixedPointInt memory) {\r\n        return FixedPointInt((a.value.mul(SCALING_FACTOR)) / b.value);\r\n    }\r\n\r\n    /**\r\n     * @notice minimum between two signed integers, a and b\r\n     * @param a FixedPointInt\r\n     * @param b FixedPointInt\r\n     * @return min of two signed integers\r\n     */\r\n    function min(FixedPointInt memory a, FixedPointInt memory b) internal pure returns (FixedPointInt memory) {\r\n        return a.value < b.value ? a : b;\r\n    }\r\n\r\n    /**\r\n     * @notice maximum between two signed integers, a and b\r\n     * @param a FixedPointInt\r\n     * @param b FixedPointInt\r\n     * @return max of two signed integers\r\n     */\r\n    function max(FixedPointInt memory a, FixedPointInt memory b) internal pure returns (FixedPointInt memory) {\r\n        return a.value > b.value ? a : b;\r\n    }\r\n\r\n    /**\r\n     * @notice is a is equal to b\r\n     * @param a FixedPointInt\r\n     * @param b FixedPointInt\r\n     * @return True if equal, False if not\r\n     */\r\n    function isEqual(FixedPointInt memory a, FixedPointInt memory b) internal pure returns (bool) {\r\n        return a.value == b.value;\r\n    }\r\n\r\n    /**\r\n     * @notice is a greater than b\r\n     * @param a FixedPointInt\r\n     * @param b FixedPointInt\r\n     * @return True if a > b, False if not\r\n     */\r\n    function isGreaterThan(FixedPointInt memory a, FixedPointInt memory b) internal pure returns (bool) {\r\n        return a.value > b.value;\r\n    }\r\n\r\n    /**\r\n     * @notice is a greater than or equal to b\r\n     * @param a FixedPointInt\r\n     * @param b FixedPointInt\r\n     * @return True if a >= b, False if not\r\n     */\r\n    function isGreaterThanOrEqual(FixedPointInt memory a, FixedPointInt memory b) internal pure returns (bool) {\r\n        return a.value >= b.value;\r\n    }\r\n\r\n    /**\r\n     * @notice is a is less than b\r\n     * @param a FixedPointInt\r\n     * @param b FixedPointInt\r\n     * @return True if a < b, False if not\r\n     */\r\n    function isLessThan(FixedPointInt memory a, FixedPointInt memory b) internal pure returns (bool) {\r\n        return a.value < b.value;\r\n    }\r\n\r\n    /**\r\n     * @notice is a less than or equal to b\r\n     * @param a FixedPointInt\r\n     * @param b FixedPointInt\r\n     * @return True if a <= b, False if not\r\n     */\r\n    function isLessThanOrEqual(FixedPointInt memory a, FixedPointInt memory b) internal pure returns (bool) {\r\n        return a.value <= b.value;\r\n    }\r\n}\r\n\r\n// File: contracts/libs/MarginVault.sol\r\n\r\n/**\r\n * MarginVault Error Codes\r\n * V1: invalid short otoken amount\r\n * V2: invalid short otoken index\r\n * V3: short otoken address mismatch\r\n * V4: invalid long otoken amount\r\n * V5: invalid long otoken index\r\n * V6: long otoken address mismatch\r\n * V7: invalid collateral amount\r\n * V8: invalid collateral token index\r\n * V9: collateral token address mismatch\r\n */\r\n\r\n/**\r\n * @title MarginVault\r\n * @author Opyn Team\r\n * @notice A library that provides the Controller with a Vault struct and the functions that manipulate vaults.\r\n * Vaults describe discrete position combinations of long options, short options, and collateral assets that a user can have.\r\n */\r\nlibrary MarginVault {\r\n    using SafeMath for uint256;\r\n\r\n    // vault is a struct of 6 arrays that describe a position a user has, a user can have multiple vaults.\r\n    struct Vault {\r\n        // addresses of oTokens a user has shorted (i.e. written) against this vault\r\n        address[] shortOtokens;\r\n        // addresses of oTokens a user has bought and deposited in this vault\r\n        // user can be long oTokens without opening a vault (e.g. by buying on a DEX)\r\n        // generally, long oTokens will be 'deposited' in vaults to act as collateral in order to write oTokens against (i.e. in spreads)\r\n        address[] longOtokens;\r\n        // addresses of other ERC-20s a user has deposited as collateral in this vault\r\n        address[] collateralAssets;\r\n        // quantity of oTokens minted/written for each oToken address in shortOtokens\r\n        uint256[] shortAmounts;\r\n        // quantity of oTokens owned and held in the vault for each oToken address in longOtokens\r\n        uint256[] longAmounts;\r\n        // quantity of ERC-20 deposited as collateral in the vault for each ERC-20 address in collateralAssets\r\n        uint256[] collateralAmounts;\r\n    }\r\n\r\n    /**\r\n     * @dev increase the short oToken balance in a vault when a new oToken is minted\r\n     * @param _vault vault to add or increase the short position in\r\n     * @param _shortOtoken address of the _shortOtoken being minted from the user's vault\r\n     * @param _amount number of _shortOtoken being minted from the user's vault\r\n     * @param _index index of _shortOtoken in the user's vault.shortOtokens array\r\n     */\r\n    function addShort(\r\n        Vault storage _vault,\r\n        address _shortOtoken,\r\n        uint256 _amount,\r\n        uint256 _index\r\n    ) external {\r\n        require(_amount > 0, \"V1\");\r\n\r\n        // valid indexes in any array are between 0 and array.length - 1.\r\n        // if adding an amount to an preexisting short oToken, check that _index is in the range of 0->length-1\r\n        if ((_index == _vault.shortOtokens.length) && (_index == _vault.shortAmounts.length)) {\r\n            _vault.shortOtokens.push(_shortOtoken);\r\n            _vault.shortAmounts.push(_amount);\r\n        } else {\r\n            require((_index < _vault.shortOtokens.length) && (_index < _vault.shortAmounts.length), \"V2\");\r\n            address existingShort = _vault.shortOtokens[_index];\r\n            require((existingShort == _shortOtoken) || (existingShort == address(0)), \"V3\");\r\n\r\n            _vault.shortAmounts[_index] = _vault.shortAmounts[_index].add(_amount);\r\n            _vault.shortOtokens[_index] = _shortOtoken;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev decrease the short oToken balance in a vault when an oToken is burned\r\n     * @param _vault vault to decrease short position in\r\n     * @param _shortOtoken address of the _shortOtoken being reduced in the user's vault\r\n     * @param _amount number of _shortOtoken being reduced in the user's vault\r\n     * @param _index index of _shortOtoken in the user's vault.shortOtokens array\r\n     */\r\n    function removeShort(\r\n        Vault storage _vault,\r\n        address _shortOtoken,\r\n        uint256 _amount,\r\n        uint256 _index\r\n    ) external {\r\n        // check that the removed short oToken exists in the vault at the specified index\r\n        require(_index < _vault.shortOtokens.length, \"V2\");\r\n        require(_vault.shortOtokens[_index] == _shortOtoken, \"V3\");\r\n\r\n        uint256 newShortAmount = _vault.shortAmounts[_index].sub(_amount);\r\n\r\n        if (newShortAmount == 0) {\r\n            delete _vault.shortOtokens[_index];\r\n        }\r\n        _vault.shortAmounts[_index] = newShortAmount;\r\n    }\r\n\r\n    /**\r\n     * @dev increase the long oToken balance in a vault when an oToken is deposited\r\n     * @param _vault vault to add a long position to\r\n     * @param _longOtoken address of the _longOtoken being added to the user's vault\r\n     * @param _amount number of _longOtoken the protocol is adding to the user's vault\r\n     * @param _index index of _longOtoken in the user's vault.longOtokens array\r\n     */\r\n    function addLong(\r\n        Vault storage _vault,\r\n        address _longOtoken,\r\n        uint256 _amount,\r\n        uint256 _index\r\n    ) external {\r\n        require(_amount > 0, \"V4\");\r\n\r\n        // valid indexes in any array are between 0 and array.length - 1.\r\n        // if adding an amount to an preexisting short oToken, check that _index is in the range of 0->length-1\r\n        if ((_index == _vault.longOtokens.length) && (_index == _vault.longAmounts.length)) {\r\n            _vault.longOtokens.push(_longOtoken);\r\n            _vault.longAmounts.push(_amount);\r\n        } else {\r\n            require((_index < _vault.longOtokens.length) && (_index < _vault.longAmounts.length), \"V5\");\r\n            address existingLong = _vault.longOtokens[_index];\r\n            require((existingLong == _longOtoken) || (existingLong == address(0)), \"V6\");\r\n\r\n            _vault.longAmounts[_index] = _vault.longAmounts[_index].add(_amount);\r\n            _vault.longOtokens[_index] = _longOtoken;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev decrease the long oToken balance in a vault when an oToken is withdrawn\r\n     * @param _vault vault to remove a long position from\r\n     * @param _longOtoken address of the _longOtoken being removed from the user's vault\r\n     * @param _amount number of _longOtoken the protocol is removing from the user's vault\r\n     * @param _index index of _longOtoken in the user's vault.longOtokens array\r\n     */\r\n    function removeLong(\r\n        Vault storage _vault,\r\n        address _longOtoken,\r\n        uint256 _amount,\r\n        uint256 _index\r\n    ) external {\r\n        // check that the removed long oToken exists in the vault at the specified index\r\n        require(_index < _vault.longOtokens.length, \"V5\");\r\n        require(_vault.longOtokens[_index] == _longOtoken, \"V6\");\r\n\r\n        uint256 newLongAmount = _vault.longAmounts[_index].sub(_amount);\r\n\r\n        if (newLongAmount == 0) {\r\n            delete _vault.longOtokens[_index];\r\n        }\r\n        _vault.longAmounts[_index] = newLongAmount;\r\n    }\r\n\r\n    /**\r\n     * @dev increase the collateral balance in a vault\r\n     * @param _vault vault to add collateral to\r\n     * @param _collateralAsset address of the _collateralAsset being added to the user's vault\r\n     * @param _amount number of _collateralAsset being added to the user's vault\r\n     * @param _index index of _collateralAsset in the user's vault.collateralAssets array\r\n     */\r\n    function addCollateral(\r\n        Vault storage _vault,\r\n        address _collateralAsset,\r\n        uint256 _amount,\r\n        uint256 _index\r\n    ) external {\r\n        require(_amount > 0, \"V7\");\r\n\r\n        // valid indexes in any array are between 0 and array.length - 1.\r\n        // if adding an amount to an preexisting short oToken, check that _index is in the range of 0->length-1\r\n        if ((_index == _vault.collateralAssets.length) && (_index == _vault.collateralAmounts.length)) {\r\n            _vault.collateralAssets.push(_collateralAsset);\r\n            _vault.collateralAmounts.push(_amount);\r\n        } else {\r\n            require((_index < _vault.collateralAssets.length) && (_index < _vault.collateralAmounts.length), \"V8\");\r\n            address existingCollateral = _vault.collateralAssets[_index];\r\n            require((existingCollateral == _collateralAsset) || (existingCollateral == address(0)), \"V9\");\r\n\r\n            _vault.collateralAmounts[_index] = _vault.collateralAmounts[_index].add(_amount);\r\n            _vault.collateralAssets[_index] = _collateralAsset;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev decrease the collateral balance in a vault\r\n     * @param _vault vault to remove collateral from\r\n     * @param _collateralAsset address of the _collateralAsset being removed from the user's vault\r\n     * @param _amount number of _collateralAsset being removed from the user's vault\r\n     * @param _index index of _collateralAsset in the user's vault.collateralAssets array\r\n     */\r\n    function removeCollateral(\r\n        Vault storage _vault,\r\n        address _collateralAsset,\r\n        uint256 _amount,\r\n        uint256 _index\r\n    ) external {\r\n        // check that the removed collateral exists in the vault at the specified index\r\n        require(_index < _vault.collateralAssets.length, \"V8\");\r\n        require(_vault.collateralAssets[_index] == _collateralAsset, \"V9\");\r\n\r\n        uint256 newCollateralAmount = _vault.collateralAmounts[_index].sub(_amount);\r\n\r\n        if (newCollateralAmount == 0) {\r\n            delete _vault.collateralAssets[_index];\r\n        }\r\n        _vault.collateralAmounts[_index] = newCollateralAmount;\r\n    }\r\n}\r\n\r\n// File: contracts/core/MarginCalculator.sol\r\n\r\n/**\r\n * @title MarginCalculator\r\n * @author Opyn\r\n * @notice Calculator module that checks if a given vault is valid, calculates margin requirements, and settlement proceeds\r\n */\r\ncontract MarginCalculator is Ownable {\r\n    using SafeMath for uint256;\r\n    using FPI for FPI.FixedPointInt;\r\n\r\n    /// @dev decimals option upper bound value, spot shock and oracle deviation\r\n    uint256 internal constant SCALING_FACTOR = 27;\r\n\r\n    /// @dev decimals used by strike price and oracle price\r\n    uint256 internal constant BASE = 8;\r\n\r\n    /// @notice auction length\r\n    uint256 public constant AUCTION_TIME = 3600;\r\n\r\n    /// @dev struct to store all needed vault details\r\n    struct VaultDetails {\r\n        address shortUnderlyingAsset;\r\n        address shortStrikeAsset;\r\n        address shortCollateralAsset;\r\n        address longUnderlyingAsset;\r\n        address longStrikeAsset;\r\n        address longCollateralAsset;\r\n        uint256 shortStrikePrice;\r\n        uint256 shortExpiryTimestamp;\r\n        uint256 shortCollateralDecimals;\r\n        uint256 longStrikePrice;\r\n        uint256 longExpiryTimestamp;\r\n        uint256 longCollateralDecimals;\r\n        uint256 collateralDecimals;\r\n        uint256 vaultType;\r\n        bool isShortPut;\r\n        bool isLongPut;\r\n        bool hasLong;\r\n        bool hasShort;\r\n        bool hasCollateral;\r\n    }\r\n\r\n    /// @dev oracle deviation value (1e27)\r\n    uint256 internal oracleDeviation;\r\n\r\n    /// @dev FixedPoint 0\r\n    FPI.FixedPointInt internal ZERO = FPI.fromScaledUint(0, BASE);\r\n\r\n    /// @dev mapping to store dust amount per option collateral asset (scaled by collateral asset decimals)\r\n    mapping(address => uint256) internal dust;\r\n\r\n    /// @dev mapping to store array of time to expiry for a given product\r\n    mapping(bytes32 => uint256[]) internal timesToExpiryForProduct;\r\n\r\n    /// @dev mapping to store option upper bound value at specific time to expiry for a given product (1e27)\r\n    mapping(bytes32 => mapping(uint256 => uint256)) internal maxPriceAtTimeToExpiry;\r\n\r\n    /// @dev mapping to store shock value for spot price of a given product (1e27)\r\n    mapping(bytes32 => uint256) internal spotShock;\r\n\r\n    /// @dev oracle module\r\n    OracleInterface public oracle;\r\n\r\n    /// @notice emits an event when collateral dust is updated\r\n    event CollateralDustUpdated(address indexed collateral, uint256 dust);\r\n    /// @notice emits an event when new time to expiry is added for a specific product\r\n    event TimeToExpiryAdded(bytes32 indexed productHash, uint256 timeToExpiry);\r\n    /// @notice emits an event when new upper bound value is added for a specific time to expiry timestamp\r\n    event MaxPriceAdded(bytes32 indexed productHash, uint256 timeToExpiry, uint256 value);\r\n    /// @notice emits an event when updating upper bound value at specific expiry timestamp\r\n    event MaxPriceUpdated(bytes32 indexed productHash, uint256 timeToExpiry, uint256 oldValue, uint256 newValue);\r\n    /// @notice emits an event when spot shock value is updated for a specific product\r\n    event SpotShockUpdated(bytes32 indexed product, uint256 spotShock);\r\n    /// @notice emits an event when oracle deviation value is updated\r\n    event OracleDeviationUpdated(uint256 oracleDeviation);\r\n\r\n    /**\r\n     * @notice constructor\r\n     * @param _oracle oracle module address\r\n     */\r\n    constructor(address _oracle) public {\r\n        require(_oracle != address(0), \"MarginCalculator: invalid oracle address\");\r\n\r\n        oracle = OracleInterface(_oracle);\r\n    }\r\n\r\n    /**\r\n     * @notice set dust amount for collateral asset\r\n     * @dev can only be called by owner\r\n     * @param _collateral collateral asset address\r\n     * @param _dust dust amount, should be scaled by collateral asset decimals\r\n     */\r\n    function setCollateralDust(address _collateral, uint256 _dust) external onlyOwner {\r\n        require(_dust > 0, \"MarginCalculator: dust amount should be greater than zero\");\r\n\r\n        dust[_collateral] = _dust;\r\n\r\n        emit CollateralDustUpdated(_collateral, _dust);\r\n    }\r\n\r\n    /**\r\n     * @notice set product upper bound values\r\n     * @dev can only be called by owner\r\n     * @param _underlying otoken underlying asset\r\n     * @param _strike otoken strike asset\r\n     * @param _collateral otoken collateral asset\r\n     * @param _isPut otoken type\r\n     * @param _timesToExpiry array of times to expiry timestamp\r\n     * @param _values upper bound values array\r\n     */\r\n    function setUpperBoundValues(\r\n        address _underlying,\r\n        address _strike,\r\n        address _collateral,\r\n        bool _isPut,\r\n        uint256[] calldata _timesToExpiry,\r\n        uint256[] calldata _values\r\n    ) external onlyOwner {\r\n        require(_timesToExpiry.length > 0, \"MarginCalculator: invalid times to expiry array\");\r\n        require(_timesToExpiry.length == _values.length, \"MarginCalculator: invalid values array\");\r\n\r\n        // get product hash\r\n        bytes32 productHash = _getProductHash(_underlying, _strike, _collateral, _isPut);\r\n\r\n        uint256[] storage expiryArray = timesToExpiryForProduct[productHash];\r\n\r\n        // check that this is the first expiry to set\r\n        // if not, the last expiry should be less than the new one to insert (to make sure the array stay in order)\r\n        require(\r\n            (expiryArray.length == 0) || (_timesToExpiry[0] > expiryArray[expiryArray.length.sub(1)]),\r\n            \"MarginCalculator: expiry array is not in order\"\r\n        );\r\n\r\n        for (uint256 i = 0; i < _timesToExpiry.length; i++) {\r\n            // check that new times array is in order\r\n            if (i.add(1) < _timesToExpiry.length) {\r\n                require(_timesToExpiry[i] < _timesToExpiry[i.add(1)], \"MarginCalculator: time should be in order\");\r\n            }\r\n\r\n            require(_values[i] > 0, \"MarginCalculator: no expiry upper bound value found\");\r\n\r\n            // add new upper bound value for this product at specific time to expiry\r\n            maxPriceAtTimeToExpiry[productHash][_timesToExpiry[i]] = _values[i];\r\n\r\n            // add new time to expiry to array\r\n            expiryArray.push(_timesToExpiry[i]);\r\n\r\n            emit TimeToExpiryAdded(productHash, _timesToExpiry[i]);\r\n            emit MaxPriceAdded(productHash, _timesToExpiry[i], _values[i]);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @notice set option upper bound value for specific time to expiry (1e27)\r\n     * @dev can only be called by owner\r\n     * @param _underlying otoken underlying asset\r\n     * @param _strike otoken strike asset\r\n     * @param _collateral otoken collateral asset\r\n     * @param _isPut otoken type\r\n     * @param _timeToExpiry option time to expiry timestamp\r\n     * @param _value upper bound value\r\n     */\r\n    function updateUpperBoundValue(\r\n        address _underlying,\r\n        address _strike,\r\n        address _collateral,\r\n        bool _isPut,\r\n        uint256 _timeToExpiry,\r\n        uint256 _value\r\n    ) external onlyOwner {\r\n        require(_value > 0, \"MarginCalculator: invalid option upper bound value\");\r\n\r\n        bytes32 productHash = _getProductHash(_underlying, _strike, _collateral, _isPut);\r\n        uint256 oldMaxPrice = maxPriceAtTimeToExpiry[productHash][_timeToExpiry];\r\n\r\n        require(oldMaxPrice != 0, \"MarginCalculator: upper bound value not found\");\r\n\r\n        // update upper bound value for the time to expiry\r\n        maxPriceAtTimeToExpiry[productHash][_timeToExpiry] = _value;\r\n\r\n        emit MaxPriceUpdated(productHash, _timeToExpiry, oldMaxPrice, _value);\r\n    }\r\n\r\n    /**\r\n     * @notice set spot shock value, scaled to 1e27\r\n     * @dev can only be called by owner\r\n     * @param _underlying otoken underlying asset\r\n     * @param _strike otoken strike asset\r\n     * @param _collateral otoken collateral asset\r\n     * @param _isPut otoken type\r\n     * @param _shockValue spot shock value\r\n     */\r\n    function setSpotShock(\r\n        address _underlying,\r\n        address _strike,\r\n        address _collateral,\r\n        bool _isPut,\r\n        uint256 _shockValue\r\n    ) external onlyOwner {\r\n        require(_shockValue > 0, \"MarginCalculator: invalid spot shock value\");\r\n\r\n        bytes32 productHash = _getProductHash(_underlying, _strike, _collateral, _isPut);\r\n\r\n        spotShock[productHash] = _shockValue;\r\n\r\n        emit SpotShockUpdated(productHash, _shockValue);\r\n    }\r\n\r\n    /**\r\n     * @notice set oracle deviation (1e27)\r\n     * @dev can only be called by owner\r\n     * @param _deviation deviation value\r\n     */\r\n    function setOracleDeviation(uint256 _deviation) external onlyOwner {\r\n        oracleDeviation = _deviation;\r\n\r\n        emit OracleDeviationUpdated(_deviation);\r\n    }\r\n\r\n    /**\r\n     * @notice get dust amount for collateral asset\r\n     * @param _collateral collateral asset address\r\n     * @return dust amount\r\n     */\r\n    function getCollateralDust(address _collateral) external view returns (uint256) {\r\n        return dust[_collateral];\r\n    }\r\n\r\n    /**\r\n     * @notice get times to expiry for a specific product\r\n     * @param _underlying otoken underlying asset\r\n     * @param _strike otoken strike asset\r\n     * @param _collateral otoken collateral asset\r\n     * @param _isPut otoken type\r\n     * @return array of times to expiry\r\n     */\r\n    function getTimesToExpiry(\r\n        address _underlying,\r\n        address _strike,\r\n        address _collateral,\r\n        bool _isPut\r\n    ) external view returns (uint256[] memory) {\r\n        bytes32 productHash = _getProductHash(_underlying, _strike, _collateral, _isPut);\r\n        return timesToExpiryForProduct[productHash];\r\n    }\r\n\r\n    /**\r\n     * @notice get option upper bound value for specific time to expiry\r\n     * @param _underlying otoken underlying asset\r\n     * @param _strike otoken strike asset\r\n     * @param _collateral otoken collateral asset\r\n     * @param _isPut otoken type\r\n     * @param _timeToExpiry option time to expiry timestamp\r\n     * @return option upper bound value (1e27)\r\n     */\r\n    function getMaxPrice(\r\n        address _underlying,\r\n        address _strike,\r\n        address _collateral,\r\n        bool _isPut,\r\n        uint256 _timeToExpiry\r\n    ) external view returns (uint256) {\r\n        bytes32 productHash = _getProductHash(_underlying, _strike, _collateral, _isPut);\r\n\r\n        return maxPriceAtTimeToExpiry[productHash][_timeToExpiry];\r\n    }\r\n\r\n    /**\r\n     * @notice get spot shock value\r\n     * @param _underlying otoken underlying asset\r\n     * @param _strike otoken strike asset\r\n     * @param _collateral otoken collateral asset\r\n     * @param _isPut otoken type\r\n     * @return _shockValue spot shock value (1e27)\r\n     */\r\n    function getSpotShock(\r\n        address _underlying,\r\n        address _strike,\r\n        address _collateral,\r\n        bool _isPut\r\n    ) external view returns (uint256) {\r\n        bytes32 productHash = _getProductHash(_underlying, _strike, _collateral, _isPut);\r\n\r\n        return spotShock[productHash];\r\n    }\r\n\r\n    /**\r\n     * @notice get oracle deviation\r\n     * @return oracle deviation value (1e27)\r\n     */\r\n    function getOracleDeviation() external view returns (uint256) {\r\n        return oracleDeviation;\r\n    }\r\n\r\n    /**\r\n     * @notice return the collateral required for naked margin vault, in collateral asset decimals\r\n     * @dev _shortAmount, _strikePrice and _underlyingPrice should be scaled by 1e8\r\n     * @param _underlying underlying asset address\r\n     * @param _strike strike asset address\r\n     * @param _collateral collateral asset address\r\n     * @param _shortAmount amount of short otoken\r\n     * @param  _strikePrice otoken strike price\r\n     * @param _underlyingPrice otoken underlying price\r\n     * @param _shortExpiryTimestamp otoken expiry timestamp\r\n     * @param _collateralDecimals otoken collateral asset decimals\r\n     * @param _isPut otoken type\r\n     * @return collateral required for a naked margin vault, in collateral asset decimals\r\n     */\r\n    function getNakedMarginRequired(\r\n        address _underlying,\r\n        address _strike,\r\n        address _collateral,\r\n        uint256 _shortAmount,\r\n        uint256 _strikePrice,\r\n        uint256 _underlyingPrice,\r\n        uint256 _shortExpiryTimestamp,\r\n        uint256 _collateralDecimals,\r\n        bool _isPut\r\n    ) external view returns (uint256) {\r\n        bytes32 productHash = _getProductHash(_underlying, _strike, _collateral, _isPut);\r\n\r\n        // scale short amount from 1e8 to 1e27 (oToken is always in 1e8)\r\n        FPI.FixedPointInt memory shortAmount = FPI.fromScaledUint(_shortAmount, BASE);\r\n        // scale short strike from 1e8 to 1e27\r\n        FPI.FixedPointInt memory shortStrike = FPI.fromScaledUint(_strikePrice, BASE);\r\n        // scale short underlying price from 1e8 to 1e27\r\n        FPI.FixedPointInt memory shortUnderlyingPrice = FPI.fromScaledUint(_underlyingPrice, BASE);\r\n\r\n        // return required margin, scaled by collateral asset decimals, explicitly rounded up\r\n        return\r\n            FPI.toScaledUint(\r\n                _getNakedMarginRequired(\r\n                    productHash,\r\n                    shortAmount,\r\n                    shortUnderlyingPrice,\r\n                    shortStrike,\r\n                    _shortExpiryTimestamp,\r\n                    _isPut\r\n                ),\r\n                _collateralDecimals,\r\n                false\r\n            );\r\n    }\r\n\r\n    /**\r\n     * @notice return the cash value of an expired oToken, denominated in collateral\r\n     * @param _otoken oToken address\r\n     * @return how much collateral can be taken out by 1 otoken unit, scaled by 1e8,\r\n     * or how much collateral can be taken out for 1 (1e8) oToken\r\n     */\r\n    function getExpiredPayoutRate(address _otoken) external view returns (uint256) {\r\n        require(_otoken != address(0), \"MarginCalculator: Invalid token address\");\r\n\r\n        (\r\n            address collateral,\r\n            address underlying,\r\n            address strikeAsset,\r\n            uint256 strikePrice,\r\n            uint256 expiry,\r\n            bool isPut\r\n        ) = _getOtokenDetails(_otoken);\r\n\r\n        require(now >= expiry, \"MarginCalculator: Otoken not expired yet\");\r\n\r\n        FPI.FixedPointInt memory cashValueInStrike = _getExpiredCashValue(\r\n            underlying,\r\n            strikeAsset,\r\n            expiry,\r\n            strikePrice,\r\n            isPut\r\n        );\r\n\r\n        FPI.FixedPointInt memory cashValueInCollateral = _convertAmountOnExpiryPrice(\r\n            cashValueInStrike,\r\n            strikeAsset,\r\n            collateral,\r\n            expiry\r\n        );\r\n\r\n        // the exchangeRate was scaled by 1e8, if 1e8 otoken can take out 1 USDC, the exchangeRate is currently 1e8\r\n        // we want to return: how much USDC units can be taken out by 1 (1e8 units) oToken\r\n        uint256 collateralDecimals = uint256(ERC20Interface(collateral).decimals());\r\n        return cashValueInCollateral.toScaledUint(collateralDecimals, true);\r\n    }\r\n\r\n    // structs to avoid stack too deep error\r\n    // struct to store shortAmount, shortStrike and shortUnderlyingPrice scaled to 1e27\r\n    struct ShortScaledDetails {\r\n        FPI.FixedPointInt shortAmount;\r\n        FPI.FixedPointInt shortStrike;\r\n        FPI.FixedPointInt shortUnderlyingPrice;\r\n    }\r\n\r\n    /**\r\n     * @notice check if a specific vault is undercollateralized at a specific chainlink round\r\n     * @dev if the vault is of type 0, the function will revert\r\n     * @param _vault vault struct\r\n     * @param _vaultType vault type (0 for max loss/spread and 1 for naked margin vault)\r\n     * @param _vaultLatestUpdate vault latest update (timestamp when latest vault state change happened)\r\n     * @param _roundId chainlink round id\r\n     * @return isLiquidatable, true if vault is undercollateralized, liquidation price and collateral dust amount\r\n     */\r\n    function isLiquidatable(\r\n        MarginVault.Vault memory _vault,\r\n        uint256 _vaultType,\r\n        uint256 _vaultLatestUpdate,\r\n        uint256 _roundId\r\n    )\r\n        external\r\n        view\r\n        returns (\r\n            bool,\r\n            uint256,\r\n            uint256\r\n        )\r\n    {\r\n        // liquidation is only supported for naked margin vault\r\n        require(_vaultType == 1, \"MarginCalculator: invalid vault type to liquidate\");\r\n\r\n        VaultDetails memory vaultDetails = _getVaultDetails(_vault, _vaultType);\r\n\r\n        // can not liquidate vault that have no short position\r\n        if (!vaultDetails.hasShort) return (false, 0, 0);\r\n\r\n        require(now < vaultDetails.shortExpiryTimestamp, \"MarginCalculator: can not liquidate expired position\");\r\n\r\n        (uint256 price, uint256 timestamp) = oracle.getChainlinkRoundData(\r\n            vaultDetails.shortUnderlyingAsset,\r\n            uint80(_roundId)\r\n        );\r\n\r\n        // check that price timestamp is after latest timestamp the vault was updated at\r\n        require(\r\n            timestamp > _vaultLatestUpdate,\r\n            \"MarginCalculator: auction timestamp should be post vault latest update\"\r\n        );\r\n\r\n        // another struct to store some useful short otoken details, to avoid stack to deep error\r\n        ShortScaledDetails memory shortDetails = ShortScaledDetails({\r\n            shortAmount: FPI.fromScaledUint(_vault.shortAmounts[0], BASE),\r\n            shortStrike: FPI.fromScaledUint(vaultDetails.shortStrikePrice, BASE),\r\n            shortUnderlyingPrice: FPI.fromScaledUint(price, BASE)\r\n        });\r\n\r\n        bytes32 productHash = _getProductHash(\r\n            vaultDetails.shortUnderlyingAsset,\r\n            vaultDetails.shortStrikeAsset,\r\n            vaultDetails.shortCollateralAsset,\r\n            vaultDetails.isShortPut\r\n        );\r\n\r\n        // convert vault collateral to a fixed point (1e27) from collateral decimals\r\n        FPI.FixedPointInt memory depositedCollateral = FPI.fromScaledUint(\r\n            _vault.collateralAmounts[0],\r\n            vaultDetails.collateralDecimals\r\n        );\r\n\r\n        FPI.FixedPointInt memory collateralRequired = _getNakedMarginRequired(\r\n            productHash,\r\n            shortDetails.shortAmount,\r\n            shortDetails.shortUnderlyingPrice,\r\n            shortDetails.shortStrike,\r\n            vaultDetails.shortExpiryTimestamp,\r\n            vaultDetails.isShortPut\r\n        );\r\n\r\n        // if collateral required <= collateral in the vault, the vault is not liquidatable\r\n        if (collateralRequired.isLessThanOrEqual(depositedCollateral)) {\r\n            return (false, 0, 0);\r\n        }\r\n\r\n        FPI.FixedPointInt memory cashValue = _getCashValue(\r\n            shortDetails.shortStrike,\r\n            shortDetails.shortUnderlyingPrice,\r\n            vaultDetails.isShortPut\r\n        );\r\n\r\n        // get the amount of collateral per 1 repaid otoken\r\n        uint256 debtPrice = _getDebtPrice(\r\n            depositedCollateral,\r\n            shortDetails.shortAmount,\r\n            cashValue,\r\n            shortDetails.shortUnderlyingPrice,\r\n            timestamp,\r\n            vaultDetails.collateralDecimals,\r\n            vaultDetails.isShortPut\r\n        );\r\n\r\n        return (true, debtPrice, dust[vaultDetails.shortCollateralAsset]);\r\n    }\r\n\r\n    /**\r\n     * @notice calculate required collateral margin for a vault\r\n     * @param _vault theoretical vault that needs to be checked\r\n     * @param _vaultType vault type\r\n     * @return the vault collateral amount, and marginRequired the minimal amount of collateral needed in a vault, scaled to 1e27\r\n     */\r\n    function getMarginRequired(MarginVault.Vault memory _vault, uint256 _vaultType)\r\n        external\r\n        view\r\n        returns (FPI.FixedPointInt memory, FPI.FixedPointInt memory)\r\n    {\r\n        VaultDetails memory vaultDetail = _getVaultDetails(_vault, _vaultType);\r\n        return _getMarginRequired(_vault, vaultDetail);\r\n    }\r\n\r\n    /**\r\n     * @notice returns the amount of collateral that can be removed from an actual or a theoretical vault\r\n     * @dev return amount is denominated in the collateral asset for the oToken in the vault, or the collateral asset in the vault\r\n     * @param _vault theoretical vault that needs to be checked\r\n     * @param _vaultType vault type (0 for spread/max loss, 1 for naked margin)\r\n     * @return excessCollateral the amount by which the margin is above or below the required amount\r\n     * @return isExcess True if there is excess margin in the vault, False if there is a deficit of margin in the vault\r\n     * if True, collateral can be taken out from the vault, if False, additional collateral needs to be added to vault\r\n     */\r\n    function getExcessCollateral(MarginVault.Vault memory _vault, uint256 _vaultType)\r\n        public\r\n        view\r\n        returns (uint256, bool)\r\n    {\r\n        VaultDetails memory vaultDetails = _getVaultDetails(_vault, _vaultType);\r\n\r\n        // include all the checks for to ensure the vault is valid\r\n        _checkIsValidVault(_vault, vaultDetails);\r\n\r\n        // if the vault contains no oTokens, return the amount of collateral\r\n        if (!vaultDetails.hasShort && !vaultDetails.hasLong) {\r\n            uint256 amount = vaultDetails.hasCollateral ? _vault.collateralAmounts[0] : 0;\r\n            return (amount, true);\r\n        }\r\n\r\n        // get required margin, denominated in collateral, scaled in 1e27\r\n        (FPI.FixedPointInt memory collateralAmount, FPI.FixedPointInt memory collateralRequired) = _getMarginRequired(\r\n            _vault,\r\n            vaultDetails\r\n        );\r\n        FPI.FixedPointInt memory excessCollateral = collateralAmount.sub(collateralRequired);\r\n\r\n        bool isExcess = excessCollateral.isGreaterThanOrEqual(ZERO);\r\n        uint256 collateralDecimals = vaultDetails.hasLong\r\n            ? vaultDetails.longCollateralDecimals\r\n            : vaultDetails.shortCollateralDecimals;\r\n        // if is excess, truncate the tailing digits in excessCollateralExternal calculation\r\n        uint256 excessCollateralExternal = excessCollateral.toScaledUint(collateralDecimals, isExcess);\r\n        return (excessCollateralExternal, isExcess);\r\n    }\r\n\r\n    /**\r\n     * @notice return the cash value of an expired oToken, denominated in strike asset\r\n     * @dev for a call, return Max (0, underlyingPriceInStrike - otoken.strikePrice)\r\n     * @dev for a put, return Max(0, otoken.strikePrice - underlyingPriceInStrike)\r\n     * @param _underlying otoken underlying asset\r\n     * @param _strike otoken strike asset\r\n     * @param _expiryTimestamp otoken expiry timestamp\r\n     * @param _strikePrice otoken strike price\r\n     * @param _strikePrice true if otoken is put otherwise false\r\n     * @return cash value of an expired otoken, denominated in the strike asset\r\n     */\r\n    function _getExpiredCashValue(\r\n        address _underlying,\r\n        address _strike,\r\n        uint256 _expiryTimestamp,\r\n        uint256 _strikePrice,\r\n        bool _isPut\r\n    ) internal view returns (FPI.FixedPointInt memory) {\r\n        // strike price is denominated in strike asset\r\n        FPI.FixedPointInt memory strikePrice = FPI.fromScaledUint(_strikePrice, BASE);\r\n        FPI.FixedPointInt memory one = FPI.fromScaledUint(1, 0);\r\n\r\n        // calculate the value of the underlying asset in terms of the strike asset\r\n        FPI.FixedPointInt memory underlyingPriceInStrike = _convertAmountOnExpiryPrice(\r\n            one, // underlying price is 1 (1e27) in term of underlying\r\n            _underlying,\r\n            _strike,\r\n            _expiryTimestamp\r\n        );\r\n\r\n        return _getCashValue(strikePrice, underlyingPriceInStrike, _isPut);\r\n    }\r\n\r\n    /// @dev added this struct to avoid stack-too-deep error\r\n    struct OtokenDetails {\r\n        address otokenUnderlyingAsset;\r\n        address otokenCollateralAsset;\r\n        address otokenStrikeAsset;\r\n        uint256 otokenExpiry;\r\n        bool isPut;\r\n    }\r\n\r\n    /**\r\n     * @notice calculate the amount of collateral needed for a vault\r\n     * @dev vault passed in has already passed the checkIsValidVault function\r\n     * @param _vault theoretical vault that needs to be checked\r\n     * @return the vault collateral amount, and marginRequired the minimal amount of collateral needed in a vault,\r\n     * scaled to 1e27\r\n     */\r\n    function _getMarginRequired(MarginVault.Vault memory _vault, VaultDetails memory _vaultDetails)\r\n        internal\r\n        view\r\n        returns (FPI.FixedPointInt memory, FPI.FixedPointInt memory)\r\n    {\r\n        FPI.FixedPointInt memory shortAmount = _vaultDetails.hasShort\r\n            ? FPI.fromScaledUint(_vault.shortAmounts[0], BASE)\r\n            : ZERO;\r\n        FPI.FixedPointInt memory longAmount = _vaultDetails.hasLong\r\n            ? FPI.fromScaledUint(_vault.longAmounts[0], BASE)\r\n            : ZERO;\r\n        FPI.FixedPointInt memory collateralAmount = _vaultDetails.hasCollateral\r\n            ? FPI.fromScaledUint(_vault.collateralAmounts[0], _vaultDetails.collateralDecimals)\r\n            : ZERO;\r\n        FPI.FixedPointInt memory shortStrike = _vaultDetails.hasShort\r\n            ? FPI.fromScaledUint(_vaultDetails.shortStrikePrice, BASE)\r\n            : ZERO;\r\n\r\n        // struct to avoid stack too deep error\r\n        OtokenDetails memory otokenDetails = OtokenDetails(\r\n            _vaultDetails.hasShort ? _vaultDetails.shortUnderlyingAsset : _vaultDetails.longUnderlyingAsset,\r\n            _vaultDetails.hasShort ? _vaultDetails.shortCollateralAsset : _vaultDetails.longCollateralAsset,\r\n            _vaultDetails.hasShort ? _vaultDetails.shortStrikeAsset : _vaultDetails.longStrikeAsset,\r\n            _vaultDetails.hasShort ? _vaultDetails.shortExpiryTimestamp : _vaultDetails.longExpiryTimestamp,\r\n            _vaultDetails.hasShort ? _vaultDetails.isShortPut : _vaultDetails.isLongPut\r\n        );\r\n\r\n        if (now < otokenDetails.otokenExpiry) {\r\n            // it's not expired, return amount of margin required based on vault type\r\n            if (_vaultDetails.vaultType == 1) {\r\n                // this is a naked margin vault\r\n                // fetch dust amount for otoken collateral asset as FixedPointInt, assuming dust is already scaled by collateral decimals\r\n                FPI.FixedPointInt memory dustAmount = FPI.fromScaledUint(\r\n                    dust[_vaultDetails.shortCollateralAsset],\r\n                    _vaultDetails.collateralDecimals\r\n                );\r\n\r\n                // check that collateral deposited in naked margin vault is greater than dust amount for that particular collateral asset\r\n                if (collateralAmount.isGreaterThan(ZERO)) {\r\n                    require(\r\n                        collateralAmount.isGreaterThan(dustAmount),\r\n                        \"MarginCalculator: naked margin vault should have collateral amount greater than dust amount\"\r\n                    );\r\n                }\r\n\r\n                // get underlying asset price for short option\r\n                FPI.FixedPointInt memory shortUnderlyingPrice = FPI.fromScaledUint(\r\n                    oracle.getPrice(_vaultDetails.shortUnderlyingAsset),\r\n                    BASE\r\n                );\r\n\r\n                // encode product hash\r\n                bytes32 productHash = _getProductHash(\r\n                    _vaultDetails.shortUnderlyingAsset,\r\n                    _vaultDetails.shortStrikeAsset,\r\n                    _vaultDetails.shortCollateralAsset,\r\n                    _vaultDetails.isShortPut\r\n                );\r\n\r\n                // return amount of collateral in vault and needed collateral amount for margin\r\n                return (\r\n                    collateralAmount,\r\n                    _getNakedMarginRequired(\r\n                        productHash,\r\n                        shortAmount,\r\n                        shortUnderlyingPrice,\r\n                        shortStrike,\r\n                        otokenDetails.otokenExpiry,\r\n                        otokenDetails.isPut\r\n                    )\r\n                );\r\n            } else {\r\n                // this is a fully collateralized vault\r\n                FPI.FixedPointInt memory longStrike = _vaultDetails.hasLong\r\n                    ? FPI.fromScaledUint(_vaultDetails.longStrikePrice, BASE)\r\n                    : ZERO;\r\n\r\n                if (otokenDetails.isPut) {\r\n                    FPI.FixedPointInt memory strikeNeeded = _getPutSpreadMarginRequired(\r\n                        shortAmount,\r\n                        longAmount,\r\n                        shortStrike,\r\n                        longStrike\r\n                    );\r\n                    // convert amount to be denominated in collateral\r\n                    return (\r\n                        collateralAmount,\r\n                        _convertAmountOnLivePrice(\r\n                            strikeNeeded,\r\n                            otokenDetails.otokenStrikeAsset,\r\n                            otokenDetails.otokenCollateralAsset\r\n                        )\r\n                    );\r\n                } else {\r\n                    FPI.FixedPointInt memory underlyingNeeded = _getCallSpreadMarginRequired(\r\n                        shortAmount,\r\n                        longAmount,\r\n                        shortStrike,\r\n                        longStrike\r\n                    );\r\n                    // convert amount to be denominated in collateral\r\n                    return (\r\n                        collateralAmount,\r\n                        _convertAmountOnLivePrice(\r\n                            underlyingNeeded,\r\n                            otokenDetails.otokenUnderlyingAsset,\r\n                            otokenDetails.otokenCollateralAsset\r\n                        )\r\n                    );\r\n                }\r\n            }\r\n        } else {\r\n            // the vault has expired. calculate the cash value of all the minted short options\r\n            FPI.FixedPointInt memory shortCashValue = _vaultDetails.hasShort\r\n                ? _getExpiredCashValue(\r\n                    _vaultDetails.shortUnderlyingAsset,\r\n                    _vaultDetails.shortStrikeAsset,\r\n                    _vaultDetails.shortExpiryTimestamp,\r\n                    _vaultDetails.shortStrikePrice,\r\n                    otokenDetails.isPut\r\n                )\r\n                : ZERO;\r\n            FPI.FixedPointInt memory longCashValue = _vaultDetails.hasLong\r\n                ? _getExpiredCashValue(\r\n                    _vaultDetails.longUnderlyingAsset,\r\n                    _vaultDetails.longStrikeAsset,\r\n                    _vaultDetails.longExpiryTimestamp,\r\n                    _vaultDetails.longStrikePrice,\r\n                    otokenDetails.isPut\r\n                )\r\n                : ZERO;\r\n\r\n            FPI.FixedPointInt memory valueInStrike = _getExpiredSpreadCashValue(\r\n                shortAmount,\r\n                longAmount,\r\n                shortCashValue,\r\n                longCashValue\r\n            );\r\n\r\n            // convert amount to be denominated in collateral\r\n            return (\r\n                collateralAmount,\r\n                _convertAmountOnExpiryPrice(\r\n                    valueInStrike,\r\n                    otokenDetails.otokenStrikeAsset,\r\n                    otokenDetails.otokenCollateralAsset,\r\n                    otokenDetails.otokenExpiry\r\n                )\r\n            );\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @notice get required collateral for naked margin position\r\n     * if put:\r\n     * a = min(strike price, spot shock * underlying price)\r\n     * b = max(strike price - spot shock * underlying price, 0)\r\n     * marginRequired = ( option upper bound value * a + b) * short amount\r\n     * if call:\r\n     * a = min(1, strike price / (underlying price / spot shock value))\r\n     * b = max(1- (strike price / (underlying price / spot shock value)), 0)\r\n     * marginRequired = (option upper bound value * a + b) * short amount\r\n     * @param _productHash product hash\r\n     * @param _shortAmount short amount in vault, in FixedPointInt type\r\n     * @param _strikePrice strike price of short otoken, in FixedPointInt type\r\n     * @param _underlyingPrice underlying price of short otoken underlying asset, in FixedPointInt type\r\n     * @param _shortExpiryTimestamp short otoken expiry timestamp\r\n     * @param _isPut otoken type, true if put option, false for call option\r\n     * @return required margin for this naked vault, in FixedPointInt type (scaled by 1e27)\r\n     */\r\n    function _getNakedMarginRequired(\r\n        bytes32 _productHash,\r\n        FPI.FixedPointInt memory _shortAmount,\r\n        FPI.FixedPointInt memory _underlyingPrice,\r\n        FPI.FixedPointInt memory _strikePrice,\r\n        uint256 _shortExpiryTimestamp,\r\n        bool _isPut\r\n    ) internal view returns (FPI.FixedPointInt memory) {\r\n        // find option upper bound value\r\n        FPI.FixedPointInt memory optionUpperBoundValue = _findUpperBoundValue(_productHash, _shortExpiryTimestamp);\r\n        // convert spot shock value of this product to FixedPointInt (already scaled by 1e27)\r\n        FPI.FixedPointInt memory spotShockValue = FPI.FixedPointInt(int256(spotShock[_productHash]));\r\n\r\n        FPI.FixedPointInt memory a;\r\n        FPI.FixedPointInt memory b;\r\n        FPI.FixedPointInt memory marginRequired;\r\n\r\n        if (_isPut) {\r\n            a = FPI.min(_strikePrice, spotShockValue.mul(_underlyingPrice));\r\n            b = FPI.max(_strikePrice.sub(spotShockValue.mul(_underlyingPrice)), ZERO);\r\n            marginRequired = optionUpperBoundValue.mul(a).add(b).mul(_shortAmount);\r\n        } else {\r\n            FPI.FixedPointInt memory one = FPI.fromScaledUint(1e27, SCALING_FACTOR);\r\n            a = FPI.min(one, _strikePrice.mul(spotShockValue).div(_underlyingPrice));\r\n            b = FPI.max(one.sub(_strikePrice.mul(spotShockValue).div(_underlyingPrice)), ZERO);\r\n            marginRequired = optionUpperBoundValue.mul(a).add(b).mul(_shortAmount);\r\n        }\r\n\r\n        return marginRequired;\r\n    }\r\n\r\n    /**\r\n     * @notice find upper bound value for product by specific expiry timestamp\r\n     * @dev should return the upper bound value that correspond to option time to expiry, of if not found should return the next greater one, revert if no value found\r\n     * @param _productHash product hash\r\n     * @param _expiryTimestamp expiry timestamp\r\n     * @return option upper bound value\r\n     */\r\n    function _findUpperBoundValue(bytes32 _productHash, uint256 _expiryTimestamp)\r\n        internal\r\n        view\r\n        returns (FPI.FixedPointInt memory)\r\n    {\r\n        // get time to expiry array of this product hash\r\n        uint256[] memory timesToExpiry = timesToExpiryForProduct[_productHash];\r\n\r\n        // check that this product have upper bound values stored\r\n        require(timesToExpiry.length != 0, \"MarginCalculator: product have no expiry values\");\r\n\r\n        uint256 optionTimeToExpiry = _expiryTimestamp.sub(now);\r\n\r\n        // check that the option time to expiry is in the expiry array\r\n        require(\r\n            timesToExpiry[timesToExpiry.length.sub(1)] >= optionTimeToExpiry,\r\n            \"MarginCalculator: product have no upper bound value\"\r\n        );\r\n\r\n        // loop through the array and return the upper bound value in FixedPointInt type (already scaled by 1e27)\r\n        for (uint8 i = 0; i < timesToExpiry.length; i++) {\r\n            if (timesToExpiry[i] >= optionTimeToExpiry)\r\n                return FPI.fromScaledUint(maxPriceAtTimeToExpiry[_productHash][timesToExpiry[i]], SCALING_FACTOR);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev returns the strike asset amount of margin required for a put or put spread with the given short oTokens, long oTokens and amounts\r\n     *\r\n     * marginRequired = max( (short amount * short strike) - (long strike * min (short amount, long amount)) , 0 )\r\n     *\r\n     * @return margin requirement denominated in the strike asset\r\n     */\r\n    function _getPutSpreadMarginRequired(\r\n        FPI.FixedPointInt memory _shortAmount,\r\n        FPI.FixedPointInt memory _longAmount,\r\n        FPI.FixedPointInt memory _shortStrike,\r\n        FPI.FixedPointInt memory _longStrike\r\n    ) internal view returns (FPI.FixedPointInt memory) {\r\n        return FPI.max(_shortAmount.mul(_shortStrike).sub(_longStrike.mul(FPI.min(_shortAmount, _longAmount))), ZERO);\r\n    }\r\n\r\n    /**\r\n     * @dev returns the underlying asset amount required for a call or call spread with the given short oTokens, long oTokens, and amounts\r\n     *\r\n     *                           (long strike - short strike) * short amount\r\n     * marginRequired =  max( ------------------------------------------------- , max (short amount - long amount, 0) )\r\n     *                                           long strike\r\n     *\r\n     * @dev if long strike = 0, return max( short amount - long amount, 0)\r\n     * @return margin requirement denominated in the underlying asset\r\n     */\r\n    function _getCallSpreadMarginRequired(\r\n        FPI.FixedPointInt memory _shortAmount,\r\n        FPI.FixedPointInt memory _longAmount,\r\n        FPI.FixedPointInt memory _shortStrike,\r\n        FPI.FixedPointInt memory _longStrike\r\n    ) internal view returns (FPI.FixedPointInt memory) {\r\n        // max (short amount - long amount , 0)\r\n        if (_longStrike.isEqual(ZERO)) {\r\n            return FPI.max(_shortAmount.sub(_longAmount), ZERO);\r\n        }\r\n\r\n        /**\r\n         *             (long strike - short strike) * short amount\r\n         * calculate  ----------------------------------------------\r\n         *                             long strike\r\n         */\r\n        FPI.FixedPointInt memory firstPart = _longStrike.sub(_shortStrike).mul(_shortAmount).div(_longStrike);\r\n\r\n        /**\r\n         * calculate max ( short amount - long amount , 0)\r\n         */\r\n        FPI.FixedPointInt memory secondPart = FPI.max(_shortAmount.sub(_longAmount), ZERO);\r\n\r\n        return FPI.max(firstPart, secondPart);\r\n    }\r\n\r\n    /**\r\n     * @notice convert an amount in asset A to equivalent amount of asset B, based on a live price\r\n     * @dev function includes the amount and applies .mul() first to increase the accuracy\r\n     * @param _amount amount in asset A\r\n     * @param _assetA asset A\r\n     * @param _assetB asset B\r\n     * @return _amount in asset B\r\n     */\r\n    function _convertAmountOnLivePrice(\r\n        FPI.FixedPointInt memory _amount,\r\n        address _assetA,\r\n        address _assetB\r\n    ) internal view returns (FPI.FixedPointInt memory) {\r\n        if (_assetA == _assetB) {\r\n            return _amount;\r\n        }\r\n        uint256 priceA = oracle.getPrice(_assetA);\r\n        uint256 priceB = oracle.getPrice(_assetB);\r\n        // amount A * price A in USD = amount B * price B in USD\r\n        // amount B = amount A * price A / price B\r\n        return _amount.mul(FPI.fromScaledUint(priceA, BASE)).div(FPI.fromScaledUint(priceB, BASE));\r\n    }\r\n\r\n    /**\r\n     * @notice convert an amount in asset A to equivalent amount of asset B, based on an expiry price\r\n     * @dev function includes the amount and apply .mul() first to increase the accuracy\r\n     * @param _amount amount in asset A\r\n     * @param _assetA asset A\r\n     * @param _assetB asset B\r\n     * @return _amount in asset B\r\n     */\r\n    function _convertAmountOnExpiryPrice(\r\n        FPI.FixedPointInt memory _amount,\r\n        address _assetA,\r\n        address _assetB,\r\n        uint256 _expiry\r\n    ) internal view returns (FPI.FixedPointInt memory) {\r\n        if (_assetA == _assetB) {\r\n            return _amount;\r\n        }\r\n        (uint256 priceA, bool priceAFinalized) = oracle.getExpiryPrice(_assetA, _expiry);\r\n        (uint256 priceB, bool priceBFinalized) = oracle.getExpiryPrice(_assetB, _expiry);\r\n        require(priceAFinalized && priceBFinalized, \"MarginCalculator: price at expiry not finalized yet\");\r\n        // amount A * price A in USD = amount B * price B in USD\r\n        // amount B = amount A * price A / price B\r\n        return _amount.mul(FPI.fromScaledUint(priceA, BASE)).div(FPI.fromScaledUint(priceB, BASE));\r\n    }\r\n\r\n    /**\r\n     * @notice return debt price, how much collateral asset per 1 otoken repaid in collateral decimal\r\n     * ending price = vault collateral / vault debt\r\n     * if auction ended, return ending price\r\n     * else calculate starting price\r\n     * for put option:\r\n     * starting price = max(cash value - underlying price * oracle deviation, 0)\r\n     * for call option:\r\n     *                      max(cash value - underlying price * oracle deviation, 0)\r\n     * starting price =  ---------------------------------------------------------------\r\n     *                                          underlying price\r\n     *\r\n     *\r\n     *                  starting price + (ending price - starting price) * auction elapsed time\r\n     * then price = --------------------------------------------------------------------------\r\n     *                                      auction time\r\n     *\r\n     *\r\n     * @param _vaultCollateral vault collateral amount\r\n     * @param _vaultDebt vault short amount\r\n     * @param _cashValue option cash value\r\n     * @param _spotPrice option underlying asset price (in USDC)\r\n     * @param _auctionStartingTime auction starting timestamp (_spotPrice timestamp from chainlink)\r\n     * @param _collateralDecimals collateral asset decimals\r\n     * @param _isPut otoken type, true for put, false for call option\r\n     * @return price of 1 debt otoken in collateral asset scaled by collateral decimals\r\n     */\r\n    function _getDebtPrice(\r\n        FPI.FixedPointInt memory _vaultCollateral,\r\n        FPI.FixedPointInt memory _vaultDebt,\r\n        FPI.FixedPointInt memory _cashValue,\r\n        FPI.FixedPointInt memory _spotPrice,\r\n        uint256 _auctionStartingTime,\r\n        uint256 _collateralDecimals,\r\n        bool _isPut\r\n    ) internal view returns (uint256) {\r\n        // price of 1 repaid otoken in collateral asset, scaled to 1e27\r\n        FPI.FixedPointInt memory price;\r\n        // auction ending price\r\n        FPI.FixedPointInt memory endingPrice = _vaultCollateral.div(_vaultDebt);\r\n\r\n        // auction elapsed time\r\n        uint256 auctionElapsedTime = now.sub(_auctionStartingTime);\r\n\r\n        // if auction ended, return ending price\r\n        if (auctionElapsedTime >= AUCTION_TIME) {\r\n            price = endingPrice;\r\n        } else {\r\n            // starting price\r\n            FPI.FixedPointInt memory startingPrice;\r\n\r\n            {\r\n                // store oracle deviation in a FixedPointInt (already scaled by 1e27)\r\n                FPI.FixedPointInt memory fixedOracleDeviation = FPI.fromScaledUint(oracleDeviation, SCALING_FACTOR);\r\n\r\n                if (_isPut) {\r\n                    startingPrice = FPI.max(_cashValue.sub(fixedOracleDeviation.mul(_spotPrice)), ZERO);\r\n                } else {\r\n                    startingPrice = FPI.max(_cashValue.sub(fixedOracleDeviation.mul(_spotPrice)), ZERO).div(_spotPrice);\r\n                }\r\n            }\r\n\r\n            // store auctionElapsedTime in a FixedPointInt scaled by 1e27\r\n            FPI.FixedPointInt memory auctionElapsedTimeFixedPoint = FPI.fromScaledUint(auctionElapsedTime, 18);\r\n            // store AUCTION_TIME in a FixedPointInt (already scaled by 1e27)\r\n            FPI.FixedPointInt memory auctionTime = FPI.fromScaledUint(AUCTION_TIME, 18);\r\n\r\n            // calculate price of 1 repaid otoken, scaled by the collateral decimals, expilictly rounded down\r\n            price = startingPrice.add(\r\n                (endingPrice.sub(startingPrice)).mul(auctionElapsedTimeFixedPoint).div(auctionTime)\r\n            );\r\n\r\n            // cap liquidation price to ending price\r\n            if (price.isGreaterThan(endingPrice)) price = endingPrice;\r\n        }\r\n\r\n        return price.toScaledUint(_collateralDecimals, true);\r\n    }\r\n\r\n    /**\r\n     * @notice get vault details to save us from making multiple external calls\r\n     * @param _vault vault struct\r\n     * @param _vaultType vault type, 0 for max loss/spreads and 1 for naked margin vault\r\n     * @return vault details in VaultDetails struct\r\n     */\r\n    function _getVaultDetails(MarginVault.Vault memory _vault, uint256 _vaultType)\r\n        internal\r\n        view\r\n        returns (VaultDetails memory)\r\n    {\r\n        VaultDetails memory vaultDetails = VaultDetails(\r\n            address(0),\r\n            address(0),\r\n            address(0),\r\n            address(0),\r\n            address(0),\r\n            address(0),\r\n            0,\r\n            0,\r\n            0,\r\n            0,\r\n            0,\r\n            0,\r\n            0,\r\n            0,\r\n            false,\r\n            false,\r\n            false,\r\n            false,\r\n            false\r\n        );\r\n\r\n        // check if vault has long, short otoken and collateral asset\r\n        vaultDetails.hasLong = _isNotEmpty(_vault.longOtokens);\r\n        vaultDetails.hasShort = _isNotEmpty(_vault.shortOtokens);\r\n        vaultDetails.hasCollateral = _isNotEmpty(_vault.collateralAssets);\r\n\r\n        vaultDetails.vaultType = _vaultType;\r\n\r\n        // get vault long otoken if available\r\n        if (vaultDetails.hasLong) {\r\n            OtokenInterface long = OtokenInterface(_vault.longOtokens[0]);\r\n            (\r\n                vaultDetails.longCollateralAsset,\r\n                vaultDetails.longUnderlyingAsset,\r\n                vaultDetails.longStrikeAsset,\r\n                vaultDetails.longStrikePrice,\r\n                vaultDetails.longExpiryTimestamp,\r\n                vaultDetails.isLongPut\r\n            ) = _getOtokenDetails(address(long));\r\n            vaultDetails.longCollateralDecimals = uint256(ERC20Interface(vaultDetails.longCollateralAsset).decimals());\r\n        }\r\n\r\n        // get vault short otoken if available\r\n        if (vaultDetails.hasShort) {\r\n            OtokenInterface short = OtokenInterface(_vault.shortOtokens[0]);\r\n            (\r\n                vaultDetails.shortCollateralAsset,\r\n                vaultDetails.shortUnderlyingAsset,\r\n                vaultDetails.shortStrikeAsset,\r\n                vaultDetails.shortStrikePrice,\r\n                vaultDetails.shortExpiryTimestamp,\r\n                vaultDetails.isShortPut\r\n            ) = _getOtokenDetails(address(short));\r\n            vaultDetails.shortCollateralDecimals = uint256(\r\n                ERC20Interface(vaultDetails.shortCollateralAsset).decimals()\r\n            );\r\n        }\r\n\r\n        if (vaultDetails.hasCollateral) {\r\n            vaultDetails.collateralDecimals = uint256(ERC20Interface(_vault.collateralAssets[0]).decimals());\r\n        }\r\n\r\n        return vaultDetails;\r\n    }\r\n\r\n    /**\r\n     * @dev calculate the cash value obligation for an expired vault, where a positive number is an obligation\r\n     *\r\n     * Formula: net = (short cash value * short amount) - ( long cash value * long Amount )\r\n     *\r\n     * @return cash value obligation denominated in the strike asset\r\n     */\r\n    function _getExpiredSpreadCashValue(\r\n        FPI.FixedPointInt memory _shortAmount,\r\n        FPI.FixedPointInt memory _longAmount,\r\n        FPI.FixedPointInt memory _shortCashValue,\r\n        FPI.FixedPointInt memory _longCashValue\r\n    ) internal pure returns (FPI.FixedPointInt memory) {\r\n        return _shortCashValue.mul(_shortAmount).sub(_longCashValue.mul(_longAmount));\r\n    }\r\n\r\n    /**\r\n     * @dev check if asset array contain a token address\r\n     * @return True if the array is not empty\r\n     */\r\n    function _isNotEmpty(address[] memory _assets) internal pure returns (bool) {\r\n        return _assets.length > 0 && _assets[0] != address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev ensure that:\r\n     * a) at most 1 asset type used as collateral\r\n     * b) at most 1 series of option used as the long option\r\n     * c) at most 1 series of option used as the short option\r\n     * d) asset array lengths match for long, short and collateral\r\n     * e) long option and collateral asset is acceptable for margin with short asset\r\n     * @param _vault the vault to check\r\n     * @param _vaultDetails vault details struct\r\n     */\r\n    function _checkIsValidVault(MarginVault.Vault memory _vault, VaultDetails memory _vaultDetails) internal pure {\r\n        // ensure all the arrays in the vault are valid\r\n        require(_vault.shortOtokens.length <= 1, \"MarginCalculator: Too many short otokens in the vault\");\r\n        require(_vault.longOtokens.length <= 1, \"MarginCalculator: Too many long otokens in the vault\");\r\n        require(_vault.collateralAssets.length <= 1, \"MarginCalculator: Too many collateral assets in the vault\");\r\n\r\n        require(\r\n            _vault.shortOtokens.length == _vault.shortAmounts.length,\r\n            \"MarginCalculator: Short asset and amount mismatch\"\r\n        );\r\n        require(\r\n            _vault.longOtokens.length == _vault.longAmounts.length,\r\n            \"MarginCalculator: Long asset and amount mismatch\"\r\n        );\r\n        require(\r\n            _vault.collateralAssets.length == _vault.collateralAmounts.length,\r\n            \"MarginCalculator: Collateral asset and amount mismatch\"\r\n        );\r\n\r\n        // ensure the long asset is valid for the short asset\r\n        require(\r\n            _isMarginableLong(_vault, _vaultDetails),\r\n            \"MarginCalculator: long asset not marginable for short asset\"\r\n        );\r\n\r\n        // ensure that the collateral asset is valid for the short asset\r\n        require(\r\n            _isMarginableCollateral(_vault, _vaultDetails),\r\n            \"MarginCalculator: collateral asset not marginable for short asset\"\r\n        );\r\n    }\r\n\r\n    /**\r\n     * @dev if there is a short option and a long option in the vault, ensure that the long option is able to be used as collateral for the short option\r\n     * @param _vault the vault to check\r\n     * @param _vaultDetails vault details struct\r\n     * @return true if long is marginable or false if not\r\n     */\r\n    function _isMarginableLong(MarginVault.Vault memory _vault, VaultDetails memory _vaultDetails)\r\n        internal\r\n        pure\r\n        returns (bool)\r\n    {\r\n        if (_vaultDetails.vaultType == 1)\r\n            require(!_vaultDetails.hasLong, \"MarginCalculator: naked margin vault cannot have long otoken\");\r\n\r\n        // if vault is missing a long or a short, return True\r\n        if (!_vaultDetails.hasLong || !_vaultDetails.hasShort) return true;\r\n\r\n        return\r\n            _vault.longOtokens[0] != _vault.shortOtokens[0] &&\r\n            _vaultDetails.longUnderlyingAsset == _vaultDetails.shortUnderlyingAsset &&\r\n            _vaultDetails.longStrikeAsset == _vaultDetails.shortStrikeAsset &&\r\n            _vaultDetails.longCollateralAsset == _vaultDetails.shortCollateralAsset &&\r\n            _vaultDetails.longExpiryTimestamp == _vaultDetails.shortExpiryTimestamp &&\r\n            _vaultDetails.isLongPut == _vaultDetails.isShortPut;\r\n    }\r\n\r\n    /**\r\n     * @dev if there is short option and collateral asset in the vault, ensure that the collateral asset is valid for the short option\r\n     * @param _vault the vault to check\r\n     * @param _vaultDetails vault details struct\r\n     * @return true if marginable or false\r\n     */\r\n    function _isMarginableCollateral(MarginVault.Vault memory _vault, VaultDetails memory _vaultDetails)\r\n        internal\r\n        pure\r\n        returns (bool)\r\n    {\r\n        bool isMarginable = true;\r\n\r\n        if (!_vaultDetails.hasCollateral) return isMarginable;\r\n\r\n        if (_vaultDetails.hasShort) {\r\n            isMarginable = _vaultDetails.shortCollateralAsset == _vault.collateralAssets[0];\r\n        } else if (_vaultDetails.hasLong) {\r\n            isMarginable = _vaultDetails.longCollateralAsset == _vault.collateralAssets[0];\r\n        }\r\n\r\n        return isMarginable;\r\n    }\r\n\r\n    /**\r\n     * @notice get a product hash\r\n     * @param _underlying option underlying asset\r\n     * @param _strike option strike asset\r\n     * @param _collateral option collateral asset\r\n     * @param _isPut option type\r\n     * @return product hash\r\n     */\r\n    function _getProductHash(\r\n        address _underlying,\r\n        address _strike,\r\n        address _collateral,\r\n        bool _isPut\r\n    ) internal pure returns (bytes32) {\r\n        return keccak256(abi.encode(_underlying, _strike, _collateral, _isPut));\r\n    }\r\n\r\n    /**\r\n     * @notice get option cash value\r\n     * @dev this assume that the underlying price is denominated in strike asset\r\n     * cash value = max(underlying price - strike price, 0)\r\n     * @param _strikePrice option strike price\r\n     * @param _underlyingPrice option underlying price\r\n     * @param _isPut option type, true for put and false for call option\r\n     */\r\n    function _getCashValue(\r\n        FPI.FixedPointInt memory _strikePrice,\r\n        FPI.FixedPointInt memory _underlyingPrice,\r\n        bool _isPut\r\n    ) internal view returns (FPI.FixedPointInt memory) {\r\n        if (_isPut) return _strikePrice.isGreaterThan(_underlyingPrice) ? _strikePrice.sub(_underlyingPrice) : ZERO;\r\n\r\n        return _underlyingPrice.isGreaterThan(_strikePrice) ? _underlyingPrice.sub(_strikePrice) : ZERO;\r\n    }\r\n\r\n    /**\r\n     * @dev get otoken detail, from both otoken versions\r\n     */\r\n    function _getOtokenDetails(address _otoken)\r\n        internal\r\n        view\r\n        returns (\r\n            address,\r\n            address,\r\n            address,\r\n            uint256,\r\n            uint256,\r\n            bool\r\n        )\r\n    {\r\n        OtokenInterface otoken = OtokenInterface(_otoken);\r\n        try otoken.getOtokenDetails() returns (\r\n            address collateral,\r\n            address underlying,\r\n            address strike,\r\n            uint256 strikePrice,\r\n            uint256 expiry,\r\n            bool isPut\r\n        ) {\r\n            return (collateral, underlying, strike, strikePrice, expiry, isPut);\r\n        } catch {\r\n            // v1 otoken\r\n            return (\r\n                otoken.collateralAsset(),\r\n                otoken.underlyingAsset(),\r\n                otoken.strikeAsset(),\r\n                otoken.strikePrice(),\r\n                otoken.expiryTimestamp(),\r\n                otoken.isPut()\r\n            );\r\n        }\r\n    }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_oracle\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"collateral\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"dust\",\"type\":\"uint256\"}],\"name\":\"CollateralDustUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"productHash\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timeToExpiry\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"MaxPriceAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"productHash\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timeToExpiry\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldValue\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newValue\",\"type\":\"uint256\"}],\"name\":\"MaxPriceUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oracleDeviation\",\"type\":\"uint256\"}],\"name\":\"OracleDeviationUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"product\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"spotShock\",\"type\":\"uint256\"}],\"name\":\"SpotShockUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"productHash\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timeToExpiry\",\"type\":\"uint256\"}],\"name\":\"TimeToExpiryAdded\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"AUCTION_TIME\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_collateral\",\"type\":\"address\"}],\"name\":\"getCollateralDust\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address[]\",\"name\":\"shortOtokens\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"longOtokens\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"collateralAssets\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"shortAmounts\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"longAmounts\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"collateralAmounts\",\"type\":\"uint256[]\"}],\"internalType\":\"struct MarginVault.Vault\",\"name\":\"_vault\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"_vaultType\",\"type\":\"uint256\"}],\"name\":\"getExcessCollateral\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_otoken\",\"type\":\"address\"}],\"name\":\"getExpiredPayoutRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address[]\",\"name\":\"shortOtokens\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"longOtokens\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"collateralAssets\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"shortAmounts\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"longAmounts\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"collateralAmounts\",\"type\":\"uint256[]\"}],\"internalType\":\"struct MarginVault.Vault\",\"name\":\"_vault\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"_vaultType\",\"type\":\"uint256\"}],\"name\":\"getMarginRequired\",\"outputs\":[{\"components\":[{\"internalType\":\"int256\",\"name\":\"value\",\"type\":\"int256\"}],\"internalType\":\"struct FPI.FixedPointInt\",\"name\":\"\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"int256\",\"name\":\"value\",\"type\":\"int256\"}],\"internalType\":\"struct FPI.FixedPointInt\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_underlying\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_strike\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_collateral\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_isPut\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"_timeToExpiry\",\"type\":\"uint256\"}],\"name\":\"getMaxPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_underlying\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_strike\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_collateral\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_shortAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_strikePrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_underlyingPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_shortExpiryTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_collateralDecimals\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_isPut\",\"type\":\"bool\"}],\"name\":\"getNakedMarginRequired\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOracleDeviation\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_underlying\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_strike\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_collateral\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_isPut\",\"type\":\"bool\"}],\"name\":\"getSpotShock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_underlying\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_strike\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_collateral\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_isPut\",\"type\":\"bool\"}],\"name\":\"getTimesToExpiry\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address[]\",\"name\":\"shortOtokens\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"longOtokens\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"collateralAssets\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"shortAmounts\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"longAmounts\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"collateralAmounts\",\"type\":\"uint256[]\"}],\"internalType\":\"struct MarginVault.Vault\",\"name\":\"_vault\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"_vaultType\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_vaultLatestUpdate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_roundId\",\"type\":\"uint256\"}],\"name\":\"isLiquidatable\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"oracle\",\"outputs\":[{\"internalType\":\"contract OracleInterface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_collateral\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_dust\",\"type\":\"uint256\"}],\"name\":\"setCollateralDust\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_deviation\",\"type\":\"uint256\"}],\"name\":\"setOracleDeviation\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_underlying\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_strike\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_collateral\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_isPut\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"_shockValue\",\"type\":\"uint256\"}],\"name\":\"setSpotShock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_underlying\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_strike\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_collateral\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_isPut\",\"type\":\"bool\"},{\"internalType\":\"uint256[]\",\"name\":\"_timesToExpiry\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_values\",\"type\":\"uint256[]\"}],\"name\":\"setUpperBoundValues\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_underlying\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_strike\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_collateral\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_isPut\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"_timeToExpiry\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"updateUpperBoundValue\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"MarginCalculator","CompilerVersion":"v0.6.10+commit.00c0fcaf","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000414b66ce4f304385edd47d372fcc4a11dde7d16e","EVMVersion":"Default","Library":"","LicenseType":"Unlicense","Proxy":"0","Implementation":"","SwarmSource":"ipfs://0a752def96ab9d0fa6eab990d6b1486ddc441dfd3069682ab50722a90a66d11f"}]}