{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.5.7;\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n\r\n  /**\r\n  * @dev Multiplies two numbers, throws on overflow.\r\n  */\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n    uint256 c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Integer division of two numbers, truncating the quotient.\r\n  */\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n  */\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  /**\r\n  * @dev Adds two numbers, throws on overflow.\r\n  */\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\n\r\n\r\n\r\ncontract GSNxPS {\r\n    using SafeMath for uint;\r\n    address   owner;    // This is the current owner of the contract.\r\n    mapping (address => uint) internal balance;\r\n    \r\n    // Events begin.\r\n    event PsExcute(address from, uint amount);\r\n    event GdpSentFromAccount(address from, address to, uint amount);\r\n    event GdpSentFromContract(address from, address to, uint amount);\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n    // Events end.\r\n\r\n  uint public target=0;\r\n  uint public blockheight=0;\r\n  uint public fulfillmentrate=100;\r\n  constructor () public {  // the contract's constructor function.\r\n        owner = msg.sender;\r\n    }\r\n\r\n\r\n\r\n// Function to get Balance of the contract.\r\n  function getBalance() public view returns (uint256) {\r\n        \r\n        require(msg.sender == owner); // Only the Owner of this contract can run this function.\r\n        return address(this).balance;\r\n    }\r\n\r\n// Function to accept payment and data into the contract.\r\n    function acceptPs() payable public {\r\n        require(fulfillmentrate >=90,\"fulfillment rate less than 90% , stop ps\");\r\n        balance[address(this)]+= msg.value;  \r\n        emit PsExcute(msg.sender, msg.value);\r\n    }\r\n\r\n// Function to withdraw or send Ether from Contract owner's account to a specified account.\r\n    function TransferToGsContractFromOwnerAccount(address payable receiver, uint amount) public {\r\n        require(msg.sender == owner, \"You're not owner of the account\"); // Only the Owner of this contract can run this function.\r\n        require(amount < address(this).balance, \"Insufficient balance.\");\r\n        receiver.transfer(amount);\r\n        emit GdpSentFromAccount(msg.sender, receiver, amount);\r\n    }\r\n    \r\n    function transferOwnership(address newOwner) public {\r\n     require(msg.sender == owner, \"You're not owner of the contract\"); \r\n     require(newOwner != address(0));\r\n     owner = newOwner;\r\n     emit OwnershipTransferred(owner, newOwner);\r\n   \r\n    }\r\n  \r\n// function to set GSN network's blockheight\r\n   function SetGsnBlockHeight(uint newTarget, uint newBlockheight) public {\r\n        require(msg.sender == owner, \"You're not owner of the account\");\r\n        blockheight=newBlockheight;\r\n        target=newTarget;\r\n        \r\n   }\r\n   \r\n// Function to get current blockheight of the gsn network.\r\n  function getGsnBlockheight() public view returns (uint256) {\r\n        return blockheight;\r\n    }\r\n\r\n// Function to get current block target of the gsn network.\r\n  function getGsnTarget() public view returns (uint256) {\r\n        return target;\r\n    }    \r\n\r\n// Function to reset fulfillment rate if it is less than 90%\r\n  function resetFulfillmentRate(uint rate) public{\r\n       require(rate>0,\"invalid rate\");\r\n       require(rate<=100,\"invalid rate\");\r\n       fulfillmentrate=rate;\r\n  }\r\n  \r\n  function() external payable {\r\n     emit PsExcute(msg.sender, msg.value);\r\n    // Fallback function.\r\n    }\r\n    \r\n \r\n\r\n    \r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"getBalance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"rate\",\"type\":\"uint256\"}],\"name\":\"resetFulfillmentRate\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"receiver\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TransferToGsContractFromOwnerAccount\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"acceptPs\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newTarget\",\"type\":\"uint256\"},{\"name\":\"newBlockheight\",\"type\":\"uint256\"}],\"name\":\"SetGsnBlockHeight\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getGsnBlockheight\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"fulfillmentrate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"target\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getGsnTarget\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"blockheight\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"PsExcute\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"GdpSentFromAccount\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"GdpSentFromContract\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"GSNxPS","CompilerVersion":"v0.5.7+commit.6da8b019","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"bzzr://014d54887e509927842489dfc9c8eaffa0d06f99de43926c2f8bff0b2f30ad6c"}]}