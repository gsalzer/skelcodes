{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity =0.6.6;\r\n/**\r\n * Four super nodes contracts of galaxy\r\n */\r\n/**\r\n * Math operations with safety checks\r\n */\r\nlibrary SafeMath {\r\n    function add(uint a, uint b) internal pure returns (uint) {\r\n        uint c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n    function sub(uint a, uint b) internal pure returns (uint) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n    function sub(uint a, uint b, string memory errorMessage) internal pure returns (uint) {\r\n        require(b <= a, errorMessage);\r\n        uint c = a - b;\r\n\r\n        return c;\r\n    }\r\n    function mul(uint a, uint b) internal pure returns (uint) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n    function div(uint a, uint b) internal pure returns (uint) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n    function div(uint a, uint b, string memory errorMessage) internal pure returns (uint) {\r\n        // Solidity only automatically asserts when dividing by 0\r\n        require(b > 0, errorMessage);\r\n        uint c = a / b;\r\n\r\n        return c;\r\n    }\r\n}\r\n\r\ninterface ERC20 {\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n    function transferFrom(address from, address to, uint256 value) external;\r\n    function balanceOf(address who) external view returns (uint256);\r\n    function transfer(address to, uint256 value) external;\r\n}\r\n\r\n\r\ncontract SuperNodes {\r\n    using SafeMath for uint;\r\n\r\n    ERC20 public bcoin;\r\n    mapping(address => uint) public accountLevelMap;\r\n    mapping(address => uint) public accountDateMap;\r\n    mapping(address => uint) public accountWithdrawMap;\r\n\r\n    uint[] public incomes = [0,50000 ether,100000 ether,200000 ether,1000000 ether];\r\n\r\n    event BuyNode(address indexed addr, uint level);\r\n    event Withdraw(address indexed to, uint256 value);\r\n\r\n    constructor(address _bcoin)public {\r\n        bcoin = ERC20(_bcoin);\r\n    }\r\n\r\n    function buyNode( uint level) public {\r\n        require(level != 0, \"!0 level\");\r\n        require(level < 5, \"!level\");\r\n        require(accountLevelMap[msg.sender] == 0 );\r\n        uint cost = incomes[level];\r\n        uint allowed = bcoin.allowance(msg.sender,address(this));\r\n        uint balanced = bcoin.balanceOf(msg.sender);\r\n        require(allowed >= cost, \"!allowed\");\r\n        require(balanced >= cost, \"!balanced\");\r\n        bcoin.transferFrom( msg.sender,address(this), cost);\r\n\r\n        accountLevelMap[msg.sender] = level;\r\n        accountDateMap[msg.sender] = block.timestamp;\r\n\r\n        emit BuyNode(msg.sender,level);\r\n    }\r\n\r\n    function withdraw(uint value) public {\r\n        uint max = withdrawAble(msg.sender);\r\n        require(value <= max);\r\n        accountWithdrawMap[msg.sender] = accountWithdrawMap[msg.sender].add(value);\r\n        bcoin.transfer( msg.sender, value);\r\n        emit Withdraw(msg.sender, value);\r\n    }\r\n\r\n    function withdrawAble(address addr) public view returns (uint){\r\n        uint round = getCurrentRound(addr);\r\n        if(round == 0){\r\n            return 0;\r\n        }\r\n        round = round -1;\r\n        uint level = accountLevelMap[addr];\r\n        uint income = incomes[level];\r\n        uint released = income.div(10).mul(round);\r\n        return released.sub(accountWithdrawMap[addr]);\r\n    }\r\n\r\n    // 获取当前所处的轮数\r\n    function getCurrentRound(address addr) public view returns (uint){\r\n        uint inDate = accountDateMap[addr];\r\n        if(inDate == 0){\r\n            return 0;\r\n        }\r\n        uint begin =  inDate + 90 days;\r\n        if(begin >= block.timestamp){\r\n            return 1;\r\n        }\r\n        for(uint i = 1;i<=10;i++){\r\n            uint next = begin + (30 days)*i;\r\n            if(next >= block.timestamp){\r\n                return i+1;\r\n            }\r\n        }\r\n        return 12;\r\n    }\r\n\r\n    function nextTime(address addr) public view returns (uint){\r\n        uint inDate = accountDateMap[addr];\r\n        if(inDate == 0){\r\n            return 0;\r\n        }\r\n        uint begin =  inDate + 90 days;\r\n        if(begin >= block.timestamp){\r\n            return begin;\r\n        }\r\n        for(uint i = 1;i<=10;i++){\r\n            uint next = begin + (30 days)*i;\r\n            if(next >= block.timestamp){\r\n                return next;\r\n            }\r\n        }\r\n        return 0;\r\n    }\r\n\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_bcoin\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"level\",\"type\":\"uint256\"}],\"name\":\"BuyNode\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"accountDateMap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"accountLevelMap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"accountWithdrawMap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"bcoin\",\"outputs\":[{\"internalType\":\"contract ERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"level\",\"type\":\"uint256\"}],\"name\":\"buyNode\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"getCurrentRound\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"incomes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"nextTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"withdrawAble\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"SuperNodes","CompilerVersion":"v0.6.6+commit.6c089d02","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"000000000000000000000000b3829e5755fafb97396109768895b1026acc003f","EVMVersion":"Default","Library":"","LicenseType":"Unlicense","Proxy":"0","Implementation":"","SwarmSource":"ipfs://735a71bd4c3cb730f6eb2ee6caf5705802e0b05bdfde57f3434314d030dcd4d0"}]}