{"status":"1","message":"OK","result":[{"SourceCode":"// File: contracts\\interfaces\\IReservesDistributor.sol\r\n\r\npragma solidity >=0.5.0;\r\n\r\ninterface IReservesDistributor {\r\n\tfunction imx() external view returns (address);\r\n\tfunction xImx() external view returns (address);\r\n\tfunction periodLength() external view returns (uint);\r\n\tfunction lastClaim() external view returns (uint);\r\n\t\r\n    event Claim(uint previousBalance, uint timeElapsed, uint amount);\r\n    event NewPeriodLength(uint oldPeriodLength, uint newPeriodLength);\r\n    event Withdraw(uint previousBalance, uint amount);\r\n\r\n\tfunction claim() external returns (uint amount);\r\n\tfunction setPeriodLength(uint newPeriodLength) external;\r\n\tfunction withdraw(uint amount) external;\r\n}\r\n\r\n// File: contracts\\interfaces\\IKeeperCompatible.sol\r\n\r\npragma solidity >=0.5.0;\r\n\r\ninterface IKeeperCompatible {\r\n    function checkUpkeep(bytes calldata checkData) external view returns (bool upkeepNeeded, bytes memory performData);\r\n    function performUpkeep(bytes calldata performData) external;\r\n}\r\n\r\n// File: contracts\\Ownable.sol\r\n\r\n// SPDX-License-Identifier: MIT\r\n// Audit on 5-Jan-2021 by Keno and BoringCrypto\r\n\r\n// P1 - P3: OK\r\npragma solidity =0.5.16;\r\n\r\n// Source: https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/access/Ownable.sol + Claimable.sol\r\n// Edited by BoringCrypto\r\n\r\n// T1 - T4: OK\r\ncontract OwnableData {\r\n    // V1 - V5: OK\r\n    address public owner;\r\n    // V1 - V5: OK\r\n    address public pendingOwner;\r\n}\r\n\r\n// T1 - T4: OK\r\ncontract Ownable is OwnableData {\r\n    // E1: OK\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    constructor () internal {\r\n        owner = msg.sender;\r\n        emit OwnershipTransferred(address(0), msg.sender);\r\n    }\r\n\r\n    // F1 - F9: OK\r\n    // C1 - C21: OK\r\n    function transferOwnership(address newOwner, bool direct, bool renounce) public onlyOwner {\r\n        if (direct) {\r\n            // Checks\r\n            require(newOwner != address(0) || renounce, \"Ownable: zero address\");\r\n\r\n            // Effects\r\n            emit OwnershipTransferred(owner, newOwner);\r\n            owner = newOwner;\r\n        } else {\r\n            // Effects\r\n            pendingOwner = newOwner;\r\n        }\r\n    }\r\n\r\n    // F1 - F9: OK\r\n    // C1 - C21: OK\r\n    function claimOwnership() public {\r\n        address _pendingOwner = pendingOwner;\r\n\r\n        // Checks\r\n        require(msg.sender == _pendingOwner, \"Ownable: caller != pending owner\");\r\n\r\n        // Effects\r\n        emit OwnershipTransferred(owner, _pendingOwner);\r\n        owner = _pendingOwner;\r\n        pendingOwner = address(0);\r\n    }\r\n\r\n    // M1 - M5: OK\r\n    // C1 - C21: OK\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner, \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n}\r\n\r\n// File: contracts\\Claimer.sol\r\n\r\npragma solidity =0.5.16;\r\n\r\n\r\n\r\n\r\ncontract Claimer is IKeeperCompatible, Ownable {\t\r\n\taddress public reservesDistributor;\r\n\tuint public maxClaimInterval;\r\n\r\n\tconstructor(\r\n\t\taddress reservesDistributor_,\r\n\t\tuint maxClaimInterval_\r\n\t) public {\r\n\t\treservesDistributor = reservesDistributor_;\r\n\t\tmaxClaimInterval = maxClaimInterval_;\r\n\t}\r\n\t\r\n\tfunction checkUpkeep(bytes calldata checkData) external view returns (bool upkeepNeeded, bytes memory performData) {\r\n\t\tuint lastClaim = IReservesDistributor(reservesDistributor).lastClaim();\r\n\t\tupkeepNeeded = (block.timestamp - lastClaim) > maxClaimInterval;\r\n\t\tperformData = checkData;\r\n\t}\r\n\r\n\tfunction performUpkeep(bytes calldata performData) external {\r\n\t\tIReservesDistributor(reservesDistributor).claim();\r\n\t\tperformData;   \r\n\t}\r\n\t\r\n\tfunction setMaxClaimInterval(uint newMaxClaimInterval) external onlyOwner {\r\n\t\tmaxClaimInterval = newMaxClaimInterval;\r\n\t}\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"reservesDistributor_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"maxClaimInterval_\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"checkData\",\"type\":\"bytes\"}],\"name\":\"checkUpkeep\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"upkeepNeeded\",\"type\":\"bool\"},{\"internalType\":\"bytes\",\"name\":\"performData\",\"type\":\"bytes\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"claimOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"maxClaimInterval\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"pendingOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"performData\",\"type\":\"bytes\"}],\"name\":\"performUpkeep\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"reservesDistributor\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newMaxClaimInterval\",\"type\":\"uint256\"}],\"name\":\"setMaxClaimInterval\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"direct\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"renounce\",\"type\":\"bool\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"Claimer","CompilerVersion":"v0.5.16+commit.9c3226ce","OptimizationUsed":"1","Runs":"999999","ConstructorArguments":"000000000000000000000000a6f3c27f1b503221f3a3c9d34f587252ecfb3160000000000000000000000000000000000000000000000000000000000000a8c0","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"bzzr://8a19e9e5152d9da8a759c64d18f8b80f1cd5e30f8ee9cf6790b1990a78e21bcf"}]}