{"status":"1","message":"OK","result":[{"SourceCode":"// File: @openzeppelin/contracts/GSN/Context.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n/*\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with GSN meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\ncontract Context {\r\n    // Empty internal constructor, to prevent people from mistakenly deploying\r\n    // an instance of this contract, which should be used via inheritance.\r\n    constructor () internal { }\r\n    // solhint-disable-previous-line no-empty-blocks\r\n\r\n    function _msgSender() internal view returns (address payable) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view returns (bytes memory) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/ownership/Ownable.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\ncontract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor () internal {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(isOwner(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the caller is the current owner.\r\n     */\r\n    function isOwner() public view returns (bool) {\r\n        return _msgSender() == _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     */\r\n    function _transferOwnership(address newOwner) internal {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/token/ERC20/IERC20.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP. Does not include\r\n * the optional functions; to access them see {ERC20Detailed}.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n// File: @openzeppelin/contracts/math/SafeMath.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     * - Subtraction cannot overflow.\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        // Solidity only automatically asserts when dividing by 0\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts with custom message when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n// File: contracts/I_Token.sol\r\n\r\npragma solidity 0.5.0;\r\n\r\n/**\r\n * @title   Interface Token\r\n * @notice  Allows the Curve contract to interact with the token contract\r\n *          without importing the entire smart contract. For documentation\r\n *          please see the token contract:\r\n *          https://gitlab.com/linumlabs/swarm-token\r\n * @dev     This is not a full interface of the token, but instead a partial\r\n *          interface covering only the functions that are needed by the curve.\r\n */\r\ninterface I_Token {\r\n    // -------------------------------------------------------------------------\r\n    // IERC20 functions\r\n    // -------------------------------------------------------------------------\r\n\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    function transfer(address recipient, uint256 amount)\r\n        external\r\n        returns (bool);\r\n\r\n    function allowance(address owner, address spender)\r\n        external\r\n        view\r\n        returns (uint256);\r\n\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n\r\n    // -------------------------------------------------------------------------\r\n    // ERC20 functions\r\n    // -------------------------------------------------------------------------\r\n\r\n    function increaseAllowance(address spender, uint256 addedValue)\r\n        external\r\n        returns (bool);\r\n\r\n    function decreaseAllowance(address spender, uint256 subtractedValue)\r\n        external\r\n        returns (bool);\r\n\r\n    // -------------------------------------------------------------------------\r\n    // ERC20 Detailed\r\n    // -------------------------------------------------------------------------\r\n\r\n    function name() external view returns (string memory);\r\n\r\n    function symbol() external view returns (string memory);\r\n\r\n    function decimals() external view returns (uint8);\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Burnable functions\r\n    // -------------------------------------------------------------------------\r\n\r\n    function burn(uint256 amount) external;\r\n\r\n    function burnFrom(address account, uint256 amount) external;\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Mintable functions\r\n    // -------------------------------------------------------------------------\r\n\r\n    function isMinter(address account) external view returns (bool);\r\n\r\n    function addMinter(address account) external;\r\n\r\n    function renounceMinter() external;\r\n\r\n    function mint(address account, uint256 amount) external returns (bool);\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Capped functions\r\n    // -------------------------------------------------------------------------\r\n\r\n    function cap() external view returns (uint256);\r\n}\r\n\r\n// File: contracts/I_Curve.sol\r\n\r\npragma solidity 0.5.0;\r\n\r\n/**\r\n * @title   Interface Curve\r\n * @notice  This contract acts as an interface to the curve contract. For\r\n *          documentation please see the curve smart contract.\r\n */\r\ninterface I_Curve {\r\n    \r\n    // -------------------------------------------------------------------------\r\n    // View functions\r\n    // -------------------------------------------------------------------------\r\n\r\n    /**\r\n     * @notice This function is only callable after the curve contract has been\r\n     *         initialized.\r\n     * @param  _amount The amount of tokens a user wants to buy\r\n     * @return uint256 The cost to buy the _amount of tokens in the collateral\r\n     *         currency (see collateral token).\r\n     */\r\n    function buyPrice(uint256 _amount)\r\n        external\r\n        view\r\n        returns (uint256 collateralRequired);\r\n\r\n    /**\r\n     * @notice This function is only callable after the curve contract has been\r\n     *         initialized.\r\n     * @param  _amount The amount of tokens a user wants to sell\r\n     * @return collateralReward The reward for selling the _amount of tokens in the\r\n     *         collateral currency (see collateral token).\r\n     */\r\n    function sellReward(uint256 _amount)\r\n        external\r\n        view\r\n        returns (uint256 collateralReward);\r\n\r\n    /**\r\n      * @return If the curve is both active and initialised.\r\n      */\r\n    function isCurveActive() external view returns (bool);\r\n\r\n    /**\r\n      * @return The address of the collateral token (DAI)\r\n      */\r\n    function collateralToken() external view returns (address);\r\n\r\n    /**\r\n      * @return The address of the bonded token (BZZ).\r\n      */\r\n    function bondedToken() external view returns (address);\r\n\r\n    /**\r\n      * @return The required collateral amount (DAI) to initialise the curve.\r\n      */\r\n    function requiredCollateral(uint256 _initialSupply)\r\n        external\r\n        view\r\n        returns (uint256);\r\n\r\n    // -------------------------------------------------------------------------\r\n    // State modifying functions\r\n    // -------------------------------------------------------------------------\r\n\r\n    /**\r\n     * @notice This function initializes the curve contract, and ensure the\r\n     *         curve has the required permissions on the token contract needed\r\n     *         to function.\r\n     */\r\n    function init() external;\r\n\r\n    /**\r\n      * @param  _amount The amount of tokens (BZZ) the user wants to buy.\r\n      * @param  _maxCollateralSpend The max amount of collateral (DAI) the user is\r\n      *         willing to spend in order to buy the _amount of tokens.\r\n      * @return The status of the mint. Note that should the total cost of the\r\n      *         purchase exceed the _maxCollateralSpend the transaction will revert.\r\n      */\r\n    function mint(uint256 _amount, uint256 _maxCollateralSpend)\r\n        external\r\n        returns (bool success);\r\n\r\n    /**\r\n      * @param  _amount The amount of tokens (BZZ) the user wants to buy.\r\n      * @param  _maxCollateralSpend The max amount of collateral (DAI) the user is\r\n      *         willing to spend in order to buy the _amount of tokens.\r\n      * @param  _to The address to send the tokens to.\r\n      * @return The status of the mint. Note that should the total cost of the\r\n      *         purchase exceed the _maxCollateralSpend the transaction will revert.\r\n      */\r\n    function mintTo(\r\n        uint256 _amount, \r\n        uint256 _maxCollateralSpend, \r\n        address _to\r\n    )\r\n        external\r\n        returns (bool success);\r\n\r\n    /**\r\n      * @param  _amount The amount of tokens (BZZ) the user wants to sell.\r\n      * @param  _minCollateralReward The min amount of collateral (DAI) the user is\r\n      *         willing to receive for their tokens.\r\n      * @return The status of the burn. Note that should the total reward of the\r\n      *         burn be below the _minCollateralReward the transaction will revert.\r\n      */\r\n    function redeem(uint256 _amount, uint256 _minCollateralReward)\r\n        external\r\n        returns (bool success);\r\n\r\n    /**\r\n      * @notice Shuts down the curve, disabling buying, selling and both price\r\n      *         functions. Can only be called by the owner. Will renounce the\r\n      *         minter role on the bonded token.\r\n      */\r\n    function shutDown() external;\r\n}\r\n\r\n// File: contracts/Curve.sol\r\n\r\npragma solidity 0.5.0;\r\n\r\n\r\n\r\n\r\n\r\n\r\ncontract Curve is Ownable, I_Curve {\r\n    using SafeMath for uint256;\r\n    // The instance of the token this curve controls (has mint rights to)\r\n    I_Token internal bzz_;\r\n    // The instance of the collateral token that is used to buy and sell tokens\r\n    IERC20 internal dai_;\r\n    // Stores if the curve has been initialised\r\n    bool internal init_;\r\n    // The active state of the curve (false after emergency shutdown)\r\n    bool internal active_;\r\n    // Mutex guard for state modifying functions\r\n    uint256 private status_;\r\n    // States for the guard \r\n    uint256 private constant _NOT_ENTERED = 1;\r\n    uint256 private constant _ENTERED = 2;\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Events\r\n    // -------------------------------------------------------------------------\r\n\r\n    // Emitted when tokens are minted\r\n    event mintTokens(\r\n        address indexed buyer,      // The address of the buyer\r\n        uint256 amount,             // The amount of bonded tokens to mint\r\n        uint256 pricePaid,          // The price in collateral tokens \r\n        uint256 maxSpend            // The max amount of collateral to spend\r\n    );\r\n    // Emitted when tokens are minted\r\n    event mintTokensTo(\r\n        address indexed buyer,      // The address of the buyer\r\n        address indexed receiver,   // The address of the receiver of the tokens\r\n        uint256 amount,             // The amount of bonded tokens to mint\r\n        uint256 pricePaid,          // The price in collateral tokens \r\n        uint256 maxSpend            // The max amount of collateral to spend\r\n    );\r\n    // Emitted when tokens are burnt\r\n    event burnTokens(\r\n        address indexed seller,     // The address of the seller\r\n        uint256 amount,             // The amount of bonded tokens to sell\r\n        uint256 rewardReceived,     // The collateral tokens received\r\n        uint256 minReward           // The min collateral reward for tokens\r\n    );\r\n    // Emitted when the curve is permanently shut down\r\n    event shutDownOccurred(address indexed owner);\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Modifiers\r\n    // -------------------------------------------------------------------------\r\n\r\n    /**\r\n      * @notice Requires the curve to be initialised and active.\r\n      */\r\n    modifier isActive() {\r\n        require(active_ && init_, \"Curve inactive\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n      * @notice Protects against re-entrancy attacks\r\n      */\r\n    modifier mutex() {\r\n        require(status_ != _ENTERED, \"ReentrancyGuard: reentrant call\");\r\n        // Any calls to nonReentrant after this point will fail\r\n        status_ = _ENTERED;\r\n        // Function executes\r\n        _;\r\n        // Status set to not entered\r\n        status_ = _NOT_ENTERED;\r\n    }\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Constructor\r\n    // -------------------------------------------------------------------------\r\n\r\n    constructor(address _bondedToken, address _collateralToken) public Ownable() {\r\n        bzz_ = I_Token(_bondedToken);\r\n        dai_ = IERC20(_collateralToken);\r\n        status_ = _NOT_ENTERED;\r\n    }\r\n\r\n    // -------------------------------------------------------------------------\r\n    // View functions\r\n    // -------------------------------------------------------------------------\r\n\r\n    /**\r\n     * @notice This function is only callable after the curve contract has been\r\n     *         initialized.\r\n     * @param  _amount The amount of tokens a user wants to buy\r\n     * @return uint256 The cost to buy the _amount of tokens in the collateral\r\n     *         currency (see collateral token).\r\n     */\r\n    function buyPrice(uint256 _amount)\r\n        public\r\n        view\r\n        isActive()\r\n        returns (uint256 collateralRequired)\r\n    {\r\n        collateralRequired = _mint(_amount, bzz_.totalSupply());\r\n        return collateralRequired;\r\n    }\r\n\r\n    /**\r\n     * @notice This function is only callable after the curve contract has been\r\n     *         initialized.\r\n     * @param  _amount The amount of tokens a user wants to sell\r\n     * @return collateralReward The reward for selling the _amount of tokens in the\r\n     *         collateral currency (see collateral token).\r\n     */\r\n    function sellReward(uint256 _amount)\r\n        public\r\n        view\r\n        isActive()\r\n        returns (uint256 collateralReward)\r\n    {\r\n        (collateralReward, ) = _withdraw(_amount, bzz_.totalSupply());\r\n        return collateralReward;\r\n    }\r\n\r\n    /**\r\n      * @return If the curve is both active and initialised.\r\n      */\r\n    function isCurveActive() public view returns (bool) {\r\n        if (active_ && init_) {\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    /**\r\n      * @param  _initialSupply The expected initial supply the bonded token\r\n      *         will have.\r\n      * @return The required collateral amount (DAI) to initialise the curve.\r\n      */\r\n    function requiredCollateral(uint256 _initialSupply)\r\n        public\r\n        view\r\n        returns (uint256)\r\n    {\r\n        return _initializeCurve(_initialSupply);\r\n    }\r\n\r\n    /**\r\n      * @return The address of the bonded token (BZZ).\r\n      */\r\n    function bondedToken() external view returns (address) {\r\n        return address(bzz_);\r\n    }\r\n\r\n    /**\r\n      * @return The address of the collateral token (DAI)\r\n      */\r\n    function collateralToken() external view returns (address) {\r\n        return address(dai_);\r\n    }\r\n\r\n    // -------------------------------------------------------------------------\r\n    // State modifying functions\r\n    // -------------------------------------------------------------------------\r\n\r\n    /**\r\n     * @notice This function initializes the curve contract, and ensure the\r\n     *         curve has the required permissions on the token contract needed\r\n     *         to function.\r\n     */\r\n    function init() external {\r\n        // Checks the curve has not already been initialized\r\n        require(!init_, \"Curve is init\");\r\n        // Checks the curve has the correct permissions on the given token\r\n        require(bzz_.isMinter(address(this)), \"Curve is not minter\");\r\n        // Gets the total supply of the token\r\n        uint256 initialSupply = bzz_.totalSupply();\r\n        // The curve requires that the initial supply is at least the expected\r\n        // open market supply\r\n        require(\r\n            initialSupply >= _MARKET_OPENING_SUPPLY,\r\n            \"Curve equation requires pre-mint\"\r\n        );\r\n        // Gets the price for the current supply\r\n        uint256 price = _initializeCurve(initialSupply);\r\n        // Requires the transfer for the collateral needed to back fill for the\r\n        // minted supply\r\n        require(\r\n            dai_.transferFrom(msg.sender, address(this), price),\r\n            \"Failed to collateralized the curve\"\r\n        );\r\n        // Sets the Curve to being active and initialised\r\n        active_ = true;\r\n        init_ = true;\r\n    }\r\n\r\n    /**\r\n      * @param  _amount The amount of tokens (BZZ) the user wants to buy.\r\n      * @param  _maxCollateralSpend The max amount of collateral (DAI) the user is\r\n      *         willing to spend in order to buy the _amount of tokens.\r\n      * @return The status of the mint. Note that should the total cost of the\r\n      *         purchase exceed the _maxCollateralSpend the transaction will revert.\r\n      */\r\n    function mint(\r\n        uint256 _amount, \r\n        uint256 _maxCollateralSpend\r\n    )\r\n        external\r\n        isActive()\r\n        mutex()\r\n        returns (bool success)\r\n    {\r\n        // Gets the price for the amount of tokens\r\n        uint256 price = _commonMint(_amount, _maxCollateralSpend, msg.sender);\r\n        // Emitting event with all important info\r\n        emit mintTokens(\r\n            msg.sender, \r\n            _amount, \r\n            price, \r\n            _maxCollateralSpend\r\n        );\r\n        // Returning that the mint executed successfully\r\n        return true;\r\n    }\r\n\r\n    /**\r\n      * @param  _amount The amount of tokens (BZZ) the user wants to buy.\r\n      * @param  _maxCollateralSpend The max amount of collateral (DAI) the user is\r\n      *         willing to spend in order to buy the _amount of tokens.\r\n      * @param  _to The address to send the tokens to.\r\n      * @return The status of the mint. Note that should the total cost of the\r\n      *         purchase exceed the _maxCollateralSpend the transaction will revert.\r\n      */\r\n    function mintTo(\r\n        uint256 _amount, \r\n        uint256 _maxCollateralSpend, \r\n        address _to\r\n    )\r\n        external\r\n        isActive()\r\n        mutex()\r\n        returns (bool success)\r\n    {\r\n        // Gets the price for the amount of tokens\r\n        uint256 price =  _commonMint(_amount, _maxCollateralSpend, _to);\r\n        // Emitting event with all important info\r\n        emit mintTokensTo(\r\n            msg.sender,\r\n            _to, \r\n            _amount, \r\n            price, \r\n            _maxCollateralSpend\r\n        );\r\n        // Returning that the mint executed successfully\r\n        return true;\r\n    }\r\n\r\n    /**\r\n      * @param  _amount The amount of tokens (BZZ) the user wants to sell.\r\n      * @param  _minCollateralReward The min amount of collateral (DAI) the user is\r\n      *         willing to receive for their tokens.\r\n      * @return The status of the burn. Note that should the total reward of the\r\n      *         burn be below the _minCollateralReward the transaction will revert.\r\n      */\r\n    function redeem(uint256 _amount, uint256 _minCollateralReward)\r\n        external\r\n        isActive()\r\n        mutex()\r\n        returns (bool success)\r\n    {\r\n        // Gets the reward for the amount of tokens\r\n        uint256 reward = sellReward(_amount);\r\n        // Checks the reward has not slipped below the min amount the user\r\n        // wishes to receive.\r\n        require(reward >= _minCollateralReward, \"Reward under min sell\");\r\n        // Burns the number of tokens (fails - no bool return)\r\n        bzz_.burnFrom(msg.sender, _amount);\r\n        // Transfers the reward from the curve to the collateral token\r\n        require(\r\n            dai_.transfer(msg.sender, reward),\r\n            \"Transferring collateral failed\"\r\n        );\r\n        // Emitting event with all important info\r\n        emit burnTokens(\r\n            msg.sender, \r\n            _amount, \r\n            reward, \r\n            _minCollateralReward\r\n        );\r\n        // Returning that the burn executed successfully\r\n        return true;\r\n    }\r\n\r\n    /**\r\n      * @notice Shuts down the curve, disabling buying, selling and both price\r\n      *         functions. Can only be called by the owner. Will renounce the\r\n      *         minter role on the bonded token.\r\n      */\r\n    function shutDown() external onlyOwner() {\r\n        // Removes the curve as a minter on the token\r\n        bzz_.renounceMinter();\r\n        // Irreversibly shuts down the curve\r\n        active_ = false;\r\n        // Emitting address of owner who shut down curve permanently\r\n        emit shutDownOccurred(msg.sender);\r\n    }\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Internal functions\r\n    // -------------------------------------------------------------------------\r\n\r\n    /**\r\n      * @param  _amount The amount of tokens (BZZ) the user wants to buy.\r\n      * @param  _maxCollateralSpend The max amount of collateral (DAI) the user is\r\n      *         willing to spend in order to buy the _amount of tokens.\r\n      * @param  _to The address to send the tokens to.\r\n      * @return uint256 The price the user has paid for buying the _amount of \r\n      *         BUZZ tokens. \r\n      */\r\n    function _commonMint(\r\n        uint256 _amount,\r\n        uint256 _maxCollateralSpend,\r\n        address _to\r\n    )\r\n        internal\r\n        returns(uint256)\r\n    {\r\n        // Gets the price for the amount of tokens\r\n        uint256 price = buyPrice(_amount);\r\n        // Checks the price has not risen above the max amount the user wishes\r\n        // to spend.\r\n        require(price <= _maxCollateralSpend, \"Price exceeds max spend\");\r\n        // Transfers the price of tokens in the collateral token to the curve\r\n        require(\r\n            dai_.transferFrom(msg.sender, address(this), price),\r\n            \"Transferring collateral failed\"\r\n        );\r\n        // Mints the user their tokens\r\n        require(bzz_.mint(_to, _amount), \"Minting tokens failed\");\r\n        // Returns the price the user will pay for buy\r\n        return price;\r\n    }\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Curve mathematical functions\r\n\r\n    uint256 internal constant _BZZ_SCALE = 1e16;\r\n    uint256 internal constant _N = 5;\r\n    uint256 internal constant _MARKET_OPENING_SUPPLY = 62500000 * _BZZ_SCALE;\r\n    // Equation for curve: \r\n\r\n    /**\r\n     * @param   x The supply to calculate at.\r\n     * @return  x^32/_MARKET_OPENING_SUPPLY^5\r\n     * @dev     Calculates the 32 power of `x` (`x` squared 5 times) times a \r\n     *          constant. Each time it squares the function it divides by the \r\n     *          `_MARKET_OPENING_SUPPLY` so when `x` = `_MARKET_OPENING_SUPPLY` \r\n     *          it doesn't change `x`. \r\n     *\r\n     *          `c*x^32` | `c` is chosen in such a way that \r\n     *          `_MARKET_OPENING_SUPPLY` is the fixed point of the helper \r\n     *          function.\r\n     *\r\n     *          The division by `_MARKET_OPENING_SUPPLY` also helps avoid an \r\n     *          overflow.\r\n     *\r\n     *          The `_helper` function is separate to the `_primitiveFunction` \r\n     *          as we modify `x`. \r\n     */\r\n    function _helper(uint256 x) internal view returns (uint256) {\r\n        for (uint256 index = 1; index <= _N; index++) {\r\n            x = (x.mul(x)).div(_MARKET_OPENING_SUPPLY);\r\n        }\r\n        return x;\r\n    }\r\n\r\n    /**\r\n     * @param   s The supply point being calculated for. \r\n     * @return  The amount of DAI required for the requested amount of BZZ (s). \r\n     * @dev     `s` is being added because it is the linear term in the \r\n     *          polynomial (this ensures no free BUZZ tokens).\r\n     *\r\n     *          primitive function equation: s + c*s^32.\r\n     * \r\n     *          See the helper function for the definition of `c`.\r\n     *\r\n     *          Converts from something measured in BZZ (1e16) to dai atomic \r\n     *          units 1e18.\r\n     */\r\n    function _primitiveFunction(uint256 s) internal view returns (uint256) {\r\n        return s.add(_helper(s));\r\n    }\r\n\r\n    /**\r\n     * @param  _supply The number of tokens that exist.\r\n     * @return uint256 The price for the next token up the curve.\r\n     */\r\n    function _spotPrice(uint256 _supply) internal view returns (uint256) {\r\n        return (_primitiveFunction(_supply.add(1)).sub(_primitiveFunction(_supply)));\r\n    }\r\n\r\n    /**\r\n     * @param  _amount The amount of tokens to be minted\r\n     * @param  _currentSupply The current supply of tokens\r\n     * @return uint256 The cost for the tokens\r\n     * @return uint256 The price being paid per token\r\n     */\r\n    function _mint(uint256 _amount, uint256 _currentSupply)\r\n        internal\r\n        view\r\n        returns (uint256)\r\n    {\r\n        uint256 deltaR = _primitiveFunction(_currentSupply.add(_amount)).sub(\r\n            _primitiveFunction(_currentSupply));\r\n        return deltaR;\r\n    }\r\n\r\n    /**\r\n     * @param  _amount The amount of tokens to be sold\r\n     * @param  _currentSupply The current supply of tokens\r\n     * @return uint256 The reward for the tokens\r\n     * @return uint256 The price being received per token\r\n     */\r\n    function _withdraw(uint256 _amount, uint256 _currentSupply)\r\n        internal\r\n        view\r\n        returns (uint256, uint256)\r\n    {\r\n        assert(_currentSupply - _amount > 0);\r\n        uint256 deltaR = _primitiveFunction(_currentSupply).sub(\r\n            _primitiveFunction(_currentSupply.sub(_amount)));\r\n        uint256 realized_price = deltaR.div(_amount);\r\n        return (deltaR, realized_price);\r\n    }\r\n\r\n    /**\r\n     * @param  _initial_supply The supply the curve is going to start with.\r\n     * @return initial_reserve How much collateral is needed to collateralized\r\n     *         the bonding curve.\r\n     * @return price The price being paid per token (averaged).\r\n     */\r\n    function _initializeCurve(uint256 _initial_supply)\r\n        internal\r\n        view\r\n        returns (uint256 price)\r\n    {\r\n        price = _mint(_initial_supply, 0);\r\n        return price;\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"isCurveActive\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"shutDown\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_amount\",\"type\":\"uint256\"},{\"name\":\"_maxCollateralSpend\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_amount\",\"type\":\"uint256\"},{\"name\":\"_maxCollateralSpend\",\"type\":\"uint256\"},{\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"mintTo\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_amount\",\"type\":\"uint256\"},{\"name\":\"_minCollateralReward\",\"type\":\"uint256\"}],\"name\":\"redeem\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_initialSupply\",\"type\":\"uint256\"}],\"name\":\"requiredCollateral\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"collateralToken\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"buyPrice\",\"outputs\":[{\"name\":\"collateralRequired\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"sellReward\",\"outputs\":[{\"name\":\"collateralReward\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"init\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"bondedToken\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_bondedToken\",\"type\":\"address\"},{\"name\":\"_collateralToken\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"buyer\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"pricePaid\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"maxSpend\",\"type\":\"uint256\"}],\"name\":\"mintTokens\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"buyer\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"receiver\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"pricePaid\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"maxSpend\",\"type\":\"uint256\"}],\"name\":\"mintTokensTo\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"seller\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"rewardReceived\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"minReward\",\"type\":\"uint256\"}],\"name\":\"burnTokens\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"shutDownOccurred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"Curve","CompilerVersion":"v0.5.0+commit.1d4f565a","OptimizationUsed":"1","Runs":"500","ConstructorArguments":"00000000000000000000000019062190b1925b5b6689d7073fdfc8c2976ef8cb0000000000000000000000006b175474e89094c44da98b954eedeac495271d0f","EVMVersion":"Default","Library":"","LicenseType":"BSD-3-Clause","Proxy":"0","Implementation":"","SwarmSource":"bzzr://cea6b2e1b8db0e1ab285ebef092b70fa1105d106515a75b8909e7194cdbaae74"}]}