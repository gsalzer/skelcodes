{"status":"1","message":"OK","result":[{"SourceCode":"// SPDX-License-Identifier: MIT\r\n// Copyright (c) 2021 Varia LLC\r\n/// Wet Code by Erich Dylus & Sarah Brennan\r\n/// Dry Code by LexDAO LLC\r\npragma solidity 0.8.6;\r\n\r\n/// @notice This contract manages function access control, adapted from @boringcrypto (https://github.com/boringcrypto/BoringSolidity).\r\ncontract Ownable {\r\n    address public owner; \r\n    address public pendingOwner;\r\n    \r\n    event TransferOwnership(address indexed from, address indexed to); \r\n    event TransferOwnershipClaim(address indexed from, address indexed to);\r\n    \r\n    /// @notice Initialize contract.\r\n    constructor() {\r\n        owner = msg.sender;\r\n        emit TransferOwnership(address(0), msg.sender);\r\n    }\r\n    \r\n    /// @notice Access control modifier that requires modified function to be called by `owner` account.\r\n    modifier onlyOwner {\r\n        require(msg.sender == owner, 'Ownable:!owner');\r\n        _;\r\n    } \r\n    \r\n    /// @notice The `pendingOwner` can claim `owner` account.\r\n    function claimOwner() external {\r\n        require(msg.sender == pendingOwner, 'Ownable:!pendingOwner');\r\n        emit TransferOwnership(owner, msg.sender);\r\n        owner = msg.sender;\r\n        pendingOwner = address(0);\r\n    }\r\n    \r\n    /// @notice Transfer `owner` account.\r\n    /// @param to Account granted `owner` access control.\r\n    /// @param direct If 'true', ownership is directly transferred. \r\n    function transferOwnership(address to, bool direct) external onlyOwner {\r\n        if (direct) {\r\n            owner = to;\r\n            emit TransferOwnership(msg.sender, to);\r\n        } else {\r\n            pendingOwner = to;\r\n            emit TransferOwnershipClaim(msg.sender, to);\r\n        }\r\n    }\r\n}\r\n\r\n/// @notice This contract allows potential delegates of DAO voting power to ethSign disclosures.\r\ncontract VoteDelegateDisclosure is Ownable {\r\n    uint8 public version; // counter for ricardian template versions\r\n    uint256 public signatures; // counter for ricardian signatures - registration `id`\r\n    string public template; // string stored for ricardian template signature - amendable by `owner`\r\n    \r\n    mapping(address => uint256) public registrations; // maps signatures to registration `id` (revocation, composability, etc.)\r\n    \r\n    event Amend(string template);\r\n    event Sign(uint256 indexed id, string details);\r\n    event Revoke(uint256 indexed id, string details);\r\n    \r\n    constructor(string memory _template) {\r\n        template = _template; // initialize ricardian template\r\n    }\r\n    \r\n    function amend(string calldata _template) external onlyOwner {\r\n        version++; // increment ricardian template version\r\n        template = _template; // replace ricardian template string stored in this contract\r\n        emit Amend(_template); // emit amendment details in event for apps\r\n    }\r\n\r\n    function sign(string calldata details) external returns (uint256 id) {\r\n        signatures++; // increment `signatures` count for registration id\r\n        id = signatures; // gas-optimize stored variable with alias\r\n        registrations[msg.sender] = id; // assign registration id to caller signatory\r\n        emit Sign(id, details); // emit signature details in event for apps\r\n    }\r\n    \r\n    function revoke(uint256 id, string calldata details) external {\r\n        require(registrations[msg.sender] == id, '!signatory'); // confirm caller is `id` signatory\r\n        registrations[msg.sender] = 0; // nullify registration id\r\n        emit Revoke(id, details); // emit revocation details in event for apps\r\n    }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_template\",\"type\":\"string\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"template\",\"type\":\"string\"}],\"name\":\"Amend\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"details\",\"type\":\"string\"}],\"name\":\"Revoke\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"details\",\"type\":\"string\"}],\"name\":\"Sign\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"TransferOwnership\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"TransferOwnershipClaim\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_template\",\"type\":\"string\"}],\"name\":\"amend\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pendingOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"registrations\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"details\",\"type\":\"string\"}],\"name\":\"revoke\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"details\",\"type\":\"string\"}],\"name\":\"sign\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"signatures\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"template\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"direct\",\"type\":\"bool\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"VoteDelegateDisclosure","CompilerVersion":"v0.8.6+commit.11564f7e","OptimizationUsed":"1","Runs":"999999","ConstructorArguments":"0000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000006368747470733a2f2f6769746875622e636f6d2f457269636844796c75732f4f70656e2d536f757263652d4c61772f626c6f622f6d61696e2f666f726d732f6c6567616c2f566f746525323044656c6567617465253230446973636c6f737572652e6d640000000000000000000000000000000000000000000000000000000000","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://8f7690f1f47d3b087ef2454567a4dbb0947ffaa4cba095f132adb9afb2cb67d0"}]}