{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.6.12;\r\n\r\n\r\n    abstract contract Context {\r\n            function _msgSender() internal view virtual returns (address payable) {\r\n                return msg.sender;\r\n            }\r\n    \r\n            function _msgData() internal view virtual returns (bytes memory) {\r\n                this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n                return msg.data;\r\n            }\r\n        }\r\n    contract Ownable is Context {\r\n        address private _owner;\r\n    \r\n        event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n    \r\n        /**\r\n        * @dev Initializes the contract setting the deployer as the initial owner.\r\n        */\r\n        constructor () internal {\r\n            address msgSender = _msgSender();\r\n            _owner = msgSender;\r\n            emit OwnershipTransferred(address(0), msgSender);\r\n        }\r\n    \r\n        /**\r\n        * @dev Returns the address of the current owner.\r\n        */\r\n        function owner() public view returns (address) {\r\n            return _owner;\r\n        }\r\n    \r\n        /**\r\n        * @dev Throws if called by any account other than the owner.\r\n        */\r\n        modifier onlyOwner() {\r\n            require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\r\n            _;\r\n        }\r\n    \r\n        /**\r\n        * @dev Leaves the contract without owner. It will not be possible to call\r\n        * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n        *\r\n        * NOTE: Renouncing ownership will leave the contract without an owner,\r\n        * thereby removing any functionality that is only available to the owner.\r\n        */\r\n        function renounceOwnership() public virtual onlyOwner {\r\n            emit OwnershipTransferred(_owner, address(0));\r\n            _owner = address(0);\r\n        }\r\n    \r\n        /**\r\n        * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n        * Can only be called by the current owner.\r\n        */\r\n        function transferOwnership(address newOwner) public virtual onlyOwner {\r\n            require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n            emit OwnershipTransferred(_owner, newOwner);\r\n            _owner = newOwner;\r\n        }\r\n    }\r\n\r\n\r\n    contract DataStorage is Ownable{\r\n       \r\n        uint256 constant feeAdjusted = 10000;\r\n        struct PoolInfo{\r\n            address lpToken;\r\n            address stakingPool;\r\n        }\r\n\r\n        PoolInfo[] public poolInfo;\r\n        \r\n\r\n        constructor() public {\r\n        poolInfo.push(PoolInfo({\r\n                lpToken: 0x93567318aaBd27E21c52F766d2844Fc6De9Dc738,\r\n                stakingPool: 0x103cc17C2B1586e5Cd9BaD308690bCd0BBe54D5e})); \r\n        poolInfo.push(PoolInfo({\r\n                lpToken: 0x479A8666Ad530af3054209Db74F3C74eCd295f8D,\r\n                stakingPool: 0x4B2e76EbBc9f2923d83F5FBDe695D8733db1a17B}));\r\n        poolInfo.push(PoolInfo({\r\n                lpToken: 0xd59996055b5E0d154f2851A030E207E0dF0343B0,\r\n                stakingPool: 0x0C49066C0808Ee8c673553B7cbd99BCC9ABf113d}));\r\n        }\r\n\r\n        function poolLength() external view returns (uint256) {\r\n            return poolInfo.length;\r\n        }\r\n\r\n        function add(address _lpToken, address _stakingPool) public onlyOwner {\r\n            poolInfo.push(PoolInfo({\r\n                lpToken: _lpToken,\r\n                stakingPool: _stakingPool})); \r\n        }\r\n    }","ABI":"[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_lpToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_stakingPool\",\"type\":\"address\"}],\"name\":\"add\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"poolInfo\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"lpToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"stakingPool\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"poolLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"DataStorage","CompilerVersion":"v0.6.12+commit.27d51765","OptimizationUsed":"1","Runs":"10000","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"ipfs://5c11d40105c0989fc72d2b6c4bde11a18673cf52924248a768af1ca8622b6c66"}]}