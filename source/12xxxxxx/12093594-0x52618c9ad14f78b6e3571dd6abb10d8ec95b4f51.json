{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/hermez/Hermez.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0\\n\\npragma solidity 0.6.12;\\n\\nimport \\\"./lib/InstantWithdrawManager.sol\\\";\\nimport \\\"./interfaces/VerifierRollupInterface.sol\\\";\\nimport \\\"./interfaces/VerifierWithdrawInterface.sol\\\";\\nimport \\\"../interfaces/IHermezAuctionProtocol.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ncontract Hermez is InstantWithdrawManager {\\n    struct VerifierRollup {\\n        VerifierRollupInterface verifierInterface;\\n        uint256 maxTx; // maximum rollup transactions in a batch: L2-tx + L1-tx transactions\\n        uint256 nLevels; // number of levels of the circuit\\n    }\\n\\n    // ERC20 signatures:\\n\\n    // bytes4(keccak256(bytes(\\\"transfer(address,uint256)\\\")));\\n    bytes4 constant _TRANSFER_SIGNATURE = 0xa9059cbb;\\n\\n    // bytes4(keccak256(bytes(\\\"transferFrom(address,address,uint256)\\\")));\\n    bytes4 constant _TRANSFER_FROM_SIGNATURE = 0x23b872dd;\\n\\n    // bytes4(keccak256(bytes(\\\"approve(address,uint256)\\\")));\\n    bytes4 constant _APPROVE_SIGNATURE = 0x095ea7b3;\\n\\n    // ERC20 extensions:\\n\\n    // bytes4(keccak256(bytes(\\\"permit(address,address,uint256,uint256,uint8,bytes32,bytes32)\\\")));\\n    bytes4 constant _PERMIT_SIGNATURE = 0xd505accf;\\n\\n    // First 256 indexes reserved, first user index will be the 256\\n    uint48 constant _RESERVED_IDX = 255;\\n\\n    // IDX 1 is reserved for exits\\n    uint48 constant _EXIT_IDX = 1;\\n\\n    // Max load amount allowed (loadAmount: L1 --> L2)\\n    uint256 constant _LIMIT_LOAD_AMOUNT = (1 << 128);\\n\\n    // Max amount allowed (amount L2 --> L2)\\n    uint256 constant _LIMIT_L2TRANSFER_AMOUNT = (1 << 192);\\n\\n    // Max number of tokens allowed to be registered inside the rollup\\n    uint256 constant _LIMIT_TOKENS = (1 << 32);\\n\\n    // [65 bytes] compressedSignature + [32 bytes] fromBjj-compressed + [4 bytes] tokenId\\n    uint256 constant _L1_COORDINATOR_TOTALBYTES = 101;\\n\\n    // [20 bytes] fromEthAddr + [32 bytes] fromBjj-compressed + [6 bytes] fromIdx +\\n    // [5 bytes] loadAmountFloat40 + [5 bytes] amountFloat40 + [4 bytes] tokenId + [6 bytes] toIdx\\n    uint256 constant _L1_USER_TOTALBYTES = 78;\\n\\n    // User TXs are the TX made by the user with a L1 TX\\n    // Coordinator TXs are the L2 account creation made by the coordinator whose signature\\n    // needs to be verified in L1.\\n    // The maximum number of L1-user TXs and L1-coordinartor-TX is limited by the _MAX_L1_TX\\n    // And the maximum User TX is _MAX_L1_USER_TX\\n\\n    // Maximum L1-user transactions allowed to be queued in a batch\\n    uint256 constant _MAX_L1_USER_TX = 128;\\n\\n    // Maximum L1 transactions allowed to be queued in a batch\\n    uint256 constant _MAX_L1_TX = 256;\\n\\n    // Modulus zkSNARK\\n    uint256 constant _RFIELD = 21888242871839275222246405745257275088548364400416034343698204186575808495617;\\n\\n    // [6 bytes] lastIdx + [6 bytes] newLastIdx  + [32 bytes] stateRoot  + [32 bytes] newStRoot  + [32 bytes] newExitRoot +\\n    // [_MAX_L1_TX * _L1_USER_TOTALBYTES bytes] l1TxsData + totall1L2TxsDataLength + feeIdxCoordinatorLength + [2 bytes] chainID + [4 bytes] batchNum =\\n    // 18546 bytes + totall1L2TxsDataLength + feeIdxCoordinatorLength\\n\\n    uint256 constant _INPUT_SHA_CONSTANT_BYTES = 20082;\\n\\n    uint8 public constant ABSOLUTE_MAX_L1L2BATCHTIMEOUT = 240;\\n\\n    // This ethereum address is used internally for rollup accounts that don't have ethereum address, only Babyjubjub\\n    // This non-ethereum accounts can be created by the coordinator and allow users to have a rollup\\n    // account without needing an ethereum address\\n    address constant _ETH_ADDRESS_INTERNAL_ONLY = address(\\n        0xFFfFfFffFFfffFFfFFfFFFFFffFFFffffFfFFFfF\\n    );\\n\\n    // Verifiers array\\n    VerifierRollup[] public rollupVerifiers;\\n\\n    // Withdraw verifier interface\\n    VerifierWithdrawInterface public withdrawVerifier;\\n\\n    // Last account index created inside the rollup\\n    uint48 public lastIdx;\\n\\n    // Last batch forged\\n    uint32 public lastForgedBatch;\\n\\n    // Each batch forged will have a correlated 'state root'\\n    mapping(uint32 => uint256) public stateRootMap;\\n\\n    // Each batch forged will have a correlated 'exit tree' represented by the exit root\\n    mapping(uint32 => uint256) public exitRootsMap;\\n\\n    // Each batch forged will have a correlated 'l1L2TxDataHash'\\n    mapping(uint32 => bytes32) public l1L2TxsDataHashMap;\\n\\n    // Mapping of exit nullifiers, only allowing each withdrawal to be made once\\n    // rootId => (Idx => true/false)\\n    mapping(uint32 => mapping(uint48 => bool)) public exitNullifierMap;\\n\\n    // List of ERC20 tokens that can be used in rollup\\n    // ID = 0 will be reserved for ether\\n    address[] public tokenList;\\n\\n    // Mapping addres of the token, with the tokenID associated\\n    mapping(address => uint256) public tokenMap;\\n\\n    // Fee for adding a new token to the rollup in HEZ tokens\\n    uint256 public feeAddToken;\\n\\n    // Contract interface of the hermez auction\\n    IHermezAuctionProtocol public hermezAuctionContract;\\n\\n    // Map of queues of L1-user-tx transactions, the transactions are stored in bytes32 sequentially\\n    // The coordinator is forced to forge the next queue in the next L1-L2-batch\\n    mapping(uint32 => bytes) public mapL1TxQueue;\\n\\n    // Ethereum block where the last L1-L2-batch was forged\\n    uint64 public lastL1L2Batch;\\n\\n    // Queue index that will be forged in the next L1-L2-batch\\n    uint32 public nextL1ToForgeQueue;\\n\\n    // Queue index wich will be filled with the following L1-User-Tx\\n    uint32 public nextL1FillingQueue;\\n\\n    // Max ethereum blocks after the last L1-L2-batch, when exceeds the timeout only L1-L2-batch are allowed\\n    uint8 public forgeL1L2BatchTimeout;\\n\\n    // HEZ token address\\n    address public tokenHEZ;\\n\\n    // Event emitted when a L1-user transaction is called and added to the nextL1FillingQueue queue\\n    event L1UserTxEvent(\\n        uint32 indexed queueIndex,\\n        uint8 indexed position, // Position inside the queue where the TX resides\\n        bytes l1UserTx\\n    );\\n\\n    // Event emitted when a new token is added\\n    event AddToken(address indexed tokenAddress, uint32 tokenID);\\n\\n    // Event emitted every time a batch is forged\\n    event ForgeBatch(uint32 indexed batchNum, uint16 l1UserTxsLen);\\n\\n    // Event emitted when the governance update the `forgeL1L2BatchTimeout`\\n    event UpdateForgeL1L2BatchTimeout(uint8 newForgeL1L2BatchTimeout);\\n\\n    // Event emitted when the governance update the `feeAddToken`\\n    event UpdateFeeAddToken(uint256 newFeeAddToken);\\n\\n    // Event emitted when a withdrawal is done\\n    event WithdrawEvent(\\n        uint48 indexed idx,\\n        uint32 indexed numExitRoot,\\n        bool indexed instantWithdraw\\n    );\\n\\n    // Event emitted when the contract is initialized\\n    event InitializeHermezEvent(\\n        uint8 forgeL1L2BatchTimeout,\\n        uint256 feeAddToken,\\n        uint64 withdrawalDelay\\n    );\\n\\n    /**\\n     * @dev Initializer function (equivalent to the constructor). Since we use\\n     * upgradeable smartcontracts the state vars have to be initialized here.\\n     */\\n    function initializeHermez(\\n        address[] memory _verifiers,\\n        uint256[] memory _verifiersParams,\\n        address _withdrawVerifier,\\n        address _hermezAuctionContract,\\n        address _tokenHEZ,\\n        uint8 _forgeL1L2BatchTimeout,\\n        uint256 _feeAddToken,\\n        address _poseidon2Elements,\\n        address _poseidon3Elements,\\n        address _poseidon4Elements,\\n        address _hermezGovernanceAddress,\\n        uint64 _withdrawalDelay,\\n        address _withdrawDelayerContract\\n    ) external initializer {\\n        require(\\n            _hermezAuctionContract != address(0) &&\\n                _withdrawDelayerContract != address(0),\\n            \\\"Hermez::initializeHermez ADDRESS_0_NOT_VALID\\\"\\n        );\\n\\n        // set state variables\\n        _initializeVerifiers(_verifiers, _verifiersParams);\\n        withdrawVerifier = VerifierWithdrawInterface(_withdrawVerifier);\\n        hermezAuctionContract = IHermezAuctionProtocol(_hermezAuctionContract);\\n        tokenHEZ = _tokenHEZ;\\n        forgeL1L2BatchTimeout = _forgeL1L2BatchTimeout;\\n        feeAddToken = _feeAddToken;\\n\\n        // set default state variables\\n        lastIdx = _RESERVED_IDX;\\n        // lastL1L2Batch = 0 --> first batch forced to be L1Batch\\n        // nextL1ToForgeQueue = 0 --> First queue will be forged\\n        nextL1FillingQueue = 1;\\n        // stateRootMap[0] = 0 --> genesis batch will have root = 0\\n        tokenList.push(address(0)); // Token 0 is ETH\\n\\n        // initialize libs\\n        _initializeHelpers(\\n            _poseidon2Elements,\\n            _poseidon3Elements,\\n            _poseidon4Elements\\n        );\\n        _initializeWithdraw(\\n            _hermezGovernanceAddress,\\n            _withdrawalDelay,\\n            _withdrawDelayerContract\\n        );\\n        emit InitializeHermezEvent(\\n            _forgeL1L2BatchTimeout,\\n            _feeAddToken,\\n            _withdrawalDelay\\n        );\\n    }\\n\\n    //////////////\\n    // Coordinator operations\\n    /////////////\\n\\n    /**\\n     * @dev Forge a new batch providing the L2 Transactions, L1Corrdinator transactions and the proof.\\n     * If the proof is succesfully verified, update the current state, adding a new state and exit root.\\n     * In order to optimize the gas consumption the parameters `encodedL1CoordinatorTx`, `l1L2TxsData` and `feeIdxCoordinator`\\n     * are read directly from the calldata using assembly with the instruction `calldatacopy`\\n     * @param newLastIdx New total rollup accounts\\n     * @param newStRoot New state root\\n     * @param newExitRoot New exit root\\n     * @param encodedL1CoordinatorTx Encoded L1-coordinator transactions\\n     * @param l1L2TxsData Encoded l2 data\\n     * @param feeIdxCoordinator Encoded idx accounts of the coordinator where the fees will be payed\\n     * @param verifierIdx Verifier index\\n     * @param l1Batch Indicates if this batch will be L2 or L1-L2\\n     * @param proofA zk-snark input\\n     * @param proofB zk-snark input\\n     * @param proofC zk-snark input\\n     * Events: `ForgeBatch`\\n     */\\n    function forgeBatch(\\n        uint48 newLastIdx,\\n        uint256 newStRoot,\\n        uint256 newExitRoot,\\n        bytes calldata encodedL1CoordinatorTx,\\n        bytes calldata l1L2TxsData,\\n        bytes calldata feeIdxCoordinator,\\n        uint8 verifierIdx,\\n        bool l1Batch,\\n        uint256[2] calldata proofA,\\n        uint256[2][2] calldata proofB,\\n        uint256[2] calldata proofC\\n    ) external virtual {\\n        // Assure data availability from regular ethereum nodes\\n        // We include this line because it's easier to track the transaction data, as it will never be in an internal TX.\\n        // In general this makes no sense, as callling this function from another smart contract will have to pay the calldata twice.\\n        // But forcing, it avoids having to check.\\n        require(\\n            msg.sender == tx.origin,\\n            \\\"Hermez::forgeBatch: INTENAL_TX_NOT_ALLOWED\\\"\\n        );\\n\\n        // ask the auction if this coordinator is allow to forge\\n        require(\\n            hermezAuctionContract.canForge(msg.sender, block.number) == true,\\n            \\\"Hermez::forgeBatch: AUCTION_DENIED\\\"\\n        );\\n\\n        if (!l1Batch) {\\n            require(\\n                block.number < (lastL1L2Batch + forgeL1L2BatchTimeout), // No overflow since forgeL1L2BatchTimeout is an uint8\\n                \\\"Hermez::forgeBatch: L1L2BATCH_REQUIRED\\\"\\n            );\\n        }\\n\\n        // calculate input\\n        uint256 input = _constructCircuitInput(\\n            newLastIdx,\\n            newStRoot,\\n            newExitRoot,\\n            l1Batch,\\n            verifierIdx\\n        );\\n\\n        // verify proof\\n        require(\\n            rollupVerifiers[verifierIdx].verifierInterface.verifyProof(\\n                proofA,\\n                proofB,\\n                proofC,\\n                [input]\\n            ),\\n            \\\"Hermez::forgeBatch: INVALID_PROOF\\\"\\n        );\\n\\n        // update state\\n        lastForgedBatch++;\\n        lastIdx = newLastIdx;\\n        stateRootMap[lastForgedBatch] = newStRoot;\\n        exitRootsMap[lastForgedBatch] = newExitRoot;\\n        l1L2TxsDataHashMap[lastForgedBatch] = sha256(l1L2TxsData);\\n\\n        uint16 l1UserTxsLen;\\n        if (l1Batch) {\\n            // restart the timeout\\n            lastL1L2Batch = uint64(block.number);\\n            // clear current queue\\n            l1UserTxsLen = _clearQueue();\\n        }\\n\\n        // auction must be aware that a batch is being forged\\n        hermezAuctionContract.forge(msg.sender);\\n\\n        emit ForgeBatch(lastForgedBatch, l1UserTxsLen);\\n    }\\n\\n    //////////////\\n    // User L1 rollup tx\\n    /////////////\\n\\n    // This are all the possible L1-User transactions:\\n    // | fromIdx | toIdx | loadAmountF | amountF | tokenID(SC) | babyPubKey |           l1-user-TX            |\\n    // |:-------:|:-----:|:-----------:|:-------:|:-----------:|:----------:|:-------------------------------:|\\n    // |    0    |   0   |      0      |  0(SC)  |      X      |  !=0(SC)   |          createAccount          |\\n    // |    0    |   0   |     !=0     |  0(SC)  |      X      |  !=0(SC)   |      createAccountDeposit       |\\n    // |    0    | 255+  |      X      |    X    |      X      |  !=0(SC)   | createAccountDepositAndTransfer |\\n    // |  255+   |   0   |      X      |  0(SC)  |      X      |   0(SC)    |             Deposit             |\\n    // |  255+   |   1   |      0      |    X    |      X      |   0(SC)    |              Exit               |\\n    // |  255+   | 255+  |      0      |    X    |      X      |   0(SC)    |            Transfer             |\\n    // |  255+   | 255+  |     !=0     |    X    |      X      |   0(SC)    |       DepositAndTransfer        |\\n    // As can be seen in the table the type of transaction is determined basically by the \\\"fromIdx\\\" and \\\"toIdx\\\"\\n    // The 'X' means that can be any valid value and does not change the l1-user-tx type\\n    // Other parameters must be consistent, for example, if toIdx is 0, amountF must be 0, because there's no L2 transfer\\n\\n    /**\\n     * @dev Create a new rollup l1 user transaction\\n     * @param babyPubKey Public key babyjubjub represented as point: sign + (Ay)\\n     * @param fromIdx Index leaf of sender account or 0 if create new account\\n     * @param loadAmountF Amount from L1 to L2 to sender account or new account\\n     * @param amountF Amount transfered between L2 accounts\\n     * @param tokenID Token identifier\\n     * @param toIdx Index leaf of recipient account, or _EXIT_IDX if exit, or 0 if not transfer\\n     * Events: `L1UserTxEvent`\\n     */\\n    function addL1Transaction(\\n        uint256 babyPubKey,\\n        uint48 fromIdx,\\n        uint40 loadAmountF,\\n        uint40 amountF,\\n        uint32 tokenID,\\n        uint48 toIdx,\\n        bytes calldata permit\\n    ) external payable {\\n        // check tokenID\\n        require(\\n            tokenID < tokenList.length,\\n            \\\"Hermez::addL1Transaction: TOKEN_NOT_REGISTERED\\\"\\n        );\\n\\n        // check loadAmount\\n        uint256 loadAmount = _float2Fix(loadAmountF);\\n        require(\\n            loadAmount < _LIMIT_LOAD_AMOUNT,\\n            \\\"Hermez::addL1Transaction: LOADAMOUNT_EXCEED_LIMIT\\\"\\n        );\\n\\n        // deposit token or ether\\n        if (loadAmount > 0) {\\n            if (tokenID == 0) {\\n                require(\\n                    loadAmount == msg.value,\\n                    \\\"Hermez::addL1Transaction: LOADAMOUNT_ETH_DOES_NOT_MATCH\\\"\\n                );\\n            } else {\\n                require(\\n                    msg.value == 0,\\n                    \\\"Hermez::addL1Transaction: MSG_VALUE_NOT_EQUAL_0\\\"\\n                );\\n                if (permit.length != 0) {\\n                    _permit(tokenList[tokenID], loadAmount, permit);\\n                }\\n                uint256 prevBalance = IERC20(tokenList[tokenID]).balanceOf(\\n                    address(this)\\n                );\\n                _safeTransferFrom(\\n                    tokenList[tokenID],\\n                    msg.sender,\\n                    address(this),\\n                    loadAmount\\n                );\\n                uint256 postBalance = IERC20(tokenList[tokenID]).balanceOf(\\n                    address(this)\\n                );\\n                require(\\n                    postBalance - prevBalance == loadAmount,\\n                    \\\"Hermez::addL1Transaction: LOADAMOUNT_ERC20_DOES_NOT_MATCH\\\"\\n                );\\n            }\\n        }\\n\\n        // perform L1 User Tx\\n        _addL1Transaction(\\n            msg.sender,\\n            babyPubKey,\\n            fromIdx,\\n            loadAmountF,\\n            amountF,\\n            tokenID,\\n            toIdx\\n        );\\n    }\\n\\n    /**\\n     * @dev Create a new rollup l1 user transaction\\n     * @param ethAddress Ethereum addres of the sender account or new account\\n     * @param babyPubKey Public key babyjubjub represented as point: sign + (Ay)\\n     * @param fromIdx Index leaf of sender account or 0 if create new account\\n     * @param loadAmountF Amount from L1 to L2 to sender account or new account\\n     * @param amountF Amount transfered between L2 accounts\\n     * @param tokenID Token identifier\\n     * @param toIdx Index leaf of recipient account, or _EXIT_IDX if exit, or 0 if not transfer\\n     * Events: `L1UserTxEvent`\\n     */\\n    function _addL1Transaction(\\n        address ethAddress,\\n        uint256 babyPubKey,\\n        uint48 fromIdx,\\n        uint40 loadAmountF,\\n        uint40 amountF,\\n        uint32 tokenID,\\n        uint48 toIdx\\n    ) internal {\\n        uint256 amount = _float2Fix(amountF);\\n        require(\\n            amount < _LIMIT_L2TRANSFER_AMOUNT,\\n            \\\"Hermez::_addL1Transaction: AMOUNT_EXCEED_LIMIT\\\"\\n        );\\n\\n        // toIdx can be: 0, _EXIT_IDX or (toIdx > _RESERVED_IDX)\\n        if (toIdx == 0) {\\n            require(\\n                (amount == 0),\\n                \\\"Hermez::_addL1Transaction: AMOUNT_MUST_BE_0_IF_NOT_TRANSFER\\\"\\n            );\\n        } else {\\n            if ((toIdx == _EXIT_IDX)) {\\n                require(\\n                    (loadAmountF == 0),\\n                    \\\"Hermez::_addL1Transaction: LOADAMOUNT_MUST_BE_0_IF_EXIT\\\"\\n                );\\n            } else {\\n                require(\\n                    ((toIdx > _RESERVED_IDX) && (toIdx <= lastIdx)),\\n                    \\\"Hermez::_addL1Transaction: INVALID_TOIDX\\\"\\n                );\\n            }\\n        }\\n        // fromIdx can be: 0 if create account or (fromIdx > _RESERVED_IDX)\\n        if (fromIdx == 0) {\\n            require(\\n                babyPubKey != 0,\\n                \\\"Hermez::_addL1Transaction: INVALID_CREATE_ACCOUNT_WITH_NO_BABYJUB\\\"\\n            );\\n        } else {\\n            require(\\n                (fromIdx > _RESERVED_IDX) && (fromIdx <= lastIdx),\\n                \\\"Hermez::_addL1Transaction: INVALID_FROMIDX\\\"\\n            );\\n            require(\\n                babyPubKey == 0,\\n                \\\"Hermez::_addL1Transaction: BABYJUB_MUST_BE_0_IF_NOT_CREATE_ACCOUNT\\\"\\n            );\\n        }\\n\\n        _l1QueueAddTx(\\n            ethAddress,\\n            babyPubKey,\\n            fromIdx,\\n            loadAmountF,\\n            amountF,\\n            tokenID,\\n            toIdx\\n        );\\n    }\\n\\n    //////////////\\n    // User operations\\n    /////////////\\n\\n    /**\\n     * @dev Withdraw to retrieve the tokens from the exit tree to the owner account\\n     * Before this call an exit transaction must be done\\n     * @param tokenID Token identifier\\n     * @param amount Amount to retrieve\\n     * @param babyPubKey Public key babyjubjub represented as point: sign + (Ay)\\n     * @param numExitRoot Batch number where the exit transaction has been done\\n     * @param siblings Siblings to demonstrate merkle tree proof\\n     * @param idx Index of the exit tree account\\n     * @param instantWithdraw true if is an instant withdraw\\n     * Events: `WithdrawEvent`\\n     */\\n    function withdrawMerkleProof(\\n        uint32 tokenID,\\n        uint192 amount,\\n        uint256 babyPubKey,\\n        uint32 numExitRoot,\\n        uint256[] memory siblings,\\n        uint48 idx,\\n        bool instantWithdraw\\n    ) external {\\n        // numExitRoot is not checked because an invalid numExitRoot will bring to a 0 root\\n        // and this is an empty tree.\\n        // in case of instant withdraw assure that is available\\n        if (instantWithdraw) {\\n            require(\\n                _processInstantWithdrawal(tokenList[tokenID], amount),\\n                \\\"Hermez::withdrawMerkleProof: INSTANT_WITHDRAW_WASTED_FOR_THIS_USD_RANGE\\\"\\n            );\\n        }\\n\\n        // build 'key' and 'value' for exit tree\\n        uint256[4] memory arrayState = _buildTreeState(\\n            tokenID,\\n            0,\\n            amount,\\n            babyPubKey,\\n            msg.sender\\n        );\\n        uint256 stateHash = _hash4Elements(arrayState);\\n        // get exit root given its index depth\\n        uint256 exitRoot = exitRootsMap[numExitRoot];\\n        // check exit tree nullifier\\n        require(\\n            exitNullifierMap[numExitRoot][idx] == false,\\n            \\\"Hermez::withdrawMerkleProof: WITHDRAW_ALREADY_DONE\\\"\\n        );\\n        // check sparse merkle tree proof\\n        require(\\n            _smtVerifier(exitRoot, siblings, idx, stateHash) == true,\\n            \\\"Hermez::withdrawMerkleProof: SMT_PROOF_INVALID\\\"\\n        );\\n\\n        // set nullifier\\n        exitNullifierMap[numExitRoot][idx] = true;\\n\\n        _withdrawFunds(amount, tokenID, instantWithdraw);\\n\\n        emit WithdrawEvent(idx, numExitRoot, instantWithdraw);\\n    }\\n\\n    /**\\n     * @dev Withdraw to retrieve the tokens from the exit tree to the owner account\\n     * Before this call an exit transaction must be done\\n     * @param proofA zk-snark input\\n     * @param proofB zk-snark input\\n     * @param proofC zk-snark input\\n     * @param tokenID Token identifier\\n     * @param amount Amount to retrieve\\n     * @param numExitRoot Batch number where the exit transaction has been done\\n     * @param idx Index of the exit tree account\\n     * @param instantWithdraw true if is an instant withdraw\\n     * Events: `WithdrawEvent`\\n     */\\n    function withdrawCircuit(\\n        uint256[2] calldata proofA,\\n        uint256[2][2] calldata proofB,\\n        uint256[2] calldata proofC,\\n        uint32 tokenID,\\n        uint192 amount,\\n        uint32 numExitRoot,\\n        uint48 idx,\\n        bool instantWithdraw\\n    ) external {\\n        // in case of instant withdraw assure that is available\\n        if (instantWithdraw) {\\n            require(\\n                _processInstantWithdrawal(tokenList[tokenID], amount),\\n                \\\"Hermez::withdrawCircuit: INSTANT_WITHDRAW_WASTED_FOR_THIS_USD_RANGE\\\"\\n            );\\n        }\\n        require(\\n            exitNullifierMap[numExitRoot][idx] == false,\\n            \\\"Hermez::withdrawCircuit: WITHDRAW_ALREADY_DONE\\\"\\n        );\\n\\n        // get exit root given its index depth\\n        uint256 exitRoot = exitRootsMap[numExitRoot];\\n\\n        uint256 input = uint256(\\n            sha256(abi.encodePacked(exitRoot, msg.sender, tokenID, amount, idx))\\n        ) % _RFIELD;\\n        // verify zk-snark circuit\\n        require(\\n            withdrawVerifier.verifyProof(proofA, proofB, proofC, [input]) ==\\n                true,\\n            \\\"Hermez::withdrawCircuit: INVALID_ZK_PROOF\\\"\\n        );\\n\\n        // set nullifier\\n        exitNullifierMap[numExitRoot][idx] = true;\\n\\n        _withdrawFunds(amount, tokenID, instantWithdraw);\\n\\n        emit WithdrawEvent(idx, numExitRoot, instantWithdraw);\\n    }\\n\\n    //////////////\\n    // Governance methods\\n    /////////////\\n    /**\\n     * @dev Update ForgeL1L2BatchTimeout\\n     * @param newForgeL1L2BatchTimeout New ForgeL1L2BatchTimeout\\n     * Events: `UpdateForgeL1L2BatchTimeout`\\n     */\\n    function updateForgeL1L2BatchTimeout(uint8 newForgeL1L2BatchTimeout)\\n        external\\n        onlyGovernance\\n    {\\n        require(\\n            newForgeL1L2BatchTimeout <= ABSOLUTE_MAX_L1L2BATCHTIMEOUT,\\n            \\\"Hermez::updateForgeL1L2BatchTimeout: MAX_FORGETIMEOUT_EXCEED\\\"\\n        );\\n        forgeL1L2BatchTimeout = newForgeL1L2BatchTimeout;\\n        emit UpdateForgeL1L2BatchTimeout(newForgeL1L2BatchTimeout);\\n    }\\n\\n    /**\\n     * @dev Update feeAddToken\\n     * @param newFeeAddToken New feeAddToken\\n     * Events: `UpdateFeeAddToken`\\n     */\\n    function updateFeeAddToken(uint256 newFeeAddToken) external onlyGovernance {\\n        feeAddToken = newFeeAddToken;\\n        emit UpdateFeeAddToken(newFeeAddToken);\\n    }\\n\\n    //////////////\\n    // Viewers\\n    /////////////\\n\\n    /**\\n     * @dev Retrieve the number of tokens added in rollup\\n     * @return Number of tokens added in rollup\\n     */\\n    function registerTokensCount() public view returns (uint256) {\\n        return tokenList.length;\\n    }\\n\\n    /**\\n     * @dev Retrieve the number of rollup verifiers\\n     * @return Number of verifiers\\n     */\\n    function rollupVerifiersLength() public view returns (uint256) {\\n        return rollupVerifiers.length;\\n    }\\n\\n    //////////////\\n    // Internal/private methods\\n    /////////////\\n\\n    /**\\n     * @dev Inclusion of a new token to the rollup\\n     * @param tokenAddress Smart contract token address\\n     * Events: `AddToken`\\n     */\\n    function addToken(address tokenAddress, bytes calldata permit) public {\\n        require(\\n            IERC20(tokenAddress).totalSupply() > 0,\\n            \\\"Hermez::addToken: TOTAL_SUPPLY_ZERO\\\"\\n        );\\n        uint256 currentTokens = tokenList.length;\\n        require(\\n            currentTokens < _LIMIT_TOKENS,\\n            \\\"Hermez::addToken: TOKEN_LIST_FULL\\\"\\n        );\\n        require(\\n            tokenAddress != address(0),\\n            \\\"Hermez::addToken: ADDRESS_0_INVALID\\\"\\n        );\\n        require(tokenMap[tokenAddress] == 0, \\\"Hermez::addToken: ALREADY_ADDED\\\");\\n\\n        if (msg.sender != hermezGovernanceAddress) {\\n            // permit and transfer HEZ tokens\\n            if (permit.length != 0) {\\n                _permit(tokenHEZ, feeAddToken, permit);\\n            }\\n            _safeTransferFrom(\\n                tokenHEZ,\\n                msg.sender,\\n                hermezGovernanceAddress,\\n                feeAddToken\\n            );\\n        }\\n\\n        tokenList.push(tokenAddress);\\n        tokenMap[tokenAddress] = currentTokens;\\n\\n        emit AddToken(tokenAddress, uint32(currentTokens));\\n    }\\n\\n    /**\\n     * @dev Initialize verifiers\\n     * @param _verifiers verifiers address array\\n     * @param _verifiersParams encoeded maxTx and nlevels of the verifier as follows:\\n     * [8 bits]nLevels || [248 bits] maxTx\\n     */\\n    function _initializeVerifiers(\\n        address[] memory _verifiers,\\n        uint256[] memory _verifiersParams\\n    ) internal {\\n        for (uint256 i = 0; i < _verifiers.length; i++) {\\n            rollupVerifiers.push(\\n                VerifierRollup({\\n                    verifierInterface: VerifierRollupInterface(_verifiers[i]),\\n                    maxTx: (_verifiersParams[i] << 8) >> 8,\\n                    nLevels: _verifiersParams[i] >> (256 - 8)\\n                })\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Add L1-user-tx, add it to the correspoding queue\\n     * l1Tx L1-user-tx encoded in bytes as follows: [20 bytes] fromEthAddr || [32 bytes] fromBjj-compressed || [4 bytes] fromIdx ||\\n     * [5 bytes] loadAmountFloat40 || [5 bytes] amountFloat40 || [4 bytes] tokenId || [4 bytes] toIdx\\n     * @param ethAddress Ethereum address of the rollup account\\n     * @param babyPubKey Public key babyjubjub represented as point: sign + (Ay)\\n     * @param fromIdx Index account of the sender account\\n     * @param loadAmountF Amount from L1 to L2\\n     * @param amountF  Amount transfered between L2 accounts\\n     * @param tokenID  Token identifier\\n     * @param toIdx Index leaf of recipient account\\n     * Events: `L1UserTxEvent`\\n     */\\n    function _l1QueueAddTx(\\n        address ethAddress,\\n        uint256 babyPubKey,\\n        uint48 fromIdx,\\n        uint40 loadAmountF,\\n        uint40 amountF,\\n        uint32 tokenID,\\n        uint48 toIdx\\n    ) internal {\\n        bytes memory l1Tx = abi.encodePacked(\\n            ethAddress,\\n            babyPubKey,\\n            fromIdx,\\n            loadAmountF,\\n            amountF,\\n            tokenID,\\n            toIdx\\n        );\\n\\n        uint256 currentPosition = mapL1TxQueue[nextL1FillingQueue].length /\\n            _L1_USER_TOTALBYTES;\\n\\n        // concatenate storage byte array with the new l1Tx\\n        _concatStorage(mapL1TxQueue[nextL1FillingQueue], l1Tx);\\n\\n        emit L1UserTxEvent(nextL1FillingQueue, uint8(currentPosition), l1Tx);\\n        if (currentPosition + 1 >= _MAX_L1_USER_TX) {\\n            nextL1FillingQueue++;\\n        }\\n    }\\n\\n    /**\\n     * @dev return the current L1-user-tx queue adding the L1-coordinator-tx\\n     * @param ptr Ptr where L1 data is set\\n     * @param l1Batch if true, the include l1TXs from the queue\\n     * [1 byte] V(ecdsa signature) || [32 bytes] S(ecdsa signature) ||\\n     * [32 bytes] R(ecdsa signature) || [32 bytes] fromBjj-compressed || [4 bytes] tokenId\\n     */\\n    function _buildL1Data(uint256 ptr, bool l1Batch) internal view {\\n        uint256 dPtr;\\n        uint256 dLen;\\n\\n        (dPtr, dLen) = _getCallData(3);\\n        uint256 l1CoordinatorLength = dLen / _L1_COORDINATOR_TOTALBYTES;\\n\\n        uint256 l1UserLength;\\n        bytes memory l1UserTxQueue;\\n        if (l1Batch) {\\n            l1UserTxQueue = mapL1TxQueue[nextL1ToForgeQueue];\\n            l1UserLength = l1UserTxQueue.length / _L1_USER_TOTALBYTES;\\n        } else {\\n            l1UserLength = 0;\\n        }\\n\\n        require(\\n            l1UserLength + l1CoordinatorLength <= _MAX_L1_TX,\\n            \\\"Hermez::_buildL1Data: L1_TX_OVERFLOW\\\"\\n        );\\n\\n        if (l1UserLength > 0) {\\n            // Copy the queue to the ptr and update ptr\\n            assembly {\\n                let ptrFrom := add(l1UserTxQueue, 0x20)\\n                let ptrTo := ptr\\n                ptr := add(ptr, mul(l1UserLength, _L1_USER_TOTALBYTES))\\n                for {\\n\\n                } lt(ptrTo, ptr) {\\n                    ptrTo := add(ptrTo, 32)\\n                    ptrFrom := add(ptrFrom, 32)\\n                } {\\n                    mstore(ptrTo, mload(ptrFrom))\\n                }\\n            }\\n        }\\n\\n        for (uint256 i = 0; i < l1CoordinatorLength; i++) {\\n            uint8 v; // L1-Coordinator-Tx bytes[0]\\n            bytes32 s; // L1-Coordinator-Tx bytes[1:32]\\n            bytes32 r; // L1-Coordinator-Tx bytes[33:64]\\n            bytes32 babyPubKey; // L1-Coordinator-Tx bytes[65:96]\\n            uint256 tokenID; // L1-Coordinator-Tx bytes[97:100]\\n\\n            assembly {\\n                v := byte(0, calldataload(dPtr))\\n                dPtr := add(dPtr, 1)\\n\\n                s := calldataload(dPtr)\\n                dPtr := add(dPtr, 32)\\n\\n                r := calldataload(dPtr)\\n                dPtr := add(dPtr, 32)\\n\\n                babyPubKey := calldataload(dPtr)\\n                dPtr := add(dPtr, 32)\\n\\n                tokenID := shr(224, calldataload(dPtr)) // 256-32 = 224\\n                dPtr := add(dPtr, 4)\\n            }\\n\\n            require(\\n                tokenID < tokenList.length,\\n                \\\"Hermez::_buildL1Data: TOKEN_NOT_REGISTERED\\\"\\n            );\\n\\n            address ethAddress = _ETH_ADDRESS_INTERNAL_ONLY;\\n\\n            // v must be >=27 --> EIP-155, v == 0 means no signature\\n            if (v != 0) {\\n                ethAddress = _checkSig(babyPubKey, r, s, v);\\n            }\\n\\n            // add L1-Coordinator-Tx to the L1-tx queue\\n            assembly {\\n                mstore(ptr, shl(96, ethAddress)) // 256 - 160 = 96, write ethAddress: bytes[0:19]\\n                ptr := add(ptr, 20)\\n\\n                mstore(ptr, babyPubKey) // write babyPubKey: bytes[20:51]\\n                ptr := add(ptr, 32)\\n\\n                mstore(ptr, 0) // write zeros\\n                // [6 Bytes] fromIdx ,\\n                // [5 bytes] loadAmountFloat40 .\\n                // [5 bytes] amountFloat40\\n                ptr := add(ptr, 16)\\n\\n                mstore(ptr, shl(224, tokenID)) // 256 - 32 = 224 write tokenID: bytes[62:65]\\n                ptr := add(ptr, 4)\\n\\n                mstore(ptr, 0) // write [6 Bytes] toIdx\\n                ptr := add(ptr, 6)\\n            }\\n        }\\n\\n        _fillZeros(\\n            ptr,\\n            (_MAX_L1_TX - l1UserLength - l1CoordinatorLength) *\\n                _L1_USER_TOTALBYTES\\n        );\\n    }\\n\\n    /**\\n     * @dev Calculate the circuit input hashing all the elements\\n     * @param newLastIdx New total rollup accounts\\n     * @param newStRoot New state root\\n     * @param newExitRoot New exit root\\n     * @param l1Batch Indicates if this forge will be L2 or L1-L2\\n     * @param verifierIdx Verifier index\\n     */\\n    function _constructCircuitInput(\\n        uint48 newLastIdx,\\n        uint256 newStRoot,\\n        uint256 newExitRoot,\\n        bool l1Batch,\\n        uint8 verifierIdx\\n    ) internal view returns (uint256) {\\n        uint256 oldStRoot = stateRootMap[lastForgedBatch];\\n        uint256 oldLastIdx = lastIdx;\\n        uint256 dPtr; // Pointer to the calldata parameter data\\n        uint256 dLen; // Length of the calldata parameter\\n\\n        // l1L2TxsData = l2Bytes * maxTx =\\n        // ([(nLevels / 8) bytes] fromIdx + [(nLevels / 8) bytes] toIdx + [5 bytes] amountFloat40 + [1 bytes] fee) * maxTx =\\n        // ((nLevels / 4) bytes + 3 bytes) * maxTx\\n        uint256 l1L2TxsDataLength = ((rollupVerifiers[verifierIdx].nLevels /\\n            8) * 2 +\\n            5 + 1) * rollupVerifiers[verifierIdx].maxTx;\\n\\n        // [(nLevels / 8) bytes]\\n        uint256 feeIdxCoordinatorLength = (rollupVerifiers[verifierIdx]\\n            .nLevels / 8) * 64;\\n\\n        // the concatenation of all arguments could be done with abi.encodePacked(args), but is suboptimal, especially with a large bytes arrays\\n        // [6 bytes] lastIdx +\\n        // [6 bytes] newLastIdx  +\\n        // [32 bytes] stateRoot  +\\n        // [32 bytes] newStRoot  +\\n        // [32 bytes] newExitRoot +\\n        // [_MAX_L1_TX * _L1_USER_TOTALBYTES bytes] l1TxsData +\\n        // totall1L2TxsDataLength +\\n        // feeIdxCoordinatorLength +\\n        // [2 bytes] chainID +\\n        // [4 bytes] batchNum =\\n        // _INPUT_SHA_CONSTANT_BYTES bytes +  totall1L2TxsDataLength + feeIdxCoordinatorLength\\n        bytes memory inputBytes;\\n\\n        uint256 ptr; // Position for writing the bufftr\\n\\n        assembly {\\n            let inputBytesLength := add(\\n                add(_INPUT_SHA_CONSTANT_BYTES, l1L2TxsDataLength),\\n                feeIdxCoordinatorLength\\n            )\\n\\n            // Set inputBytes to the next free memory space\\n            inputBytes := mload(0x40)\\n            // Reserve the memory. 32 for the length , the input bytes and 32\\n            // extra bytes at the end for word manipulation\\n            mstore(0x40, add(add(inputBytes, 0x40), inputBytesLength))\\n\\n            // Set the actua length of the input bytes\\n            mstore(inputBytes, inputBytesLength)\\n\\n            // Set The Ptr at the begining of the inputPubber\\n            ptr := add(inputBytes, 32)\\n\\n            mstore(ptr, shl(208, oldLastIdx)) // 256-48 = 208\\n            ptr := add(ptr, 6)\\n\\n            mstore(ptr, shl(208, newLastIdx)) // 256-48 = 208\\n            ptr := add(ptr, 6)\\n\\n            mstore(ptr, oldStRoot)\\n            ptr := add(ptr, 32)\\n\\n            mstore(ptr, newStRoot)\\n            ptr := add(ptr, 32)\\n\\n            mstore(ptr, newExitRoot)\\n            ptr := add(ptr, 32)\\n        }\\n\\n        // Copy the L1TX Data\\n        _buildL1Data(ptr, l1Batch);\\n        ptr += _MAX_L1_TX * _L1_USER_TOTALBYTES;\\n\\n        // Copy the L2 TX Data from calldata\\n        (dPtr, dLen) = _getCallData(4);\\n        require(\\n            dLen <= l1L2TxsDataLength,\\n            \\\"Hermez::_constructCircuitInput: L2_TX_OVERFLOW\\\"\\n        );\\n        assembly {\\n            calldatacopy(ptr, dPtr, dLen)\\n        }\\n        ptr += dLen;\\n\\n        // L2 TX unused data is padded with 0 at the end\\n        _fillZeros(ptr, l1L2TxsDataLength - dLen);\\n        ptr += l1L2TxsDataLength - dLen;\\n\\n        // Copy the FeeIdxCoordinator from the calldata\\n        (dPtr, dLen) = _getCallData(5);\\n        require(\\n            dLen <= feeIdxCoordinatorLength,\\n            \\\"Hermez::_constructCircuitInput: INVALID_FEEIDXCOORDINATOR_LENGTH\\\"\\n        );\\n        assembly {\\n            calldatacopy(ptr, dPtr, dLen)\\n        }\\n        ptr += dLen;\\n        _fillZeros(ptr, feeIdxCoordinatorLength - dLen);\\n        ptr += feeIdxCoordinatorLength - dLen;\\n\\n        // store 2 bytes of chainID at the end of the inputBytes\\n        assembly {\\n            mstore(ptr, shl(240, chainid())) // 256 - 16 = 240\\n        }\\n        ptr += 2;\\n\\n        uint256 batchNum = lastForgedBatch + 1;\\n\\n        // store 4 bytes of batch number at the end of the inputBytes\\n        assembly {\\n            mstore(ptr, shl(224, batchNum)) // 256 - 32 = 224\\n        }\\n\\n        return uint256(sha256(inputBytes)) % _RFIELD;\\n    }\\n\\n    /**\\n     * @dev Clear the current queue, and update the `nextL1ToForgeQueue` and `nextL1FillingQueue` if needed\\n     */\\n    function _clearQueue() internal returns (uint16) {\\n        uint16 l1UserTxsLen = uint16(\\n            mapL1TxQueue[nextL1ToForgeQueue].length / _L1_USER_TOTALBYTES\\n        );\\n        delete mapL1TxQueue[nextL1ToForgeQueue];\\n        nextL1ToForgeQueue++;\\n        if (nextL1ToForgeQueue == nextL1FillingQueue) {\\n            nextL1FillingQueue++;\\n        }\\n        return l1UserTxsLen;\\n    }\\n\\n    /**\\n     * @dev Withdraw the funds to the msg.sender if instant withdraw or to the withdraw delayer if delayed\\n     * @param amount Amount to retrieve\\n     * @param tokenID Token identifier\\n     * @param instantWithdraw true if is an instant withdraw\\n     */\\n    function _withdrawFunds(\\n        uint192 amount,\\n        uint32 tokenID,\\n        bool instantWithdraw\\n    ) internal {\\n        if (instantWithdraw) {\\n            _safeTransfer(tokenList[tokenID], msg.sender, amount);\\n        } else {\\n            if (tokenID == 0) {\\n                withdrawDelayerContract.deposit{value: amount}(\\n                    msg.sender,\\n                    address(0),\\n                    amount\\n                );\\n            } else {\\n                address tokenAddress = tokenList[tokenID];\\n\\n                _safeApprove(\\n                    tokenAddress,\\n                    address(withdrawDelayerContract),\\n                    amount\\n                );\\n\\n                withdrawDelayerContract.deposit(\\n                    msg.sender,\\n                    tokenAddress,\\n                    amount\\n                );\\n            }\\n        }\\n    }\\n\\n    ///////////\\n    // helpers ERC20 functions\\n    ///////////\\n\\n    /**\\n     * @dev Approve ERC20\\n     * @param token Token address\\n     * @param to Recievers\\n     * @param value Quantity of tokens to approve\\n     */\\n    function _safeApprove(\\n        address token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        /* solhint-disable avoid-low-level-calls */\\n        (bool success, bytes memory data) = token.call(\\n            abi.encodeWithSelector(_APPROVE_SIGNATURE, to, value)\\n        );\\n        require(\\n            success && (data.length == 0 || abi.decode(data, (bool))),\\n            \\\"Hermez::_safeApprove: ERC20_APPROVE_FAILED\\\"\\n        );\\n    }\\n\\n    /**\\n     * @dev Transfer tokens or ether from the smart contract\\n     * @param token Token address\\n     * @param to Address to recieve the tokens\\n     * @param value Quantity to transfer\\n     */\\n    function _safeTransfer(\\n        address token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        // address 0 is reserved for eth\\n        if (token == address(0)) {\\n            /* solhint-disable avoid-low-level-calls */\\n            (bool success, ) = msg.sender.call{value: value}(new bytes(0));\\n            require(success, \\\"Hermez::_safeTransfer: ETH_TRANSFER_FAILED\\\");\\n        } else {\\n            /* solhint-disable avoid-low-level-calls */\\n            (bool success, bytes memory data) = token.call(\\n                abi.encodeWithSelector(_TRANSFER_SIGNATURE, to, value)\\n            );\\n            require(\\n                success && (data.length == 0 || abi.decode(data, (bool))),\\n                \\\"Hermez::_safeTransfer: ERC20_TRANSFER_FAILED\\\"\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev transferFrom ERC20\\n     * Require approve tokens for this contract previously\\n     * @param token Token address\\n     * @param from Sender\\n     * @param to Reciever\\n     * @param value Quantity of tokens to send\\n     */\\n    function _safeTransferFrom(\\n        address token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        (bool success, bytes memory data) = token.call(\\n            abi.encodeWithSelector(_TRANSFER_FROM_SIGNATURE, from, to, value)\\n        );\\n        require(\\n            success && (data.length == 0 || abi.decode(data, (bool))),\\n            \\\"Hermez::_safeTransferFrom: ERC20_TRANSFERFROM_FAILED\\\"\\n        );\\n    }\\n\\n    ///////////\\n    // helpers ERC20 extension functions\\n    ///////////\\n\\n    /**\\n     * @notice Function to call token permit method of extended ERC20\\n     * @param _amount Quantity that is expected to be allowed\\n     * @param _permitData Raw data of the call `permit` of the token\\n     */\\n    function _permit(\\n        address token,\\n        uint256 _amount,\\n        bytes calldata _permitData\\n    ) internal {\\n        bytes4 sig = abi.decode(_permitData, (bytes4));\\n        require(\\n            sig == _PERMIT_SIGNATURE,\\n            \\\"HermezAuctionProtocol::_permit: NOT_VALID_CALL\\\"\\n        );\\n        (\\n            address owner,\\n            address spender,\\n            uint256 value,\\n            uint256 deadline,\\n            uint8 v,\\n            bytes32 r,\\n            bytes32 s\\n        ) = abi.decode(\\n            _permitData[4:],\\n            (address, address, uint256, uint256, uint8, bytes32, bytes32)\\n        );\\n        require(\\n            owner == msg.sender,\\n            \\\"Hermez::_permit: PERMIT_OWNER_MUST_BE_THE_SENDER\\\"\\n        );\\n        require(\\n            spender == address(this),\\n            \\\"Hermez::_permit: SPENDER_MUST_BE_THIS\\\"\\n        );\\n        require(\\n            value == _amount,\\n            \\\"Hermez::_permit: PERMIT_AMOUNT_DOES_NOT_MATCH\\\"\\n        );\\n\\n        // we call without checking the result, in case it fails and he doesn't have enough balance\\n        // the following transferFrom should be fail. This prevents DoS attacks from using a signature\\n        // before the smartcontract call\\n        /* solhint-disable avoid-low-level-calls */\\n        address(token).call(\\n            abi.encodeWithSelector(\\n                _PERMIT_SIGNATURE,\\n                owner,\\n                spender,\\n                value,\\n                deadline,\\n                v,\\n                r,\\n                s\\n            )\\n        );\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/hermez/lib/InstantWithdrawManager.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0\\n\\npragma solidity 0.6.12;\\n\\nimport \\\"../../interfaces/IWithdrawalDelayer.sol\\\";\\nimport \\\"./HermezHelpers.sol\\\";\\n\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\n\\n\\ncontract InstantWithdrawManager is HermezHelpers {\\n    using SafeMath for uint256;\\n\\n\\n    // Number of buckets\\n    uint256 private constant _MAX_BUCKETS = 5;\\n\\n    // Bucket array\\n    uint256 public nBuckets;\\n    mapping (int256 => uint256) public buckets;\\n\\n    // Governance address\\n    address public hermezGovernanceAddress;\\n\\n    // Withdraw delay in seconds\\n    uint64 public withdrawalDelay;\\n\\n    // ERC20 decimals signature\\n    //  bytes4(keccak256(bytes(\\\"decimals()\\\")))\\n    bytes4 private constant _ERC20_DECIMALS = 0x313ce567;\\n\\n    uint256 private constant _MAX_WITHDRAWAL_DELAY = 2 weeks;\\n\\n    // Withdraw delayer interface\\n    IWithdrawalDelayer public withdrawDelayerContract;\\n\\n    // Mapping tokenAddress --> (USD value)/token , default 0, means that token does not worth\\n    // 2^64 = 1.8446744e+19\\n    // fixed point codification is used, 9 digits for integer part, 10 digits for decimal\\n    // In other words, the USD value of a token base unit is multiplied by 1e10\\n    // MaxUSD value for a base unit token: 1844674407,3709551616$\\n    // MinUSD value for a base unit token: 1e-10$\\n    mapping(address => uint64) public tokenExchange;\\n\\n    uint256 private constant _EXCHANGE_MULTIPLIER = 1e10;\\n\\n    event UpdateBucketWithdraw(\\n        uint8 indexed numBucket,\\n        uint256 indexed blockStamp,\\n        uint256 withdrawals\\n    );\\n\\n    event UpdateWithdrawalDelay(uint64 newWithdrawalDelay);\\n    event UpdateBucketsParameters(uint256[] arrayBuckets);\\n    event UpdateTokenExchange(address[] addressArray, uint64[] valueArray);\\n    event SafeMode();\\n\\n    function _initializeWithdraw(\\n        address _hermezGovernanceAddress,\\n        uint64 _withdrawalDelay,\\n        address _withdrawDelayerContract\\n    ) internal initializer {\\n        hermezGovernanceAddress = _hermezGovernanceAddress;\\n        withdrawalDelay = _withdrawalDelay;\\n        withdrawDelayerContract = IWithdrawalDelayer(_withdrawDelayerContract);\\n    }\\n\\n    modifier onlyGovernance {\\n        require(\\n            msg.sender == hermezGovernanceAddress,\\n            \\\"InstantWithdrawManager::onlyGovernance: ONLY_GOVERNANCE_ADDRESS\\\"\\n        );\\n        _;\\n    }\\n\\n    /**\\n     * @dev Attempt to use instant withdraw\\n     * @param tokenAddress Token address\\n     * @param amount Amount to withdraw\\n     */\\n    function _processInstantWithdrawal(address tokenAddress, uint192 amount)\\n        internal\\n        returns (bool)\\n    {\\n        // find amount in USD and then the corresponding bucketIdx\\n        uint256 amountUSD = _token2USD(tokenAddress, amount);\\n\\n        if (amountUSD == 0) {\\n            return true;\\n        }\\n\\n        // find the appropiate bucketId\\n        int256 bucketIdx = _findBucketIdx(amountUSD);\\n        if (bucketIdx == -1) return true;\\n\\n        (uint256 ceilUSD, uint256 blockStamp, uint256 withdrawals, uint256 rateBlocks, uint256 rateWithdrawals, uint256 maxWithdrawals) = unpackBucket(buckets[bucketIdx]);\\n\\n        // update the bucket and check again if are withdrawals available\\n        uint256 differenceBlocks = block.number.sub(blockStamp);\\n        uint256 periods = differenceBlocks.div(rateBlocks);\\n\\n        // add the withdrawals available\\n        withdrawals = withdrawals.add(periods.mul(rateWithdrawals));\\n        if (withdrawals >= maxWithdrawals) {\\n            withdrawals = maxWithdrawals;\\n            blockStamp = block.number;\\n        } else {\\n            blockStamp = blockStamp.add(periods.mul(rateBlocks));\\n        }\\n\\n        if (withdrawals == 0) return false;\\n\\n        withdrawals = withdrawals.sub(1);\\n\\n        // update the bucket with the new values\\n        buckets[bucketIdx] = packBucket(ceilUSD, blockStamp, withdrawals, rateBlocks, rateWithdrawals, maxWithdrawals);\\n\\n        emit UpdateBucketWithdraw(uint8(bucketIdx), blockStamp, withdrawals);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Update bucket parameters\\n     * @param newBuckets Array of buckets to replace the current ones, this array includes the\\n     * following parameters: [ceilUSD, withdrawals, rateBlocks, rateWithdrawals, maxWithdrawals]\\n     */\\n    function updateBucketsParameters(\\n        uint256[] memory newBuckets\\n    ) external onlyGovernance {\\n        uint256 n = newBuckets.length;\\n        require(\\n            n <= _MAX_BUCKETS,\\n            \\\"InstantWithdrawManager::updateBucketsParameters: MAX_NUM_BUCKETS\\\"\\n        );\\n\\n        nBuckets = n;\\n        for (uint256 i = 0; i < n; i++) {\\n            (uint256 ceilUSD, , uint256 withdrawals, uint256 rateBlocks, uint256 rateWithdrawals, uint256 maxWithdrawals) = unpackBucket(newBuckets[i]);\\n            require(\\n                withdrawals <= maxWithdrawals,\\n                \\\"InstantWithdrawManager::updateBucketsParameters: WITHDRAWALS_MUST_BE_LESS_THAN_MAXWITHDRAWALS\\\"\\n            );\\n            require(\\n                rateBlocks > 0,\\n                \\\"InstantWithdrawManager::updateBucketsParameters: RATE_BLOCKS_MUST_BE_MORE_THAN_0\\\"\\n            );\\n            buckets[int256(i)] = packBucket(\\n                ceilUSD,\\n                block.number,\\n                withdrawals,\\n                rateBlocks,\\n                rateWithdrawals,\\n                maxWithdrawals\\n            );\\n        }\\n        emit UpdateBucketsParameters(newBuckets);\\n    }\\n\\n    /**\\n     * @dev Update token USD value\\n     * @param addressArray Array of the token address\\n     * @param valueArray Array of USD values\\n     */\\n    function updateTokenExchange(\\n        address[] memory addressArray,\\n        uint64[] memory valueArray\\n    ) external onlyGovernance {\\n        require(\\n            addressArray.length == valueArray.length,\\n            \\\"InstantWithdrawManager::updateTokenExchange: INVALID_ARRAY_LENGTH\\\"\\n        );\\n        for (uint256 i = 0; i < addressArray.length; i++) {\\n            tokenExchange[addressArray[i]] = valueArray[i];\\n        }\\n        emit UpdateTokenExchange(addressArray, valueArray);\\n    }\\n\\n    /**\\n     * @dev Update WithdrawalDelay\\n     * @param newWithdrawalDelay New WithdrawalDelay\\n     * Events: `UpdateWithdrawalDelay`\\n     */\\n    function updateWithdrawalDelay(uint64 newWithdrawalDelay)\\n        external\\n        onlyGovernance\\n    {\\n        require(\\n            newWithdrawalDelay <= _MAX_WITHDRAWAL_DELAY,\\n            \\\"InstantWithdrawManager::updateWithdrawalDelay: EXCEED_MAX_WITHDRAWAL_DELAY\\\"\\n        );\\n        withdrawalDelay = newWithdrawalDelay;\\n        emit UpdateWithdrawalDelay(newWithdrawalDelay);\\n    }\\n\\n    /**\\n     * @dev Put the smartcontract in safe mode, only delayed withdrawals allowed,\\n     * also update the 'withdrawalDelay' of the 'withdrawDelayer' contract\\n     */\\n    function safeMode() external onlyGovernance {\\n        // only 1 bucket that does not allow any instant withdraw\\n        nBuckets = 1;\\n        buckets[0] = packBucket(\\n            0xFFFFFFFF_FFFFFFFF_FFFFFFFF,\\n            0,\\n            0,\\n            1,\\n            0,\\n            0\\n        );\\n        withdrawDelayerContract.changeWithdrawalDelay(withdrawalDelay);\\n        emit SafeMode();\\n    }\\n\\n    /**\\n     * @dev Return true if a instant withdraw could be done with that 'tokenAddress' and 'amount'\\n     * @param tokenAddress Token address\\n     * @param amount Amount to withdraw\\n     * @return true if the instant withdrawal is allowed\\n     */\\n    function instantWithdrawalViewer(address tokenAddress, uint192 amount)\\n        public\\n        view\\n        returns (bool)\\n    {\\n        // find amount in USD and then the corresponding bucketIdx\\n        uint256 amountUSD = _token2USD(tokenAddress, amount);\\n        if (amountUSD == 0) return true;\\n\\n        int256 bucketIdx = _findBucketIdx(amountUSD);\\n        if (bucketIdx == -1) return true;\\n\\n\\n        (, uint256 blockStamp, uint256 withdrawals, uint256 rateBlocks, uint256 rateWithdrawals, uint256 maxWithdrawals) = unpackBucket(buckets[bucketIdx]);\\n\\n        uint256 differenceBlocks = block.number.sub(blockStamp);\\n        uint256 periods = differenceBlocks.div(rateBlocks);\\n\\n        withdrawals = withdrawals.add(periods.mul(rateWithdrawals));\\n        if (withdrawals>maxWithdrawals) withdrawals = maxWithdrawals;\\n\\n        if (withdrawals == 0) return false;\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Converts tokens to USD\\n     * @param tokenAddress Token address\\n     * @param amount Token amount\\n     * @return Total USD amount\\n     */\\n    function _token2USD(address tokenAddress, uint192 amount)\\n        internal\\n        view\\n        returns (uint256)\\n    {\\n        if (tokenExchange[tokenAddress] == 0) return 0;\\n\\n        // this multiplication never overflows 192bits * 64 bits\\n        uint256 baseUnitTokenUSD = (uint256(amount) *\\n            uint256(tokenExchange[tokenAddress])) / _EXCHANGE_MULTIPLIER;\\n\\n        uint8 decimals;\\n        // in case of ether, set 18 decimals\\n        if (tokenAddress == address(0)) {\\n            decimals = 18;\\n        } else {\\n            // if decimals() is not implemented 0 decimals are assumed\\n            (bool success, bytes memory data) = tokenAddress.staticcall(\\n                abi.encodeWithSelector(_ERC20_DECIMALS)\\n            );\\n            if (success) {\\n                decimals = abi.decode(data, (uint8));\\n            }\\n        }\\n        require(\\n            decimals < 77,\\n            \\\"InstantWithdrawManager::_token2USD: TOKEN_DECIMALS_OVERFLOW\\\"\\n        );\\n        return baseUnitTokenUSD / (10**uint256(decimals));\\n    }\\n\\n    /**\\n     * @dev Find the corresponding bucket for the input amount\\n     * @param amountUSD USD amount\\n     * @return Bucket index, -1 in case there is no match\\n     */\\n    function _findBucketIdx(uint256 amountUSD) internal view returns (int256) {\\n        for (int256 i = 0; i < int256(nBuckets); i++) {\\n            uint256 ceilUSD = buckets[i] & 0xFFFFFFFF_FFFFFFFF_FFFFFFFF;\\n            if ((amountUSD <= ceilUSD) ||\\n                (ceilUSD == 0xFFFFFFFF_FFFFFFFF_FFFFFFFF))\\n            {\\n                return i;\\n            }\\n        }\\n        return -1;\\n    }\\n\\n     /**\\n     * @dev Unpack a packed uint256 into the bucket parameters\\n     * @param bucket Token address\\n     * @return ceilUSD max USD value that bucket holds\\n     * @return blockStamp block number of the last bucket update\\n     * @return withdrawals available withdrawals of the bucket\\n     * @return rateBlocks every `rateBlocks` blocks add `rateWithdrawals` withdrawal\\n     * @return rateWithdrawals add `rateWithdrawals` every `rateBlocks`\\n     * @return maxWithdrawals max withdrawals the bucket can hold\\n     */\\n    function unpackBucket(uint256 bucket) public pure returns(\\n        uint256 ceilUSD,\\n        uint256 blockStamp,\\n        uint256 withdrawals,\\n        uint256 rateBlocks,\\n        uint256 rateWithdrawals,\\n        uint256 maxWithdrawals\\n    ) {\\n        ceilUSD = bucket & 0xFFFFFFFF_FFFFFFFF_FFFFFFFF;\\n        blockStamp = (bucket >> 96) & 0xFFFFFFFF;\\n        withdrawals = (bucket >> 128) & 0xFFFFFFFF;\\n        rateBlocks = (bucket >> 160) & 0xFFFFFFFF;\\n        rateWithdrawals = (bucket >> 192) & 0xFFFFFFFF;\\n        maxWithdrawals = (bucket >> 224) & 0xFFFFFFFF;\\n    }\\n\\n     /**\\n     * @dev Pack all the bucket parameters into a uint256\\n     * @param ceilUSD max USD value that bucket holds\\n     * @param blockStamp block number of the last bucket update\\n     * @param withdrawals available withdrawals of the bucket\\n     * @param rateBlocks every `rateBlocks` blocks add `rateWithdrawals` withdrawal\\n     * @param rateWithdrawals add `rateWithdrawals` every `rateBlocks`\\n     * @param maxWithdrawals max withdrawals the bucket can hold\\n     * @return ret all bucket varaibles packed [ceilUSD, blockStamp, withdrawals, rateBlocks, rateWithdrawals, maxWithdrawals]\\n     */\\n    function packBucket(\\n        uint256 ceilUSD,\\n        uint256 blockStamp,\\n        uint256 withdrawals,\\n        uint256 rateBlocks,\\n        uint256 rateWithdrawals,\\n        uint256 maxWithdrawals\\n    ) public pure returns(uint256 ret) {\\n        ret = ceilUSD |\\n              (blockStamp << 96) |\\n              (withdrawals << 128) |\\n              (rateBlocks << 160) |\\n              (rateWithdrawals << 192) |\\n              (maxWithdrawals << 224);\\n    }\\n}\\n\\n\"\r\n    },\r\n    \"contracts/hermez/interfaces/VerifierRollupInterface.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0\\n\\npragma solidity ^0.6.12;\\n\\n/**\\n * @dev Define interface verifier\\n */\\ninterface VerifierRollupInterface {\\n    function verifyProof(\\n        uint256[2] calldata proofA,\\n        uint256[2][2] calldata proofB,\\n        uint256[2] calldata proofC,\\n        uint256[1] calldata input\\n    ) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"contracts/hermez/interfaces/VerifierWithdrawInterface.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0\\n\\npragma solidity ^0.6.12;\\n\\n/**\\n * @dev Define interface verifier\\n */\\ninterface VerifierWithdrawInterface {\\n    function verifyProof(\\n        uint256[2] calldata proofA,\\n        uint256[2][2] calldata proofB,\\n        uint256[2] calldata proofC,\\n        uint256[1] calldata input\\n    ) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IHermezAuctionProtocol.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0\\n\\npragma solidity 0.6.12;\\n\\n/**\\n * @dev Hermez will run an auction to incentivise efficiency in coordinators,\\n * meaning that they need to be very effective and include as many transactions\\n * as they can in the slots in order to compensate for their bidding costs, gas\\n * costs and operations costs.The general porpouse of this smartcontract is to\\n * define the rules to coordinate this auction where the bids will be placed\\n * only in HEZ utility token.\\n */\\ninterface IHermezAuctionProtocol {\\n    /**\\n     * @notice Getter of the current `_slotDeadline`\\n     * @return The `_slotDeadline` value\\n     */\\n    function getSlotDeadline() external view returns (uint8);\\n\\n    /**\\n     * @notice Allows to change the `_slotDeadline` if it's called by the owner\\n     * @param newDeadline new `_slotDeadline`\\n     * Events: `NewSlotDeadline`\\n     */\\n    function setSlotDeadline(uint8 newDeadline) external;\\n\\n    /**\\n     * @notice Getter of the current `_openAuctionSlots`\\n     * @return The `_openAuctionSlots` value\\n     */\\n    function getOpenAuctionSlots() external view returns (uint16);\\n\\n    /**\\n     * @notice Allows to change the `_openAuctionSlots` if it's called by the owner\\n     * @dev Max newOpenAuctionSlots = 65536 slots\\n     * @param newOpenAuctionSlots new `_openAuctionSlots`\\n     * Events: `NewOpenAuctionSlots`\\n     * Note: the governance could set this parameter equal to `ClosedAuctionSlots`, this means that it can prevent bids\\n     * from being made and that only the boot coordinator can forge\\n     */\\n    function setOpenAuctionSlots(uint16 newOpenAuctionSlots) external;\\n\\n    /**\\n     * @notice Getter of the current `_closedAuctionSlots`\\n     * @return The `_closedAuctionSlots` value\\n     */\\n    function getClosedAuctionSlots() external view returns (uint16);\\n\\n    /**\\n     * @notice Allows to change the `_closedAuctionSlots` if it's called by the owner\\n     * @dev Max newClosedAuctionSlots = 65536 slots\\n     * @param newClosedAuctionSlots new `_closedAuctionSlots`\\n     * Events: `NewClosedAuctionSlots`\\n     * Note: the governance could set this parameter equal to `OpenAuctionSlots`, this means that it can prevent bids\\n     * from being made and that only the boot coordinator can forge\\n     */\\n    function setClosedAuctionSlots(uint16 newClosedAuctionSlots) external;\\n\\n    /**\\n     * @notice Getter of the current `_outbidding`\\n     * @return The `_outbidding` value\\n     */\\n    function getOutbidding() external view returns (uint16);\\n\\n    /**\\n     * @notice Allows to change the `_outbidding` if it's called by the owner\\n     * @dev newOutbidding between 0.00% and 655.36%\\n     * @param newOutbidding new `_outbidding`\\n     * Events: `NewOutbidding`\\n     */\\n    function setOutbidding(uint16 newOutbidding) external;\\n\\n    /**\\n     * @notice Getter of the current `_allocationRatio`\\n     * @return The `_allocationRatio` array\\n     */\\n    function getAllocationRatio() external view returns (uint16[3] memory);\\n\\n    /**\\n     * @notice Allows to change the `_allocationRatio` array if it's called by the owner\\n     * @param newAllocationRatio new `_allocationRatio` uint8[3] array\\n     * Events: `NewAllocationRatio`\\n     */\\n    function setAllocationRatio(uint16[3] memory newAllocationRatio) external;\\n\\n    /**\\n     * @notice Getter of the current `_donationAddress`\\n     * @return The `_donationAddress`\\n     */\\n    function getDonationAddress() external view returns (address);\\n\\n    /**\\n     * @notice Allows to change the `_donationAddress` if it's called by the owner\\n     * @param newDonationAddress new `_donationAddress`\\n     * Events: `NewDonationAddress`\\n     */\\n    function setDonationAddress(address newDonationAddress) external;\\n\\n    /**\\n     * @notice Getter of the current `_bootCoordinator`\\n     * @return The `_bootCoordinator`\\n     */\\n    function getBootCoordinator() external view returns (address);\\n\\n    /**\\n     * @notice Allows to change the `_bootCoordinator` if it's called by the owner\\n     * @param newBootCoordinator new `_bootCoordinator` uint8[3] array\\n     * Events: `NewBootCoordinator`\\n     */\\n    function setBootCoordinator(\\n        address newBootCoordinator,\\n        string memory newBootCoordinatorURL\\n    ) external;\\n\\n    /**\\n     * @notice Allows to change the change the min bid for an slotSet if it's called by the owner.\\n     * @dev If an slotSet has the value of 0 it's considered decentralized, so the minbid cannot be modified\\n     * @param slotSet the slotSet to update\\n     * @param newInitialMinBid the minBid\\n     * Events: `NewDefaultSlotSetBid`\\n     */\\n    function changeDefaultSlotSetBid(uint128 slotSet, uint128 newInitialMinBid)\\n        external;\\n\\n    /**\\n     * @notice Allows to register a new coordinator\\n     * @dev The `msg.sender` will be considered the `bidder`, who can change the forger address and the url\\n     * @param forger the address allowed to forger batches\\n     * @param coordinatorURL endopoint for this coordinator\\n     * Events: `NewCoordinator`\\n     */\\n    function setCoordinator(address forger, string memory coordinatorURL)\\n        external;\\n\\n    /**\\n     * @notice Function to process a single bid\\n     * @dev If the bytes calldata permit parameter is empty the smart contract assume that it has enough allowance to\\n     * make the transferFrom. In case you want to use permit, you need to send the data of the permit call in bytes\\n     * @param amount the amount of tokens that have been sent\\n     * @param slot the slot for which the caller is bidding\\n     * @param bidAmount the amount of the bidding\\n     */\\n    function processBid(\\n        uint128 amount,\\n        uint128 slot,\\n        uint128 bidAmount,\\n        bytes calldata permit\\n    ) external;\\n\\n    /**\\n     * @notice function to process a multi bid\\n     * @dev If the bytes calldata permit parameter is empty the smart contract assume that it has enough allowance to\\n     * make the transferFrom. In case you want to use permit, you need to send the data of the permit call in bytes\\n     * @param amount the amount of tokens that have been sent\\n     * @param startingSlot the first slot to bid\\n     * @param endingSlot the last slot to bid\\n     * @param slotSets the set of slots to which the coordinator wants to bid\\n     * @param maxBid the maximum bid that is allowed\\n     * @param minBid the minimum that you want to bid\\n     */\\n    function processMultiBid(\\n        uint128 amount,\\n        uint128 startingSlot,\\n        uint128 endingSlot,\\n        bool[6] memory slotSets,\\n        uint128 maxBid,\\n        uint128 minBid,\\n        bytes calldata permit\\n    ) external;\\n\\n    /**\\n     * @notice function to process the forging\\n     * @param forger the address of the coodirnator's forger\\n     * Events: `NewForgeAllocated` and `NewForge`\\n     */\\n    function forge(address forger) external;\\n\\n    /**\\n     * @notice function to know if a certain address can forge into a certain block\\n     * @param forger the address of the coodirnator's forger\\n     * @param blockNumber block number to check\\n     * @return a bool true in case it can forge, false otherwise\\n     */\\n    function canForge(address forger, uint256 blockNumber)\\n        external\\n        view\\n        returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IWithdrawalDelayer.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0\\n\\npragma solidity 0.6.12;\\n\\ninterface IWithdrawalDelayer {\\n    /**\\n     * @notice Getter of the current `_hermezGovernanceAddress`\\n     * @return The `_hermezGovernanceAddress` value\\n     */\\n    function getHermezGovernanceAddress() external view returns (address);\\n\\n    /**\\n     * @dev Allows the current governance to set the pendingGovernance address.\\n     * @param newGovernance The address to transfer governance to.\\n     */\\n    function transferGovernance(address newGovernance) external;\\n\\n    /**\\n     * @dev Allows the pendingGovernance address to finalize the transfer.\\n     */\\n    function claimGovernance() external;\\n\\n    /**\\n     * @notice Getter of the current `_emergencyCouncil`\\n     * @return The `_emergencyCouncil` value\\n     */\\n    function getEmergencyCouncil() external view returns (address);\\n\\n    /**\\n     * @dev Allows the current governance to set the pendingGovernance address.\\n     * @param newEmergencyCouncil The address to transfer governance to.\\n     */\\n    function transferEmergencyCouncil(address payable newEmergencyCouncil)\\n        external;\\n\\n    /**\\n     * @dev Allows the pendingGovernance address to finalize the transfer.\\n     */\\n    function claimEmergencyCouncil() external;\\n\\n    /**\\n     * @notice Getter of the current `_emergencyMode` status to know if the emergency mode is enable or disable\\n     * @return The `_emergencyMode` value\\n     */\\n    function isEmergencyMode() external view returns (bool);\\n\\n    /**\\n     * @notice Getter to obtain the current withdrawal delay\\n     * @return the current withdrawal delay time in seconds: `_withdrawalDelay`\\n     */\\n    function getWithdrawalDelay() external view returns (uint64);\\n\\n    /**\\n     * @notice Getter to obtain when emergency mode started\\n     * @return the emergency mode starting time in seconds: `_emergencyModeStartingTime`\\n     */\\n    function getEmergencyModeStartingTime() external view returns (uint64);\\n\\n    /**\\n     * @notice This function enables the emergency mode. Only the keeper of the system can enable this mode. This cannot\\n     * be deactivated in any case so it will be irreversible.\\n     * @dev The activation time is saved in `_emergencyModeStartingTime` and this function can only be called\\n     * once if it has not been previously activated.\\n     * Events: `EmergencyModeEnabled` event.\\n     */\\n    function enableEmergencyMode() external;\\n\\n    /**\\n     * @notice This function allows the HermezKeeperAddress to change the withdrawal delay time, this is the time that\\n     * anyone needs to wait until a withdrawal of the funds is allowed. Since this time is calculated at the time of\\n     * withdrawal, this change affects existing deposits. Can never exceed `MAX_WITHDRAWAL_DELAY`\\n     * @dev It changes `_withdrawalDelay` if `_newWithdrawalDelay` it is less than or equal to MAX_WITHDRAWAL_DELAY\\n     * @param _newWithdrawalDelay new delay time in seconds\\n     * Events: `NewWithdrawalDelay` event.\\n     */\\n    function changeWithdrawalDelay(uint64 _newWithdrawalDelay) external;\\n\\n    /**\\n     * Returns the balance and the timestamp for a specific owner and token\\n     * @param _owner who can claim the deposit once the delay time has expired (if not in emergency mode)\\n     * @param _token address of the token to withdrawal (0x0 in case of Ether)\\n     * @return `amount` Total amount withdrawable (if not in emergency mode)\\n     * @return `depositTimestamp` Moment at which funds were deposited\\n     */\\n    function depositInfo(address payable _owner, address _token)\\n        external\\n        view\\n        returns (uint192, uint64);\\n\\n    /**\\n     * Function to make a deposit in the WithdrawalDelayer smartcontract, only the Hermez rollup smartcontract can do it\\n     * @dev In case of an Ether deposit, the address `0x0` will be used and the corresponding amount must be sent in the\\n     * `msg.value`. In case of an ERC20 this smartcontract must have the approval to expend the token to\\n     * deposit to be able to make a transferFrom to itself.\\n     * @param _owner is who can claim the deposit once the withdrawal delay time has been exceeded\\n     * @param _token address of the token deposited (`0x0` in case of Ether)\\n     * @param _amount deposit amount\\n     * Events: `Deposit`\\n     */\\n    function deposit(\\n        address _owner,\\n        address _token,\\n        uint192 _amount\\n    ) external payable;\\n\\n    /**\\n     * This function allows the owner to withdawal the funds. Emergency mode cannot be enabled and it must have exceeded\\n     * the withdrawal delay time\\n     * @dev `NonReentrant` modifier is used as a protection despite the state is being previously updated\\n     * @param _owner can claim the deposit once the delay time has expired\\n     * @param _token address of the token to withdrawal (0x0 in case of Ether)\\n     * Events: `Withdraw`\\n     */\\n    function withdrawal(address payable _owner, address _token) external;\\n\\n    /**\\n     * Allows the Hermez Governance to withdawal the funds in the event that emergency mode was enable.\\n     * Note: An Aragon Court will have the right to veto over the call to this method\\n     * @dev `NonReentrant` modifier is used as a protection despite the state is being previously updated and this is\\n     * a security mechanism\\n     * @param _to where the funds will be sent\\n     * @param _token address of the token withdraw (0x0 in case of Ether)\\n     * @param _amount the amount to send\\n     * Events: `EscapeHatchWithdrawal`\\n     */\\n    function escapeHatchWithdrawal(\\n        address _to,\\n        address _token,\\n        uint256 _amount\\n    ) external;\\n}\\n\"\r\n    },\r\n    \"contracts/hermez/lib/HermezHelpers.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0\\n\\npragma solidity ^0.6.12;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/Initializable.sol\\\";\\n\\n/**\\n * @dev Interface poseidon hash function 2 elements\\n */\\ncontract PoseidonUnit2 {\\n    function poseidon(uint256[2] memory) public pure returns (uint256) {}\\n}\\n\\n/**\\n * @dev Interface poseidon hash function 3 elements\\n */\\ncontract PoseidonUnit3 {\\n    function poseidon(uint256[3] memory) public pure returns (uint256) {}\\n}\\n\\n/**\\n * @dev Interface poseidon hash function 4 elements\\n */\\ncontract PoseidonUnit4 {\\n    function poseidon(uint256[4] memory) public pure returns (uint256) {}\\n}\\n\\n/**\\n * @dev Rollup helper functions\\n */\\ncontract HermezHelpers is Initializable {\\n    PoseidonUnit2 _insPoseidonUnit2;\\n    PoseidonUnit3 _insPoseidonUnit3;\\n    PoseidonUnit4 _insPoseidonUnit4;\\n\\n    uint256 private constant _WORD_SIZE = 32;\\n\\n    // bytes32 public constant EIP712DOMAIN_HASH =\\n    //      keccak256(\\\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\\\")\\n    bytes32 public constant EIP712DOMAIN_HASH =\\n        0x8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f;\\n    // bytes32 public constant NAME_HASH =\\n    //      keccak256(\\\"Hermez Network\\\")\\n    bytes32 public constant NAME_HASH =\\n        0xbe287413178bfeddef8d9753ad4be825ae998706a6dabff23978b59dccaea0ad;\\n    // bytes32 public constant VERSION_HASH =\\n    //      keccak256(\\\"1\\\")\\n    bytes32 public constant VERSION_HASH =\\n        0xc89efdaa54c0f20c7adf612882df0950f5a951637e0307cdcb4c672f298b8bc6;\\n    // bytes32 public constant AUTHORISE_TYPEHASH =\\n    //      keccak256(\\\"Authorise(string Provider,string Authorisation,bytes32 BJJKey)\\\");\\n    bytes32 public constant AUTHORISE_TYPEHASH =\\n        0xafd642c6a37a2e6887dc4ad5142f84197828a904e53d3204ecb1100329231eaa;\\n    // bytes32 public constant HERMEZ_NETWORK_HASH = keccak256(bytes(\\\"Hermez Network\\\")),\\n    bytes32 public constant HERMEZ_NETWORK_HASH =\\n        0xbe287413178bfeddef8d9753ad4be825ae998706a6dabff23978b59dccaea0ad;\\n    // bytes32 public constant ACCOUNT_CREATION_HASH = keccak256(bytes(\\\"Account creation\\\")),\\n    bytes32 public constant ACCOUNT_CREATION_HASH =\\n        0xff946cf82975b1a2b6e6d28c9a76a4b8d7a1fd0592b785cb92771933310f9ee7;\\n\\n    /**\\n     * @dev Load poseidon smart contract\\n     * @param _poseidon2Elements Poseidon contract address for 2 elements\\n     * @param _poseidon3Elements Poseidon contract address for 3 elements\\n     * @param _poseidon4Elements Poseidon contract address for 4 elements\\n     */\\n    function _initializeHelpers(\\n        address _poseidon2Elements,\\n        address _poseidon3Elements,\\n        address _poseidon4Elements\\n    ) internal initializer {\\n        _insPoseidonUnit2 = PoseidonUnit2(_poseidon2Elements);\\n        _insPoseidonUnit3 = PoseidonUnit3(_poseidon3Elements);\\n        _insPoseidonUnit4 = PoseidonUnit4(_poseidon4Elements);\\n    }\\n\\n    /**\\n     * @dev Hash poseidon for 2 elements\\n     * @param inputs Poseidon input array of 2 elements\\n     * @return Poseidon hash\\n     */\\n    function _hash2Elements(uint256[2] memory inputs)\\n        internal\\n        view\\n        returns (uint256)\\n    {\\n        return _insPoseidonUnit2.poseidon(inputs);\\n    }\\n\\n    /**\\n     * @dev Hash poseidon for 3 elements\\n     * @param inputs Poseidon input array of 3 elements\\n     * @return Poseidon hash\\n     */\\n    function _hash3Elements(uint256[3] memory inputs)\\n        internal\\n        view\\n        returns (uint256)\\n    {\\n        return _insPoseidonUnit3.poseidon(inputs);\\n    }\\n\\n    /**\\n     * @dev Hash poseidon for 4 elements\\n     * @param inputs Poseidon input array of 4 elements\\n     * @return Poseidon hash\\n     */\\n    function _hash4Elements(uint256[4] memory inputs)\\n        internal\\n        view\\n        returns (uint256)\\n    {\\n        return _insPoseidonUnit4.poseidon(inputs);\\n    }\\n\\n    /**\\n     * @dev Hash poseidon for sparse merkle tree nodes\\n     * @param left Input element array\\n     * @param right Input element array\\n     * @return Poseidon hash\\n     */\\n    function _hashNode(uint256 left, uint256 right)\\n        internal\\n        view\\n        returns (uint256)\\n    {\\n        uint256[2] memory inputs;\\n        inputs[0] = left;\\n        inputs[1] = right;\\n        return _hash2Elements(inputs);\\n    }\\n\\n    /**\\n     * @dev Hash poseidon for sparse merkle tree final nodes\\n     * @param key Input element array\\n     * @param value Input element array\\n     * @return Poseidon hash1\\n     */\\n    function _hashFinalNode(uint256 key, uint256 value)\\n        internal\\n        view\\n        returns (uint256)\\n    {\\n        uint256[3] memory inputs;\\n        inputs[0] = key;\\n        inputs[1] = value;\\n        inputs[2] = 1;\\n        return _hash3Elements(inputs);\\n    }\\n\\n    /**\\n     * @dev Verify sparse merkle tree proof\\n     * @param root Root to verify\\n     * @param siblings Siblings necessary to compute the merkle proof\\n     * @param key Key to verify\\n     * @param value Value to verify\\n     * @return True if verification is correct, false otherwise\\n     */\\n    function _smtVerifier(\\n        uint256 root,\\n        uint256[] memory siblings,\\n        uint256 key,\\n        uint256 value\\n    ) internal view returns (bool) {\\n        // Step 2: Calcuate root\\n        uint256 nextHash = _hashFinalNode(key, value);\\n        uint256 siblingTmp;\\n        for (int256 i = int256(siblings.length) - 1; i >= 0; i--) {\\n            siblingTmp = siblings[uint256(i)];\\n            bool leftRight = (uint8(key >> i) & 0x01) == 1;\\n            nextHash = leftRight\\n                ? _hashNode(siblingTmp, nextHash)\\n                : _hashNode(nextHash, siblingTmp);\\n        }\\n\\n        // Step 3: Check root\\n        return root == nextHash;\\n    }\\n\\n    /**\\n     * @dev Build entry for the exit tree leaf\\n     * @param token Token identifier\\n     * @param nonce nonce parameter, only use 40 bits instead of 48\\n     * @param balance Balance of the account\\n     * @param ay Public key babyjubjub represented as point: sign + (Ay)\\n     * @param ethAddress Ethereum address\\n     * @return uint256 array with the state variables\\n     */\\n    function _buildTreeState(\\n        uint32 token,\\n        uint48 nonce,\\n        uint256 balance,\\n        uint256 ay,\\n        address ethAddress\\n    ) internal pure returns (uint256[4] memory) {\\n        uint256[4] memory stateArray;\\n\\n        stateArray[0] = token;\\n        stateArray[0] |= nonce << 32;\\n        stateArray[0] |= (ay >> 255) << (32 + 40);\\n        // build element 2\\n        stateArray[1] = balance;\\n        // build element 4\\n        stateArray[2] = (ay << 1) >> 1; // last bit set to 0\\n        // build element 5\\n        stateArray[3] = uint256(ethAddress);\\n        return stateArray;\\n    }\\n\\n    /**\\n     * @dev Decode half floating precision.\\n     * Max value encoded with this codification: 0x1f8def8800cca870c773f6eb4d980000000 (aprox 137 bits)\\n     * @param float Float half precision encode number\\n     * @return Decoded floating half precision\\n     */\\n    function _float2Fix(uint40 float) internal pure returns (uint256) {\\n        uint256 m = float & 0x7FFFFFFFF;\\n        uint256 e = float >> 35;\\n\\n        // never overflow, max \\\"e\\\" value is 32\\n        uint256 exp = 10**e;\\n\\n        // never overflow, max \\\"fix\\\" value is 1023 * 10^32\\n        uint256 fix = m * exp;\\n\\n        return fix;\\n    }\\n\\n    /**\\n     * @dev Retrieve the DOMAIN_SEPARATOR hash\\n     * @return domainSeparator hash used for sign messages\\n     */\\n    function DOMAIN_SEPARATOR() public view returns (bytes32 domainSeparator) {\\n        return\\n            keccak256(\\n                abi.encode(\\n                    EIP712DOMAIN_HASH,\\n                    NAME_HASH,\\n                    VERSION_HASH,\\n                    getChainId(),\\n                    address(this)\\n                )\\n            );\\n    }\\n\\n    /**\\n     * @return chainId The current chainId where the smarctoncract is executed\\n     */\\n    function getChainId() public pure returns (uint256 chainId) {\\n        assembly {\\n            chainId := chainid()\\n        }\\n    }\\n\\n    /**\\n     * @dev Retrieve ethereum address from a (defaultMessage + babyjub) signature\\n     * @param babyjub Public key babyjubjub represented as point: sign + (Ay)\\n     * @param r Signature parameter\\n     * @param s Signature parameter\\n     * @param v Signature parameter\\n     * @return Ethereum address recovered from the signature\\n     */\\n    function _checkSig(\\n        bytes32 babyjub,\\n        bytes32 r,\\n        bytes32 s,\\n        uint8 v\\n    ) internal view returns (address) {\\n        // from https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/cryptography/ECDSA.sol#L46\\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\\n        // the valid range for s in (281): 0 < s < secp256k1n ÷ 2 + 1, and for v in (282): v ∈ {27, 28}. Most\\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\\n        //\\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\\n        // these malleable signatures as well.\\n        require(\\n            uint256(s) <=\\n                0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0,\\n            \\\"HermezHelpers::_checkSig: INVALID_S_VALUE\\\"\\n        );\\n\\n        bytes32 encodeData =\\n            keccak256(\\n                abi.encode(\\n                    AUTHORISE_TYPEHASH,\\n                    HERMEZ_NETWORK_HASH,\\n                    ACCOUNT_CREATION_HASH,\\n                    babyjub\\n                )\\n            );\\n\\n        bytes32 messageDigest =\\n            keccak256(\\n                abi.encodePacked(\\\"\\\\x19\\\\x01\\\", DOMAIN_SEPARATOR(), encodeData)\\n            );\\n\\n        address ethAddress = ecrecover(messageDigest, v, r, s);\\n\\n        require(\\n            ethAddress != address(0),\\n            \\\"HermezHelpers::_checkSig: INVALID_SIGNATURE\\\"\\n        );\\n\\n        return ethAddress;\\n    }\\n\\n    /**\\n     * @dev return information from specific call data info\\n     * @param posParam parameter number relative to 0 to extract the info\\n     * @return ptr ptr to the call data position where the actual data starts\\n     * @return len Length of the data\\n     */\\n    function _getCallData(uint256 posParam)\\n        internal\\n        pure\\n        returns (uint256 ptr, uint256 len)\\n    {\\n        assembly {\\n            let pos := add(4, mul(posParam, 32))\\n            ptr := add(calldataload(pos), 4)\\n            len := calldataload(ptr)\\n            ptr := add(ptr, 32)\\n        }\\n    }\\n\\n    /**\\n     * @dev This package fills at least len zeros in memory and a maximum of len+31\\n     * @param ptr The position where it starts to fill zeros\\n     * @param len The minimum quantity of zeros it's added\\n     */\\n    function _fillZeros(uint256 ptr, uint256 len) internal pure {\\n        assembly {\\n            let ptrTo := ptr\\n            ptr := add(ptr, len)\\n            for {\\n\\n            } lt(ptrTo, ptr) {\\n                ptrTo := add(ptrTo, 32)\\n            } {\\n                mstore(ptrTo, 0)\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Copy 'len' bytes from memory address 'src', to address 'dest'.\\n     * From https://github.com/GNSPS/solidity-bytes-utils/blob/master/contracts/BytesLib.sol\\n     * @param _preBytes bytes storage\\n     * @param _postBytes Bytes array memory\\n     */\\n    function _concatStorage(bytes storage _preBytes, bytes memory _postBytes)\\n        internal\\n    {\\n        assembly {\\n            // Read the first 32 bytes of _preBytes storage, which is the length\\n            // of the array. (We don't need to use the offset into the slot\\n            // because arrays use the entire slot.)\\n            let fslot := sload(_preBytes_slot)\\n            // Arrays of 31 bytes or less have an even value in their slot,\\n            // while longer arrays have an odd value. The actual length is\\n            // the slot divided by two for odd values, and the lowest order\\n            // byte divided by two for even values.\\n            // If the slot is even, bitwise and the slot with 255 and divide by\\n            // two to get the length. If the slot is odd, bitwise and the slot\\n            // with -1 and divide by two.\\n            let slength := div(\\n                and(fslot, sub(mul(0x100, iszero(and(fslot, 1))), 1)),\\n                2\\n            )\\n            let mlength := mload(_postBytes)\\n            let newlength := add(slength, mlength)\\n            // slength can contain both the length and contents of the array\\n            // if length < 32 bytes so let's prepare for that\\n            // v. http://solidity.readthedocs.io/en/latest/miscellaneous.html#layout-of-state-variables-in-storage\\n            switch add(lt(slength, 32), lt(newlength, 32))\\n                case 2 {\\n                    // Since the new array still fits in the slot, we just need to\\n                    // update the contents of the slot.\\n                    // uint256(bytes_storage) = uint256(bytes_storage) + uint256(bytes_memory) + new_length\\n                    sstore(\\n                        _preBytes_slot,\\n                        // all the modifications to the slot are inside this\\n                        // next block\\n                        add(\\n                            // we can just add to the slot contents because the\\n                            // bytes we want to change are the LSBs\\n                            fslot,\\n                            add(\\n                                mul(\\n                                    div(\\n                                        // load the bytes from memory\\n                                        mload(add(_postBytes, 0x20)),\\n                                        // zero all bytes to the right\\n                                        exp(0x100, sub(32, mlength))\\n                                    ),\\n                                    // and now shift left the number of bytes to\\n                                    // leave space for the length in the slot\\n                                    exp(0x100, sub(32, newlength))\\n                                ),\\n                                // increase length by the double of the memory\\n                                // bytes length\\n                                mul(mlength, 2)\\n                            )\\n                        )\\n                    )\\n                }\\n                case 1 {\\n                    // The stored value fits in the slot, but the combined value\\n                    // will exceed it.\\n                    // get the keccak hash to get the contents of the array\\n                    mstore(0x0, _preBytes_slot)\\n                    let sc := add(keccak256(0x0, 0x20), div(slength, 32))\\n\\n                    // save new length\\n                    sstore(_preBytes_slot, add(mul(newlength, 2), 1))\\n\\n                    // The contents of the _postBytes array start 32 bytes into\\n                    // the structure. Our first read should obtain the `submod`\\n                    // bytes that can fit into the unused space in the last word\\n                    // of the stored array. To get this, we read 32 bytes starting\\n                    // from `submod`, so the data we read overlaps with the array\\n                    // contents by `submod` bytes. Masking the lowest-order\\n                    // `submod` bytes allows us to add that value directly to the\\n                    // stored value.\\n\\n                    let submod := sub(32, slength)\\n                    let mc := add(_postBytes, submod)\\n                    let end := add(_postBytes, mlength)\\n                    let mask := sub(exp(0x100, submod), 1)\\n\\n                    sstore(\\n                        sc,\\n                        add(\\n                            and(\\n                                fslot,\\n                                0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00\\n                            ),\\n                            and(mload(mc), mask)\\n                        )\\n                    )\\n\\n                    for {\\n                        mc := add(mc, 0x20)\\n                        sc := add(sc, 1)\\n                    } lt(mc, end) {\\n                        sc := add(sc, 1)\\n                        mc := add(mc, 0x20)\\n                    } {\\n                        sstore(sc, mload(mc))\\n                    }\\n\\n                    mask := exp(0x100, sub(mc, end))\\n\\n                    sstore(sc, mul(div(mload(mc), mask), mask))\\n                }\\n                default {\\n                    // get the keccak hash to get the contents of the array\\n                    mstore(0x0, _preBytes_slot)\\n                    // Start copying to the last used word of the stored array.\\n                    let sc := add(keccak256(0x0, 0x20), div(slength, 32))\\n\\n                    // save new length\\n                    sstore(_preBytes_slot, add(mul(newlength, 2), 1))\\n\\n                    // Copy over the first `submod` bytes of the new data as in\\n                    // case 1 above.\\n                    let slengthmod := mod(slength, 32)\\n                    let mlengthmod := mod(mlength, 32)\\n                    let submod := sub(32, slengthmod)\\n                    let mc := add(_postBytes, submod)\\n                    let end := add(_postBytes, mlength)\\n                    let mask := sub(exp(0x100, submod), 1)\\n\\n                    sstore(sc, add(sload(sc), and(mload(mc), mask)))\\n\\n                    for {\\n                        sc := add(sc, 1)\\n                        mc := add(mc, 0x20)\\n                    } lt(mc, end) {\\n                        sc := add(sc, 1)\\n                        mc := add(mc, 0x20)\\n                    } {\\n                        sstore(sc, mload(mc))\\n                    }\\n\\n                    mask := exp(0x100, sub(mc, end))\\n\\n                    sstore(sc, mul(div(mload(mc), mask), mask))\\n                }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/math/SafeMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return sub(a, b, \\\"SafeMath: subtraction overflow\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        uint256 c = a - b;\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        uint256 c = a / b;\\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return mod(a, b, \\\"SafeMath: modulo by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts with custom message when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b != 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/proxy/Initializable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.4.24 <0.7.0;\\n\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n * \\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {UpgradeableProxy-constructor}.\\n * \\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n */\\nabstract contract Initializable {\\n\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        require(_initializing || _isConstructor() || !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n\\n    /// @dev Returns true if and only if the function is running in the constructor\\n    function _isConstructor() private view returns (bool) {\\n        // extcodesize checks the size of the code stored in an address, and\\n        // address returns the current address. Since the code is still not\\n        // deployed when running a constructor, any checks on its code size will\\n        // yield zero, making it an effective way to detect if a contract is\\n        // under construction or not.\\n        address self = address(this);\\n        uint256 cs;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { cs := extcodesize(self) }\\n        return cs == 0;\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}","ABI":"[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"tokenID\",\"type\":\"uint32\"}],\"name\":\"AddToken\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint32\",\"name\":\"batchNum\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"l1UserTxsLen\",\"type\":\"uint16\"}],\"name\":\"ForgeBatch\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"forgeL1L2BatchTimeout\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"feeAddToken\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"withdrawalDelay\",\"type\":\"uint64\"}],\"name\":\"InitializeHermezEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint32\",\"name\":\"queueIndex\",\"type\":\"uint32\"},{\"indexed\":true,\"internalType\":\"uint8\",\"name\":\"position\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"l1UserTx\",\"type\":\"bytes\"}],\"name\":\"L1UserTxEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"SafeMode\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint8\",\"name\":\"numBucket\",\"type\":\"uint8\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"blockStamp\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"withdrawals\",\"type\":\"uint256\"}],\"name\":\"UpdateBucketWithdraw\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"arrayBuckets\",\"type\":\"uint256[]\"}],\"name\":\"UpdateBucketsParameters\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newFeeAddToken\",\"type\":\"uint256\"}],\"name\":\"UpdateFeeAddToken\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"newForgeL1L2BatchTimeout\",\"type\":\"uint8\"}],\"name\":\"UpdateForgeL1L2BatchTimeout\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"addressArray\",\"type\":\"address[]\"},{\"indexed\":false,\"internalType\":\"uint64[]\",\"name\":\"valueArray\",\"type\":\"uint64[]\"}],\"name\":\"UpdateTokenExchange\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"newWithdrawalDelay\",\"type\":\"uint64\"}],\"name\":\"UpdateWithdrawalDelay\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint48\",\"name\":\"idx\",\"type\":\"uint48\"},{\"indexed\":true,\"internalType\":\"uint32\",\"name\":\"numExitRoot\",\"type\":\"uint32\"},{\"indexed\":true,\"internalType\":\"bool\",\"name\":\"instantWithdraw\",\"type\":\"bool\"}],\"name\":\"WithdrawEvent\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"ABSOLUTE_MAX_L1L2BATCHTIMEOUT\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ACCOUNT_CREATION_HASH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"AUTHORISE_TYPEHASH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DOMAIN_SEPARATOR\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"domainSeparator\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"EIP712DOMAIN_HASH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"HERMEZ_NETWORK_HASH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"NAME_HASH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"VERSION_HASH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"babyPubKey\",\"type\":\"uint256\"},{\"internalType\":\"uint48\",\"name\":\"fromIdx\",\"type\":\"uint48\"},{\"internalType\":\"uint40\",\"name\":\"loadAmountF\",\"type\":\"uint40\"},{\"internalType\":\"uint40\",\"name\":\"amountF\",\"type\":\"uint40\"},{\"internalType\":\"uint32\",\"name\":\"tokenID\",\"type\":\"uint32\"},{\"internalType\":\"uint48\",\"name\":\"toIdx\",\"type\":\"uint48\"},{\"internalType\":\"bytes\",\"name\":\"permit\",\"type\":\"bytes\"}],\"name\":\"addL1Transaction\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"permit\",\"type\":\"bytes\"}],\"name\":\"addToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"name\":\"buckets\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"},{\"internalType\":\"uint48\",\"name\":\"\",\"type\":\"uint48\"}],\"name\":\"exitNullifierMap\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"name\":\"exitRootsMap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeAddToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint48\",\"name\":\"newLastIdx\",\"type\":\"uint48\"},{\"internalType\":\"uint256\",\"name\":\"newStRoot\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"newExitRoot\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"encodedL1CoordinatorTx\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"l1L2TxsData\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"feeIdxCoordinator\",\"type\":\"bytes\"},{\"internalType\":\"uint8\",\"name\":\"verifierIdx\",\"type\":\"uint8\"},{\"internalType\":\"bool\",\"name\":\"l1Batch\",\"type\":\"bool\"},{\"internalType\":\"uint256[2]\",\"name\":\"proofA\",\"type\":\"uint256[2]\"},{\"internalType\":\"uint256[2][2]\",\"name\":\"proofB\",\"type\":\"uint256[2][2]\"},{\"internalType\":\"uint256[2]\",\"name\":\"proofC\",\"type\":\"uint256[2]\"}],\"name\":\"forgeBatch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"forgeL1L2BatchTimeout\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getChainId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"chainId\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"hermezAuctionContract\",\"outputs\":[{\"internalType\":\"contract IHermezAuctionProtocol\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"hermezGovernanceAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_verifiers\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_verifiersParams\",\"type\":\"uint256[]\"},{\"internalType\":\"address\",\"name\":\"_withdrawVerifier\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_hermezAuctionContract\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_tokenHEZ\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"_forgeL1L2BatchTimeout\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"_feeAddToken\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_poseidon2Elements\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_poseidon3Elements\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_poseidon4Elements\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_hermezGovernanceAddress\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"_withdrawalDelay\",\"type\":\"uint64\"},{\"internalType\":\"address\",\"name\":\"_withdrawDelayerContract\",\"type\":\"address\"}],\"name\":\"initializeHermez\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint192\",\"name\":\"amount\",\"type\":\"uint192\"}],\"name\":\"instantWithdrawalViewer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"name\":\"l1L2TxsDataHashMap\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastForgedBatch\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastIdx\",\"outputs\":[{\"internalType\":\"uint48\",\"name\":\"\",\"type\":\"uint48\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastL1L2Batch\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"name\":\"mapL1TxQueue\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nBuckets\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nextL1FillingQueue\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nextL1ToForgeQueue\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"ceilUSD\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"blockStamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"withdrawals\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rateBlocks\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rateWithdrawals\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxWithdrawals\",\"type\":\"uint256\"}],\"name\":\"packBucket\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"ret\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"registerTokensCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"rollupVerifiers\",\"outputs\":[{\"internalType\":\"contract VerifierRollupInterface\",\"name\":\"verifierInterface\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"maxTx\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"nLevels\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rollupVerifiersLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"safeMode\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"name\":\"stateRootMap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"tokenExchange\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenHEZ\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"tokenList\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"tokenMap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"bucket\",\"type\":\"uint256\"}],\"name\":\"unpackBucket\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"ceilUSD\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"blockStamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"withdrawals\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rateBlocks\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rateWithdrawals\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxWithdrawals\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"newBuckets\",\"type\":\"uint256[]\"}],\"name\":\"updateBucketsParameters\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newFeeAddToken\",\"type\":\"uint256\"}],\"name\":\"updateFeeAddToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"newForgeL1L2BatchTimeout\",\"type\":\"uint8\"}],\"name\":\"updateForgeL1L2BatchTimeout\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"addressArray\",\"type\":\"address[]\"},{\"internalType\":\"uint64[]\",\"name\":\"valueArray\",\"type\":\"uint64[]\"}],\"name\":\"updateTokenExchange\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"newWithdrawalDelay\",\"type\":\"uint64\"}],\"name\":\"updateWithdrawalDelay\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[2]\",\"name\":\"proofA\",\"type\":\"uint256[2]\"},{\"internalType\":\"uint256[2][2]\",\"name\":\"proofB\",\"type\":\"uint256[2][2]\"},{\"internalType\":\"uint256[2]\",\"name\":\"proofC\",\"type\":\"uint256[2]\"},{\"internalType\":\"uint32\",\"name\":\"tokenID\",\"type\":\"uint32\"},{\"internalType\":\"uint192\",\"name\":\"amount\",\"type\":\"uint192\"},{\"internalType\":\"uint32\",\"name\":\"numExitRoot\",\"type\":\"uint32\"},{\"internalType\":\"uint48\",\"name\":\"idx\",\"type\":\"uint48\"},{\"internalType\":\"bool\",\"name\":\"instantWithdraw\",\"type\":\"bool\"}],\"name\":\"withdrawCircuit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawDelayerContract\",\"outputs\":[{\"internalType\":\"contract IWithdrawalDelayer\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"tokenID\",\"type\":\"uint32\"},{\"internalType\":\"uint192\",\"name\":\"amount\",\"type\":\"uint192\"},{\"internalType\":\"uint256\",\"name\":\"babyPubKey\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"numExitRoot\",\"type\":\"uint32\"},{\"internalType\":\"uint256[]\",\"name\":\"siblings\",\"type\":\"uint256[]\"},{\"internalType\":\"uint48\",\"name\":\"idx\",\"type\":\"uint48\"},{\"internalType\":\"bool\",\"name\":\"instantWithdraw\",\"type\":\"bool\"}],\"name\":\"withdrawMerkleProof\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawVerifier\",\"outputs\":[{\"internalType\":\"contract VerifierWithdrawInterface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawalDelay\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"Hermez","CompilerVersion":"v0.6.12+commit.27d51765","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}