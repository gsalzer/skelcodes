{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.7.1;\r\npragma experimental ABIEncoderV2;\r\n\r\ninterface IWETH {\r\n    function deposit() external payable;\r\n\r\n    function transfer(address to, uint256 value) external returns (bool);\r\n\r\n    function withdraw(uint256) external;\r\n}\r\n\r\ninterface UniswapFactory {\r\n    function getPair(address tokenA, address tokenB) external view returns(address);\r\n}\r\n\r\ninterface UniswapProxy {\r\n    function factory() external pure returns (address);\r\n\r\n    function WETH() external pure returns (address);\r\n\r\n    function addLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint256 amountADesired,\r\n        uint256 amountBDesired,\r\n        uint256 amountAMin,\r\n        uint256 amountBMin,\r\n        address to,\r\n        uint256 deadline\r\n    )\r\n        external\r\n        returns (\r\n            uint256 amountA,\r\n            uint256 amountB,\r\n            uint256 liquidity\r\n        );\r\n        \r\n    \r\n    function getAmountsOut(uint256 amountIn, address[] calldata path)\r\n        external\r\n        view\r\n        returns (uint256[] memory amounts);\r\n\r\n    \r\n        function swapExactTokensForTokens(\r\n        uint256 amountIn,\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external returns (uint256[] memory amounts);\r\n\r\n    function swapTokensForExactTokens(\r\n        uint256 amountOut,\r\n        uint256 amountInMax,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external returns (uint256[] memory amounts);\r\n\r\n    function swapExactETHForTokens(\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external payable returns (uint256[] memory amounts);\r\n\r\n    function swapTokensForExactETH(\r\n        uint256 amountOut,\r\n        uint256 amountInMax,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external returns (uint256[] memory amounts);\r\n\r\n    function swapExactTokensForETH(\r\n        uint256 amountIn,\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external returns (uint256[] memory amounts);\r\n\r\n    function swapETHForExactTokens(\r\n        uint256 amountOut,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external payable returns (uint256[] memory amounts);\r\n    \r\n}\r\n\r\ninterface UniswapPair {\r\n    function token0() external pure returns (address);\r\n\r\n    function token1() external pure returns (address);\r\n\r\n    function getReserves()\r\n        external\r\n        view\r\n        returns (\r\n            uint112 _reserve0,\r\n            uint112 _reserve1,\r\n            uint32 _blockTimestampLast\r\n        );\r\n}\r\n\r\n\r\ninterface IERC20 {\r\n    function totalSupply() external view returns (uint256);\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\ninterface CurveZap {\r\n    function add_liquidity(uint256[2] calldata uamounts, uint256 min_mint_amount) external;\r\n    function remove_liquidity_one_coin(uint256 _token_amount, int128 i, uint256 min_uamount) external;\r\n}\r\n\r\ninterface CurveMinter {\r\n    function mint(address gauge) external;\r\n}\r\n\r\ninterface CurveGauge {\r\n    function deposit(uint256 _amount) external;\r\n    function withdraw(uint256 _amount) external;\r\n    function balanceOf(address _owner) external view returns(uint256);\r\n    function claimable_tokens(address _owner) external view returns(uint256);\r\n}\r\n\r\n\r\nlibrary SafeMath {\r\n\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    function sub(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    function div(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        // Solidity only automatically asserts when dividing by 0\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    function mod(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n/**\r\n * @dev Collection of functions related to the address type\r\n */\r\nlibrary Address {\r\n    function isContract(address account) internal view returns (bool) {\r\n      uint size;\r\n      assembly { size := extcodesize(account) }\r\n      return size > 0;\r\n    }\r\n\r\n    function toPayable(address account)\r\n        internal\r\n        pure\r\n        returns (address payable)\r\n    {\r\n        return address(uint160(account));\r\n    }\r\n\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(\r\n            address(this).balance >= amount,\r\n            \"Address: insufficient balance\"\r\n        );\r\n\r\n        // solhint-disable-next-line avoid-call-value\r\n        (bool success, ) = recipient.call{value:amount}(\"\");\r\n        require(\r\n            success,\r\n            \"Address: unable to send value, recipient may have reverted\"\r\n        );\r\n    }\r\n}\r\n\r\n\r\ncontract Ownable {\r\n    address payable public owner;\r\n\r\n    constructor() {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(owner == msg.sender, \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n}\r\n\r\ncontract DaiCrv is Ownable {\r\n    using SafeMath for uint256;\r\n    using Address for address;\r\n    \r\n    mapping(address=>bool) administrators;\r\n    \r\n    modifier onlyAdmin() {\r\n        require(owner == msg.sender || administrators[msg.sender] == true, \"Admin: caller is not admin or owner\");\r\n        _;\r\n    }\r\n \r\n    UniswapProxy constant uniswapRouter = UniswapProxy(\r\n        0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D\r\n    );\r\n\r\n    UniswapFactory constant uniswapFactory = UniswapFactory(\r\n        0x5C69bEe701ef814a2B6a3EDD4B1652CB9cc5aA6f\r\n    );\r\n\r\n    /* Direccion de WETH */\r\n    address private constant weth = 0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2;\r\n    \r\n    /* Direccion de DAI */\r\n    address private constant dai  = 0x6B175474E89094C44Da98b954EedeAC495271d0F;\r\n    \r\n    /* Direccion de CRV */\r\n    address private constant crv  = 0xD533a949740bb3306d119CC777fa900bA034cd52;\r\n    \r\n    address private constant crvCompound = 0xeB21209ae4C2c9FF2a86ACA31E123764A3B6Bc06;\r\n    address private constant crvMinter = 0xd061D61a4d941c39E5453435B6345Dc261C2fcE0;\r\n    address private constant crvCompoundGauge = 0x7ca5b0a2910B33e9759DC7dDB0413949071D7575;\r\n    \r\n    address private constant crvcDaicUsdc = 0x845838DF265Dcd2c412A1Dc9e959c7d08537f8a2;\r\n    \r\n    uint256 private constant deadline = 0xf000000000000000000000000000000000000000000000000000000000000000;\r\n    uint256 private constant max = uint256(-1);\r\n\r\n\r\n    uint256 public dai_invested;\r\n    uint256 public dai_divested;\r\n\r\n    function changeOwner(address payable _newowner) external onlyOwner {\r\n        owner = _newowner;\r\n    }\r\n\r\n    function addAdmin(address _admin) external onlyOwner { \r\n        administrators[_admin] = true;\r\n    }\r\n    \r\n    function removeAdmin(address _admin) external onlyOwner {\r\n        administrators[_admin] = false;\r\n    }\r\n\r\n\r\n    function approves() external onlyOwner {\r\n        require(IERC20(dai).approve(crvCompound, max), \"Unable o approve dai\");\r\n        require(IERC20(crvcDaicUsdc).approve(crvCompoundGauge, max), \"Unable to approve cDai + cUsdc to Gauge\");\r\n        require(IERC20(crvcDaicUsdc).approve(crvCompound, max), \"Unable to approve cDai + cUsdc to crvCompound\");\r\n    }\r\n\r\n\r\n    event CallerRespose(\r\n        bool success\r\n    );\r\n\r\n    /* \r\n       1- Hace el Claim de los CRV\r\n       2- Transforma los CRV en DAI utilizando Uniswap\r\n       3- Invierte nuevamente los DAI\r\n    */\r\n    \r\n    function loop() external onlyAdmin {\r\n        loop_internal();\r\n    }\r\n    \r\n    function loop_internal() internal {\r\n        uint256 daiToInvest = claimAndSwap();\r\n        \r\n        if (daiToInvest > 0) {\r\n            invest_balance();\r\n        }\r\n    }\r\n\r\n    \r\n    function invest_balance() internal returns(uint256) {\r\n        uint256[2] memory amounts;\r\n        uint256 lp_balance;\r\n        uint256 amount = IERC20(dai).balanceOf(address(this));\r\n        \r\n        dai_invested = dai_invested + amount;\r\n        \r\n         /* Solamente se permite invertir DAI */\r\n        amounts[0] = amount;\r\n        amounts[1] = 0;\r\n    \r\n        /* Agrega liquidez */\r\n        CurveZap(crvCompound).add_liquidity(amounts, 1);\r\n\r\n        /* Consulta los LP resultantes de proveer liquidez cDAI+cUSDC */\r\n        lp_balance = IERC20(crvcDaicUsdc).balanceOf(address(this));\r\n\r\n        /* Hace el stake */\r\n        CurveGauge(crvCompoundGauge).deposit(lp_balance);\r\n\r\n        return amount;\r\n    }\r\n\r\n    function invest(uint256 amount) external onlyAdmin {\r\n        uint256 invested;\r\n        require(IERC20(dai).transferFrom(msg.sender, address(this), amount), \"Unable to transferFrom\");\r\n        invested = invest_balance();\r\n    }\r\n\r\n\r\n    function divest_all() external onlyAdmin {\r\n        uint256 _balance;\r\n        claimAndSwap();\r\n        \r\n        _balance = CurveGauge(crvCompoundGauge).balanceOf(address(this));\r\n        CurveGauge(crvCompoundGauge).withdraw(_balance);\r\n        CurveZap(crvCompound).remove_liquidity_one_coin(_balance, 0, _balance);\r\n\r\n        _balance = IERC20(dai).balanceOf(address(this));\r\n        dai_divested = dai_divested + _balance;\r\n        require(IERC20(dai).transfer(msg.sender, _balance), \"Unable to send founds\");\r\n        \r\n    }\r\n\r\n    function divest_ratio(uint256 ratio, bool claim_and_invest) external onlyAdmin {\r\n        uint256 _balance;\r\n        \r\n        require(ratio > 0 && ratio <= 100, \"Invalid ratio\");\r\n        \r\n        if (claim_and_invest == true) {\r\n            loop_internal();\r\n        }\r\n        \r\n        _balance = CurveGauge(crvCompoundGauge).balanceOf(address(this));\r\n        \r\n        _balance = ratio * _balance / 100;\r\n        \r\n        CurveGauge(crvCompoundGauge).withdraw(_balance);\r\n        CurveZap(crvCompound).remove_liquidity_one_coin(_balance, 0, _balance);\r\n\r\n        _balance = IERC20(dai).balanceOf(address(this));\r\n        dai_divested = dai_divested + _balance;\r\n        require(IERC20(dai).transfer(msg.sender, _balance), \"Unable to send founds\");\r\n        \r\n    }\r\n\r\n\r\n    function balance() external view returns(uint256) {\r\n      return CurveGauge(crvCompoundGauge).balanceOf(address(this));\r\n    }\r\n\r\n\r\n    function claimAndSwap() internal returns(uint256) {\r\n        uint256 crvBalance;\r\n\r\n        /* Hace el claim */\r\n        CurveMinter(crvMinter).mint(crvCompoundGauge);\r\n        \r\n        /* Consultamos el balance */\r\n        crvBalance = IERC20(crv).balanceOf(address(this));\r\n\r\n        if (crvBalance > 0) {\r\n            /* Transforma el crv en dai */            \r\n            return _token2Token(crv, dai, crvBalance);\r\n        }\r\n        return 0;\r\n    }\r\n\r\n\r\n    function _token2Token(\r\n        address _FromTokenContractAddress,\r\n        address _ToTokenContractAddress,\r\n        uint256 tokens2Trade\r\n    ) internal returns (uint256 tokenBought) {\r\n        if (_FromTokenContractAddress == _ToTokenContractAddress) {\r\n            return tokens2Trade;\r\n        }\r\n\r\n        if (_FromTokenContractAddress == address(0)) {\r\n            if (_ToTokenContractAddress == weth) {\r\n                IWETH(weth).deposit{value:tokens2Trade}();\r\n                return tokens2Trade;\r\n            }\r\n\r\n            address[] memory path = new address[](2);\r\n            path[0] = weth;\r\n            path[1] = _ToTokenContractAddress;\r\n            tokenBought = uniswapRouter.swapExactETHForTokens{value:\r\n                tokens2Trade\r\n            }(1, path, address(this), deadline)[path.length - 1];\r\n        } else if (_ToTokenContractAddress == address(0)) {\r\n            if (_FromTokenContractAddress == weth) {\r\n                IWETH(weth).withdraw(tokens2Trade);\r\n                return tokens2Trade;\r\n            }\r\n\r\n            IERC20(_FromTokenContractAddress).approve(\r\n                address(uniswapRouter),\r\n                tokens2Trade\r\n            );\r\n\r\n            address[] memory path = new address[](2);\r\n            path[0] = _FromTokenContractAddress;\r\n            path[1] = weth;\r\n            tokenBought = uniswapRouter.swapExactTokensForETH(\r\n                tokens2Trade,\r\n                1,\r\n                path,\r\n                address(this),\r\n                deadline\r\n            )[path.length - 1];\r\n        } else {\r\n            IERC20(_FromTokenContractAddress).approve(\r\n                address(uniswapRouter),\r\n                tokens2Trade\r\n            );\r\n\r\n            if (_FromTokenContractAddress != weth) {\r\n                if (_ToTokenContractAddress != weth) {\r\n                    // check output via tokenA -> tokenB\r\n                    address pairA = uniswapFactory.getPair(\r\n                        _FromTokenContractAddress,\r\n                        _ToTokenContractAddress\r\n                    );\r\n                    address[] memory pathA = new address[](2);\r\n                    pathA[0] = _FromTokenContractAddress;\r\n                    pathA[1] = _ToTokenContractAddress;\r\n                    uint256 amtA;\r\n                    if (pairA != address(0)) {\r\n                        amtA = uniswapRouter.getAmountsOut(\r\n                            tokens2Trade,\r\n                            pathA\r\n                        )[1];\r\n                    }\r\n\r\n                    // check output via tokenA -> weth -> tokenB\r\n                    address[] memory pathB = new address[](3);\r\n                    pathB[0] = _FromTokenContractAddress;\r\n                    pathB[1] = weth;\r\n                    pathB[2] = _ToTokenContractAddress;\r\n\r\n                    uint256 amtB = uniswapRouter.getAmountsOut(\r\n                        tokens2Trade,\r\n                        pathB\r\n                    )[2];\r\n\r\n                    if (amtA >= amtB) {\r\n                        tokenBought = uniswapRouter.swapExactTokensForTokens(\r\n                            tokens2Trade,\r\n                            1,\r\n                            pathA,\r\n                            address(this),\r\n                            deadline\r\n                        )[pathA.length - 1];\r\n                    } else {\r\n                        tokenBought = uniswapRouter.swapExactTokensForTokens(\r\n                            tokens2Trade,\r\n                            1,\r\n                            pathB,\r\n                            address(this),\r\n                            deadline\r\n                        )[pathB.length - 1];\r\n                    }\r\n                } else {\r\n                    address[] memory path = new address[](2);\r\n                    path[0] = _FromTokenContractAddress;\r\n                    path[1] = weth;\r\n\r\n                    tokenBought = uniswapRouter.swapExactTokensForTokens(\r\n                        tokens2Trade,\r\n                        1,\r\n                        path,\r\n                        address(this),\r\n                        deadline\r\n                    )[path.length - 1];\r\n                }\r\n            } else {\r\n                address[] memory path = new address[](2);\r\n                path[0] = weth;\r\n                path[1] = _ToTokenContractAddress;\r\n                tokenBought = uniswapRouter.swapExactTokensForTokens(\r\n                    tokens2Trade,\r\n                    1,\r\n                    path,\r\n                    address(this),\r\n                    deadline\r\n                )[path.length - 1];\r\n            }\r\n        }\r\n        require(tokenBought > 0, \"Error Swapping Tokens\");\r\n    }\r\n\r\n\r\n    function withdrawToken(IERC20 _TokenAddress) public onlyOwner {\r\n        uint256 qty = _TokenAddress.balanceOf(address(this));\r\n        _TokenAddress.transfer(owner, qty);\r\n    }\r\n\r\n    function withdraw() public onlyOwner {\r\n        uint256 contractBalance = address(this).balance;\r\n        address payable _to = owner;\r\n        _to.transfer(contractBalance);\r\n    }\r\n    \r\n    function caller(address _contract, bytes calldata _data) external onlyOwner {\r\n        (bool success, bytes memory data) = _contract.call(_data);\r\n        emit CallerRespose(success);\r\n    }\r\n    \r\n}","ABI":"[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"name\":\"CallerRespose\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_admin\",\"type\":\"address\"}],\"name\":\"addAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"approves\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"balance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_contract\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"caller\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_newowner\",\"type\":\"address\"}],\"name\":\"changeOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dai_divested\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dai_invested\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"divest_all\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"ratio\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"claim_and_invest\",\"type\":\"bool\"}],\"name\":\"divest_ratio\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"invest\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"loop\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_admin\",\"type\":\"address\"}],\"name\":\"removeAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"_TokenAddress\",\"type\":\"address\"}],\"name\":\"withdrawToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"DaiCrv","CompilerVersion":"v0.7.4+commit.3f05b770","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"GNU GPLv2","Proxy":"0","Implementation":"","SwarmSource":"ipfs://613c8c915138841dab8e5a1fa1c8eb807bd6d7970d4ed74ec14dff16dd06273a"}]}