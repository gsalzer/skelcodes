{"status":"1","message":"OK","result":[{"SourceCode":"// Dependency file: @openzeppelin/contracts/math/SafeMath.sol\r\n\r\n// SPDX-License-Identifier: MIT\r\n\r\n// pragma solidity ^0.7.0;\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts with custom message when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n\r\n// Dependency file: @openzeppelin/contracts/token/ERC20/IERC20.sol\r\n\r\n\r\n// pragma solidity ^0.7.0;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * // importANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n\r\n// Dependency file: @openzeppelin/contracts/utils/Address.sol\r\n\r\n\r\n// pragma solidity ^0.7.0;\r\n\r\n/**\r\n * @dev Collection of functions related to the address type\r\n */\r\nlibrary Address {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * [// importANT]\r\n     * ====\r\n     * It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     *\r\n     * Among others, `isContract` will return false for the following\r\n     * types of addresses:\r\n     *\r\n     *  - an externally-owned account\r\n     *  - a contract in construction\r\n     *  - an address where a contract will be created\r\n     *  - an address where a contract lived, but was destroyed\r\n     * ====\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // This method relies on extcodesize, which returns 0 for contracts in\r\n        // construction, since the code is only stored at the end of the\r\n        // constructor execution.\r\n\r\n        uint256 size;\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly { size := extcodesize(account) }\r\n        return size > 0;\r\n    }\r\n\r\n    /**\r\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * // importANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     */\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\r\n        (bool success, ) = recipient.call{ value: amount }(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n\r\n    /**\r\n     * @dev Performs a Solidity function call using a low level `call`. A\r\n     * plain`call` is an unsafe replacement for a function call: use this\r\n     * function instead.\r\n     *\r\n     * If `target` reverts with a revert reason, it is bubbled up by this\r\n     * function (like regular Solidity function calls).\r\n     *\r\n     * Returns the raw returned data. To convert to the expected return value,\r\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `target` must be a contract.\r\n     * - calling `target` with `data` must not revert.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n      return functionCall(target, data, \"Address: low-level call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\r\n     * `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but also transferring `value` wei to `target`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the calling contract must have an ETH balance of at least `value`.\r\n     * - the called Solidity function must be `payable`.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\r\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\r\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\r\n        require(isContract(target), \"Address: call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\r\n        return _verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\r\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\r\n        require(isContract(target), \"Address: static call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.staticcall(data);\r\n        return _verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            // Look for revert reason and bubble it up if present\r\n            if (returndata.length > 0) {\r\n                // The easiest way to bubble the revert reason is using memory via assembly\r\n\r\n                // solhint-disable-next-line no-inline-assembly\r\n                assembly {\r\n                    let returndata_size := mload(returndata)\r\n                    revert(add(32, returndata), returndata_size)\r\n                }\r\n            } else {\r\n                revert(errorMessage);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n\r\n// Dependency file: @openzeppelin/contracts/token/ERC20/SafeERC20.sol\r\n\r\n\r\n// pragma solidity ^0.7.0;\r\n\r\n// import \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\r\n// import \"@openzeppelin/contracts/math/SafeMath.sol\";\r\n// import \"@openzeppelin/contracts/utils/Address.sol\";\r\n\r\n/**\r\n * @title SafeERC20\r\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\r\n * contract returns false). Tokens that return no value (and instead revert or\r\n * throw on failure) are also supported, non-reverting calls are assumed to be\r\n * successful.\r\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\r\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\r\n */\r\nlibrary SafeERC20 {\r\n    using SafeMath for uint256;\r\n    using Address for address;\r\n\r\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\r\n    }\r\n\r\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\r\n    }\r\n\r\n    /**\r\n     * @dev Deprecated. This function has issues similar to the ones found in\r\n     * {IERC20-approve}, and its usage is discouraged.\r\n     *\r\n     * Whenever possible, use {safeIncreaseAllowance} and\r\n     * {safeDecreaseAllowance} instead.\r\n     */\r\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\r\n        // safeApprove should only be called when setting an initial allowance,\r\n        // or when resetting it to zero. To increase and decrease it, use\r\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\r\n        // solhint-disable-next-line max-line-length\r\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\r\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\r\n        );\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\r\n    }\r\n\r\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \"SafeERC20: decreased allowance below zero\");\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    /**\r\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\r\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\r\n     * @param token The token targeted by the call.\r\n     * @param data The call data (encoded using abi.encode or one of its variants).\r\n     */\r\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\r\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\r\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\r\n        // the target address contains contract code and also asserts for success in the low-level call.\r\n\r\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\r\n        if (returndata.length > 0) { // Return data is optional\r\n            // solhint-disable-next-line max-line-length\r\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\r\n        }\r\n    }\r\n}\r\n\r\n\r\n// Dependency file: @openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\r\n\r\n\r\n// pragma solidity ^0.7.0;\r\n\r\n/**\r\n * @title ERC721 token receiver interface\r\n * @dev Interface for any contract that wants to support safeTransfers\r\n * from ERC721 asset contracts.\r\n */\r\ninterface IERC721Receiver {\r\n    /**\r\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\r\n     * by `operator` from `from`, this function is called.\r\n     *\r\n     * It must return its Solidity selector to confirm the token transfer.\r\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\r\n     *\r\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\r\n     */\r\n    function onERC721Received(address operator, address from, uint256 tokenId, bytes calldata data) external returns (bytes4);\r\n}\r\n\r\n\r\n// Dependency file: @openzeppelin/contracts/utils/EnumerableSet.sol\r\n\r\n\r\n// pragma solidity ^0.7.0;\r\n\r\n/**\r\n * @dev Library for managing\r\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\r\n * types.\r\n *\r\n * Sets have the following properties:\r\n *\r\n * - Elements are added, removed, and checked for existence in constant time\r\n * (O(1)).\r\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\r\n *\r\n * ```\r\n * contract Example {\r\n *     // Add the library methods\r\n *     using EnumerableSet for EnumerableSet.AddressSet;\r\n *\r\n *     // Declare a set state variable\r\n *     EnumerableSet.AddressSet private mySet;\r\n * }\r\n * ```\r\n *\r\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\r\n * and `uint256` (`UintSet`) are supported.\r\n */\r\nlibrary EnumerableSet {\r\n    // To implement this library for multiple types with as little code\r\n    // repetition as possible, we write it in terms of a generic Set type with\r\n    // bytes32 values.\r\n    // The Set implementation uses private functions, and user-facing\r\n    // implementations (such as AddressSet) are just wrappers around the\r\n    // underlying Set.\r\n    // This means that we can only create new EnumerableSets for types that fit\r\n    // in bytes32.\r\n\r\n    struct Set {\r\n        // Storage of set values\r\n        bytes32[] _values;\r\n\r\n        // Position of the value in the `values` array, plus 1 because index 0\r\n        // means a value is not in the set.\r\n        mapping (bytes32 => uint256) _indexes;\r\n    }\r\n\r\n    /**\r\n     * @dev Add a value to a set. O(1).\r\n     *\r\n     * Returns true if the value was added to the set, that is if it was not\r\n     * already present.\r\n     */\r\n    function _add(Set storage set, bytes32 value) private returns (bool) {\r\n        if (!_contains(set, value)) {\r\n            set._values.push(value);\r\n            // The value is stored at length-1, but we add 1 to all indexes\r\n            // and use 0 as a sentinel value\r\n            set._indexes[value] = set._values.length;\r\n            return true;\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Removes a value from a set. O(1).\r\n     *\r\n     * Returns true if the value was removed from the set, that is if it was\r\n     * present.\r\n     */\r\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\r\n        // We read and store the value's index to prevent multiple reads from the same storage slot\r\n        uint256 valueIndex = set._indexes[value];\r\n\r\n        if (valueIndex != 0) { // Equivalent to contains(set, value)\r\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\r\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\r\n            // This modifies the order of the array, as noted in {at}.\r\n\r\n            uint256 toDeleteIndex = valueIndex - 1;\r\n            uint256 lastIndex = set._values.length - 1;\r\n\r\n            // When the value to delete is the last one, the swap operation is unnecessary. However, since this occurs\r\n            // so rarely, we still do the swap anyway to avoid the gas cost of adding an 'if' statement.\r\n\r\n            bytes32 lastvalue = set._values[lastIndex];\r\n\r\n            // Move the last value to the index where the value to delete is\r\n            set._values[toDeleteIndex] = lastvalue;\r\n            // Update the index for the moved value\r\n            set._indexes[lastvalue] = toDeleteIndex + 1; // All indexes are 1-based\r\n\r\n            // Delete the slot where the moved value was stored\r\n            set._values.pop();\r\n\r\n            // Delete the index for the deleted slot\r\n            delete set._indexes[value];\r\n\r\n            return true;\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the value is in the set. O(1).\r\n     */\r\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\r\n        return set._indexes[value] != 0;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of values on the set. O(1).\r\n     */\r\n    function _length(Set storage set) private view returns (uint256) {\r\n        return set._values.length;\r\n    }\r\n\r\n   /**\r\n    * @dev Returns the value stored at position `index` in the set. O(1).\r\n    *\r\n    * Note that there are no guarantees on the ordering of values inside the\r\n    * array, and it may change when more values are added or removed.\r\n    *\r\n    * Requirements:\r\n    *\r\n    * - `index` must be strictly less than {length}.\r\n    */\r\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\r\n        require(set._values.length > index, \"EnumerableSet: index out of bounds\");\r\n        return set._values[index];\r\n    }\r\n\r\n    // Bytes32Set\r\n\r\n    struct Bytes32Set {\r\n        Set _inner;\r\n    }\r\n\r\n    /**\r\n     * @dev Add a value to a set. O(1).\r\n     *\r\n     * Returns true if the value was added to the set, that is if it was not\r\n     * already present.\r\n     */\r\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\r\n        return _add(set._inner, value);\r\n    }\r\n\r\n    /**\r\n     * @dev Removes a value from a set. O(1).\r\n     *\r\n     * Returns true if the value was removed from the set, that is if it was\r\n     * present.\r\n     */\r\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\r\n        return _remove(set._inner, value);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the value is in the set. O(1).\r\n     */\r\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\r\n        return _contains(set._inner, value);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of values in the set. O(1).\r\n     */\r\n    function length(Bytes32Set storage set) internal view returns (uint256) {\r\n        return _length(set._inner);\r\n    }\r\n\r\n   /**\r\n    * @dev Returns the value stored at position `index` in the set. O(1).\r\n    *\r\n    * Note that there are no guarantees on the ordering of values inside the\r\n    * array, and it may change when more values are added or removed.\r\n    *\r\n    * Requirements:\r\n    *\r\n    * - `index` must be strictly less than {length}.\r\n    */\r\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\r\n        return _at(set._inner, index);\r\n    }\r\n\r\n    // AddressSet\r\n\r\n    struct AddressSet {\r\n        Set _inner;\r\n    }\r\n\r\n    /**\r\n     * @dev Add a value to a set. O(1).\r\n     *\r\n     * Returns true if the value was added to the set, that is if it was not\r\n     * already present.\r\n     */\r\n    function add(AddressSet storage set, address value) internal returns (bool) {\r\n        return _add(set._inner, bytes32(uint256(value)));\r\n    }\r\n\r\n    /**\r\n     * @dev Removes a value from a set. O(1).\r\n     *\r\n     * Returns true if the value was removed from the set, that is if it was\r\n     * present.\r\n     */\r\n    function remove(AddressSet storage set, address value) internal returns (bool) {\r\n        return _remove(set._inner, bytes32(uint256(value)));\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the value is in the set. O(1).\r\n     */\r\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\r\n        return _contains(set._inner, bytes32(uint256(value)));\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of values in the set. O(1).\r\n     */\r\n    function length(AddressSet storage set) internal view returns (uint256) {\r\n        return _length(set._inner);\r\n    }\r\n\r\n   /**\r\n    * @dev Returns the value stored at position `index` in the set. O(1).\r\n    *\r\n    * Note that there are no guarantees on the ordering of values inside the\r\n    * array, and it may change when more values are added or removed.\r\n    *\r\n    * Requirements:\r\n    *\r\n    * - `index` must be strictly less than {length}.\r\n    */\r\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\r\n        return address(uint256(_at(set._inner, index)));\r\n    }\r\n\r\n\r\n    // UintSet\r\n\r\n    struct UintSet {\r\n        Set _inner;\r\n    }\r\n\r\n    /**\r\n     * @dev Add a value to a set. O(1).\r\n     *\r\n     * Returns true if the value was added to the set, that is if it was not\r\n     * already present.\r\n     */\r\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\r\n        return _add(set._inner, bytes32(value));\r\n    }\r\n\r\n    /**\r\n     * @dev Removes a value from a set. O(1).\r\n     *\r\n     * Returns true if the value was removed from the set, that is if it was\r\n     * present.\r\n     */\r\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\r\n        return _remove(set._inner, bytes32(value));\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the value is in the set. O(1).\r\n     */\r\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\r\n        return _contains(set._inner, bytes32(value));\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of values on the set. O(1).\r\n     */\r\n    function length(UintSet storage set) internal view returns (uint256) {\r\n        return _length(set._inner);\r\n    }\r\n\r\n   /**\r\n    * @dev Returns the value stored at position `index` in the set. O(1).\r\n    *\r\n    * Note that there are no guarantees on the ordering of values inside the\r\n    * array, and it may change when more values are added or removed.\r\n    *\r\n    * Requirements:\r\n    *\r\n    * - `index` must be strictly less than {length}.\r\n    */\r\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\r\n        return uint256(_at(set._inner, index));\r\n    }\r\n}\r\n\r\n\r\n// Dependency file: contracts/model/StoredOfferModel.sol\r\n\r\n\r\n// pragma solidity 0.7.3;\r\n\r\nabstract contract StoredOfferModel {\r\n\r\n    // The order of fields in this struct is optimised to use the fewest storage slots\r\n    struct StoredOffer {\r\n        uint32 nonce;\r\n        uint32 timelockPeriod;\r\n        address loanTokenAddress;\r\n        address itemTokenAddress;\r\n        uint256 itemTokenId;\r\n        uint256 itemValue;\r\n        uint256 redemptionPrice;\r\n    }\r\n}\r\n\r\n\r\n// Dependency file: contracts/utils/FractionMath.sol\r\n\r\n\r\n// pragma solidity 0.7.3;\r\n\r\n// import \"@openzeppelin/contracts/math/SafeMath.sol\";\r\n\r\nlibrary FractionMath {\r\n    using SafeMath for uint256;\r\n\r\n    struct Fraction {\r\n        uint48 numerator;\r\n        uint48 denominator;\r\n    }\r\n\r\n    function sanitize(Fraction calldata fraction) internal pure returns (Fraction calldata) {\r\n        require(fraction.denominator > 0, \"FractionMath: denominator must be greater than zero\");\r\n        return fraction;\r\n    }\r\n\r\n    function mul(Fraction storage fraction, uint256 value) internal view returns (uint256) {\r\n        return value.mul(fraction.numerator).div(fraction.denominator);\r\n    }\r\n}\r\n\r\n\r\n// Dependency file: contracts/model/LoanModel.sol\r\n\r\n\r\n// pragma solidity 0.7.3;\r\n\r\n// import \"contracts/model/StoredOfferModel.sol\";\r\n// import \"contracts/utils/FractionMath.sol\";\r\n\r\nabstract contract LoanModel is StoredOfferModel {\r\n    enum LoanStatus {\r\n        TAKEN,\r\n        RETURNED,\r\n        CLAIMED\r\n    }\r\n\r\n    // The order of fields in this struct is optimised to use the fewest storage slots\r\n    struct Loan {\r\n        StoredOffer offer;\r\n        LoanStatus status;\r\n        address borrowerAddress;\r\n        address lenderAddress;\r\n        uint48 redemptionFeeNumerator;\r\n        uint48 redemptionFeeDenominator;\r\n        uint256 timestamp;\r\n    }\r\n}\r\n\r\n\r\n// Dependency file: contracts/model/StakingModel.sol\r\n\r\n\r\n// pragma solidity 0.7.3;\r\n\r\n// import \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\r\n\r\n// For deeper understanding of the meaning of StakingState fields refer to `docs/PawnshopStaking.md` document\r\n\r\nabstract contract StakingModel {\r\n    struct StakingState {\r\n        IERC20 token;\r\n        uint256 totalClaimedRewards; // total amount of rewards already transferred to the stakers\r\n        uint256 totalRewards; // total amount of rewards collected\r\n        uint256 cRPT; // cumulative reward per token\r\n        mapping(address => uint256) alreadyPaidCRPT; // cumulative reward per token already \"paid\" to the staker\r\n        mapping(address => uint256) claimableReward; // the amount of rewards that can be withdrawn from the contract by the staker\r\n    }\r\n}\r\n\r\n\r\n// Dependency file: contracts/handlers/IHandler.sol\r\n\r\n\r\n// pragma solidity 0.7.3;\r\n\r\ninterface IHandler {\r\n    function supportToken(address token) external;\r\n\r\n    function stopSupportingToken(address token) external;\r\n\r\n    function isSupported(address token) external view returns (bool);\r\n\r\n    function deposit(address from, address token, uint256 tokenId) external;\r\n\r\n    function withdraw(address recipient, address token, uint256 tokenId) external;\r\n\r\n    function changeOwnership(address recipient, address token, uint256 tokenId) external;\r\n\r\n    function ownerOf(address token, uint256 tokenId) external view returns (address);\r\n\r\n    function depositTimestamp(address tokenContract, uint256 tokenId) external view returns (uint256);\r\n}\r\n\r\n\r\n// Dependency file: contracts/utils/EnumerableMap.sol\r\n\r\n\r\n// pragma solidity 0.7.3;\r\n\r\n/**\r\n * This library was copied from OpenZeppelin's EnumerableMap.sol and adjusted to our needs.\r\n * The only changes made are:\r\n * - change // pragma solidity to 0.7.3\r\n * - change UintToAddressMap to AddressToAddressMap by renaming and adjusting methods\r\n * - add SupportState enum declaration\r\n * - clone AddressToAddressMap and change it to AddressToSupportStateMap by renaming and adjusting methods\r\n */\r\nlibrary EnumerableMap {\r\n    // To implement this library for multiple types with as little code\r\n    // repetition as possible, we write it in terms of a generic Map type with\r\n    // bytes32 keys and values.\r\n    // The Map implementation uses private functions, and user-facing\r\n    // implementations (such as Uint256ToAddressMap) are just wrappers around\r\n    // the underlying Map.\r\n    // This means that we can only create new EnumerableMaps for types that fit\r\n    // in bytes32.\r\n\r\n    struct MapEntry {\r\n        bytes32 _key;\r\n        bytes32 _value;\r\n    }\r\n\r\n    struct Map {\r\n        // Storage of map keys and values\r\n        MapEntry[] _entries;\r\n\r\n        // Position of the entry defined by a key in the `entries` array, plus 1\r\n        // because index 0 means a key is not in the map.\r\n        mapping (bytes32 => uint256) _indexes;\r\n    }\r\n\r\n    /**\r\n     * @dev Adds a key-value pair to a map, or updates the value for an existing\r\n     * key. O(1).\r\n     *\r\n     * Returns true if the key was added to the map, that is if it was not\r\n     * already present.\r\n     */\r\n    function _set(Map storage map, bytes32 key, bytes32 value) private returns (bool) {\r\n        // We read and store the key's index to prevent multiple reads from the same storage slot\r\n        uint256 keyIndex = map._indexes[key];\r\n\r\n        if (keyIndex == 0) { // Equivalent to !contains(map, key)\r\n            map._entries.push(MapEntry({ _key: key, _value: value }));\r\n            // The entry is stored at length-1, but we add 1 to all indexes\r\n            // and use 0 as a sentinel value\r\n            map._indexes[key] = map._entries.length;\r\n            return true;\r\n        } else {\r\n            map._entries[keyIndex - 1]._value = value;\r\n            return false;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Removes a key-value pair from a map. O(1).\r\n     *\r\n     * Returns true if the key was removed from the map, that is if it was present.\r\n     */\r\n    function _remove(Map storage map, bytes32 key) private returns (bool) {\r\n        // We read and store the key's index to prevent multiple reads from the same storage slot\r\n        uint256 keyIndex = map._indexes[key];\r\n\r\n        if (keyIndex != 0) { // Equivalent to contains(map, key)\r\n            // To delete a key-value pair from the _entries array in O(1), we swap the entry to delete with the last one\r\n            // in the array, and then remove the last entry (sometimes called as 'swap and pop').\r\n            // This modifies the order of the array, as noted in {at}.\r\n\r\n            uint256 toDeleteIndex = keyIndex - 1;\r\n            uint256 lastIndex = map._entries.length - 1;\r\n\r\n            // When the entry to delete is the last one, the swap operation is unnecessary. However, since this occurs\r\n            // so rarely, we still do the swap anyway to avoid the gas cost of adding an 'if' statement.\r\n\r\n            MapEntry storage lastEntry = map._entries[lastIndex];\r\n\r\n            // Move the last entry to the index where the entry to delete is\r\n            map._entries[toDeleteIndex] = lastEntry;\r\n            // Update the index for the moved entry\r\n            map._indexes[lastEntry._key] = toDeleteIndex + 1; // All indexes are 1-based\r\n\r\n            // Delete the slot where the moved entry was stored\r\n            map._entries.pop();\r\n\r\n            // Delete the index for the deleted slot\r\n            delete map._indexes[key];\r\n\r\n            return true;\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the key is in the map. O(1).\r\n     */\r\n    function _contains(Map storage map, bytes32 key) private view returns (bool) {\r\n        return map._indexes[key] != 0;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of key-value pairs in the map. O(1).\r\n     */\r\n    function _length(Map storage map) private view returns (uint256) {\r\n        return map._entries.length;\r\n    }\r\n\r\n   /**\r\n    * @dev Returns the key-value pair stored at position `index` in the map. O(1).\r\n    *\r\n    * Note that there are no guarantees on the ordering of entries inside the\r\n    * array, and it may change when more entries are added or removed.\r\n    *\r\n    * Requirements:\r\n    *\r\n    * - `index` must be strictly less than {length}.\r\n    */\r\n    function _at(Map storage map, uint256 index) private view returns (bytes32, bytes32) {\r\n        require(map._entries.length > index, \"EnumerableMap: index out of bounds\");\r\n\r\n        MapEntry storage entry = map._entries[index];\r\n        return (entry._key, entry._value);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the value associated with `key`.  O(1).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `key` must be in the map.\r\n     */\r\n    function _get(Map storage map, bytes32 key) private view returns (bytes32) {\r\n        return _get(map, key, \"EnumerableMap: nonexistent key\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {_get}, with a custom error message when `key` is not in the map.\r\n     */\r\n    function _get(Map storage map, bytes32 key, string memory errorMessage) private view returns (bytes32) {\r\n        uint256 keyIndex = map._indexes[key];\r\n        require(keyIndex != 0, errorMessage); // Equivalent to contains(map, key)\r\n        return map._entries[keyIndex - 1]._value; // All indexes are 1-based\r\n    }\r\n\r\n    // AddressToAddressMap\r\n\r\n    struct AddressToAddressMap {\r\n        Map _inner;\r\n    }\r\n\r\n    /**\r\n     * @dev Adds a key-value pair to a map, or updates the value for an existing\r\n     * key. O(1).\r\n     *\r\n     * Returns true if the key was added to the map, that is if it was not\r\n     * already present.\r\n     */\r\n    function set(AddressToAddressMap storage map, address key, address value) internal returns (bool) {\r\n        return _set(map._inner, bytes32(uint256(key)), bytes32(uint256(value)));\r\n    }\r\n\r\n    /**\r\n     * @dev Removes a value from a set. O(1).\r\n     *\r\n     * Returns true if the key was removed from the map, that is if it was present.\r\n     */\r\n    function remove(AddressToAddressMap storage map, address key) internal returns (bool) {\r\n        return _remove(map._inner, bytes32(uint256(key)));\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the key is in the map. O(1).\r\n     */\r\n    function contains(AddressToAddressMap storage map, address key) internal view returns (bool) {\r\n        return _contains(map._inner, bytes32(uint256(key)));\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of elements in the map. O(1).\r\n     */\r\n    function length(AddressToAddressMap storage map) internal view returns (uint256) {\r\n        return _length(map._inner);\r\n    }\r\n\r\n   /**\r\n    * @dev Returns the element stored at position `index` in the set. O(1).\r\n    * Note that there are no guarantees on the ordering of values inside the\r\n    * array, and it may change when more values are added or removed.\r\n    *\r\n    * Requirements:\r\n    *\r\n    * - `index` must be strictly less than {length}.\r\n    */\r\n    function at(AddressToAddressMap storage map, uint256 index) internal view returns (address, address) {\r\n        (bytes32 key, bytes32 value) = _at(map._inner, index);\r\n        return (address(uint256(key)), address(uint256(value)));\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the value associated with `key`.  O(1).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `key` must be in the map.\r\n     */\r\n    function get(AddressToAddressMap storage map, address key) internal view returns (address) {\r\n        return address(uint256(_get(map._inner, bytes32(uint256(key)))));\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {get}, with a custom error message when `key` is not in the map.\r\n     */\r\n    function get(AddressToAddressMap storage map, address key, string memory errorMessage) internal view returns (address) {\r\n        return address(uint256(_get(map._inner, bytes32(uint256(key)), errorMessage)));\r\n    }\r\n\r\n\r\n    // AddressToSupportStateMap\r\n\r\n    struct AddressToSupportStateMap {\r\n        Map _inner;\r\n    }\r\n\r\n    enum SupportState {\r\n        UNSUPPORTED,\r\n        SUPPORTED,\r\n        SUPPORT_STOPPED\r\n    }\r\n\r\n    /**\r\n     * @dev Adds a key-value pair to a map, or updates the value for an existing\r\n     * key. O(1).\r\n     *\r\n     * Returns true if the key was added to the map, that is if it was not\r\n     * already present.\r\n     */\r\n    function set(AddressToSupportStateMap storage map, address key, SupportState value) internal returns (bool) {\r\n        return _set(map._inner, bytes32(uint256(key)), bytes32(uint256(value)));\r\n    }\r\n\r\n    /**\r\n     * @dev Removes a value from a set. O(1).\r\n     *\r\n     * Returns true if the key was removed from the map, that is if it was present.\r\n     */\r\n    function remove(AddressToSupportStateMap storage map, address key) internal returns (bool) {\r\n        return _remove(map._inner, bytes32(uint256(key)));\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the key is in the map. O(1).\r\n     */\r\n    function contains(AddressToSupportStateMap storage map, address key) internal view returns (bool) {\r\n        return _contains(map._inner, bytes32(uint256(key)));\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of elements in the map. O(1).\r\n     */\r\n    function length(AddressToSupportStateMap storage map) internal view returns (uint256) {\r\n        return _length(map._inner);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the element stored at position `index` in the set. O(1).\r\n     * Note that there are no guarantees on the ordering of values inside the\r\n     * array, and it may change when more values are added or removed.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `index` must be strictly less than {length}.\r\n     */\r\n    function at(AddressToSupportStateMap storage map, uint256 index) internal view returns (address, SupportState) {\r\n        (bytes32 key, bytes32 value) = _at(map._inner, index);\r\n        return (address(uint256(key)), SupportState(uint256(value)));\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the value associated with `key`.  O(1).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `key` must be in the map.\r\n     */\r\n    function get(AddressToSupportStateMap storage map, address key) internal view returns (SupportState) {\r\n        return SupportState(uint256(_get(map._inner, bytes32(uint256(key)))));\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {get}, with a custom error message when `key` is not in the map.\r\n     */\r\n    function get(AddressToSupportStateMap storage map, address key, string memory errorMessage) internal view returns (SupportState) {\r\n        return SupportState(uint256(_get(map._inner, bytes32(uint256(key)), errorMessage)));\r\n    }\r\n}\r\n\r\n\r\n// Dependency file: contracts/PawnshopStorage.sol\r\n\r\n\r\n// pragma solidity 0.7.3;\r\n\r\n// import \"@openzeppelin/contracts/utils/EnumerableSet.sol\";\r\n// import \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\r\n// import \"contracts/model/LoanModel.sol\";\r\n// import \"contracts/model/StakingModel.sol\";\r\n// import \"contracts/handlers/IHandler.sol\";\r\n// import \"contracts/utils/EnumerableMap.sol\";\r\n// import \"contracts/utils/FractionMath.sol\";\r\n\r\nabstract contract PawnshopStorage is LoanModel, StakingModel {\r\n    // Initializable.sol\r\n    bool internal _initialized;\r\n    bool internal _initializing;\r\n\r\n    // Ownable.sol\r\n    address internal _owner;\r\n\r\n    // ReentrancyGuard.sol\r\n    uint256 internal _guardStatus;\r\n\r\n    // Pawnshop.sol\r\n    mapping (bytes32 => Loan) internal _loans;\r\n    mapping (bytes32 => bool) internal _usedOfferSignatures;\r\n\r\n    // PawnshopConfig.sol\r\n    uint256 internal _maxTimelockPeriod;\r\n    EnumerableMap.AddressToAddressMap internal _tokenAddressToHandlerAddress;\r\n    EnumerableMap.AddressToSupportStateMap internal _loanTokens;\r\n    mapping (address => FractionMath.Fraction) internal _minLenderProfits;\r\n    mapping (address => FractionMath.Fraction) internal _depositFees;\r\n    mapping (address => FractionMath.Fraction) internal _redemptionFees;\r\n    mapping (address => FractionMath.Fraction) internal _flashFees;\r\n\r\n    // PawnshopStaking.sol\r\n    IERC20 internal _stakingToken;\r\n    mapping(address => uint256) internal _staked;\r\n    uint256 internal _totalStaked;\r\n    mapping(address => StakingState) internal _stakingStates;\r\n\r\n    // EIP712Domain.sol\r\n    bytes32 internal DOMAIN_SEPARATOR; // solhint-disable-line var-name-mixedcase\r\n}\r\n\r\n\r\n// Dependency file: contracts/Initializable.sol\r\n\r\n\r\n// pragma solidity 0.7.3;\r\n\r\n// import \"contracts/PawnshopStorage.sol\";\r\n\r\n/**\r\n * @title Initializable\r\n *\r\n * @dev Helper contract to support initializer functions. To use it, replace\r\n * the constructor with a function that has the `initializer` modifier.\r\n * WARNING: Unlike constructors, initializer functions must be manually\r\n * invoked. This applies both to deploying an Initializable contract, as well\r\n * as extending an Initializable contract via inheritance.\r\n * WARNING: When used with inheritance, manual care must be taken to not invoke\r\n * a parent initializer twice, or ensure that all initializers are idempotent,\r\n * because this is not dealt with automatically as with constructors.\r\n */\r\ncontract Initializable is PawnshopStorage {\r\n    /**\r\n     * @dev Indicates that the contract has been initialized.\r\n     */\r\n    // bool _initialized;\r\n\r\n    /**\r\n     * @dev Indicates that the contract is in the process of being initialized.\r\n     */\r\n    // bool _initializing;\r\n\r\n    /**\r\n     * @dev Modifier to use in the initializer function of a contract.\r\n     */\r\n    modifier initializer() {\r\n        require(_initializing || isConstructor() || !_initialized, \"Contract instance has already been initialized\");\r\n\r\n        bool isTopLevelCall = !_initializing;\r\n        if (isTopLevelCall) {\r\n            _initializing = true;\r\n            _initialized = true;\r\n        }\r\n\r\n        _;\r\n\r\n        if (isTopLevelCall) {\r\n            _initializing = false;\r\n        }\r\n    }\r\n\r\n    /// @dev Returns true if and only if the function is running in the constructor\r\n    function isConstructor() private view returns (bool) {\r\n        // extcodesize checks the size of the code stored in an address, and\r\n        // address returns the current address. Since the code is still not\r\n        // deployed when running a constructor, any checks on its code size will\r\n        // yield zero, making it an effective way to detect if a contract is\r\n        // under construction or not.\r\n        address self = address(this);\r\n        uint256 cs;\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly {\r\n            cs := extcodesize(self)\r\n        }\r\n        return cs == 0;\r\n    }\r\n}\r\n\r\n\r\n// Dependency file: contracts/Ownable.sol\r\n\r\n\r\n// pragma solidity 0.7.3;\r\n\r\n// import \"contracts/PawnshopStorage.sol\";\r\n// import \"contracts/Initializable.sol\";\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\ncontract Ownable is PawnshopStorage, Initializable {\r\n    // address _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    // solhint-disable-next-line func-name-mixedcase\r\n    function __Ownable_init_unchained(address owner) internal initializer {\r\n        _owner = owner;\r\n        emit OwnershipTransferred(address(0), owner);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(_owner == msg.sender, \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\n\r\n// Dependency file: contracts/ReentrancyGuard.sol\r\n\r\n\r\n// pragma solidity 0.7.3;\r\n\r\n// import \"contracts/PawnshopStorage.sol\";\r\n// import \"contracts/Initializable.sol\";\r\n\r\nabstract contract ReentrancyGuard is PawnshopStorage, Initializable {\r\n    uint256 private constant _NOT_ENTERED = 1;\r\n    uint256 private constant _ENTERED = 2;\r\n\r\n    // uint256 _guardStatus;\r\n\r\n    // solhint-disable-next-line func-name-mixedcase\r\n    function __ReentrancyGuard_init_unchained() internal initializer {\r\n        _guardStatus = _NOT_ENTERED;\r\n    }\r\n\r\n    modifier nonReentrant() {\r\n        require(_guardStatus != _ENTERED, \"ReentrancyGuard: reentrant call\");\r\n        _guardStatus = _ENTERED;\r\n        _;\r\n        _guardStatus = _NOT_ENTERED;\r\n    }\r\n}\r\n\r\n\r\n// Dependency file: contracts/PawnshopConfig.sol\r\n\r\n\r\n// pragma solidity 0.7.3;\r\n// pragma experimental ABIEncoderV2;\r\n\r\n// import \"@openzeppelin/contracts/math/SafeMath.sol\";\r\n// import \"@openzeppelin/contracts/utils/EnumerableSet.sol\";\r\n\r\n// import \"contracts/PawnshopStorage.sol\";\r\n// import \"contracts/Initializable.sol\";\r\n// import \"contracts/Ownable.sol\";\r\n// import \"contracts/utils/EnumerableMap.sol\";\r\n// import \"contracts/utils/FractionMath.sol\";\r\n\r\nabstract contract PawnshopConfig is PawnshopStorage, Ownable {\r\n    using SafeMath for uint256;\r\n    using EnumerableMap for EnumerableMap.AddressToAddressMap;\r\n    using EnumerableMap for EnumerableMap.AddressToSupportStateMap;\r\n    using FractionMath for FractionMath.Fraction;\r\n\r\n    // uint256 _maxTimelockPeriod;\r\n    // EnumerableMap.AddressToAddressMap _tokenAddressToHandlerAddress;\r\n    // EnumerableMap.AddressToSupportStateMap _loanTokens;\r\n    // mapping (address => FractionMath.Fraction) _minLenderProfits;\r\n    // mapping (address => FractionMath.Fraction) _depositFees;\r\n    // mapping (address => FractionMath.Fraction) _redemptionFees;\r\n    // mapping (address => FractionMath.Fraction) _flashFees;\r\n\r\n    event MaxTimelockPeriodSet(uint256 indexed time);\r\n    event MinLenderProfitSet(address indexed loanTokenAddress, FractionMath.Fraction minProfit);\r\n    event PawnshopFeesSet(\r\n        address indexed loanTokenAddress,\r\n        FractionMath.Fraction depositFee,\r\n        FractionMath.Fraction redemptionFee,\r\n        FractionMath.Fraction flashFee\r\n    );\r\n    event ItemSupported(address indexed tokenAddress);\r\n    event LoanTokenSupported(address indexed tokenAddress);\r\n    event ItemSupportStopped(address indexed tokenAddress);\r\n    event LoanTokenSupportStopped(address indexed tokenAddress);\r\n\r\n    function setMaxTimelockPeriod(uint256 time) external onlyOwner {\r\n        _setMaxTimelockPeriod(time);\r\n    }\r\n\r\n    function _setMaxTimelockPeriod(uint256 time) internal {\r\n        require(time > 0, \"Pawnshop: the max timelock period must be greater than 0\");\r\n        _maxTimelockPeriod = time;\r\n        emit MaxTimelockPeriodSet(time);\r\n    }\r\n\r\n    function setMinLenderProfit(address loanTokenAddress, FractionMath.Fraction calldata minProfit) public onlyOwner {\r\n        require(isLoanTokenSupported(loanTokenAddress), \"Pawnshop: the loan token is not supported\");\r\n        _minLenderProfits[loanTokenAddress] = FractionMath.sanitize(minProfit);\r\n\r\n        emit MinLenderProfitSet(loanTokenAddress, minProfit);\r\n    }\r\n\r\n    function setPawnshopFees(\r\n        address loanTokenAddress,\r\n        FractionMath.Fraction calldata depositFee,\r\n        FractionMath.Fraction calldata redemptionFee,\r\n        FractionMath.Fraction calldata flashFee\r\n    ) public onlyOwner {\r\n        require(isLoanTokenSupported(loanTokenAddress), \"Pawnshop: the loan token is not supported\");\r\n        _depositFees[loanTokenAddress] = FractionMath.sanitize(depositFee);\r\n        _redemptionFees[loanTokenAddress] = FractionMath.sanitize(redemptionFee);\r\n        _flashFees[loanTokenAddress] = FractionMath.sanitize(flashFee);\r\n\r\n        emit PawnshopFeesSet(\r\n            loanTokenAddress,\r\n            depositFee,\r\n            redemptionFee,\r\n            flashFee\r\n        );\r\n    }\r\n\r\n    function supportItem(IHandler handler, address tokenAddress) external onlyOwner {\r\n        require(!handler.isSupported(tokenAddress), \"Pawnshop: the item is already supported\");\r\n        handler.supportToken(tokenAddress);\r\n        _tokenAddressToHandlerAddress.set(tokenAddress, address(handler));\r\n        emit ItemSupported(tokenAddress);\r\n    }\r\n\r\n    function supportLoanToken(\r\n        address tokenAddress,\r\n        FractionMath.Fraction calldata minProfit,\r\n        FractionMath.Fraction calldata depositFee,\r\n        FractionMath.Fraction calldata redemptionFee,\r\n        FractionMath.Fraction calldata flashFee\r\n    ) external onlyOwner {\r\n        require(!isLoanTokenSupported(tokenAddress), \"Pawnshop: the ERC20 loan token is already supported\");\r\n        require(tokenAddress != address(_stakingToken), \"Pawnshop: cannot support the staking token\");\r\n        _loanTokens.set(tokenAddress, EnumerableMap.SupportState.SUPPORTED);\r\n        StakingState storage newStakingState = _stakingStates[tokenAddress];\r\n        newStakingState.token = IERC20(tokenAddress);\r\n        setMinLenderProfit(tokenAddress, minProfit);\r\n        setPawnshopFees(tokenAddress, depositFee, redemptionFee, flashFee);\r\n        emit LoanTokenSupported(tokenAddress);\r\n    }\r\n\r\n    function stopSupportingItem(address tokenAddress) external onlyOwner {\r\n        IHandler handler = itemHandler(tokenAddress);\r\n        handler.stopSupportingToken(tokenAddress);\r\n        emit ItemSupportStopped(tokenAddress);\r\n    }\r\n\r\n    function stopSupportingLoanToken(address tokenAddress) external onlyOwner {\r\n        require(isLoanTokenSupported(tokenAddress), \"Pawnshop: the ERC20 loan token is not supported\");\r\n        _loanTokens.set(tokenAddress, EnumerableMap.SupportState.SUPPORT_STOPPED);\r\n        emit LoanTokenSupportStopped(tokenAddress);\r\n    }\r\n\r\n    function isLoanTokenSupported(address tokenAddress) public view returns (bool) {\r\n        return _loanTokens.contains(tokenAddress) &&\r\n            _loanTokens.get(tokenAddress) == EnumerableMap.SupportState.SUPPORTED;\r\n    }\r\n\r\n    function wasLoanTokenEverSupported(address tokenAddress) public view returns (bool) {\r\n        return _loanTokens.contains(tokenAddress);\r\n    }\r\n\r\n    function isItemTokenSupported(address tokenAddress) external view returns (bool) {\r\n        if (!_tokenAddressToHandlerAddress.contains(tokenAddress)) {\r\n            return false;\r\n        }\r\n        address handler = _tokenAddressToHandlerAddress.get(tokenAddress);\r\n        return IHandler(handler).isSupported(tokenAddress);\r\n    }\r\n\r\n    function totalItemTokens() external view returns (uint256) {\r\n        return _tokenAddressToHandlerAddress.length();\r\n    }\r\n\r\n    function itemTokenByIndex(uint256 index) external view returns (address tokenAddress, address handlerAddress, bool isCurrentlySupported) {\r\n        (tokenAddress, handlerAddress) = _tokenAddressToHandlerAddress.at(index);\r\n        isCurrentlySupported = IHandler(handlerAddress).isSupported(tokenAddress);\r\n    }\r\n\r\n    function maxTimelockPeriod() external view returns (uint256) {\r\n        return _maxTimelockPeriod;\r\n    }\r\n\r\n    function minLenderProfit(address loanTokenAddress) external view returns (FractionMath.Fraction memory) {\r\n        return _minLenderProfits[loanTokenAddress];\r\n    }\r\n\r\n    function depositFee(address loanTokenAddress) external view returns (FractionMath.Fraction memory) {\r\n        return _depositFees[loanTokenAddress];\r\n    }\r\n\r\n    function redemptionFee(address loanTokenAddress) external view returns (FractionMath.Fraction memory) {\r\n        return _redemptionFees[loanTokenAddress];\r\n    }\r\n\r\n    function flashFee(address loanTokenAddress) external view returns (FractionMath.Fraction memory) {\r\n        return _flashFees[loanTokenAddress];\r\n    }\r\n\r\n    function totalLoanTokens() external view returns (uint256) {\r\n        return _loanTokens.length();\r\n    }\r\n\r\n    function loanTokenByIndex(uint256 index) external view returns (address, EnumerableMap.SupportState) {\r\n        return _loanTokens.at(index);\r\n    }\r\n\r\n    function itemHandler(address itemTokenAddress) public view returns (IHandler) {\r\n        return IHandler(_tokenAddressToHandlerAddress.get(itemTokenAddress, \"Pawnshop: the item is not supported\"));\r\n    }\r\n\r\n    function minReturnAmount(address loanTokenAddress, uint256 loanAmount) public view returns (uint256) {\r\n        FractionMath.Fraction storage minProfit = _minLenderProfits[loanTokenAddress];\r\n        uint256 lenderProfit = minProfit.mul(loanAmount);\r\n        return loanAmount.add(lenderProfit);\r\n    }\r\n}\r\n\r\n\r\n// Dependency file: contracts/PawnshopStaking.sol\r\n\r\n\r\n// pragma solidity 0.7.3;\r\n// pragma experimental ABIEncoderV2;\r\n\r\n// import \"@openzeppelin/contracts/math/SafeMath.sol\";\r\n// import \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\r\n// import \"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\";\r\n\r\n// import \"contracts/PawnshopStorage.sol\";\r\n// import \"contracts/PawnshopConfig.sol\";\r\n// import \"contracts/model/StakingModel.sol\";\r\n// import \"contracts/utils/EnumerableMap.sol\";\r\n\r\n\r\nabstract contract PawnshopStaking is StakingModel, PawnshopStorage, PawnshopConfig {\r\n    using SafeMath for uint256;\r\n    using SafeERC20 for IERC20;\r\n    using EnumerableMap for EnumerableMap.AddressToSupportStateMap;\r\n\r\n    uint256 private constant PRECISION = 1e30;\r\n\r\n    // IERC20 _stakingToken;\r\n    // mapping(address => uint256) _staked;\r\n    // uint256 _totalStaked;\r\n    // mapping(address => StakingState) _stakingStates;\r\n\r\n    event Staked(address indexed staker, uint256 amount);\r\n    event Unstaked(address indexed staker, uint256 amount);\r\n    event RewardClaimed(address indexed staker, address indexed token, uint256 amount);\r\n\r\n    // solhint-disable-next-line func-name-mixedcase\r\n    function __PawnshopStaking_init_unchained(IERC20 stakingToken) internal initializer {\r\n        _stakingToken = stakingToken;\r\n    }\r\n\r\n    function stake(uint256 amount) external {\r\n        if (_totalStaked > 0) {\r\n            _updateRewards();\r\n        }\r\n        _staked[msg.sender] = _staked[msg.sender].add(amount);\r\n        _totalStaked = _totalStaked.add(amount);\r\n        _stakingToken.safeTransferFrom(msg.sender, address(this), amount);\r\n        emit Staked(msg.sender, amount);\r\n    }\r\n\r\n    function unstake(uint256 amount) external {\r\n        require(amount <= _staked[msg.sender], \"PawnshopStaking: cannot unstake more than was staked\");\r\n        _updateRewards();\r\n        _staked[msg.sender] = _staked[msg.sender].sub(amount);\r\n        _totalStaked = _totalStaked.sub(amount);\r\n        _stakingToken.safeTransfer(msg.sender, amount);\r\n        emit Unstaked(msg.sender, amount);\r\n    }\r\n\r\n    function claimRewards() external {\r\n        uint256 loanTokensCount = _loanTokens.length();\r\n        for (uint256 i = 0; i < loanTokensCount; i++) {\r\n            (address loanToken,) = _loanTokens.at(i);\r\n            StakingState storage state = _stakingStates[loanToken];\r\n            if (_totalStaked > 0) {\r\n                _updateSingleTokenRewards(state);\r\n            }\r\n            _transferReward(state);\r\n        }\r\n    }\r\n\r\n    function emergencyStakeRecovery() external onlyOwner {\r\n        uint256 balance = _stakingToken.balanceOf(address(this));\r\n        uint256 recoveryAmount = balance.sub(_totalStaked);\r\n        require(recoveryAmount > 0, \"PawnshopStaking: there are no additional staking tokens for recovery in the contract\");\r\n        _stakingToken.safeTransfer(msg.sender, recoveryAmount);\r\n    }\r\n\r\n    function _updateRewards() private {\r\n        uint256 loanTokensCount = _loanTokens.length();\r\n        for (uint256 i = 0; i < loanTokensCount; i++) {\r\n            (address loanToken,) = _loanTokens.at(i);\r\n            _updateSingleTokenRewards(_stakingStates[loanToken]);\r\n        }\r\n    }\r\n\r\n    function _updateSingleTokenRewards(StakingState storage state) private {\r\n        uint256 newTotalRewards = _calculateNewTotalRewards(state);\r\n        uint256 newCRPT = _calculateNewCRPT(state, newTotalRewards);\r\n        state.claimableReward[msg.sender] = _calculateNewClaimableReward(state, newCRPT, msg.sender);\r\n        state.alreadyPaidCRPT[msg.sender] = newCRPT;\r\n        state.cRPT = newCRPT;\r\n        state.totalRewards = newTotalRewards;\r\n    }\r\n\r\n    function _calculateNewTotalRewards(StakingState storage state) private view returns (uint256) {\r\n        uint256 currentLoanTokenBalance = state.token.balanceOf(address(this));\r\n        return currentLoanTokenBalance.add(state.totalClaimedRewards);\r\n    }\r\n\r\n    function _calculateNewCRPT(StakingState storage state, uint256 newTotalRewards) private view returns (uint256) {\r\n        uint256 newRewards = newTotalRewards.sub(state.totalRewards);\r\n        uint256 rewardPerToken = newRewards.mul(PRECISION).div(_totalStaked);\r\n        return state.cRPT.add(rewardPerToken);\r\n    }\r\n\r\n    function _calculateNewClaimableReward(StakingState storage state, uint256 newCRPT, address staker) private view returns (uint256) {\r\n        uint256 stakerCRPT = newCRPT.sub(state.alreadyPaidCRPT[staker]);\r\n        uint256 stakerCurrentlyClaimableReward = _staked[staker].mul(stakerCRPT).div(PRECISION);\r\n        return state.claimableReward[staker].add(stakerCurrentlyClaimableReward);\r\n    }\r\n\r\n    function _transferReward(StakingState storage state) private {\r\n        uint256 rewardToClaim = state.claimableReward[msg.sender];\r\n        state.totalClaimedRewards = state.totalClaimedRewards.add(rewardToClaim);\r\n        state.claimableReward[msg.sender] = 0;\r\n        state.token.safeTransfer(msg.sender, rewardToClaim);\r\n        emit RewardClaimed(msg.sender, address(state.token), rewardToClaim);\r\n    }\r\n\r\n    function stakedAmount(address staker) external view returns (uint256) {\r\n        return _staked[staker];\r\n    }\r\n\r\n    function totalStaked() external view returns (uint256) {\r\n        return _totalStaked;\r\n    }\r\n\r\n    function claimableReward(address stakerAddress, address loanTokenAddress) external view returns (uint256) {\r\n        require(wasLoanTokenEverSupported(loanTokenAddress), \"PawnshopStaking: the ERC20 loan token was never supported\");\r\n        StakingState storage state = _stakingStates[loanTokenAddress];\r\n        uint256 newTotalRewards = _calculateNewTotalRewards(state);\r\n        uint256 newCRPT = _totalStaked > 0 ? _calculateNewCRPT(state, newTotalRewards) : state.cRPT;\r\n        return _calculateNewClaimableReward(state, newCRPT, stakerAddress);\r\n    }\r\n\r\n    function totalClaimedRewards(address loanTokenAddress) external view returns (uint256) {\r\n        require(wasLoanTokenEverSupported(loanTokenAddress), \"PawnshopStaking: the ERC20 loan token was never supported\");\r\n        return _stakingStates[loanTokenAddress].totalClaimedRewards;\r\n    }\r\n\r\n    function totalRewards(address loanTokenAddress) external view returns (uint256) {\r\n        require(wasLoanTokenEverSupported(loanTokenAddress), \"PawnshopStaking: the ERC20 loan token was never supported\");\r\n        StakingState storage state = _stakingStates[loanTokenAddress];\r\n        return _calculateNewTotalRewards(state);\r\n    }\r\n\r\n    function stakingToken() external view returns (IERC20) {\r\n        return _stakingToken;\r\n    }\r\n}\r\n\r\n\r\n// Dependency file: contracts/model/OfferModel.sol\r\n\r\n\r\n// pragma solidity 0.7.3;\r\n\r\nabstract contract OfferModel {\r\n    string internal constant ITEM__TYPE = \"Item(address tokenAddress,uint256 tokenId,uint256 depositTimestamp)\";\r\n    string internal constant LOAN_PARAMS__TYPE = \"LoanParams(uint256 itemValue,uint256 redemptionPrice,uint32 timelockPeriod)\";\r\n    string internal constant OFFER__TYPE = \"Offer(uint32 nonce,uint40 expirationTime,address loanTokenAddress,Item collateralItem,LoanParams loanParams)\"\r\n                                           \"Item(address tokenAddress,uint256 tokenId,uint256 depositTimestamp)\"\r\n                                           \"LoanParams(uint256 itemValue,uint256 redemptionPrice,uint32 timelockPeriod)\";\r\n\r\n    struct Item {\r\n        address tokenAddress;\r\n        uint256 tokenId;\r\n        uint256 depositTimestamp;\r\n    }\r\n\r\n    struct LoanParams {\r\n        uint256 itemValue;\r\n        uint256 redemptionPrice;\r\n        uint32 timelockPeriod;\r\n    }\r\n\r\n    struct Offer {\r\n        uint32 nonce;\r\n        uint40 expirationTime;\r\n        address loanTokenAddress;\r\n        Item collateralItem;\r\n        LoanParams loanParams;\r\n    }\r\n}\r\n\r\n\r\n// Dependency file: @openzeppelin/contracts/cryptography/ECDSA.sol\r\n\r\n\r\n// pragma solidity ^0.7.0;\r\n\r\n/**\r\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\r\n *\r\n * These functions can be used to verify that a message was signed by the holder\r\n * of the private keys of a given address.\r\n */\r\nlibrary ECDSA {\r\n    /**\r\n     * @dev Returns the address that signed a hashed message (`hash`) with\r\n     * `signature`. This address can then be used for verification purposes.\r\n     *\r\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\r\n     * this function rejects them by requiring the `s` value to be in the lower\r\n     * half order, and the `v` value to be either 27 or 28.\r\n     *\r\n     * // importANT: `hash` _must_ be the result of a hash operation for the\r\n     * verification to be secure: it is possible to craft signatures that\r\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\r\n     * this is by receiving a hash of the original message (which may otherwise\r\n     * be too long), and then calling {toEthSignedMessageHash} on it.\r\n     */\r\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\r\n        // Check the signature length\r\n        if (signature.length != 65) {\r\n            revert(\"ECDSA: invalid signature length\");\r\n        }\r\n\r\n        // Divide the signature in r, s and v variables\r\n        bytes32 r;\r\n        bytes32 s;\r\n        uint8 v;\r\n\r\n        // ecrecover takes the signature parameters, and the only way to get them\r\n        // currently is to use assembly.\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly {\r\n            r := mload(add(signature, 0x20))\r\n            s := mload(add(signature, 0x40))\r\n            v := byte(0, mload(add(signature, 0x60)))\r\n        }\r\n\r\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\r\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\r\n        // the valid range for s in (281): 0 < s < secp256k1n ÷ 2 + 1, and for v in (282): v ∈ {27, 28}. Most\r\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\r\n        //\r\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\r\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\r\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\r\n        // these malleable signatures as well.\r\n        require(uint256(s) <= 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0, \"ECDSA: invalid signature 's' value\");\r\n        require(v == 27 || v == 28, \"ECDSA: invalid signature 'v' value\");\r\n\r\n        // If the signature is valid (and not malleable), return the signer address\r\n        address signer = ecrecover(hash, v, r, s);\r\n        require(signer != address(0), \"ECDSA: invalid signature\");\r\n\r\n        return signer;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\r\n     * replicates the behavior of the\r\n     * https://github.com/ethereum/wiki/wiki/JSON-RPC#eth_sign[`eth_sign`]\r\n     * JSON-RPC method.\r\n     *\r\n     * See {recover}.\r\n     */\r\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\r\n        // 32 is the length in bytes of hash,\r\n        // enforced by the type signature above\r\n        return keccak256(abi.encodePacked(\"\\x19Ethereum Signed Message:\\n32\", hash));\r\n    }\r\n}\r\n\r\n\r\n// Dependency file: contracts/verifiers/EIP712Domain.sol\r\n\r\n\r\n// pragma solidity 0.7.3;\r\n\r\n// import \"contracts/Initializable.sol\";\r\n// import \"contracts/PawnshopStorage.sol\";\r\n// import \"contracts/model/OfferModel.sol\";\r\n\r\nabstract contract EIP712Domain is PawnshopStorage, Initializable {\r\n    string private constant EIP712_DOMAIN = \"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\";\r\n    bytes32 private constant EIP712_DOMAIN_TYPEHASH = keccak256(abi.encodePacked(EIP712_DOMAIN));\r\n\r\n    // bytes32 DOMAIN_SEPARATOR;\r\n\r\n    // solhint-disable-next-line func-name-mixedcase\r\n    function __EIP712Domain_init_unchained() internal initializer {\r\n        DOMAIN_SEPARATOR = keccak256(abi.encode(\r\n                EIP712_DOMAIN_TYPEHASH,\r\n                keccak256(\"Pawnshop\"),\r\n                keccak256(\"1.0.0\"),\r\n                _getChainId(),\r\n                address(this)\r\n            ));\r\n    }\r\n\r\n    function _getChainId() private pure returns (uint256 id) {\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly {\r\n            id := chainid()\r\n        }\r\n    }\r\n}\r\n\r\n\r\n// Dependency file: contracts/verifiers/OfferSigVerifier.sol\r\n\r\n\r\n// pragma solidity 0.7.3;\r\n\r\n// import \"@openzeppelin/contracts/cryptography/ECDSA.sol\";\r\n\r\n// import \"contracts/verifiers/EIP712Domain.sol\";\r\n// import \"contracts/model/OfferModel.sol\";\r\n\r\nabstract contract OfferSigVerifier is OfferModel, EIP712Domain {\r\n    using ECDSA for bytes32;\r\n\r\n    bytes32 private constant ITEM__TYPEHASH = keccak256(abi.encodePacked(ITEM__TYPE));\r\n    bytes32 private constant LOAN_PARAMS__TYPEHASH = keccak256(abi.encodePacked(LOAN_PARAMS__TYPE));\r\n    bytes32 private constant OFFER__TYPEHASH = keccak256(abi.encodePacked(OFFER__TYPE));\r\n\r\n    function _hashItem(Item calldata item) private pure returns (bytes32) {\r\n        return keccak256(abi.encode(\r\n                ITEM__TYPEHASH,\r\n                item.tokenAddress,\r\n                item.tokenId,\r\n                item.depositTimestamp\r\n            ));\r\n    }\r\n\r\n    function _hashLoanParams(LoanParams calldata params) private pure returns (bytes32) {\r\n        return keccak256(abi.encode(\r\n                LOAN_PARAMS__TYPEHASH,\r\n                params.itemValue,\r\n                params.redemptionPrice,\r\n                params.timelockPeriod\r\n            ));\r\n    }\r\n\r\n    function _hashOffer(Offer calldata offer) private view returns (bytes32) {\r\n        return keccak256(abi.encodePacked(\r\n                \"\\x19\\x01\",\r\n                DOMAIN_SEPARATOR,\r\n                keccak256(abi.encode(\r\n                    OFFER__TYPEHASH,\r\n                    offer.nonce,\r\n                    offer.expirationTime,\r\n                    offer.loanTokenAddress,\r\n                    _hashItem(offer.collateralItem),\r\n                    _hashLoanParams(offer.loanParams)\r\n                ))\r\n            ));\r\n    }\r\n\r\n    function _verifyOffer(address signerAddress, bytes calldata signature, Offer calldata offer) internal view returns (bool) {\r\n        bytes32 hash = _hashOffer(offer);\r\n        return hash.recover(signature) == signerAddress;\r\n    }\r\n}\r\n\r\n\r\n// Dependency file: contracts/model/FlashOfferModel.sol\r\n\r\n\r\n// pragma solidity 0.7.3;\r\n\r\nabstract contract FlashOfferModel {\r\n    string internal constant FLASH_OFFER__TYPE = \"FlashOffer(uint32 nonce,uint40 expirationTime,address loanTokenAddress,uint256 loanAmount,uint256 returnAmount)\";\r\n\r\n    struct FlashOffer {\r\n        uint32 nonce;\r\n        uint40 expirationTime;\r\n        address loanTokenAddress;\r\n        uint256 loanAmount;\r\n        uint256 returnAmount;\r\n    }\r\n}\r\n\r\n\r\n// Dependency file: contracts/verifiers/FlashOfferSigVerifier.sol\r\n\r\n\r\n// pragma solidity 0.7.3;\r\n\r\n// import \"@openzeppelin/contracts/cryptography/ECDSA.sol\";\r\n\r\n// import \"contracts/verifiers/EIP712Domain.sol\";\r\n// import \"contracts/model/FlashOfferModel.sol\";\r\n\r\nabstract contract FlashOfferSigVerifier is FlashOfferModel, EIP712Domain {\r\n    using ECDSA for bytes32;\r\n\r\n    bytes32 private constant FLASH_OFFER__TYPEHASH = keccak256(abi.encodePacked(FLASH_OFFER__TYPE));\r\n\r\n    function _hashFlashOffer(FlashOffer calldata offer) private view returns (bytes32) {\r\n        return keccak256(abi.encodePacked(\r\n                \"\\x19\\x01\",\r\n                DOMAIN_SEPARATOR,\r\n                keccak256(abi.encode(\r\n                    FLASH_OFFER__TYPEHASH,\r\n                    offer.nonce,\r\n                    offer.expirationTime,\r\n                    offer.loanTokenAddress,\r\n                    offer.loanAmount,\r\n                    offer.returnAmount\r\n                ))\r\n            ));\r\n    }\r\n\r\n    function _verifyFlashOffer(\r\n        address signerAddress,\r\n        bytes calldata signature,\r\n        FlashOffer calldata offer\r\n    ) internal view returns (bool) {\r\n        bytes32 hash = _hashFlashOffer(offer);\r\n        return hash.recover(signature) == signerAddress;\r\n    }\r\n}\r\n\r\n\r\n// Dependency file: contracts/interfaces/IERC3156FlashBorrower.sol\r\n\r\n\r\n// pragma solidity 0.7.3;\r\n\r\ninterface IERC3156FlashBorrower {\r\n\r\n    /**\r\n     * @dev Receive a flash loan.\r\n     * @param sender The initiator of the loan.\r\n     * @param token The loan currency.\r\n     * @param amount The amount of tokens lent.\r\n     * @param fee The additional amount of tokens to repay.\r\n     * @param data Arbitrary data structure, intended to contain user-defined parameters.\r\n     */\r\n    function onFlashLoan(\r\n        address sender,\r\n        address token,\r\n        uint256 amount,\r\n        uint256 fee,\r\n        bytes calldata data\r\n    ) external;\r\n}\r\n\r\n\r\n// Dependency file: contracts/FlashLoan.sol\r\n\r\n\r\n// pragma solidity 0.7.3;\r\n// pragma experimental ABIEncoderV2;\r\n\r\n// import \"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\";\r\n// import \"@openzeppelin/contracts/math/SafeMath.sol\";\r\n\r\n// import \"contracts/PawnshopConfig.sol\";\r\n// import \"contracts/PawnshopStorage.sol\";\r\n// import \"contracts/utils/FractionMath.sol\";\r\n// import \"contracts/model/FlashOfferModel.sol\";\r\n// import \"contracts/verifiers/FlashOfferSigVerifier.sol\";\r\n// import \"contracts/interfaces/IERC3156FlashBorrower.sol\";\r\n\r\nabstract contract FlashLoan is FlashOfferModel, PawnshopStorage, FlashOfferSigVerifier, PawnshopConfig {\r\n    using FractionMath for FractionMath.Fraction;\r\n    using SafeERC20 for IERC20;\r\n    using SafeMath for uint256;\r\n\r\n    event FlashLoanMade(\r\n        address indexed borrowerAddress,\r\n        address indexed receiverAddress,\r\n        address indexed lenderAddress,\r\n        bytes32 signatureHash\r\n    );\r\n\r\n    function flashLoan(\r\n        IERC3156FlashBorrower receiver,\r\n        address lenderAddress,\r\n        bytes calldata signature,\r\n        FlashOffer calldata offer,\r\n        bytes calldata data\r\n    ) external {\r\n        require(isLoanTokenSupported(offer.loanTokenAddress), \"FlashLoan: the ERC20 loan token is not supported\");\r\n        require(block.timestamp < offer.expirationTime, \"FlashLoan: the offer has expired\");\r\n        require(offer.loanAmount > 0, \"FlashLoan: loan amount must be greater than 0\");\r\n        require(offer.returnAmount > 0, \"FlashLoan: return amount must be greater than 0\");\r\n        require(offer.returnAmount >= minReturnAmount(offer.loanTokenAddress, offer.loanAmount),\r\n            \"FlashLoan: the return amount is less then the minimum return amount for this loan token and loan amount\");\r\n        require(_verifyFlashOffer(lenderAddress, signature, offer), \"FlashLoan: the signature of the offer is invalid\");\r\n\r\n        bytes32 signatureHash = keccak256(signature);\r\n        require(!_usedOfferSignatures[signatureHash], \"FlashLoan: the loan has already been taken or the offer was cancelled\");\r\n        _usedOfferSignatures[signatureHash] = true;\r\n\r\n        IERC20(offer.loanTokenAddress).safeTransferFrom(lenderAddress, address(receiver), offer.loanAmount);\r\n\r\n        uint256 flashFee = _flashFees[offer.loanTokenAddress].mul(offer.loanAmount);\r\n        uint256 totalFee = offer.returnAmount.sub(offer.loanAmount).add(flashFee);\r\n        receiver.onFlashLoan(msg.sender, offer.loanTokenAddress, offer.loanAmount, totalFee, data);\r\n\r\n        IERC20(offer.loanTokenAddress).safeTransferFrom(address(receiver), lenderAddress, offer.returnAmount);\r\n        IERC20(offer.loanTokenAddress).safeTransferFrom(address(receiver), address(this), flashFee);\r\n\r\n        emit FlashLoanMade(msg.sender, address(receiver), lenderAddress, signatureHash);\r\n    }\r\n}\r\n\r\n\r\n// Root file: contracts/Pawnshop.sol\r\n\r\n\r\npragma solidity 0.7.3;\r\npragma experimental ABIEncoderV2;\r\n\r\n// import \"@openzeppelin/contracts/math/SafeMath.sol\";\r\n// import \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\r\n// import \"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\";\r\n// import \"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\";\r\n\r\n// import \"contracts/PawnshopStorage.sol\";\r\n// import \"contracts/Initializable.sol\";\r\n// import \"contracts/Ownable.sol\";\r\n// import \"contracts/ReentrancyGuard.sol\";\r\n// import \"contracts/PawnshopConfig.sol\";\r\n// import \"contracts/PawnshopStaking.sol\";\r\n// import \"contracts/model/LoanModel.sol\";\r\n// import \"contracts/model/OfferModel.sol\";\r\n// import \"contracts/verifiers/OfferSigVerifier.sol\";\r\n// import \"contracts/handlers/IHandler.sol\";\r\n// import \"contracts/FlashLoan.sol\";\r\n// import \"contracts/utils/FractionMath.sol\";\r\n\r\ncontract Pawnshop is LoanModel, PawnshopStorage, Initializable, Ownable, ReentrancyGuard, OfferSigVerifier, PawnshopConfig, PawnshopStaking, FlashLoan, IERC721Receiver {\r\n    using SafeMath for uint256;\r\n    using SafeERC20 for IERC20;\r\n    using FractionMath for FractionMath.Fraction;\r\n\r\n    // mapping (bytes32 => Loan) _loans;\r\n    // mapping (bytes32 => bool) _usedOfferSignatures;\r\n\r\n    modifier onlyBorrower(bytes32 signatureHash) {\r\n        Loan storage loan = _loans[signatureHash];\r\n        require(msg.sender == loan.borrowerAddress, \"Pawnshop: caller is not the borrower\");\r\n\r\n        _;\r\n    }\r\n\r\n    modifier onlyLender(bytes32 signatureHash) {\r\n        Loan storage loan = _loans[signatureHash];\r\n        require(msg.sender == loan.lenderAddress, \"Pawnshop: caller is not the lender\");\r\n\r\n        _;\r\n    }\r\n\r\n    event ItemDeposited(address indexed previousOwner, address indexed tokenAddress, uint256 indexed tokenId);\r\n    event ItemWithdrawn(address indexed ownerAddress, address indexed tokenAddress, uint256 indexed tokenId);\r\n    event LoanTaken(address indexed borrowerAddress, address indexed lenderAddress, bytes32 signatureHash);\r\n    event OfferCanceled(address indexed lenderAddres, bytes32 signatureHash);\r\n    event ItemRedeemed(address indexed borrowerAddress, bytes32 signatureHash);\r\n    event ItemClaimed(address indexed lenderAddress, bytes32 signatureHash);\r\n\r\n    constructor(address owner) {\r\n        __Ownable_init_unchained(owner);\r\n    }\r\n\r\n    function initialize(address owner, IERC20 stakingToken, uint256 maxTimelockPeriod) public initializer {\r\n        __Ownable_init_unchained(owner);\r\n        __ReentrancyGuard_init_unchained();\r\n        __EIP712Domain_init_unchained();\r\n        __PawnshopStaking_init_unchained(stakingToken);\r\n        __Pawnshop_init_unchained(maxTimelockPeriod);\r\n    }\r\n\r\n    // solhint-disable-next-line func-name-mixedcase\r\n    function __Pawnshop_init_unchained(uint256 maxTimelockPeriod) internal {\r\n        _setMaxTimelockPeriod(maxTimelockPeriod);\r\n    }\r\n\r\n    function onERC721Received(address, address, uint256, bytes calldata) external pure override returns (bytes4) {\r\n        revert(\"Pawnshop: tokens cannot be transferred directly, use Pawnshop.depositItem function instead\");\r\n    }\r\n\r\n    function itemOwner(address tokenAddress, uint256 tokenId) external view returns (address) {\r\n        IHandler handler = itemHandler(tokenAddress);\r\n        return handler.ownerOf(tokenAddress, tokenId);\r\n    }\r\n\r\n    function _calculateRedemptionFee(Loan storage loan) private view returns (uint256) {\r\n        return loan.offer.redemptionPrice\r\n            .mul(loan.redemptionFeeNumerator)\r\n            .div(loan.redemptionFeeDenominator);\r\n    }\r\n\r\n    function depositItem(address tokenAddress, uint256 tokenId) external {\r\n        IHandler handler = itemHandler(tokenAddress);\r\n        handler.deposit(msg.sender, tokenAddress, tokenId);\r\n        emit ItemDeposited(msg.sender, tokenAddress, tokenId);\r\n    }\r\n\r\n    function itemDepositTimestamp(address tokenAddress, uint256 tokenId) public view returns (uint256) {\r\n        IHandler handler = itemHandler(tokenAddress);\r\n        return handler.depositTimestamp(tokenAddress, tokenId);\r\n    }\r\n\r\n    function takeLoan(address lenderAddress, bytes calldata signature, Offer calldata offer) external nonReentrant {\r\n        Item calldata item = offer.collateralItem;\r\n        LoanParams calldata params = offer.loanParams;\r\n        IHandler handler = itemHandler(item.tokenAddress);\r\n\r\n        require(handler.isSupported(item.tokenAddress), \"Pawnshop: the item is not supported\");\r\n        require(isLoanTokenSupported(offer.loanTokenAddress), \"Pawnshop: the ERC20 loan token is not supported\");\r\n        require(block.timestamp < offer.expirationTime, \"Pawnshop: the offer has expired\");\r\n        require(params.itemValue > 0, \"Pawnshop: the item value must be greater than 0\");\r\n        require(params.redemptionPrice > 0, \"Pawnshop: the redemption price must be greater than 0\");\r\n        require(params.timelockPeriod > 0, \"Pawnshop: the timelock period must be greater than 0\");\r\n        require(params.timelockPeriod <= _maxTimelockPeriod, \"Pawnshop: the timelock period must be less or equal to the max timelock period\");\r\n        require(params.redemptionPrice >= minReturnAmount(offer.loanTokenAddress, params.itemValue),\r\n            \"Pawnshop: the redemption price is less then the minimum return amount for this loan token and loan amount\");\r\n\r\n        require(_verifyOffer(lenderAddress, signature, offer), \"Pawnshop: the signature of the offer is invalid\");\r\n\r\n        bytes32 signatureHash = keccak256(signature);\r\n        require(!_usedOfferSignatures[signatureHash], \"Pawnshop: the loan has already been taken or the offer was cancelled\");\r\n        require(handler.ownerOf(item.tokenAddress, item.tokenId) == msg.sender, \"Pawnshop: the item must be deposited to the pawnshop first\");\r\n        require(handler.depositTimestamp(item.tokenAddress, item.tokenId) == item.depositTimestamp, \"Pawnshop: the item was redeposited after offer signing\");\r\n\r\n        uint256 depositFee = _depositFees[offer.loanTokenAddress].mul(params.itemValue);\r\n        IERC20(offer.loanTokenAddress).safeTransferFrom(lenderAddress, address(this), depositFee);\r\n        IERC20(offer.loanTokenAddress).safeTransferFrom(lenderAddress, msg.sender, params.itemValue.sub(depositFee));\r\n\r\n        _usedOfferSignatures[signatureHash] = true;\r\n        _loans[signatureHash] = Loan({\r\n            offer: StoredOffer({\r\n                nonce: offer.nonce,\r\n                timelockPeriod: offer.loanParams.timelockPeriod,\r\n                loanTokenAddress: offer.loanTokenAddress,\r\n                itemTokenAddress: offer.collateralItem.tokenAddress,\r\n                itemTokenId: offer.collateralItem.tokenId,\r\n                itemValue: offer.loanParams.itemValue,\r\n                redemptionPrice: offer.loanParams.redemptionPrice\r\n            }),\r\n            status: LoanStatus.TAKEN,\r\n            borrowerAddress: msg.sender,\r\n            lenderAddress: lenderAddress,\r\n            redemptionFeeNumerator: _redemptionFees[offer.loanTokenAddress].numerator,\r\n            redemptionFeeDenominator: _redemptionFees[offer.loanTokenAddress].denominator,\r\n            timestamp: block.timestamp\r\n        });\r\n\r\n        handler.changeOwnership(address(this), item.tokenAddress, item.tokenId);\r\n\r\n        emit LoanTaken(msg.sender, lenderAddress, signatureHash);\r\n    }\r\n\r\n    function loan(bytes32 signatureHash) external view returns (Loan memory) {\r\n        Loan storage _loan = _loans[signatureHash];\r\n        require(_loan.timestamp != 0, \"Pawnshop: there's no loan with given signature\");\r\n        return _loan;\r\n    }\r\n\r\n    function isSignatureUsed(bytes32 signatureHash) external view returns (bool) {\r\n        return _usedOfferSignatures[signatureHash];\r\n    }\r\n\r\n    function cancelOffer(bytes calldata signature, Offer calldata offer) external {\r\n        require(_verifyOffer(msg.sender, signature, offer), \"Pawnshop: the transaction sender is not the offer signer\");\r\n\r\n        bytes32 signatureHash = keccak256(signature);\r\n        _usedOfferSignatures[signatureHash] = true;\r\n\r\n        emit OfferCanceled(msg.sender, signatureHash);\r\n    }\r\n\r\n    function redemptionPriceWithFee(bytes32 signatureHash) external view returns (uint256) {\r\n        Loan storage _loan = _loans[signatureHash];\r\n        require(_loan.timestamp != 0, \"Pawnshop: there's no loan with given signature\");\r\n\r\n        return _loan.offer.redemptionPrice.add(_calculateRedemptionFee(_loan));\r\n    }\r\n\r\n    function redemptionDeadline(bytes32 signatureHash) public view returns (uint256) {\r\n        Loan storage _loan = _loans[signatureHash];\r\n        require(_loan.timestamp != 0, \"Pawnshop: there's no loan with given signature\");\r\n\r\n        return _loan.timestamp.add(_loan.offer.timelockPeriod);\r\n    }\r\n\r\n    function _reedemItem(bytes32 signatureHash) private returns (Loan storage _loan) {\r\n        _loan = _loans[signatureHash];\r\n        StoredOffer storage offer = _loan.offer;\r\n        require(block.timestamp <= redemptionDeadline(signatureHash), \"Pawnshop: the redemption time has already passed\");\r\n        require(_loan.status == LoanStatus.TAKEN, \"Pawnshop: the item was already redeemed/claimed\");\r\n\r\n        address loanTokenAddress = offer.loanTokenAddress;\r\n        uint256 redemptionFee = _calculateRedemptionFee(_loan);\r\n        IERC20(loanTokenAddress).safeTransferFrom(_loan.borrowerAddress, address(this), redemptionFee);\r\n        IERC20(loanTokenAddress).safeTransferFrom(_loan.borrowerAddress, _loan.lenderAddress, offer.redemptionPrice);\r\n\r\n        IHandler handler = itemHandler(offer.itemTokenAddress);\r\n        handler.changeOwnership(msg.sender, offer.itemTokenAddress, offer.itemTokenId);\r\n        _loan.status = LoanStatus.RETURNED;\r\n\r\n        emit ItemRedeemed(msg.sender, signatureHash);\r\n    }\r\n\r\n    function redeemItem(bytes32 signatureHash) external onlyBorrower(signatureHash) {\r\n        _reedemItem(signatureHash);\r\n    }\r\n\r\n    function _claimItem(bytes32 signatureHash) private returns (Loan storage _loan) {\r\n        _loan = _loans[signatureHash];\r\n        StoredOffer storage offer = _loan.offer;\r\n        require(block.timestamp > redemptionDeadline(signatureHash), \"Pawnshop: the item timelock period hasn't passed yet\");\r\n        require(_loan.status == LoanStatus.TAKEN, \"Pawnshop: the item was already redeemed/claimed\");\r\n\r\n        IHandler handler = itemHandler(offer.itemTokenAddress);\r\n        handler.changeOwnership(msg.sender, offer.itemTokenAddress, offer.itemTokenId);\r\n        _loan.status = LoanStatus.CLAIMED;\r\n\r\n        emit ItemClaimed(msg.sender, signatureHash);\r\n    }\r\n\r\n    function claimItem(bytes32 signatureHash) external onlyLender(signatureHash) {\r\n        _claimItem(signatureHash);\r\n    }\r\n\r\n    function withdrawItem(address tokenAddress, uint256 tokenId) public {\r\n        IHandler handler = itemHandler(tokenAddress);\r\n        handler.withdraw(msg.sender, tokenAddress, tokenId);\r\n        emit ItemWithdrawn(msg.sender, tokenAddress, tokenId);\r\n    }\r\n\r\n    function redeemAndWithdrawItem(bytes32 signatureHash) external onlyBorrower(signatureHash) {\r\n        Loan storage _loan = _reedemItem(signatureHash);\r\n        withdrawItem(_loan.offer.itemTokenAddress, _loan.offer.itemTokenId);\r\n    }\r\n\r\n    function claimAndWithdrawItem(bytes32 signatureHash) external onlyLender(signatureHash) {\r\n        Loan storage _loan = _claimItem(signatureHash);\r\n        withdrawItem(_loan.offer.itemTokenAddress, _loan.offer.itemTokenId);\r\n    }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"borrowerAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"receiverAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"lenderAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"signatureHash\",\"type\":\"bytes32\"}],\"name\":\"FlashLoanMade\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"lenderAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"signatureHash\",\"type\":\"bytes32\"}],\"name\":\"ItemClaimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ItemDeposited\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"borrowerAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"signatureHash\",\"type\":\"bytes32\"}],\"name\":\"ItemRedeemed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"}],\"name\":\"ItemSupportStopped\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"}],\"name\":\"ItemSupported\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"ownerAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ItemWithdrawn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"borrowerAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"lenderAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"signatureHash\",\"type\":\"bytes32\"}],\"name\":\"LoanTaken\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"}],\"name\":\"LoanTokenSupportStopped\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"}],\"name\":\"LoanTokenSupported\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"}],\"name\":\"MaxTimelockPeriodSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"loanTokenAddress\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"uint48\",\"name\":\"numerator\",\"type\":\"uint48\"},{\"internalType\":\"uint48\",\"name\":\"denominator\",\"type\":\"uint48\"}],\"indexed\":false,\"internalType\":\"struct FractionMath.Fraction\",\"name\":\"minProfit\",\"type\":\"tuple\"}],\"name\":\"MinLenderProfitSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"lenderAddres\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"signatureHash\",\"type\":\"bytes32\"}],\"name\":\"OfferCanceled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"loanTokenAddress\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"uint48\",\"name\":\"numerator\",\"type\":\"uint48\"},{\"internalType\":\"uint48\",\"name\":\"denominator\",\"type\":\"uint48\"}],\"indexed\":false,\"internalType\":\"struct FractionMath.Fraction\",\"name\":\"depositFee\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint48\",\"name\":\"numerator\",\"type\":\"uint48\"},{\"internalType\":\"uint48\",\"name\":\"denominator\",\"type\":\"uint48\"}],\"indexed\":false,\"internalType\":\"struct FractionMath.Fraction\",\"name\":\"redemptionFee\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint48\",\"name\":\"numerator\",\"type\":\"uint48\"},{\"internalType\":\"uint48\",\"name\":\"denominator\",\"type\":\"uint48\"}],\"indexed\":false,\"internalType\":\"struct FractionMath.Fraction\",\"name\":\"flashFee\",\"type\":\"tuple\"}],\"name\":\"PawnshopFeesSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"RewardClaimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Staked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Unstaked\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"},{\"components\":[{\"internalType\":\"uint32\",\"name\":\"nonce\",\"type\":\"uint32\"},{\"internalType\":\"uint40\",\"name\":\"expirationTime\",\"type\":\"uint40\"},{\"internalType\":\"address\",\"name\":\"loanTokenAddress\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"depositTimestamp\",\"type\":\"uint256\"}],\"internalType\":\"struct OfferModel.Item\",\"name\":\"collateralItem\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"itemValue\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"redemptionPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"timelockPeriod\",\"type\":\"uint32\"}],\"internalType\":\"struct OfferModel.LoanParams\",\"name\":\"loanParams\",\"type\":\"tuple\"}],\"internalType\":\"struct OfferModel.Offer\",\"name\":\"offer\",\"type\":\"tuple\"}],\"name\":\"cancelOffer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"signatureHash\",\"type\":\"bytes32\"}],\"name\":\"claimAndWithdrawItem\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"signatureHash\",\"type\":\"bytes32\"}],\"name\":\"claimItem\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"stakerAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"loanTokenAddress\",\"type\":\"address\"}],\"name\":\"claimableReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"loanTokenAddress\",\"type\":\"address\"}],\"name\":\"depositFee\",\"outputs\":[{\"components\":[{\"internalType\":\"uint48\",\"name\":\"numerator\",\"type\":\"uint48\"},{\"internalType\":\"uint48\",\"name\":\"denominator\",\"type\":\"uint48\"}],\"internalType\":\"struct FractionMath.Fraction\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"depositItem\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"emergencyStakeRecovery\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"loanTokenAddress\",\"type\":\"address\"}],\"name\":\"flashFee\",\"outputs\":[{\"components\":[{\"internalType\":\"uint48\",\"name\":\"numerator\",\"type\":\"uint48\"},{\"internalType\":\"uint48\",\"name\":\"denominator\",\"type\":\"uint48\"}],\"internalType\":\"struct FractionMath.Fraction\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC3156FlashBorrower\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"lenderAddress\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"},{\"components\":[{\"internalType\":\"uint32\",\"name\":\"nonce\",\"type\":\"uint32\"},{\"internalType\":\"uint40\",\"name\":\"expirationTime\",\"type\":\"uint40\"},{\"internalType\":\"address\",\"name\":\"loanTokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"loanAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"returnAmount\",\"type\":\"uint256\"}],\"internalType\":\"struct FlashOfferModel.FlashOffer\",\"name\":\"offer\",\"type\":\"tuple\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"flashLoan\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"stakingToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"maxTimelockPeriod\",\"type\":\"uint256\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"}],\"name\":\"isItemTokenSupported\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"}],\"name\":\"isLoanTokenSupported\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"signatureHash\",\"type\":\"bytes32\"}],\"name\":\"isSignatureUsed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"itemDepositTimestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"itemTokenAddress\",\"type\":\"address\"}],\"name\":\"itemHandler\",\"outputs\":[{\"internalType\":\"contract IHandler\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"itemOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"itemTokenByIndex\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"handlerAddress\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isCurrentlySupported\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"signatureHash\",\"type\":\"bytes32\"}],\"name\":\"loan\",\"outputs\":[{\"components\":[{\"components\":[{\"internalType\":\"uint32\",\"name\":\"nonce\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"timelockPeriod\",\"type\":\"uint32\"},{\"internalType\":\"address\",\"name\":\"loanTokenAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"itemTokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"itemTokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"itemValue\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"redemptionPrice\",\"type\":\"uint256\"}],\"internalType\":\"struct StoredOfferModel.StoredOffer\",\"name\":\"offer\",\"type\":\"tuple\"},{\"internalType\":\"enum LoanModel.LoanStatus\",\"name\":\"status\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"borrowerAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"lenderAddress\",\"type\":\"address\"},{\"internalType\":\"uint48\",\"name\":\"redemptionFeeNumerator\",\"type\":\"uint48\"},{\"internalType\":\"uint48\",\"name\":\"redemptionFeeDenominator\",\"type\":\"uint48\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"internalType\":\"struct LoanModel.Loan\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"loanTokenByIndex\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"enum EnumerableMap.SupportState\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxTimelockPeriod\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"loanTokenAddress\",\"type\":\"address\"}],\"name\":\"minLenderProfit\",\"outputs\":[{\"components\":[{\"internalType\":\"uint48\",\"name\":\"numerator\",\"type\":\"uint48\"},{\"internalType\":\"uint48\",\"name\":\"denominator\",\"type\":\"uint48\"}],\"internalType\":\"struct FractionMath.Fraction\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"loanTokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"loanAmount\",\"type\":\"uint256\"}],\"name\":\"minReturnAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC721Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"signatureHash\",\"type\":\"bytes32\"}],\"name\":\"redeemAndWithdrawItem\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"signatureHash\",\"type\":\"bytes32\"}],\"name\":\"redeemItem\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"signatureHash\",\"type\":\"bytes32\"}],\"name\":\"redemptionDeadline\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"loanTokenAddress\",\"type\":\"address\"}],\"name\":\"redemptionFee\",\"outputs\":[{\"components\":[{\"internalType\":\"uint48\",\"name\":\"numerator\",\"type\":\"uint48\"},{\"internalType\":\"uint48\",\"name\":\"denominator\",\"type\":\"uint48\"}],\"internalType\":\"struct FractionMath.Fraction\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"signatureHash\",\"type\":\"bytes32\"}],\"name\":\"redemptionPriceWithFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"}],\"name\":\"setMaxTimelockPeriod\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"loanTokenAddress\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"uint48\",\"name\":\"numerator\",\"type\":\"uint48\"},{\"internalType\":\"uint48\",\"name\":\"denominator\",\"type\":\"uint48\"}],\"internalType\":\"struct FractionMath.Fraction\",\"name\":\"minProfit\",\"type\":\"tuple\"}],\"name\":\"setMinLenderProfit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"loanTokenAddress\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"uint48\",\"name\":\"numerator\",\"type\":\"uint48\"},{\"internalType\":\"uint48\",\"name\":\"denominator\",\"type\":\"uint48\"}],\"internalType\":\"struct FractionMath.Fraction\",\"name\":\"depositFee\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint48\",\"name\":\"numerator\",\"type\":\"uint48\"},{\"internalType\":\"uint48\",\"name\":\"denominator\",\"type\":\"uint48\"}],\"internalType\":\"struct FractionMath.Fraction\",\"name\":\"redemptionFee\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint48\",\"name\":\"numerator\",\"type\":\"uint48\"},{\"internalType\":\"uint48\",\"name\":\"denominator\",\"type\":\"uint48\"}],\"internalType\":\"struct FractionMath.Fraction\",\"name\":\"flashFee\",\"type\":\"tuple\"}],\"name\":\"setPawnshopFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"stake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"}],\"name\":\"stakedAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakingToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"}],\"name\":\"stopSupportingItem\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"}],\"name\":\"stopSupportingLoanToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IHandler\",\"name\":\"handler\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"}],\"name\":\"supportItem\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"uint48\",\"name\":\"numerator\",\"type\":\"uint48\"},{\"internalType\":\"uint48\",\"name\":\"denominator\",\"type\":\"uint48\"}],\"internalType\":\"struct FractionMath.Fraction\",\"name\":\"minProfit\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint48\",\"name\":\"numerator\",\"type\":\"uint48\"},{\"internalType\":\"uint48\",\"name\":\"denominator\",\"type\":\"uint48\"}],\"internalType\":\"struct FractionMath.Fraction\",\"name\":\"depositFee\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint48\",\"name\":\"numerator\",\"type\":\"uint48\"},{\"internalType\":\"uint48\",\"name\":\"denominator\",\"type\":\"uint48\"}],\"internalType\":\"struct FractionMath.Fraction\",\"name\":\"redemptionFee\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint48\",\"name\":\"numerator\",\"type\":\"uint48\"},{\"internalType\":\"uint48\",\"name\":\"denominator\",\"type\":\"uint48\"}],\"internalType\":\"struct FractionMath.Fraction\",\"name\":\"flashFee\",\"type\":\"tuple\"}],\"name\":\"supportLoanToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"lenderAddress\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"},{\"components\":[{\"internalType\":\"uint32\",\"name\":\"nonce\",\"type\":\"uint32\"},{\"internalType\":\"uint40\",\"name\":\"expirationTime\",\"type\":\"uint40\"},{\"internalType\":\"address\",\"name\":\"loanTokenAddress\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"depositTimestamp\",\"type\":\"uint256\"}],\"internalType\":\"struct OfferModel.Item\",\"name\":\"collateralItem\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"itemValue\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"redemptionPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"timelockPeriod\",\"type\":\"uint32\"}],\"internalType\":\"struct OfferModel.LoanParams\",\"name\":\"loanParams\",\"type\":\"tuple\"}],\"internalType\":\"struct OfferModel.Offer\",\"name\":\"offer\",\"type\":\"tuple\"}],\"name\":\"takeLoan\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"loanTokenAddress\",\"type\":\"address\"}],\"name\":\"totalClaimedRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalItemTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalLoanTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"loanTokenAddress\",\"type\":\"address\"}],\"name\":\"totalRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalStaked\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"unstake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"}],\"name\":\"wasLoanTokenEverSupported\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"withdrawItem\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"Pawnshop","CompilerVersion":"v0.7.3+commit.9bfce1f6","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"0000000000000000000000003e7d6e47d5f28bda668daaf388aeec2281b4c77c","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://8ce0a121d7478a32fc9f9143d2c97ca83690b9fcbf29b9b281187b87213920ca"}]}