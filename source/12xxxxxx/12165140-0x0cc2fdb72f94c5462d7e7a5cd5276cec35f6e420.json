{"status":"1","message":"OK","result":[{"SourceCode":"{\"Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n// File: @openzeppelin/contracts-ethereum-package/contracts/utils/Address.sol\\r\\n\\r\\npragma solidity ^0.6.0;\\r\\n\\r\\n/**\\r\\n * @dev Collection of functions related to the address type\\r\\n */\\r\\nlibrary Address {\\r\\n    /**\\r\\n     * @dev Returns true if `account` is a contract.\\r\\n     *\\r\\n     * [IMPORTANT]\\r\\n     * ====\\r\\n     * It is unsafe to assume that an address for which this function returns\\r\\n     * false is an externally-owned account (EOA) and not a contract.\\r\\n     *\\r\\n     * Among others, `isContract` will return false for the following\\r\\n     * types of addresses:\\r\\n     *\\r\\n     *  - an externally-owned account\\r\\n     *  - a contract in construction\\r\\n     *  - an address where a contract will be created\\r\\n     *  - an address where a contract lived, but was destroyed\\r\\n     * ====\\r\\n     */\\r\\n    function isContract(address account) internal view returns (bool) {\\r\\n        // This method relies in extcodesize, which returns 0 for contracts in\\r\\n        // construction, since the code is only stored at the end of the\\r\\n        // constructor execution.\\r\\n\\r\\n        uint256 size;\\r\\n        // solhint-disable-next-line no-inline-assembly\\r\\n        assembly { size := extcodesize(account) }\\r\\n        return size \\u003e 0;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Replacement for Solidity\\u0027s `transfer`: sends `amount` wei to\\r\\n     * `recipient`, forwarding all available gas and reverting on errors.\\r\\n     *\\r\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\r\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\r\\n     * imposed by `transfer`, making them unable to receive funds via\\r\\n     * `transfer`. {sendValue} removes this limitation.\\r\\n     *\\r\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\r\\n     *\\r\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\r\\n     * taken to not create reentrancy vulnerabilities. Consider using\\r\\n     * {ReentrancyGuard} or the\\r\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\r\\n     */\\r\\n    function sendValue(address payable recipient, uint256 amount) internal {\\r\\n        require(address(this).balance \\u003e= amount, \\\"Address: insufficient balance\\\");\\r\\n\\r\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\r\\n        (bool success, ) = recipient.call.value(amount)(\\\"\\\");\\r\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Performs a Solidity function call using a low level `call`. A\\r\\n     * plain`call` is an unsafe replacement for a function call: use this\\r\\n     * function instead.\\r\\n     *\\r\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\r\\n     * function (like regular Solidity function calls).\\r\\n     *\\r\\n     * Returns the raw returned data. To convert to the expected return value,\\r\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `target` must be a contract.\\r\\n     * - calling `target` with `data` must not revert.\\r\\n     *\\r\\n     * _Available since v3.1._\\r\\n     */\\r\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\r\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\r\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\r\\n     *\\r\\n     * _Available since v3.1._\\r\\n     */\\r\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\r\\n        return _functionCallWithValue(target, data, 0, errorMessage);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\r\\n     * but also transferring `value` wei to `target`.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - the calling contract must have an ETH balance of at least `value`.\\r\\n     * - the called Solidity function must be `payable`.\\r\\n     *\\r\\n     * _Available since v3.1._\\r\\n     */\\r\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\r\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\r\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\r\\n     *\\r\\n     * _Available since v3.1._\\r\\n     */\\r\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\r\\n        require(address(this).balance \\u003e= value, \\\"Address: insufficient balance for call\\\");\\r\\n        return _functionCallWithValue(target, data, value, errorMessage);\\r\\n    }\\r\\n\\r\\n    function _functionCallWithValue(address target, bytes memory data, uint256 weiValue, string memory errorMessage) private returns (bytes memory) {\\r\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\r\\n\\r\\n        // solhint-disable-next-line avoid-low-level-calls\\r\\n        (bool success, bytes memory returndata) = target.call.value(weiValue)(data);\\r\\n        if (success) {\\r\\n            return returndata;\\r\\n        } else {\\r\\n            // Look for revert reason and bubble it up if present\\r\\n            if (returndata.length \\u003e 0) {\\r\\n                // The easiest way to bubble the revert reason is using memory via assembly\\r\\n\\r\\n                // solhint-disable-next-line no-inline-assembly\\r\\n                assembly {\\r\\n                    let returndata_size := mload(returndata)\\r\\n                    revert(add(32, returndata), returndata_size)\\r\\n                }\\r\\n            } else {\\r\\n                revert(errorMessage);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\"},\"ContextUpgradeSafe.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.6.0;\\r\\n\\r\\nimport \\\"./Initializable.sol\\\";\\r\\n\\r\\n/*\\r\\n * @dev Provides information about the current execution context, including the\\r\\n * sender of the transaction and its data. While these are generally available\\r\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\r\\n * manner, since when dealing with GSN meta-transactions the account sending and\\r\\n * paying for execution may not be the actual sender (as far as an application\\r\\n * is concerned).\\r\\n *\\r\\n * This contract is only required for intermediate, library-like contracts.\\r\\n */\\r\\ncontract ContextUpgradeSafe is Initializable {\\r\\n    // Empty internal constructor, to prevent people from mistakenly deploying\\r\\n    // an instance of this contract, which should be used via inheritance.\\r\\n\\r\\n    function __Context_init() internal initializer {\\r\\n        __Context_init_unchained();\\r\\n    }\\r\\n\\r\\n    function __Context_init_unchained() internal initializer {\\r\\n\\r\\n\\r\\n    }\\r\\n\\r\\n\\r\\n    function _msgSender() internal view virtual returns (address payable) {\\r\\n        return msg.sender;\\r\\n    }\\r\\n\\r\\n    function _msgData() internal view virtual returns (bytes memory) {\\r\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\r\\n        return msg.data;\\r\\n    }\\r\\n\\r\\n    uint256[50] private __gap;\\r\\n}\"},\"IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.6.0;\\r\\n\\r\\n/**\\r\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\r\\n */\\r\\ninterface IERC20 {\\r\\n    /**\\r\\n     * @dev Returns the amount of tokens in existence.\\r\\n     */\\r\\n    function totalSupply() external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the amount of tokens owned by `account`.\\r\\n     */\\r\\n    function balanceOf(address account) external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @dev Moves `amount` tokens from the caller\\u0027s account to `recipient`.\\r\\n     *\\r\\n     * Returns a boolean value indicating whether the operation succeeded.\\r\\n     *\\r\\n     * Emits a {Transfer} event.\\r\\n     */\\r\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the remaining number of tokens that `spender` will be\\r\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\r\\n     * zero by default.\\r\\n     *\\r\\n     * This value changes when {approve} or {transferFrom} are called.\\r\\n     */\\r\\n    function allowance(address owner, address spender) external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @dev Sets `amount` as the allowance of `spender` over the caller\\u0027s tokens.\\r\\n     *\\r\\n     * Returns a boolean value indicating whether the operation succeeded.\\r\\n     *\\r\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\r\\n     * that someone may use both the old and the new allowance by unfortunate\\r\\n     * transaction ordering. One possible solution to mitigate this race\\r\\n     * condition is to first reduce the spender\\u0027s allowance to 0 and set the\\r\\n     * desired value afterwards:\\r\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\r\\n     *\\r\\n     * Emits an {Approval} event.\\r\\n     */\\r\\n    function approve(address spender, uint256 amount) external returns (bool);\\r\\n\\r\\n    /**\\r\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\r\\n     * allowance mechanism. `amount` is then deducted from the caller\\u0027s\\r\\n     * allowance.\\r\\n     *\\r\\n     * Returns a boolean value indicating whether the operation succeeded.\\r\\n     *\\r\\n     * Emits a {Transfer} event.\\r\\n     */\\r\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\r\\n\\r\\n    /**\\r\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\r\\n     * another (`to`).\\r\\n     *\\r\\n     * Note that `value` may be zero.\\r\\n     */\\r\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\r\\n\\r\\n    /**\\r\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\r\\n     * a call to {approve}. `value` is the new allowance.\\r\\n     */\\r\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\r\\n}\\r\\n\"},\"Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity \\u003e=0.4.24 \\u003c0.7.0;\\r\\n\\r\\n\\r\\n/**\\r\\n * @title Initializable\\r\\n *\\r\\n * @dev Helper contract to support initializer functions. To use it, replace\\r\\n * the constructor with a function that has the `initializer` modifier.\\r\\n * WARNING: Unlike constructors, initializer functions must be manually\\r\\n * invoked. This applies both to deploying an Initializable contract, as well\\r\\n * as extending an Initializable contract via inheritance.\\r\\n * WARNING: When used with inheritance, manual care must be taken to not invoke\\r\\n * a parent initializer twice, or ensure that all initializers are idempotent,\\r\\n * because this is not dealt with automatically as with constructors.\\r\\n */\\r\\ncontract Initializable {\\r\\n\\r\\n  /**\\r\\n   * @dev Indicates that the contract has been initialized.\\r\\n   */\\r\\n  bool private initialized;\\r\\n\\r\\n  /**\\r\\n   * @dev Indicates that the contract is in the process of being initialized.\\r\\n   */\\r\\n  bool private initializing;\\r\\n\\r\\n  /**\\r\\n   * @dev Modifier to use in the initializer function of a contract.\\r\\n   */\\r\\n  modifier initializer() {\\r\\n    require(initializing || isConstructor() || !initialized, \\\"Contract instance has already been initialized\\\");\\r\\n\\r\\n    bool isTopLevelCall = !initializing;\\r\\n    if (isTopLevelCall) {\\r\\n      initializing = true;\\r\\n      initialized = true;\\r\\n    }\\r\\n\\r\\n    _;\\r\\n\\r\\n    if (isTopLevelCall) {\\r\\n      initializing = false;\\r\\n    }\\r\\n  }\\r\\n\\r\\n  /// @dev Returns true if and only if the function is running in the constructor\\r\\n  function isConstructor() private view returns (bool) {\\r\\n    // extcodesize checks the size of the code stored in an address, and\\r\\n    // address returns the current address. Since the code is still not\\r\\n    // deployed when running a constructor, any checks on its code size will\\r\\n    // yield zero, making it an effective way to detect if a contract is\\r\\n    // under construction or not.\\r\\n    address self = address(this);\\r\\n    uint256 cs;\\r\\n    assembly { cs := extcodesize(self) }\\r\\n    return cs == 0;\\r\\n  }\\r\\n\\r\\n  // Reserved storage space to allow for layout changes in the future.\\r\\n  uint256[50] private ______gap;\\r\\n}\"},\"IXAUToken.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.6.0;\\r\\n\\r\\ninterface IXAUToken {\\r\\n\\r\\n    // EIP20 optional\\r\\n    function name() external view returns (string memory);\\r\\n    function symbol() external view returns (string memory);\\r\\n    function decimals() external view returns (uint8);\\r\\n\\r\\n    // EIP20\\r\\n    event Transfer(address indexed from, address indexed to, uint value);\\r\\n    event Approval(address indexed owner, address indexed spender, uint value);\\r\\n    function totalSupply() external view returns (uint256);\\r\\n    function balanceOf(address who) external view returns(uint256);\\r\\n    function transfer(address to, uint256 value) external returns(bool);\\r\\n    function transferFrom(address from, address to, uint256 value) external returns(bool);\\r\\n    function allowance(address owner_, address spender) external view returns(uint256);\\r\\n    function approve(address spender, uint256 value) external returns (bool);\\r\\n\\r\\n    // ERC20 non-standard methods to mitigate the well-known issues around setting allowances\\r\\n    function increaseAllowance(address spender, uint256 addedValue) external returns (bool);\\r\\n    function decreaseAllowance(address spender, uint256 subtractedValue) external returns (bool);\\r\\n\\r\\n    // Rebasing related functionality\\r\\n    event Rebase(uint256 epoch, uint256 oldScalingFactor, uint256 newScalingFactor);\\r\\n    event NewRebaser(address oldRebaser, address newRebaser);\\r\\n    function maxScalingFactor() external view returns (uint256);\\r\\n    function scalingFactor() external view returns (uint256);\\r\\n    function rebase(uint256 epoch, uint256 indexDelta, bool positive) external returns (uint256);  // onlyRebaser\\r\\n    function fromUnderlying(uint256 underlying) external view returns (uint256);\\r\\n    function toUnderlying(uint256 value) external view returns (uint256);\\r\\n    function balanceOfUnderlying(address who) external view returns(uint256);\\r\\n    function rebaser() external view returns (address);\\r\\n    function setRebaser(address _rebaser) external;  // onlyOwner\\r\\n\\r\\n    // Fee on transfer related functionality\\r\\n    event NewTransferHandler(address oldTransferHandler, address newTransferHandler);\\r\\n    event NewFeeDistributor(address oldFeeDistributor, address newFeeDistributor);\\r\\n    function transferHandler() external view returns (address);\\r\\n    function setTransferHandler(address _transferHandler) external;  // onlyOwner\\r\\n    function feeDistributor() external view returns (address);\\r\\n    function setFeeDistributor(address _feeDistributor) external;  // onlyOwner\\r\\n\\r\\n    // Service functionality\\r\\n    function recoverERC20(address token, address to, uint256 amount) external returns (bool);  // onlyOwner\\r\\n}\\r\\n\"},\"OwnableUpgradeSafe.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.6.0;\\r\\n\\r\\nimport \\\"./Initializable.sol\\\";\\r\\nimport \\\"./ContextUpgradeSafe.sol\\\";\\r\\n\\r\\n/**\\r\\n * @dev Contract module which provides a basic access control mechanism, where\\r\\n * there is an account (an owner) that can be granted exclusive access to\\r\\n * specific functions.\\r\\n *\\r\\n * By default, the owner account will be the one that deploys the contract. This\\r\\n * can later be changed with {transferOwnership}.\\r\\n *\\r\\n * This module is used through inheritance. It will make available the modifier\\r\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\r\\n * the owner.\\r\\n */\\r\\ncontract OwnableUpgradeSafe is Initializable, ContextUpgradeSafe {\\r\\n    address private _owner;\\r\\n\\r\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\r\\n\\r\\n    /**\\r\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\r\\n     */\\r\\n\\r\\n    function __Ownable_init() internal initializer {\\r\\n        __Context_init_unchained();\\r\\n        __Ownable_init_unchained();\\r\\n    }\\r\\n\\r\\n    function __Ownable_init_unchained() internal initializer {\\r\\n\\r\\n\\r\\n        address msgSender = _msgSender();\\r\\n        _owner = msgSender;\\r\\n        emit OwnershipTransferred(address(0), msgSender);\\r\\n\\r\\n    }\\r\\n\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the address of the current owner.\\r\\n     */\\r\\n    function owner() public view returns (address) {\\r\\n        return _owner;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Throws if called by any account other than the owner.\\r\\n     */\\r\\n    modifier onlyOwner() {\\r\\n        require(_owner == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Leaves the contract without owner. It will not be possible to call\\r\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\r\\n     *\\r\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\r\\n     * thereby removing any functionality that is only available to the owner.\\r\\n     */\\r\\n    function renounceOwnership() public virtual onlyOwner {\\r\\n        emit OwnershipTransferred(_owner, address(0));\\r\\n        _owner = address(0);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\r\\n     * Can only be called by the current owner.\\r\\n     */\\r\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\r\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\r\\n        emit OwnershipTransferred(_owner, newOwner);\\r\\n        _owner = newOwner;\\r\\n    }\\r\\n\\r\\n    uint256[49] private __gap;\\r\\n}\"},\"SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.6.0;\\r\\n\\r\\nimport \\\"./IERC20.sol\\\";\\r\\nimport \\\"./SafeMath.sol\\\";\\r\\nimport \\\"./Address.sol\\\";\\r\\n\\r\\n/**\\r\\n * @title SafeERC20\\r\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\r\\n * contract returns false). Tokens that return no value (and instead revert or\\r\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\r\\n * successful.\\r\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\r\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\r\\n */\\r\\nlibrary SafeERC20 {\\r\\n    using SafeMath for uint256;\\r\\n    using Address for address;\\r\\n\\r\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\r\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\r\\n    }\\r\\n\\r\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\r\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Deprecated. This function has issues similar to the ones found in\\r\\n     * {IERC20-approve}, and its usage is discouraged.\\r\\n     *\\r\\n     * Whenever possible, use {safeIncreaseAllowance} and\\r\\n     * {safeDecreaseAllowance} instead.\\r\\n     */\\r\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\r\\n        // safeApprove should only be called when setting an initial allowance,\\r\\n        // or when resetting it to zero. To increase and decrease it, use\\r\\n        // \\u0027safeIncreaseAllowance\\u0027 and \\u0027safeDecreaseAllowance\\u0027\\r\\n        // solhint-disable-next-line max-line-length\\r\\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\\r\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\r\\n        );\\r\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\r\\n    }\\r\\n\\r\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\r\\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\\r\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\r\\n    }\\r\\n\\r\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\r\\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \\\"SafeERC20: decreased allowance below zero\\\");\\r\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\r\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\r\\n     * @param token The token targeted by the call.\\r\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\r\\n     */\\r\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\r\\n        // We need to perform a low level call here, to bypass Solidity\\u0027s return data size checking mechanism, since\\r\\n        // we\\u0027re implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\r\\n        // the target address contains contract code and also asserts for success in the low-level call.\\r\\n\\r\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\r\\n        if (returndata.length \\u003e 0) { // Return data is optional\\r\\n            // solhint-disable-next-line max-line-length\\r\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\"},\"SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.6.0;\\r\\n\\r\\n/**\\r\\n * @dev Wrappers over Solidity\\u0027s arithmetic operations with added overflow\\r\\n * checks.\\r\\n *\\r\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\r\\n * in bugs, because programmers usually assume that an overflow raises an\\r\\n * error, which is the standard behavior in high level programming languages.\\r\\n * `SafeMath` restores this intuition by reverting the transaction when an\\r\\n * operation overflows.\\r\\n *\\r\\n * Using this library instead of the unchecked operations eliminates an entire\\r\\n * class of bugs, so it\\u0027s recommended to use it always.\\r\\n */\\r\\nlibrary SafeMath {\\r\\n    /**\\r\\n     * @dev Returns the addition of two unsigned integers, reverting on\\r\\n     * overflow.\\r\\n     *\\r\\n     * Counterpart to Solidity\\u0027s `+` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - Addition cannot overflow.\\r\\n     */\\r\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        uint256 c = a + b;\\r\\n        require(c \\u003e= a, \\\"SafeMath: addition overflow\\\");\\r\\n\\r\\n        return c;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\r\\n     * overflow (when the result is negative).\\r\\n     *\\r\\n     * Counterpart to Solidity\\u0027s `-` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - Subtraction cannot overflow.\\r\\n     */\\r\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        return sub(a, b, \\\"SafeMath: subtraction overflow\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\r\\n     * overflow (when the result is negative).\\r\\n     *\\r\\n     * Counterpart to Solidity\\u0027s `-` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - Subtraction cannot overflow.\\r\\n     */\\r\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\r\\n        require(b \\u003c= a, errorMessage);\\r\\n        uint256 c = a - b;\\r\\n\\r\\n        return c;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\r\\n     * overflow.\\r\\n     *\\r\\n     * Counterpart to Solidity\\u0027s `*` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - Multiplication cannot overflow.\\r\\n     */\\r\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        // Gas optimization: this is cheaper than requiring \\u0027a\\u0027 not being zero, but the\\r\\n        // benefit is lost if \\u0027b\\u0027 is also tested.\\r\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\r\\n        if (a == 0) {\\r\\n            return 0;\\r\\n        }\\r\\n\\r\\n        uint256 c = a * b;\\r\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\r\\n\\r\\n        return c;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the integer division of two unsigned integers. Reverts on\\r\\n     * division by zero. The result is rounded towards zero.\\r\\n     *\\r\\n     * Counterpart to Solidity\\u0027s `/` operator. Note: this function uses a\\r\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\r\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - The divisor cannot be zero.\\r\\n     */\\r\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\\r\\n     * division by zero. The result is rounded towards zero.\\r\\n     *\\r\\n     * Counterpart to Solidity\\u0027s `/` operator. Note: this function uses a\\r\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\r\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - The divisor cannot be zero.\\r\\n     */\\r\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\r\\n        require(b \\u003e 0, errorMessage);\\r\\n        uint256 c = a / b;\\r\\n        // assert(a == b * c + a % b); // There is no case in which this doesn\\u0027t hold\\r\\n\\r\\n        return c;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\r\\n     * Reverts when dividing by zero.\\r\\n     *\\r\\n     * Counterpart to Solidity\\u0027s `%` operator. This function uses a `revert`\\r\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\r\\n     * invalid opcode to revert (consuming all remaining gas).\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - The divisor cannot be zero.\\r\\n     */\\r\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        return mod(a, b, \\\"SafeMath: modulo by zero\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\r\\n     * Reverts with custom message when dividing by zero.\\r\\n     *\\r\\n     * Counterpart to Solidity\\u0027s `%` operator. This function uses a `revert`\\r\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\r\\n     * invalid opcode to revert (consuming all remaining gas).\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - The divisor cannot be zero.\\r\\n     */\\r\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\r\\n        require(b != 0, errorMessage);\\r\\n        return a % b;\\r\\n    }\\r\\n}\\r\\n\"},\"Vault.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.6.0;\\r\\n\\r\\nimport \\\"./SafeMath.sol\\\";\\r\\nimport \\\"./Address.sol\\\";\\r\\nimport \\\"./SafeERC20.sol\\\";\\r\\nimport \\\"./OwnableUpgradeSafe.sol\\\";\\r\\nimport \\\"./IXAUToken.sol\\\";\\r\\nimport \\\"./IERC20.sol\\\";\\r\\n\\r\\n// Vault distributing incoming elastic token rewards equally amongst staked pools\\r\\ncontract Vault is OwnableUpgradeSafe {\\r\\n    using SafeMath for uint256;\\r\\n    using SafeERC20 for IERC20;\\r\\n\\r\\n    // Info of each user.\\r\\n    struct UserInfo {\\r\\n        uint256 amount; // How many  tokens the user has provided.\\r\\n        uint256 rewardDebt; // Reward debt. See explanation below. // elastic, in token underlying units\\r\\n        //\\r\\n        // We do some fancy math here. Basically, any point in time, the amount of reward tokens\\r\\n        // entitled to a user but is pending to be distributed is:\\r\\n        //\\r\\n        //   pending reward = (user.amount * pool.accRewardPerShare) - user.rewardDebt\\r\\n        //\\r\\n        // Whenever a user deposits or withdraws  tokens to a pool. Here\\u0027s what happens:\\r\\n        //   1. The pool\\u0027s `accRewardPerShare` (and `lastRewardBlock`) gets updated.\\r\\n        //   2. User receives the pending reward sent to his/her address.\\r\\n        //   3. User\\u0027s `amount` gets updated.\\r\\n        //   4. User\\u0027s `rewardDebt` gets updated.\\r\\n\\r\\n    }\\r\\n\\r\\n    // Info of each pool.\\r\\n    struct PoolInfo {\\r\\n        IERC20 token; // Address of  token contract.\\r\\n        uint256 allocPoint; // How many allocation points assigned to this pool. Reward tokens to distribute per block.\\r\\n        uint256 accRewardPerShare; // Accumulated token underlying units per share, times 1e12. See below.\\r\\n        bool withdrawable; // Is this pool withdrawable?\\r\\n        mapping(address =\\u003e mapping(address =\\u003e uint256)) allowance;\\r\\n\\r\\n    }\\r\\n\\r\\n    // A reward token\\r\\n    IXAUToken public rewardToken;\\r\\n\\r\\n    // Info of each pool.\\r\\n    PoolInfo[] public poolInfo;\\r\\n    // Info of each user that stakes  tokens.\\r\\n    mapping(uint256 =\\u003e mapping(address =\\u003e UserInfo)) public userInfo;\\r\\n    // Total allocation poitns. Must be the sum of all allocation points in all pools.\\r\\n    uint256 public totalAllocPoint;\\r\\n\\r\\n    //// pending rewards awaiting anyone to massUpdate\\r\\n    uint256 public pendingRewards;  // elastic, in token underlying units\\r\\n\\r\\n    uint256 public contractStartBlock;\\r\\n    uint256 public epochCalculationStartBlock;\\r\\n    uint256 public cumulativeRewardsSinceStart;  // elastic, in token underlying units\\r\\n    uint256 public rewardsInThisEpoch;           // elastic, in token underlying units\\r\\n    uint public epoch;\\r\\n\\r\\n    // Dev address.\\r\\n    address public devFeeReceiver;\\r\\n    uint16 public devFeePercentX100;\\r\\n    uint256 public pendingDevRewards;  // elastic, in token underlying units\\r\\n\\r\\n    // Returns average rewards generated since start of this contract\\r\\n    function averageRewardPerBlockSinceStart() external view returns (uint averagePerBlock) {\\r\\n        averagePerBlock = cumulativeRewardsSinceStart.add(rewardsInThisEpoch).div(block.number.sub(contractStartBlock));\\r\\n    }        \\r\\n\\r\\n    // Returns averge reward in this epoch\\r\\n    function averageRewardPerBlockEpoch() external view returns (uint256 averagePerBlock) {\\r\\n        averagePerBlock = rewardsInThisEpoch.div(block.number.sub(epochCalculationStartBlock));\\r\\n    }\\r\\n\\r\\n    // For easy graphing historical epoch rewards\\r\\n    mapping(uint =\\u003e uint256) public epochRewards;\\r\\n\\r\\n    // Starts a new calculation epoch\\r\\n    // Because averge since start will not be accurate\\r\\n    function startNewEpoch() public {\\r\\n        require(epochCalculationStartBlock + 50000 \\u003c block.number, \\\"New epoch not ready yet\\\"); // About a week\\r\\n        epochRewards[epoch] = rewardsInThisEpoch;\\r\\n        cumulativeRewardsSinceStart = cumulativeRewardsSinceStart.add(rewardsInThisEpoch);\\r\\n        rewardsInThisEpoch = 0;\\r\\n        epochCalculationStartBlock = block.number;\\r\\n        ++epoch;\\r\\n    }\\r\\n\\r\\n    event NewDevFeeReceiver(address oldDevFeeReceiver, address newDevFeeReceiver);\\r\\n    event NewDevFeePercentX100(uint256 oldDevFeePercentX100, uint256 newDevFeePercentX100);\\r\\n    \\r\\n    event Deposit(address indexed user, uint256 indexed pid, uint256 amount);\\r\\n    event Withdraw(address indexed user, uint256 indexed pid, uint256 amount);\\r\\n    event EmergencyWithdraw(address indexed user, uint256 indexed pid, uint256 amount, address indexed to);\\r\\n    event EmergencyWithdraw(\\r\\n        address indexed user,\\r\\n        uint256 indexed pid,\\r\\n        uint256 amount\\r\\n    );\\r\\n    event MigrationWithdraw(\\r\\n        address indexed user,\\r\\n        address indexed newVault,\\r\\n        uint256 amount\\r\\n    );\\r\\n    event Approval(address indexed owner, address indexed spender, uint256 _pid, uint256 value);\\r\\n\\r\\n    function initialize(\\r\\n        IXAUToken _rewardToken,\\r\\n        address _devFeeReceiver, \\r\\n        uint16 _devFeePercentX100\\r\\n    ) public initializer {\\r\\n        OwnableUpgradeSafe.__Ownable_init();\\r\\n        devFeePercentX100 = _devFeePercentX100;\\r\\n        rewardToken = _rewardToken;\\r\\n        devFeeReceiver = _devFeeReceiver;\\r\\n        contractStartBlock = block.number;\\r\\n        epochCalculationStartBlock = block.number;\\r\\n    }\\r\\n\\r\\n    function poolLength() external view returns (uint256) {\\r\\n        return poolInfo.length;\\r\\n    }\\r\\n\\r\\n    // Add a new token pool. Can only be called by the owner. \\r\\n    // Note contract owner is meant to be a governance contract allowing reward token governance consensus\\r\\n    function add(\\r\\n        uint256 _allocPoint,\\r\\n        IERC20 _token,\\r\\n        bool _withUpdate,\\r\\n        bool _withdrawable\\r\\n    ) public onlyOwner {\\r\\n        if (_withUpdate) {\\r\\n            massUpdatePools();\\r\\n        }\\r\\n\\r\\n        uint256 length = poolInfo.length;\\r\\n        for (uint256 pid = 0; pid \\u003c length; ++pid) {\\r\\n            require(poolInfo[pid].token != _token, \\\"Error pool already added\\\");\\r\\n        }\\r\\n\\r\\n        totalAllocPoint = totalAllocPoint.add(_allocPoint);\\r\\n\\r\\n        poolInfo.push(\\r\\n            PoolInfo({\\r\\n                token: _token,\\r\\n                allocPoint: _allocPoint,\\r\\n                accRewardPerShare: 0,\\r\\n                withdrawable: _withdrawable\\r\\n            })\\r\\n        );\\r\\n    }\\r\\n\\r\\n    // Update the given pool\\u0027s reward tokens allocation point. Can only be called by the owner.\\r\\n    // Note contract owner is meant to be a governance contract allowing reward token governance consensus\\r\\n    function set(\\r\\n        uint256 _pid,\\r\\n        uint256 _allocPoint,\\r\\n        bool _withUpdate\\r\\n    ) public onlyOwner {\\r\\n        if (_withUpdate) {\\r\\n            massUpdatePools();\\r\\n        }\\r\\n        \\r\\n        totalAllocPoint = totalAllocPoint.sub(poolInfo[_pid].allocPoint).add(\\r\\n            _allocPoint\\r\\n        );\\r\\n        poolInfo[_pid].allocPoint = _allocPoint;\\r\\n    }\\r\\n\\r\\n    // Update the given pool\\u0027s ability to withdraw tokens\\r\\n    // Note contract owner is meant to be a governance contract allowing reward token governance consensus\\r\\n    function setPoolWithdrawable(\\r\\n        uint256 _pid,\\r\\n        bool _withdrawable\\r\\n    ) public onlyOwner {\\r\\n        poolInfo[_pid].withdrawable = _withdrawable;\\r\\n    }\\r\\n\\r\\n    // Sets the dev fee for this contract\\r\\n    // Note contract owner is meant to be a governance contract allowing reward token governance consensus\\r\\n    function setDevFeePercentX100(uint16 _devFeePercentX100) public onlyOwner {\\r\\n        require(_devFeePercentX100 \\u003c= 1000, \\u0027Dev fee clamped at 10%\\u0027);\\r\\n        uint256 oldDevFeePercentX100 = devFeePercentX100;\\r\\n        devFeePercentX100 = _devFeePercentX100;\\r\\n        emit NewDevFeePercentX100(oldDevFeePercentX100, _devFeePercentX100);\\r\\n    }\\r\\n\\r\\n    // Update dev address by the previous dev.\\r\\n    // Note onlyOwner functions are meant for the governance contract\\r\\n    // allowing reward token governance token holders to do this functions.\\r\\n    function setDevFeeReceiver(address _devFeeReceiver) public onlyOwner {\\r\\n        address oldDevFeeReceiver = devFeeReceiver;\\r\\n        devFeeReceiver = _devFeeReceiver;\\r\\n        emit NewDevFeeReceiver(oldDevFeeReceiver, _devFeeReceiver);\\r\\n    }\\r\\n\\r\\n    // View function to see pending reward tokens on frontend.\\r\\n    function pendingToken(uint256 _pid, address _user)\\r\\n        public\\r\\n        view\\r\\n        returns (uint256)\\r\\n    {\\r\\n        PoolInfo storage pool = poolInfo[_pid];\\r\\n        UserInfo storage user = userInfo[_pid][_user];\\r\\n        uint256 accRewardPerShare = pool.accRewardPerShare;\\r\\n        \\r\\n        return rewardToken.fromUnderlying(user.amount.mul(accRewardPerShare).div(1e12).sub(user.rewardDebt));\\r\\n    }\\r\\n\\r\\n    // View function to see pending reward tokens on frontend.\\r\\n    function pendingTokenActual(uint256 _pid, address _user) public view returns (uint256) {\\r\\n        PoolInfo storage pool = poolInfo[_pid];\\r\\n        UserInfo storage user = userInfo[_pid][_user];\\r\\n        uint256 tokenSupply = pool.token.balanceOf(address(this));\\r\\n        if (tokenSupply == 0) { // avoids division by 0 errors\\r\\n            return 0;\\r\\n        }\\r\\n        uint256 rewardWhole = pendingRewards // Multiplies pending rewards by allocation point of this pool and then total allocation\\r\\n            .mul(pool.allocPoint)        // getting the percent of total pending rewards this pool should get\\r\\n            .div(totalAllocPoint);       // we can do this because pools are only mass updated\\r\\n        uint256 rewardFee = rewardWhole.mul(devFeePercentX100).div(10000);\\r\\n        uint256 rewardToDistribute = rewardWhole.sub(rewardFee);\\r\\n        uint256 accRewardPerShare = pool.accRewardPerShare.add(rewardToDistribute.mul(1e12).div(tokenSupply));\\r\\n\\r\\n        return rewardToken.fromUnderlying(user.amount.mul(accRewardPerShare).div(1e12).sub(user.rewardDebt));\\r\\n    }\\r\\n\\r\\n    // Update reward vairables for all pools. Be careful of gas spending!\\r\\n    function massUpdatePools() public {\\r\\n        uint256 length = poolInfo.length;\\r\\n        uint allRewards;\\r\\n        for (uint256 pid = 0; pid \\u003c length; ++pid) {\\r\\n            allRewards = allRewards.add(updatePool(pid));\\r\\n        }\\r\\n\\r\\n        pendingRewards = pendingRewards.sub(allRewards);\\r\\n    }\\r\\n\\r\\n    // Function that adds pending rewards, called by the reward token.\\r\\n    uint256 private rewardTokenBalance;\\r\\n    function addPendingRewards(uint256 /* _ */) public {\\r\\n        uint256 newRewards = rewardToken.balanceOfUnderlying(address(this)).sub(rewardTokenBalance);  // elastic\\r\\n        \\r\\n        if (newRewards \\u003e 0) {\\r\\n            rewardTokenBalance = rewardToken.balanceOfUnderlying(address(this)); // If there is no change the balance didn\\u0027t change  // elastic\\r\\n            pendingRewards = pendingRewards.add(newRewards);\\r\\n            rewardsInThisEpoch = rewardsInThisEpoch.add(newRewards);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    // Update reward variables of the given pool to be up-to-date.\\r\\n    function updatePool(uint256 _pid) internal returns (uint256 rewardWhole) {\\r\\n        PoolInfo storage pool = poolInfo[_pid];\\r\\n\\r\\n        uint256 tokenSupply = pool.token.balanceOf(address(this));\\r\\n        if (tokenSupply == 0) { // avoids division by 0 errors\\r\\n            return 0;\\r\\n        }\\r\\n        rewardWhole = pendingRewards // Multiplies pending rewards by allocation point of this pool and then total allocation\\r\\n            .mul(pool.allocPoint)        // getting the percent of total pending rewards this pool should get\\r\\n            .div(totalAllocPoint);       // we can do this because pools are only mass updated\\r\\n        uint256 rewardFee = rewardWhole.mul(devFeePercentX100).div(10000);\\r\\n        uint256 rewardToDistribute = rewardWhole.sub(rewardFee);\\r\\n\\r\\n        pendingDevRewards = pendingDevRewards.add(rewardFee);\\r\\n\\r\\n        pool.accRewardPerShare = pool.accRewardPerShare.add(\\r\\n            rewardToDistribute.mul(1e12).div(tokenSupply)\\r\\n        );\\r\\n    }\\r\\n\\r\\n    // Deposit user tokens to vault for reward token allocation.\\r\\n    function deposit(uint256 _pid, uint256 _amount) public {\\r\\n\\r\\n        PoolInfo storage pool = poolInfo[_pid];\\r\\n        UserInfo storage user = userInfo[_pid][msg.sender];\\r\\n\\r\\n        massUpdatePools();\\r\\n        \\r\\n        // Transfer pending tokens\\r\\n        // to user\\r\\n        updateAndPayOutPending(_pid, msg.sender); // https://kovan.etherscan.io/tx/0xbd6a42d7ca389be178a2e825b7a242d60189abcfbea3e4276598c0bb28c143c9 // TODO: INVESTIGATE\\r\\n\\r\\n\\r\\n\\r\\n        // Transfer in the amounts from user\\r\\n        // save gas\\r\\n        if (_amount \\u003e 0) {\\r\\n            pool.token.safeTransferFrom(address(msg.sender), address(this), _amount);\\r\\n            user.amount = user.amount.add(_amount);\\r\\n        }\\r\\n\\r\\n        user.rewardDebt = user.amount.mul(pool.accRewardPerShare).div(1e12);\\r\\n        emit Deposit(msg.sender, _pid, _amount);\\r\\n    }\\r\\n\\r\\n    // Test coverage\\r\\n    // [x] Does user get the deposited amounts?\\r\\n    // [x] Does user that its deposited for update correcty?\\r\\n    // [x] Does the depositor get their tokens decreased\\r\\n    function depositFor(address _depositFor, uint256 _pid, uint256 _amount) public {\\r\\n        // requires no allowances\\r\\n        PoolInfo storage pool = poolInfo[_pid];\\r\\n        UserInfo storage user = userInfo[_pid][_depositFor];\\r\\n\\r\\n        massUpdatePools();\\r\\n        \\r\\n        // Transfer pending tokens\\r\\n        // to user\\r\\n        updateAndPayOutPending(_pid, _depositFor);  // Update the balances of person that amount is being deposited for\\r\\n\\r\\n        if (_amount \\u003e 0) {\\r\\n            pool.token.safeTransferFrom(address(msg.sender), address(this), _amount);\\r\\n            user.amount = user.amount.add(_amount);  // This is depositedFor address\\r\\n        }\\r\\n\\r\\n        user.rewardDebt = user.amount.mul(pool.accRewardPerShare).div(1e12);  /// This is deposited for address\\r\\n        emit Deposit(_depositFor, _pid, _amount);\\r\\n    }\\r\\n\\r\\n    // Test coverage\\r\\n    // [x] Does allowance update correctly?\\r\\n    function setAllowanceForPoolToken(address spender, uint256 _pid, uint256 value) public {\\r\\n        PoolInfo storage pool = poolInfo[_pid];\\r\\n        pool.allowance[msg.sender][spender] = value;\\r\\n        emit Approval(msg.sender, spender, _pid, value);\\r\\n    }\\r\\n\\r\\n    // Test coverage\\r\\n    // [x] Does allowance decrease?\\r\\n    // [x] Do oyu need allowance\\r\\n    // [x] Withdraws to correct address\\r\\n    function withdrawFrom(address owner, uint256 _pid, uint256 _amount) public {\\r\\n        \\r\\n        PoolInfo storage pool = poolInfo[_pid];\\r\\n        require(pool.allowance[owner][msg.sender] \\u003e= _amount, \\\"withdraw: insufficient allowance\\\");\\r\\n        pool.allowance[owner][msg.sender] = pool.allowance[owner][msg.sender].sub(_amount);\\r\\n        _withdraw(_pid, _amount, owner, msg.sender);\\r\\n\\r\\n    }\\r\\n    \\r\\n    // Withdraw user tokens from vault\\r\\n    function withdraw(uint256 _pid, uint256 _amount) public {\\r\\n\\r\\n        _withdraw(_pid, _amount, msg.sender, msg.sender);\\r\\n\\r\\n    }\\r\\n    \\r\\n    // Low level withdraw function\\r\\n    function _withdraw(uint256 _pid, uint256 _amount, address from, address to) internal {\\r\\n        PoolInfo storage pool = poolInfo[_pid];\\r\\n        require(pool.withdrawable, \\\"Withdrawing from this pool is disabled\\\");\\r\\n        UserInfo storage user = userInfo[_pid][from];\\r\\n        require(user.amount \\u003e= _amount, \\\"withdraw: not good\\\");\\r\\n\\r\\n        massUpdatePools();\\r\\n        updateAndPayOutPending(_pid, from); // Update balances of from this is not withdrawal but claiming rewards farmed\\r\\n\\r\\n        if (_amount \\u003e 0) {\\r\\n            user.amount = user.amount.sub(_amount);\\r\\n            pool.token.safeTransfer(address(to), _amount);\\r\\n        }\\r\\n        user.rewardDebt = user.amount.mul(pool.accRewardPerShare).div(1e12);\\r\\n\\r\\n        emit Withdraw(to, _pid, _amount);\\r\\n    }\\r\\n\\r\\n    function updateAndPayOutPending(uint256 _pid, address from) internal {\\r\\n\\r\\n        uint256 pending = pendingToken(_pid, from);\\r\\n\\r\\n        if (pending \\u003e 0) {\\r\\n            safeRewardTokenTransfer(from, pending);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    // Function that lets owner/governance contract approve\\r\\n    // allowance for any 3rd party token inside this contract.\\r\\n    // This means all future UNI like airdrops are covered.\\r\\n    // And at the same time allows us to give allowance to strategy contracts.\\r\\n    function setStrategyContractOrDistributionContractAllowance(address tokenAddress, uint256 _amount, address contractAddress) public onlyOwner {\\r\\n        require(isContract(contractAddress), \\\"Recipent is not a smart contract\\\");\\r\\n        require(tokenAddress != address(rewardToken), \\\"Reward token allowance not allowed\\\");\\r\\n        uint256 length = poolInfo.length;\\r\\n        for (uint256 pid = 0; pid \\u003c length; pid++) {\\r\\n            require(tokenAddress != address(poolInfo[pid].token), \\\"Pool token allowance not allowed\\\");\\r\\n        }\\r\\n\\r\\n        IERC20(tokenAddress).approve(contractAddress, _amount);\\r\\n    }\\r\\n\\r\\n    function isContract(address addr) internal view returns (bool) {\\r\\n        uint size;\\r\\n        assembly { size := extcodesize(addr) }\\r\\n        return size \\u003e 0;\\r\\n    }\\r\\n\\r\\n    function migrateTokensToNewVault(address _newVault) public virtual onlyOwner {\\r\\n        require(_newVault != address(0), \\\"Vault: new vault is the zero address\\\");\\r\\n        uint256 rewardTokenBalErc = rewardToken.balanceOf(address(this));  // elastic\\r\\n        safeRewardTokenTransfer(_newVault, rewardTokenBalErc);\\r\\n        emit MigrationWithdraw(msg.sender, _newVault, rewardTokenBalErc);\\r\\n        rewardTokenBalance = rewardToken.balanceOfUnderlying(address(this));\\r\\n    }\\r\\n\\r\\n    // Withdraw without caring about rewards. EMERGENCY ONLY.\\r\\n    // !Caution this will remove all your pending rewards!\\r\\n    function emergencyWithdraw(uint256 _pid, address _to) public {\\r\\n        PoolInfo storage pool = poolInfo[_pid];\\r\\n        require(pool.withdrawable, \\\"Withdrawing from this pool is disabled\\\");\\r\\n        UserInfo storage user = userInfo[_pid][msg.sender];\\r\\n        uint256 amount = user.amount;\\r\\n        // Note: transfer can fail or succeed if `amount` is zero.\\r\\n        if (amount \\u003e 0) {\\r\\n            pool.token.safeTransfer(_to, amount);\\r\\n            user.amount = 0;\\r\\n            user.rewardDebt = 0;\\r\\n        }\\r\\n        emit EmergencyWithdraw(msg.sender, _pid, amount, _to);\\r\\n    }\\r\\n\\r\\n    // Safe reward token transfer function, just in case if rounding error causes pool to not have enough reward tokens.\\r\\n    function safeRewardTokenTransfer(address _to, uint256 _amount) internal {\\r\\n\\r\\n        uint256 rewardTokenBalErc = rewardToken.balanceOf(address(this));  // elastic\\r\\n        \\r\\n        if (_amount \\u003e rewardTokenBalErc) {\\r\\n            rewardToken.transfer(_to, rewardTokenBalErc);  // elastic\\r\\n            rewardTokenBalance = rewardToken.balanceOfUnderlying(address(this));  // elastic\\r\\n\\r\\n        } else {\\r\\n            rewardToken.transfer(_to, _amount);  // elastic\\r\\n            rewardTokenBalance = rewardToken.balanceOfUnderlying(address(this));  // elastic\\r\\n\\r\\n        }\\r\\n        //Avoids possible recursion loop\\r\\n        // proxy?\\r\\n        transferDevFee();\\r\\n\\r\\n    }\\r\\n\\r\\n    function transferDevFee() public {\\r\\n        if (pendingDevRewards == 0) return;\\r\\n\\r\\n        uint256 pendingDevRewardsErc = rewardToken.fromUnderlying(pendingDevRewards);\\r\\n        uint256 rewardTokenBalErc = rewardToken.balanceOf(address(this));  // elastic\\r\\n        \\r\\n        if (pendingDevRewardsErc \\u003e rewardTokenBalErc) {\\r\\n\\r\\n            rewardToken.transfer(devFeeReceiver, rewardTokenBalErc);  // elastic\\r\\n            rewardTokenBalance = rewardToken.balanceOfUnderlying(address(this));  // elastic\\r\\n\\r\\n        } else {\\r\\n\\r\\n            rewardToken.transfer(devFeeReceiver, pendingDevRewardsErc);  // elastic\\r\\n            rewardTokenBalance = rewardToken.balanceOfUnderlying(address(this));  // elastic\\r\\n\\r\\n        }\\r\\n\\r\\n        pendingDevRewards = 0;\\r\\n    }\\r\\n\\r\\n}\\r\\n\"}}","ABI":"[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"EmergencyWithdraw\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"EmergencyWithdraw\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newVault\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"MigrationWithdraw\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldDevFeePercentX100\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newDevFeePercentX100\",\"type\":\"uint256\"}],\"name\":\"NewDevFeePercentX100\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldDevFeeReceiver\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newDevFeeReceiver\",\"type\":\"address\"}],\"name\":\"NewDevFeeReceiver\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_allocPoint\",\"type\":\"uint256\"},{\"internalType\":\"contract IERC20\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_withUpdate\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"_withdrawable\",\"type\":\"bool\"}],\"name\":\"add\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"addPendingRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"averageRewardPerBlockEpoch\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"averagePerBlock\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"averageRewardPerBlockSinceStart\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"averagePerBlock\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"contractStartBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cumulativeRewardsSinceStart\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_depositFor\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"depositFor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"devFeePercentX100\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"devFeeReceiver\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"emergencyWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"epoch\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"epochCalculationStartBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"epochRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IXAUToken\",\"name\":\"_rewardToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_devFeeReceiver\",\"type\":\"address\"},{\"internalType\":\"uint16\",\"name\":\"_devFeePercentX100\",\"type\":\"uint16\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"massUpdatePools\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newVault\",\"type\":\"address\"}],\"name\":\"migrateTokensToNewVault\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pendingDevRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pendingRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"pendingToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"pendingTokenActual\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"poolInfo\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"allocPoint\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"accRewardPerShare\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"withdrawable\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"poolLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardToken\",\"outputs\":[{\"internalType\":\"contract IXAUToken\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardsInThisEpoch\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_allocPoint\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_withUpdate\",\"type\":\"bool\"}],\"name\":\"set\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"setAllowanceForPoolToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_devFeePercentX100\",\"type\":\"uint16\"}],\"name\":\"setDevFeePercentX100\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_devFeeReceiver\",\"type\":\"address\"}],\"name\":\"setDevFeeReceiver\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_withdrawable\",\"type\":\"bool\"}],\"name\":\"setPoolWithdrawable\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"contractAddress\",\"type\":\"address\"}],\"name\":\"setStrategyContractOrDistributionContractAllowance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startNewEpoch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalAllocPoint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"transferDevFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewardDebt\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdrawFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"Vault","CompilerVersion":"v0.6.12+commit.27d51765","OptimizationUsed":"1","Runs":"50000","ConstructorArguments":"","EVMVersion":"istanbul","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://74ec1c3217559d44d0d0808492121f57df53e32065cd235d416245bff1af6fcd"}]}