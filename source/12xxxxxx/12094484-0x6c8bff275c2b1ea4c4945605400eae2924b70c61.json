{"status":"1","message":"OK","result":[{"SourceCode":"/**\r\n *Submitted for verification at Etherscan.io on 2021-03-10\r\n*/\r\n\r\n// File: contracts/interfaces/IBridgeValidators.sol\r\n\r\npragma solidity 0.4.24;\r\n\r\ninterface IBridgeValidators {\r\n    function isValidator(address _validator) external view returns (bool);\r\n    function requiredSignatures() external view returns (uint256);\r\n    function owner() external view returns (address);\r\n}\r\n\r\n// File: contracts/libraries/Message.sol\r\n\r\npragma solidity 0.4.24;\r\n\r\n\r\nlibrary Message {\r\n    function addressArrayContains(address[] array, address value) internal pure returns (bool) {\r\n        for (uint256 i = 0; i < array.length; i++) {\r\n            if (array[i] == value) {\r\n                return true;\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n    // layout of message :: bytes:\r\n    // offset  0: 32 bytes :: uint256 - message length\r\n    // offset 32: 20 bytes :: address - recipient address\r\n    // offset 52: 32 bytes :: uint256 - value\r\n    // offset 84: 32 bytes :: bytes32 - transaction hash\r\n    // offset 104: 20 bytes :: address - contract address to prevent double spending\r\n\r\n    // mload always reads 32 bytes.\r\n    // so we can and have to start reading recipient at offset 20 instead of 32.\r\n    // if we were to read at 32 the address would contain part of value and be corrupted.\r\n    // when reading from offset 20 mload will read 12 bytes (most of them zeros) followed\r\n    // by the 20 recipient address bytes and correctly convert it into an address.\r\n    // this saves some storage/gas over the alternative solution\r\n    // which is padding address to 32 bytes and reading recipient at offset 32.\r\n    // for more details see discussion in:\r\n    // https://github.com/paritytech/parity-bridge/issues/61\r\n    function parseMessage(bytes message)\r\n        internal\r\n        pure\r\n        returns (address recipient, uint256 amount, bytes32 txHash, address contractAddress)\r\n    {\r\n        require(isMessageValid(message));\r\n        assembly {\r\n            recipient := mload(add(message, 20))\r\n            amount := mload(add(message, 52))\r\n            txHash := mload(add(message, 84))\r\n            contractAddress := mload(add(message, 104))\r\n        }\r\n    }\r\n\r\n    function isMessageValid(bytes _msg) internal pure returns (bool) {\r\n        return _msg.length == requiredMessageLength();\r\n    }\r\n\r\n    function requiredMessageLength() internal pure returns (uint256) {\r\n        return 104;\r\n    }\r\n\r\n    function recoverAddressFromSignedMessage(bytes signature, bytes message, bool isAMBMessage)\r\n        internal\r\n        pure\r\n        returns (address)\r\n    {\r\n        require(signature.length == 65);\r\n        bytes32 r;\r\n        bytes32 s;\r\n        bytes1 v;\r\n\r\n        assembly {\r\n            r := mload(add(signature, 0x20))\r\n            s := mload(add(signature, 0x40))\r\n            v := mload(add(signature, 0x60))\r\n        }\r\n        require(uint8(v) == 27 || uint8(v) == 28);\r\n        require(uint256(s) <= 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0);\r\n\r\n        return ecrecover(hashMessage(message, isAMBMessage), uint8(v), r, s);\r\n    }\r\n\r\n    function hashMessage(bytes message, bool isAMBMessage) internal pure returns (bytes32) {\r\n        bytes memory prefix = \"\\x19Ethereum Signed Message:\\n\";\r\n        if (isAMBMessage) {\r\n            return keccak256(abi.encodePacked(prefix, uintToString(message.length), message));\r\n        } else {\r\n            string memory msgLength = \"104\";\r\n            return keccak256(abi.encodePacked(prefix, msgLength, message));\r\n        }\r\n    }\r\n\r\n    /**\r\n    * @dev Validates provided signatures, only first requiredSignatures() number\r\n    * of signatures are going to be validated, these signatures should be from different validators.\r\n    * @param _message bytes message used to generate signatures\r\n    * @param _signatures bytes blob with signatures to be validated.\r\n    * First byte X is a number of signatures in a blob,\r\n    * next X bytes are v components of signatures,\r\n    * next 32 * X bytes are r components of signatures,\r\n    * next 32 * X bytes are s components of signatures.\r\n    * @param _validatorContract contract, which conforms to the IBridgeValidators interface,\r\n    * where info about current validators and required signatures is stored.\r\n    * @param isAMBMessage true if _message is an AMB message with arbitrary length.\r\n    */\r\n    function hasEnoughValidSignatures(\r\n        bytes _message,\r\n        bytes _signatures,\r\n        IBridgeValidators _validatorContract,\r\n        bool isAMBMessage\r\n    ) internal view {\r\n        require(isAMBMessage || isMessageValid(_message));\r\n        uint256 requiredSignatures = _validatorContract.requiredSignatures();\r\n        uint256 amount;\r\n        assembly {\r\n            amount := and(mload(add(_signatures, 1)), 0xff)\r\n        }\r\n        require(amount >= requiredSignatures);\r\n        bytes32 hash = hashMessage(_message, isAMBMessage);\r\n        address[] memory encounteredAddresses = new address[](requiredSignatures);\r\n\r\n        for (uint256 i = 0; i < requiredSignatures; i++) {\r\n            uint8 v;\r\n            bytes32 r;\r\n            bytes32 s;\r\n            uint256 posr = 33 + amount + 32 * i;\r\n            uint256 poss = posr + 32 * amount;\r\n            assembly {\r\n                v := mload(add(_signatures, add(2, i)))\r\n                r := mload(add(_signatures, posr))\r\n                s := mload(add(_signatures, poss))\r\n            }\r\n\r\n            address recoveredAddress = ecrecover(hash, v, r, s);\r\n            require(_validatorContract.isValidator(recoveredAddress));\r\n            require(!addressArrayContains(encounteredAddresses, recoveredAddress));\r\n            encounteredAddresses[i] = recoveredAddress;\r\n        }\r\n    }\r\n\r\n    function uintToString(uint256 i) internal pure returns (string) {\r\n        if (i == 0) return \"0\";\r\n        uint256 j = i;\r\n        uint256 length;\r\n        while (j != 0) {\r\n            length++;\r\n            j /= 10;\r\n        }\r\n        bytes memory bstr = new bytes(length);\r\n        uint256 k = length - 1;\r\n        while (i != 0) {\r\n            bstr[k--] = bytes1(48 + (i % 10));\r\n            i /= 10;\r\n        }\r\n        return string(bstr);\r\n    }\r\n}\r\n\r\n// File: contracts/libraries/ArbitraryMessage.sol\r\n\r\npragma solidity 0.4.24;\r\n\r\nlibrary ArbitraryMessage {\r\n    /**\r\n    * @dev Unpacks data fields from AMB message\r\n    * layout of message :: bytes:\r\n    * offset  0              : 32 bytes :: uint256 - message length\r\n    * offset 32              : 32 bytes :: bytes32 - messageId\r\n    * offset 64              : 20 bytes :: address - sender address\r\n    * offset 84              : 20 bytes :: address - executor contract\r\n    * offset 104             : 4 bytes  :: uint32  - gasLimit\r\n    * offset 108             : 1 bytes  :: uint8   - source chain id length (X)\r\n    * offset 109             : 1 bytes  :: uint8   - destination chain id length (Y)\r\n    * offset 110             : 1 bytes  :: uint8   - dataType\r\n    * offset 111             : X bytes  :: bytes   - source chain id\r\n    * offset 111 + X         : Y bytes  :: bytes   - destination chain id\r\n\r\n    * NOTE: when message structure is changed, make sure that MESSAGE_PACKING_VERSION from VersionableAMB is updated as well\r\n    * NOTE: assembly code uses calldatacopy, make sure that message is passed as the first argument in the calldata\r\n    * @param _data encoded message\r\n    */\r\n    function unpackData(bytes _data)\r\n        internal\r\n        pure\r\n        returns (\r\n            bytes32 messageId,\r\n            address sender,\r\n            address executor,\r\n            uint32 gasLimit,\r\n            uint8 dataType,\r\n            uint256[2] chainIds,\r\n            bytes memory data\r\n        )\r\n    {\r\n        // 32 (message id) + 20 (sender) + 20 (executor) + 4 (gasLimit) + 1 (source chain id length) + 1 (destination chain id length) + 1 (dataType)\r\n        uint256 srcdataptr = 32 + 20 + 20 + 4 + 1 + 1 + 1;\r\n        uint256 datasize;\r\n\r\n        assembly {\r\n            messageId := mload(add(_data, 32)) // 32 bytes\r\n            sender := and(mload(add(_data, 52)), 0xffffffffffffffffffffffffffffffffffffffff) // 20 bytes\r\n\r\n            // executor (20 bytes) + gasLimit (4 bytes) + srcChainIdLength (1 byte) + dstChainIdLength (1 bytes) + dataType (1 byte) + remainder (5 bytes)\r\n            let blob := mload(add(_data, 84))\r\n\r\n            // after bit shift left 12 bytes are zeros automatically\r\n            executor := shr(96, blob)\r\n            gasLimit := and(shr(64, blob), 0xffffffff)\r\n\r\n            dataType := byte(26, blob)\r\n            if gt(and(dataType, 0x7f), 0) {\r\n                // for now, only 0x00 and 0x80 datatypes are supported - regular AMB calls\r\n                // other dataType values are kept reserved for future use\r\n                revert(0, 0)\r\n            }\r\n\r\n            // load source chain id length\r\n            let chainIdLength := byte(24, blob)\r\n\r\n            // at this moment srcdataptr points to sourceChainId\r\n\r\n            // mask for sourceChainId\r\n            // e.g. length X -> (1 << (X * 8)) - 1\r\n            let mask := sub(shl(shl(3, chainIdLength), 1), 1)\r\n\r\n            // increase payload offset by length of source chain id\r\n            srcdataptr := add(srcdataptr, chainIdLength)\r\n\r\n            // write sourceChainId\r\n            mstore(chainIds, and(mload(add(_data, srcdataptr)), mask))\r\n\r\n            // at this moment srcdataptr points to destinationChainId\r\n\r\n            // load destination chain id length\r\n            chainIdLength := byte(25, blob)\r\n\r\n            // mask for destinationChainId\r\n            // e.g. length X -> (1 << (X * 8)) - 1\r\n            mask := sub(shl(shl(3, chainIdLength), 1), 1)\r\n\r\n            // increase payload offset by length of destination chain id\r\n            srcdataptr := add(srcdataptr, chainIdLength)\r\n\r\n            // write destinationChainId\r\n            mstore(add(chainIds, 32), and(mload(add(_data, srcdataptr)), mask))\r\n\r\n            // at this moment srcdataptr points to payload\r\n\r\n            // datasize = message length - payload offset\r\n            datasize := sub(mload(_data), srcdataptr)\r\n        }\r\n\r\n        data = new bytes(datasize);\r\n        assembly {\r\n            // 36 = 4 (selector) + 32 (bytes length header)\r\n            srcdataptr := add(srcdataptr, 36)\r\n\r\n            // calldataload(4) - offset of first bytes argument in the calldata\r\n            calldatacopy(add(data, 32), add(calldataload(4), srcdataptr), datasize)\r\n        }\r\n    }\r\n}\r\n\r\n// File: contracts/interfaces/IUpgradeabilityOwnerStorage.sol\r\n\r\npragma solidity 0.4.24;\r\n\r\ninterface IUpgradeabilityOwnerStorage {\r\n    function upgradeabilityOwner() external view returns (address);\r\n}\r\n\r\n// File: contracts/upgradeable_contracts/Upgradeable.sol\r\n\r\npragma solidity 0.4.24;\r\n\r\n\r\ncontract Upgradeable {\r\n    // Avoid using onlyUpgradeabilityOwner name to prevent issues with implementation from proxy contract\r\n    modifier onlyIfUpgradeabilityOwner() {\r\n        require(msg.sender == IUpgradeabilityOwnerStorage(this).upgradeabilityOwner());\r\n        /* solcov ignore next */\r\n        _;\r\n    }\r\n}\r\n\r\n// File: contracts/upgradeability/EternalStorage.sol\r\n\r\npragma solidity 0.4.24;\r\n\r\n/**\r\n * @title EternalStorage\r\n * @dev This contract holds all the necessary state variables to carry out the storage of any contract.\r\n */\r\ncontract EternalStorage {\r\n    mapping(bytes32 => uint256) internal uintStorage;\r\n    mapping(bytes32 => string) internal stringStorage;\r\n    mapping(bytes32 => address) internal addressStorage;\r\n    mapping(bytes32 => bytes) internal bytesStorage;\r\n    mapping(bytes32 => bool) internal boolStorage;\r\n    mapping(bytes32 => int256) internal intStorage;\r\n\r\n}\r\n\r\n// File: contracts/upgradeable_contracts/Initializable.sol\r\n\r\npragma solidity 0.4.24;\r\n\r\n\r\ncontract Initializable is EternalStorage {\r\n    bytes32 internal constant INITIALIZED = 0x0a6f646cd611241d8073675e00d1a1ff700fbf1b53fcf473de56d1e6e4b714ba; // keccak256(abi.encodePacked(\"isInitialized\"))\r\n\r\n    function setInitialize() internal {\r\n        boolStorage[INITIALIZED] = true;\r\n    }\r\n\r\n    function isInitialized() public view returns (bool) {\r\n        return boolStorage[INITIALIZED];\r\n    }\r\n}\r\n\r\n// File: contracts/upgradeable_contracts/InitializableBridge.sol\r\n\r\npragma solidity 0.4.24;\r\n\r\n\r\ncontract InitializableBridge is Initializable {\r\n    bytes32 internal constant DEPLOYED_AT_BLOCK = 0xb120ceec05576ad0c710bc6e85f1768535e27554458f05dcbb5c65b8c7a749b0; // keccak256(abi.encodePacked(\"deployedAtBlock\"))\r\n\r\n    function deployedAtBlock() external view returns (uint256) {\r\n        return uintStorage[DEPLOYED_AT_BLOCK];\r\n    }\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/AddressUtils.sol\r\n\r\npragma solidity ^0.4.24;\r\n\r\n\r\n/**\r\n * Utility library of inline functions on addresses\r\n */\r\nlibrary AddressUtils {\r\n\r\n  /**\r\n   * Returns whether the target address is a contract\r\n   * @dev This function will return false if invoked during the constructor of a contract,\r\n   * as the code is not actually created until after the constructor finishes.\r\n   * @param _addr address to check\r\n   * @return whether the target address is a contract\r\n   */\r\n  function isContract(address _addr) internal view returns (bool) {\r\n    uint256 size;\r\n    // XXX Currently there is no better way to check if there is a contract in an address\r\n    // than to check the size of the code at that address.\r\n    // See https://ethereum.stackexchange.com/a/14016/36603\r\n    // for more details about how this works.\r\n    // TODO Check this again before the Serenity release, because all addresses will be\r\n    // contracts then.\r\n    // solium-disable-next-line security/no-inline-assembly\r\n    assembly { size := extcodesize(_addr) }\r\n    return size > 0;\r\n  }\r\n\r\n}\r\n\r\n// File: contracts/upgradeable_contracts/ValidatorStorage.sol\r\n\r\npragma solidity 0.4.24;\r\n\r\ncontract ValidatorStorage {\r\n    bytes32 internal constant VALIDATOR_CONTRACT = 0x5a74bb7e202fb8e4bf311841c7d64ec19df195fee77d7e7ae749b27921b6ddfe; // keccak256(abi.encodePacked(\"validatorContract\"))\r\n}\r\n\r\n// File: contracts/upgradeable_contracts/Validatable.sol\r\n\r\npragma solidity 0.4.24;\r\n\r\n\r\n\r\n\r\ncontract Validatable is EternalStorage, ValidatorStorage {\r\n    function validatorContract() public view returns (IBridgeValidators) {\r\n        return IBridgeValidators(addressStorage[VALIDATOR_CONTRACT]);\r\n    }\r\n\r\n    modifier onlyValidator() {\r\n        require(validatorContract().isValidator(msg.sender));\r\n        /* solcov ignore next */\r\n        _;\r\n    }\r\n\r\n    function requiredSignatures() public view returns (uint256) {\r\n        return validatorContract().requiredSignatures();\r\n    }\r\n\r\n}\r\n\r\n// File: contracts/upgradeable_contracts/Ownable.sol\r\n\r\npragma solidity 0.4.24;\r\n\r\n\r\n\r\n/**\r\n * @title Ownable\r\n * @dev This contract has an owner address providing basic authorization control\r\n */\r\ncontract Ownable is EternalStorage {\r\n    bytes4 internal constant UPGRADEABILITY_OWNER = 0x6fde8202; // upgradeabilityOwner()\r\n\r\n    /**\r\n    * @dev Event to show ownership has been transferred\r\n    * @param previousOwner representing the address of the previous owner\r\n    * @param newOwner representing the address of the new owner\r\n    */\r\n    event OwnershipTransferred(address previousOwner, address newOwner);\r\n\r\n    /**\r\n    * @dev Throws if called by any account other than the owner.\r\n    */\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner());\r\n        /* solcov ignore next */\r\n        _;\r\n    }\r\n\r\n    /**\r\n    * @dev Throws if called by any account other than contract itself or owner.\r\n    */\r\n    modifier onlyRelevantSender() {\r\n        // proxy owner if used through proxy, address(0) otherwise\r\n        require(\r\n            !address(this).call(abi.encodeWithSelector(UPGRADEABILITY_OWNER)) || // covers usage without calling through storage proxy\r\n                msg.sender == IUpgradeabilityOwnerStorage(this).upgradeabilityOwner() || // covers usage through regular proxy calls\r\n                msg.sender == address(this) // covers calls through upgradeAndCall proxy method\r\n        );\r\n        /* solcov ignore next */\r\n        _;\r\n    }\r\n\r\n    bytes32 internal constant OWNER = 0x02016836a56b71f0d02689e69e326f4f4c1b9057164ef592671cf0d37c8040c0; // keccak256(abi.encodePacked(\"owner\"))\r\n\r\n    /**\r\n    * @dev Tells the address of the owner\r\n    * @return the address of the owner\r\n    */\r\n    function owner() public view returns (address) {\r\n        return addressStorage[OWNER];\r\n    }\r\n\r\n    /**\r\n    * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n    * @param newOwner the address to transfer ownership to.\r\n    */\r\n    function transferOwnership(address newOwner) external onlyOwner {\r\n        _setOwner(newOwner);\r\n    }\r\n\r\n    /**\r\n    * @dev Sets a new owner address\r\n    */\r\n    function _setOwner(address newOwner) internal {\r\n        require(newOwner != address(0));\r\n        emit OwnershipTransferred(owner(), newOwner);\r\n        addressStorage[OWNER] = newOwner;\r\n    }\r\n}\r\n\r\n// File: contracts/upgradeable_contracts/Sacrifice.sol\r\n\r\npragma solidity 0.4.24;\r\n\r\ncontract Sacrifice {\r\n    constructor(address _recipient) public payable {\r\n        selfdestruct(_recipient);\r\n    }\r\n}\r\n\r\n// File: contracts/libraries/Address.sol\r\n\r\npragma solidity 0.4.24;\r\n\r\n\r\n/**\r\n * @title Address\r\n * @dev Helper methods for Address type.\r\n */\r\nlibrary Address {\r\n    /**\r\n    * @dev Try to send native tokens to the address. If it fails, it will force the transfer by creating a selfdestruct contract\r\n    * @param _receiver address that will receive the native tokens\r\n    * @param _value the amount of native tokens to send\r\n    */\r\n    function safeSendValue(address _receiver, uint256 _value) internal {\r\n        if (!_receiver.send(_value)) {\r\n            (new Sacrifice).value(_value)(_receiver);\r\n        }\r\n    }\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/math/SafeMath.sol\r\n\r\npragma solidity ^0.4.24;\r\n\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n\r\n  /**\r\n  * @dev Multiplies two numbers, throws on overflow.\r\n  */\r\n  function mul(uint256 _a, uint256 _b) internal pure returns (uint256 c) {\r\n    // Gas optimization: this is cheaper than asserting 'a' not being zero, but the\r\n    // benefit is lost if 'b' is also tested.\r\n    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\r\n    if (_a == 0) {\r\n      return 0;\r\n    }\r\n\r\n    c = _a * _b;\r\n    assert(c / _a == _b);\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Integer division of two numbers, truncating the quotient.\r\n  */\r\n  function div(uint256 _a, uint256 _b) internal pure returns (uint256) {\r\n    // assert(_b > 0); // Solidity automatically throws when dividing by 0\r\n    // uint256 c = _a / _b;\r\n    // assert(_a == _b * c + _a % _b); // There is no case in which this doesn't hold\r\n    return _a / _b;\r\n  }\r\n\r\n  /**\r\n  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n  */\r\n  function sub(uint256 _a, uint256 _b) internal pure returns (uint256) {\r\n    assert(_b <= _a);\r\n    return _a - _b;\r\n  }\r\n\r\n  /**\r\n  * @dev Adds two numbers, throws on overflow.\r\n  */\r\n  function add(uint256 _a, uint256 _b) internal pure returns (uint256 c) {\r\n    c = _a + _b;\r\n    assert(c >= _a);\r\n    return c;\r\n  }\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/token/ERC20/ERC20Basic.sol\r\n\r\npragma solidity ^0.4.24;\r\n\r\n\r\n/**\r\n * @title ERC20Basic\r\n * @dev Simpler version of ERC20 interface\r\n * See https://github.com/ethereum/EIPs/issues/179\r\n */\r\ncontract ERC20Basic {\r\n  function totalSupply() public view returns (uint256);\r\n  function balanceOf(address _who) public view returns (uint256);\r\n  function transfer(address _to, uint256 _value) public returns (bool);\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/token/ERC20/ERC20.sol\r\n\r\npragma solidity ^0.4.24;\r\n\r\n\r\n\r\n/**\r\n * @title ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/20\r\n */\r\ncontract ERC20 is ERC20Basic {\r\n  function allowance(address _owner, address _spender)\r\n    public view returns (uint256);\r\n\r\n  function transferFrom(address _from, address _to, uint256 _value)\r\n    public returns (bool);\r\n\r\n  function approve(address _spender, uint256 _value) public returns (bool);\r\n  event Approval(\r\n    address indexed owner,\r\n    address indexed spender,\r\n    uint256 value\r\n  );\r\n}\r\n\r\n// File: contracts/interfaces/ERC677.sol\r\n\r\npragma solidity 0.4.24;\r\n\r\n\r\ncontract ERC677 is ERC20 {\r\n    event Transfer(address indexed from, address indexed to, uint256 value, bytes data);\r\n\r\n    function transferAndCall(address, uint256, bytes) external returns (bool);\r\n\r\n    function increaseAllowance(address spender, uint256 addedValue) public returns (bool);\r\n    function decreaseAllowance(address spender, uint256 subtractedValue) public returns (bool);\r\n}\r\n\r\ncontract LegacyERC20 {\r\n    function transfer(address _spender, uint256 _value) public; // returns (bool);\r\n    function transferFrom(address _owner, address _spender, uint256 _value) public; // returns (bool);\r\n}\r\n\r\n// File: contracts/libraries/SafeERC20.sol\r\n\r\npragma solidity 0.4.24;\r\n\r\n\r\n\r\n/**\r\n * @title SafeERC20\r\n * @dev Helper methods for safe token transfers.\r\n * Functions perform additional checks to be sure that token transfer really happened.\r\n */\r\nlibrary SafeERC20 {\r\n    using SafeMath for uint256;\r\n\r\n    /**\r\n    * @dev Same as ERC20.transfer(address,uint256) but with extra consistency checks.\r\n    * @param _token address of the token contract\r\n    * @param _to address of the receiver\r\n    * @param _value amount of tokens to send\r\n    */\r\n    function safeTransfer(address _token, address _to, uint256 _value) internal {\r\n        LegacyERC20(_token).transfer(_to, _value);\r\n        assembly {\r\n            if returndatasize {\r\n                returndatacopy(0, 0, 32)\r\n                if iszero(mload(0)) {\r\n                    revert(0, 0)\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n    * @dev Same as ERC20.transferFrom(address,address,uint256) but with extra consistency checks.\r\n    * @param _token address of the token contract\r\n    * @param _from address of the sender\r\n    * @param _value amount of tokens to send\r\n    */\r\n    function safeTransferFrom(address _token, address _from, uint256 _value) internal {\r\n        LegacyERC20(_token).transferFrom(_from, address(this), _value);\r\n        assembly {\r\n            if returndatasize {\r\n                returndatacopy(0, 0, 32)\r\n                if iszero(mload(0)) {\r\n                    revert(0, 0)\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n// File: contracts/upgradeable_contracts/Claimable.sol\r\n\r\npragma solidity 0.4.24;\r\n\r\n\r\n\r\n/**\r\n * @title Claimable\r\n * @dev Implementation of the claiming utils that can be useful for withdrawing accidentally sent tokens that are not used in bridge operations.\r\n */\r\ncontract Claimable {\r\n    using SafeERC20 for address;\r\n\r\n    /**\r\n     * Throws if a given address is equal to address(0)\r\n     */\r\n    modifier validAddress(address _to) {\r\n        require(_to != address(0));\r\n        /* solcov ignore next */\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Withdraws the erc20 tokens or native coins from this contract.\r\n     * Caller should additionally check that the claimed token is not a part of bridge operations (i.e. that token != erc20token()).\r\n     * @param _token address of the claimed token or address(0) for native coins.\r\n     * @param _to address of the tokens/coins receiver.\r\n     */\r\n    function claimValues(address _token, address _to) internal validAddress(_to) {\r\n        if (_token == address(0)) {\r\n            claimNativeCoins(_to);\r\n        } else {\r\n            claimErc20Tokens(_token, _to);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Internal function for withdrawing all native coins from the contract.\r\n     * @param _to address of the coins receiver.\r\n     */\r\n    function claimNativeCoins(address _to) internal {\r\n        uint256 value = address(this).balance;\r\n        Address.safeSendValue(_to, value);\r\n    }\r\n\r\n    /**\r\n     * @dev Internal function for withdrawing all tokens of ssome particular ERC20 contract from this contract.\r\n     * @param _token address of the claimed ERC20 token.\r\n     * @param _to address of the tokens receiver.\r\n     */\r\n    function claimErc20Tokens(address _token, address _to) internal {\r\n        ERC20Basic token = ERC20Basic(_token);\r\n        uint256 balance = token.balanceOf(this);\r\n        _token.safeTransfer(_to, balance);\r\n    }\r\n}\r\n\r\n// File: contracts/upgradeable_contracts/VersionableBridge.sol\r\n\r\npragma solidity 0.4.24;\r\n\r\ncontract VersionableBridge {\r\n    function getBridgeInterfacesVersion() external pure returns (uint64 major, uint64 minor, uint64 patch) {\r\n        return (5, 2, 0);\r\n    }\r\n\r\n    /* solcov ignore next */\r\n    function getBridgeMode() external pure returns (bytes4);\r\n}\r\n\r\n// File: contracts/upgradeable_contracts/DecimalShiftBridge.sol\r\n\r\npragma solidity 0.4.24;\r\n\r\n\r\n\r\ncontract DecimalShiftBridge is EternalStorage {\r\n    using SafeMath for uint256;\r\n\r\n    bytes32 internal constant DECIMAL_SHIFT = 0x1e8ecaafaddea96ed9ac6d2642dcdfe1bebe58a930b1085842d8fc122b371ee5; // keccak256(abi.encodePacked(\"decimalShift\"))\r\n\r\n    /**\r\n    * @dev Internal function for setting the decimal shift for bridge operations.\r\n    * Decimal shift can be positive, negative, or equal to zero.\r\n    * It has the following meaning: N tokens in the foreign chain are equivalent to N * pow(10, shift) tokens on the home side.\r\n    * @param _shift new value of decimal shift.\r\n    */\r\n    function _setDecimalShift(int256 _shift) internal {\r\n        // since 1 wei * 10**77 > 2**255, it does not make any sense to use higher values\r\n        require(_shift > -77 && _shift < 77);\r\n        uintStorage[DECIMAL_SHIFT] = uint256(_shift);\r\n    }\r\n\r\n    /**\r\n    * @dev Returns the value of foreign-to-home decimal shift.\r\n    * @return decimal shift.\r\n    */\r\n    function decimalShift() public view returns (int256) {\r\n        return int256(uintStorage[DECIMAL_SHIFT]);\r\n    }\r\n\r\n    /**\r\n    * @dev Converts the amount of home tokens into the equivalent amount of foreign tokens.\r\n    * @param _value amount of home tokens.\r\n    * @return equivalent amount of foreign tokens.\r\n    */\r\n    function _unshiftValue(uint256 _value) internal view returns (uint256) {\r\n        return _shiftUint(_value, -decimalShift());\r\n    }\r\n\r\n    /**\r\n    * @dev Converts the amount of foreign tokens into the equivalent amount of home tokens.\r\n    * @param _value amount of foreign tokens.\r\n    * @return equivalent amount of home tokens.\r\n    */\r\n    function _shiftValue(uint256 _value) internal view returns (uint256) {\r\n        return _shiftUint(_value, decimalShift());\r\n    }\r\n\r\n    /**\r\n    * @dev Calculates _value * pow(10, _shift).\r\n    * @param _value amount of tokens.\r\n    * @param _shift decimal shift to apply.\r\n    * @return shifted value.\r\n    */\r\n    function _shiftUint(uint256 _value, int256 _shift) private pure returns (uint256) {\r\n        if (_shift == 0) {\r\n            return _value;\r\n        }\r\n        if (_shift > 0) {\r\n            return _value.mul(10**uint256(_shift));\r\n        }\r\n        return _value.div(10**uint256(-_shift));\r\n    }\r\n}\r\n\r\n// File: contracts/upgradeable_contracts/BasicBridge.sol\r\n\r\npragma solidity 0.4.24;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\ncontract BasicBridge is\r\n    InitializableBridge,\r\n    Validatable,\r\n    Ownable,\r\n    Upgradeable,\r\n    Claimable,\r\n    VersionableBridge,\r\n    DecimalShiftBridge\r\n{\r\n    event GasPriceChanged(uint256 gasPrice);\r\n    event RequiredBlockConfirmationChanged(uint256 requiredBlockConfirmations);\r\n\r\n    bytes32 internal constant GAS_PRICE = 0x55b3774520b5993024893d303890baa4e84b1244a43c60034d1ced2d3cf2b04b; // keccak256(abi.encodePacked(\"gasPrice\"))\r\n    bytes32 internal constant REQUIRED_BLOCK_CONFIRMATIONS = 0x916daedf6915000ff68ced2f0b6773fe6f2582237f92c3c95bb4d79407230071; // keccak256(abi.encodePacked(\"requiredBlockConfirmations\"))\r\n\r\n    /**\r\n    * @dev Public setter for fallback gas price value. Only bridge owner can call this method.\r\n    * @param _gasPrice new value for the gas price.\r\n    */\r\n    function setGasPrice(uint256 _gasPrice) external onlyOwner {\r\n        _setGasPrice(_gasPrice);\r\n    }\r\n\r\n    function gasPrice() external view returns (uint256) {\r\n        return uintStorage[GAS_PRICE];\r\n    }\r\n\r\n    function setRequiredBlockConfirmations(uint256 _blockConfirmations) external onlyOwner {\r\n        _setRequiredBlockConfirmations(_blockConfirmations);\r\n    }\r\n\r\n    function _setRequiredBlockConfirmations(uint256 _blockConfirmations) internal {\r\n        require(_blockConfirmations > 0);\r\n        uintStorage[REQUIRED_BLOCK_CONFIRMATIONS] = _blockConfirmations;\r\n        emit RequiredBlockConfirmationChanged(_blockConfirmations);\r\n    }\r\n\r\n    function requiredBlockConfirmations() external view returns (uint256) {\r\n        return uintStorage[REQUIRED_BLOCK_CONFIRMATIONS];\r\n    }\r\n\r\n    /**\r\n    * @dev Internal function for updating fallback gas price value.\r\n    * @param _gasPrice new value for the gas price, zero gas price is allowed.\r\n    */\r\n    function _setGasPrice(uint256 _gasPrice) internal {\r\n        uintStorage[GAS_PRICE] = _gasPrice;\r\n        emit GasPriceChanged(_gasPrice);\r\n    }\r\n}\r\n\r\n// File: contracts/upgradeable_contracts/arbitrary_message/VersionableAMB.sol\r\n\r\npragma solidity 0.4.24;\r\n\r\n\r\ncontract VersionableAMB is VersionableBridge {\r\n    // message format version as a single 4-bytes number padded to 32-bytes\r\n    // value, included into every outgoing relay request\r\n    //\r\n    // the message version should be updated every time when\r\n    // - new field appears\r\n    // - some field removed\r\n    // - fields order is changed\r\n    bytes32 internal constant MESSAGE_PACKING_VERSION = 0x00050000 << 224;\r\n\r\n    /**\r\n     * Returns currently used bridge version\r\n     * @return (major, minor, patch) version triple\r\n     */\r\n    function getBridgeInterfacesVersion() external pure returns (uint64 major, uint64 minor, uint64 patch) {\r\n        return (5, 6, 0);\r\n    }\r\n}\r\n\r\n// File: contracts/upgradeable_contracts/arbitrary_message/BasicAMB.sol\r\n\r\npragma solidity 0.4.24;\r\n\r\n\r\n\r\ncontract BasicAMB is BasicBridge, VersionableAMB {\r\n    bytes32 internal constant MAX_GAS_PER_TX = 0x2670ecc91ec356e32067fd27b36614132d727b84a1e03e08f412a4f2cf075974; // keccak256(abi.encodePacked(\"maxGasPerTx\"))\r\n    bytes32 internal constant NONCE = 0x7ab1577440dd7bedf920cb6de2f9fc6bf7ba98c78c85a3fa1f8311aac95e1759; // keccak256(abi.encodePacked(\"nonce\"))\r\n    bytes32 internal constant SOURCE_CHAIN_ID = 0x67d6f42a1ed69c62022f2d160ddc6f2f0acd37ad1db0c24f4702d7d3343a4add; // keccak256(abi.encodePacked(\"sourceChainId\"))\r\n    bytes32 internal constant SOURCE_CHAIN_ID_LENGTH = 0xe504ae1fd6471eea80f18b8532a61a9bb91fba4f5b837f80a1cfb6752350af44; // keccak256(abi.encodePacked(\"sourceChainIdLength\"))\r\n    bytes32 internal constant DESTINATION_CHAIN_ID = 0xbbd454018e72a3f6c02bbd785bacc49e46292744f3f6761276723823aa332320; // keccak256(abi.encodePacked(\"destinationChainId\"))\r\n    bytes32 internal constant DESTINATION_CHAIN_ID_LENGTH = 0xfb792ae4ad11102b93f26a51b3749c2b3667f8b561566a4806d4989692811594; // keccak256(abi.encodePacked(\"destinationChainIdLength\"))\r\n    bytes32 internal constant ALLOW_REENTRANT_REQUESTS = 0xffa3a5a0e192028fc343362a39c5688e5a60819a4dc5ab3ee70c25bc25b78dd6; // keccak256(abi.encodePacked(\"allowReentrantRequests\"))\r\n\r\n    /**\r\n     * Initializes AMB contract\r\n     * @param _sourceChainId chain id of a network where this contract is deployed\r\n     * @param _destinationChainId chain id of a network where all outgoing messages are directed\r\n     * @param _validatorContract address of the validators contract\r\n     * @param _maxGasPerTx maximum amount of gas per one message execution\r\n     * @param _gasPrice default gas price used by oracles for sending transactions in this network\r\n     * @param _requiredBlockConfirmations number of block confirmations oracle will wait before processing passed messages\r\n     * @param _owner address of new bridge owner\r\n     */\r\n    function initialize(\r\n        uint256 _sourceChainId,\r\n        uint256 _destinationChainId,\r\n        address _validatorContract,\r\n        uint256 _maxGasPerTx,\r\n        uint256 _gasPrice,\r\n        uint256 _requiredBlockConfirmations,\r\n        address _owner\r\n    ) external onlyRelevantSender returns (bool) {\r\n        require(!isInitialized());\r\n        require(AddressUtils.isContract(_validatorContract));\r\n\r\n        _setChainIds(_sourceChainId, _destinationChainId);\r\n        addressStorage[VALIDATOR_CONTRACT] = _validatorContract;\r\n        uintStorage[DEPLOYED_AT_BLOCK] = block.number;\r\n        uintStorage[MAX_GAS_PER_TX] = _maxGasPerTx;\r\n        _setGasPrice(_gasPrice);\r\n        _setRequiredBlockConfirmations(_requiredBlockConfirmations);\r\n        _setOwner(_owner);\r\n        setInitialize();\r\n\r\n        return isInitialized();\r\n    }\r\n\r\n    function getBridgeMode() external pure returns (bytes4 _data) {\r\n        return 0x2544fbb9; // bytes4(keccak256(abi.encodePacked(\"arbitrary-message-bridge-core\")))\r\n    }\r\n\r\n    function maxGasPerTx() public view returns (uint256) {\r\n        return uintStorage[MAX_GAS_PER_TX];\r\n    }\r\n\r\n    function setMaxGasPerTx(uint256 _maxGasPerTx) external onlyOwner {\r\n        uintStorage[MAX_GAS_PER_TX] = _maxGasPerTx;\r\n    }\r\n\r\n    /**\r\n     * Internal function for retrieving chain id for the source network\r\n     * @return chain id for the current network\r\n     */\r\n    function sourceChainId() public view returns (uint256) {\r\n        return uintStorage[SOURCE_CHAIN_ID];\r\n    }\r\n\r\n    /**\r\n     * Internal function for retrieving chain id for the destination network\r\n     * @return chain id for the destination network\r\n     */\r\n    function destinationChainId() public view returns (uint256) {\r\n        return uintStorage[DESTINATION_CHAIN_ID];\r\n    }\r\n\r\n    /**\r\n     * Updates chain ids of used networks\r\n     * @param _sourceChainId chain id for current network\r\n     * @param _destinationChainId chain id for opposite network\r\n     */\r\n    function setChainIds(uint256 _sourceChainId, uint256 _destinationChainId) external onlyOwner {\r\n        _setChainIds(_sourceChainId, _destinationChainId);\r\n    }\r\n\r\n    /**\r\n     * Sets the flag to allow passing new AMB requests in the opposite direction,\r\n     * while other AMB message is being processed.\r\n     * Only owner can call this method.\r\n     * @param _enable true, if reentrant requests are allowed.\r\n     */\r\n    function setAllowReentrantRequests(bool _enable) external onlyOwner {\r\n        boolStorage[ALLOW_REENTRANT_REQUESTS] = _enable;\r\n    }\r\n\r\n    /**\r\n     * Tells if passing reentrant requests is allowed.\r\n     * @return true, if reentrant requests are allowed.\r\n     */\r\n    function allowReentrantRequests() public view returns (bool) {\r\n        return boolStorage[ALLOW_REENTRANT_REQUESTS];\r\n    }\r\n\r\n    /**\r\n     * Internal function for retrieving current nonce value\r\n     * @return nonce value\r\n     */\r\n    function _nonce() internal view returns (uint64) {\r\n        return uint64(uintStorage[NONCE]);\r\n    }\r\n\r\n    /**\r\n     * Internal function for updating nonce value\r\n     * @param _nonce new nonce value\r\n     */\r\n    function _setNonce(uint64 _nonce) internal {\r\n        uintStorage[NONCE] = uint256(_nonce);\r\n    }\r\n\r\n    /**\r\n     * Internal function for updating chain ids of used networks\r\n     * @param _sourceChainId chain id for current network\r\n     * @param _destinationChainId chain id for opposite network\r\n     */\r\n    function _setChainIds(uint256 _sourceChainId, uint256 _destinationChainId) internal {\r\n        require(_sourceChainId > 0 && _destinationChainId > 0);\r\n        require(_sourceChainId != _destinationChainId);\r\n\r\n        // Length fields are needed further when encoding the message.\r\n        // Chain ids are compressed, so that leading zero bytes are not preserved.\r\n        // In order to save some gas during calls to MessageDelivery.c,\r\n        // lengths of chain ids are precalculated and being saved in the storage.\r\n        uint256 sourceChainIdLength = 0;\r\n        uint256 destinationChainIdLength = 0;\r\n        uint256 mask = 0xff;\r\n\r\n        for (uint256 i = 1; sourceChainIdLength == 0 || destinationChainIdLength == 0; i++) {\r\n            if (sourceChainIdLength == 0 && _sourceChainId & mask == _sourceChainId) {\r\n                sourceChainIdLength = i;\r\n            }\r\n            if (destinationChainIdLength == 0 && _destinationChainId & mask == _destinationChainId) {\r\n                destinationChainIdLength = i;\r\n            }\r\n            mask = (mask << 8) | 0xff;\r\n        }\r\n\r\n        uintStorage[SOURCE_CHAIN_ID] = _sourceChainId;\r\n        uintStorage[SOURCE_CHAIN_ID_LENGTH] = sourceChainIdLength;\r\n        uintStorage[DESTINATION_CHAIN_ID] = _destinationChainId;\r\n        uintStorage[DESTINATION_CHAIN_ID_LENGTH] = destinationChainIdLength;\r\n    }\r\n\r\n    /**\r\n     * Internal function for retrieving chain id length for the source network\r\n     * @return chain id for the current network\r\n     */\r\n    function _sourceChainIdLength() internal view returns (uint256) {\r\n        return uintStorage[SOURCE_CHAIN_ID_LENGTH];\r\n    }\r\n\r\n    /**\r\n     * Internal function for retrieving chain id length for the destination network\r\n     * @return chain id for the destination network\r\n     */\r\n    function _destinationChainIdLength() internal view returns (uint256) {\r\n        return uintStorage[DESTINATION_CHAIN_ID_LENGTH];\r\n    }\r\n\r\n    /**\r\n     * Internal function for validating version of the received message\r\n     * @param _messageId id of the received message\r\n     */\r\n    function _isMessageVersionValid(bytes32 _messageId) internal returns (bool) {\r\n        return\r\n            _messageId & 0xffffffff00000000000000000000000000000000000000000000000000000000 == MESSAGE_PACKING_VERSION;\r\n    }\r\n\r\n    /**\r\n     * Internal function for validating destination chain id of the received message\r\n     * @param _chainId destination chain id of the received message\r\n     */\r\n    function _isDestinationChainIdValid(uint256 _chainId) internal returns (bool res) {\r\n        return _chainId == sourceChainId();\r\n    }\r\n}\r\n\r\n// File: contracts/libraries/Bytes.sol\r\n\r\npragma solidity 0.4.24;\r\n\r\n/**\r\n * @title Bytes\r\n * @dev Helper methods to transform bytes to other solidity types.\r\n */\r\nlibrary Bytes {\r\n    /**\r\n    * @dev Converts bytes array to bytes32.\r\n    * Truncates bytes array if its size is more than 32 bytes.\r\n    * NOTE: This function does not perform any checks on the received parameter.\r\n    * Make sure that the _bytes argument has a correct length, not less than 32 bytes.\r\n    * A case when _bytes has length less than 32 will lead to the undefined behaviour,\r\n    * since assembly will read data from memory that is not related to the _bytes argument.\r\n    * @param _bytes to be converted to bytes32 type\r\n    * @return bytes32 type of the firsts 32 bytes array in parameter.\r\n    */\r\n    function bytesToBytes32(bytes _bytes) internal pure returns (bytes32 result) {\r\n        assembly {\r\n            result := mload(add(_bytes, 32))\r\n        }\r\n    }\r\n\r\n    /**\r\n    * @dev Truncate bytes array if its size is more than 20 bytes.\r\n    * NOTE: Similar to the bytesToBytes32 function, make sure that _bytes is not shorter than 20 bytes.\r\n    * @param _bytes to be converted to address type\r\n    * @return address included in the firsts 20 bytes of the bytes array in parameter.\r\n    */\r\n    function bytesToAddress(bytes _bytes) internal pure returns (address addr) {\r\n        assembly {\r\n            addr := mload(add(_bytes, 20))\r\n        }\r\n    }\r\n}\r\n\r\n// File: contracts/upgradeable_contracts/arbitrary_message/MessageProcessor.sol\r\n\r\npragma solidity 0.4.24;\r\n\r\n\r\n\r\ncontract MessageProcessor is EternalStorage {\r\n    /**\r\n    * @dev Returns a status of the message that came from the other side.\r\n    * @param _messageId id of the message from the other side that triggered a call.\r\n    * @return true if call executed successfully.\r\n    */\r\n    function messageCallStatus(bytes32 _messageId) external view returns (bool) {\r\n        return boolStorage[keccak256(abi.encodePacked(\"messageCallStatus\", _messageId))];\r\n    }\r\n\r\n    /**\r\n    * @dev Sets a status of the message that came from the other side.\r\n    * @param _messageId id of the message from the other side that triggered a call.\r\n    * @param _status execution status, true if executed successfully.\r\n    */\r\n    function setMessageCallStatus(bytes32 _messageId, bool _status) internal {\r\n        boolStorage[keccak256(abi.encodePacked(\"messageCallStatus\", _messageId))] = _status;\r\n    }\r\n\r\n    /**\r\n    * @dev Returns a data hash of the failed message that came from the other side.\r\n    * NOTE: dataHash was used previously to identify outgoing message before AMB message id was introduced.\r\n    * It is kept for backwards compatibility with old mediators contracts.\r\n    * @param _messageId id of the message from the other side that triggered a call.\r\n    * @return keccak256 hash of message data.\r\n    */\r\n    function failedMessageDataHash(bytes32 _messageId) external view returns (bytes32) {\r\n        return bytes32(uintStorage[keccak256(abi.encodePacked(\"failedMessageDataHash\", _messageId))]);\r\n    }\r\n\r\n    /**\r\n    * @dev Sets a data hash of the failed message that came from the other side.\r\n    * NOTE: dataHash was used previously to identify outgoing message before AMB message id was introduced.\r\n    * It is kept for backwards compatibility with old mediators contracts.\r\n    * @param _messageId id of the message from the other side that triggered a call.\r\n    * @param data of the processed message.\r\n    */\r\n    function setFailedMessageDataHash(bytes32 _messageId, bytes data) internal {\r\n        uintStorage[keccak256(abi.encodePacked(\"failedMessageDataHash\", _messageId))] = uint256(keccak256(data));\r\n    }\r\n\r\n    /**\r\n    * @dev Returns a receiver address of the failed message that came from the other side.\r\n    * @param _messageId id of the message from the other side that triggered a call.\r\n    * @return receiver address.\r\n    */\r\n    function failedMessageReceiver(bytes32 _messageId) external view returns (address) {\r\n        return addressStorage[keccak256(abi.encodePacked(\"failedMessageReceiver\", _messageId))];\r\n    }\r\n\r\n    /**\r\n    * @dev Sets a sender address of the failed message that came from the other side.\r\n    * @param _messageId id of the message from the other side that triggered a call.\r\n    * @param _receiver address of the receiver.\r\n    */\r\n    function setFailedMessageReceiver(bytes32 _messageId, address _receiver) internal {\r\n        addressStorage[keccak256(abi.encodePacked(\"failedMessageReceiver\", _messageId))] = _receiver;\r\n    }\r\n\r\n    /**\r\n    * @dev Returns a sender address of the failed message that came from the other side.\r\n    * @param _messageId id of the message from the other side that triggered a call.\r\n    * @return sender address on the other side.\r\n    */\r\n    function failedMessageSender(bytes32 _messageId) external view returns (address) {\r\n        return addressStorage[keccak256(abi.encodePacked(\"failedMessageSender\", _messageId))];\r\n    }\r\n\r\n    /**\r\n    * @dev Sets a sender address of the failed message that came from the other side.\r\n    * @param _messageId id of the message from the other side that triggered a call.\r\n    * @param _sender address of the sender on the other side.\r\n    */\r\n    function setFailedMessageSender(bytes32 _messageId, address _sender) internal {\r\n        addressStorage[keccak256(abi.encodePacked(\"failedMessageSender\", _messageId))] = _sender;\r\n    }\r\n\r\n    /**\r\n    * @dev Returns an address of the sender on the other side for the currently processed message.\r\n    * Can be used by executors for getting other side caller address.\r\n    * @return address of the sender on the other side.\r\n    */\r\n    function messageSender() external view returns (address sender) {\r\n        assembly {\r\n            // Even though this is not the same as addressStorage[keccak256(abi.encodePacked(\"messageSender\"))],\r\n            // since solidity mapping introduces another level of addressing, such slot change is safe\r\n            // for temporary variables which are cleared at the end of the call execution.\r\n            sender := sload(0x7b58b2a669d8e0992eae9eaef641092c0f686fd31070e7236865557fa1571b5b) // keccak256(abi.encodePacked(\"messageSender\"))\r\n        }\r\n    }\r\n\r\n    /**\r\n    * @dev Sets an address of the sender on the other side for the currently processed message.\r\n    * @param _sender address of the sender on the other side.\r\n    */\r\n    function setMessageSender(address _sender) internal {\r\n        assembly {\r\n            // Even though this is not the same as addressStorage[keccak256(abi.encodePacked(\"messageSender\"))],\r\n            // since solidity mapping introduces another level of addressing, such slot change is safe\r\n            // for temporary variables which are cleared at the end of the call execution.\r\n            sstore(0x7b58b2a669d8e0992eae9eaef641092c0f686fd31070e7236865557fa1571b5b, _sender) // keccak256(abi.encodePacked(\"messageSender\"))\r\n        }\r\n    }\r\n\r\n    /**\r\n    * @dev Returns an id of the currently processed message.\r\n    * @return id of the message that originated on the other side.\r\n    */\r\n    function messageId() public view returns (bytes32 id) {\r\n        assembly {\r\n            // Even though this is not the same as uintStorage[keccak256(abi.encodePacked(\"messageId\"))],\r\n            // since solidity mapping introduces another level of addressing, such slot change is safe\r\n            // for temporary variables which are cleared at the end of the call execution.\r\n            id := sload(0xe34bb2103dc34f2c144cc216c132d6ffb55dac57575c22e089161bbe65083304) // keccak256(abi.encodePacked(\"messageId\"))\r\n        }\r\n    }\r\n\r\n    /**\r\n    * @dev Returns an id of the currently processed message.\r\n    * NOTE: transactionHash was used previously to identify incoming message before AMB message id was introduced.\r\n    * It is kept for backwards compatibility with old mediators contracts, although it doesn't return txHash anymore.\r\n    * @return id of the message that originated on the other side.\r\n    */\r\n    function transactionHash() external view returns (bytes32) {\r\n        return messageId();\r\n    }\r\n\r\n    /**\r\n    * @dev Sets a message id of the currently processed message.\r\n    * @param _messageId id of the message that originated on the other side.\r\n    */\r\n    function setMessageId(bytes32 _messageId) internal {\r\n        assembly {\r\n            // Even though this is not the same as uintStorage[keccak256(abi.encodePacked(\"messageId\"))],\r\n            // since solidity mapping introduces another level of addressing, such slot change is safe\r\n            // for temporary variables which are cleared at the end of the call execution.\r\n            sstore(0xe34bb2103dc34f2c144cc216c132d6ffb55dac57575c22e089161bbe65083304, _messageId) // keccak256(abi.encodePacked(\"messageId\"))\r\n        }\r\n    }\r\n\r\n    /**\r\n    * @dev Returns an originating chain id of the currently processed message.\r\n    * @return source chain id of the message that originated on the other side.\r\n    */\r\n    function messageSourceChainId() external view returns (uint256 id) {\r\n        assembly {\r\n            // Even though this is not the same as uintStorage[keccak256(abi.encodePacked(\"messageSourceChainId\"))],\r\n            // since solidity mapping introduces another level of addressing, such slot change is safe\r\n            // for temporary variables which are cleared at the end of the call execution.\r\n            id := sload(0x7f0fcd9e49860f055dd0c1682d635d309ecb5e3011654c716d9eb59a7ddec7d2) // keccak256(abi.encodePacked(\"messageSourceChainId\"))\r\n        }\r\n    }\r\n\r\n    /**\r\n    * @dev Sets an originating chain id of the currently processed message.\r\n    * @param _sourceChainId source chain id of the message that originated on the other side.\r\n    */\r\n    function setMessageSourceChainId(uint256 _sourceChainId) internal {\r\n        assembly {\r\n            // Even though this is not the same as uintStorage[keccak256(abi.encodePacked(\"messageSourceChainId\"))],\r\n            // since solidity mapping introduces another level of addressing, such slot change is safe\r\n            // for temporary variables which are cleared at the end of the call execution.\r\n            sstore(0x7f0fcd9e49860f055dd0c1682d635d309ecb5e3011654c716d9eb59a7ddec7d2, _sourceChainId) // keccak256(abi.encodePacked(\"messageSourceChainId\"))\r\n        }\r\n    }\r\n\r\n    /**\r\n    * @dev Processes received message. Makes a call to the message executor,\r\n    * sets dataHash, receive, sender variables for failed messages.\r\n    * @param _sender sender address on the other side.\r\n    * @param _executor address of an executor.\r\n    * @param _messageId id of the processed message.\r\n    * @param _gasLimit gas limit for a call to executor.\r\n    * @param _sourceChainId source chain id is of the received message.\r\n    * @param _data calldata for a call to executor.\r\n    */\r\n    function processMessage(\r\n        address _sender,\r\n        address _executor,\r\n        bytes32 _messageId,\r\n        uint256 _gasLimit,\r\n        uint8, /* dataType */\r\n        uint256 _sourceChainId,\r\n        bytes memory _data\r\n    ) internal {\r\n        bool status = _passMessage(_sender, _executor, _data, _gasLimit, _messageId, _sourceChainId);\r\n\r\n        setMessageCallStatus(_messageId, status);\r\n        if (!status) {\r\n            setFailedMessageDataHash(_messageId, _data);\r\n            setFailedMessageReceiver(_messageId, _executor);\r\n            setFailedMessageSender(_messageId, _sender);\r\n        }\r\n        emitEventOnMessageProcessed(_sender, _executor, _messageId, status);\r\n    }\r\n\r\n    /**\r\n    * @dev Makes a call to the message executor.\r\n    * @param _sender sender address on the other side.\r\n    * @param _contract address of an executor contract.\r\n    * @param _data calldata for a call to executor.\r\n    * @param _gas gas limit for a call to executor.\r\n    * @param _messageId id of the processed message.\r\n    * @param _sourceChainId source chain id is of the received message.\r\n    */\r\n    function _passMessage(\r\n        address _sender,\r\n        address _contract,\r\n        bytes _data,\r\n        uint256 _gas,\r\n        bytes32 _messageId,\r\n        uint256 _sourceChainId\r\n    ) internal returns (bool) {\r\n        setMessageSender(_sender);\r\n        setMessageId(_messageId);\r\n        setMessageSourceChainId(_sourceChainId);\r\n\r\n        // After EIP-150, max gas cost allowed to be passed to the internal call is equal to the 63/64 of total gas left.\r\n        // In reality, min(gasLimit, 63/64 * gasleft()) will be used as the call gas limit.\r\n        // Imagine a situation, when message requires 10000000 gas to be executed successfully.\r\n        // Also suppose, that at this point, gasleft() is equal to 10158000, so the callee will receive ~ 10158000 * 63 / 64 = 9999300 gas.\r\n        // That amount of gas is not enough, so the call will fail. At the same time,\r\n        // even if the callee failed the bridge contract still has ~ 158000 gas to\r\n        // finish its execution and it will be enough. The internal call fails but\r\n        // only because the oracle provides incorrect gas limit for the transaction\r\n        // This check is needed here in order to force contract to pass exactly the requested amount of gas.\r\n        // Avoiding it may lead to the unwanted message failure in some extreme cases.\r\n        require((gasleft() * 63) / 64 > _gas);\r\n\r\n        bool status = _contract.call.gas(_gas)(_data);\r\n        setMessageSender(address(0));\r\n        setMessageId(bytes32(0));\r\n        setMessageSourceChainId(0);\r\n        return status;\r\n    }\r\n\r\n    /* solcov ignore next */\r\n    function emitEventOnMessageProcessed(address sender, address executor, bytes32 messageId, bool status) internal;\r\n}\r\n\r\n// File: contracts/upgradeable_contracts/arbitrary_message/MessageDelivery.sol\r\n\r\npragma solidity 0.4.24;\r\n\r\n\r\n\r\n\r\n\r\n\r\ncontract MessageDelivery is BasicAMB, MessageProcessor {\r\n    using SafeMath for uint256;\r\n\r\n    uint256 internal constant SEND_TO_ORACLE_DRIVEN_LANE = 0x00;\r\n\r\n    /**\r\n    * @dev Requests message relay to the opposite network\r\n    * @param _contract executor address on the other side\r\n    * @param _data calldata passed to the executor on the other side\r\n    * @param _gas gas limit used on the other network for executing a message\r\n    */\r\n    function requireToPassMessage(address _contract, bytes _data, uint256 _gas) public returns (bytes32) {\r\n        return _sendMessage(_contract, _data, _gas, SEND_TO_ORACLE_DRIVEN_LANE);\r\n    }\r\n\r\n    /**\r\n    * @dev Initiates sending of an AMB message to the opposite network\r\n    * @param _contract executor address on the other side\r\n    * @param _data calldata passed to the executor on the other side\r\n    * @param _gas gas limit used on the other network for executing a message\r\n    * @param _dataType AMB message dataType to be included as a part of the header\r\n    */\r\n    function _sendMessage(address _contract, bytes _data, uint256 _gas, uint256 _dataType) public returns (bytes32) {\r\n        // it is not allowed to pass messages while other messages are processed\r\n        // if other is not explicitly configured\r\n        require(messageId() == bytes32(0) || allowReentrantRequests());\r\n        require(_gas >= getMinimumGasUsage(_data) && _gas <= maxGasPerTx());\r\n\r\n        bytes32 _messageId;\r\n        bytes memory header = _packHeader(_contract, _gas, _dataType);\r\n        _setNonce(_nonce() + 1);\r\n\r\n        assembly {\r\n            _messageId := mload(add(header, 32))\r\n        }\r\n\r\n        bytes memory eventData = abi.encodePacked(header, _data);\r\n\r\n        emitEventOnMessageRequest(_messageId, eventData);\r\n        return _messageId;\r\n    }\r\n\r\n    /**\r\n    * @dev Returns a lower limit on gas limit for the particular message data\r\n    * @param _data calldata passed to the executor on the other side\r\n    */\r\n    function getMinimumGasUsage(bytes _data) public pure returns (uint256 gas) {\r\n        // From Ethereum Yellow Paper\r\n        // 68 gas is paid for every non-zero byte of data or code for a transaction\r\n        // Starting from Istanbul hardfork, 16 gas is paid (EIP-2028)\r\n        return _data.length.mul(16);\r\n    }\r\n\r\n    /**\r\n    * @dev Packs message header into a single bytes blob\r\n    * @param _contract executor address on the other side\r\n    * @param _gas gas limit used on the other network for executing a message\r\n    * @param _dataType AMB message dataType to be included as a part of the header\r\n    */\r\n    function _packHeader(address _contract, uint256 _gas, uint256 _dataType)\r\n        internal\r\n        view\r\n        returns (bytes memory header)\r\n    {\r\n        uint256 srcChainId = sourceChainId();\r\n        uint256 srcChainIdLength = _sourceChainIdLength();\r\n        uint256 dstChainId = destinationChainId();\r\n        uint256 dstChainIdLength = _destinationChainIdLength();\r\n\r\n        bytes32 mVer = MESSAGE_PACKING_VERSION;\r\n        uint256 nonce = _nonce();\r\n\r\n        // Bridge id is recalculated every time again and again, since it is still cheaper than using SLOAD opcode (800 gas)\r\n        bytes32 bridgeId = keccak256(abi.encodePacked(srcChainId, address(this))) &\r\n            0x00000000ffffffffffffffffffffffffffffffffffffffff0000000000000000;\r\n        // 79 = 4 + 20 + 8 + 20 + 20 + 4 + 1 + 1 + 1\r\n        header = new bytes(79 + srcChainIdLength + dstChainIdLength);\r\n\r\n        // In order to save the gas, the header is packed in the reverse order.\r\n        // With such approach, it is possible to store right-aligned values without any additional bit shifts.\r\n        assembly {\r\n            let ptr := add(header, mload(header)) // points to the last word of header\r\n            mstore(ptr, dstChainId)\r\n            mstore(sub(ptr, dstChainIdLength), srcChainId)\r\n\r\n            mstore(add(header, 79), _dataType)\r\n            mstore(add(header, 78), dstChainIdLength)\r\n            mstore(add(header, 77), srcChainIdLength)\r\n            mstore(add(header, 76), _gas)\r\n            mstore(add(header, 72), _contract)\r\n            mstore(add(header, 52), caller)\r\n\r\n            mstore(add(header, 32), or(mVer, or(bridgeId, nonce)))\r\n        }\r\n    }\r\n\r\n    /* solcov ignore next */\r\n    function emitEventOnMessageRequest(bytes32 messageId, bytes encodedData) internal;\r\n}\r\n\r\n// File: contracts/upgradeable_contracts/MessageRelay.sol\r\n\r\npragma solidity 0.4.24;\r\n\r\n\r\ncontract MessageRelay is EternalStorage {\r\n    function relayedMessages(bytes32 _txHash) public view returns (bool) {\r\n        return boolStorage[keccak256(abi.encodePacked(\"relayedMessages\", _txHash))];\r\n    }\r\n\r\n    function setRelayedMessages(bytes32 _txHash, bool _status) internal {\r\n        boolStorage[keccak256(abi.encodePacked(\"relayedMessages\", _txHash))] = _status;\r\n    }\r\n}\r\n\r\n// File: contracts/upgradeable_contracts/arbitrary_message/BasicForeignAMB.sol\r\n\r\npragma solidity 0.4.24;\r\n\r\n\r\n\r\n\r\n\r\n\r\ncontract BasicForeignAMB is BasicAMB, MessageRelay, MessageDelivery {\r\n    /**\r\n    * @dev Validates provided signatures and relays a given message\r\n    * @param _data bytes to be relayed\r\n    * @param _signatures bytes blob with signatures to be validated\r\n    */\r\n    function executeSignatures(bytes _data, bytes _signatures) external {\r\n        Message.hasEnoughValidSignatures(_data, _signatures, validatorContract(), true);\r\n\r\n        bytes32 messageId;\r\n        address sender;\r\n        address executor;\r\n        uint32 gasLimit;\r\n        uint8 dataType;\r\n        uint256[2] memory chainIds;\r\n        bytes memory data;\r\n\r\n        (messageId, sender, executor, gasLimit, dataType, chainIds, data) = ArbitraryMessage.unpackData(_data);\r\n\r\n        require(_isMessageVersionValid(messageId));\r\n        require(_isDestinationChainIdValid(chainIds[1]));\r\n        require(!relayedMessages(messageId));\r\n        setRelayedMessages(messageId, true);\r\n        processMessage(sender, executor, messageId, gasLimit, dataType, chainIds[0], data);\r\n    }\r\n\r\n    /**\r\n    * @dev Internal function for updating fallback gas price value.\r\n    * @param _gasPrice new value for the gas price, zero gas price is not allowed.\r\n    */\r\n    function _setGasPrice(uint256 _gasPrice) internal {\r\n        require(_gasPrice > 0);\r\n        super._setGasPrice(_gasPrice);\r\n    }\r\n}\r\n\r\n// File: contracts/upgradeable_contracts/arbitrary_message/ForeignAMB.sol\r\n\r\npragma solidity 0.4.24;\r\n\r\n\r\ncontract ForeignAMB is BasicForeignAMB {\r\n    event UserRequestForAffirmation(bytes32 indexed messageId, bytes encodedData);\r\n    event RelayedMessage(address indexed sender, address indexed executor, bytes32 indexed messageId, bool status);\r\n\r\n    function emitEventOnMessageRequest(bytes32 messageId, bytes encodedData) internal {\r\n        emit UserRequestForAffirmation(messageId, encodedData);\r\n    }\r\n\r\n    function emitEventOnMessageProcessed(address sender, address executor, bytes32 messageId, bool status) internal {\r\n        emit RelayedMessage(sender, executor, messageId, status);\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"transactionHash\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"sourceChainId\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_contract\",\"type\":\"address\"},{\"name\":\"_data\",\"type\":\"bytes\"},{\"name\":\"_gas\",\"type\":\"uint256\"},{\"name\":\"_dataType\",\"type\":\"uint256\"}],\"name\":\"_sendMessage\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_txHash\",\"type\":\"bytes32\"}],\"name\":\"relayedMessages\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_sourceChainId\",\"type\":\"uint256\"},{\"name\":\"_destinationChainId\",\"type\":\"uint256\"},{\"name\":\"_validatorContract\",\"type\":\"address\"},{\"name\":\"_maxGasPerTx\",\"type\":\"uint256\"},{\"name\":\"_gasPrice\",\"type\":\"uint256\"},{\"name\":\"_requiredBlockConfirmations\",\"type\":\"uint256\"},{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isInitialized\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"requiredBlockConfirmations\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_data\",\"type\":\"bytes\"},{\"name\":\"_signatures\",\"type\":\"bytes\"}],\"name\":\"executeSignatures\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"getMinimumGasUsage\",\"outputs\":[{\"name\":\"gas\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_messageId\",\"type\":\"bytes32\"}],\"name\":\"failedMessageReceiver\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getBridgeMode\",\"outputs\":[{\"name\":\"_data\",\"type\":\"bytes4\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_sourceChainId\",\"type\":\"uint256\"},{\"name\":\"_destinationChainId\",\"type\":\"uint256\"}],\"name\":\"setChainIds\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_messageId\",\"type\":\"bytes32\"}],\"name\":\"failedMessageSender\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"allowReentrantRequests\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"messageId\",\"outputs\":[{\"name\":\"id\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_maxGasPerTx\",\"type\":\"uint256\"}],\"name\":\"setMaxGasPerTx\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"requiredSignatures\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"validatorContract\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"deployedAtBlock\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getBridgeInterfacesVersion\",\"outputs\":[{\"name\":\"major\",\"type\":\"uint64\"},{\"name\":\"minor\",\"type\":\"uint64\"},{\"name\":\"patch\",\"type\":\"uint64\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"messageSourceChainId\",\"outputs\":[{\"name\":\"id\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_blockConfirmations\",\"type\":\"uint256\"}],\"name\":\"setRequiredBlockConfirmations\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"destinationChainId\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_gasPrice\",\"type\":\"uint256\"}],\"name\":\"setGasPrice\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_enable\",\"type\":\"bool\"}],\"name\":\"setAllowReentrantRequests\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_messageId\",\"type\":\"bytes32\"}],\"name\":\"messageCallStatus\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"messageSender\",\"outputs\":[{\"name\":\"sender\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimalShift\",\"outputs\":[{\"name\":\"\",\"type\":\"int256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_contract\",\"type\":\"address\"},{\"name\":\"_data\",\"type\":\"bytes\"},{\"name\":\"_gas\",\"type\":\"uint256\"}],\"name\":\"requireToPassMessage\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_messageId\",\"type\":\"bytes32\"}],\"name\":\"failedMessageDataHash\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"maxGasPerTx\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"gasPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"messageId\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"encodedData\",\"type\":\"bytes\"}],\"name\":\"UserRequestForAffirmation\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"executor\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"messageId\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"status\",\"type\":\"bool\"}],\"name\":\"RelayedMessage\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"gasPrice\",\"type\":\"uint256\"}],\"name\":\"GasPriceChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"requiredBlockConfirmations\",\"type\":\"uint256\"}],\"name\":\"RequiredBlockConfirmationChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"ForeignAMB","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"GNU LGPLv3","Proxy":"0","Implementation":"","SwarmSource":"bzzr://37c7c008c93a98c015bd3cc5bff23f9655cd5e7c27fcc139ab4ac70660b3f7a2"}]}