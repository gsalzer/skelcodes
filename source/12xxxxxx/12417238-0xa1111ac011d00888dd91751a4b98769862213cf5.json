{"status":"1","message":"OK","result":[{"SourceCode":"/**\r\n *Submitted for verification at Etherscan.io on 2021-05-12\r\n*/\r\n\r\n// SPDX-License-Identifier: NLPL AND GPL-3.0-or-later\r\npragma solidity >=0.6.0 >=0.6.12 <0.7.0;\r\n\r\n////// lib/hd-drop/lib/erc721/src/erc721.sol\r\n/// erc721.sol -- API for the ERC721 token standard\r\n\r\n// See <https://github.com/ethereum/EIPs/issues/721>.\r\n\r\n// This file likely does not meet the threshold of originality\r\n// required for copyright to apply.  As a result, this is free and\r\n// unencumbered software belonging to the public domain.\r\n\r\n/* pragma solidity >=0.6.0; */\r\n\r\ninterface ERC721Metadata {\r\n    function name() external view returns (string memory);\r\n    function symbol() external view returns (string memory);\r\n    function tokenURI(uint256 nft) external view returns (string memory);\r\n}\r\n\r\ninterface ERC721Enumerable {\r\n    function totalSupply() external view returns (uint256);\r\n    function tokenByIndex(uint256 idx) external view returns (uint256);\r\n    function tokenOfOwnerByIndex(address guy, uint256 idx) external view returns (uint256);\r\n}\r\n\r\ninterface ERC721Events {\r\n    event Transfer(address indexed src, address indexed dst, uint256 nft);\r\n    event Approval(address indexed src, address indexed guy, uint256 nft);\r\n    event ApprovalForAll(address indexed guy, address indexed op, bool ok);\r\n}\r\n\r\ninterface ERC721TokenReceiver {\r\n    function onERC721Received(address op, address src, uint256 nft, bytes calldata what) external returns(bytes4);\r\n}\r\n\r\ninterface ERC165 {\r\n    function supportsInterface(bytes4 interfaceID) external view returns (bool);\r\n}\r\n\r\ninterface ERC721 is ERC165, ERC721Events, ERC721TokenReceiver {\r\n    function balanceOf(address guy) external view returns (uint256);\r\n    function ownerOf(uint256 nft) external view returns (address);\r\n    function safeTransferFrom(address src, address dst, uint256 nft, bytes calldata what) external payable;\r\n    function safeTransferFrom(address src, address dst, uint256 nft) external payable;\r\n    function transferFrom(address src, address dst, uint256 nft) external payable;\r\n    function approve(address guy, uint256 nft) external payable;\r\n    function setApprovalForAll(address op, bool ok) external;\r\n    function getApproved(uint256 nft) external returns (address);\r\n    function isApprovedForAll(address guy, address op) external view returns (bool);\r\n}\r\n\r\n////// lib/hd-drop/src/IEIP2981Royalties.sol\r\n\r\n/* pragma solidity >=0.6.0; */\r\n\r\ninterface IEIP2981Royalties {\r\n    event ReceivedRoyalties(\r\n        address indexed _royaltyRecipient,\r\n        address indexed _buyer,\r\n        uint256 indexed _tokenId,\r\n        address _tokenPaid,\r\n        uint256 _amount\r\n    );\r\n\r\n    function royaltyInfo(\r\n        uint256 nft\r\n    ) external returns (address gal, uint256 fee);\r\n    function receivedRoyalties(\r\n        address gal, address buyer, uint256 nft, address gem, uint256 fee\r\n    ) external;\r\n}\r\n\r\n////// lib/hd-drop/src/IOpenSeaContractLevelMetadata.sol\r\n\r\n/* pragma solidity >=0.6.0; */\r\n\r\ninterface IOpenSeaContractLevelMetadata {\r\n    function contractURI() external view returns (string memory);\r\n}\r\n\r\n\r\n////// lib/hd-drop/src/IRaribleRoyaltiesV1.sol\r\n\r\n/* pragma solidity >=0.6.0; */\r\n\r\ninterface IRaribleRoyaltiesV1 {\r\n    event SecondarySaleFees(uint256 tokenId, address[] recipients, uint[] bps);\r\n\r\n    function getFeeRecipients(\r\n        uint256 nft\r\n    ) external view returns (address payable[] memory);\r\n    function getFeeBps(uint256 nft) external view returns (uint[] memory);\r\n}\r\n\r\n////// lib/hd-drop/src/drop.sol\r\n\r\n/// drop.sol -- ERC721 implementation with royalties and proof-of-work\r\n\r\n// Copyright (C) 2020 Hashdrop\r\n\r\n// This program is free software: you can redistribute it and/or modify\r\n// it under the terms of the GNU General Public License as published by\r\n// the Free Software Foundation, either version 3 of the License, or\r\n// (at your option) any later version.\r\n\r\n// This program is distributed in the hope that it will be useful,\r\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n// GNU General Public License for more details.\r\n\r\n// You should have received a copy of the GNU General Public License\r\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\r\n\r\n/* pragma solidity ^0.6.12; */\r\n\r\n/* import \"erc721/erc721.sol\"; */\r\n/* import \"./IEIP2981Royalties.sol\"; */\r\n/* import \"./IOpenSeaContractLevelMetadata.sol\"; */\r\n/* import \"./IRaribleRoyaltiesV1.sol\"; */\r\n\r\ncontract HDDrop is\r\n    ERC721,\r\n    ERC721Enumerable,\r\n    ERC721Metadata,\r\n    IEIP2981Royalties,\r\n    IOpenSeaContractLevelMetadata,\r\n    IRaribleRoyaltiesV1\r\n    {\r\n\r\n    uint8                            public   hard;\r\n\r\n    bool                             public   stopped;\r\n    mapping (address => uint)        public   wards;\r\n\r\n    uint256                          private  _ids;\r\n\r\n    string                           internal _name;\r\n    string                           internal _symbol;\r\n    string                           internal _uri;\r\n\r\n    mapping (uint256 => string)      internal _uris;\r\n\r\n    mapping (bytes4 => bool)         internal _interfaces;\r\n\r\n    uint256[]                        internal _allDrops;\r\n    mapping (address => uint256[])   internal _usrDrops;\r\n    mapping (uint256 => Drop)        internal _drops;\r\n    mapping (address => mapping (address => bool)) internal _operators;\r\n\r\n    struct Drop {\r\n        uint256      pos;     // position in _allDrops\r\n        uint256     upos;     // position in _usrDrops\r\n        address      guy;     // creator\r\n        address approved;     // appoved usr\r\n        uint256    nonce;     // nonce to prove work\r\n        address      gal;     // fee recipient\r\n        uint256      fee;     // fee 0 or [100_000, 10_000_000]\r\n    }\r\n\r\n    // events\r\n    event Stop();\r\n    event Start();\r\n    event Rely(address indexed guy);\r\n    event Deny(address indexed guy);\r\n\r\n    // safe math\r\n    function sub(uint x, uint y) internal pure returns (uint z) {\r\n        require((z = x - y) <= x);\r\n    }\r\n    function mul(uint x, uint y) internal pure returns (uint z) {\r\n        require(y == 0 || (z = x * y) / y == x);\r\n    }\r\n\r\n    constructor(\r\n        string memory name,\r\n        string memory symbol,\r\n        uint8 _hard,\r\n        string memory uri\r\n    ) public {\r\n        _name = name;\r\n        _symbol = symbol;\r\n        hard = _hard;\r\n        _uri = uri;\r\n\r\n        _addInterface(0x80ac58cd); // ERC721\r\n        _addInterface(0x5b5e139f); // ERC721Metadata\r\n        _addInterface(0x780e9d63); // ERC721Enumerable\r\n        _addInterface(0x4b7f2c2d); // IERC2981Royalties\r\n        _addInterface(0xe8a3d485); // IOpenSeaContractLevelMetadata\r\n        _addInterface(0xb7799584); // IRaribleRoyaltiesV1\r\n\r\n        wards[msg.sender] = 1;\r\n        emit Rely(msg.sender);\r\n    }\r\n\r\n    modifier nod(uint256 nft) {\r\n        require(\r\n            _drops[nft].guy == msg.sender ||\r\n            _drops[nft].approved == msg.sender ||\r\n            _operators[_drops[nft].guy][msg.sender],\r\n            \"hd-drop-insufficient-approval\"\r\n        );\r\n        _;\r\n    }\r\n\r\n    modifier stoppable {\r\n        require(!stopped, \"hd-drop-is-stopped\");\r\n        _;\r\n    }\r\n\r\n    modifier auth {\r\n        require(wards[msg.sender] == 1, \"hd-drop-not-authorized\");\r\n        _;\r\n    }\r\n\r\n    function name() external override view returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    function symbol() external override view returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    function tokenURI(\r\n        uint256 nft\r\n    ) external override view returns (string memory) {\r\n        return _uris[nft];\r\n    }\r\n\r\n    function totalSupply() external override view returns (uint256) {\r\n        return _allDrops.length;\r\n    }\r\n\r\n    function tokenByIndex(\r\n        uint256 idx\r\n    ) external override view returns (uint256) {\r\n        return _allDrops[idx];\r\n    }\r\n\r\n    function tokenOfOwnerByIndex(\r\n        address guy, uint256 idx\r\n    ) external override view returns (uint256) {\r\n        require(idx < balanceOf(guy), \"hd-drop-index-out-of-bounds\");\r\n        return _usrDrops[guy][idx];\r\n    }\r\n\r\n    function onERC721Received(\r\n        address, address, uint256, bytes calldata\r\n    ) external override returns(bytes4) {\r\n        revert(\"hd-drop-does-not-accept-tokens\");\r\n    }\r\n\r\n    function _isContract(address addr) private view returns (bool) {\r\n        bytes32 codehash;\r\n        // EIP-1052\r\n        bytes32 accountHash =\r\n            0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\r\n        assembly { codehash := extcodehash(addr) }\r\n        return (codehash != accountHash && codehash != 0x0);\r\n    }\r\n\r\n    function supportsInterface(\r\n        bytes4 interfaceID\r\n    ) external override view returns (bool) {\r\n        return _interfaces[interfaceID];\r\n    }\r\n\r\n    function _addInterface(bytes4 interfaceID) private {\r\n        _interfaces[interfaceID] = true;\r\n    }\r\n\r\n    function balanceOf(address guy) public override view returns (uint256) {\r\n        require(guy != address(0), \"hd-drop-invalid-address\");\r\n        return _usrDrops[guy].length;\r\n    }\r\n\r\n    function ownerOf(uint256 nft) external override view returns (address) {\r\n        require(_drops[nft].guy != address(0), \"hd-drop-invalid-nft\");\r\n        return _drops[nft].guy;\r\n    }\r\n\r\n    function safeTransferFrom(\r\n        address src, address dst, uint256 nft, bytes calldata what\r\n    ) external override payable {\r\n        _safeTransfer(src, dst, nft, what);\r\n    }\r\n\r\n    function safeTransferFrom(\r\n        address src, address dst, uint256 nft\r\n    ) public override payable {\r\n        _safeTransfer(src, dst, nft, \"\");\r\n    }\r\n\r\n    function push(address dst, uint256 nft) external {\r\n        safeTransferFrom(msg.sender, dst, nft);\r\n    }\r\n\r\n    function pull(address src, uint256 nft) external {\r\n        safeTransferFrom(src, msg.sender, nft);\r\n    }\r\n\r\n    function move(address src, address dst, uint256 nft) external {\r\n        safeTransferFrom(src, dst, nft);\r\n    }\r\n\r\n    function _safeTransfer(\r\n        address src, address dst, uint256 nft, bytes memory data\r\n    ) internal {\r\n        transferFrom(src, dst, nft);\r\n        if (_isContract(dst)) {\r\n            bytes4 res = ERC721TokenReceiver(dst).onERC721Received(\r\n                msg.sender, src, nft, data\r\n            );\r\n            require(\r\n                res == this.onERC721Received.selector,\r\n                \"hd-drop-invalid-token-receiver\"\r\n            );\r\n        }\r\n    }\r\n\r\n    function transferFrom(\r\n        address src, address dst, uint256 nft\r\n    ) public override payable stoppable nod(nft) {\r\n        require(src == _drops[nft].guy, \"hd-drop-src-not-valid\");\r\n        require(\r\n            dst != address(0) && dst != address(this),\r\n            \"hd-drop-unsafe-destination\"\r\n        );\r\n        require(_drops[nft].guy != address(0), \"hd-drop-invalid-nft\");\r\n        _upop(nft);\r\n        _upush(dst, nft);\r\n        _approve(address(0), nft);\r\n        emit Transfer(src, dst, nft);\r\n    }\r\n\r\n    function mint(\r\n        address guy, string memory uri, uint256 nonce, address gal, uint256 fee\r\n    ) public auth stoppable returns (uint256 nft) {\r\n        return _mint(guy, uri, nonce, address(gal), fee);\r\n    }\r\n\r\n    function _mint(\r\n        address guy, string memory uri, uint256 nonce, address gal, uint256 fee\r\n    ) internal returns (uint256 nft) {\r\n        require(guy != address(0), \"hd-drop-invalid-address\");\r\n        require(fee <= 10_000_000, \"hd-drop-invalid-fee\");\r\n\r\n        nft = _ids++;\r\n        require(work(nft, nonce, hard), \"hd-drop-failed-work\");\r\n        hard = hard + 1;\r\n\r\n        gal = (gal != address(0)) ? gal : guy;\r\n\r\n        _allDrops.push(nft);\r\n        _drops[nft] = Drop(\r\n            _allDrops[_allDrops.length - 1],\r\n            _usrDrops[guy].length - 1,\r\n            guy,\r\n            address(0),\r\n            nonce,\r\n            gal,\r\n            fee\r\n        );\r\n        _upush(guy, nft);\r\n        _uris[nft] = uri;\r\n\r\n        if (fee > 0) {\r\n            address[] memory recipients = new address[](1);\r\n            uint[] memory bps = new uint[](1);\r\n            recipients[0] = gal;\r\n            bps[0] = fee / 1_000;\r\n            emit SecondarySaleFees(nft, recipients, bps);\r\n        }\r\n\r\n        emit Transfer(address(0), guy, nft);\r\n    }\r\n\r\n    function burn(uint256 nft) public auth stoppable {\r\n        _burn(nft);\r\n    }\r\n\r\n    function _burn(uint256 nft) internal {\r\n        address guy = _drops[nft].guy;\r\n        require(guy != address(0), \"hd-drop-invalid-nft\");\r\n\r\n        uint256 _idx        = _drops[nft].pos;\r\n        uint256 _mov        = _allDrops[_allDrops.length - 1];\r\n        _allDrops[_idx]     = _mov;\r\n        _drops[_mov].pos    = _idx;\r\n        _allDrops.pop();    // Remove from All drop array\r\n        _upop(nft);         // Remove from User drop array\r\n\r\n        delete _drops[nft]; // Remove from drop mapping\r\n\r\n        emit Transfer(guy, address(0), nft);\r\n    }\r\n\r\n    function _upush(address guy, uint256 nft) internal {\r\n        _drops[nft].upos           = _usrDrops[guy].length;\r\n        _usrDrops[guy].push(nft);\r\n        _drops[nft].guy            = guy;\r\n    }\r\n\r\n    function _upop(uint256 nft) internal {\r\n        uint256[] storage _udds    = _usrDrops[_drops[nft].guy];\r\n        uint256           _uidx    = _drops[nft].upos;\r\n        uint256           _move    = _udds[_udds.length - 1];\r\n        _udds[_uidx]               = _move;\r\n        _drops[_move].upos         = _uidx;\r\n        _udds.pop();\r\n        _usrDrops[_drops[nft].guy] = _udds;\r\n    }\r\n\r\n    function approve(\r\n        address guy, uint256 nft\r\n    ) external override payable stoppable nod(nft) {\r\n        _approve(guy, nft);\r\n    }\r\n\r\n    function _approve(address guy, uint256 nft) internal {\r\n        _drops[nft].approved = guy;\r\n        emit Approval(msg.sender, guy, nft);\r\n    }\r\n\r\n    function setApprovalForAll(\r\n        address op, bool ok\r\n    ) external override stoppable {\r\n        _operators[msg.sender][op] = ok;\r\n        emit ApprovalForAll(msg.sender, op, ok);\r\n    }\r\n\r\n    function getApproved(uint256 nft) external override returns (address) {\r\n        require(_drops[nft].guy != address(0), \"hd-drop-invalid-nft\");\r\n        return _drops[nft].approved;\r\n    }\r\n\r\n    function isApprovedForAll(\r\n        address guy, address op\r\n    ) external override view returns (bool) {\r\n        return _operators[guy][op];\r\n    }\r\n\r\n    function _lshift(\r\n        bytes32 bits, uint256 shift\r\n    ) internal pure returns (bytes32) {\r\n        return bytes32(mul(uint256(bits), 2 ** shift));\r\n    }\r\n\r\n    function _firstn(\r\n        bytes32 bits, uint256 num\r\n    ) internal pure returns (bytes32) {\r\n        bytes32 ones = bytes32(sub(2 ** num, 1));\r\n        bytes32 mask = _lshift(ones, sub(256, num));\r\n        return bits & mask;\r\n    } \r\n\r\n    // validates a proof-of-work for a given NFT, with a supplied nonce\r\n    // at a given difficulty level\r\n    function work(\r\n        uint256 id, uint256 nonce, uint8 difficulty\r\n    ) public view returns (bool) {\r\n        bytes32 candidate = _firstn(\r\n            keccak256(abi.encodePacked(address(this), id, nonce)),\r\n            difficulty\r\n        );\r\n        bytes32 target = _firstn(\r\n            bytes32(uint256(address(this)) << 96),\r\n            difficulty\r\n        );\r\n        return (candidate == target);\r\n    }\r\n\r\n    function stop() external auth {\r\n        stopped = true;\r\n        emit Stop();\r\n    }\r\n\r\n    function start() external auth {\r\n        stopped = false;\r\n        emit Start();\r\n    }\r\n\r\n    function rely(address guy) external auth {\r\n        wards[guy] = 1;\r\n        emit Rely(guy);\r\n    }\r\n\r\n    function deny(address guy) external auth {\r\n        wards[guy] = 0;\r\n        emit Deny(guy);\r\n    }\r\n\r\n    function setTokenUri(uint256 nft, string memory uri) public auth stoppable {\r\n        _uris[nft] = uri;\r\n    }\r\n\r\n    function royaltyInfo(\r\n        uint256 nft\r\n    ) public override returns (address receiver, uint256 amount) {\r\n        return (_drops[nft].gal, _drops[nft].fee);\r\n    }\r\n\r\n    function receivedRoyalties(\r\n        address gal, address buyer, uint256 nft, address gem, uint256 fee\r\n    ) public override {\r\n        emit ReceivedRoyalties(gal, buyer, nft, gem, fee);\r\n    }\r\n\r\n    function getFeeRecipients(\r\n        uint256 nft\r\n    ) external view override returns (address payable[] memory) {\r\n        address payable[] memory result = new address payable[](1);\r\n        result[0] = payable(_drops[nft].gal);\r\n        return result;\r\n    }\r\n\r\n    function getFeeBps(\r\n        uint256 nft\r\n    ) external view override returns (uint[] memory) {\r\n        uint[] memory result = new uint[](1);\r\n        result[0] = _drops[nft].fee / 1_000;\r\n        return result;\r\n    }\r\n\r\n    function contractURI() public view override returns (string memory) {\r\n        return _uri;\r\n    }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"internalType\":\"uint8\",\"name\":\"_hard\",\"type\":\"uint8\"},{\"internalType\":\"string\",\"name\":\"uri\",\"type\":\"string\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"src\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"guy\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"nft\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"guy\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"op\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"ok\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"guy\",\"type\":\"address\"}],\"name\":\"Deny\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_royaltyRecipient\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_buyer\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_tokenPaid\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"ReceivedRoyalties\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"guy\",\"type\":\"address\"}],\"name\":\"Rely\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"recipients\",\"type\":\"address[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"bps\",\"type\":\"uint256[]\"}],\"name\":\"SecondarySaleFees\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Start\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Stop\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"src\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"dst\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"nft\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"guy\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"nft\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"guy\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"nft\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"contractURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"guy\",\"type\":\"address\"}],\"name\":\"deny\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"nft\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"nft\",\"type\":\"uint256\"}],\"name\":\"getFeeBps\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"nft\",\"type\":\"uint256\"}],\"name\":\"getFeeRecipients\",\"outputs\":[{\"internalType\":\"address payable[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"hard\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"guy\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"op\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"guy\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"uri\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"gal\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"nft\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"src\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"dst\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"nft\",\"type\":\"uint256\"}],\"name\":\"move\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC721Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"nft\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"src\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"nft\",\"type\":\"uint256\"}],\"name\":\"pull\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"dst\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"nft\",\"type\":\"uint256\"}],\"name\":\"push\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"gal\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"nft\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"gem\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"}],\"name\":\"receivedRoyalties\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"guy\",\"type\":\"address\"}],\"name\":\"rely\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"nft\",\"type\":\"uint256\"}],\"name\":\"royaltyInfo\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"src\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"dst\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"nft\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"src\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"dst\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"nft\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"what\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"op\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"ok\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"nft\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"uri\",\"type\":\"string\"}],\"name\":\"setTokenUri\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"start\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stop\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stopped\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceID\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"idx\",\"type\":\"uint256\"}],\"name\":\"tokenByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"guy\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"idx\",\"type\":\"uint256\"}],\"name\":\"tokenOfOwnerByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"nft\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"src\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"dst\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"nft\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"wards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"difficulty\",\"type\":\"uint8\"}],\"name\":\"work\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"HDDrop","CompilerVersion":"v0.6.12+commit.27d51765","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000c000000000000000000000000000000000000000000000000000000000000000180000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000a54756c6970203136333700000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000454554c50000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000035697066733a2f2f516d545331363544636f33417659705a395572635546644b51614c365059786134774563673836544e69676d7a530000000000000000000000","EVMVersion":"Default","Library":"","LicenseType":"Unknown","Proxy":"0","Implementation":"","SwarmSource":"ipfs://635bb182dcecae8f66fdaf0d70407b99edb11cb4b7c145803e052f9ed9aff3dd"}]}