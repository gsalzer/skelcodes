{"status":"1","message":"OK","result":[{"SourceCode":"// SPDX-License-Identifier: MIT\r\npragma solidity 0.8.6;\r\n\r\nlibrary Math {\r\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a > b ? a : b;\r\n    }\r\n}\r\n\r\ninterface erc20 {\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n    function balanceOf(address) external view returns (uint);\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n}\r\n\r\ninterface ve {\r\n    function balanceOf(address, uint) external view returns (uint);\r\n    function totalSupply() external view returns (uint);\r\n}\r\n\r\ncontract distribution {\r\n    address constant _ibff = 0xb347132eFf18a3f63426f4988ef626d2CbE274F5;\r\n    address constant _veibff = 0x4D0518C9136025903751209dDDdf6C67067357b1;\r\n    \r\n    uint constant PRECISION = 10 ** 18;\r\n    uint constant WEEK = 86400 * 7;\r\n    \r\n    uint _active_period;\r\n    uint _reward_per;\r\n    \r\n    mapping(address => uint) _last_claim;\r\n    \r\n    uint public totalSupply;\r\n    \r\n    function _update_period() internal returns (uint) {\r\n        uint _period = _active_period;\r\n        if (block.timestamp >= _period + WEEK) {\r\n            _period = block.timestamp / WEEK * WEEK;\r\n            uint _amount = erc20(_ibff).balanceOf(address(this));\r\n            uint _totalSupply = ve(_veibff).totalSupply();\r\n            _reward_per = _amount * PRECISION / _totalSupply;\r\n            totalSupply = _totalSupply;\r\n            _active_period = _period;\r\n        }\r\n        return _period;\r\n    }\r\n    \r\n    function add_reward(uint amount) external returns (bool) {\r\n        _safeTransferFrom(_ibff, amount);\r\n        _update_period();\r\n        return true;\r\n    }\r\n    \r\n    function claimable(address account) external view returns (uint) {\r\n        uint _period = _active_period;\r\n        uint _last = Math.max(_period, _last_claim[account]);\r\n        uint _reward = ve(_veibff).balanceOf(account, _period) * _reward_per / PRECISION;\r\n        return _reward * (block.timestamp - _last) / WEEK;\r\n    }\r\n\r\n    function claim() external returns (uint) {\r\n        uint _period = _update_period();\r\n        uint _last = Math.max(_period, _last_claim[msg.sender]);\r\n        uint _reward = ve(_veibff).balanceOf(msg.sender, _period) * _reward_per / PRECISION;\r\n        uint _accrued = _reward * (block.timestamp - _last) / WEEK;\r\n        if (_accrued > 0) {\r\n            _last_claim[msg.sender] = block.timestamp;\r\n            _safeTransfer(_ibff, msg.sender, _accrued);\r\n        }\r\n        return _accrued;\r\n    }\r\n    \r\n    function _safeTransfer(\r\n        address token,\r\n        address to,\r\n        uint256 value\r\n    ) internal {\r\n        (bool success, bytes memory data) =\r\n            token.call(abi.encodeWithSelector(erc20.transfer.selector, to, value));\r\n        require(success && (data.length == 0 || abi.decode(data, (bool))));\r\n    }\r\n    \r\n    function _safeTransferFrom(address token, uint256 value) internal {\r\n        (bool success, bytes memory data) =\r\n            token.call(abi.encodeWithSelector(erc20.transferFrom.selector, msg.sender, address(this), value));\r\n        require(success && (data.length == 0 || abi.decode(data, (bool))));\r\n    }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"add_reward\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claim\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"claimable\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"distribution","CompilerVersion":"v0.8.6+commit.11564f7e","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"GNU LGPLv3","Proxy":"0","Implementation":"","SwarmSource":"ipfs://e2341884043ce050b85426cc0e2465ac5ce00ee64c84158042bffbee7cb8a0b9"}]}