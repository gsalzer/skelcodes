{"status":"1","message":"OK","result":[{"SourceCode":"// File: contracts/utils/Ownable.sol\r\n\r\npragma solidity >=0.4.21 <0.6.0;\r\n\r\ncontract Ownable {\r\n    address private _contract_owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor () internal {\r\n        address msgSender = msg.sender;\r\n        _contract_owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view returns (address) {\r\n        return _contract_owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(_contract_owner == msg.sender, \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     */\r\n    function _transferOwnership(address newOwner) internal {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_contract_owner, newOwner);\r\n        _contract_owner = newOwner;\r\n    }\r\n}\r\n\r\n// File: contracts/utils/SafeMath.sol\r\n\r\npragma solidity >=0.4.21 <0.6.0;\r\n\r\nlibrary SafeMath {\r\n    function safeAdd(uint a, uint b) public pure returns (uint c) {\r\n        c = a + b;\r\n        require(c >= a, \"add\");\r\n    }\r\n    function safeSub(uint a, uint b) public pure returns (uint c) {\r\n        require(b <= a, \"sub\");\r\n        c = a - b;\r\n    }\r\n    function safeMul(uint a, uint b) public pure returns (uint c) {\r\n        c = a * b;\r\n        require(a == 0 || c / a == b, \"mul\");\r\n    }\r\n    function safeDiv(uint a, uint b) public pure returns (uint c) {\r\n        require(b > 0, \"div\");\r\n        c = a / b;\r\n    }\r\n}\r\n\r\n// File: contracts/utils/Address.sol\r\n\r\npragma solidity >=0.4.21 <0.6.0;\r\n\r\nlibrary Address {\r\n    function isContract(address account) internal view returns (bool) {\r\n        bytes32 codehash;\r\n        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly { codehash := extcodehash(account) }\r\n        return (codehash != 0x0 && codehash != accountHash);\r\n    }\r\n    function toPayable(address account) internal pure returns (address payable) {\r\n        return address(uint160(account));\r\n    }\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        // solhint-disable-next-line avoid-call-value\r\n        (bool success, ) = recipient.call.value(amount)(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n}\r\n\r\n// File: contracts/erc20/IERC20.sol\r\n\r\npragma solidity >=0.4.21 <0.6.0;\r\n\r\ninterface IERC20 {\r\n    function totalSupply() external view returns (uint256);\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n// File: contracts/erc20/SafeERC20.sol\r\n\r\npragma solidity >=0.4.21 <0.6.0;\r\n\r\n\r\n\r\n\r\nlibrary SafeERC20 {\r\n    using SafeMath for uint256;\r\n    using Address for address;\r\n\r\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\r\n    }\r\n\r\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\r\n    }\r\n\r\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\r\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\r\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\r\n        );\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\r\n    }\r\n\r\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).safeAdd(value);\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).safeSub(value);\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n    function callOptionalReturn(IERC20 token, bytes memory data) private {\r\n        require(address(token).isContract(), \"SafeERC20: call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = address(token).call(data);\r\n        require(success, \"SafeERC20: low-level call failed\");\r\n\r\n        if (returndata.length > 0) { // Return data is optional\r\n            // solhint-disable-next-line max-line-length\r\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\r\n        }\r\n    }\r\n}\r\n\r\n// File: contracts/utils/AddressArray.sol\r\n\r\npragma solidity >=0.4.21 <0.6.0;\r\n\r\nlibrary AddressArray{\r\n  function exists(address[] memory self, address addr) public pure returns(bool){\r\n    for (uint i = 0; i< self.length;i++){\r\n      if (self[i]==addr){\r\n        return true;\r\n      }\r\n    }\r\n    return false;\r\n  }\r\n\r\n  function index_of(address[] memory self, address addr) public pure returns(uint){\r\n    for (uint i = 0; i< self.length;i++){\r\n      if (self[i]==addr){\r\n        return i;\r\n      }\r\n    }\r\n    require(false, \"AddressArray:index_of, not exist\");\r\n  }\r\n\r\n  function remove(address[] storage self, address addr) public returns(bool){\r\n    uint index = index_of(self, addr);\r\n    self[index] = self[self.length - 1];\r\n\r\n    delete self[self.length-1];\r\n    self.length--;\r\n    return true;\r\n  }\r\n}\r\n\r\n// File: contracts/erc20/ERC20Impl.sol\r\n\r\npragma solidity >=0.4.21 <0.6.0;\r\n\r\n\r\ncontract ApproveAndCallFallBack {\r\n    function receiveApproval(\r\n        address from,\r\n        uint256 _amount,\r\n        address _token,\r\n        bytes memory _data\r\n    ) public;\r\n}\r\ncontract TransferEventCallBack{\r\n  function onTransfer(address _from, address _to, uint256 _amount) public;\r\n}\r\n\r\ncontract ERC20Base {\r\n    string public name;                //The Token's name: e.g. GTToken\r\n    uint8 public decimals;             //Number of decimals of the smallest unit\r\n    string public symbol;              //An identifier: e.g. REP\r\n    string public version = \"GTT_0.1\"; //An arbitrary versioning scheme\r\n\r\n    using AddressArray for address[];\r\n    address[] public transferListeners;\r\n\r\n////////////////\r\n// Events\r\n////////////////\r\n    event Transfer(address indexed _from, address indexed _to, uint256 _amount);\r\n    event Approval(\r\n        address indexed _owner,\r\n        address indexed _spender,\r\n        uint256 _amount\r\n        );\r\n\r\n    event NewTransferListener(address _addr);\r\n    event RemoveTransferListener(address _addr);\r\n\r\n    /// @dev `Checkpoint` is the structure that attaches a block number to a\r\n    ///  given value, the block number attached is the one that last changed the\r\n    ///  value\r\n    struct Checkpoint {\r\n        // `fromBlock` is the block number that the value was generated from\r\n        uint128 fromBlock;\r\n        // `value` is the amount of tokens at a specific block number\r\n        uint128 value;\r\n    }\r\n\r\n    // `parentToken` is the Token address that was cloned to produce this token;\r\n    //  it will be 0x0 for a token that was not cloned\r\n    ERC20Base public parentToken;\r\n\r\n    // `parentSnapShotBlock` is the block number from the Parent Token that was\r\n    //  used to determine the initial distribution of the Clone Token\r\n    uint public parentSnapShotBlock;\r\n\r\n    // `creationBlock` is the block number that the Clone Token was created\r\n    uint public creationBlock;\r\n\r\n    // `balances` is the map that tracks the balance of each address, in this\r\n    //  contract when the balance changes the block number that the change\r\n    //  occurred is also included in the map\r\n    mapping (address => Checkpoint[]) balances;\r\n\r\n    // `allowed` tracks any extra transfer rights as in all ERC20 tokens\r\n    mapping (address => mapping (address => uint256)) allowed;\r\n\r\n    // Tracks the history of the `totalSupply` of the token\r\n    Checkpoint[] totalSupplyHistory;\r\n\r\n    // Flag that determines if the token is transferable or not.\r\n    bool public transfersEnabled;\r\n\r\n////////////////\r\n// Constructor\r\n////////////////\r\n\r\n    /// @notice Constructor to create a ERC20Base\r\n    /// @param _parentToken Address of the parent token, set to 0x0 if it is a\r\n    ///  new token\r\n    /// @param _parentSnapShotBlock Block of the parent token that will\r\n    ///  determine the initial distribution of the clone token, set to 0 if it\r\n    ///  is a new token\r\n    /// @param _tokenName Name of the new token\r\n    /// @param _decimalUnits Number of decimals of the new token\r\n    /// @param _tokenSymbol Token Symbol for the new token\r\n    /// @param _transfersEnabled If true, tokens will be able to be transferred\r\n    constructor(\r\n        ERC20Base _parentToken,\r\n        uint _parentSnapShotBlock,\r\n        string memory _tokenName,\r\n        uint8 _decimalUnits,\r\n        string memory _tokenSymbol,\r\n        bool _transfersEnabled\r\n    )  public\r\n    {\r\n        name = _tokenName;                                 // Set the name\r\n        decimals = _decimalUnits;                          // Set the decimals\r\n        symbol = _tokenSymbol;                             // Set the symbol\r\n        parentToken = _parentToken;\r\n        parentSnapShotBlock = _parentSnapShotBlock;\r\n        transfersEnabled = _transfersEnabled;\r\n        creationBlock = block.number;\r\n    }\r\n\r\n\r\n///////////////////\r\n// ERC20 Methods\r\n///////////////////\r\n\r\n    /// @notice Send `_amount` tokens to `_to` from `msg.sender`\r\n    /// @param _to The address of the recipient\r\n    /// @param _amount The amount of tokens to be transferred\r\n    /// @return Whether the transfer was successful or not\r\n    function transfer(address _to, uint256 _amount) public returns (bool success) {\r\n        require(transfersEnabled);\r\n        return doTransfer(msg.sender, _to, _amount);\r\n    }\r\n\r\n    /// @notice Send `_amount` tokens to `_to` from `_from` on the condition it\r\n    ///  is approved by `_from`\r\n    /// @param _from The address holding the tokens being transferred\r\n    /// @param _to The address of the recipient\r\n    /// @param _amount The amount of tokens to be transferred\r\n    /// @return True if the transfer was successful\r\n    function transferFrom(address _from, address _to, uint256 _amount) public returns (bool success) {\r\n        require(transfersEnabled);\r\n\r\n        // The standard ERC 20 transferFrom functionality\r\n        if (allowed[_from][msg.sender] < _amount)\r\n            return false;\r\n        allowed[_from][msg.sender] -= _amount;\r\n        return doTransfer(_from, _to, _amount);\r\n    }\r\n\r\n    /// @dev This is the actual transfer function in the token contract, it can\r\n    ///  only be called by other functions in this contract.\r\n    /// @param _from The address holding the tokens being transferred\r\n    /// @param _to The address of the recipient\r\n    /// @param _amount The amount of tokens to be transferred\r\n    /// @return True if the transfer was successful\r\n    function doTransfer(address _from, address _to, uint _amount) internal returns(bool) {\r\n        if (_amount == 0) {\r\n            return true;\r\n        }\r\n        require(parentSnapShotBlock < block.number);\r\n        // Do not allow transfer to 0x0 or the token contract itself\r\n        require((_to != address(0)) && (_to != address(this)));\r\n        // If the amount being transfered is more than the balance of the\r\n        //  account the transfer returns false\r\n        uint256 previousBalanceFrom = balanceOfAt(_from, block.number);\r\n        if (previousBalanceFrom < _amount) {\r\n            return false;\r\n        }\r\n        // First update the balance array with the new value for the address\r\n        //  sending the tokens\r\n        updateValueAtNow(balances[_from], previousBalanceFrom - _amount);\r\n        // Then update the balance array with the new value for the address\r\n        //  receiving the tokens\r\n        uint256 previousBalanceTo = balanceOfAt(_to, block.number);\r\n        require(previousBalanceTo + _amount >= previousBalanceTo); // Check for overflow\r\n        updateValueAtNow(balances[_to], previousBalanceTo + _amount);\r\n        // An event to make the transfer easy to find on the blockchain\r\n        emit Transfer(_from, _to, _amount);\r\n        return true;\r\n    }\r\n\r\n    /// @param _owner The address that's balance is being requested\r\n    /// @return The balance of `_owner` at the current block\r\n    function balanceOf(address _owner) public view returns (uint256 balance) {\r\n        return balanceOfAt(_owner, block.number);\r\n    }\r\n\r\n    /// @notice `msg.sender` approves `_spender` to spend `_amount` tokens on\r\n    ///  its behalf. This is a modified version of the ERC20 approve function\r\n    ///  to be a little bit safer\r\n    /// @param _spender The address of the account able to transfer the tokens\r\n    /// @param _amount The amount of tokens to be approved for transfer\r\n    /// @return True if the approval was successful\r\n    function approve(address _spender, uint256 _amount) public returns (bool success) {\r\n        require(transfersEnabled);\r\n\r\n        // To change the approve amount you first have to reduce the addresses`\r\n        //  allowance to zero by calling `approve(_spender,0)` if it is not\r\n        //  already 0 to mitigate the race condition described here:\r\n        //  https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n        require((_amount == 0) || (allowed[msg.sender][_spender] == 0));\r\n\r\n        allowed[msg.sender][_spender] = _amount;\r\n        emit Approval(msg.sender, _spender, _amount);\r\n        return true;\r\n    }\r\n\r\n    /// @dev This function makes it easy to read the `allowed[]` map\r\n    /// @param _owner The address of the account that owns the token\r\n    /// @param _spender The address of the account able to transfer the tokens\r\n    /// @return Amount of remaining tokens of _owner that _spender is allowed\r\n    ///  to spend\r\n    function allowance(address _owner, address _spender) public view returns (uint256 remaining) {\r\n        return allowed[_owner][_spender];\r\n    }\r\n\r\n    /// @notice `msg.sender` approves `_spender` to send `_amount` tokens on\r\n    ///  its behalf, and then a function is triggered in the contract that is\r\n    ///  being approved, `_spender`. This allows users to use their tokens to\r\n    ///  interact with contracts in one function call instead of two\r\n    /// @param _spender The address of the contract able to transfer the tokens\r\n    /// @param _amount The amount of tokens to be approved for transfer\r\n    /// @return True if the function call was successful\r\n    function approveAndCall(ApproveAndCallFallBack _spender, uint256 _amount, bytes memory _extraData) public returns (bool success) {\r\n        require(approve(address(_spender), _amount));\r\n\r\n        _spender.receiveApproval(\r\n            msg.sender,\r\n            _amount,\r\n            address(this),\r\n            _extraData\r\n        );\r\n\r\n        return true;\r\n    }\r\n\r\n    /// @dev This function makes it easy to get the total number of tokens\r\n    /// @return The total number of tokens\r\n    function totalSupply() public view returns (uint) {\r\n        return totalSupplyAt(block.number);\r\n    }\r\n\r\n\r\n////////////////\r\n// Query balance and totalSupply in History\r\n////////////////\r\n\r\n    /// @dev Queries the balance of `_owner` at a specific `_blockNumber`\r\n    /// @param _owner The address from which the balance will be retrieved\r\n    /// @param _blockNumber The block number when the balance is queried\r\n    /// @return The balance at `_blockNumber`\r\n    function balanceOfAt(address _owner, uint _blockNumber) public view returns (uint) {\r\n\r\n        // These next few lines are used when the balance of the token is\r\n        //  requested before a check point was ever created for this token, it\r\n        //  requires that the `parentToken.balanceOfAt` be queried at the\r\n        //  genesis block for that token as this contains initial balance of\r\n        //  this token\r\n        if ((balances[_owner].length == 0) || (balances[_owner][0].fromBlock > _blockNumber)) {\r\n            if (address(parentToken) != address(0)) {\r\n                return parentToken.balanceOfAt(_owner, min(_blockNumber, parentSnapShotBlock));\r\n            } else {\r\n                // Has no parent\r\n                return 0;\r\n            }\r\n\r\n        // This will return the expected balance during normal situations\r\n        } else {\r\n            return getValueAt(balances[_owner], _blockNumber);\r\n        }\r\n    }\r\n\r\n    /// @notice Total amount of tokens at a specific `_blockNumber`.\r\n    /// @param _blockNumber The block number when the totalSupply is queried\r\n    /// @return The total amount of tokens at `_blockNumber`\r\n    function totalSupplyAt(uint _blockNumber) public view returns(uint) {\r\n\r\n        // These next few lines are used when the totalSupply of the token is\r\n        //  requested before a check point was ever created for this token, it\r\n        //  requires that the `parentToken.totalSupplyAt` be queried at the\r\n        //  genesis block for this token as that contains totalSupply of this\r\n        //  token at this block number.\r\n        if ((totalSupplyHistory.length == 0) || (totalSupplyHistory[0].fromBlock > _blockNumber)) {\r\n            if (address(parentToken) != address(0)) {\r\n                return parentToken.totalSupplyAt(min(_blockNumber, parentSnapShotBlock));\r\n            } else {\r\n                return 0;\r\n            }\r\n\r\n        // This will return the expected totalSupply during normal situations\r\n        } else {\r\n            return getValueAt(totalSupplyHistory, _blockNumber);\r\n        }\r\n    }\r\n\r\n////////////////\r\n// Generate and destroy tokens\r\n////////////////\r\n\r\n    /// @notice Generates `_amount` tokens that are assigned to `_owner`\r\n    /// @param _owner The address that will be assigned the new tokens\r\n    /// @param _amount The quantity of tokens generated\r\n    /// @return True if the tokens are generated correctly\r\n    function _generateTokens(address _owner, uint _amount) internal returns (bool) {\r\n        uint curTotalSupply = totalSupply();\r\n        require(curTotalSupply + _amount >= curTotalSupply); // Check for overflow\r\n        uint previousBalanceTo = balanceOf(_owner);\r\n        require(previousBalanceTo + _amount >= previousBalanceTo); // Check for overflow\r\n        updateValueAtNow(totalSupplyHistory, curTotalSupply + _amount);\r\n        updateValueAtNow(balances[_owner], previousBalanceTo + _amount);\r\n        emit Transfer(address(0), _owner, _amount);\r\n        return true;\r\n    }\r\n\r\n\r\n    /// @notice Burns `_amount` tokens from `_owner`\r\n    /// @param _owner The address that will lose the tokens\r\n    /// @param _amount The quantity of tokens to burn\r\n    /// @return True if the tokens are burned correctly\r\n    function _destroyTokens(address _owner, uint _amount) internal returns (bool) {\r\n        uint curTotalSupply = totalSupply();\r\n        require(curTotalSupply >= _amount);\r\n        uint previousBalanceFrom = balanceOf(_owner);\r\n        require(previousBalanceFrom >= _amount);\r\n        updateValueAtNow(totalSupplyHistory, curTotalSupply - _amount);\r\n        updateValueAtNow(balances[_owner], previousBalanceFrom - _amount);\r\n        emit Transfer(_owner, address(0), _amount);\r\n        return true;\r\n    }\r\n\r\n////////////////\r\n// Enable tokens transfers\r\n////////////////\r\n\r\n\r\n    /// @notice Enables token holders to transfer their tokens freely if true\r\n    /// @param _transfersEnabled True if transfers are allowed in the clone\r\n    function _enableTransfers(bool _transfersEnabled) internal {\r\n        transfersEnabled = _transfersEnabled;\r\n    }\r\n\r\n////////////////\r\n// Internal helper functions to query and set a value in a snapshot array\r\n////////////////\r\n\r\n    /// @dev `getValueAt` retrieves the number of tokens at a given block number\r\n    /// @param checkpoints The history of values being queried\r\n    /// @param _block The block number to retrieve the value at\r\n    /// @return The number of tokens being queried\r\n    function getValueAt(Checkpoint[] storage checkpoints, uint _block) internal view returns (uint) {\r\n        if (checkpoints.length == 0)\r\n            return 0;\r\n\r\n        // Shortcut for the actual value\r\n        if (_block >= checkpoints[checkpoints.length-1].fromBlock)\r\n            return checkpoints[checkpoints.length-1].value;\r\n        if (_block < checkpoints[0].fromBlock)\r\n            return 0;\r\n\r\n        // Binary search of the value in the array\r\n        uint min = 0;\r\n        uint max = checkpoints.length-1;\r\n        while (max > min) {\r\n            uint mid = (max + min + 1) / 2;\r\n            if (checkpoints[mid].fromBlock<=_block) {\r\n                min = mid;\r\n            } else {\r\n                max = mid-1;\r\n            }\r\n        }\r\n        return checkpoints[min].value;\r\n    }\r\n\r\n    /// @dev `updateValueAtNow` used to update the `balances` map and the\r\n    ///  `totalSupplyHistory`\r\n    /// @param checkpoints The history of data being updated\r\n    /// @param _value The new number of tokens\r\n    function updateValueAtNow(Checkpoint[] storage checkpoints, uint _value) internal {\r\n        if ((checkpoints.length == 0) || (checkpoints[checkpoints.length - 1].fromBlock < block.number)) {\r\n            Checkpoint storage newCheckPoint = checkpoints[checkpoints.length++];\r\n            newCheckPoint.fromBlock = uint128(block.number);\r\n            newCheckPoint.value = uint128(_value);\r\n        } else {\r\n            Checkpoint storage oldCheckPoint = checkpoints[checkpoints.length - 1];\r\n            oldCheckPoint.value = uint128(_value);\r\n        }\r\n    }\r\n\r\n    function onTransferDone(address _from, address _to, uint256 _amount) internal {\r\n      for(uint i = 0; i < transferListeners.length; i++){\r\n        TransferEventCallBack t = TransferEventCallBack(transferListeners[i]);\r\n        t.onTransfer(_from, _to, _amount);\r\n      }\r\n    }\r\n\r\n    function _addTransferListener(address _addr) internal {\r\n      transferListeners.push(_addr);\r\n      emit NewTransferListener(_addr);\r\n    }\r\n    function _removeTransferListener(address _addr) internal{\r\n      transferListeners.remove(_addr);\r\n      emit RemoveTransferListener(_addr);\r\n    }\r\n\r\n    /// @dev Helper function to return a min betwen the two uints\r\n    function min(uint a, uint b) pure internal returns (uint) {\r\n        return a < b ? a : b;\r\n    }\r\n\r\n    //function () external payable {\r\n        //require(false, \"cannot transfer ether to this contract\");\r\n    //}\r\n}\r\n\r\n// File: contracts/ystream/IYieldStream.sol\r\n\r\npragma solidity >=0.4.21 <0.6.0;\r\n\r\ncontract IYieldStream{\r\n\r\n  string public name;\r\n\r\n  function target_token() public view returns(address);\r\n\r\n  function getVirtualPrice() public view returns(uint256);\r\n\r\n  function getDecimal() public pure returns(uint256);\r\n\r\n  function getPriceDecimal() public pure returns(uint256);\r\n}\r\n\r\n// File: contracts/core/HEnv.sol\r\n\r\npragma solidity >=0.4.21 <0.6.0;\r\n\r\n\r\ncontract HEnv is Ownable{\r\n\r\n  address public token_addr;\r\n\r\n  address public fee_pool_addr;\r\n\r\n  uint256 public ratio_base;\r\n  uint256 public bid_fee_ratio;\r\n  uint256 public withdraw_fee_ratio;\r\n  uint256 public cancel_fee_ratio;\r\n\r\n  constructor(address _target_token) public{\r\n    token_addr = _target_token;\r\n    ratio_base = 100000000;\r\n  }\r\n\r\n  function changeFeePoolAddr(address _new) public onlyOwner{\r\n    fee_pool_addr = _new;\r\n  }\r\n\r\n  function changeBidFeeRatio(uint256 _ratio) public onlyOwner{\r\n    bid_fee_ratio = _ratio;\r\n  }\r\n\r\n  function changeWithdrawFeeRatio(uint256 _ratio) public onlyOwner{\r\n    withdraw_fee_ratio = _ratio;\r\n  }\r\n\r\n  function changeCancelFeeRatio(uint256 _ratio) public onlyOwner{\r\n    cancel_fee_ratio = _ratio;\r\n  }\r\n}\r\n\r\n\r\ncontract HEnvFactory{\r\n  event NewHEnv(address addr);\r\n  function createHEnv(address _target_token) public returns (address){\r\n    HEnv env = new HEnv(_target_token);\r\n    env.transferOwnership(msg.sender);\r\n    emit NewHEnv(address(env));\r\n    return address(env);\r\n  }\r\n}\r\n\r\n// File: contracts/core/HPeriod.sol\r\n\r\npragma solidity >=0.4.21 <0.6.0;\r\n\r\n\r\ncontract HPeriod{\r\n  using SafeMath for uint;\r\n\r\n  uint256 period_start_block;\r\n  uint256 period_block_num;\r\n  uint256 period_gap_block;\r\n\r\n  struct period_info{\r\n    uint256 period;\r\n    uint256 start_block;\r\n    uint256 end_block;    // [start_block, end_block)\r\n  }\r\n\r\n  mapping (uint256 => period_info) all_periods;\r\n  uint256 current_period;\r\n\r\n  bool is_gapping;\r\n\r\n  constructor(uint256 _start_block, uint256 _period_block_num, uint256 _gap_block_num) public{\r\n    period_start_block = _start_block;\r\n    period_block_num = _period_block_num;\r\n\r\n    period_gap_block = _gap_block_num;\r\n    current_period = 0;\r\n    is_gapping = true;\r\n  }\r\n\r\n  function _end_current_and_start_new_period() internal returns(bool){\r\n    require(block.number >= period_start_block, \"1st period not start yet\");\r\n\r\n    if(is_gapping){\r\n      if(current_period == 0 || block.number.safeSub(all_periods[current_period].end_block) >= period_gap_block){\r\n        current_period = current_period + 1;\r\n        all_periods[current_period].period = current_period;\r\n        all_periods[current_period].start_block = block.number;\r\n        is_gapping = false;\r\n        return true;\r\n      }\r\n    }else{\r\n      if(block.number.safeSub(all_periods[current_period].start_block) >= period_block_num){\r\n        all_periods[current_period].end_block = block.number;\r\n        is_gapping = true;\r\n      }\r\n    }\r\n    return false;\r\n  }\r\n\r\n\r\n  event HPeriodChanged(uint256 old, uint256 new_period);\r\n  function _change_period(uint256 _period) internal{\r\n    uint256 old = period_block_num;\r\n    period_block_num = _period;\r\n    emit HPeriodChanged(old, period_block_num);\r\n  }\r\n\r\n  function getCurrentPeriodStartBlock() public view returns(uint256){\r\n    (, uint256 s, ) = getPeriodInfo(current_period);\r\n    return s;\r\n  }\r\n\r\n  function getPeriodInfo(uint256 period) public view returns(uint256 p, uint256 s, uint256 e){\r\n    p = all_periods[period].period;\r\n    s = all_periods[period].start_block;\r\n    e = all_periods[period].end_block;\r\n  }\r\n\r\n  function getParamPeriodStartBlock() public view returns(uint256){\r\n    return period_start_block;\r\n  }\r\n\r\n  function getParamPeriodBlockNum() public view returns(uint256){\r\n    return period_block_num;\r\n  }\r\n\r\n  function getParamPeriodGapNum() public view returns(uint256){\r\n    return period_gap_block;\r\n  }\r\n\r\n  function getCurrentPeriod() public view returns(uint256){\r\n    return current_period;\r\n  }\r\n\r\n  function isPeriodEnd(uint256 _period) public view returns(bool){\r\n    return all_periods[_period].end_block != 0;\r\n  }\r\n\r\n  function isPeriodStart(uint256 _period) public view returns(bool){\r\n    return all_periods[_period].start_block != 0;\r\n  }\r\n\r\n}\r\n\r\n// File: contracts/core/HPeriodToken.sol\r\n\r\npragma solidity >=0.4.21 <0.6.0;\r\n\r\n\r\n\r\n\r\n\r\ncontract HTokenFactoryInterface{\r\n  function createFixedRatioToken(address _token_addr, uint256 _period, uint256 _ratio, string memory _postfix) public returns(address);\r\n  function createFloatingToken(address _token_addr, uint256 _period, string memory _postfix) public returns(address);\r\n}\r\n\r\ncontract HTokenInterface{\r\n  function mint(address addr, uint256 amount)public;\r\n  function burnFrom(address addr, uint256 amount) public;\r\n  uint256 public period_number;\r\n  uint256 public ratio; // 0 is for floating\r\n  uint256 public underlying_balance;\r\n  function setUnderlyingBalance(uint256 _balance) public;\r\n  function setTargetToken(address _target) public;\r\n}\r\n\r\ncontract HPeriodToken is HPeriod, Ownable{\r\n\r\n  struct period_token_info{\r\n    address[] period_tokens;\r\n\r\n    mapping(bytes32 => address) hash_to_tokens;\r\n  }\r\n\r\n  mapping (uint256 => period_token_info) all_period_tokens;\r\n\r\n  HTokenFactoryInterface public token_factory;\r\n  address public target_token;\r\n\r\n\r\n  constructor(address _target_token, uint256 _start_block, uint256 _period, uint256 _gap, address _factory)\r\n    HPeriod(_start_block, _period, _gap) public{\r\n    target_token = _target_token;\r\n    token_factory = HTokenFactoryInterface(_factory);\r\n  }\r\n\r\n  function uint2str(uint256 i) internal pure returns (string memory c) {\r\n    if (i == 0) return \"0\";\r\n    uint256 j = i;\r\n    uint256 length;\r\n    while (j != 0){\r\n        length++;\r\n        j /= 10;\r\n    }\r\n    bytes memory bstr = new bytes(length);\r\n    uint256 k = length - 1;\r\n    while (i != 0){\r\n      bstr[k--] = byte(48 + uint8(i % 10));\r\n      i /= 10;\r\n    }\r\n    c = string(bstr);\r\n  }\r\n\r\n  function getOrCreateToken(uint ratio) public onlyOwner returns(address, bool){\r\n\r\n    _end_current_and_start_new_period();\r\n\r\n    uint256 p = getCurrentPeriod();\r\n    bytes32 h = keccak256(abi.encodePacked(target_token, getParamPeriodBlockNum(), ratio, p + 1));\r\n    address c = address(0x0);\r\n\r\n    period_token_info storage pi = all_period_tokens[p + 1];\r\n\r\n    bool s  = false;\r\n    if(pi.hash_to_tokens[h] == address(0x0)){\r\n      if(ratio == 0){\r\n        c = token_factory.createFloatingToken(target_token, p + 1, uint2str(getParamPeriodBlockNum()));\r\n      }\r\n      else{\r\n        c = token_factory.createFixedRatioToken(target_token, p + 1, ratio, uint2str(getParamPeriodBlockNum()));\r\n      }\r\n      HTokenInterface(c).setTargetToken(target_token);\r\n      Ownable ow = Ownable(c);\r\n      ow.transferOwnership(owner());\r\n      pi.period_tokens.push(c);\r\n      pi.hash_to_tokens[h] = c;\r\n      s = true;\r\n    }\r\n    c = pi.hash_to_tokens[h];\r\n\r\n    return(c, s);\r\n  }\r\n\r\n  function updatePeriodStatus() public onlyOwner returns(bool){\r\n    return _end_current_and_start_new_period();\r\n  }\r\n\r\n  function isPeriodTokenValid(address _token_addr) public view returns(bool){\r\n    HTokenInterface hti = HTokenInterface(_token_addr);\r\n    bytes32 h = keccak256(abi.encodePacked(target_token, getParamPeriodBlockNum(), hti.ratio(), hti.period_number()));\r\n    period_token_info storage pi = all_period_tokens[hti.period_number()];\r\n    if(pi.hash_to_tokens[h] == _token_addr){\r\n      return true;\r\n    }\r\n    return false;\r\n  }\r\n\r\n  function totalAtPeriodWithRatio(uint256 _period, uint256 _ratio) public view returns(uint256) {\r\n    bytes32 h = keccak256(abi.encodePacked(target_token, getParamPeriodBlockNum(), _ratio, _period));\r\n    period_token_info storage pi = all_period_tokens[_period];\r\n    address c = pi.hash_to_tokens[h];\r\n    if(c == address(0x0)) return 0;\r\n\r\n    IERC20 e = IERC20(c);\r\n    return e.totalSupply();\r\n  }\r\n\r\n  function htokenAtPeriodWithRatio(uint256 _period, uint256 _ratio) public view returns(address){\r\n    bytes32 h = keccak256(abi.encodePacked(target_token, getParamPeriodBlockNum(), _ratio, _period));\r\n    period_token_info storage pi = all_period_tokens[_period];\r\n    address c = pi.hash_to_tokens[h];\r\n    return c;\r\n  }\r\n}\r\n\r\ncontract HPeriodTokenFactory{\r\n\r\n  event NewPeriodToken(address addr);\r\n  function createPeriodToken(address _target_token, uint256 _start_block, uint256 _period, uint256 _gap, address _token_factory) public returns(address){\r\n    HPeriodToken pt = new HPeriodToken(_target_token, _start_block, _period, _gap, _token_factory);\r\n\r\n    pt.transferOwnership(msg.sender);\r\n    emit NewPeriodToken(address(pt));\r\n    return address(pt);\r\n  }\r\n\r\n}\r\n\r\n// File: contracts/core/HGateKeeper.sol\r\n\r\npragma solidity >=0.4.21 <0.6.0;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\ncontract HDispatcherInterface{\r\n  function getYieldStream(address _token_addr) public view returns (IYieldStream);\r\n}\r\ncontract TokenBankInterface{\r\n  function issue(address payable _to, uint _amount) public returns(bool success);\r\n}\r\n\r\ncontract ClaimHandlerInterface{\r\n  function handle_create_contract(address from, address lop_token_addr) public;\r\n  function handle_claim(address from, address lp_token_addr, uint256 amount) public;\r\n}\r\n\r\ncontract HGateKeeper is Ownable{\r\n  using SafeERC20 for IERC20;\r\n  using SafeMath for uint256;\r\n\r\n  HDispatcherInterface public dispatcher;\r\n  address public target_token;\r\n  HEnv public env;\r\n\r\n  HPeriodToken public period_token;\r\n  ClaimHandlerInterface public claim_handler;\r\n  address public yield_interest_pool;\r\n\r\n  uint256 public settled_period;\r\n  uint256 public max_amount;\r\n  struct period_price_info{\r\n    uint256 start_price;\r\n    uint256 end_price;\r\n  }\r\n\r\n  mapping (uint256 => uint256) public period_token_amount;\r\n  mapping (uint256 => period_price_info) public period_prices;\r\n\r\n\r\n  constructor(address _token_addr, address _env, address _dispatcher, address _period_token) public{\r\n    target_token = _token_addr;\r\n    env = HEnv(_env);\r\n    dispatcher = HDispatcherInterface(_dispatcher);\r\n    period_token = HPeriodToken(_period_token);\r\n    settled_period = 0;\r\n  }\r\n\r\n  event ChangeClaimHandler(address old, address _new);\r\n  function changeClaimHandler(address handler) public onlyOwner{\r\n    address old = address(claim_handler);\r\n    claim_handler = ClaimHandlerInterface(handler);\r\n    emit ChangeClaimHandler(old, handler);\r\n  }\r\n\r\n  event ChangeMaxAmount(uint256 old, uint256 _new);\r\n  function set_max_amount(uint _amount) public onlyOwner{\r\n    uint256 old = max_amount;\r\n    max_amount = _amount;\r\n    emit ChangeMaxAmount(old, max_amount);\r\n  }\r\n\r\n  event HorizonBid(address from, uint256 amount, uint256 ratio, address lp_token_addr);\r\n  function bidRatio(uint256 _amount, uint256 _ratio) public returns(address lp_token_addr){\r\n    require(_ratio == 0 || isSupportRatio(_ratio), \"not support ratio\");\r\n    (address addr, bool created) = period_token.getOrCreateToken(_ratio);\r\n\r\n    if(created){\r\n      if(claim_handler != ClaimHandlerInterface(0x0)){\r\n        claim_handler.handle_create_contract(msg.sender, addr);\r\n      }\r\n    }\r\n\r\n    if(max_amount > 0){\r\n      require(_amount <= max_amount, \"too large amount\");\r\n      require(_amount.safeAdd(IERC20(addr).balanceOf(msg.sender)) <= max_amount, \"please use another wallet\");\r\n    }\r\n\r\n\r\n    _check_period();\r\n\r\n    ///*\r\n    require(IERC20(target_token).allowance(msg.sender, address(this)) >= _amount, \"not enough allowance\");\r\n    uint _before = IERC20(target_token).balanceOf(address(this));\r\n    IERC20(target_token).safeTransferFrom(msg.sender, address(this), _amount);\r\n    uint256 _after = IERC20(target_token).balanceOf(address(this));\r\n    _amount = _after.safeSub(_before); // Additional check for deflationary tokens\r\n\r\n    uint256 decimal = dispatcher.getYieldStream(target_token).getDecimal();\r\n    require(decimal <= 1e18, \"decimal too large\");\r\n    uint256 shares = _amount.safeMul(1e18).safeDiv(decimal);\r\n\r\n    uint256 period = HTokenInterface(addr).period_number();\r\n    period_token_amount[period] = period_token_amount[period].safeAdd(_amount);\r\n\r\n\r\n    HTokenInterface(addr).mint(msg.sender, shares);\r\n\r\n    emit HorizonBid(msg.sender, _amount, _ratio, addr);\r\n    return addr;\r\n    //*/\r\n  }\r\n\r\n  function bidFloating(uint256 _amount) public returns(address lp_token_addr){\r\n    return bidRatio(_amount, 0);\r\n  }\r\n\r\n  event CancelBid(address from, uint256 amount, uint256 fee, address _lp_token_addr);\r\n  function cancelBid(address _lp_token_addr) public{\r\n    bool is_valid = period_token.isPeriodTokenValid(_lp_token_addr);\r\n    require(is_valid, \"invalid lp token address\");\r\n    uint256 amount = IERC20(_lp_token_addr).balanceOf(msg.sender);\r\n    require(amount > 0, \"no bid at this period\");\r\n\r\n    _check_period();\r\n\r\n    uint256 period = HTokenInterface(_lp_token_addr).period_number();\r\n    require(period_token.getCurrentPeriod() < period,\r\n           \"period sealed already\");\r\n\r\n    HTokenInterface(_lp_token_addr).burnFrom(msg.sender, amount);\r\n\r\n    uint256 decimal = dispatcher.getYieldStream(target_token).getDecimal();\r\n\r\n    uint256 target_amount = amount.safeMul(decimal).safeDiv(1e18);\r\n\r\n    period_token_amount[period] = period_token_amount[period].safeSub(target_amount);\r\n    if(env.cancel_fee_ratio() != 0 && env.fee_pool_addr() != address(0x0)){\r\n      uint256 fee = target_amount.safeMul(env.cancel_fee_ratio()).safeDiv(env.ratio_base());\r\n      uint256 recv = target_amount.safeSub(fee);\r\n      IERC20(target_token).safeTransfer(msg.sender, recv);\r\n      IERC20(target_token).safeTransfer(env.fee_pool_addr(), fee);\r\n      emit CancelBid(msg.sender, recv, fee, _lp_token_addr);\r\n    }else{\r\n      IERC20(target_token).safeTransfer(msg.sender, target_amount);\r\n      emit CancelBid(msg.sender, target_amount, 0, _lp_token_addr);\r\n    }\r\n\r\n  }\r\n\r\n  function changeBid(address _lp_token_addr, uint256 _new_amount, uint256 _new_ratio) public{\r\n    cancelBid(_lp_token_addr);\r\n    bidRatio(_new_amount, _new_ratio);\r\n  }\r\n\r\n  event HorizonClaim(address from, address _lp_token_addr, uint256 amount, uint256 fee);\r\n  function claim(address _lp_token_addr, uint256 _amount) public {\r\n    bool is_valid = period_token.isPeriodTokenValid(_lp_token_addr);\r\n    require(is_valid, \"invalid lp token address\");\r\n    uint256 amount = IERC20(_lp_token_addr).balanceOf(msg.sender);\r\n    require(amount >= _amount, \"no enough bid at this period\");\r\n\r\n    _check_period();\r\n    require(period_token.isPeriodEnd(HTokenInterface(_lp_token_addr).period_number()), \"period not end\");\r\n\r\n    uint total = IERC20(_lp_token_addr).totalSupply();\r\n    uint underly = HTokenInterface(_lp_token_addr).underlying_balance();\r\n    HTokenInterface(_lp_token_addr).burnFrom(msg.sender, _amount);\r\n    uint t = _amount.safeMul(underly).safeDiv(total);\r\n    HTokenInterface(_lp_token_addr).setUnderlyingBalance(underly.safeSub(t));\r\n\r\n    if(env.withdraw_fee_ratio() != 0 && env.fee_pool_addr() != address(0x0)){\r\n      uint256 fee = t.safeMul(env.withdraw_fee_ratio()).safeDiv(env.ratio_base());\r\n      uint256 recv = t.safeSub(fee);\r\n      IERC20(target_token).safeTransfer(msg.sender, recv);\r\n      IERC20(target_token).safeTransfer(env.fee_pool_addr(), fee);\r\n      emit HorizonClaim(msg.sender, _lp_token_addr, recv, fee);\r\n    }else{\r\n      IERC20(target_token).safeTransfer(msg.sender, t);\r\n      emit HorizonClaim(msg.sender, _lp_token_addr, t, 0);\r\n    }\r\n\r\n    if(claim_handler != ClaimHandlerInterface(0x0)){\r\n      claim_handler.handle_claim(msg.sender, _lp_token_addr, _amount);\r\n    }\r\n  }\r\n\r\n  function claimAllAndBidForNext(address _lp_token_addr,  uint256 _ratio, uint256 _next_bid_amount) public{\r\n\r\n    uint256 amount = IERC20(_lp_token_addr).balanceOf(msg.sender);\r\n    claim(_lp_token_addr, amount);\r\n\r\n    uint256 new_amount = IERC20(target_token).balanceOf(msg.sender);\r\n    if(new_amount > _next_bid_amount){\r\n      new_amount = _next_bid_amount;\r\n    }\r\n    bidRatio(new_amount, _ratio);\r\n  }\r\n\r\n  function _check_period() internal{\r\n    period_token.updatePeriodStatus();\r\n\r\n    uint256 new_period = period_token.getCurrentPeriod();\r\n    if(period_prices[new_period].start_price == 0){\r\n      period_prices[new_period].start_price = dispatcher.getYieldStream(target_token).getVirtualPrice();\r\n    }\r\n    if(period_token.isPeriodEnd(settled_period + 1)){\r\n      _settle_period(settled_period + 1);\r\n    }\r\n  }\r\n\r\n  mapping (uint256 => bool) public support_ratios;\r\n  uint256[] public sratios;\r\n\r\n  event SupportRatiosChanged(uint256[] rs);\r\n  function resetSupportRatios(uint256[] memory rs) public onlyOwner{\r\n    for(uint i = 0; i < sratios.length; i++){\r\n      delete support_ratios[sratios[i]];\r\n    }\r\n    delete sratios;\r\n    for(uint i = 0; i < rs.length; i++){\r\n      if(i > 0){\r\n        require(rs[i] > rs[i-1], \"should be ascend\");\r\n      }\r\n      sratios.push(rs[i]);\r\n      support_ratios[rs[i]] = true;\r\n    }\r\n    emit SupportRatiosChanged(sratios);\r\n  }\r\n\r\n  function isSupportRatio(uint256 r) public view returns(bool){\r\n    for(uint i = 0; i < sratios.length; i++){\r\n      if(sratios[i] == r){\r\n        return true;\r\n      }\r\n    }\r\n    return false;\r\n  }\r\n\r\n  function updatePeriodStatus() public{\r\n    _check_period();\r\n  }\r\n\r\n  function _settle_period(uint256 _period) internal{\r\n    if(period_prices[_period].end_price== 0){\r\n      period_prices[_period].end_price= dispatcher.getYieldStream(target_token).getVirtualPrice();\r\n    }\r\n\r\n\r\n    uint256 tdecimal = dispatcher.getYieldStream(target_token).getDecimal();\r\n    uint256 left = period_token_amount[_period].safeMul(period_prices[_period].end_price.safeSub(period_prices[_period].start_price));\r\n\r\n    uint256 s = 0;\r\n    address fht = period_token.htokenAtPeriodWithRatio(_period, 0);\r\n\r\n    for(uint256 i = 0; i < sratios.length; i++){\r\n      uint256 t = period_token.totalAtPeriodWithRatio(_period, sratios[i]).safeMul(tdecimal).safeDiv(1e18);\r\n      uint256 nt = t.safeMul(period_prices[_period].start_price).safeMul(sratios[i]).safeDiv(env.ratio_base());\r\n\r\n      address c = period_token.htokenAtPeriodWithRatio(_period, sratios[i]);\r\n      if(c != address(0x0)){\r\n        if(nt > left){\r\n          nt = left;\r\n        }\r\n        left = left.safeSub(nt);\r\n        t = t.safeMul(period_prices[_period].start_price).safeAdd(nt).safeDiv(period_prices[_period].end_price);\r\n        HTokenInterface(c).setUnderlyingBalance(t);\r\n        s = s.safeAdd(t);\r\n      }\r\n    }\r\n\r\n    if(fht != address(0x0)){\r\n      left = period_token_amount[_period].safeSub(s);\r\n      HTokenInterface(fht).setUnderlyingBalance(left);\r\n      s = s.safeAdd(left);\r\n    }\r\n    if(s < period_token_amount[_period]){\r\n      s = period_token_amount[_period].safeSub(s);\r\n      require(yield_interest_pool != address(0x0), \"invalid yield interest pool\");\r\n      IERC20(target_token).safeTransfer(yield_interest_pool, s);\r\n    }\r\n\r\n    settled_period = _period;\r\n  }\r\n\r\n  event ChangeYieldInterestPool(address old, address _new);\r\n  function changeYieldPool(address _pool) onlyOwner public{\r\n    require(_pool != address(0x0), \"invalid pool\");\r\n    address old = yield_interest_pool;\r\n    yield_interest_pool = _pool;\r\n    emit ChangeYieldInterestPool(old, _pool);\r\n  }\r\n\r\n}\r\n\r\ncontract HGateKeeperFactory is Ownable{\r\n  event NewGateKeeper(address addr);\r\n\r\n  function createGateKeeperForPeriod(address _env_addr, address _dispatcher, address _period_token) public returns(address){\r\n    HEnv e = HEnv(_env_addr);\r\n    HGateKeeper gk = new HGateKeeper(e.token_addr(), _env_addr, _dispatcher, _period_token);\r\n    gk.transferOwnership(msg.sender);\r\n    emit NewGateKeeper(address(gk));\r\n    return address(gk);\r\n  }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"period_token\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"handler\",\"type\":\"address\"}],\"name\":\"changeClaimHandler\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"max_amount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"period_token_amount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"updatePeriodStatus\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_lp_token_addr\",\"type\":\"address\"},{\"name\":\"_ratio\",\"type\":\"uint256\"},{\"name\":\"_next_bid_amount\",\"type\":\"uint256\"}],\"name\":\"claimAllAndBidForNext\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"r\",\"type\":\"uint256\"}],\"name\":\"isSupportRatio\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_lp_token_addr\",\"type\":\"address\"}],\"name\":\"cancelBid\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"claim_handler\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"rs\",\"type\":\"uint256[]\"}],\"name\":\"resetSupportRatios\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"set_max_amount\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_lp_token_addr\",\"type\":\"address\"},{\"name\":\"_new_amount\",\"type\":\"uint256\"},{\"name\":\"_new_ratio\",\"type\":\"uint256\"}],\"name\":\"changeBid\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"settled_period\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"env\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"yield_interest_pool\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"sratios\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"bidFloating\",\"outputs\":[{\"name\":\"lp_token_addr\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"support_ratios\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_lp_token_addr\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"claim\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"dispatcher\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_pool\",\"type\":\"address\"}],\"name\":\"changeYieldPool\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"period_prices\",\"outputs\":[{\"name\":\"start_price\",\"type\":\"uint256\"},{\"name\":\"end_price\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_amount\",\"type\":\"uint256\"},{\"name\":\"_ratio\",\"type\":\"uint256\"}],\"name\":\"bidRatio\",\"outputs\":[{\"name\":\"lp_token_addr\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"target_token\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_token_addr\",\"type\":\"address\"},{\"name\":\"_env\",\"type\":\"address\"},{\"name\":\"_dispatcher\",\"type\":\"address\"},{\"name\":\"_period_token\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"old\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_new\",\"type\":\"address\"}],\"name\":\"ChangeClaimHandler\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"old\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_new\",\"type\":\"uint256\"}],\"name\":\"ChangeMaxAmount\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"ratio\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"lp_token_addr\",\"type\":\"address\"}],\"name\":\"HorizonBid\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"fee\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_lp_token_addr\",\"type\":\"address\"}],\"name\":\"CancelBid\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_lp_token_addr\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"fee\",\"type\":\"uint256\"}],\"name\":\"HorizonClaim\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"rs\",\"type\":\"uint256[]\"}],\"name\":\"SupportRatiosChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"old\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_new\",\"type\":\"address\"}],\"name\":\"ChangeYieldInterestPool\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"HGateKeeper","CompilerVersion":"v0.5.10+commit.5a6ea5b1","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"0000000000000000000000005dbcf33d8c2e976c6b560249878e6f1491bca25c0000000000000000000000000d9ba4125d0465b918d89033d8937233181097bb0000000000000000000000004775d2b1a3f582b3153e8b78a5c5337036d35f5400000000000000000000000092a5935d6d741c59aeffc705afa1266441670498","EVMVersion":"Default","Library":"SafeMath:0836e32f1f91db939d58a0763cbd38a28a8688fa","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"bzzr://ed8551ea6de30db057149822b91e105cabce63e705eb93262afa536e87244430"}]}