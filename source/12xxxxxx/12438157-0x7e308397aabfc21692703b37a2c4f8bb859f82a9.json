{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity =0.6.6;\r\n/**\r\n合约1，4种token换Bc\r\n参数:\r\n0x9DaAfE4c2db3Af141BE9E0be5b4f38C89471E02d\r\n\r\n*/\r\n/**\r\n * Math operations with safety checks\r\n */\r\nlibrary SafeMath {\r\n    function add(uint a, uint b) internal pure returns (uint) {\r\n        uint c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n    function sub(uint a, uint b) internal pure returns (uint) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n    function sub(uint a, uint b, string memory errorMessage) internal pure returns (uint) {\r\n        require(b <= a, errorMessage);\r\n        uint c = a - b;\r\n\r\n        return c;\r\n    }\r\n    function mul(uint a, uint b) internal pure returns (uint) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n    function div(uint a, uint b) internal pure returns (uint) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n    function div(uint a, uint b, string memory errorMessage) internal pure returns (uint) {\r\n        // Solidity only automatically asserts when dividing by 0\r\n        require(b > 0, errorMessage);\r\n        uint c = a / b;\r\n\r\n        return c;\r\n    }\r\n}\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n    address public owner;\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n    /**\r\n     * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n     * account.\r\n     */\r\n    constructor() public {\r\n        owner = msg.sender;\r\n    }\r\n\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n\r\n    /**\r\n     * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n     * @param newOwner The address to transfer ownership to.\r\n     */\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        require(newOwner != address(0));\r\n        emit OwnershipTransferred(owner, newOwner);\r\n        owner = newOwner;\r\n    }\r\n}\r\n\r\ninterface Oracle {\r\n    //1usdg可换成的Bc数量\r\n    function usdgToBc() external view returns (uint);\r\n}\r\n\r\ninterface ERC20 {\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n    function transferFrom(address from, address to, uint256 value) external;\r\n    function balanceOf(address who) external view returns (uint256);\r\n    function transfer(address to, uint256 value) external;\r\n}\r\ninterface ERC20_Returns {\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\r\n    function balanceOf(address who) external view returns (uint256);\r\n    function transfer(address to, uint256 value) external returns (bool);\r\n}\r\n\r\ncontract bcMarket is Ownable{\r\n    using SafeMath for uint;\r\n\r\n    ERC20 public bc;\r\n    ERC20 public usdg;\r\n    ERC20 public usdt;\r\n    ERC20_Returns public usdc;\r\n    ERC20_Returns public dai;\r\n    Oracle public oracle;\r\n\r\n    uint  usdgDecimals = 9;\r\n    uint  usdtDecimals = 6;\r\n    uint  usdcDecimals = 6;\r\n    uint  daiDecimals = 18;\r\n\r\n    event SaleToken(address indexed token, address indexed from,uint inValue, uint outValue);\r\n    event GovWithdrawToken(address indexed token, address indexed to, uint256 value);\r\n\r\n    constructor(address _oracle, address _usdg, address _usdt,address _usdc, address _dai,address _bc)public {\r\n        oracle = Oracle(_oracle);\r\n        usdg = ERC20(_usdg);\r\n        usdt = ERC20(_usdt);\r\n        usdc = ERC20_Returns(_usdc);\r\n        dai = ERC20_Returns(_dai);\r\n        bc = ERC20(_bc);\r\n    }\r\n\r\n    function getPrice() public view returns (uint){\r\n        return oracle.usdgToBc();\r\n    }\r\n\r\n    function swapUsdg(uint256 _value) public {\r\n        ERC20 token = usdg;\r\n        uint decimals = usdgDecimals;\r\n        require(_value > 0, \"!value\");\r\n\r\n        uint allowed = token.allowance(msg.sender,address(this));\r\n        uint balanced = token.balanceOf(msg.sender);\r\n        require(allowed >= _value, \"!allowed\");\r\n        require(balanced >= _value, \"!balanced\");\r\n        token.transferFrom( msg.sender,address(this), _value);\r\n\r\n        uint price = getPrice();\r\n        uint amount = _value.mul(price).div(10 ** decimals);\r\n        bc.transfer( msg.sender, amount);\r\n\r\n        SaleToken(address(token),msg.sender,_value, amount);\r\n    }\r\n    function swapUsdt(uint256 _value) public {\r\n        ERC20 token = usdt;\r\n        uint decimals = usdtDecimals;\r\n        require(_value > 0, \"!value\");\r\n\r\n        uint allowed = token.allowance(msg.sender,address(this));\r\n        uint balanced = token.balanceOf(msg.sender);\r\n        require(allowed >= _value, \"!allowed\");\r\n        require(balanced >= _value, \"!balanced\");\r\n        token.transferFrom( msg.sender,address(this), _value);\r\n\r\n        uint price = getPrice();\r\n        uint amount = _value.mul(price).div(10 ** decimals);\r\n        bc.transfer( msg.sender, amount);\r\n\r\n        SaleToken(address(token),msg.sender,_value, amount);\r\n    }\r\n    function swapUsdc(uint256 _value) public {\r\n        ERC20_Returns token = usdc;\r\n        uint decimals = usdcDecimals;\r\n        require(_value > 0, \"!value\");\r\n\r\n        uint allowed = token.allowance(msg.sender,address(this));\r\n        uint balanced = token.balanceOf(msg.sender);\r\n        require(allowed >= _value, \"!allowed\");\r\n        require(balanced >= _value, \"!balanced\");\r\n        token.transferFrom( msg.sender,address(this), _value);\r\n\r\n        uint price = getPrice();\r\n        uint amount = _value.mul(price).div(10 ** decimals);\r\n        bc.transfer( msg.sender, amount);\r\n\r\n        SaleToken(address(token),msg.sender,_value, amount);\r\n    }\r\n    function swapDai(uint256 _value) public {\r\n        ERC20_Returns token = dai;\r\n        uint decimals = daiDecimals;\r\n        require(_value > 0, \"!value\");\r\n\r\n        uint allowed = token.allowance(msg.sender,address(this));\r\n        uint balanced = token.balanceOf(msg.sender);\r\n        require(allowed >= _value, \"!allowed\");\r\n        require(balanced >= _value, \"!balanced\");\r\n        token.transferFrom( msg.sender,address(this), _value);\r\n\r\n        uint price = getPrice();\r\n        uint amount = _value.mul(price).div(10 ** decimals);\r\n        bc.transfer( msg.sender, amount);\r\n\r\n        SaleToken(address(token),msg.sender,_value, amount);\r\n    }\r\n\r\n    function govWithdraUsdt(uint256 _amount)onlyOwner public {\r\n        require(_amount > 0, \"!zero input\");\r\n        usdt.transfer( msg.sender, _amount);\r\n        emit GovWithdrawToken(address(usdt), msg.sender, _amount);\r\n    }\r\n    function govWithdraUsdg(uint256 _amount)onlyOwner public {\r\n        require(_amount > 0, \"!zero input\");\r\n        usdg.transfer( msg.sender, _amount);\r\n        emit GovWithdrawToken(address(usdg), msg.sender, _amount);\r\n    }\r\n    function govWithdraUsdc(uint256 _amount)onlyOwner public {\r\n        require(_amount > 0, \"!zero input\");\r\n        usdc.transfer( msg.sender, _amount);\r\n        emit GovWithdrawToken(address(usdc), msg.sender, _amount);\r\n    }\r\n    function govWithdraDai(uint256 _amount)onlyOwner public {\r\n        require(_amount > 0, \"!zero input\");\r\n        dai.transfer( msg.sender, _amount);\r\n        emit GovWithdrawToken(address(dai), msg.sender, _amount);\r\n    }\r\n\r\n    function govWithdraBc(uint256 _amount)onlyOwner public {\r\n        require(_amount > 0, \"!zero input\");\r\n        bc.transfer( msg.sender, _amount);\r\n        emit GovWithdrawToken(address(bc), msg.sender, _amount);\r\n    }\r\n\r\n    function setOracle(address _oracle)onlyOwner public {\r\n        oracle = Oracle(_oracle);\r\n    }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_oracle\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_usdg\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_usdt\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_usdc\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_dai\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_bc\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"GovWithdrawToken\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"inValue\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"outValue\",\"type\":\"uint256\"}],\"name\":\"SaleToken\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"bc\",\"outputs\":[{\"internalType\":\"contract ERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dai\",\"outputs\":[{\"internalType\":\"contract ERC20_Returns\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"govWithdraBc\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"govWithdraDai\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"govWithdraUsdc\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"govWithdraUsdg\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"govWithdraUsdt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"oracle\",\"outputs\":[{\"internalType\":\"contract Oracle\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_oracle\",\"type\":\"address\"}],\"name\":\"setOracle\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"swapDai\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"swapUsdc\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"swapUsdg\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"swapUsdt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"usdc\",\"outputs\":[{\"internalType\":\"contract ERC20_Returns\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"usdg\",\"outputs\":[{\"internalType\":\"contract ERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"usdt\",\"outputs\":[{\"internalType\":\"contract ERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"bcMarket","CompilerVersion":"v0.6.6+commit.6c089d02","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"00000000000000000000000088dd282c503621d9d87aa136301d3c09a3bc5b6b000000000000000000000000bd62253c8033f3907c0800780662eab7378a4b96000000000000000000000000dac17f958d2ee523a2206206994597c13d831ec7000000000000000000000000a0b86991c6218b36c1d19d4a2e9eb0ce3606eb480000000000000000000000006b175474e89094c44da98b954eedeac495271d0f000000000000000000000000b3829e5755fafb97396109768895b1026acc003f","EVMVersion":"Default","Library":"","LicenseType":"Unlicense","Proxy":"0","Implementation":"","SwarmSource":"ipfs://834fefad2ecf3a1ebf1722e3259fa1c86d803e4dd06183ae64c9e06bc83b5251"}]}