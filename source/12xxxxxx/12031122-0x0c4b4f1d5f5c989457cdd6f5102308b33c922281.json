{"status":"1","message":"OK","result":[{"SourceCode":"// File: contracts/lib/InitializableOwnable.sol\r\n\r\n/*\r\n\r\n    Copyright 2020 DODO ZOO.\r\n    SPDX-License-Identifier: Apache-2.0\r\n\r\n*/\r\n\r\npragma solidity 0.6.9;\r\npragma experimental ABIEncoderV2;\r\n\r\n/**\r\n * @title Ownable\r\n * @author DODO Breeder\r\n *\r\n * @notice Ownership related functions\r\n */\r\ncontract InitializableOwnable {\r\n    address public _OWNER_;\r\n    address public _NEW_OWNER_;\r\n    bool internal _INITIALIZED_;\r\n\r\n    // ============ Events ============\r\n\r\n    event OwnershipTransferPrepared(address indexed previousOwner, address indexed newOwner);\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    // ============ Modifiers ============\r\n\r\n    modifier notInitialized() {\r\n        require(!_INITIALIZED_, \"DODO_INITIALIZED\");\r\n        _;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(msg.sender == _OWNER_, \"NOT_OWNER\");\r\n        _;\r\n    }\r\n\r\n    // ============ Functions ============\r\n\r\n    function initOwner(address newOwner) public notInitialized {\r\n        _INITIALIZED_ = true;\r\n        _OWNER_ = newOwner;\r\n    }\r\n\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        emit OwnershipTransferPrepared(_OWNER_, newOwner);\r\n        _NEW_OWNER_ = newOwner;\r\n    }\r\n\r\n    function claimOwnership() public {\r\n        require(msg.sender == _NEW_OWNER_, \"INVALID_CLAIM\");\r\n        emit OwnershipTransferred(_OWNER_, _NEW_OWNER_);\r\n        _OWNER_ = _NEW_OWNER_;\r\n        _NEW_OWNER_ = address(0);\r\n    }\r\n}\r\n\r\n// File: contracts/lib/CloneFactory.sol\r\n\r\n\r\ninterface ICloneFactory {\r\n    function clone(address prototype) external returns (address proxy);\r\n}\r\n\r\n// introduction of proxy mode design: https://docs.openzeppelin.com/upgrades/2.8/\r\n// minimum implementation of transparent proxy: https://eips.ethereum.org/EIPS/eip-1167\r\n\r\ncontract CloneFactory is ICloneFactory {\r\n    function clone(address prototype) external override returns (address proxy) {\r\n        bytes20 targetBytes = bytes20(prototype);\r\n        assembly {\r\n            let clone := mload(0x40)\r\n            mstore(clone, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000000000000000000000)\r\n            mstore(add(clone, 0x14), targetBytes)\r\n            mstore(\r\n                add(clone, 0x28),\r\n                0x5af43d82803e903d91602b57fd5bf30000000000000000000000000000000000\r\n            )\r\n            proxy := create(0, clone, 0x37)\r\n        }\r\n        return proxy;\r\n    }\r\n}\r\n\r\n// File: contracts/CrowdPooling/intf/ICP.sol\r\n\r\n\r\ninterface ICP {\r\n    function init(\r\n        address[] calldata addressList,\r\n        uint256[] calldata timeLine,\r\n        uint256[] calldata valueList,\r\n        bool isOpenTWAP\r\n    ) external;\r\n\r\n    function bid(address to) external;\r\n\r\n    function cancel(address assetTo, uint256 amount) external;\r\n\r\n    function settle() external;\r\n\r\n    function emergencySettle() external;\r\n\r\n    function claimBase() external;\r\n\r\n    function claimQuote() external;\r\n\r\n    function claimLPToken() external;\r\n}\r\n\r\n// File: contracts/lib/SafeMath.sol\r\n\r\n\r\n/**\r\n * @title SafeMath\r\n * @author DODO Breeder\r\n *\r\n * @notice Math operations with safety checks that revert on error\r\n */\r\nlibrary SafeMath {\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"MUL_ERROR\");\r\n\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b > 0, \"DIVIDING_ERROR\");\r\n        return a / b;\r\n    }\r\n\r\n    function divCeil(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 quotient = div(a, b);\r\n        uint256 remainder = a - quotient * b;\r\n        if (remainder > 0) {\r\n            return quotient + 1;\r\n        } else {\r\n            return quotient;\r\n        }\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b <= a, \"SUB_ERROR\");\r\n        return a - b;\r\n    }\r\n\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"ADD_ERROR\");\r\n        return c;\r\n    }\r\n\r\n    function sqrt(uint256 x) internal pure returns (uint256 y) {\r\n        uint256 z = x / 2 + 1;\r\n        y = x;\r\n        while (z < y) {\r\n            y = z;\r\n            z = (x / z + z) / 2;\r\n        }\r\n    }\r\n}\r\n\r\n// File: contracts/intf/IERC20.sol\r\n\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    function decimals() external view returns (uint8);\r\n\r\n    function name() external view returns (string memory);\r\n\r\n    function symbol() external view returns (string memory);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n}\r\n\r\n// File: contracts/lib/DecimalMath.sol\r\n\r\n\r\n\r\n/**\r\n * @title DecimalMath\r\n * @author DODO Breeder\r\n *\r\n * @notice Functions for fixed point number with 18 decimals\r\n */\r\nlibrary DecimalMath {\r\n    using SafeMath for uint256;\r\n\r\n    uint256 internal constant ONE = 10**18;\r\n    uint256 internal constant ONE2 = 10**36;\r\n\r\n    function mulFloor(uint256 target, uint256 d) internal pure returns (uint256) {\r\n        return target.mul(d) / (10**18);\r\n    }\r\n\r\n    function mulCeil(uint256 target, uint256 d) internal pure returns (uint256) {\r\n        return target.mul(d).divCeil(10**18);\r\n    }\r\n\r\n    function divFloor(uint256 target, uint256 d) internal pure returns (uint256) {\r\n        return target.mul(10**18).div(d);\r\n    }\r\n\r\n    function divCeil(uint256 target, uint256 d) internal pure returns (uint256) {\r\n        return target.mul(10**18).divCeil(d);\r\n    }\r\n\r\n    function reciprocalFloor(uint256 target) internal pure returns (uint256) {\r\n        return uint256(10**36).div(target);\r\n    }\r\n\r\n    function reciprocalCeil(uint256 target) internal pure returns (uint256) {\r\n        return uint256(10**36).divCeil(target);\r\n    }\r\n}\r\n\r\n// File: contracts/Factory/UpCrowdPoolingFactory.sol\r\n\r\n\r\n\r\n/**\r\n * @title UpCrowdPoolingFacotry\r\n * @author DODO Breeder\r\n *\r\n * @notice Create And Register vary price CP Pools \r\n */\r\ncontract UpCrowdPoolingFactory is InitializableOwnable {\r\n    using SafeMath for uint256;\r\n    // ============ Templates ============\r\n\r\n    address public immutable _CLONE_FACTORY_;\r\n    address public immutable _DVM_FACTORY_;\r\n    address public immutable _DEFAULT_MAINTAINER_;\r\n    address public immutable _DEFAULT_MT_FEE_RATE_MODEL_;\r\n    address public immutable _DEFAULT_PERMISSION_MANAGER_;\r\n    address public _CP_TEMPLATE_;\r\n\r\n    // ============ Settings =============\r\n    uint256 public _FREEZE_DURATION_ =  30 days;\r\n    uint256 public _CALM_DURATION_ = 0;\r\n    uint256 public _VEST_DURATION_ = 0;\r\n    uint256 public _CLIFF_RATE_ = 10**18;\r\n\r\n\r\n    // ============ Registry ============\r\n\r\n    // base -> quote -> CP address list\r\n    mapping(address => mapping(address => address[])) public _REGISTRY_;\r\n    // creator -> CP address list\r\n    mapping(address => address[]) public _USER_REGISTRY_;\r\n\r\n    // ============ modifiers ===========\r\n\r\n    modifier valueCheck(\r\n        address cpAddress,\r\n        address baseToken,\r\n        uint256[] memory timeLine,\r\n        uint256[] memory valueList)\r\n    {\r\n        require(timeLine[2] <= _CALM_DURATION_, \"CP_FACTORY : PHASE_CALM_DURATION_INVALID\");\r\n        require(timeLine[4] == _VEST_DURATION_, \"CP_FACTORY : VEST_DURATION_INVALID\");\r\n        require(valueList[3] == _CLIFF_RATE_, \"CP_FACTORY : CLIFF_RATE_INVALID\");\r\n        require(timeLine[3] >= _FREEZE_DURATION_, \"CP_FACTORY : FREEZE_DURATION_INVALID\");\r\n        _;\r\n    }\r\n\r\n    // ============ Events ============\r\n\r\n    event NewCP(\r\n        address baseToken,\r\n        address quoteToken,\r\n        address creator,\r\n        address cp\r\n    );\r\n\r\n    constructor(\r\n        address cloneFactory,\r\n        address cpTemplate,\r\n        address dvmFactory,\r\n        address defaultMaintainer,\r\n        address defaultMtFeeRateModel,\r\n        address defaultPermissionManager\r\n    ) public {\r\n        _CLONE_FACTORY_ = cloneFactory;\r\n        _CP_TEMPLATE_ = cpTemplate;\r\n        _DVM_FACTORY_ = dvmFactory;\r\n        _DEFAULT_MAINTAINER_ = defaultMaintainer;\r\n        _DEFAULT_MT_FEE_RATE_MODEL_ = defaultMtFeeRateModel;\r\n        _DEFAULT_PERMISSION_MANAGER_ = defaultPermissionManager;\r\n    }\r\n\r\n    // ============ Functions ============\r\n\r\n    function createCrowdPooling() external returns (address newCrowdPooling) {\r\n        newCrowdPooling = ICloneFactory(_CLONE_FACTORY_).clone(_CP_TEMPLATE_);\r\n    }\r\n\r\n    function initCrowdPooling(\r\n        address cpAddress,\r\n        address creator,\r\n        address baseToken,\r\n        address quoteToken,\r\n        uint256[] memory timeLine,\r\n        uint256[] memory valueList,\r\n        bool isOpenTWAP\r\n    ) external valueCheck(cpAddress,baseToken,timeLine,valueList) {\r\n        {\r\n        address[] memory addressList = new address[](7);\r\n        addressList[0] = creator;\r\n        addressList[1] = _DEFAULT_MAINTAINER_;\r\n        addressList[2] = baseToken;\r\n        addressList[3] = quoteToken;\r\n        addressList[4] = _DEFAULT_PERMISSION_MANAGER_;\r\n        addressList[5] = _DEFAULT_MT_FEE_RATE_MODEL_;\r\n        addressList[6] = _DVM_FACTORY_;\r\n\r\n        if(valueList[0] == 0) valueList[0] = uint112(-1);\r\n\r\n        ICP(cpAddress).init(\r\n            addressList,\r\n            timeLine,\r\n            valueList,\r\n            isOpenTWAP\r\n        );\r\n        }\r\n\r\n        _REGISTRY_[baseToken][quoteToken].push(cpAddress);\r\n        _USER_REGISTRY_[creator].push(cpAddress);\r\n\r\n        emit NewCP(baseToken, quoteToken, creator, cpAddress);\r\n    }\r\n\r\n    // ============ View Functions ============\r\n\r\n    function getCrowdPooling(address baseToken, address quoteToken)\r\n        external\r\n        view\r\n        returns (address[] memory pools)\r\n    {\r\n        return _REGISTRY_[baseToken][quoteToken];\r\n    }\r\n\r\n    function getCrowdPoolingBidirection(address token0, address token1)\r\n        external\r\n        view\r\n        returns (address[] memory baseToken0Pools, address[] memory baseToken1Pools)\r\n    {\r\n        return (_REGISTRY_[token0][token1], _REGISTRY_[token1][token0]);\r\n    }\r\n\r\n    function getCrowdPoolingByUser(address user)\r\n        external\r\n        view\r\n        returns (address[] memory pools)\r\n    {\r\n        return _USER_REGISTRY_[user];\r\n    }\r\n\r\n    // ============ Owner Functions ============\r\n    \r\n    function updateCPTemplate(address _newCPTemplate) external onlyOwner {\r\n        _CP_TEMPLATE_ = _newCPTemplate;\r\n    }\r\n\r\n    function setFreezeDuration(uint256 _newFreeDuration) public onlyOwner {\r\n        _FREEZE_DURATION_ = _newFreeDuration;\r\n    }\r\n\r\n    function setCalmDuration(uint256 _newCalmDuration) public onlyOwner {\r\n        _CALM_DURATION_ = _newCalmDuration;\r\n    }\r\n\r\n    function setVestDuration(uint256 _newVestDuration) public onlyOwner {\r\n        _VEST_DURATION_ = _newVestDuration;\r\n    }\r\n\r\n    function setCliffRate(uint256 _newCliffRate) public onlyOwner {\r\n        require(_newCliffRate <= 10**18, \"CP_FACTORY : INVALID\");\r\n        _CLIFF_RATE_ = _newCliffRate;\r\n    }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"cloneFactory\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"cpTemplate\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"dvmFactory\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"defaultMaintainer\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"defaultMtFeeRateModel\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"defaultPermissionManager\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"baseToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"quoteToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"cp\",\"type\":\"address\"}],\"name\":\"NewCP\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferPrepared\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"_CALM_DURATION_\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_CLIFF_RATE_\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_CLONE_FACTORY_\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_CP_TEMPLATE_\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_DEFAULT_MAINTAINER_\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_DEFAULT_MT_FEE_RATE_MODEL_\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_DEFAULT_PERMISSION_MANAGER_\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_DVM_FACTORY_\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_FREEZE_DURATION_\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_NEW_OWNER_\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_OWNER_\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"_REGISTRY_\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"_USER_REGISTRY_\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_VEST_DURATION_\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"createCrowdPooling\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"newCrowdPooling\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"baseToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"quoteToken\",\"type\":\"address\"}],\"name\":\"getCrowdPooling\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"pools\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token0\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token1\",\"type\":\"address\"}],\"name\":\"getCrowdPoolingBidirection\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"baseToken0Pools\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"baseToken1Pools\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getCrowdPoolingByUser\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"pools\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"cpAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"baseToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"quoteToken\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"timeLine\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"valueList\",\"type\":\"uint256[]\"},{\"internalType\":\"bool\",\"name\":\"isOpenTWAP\",\"type\":\"bool\"}],\"name\":\"initCrowdPooling\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"initOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newCalmDuration\",\"type\":\"uint256\"}],\"name\":\"setCalmDuration\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newCliffRate\",\"type\":\"uint256\"}],\"name\":\"setCliffRate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newFreeDuration\",\"type\":\"uint256\"}],\"name\":\"setFreezeDuration\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newVestDuration\",\"type\":\"uint256\"}],\"name\":\"setVestDuration\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newCPTemplate\",\"type\":\"address\"}],\"name\":\"updateCPTemplate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"UpCrowdPoolingFactory","CompilerVersion":"v0.6.9+commit.3e3065ac","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"0000000000000000000000005e5a7b76462e4bdf83aa98795644281bdba80b8800000000000000000000000018b0bd918b55f995fd404b872404378a62cb403b000000000000000000000000c9ed9b18e447e600238fe50e944b9062b664dea400000000000000000000000095c4f5b83aa70810d4f142d58e5f7242bd891cb00000000000000000000000005e84190a270333ace5b9202a3f4cebf11b81bb010000000000000000000000006b208e08dcf6bd51f50c5da09d15b2d8e5c46cf2","EVMVersion":"Default","Library":"","LicenseType":"Apache-2.0","Proxy":"0","Implementation":"","SwarmSource":"ipfs://2c3b06bbf171ccc50b4d0ecf179ce40363dd10e7a2c08282d5d8b96eac5cca4f"}]}