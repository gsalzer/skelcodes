{"status":"1","message":"OK","result":[{"SourceCode":"/**\r\n *Submitted for verification at Etherscan.io on 2021-06-10\r\n*/\r\n\r\n// SPDX-License-Identifier: MIT\r\npragma solidity >=0.6.0 <0.8.0;\r\n\r\n/*\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with GSN meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address payable) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes memory) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n\r\npragma solidity >=0.6.2 <0.8.0;\r\n\r\n/**\r\n * @dev Collection of functions related to the address type\r\n */\r\nlibrary Address {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     *\r\n     * Among others, `isContract` will return false for the following\r\n     * types of addresses:\r\n     *\r\n     *  - an externally-owned account\r\n     *  - a contract in construction\r\n     *  - an address where a contract will be created\r\n     *  - an address where a contract lived, but was destroyed\r\n     * ====\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // This method relies on extcodesize, which returns 0 for contracts in\r\n        // construction, since the code is only stored at the end of the\r\n        // constructor execution.\r\n\r\n        uint256 size;\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly { size := extcodesize(account) }\r\n        return size > 0;\r\n    }\r\n\r\n    /**\r\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * IMPORTANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     */\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\r\n        (bool success, ) = recipient.call{ value: amount }(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n\r\n    /**\r\n     * @dev Performs a Solidity function call using a low level `call`. A\r\n     * plain`call` is an unsafe replacement for a function call: use this\r\n     * function instead.\r\n     *\r\n     * If `target` reverts with a revert reason, it is bubbled up by this\r\n     * function (like regular Solidity function calls).\r\n     *\r\n     * Returns the raw returned data. To convert to the expected return value,\r\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `target` must be a contract.\r\n     * - calling `target` with `data` must not revert.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n      return functionCall(target, data, \"Address: low-level call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\r\n     * `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but also transferring `value` wei to `target`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the calling contract must have an ETH balance of at least `value`.\r\n     * - the called Solidity function must be `payable`.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\r\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\r\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\r\n        require(isContract(target), \"Address: call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\r\n        return _verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\r\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\r\n        require(isContract(target), \"Address: static call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.staticcall(data);\r\n        return _verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            // Look for revert reason and bubble it up if present\r\n            if (returndata.length > 0) {\r\n                // The easiest way to bubble the revert reason is using memory via assembly\r\n\r\n                // solhint-disable-next-line no-inline-assembly\r\n                assembly {\r\n                    let returndata_size := mload(returndata)\r\n                    revert(add(32, returndata), returndata_size)\r\n                }\r\n            } else {\r\n                revert(errorMessage);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\npragma solidity >=0.6.0 <0.8.0;\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts with custom message when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\npragma solidity >=0.6.0 <0.8.0;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\npragma solidity >=0.6.0 <0.8.0;\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor () internal {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\npragma solidity >=0.5.0;\r\n\r\ninterface IUniswapV2Factory {\r\n    event PairCreated(address indexed token0, address indexed token1, address pair, uint);\r\n\r\n    function feeTo() external view returns (address);\r\n    function feeToSetter() external view returns (address);\r\n\r\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\r\n    function allPairs(uint) external view returns (address pair);\r\n    function allPairsLength() external view returns (uint);\r\n\r\n    function createPair(address tokenA, address tokenB) external returns (address pair);\r\n\r\n    function setFeeTo(address) external;\r\n    function setFeeToSetter(address) external;\r\n}\r\n\r\npragma solidity >=0.6.2;\r\n\r\ninterface IUniswapV2Router01 {\r\n    function factory() external pure returns (address);\r\n    function WETH() external pure returns (address);\r\n\r\n    function addLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint amountADesired,\r\n        uint amountBDesired,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountA, uint amountB, uint liquidity);\r\n    function addLiquidityETH(\r\n        address token,\r\n        uint amountTokenDesired,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\r\n    function removeLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint liquidity,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountA, uint amountB);\r\n    function removeLiquidityETH(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountToken, uint amountETH);\r\n    function removeLiquidityWithPermit(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint liquidity,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline,\r\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n    ) external returns (uint amountA, uint amountB);\r\n    function removeLiquidityETHWithPermit(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline,\r\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n    ) external returns (uint amountToken, uint amountETH);\r\n    function swapExactTokensForTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint[] memory amounts);\r\n    function swapTokensForExactTokens(\r\n        uint amountOut,\r\n        uint amountInMax,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint[] memory amounts);\r\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\r\n        external\r\n        payable\r\n        returns (uint[] memory amounts);\r\n    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\r\n        external\r\n        returns (uint[] memory amounts);\r\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\r\n        external\r\n        returns (uint[] memory amounts);\r\n    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\r\n        external\r\n        payable\r\n        returns (uint[] memory amounts);\r\n\r\n    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\r\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\r\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\r\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\r\n    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\r\n}\r\n\r\npragma solidity >=0.6.2;\r\n\r\ninterface IUniswapV2Router02 is IUniswapV2Router01 {\r\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountETH);\r\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline,\r\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n    ) external returns (uint amountETH);\r\n\r\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external payable;\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n}\r\n\r\npragma solidity 0.6.12;\r\n\r\nlibrary DEFXConstants {\r\n    string private constant _name = \"DeFinity\";\r\n    string private constant _symbol = \"DEFX\";\r\n    uint8 private constant _decimals = 18;\r\n    address private constant _tokenOwner = 0x5ca46B14691d9Ea4ce2D8e66e3550DE268cA6E2E;\r\n\r\n    function getName() internal pure returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    function getSymbol() internal pure returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    function getDecimals() internal pure returns (uint8) {\r\n        return _decimals;\r\n    }\r\n\r\n    function getTokenOwner() internal pure returns (address) {\r\n        return _tokenOwner;\r\n    }\r\n\r\n}\r\n\r\ncontract DEFX is Context, IERC20, Ownable {\r\n    using SafeMath for uint256;\r\n    using Address for address;\r\n\r\n    uint256 _totalSupply = 171516755 * 10**18;\r\n    mapping (address => uint256) _balances;\r\n    mapping (address => mapping (address => uint256)) _allowances;\r\n\r\n    IUniswapV2Router02 public uniRouter;\r\n    IUniswapV2Factory public uniFactory;\r\n    address public launchPool;\r\n\r\n    uint256 private _tradingTime;\r\n    uint256 private _restrictionLiftTime;\r\n    uint256 private _restrictionGas = 487000000000;\r\n    uint256 private _maxRestrictionAmount = 40000 * 10**18;\r\n    mapping (address => bool) private _isWhitelisted;\r\n    mapping (address => bool) private _openSender;\r\n    mapping (address => uint256) private _lastTx;\r\n\r\n    constructor () \r\n        public \r\n    {\r\n        _balances[owner()] = _totalSupply; \r\n        emit Transfer(address(0), DEFXConstants.getTokenOwner(), _totalSupply);\r\n    }\r\n\r\n    function name() public view returns (string memory) {\r\n        return DEFXConstants.getName();\r\n    }\r\n\r\n    function symbol() public view returns (string memory) {\r\n        return DEFXConstants.getSymbol();\r\n    }\r\n\r\n    function decimals() public view returns (uint8) {\r\n        return DEFXConstants.getDecimals();\r\n    }\r\n\r\n    function totalSupply() public view override returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    function balanceOf(address account) public view override returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n\r\n    function transfer(address recipient, uint256 amount) public override returns (bool) {\r\n        _transfer(_msgSender(), recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    function allowance(address owner, address spender) public view override returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    function approve(address spender, uint256 amount) public override returns (bool) {\r\n        _approve(_msgSender(), spender, amount);\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(address sender, address recipient, uint256 amount) public override returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \"DEFX: transfer amount exceeds allowance\"));\r\n        return true;\r\n    }\r\n\r\n    function increaseAllowance(address spender, uint256 addedValue) public returns (bool) {\r\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\r\n        return true;\r\n    }\r\n\r\n    function decreaseAllowance(address spender, uint256 subtractedValue) public returns (bool) {\r\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \"DEFX: decreased allowance below zero\"));\r\n        return true;\r\n    }\r\n\r\n    function _transfer(address sender, address recipient, uint256 amount) private launchRestrict(sender, recipient, amount) {\r\n        require(sender != address(0), \"DEFX: transfer from the zero address\");\r\n        require(recipient != address(0), \"DEFX: transfer to the zero address\");\r\n\r\n        _balances[sender] = _balances[sender].sub(amount, \"DEFX: transfer amount exceeds balance\");\r\n        _balances[recipient] = _balances[recipient].add(amount);\r\n        emit Transfer(sender, recipient, amount);\r\n    }\r\n\r\n    function _approve(address owner, address spender, uint256 amount) private {\r\n        require(owner != address(0), \"DEFX: approve from the zero address\");\r\n        require(spender != address(0), \"DEFX: approve to the zero address\");\r\n\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    function setRestrictionAmount(uint256 amount) external onlyOwner() {\r\n        _maxRestrictionAmount = amount;\r\n    }\r\n\r\n    function setRestrictionGas(uint256 price) external onlyOwner() {\r\n        _restrictionGas = price;\r\n    }\r\n\r\n    function whitelistAccount(address account) external onlyOwner() {\r\n        _isWhitelisted[account] = true;\r\n    }\r\n\r\n    function addSender(address account) external onlyOwner() {\r\n        _openSender[account] = true;\r\n    }\r\n\r\n    modifier launchRestrict(address sender, address recipient, uint256 amount) {\r\n        _;\r\n    }\r\n}\r\n\r\ncontract DEFXStakingPool is Ownable {\r\n    using SafeMath for uint;\r\n    struct StakedBalance { uint time; uint amount; }\r\n\r\n    DEFX public defxToken;\r\n    uint public rewardTimeSpan;\r\n    uint public annualInterestRate;\r\n    \r\n    address[] private stakers;\r\n    mapping (address => StakedBalance[]) private stakedBalances;\r\n    mapping (address => uint) private totalStakedBalances;\r\n    uint public totalStakedAmount;\r\n    mapping (address => uint) private earnedRewards;\r\n\r\n    constructor(address _tokenContractAddress, uint _annualInterestRate, uint _rewardTimeSpan)\r\n        public\r\n    {\r\n        defxToken = DEFX(_tokenContractAddress);\r\n        annualInterestRate = _annualInterestRate;\r\n        rewardTimeSpan = _rewardTimeSpan;\r\n\r\n        stakers = new address[](0);\r\n    }\r\n\r\n    ////////////////////////////////////////////////////////////////////////////////////////////////////\r\n    // Owner configuration\r\n    ////////////////////////////////////////////////////////////////////////////////////////////////////\r\n\r\n    /**\r\n     * @notice Allows contract owner to change annual interest rate. Reward earned up to that moment is calculated\r\n     * using previous interest rate.\r\n     */\r\n    function setAnnualInterestRate(uint _interestRate)\r\n        external\r\n        onlyOwner\r\n    {\r\n        collectRewardForAllStakers();\r\n        annualInterestRate = _interestRate;\r\n    }\r\n\r\n    /**\r\n     * @notice Allows contract owner to change reward time span. Reward earned up to that moment is calculated using\r\n     * previous timespan.\r\n     */\r\n    function setRewardTimeSpan(uint _timeSpan)\r\n        external\r\n        onlyOwner\r\n    {\r\n        collectRewardForAllStakers();\r\n        rewardTimeSpan = _timeSpan;\r\n    }\r\n\r\n    /**\r\n     * @notice Allows contract owner to withdraw any DEFX balance from the contract which exceeds minimum needed DEFX\r\n     * balance. Minimum DEFX balance is calculated as a sum of all staked DEFX and reward that would be earned in the\r\n     * next year with the current annual interest rate.\r\n     */\r\n    function withdrawUnusedBalance(uint _amount)\r\n        external\r\n        onlyOwner\r\n    {\r\n        require(defxToken.balanceOf(address(this)) - _amount >= getMinContractBalance(), \"Max withdrawal amount exceeded.\");\r\n        require(defxToken.transfer(owner(), _amount), \"Transfer failed\");\r\n    }\r\n\r\n    ////////////////////////////////////////////////////////////////////////////////////////////////////\r\n    // Staking\r\n    ////////////////////////////////////////////////////////////////////////////////////////////////////\r\n\r\n    /**\r\n     * @notice Allows any DEFX holder to stake certain amount of DEFX and earn reward. Reward is calculated based on\r\n     * the annual interest rate specified by annualInterestRate attribute and paid on basis specified by rewardTimeSpan\r\n     * attribute (daily, weekly, etc.). There is no automatic transfer of the reward, but stakers should redeem reward\r\n     * instead.\r\n     * Pre-condition for staking of DEFX is that the staker should approve address of this smart contract to spend\r\n     * their DEFX.\r\n     */\r\n    function stake(uint _amount) \r\n        external\r\n    {\r\n        totalStakedAmount = totalStakedAmount.add(_amount);\r\n        require(defxToken.balanceOf(address(this)) + _amount >= getMinContractBalance(), \"Pool's balance too low for covering annual reward\");\r\n\r\n        if(totalStakedBalances[_msgSender()] == 0)\r\n            stakers.push(_msgSender());\r\n        stakedBalances[_msgSender()].push(StakedBalance(block.timestamp, _amount));\r\n\r\n        totalStakedBalances[_msgSender()] = totalStakedBalances[_msgSender()].add(_amount);\r\n\r\n        require(defxToken.transferFrom(_msgSender(), address(this), _amount), \"Transfer failed\");\r\n    }\r\n\r\n    /**\r\n     * @notice Allows any DEFX holder who has previously staked DEFX to unstake it, up to the amount specified by input\r\n     * parameter. All reward earned up to that moment is calculated and needs to be redeemed sperately from unstaking.\r\n     * It can be done any time before or any time after unstaking.\r\n     */\r\n    function unstake(uint _amount) \r\n        external\r\n    {\r\n        require(_amount <= totalStakedBalances[_msgSender()], \"Maximum staked amount is exceeded.\");\r\n        collectReward(_msgSender());\r\n        uint amountToUnstake = _amount;\r\n\r\n        for(uint i = stakedBalances[_msgSender()].length; i > 0; i--) \r\n        {\r\n            uint amount = stakedBalances[_msgSender()][i-1].amount;\r\n\r\n            if (amountToUnstake >= amount) {\r\n                amountToUnstake = amountToUnstake.sub(amount);\r\n                delete stakedBalances[_msgSender()][i-1];\r\n            }\r\n            else { \r\n                stakedBalances[_msgSender()][i-1].amount = amount.sub(amountToUnstake);\r\n                amountToUnstake = 0;    \r\n            }\r\n\r\n            if (amountToUnstake == 0)\r\n                break;  \r\n        }\r\n\r\n        totalStakedBalances[_msgSender()] = totalStakedBalances[_msgSender()].sub(_amount);\r\n        totalStakedAmount = totalStakedAmount.sub(_amount);\r\n        require(defxToken.transfer(_msgSender(), _amount), \"Transfer failed\");\r\n    }\r\n\r\n    ////////////////////////////////////////////////////////////////////////////////////////////////////\r\n    // Redeeming reward\r\n    ////////////////////////////////////////////////////////////////////////////////////////////////////\r\n\r\n    /**\r\n     * @notice Allows token owner to transfer earned reward to the staker.\r\n     */\r\n    function redeemRewardToStaker(address _staker, uint _amount)\r\n        external\r\n        onlyOwner\r\n    {\r\n        redeemReward(_staker, _amount);\r\n    }\r\n\r\n    /**\r\n     * @notice Allows staker to transfer earned reward to themselves.\r\n     */\r\n    function redeemReward(uint _amount)\r\n        external\r\n    {\r\n        redeemReward(_msgSender(), _amount);\r\n    }\r\n\r\n    function redeemReward(address _staker, uint _amount) \r\n        private\r\n    {\r\n        collectReward(_staker);\r\n        require(_amount <= earnedRewards[_staker], \"Maximum redeemable reward is exceeded.\");\r\n\r\n        earnedRewards[_staker] = earnedRewards[_staker].sub(_amount);\r\n        require(defxToken.transfer(_staker, _amount), \"Transfer failed.\");\r\n    }\r\n\r\n    function collectReward(address _staker)\r\n        private \r\n    {\r\n        for (uint i = 0; i < stakedBalances[_staker].length; i++) \r\n        {\r\n            uint time = stakedBalances[_staker][i].time;\r\n            uint amount = stakedBalances[_staker][i].amount;\r\n\r\n            uint reward = calculateReward(time, amount);\r\n            earnedRewards[_staker] = earnedRewards[_staker].add(reward);\r\n\r\n            stakedBalances[_staker][i].time = getNewTime(time);\r\n        }\r\n    }\r\n\r\n    function collectRewardForAllStakers()\r\n        private \r\n    {\r\n         for (uint i = 0; i < stakers.length; i++) \r\n        {\r\n            if (totalStakedBalances[stakers[i]] > 0) \r\n            {\r\n                collectReward(stakers[i]);\r\n            }\r\n        }\r\n    }\r\n\r\n    ////////////////////////////////////////////////////////////////////////////////////////////////////\r\n    // Reading functions\r\n    ////////////////////////////////////////////////////////////////////////////////////////////////////\r\n\r\n    /**\r\n     * @return Earned reward for the staker up to that moment for specified staker's address\r\n     */\r\n    function getEarnedReward(address _staker)\r\n        external\r\n        view\r\n        returns (uint)\r\n    {\r\n        uint totalAmount = earnedRewards[_staker];\r\n\r\n        for (uint i = 0; i < stakedBalances[_staker].length; i++) \r\n        {\r\n            uint time = stakedBalances[_staker][i].time;\r\n            uint amount = stakedBalances[_staker][i].amount;\r\n\r\n            totalAmount = totalAmount.add(calculateReward(time, amount));\r\n        }\r\n\r\n        return totalAmount;\r\n    }\r\n\r\n    /**\r\n     * @return Staked amount of DEFX for specified staker's address\r\n     */\r\n    function getStakedAmount(address _staker)\r\n        external\r\n        view\r\n        returns (uint)\r\n    {\r\n        return totalStakedBalances[_staker];\r\n    }\r\n\r\n    ////////////////////////////////////////////////////////////////////////////////////////////////////\r\n    // Helper functions\r\n    ////////////////////////////////////////////////////////////////////////////////////////////////////\r\n\r\n    /**\r\n     * @dev Calculates reward based on the DEFX amount that is staked and the moment in time when it is staked.\r\n     * It first calculates number of periods (i.e weeks) passed between now and time when DEFX amount is staked \r\n     * (timeSpanUnits). Then, it calculates interest rate for that period (i.e. weekly interest rate) as \r\n     * unitInterestRate. Finally reward is equal to period interest rate x staked amount x number of periods.\r\n     */\r\n    function calculateReward(uint _time, uint _amount) \r\n        private\r\n        view\r\n        returns (uint)\r\n    {\r\n        uint timeSpanUnits = (block.timestamp.sub(_time)).div(rewardTimeSpan);\r\n        uint unitInterestRate = annualInterestRate.mul(rewardTimeSpan).div(365 days);\r\n        return timeSpanUnits.mul(unitInterestRate).mul(_amount).div(10**18);\r\n    }\r\n\r\n    function getMinContractBalance() \r\n        private\r\n        view\r\n        returns(uint)\r\n    {\r\n        uint expectedAnnualRewards = totalStakedAmount.div(10**18).mul(annualInterestRate);\r\n        return totalStakedAmount + expectedAnnualRewards;\r\n    }\r\n\r\n    /**\r\n     * @dev Calculates beginning of the current period for which reward is still not calculated.\r\n     */\r\n    function getNewTime(uint _time)\r\n        private\r\n        view\r\n        returns (uint)\r\n    {\r\n        uint timeSpanUnits = (block.timestamp.sub(_time)).div(rewardTimeSpan);\r\n        return _time.add(timeSpanUnits.mul(rewardTimeSpan));\r\n    }\r\n\r\n    ////////////////////////////////////////////////////////////////////////////////////////////////////\r\n    // Miscellaneous\r\n    ////////////////////////////////////////////////////////////////////////////////////////////////////\r\n\r\n    /**\r\n     * @notice Enable recovery of ether sent by mistake to this contract's address.\r\n     */\r\n    function drainStrayEther(uint _amount)\r\n        external\r\n        onlyOwner\r\n        returns (bool)\r\n    {\r\n        payable(owner()).transfer(_amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @notice Enable recovery of any ERC20 compatible token sent by mistake to this contract's address.\r\n     * The only token that cannot be drained is DEFX.\r\n     */\r\n    function drainStrayTokens(IERC20 _token, uint _amount)\r\n        external\r\n        onlyOwner\r\n        returns (bool)\r\n    {\r\n        require(address(_token) != address(defxToken), \"DEFX cannot be drained\");\r\n        return _token.transfer(owner(), _amount);\r\n    }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenContractAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_annualInterestRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_rewardTimeSpan\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"annualInterestRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"defxToken\",\"outputs\":[{\"internalType\":\"contract DEFX\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"drainStrayEther\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"drainStrayTokens\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_staker\",\"type\":\"address\"}],\"name\":\"getEarnedReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_staker\",\"type\":\"address\"}],\"name\":\"getStakedAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"redeemReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_staker\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"redeemRewardToStaker\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardTimeSpan\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_interestRate\",\"type\":\"uint256\"}],\"name\":\"setAnnualInterestRate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_timeSpan\",\"type\":\"uint256\"}],\"name\":\"setRewardTimeSpan\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"stake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalStakedAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"unstake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdrawUnusedBalance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"DEFXStakingPool","CompilerVersion":"v0.6.12+commit.27d51765","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"0000000000000000000000005f474906637bdcda05f29c74653f6962bb0f8eda00000000000000000000000000000000000000000000000001aa535d3d0c00000000000000000000000000000000000000000000000000000000000000093a80","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://611b75db7780a5e5ff828159f5e1fdc2dc96a32190992d5e9d15b3bef51d7c70"}]}