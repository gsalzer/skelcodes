{"status":"1","message":"OK","result":[{"SourceCode":"// SPDX-License-Identifier: UNLICENSED\r\n\r\npragma solidity ^0.8.6;\r\n\r\n// BigShortBets.com sale contract - via StableCoins and ETH\r\n//\r\n// USE ONLY OWN WALLET (Metamask, Trezor, Ledger...)\r\n// DO NOT SEND FROM EXCHANGES OR ANY SERVICES\r\n//\r\n// Use ONLY ETH network, ERC20 tokens (Not Binance/Tron/whatever!)\r\n//\r\n// Set approval to contract address or use USDC authorization first\r\n//\r\n// DO NOT SEND STABLE TOKENS DIRECTLY - IT WILL NOT COUNT THAT!\r\n//\r\n// send ONLY round number of USDT/USDC/DAI!\r\n// ie 20, 500, 2000 NOT 20.1, 500.5, 2000.3\r\n// contract will IGNORE decimals!\r\n//\r\n// Need 150k gas limit.\r\n// Use proper pay* function\r\ncontract BigShortBetsSale {\r\n    /// max tokens per user is 15000 as $15000 is AML limit\r\n    uint256 public constant maxTokens = 15000 * 1 ether;\r\n\r\n    /// contract starts accepting transfers\r\n    uint256 public immutable dateStart;\r\n    /// hard time limit\r\n    uint256 public immutable dateEnd;\r\n\r\n    /// total collected USD\r\n    uint256 public usdCollected;\r\n\r\n    /// sale is limited by tokens count\r\n    uint256 public immutable tokensLimit;\r\n\r\n    /// tokens sold in this sale\r\n    uint256 public tokensSold;\r\n\r\n    uint256 private constant DECIMALS_DAI = 18;\r\n    uint256 private constant DECIMALS_USD = 6;\r\n\r\n    // addresses of tokens\r\n    address public immutable usdt;\r\n    address public immutable usdc;\r\n    address public immutable dai;\r\n    address public immutable oracle;\r\n\r\n    address public owner;\r\n    address public newOwner;\r\n\r\n    bool public saleEnded;\r\n\r\n    // deposited USD tokens per token address\r\n    mapping(address => uint256) private _deposited;\r\n\r\n    /// Tokens bought by user\r\n    mapping(address => uint256) public tokensBoughtOf;\r\n\r\n    event AcceptedUSD(address indexed user, uint256 amount);\r\n    event AcceptedETH(address indexed user, uint256 amount);\r\n\r\n    string constant ERR_TRANSFER = \"Token transfer failed\";\r\n    string constant ERR_SALE_LIMIT = \"Token sale limit reached\";\r\n    string constant ERR_AML = \"AML sale limit reached\";\r\n    string constant ERR_SOON = \"SOON\";\r\n\r\n    /**\r\n    Contract constructor\r\n    @param _owner adddress of contract owner\r\n    @param _tokensLimit maximum tokens that can be sold (round, ie 320123)\r\n    @param _startDate sale start timestamp\r\n    @param _endDate sale end timestamp\r\n    @param _usdt USDT token address\r\n    @param _usdc USDC token address\r\n    @param _dai DAI token address\r\n    @param _oracle Chainlink USD/ETH oracle address\r\n     */\r\n    constructor(\r\n        address _owner,\r\n        uint256 _tokensLimit, // 3398743\r\n        uint256 _startDate, // 15-07-2020 20:00 CEST (UTC +2)\r\n        uint256 _endDate, // 15-08-2020 20:00 CEST (UTC +2)\r\n        address _usdt,\r\n        address _usdc,\r\n        address _dai,\r\n        address _oracle\r\n    ) {\r\n        owner = _owner;\r\n        tokensLimit = _tokensLimit * 1 ether;\r\n        dateStart = _startDate;\r\n        dateEnd = _endDate;\r\n        usdt = _usdt;\r\n        usdc = _usdc;\r\n        dai = _dai;\r\n        oracle = _oracle;\r\n\r\n        /**\r\n        mainnet:\r\n        usdt=0xdAC17F958D2ee523a2206206994597C13D831ec7;\r\n        usdc=0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48;\r\n        dai=0x6B175474E89094C44Da98b954EedeAC495271d0F;\r\n        0x5f4eC3Df9cbd43714FE2740f5E3616155c5b8419 chainlink ETH/USD oracle\r\n        */\r\n    }\r\n\r\n    /**\r\n    Pay in using USDC, use approve/transferFrom\r\n    @param amount number of USDC (with decimals)\r\n    */\r\n    function payUSDC(uint256 amount) external {\r\n        require(\r\n            INterfaces(usdc).transferFrom(msg.sender, address(this), amount),\r\n            ERR_TRANSFER\r\n        );\r\n        _pay(msg.sender, amount / (10**DECIMALS_USD));\r\n        _deposited[usdc] += amount;\r\n    }\r\n\r\n    /**\r\n    Pay in using USDT, need set approval first\r\n    @param amount USDT amount (with decimals)\r\n    */\r\n    function payUSDT(uint256 amount) external {\r\n        IUsdt(usdt).transferFrom(msg.sender, address(this), amount);\r\n        _pay(msg.sender, amount / (10**DECIMALS_USD));\r\n        _deposited[usdt] += amount;\r\n    }\r\n\r\n    /**\r\n    Pay in using DAI, need set approval first\r\n    @param amount number of DAI (with decimals)\r\n    */\r\n    function payDAI(uint256 amount) external {\r\n        require(\r\n            INterfaces(dai).transferFrom(msg.sender, address(this), amount),\r\n            ERR_TRANSFER\r\n        );\r\n        _pay(msg.sender, amount / (10**DECIMALS_DAI));\r\n        _deposited[dai] += amount;\r\n    }\r\n\r\n    //\r\n    // accept ETH\r\n    //\r\n\r\n    // takes about 50k gas\r\n    receive() external payable {\r\n        _payEth(msg.sender, msg.value);\r\n    }\r\n\r\n    function payETH() external payable {\r\n        _payEth(msg.sender, msg.value);\r\n    }\r\n\r\n    /**\r\n    Get ETH price from Chainlink.\r\n    @return ETH price in USD with 18 decimals\r\n    */\r\n    function tokensPerEth() public view returns (uint256) {\r\n        int256 answer;\r\n        (, answer, , , ) = INterfaces(oracle).latestRoundData();\r\n        // need 18 decimals\r\n        return uint256(answer * (10**10));\r\n    }\r\n\r\n    /**\r\n    How much tokens left to sale\r\n    */\r\n    function tokensLeft() external view returns (uint256) {\r\n        return tokensLimit - tokensSold;\r\n    }\r\n\r\n    function _payEth(address user, uint256 amount) internal notEnded {\r\n        uint256 sold = (amount * tokensPerEth()) / 1 ether;\r\n        tokensSold += sold;\r\n        require(tokensSold <= tokensLimit, ERR_SALE_LIMIT);\r\n        tokensBoughtOf[user] += sold;\r\n        require(tokensBoughtOf[user] <= maxTokens, ERR_AML);\r\n        emit AcceptedETH(user, amount);\r\n    }\r\n\r\n    function _pay(address user, uint256 usd) internal notEnded {\r\n        uint256 sold = usd * 1 ether; // price is $1\r\n        tokensSold += sold;\r\n        require(tokensSold <= tokensLimit, ERR_SALE_LIMIT);\r\n        tokensBoughtOf[user] += sold;\r\n        require(tokensBoughtOf[user] <= maxTokens, ERR_AML);\r\n        emit AcceptedUSD(user, usd);\r\n    }\r\n\r\n    //\r\n    // modifiers\r\n    //\r\n\r\n    modifier notEnded() {\r\n        require(!saleEnded, \"Sale ended\");\r\n        require(\r\n            block.timestamp > dateStart && block.timestamp < dateEnd,\r\n            \"Too soon or too late\"\r\n        );\r\n        _;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner, \"Only for contract Owner\");\r\n        _;\r\n    }\r\n\r\n    //\r\n    // Rick mode\r\n    //\r\n\r\n    /// Take out all stables and ETH\r\n    /// Possible after timeout or after sell 90%\r\n    /// Also closes sale\r\n    function takeAll() external onlyOwner {\r\n        require(\r\n            tokensSold > ((tokensLimit / 10) * 9) || block.timestamp > dateEnd,\r\n            ERR_SOON\r\n        );\r\n        saleEnded = true; //just to save gas for ppl that want buy too late\r\n        uint256 amt = INterfaces(usdt).balanceOf(address(this));\r\n        if (amt > 0) {\r\n            IUsdt(usdt).transfer(owner, amt);\r\n        }\r\n        amt = INterfaces(usdc).balanceOf(address(this));\r\n        if (amt > 0) {\r\n            require(INterfaces(usdc).transfer(owner, amt), ERR_TRANSFER);\r\n        }\r\n        amt = INterfaces(dai).balanceOf(address(this));\r\n        if (amt > 0) {\r\n            require(INterfaces(dai).transfer(owner, amt), ERR_TRANSFER);\r\n        }\r\n        amt = address(this).balance;\r\n        if (amt > 0) {\r\n            payable(owner).transfer(amt);\r\n        }\r\n    }\r\n\r\n    /// we can recover any ERC20 token send in wrong way... for price!\r\n    function recoverErc20(address token) external onlyOwner {\r\n        uint256 amt = INterfaces(token).balanceOf(address(this));\r\n        // do not take deposits\r\n        amt -= _deposited[token];\r\n        if (amt > 0) {\r\n            IUsdt(token).transfer(owner, amt); // use broken ERC20 to ignore return value\r\n        }\r\n    }\r\n\r\n    /// should not be needed, but...\r\n    function recoverEth() external onlyOwner {\r\n        require(block.timestamp > dateEnd, ERR_SOON);\r\n        payable(owner).transfer(address(this).balance);\r\n    }\r\n\r\n    function changeOwner(address _newOwner) external onlyOwner {\r\n        newOwner = _newOwner;\r\n    }\r\n\r\n    function acceptOwnership() external {\r\n        require(\r\n            msg.sender != address(0) && msg.sender == newOwner,\r\n            \"Only NewOwner\"\r\n        );\r\n        newOwner = address(0);\r\n        owner = msg.sender;\r\n    }\r\n}\r\n\r\n// Interfaces for contract interaction\r\ninterface INterfaces {\r\n    function balanceOf(address) external returns (uint256);\r\n\r\n    function transfer(address, uint256) external returns (bool);\r\n\r\n    function transferFrom(\r\n        address,\r\n        address,\r\n        uint256\r\n    ) external returns (bool);\r\n\r\n    // chainlink ETH/USD oracle\r\n    // answer|int256 :  216182781556 - 8 decimals\r\n    function latestRoundData()\r\n        external\r\n        view\r\n        returns (\r\n            uint80 roundId,\r\n            int256 answer,\r\n            uint256 startedAt,\r\n            uint256 updatedAt,\r\n            uint80 answeredInRound\r\n        );\r\n}\r\n\r\n// USDT is not ERC-20 compliant, not returning true on transfers\r\ninterface IUsdt {\r\n    function transfer(address, uint256) external;\r\n\r\n    function transferFrom(\r\n        address,\r\n        address,\r\n        uint256\r\n    ) external;\r\n}\r\n\r\n// rav3n_pl was here","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokensLimit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_startDate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_endDate\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_usdt\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_usdc\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_dai\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_oracle\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"AcceptedETH\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"AcceptedUSD\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"acceptOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"changeOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dai\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dateEnd\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dateStart\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"newOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"oracle\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"payDAI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"payETH\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"payUSDC\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"payUSDT\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"recoverErc20\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"recoverEth\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"saleEnded\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"takeAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"tokensBoughtOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokensLeft\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokensLimit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokensPerEth\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokensSold\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"usdCollected\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"usdc\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"usdt\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]","ContractName":"BigShortBetsSale","CompilerVersion":"v0.8.6+commit.11564f7e","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000d0d82531f85d9ee7ee5bb6c96e01445a0b911d4d000000000000000000000000000000000000000000000000000000000033dc570000000000000000000000000000000000000000000000000000000060f077a00000000000000000000000000000000000000000000000000000000061195620000000000000000000000000dac17f958d2ee523a2206206994597c13d831ec7000000000000000000000000a0b86991c6218b36c1d19d4a2e9eb0ce3606eb480000000000000000000000006b175474e89094c44da98b954eedeac495271d0f0000000000000000000000005f4ec3df9cbd43714fe2740f5e3616155c5b8419","EVMVersion":"Default","Library":"","LicenseType":"Unlicense","Proxy":"0","Implementation":"","SwarmSource":"ipfs://1355fcb3fce38514edbf4fbe97bc5cc0b2873fe8bc3a48f772bea7e20f2a1a2b"}]}