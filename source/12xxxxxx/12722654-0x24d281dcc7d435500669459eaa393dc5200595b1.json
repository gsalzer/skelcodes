{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/strategies/ElonApeStrategy.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.7.6;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\ninterface ICurveSwap {\\n    function exchange(int128 i, int128 j, uint256 _dx, uint256 _min_dy) external;\\n}\\n\\ninterface IBalancerSwap {\\n    function getSpotPrice(address tokenIn, address tokenOut) external view returns (uint spotPrice);\\n\\n    function swapExactAmountIn(\\n        address tokenIn,\\n        uint tokenAmountIn,\\n        address tokenOut,\\n        uint minAmountOut,\\n        uint maxPrice\\n    ) external returns (uint tokenAmountOut, uint spotPriceAfter);\\n\\n    function swapExactAmountOut(\\n        address tokenIn,\\n        uint maxAmountIn,\\n        address tokenOut,\\n        uint tokenAmountOut,\\n        uint maxPrice\\n    ) external returns (uint tokenAmountIn, uint spotPriceAfter);\\n}\\n\\ninterface ISushiSwap {\\n    function swapExactTokensForTokens(\\n        uint256 amountIn,\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint[] memory amounts);\\n\\n    function swapTokensForExactTokens(\\n        uint amountOut,\\n        uint amountInMax,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external returns (uint[] memory amounts);\\n\\n    function getAmountsOut(uint256 amountIn, address[] memory path) external view returns (uint[] memory amounts);\\n}\\n\\ninterface IChainlink {\\n    function latestAnswer() external view returns (int256);\\n}\\n\\ncontract ElonApeStrategy is Ownable {\\n    using SafeERC20 for IERC20;\\n    using SafeMath for uint256;\\n\\n    IERC20 private constant WETH = IERC20(0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2); // 18 decimals\\n    IERC20 private constant USDT = IERC20(0xdAC17F958D2ee523a2206206994597C13D831ec7); // 6 decimals\\n    IERC20 private constant USDC = IERC20(0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48); // 6 decimals\\n    IERC20 private constant DAI = IERC20(0x6B175474E89094C44Da98b954EedeAC495271d0F); // 18 decimals\\n    IERC20 private constant sUSD = IERC20(0x57Ab1ec28D129707052df4dF418D58a2D46d5f51); // 18 decimals\\n\\n    // DeXes\\n    ICurveSwap private constant _cSwap = ICurveSwap(0xA5407eAE9Ba41422680e2e00537571bcC53efBfD);\\n    IBalancerSwap private constant _bSwap = IBalancerSwap(0x055dB9AFF4311788264798356bbF3a733AE181c6);\\n    ISushiSwap private constant _sSwap = ISushiSwap(0xd9e1cE17f2641f24aE83637ab66a2cca9C378B9F);\\n\\n    // Farms\\n    IERC20 private constant sTSLA = IERC20(0x918dA91Ccbc32B7a6A0cc4eCd5987bbab6E31e6D); // 18 decimals\\n    IERC20 private constant WBTC = IERC20(0x2260FAC5E5542a773Aa44fBCfeDf7C193bc2C599); // 8 decimals\\n    IERC20 private constant renDOGE = IERC20(0x3832d2F059E55934220881F831bE501D180671A7); // 8 decimals\\n\\n    // Others\\n    address public vault;\\n    uint256[] public weights; // [sTSLA, WBTC, renDOGE]\\n    uint256 private constant DENOMINATOR = 10000;\\n    bool public isVesting;\\n\\n    event AmtToInvest(uint256 _amount); // In USD (6 decimals)\\n    event CurrentComposition(uint256 _poolSTSLA, uint256 _poolWBTC, uint256 _poolRenDOGE); // in USD (6 decimals)\\n    event TargetComposition(uint256 _poolSTSLA, uint256 _poolWBTC, uint256 _poolRenDOGE); // in USD (6 decimals)\\n\\n    modifier onlyVault {\\n        require(msg.sender == vault, \\\"Only vault\\\");\\n        _;\\n    }\\n\\n    constructor(uint256[] memory _weights) {\\n        weights = _weights;\\n\\n        // Curve\\n        USDT.safeApprove(address(_cSwap), type(uint256).max);\\n        USDC.safeApprove(address(_cSwap), type(uint256).max);\\n        DAI.safeApprove(address(_cSwap), type(uint256).max);\\n        sUSD.safeApprove(address(_cSwap), type(uint256).max);\\n        // Balancer\\n        sUSD.safeApprove(address(_bSwap), type(uint256).max);\\n        sTSLA.safeApprove(address(_bSwap), type(uint256).max);\\n        // Sushi\\n        USDT.safeApprove(address(_sSwap), type(uint256).max);\\n        USDC.safeApprove(address(_sSwap), type(uint256).max);\\n        DAI.safeApprove(address(_sSwap), type(uint256).max);\\n        WETH.safeApprove(address(_sSwap), type(uint256).max);\\n        WBTC.safeApprove(address(_sSwap), type(uint256).max);\\n        renDOGE.safeApprove(address(_sSwap), type(uint256).max);\\n    }\\n\\n    /// @notice Function to set vault address that interact with this contract. This function can only execute once when deployment.\\n    /// @param _vault Address of vault contract \\n    function setVault(address _vault) external onlyOwner {\\n        require(vault == address(0), \\\"Vault set\\\");\\n        vault = _vault;\\n    }\\n\\n    /// @notice Function to invest Stablecoins into farms\\n    /// @param _amountUSDT 6 decimals\\n    /// @param _amountUSDC 6 decimals\\n    /// @param _amountDAI 18 decimals\\n    function invest(uint256 _amountUSDT, uint256 _amountUSDC, uint256 _amountDAI) external onlyVault {\\n        if (_amountUSDT > 0) {\\n            USDT.safeTransferFrom(address(vault), address(this), _amountUSDT);\\n        }\\n        if (_amountUSDC > 0) {\\n            USDC.safeTransferFrom(address(vault), address(this), _amountUSDC);\\n        }\\n        if (_amountDAI > 0) {\\n            DAI.safeTransferFrom(address(vault), address(this), _amountDAI);\\n        }\\n        uint256 _totalInvestInUSD = _amountUSDT.add(_amountUSDC).add(_amountDAI.div(1e12));\\n        require(_totalInvestInUSD > 0, \\\"Not enough Stablecoin to invest\\\");\\n        emit AmtToInvest(_totalInvestInUSD);\\n\\n        (uint256 _poolSTSLA, uint256 _poolWBTC, uint256 _poolRenDOGE) = getFarmsPool();\\n        uint256 _totalPool = _poolSTSLA.add(_poolWBTC).add(_poolRenDOGE).add(_totalInvestInUSD);\\n        // Calculate target composition for each farm\\n        uint256 _poolSTSLATarget = _totalPool.mul(weights[0]).div(DENOMINATOR);\\n        uint256 _poolWBTCTarget = _totalPool.mul(weights[1]).div(DENOMINATOR);\\n        uint256 _poolRenDOGETarget = _totalPool.mul(weights[2]).div(DENOMINATOR);\\n        emit CurrentComposition(_poolSTSLA, _poolWBTC, _poolRenDOGE);\\n        emit TargetComposition(_poolSTSLATarget, _poolWBTCTarget, _poolRenDOGETarget);\\n        // If there is no negative value(need to swap out from farm in order to drive back the composition)\\n        // We proceed with invest funds into 3 farms and drive composition back to target\\n        // Else, we invest all the funds into the farm that is furthest from target composition\\n        if (\\n            _poolSTSLATarget > _poolSTSLA &&\\n            _poolWBTCTarget > _poolWBTC &&\\n            _poolRenDOGETarget > _poolRenDOGE\\n        ) {\\n            // Invest Stablecoins into sTSLA\\n            _investSTSLA(_poolSTSLATarget.sub(_poolSTSLA), _totalInvestInUSD);\\n            // WETH needed for _investWBTC() and _investRenDOGE() instead of Stablecoins\\n            // We can execute swap from Stablecoins to WETH in both function,\\n            // but since swapping is expensive, we swap it once and split WETH to these 2 functions\\n            uint256 _WETHBalance = _swapAllStablecoinsToWETH();\\n            // Get the ETH amount of USD to invest for WBTC and renDOGE\\n            uint256 _investWBTCAmtInUSD = _poolWBTCTarget.sub(_poolWBTC);\\n            uint256 _investRenDOGEAmtInUSD = _poolRenDOGETarget.sub(_poolRenDOGE);\\n            uint256 _investWBTCAmtInETH = _WETHBalance.mul(_investWBTCAmtInUSD).div(_investWBTCAmtInUSD.add(_investRenDOGEAmtInUSD));\\n            // Invest ETH into sTSLA\\n            _investWBTC(_investWBTCAmtInETH);\\n            // Invest ETH into renDOGE\\n            _investRenDOGE(_WETHBalance.sub(_investWBTCAmtInETH));\\n        } else {\\n            // Invest all the funds to the farm that is furthest from target composition\\n            uint256 _furthest;\\n            uint256 _farmIndex;\\n            uint256 _diff;\\n            // 1. Find out the farm that is furthest from target composition\\n            if (_poolSTSLATarget > _poolSTSLA) {\\n                _furthest = _poolSTSLATarget.sub(_poolSTSLA);\\n                _farmIndex = 0;\\n            }\\n            if (_poolWBTCTarget > _poolWBTC) {\\n                _diff = _poolWBTCTarget.sub(_poolWBTC);\\n                if (_diff > _furthest) {\\n                    _furthest = _diff;\\n                    _farmIndex = 1;\\n                }\\n            }\\n            if (_poolRenDOGETarget > _poolRenDOGE) {\\n                _diff = _poolRenDOGETarget.sub(_poolRenDOGE);\\n                if (_diff > _furthest) {\\n                    _furthest = _diff;\\n                    _farmIndex = 2;\\n                }\\n            }\\n            // 2. Put all the yield into the farm that is furthest from target composition\\n            if (_farmIndex == 0) {\\n                _investSTSLA(_totalInvestInUSD, _totalInvestInUSD);\\n            } else {\\n                uint256 _WETHBalance = _swapAllStablecoinsToWETH();\\n                if (_farmIndex == 1) {\\n                    _investWBTC(_WETHBalance);\\n                } else {\\n                    _investRenDOGE(_WETHBalance);\\n                }\\n            }\\n        }\\n    }\\n\\n    /// @notice Function to swap funds into sTSLA\\n    /// @param _amount Amount to invest in sTSLA in USD (6 decimals)\\n    /// @param _totalInvestInUSD Total amount of USD to invest (6 decimals)\\n    function _investSTSLA(uint256 _amount, uint256 _totalInvestInUSD) private {\\n        // Swap Stablecoins to sUSD with Curve\\n        uint256 _USDTBalance = USDT.balanceOf(address(this));\\n        if (_USDTBalance > 1e6) { // Set minimum swap amount to avoid error\\n            _cSwap.exchange(2, 3, _USDTBalance.mul(_amount).div(_totalInvestInUSD), 0);\\n        }\\n        uint256 _USDCBalance = USDC.balanceOf(address(this));\\n        if (_USDCBalance > 1e6) {\\n            _cSwap.exchange(1, 3, _USDCBalance.mul(_amount).div(_totalInvestInUSD), 0);\\n        }\\n        uint256 _DAIBalance = DAI.balanceOf(address(this));\\n        if (_DAIBalance > 1e18) {\\n            _cSwap.exchange(0, 3, _DAIBalance.mul(_amount).div(_totalInvestInUSD), 0);\\n        }\\n        uint256 _sUSDBalance = sUSD.balanceOf(address(this));\\n        // Swap sUSD to sTSLA with Balancer\\n        _bSwap.swapExactAmountIn(address(sUSD), _sUSDBalance, address(sTSLA), 0, type(uint256).max);\\n    }\\n\\n    /// @notice Function to swap funds into WBTC\\n    /// @param _amount Amount to invest in ETH\\n    function _investWBTC(uint256 _amount) private {\\n        _swapExactTokensForTokens(address(WETH), address(WBTC), _amount);\\n    }\\n\\n    /// @notice Function to swap funds into renDOGE\\n    /// @param _amount Amount to invest in ETH\\n    function _investRenDOGE(uint256 _amount) private {\\n        _swapExactTokensForTokens(address(WETH), address(renDOGE), _amount);\\n    }\\n\\n    /// @notice Function to swap all available Stablecoins to WETH\\n    /// @return Balance of received WETH\\n    function _swapAllStablecoinsToWETH() private returns (uint256) {\\n        uint256 _USDTBalance = USDT.balanceOf(address(this));\\n        if (_USDTBalance > 1e6) { // Set minimum swap amount to avoid error\\n            _swapExactTokensForTokens(address(USDT), address(WETH), _USDTBalance);\\n        }\\n        uint256 _USDCBalance = USDC.balanceOf(address(this));\\n        if (_USDCBalance > 1e6) {\\n            _swapExactTokensForTokens(address(USDC), address(WETH), _USDCBalance);\\n        }\\n        uint256 _DAIBalance = DAI.balanceOf(address(this));\\n        if (_DAIBalance > 1e18) {\\n            _swapExactTokensForTokens(address(DAI), address(WETH), _DAIBalance);\\n        }\\n        return WETH.balanceOf(address(this));\\n    }\\n\\n    /// @notice Function to withdraw Stablecoins from farms if withdraw amount > amount keep in vault\\n    /// @param _amount Amount to withdraw in USD (6 decimals)\\n    /// @param _tokenIndex Type of Stablecoin to withdraw\\n    /// @return Amount of actual withdraw in USD (6 decimals)\\n    function withdraw(uint256 _amount, uint256 _tokenIndex) external onlyVault returns (uint256) {\\n        uint256 _totalPool = getTotalPool();\\n        // Determine type of Stablecoin to withdraw\\n        (IERC20 _token, int128 _curveIndex) = _determineTokenTypeAndCurveIndex(_tokenIndex);\\n        uint256 _withdrawAmt;\\n        if (!isVesting) {\\n            // Swap sTSLA to Stablecoin\\n            uint256 _sTSLAAmtToWithdraw = (sTSLA.balanceOf(address(this))).mul(_amount).div(_totalPool);\\n            _withdrawSTSLA(_sTSLAAmtToWithdraw, _curveIndex);\\n            // Swap WBTC to WETH\\n            uint256 _WBTCAmtToWithdraw = (WBTC.balanceOf(address(this))).mul(_amount).div(_totalPool);\\n            _swapExactTokensForTokens(address(WBTC), address(WETH), _WBTCAmtToWithdraw);\\n            // Swap renDOGE to WETH\\n            uint256 _renDOGEAmtToWithdraw = (renDOGE.balanceOf(address(this))).mul(_amount).div(_totalPool);\\n            _swapExactTokensForTokens(address(renDOGE), address(WETH), _renDOGEAmtToWithdraw);\\n            // Swap WETH to Stablecoin\\n            _swapExactTokensForTokens(address(WETH), address(_token), WETH.balanceOf(address(this)));\\n            _withdrawAmt = _token.balanceOf(address(this));\\n        } else {\\n            uint256 _withdrawAmtInETH = (WETH.balanceOf(address(this))).mul(_amount).div(_totalPool);\\n            // Swap WETH to Stablecoin\\n            uint256[] memory _amountsOut = _swapExactTokensForTokens(address(WETH), address(_token), _withdrawAmtInETH);\\n            _withdrawAmt = _amountsOut[1];\\n        }\\n        _token.safeTransfer(address(vault), _withdrawAmt);\\n        if (_token == DAI) { // To make consistency of 6 decimals return\\n            _withdrawAmt = _withdrawAmt.div(1e12);\\n        }\\n        return _withdrawAmt;\\n    }\\n\\n    /// @param _amount Amount of sTSLA to withdraw (18 decimals)\\n    /// @param _curveIndex Index of Stablecoin to swap in Curve\\n    function _withdrawSTSLA(uint256 _amount, int128 _curveIndex) private {\\n        (uint256 _amountOut,) = _bSwap.swapExactAmountIn(address(sTSLA), _amount, address(sUSD), 0, type(uint256).max);\\n        _cSwap.exchange(3, _curveIndex, _amountOut, 0);\\n    }\\n\\n    /// @notice Function to release Stablecoin to vault by swapping out farm\\n    /// @param _tokenIndex Type of Stablecoin to release (0 for USDT, 1 for USDC, 2 for DAI)\\n    /// @param _farmIndex Type of farm to swap out (0 for sTSLA, 1 for WBTC, 2 for renDOGE)\\n    /// @param _amount Amount of Stablecoin to release (6 decimals)\\n    function releaseStablecoinsToVault(uint256 _tokenIndex, uint256 _farmIndex, uint256 _amount) external onlyVault {\\n        // Determine type of Stablecoin to release\\n        (IERC20 _token, int128 _curveIndex) = _determineTokenTypeAndCurveIndex(_tokenIndex);\\n        // Swap out farm token to Stablecoin\\n        if (_farmIndex == 0) {\\n            _amount = _amount.mul(1e12);\\n            _bSwap.swapExactAmountOut(address(sTSLA), type(uint256).max, address(sUSD), _amount, type(uint256).max);\\n            _cSwap.exchange(3, _curveIndex, _amount, 0);\\n            _token.safeTransfer(address(vault), _token.balanceOf(address(this)));\\n        } else {\\n            if (_token == DAI) { // Follow DAI decimals\\n                _amount = _amount.mul(1e12);\\n            }\\n            // Get amount of WETH from Stablecoin input as amount out swapping from farm\\n            uint256[] memory _amountsOut = _sSwap.getAmountsOut(_amount, _getPath(address(_token), address(WETH)));\\n            IERC20 _farm;\\n            if (_farmIndex == 1) {\\n                _farm = WBTC;\\n            } else {\\n                _farm = renDOGE;\\n            }\\n            // Swap farm to exact amount of WETH above\\n            _sSwap.swapTokensForExactTokens(_amountsOut[1], type(uint256).max, _getPath(address(_farm), address(WETH)), address(this), block.timestamp);\\n            // Swap WETH to Stablecoin\\n            _sSwap.swapExactTokensForTokens(_amountsOut[1], 0, _getPath(address(WETH), address(_token)), address(vault), block.timestamp);\\n        }\\n    }\\n\\n    /// @notice Function to withdraw all funds from all farms and swap to WETH\\n    function emergencyWithdraw() external onlyVault {\\n        // sTSLA -> sUSD -> USDT -> WETH\\n        _withdrawSTSLA(sTSLA.balanceOf(address(this)), 2);\\n        _swapExactTokensForTokens(address(USDT), address(WETH), USDT.balanceOf(address(this)));\\n        // WBTC -> WETH\\n        _swapExactTokensForTokens(address(WBTC), address(WETH), WBTC.balanceOf(address(this)));\\n        // renDOGE -> WETH\\n        _swapExactTokensForTokens(address(renDOGE), address(WETH), renDOGE.balanceOf(address(this)));\\n\\n        isVesting = true;\\n    }\\n\\n    /// @notice Function to invest WETH into farms\\n    function reinvest() external onlyVault {\\n        isVesting = false;\\n        uint256 _WETHBalance = WETH.balanceOf(address(this));\\n        // sTSLA (WETH -> USDT -> sUSD -> sTSLA)\\n        _swapExactTokensForTokens(address(WETH), address(USDT), _WETHBalance.mul(weights[0]).div(DENOMINATOR));\\n        _investSTSLA(1, 1); // Invest all avalaible Stablecoins\\n        // WBTC (WETH -> WBTC)\\n        _investWBTC(_WETHBalance.mul(weights[1]).div(DENOMINATOR));\\n        // renDOGE (WETH -> renDOGE)\\n        _investRenDOGE(WETH.balanceOf(address(this)));\\n    }\\n\\n    /// @notice Function to approve vault to migrate funds from this contract to new strategy contract\\n    function approveMigrate() external onlyOwner {\\n        require(isVesting, \\\"Not in vesting state\\\");\\n        WETH.safeApprove(address(vault), type(uint256).max);\\n    }\\n\\n    /// @notice Function to set weight of farms\\n    /// @param _weights Array with new weight(percentage) of farms (3 elements, DENOMINATOR = 10000)\\n    function setWeights(uint256[] memory _weights) external onlyVault {\\n        weights = _weights;\\n    }\\n\\n    /// @notice Function to swap tokens with Sushi\\n    /// @param _tokenA Token to be swapped\\n    /// @param _tokenB Token to be received\\n    /// @param _amountIn Amount of token to be swapped\\n    /// @return _amounts Array that contains amounts of swapped tokens\\n    function _swapExactTokensForTokens(address _tokenA, address _tokenB, uint256 _amountIn) private returns (uint256[] memory _amounts) {\\n        address[] memory _path = _getPath(_tokenA, _tokenB);\\n        uint256[] memory _amountsOut = _sSwap.getAmountsOut(_amountIn, _path);\\n        if (_amountsOut[1] > 0) {\\n            _amounts = _sSwap.swapExactTokensForTokens(_amountIn, 0, _path, address(this), block.timestamp);\\n        }\\n    }\\n\\n    /// @notice Function to get path for Sushi swap functions\\n    /// @param _tokenA Token to be swapped\\n    /// @param _tokenB Token to be received\\n    /// @return Array of addresses\\n    function _getPath(address _tokenA, address _tokenB) private pure returns (address[] memory) {\\n        address[] memory _path = new address[](2);\\n        _path[0] = _tokenA;\\n        _path[1] = _tokenB;\\n        return _path;\\n    }\\n\\n    /// @notice Function to determine type of Stablecoin and Curve index for Stablecoin\\n    /// @param _tokenIndex Type of Stablecoin\\n    /// @return Type of Stablecoin in IERC20 and Curve index for Stablecoin\\n    function _determineTokenTypeAndCurveIndex(uint256 _tokenIndex) private pure returns (IERC20, int128) {\\n        IERC20 _token;\\n        int128 _curveIndex;\\n        if (_tokenIndex == 0) {\\n            _token = USDT;\\n            _curveIndex = 2;\\n        } else if (_tokenIndex == 1) {\\n            _token = USDC;\\n            _curveIndex = 1;\\n        } else {\\n            _token = DAI;\\n            _curveIndex = 0;\\n        }\\n        return (_token, _curveIndex);\\n    }\\n\\n    /// @notice Function to get current price of ETH\\n    /// @return Current price of ETH in USD (8 decimals)\\n    function _getCurrentPriceOfETHInUSD() private view returns (uint256) {\\n        IChainlink _pricefeed = IChainlink(0x5f4eC3Df9cbd43714FE2740f5E3616155c5b8419);\\n        return uint256(_pricefeed.latestAnswer());\\n    }\\n\\n    /// @notice Get total pool (sum of 3 tokens)\\n    /// @return Total pool in USD (6 decimals)\\n    function getTotalPool() public view returns (uint256) {\\n        if (!isVesting) {\\n            (uint256 _poolSTSLA, uint256 _poolWBTC, uint256 _poolrenDOGE) = getFarmsPool();\\n            return _poolSTSLA.add(_poolWBTC).add(_poolrenDOGE);\\n        } else {\\n            uint256 _price = _getCurrentPriceOfETHInUSD();\\n            return (WETH.balanceOf(address(this))).mul(_price).div(1e20);\\n        }\\n    }\\n\\n    /// @notice Get current farms pool (current composition)\\n    /// @return Each farm pool in USD (6 decimals)\\n    function getFarmsPool() public view returns (uint256, uint256, uint256) {\\n        uint256 _price = _getCurrentPriceOfETHInUSD();\\n        // sTSLA\\n        uint256 _sTSLAPriceInUSD = _bSwap.getSpotPrice(address(sUSD), address(sTSLA)); // 18 decimals\\n        uint256 _poolSTSLA = (sTSLA.balanceOf(address(this))).mul(_sTSLAPriceInUSD).div(1e30);\\n        // WBTC\\n        uint256[] memory _WBTCPriceInETH = _sSwap.getAmountsOut(1e8, _getPath(address(WBTC), address(WETH)));\\n        uint256 _poolWBTC = (WBTC.balanceOf(address(this))).mul(_WBTCPriceInETH[1].mul(_price)).div(1e28);\\n        // renDOGE\\n        uint256[] memory _renDOGEPriceInETH = _sSwap.getAmountsOut(1e8, _getPath(address(renDOGE), address(WETH)));\\n        uint256 _poolrenDOGE = (renDOGE.balanceOf(address(this))).mul(_renDOGEPriceInETH[1].mul(_price)).div(1e28);\\n\\n        return (_poolSTSLA, _poolWBTC, _poolrenDOGE);\\n    }\\n}\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"../../math/SafeMath.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using SafeMath for uint256;\\n    using Address for address;\\n\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        // solhint-disable-next-line max-line-length\\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \\\"SafeERC20: decreased allowance below zero\\\");\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) { // Return data is optional\\n            // solhint-disable-next-line max-line-length\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/math/SafeMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        uint256 c = a + b;\\n        if (c < a) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b > a) return (false, 0);\\n        return (true, a - b);\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) return (true, 0);\\n        uint256 c = a * b;\\n        if (c / a != b) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a / b);\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a % b);\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b <= a, \\\"SafeMath: subtraction overflow\\\");\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0) return 0;\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: division by zero\\\");\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: modulo by zero\\\");\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor () internal {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.2 <0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"metadata\": {\r\n      \"useLiteralContent\": true\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}","ABI":"[{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_weights\",\"type\":\"uint256[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"AmtToInvest\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_poolSTSLA\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_poolWBTC\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_poolRenDOGE\",\"type\":\"uint256\"}],\"name\":\"CurrentComposition\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_poolSTSLA\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_poolWBTC\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_poolRenDOGE\",\"type\":\"uint256\"}],\"name\":\"TargetComposition\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"approveMigrate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"emergencyWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getFarmsPool\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTotalPool\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amountUSDT\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amountUSDC\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amountDAI\",\"type\":\"uint256\"}],\"name\":\"invest\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isVesting\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"reinvest\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_farmIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"releaseStablecoinsToVault\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_vault\",\"type\":\"address\"}],\"name\":\"setVault\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_weights\",\"type\":\"uint256[]\"}],\"name\":\"setWeights\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vault\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"weights\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_tokenIndex\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"ElonApeStrategy","CompilerVersion":"v0.7.6+commit.7338295f","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000030000000000000000000000000000000000000000000000000000000000000d050000000000000000000000000000000000000000000000000000000000000d050000000000000000000000000000000000000000000000000000000000000d05","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}