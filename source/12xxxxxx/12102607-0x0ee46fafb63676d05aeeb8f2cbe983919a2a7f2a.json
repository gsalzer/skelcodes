{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.5.0;\r\n\r\n/**\r\n * The TokenFarm contract does this and that...\r\n */\r\n\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        // Solidity only automatically asserts when dividing by 0\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts with custom message when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\ncontract IERC20 {\r\n    function totalSupply() external view returns (uint256);\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n    function decimals() public view returns (uint8);\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\ncontract IERC20Mintable {\r\n    function totalSupply() external view returns (uint256);\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n    function decimals() public view returns (uint8);\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n    function mint(address _to,uint256 _value) public;\r\n    function burn(uint256 _value) public;\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n\r\ncontract TokenFarm {\r\n    using SafeMath for uint256;\r\n\tmodifier onlyOwner {\r\n        require(\r\n            msg.sender == owner,\r\n            \"Only owner can call this function.\"\r\n        );\r\n        _;\r\n    }\r\n\tmodifier onlyModerators {\r\n        require(\r\n            Admins[msg.sender]==true,\r\n            \"Only owner can call this function.\"\r\n        );\r\n        _;\r\n    }\r\n\r\n    event Stake(uint256 amount, address token,address staker,uint256 stakeTime);\r\n    event Unstake(address token,address staker);\r\n\r\n    address public owner;\r\n    string public name = \"Clash Farm\";\r\n    IERC20Mintable public dappToken;\r\n\r\n\r\n    struct staker {\r\n        uint256 id;\r\n        mapping(address=> uint256) balance;\r\n        mapping(address=> uint256) lockedUpTill;\r\n        mapping(address=> uint256) timestamp;\r\n        mapping(address=> uint256) startTimestamp;\r\n    }\r\n\r\n    struct rate {\r\n        uint256 rate;\r\n        bool exists;\r\n    }\r\n\r\n    mapping(address => uint256) public totalStaked;\r\n    address[] public tokenPools;\r\n    mapping(address => staker) public stakers;\r\n    mapping(address => rate) public RatePerCoin;\r\n\tmapping (address=>bool) Admins;\r\n    uint256 public minimumDaysLockup=3;\r\n    uint256 public penaltyFee=10;\r\n\r\n    constructor(IERC20Mintable _dapptoken, address _spiritclashtoken)\r\n        public\r\n    {\r\n        dappToken = _dapptoken;\r\n        owner = msg.sender;\r\n        Admins[msg.sender]=true;\r\n\t\tsetCoinRate(_spiritclashtoken,80000);\r\n    }\r\n\r\n    function stakeTokens(uint256 _amount,IERC20 token,uint256 lockupTime) external {\r\n        require(lockupTime>=minimumDaysLockup && lockupTime<366,\"lockup time not allowed\");\r\n\t\trequire(RatePerCoin[address(token)].exists==true,\"token doesnt have a rate\");\r\n        require(_amount > 0, \"amount cannot be 0\");\r\n        token.transferFrom(msg.sender, address(this), _amount);\r\n\r\n        stakers[msg.sender].balance[address(token)] = stakers[msg.sender].balance[address(token)].add( _amount);\r\n        totalStaked[address(token)] = totalStaked[address(token)].add( _amount);\r\n        stakers[msg.sender].timestamp[address(token)] = block.timestamp;\r\n        stakers[msg.sender].startTimestamp[address(token)] = block.timestamp;\r\n        stakers[msg.sender].lockedUpTill[address(token)]= block.timestamp.add(lockupTime* 1 days);\r\n        emit Stake(_amount,address(token),msg.sender,lockupTime);\r\n    }\r\n\r\n    function unstakeToken(IERC20 token) external {\r\n        staker storage stake = stakers[msg.sender];\r\n        uint256 balance = stake.balance[address(token)];\r\n\r\n        require(balance > 0, \"staking balance cannot be 0\");\r\n        \r\n        claimToken(address(token));\r\n\r\n        stake.balance[address(token)] = 0;\r\n        totalStaked[address(token)] = totalStaked[address(token)].sub(balance);\r\n\r\n        token.transfer(msg.sender, balance);\r\n        emit Unstake(address(token),msg.sender);\r\n    }\r\n\r\n    function unstakeTokens() external{\r\n        claimTokens();\r\n        for (uint i=0; i< tokenPools.length; i++){\r\n            uint256 balance = stakers[msg.sender].balance[tokenPools[i]];\r\n            if(balance > 0){\r\n                totalStaked[tokenPools[i]] = totalStaked[tokenPools[i]].sub(balance);\r\n                stakers[msg.sender].balance[tokenPools[i]] = 0;\r\n                IERC20(tokenPools[i]).transfer(msg.sender, balance);\r\n                emit Unstake(address(tokenPools[i]),msg.sender);\r\n            }\r\n        }\r\n    }\r\n\r\n\tfunction earned(address token) public view returns(uint256){ \r\n\t\treturn (stakers[msg.sender].balance[token]*\r\n            (RatePerCoin[token].rate)                 \r\n                    /(365 days)\r\n            *(\r\n                block.timestamp.sub(stakers[msg.sender].timestamp[token])\r\n            )\r\n        )/10;\r\n\t}\r\n\r\n    function timeStaked(address token) public view returns(uint256){\r\n        return block.timestamp.sub(stakers[msg.sender].startTimestamp[token]);\r\n    }\r\n\r\n    function claimTokens() public {\r\n        uint256 rewardbal=0;\r\n        uint256 fee =0;\r\n\t\tfor (uint i=0; i< tokenPools.length; i++){\r\n            address token = tokenPools[i];\r\n            if(stakers[msg.sender].balance[token]>0){\r\n                uint256 earnings = earned(token);\r\n                if(block.timestamp<stakers[msg.sender].lockedUpTill[token]){\r\n                    fee= fee.add((earnings.div(100).mul(penaltyFee)));\r\n                }\r\n                stakers[msg.sender].timestamp[token]=block.timestamp;\r\n                rewardbal= rewardbal.add(earnings);\r\n            }\r\n        }\r\n        if(fee>0){\r\n            IERC20Mintable(dappToken).mint(owner, fee);\r\n            rewardbal = rewardbal.sub(fee);\r\n        }\r\n        IERC20Mintable(dappToken).mint(msg.sender, rewardbal);\r\n    }\r\n    function claimToken(address token) public {\r\n        require(stakers[msg.sender].balance[token]>0,\"you have no balance and cant claim\");\r\n        uint256 earnings = earned(token);\r\n        if(block.timestamp < stakers[msg.sender].lockedUpTill[address(token)]){\r\n            uint256 fee = earnings.div(100).mul(penaltyFee);\r\n            earnings = earnings.sub(fee);\r\n            IERC20Mintable(dappToken).mint(owner, fee);\r\n        }\r\n        stakers[msg.sender].timestamp[token]=block.timestamp;\r\n        IERC20Mintable(dappToken).mint(msg.sender, earnings);\r\n    }\r\n\r\n    function setMinimumLockup(uint256 _days) external onlyModerators {\r\n        minimumDaysLockup =_days;\r\n    }\r\n\r\n    function setPenaltyFee(uint256 _fee) external onlyModerators {\r\n        penaltyFee =_fee;\r\n    }\r\n\r\n    function transferOwnership(address _newOwner) external onlyOwner{\r\n        owner=_newOwner;\r\n    }\r\n\r\n    function setCoinRate(address coin,uint256 Rate) public onlyModerators {\r\n        RatePerCoin[coin].rate =Rate;\r\n        if(RatePerCoin[coin].exists == false){\r\n            tokenPools.push(coin);\r\n            RatePerCoin[coin].exists = true;\r\n        }\r\n    }\r\n\r\n\tfunction setAdmin(address addy,bool value) external onlyOwner{\r\n\t\tAdmins[addy]= value;\r\n\t}\r\n    function stakingBalance(address token) external view returns(uint256) {\r\n        return stakers[msg.sender].balance[token];\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[{\"name\":\"token\",\"type\":\"address\"}],\"name\":\"earned\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"tokenPools\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_fee\",\"type\":\"uint256\"}],\"name\":\"setPenaltyFee\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"RatePerCoin\",\"outputs\":[{\"name\":\"rate\",\"type\":\"uint256\"},{\"name\":\"exists\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"token\",\"type\":\"address\"}],\"name\":\"claimToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"penaltyFee\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"token\",\"type\":\"address\"}],\"name\":\"stakingBalance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"claimTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"addy\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"bool\"}],\"name\":\"setAdmin\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"dappToken\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"token\",\"type\":\"address\"}],\"name\":\"unstakeToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"token\",\"type\":\"address\"}],\"name\":\"timeStaked\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"minimumDaysLockup\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_days\",\"type\":\"uint256\"}],\"name\":\"setMinimumLockup\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"stakers\",\"outputs\":[{\"name\":\"id\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"totalStaked\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unstakeTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"coin\",\"type\":\"address\"},{\"name\":\"Rate\",\"type\":\"uint256\"}],\"name\":\"setCoinRate\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_amount\",\"type\":\"uint256\"},{\"name\":\"token\",\"type\":\"address\"},{\"name\":\"lockupTime\",\"type\":\"uint256\"}],\"name\":\"stakeTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_dapptoken\",\"type\":\"address\"},{\"name\":\"_spiritclashtoken\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"staker\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"stakeTime\",\"type\":\"uint256\"}],\"name\":\"Stake\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"staker\",\"type\":\"address\"}],\"name\":\"Unstake\",\"type\":\"event\"}]","ContractName":"TokenFarm","CompilerVersion":"v0.5.0+commit.1d4f565a","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"000000000000000000000000b934c43268adaedee892c4e8d3d56b010498e80c0000000000000000000000006fa0952355607dfb2d399138b7fe10eb90f245e4","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"bzzr://8b4e000214a54dd69f9be32a48a35e2828181e1b5f65f27b0c38fdce86fdb884"}]}