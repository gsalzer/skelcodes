{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/mainnet/connectors/aave/v2/main.sol\": {\r\n      \"content\": \"pragma solidity ^0.7.0;\\n\\n/**\\n * @title Aave v2.\\n * @dev Lending & Borrowing.\\n */\\n\\nimport { TokenInterface } from \\\"../../../common/interfaces.sol\\\";\\nimport { Stores } from \\\"../../../common/stores.sol\\\";\\nimport { Helpers } from \\\"./helpers.sol\\\";\\nimport { Events } from \\\"./events.sol\\\";\\nimport { AaveInterface } from \\\"./interface.sol\\\";\\n\\nabstract contract AaveResolver is Events, Helpers {\\n    /**\\n     * @dev Deposit ETH/ERC20_Token.\\n     * @notice Deposit a token to Aave v2 for lending / collaterization.\\n     * @param token The address of the token to deposit.(For ETH: 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE)\\n     * @param amt The amount of the token to deposit. (For max: `uint256(-1)`)\\n     * @param getId ID to retrieve amt.\\n     * @param setId ID stores the amount of tokens deposited.\\n    */\\n    function deposit(\\n        address token,\\n        uint256 amt,\\n        uint256 getId,\\n        uint256 setId\\n    ) external payable returns (string memory _eventName, bytes memory _eventParam) {\\n        uint _amt = getUint(getId, amt);\\n\\n        AaveInterface aave = AaveInterface(aaveProvider.getLendingPool());\\n\\n        bool isEth = token == ethAddr;\\n        address _token = isEth ? wethAddr : token;\\n\\n        TokenInterface tokenContract = TokenInterface(_token);\\n\\n        if (isEth) {\\n            _amt = _amt == uint(-1) ? address(this).balance : _amt;\\n            convertEthToWeth(isEth, tokenContract, _amt);\\n        } else {\\n            _amt = _amt == uint(-1) ? tokenContract.balanceOf(address(this)) : _amt;\\n        }\\n\\n        approve(tokenContract, address(aave), _amt);\\n\\n        aave.deposit(_token, _amt, address(this), referralCode);\\n\\n        if (!getIsColl(_token)) {\\n            aave.setUserUseReserveAsCollateral(_token, true);\\n        }\\n\\n        setUint(setId, _amt);\\n\\n        _eventName = \\\"LogDeposit(address,uint256,uint256,uint256)\\\";\\n        _eventParam = abi.encode(token, _amt, getId, setId);\\n    }\\n\\n    /**\\n     * @dev Withdraw ETH/ERC20_Token.\\n     * @notice Withdraw deposited token from Aave v2\\n     * @param token The address of the token to withdraw.(For ETH: 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE)\\n     * @param amt The amount of the token to withdraw. (For max: `uint256(-1)`)\\n     * @param getId ID to retrieve amt.\\n     * @param setId ID stores the amount of tokens withdrawn.\\n    */\\n    function withdraw(\\n        address token,\\n        uint256 amt,\\n        uint256 getId,\\n        uint256 setId\\n    ) external payable returns (string memory _eventName, bytes memory _eventParam) {\\n        uint _amt = getUint(getId, amt);\\n\\n        AaveInterface aave = AaveInterface(aaveProvider.getLendingPool());\\n        bool isEth = token == ethAddr;\\n        address _token = isEth ? wethAddr : token;\\n\\n        TokenInterface tokenContract = TokenInterface(_token);\\n\\n        uint initialBal = tokenContract.balanceOf(address(this));\\n        aave.withdraw(_token, _amt, address(this));\\n        uint finalBal = tokenContract.balanceOf(address(this));\\n\\n        _amt = sub(finalBal, initialBal);\\n\\n        convertWethToEth(isEth, tokenContract, _amt);\\n        \\n        setUint(setId, _amt);\\n\\n        _eventName = \\\"LogWithdraw(address,uint256,uint256,uint256)\\\";\\n        _eventParam = abi.encode(token, _amt, getId, setId);\\n    }\\n\\n    /**\\n     * @dev Borrow ETH/ERC20_Token.\\n     * @notice Borrow a token using Aave v2\\n     * @param token The address of the token to borrow.(For ETH: 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE)\\n     * @param amt The amount of the token to borrow.\\n     * @param rateMode The type of borrow debt. (For Stable: 1, Variable: 2)\\n     * @param getId ID to retrieve amt.\\n     * @param setId ID stores the amount of tokens borrowed.\\n    */\\n    function borrow(\\n        address token,\\n        uint256 amt,\\n        uint256 rateMode,\\n        uint256 getId,\\n        uint256 setId\\n    ) external payable returns (string memory _eventName, bytes memory _eventParam) {\\n        uint _amt = getUint(getId, amt);\\n\\n        AaveInterface aave = AaveInterface(aaveProvider.getLendingPool());\\n\\n        bool isEth = token == ethAddr;\\n        address _token = isEth ? wethAddr : token;\\n\\n        aave.borrow(_token, _amt, rateMode, referralCode, address(this));\\n        convertWethToEth(isEth, TokenInterface(_token), _amt);\\n\\n        setUint(setId, _amt);\\n\\n        _eventName = \\\"LogBorrow(address,uint256,uint256,uint256,uint256)\\\";\\n        _eventParam = abi.encode(token, _amt, rateMode, getId, setId);\\n    }\\n\\n    /**\\n     * @dev Payback borrowed ETH/ERC20_Token.\\n     * @notice Payback debt owed.\\n     * @param token The address of the token to payback.(For ETH: 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE)\\n     * @param amt The amount of the token to payback. (For max: `uint256(-1)`)\\n     * @param rateMode The type of debt paying back. (For Stable: 1, Variable: 2)\\n     * @param getId ID to retrieve amt.\\n     * @param setId ID stores the amount of tokens paid back.\\n    */\\n    function payback(\\n        address token,\\n        uint256 amt,\\n        uint256 rateMode,\\n        uint256 getId,\\n        uint256 setId\\n    ) external payable returns (string memory _eventName, bytes memory _eventParam) {\\n        uint _amt = getUint(getId, amt);\\n\\n        AaveInterface aave = AaveInterface(aaveProvider.getLendingPool());\\n\\n        bool isEth = token == ethAddr;\\n        address _token = isEth ? wethAddr : token;\\n\\n        TokenInterface tokenContract = TokenInterface(_token);\\n\\n        _amt = _amt == uint(-1) ? getPaybackBalance(_token, rateMode) : _amt;\\n\\n        if (isEth) convertEthToWeth(isEth, tokenContract, _amt);\\n\\n        approve(tokenContract, address(aave), _amt);\\n\\n        aave.repay(_token, _amt, rateMode, address(this));\\n\\n        setUint(setId, _amt);\\n\\n        _eventName = \\\"LogPayback(address,uint256,uint256,uint256,uint256)\\\";\\n        _eventParam = abi.encode(token, _amt, rateMode, getId, setId);\\n    }\\n\\n    /**\\n     * @dev Enable collateral\\n     * @notice Enable an array of tokens as collateral\\n     * @param tokens Array of tokens to enable collateral\\n    */\\n    function enableCollateral(\\n        address[] calldata tokens\\n    ) external payable returns (string memory _eventName, bytes memory _eventParam) {\\n        uint _length = tokens.length;\\n        require(_length > 0, \\\"0-tokens-not-allowed\\\");\\n\\n        AaveInterface aave = AaveInterface(aaveProvider.getLendingPool());\\n\\n        for (uint i = 0; i < _length; i++) {\\n            address token = tokens[i];\\n            if (getCollateralBalance(token) > 0 && !getIsColl(token)) {\\n                aave.setUserUseReserveAsCollateral(token, true);\\n            }\\n        }\\n\\n        _eventName = \\\"LogEnableCollateral(address[])\\\";\\n        _eventParam = abi.encode(tokens);\\n    }\\n\\n    /**\\n     * @dev Swap borrow rate mode\\n     * @notice Swaps user borrow rate mode between variable and stable\\n     * @param token The address of the token to swap borrow rate.(For ETH: 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE)\\n     * @param rateMode Desired borrow rate mode. (Stable = 1, Variable = 2)\\n    */\\n    function swapBorrowRateMode(\\n        address token,\\n        uint rateMode\\n    ) external payable returns (string memory _eventName, bytes memory _eventParam) {\\n        AaveInterface aave = AaveInterface(aaveProvider.getLendingPool());\\n\\n        uint currentRateMode = rateMode == 1 ? 2 : 1;\\n\\n        if (getPaybackBalance(token, currentRateMode) > 0) {\\n            aave.swapBorrowRateMode(token, rateMode);\\n        }\\n\\n        _eventName = \\\"LogSwapRateMode(address,uint256)\\\";\\n        _eventParam = abi.encode(token, rateMode);\\n    }\\n}\\n\\ncontract ConnectV2AaveV2 is AaveResolver {\\n    string constant public name = \\\"AaveV2-v1.1\\\";\\n}\\n\"\r\n    },\r\n    \"contracts/mainnet/common/interfaces.sol\": {\r\n      \"content\": \"pragma solidity ^0.7.0;\\n\\ninterface TokenInterface {\\n    function approve(address, uint256) external;\\n    function transfer(address, uint) external;\\n    function transferFrom(address, address, uint) external;\\n    function deposit() external payable;\\n    function withdraw(uint) external;\\n    function balanceOf(address) external view returns (uint);\\n    function decimals() external view returns (uint);\\n}\\n\\ninterface MemoryInterface {\\n    function getUint(uint id) external returns (uint num);\\n    function setUint(uint id, uint val) external;\\n}\\n\\ninterface InstaMapping {\\n    function cTokenMapping(address) external view returns (address);\\n    function gemJoinMapping(bytes32) external view returns (address);\\n}\\n\\ninterface AccountInterface {\\n    function enable(address) external;\\n    function disable(address) external;\\n    function isAuth(address) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"contracts/mainnet/common/stores.sol\": {\r\n      \"content\": \"pragma solidity ^0.7.0;\\n\\nimport { MemoryInterface, InstaMapping } from \\\"./interfaces.sol\\\";\\n\\n\\nabstract contract Stores {\\n\\n  /**\\n   * @dev Return ethereum address\\n   */\\n  address constant internal ethAddr = 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE;\\n\\n  /**\\n   * @dev Return Wrapped ETH address\\n   */\\n  address constant internal wethAddr = 0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2;\\n\\n  /**\\n   * @dev Return memory variable address\\n   */\\n  MemoryInterface constant internal instaMemory = MemoryInterface(0x8a5419CfC711B2343c17a6ABf4B2bAFaBb06957F);\\n\\n  /**\\n   * @dev Return InstaDApp Mapping Addresses\\n   */\\n  InstaMapping constant internal instaMapping = InstaMapping(0xe81F70Cc7C0D46e12d70efc60607F16bbD617E88);\\n\\n  /**\\n   * @dev Get Uint value from InstaMemory Contract.\\n   */\\n  function getUint(uint getId, uint val) internal returns (uint returnVal) {\\n    returnVal = getId == 0 ? val : instaMemory.getUint(getId);\\n  }\\n\\n  /**\\n  * @dev Set Uint value in InstaMemory Contract.\\n  */\\n  function setUint(uint setId, uint val) virtual internal {\\n    if (setId != 0) instaMemory.setUint(setId, val);\\n  }\\n\\n}\\n\"\r\n    },\r\n    \"contracts/mainnet/connectors/aave/v2/helpers.sol\": {\r\n      \"content\": \"pragma solidity ^0.7.0;\\n\\nimport { DSMath } from \\\"../../../common/math.sol\\\";\\nimport { Basic } from \\\"../../../common/basic.sol\\\";\\nimport { AaveLendingPoolProviderInterface, AaveDataProviderInterface } from \\\"./interface.sol\\\";\\n\\nabstract contract Helpers is DSMath, Basic {\\n    \\n    /**\\n     * @dev Aave Lending Pool Provider\\n    */\\n    AaveLendingPoolProviderInterface constant internal aaveProvider = AaveLendingPoolProviderInterface(0xB53C1a33016B2DC2fF3653530bfF1848a515c8c5);\\n\\n    /**\\n     * @dev Aave Protocol Data Provider\\n    */\\n    AaveDataProviderInterface constant internal aaveData = AaveDataProviderInterface(0x057835Ad21a177dbdd3090bB1CAE03EaCF78Fc6d);\\n\\n    /**\\n     * @dev Aave Referral Code\\n    */\\n    uint16 constant internal referralCode = 3228;\\n\\n    /**\\n     * @dev Checks if collateral is enabled for an asset\\n     * @param token token address of the asset.(For ETH: 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE)\\n    */\\n    function getIsColl(address token) internal view returns (bool isCol) {\\n        (, , , , , , , , isCol) = aaveData.getUserReserveData(token, address(this));\\n    }\\n\\n    /**\\n     * @dev Get total debt balance & fee for an asset\\n     * @param token token address of the debt.(For ETH: 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE)\\n     * @param rateMode Borrow rate mode (Stable = 1, Variable = 2)\\n    */\\n    function getPaybackBalance(address token, uint rateMode) internal view returns (uint) {\\n        (, uint stableDebt, uint variableDebt, , , , , , ) = aaveData.getUserReserveData(token, address(this));\\n        return rateMode == 1 ? stableDebt : variableDebt;\\n    }\\n\\n    /**\\n     * @dev Get total collateral balance for an asset\\n     * @param token token address of the collateral.(For ETH: 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE)\\n    */\\n    function getCollateralBalance(address token) internal view returns (uint bal) {\\n        (bal, , , , , , , ,) = aaveData.getUserReserveData(token, address(this));\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/mainnet/connectors/aave/v2/events.sol\": {\r\n      \"content\": \"pragma solidity ^0.7.0;\\n\\ncontract Events {\\n    event LogDeposit(address indexed token, uint256 tokenAmt, uint256 getId, uint256 setId);\\n    event LogWithdraw(address indexed token, uint256 tokenAmt, uint256 getId, uint256 setId);\\n    event LogBorrow(address indexed token, uint256 tokenAmt, uint256 indexed rateMode, uint256 getId, uint256 setId);\\n    event LogPayback(address indexed token, uint256 tokenAmt, uint256 indexed rateMode, uint256 getId, uint256 setId);\\n    event LogEnableCollateral(address[] tokens);\\n    event LogSwapRateMode(address indexed token, uint256 rateMode);\\n}\\n\"\r\n    },\r\n    \"contracts/mainnet/connectors/aave/v2/interface.sol\": {\r\n      \"content\": \"pragma solidity ^0.7.0;\\n\\ninterface AaveInterface {\\n    function deposit(address _asset, uint256 _amount, address _onBehalfOf, uint16 _referralCode) external;\\n    function withdraw(address _asset, uint256 _amount, address _to) external;\\n    function borrow(\\n        address _asset,\\n        uint256 _amount,\\n        uint256 _interestRateMode,\\n        uint16 _referralCode,\\n        address _onBehalfOf\\n    ) external;\\n    function repay(address _asset, uint256 _amount, uint256 _rateMode, address _onBehalfOf) external;\\n    function setUserUseReserveAsCollateral(address _asset, bool _useAsCollateral) external;\\n    function swapBorrowRateMode(address _asset, uint256 _rateMode) external;\\n}\\n\\ninterface AaveLendingPoolProviderInterface {\\n    function getLendingPool() external view returns (address);\\n}\\n\\ninterface AaveDataProviderInterface {\\n    function getReserveTokensAddresses(address _asset) external view returns (\\n        address aTokenAddress,\\n        address stableDebtTokenAddress,\\n        address variableDebtTokenAddress\\n    );\\n    function getUserReserveData(address _asset, address _user) external view returns (\\n        uint256 currentATokenBalance,\\n        uint256 currentStableDebt,\\n        uint256 currentVariableDebt,\\n        uint256 principalStableDebt,\\n        uint256 scaledVariableDebt,\\n        uint256 stableBorrowRate,\\n        uint256 liquidityRate,\\n        uint40 stableRateLastUpdated,\\n        bool usageAsCollateralEnabled\\n    );\\n}\\n\\ninterface AaveAddressProviderRegistryInterface {\\n    function getAddressesProvidersList() external view returns (address[] memory);\\n}\\n\\ninterface ATokenInterface {\\n    function balanceOf(address _user) external view returns(uint256);\\n}\"\r\n    },\r\n    \"contracts/mainnet/common/math.sol\": {\r\n      \"content\": \"pragma solidity ^0.7.0;\\n\\nimport { SafeMath } from \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\n\\ncontract DSMath {\\n  uint constant WAD = 10 ** 18;\\n  uint constant RAY = 10 ** 27;\\n\\n  function add(uint x, uint y) internal pure returns (uint z) {\\n    z = SafeMath.add(x, y);\\n  }\\n\\n  function sub(uint x, uint y) internal virtual pure returns (uint z) {\\n    z = SafeMath.sub(x, y);\\n  }\\n\\n  function mul(uint x, uint y) internal pure returns (uint z) {\\n    z = SafeMath.mul(x, y);\\n  }\\n\\n  function div(uint x, uint y) internal pure returns (uint z) {\\n    z = SafeMath.div(x, y);\\n  }\\n\\n  function wmul(uint x, uint y) internal pure returns (uint z) {\\n    z = SafeMath.add(SafeMath.mul(x, y), WAD / 2) / WAD;\\n  }\\n\\n  function wdiv(uint x, uint y) internal pure returns (uint z) {\\n    z = SafeMath.add(SafeMath.mul(x, WAD), y / 2) / y;\\n  }\\n\\n  function rdiv(uint x, uint y) internal pure returns (uint z) {\\n    z = SafeMath.add(SafeMath.mul(x, RAY), y / 2) / y;\\n  }\\n\\n  function rmul(uint x, uint y) internal pure returns (uint z) {\\n    z = SafeMath.add(SafeMath.mul(x, y), RAY / 2) / RAY;\\n  }\\n\\n  function toInt(uint x) internal pure returns (int y) {\\n    y = int(x);\\n    require(y >= 0, \\\"int-overflow\\\");\\n  }\\n\\n  function toRad(uint wad) internal pure returns (uint rad) {\\n    rad = mul(wad, 10 ** 27);\\n  }\\n\\n}\\n\"\r\n    },\r\n    \"contracts/mainnet/common/basic.sol\": {\r\n      \"content\": \"pragma solidity ^0.7.0;\\n\\nimport { TokenInterface } from \\\"./interfaces.sol\\\";\\nimport { Stores } from \\\"./stores.sol\\\";\\nimport { DSMath } from \\\"./math.sol\\\";\\n\\nabstract contract Basic is DSMath, Stores {\\n\\n    function convert18ToDec(uint _dec, uint256 _amt) internal pure returns (uint256 amt) {\\n        amt = (_amt / 10 ** (18 - _dec));\\n    }\\n\\n    function convertTo18(uint _dec, uint256 _amt) internal pure returns (uint256 amt) {\\n        amt = mul(_amt, 10 ** (18 - _dec));\\n    }\\n\\n    function getTokenBal(TokenInterface token) internal view returns(uint _amt) {\\n        _amt = address(token) == ethAddr ? address(this).balance : token.balanceOf(address(this));\\n    }\\n\\n    function getTokensDec(TokenInterface buyAddr, TokenInterface sellAddr) internal view returns(uint buyDec, uint sellDec) {\\n        buyDec = address(buyAddr) == ethAddr ?  18 : buyAddr.decimals();\\n        sellDec = address(sellAddr) == ethAddr ?  18 : sellAddr.decimals();\\n    }\\n\\n    function encodeEvent(string memory eventName, bytes memory eventParam) internal pure returns (bytes memory) {\\n        return abi.encode(eventName, eventParam);\\n    }\\n\\n    function approve(TokenInterface token, address spender, uint256 amount) internal {\\n        try token.approve(spender, amount) {\\n\\n        } catch {\\n            token.approve(spender, 0);\\n            token.approve(spender, amount);\\n        }\\n    }\\n\\n    function changeEthAddress(address buy, address sell) internal pure returns(TokenInterface _buy, TokenInterface _sell){\\n        _buy = buy == ethAddr ? TokenInterface(wethAddr) : TokenInterface(buy);\\n        _sell = sell == ethAddr ? TokenInterface(wethAddr) : TokenInterface(sell);\\n    }\\n\\n    function convertEthToWeth(bool isEth, TokenInterface token, uint amount) internal {\\n        if(isEth) token.deposit{value: amount}();\\n    }\\n\\n    function convertWethToEth(bool isEth, TokenInterface token, uint amount) internal {\\n       if(isEth) {\\n            approve(token, address(token), amount);\\n            token.withdraw(amount);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/math/SafeMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        uint256 c = a + b;\\n        if (c < a) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b > a) return (false, 0);\\n        return (true, a - b);\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) return (true, 0);\\n        uint256 c = a * b;\\n        if (c / a != b) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a / b);\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a % b);\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b <= a, \\\"SafeMath: subtraction overflow\\\");\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0) return 0;\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: division by zero\\\");\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: modulo by zero\\\");\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": false,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"metadata\": {\r\n      \"useLiteralContent\": true\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}","ABI":"[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenAmt\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"rateMode\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"getId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"setId\",\"type\":\"uint256\"}],\"name\":\"LogBorrow\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenAmt\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"getId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"setId\",\"type\":\"uint256\"}],\"name\":\"LogDeposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"tokens\",\"type\":\"address[]\"}],\"name\":\"LogEnableCollateral\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenAmt\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"rateMode\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"getId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"setId\",\"type\":\"uint256\"}],\"name\":\"LogPayback\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"rateMode\",\"type\":\"uint256\"}],\"name\":\"LogSwapRateMode\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenAmt\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"getId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"setId\",\"type\":\"uint256\"}],\"name\":\"LogWithdraw\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rateMode\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"getId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"setId\",\"type\":\"uint256\"}],\"name\":\"borrow\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"_eventName\",\"type\":\"string\"},{\"internalType\":\"bytes\",\"name\":\"_eventParam\",\"type\":\"bytes\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"getId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"setId\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"_eventName\",\"type\":\"string\"},{\"internalType\":\"bytes\",\"name\":\"_eventParam\",\"type\":\"bytes\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"tokens\",\"type\":\"address[]\"}],\"name\":\"enableCollateral\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"_eventName\",\"type\":\"string\"},{\"internalType\":\"bytes\",\"name\":\"_eventParam\",\"type\":\"bytes\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rateMode\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"getId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"setId\",\"type\":\"uint256\"}],\"name\":\"payback\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"_eventName\",\"type\":\"string\"},{\"internalType\":\"bytes\",\"name\":\"_eventParam\",\"type\":\"bytes\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"rateMode\",\"type\":\"uint256\"}],\"name\":\"swapBorrowRateMode\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"_eventName\",\"type\":\"string\"},{\"internalType\":\"bytes\",\"name\":\"_eventParam\",\"type\":\"bytes\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"getId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"setId\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"_eventName\",\"type\":\"string\"},{\"internalType\":\"bytes\",\"name\":\"_eventParam\",\"type\":\"bytes\"}],\"stateMutability\":\"payable\",\"type\":\"function\"}]","ContractName":"ConnectV2AaveV2","CompilerVersion":"v0.7.6+commit.7338295f","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}