{"status":"1","message":"OK","result":[{"SourceCode":"// SPDX-License-Identifier: MIT\r\n\r\npragma solidity >=0.7.0 <0.9.0;\r\npragma experimental ABIEncoderV2;\r\n\r\n// File: contracts/BufferLib.sol\r\n/**\r\n * @title A convenient wrapper around the `bytes memory` type that exposes a buffer-like interface\r\n * @notice The buffer has an inner cursor that tracks the final offset of every read, i.e. any subsequent read will\r\n * start with the byte that goes right after the last one in the previous read.\r\n * @dev `uint32` is used here for `cursor` because `uint16` would only enable seeking up to 8KB, which could in some\r\n * theoretical use cases be exceeded. Conversely, `uint32` supports up to 512MB, which cannot credibly be exceeded.\r\n */\r\nlibrary BufferLib {\r\n  struct Buffer {\r\n    bytes data;\r\n    uint32 cursor;\r\n  }\r\n\r\n  // Ensures we access an existing index in an array\r\n  modifier notOutOfBounds(uint32 index, uint256 length) {\r\n    require(index < length, \"Tried to read from a consumed Buffer (must rewind it first)\");\r\n    _;\r\n  }\r\n\r\n  /**\r\n  * @notice Read and consume a certain amount of bytes from the buffer.\r\n  * @param _buffer An instance of `BufferLib.Buffer`.\r\n  * @param _length How many bytes to read and consume from the buffer.\r\n  * @return A `bytes memory` containing the first `_length` bytes from the buffer, counting from the cursor position.\r\n  */\r\n  function read(Buffer memory _buffer, uint32 _length) internal pure returns (bytes memory) {\r\n    // Make sure not to read out of the bounds of the original bytes\r\n    require(_buffer.cursor + _length <= _buffer.data.length, \"Not enough bytes in buffer when reading\");\r\n\r\n    // Create a new `bytes memory destination` value\r\n    bytes memory destination = new bytes(_length);\r\n\r\n    // Early return in case that bytes length is 0\r\n    if (_length != 0) {\r\n      bytes memory source = _buffer.data;\r\n      uint32 offset = _buffer.cursor;\r\n\r\n      // Get raw pointers for source and destination\r\n      uint sourcePointer;\r\n      uint destinationPointer;\r\n      assembly {\r\n        sourcePointer := add(add(source, 32), offset)\r\n        destinationPointer := add(destination, 32)\r\n      }\r\n      // Copy `_length` bytes from source to destination\r\n      memcpy(destinationPointer, sourcePointer, uint(_length));\r\n\r\n      // Move the cursor forward by `_length` bytes\r\n      seek(_buffer, _length, true);\r\n    }\r\n\r\n    return destination;\r\n  }\r\n\r\n  /**\r\n  * @notice Read and consume the next byte from the buffer.\r\n  * @param _buffer An instance of `BufferLib.Buffer`.\r\n  * @return The next byte in the buffer counting from the cursor position.\r\n  */\r\n  function next(Buffer memory _buffer) internal pure notOutOfBounds(_buffer.cursor, _buffer.data.length) returns (bytes1) {\r\n    // Return the byte at the position marked by the cursor and advance the cursor all at once\r\n    return _buffer.data[_buffer.cursor++];\r\n  }\r\n\r\n  /**\r\n  * @notice Move the inner cursor of the buffer to a relative or absolute position.\r\n  * @param _buffer An instance of `BufferLib.Buffer`.\r\n  * @param _offset How many bytes to move the cursor forward.\r\n  * @param _relative Whether to count `_offset` from the last position of the cursor (`true`) or the beginning of the\r\n  * buffer (`true`).\r\n  * @return The final position of the cursor (will equal `_offset` if `_relative` is `false`).\r\n  */\r\n  // solium-disable-next-line security/no-assign-params\r\n  function seek(Buffer memory _buffer, uint32 _offset, bool _relative) internal pure returns (uint32) {\r\n    // Deal with relative offsets\r\n    if (_relative) {\r\n      require(_offset + _buffer.cursor > _offset, \"Integer overflow when seeking\");\r\n      _offset += _buffer.cursor;\r\n    }\r\n    // Make sure not to read out of the bounds of the original bytes\r\n    require(_offset <= _buffer.data.length, \"Not enough bytes in buffer when seeking\");\r\n    _buffer.cursor = _offset;\r\n    return _buffer.cursor;\r\n  }\r\n\r\n  /**\r\n  * @notice Move the inner cursor a number of bytes forward.\r\n  * @dev This is a simple wrapper around the relative offset case of `seek()`.\r\n  * @param _buffer An instance of `BufferLib.Buffer`.\r\n  * @param _relativeOffset How many bytes to move the cursor forward.\r\n  * @return The final position of the cursor.\r\n  */\r\n  function seek(Buffer memory _buffer, uint32 _relativeOffset) internal pure returns (uint32) {\r\n    return seek(_buffer, _relativeOffset, true);\r\n  }\r\n\r\n  /**\r\n  * @notice Move the inner cursor back to the first byte in the buffer.\r\n  * @param _buffer An instance of `BufferLib.Buffer`.\r\n  */\r\n  function rewind(Buffer memory _buffer) internal pure {\r\n    _buffer.cursor = 0;\r\n  }\r\n\r\n  /**\r\n  * @notice Read and consume the next byte from the buffer as an `uint8`.\r\n  * @param _buffer An instance of `BufferLib.Buffer`.\r\n  * @return The `uint8` value of the next byte in the buffer counting from the cursor position.\r\n  */\r\n  function readUint8(Buffer memory _buffer) internal pure notOutOfBounds(_buffer.cursor, _buffer.data.length) returns (uint8) {\r\n    bytes memory bytesValue = _buffer.data;\r\n    uint32 offset = _buffer.cursor;\r\n    uint8 value;\r\n    assembly {\r\n      value := mload(add(add(bytesValue, 1), offset))\r\n    }\r\n    _buffer.cursor++;\r\n\r\n    return value;\r\n  }\r\n\r\n  /**\r\n  * @notice Read and consume the next 2 bytes from the buffer as an `uint16`.\r\n  * @param _buffer An instance of `BufferLib.Buffer`.\r\n  * @return The `uint16` value of the next 2 bytes in the buffer counting from the cursor position.\r\n  */\r\n  function readUint16(Buffer memory _buffer) internal pure notOutOfBounds(_buffer.cursor + 1, _buffer.data.length) returns (uint16) {\r\n    bytes memory bytesValue = _buffer.data;\r\n    uint32 offset = _buffer.cursor;\r\n    uint16 value;\r\n    assembly {\r\n      value := mload(add(add(bytesValue, 2), offset))\r\n    }\r\n    _buffer.cursor += 2;\r\n\r\n    return value;\r\n  }\r\n\r\n  /**\r\n  * @notice Read and consume the next 4 bytes from the buffer as an `uint32`.\r\n  * @param _buffer An instance of `BufferLib.Buffer`.\r\n  * @return The `uint32` value of the next 4 bytes in the buffer counting from the cursor position.\r\n  */\r\n  function readUint32(Buffer memory _buffer) internal pure notOutOfBounds(_buffer.cursor + 3, _buffer.data.length) returns (uint32) {\r\n    bytes memory bytesValue = _buffer.data;\r\n    uint32 offset = _buffer.cursor;\r\n    uint32 value;\r\n    assembly {\r\n      value := mload(add(add(bytesValue, 4), offset))\r\n    }\r\n    _buffer.cursor += 4;\r\n\r\n    return value;\r\n  }\r\n\r\n  /**\r\n  * @notice Read and consume the next 8 bytes from the buffer as an `uint64`.\r\n  * @param _buffer An instance of `BufferLib.Buffer`.\r\n  * @return The `uint64` value of the next 8 bytes in the buffer counting from the cursor position.\r\n  */\r\n  function readUint64(Buffer memory _buffer) internal pure notOutOfBounds(_buffer.cursor + 7, _buffer.data.length) returns (uint64) {\r\n    bytes memory bytesValue = _buffer.data;\r\n    uint32 offset = _buffer.cursor;\r\n    uint64 value;\r\n    assembly {\r\n      value := mload(add(add(bytesValue, 8), offset))\r\n    }\r\n    _buffer.cursor += 8;\r\n\r\n    return value;\r\n  }\r\n\r\n  /**\r\n  * @notice Read and consume the next 16 bytes from the buffer as an `uint128`.\r\n  * @param _buffer An instance of `BufferLib.Buffer`.\r\n  * @return The `uint128` value of the next 16 bytes in the buffer counting from the cursor position.\r\n  */\r\n  function readUint128(Buffer memory _buffer) internal pure notOutOfBounds(_buffer.cursor + 15, _buffer.data.length) returns (uint128) {\r\n    bytes memory bytesValue = _buffer.data;\r\n    uint32 offset = _buffer.cursor;\r\n    uint128 value;\r\n    assembly {\r\n      value := mload(add(add(bytesValue, 16), offset))\r\n    }\r\n    _buffer.cursor += 16;\r\n\r\n    return value;\r\n  }\r\n\r\n  /**\r\n  * @notice Read and consume the next 32 bytes from the buffer as an `uint256`.\r\n  * @return The `uint256` value of the next 32 bytes in the buffer counting from the cursor position.\r\n  * @param _buffer An instance of `BufferLib.Buffer`.\r\n  */\r\n  function readUint256(Buffer memory _buffer) internal pure notOutOfBounds(_buffer.cursor + 31, _buffer.data.length) returns (uint256) {\r\n    bytes memory bytesValue = _buffer.data;\r\n    uint32 offset = _buffer.cursor;\r\n    uint256 value;\r\n    assembly {\r\n      value := mload(add(add(bytesValue, 32), offset))\r\n    }\r\n    _buffer.cursor += 32;\r\n\r\n    return value;\r\n  }\r\n\r\n  /**\r\n  * @notice Read and consume the next 2 bytes from the buffer as an IEEE 754-2008 floating point number enclosed in an\r\n  * `int32`.\r\n  * @dev Due to the lack of support for floating or fixed point arithmetic in the EVM, this method offsets all values\r\n  * by 5 decimal orders so as to get a fixed precision of 5 decimal positions, which should be OK for most `float16`\r\n  * use cases. In other words, the integer output of this method is 10,000 times the actual value. The input bytes are\r\n  * expected to follow the 16-bit base-2 format (a.k.a. `binary16`) in the IEEE 754-2008 standard.\r\n  * @param _buffer An instance of `BufferLib.Buffer`.\r\n  * @return The `uint32` value of the next 4 bytes in the buffer counting from the cursor position.\r\n  */\r\n  function readFloat16(Buffer memory _buffer) internal pure returns (int32) {\r\n    uint32 bytesValue = readUint16(_buffer);\r\n    // Get bit at position 0\r\n    uint32 sign = bytesValue & 0x8000;\r\n    // Get bits 1 to 5, then normalize to the [-14, 15] range so as to counterweight the IEEE 754 exponent bias\r\n    int32 exponent = (int32(bytesValue & 0x7c00) >> 10) - 15;\r\n    // Get bits 6 to 15\r\n    int32 significand = int32(bytesValue & 0x03ff);\r\n\r\n    // Add 1024 to the fraction if the exponent is 0\r\n    if (exponent == 15) {\r\n      significand |= 0x400;\r\n    }\r\n\r\n    // Compute `2 ^ exponent · (1 + fraction / 1024)`\r\n    int32 result = 0;\r\n    if (exponent >= 0) {\r\n      result = int32((int256(1 << uint256(int256(exponent))) * 10000 * int256(uint256(int256(significand)) | 0x400)) >> 10);\r\n    } else {\r\n      result = int32(((int256(uint256(int256(significand)) | 0x400) * 10000) / int256(1 << uint256(int256(- exponent)))) >> 10);\r\n    }\r\n\r\n    // Make the result negative if the sign bit is not 0\r\n    if (sign != 0) {\r\n      result *= - 1;\r\n    }\r\n    return result;\r\n  }\r\n\r\n  /**\r\n  * @notice Copy bytes from one memory address into another.\r\n  * @dev This function was borrowed from Nick Johnson's `solidity-stringutils` lib, and reproduced here under the terms\r\n  * of [Apache License 2.0](https://github.com/Arachnid/solidity-stringutils/blob/master/LICENSE).\r\n  * @param _dest Address of the destination memory.\r\n  * @param _src Address to the source memory.\r\n  * @param _len How many bytes to copy.\r\n  */\r\n  // solium-disable-next-line security/no-assign-params\r\n  function memcpy(uint _dest, uint _src, uint _len) private pure {\r\n    require(_len > 0, \"Cannot copy 0 bytes\");\r\n\r\n    // Copy word-length chunks while possible\r\n    for (; _len >= 32; _len -= 32) {\r\n      assembly {\r\n        mstore(_dest, mload(_src))\r\n      }\r\n      _dest += 32;\r\n      _src += 32;\r\n    }\r\n\r\n    // Copy remaining bytes\r\n    uint mask = 256 ** (32 - _len) - 1;\r\n    assembly {\r\n      let srcpart := and(mload(_src), not(mask))\r\n      let destpart := and(mload(_dest), mask)\r\n      mstore(_dest, or(destpart, srcpart))\r\n    }\r\n  }\r\n\r\n}\r\n// File: contracts/CBOR.sol\r\n/**\r\n * @title A minimalistic implementation of “RFC 7049 Concise Binary Object Representation”\r\n * @notice This library leverages a buffer-like structure for step-by-step decoding of bytes so as to minimize\r\n * the gas cost of decoding them into a useful native type.\r\n * @dev Most of the logic has been borrowed from Patrick Gansterer’s cbor.js library: https://github.com/paroga/cbor-js\r\n * TODO: add support for Array (majorType = 4)\r\n * TODO: add support for Map (majorType = 5)\r\n * TODO: add support for Float32 (majorType = 7, additionalInformation = 26)\r\n * TODO: add support for Float64 (majorType = 7, additionalInformation = 27)\r\n */\r\nlibrary CBOR {\r\n  using BufferLib for BufferLib.Buffer;\r\n\r\n  uint32 constant internal UINT32_MAX = type(uint32).max;\r\n\r\n  uint64 constant internal UINT64_MAX = type(uint64).max;\r\n\r\n  struct Value {\r\n    BufferLib.Buffer buffer;\r\n    uint8 initialByte;\r\n    uint8 majorType;\r\n    uint8 additionalInformation;\r\n    uint64 len;\r\n    uint64 tag;\r\n  }\r\n\r\n  /**\r\n   * @notice Decode a `CBOR.Value` structure into a native `bool` value.\r\n   * @param _cborValue An instance of `CBOR.Value`.\r\n   * @return The value represented by the input, as a `bool` value.\r\n   */\r\n  function decodeBool(Value memory _cborValue) public pure returns(bool) {\r\n    _cborValue.len = readLength(_cborValue.buffer, _cborValue.additionalInformation);\r\n    require(_cborValue.majorType == 7, \"Tried to read a `bool` value from a `CBOR.Value` with majorType != 7\");\r\n    if (_cborValue.len == 20) {\r\n      return false;\r\n    } else if (_cborValue.len == 21) {\r\n      return true;\r\n    } else {\r\n      revert(\"Tried to read `bool` from a `CBOR.Value` with len different than 20 or 21\");\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @notice Decode a `CBOR.Value` structure into a native `bytes` value.\r\n   * @param _cborValue An instance of `CBOR.Value`.\r\n   * @return The value represented by the input, as a `bytes` value.\r\n   */\r\n  function decodeBytes(Value memory _cborValue) public pure returns(bytes memory) {\r\n    _cborValue.len = readLength(_cborValue.buffer, _cborValue.additionalInformation);\r\n    if (_cborValue.len == UINT32_MAX) {\r\n      bytes memory bytesData;\r\n\r\n      // These checks look repetitive but the equivalent loop would be more expensive.\r\n      uint32 itemLength = uint32(readIndefiniteStringLength(_cborValue.buffer, _cborValue.majorType));\r\n      if (itemLength < UINT32_MAX) {\r\n        bytesData = abi.encodePacked(bytesData, _cborValue.buffer.read(itemLength));\r\n        itemLength = uint32(readIndefiniteStringLength(_cborValue.buffer, _cborValue.majorType));\r\n        if (itemLength < UINT32_MAX) {\r\n          bytesData = abi.encodePacked(bytesData, _cborValue.buffer.read(itemLength));\r\n        }\r\n      }\r\n      return bytesData;\r\n    } else {\r\n      return _cborValue.buffer.read(uint32(_cborValue.len));\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @notice Decode a `CBOR.Value` structure into a `fixed16` value.\r\n   * @dev Due to the lack of support for floating or fixed point arithmetic in the EVM, this method offsets all values\r\n   * by 5 decimal orders so as to get a fixed precision of 5 decimal positions, which should be OK for most `fixed16`\r\n   * use cases. In other words, the output of this method is 10,000 times the actual value, encoded into an `int32`.\r\n   * @param _cborValue An instance of `CBOR.Value`.\r\n   * @return The value represented by the input, as an `int128` value.\r\n   */\r\n  function decodeFixed16(Value memory _cborValue) public pure returns(int32) {\r\n    require(_cborValue.majorType == 7, \"Tried to read a `fixed` value from a `CBOR.Value` with majorType != 7\");\r\n    require(_cborValue.additionalInformation == 25, \"Tried to read `fixed16` from a `CBOR.Value` with additionalInformation != 25\");\r\n    return _cborValue.buffer.readFloat16();\r\n  }\r\n\r\n  /**\r\n   * @notice Decode a `CBOR.Value` structure into a native `int128[]` value whose inner values follow the same convention.\r\n   * as explained in `decodeFixed16`.\r\n   * @param _cborValue An instance of `CBOR.Value`.\r\n   * @return The value represented by the input, as an `int128[]` value.\r\n   */\r\n  function decodeFixed16Array(Value memory _cborValue) external pure returns(int32[] memory) {\r\n    require(_cborValue.majorType == 4, \"Tried to read `int128[]` from a `CBOR.Value` with majorType != 4\");\r\n\r\n    uint64 length = readLength(_cborValue.buffer, _cborValue.additionalInformation);\r\n    require(length < UINT64_MAX, \"Indefinite-length CBOR arrays are not supported\");\r\n\r\n    int32[] memory array = new int32[](length);\r\n    for (uint64 i = 0; i < length; i++) {\r\n      Value memory item = valueFromBuffer(_cborValue.buffer);\r\n      array[i] = decodeFixed16(item);\r\n    }\r\n\r\n    return array;\r\n  }\r\n\r\n  /**\r\n   * @notice Decode a `CBOR.Value` structure into a native `int128` value.\r\n   * @param _cborValue An instance of `CBOR.Value`.\r\n   * @return The value represented by the input, as an `int128` value.\r\n   */\r\n  function decodeInt128(Value memory _cborValue) public pure returns(int128) {\r\n    if (_cborValue.majorType == 1) {\r\n      uint64 length = readLength(_cborValue.buffer, _cborValue.additionalInformation);\r\n      return int128(-1) - int128(uint128(length));\r\n    } else if (_cborValue.majorType == 0) {\r\n      // Any `uint64` can be safely casted to `int128`, so this method supports majorType 1 as well so as to have offer\r\n      // a uniform API for positive and negative numbers\r\n      return int128(uint128(decodeUint64(_cborValue)));\r\n    }\r\n    revert(\"Tried to read `int128` from a `CBOR.Value` with majorType not 0 or 1\");\r\n  }\r\n\r\n  /**\r\n   * @notice Decode a `CBOR.Value` structure into a native `int128[]` value.\r\n   * @param _cborValue An instance of `CBOR.Value`.\r\n   * @return The value represented by the input, as an `int128[]` value.\r\n   */\r\n  function decodeInt128Array(Value memory _cborValue) external pure returns(int128[] memory) {\r\n    require(_cborValue.majorType == 4, \"Tried to read `int128[]` from a `CBOR.Value` with majorType != 4\");\r\n\r\n    uint64 length = readLength(_cborValue.buffer, _cborValue.additionalInformation);\r\n    require(length < UINT64_MAX, \"Indefinite-length CBOR arrays are not supported\");\r\n\r\n    int128[] memory array = new int128[](length);\r\n    for (uint64 i = 0; i < length; i++) {\r\n      Value memory item = valueFromBuffer(_cborValue.buffer);\r\n      array[i] = decodeInt128(item);\r\n    }\r\n\r\n    return array;\r\n  }\r\n\r\n  /**\r\n   * @notice Decode a `CBOR.Value` structure into a native `string` value.\r\n   * @param _cborValue An instance of `CBOR.Value`.\r\n   * @return The value represented by the input, as a `string` value.\r\n   */\r\n  function decodeString(Value memory _cborValue) public pure returns(string memory) {\r\n    _cborValue.len = readLength(_cborValue.buffer, _cborValue.additionalInformation);\r\n    if (_cborValue.len == UINT64_MAX) {\r\n      bytes memory textData;\r\n      bool done;\r\n      while (!done) {\r\n        uint64 itemLength = readIndefiniteStringLength(_cborValue.buffer, _cborValue.majorType);\r\n        if (itemLength < UINT64_MAX) {\r\n          textData = abi.encodePacked(textData, readText(_cborValue.buffer, itemLength / 4));\r\n        } else {\r\n          done = true;\r\n        }\r\n      }\r\n      return string(textData);\r\n    } else {\r\n      return string(readText(_cborValue.buffer, _cborValue.len));\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @notice Decode a `CBOR.Value` structure into a native `string[]` value.\r\n   * @param _cborValue An instance of `CBOR.Value`.\r\n   * @return The value represented by the input, as an `string[]` value.\r\n   */\r\n  function decodeStringArray(Value memory _cborValue) external pure returns(string[] memory) {\r\n    require(_cborValue.majorType == 4, \"Tried to read `string[]` from a `CBOR.Value` with majorType != 4\");\r\n\r\n    uint64 length = readLength(_cborValue.buffer, _cborValue.additionalInformation);\r\n    require(length < UINT64_MAX, \"Indefinite-length CBOR arrays are not supported\");\r\n\r\n    string[] memory array = new string[](length);\r\n    for (uint64 i = 0; i < length; i++) {\r\n      Value memory item = valueFromBuffer(_cborValue.buffer);\r\n      array[i] = decodeString(item);\r\n    }\r\n\r\n    return array;\r\n  }\r\n\r\n  /**\r\n   * @notice Decode a `CBOR.Value` structure into a native `uint64` value.\r\n   * @param _cborValue An instance of `CBOR.Value`.\r\n   * @return The value represented by the input, as an `uint64` value.\r\n   */\r\n  function decodeUint64(Value memory _cborValue) public pure returns(uint64) {\r\n    require(_cborValue.majorType == 0, \"Tried to read `uint64` from a `CBOR.Value` with majorType != 0\");\r\n    return readLength(_cborValue.buffer, _cborValue.additionalInformation);\r\n  }\r\n\r\n  /**\r\n   * @notice Decode a `CBOR.Value` structure into a native `uint64[]` value.\r\n   * @param _cborValue An instance of `CBOR.Value`.\r\n   * @return The value represented by the input, as an `uint64[]` value.\r\n   */\r\n  function decodeUint64Array(Value memory _cborValue) external pure returns(uint64[] memory) {\r\n    require(_cborValue.majorType == 4, \"Tried to read `uint64[]` from a `CBOR.Value` with majorType != 4\");\r\n\r\n    uint64 length = readLength(_cborValue.buffer, _cborValue.additionalInformation);\r\n    require(length < UINT64_MAX, \"Indefinite-length CBOR arrays are not supported\");\r\n\r\n    uint64[] memory array = new uint64[](length);\r\n    for (uint64 i = 0; i < length; i++) {\r\n      Value memory item = valueFromBuffer(_cborValue.buffer);\r\n      array[i] = decodeUint64(item);\r\n    }\r\n\r\n    return array;\r\n  }\r\n\r\n  /**\r\n   * @notice Decode a CBOR.Value structure from raw bytes.\r\n   * @dev This is the main factory for CBOR.Value instances, which can be later decoded into native EVM types.\r\n   * @param _cborBytes Raw bytes representing a CBOR-encoded value.\r\n   * @return A `CBOR.Value` instance containing a partially decoded value.\r\n   */\r\n  function valueFromBytes(bytes memory _cborBytes) external pure returns(Value memory) {\r\n    BufferLib.Buffer memory buffer = BufferLib.Buffer(_cborBytes, 0);\r\n\r\n    return valueFromBuffer(buffer);\r\n  }\r\n\r\n  /**\r\n   * @notice Decode a CBOR.Value structure from raw bytes.\r\n   * @dev This is an alternate factory for CBOR.Value instances, which can be later decoded into native EVM types.\r\n   * @param _buffer A Buffer structure representing a CBOR-encoded value.\r\n   * @return A `CBOR.Value` instance containing a partially decoded value.\r\n   */\r\n  function valueFromBuffer(BufferLib.Buffer memory _buffer) public pure returns(Value memory) {\r\n    require(_buffer.data.length > 0, \"Found empty buffer when parsing CBOR value\");\r\n\r\n    uint8 initialByte;\r\n    uint8 majorType = 255;\r\n    uint8 additionalInformation;\r\n    uint64 tag = UINT64_MAX;\r\n\r\n    bool isTagged = true;\r\n    while (isTagged) {\r\n      // Extract basic CBOR properties from input bytes\r\n      initialByte = _buffer.readUint8();\r\n      majorType = initialByte >> 5;\r\n      additionalInformation = initialByte & 0x1f;\r\n\r\n      // Early CBOR tag parsing.\r\n      if (majorType == 6) {\r\n        tag = readLength(_buffer, additionalInformation);\r\n      } else {\r\n        isTagged = false;\r\n      }\r\n    }\r\n\r\n    require(majorType <= 7, \"Invalid CBOR major type\");\r\n\r\n    return CBOR.Value(\r\n      _buffer,\r\n      initialByte,\r\n      majorType,\r\n      additionalInformation,\r\n      0,\r\n      tag);\r\n  }\r\n\r\n  // Reads the length of the next CBOR item from a buffer, consuming a different number of bytes depending on the\r\n  // value of the `additionalInformation` argument.\r\n  function readLength(BufferLib.Buffer memory _buffer, uint8 additionalInformation) private pure returns(uint64) {\r\n    if (additionalInformation < 24) {\r\n      return additionalInformation;\r\n    }\r\n    if (additionalInformation == 24) {\r\n      return _buffer.readUint8();\r\n    }\r\n    if (additionalInformation == 25) {\r\n      return _buffer.readUint16();\r\n    }\r\n    if (additionalInformation == 26) {\r\n      return _buffer.readUint32();\r\n    }\r\n    if (additionalInformation == 27) {\r\n      return _buffer.readUint64();\r\n    }\r\n    if (additionalInformation == 31) {\r\n      return UINT64_MAX;\r\n    }\r\n    revert(\"Invalid length encoding (non-existent additionalInformation value)\");\r\n  }\r\n\r\n  // Read the length of a CBOR indifinite-length item (arrays, maps, byte strings and text) from a buffer, consuming\r\n  // as many bytes as specified by the first byte.\r\n  function readIndefiniteStringLength(BufferLib.Buffer memory _buffer, uint8 majorType) private pure returns(uint64) {\r\n    uint8 initialByte = _buffer.readUint8();\r\n    if (initialByte == 0xff) {\r\n      return UINT64_MAX;\r\n    }\r\n    uint64 length = readLength(_buffer, initialByte & 0x1f);\r\n    require(length < UINT64_MAX && (initialByte >> 5) == majorType, \"Invalid indefinite length\");\r\n    return length;\r\n  }\r\n\r\n  // Read a text string of a given length from a buffer. Returns a `bytes memory` value for the sake of genericness,\r\n  // but it can be easily casted into a string with `string(result)`.\r\n  // solium-disable-next-line security/no-assign-params\r\n  function readText(BufferLib.Buffer memory _buffer, uint64 _length) private pure returns(bytes memory) {\r\n    bytes memory result;\r\n    for (uint64 index = 0; index < _length; index++) {\r\n      uint8 value = _buffer.readUint8();\r\n      if (value & 0x80 != 0) {\r\n        if (value < 0xe0) {\r\n          value = (value & 0x1f) << 6 |\r\n            (_buffer.readUint8() & 0x3f);\r\n          _length -= 1;\r\n        } else if (value < 0xf0) {\r\n          value = (value & 0x0f) << 12 |\r\n            (_buffer.readUint8() & 0x3f) << 6 |\r\n            (_buffer.readUint8() & 0x3f);\r\n          _length -= 2;\r\n        } else {\r\n          value = (value & 0x0f) << 18 |\r\n            (_buffer.readUint8() & 0x3f) << 12 |\r\n            (_buffer.readUint8() & 0x3f) << 6  |\r\n            (_buffer.readUint8() & 0x3f);\r\n          _length -= 3;\r\n        }\r\n      }\r\n      result = abi.encodePacked(result, value);\r\n    }\r\n    return result;\r\n  }\r\n}\r\n// File: contracts/Request.sol\r\n/**\r\n * @title The serialized form of a Witnet data request\r\n */\r\ncontract Request {\r\n  bytes public bytecode;\r\n\r\n /**\r\n  * @dev A `Request` is constructed around a `bytes memory` value containing a well-formed Witnet data request serialized\r\n  * using Protocol Buffers. However, we cannot verify its validity at this point. This implies that contracts using\r\n  * the WRB should not be considered trustless before a valid Proof-of-Inclusion has been posted for the requests.\r\n  * The hash of the request is computed in the constructor to guarantee consistency. Otherwise there could be a\r\n  * mismatch and a data request could be resolved with the result of another.\r\n  * @param _bytecode Witnet request in bytes.\r\n  */\r\n  constructor(bytes memory _bytecode) {\r\n    bytecode = _bytecode;\r\n  }\r\n}\r\n// File: contracts/Witnet.sol\r\n/**\r\n * @title A library for decoding Witnet request results\r\n * @notice The library exposes functions to check the Witnet request success.\r\n * and retrieve Witnet results from CBOR values into solidity types.\r\n */\r\nlibrary Witnet {\r\n  using CBOR for CBOR.Value;\r\n\r\n  /*\r\n   *  STRUCTS\r\n   */\r\n  struct Result {\r\n    bool success;\r\n    CBOR.Value cborValue;\r\n  }\r\n\r\n  /*\r\n   *  ENUMS\r\n   */\r\n  enum ErrorCodes {\r\n    // 0x00: Unknown error. Something went really bad!\r\n    Unknown,\r\n    // Script format errors\r\n    /// 0x01: At least one of the source scripts is not a valid CBOR-encoded value.\r\n    SourceScriptNotCBOR,\r\n    /// 0x02: The CBOR value decoded from a source script is not an Array.\r\n    SourceScriptNotArray,\r\n    /// 0x03: The Array value decoded form a source script is not a valid RADON script.\r\n    SourceScriptNotRADON,\r\n    /// Unallocated\r\n    ScriptFormat0x04,\r\n    ScriptFormat0x05,\r\n    ScriptFormat0x06,\r\n    ScriptFormat0x07,\r\n    ScriptFormat0x08,\r\n    ScriptFormat0x09,\r\n    ScriptFormat0x0A,\r\n    ScriptFormat0x0B,\r\n    ScriptFormat0x0C,\r\n    ScriptFormat0x0D,\r\n    ScriptFormat0x0E,\r\n    ScriptFormat0x0F,\r\n    // Complexity errors\r\n    /// 0x10: The request contains too many sources.\r\n    RequestTooManySources,\r\n    /// 0x11: The script contains too many calls.\r\n    ScriptTooManyCalls,\r\n    /// Unallocated\r\n    Complexity0x12,\r\n    Complexity0x13,\r\n    Complexity0x14,\r\n    Complexity0x15,\r\n    Complexity0x16,\r\n    Complexity0x17,\r\n    Complexity0x18,\r\n    Complexity0x19,\r\n    Complexity0x1A,\r\n    Complexity0x1B,\r\n    Complexity0x1C,\r\n    Complexity0x1D,\r\n    Complexity0x1E,\r\n    Complexity0x1F,\r\n    // Operator errors\r\n    /// 0x20: The operator does not exist.\r\n    UnsupportedOperator,\r\n    /// Unallocated\r\n    Operator0x21,\r\n    Operator0x22,\r\n    Operator0x23,\r\n    Operator0x24,\r\n    Operator0x25,\r\n    Operator0x26,\r\n    Operator0x27,\r\n    Operator0x28,\r\n    Operator0x29,\r\n    Operator0x2A,\r\n    Operator0x2B,\r\n    Operator0x2C,\r\n    Operator0x2D,\r\n    Operator0x2E,\r\n    Operator0x2F,\r\n    // Retrieval-specific errors\r\n    /// 0x30: At least one of the sources could not be retrieved, but returned HTTP error.\r\n    HTTP,\r\n    /// 0x31: Retrieval of at least one of the sources timed out.\r\n    RetrievalTimeout,\r\n    /// Unallocated\r\n    Retrieval0x32,\r\n    Retrieval0x33,\r\n    Retrieval0x34,\r\n    Retrieval0x35,\r\n    Retrieval0x36,\r\n    Retrieval0x37,\r\n    Retrieval0x38,\r\n    Retrieval0x39,\r\n    Retrieval0x3A,\r\n    Retrieval0x3B,\r\n    Retrieval0x3C,\r\n    Retrieval0x3D,\r\n    Retrieval0x3E,\r\n    Retrieval0x3F,\r\n    // Math errors\r\n    /// 0x40: Math operator caused an underflow.\r\n    Underflow,\r\n    /// 0x41: Math operator caused an overflow.\r\n    Overflow,\r\n    /// 0x42: Tried to divide by zero.\r\n    DivisionByZero,\r\n    /// Unallocated\r\n    Math0x43,\r\n    Math0x44,\r\n    Math0x45,\r\n    Math0x46,\r\n    Math0x47,\r\n    Math0x48,\r\n    Math0x49,\r\n    Math0x4A,\r\n    Math0x4B,\r\n    Math0x4C,\r\n    Math0x4D,\r\n    Math0x4E,\r\n    Math0x4F,\r\n    // Other errors\r\n    /// 0x50: Received zero reveals\r\n    NoReveals,\r\n    /// 0x51: Insufficient consensus in tally precondition clause\r\n    InsufficientConsensus,\r\n    /// 0x52: Received zero commits\r\n    InsufficientCommits,\r\n    /// 0x53: Generic error during tally execution\r\n    TallyExecution,\r\n    /// Unallocated\r\n    OtherError0x54,\r\n    OtherError0x55,\r\n    OtherError0x56,\r\n    OtherError0x57,\r\n    OtherError0x58,\r\n    OtherError0x59,\r\n    OtherError0x5A,\r\n    OtherError0x5B,\r\n    OtherError0x5C,\r\n    OtherError0x5D,\r\n    OtherError0x5E,\r\n    OtherError0x5F,\r\n    /// 0x60: Invalid reveal serialization (malformed reveals are converted to this value)\r\n    MalformedReveal,\r\n    /// Unallocated\r\n    OtherError0x61,\r\n    OtherError0x62,\r\n    OtherError0x63,\r\n    OtherError0x64,\r\n    OtherError0x65,\r\n    OtherError0x66,\r\n    OtherError0x67,\r\n    OtherError0x68,\r\n    OtherError0x69,\r\n    OtherError0x6A,\r\n    OtherError0x6B,\r\n    OtherError0x6C,\r\n    OtherError0x6D,\r\n    OtherError0x6E,\r\n    OtherError0x6F,\r\n    // Access errors\r\n    /// 0x70: Tried to access a value from an index using an index that is out of bounds\r\n    ArrayIndexOutOfBounds,\r\n    /// 0x71: Tried to access a value from a map using a key that does not exist\r\n    MapKeyNotFound,\r\n    /// Unallocated\r\n    OtherError0x72,\r\n    OtherError0x73,\r\n    OtherError0x74,\r\n    OtherError0x75,\r\n    OtherError0x76,\r\n    OtherError0x77,\r\n    OtherError0x78,\r\n    OtherError0x79,\r\n    OtherError0x7A,\r\n    OtherError0x7B,\r\n    OtherError0x7C,\r\n    OtherError0x7D,\r\n    OtherError0x7E,\r\n    OtherError0x7F,\r\n    OtherError0x80,\r\n    OtherError0x81,\r\n    OtherError0x82,\r\n    OtherError0x83,\r\n    OtherError0x84,\r\n    OtherError0x85,\r\n    OtherError0x86,\r\n    OtherError0x87,\r\n    OtherError0x88,\r\n    OtherError0x89,\r\n    OtherError0x8A,\r\n    OtherError0x8B,\r\n    OtherError0x8C,\r\n    OtherError0x8D,\r\n    OtherError0x8E,\r\n    OtherError0x8F,\r\n    OtherError0x90,\r\n    OtherError0x91,\r\n    OtherError0x92,\r\n    OtherError0x93,\r\n    OtherError0x94,\r\n    OtherError0x95,\r\n    OtherError0x96,\r\n    OtherError0x97,\r\n    OtherError0x98,\r\n    OtherError0x99,\r\n    OtherError0x9A,\r\n    OtherError0x9B,\r\n    OtherError0x9C,\r\n    OtherError0x9D,\r\n    OtherError0x9E,\r\n    OtherError0x9F,\r\n    OtherError0xA0,\r\n    OtherError0xA1,\r\n    OtherError0xA2,\r\n    OtherError0xA3,\r\n    OtherError0xA4,\r\n    OtherError0xA5,\r\n    OtherError0xA6,\r\n    OtherError0xA7,\r\n    OtherError0xA8,\r\n    OtherError0xA9,\r\n    OtherError0xAA,\r\n    OtherError0xAB,\r\n    OtherError0xAC,\r\n    OtherError0xAD,\r\n    OtherError0xAE,\r\n    OtherError0xAF,\r\n    OtherError0xB0,\r\n    OtherError0xB1,\r\n    OtherError0xB2,\r\n    OtherError0xB3,\r\n    OtherError0xB4,\r\n    OtherError0xB5,\r\n    OtherError0xB6,\r\n    OtherError0xB7,\r\n    OtherError0xB8,\r\n    OtherError0xB9,\r\n    OtherError0xBA,\r\n    OtherError0xBB,\r\n    OtherError0xBC,\r\n    OtherError0xBD,\r\n    OtherError0xBE,\r\n    OtherError0xBF,\r\n    OtherError0xC0,\r\n    OtherError0xC1,\r\n    OtherError0xC2,\r\n    OtherError0xC3,\r\n    OtherError0xC4,\r\n    OtherError0xC5,\r\n    OtherError0xC6,\r\n    OtherError0xC7,\r\n    OtherError0xC8,\r\n    OtherError0xC9,\r\n    OtherError0xCA,\r\n    OtherError0xCB,\r\n    OtherError0xCC,\r\n    OtherError0xCD,\r\n    OtherError0xCE,\r\n    OtherError0xCF,\r\n    OtherError0xD0,\r\n    OtherError0xD1,\r\n    OtherError0xD2,\r\n    OtherError0xD3,\r\n    OtherError0xD4,\r\n    OtherError0xD5,\r\n    OtherError0xD6,\r\n    OtherError0xD7,\r\n    OtherError0xD8,\r\n    OtherError0xD9,\r\n    OtherError0xDA,\r\n    OtherError0xDB,\r\n    OtherError0xDC,\r\n    OtherError0xDD,\r\n    OtherError0xDE,\r\n    OtherError0xDF,\r\n    // Bridge errors: errors that only belong in inter-client communication\r\n    /// 0xE0: Requests that cannot be parsed must always get this error as their result.\r\n    /// However, this is not a valid result in a Tally transaction, because invalid requests\r\n    /// are never included into blocks and therefore never get a Tally in response.\r\n    BridgeMalformedRequest,\r\n    /// 0xE1: Witnesses exceeds 100\r\n    BridgePoorIncentives,\r\n    /// 0xE2: The request is rejected on the grounds that it may cause the submitter to spend or stake an\r\n    /// amount of value that is unjustifiably high when compared with the reward they will be getting\r\n    BridgeOversizedResult,\r\n    /// Unallocated\r\n    OtherError0xE3,\r\n    OtherError0xE4,\r\n    OtherError0xE5,\r\n    OtherError0xE6,\r\n    OtherError0xE7,\r\n    OtherError0xE8,\r\n    OtherError0xE9,\r\n    OtherError0xEA,\r\n    OtherError0xEB,\r\n    OtherError0xEC,\r\n    OtherError0xED,\r\n    OtherError0xEE,\r\n    OtherError0xEF,\r\n    OtherError0xF0,\r\n    OtherError0xF1,\r\n    OtherError0xF2,\r\n    OtherError0xF3,\r\n    OtherError0xF4,\r\n    OtherError0xF5,\r\n    OtherError0xF6,\r\n    OtherError0xF7,\r\n    OtherError0xF8,\r\n    OtherError0xF9,\r\n    OtherError0xFA,\r\n    OtherError0xFB,\r\n    OtherError0xFC,\r\n    OtherError0xFD,\r\n    OtherError0xFE,\r\n    // This should not exist:\r\n    /// 0xFF: Some tally error is not intercepted but should\r\n    UnhandledIntercept\r\n  }\r\n\r\n  /*\r\n   * Result impl's\r\n   */\r\n\r\n  /**\r\n   * @notice Decode raw CBOR bytes into a Result instance.\r\n   * @param _cborBytes Raw bytes representing a CBOR-encoded value.\r\n   * @return A `Result` instance.\r\n   */\r\n  function resultFromCborBytes(bytes calldata _cborBytes) external pure returns(Result memory) {\r\n    CBOR.Value memory cborValue = CBOR.valueFromBytes(_cborBytes);\r\n    return resultFromCborValue(cborValue);\r\n  }\r\n\r\n  /**\r\n   * @notice Decode a CBOR value into a Result instance.\r\n   * @param _cborValue An instance of `CBOR.Value`.\r\n   * @return A `Result` instance.\r\n   */\r\n  function resultFromCborValue(CBOR.Value memory _cborValue) public pure returns(Result memory) {\r\n    // Witnet uses CBOR tag 39 to represent RADON error code identifiers.\r\n    // [CBOR tag 39] Identifiers for CBOR: https://github.com/lucas-clemente/cbor-specs/blob/master/id.md\r\n    bool success = _cborValue.tag != 39;\r\n    return Result(success, _cborValue);\r\n  }\r\n\r\n  /**\r\n   * @notice Tell if a Result is successful.\r\n   * @param _result An instance of Result.\r\n   * @return `true` if successful, `false` if errored.\r\n   */\r\n  function isOk(Result memory _result) external pure returns(bool) {\r\n    return _result.success;\r\n  }\r\n\r\n  /**\r\n   * @notice Tell if a Result is errored.\r\n   * @param _result An instance of Result.\r\n   * @return `true` if errored, `false` if successful.\r\n   */\r\n  function isError(Result memory _result) external pure returns(bool) {\r\n    return !_result.success;\r\n  }\r\n\r\n  /**\r\n   * @notice Decode a bytes value from a Result as a `bytes` value.\r\n   * @param _result An instance of Result.\r\n   * @return The `bytes` decoded from the Result.\r\n   */\r\n  function asBytes(Result memory _result) external pure returns(bytes memory) {\r\n    require(_result.success, \"Tried to read bytes value from errored Result\");\r\n    return _result.cborValue.decodeBytes();\r\n  }\r\n\r\n  /**\r\n   * @notice Decode an error code from a Result as a member of `ErrorCodes`.\r\n   * @param _result An instance of `Result`.\r\n   * @return The `CBORValue.Error memory` decoded from the Result.\r\n   */\r\n  function asErrorCode(Result memory _result) external pure returns(ErrorCodes) {\r\n    uint64[] memory error = asRawError(_result);\r\n    if (error.length == 0) {\r\n      return ErrorCodes.Unknown;\r\n    }\r\n\r\n    return supportedErrorOrElseUnknown(error[0]);\r\n  }\r\n\r\n  /**\r\n   * @notice Generate a suitable error message for a member of `ErrorCodes` and its corresponding arguments.\r\n   * @dev WARN: Note that client contracts should wrap this function into a try-catch foreseing potential errors generated in this function\r\n   * @param _result An instance of `Result`.\r\n   * @return A tuple containing the `CBORValue.Error memory` decoded from the `Result`, plus a loggable error message.\r\n   */\r\n\r\n  function asErrorMessage(Result memory _result) public pure returns (ErrorCodes, string memory) {\r\n    uint64[] memory error = asRawError(_result);\r\n    if (error.length == 0) {\r\n      return (ErrorCodes.Unknown, \"Unknown error (no error code)\");\r\n    }\r\n    ErrorCodes errorCode = supportedErrorOrElseUnknown(error[0]);\r\n    bytes memory errorMessage;\r\n\r\n    if (errorCode == ErrorCodes.SourceScriptNotCBOR && error.length >= 2) {\r\n        errorMessage = abi.encodePacked(\"Source script #\", utoa(error[1]), \" was not a valid CBOR value\");\r\n    } else if (errorCode == ErrorCodes.SourceScriptNotArray && error.length >= 2) {\r\n        errorMessage = abi.encodePacked(\"The CBOR value in script #\", utoa(error[1]), \" was not an Array of calls\");\r\n    } else if (errorCode == ErrorCodes.SourceScriptNotRADON && error.length >= 2) {\r\n        errorMessage = abi.encodePacked(\"The CBOR value in script #\", utoa(error[1]), \" was not a valid RADON script\");\r\n    } else if (errorCode == ErrorCodes.RequestTooManySources && error.length >= 2) {\r\n        errorMessage = abi.encodePacked(\"The request contained too many sources (\", utoa(error[1]), \")\");\r\n    } else if (errorCode == ErrorCodes.ScriptTooManyCalls && error.length >= 4) {\r\n        errorMessage = abi.encodePacked(\r\n          \"Script #\",\r\n          utoa(error[2]),\r\n          \" from the \",\r\n          stageName(error[1]),\r\n          \" stage contained too many calls (\",\r\n          utoa(error[3]),\r\n          \")\"\r\n        );\r\n    } else if (errorCode == ErrorCodes.UnsupportedOperator && error.length >= 5) {\r\n        errorMessage = abi.encodePacked(\r\n        \"Operator code 0x\",\r\n          utohex(error[4]),\r\n          \" found at call #\",\r\n          utoa(error[3]),\r\n          \" in script #\",\r\n          utoa(error[2]),\r\n          \" from \",\r\n          stageName(error[1]),\r\n          \" stage is not supported\"\r\n        );\r\n    } else if (errorCode == ErrorCodes.HTTP && error.length >= 3) {\r\n        errorMessage = abi.encodePacked(\r\n          \"Source #\",\r\n          utoa(error[1]),\r\n          \" could not be retrieved. Failed with HTTP error code: \",\r\n          utoa(error[2] / 100),\r\n          utoa(error[2] % 100 / 10),\r\n          utoa(error[2] % 10)\r\n        );\r\n    } else if (errorCode == ErrorCodes.RetrievalTimeout && error.length >= 2) {\r\n        errorMessage = abi.encodePacked(\r\n          \"Source #\",\r\n          utoa(error[1]),\r\n          \" could not be retrieved because of a timeout.\"\r\n        );\r\n    } else if (errorCode == ErrorCodes.Underflow && error.length >= 5) {\r\n        errorMessage = abi.encodePacked(\r\n          \"Underflow at operator code 0x\",\r\n          utohex(error[4]),\r\n          \" found at call #\",\r\n          utoa(error[3]),\r\n          \" in script #\",\r\n          utoa(error[2]),\r\n          \" from \",\r\n          stageName(error[1]),\r\n          \" stage\"\r\n        );\r\n    } else if (errorCode == ErrorCodes.Overflow && error.length >= 5) {\r\n        errorMessage = abi.encodePacked(\r\n          \"Overflow at operator code 0x\",\r\n          utohex(error[4]),\r\n          \" found at call #\",\r\n          utoa(error[3]),\r\n          \" in script #\",\r\n          utoa(error[2]),\r\n          \" from \",\r\n          stageName(error[1]),\r\n          \" stage\"\r\n        );\r\n    } else if (errorCode == ErrorCodes.DivisionByZero && error.length >= 5) {\r\n        errorMessage = abi.encodePacked(\r\n          \"Division by zero at operator code 0x\",\r\n          utohex(error[4]),\r\n          \" found at call #\",\r\n          utoa(error[3]),\r\n          \" in script #\",\r\n          utoa(error[2]),\r\n          \" from \",\r\n          stageName(error[1]),\r\n          \" stage\"\r\n        );\r\n    } else if (errorCode == ErrorCodes.BridgeMalformedRequest) {\r\n        errorMessage = \"The structure of the request is invalid and it cannot be parsed\";\r\n    } else if (errorCode == ErrorCodes.BridgePoorIncentives) {\r\n        errorMessage = \"The request has been rejected by the bridge node due to poor incentives\";\r\n    } else if (errorCode == ErrorCodes.BridgeOversizedResult) {\r\n        errorMessage = \"The request result length exceeds a bridge contract defined limit\";\r\n    } else {\r\n        errorMessage = abi.encodePacked(\"Unknown error (0x\", utohex(error[0]), \")\");\r\n    }\r\n\r\n    return (errorCode, string(errorMessage));\r\n  }\r\n\r\n  /**\r\n   * @notice Decode a raw error from a `Result` as a `uint64[]`.\r\n   * @param _result An instance of `Result`.\r\n   * @return The `uint64[]` raw error as decoded from the `Result`.\r\n   */\r\n  function asRawError(Result memory _result) public pure returns(uint64[] memory) {\r\n    require(!_result.success, \"Tried to read error code from successful Result\");\r\n    return _result.cborValue.decodeUint64Array();\r\n  }\r\n\r\n  /**\r\n   * @notice Decode a boolean value from a Result as an `bool` value.\r\n   * @param _result An instance of Result.\r\n   * @return The `bool` decoded from the Result.\r\n   */\r\n  function asBool(Result memory _result) external pure returns(bool) {\r\n    require(_result.success, \"Tried to read `bool` value from errored Result\");\r\n    return _result.cborValue.decodeBool();\r\n  }\r\n\r\n  /**\r\n   * @notice Decode a fixed16 (half-precision) numeric value from a Result as an `int32` value.\r\n   * @dev Due to the lack of support for floating or fixed point arithmetic in the EVM, this method offsets all values.\r\n   * by 5 decimal orders so as to get a fixed precision of 5 decimal positions, which should be OK for most `fixed16`.\r\n   * use cases. In other words, the output of this method is 10,000 times the actual value, encoded into an `int32`.\r\n   * @param _result An instance of Result.\r\n   * @return The `int128` decoded from the Result.\r\n   */\r\n  function asFixed16(Result memory _result) external pure returns(int32) {\r\n    require(_result.success, \"Tried to read `fixed16` value from errored Result\");\r\n    return _result.cborValue.decodeFixed16();\r\n  }\r\n\r\n  /**\r\n   * @notice Decode an array of fixed16 values from a Result as an `int128[]` value.\r\n   * @param _result An instance of Result.\r\n   * @return The `int128[]` decoded from the Result.\r\n   */\r\n  function asFixed16Array(Result memory _result) external pure returns(int32[] memory) {\r\n    require(_result.success, \"Tried to read `fixed16[]` value from errored Result\");\r\n    return _result.cborValue.decodeFixed16Array();\r\n  }\r\n\r\n  /**\r\n   * @notice Decode a integer numeric value from a Result as an `int128` value.\r\n   * @param _result An instance of Result.\r\n   * @return The `int128` decoded from the Result.\r\n   */\r\n  function asInt128(Result memory _result) external pure returns(int128) {\r\n    require(_result.success, \"Tried to read `int128` value from errored Result\");\r\n    return _result.cborValue.decodeInt128();\r\n  }\r\n\r\n  /**\r\n   * @notice Decode an array of integer numeric values from a Result as an `int128[]` value.\r\n   * @param _result An instance of Result.\r\n   * @return The `int128[]` decoded from the Result.\r\n   */\r\n  function asInt128Array(Result memory _result) external pure returns(int128[] memory) {\r\n    require(_result.success, \"Tried to read `int128[]` value from errored Result\");\r\n    return _result.cborValue.decodeInt128Array();\r\n  }\r\n\r\n  /**\r\n   * @notice Decode a string value from a Result as a `string` value.\r\n   * @param _result An instance of Result.\r\n   * @return The `string` decoded from the Result.\r\n   */\r\n  function asString(Result memory _result) external pure returns(string memory) {\r\n    require(_result.success, \"Tried to read `string` value from errored Result\");\r\n    return _result.cborValue.decodeString();\r\n  }\r\n\r\n  /**\r\n   * @notice Decode an array of string values from a Result as a `string[]` value.\r\n   * @param _result An instance of Result.\r\n   * @return The `string[]` decoded from the Result.\r\n   */\r\n  function asStringArray(Result memory _result) external pure returns(string[] memory) {\r\n    require(_result.success, \"Tried to read `string[]` value from errored Result\");\r\n    return _result.cborValue.decodeStringArray();\r\n  }\r\n\r\n  /**\r\n   * @notice Decode a natural numeric value from a Result as a `uint64` value.\r\n   * @param _result An instance of Result.\r\n   * @return The `uint64` decoded from the Result.\r\n   */\r\n  function asUint64(Result memory _result) external pure returns(uint64) {\r\n    require(_result.success, \"Tried to read `uint64` value from errored Result\");\r\n    return _result.cborValue.decodeUint64();\r\n  }\r\n\r\n  /**\r\n   * @notice Decode an array of natural numeric values from a Result as a `uint64[]` value.\r\n   * @param _result An instance of Result.\r\n   * @return The `uint64[]` decoded from the Result.\r\n   */\r\n  function asUint64Array(Result memory _result) external pure returns(uint64[] memory) {\r\n    require(_result.success, \"Tried to read `uint64[]` value from errored Result\");\r\n    return _result.cborValue.decodeUint64Array();\r\n  }\r\n\r\n  /**\r\n   * @notice Convert a stage index number into the name of the matching Witnet request stage.\r\n   * @param _stageIndex A `uint64` identifying the index of one of the Witnet request stages.\r\n   * @return The name of the matching stage.\r\n   */\r\n  function stageName(uint64 _stageIndex) public pure returns(string memory) {\r\n    if (_stageIndex == 0) {\r\n      return \"retrieval\";\r\n    } else if (_stageIndex == 1) {\r\n      return \"aggregation\";\r\n    } else if (_stageIndex == 2) {\r\n      return \"tally\";\r\n    } else {\r\n      return \"unknown\";\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @notice Get an `ErrorCodes` item from its `uint64` discriminant.\r\n   * @param _discriminant The numeric identifier of an error.\r\n   * @return A member of `ErrorCodes`.\r\n   */\r\n  function supportedErrorOrElseUnknown(uint64 _discriminant) private pure returns(ErrorCodes) {\r\n      return ErrorCodes(_discriminant);\r\n  }\r\n\r\n  /**\r\n   * @notice Convert a `uint64` into a 1, 2 or 3 characters long `string` representing its.\r\n   * three less significant decimal values.\r\n   * @param _u A `uint64` value.\r\n   * @return The `string` representing its decimal value.\r\n   */\r\n  function utoa(uint64 _u) private pure returns(string memory) {\r\n    if (_u < 10) {\r\n      bytes memory b1 = new bytes(1);\r\n      b1[0] = bytes1(uint8(_u) + 48);\r\n      return string(b1);\r\n    } else if (_u < 100) {\r\n      bytes memory b2 = new bytes(2);\r\n      b2[0] = bytes1(uint8(_u / 10) + 48);\r\n      b2[1] = bytes1(uint8(_u % 10) + 48);\r\n      return string(b2);\r\n    } else {\r\n      bytes memory b3 = new bytes(3);\r\n      b3[0] = bytes1(uint8(_u / 100) + 48);\r\n      b3[1] = bytes1(uint8(_u % 100 / 10) + 48);\r\n      b3[2] = bytes1(uint8(_u % 10) + 48);\r\n      return string(b3);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @notice Convert a `uint64` into a 2 characters long `string` representing its two less significant hexadecimal values.\r\n   * @param _u A `uint64` value.\r\n   * @return The `string` representing its hexadecimal value.\r\n   */\r\n  function utohex(uint64 _u) private pure returns(string memory) {\r\n    bytes memory b2 = new bytes(2);\r\n    uint8 d0 = uint8(_u / 16) + 48;\r\n    uint8 d1 = uint8(_u % 16) + 48;\r\n    if (d0 > 57)\r\n      d0 += 7;\r\n    if (d1 > 57)\r\n      d1 += 7;\r\n    b2[0] = bytes1(d0);\r\n    b2[1] = bytes1(d1);\r\n    return string(b2);\r\n  }\r\n}\r\n// File: contracts/WitnetRequestBoardInterface.sol\r\n/**\r\n * @title Witnet Requests Board Interface\r\n * @notice Interface of a Witnet Request Board (WRB)\r\n * It defines how to interact with the WRB in order to support:\r\n *  - Post and upgrade a data request\r\n *  - Read the result of a dr\r\n * @author Witnet Foundation\r\n */\r\ninterface WitnetRequestBoardInterface {\r\n\r\n  // Event emitted when a new DR is posted\r\n  event PostedRequest(uint256 _id);\r\n\r\n  // Event emitted when a result is reported\r\n  event PostedResult(uint256 _id);\r\n\r\n  /// @dev Posts a data request into the WRB in expectation that it will be relayed and resolved in Witnet with a total reward that equals to msg.value.\r\n  /// @param _requestAddress The request contract address which includes the request bytecode.\r\n  /// @return The unique identifier of the data request.\r\n  function postDataRequest(address _requestAddress) external payable returns(uint256);\r\n\r\n  /// @dev Increments the reward of a data request by adding the transaction value to it.\r\n  /// @param _id The unique identifier of the data request.\r\n  function upgradeDataRequest(uint256 _id) external payable;\r\n\r\n  /// @dev Retrieves the DR transaction hash of the id from the WRB.\r\n  /// @param _id The unique identifier of the data request.\r\n  /// @return The hash of the DR transaction\r\n  function readDrTxHash (uint256 _id) external view returns(uint256);\r\n\r\n  /// @dev Retrieves the result (if already available) of one data request from the WRB.\r\n  /// @param _id The unique identifier of the data request.\r\n  /// @return The result of the DR\r\n  function readResult (uint256 _id) external view returns(bytes memory);\r\n\r\n  /// @notice Verifies if the Witnet Request Board can be upgraded.\r\n  /// @return true if contract is upgradable.\r\n  function isUpgradable(address _address) external view returns(bool);\r\n\r\n  /// @dev Estimate the amount of reward we need to insert for a given gas price.\r\n  /// @param _gasPrice The gas price for which we need to calculate the rewards.\r\n  /// @return The reward to be included for the given gas price.\r\n  function estimateGasCost(uint256 _gasPrice) external view returns(uint256);\r\n}\r\n// File: contracts/UsingWitnet.sol\r\n/**\r\n * @title The UsingWitnet contract\r\n * @notice Contract writers can inherit this contract in order to create Witnet data requests.\r\n */\r\nabstract contract UsingWitnet {\r\n  using Witnet for Witnet.Result;\r\n\r\n  WitnetRequestBoardInterface internal immutable wrb;\r\n\r\n /**\r\n  * @notice Include an address to specify the WitnetRequestBoard.\r\n  * @param _wrb WitnetRequestBoard address.\r\n  */\r\n  constructor(address _wrb) {\r\n    wrb = WitnetRequestBoardInterface(_wrb);\r\n  }\r\n\r\n  // Provides a convenient way for client contracts extending this to block the execution of the main logic of the\r\n  // contract until a particular request has been successfully resolved by Witnet\r\n  modifier witnetRequestResolved(uint256 _id) {\r\n    require(witnetCheckRequestResolved(_id), \"Witnet request is not yet resolved by the Witnet network\");\r\n    _;\r\n  }\r\n\r\n /**\r\n  * @notice Send a new request to the Witnet network with transaction value as result report reward.\r\n  * @dev Call to `post_dr` function in the WitnetRequestBoard contract.\r\n  * @param _request An instance of the `Request` contract.\r\n  * @return Sequencial identifier for the request included in the WitnetRequestBoard.\r\n  */\r\n  function witnetPostRequest(Request _request) internal returns (uint256) {\r\n    return wrb.postDataRequest{value: msg.value}(address(_request));\r\n  }\r\n\r\n /**\r\n  * @notice Check if a request has been resolved by Witnet.\r\n  * @dev Contracts depending on Witnet should not start their main business logic (e.g. receiving value from third.\r\n  * parties) before this method returns `true`.\r\n  * @param _id The unique identifier of a request that has been previously sent to the WitnetRequestBoard.\r\n  * @return A boolean telling if the request has been already resolved or not.\r\n  */\r\n  function witnetCheckRequestResolved(uint256 _id) internal view returns (bool) {\r\n    // If the result of the data request in Witnet is not the default, then it means that it has been reported as resolved.\r\n    return wrb.readDrTxHash(_id) != 0;\r\n  }\r\n\r\n /**\r\n  * @notice Upgrade the reward for a Data Request previously included.\r\n  * @dev Call to `upgrade_dr` function in the WitnetRequestBoard contract.\r\n  * @param _id The unique identifier of a request that has been previously sent to the WitnetRequestBoard.\r\n  */\r\n  function witnetUpgradeRequest(uint256 _id) internal {\r\n    wrb.upgradeDataRequest{value: msg.value}(_id);\r\n  }\r\n\r\n /**\r\n  * @notice Read the result of a resolved request.\r\n  * @dev Call to `read_result` function in the WitnetRequestBoard contract.\r\n  * @param _id The unique identifier of a request that was posted to Witnet.\r\n  * @return The result of the request as an instance of `Result`.\r\n  */\r\n  function witnetReadResult(uint256 _id) internal view returns (Witnet.Result memory) {\r\n    return Witnet.resultFromCborBytes(wrb.readResult(_id));\r\n  }\r\n\r\n /**\r\n  * @notice Estimate the reward amount.\r\n  * @dev Call to `estimate_gas_cost` function in the WitnetRequestBoard contract.\r\n  * @param _gasPrice The gas price for which we want to retrieve the estimation.\r\n  * @return The reward to be included for the given gas price.\r\n  */\r\n  function witnetEstimateGasCost(uint256 _gasPrice) internal view returns (uint256) {\r\n    return wrb.estimateGasCost(_gasPrice);\r\n  }\r\n}\r\n// File: contracts/WitnetRequestBoardProxy.sol\r\n/**\r\n * @title Witnet Request Board Proxy\r\n * @notice Contract to act as a proxy between the Witnet Bridge Interface and Contracts inheriting UsingWitnet.\r\n * @author Witnet Foundation\r\n */\r\ncontract WitnetRequestBoardProxy {\r\n\r\n  // Struct if the information of each controller\r\n  struct ControllerInfo {\r\n    // Address of the Controller\r\n    address controllerAddress;\r\n    // The lastId of the previous Controller\r\n    uint256 lastId;\r\n  }\r\n\r\n  // Witnet Request Board contract that is currently being used\r\n  WitnetRequestBoardInterface public currentWitnetRequestBoard;\r\n\r\n  // Last id of the WRB controller\r\n  uint256 internal currentLastId;\r\n\r\n  // Array with the controllers that have been used in the Proxy\r\n  ControllerInfo[] internal controllers;\r\n\r\n  modifier notIdentical(address _newAddress) {\r\n    require(_newAddress != address(currentWitnetRequestBoard), \"The provided Witnet Requests Board instance address is already in use\");\r\n    _;\r\n  }\r\n\r\n /**\r\n  * @notice Include an address to specify the Witnet Request Board.\r\n  * @param _witnetRequestBoardAddress WitnetRequestBoard address.\r\n  */\r\n  constructor(address _witnetRequestBoardAddress) {\r\n    // Initialize the first epoch pointing to the first controller\r\n    controllers.push(ControllerInfo({controllerAddress: _witnetRequestBoardAddress, lastId: 0}));\r\n    currentWitnetRequestBoard = WitnetRequestBoardInterface(_witnetRequestBoardAddress);\r\n  }\r\n\r\n  /// @dev Posts a data request into the WRB in expectation that it will be relayed and resolved in Witnet with a total reward that equals to msg.value.\r\n  /// @param _requestAddress The request contract address which includes the request bytecode.\r\n  /// @return The unique identifier of the data request.\r\n  function postDataRequest(address _requestAddress) external payable returns(uint256) {\r\n    uint256 n = controllers.length;\r\n    uint256 offset = controllers[n - 1].lastId;\r\n    // Update the currentLastId with the id in the controller plus the offSet\r\n    currentLastId = currentWitnetRequestBoard.postDataRequest{value: msg.value}(_requestAddress) + offset;\r\n    return currentLastId;\r\n  }\r\n\r\n  /// @dev Increments the reward of a data request by adding the transaction value to it.\r\n  /// @param _id The unique identifier of the data request.\r\n  function upgradeDataRequest(uint256 _id) external payable {\r\n    address wrbAddress;\r\n    uint256 wrbOffset;\r\n    (wrbAddress, wrbOffset) = getController(_id);\r\n    return currentWitnetRequestBoard.upgradeDataRequest{value: msg.value}(_id - wrbOffset);\r\n  }\r\n\r\n  /// @dev Retrieves the DR transaction hash of the id from the WRB.\r\n  /// @param _id The unique identifier of the data request.\r\n  /// @return The transaction hash of the DR.\r\n  function readDrTxHash (uint256 _id)\r\n    external\r\n    view\r\n  returns(uint256)\r\n  {\r\n    // Get the address and the offset of the corresponding to id\r\n    (address wrbAddress, uint256 offsetWrb) = getController(_id);\r\n    // Return the result of the DR readed in the corresponding Controller with its own id\r\n    uint256 drTxHash = WitnetRequestBoardInterface(wrbAddress).readDrTxHash(_id - offsetWrb);\r\n    return drTxHash;\r\n  }\r\n\r\n  /// @dev Retrieves the result (if already available) of one data request from the WRB.\r\n  /// @param _id The unique identifier of the data request.\r\n  /// @return The result of the DR.\r\n  function readResult(uint256 _id) external view returns(bytes memory) {\r\n    // Get the address and the offset of the corresponding to id\r\n    address wrbAddress;\r\n    uint256 offSetWrb;\r\n    (wrbAddress, offSetWrb) = getController(_id);\r\n    // Return the result of the DR in the corresponding Controller with its own id\r\n    WitnetRequestBoardInterface wrbWithResult;\r\n    wrbWithResult = WitnetRequestBoardInterface(wrbAddress);\r\n    return wrbWithResult.readResult(_id - offSetWrb);\r\n  }\r\n\r\n  /// @dev Estimate the amount of reward we need to insert for a given gas price.\r\n  /// @param _gasPrice The gas price for which we need to calculate the reward.\r\n  /// @return The reward to be included for the given gas price.\r\n  function estimateGasCost(uint256 _gasPrice) external view returns(uint256) {\r\n    return currentWitnetRequestBoard.estimateGasCost(_gasPrice);\r\n  }\r\n\r\n  /// @notice Upgrades the Witnet Requests Board if the current one is upgradeable.\r\n  /// @param _newAddress address of the new block relay to upgrade.\r\n  function upgradeWitnetRequestBoard(address _newAddress) external notIdentical(_newAddress) {\r\n    // Require the WRB is upgradable\r\n    require(currentWitnetRequestBoard.isUpgradable(msg.sender), \"The upgrade has been rejected by the current implementation\");\r\n    // Map the currentLastId to the corresponding witnetRequestBoardAddress and add it to controllers\r\n    controllers.push(ControllerInfo({controllerAddress: _newAddress, lastId: currentLastId}));\r\n    // Upgrade the WRB\r\n    currentWitnetRequestBoard = WitnetRequestBoardInterface(_newAddress);\r\n  }\r\n\r\n  /// @notice Gets the controller from an Id.\r\n  /// @param _id id of a Data Request from which we get the controller.\r\n  function getController(uint256 _id) internal view returns(address _controllerAddress, uint256 _offset) {\r\n    // Check id is bigger than 0\r\n    require(_id > 0, \"Non-existent controller for id 0\");\r\n\r\n    uint256 n = controllers.length;\r\n    // If the id is bigger than the lastId of a Controller, read the result in that Controller\r\n    for (uint i = n; i > 0; i--) {\r\n      if (_id > controllers[i - 1].lastId) {\r\n        return (controllers[i - 1].controllerAddress, controllers[i - 1].lastId);\r\n      }\r\n    }\r\n  }\r\n\r\n}\r\n// File: contracts/WitnetRequestBoard.sol\r\n/**\r\n * @title Witnet Requests Board mocked\r\n * @notice Contract to bridge requests to Witnet for testing purposes.\r\n * @dev This contract enables posting requests that Witnet bridges will insert into the Witnet network.\r\n * The result of the requests will be posted back to this contract by the bridge nodes too.\r\n * @author Witnet Foundation\r\n */\r\ncontract WitnetRequestBoard is WitnetRequestBoardInterface {\r\n    // TODO: update max report result gas value\r\n    uint256 public constant ESTIMATED_REPORT_RESULT_GAS = 102496;\r\n\r\n    struct DataRequest {\r\n        address requestAddress;\r\n        uint256 drOutputHash;\r\n        uint256 reward;\r\n        uint256 gasPrice;\r\n        bytes result;\r\n        uint256 drTxHash;\r\n    }\r\n\r\n    // Owner of the Witnet Request Board\r\n    address public owner;\r\n\r\n    // Map of addresses to a bool, true if they are committee members\r\n    mapping(address => bool) public isInCommittee;\r\n\r\n    // Witnet Requests within the board\r\n    DataRequest[] public requests;\r\n\r\n    // Only the committee defined when deploying the contract should be able to report results\r\n    modifier isAuthorized() {\r\n        require(isInCommittee[msg.sender] == true, \"Sender not authorized\");\r\n        _;\r\n    }\r\n\r\n    // Ensures the result has not been reported yet\r\n    modifier resultNotIncluded(uint256 _id) {\r\n        require(requests[_id].result.length == 0, \"Result already included\");\r\n        _;\r\n    }\r\n\r\n    // Ensures the request has not been manipulated\r\n    modifier validDrOutputHash(uint256 _id) {\r\n        require(\r\n            requests[_id].drOutputHash ==\r\n                computeDrOutputHash(Request(requests[_id].requestAddress).bytecode()),\r\n            \"The dr has been manipulated and the bytecode has changed\"\r\n        );\r\n        _;\r\n    }\r\n\r\n    // Ensures the request id exists\r\n    modifier validId(uint256 _id) {\r\n        require(requests.length > _id, \"Id not found\");\r\n        _;\r\n    }\r\n\r\n    /// @notice Initilizes a centralized Witnet Request Board with an authorized committee.\r\n    /// @param _committee list of authorized addresses.\r\n    constructor(address[] memory _committee) {\r\n        owner = msg.sender;\r\n        for (uint256 i = 0; i < _committee.length; i++) {\r\n            isInCommittee[_committee[i]] = true;\r\n        }\r\n        // Insert an empty request so as to initialize the requests array with length > 0\r\n        DataRequest memory request;\r\n        requests.push(request);\r\n    }\r\n\r\n    /// @dev Posts a data request into the WRB in expectation that it will be relayed and resolved in Witnet with a total reward that equals to msg.value.\r\n    /// @param _requestAddress The request contract address which includes the request bytecode.\r\n    /// @return The unique identifier of the data request.\r\n    function postDataRequest(address _requestAddress)\r\n        external\r\n        payable\r\n        override\r\n        returns (uint256)\r\n    {\r\n        // Checks the tally reward is covering gas cost\r\n        uint256 minResultReward = tx.gasprice * ESTIMATED_REPORT_RESULT_GAS;\r\n        require(\r\n            msg.value >= minResultReward,\r\n            \"Result reward should cover gas expenses. Check the estimateGasCost method.\"\r\n        );\r\n\r\n        uint256 _id = requests.length;\r\n\r\n        DataRequest memory request;\r\n        request.requestAddress = _requestAddress;\r\n        request.reward = msg.value;\r\n        Request requestContract = Request(request.requestAddress);\r\n        request.drOutputHash = computeDrOutputHash(requestContract.bytecode());\r\n        request.gasPrice = tx.gasprice;\r\n        // Push the new request into the contract state\r\n        requests.push(request);\r\n\r\n        // Let observers know that a new request has been posted\r\n        emit PostedRequest(_id);\r\n\r\n        return _id;\r\n    }\r\n\r\n    /// @dev Increments the reward of a data request by adding the transaction value to it.\r\n    /// @param _id The unique identifier of the data request.\r\n    function upgradeDataRequest(uint256 _id)\r\n        external\r\n        payable\r\n        override\r\n        resultNotIncluded(_id)\r\n    {\r\n        uint256 newReward = requests[_id].reward + msg.value;\r\n\r\n        // If gas price is increased, then check if new rewards cover gas costs\r\n        if (tx.gasprice > requests[_id].gasPrice) {\r\n            // Checks the reward is covering gas cost\r\n            uint256 minResultReward = tx.gasprice * ESTIMATED_REPORT_RESULT_GAS;\r\n            require(\r\n                newReward >= minResultReward,\r\n                \"Result reward should cover gas expenses. Check the estimateGasCost method.\"\r\n            );\r\n            requests[_id].gasPrice = tx.gasprice;\r\n        }\r\n\r\n        // Update data request reward\r\n        requests[_id].reward = newReward;\r\n    }\r\n\r\n    /// @dev Reports the result of a data request in Witnet.\r\n    /// @param _id The unique identifier of the data request.\r\n    /// @param _drTxHash The unique hash of the request.\r\n    /// @param _result The result itself as bytes.\r\n    function reportResult(\r\n        uint256 _id,\r\n        uint256 _drTxHash,\r\n        bytes calldata _result\r\n    ) external isAuthorized() validId(_id) resultNotIncluded(_id) {\r\n        require(_drTxHash != 0, \"Data request transaction cannot be zero\");\r\n        // Ensures the result byes do not have zero length\r\n        // This would not be a valid encoding with CBOR and could trigger a reentrancy attack\r\n        require(_result.length != 0, \"Result has zero length\");\r\n\r\n        requests[_id].drTxHash = _drTxHash;\r\n        requests[_id].result = _result;\r\n\r\n        emit PostedResult(_id);\r\n        payable(msg.sender).transfer(requests[_id].reward);\r\n    }\r\n\r\n    /// @dev Retrieves the bytes of the serialization of one data request from the WRB.\r\n    /// @param _id The unique identifier of the data request.\r\n    /// @return The result of the data request as bytes.\r\n    function readDataRequest(uint256 _id)\r\n        external\r\n        view\r\n        validId(_id)\r\n        validDrOutputHash(_id)\r\n        returns (bytes memory)\r\n    {\r\n        Request requestContract = Request(requests[_id].requestAddress);\r\n        return requestContract.bytecode();\r\n    }\r\n\r\n    /// @dev Retrieves the result (if already available) of one data request from the WRB.\r\n    /// @param _id The unique identifier of the data request.\r\n    /// @return The result of the DR.\r\n    function readResult(uint256 _id)\r\n        external\r\n        view\r\n        override\r\n        validId(_id)\r\n        returns (bytes memory)\r\n    {\r\n        require(requests[_id].drTxHash != 0, \"The request has not yet been resolved\");\r\n        return requests[_id].result;\r\n    }\r\n\r\n    /// @dev Retrieves the gas price set for a specific DR ID.\r\n    /// @param _id The unique identifier of the data request.\r\n    /// @return The gas price set by the request creator.\r\n    function readGasPrice(uint256 _id)\r\n        external\r\n        view\r\n        validId(_id)\r\n        returns (uint256)\r\n    {\r\n        return requests[_id].gasPrice;\r\n    }\r\n\r\n    /// @dev Retrieves hash of the data request transaction in Witnet.\r\n    /// @param _id The unique identifier of the data request.\r\n    /// @return The hash of the DataRequest transaction in Witnet.\r\n    function readDrTxHash(uint256 _id)\r\n        external\r\n        view\r\n        override\r\n        validId(_id)\r\n        returns (uint256)\r\n    {\r\n        return requests[_id].drTxHash;\r\n    }\r\n\r\n    /// @dev Returns the number of data requests in the WRB.\r\n    /// @return the number of data requests in the WRB.\r\n    function requestsCount() external view returns (uint256) {\r\n        return requests.length;\r\n    }\r\n\r\n    /// @dev Verifies if the contract is upgradable.\r\n    /// @return true if the contract upgradable.\r\n    function isUpgradable(address _address)\r\n        external\r\n        view\r\n        override\r\n        returns (bool)\r\n    {\r\n        if (_address == owner) {\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    /// @dev Estimate the amount of reward we need to insert for a given gas price.\r\n    /// @param _gasPrice The gas price for which we need to calculate the reward.\r\n    /// @return The reward to be included for the given gas price.\r\n    function estimateGasCost(uint256 _gasPrice)\r\n        external\r\n        pure\r\n        override\r\n        returns (uint256)\r\n    {\r\n        return _gasPrice * ESTIMATED_REPORT_RESULT_GAS;\r\n    }\r\n    \r\n    /// @dev Computes the output hash of a request from its bytecode.\r\n    /// @param _bytecode The bytecode of the request.\r\n    /// @return The output hash of the request.\r\n    function computeDrOutputHash(bytes memory _bytecode)\r\n        public\r\n        pure\r\n        returns (uint256)\r\n    {\r\n        return uint256(sha256(_bytecode));\r\n    }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_witnetRequestBoardAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"currentWitnetRequestBoard\",\"outputs\":[{\"internalType\":\"contract WitnetRequestBoardInterface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_gasPrice\",\"type\":\"uint256\"}],\"name\":\"estimateGasCost\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_requestAddress\",\"type\":\"address\"}],\"name\":\"postDataRequest\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"readDrTxHash\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"readResult\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"upgradeDataRequest\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newAddress\",\"type\":\"address\"}],\"name\":\"upgradeWitnetRequestBoard\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"WitnetRequestBoardProxy","CompilerVersion":"v0.8.4+commit.c7e474f2","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000d653fbd7c736838289262f0f41a458f35393c88a","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://ef2bfe80ac6f358a1c26e3e76ae91806c05ca9a4440e4f33c6af9f2ac4b0fb3a"}]}