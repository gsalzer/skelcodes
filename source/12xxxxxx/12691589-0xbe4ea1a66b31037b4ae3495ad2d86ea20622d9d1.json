{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/LM/connector/main.sol\": {\r\n      \"content\": \"pragma solidity ^0.7.0;\\npragma experimental ABIEncoderV2;\\n\\ninterface InstaLMMerkleInterface {\\n    function claim(\\n        address recipient,\\n        uint256 cumulativeAmount,\\n        uint256 index,\\n        uint256 cycle,\\n        bytes32[] calldata merkleProof\\n    ) external;\\n}\\n\\ncontract Variables {\\n    InstaLMMerkleInterface public immutable instaLMMerkle;\\n\\n    constructor(address _instaLMMerkle) {\\n        instaLMMerkle = InstaLMMerkleInterface(_instaLMMerkle);\\n    }\\n}\\n\\ncontract Resolver is Variables {\\n    constructor(address _instaLMMerkle) Variables(_instaLMMerkle) {}\\n\\n    event LogClaim(address user, uint256 index, uint256 cycle);\\n\\n\\n    function claim (\\n        uint256 index,\\n        uint256 cumulativeAmount,\\n        uint256 cycle,\\n        bytes32[] calldata merkleProof\\n    ) external payable returns (string memory _eventName, bytes memory _eventParam){\\n        instaLMMerkle.claim(\\n            address(this),\\n            cumulativeAmount,\\n            index,\\n            cycle,\\n            merkleProof\\n        );\\n\\n        _eventName = \\\"LogClaim(address,uint256,uint256)\\\";\\n        _eventParam = abi.encode(address(this), index, cycle);\\n    }\\n}\\n\\ncontract ConnectV2LMClaimer is Resolver {\\n    constructor(address _instaLMMerkle) public Resolver(_instaLMMerkle) {}\\n\\n    string public constant name = \\\"LM-Merkle-Claimer-v1.0\\\";\\n}\\n\\n\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": false,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_instaLMMerkle\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"cycle\",\"type\":\"uint256\"}],\"name\":\"LogClaim\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"cumulativeAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"cycle\",\"type\":\"uint256\"},{\"internalType\":\"bytes32[]\",\"name\":\"merkleProof\",\"type\":\"bytes32[]\"}],\"name\":\"claim\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"_eventName\",\"type\":\"string\"},{\"internalType\":\"bytes\",\"name\":\"_eventParam\",\"type\":\"bytes\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"instaLMMerkle\",\"outputs\":[{\"internalType\":\"contract InstaLMMerkleInterface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"ConnectV2LMClaimer","CompilerVersion":"v0.7.0+commit.9e61f92b","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"0000000000000000000000003b9ae61b9feacba6c2f58d73aa484d671900bfb4","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}