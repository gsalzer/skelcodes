{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"/Users/matiasbn/Desktop/stacktical/stacktical-dsla-contracts/contracts/MessengerRegistry.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.6.6;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"./messenger/IMessenger.sol\\\";\\n\\n/**\\n * @title MessengerRegistry\\n * @dev MessengerRegistry is a contract to register openly distributed Messengers\\n */\\ncontract MessengerRegistry {\\n    struct Messenger {\\n        address ownerAddress;\\n        address messengerAddress;\\n        string specificationUrl;\\n        uint256 precision;\\n        uint256 requestsCounter;\\n        uint256 fulfillsCounter;\\n        uint256 id;\\n    }\\n\\n    /// @dev array to store the messengers\\n    Messenger[] public messengers;\\n    /// @dev (messengerAddress=>bool) to check if the Messenger was\\n    mapping(address => bool) public registeredMessengers;\\n    /// @dev (userAddress=>messengerAddress[]) to register the messengers of an owner\\n    mapping(address => uint256[]) public ownerMessengers;\\n    /// @dev (userAddress=>messengerAddress[]) to register the owner of a Messenger\\n    address public slaRegistry;\\n\\n    event MessengerRegistered(\\n        address indexed ownerAddress,\\n        address indexed messengerAddress,\\n        string specificationUrl,\\n        uint256 precision,\\n        uint256 id\\n    );\\n\\n    event MessengerModified(\\n        address indexed ownerAddress,\\n        address indexed messengerAddress,\\n        string specificationUrl,\\n        uint256 precision,\\n        uint256 id\\n    );\\n\\n    /**\\n     * @dev sets the SLARegistry contract address and can only be called\\n     * once\\n     */\\n    function setSLARegistry() external {\\n        // Only able to trigger this function once\\n        require(\\n            address(slaRegistry) == address(0),\\n            \\\"SLARegistry address has already been set\\\"\\n        );\\n\\n        slaRegistry = msg.sender;\\n    }\\n\\n    /**\\n     * @dev function to register a new Messenger\\n     */\\n    function registerMessenger(\\n        address _callerAddress,\\n        address _messengerAddress,\\n        string calldata _specificationUrl\\n    ) external {\\n        require(\\n            msg.sender == slaRegistry,\\n            \\\"Should only be called using the SLARegistry contract\\\"\\n        );\\n        require(\\n            !registeredMessengers[_messengerAddress],\\n            \\\"messenger already registered\\\"\\n        );\\n\\n        IMessenger messenger = IMessenger(_messengerAddress);\\n        address messengerOwner = messenger.owner();\\n        require(\\n            messengerOwner == _callerAddress,\\n            \\\"Should only be called by the messenger owner\\\"\\n        );\\n        uint256 precision = messenger.messengerPrecision();\\n        uint256 requestsCounter = messenger.requestsCounter();\\n        uint256 fulfillsCounter = messenger.fulfillsCounter();\\n        registeredMessengers[_messengerAddress] = true;\\n        uint256 id = messengers.length - 1;\\n        ownerMessengers[messengerOwner].push(id);\\n\\n        messengers.push(\\n            Messenger({\\n                ownerAddress: messengerOwner,\\n                messengerAddress: _messengerAddress,\\n                specificationUrl: _specificationUrl,\\n                precision: precision,\\n                requestsCounter: requestsCounter,\\n                fulfillsCounter: fulfillsCounter,\\n                id: id\\n            })\\n        );\\n\\n        emit MessengerRegistered(\\n            messengerOwner,\\n            _messengerAddress,\\n            _specificationUrl,\\n            precision,\\n            id\\n        );\\n    }\\n\\n    /**\\n     * @dev function to modifyMessenger a Messenger\\n     */\\n    function modifyMessenger(\\n        string calldata _specificationUrl,\\n        uint256 _messengerId\\n    ) external {\\n        Messenger storage storedMessenger = messengers[_messengerId];\\n        IMessenger messenger = IMessenger(storedMessenger.messengerAddress);\\n        require(\\n            msg.sender == messenger.owner(),\\n            \\\"Can only be modified by the owner\\\"\\n        );\\n        storedMessenger.specificationUrl = _specificationUrl;\\n        storedMessenger.ownerAddress = msg.sender;\\n        emit MessengerModified(\\n            storedMessenger.ownerAddress,\\n            storedMessenger.messengerAddress,\\n            storedMessenger.specificationUrl,\\n            storedMessenger.precision,\\n            storedMessenger.id\\n        );\\n    }\\n\\n    function getMessengers() external view returns (Messenger[] memory) {\\n        Messenger[] memory returnMessengers =\\n            new Messenger[](messengers.length);\\n        for (uint256 index = 0; index < messengers.length; index++) {\\n            IMessenger messenger =\\n                IMessenger(messengers[index].messengerAddress);\\n            uint256 requestsCounter = messenger.requestsCounter();\\n            uint256 fulfillsCounter = messenger.fulfillsCounter();\\n            returnMessengers[index] = Messenger({\\n                ownerAddress: messengers[index].ownerAddress,\\n                messengerAddress: messengers[index].messengerAddress,\\n                specificationUrl: messengers[index].specificationUrl,\\n                precision: messengers[index].precision,\\n                requestsCounter: requestsCounter,\\n                fulfillsCounter: fulfillsCounter,\\n                id: messengers[index].id\\n            });\\n        }\\n        return returnMessengers;\\n    }\\n\\n    function getMessengersLength() external view returns (uint256) {\\n        return messengers.length;\\n    }\\n}\\n\"\r\n    },\r\n    \"/Users/matiasbn/Desktop/stacktical/stacktical-dsla-contracts/contracts/messenger/IMessenger.sol\": {\r\n      \"content\": \"pragma solidity 0.6.6;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\n/**\\n * @title IMessenger\\n * @dev Interface to create new Messenger contract to add lo Messenger lists\\n */\\n\\nabstract contract IMessenger is Ownable {\\n    struct SLIRequest {\\n        address slaAddress;\\n        uint256 periodId;\\n    }\\n\\n    /**\\n     * @dev event emitted when having a response from Chainlink with the SLI\\n     * @param slaAddress 1. SLA address to store the SLI\\n     * @param periodId 2. id of the Chainlink request\\n     * @param requestId 3. id of the Chainlink request\\n     * @param chainlinkResponse 4. response from Chainlink\\n     */\\n    event SLIReceived(\\n        address indexed slaAddress,\\n        uint256 periodId,\\n        bytes32 indexed requestId,\\n        bytes32 chainlinkResponse\\n    );\\n\\n    /**\\n     * @dev sets the SLARegistry contract address and can only be called once\\n     */\\n    function setSLARegistry() external virtual;\\n\\n    /**\\n     * @dev creates a ChainLink request to get a new SLI value for the\\n     * given params. Can only be called by the SLARegistry contract or Chainlink Oracle.\\n     * @param _periodId 1. id of the period to be queried\\n     * @param _slaAddress 2. address of the receiver SLA\\n     * @param _slaAddress 2. if approval by owner or msg.sender\\n     */\\n\\n    function requestSLI(\\n        uint256 _periodId,\\n        address _slaAddress,\\n        bool _ownerApproval,\\n        address _callerAddress\\n    ) external virtual;\\n\\n    /**\\n     * @dev callback function for the Chainlink SLI request which stores\\n     * the SLI in the SLA contract\\n     * @param _requestId the ID of the ChainLink request\\n     * @param _chainlinkResponseUint256 response object from Chainlink Oracles\\n     */\\n    function fulfillSLI(bytes32 _requestId, uint256 _chainlinkResponseUint256)\\n        external\\n        virtual;\\n\\n    /**\\n     * @dev gets the messenger precision\\n     */\\n    function messengerPrecision() external view virtual returns (uint256);\\n\\n    /**\\n     * @dev gets the slaRegistryAddress\\n     */\\n    function slaRegistryAddress() external view virtual returns (address);\\n\\n    /**\\n     * @dev gets the chainlink oracle contract address\\n     */\\n    function oracle() external view virtual returns (address);\\n\\n    /**\\n     * @dev gets the chainlink job id\\n     */\\n    function jobId() external view virtual returns (bytes32);\\n\\n    /**\\n     * @dev gets the fee amount of LINK token\\n     */\\n    function fee() external view virtual returns (uint256);\\n\\n    /**\\n     * @dev returns the requestsCounter\\n     */\\n    function requestsCounter() external view virtual returns (uint256);\\n\\n    /**\\n     * @dev returns the fulfillsCounter\\n     */\\n    function fulfillsCounter() external view virtual returns (uint256);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/GSN/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.0;\\n\\nimport \\\"../GSN/Context.sol\\\";\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\ncontract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor () internal {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(_owner == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"remappings\": [],\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 100\r\n    },\r\n    \"evmVersion\": \"istanbul\",\r\n    \"libraries\": {},\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}","ABI":"[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"ownerAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"messengerAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"specificationUrl\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"precision\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"MessengerModified\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"ownerAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"messengerAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"specificationUrl\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"precision\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"MessengerRegistered\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"getMessengers\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"ownerAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"messengerAddress\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"specificationUrl\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"precision\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"requestsCounter\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"fulfillsCounter\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"internalType\":\"struct MessengerRegistry.Messenger[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMessengersLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"messengers\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"ownerAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"messengerAddress\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"specificationUrl\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"precision\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"requestsCounter\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"fulfillsCounter\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_specificationUrl\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"_messengerId\",\"type\":\"uint256\"}],\"name\":\"modifyMessenger\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"ownerMessengers\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_callerAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_messengerAddress\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"_specificationUrl\",\"type\":\"string\"}],\"name\":\"registerMessenger\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"registeredMessengers\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"setSLARegistry\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"slaRegistry\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"MessengerRegistry","CompilerVersion":"v0.6.6+commit.6c089d02","OptimizationUsed":"1","Runs":"100","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}