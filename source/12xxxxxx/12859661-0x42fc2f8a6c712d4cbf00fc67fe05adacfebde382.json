{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.6.7;\r\n\r\ncontract GebAuth {\r\n    // --- Authorization ---\r\n    mapping (address => uint) public authorizedAccounts;\r\n    /**\r\n     * @notice Add auth to an account\r\n     * @param account Account to add auth to\r\n     */\r\n    function addAuthorization(address account) external isAuthorized {\r\n        authorizedAccounts[account] = 1;\r\n        emit AddAuthorization(account);\r\n    }\r\n    /**\r\n     * @notice Remove auth from an account\r\n     * @param account Account to remove auth from\r\n     */\r\n    function removeAuthorization(address account) external isAuthorized {\r\n        authorizedAccounts[account] = 0;\r\n        emit RemoveAuthorization(account);\r\n    }\r\n    /**\r\n    * @notice Checks whether msg.sender can call an authed function\r\n    **/\r\n    modifier isAuthorized {\r\n        require(authorizedAccounts[msg.sender] == 1, \"GebAuth/account-not-authorized\");\r\n        _;\r\n    }\r\n\r\n    // --- Events ---\r\n    event AddAuthorization(address account);\r\n    event RemoveAuthorization(address account);\r\n\r\n    constructor () public {\r\n        authorizedAccounts[msg.sender] = 1;\r\n        emit AddAuthorization(msg.sender);\r\n    }\r\n}\r\n\r\nabstract contract TaxCollectorLike {\r\n    function modifyParameters(\r\n        bytes32 collateralType,\r\n        bytes32 parameter,\r\n        uint256 data\r\n    ) virtual external;\r\n    function taxSingle(bytes32) virtual public returns (uint256);\r\n}\r\ncontract MinimalTaxCollectorOverlay is GebAuth {\r\n    // --- Variables ---\r\n    // Stability fee bounds for every collateral type\r\n    mapping(bytes32 => Bounds) public stabilityFeeBounds;\r\n    TaxCollectorLike           public taxCollector;\r\n\r\n    // --- Structs ---\r\n    struct Bounds {\r\n        // Maximum per second stability fee that can be charged for a collateral type\r\n        uint256 upperBound;  // [ray]\r\n        // Minimum per second stability fee that can be charged for a collateral type\r\n        uint256 lowerBound;  // [ray]\r\n    }\r\n\r\n    constructor(\r\n      address taxCollector_,\r\n      bytes32[] memory collateralTypes,\r\n      uint256[] memory lowerBounds,\r\n      uint256[] memory upperBounds\r\n    ) public {\r\n        require(taxCollector_ != address(0), \"MinimalTaxCollectorOverlay/null-address\");\r\n        require(both(collateralTypes.length == lowerBounds.length, lowerBounds.length == upperBounds.length), \"MinimalTaxCollectorOverlay/invalid-array-lengths\");\r\n        require(collateralTypes.length > 0, \"MinimalTaxCollectorOverlay/null-array-lengths\");\r\n\r\n        taxCollector = TaxCollectorLike(taxCollector_);\r\n\r\n        // Loop through the bounds array and set them for each collateral type\r\n        for (uint i = 0; i < collateralTypes.length; i++) {\r\n            // Make sure we don't set bounds for the same collateral type twice\r\n            require(\r\n              both(stabilityFeeBounds[collateralTypes[i]].upperBound == 0, stabilityFeeBounds[collateralTypes[i]].lowerBound == 0),\r\n              \"MinimalTaxCollectorOverlay/bounds/already-set\"\r\n            );\r\n            // Make sure the upper bound is >= the lower bound\r\n            require(upperBounds[i] >= lowerBounds[i], \"MinimalTaxCollectorOverlay/invalid-bounds\");\r\n            stabilityFeeBounds[collateralTypes[i]] = Bounds(upperBounds[i], lowerBounds[i]);\r\n        }\r\n    }\r\n\r\n    // --- Boolean Logic ---\r\n    function both(bool x, bool y) internal pure returns (bool z) {\r\n        assembly{ z := and(x, y)}\r\n    }\r\n\r\n    // --- Math ---\r\n    uint256 public constant RAY = 10 ** 27;\r\n\r\n    /*\r\n    * @notice Modify the stability fee for a collateral type; revert if the new fee is not within bounds\r\n    * @param collateralType The collateral type to change the fee for\r\n    * @param parameter Must be \"stabilityFee\"\r\n    * @param data The new fee\r\n    */\r\n    function modifyParameters(\r\n        bytes32 collateralType,\r\n        bytes32 parameter,\r\n        uint256 data\r\n    ) external isAuthorized {\r\n        // Fetch the bounds\r\n        uint256 lowerBound = stabilityFeeBounds[collateralType].lowerBound;\r\n        uint256 upperBound = stabilityFeeBounds[collateralType].upperBound;\r\n        // Check that the collateral type has bounds\r\n        require(\r\n          upperBound >= lowerBound,\r\n          \"MinimalTaxCollectorOverlay/bounds-improperly-set\"\r\n        );\r\n        // Check that the new fee is within bounds\r\n        require(both(data <= upperBound, data >= lowerBound), \"MinimalTaxCollectorOverlay/fee-exceeds-bounds\");\r\n        // Check that the parameter name is correct\r\n        require(parameter == \"stabilityFee\", \"MinimalTaxCollectorOverlay/invalid-parameter\");\r\n        // Collect the fee up until now\r\n        taxCollector.taxSingle(collateralType);\r\n        // Finally set the new fee\r\n        taxCollector.modifyParameters(collateralType, parameter, data);\r\n    }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"taxCollector_\",\"type\":\"address\"},{\"internalType\":\"bytes32[]\",\"name\":\"collateralTypes\",\"type\":\"bytes32[]\"},{\"internalType\":\"uint256[]\",\"name\":\"lowerBounds\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"upperBounds\",\"type\":\"uint256[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"AddAuthorization\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"RemoveAuthorization\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"RAY\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"addAuthorization\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"authorizedAccounts\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"collateralType\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"parameter\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"data\",\"type\":\"uint256\"}],\"name\":\"modifyParameters\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"removeAuthorization\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"stabilityFeeBounds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"upperBound\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lowerBound\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"taxCollector\",\"outputs\":[{\"internalType\":\"contract TaxCollectorLike\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"MinimalTaxCollectorOverlay","CompilerVersion":"v0.6.7+commit.b8d736ae","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000cdb05aeda142a1b0d6044c09c64e4226c1a281eb000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000c0000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000014554482d4100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000033b2e3c96ec8c6cfd0e731b00000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000033b2e3ca88761c99baf1532","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"ipfs://7485d43a35030b2f5d9cb1e23b84e83c69f3ada17cea1da1292f373406ec0e98"}]}