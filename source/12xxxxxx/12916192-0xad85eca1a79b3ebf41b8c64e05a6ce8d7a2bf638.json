{"status":"1","message":"OK","result":[{"SourceCode":"//SPDX-License-Identifier: Unlicense\r\npragma solidity ^0.8.6;\r\n\r\n//Uniqly FanadisePresale contract\r\ncontract FanadisePresale19 {\r\n    // presale target - close contract when passed\r\n    uint256 public immutable presaleLimit;\r\n\r\n    // minimum pay-in per user\r\n    uint256 public immutable minPerUser;\r\n\r\n    // maximum pay-in per user\r\n    uint256 public immutable maxPerUser;\r\n\r\n    // timestamp ending presale\r\n    uint256 public immutable presaleEnd;\r\n\r\n    // failsafe time - fail if not properly closed after presaleEnd\r\n    uint256 constant failSafeTime = 2 weeks;\r\n\r\n    // owner address - will receive ETH if success\r\n    address public owner;\r\n\r\n    //constructor\r\n    constructor(\r\n        uint256 _presaleLimit, //maximum amount to be collected\r\n        uint256 _minPerUser, //minimum buy-in per user\r\n        uint256 _maxPerUser, //maximum buy-in per user\r\n        uint256 _presaleEnd, //unix timestamp of presale round end\r\n        address _owner //privileged address\r\n    ) {\r\n        presaleLimit = _presaleLimit;\r\n        minPerUser = _minPerUser;\r\n        maxPerUser = _maxPerUser;\r\n        presaleEnd = _presaleEnd;\r\n        owner = _owner;\r\n    }\r\n\r\n    //flags need for logic (false is default)\r\n    bool presaleEnded;\r\n    bool presaleFailed;\r\n    bool presaleStarted;\r\n\r\n    // list of user balances (zero is default)\r\n    mapping(address => uint256) private balances;\r\n\r\n    // join presale - just send ETH to contract,\r\n    // remember to check GAS LIMIT > 70000!\r\n    receive() external payable {\r\n        // only if not ended\r\n        require(presaleStarted, \"Presale not started\");\r\n        require(!presaleEnded, \"Presale ended\");\r\n        // only if within time limit\r\n        require(block.timestamp < presaleEnd, \"Presale time's up\");\r\n\r\n        // record new user balance if possible\r\n        uint256 amount = msg.value + balances[msg.sender];\r\n        require(amount >= minPerUser, \"Below buy-in\");\r\n        require(amount <= maxPerUser, \"Over buy-in\");\r\n        balances[msg.sender] = amount;\r\n\r\n        // end presale if reached limit\r\n        if (collected() >= presaleLimit) {\r\n            presaleEnded = true;\r\n        }\r\n    }\r\n\r\n    function start() external {\r\n        require(msg.sender == owner, \"Only for Owner\");\r\n        presaleStarted = true;\r\n    }\r\n\r\n    // check balance of any user\r\n    function balanceOf(address user) external view returns (uint256) {\r\n        return balances[user];\r\n    }\r\n\r\n    // return balance of caller\r\n    function balanceOf() external view returns (uint256) {\r\n        return balances[msg.sender];\r\n    }\r\n\r\n    // total ETH on this contract\r\n    function collected() public view returns (uint256) {\r\n        return address(this).balance;\r\n    }\r\n\r\n    // withdraw ETH from contract\r\n    // can be used by user and owner\r\n    // return false if nothing to do\r\n    function withdraw() external returns (bool) {\r\n        if (!presaleEnded) {\r\n            // end and fail presale if failsafe time passed\r\n            if (block.timestamp > presaleEnd + failSafeTime) {\r\n                presaleEnded = true;\r\n                presaleFailed = true;\r\n                // don't return true, you can withdraw in this call\r\n            }\r\n        }\r\n        // owner withdraw - presale succeed ?\r\n        else if (msg.sender == owner && !presaleFailed) {\r\n            send(owner, address(this).balance);\r\n            return true;\r\n        }\r\n\r\n        // presale failed, withdraw to calling user\r\n        if (presaleFailed) {\r\n            uint256 amount = balances[msg.sender];\r\n            balances[msg.sender] = 0;\r\n            send(msg.sender, amount);\r\n            return true;\r\n        }\r\n\r\n        // did nothing\r\n        return false;\r\n    }\r\n\r\n    //send ETH from contract to address or contract\r\n    function send(address user, uint256 amount) private {\r\n        bool success = false;\r\n        (success, ) = address(user).call{value: amount}(\"\");\r\n        require(success, \"ETH send failed\");\r\n    }\r\n\r\n    // withdraw any ERC20 token send accidentally on this contract address to contract owner\r\n    function withdrawAnyERC20(IERC20 token) external {\r\n        uint256 amount = token.balanceOf(address(this));\r\n        require(amount > 0, \"No tokens to withdraw\");\r\n        token.transfer(owner, amount);\r\n    }\r\n\r\n    // change ownership in two steps to be sure about owner address\r\n    address public newOwner;\r\n\r\n    // only current owner can delegate new one\r\n    function giveOwnership(address _newOwner) external {\r\n        require(msg.sender == owner, \"Only for Owner\");\r\n        newOwner = _newOwner;\r\n    }\r\n\r\n    // new owner need to accept ownership\r\n    function acceptOwnership() external {\r\n        require(msg.sender == newOwner, \"Ure not New Owner\");\r\n        newOwner = address(0x0);\r\n        owner = msg.sender;\r\n    }\r\n}\r\n\r\n//ERC20 functions for fallback tokens recovery\r\ninterface IERC20 {\r\n    function balanceOf(address _owner) external returns (uint256 balance);\r\n\r\n    function transfer(address _to, uint256 _value) external;\r\n    // can not 'returns (bool success);' because of USDT\r\n    // and other tokens that not follow ERC20 spec fully.\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_presaleLimit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_minPerUser\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_maxPerUser\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_presaleEnd\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"acceptOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"collected\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"giveOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxPerUser\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minPerUser\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"newOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"presaleEnd\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"presaleLimit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"start\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"withdrawAnyERC20\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]","ContractName":"FanadisePresale19","CompilerVersion":"v0.8.6+commit.11564f7e","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"00000000000000000000000000000000000000000000000107ad8f556c6c0000000000000000000000000000000000000000000000000000016345785d8a0000000000000000000000000000000000000000000000000000063eb89da4ed000000000000000000000000000000000000000000000000000000000000610f026000000000000000000000000052af806970007f57e324ac9048e3cf6c8f651627","EVMVersion":"Default","Library":"","LicenseType":"Unlicense","Proxy":"0","Implementation":"","SwarmSource":"ipfs://90f9c9635b17052d371dbd069c4de1ac581c12cc7080f57c98b817f019d78a35"}]}