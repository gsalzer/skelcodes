{"status":"1","message":"OK","result":[{"SourceCode":"/**\r\n *Submitted for verification at Etherscan.io on 2021-07-31\r\n*/\r\n\r\n/*\r\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@WWWWWWWWWWWWMMWWWMWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWMWWWWWWWWWWWWWWWWWWWWWWWWWWWW@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\r\n@@@@@@@@@@@@@@@@@@@@@W@@@@@@@@@@@@WWWWWWWWWWWWWWWMMMWWWWWWWWWWWWWWWWWWxznMWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWW@W@@@@@@@W@@@@@@@@@@@@@@@@@@@@@@\r\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@WWWWWWWWWWWWWWWWWWWWMMMMMWWMWWWWWWWWWWM#;:,:;i+MWWWWWWMWWMMMMMMMMWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWW@@@@@@@@@@@@@@@@@@@\r\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@W@WWWWWWWWWWWWWWWMWMMWMMMMMMWWWWMMWWWWx*i;i+++++*zWWMWMMMMMMMMMMMMWWWWWWWWWWWWWWWWWWWWWWMWWWWWWWWWWWWWW@@@@@@@@@@@@@@@@@@@ \r\n@@@@@@@@@@@@@@@@@@@@@@@@WWWWWWWWWWMWMWWWWWWWxMWWWWMMMMMMMMMMMMMWWx*;;;i+#znnn##MMMMMMMMMMMMMMMMMWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWW@@@@@@@@@@@@@@@@@\r\n@@@@@@@@@@@@@@@@W@@@@@@@@WWWWWWWWWWWWWWWWWWWWWWWWMMMMMMMMMMMMMMMM*;::,:*+znnxMzxMMMMMMMMMxMMMMMMMMMMMMWWMWWWMWWWWWWWWWWWWWWWWWWWWWWWW@@@@@@@@@@@@@@@@@\r\n@@@@@@@@@@@@@@@@@@@@@@WWWWWWWWWWWWWWWWWWWWWWWWWWMMMMMMMMMMMMMMMMn;:,,,,;*#zxxMWxMMMMMMMMMMMMMMMMMMMMMMMMWWWWMWWMWWWWWWWWWWWWWWWWWWWWW@@@@@@@@@@@@@@@@@\r\n@@@@@@@@@@@W@@@@@@@@WWWWWWWWWWWWWWWWWWWWWWWWWMMMMMMMMMMMMMMMMMMM#;,,,,,;*#znxMWxMMMMMMMMMMMMMMMMMMMMMMMMMMMWMMWWMMMMMMMMMWWWWWWWWWWWW@@@@@@@@@@@@@@@@@\r\n@@@@@@@@@@@WWW@@@@WWWWWWWWWWWWWWWWWWWWWWWWMMMMMMMMMMMMxxMMMMMMMM*:,,,,,;*##zxMWMMMMMMMxxxMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMWWWWWWWWWWW@@@@@@@@@@@@@@@@@\r\n@@@@@@@@@W@WWWWWWWWWWWWWWWWWWWWWWWMWWMMMMMMMMMMMMMMMMMxxxxxxxMMM*:,,,,:;*+#nxMWMxMMxxxxxxxMMMMMxMMMMMMMMMMMMMMMMMMMMMMMMMMMMWWWWWWWWWWW@@@@@@@@@@@@@@@\r\n@@@@@@@@@@@WWWWWWWWWWWWWWWWWWWWWWWWWMMMMMMMMMMMMMMMMMMMxxxxxxxxx*;:,,:;;*+#nxMWWxxxxxxxxxxxxMMxxMMMMMMMMMMMMMMMMMMMMxMMMMMMMWxWWWWWWWWW@@@@@@@@@@@@@@@\r\n@@@@@@@@@@WWWWWWWWWWWWWWWWWWMWWWWMMMMMMMMMMMMMMMMMMMMMMxxxxxxxxxi::,,,:;*++zxWW@nxxxxxxxxxxxxxxxxxMMMMMMxMMxxxxxxMMMMMMMMMMMWWWWWWWWWWWWWW@W@@@@@@@@@@\r\n@@@@W@WWWWWWWWWWWWWWWWWWWWWWWWWMMMMMMMMMMMMMMMMMMMMMMMxxxxxxxxx#;:::,::i*i+nxx@@WMxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxMMMMMMMMMWWWWWWWWWWWWWWWWWW@@@@@@@@@\r\n@@WWWWWWWWWWWWWWWWWWWWWWWWWMMMMMMMMMMMMMMMMxMMMMMMMxxxxxxxxnnxx#::::::;+#+znxWW@WxxnnnxxnxxxnxxxxxxxxxxxxxxxxxxxxxxxMMMMMMWWWWWWWWWWWWWWWWWWWWWWWW@@@@\r\nWWWWWWWWWWWWWWWWWWWWWWWWWMMMxMMMMMMMMMMMMMMMxxMxxMxxxxxxxxxnnnn+:::+#nnz+MWWWWW@xnnnnnnnxxxxxxnxxxxxxnxnnnnxxxxxxxxxMMMMMMWxWWWWWWWWWWWWWWWWWWWWWWWWWW\r\nWWWWWWWWWWWWWWWWWWWWWWWWWMMMMMMMMMMMMMxMMMxxxxxxxxxxxxnxxxxnnnn#i::*+nn+;xMnMWM@xnnnnnnnnnnnnnnnnnnnnnnnnnnxxxnxxxxxMMMMMMMMWWWWWWWWWWWWWWWWWWWWWWWWWW\r\nWWWWWWWWWWWWWWWWWWWWWMWMMMMMMMMMMMMxxxxxxxxxxxxxxxxxxxxxxxnnnnnn:::,;##;:nMnnnM@MnnnnnnnnnnnnnnnnnnnnnnnnnnnnnxxxxxMMMMMMMMMWWWWWWWMWWWWWWWWWWWWWWWWWW\r\nWWWWWWWWWWWWWWWMMMMMMMMMMMMMMMMMMMxxxxxxxxxxxxxxxxxxxxxnnnnnnnnni::,:i;,,zWz#zW@zzznnnnnnnnnnnnnnzzznnnnnnnnnnxxxxMMMMMMMMMMMMMMWMWWWWWWWWWWWWWWWWWWWW\r\nWWWWWWWWWWWWMMMMMMMMMMMMMMMMMMMMxxxxxxxxxxxxxxxxxxxnnnnnnnnnznzzzi:::::,,+Wz#x@xzzznnnzzzzzzzzzzzzzznnnznnnnnnxxxxMMMMMxMMMMMMMMMMMMMWWWWWWWWWWWWWWWWW\r\nWWWWWWWWWWWWMMMMMMMMMMMMMMMMMxxxxxxxxxxxnnnnnnnnnnnnnnnnnnnnnnzzz#:;::i,:*xnzWWxzzzzzzzzzzzzzzzzzzzzzzzz#nnnnxxxxxMMMMMMMMMMMMMMMMMMMMMMMMWWWWWWWWWWWW\r\nWWWWWWWWWMMMMMMMMMMMMMMMMxxxxxxxxxxxxxnnnnnnnnnnnnnnnnnnnnnnnnzzzz;;:;i*+M@xzWWnzzzzzzzzzzz####zzzzzzzzzznnnxxxxxxxxxxMMMMMMMMMMMMMMMMMMMMMMWWWWWWWWWW\r\nWWWMWWWMMMMMMMxMMMMMMMMxxxxxxxxxxnnnnnnnnnnznzzzzzzznnnnnnnnnnzzz#:;:;::+nWMxWWz#zz#################zzzznnnnxxxxxxxxxxxxxxxxMMMMMMMMMMMMMMMMMMMMMWWWWW\r\nWWWWMMMMMMMMMMMMMMMMxxxxxxxxxxnnnnnnnnzzzzzzzzzzzzzzzzzzzzzzzzzzz#:;;;;i+#xMxWM#####################zzzznnnnnnxxxxxxxxxxxxxxxxxMMMMMMMMMMMMMMMMMMMMMMW\r\nMMMMMMMMMMMMMMMMMxxxxxxxxxxxnnnnnnzzzzzzzzz#########zzzzzzzzzzzzz#;ii*+*#zMMx@M+#+++++++++++++++####zzzzznnnnnnnnnnxxxxxxxxxxxxxxxxMMxMxMMMMMMMMMMMMMM\r\nMMMMMMMMMMMMMxMxxxxxxxxxnnnnnznnzzzzzz##########################i;;;*++*zxWWW@M*++++++++++++++++#####zzzzzzzzznznnnnnnnnxxxxxxxxxxxxxxxMMxMMMMMMMMMMMM\r\nMMMMMMMMMMMMMMxxxxxxxxxnnnnnnnnzzzzz######+++++++++++++++++++#+*zn+:*+*+znMMW@WMx+****++*++++++++########zzzzzzzznnnnnnnnnnxxxxxxxxxxxxxMMMMMMMMMMMMMM\r\nMMMMMxxMMMxxxxxxxxxxxxxnnnnnnzzzzzz#####+++++++**+++*++***;*nzxnxMn:izi;*#xW@WWW@@n+*********+++++++++#######zzzzzznnnnnnnnnnnxxnxxxxxxxxxxxxxxMMMMMMM\r\nxxxxxxxxxxxxxxnxnnnnnnnnnnnnnzzzzzz####++++++**********i;iz#MzxxxWMi;#nnMW@@MMM@#@@@x#iii*********+++++++######zzzzznnnnn#nnnnnnnnnnxxxxxxxxxxxxxMMMMM\r\nxxxxxxxxxxxnnnnnnnnnnnzzzzzzzz#######++++++******iiiiii*##znxnnMn@Wn;*zxMWWMxxW##@@@@Wxi;iiiii*******++++++######zzzzzzzznnnnnnnnnnxxxxxxxxxxxxxxxMMMM\r\nMMMxxxxxxxxxxxnnnnnnnnzzzzzzzz#####+++++******iiiii;;:izz##nnMnMMWMW*;+nzz#znx@@@W@@M@Wxzi::;;;;i;iiii*****++++####zzzzzzznnnnnnnnnnnnnxxxxxxxxxxxxxMM\r\nMMMxxxxxxxxxxxnxnnnnnnnnnzzzzzz####++++*****iiii;;:,,,,;nzzzxWnxWMxWW*;+z*i+z@W@@W@W@WMxnn+;.,,,::;;;iii***++++####zzzzzzznnnnnnnznnnxnxxxxxxxxxxxxMMM\r\nMMMMMMxxxxxxxxxxxxnnnnnnnnnnzzzzz####++++***iii;;:,,,,,,+nnnxWxnWMWMWWzi+**nWW@#WM@W@MMxMxMn,...,,,::;;ii**++####zzzzzzzznnnnnnnnnnnxnnnxxxxxxxxxxxMMM\r\nMMMMMxxxxxxxxxxxnnnnnnnnnnnzzzzzzz#####+++**ii;;,,,,,,,,:xxMxWxnWWWx@W@MxnMW@W#@Wx@@MWMMxMM+;i;.....,,::;;ii**+++####zzzzzzznnnnnnnnxnxnxxxxxxxxxMMMMM\r\nMMMMMnxxxxxxxxxxxxxnnnnnnnnnzzzzzz###++*ii;;::,,.,,,..,,:zMMMWxnxWWxWWW@@WMW@M#WWx@MxWxWxWxi;*+i......,,::;;ii**++####zzzzzzzzzzznnnnnnnnnnxxxxxxxxxMM\r\nMMMMMMMxxxxxxxxxxxxxxnnnnnnnnzzzz##++*ii;::,,..`.,....,,;#WMxMxxn@WMM@MWWMx@M@WMMx@MMWxWMWzii*##i,,,,....,,::;ii*+##zzzzzzznnnnnnnnnnnnnnnnxxxxxxxxxxx\r\nMMMMMMMMMxxxxxxxxxxxxxxxnnnnnnzz#++*i;::,..`````.,...,,:i#WxnMxxnW@Wx@WMWMM@x@MMMn@MMWxWMW+ii+#zz:,:,,,,.....,::;i*++#zznnnnnnxxxxxxxxxxxxxxxxxxxxxxxM\r\nMMMMMMMMMMMMMxxxxxxxxxxxxxnnnz#+*i;;:,..````````,,...,:;*zWMnxxxnMWWxM@W@W@MM@nWMnWWMWxWMx*ii+#zni::,:,,,,,.....,:;;i*+#znnnxxxxxxxxxxxxxMMMMMMMMMMMMM\r\nMMMMMMMMMMMMMMMMxxxxxxxxxnnz#+*i;:,..``````````.,,..,,,:;*MWnnMxxMWWMx@@@@WzWWzWMnMWWWM@Wz*i*+#zn*::,:.,...,,,....,,:;i*+#znnxxxxxxxxMMxMMMMMMMMMMMMMM\r\nMMMMMMMMMMMMMMMMxxxxxxxnnz#+*i;:,.``````````..,,:,,,,,,,:;+WnnxxxMWWWMM@@WxzWxzWMnMWWWW@M+*i*+#zn+::;:;:,,...........,:;i*+#znnxxxxxMMMMMMMMMMMMMMMMMW\r\nMMMMMMMMMMMMMMMMMMMMxxnz#+*;:,..```````.,.,:;;:;:,,,,,,,:;*xxnxMxMWWWWx@W@nn@nnWMnM@WW@W#***+#znx+:::;i;ii;,...,.......,,:;i+#znxxxMMMMMMxMMMMMMMMWWWW\r\nWWMMMMMMMMMMMMMMxMMxnz#+i;:,,.`.````.,,::;iiiiii,,,,,,,,:;*nWxxxMMWWW@xW#@nnWnnWxnM@@W@z*i*+#zznx+iii::;;;i:::,,..,....,.,,:;i+#znxxMMMMMMMMMWWWWWWWWW\r\nWWWWWWWWWMMMMMMMMxnz#+i;:,.....``...,:;;iiiiiiii,,,,,,,,:;*z@MxxMMWWW@xW#WnxMxxMxMWW@@x*;;i*znnxx*i****iii;ii;:,,,,,,....,,,,:;i+#znxMMMMMMWWWWWWWWWWW\r\nWWWWWWWWWWWWWMMMxz#+*;:,.``.....,,,;;iii*****i**.,,,,,::;;*#WWMMWWWWWWMW#MnW@xMMW@@@W@#i;;i*#nnnxi;ii++***i***;;::,,,......,::::;*+#zxMMMWWWWWWWWWWWWW\r\nWWWWWWWWWWWWMMxnz+*i:,.``.....,:::;;i**++++++*+i,,,,,,:;ii*#WWWWWWWWWWxWWx@#MnW@@#@W@W*;:;i*#nnnx*i*i**+*+***i::::::,,,,.....,::::i*+znxMMWWWWWWWWWWWW\r\nWWWWWWWWWWWMMnz#*i:,.``.,,.:::;;;*i*+++######++i:,,,,:;*+#+zW@W@@@@WWWx@@@#@nW@##@MW@Mi:::;*#nnzn#****+*+###+*i**:::::,,,,,,....:;::i*#znMMWWWWWWWWWWW\r\nWWWWWWMWWWMxn#+i;,...,:::,:;:;ii*++########zzzz*;:,,,:i+###zW@@@@@@@WWM@##@MM@@@@W@@@M;:::;+znnzzz**#nznnz##zn##+*iii;;;:::,,....,::,;*+#nxMWWWWWWWWWW\r\nWWWWWWWWWMxz+*i,.,,,,,:;;;:;i*++###zzzzzzzzz#+**;:,,,,,::::;i*+##nxMWWWWMn+*i***+zx@@M;::;i#nnnznMi;;i+##nn#znnzz#++*iiii;::;:,.....,,:i*#zxMMWWWWWWWW\r\n@WWW@WWMxnz+i:,::,,,;;i;:;i*+###zzznnnnz+;;;;;;;;;::,,,,:;i***iiiiii***iiiiii*ii*+#znx;::;*znnnznM+;;;;:,,:i*zxxnzz++**ii;;:;;::,,.....,:i+znxMWWWW@@W\r\n@@@@WWMxn#+;,:ii:,:i*ii***+##zznnnnnnz;..;;ii**+;;;:,,:;*##+*iiiiiiiiiiii**iiiii+z#zzni:;*+nxnznxWn**ii;;i;;;,:*xxxnnx##+*;;:;;*+*;,,,,,,,;*#nxMWW@@@@\r\n@@@WWMxz#i:;ii;,:i*****#+##zznnnnnnn#i#xMMxxxxnn*:::::i+#++********+++++###zzznnxnzz#z+iii*#nzznMWnznnxxxxMxxn#*izxxxxxxnz#**i*#*+#i:,,,,,,;*#zxMWW@@@\r\n@@WWMxz+;:i*i::i*+++++##zznnnxxxxxxz++nnz###+++++;,,,:;;;;iii*+++++##zzznnxnzznxn+;;;;iiii*#nxnnMW#++++###zzxMWWM*#xMMMxxMMxn+*++**i;:::,,,,:i+znMWW@@\r\n@WWMnz*;;*+i;i*+++++##znnnxxxxxxnxzz*nz######++*+*:,,,,,:;ii*++###zznxxz#z#znMM#i::::i*+++#zxMMxMW+*+++#####zzzzn#+#MMMMxxxxMMxnz+**ii;;::::::;*znxWW@\r\nWWxn#i;;++i;i+####zzznnxxnnnnxMMxxz*#n####++***ii*i:,::i**++#zzzznnxnz#+#nxMx#i::::;i+#zznnnnMMMMWiii***++###zzzzn*#nMMxxxMMxxxnxxz+*iiii;;:;;:;i#nxMW\r\nMxn+ii*#+*i*+####zznnxxxxxxnxMMMxn#in#+++****iiiii#iii*+##zznnz##zzz###nxWM#i;;;ii++#zznnnnnznMMWniiii****+++##zzn#*#xMMxxMxxxxxn#xxzz#i**ii;i;;;;+nxM\r\nxn+*+###***#zzzzznnxxxMMMMMMMMMMMnizz********iii;;+#**#zznnnnzzznnnzznxWWx#*ii*++###zzzzzz##znMMW#iiii*****+++++#zn++zMMMMMxxnxxxMn#xnz++#+**iii;;i+zx\r\nz+##zz#++zzzzznnnxxxMMMMMMWWWWMMn+*z+******i*iii;;;#*+znxxxnzznnxxnnxW@Mxz+++*****++#z##+++znxMMMiiiii******++++++zz*znMxxMxMxxMxnnz++ii+*++**++*iii*z\r\n#zzzn##zzznnnnxxxMMMMMMWWWWWWWWzziz#**i***ii*iii;;;i#znxMxnnxxxxxnxMWWWWMxnnzzzzzznnnzz###nnnxMW#;;;iii******++**+#z+*zMMMxnxMxMxn#nz+*+##++*++++****+\r\nnnznzzz##nnnxxxMMMMMMWWWWWWWWWWn*+z+i;i***;i*iii;;::*nMWWMMMxxxxxMWMxnnnnnznxxxxxxxxnnnnnnnxxxMW;;;;;ii****ii++*ii##zizzMxMxxnnxxnzn+*++znz##+++##++++\r\nxxnnnz#nnxxxxMMMMMWWWWWWWWWWWWnzin#*::i+*i;*iii;;;::;;x@#@@@WWW@###@WMxnnzzzzzzzzzzzznxxxxxxxxMx:;;:;ii*****i+++i;*#z#*znxMMxn++zzn#++#####+#z+#+zz##+\r\nxnznnnnnnxMMMMMWWWWWWWWWWW@@@Wzi#z+;,;*+*;i*iii;;;::;;xW@@#############@@WMxxnnnnnxxxxxxxMMMxMW*:;;;:ii*****i*+#*;:+#n*#nMMnzz+++++#z++++zz#znnzz##zz#\r\nz#znxnxxxMMMWWWWWWWWW@W@@@@@@n#*n#*,:*++*;iiiii;;;::;;nW@@@@################@WMxxxxxMMMMWWWxn#i;;;;;;ii*****ii+##i,i##zizxxzz#*####+#z####n#zznx####zz\r\nnxxxxnxMMMMWWWWWWW@@@@@@@@@@Wniz##:,i*++i;iiii;;;;::;;nW@@@@####################@WWWW@@@#;::::;;;;;;;;i******i+##+:,+#z*#znzzzz#z####z#z#+##zzz##+####\r\nMMMxnxMMWWWWWW@@@@@@@@@@@@@@x+*n#i,;*+++;;iiiii;;;::;;nWW@@@@###########################+;::::;;;;;;;;i******i*+##i,;##zinznnnzz#zzz####nz#z##+zzzz#zz\r\nMMMxxMWWWW@@@@@@@@@@@@@@@@@Wniz#+::i+++*;iiiii;;;;::;;zMW@@@@####@@######@@#############+;::::;;;;;;;;ii*******+##+;,*#n+#zxnnnnnzzzz##+#zzzzn#+zzzzzn\r\nMMMxMWW@@@@@@@@@@@@@@@@@@@@n++n#;,;*+++i;iiiii;;;;::;:nWWW@@@@@@@#@@@@####@###@@@#######*;:::;;;;;;;;;ii*******+###*::##n*xnxnnn#znzz#*+znxMxx##zzznnx\r\nWWMWW@@@@@@@@@@@@@@@@@@@@@Mnin#+,:*+*+*ii**iii;;;:::;:n@@WW@@@@@#####@WW@@@#@WMW########i;:::::;;;;;;iii*****+i+####;,i#z+#zxx*,:;znnxxzxxMxMMxnznnnxM\r\nWWW@@@@@@@@@@@@@@@@@@@@@@@n+#z#*,;++***;iiiii;;:::::::nW@@@W@@@@@@####@WMMMMW@@########Wi;::::::::;;;;;ii****+**####+,:##z*nzz,,i*MMxMMxxMxMWWWWxxxxMM\r\n@@@@@@@@@@@@@@@@@@@@@@@@@xnin+zi:****iiii;;;::;;::::::nMMM@@WW@@@@WW@###@WMW###########M*;::,,,:::::::;;;;iii****++++;,+#z+#zz::*n@@WWWWMMMMMWxWWxzWMM\r\n@@@@@@@@@@@@@MW@@@@@@@@@@z+###z+****i*++##zzzznxxxxnnnxWMxMMWMMWWW@@@W@##@W@############Mznzzzz###+*i::::::;;ii**+++#+;#n#z*nnM*;W@@@@@WWWWMMWMMWMnMMM\r\n@@@@@@@@@@@@@@@@@@@@@@@@xzi#+++*i;;i+#####++****ii*i;:nMMxxxxxMMMWWWW@@@@WW@WWWWWWWM@####z+**i;;;;i;;:::;iii;::::iii**#zn#z+##Mx#W@@@@W@@WWWxWWnnMWWWW\r\n@@@@@@@@@@@@@@@@@@@@@@@WMnzzzznnnzz##z#####++++++++**ixMWMxxxxMMMWMMMMMMMWWWW@@@WWWW@@###M#+++++**+++###zzzznnxnz+#zzzzznnnn#xxnMMW@@@@@WW@@MWWnxxW@@W\r\n@@@@@@@@@@@@@@@@@@@@@@@WMMxnnnnz#+##+*+****iii*znz##**MxxxxxxxxxMMMMMWWWWMMMMMMWW###@@W@@Wiii;;::::::::;ii******zzznnnxxMMMMMWMMMMW@@@@@@@@@@WWWMW@@@@\r\n@@@@@@@@###@###@@@@@WMnzz##zz##*;ii;;i****i;;;ii;;:::;MMMxxznnnxxxxxxxxxxxxxMMMMMMWW@#####*;:;;;;;;;;;;iiii;i;;;;i*++:izznxMMx#n@@@@@@@@@@@@@@WxzW@@WW\r\n@###@######@WWMxnnzznnnnnxx++zz#*;i*++++++***iii;:,,,*MMMxnxxxxxxxxxMMWWxMWWMMW@@@@#@#####xiiiiiiii***++++########+*i*#zn####+*+zWWMMW@W@@@@@@x@Wn@#@W\r\n######@@WWMMWMMMMMMMMMMxMxMn#+nzzz#++###zzz#######+*izMxxxMWWW@@MxnzzznnnxxxM@@@@##@@#####@++++++++++++#####zz###+#zznzn#zxMnn+**zxMxnnnxxMMWWM@WWM@#@\r\n###@@WW@@@@@@@WWMWWWMxxxxMMxz#znzzzzzzzzz#####+++####nMMMW@@##@@@@WWxxnnzxnnxWW@#####@@####zznnnxxnnzzzzzznnnnnnzznnnnnn#nWWWxxWWWWWMMMMMMMMMxMMWW@W##\r\n###@WWWWMMMMMM@@WWWMxxxMMMMMx#zz####+++******iiii;;;:zMM@@MxnxnnxxMMW@@WnMxxxMWW@@#########+*++++****++++######zzzzzz#zzzxWWWWxMMMMMxMxxxxxxMMMMMW@W@@\r\n##WMMxxxnnxxxMW@@WMnxxMMMxxz+*i;;;:::::::::::::::::,,zM@WnnnnnMMxnxMW@@@MWWMMMWWWWMMMW@@##@;;;;;;;;;;;;;;iii***+++++++#z#xMWWMxnxMMMMMMxxxxxxxxxxMW@@x\r\n*/\r\n\r\n\r\n// SPDX-License-Identifier: Unlicensed\r\n\r\npragma solidity ^0.8.4;\r\n\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n}\r\n\r\ninterface IERC20 {\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    function transfer(address recipient, uint256 amount)\r\n        external\r\n        returns (bool);\r\n\r\n    function allowance(address owner, address spender)\r\n        external\r\n        view\r\n        returns (uint256);\r\n\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(\r\n        address indexed owner,\r\n        address indexed spender,\r\n        uint256 value\r\n    );\r\n}\r\n\r\nlibrary SafeMath {\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    function sub(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n        return c;\r\n    }\r\n\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    function div(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        return c;\r\n    }\r\n}\r\n\r\ncontract Ownable is Context {\r\n    address private _owner;\r\n    address private _previousOwner;\r\n    event OwnershipTransferred(\r\n        address indexed previousOwner,\r\n        address indexed newOwner\r\n    );\r\n\r\n    constructor() {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n}\r\n\r\ninterface IUniswapV2Factory {\r\n    function createPair(address tokenA, address tokenB)\r\n        external\r\n        returns (address pair);\r\n}\r\n\r\ninterface IUniswapV2Router02 {\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n        uint256 amountIn,\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external;\r\n\r\n    function factory() external pure returns (address);\r\n\r\n    function WETH() external pure returns (address);\r\n\r\n    function addLiquidityETH(\r\n        address token,\r\n        uint256 amountTokenDesired,\r\n        uint256 amountTokenMin,\r\n        uint256 amountETHMin,\r\n        address to,\r\n        uint256 deadline\r\n    )\r\n        external\r\n        payable\r\n        returns (\r\n            uint256 amountToken,\r\n            uint256 amountETH,\r\n            uint256 liquidity\r\n        );\r\n}\r\n\r\ncontract Family is Context, IERC20, Ownable {\r\n    using SafeMath for uint256;\r\n    string private constant _name = \"Family Token_T.me/FFFamilyToken\";\r\n    string private constant _symbol = \"Family\";\r\n    uint8 private constant _decimals = 9;\r\n\r\n    // RFI\r\n    mapping(address => uint256) private _rOwned;\r\n    mapping(address => uint256) private _tOwned;\r\n    mapping(address => mapping(address => uint256)) private _allowances;\r\n    mapping(address => bool) private _isExcludedFromFee;\r\n    uint256 private constant MAX = ~uint256(0);\r\n    uint256 private constant _tTotal = 1000000 * 10**9;\r\n    uint256 private _rTotal = (MAX - (MAX % _tTotal));\r\n    uint256 private _tFeeTotal;\r\n    uint256 private _taxFee = 2;\r\n    uint256 private _teamFee = 8;\r\n\r\n    // Bot detection\r\n    mapping(address => bool) private bots;\r\n    mapping(address => uint256) private cooldown;\r\n    address payable private _teamAddress;\r\n    address payable private _marketingFunds;\r\n    IUniswapV2Router02 private uniswapV2Router;\r\n    address private uniswapV2Pair;\r\n    bool private tradingOpen;\r\n    bool private inSwap = false;\r\n    bool private swapEnabled = false;\r\n    bool private cooldownEnabled = false;\r\n    uint256 private _maxTxAmount = _tTotal;\r\n\r\n    event MaxTxAmountUpdated(uint256 _maxTxAmount);\r\n    modifier lockTheSwap {\r\n        inSwap = true;\r\n        _;\r\n        inSwap = false;\r\n    }\r\n\r\n    constructor(address payable addr1, address payable addr2) {\r\n        _teamAddress = addr1;\r\n        _marketingFunds = addr2;\r\n        _rOwned[_msgSender()] = _rTotal;\r\n        _isExcludedFromFee[owner()] = true;\r\n        _isExcludedFromFee[address(this)] = true;\r\n        _isExcludedFromFee[_teamAddress] = true;\r\n        _isExcludedFromFee[_marketingFunds] = true;\r\n        emit Transfer(address(0), _msgSender(), _tTotal);\r\n    }\r\n\r\n    function name() public pure returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    function symbol() public pure returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    function decimals() public pure returns (uint8) {\r\n        return _decimals;\r\n    }\r\n\r\n    function totalSupply() public pure override returns (uint256) {\r\n        return _tTotal;\r\n    }\r\n\r\n    function balanceOf(address account) public view override returns (uint256) {\r\n        return tokenFromReflection(_rOwned[account]);\r\n    }\r\n\r\n    function transfer(address recipient, uint256 amount)\r\n        public\r\n        override\r\n        returns (bool)\r\n    {\r\n        _transfer(_msgSender(), recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    function allowance(address owner, address spender)\r\n        public\r\n        view\r\n        override\r\n        returns (uint256)\r\n    {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    function approve(address spender, uint256 amount)\r\n        public\r\n        override\r\n        returns (bool)\r\n    {\r\n        _approve(_msgSender(), spender, amount);\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) public override returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n        _approve(\r\n            sender,\r\n            _msgSender(),\r\n            _allowances[sender][_msgSender()].sub(\r\n                amount,\r\n                \"ERC20: transfer amount exceeds allowance\"\r\n            )\r\n        );\r\n        return true;\r\n    }\r\n\r\n    function setCooldownEnabled(bool onoff) external onlyOwner() {\r\n        cooldownEnabled = onoff;\r\n    }\r\n\r\n    function tokenFromReflection(uint256 rAmount)\r\n        private\r\n        view\r\n        returns (uint256)\r\n    {\r\n        require(\r\n            rAmount <= _rTotal,\r\n            \"Amount must be less than total reflections\"\r\n        );\r\n        uint256 currentRate = _getRate();\r\n        return rAmount.div(currentRate);\r\n    }\r\n\r\n    function removeAllFee() private {\r\n        if (_taxFee == 0 && _teamFee == 0) return;\r\n        _taxFee = 0;\r\n        _teamFee = 0;\r\n    }\r\n\r\n    function restoreAllFee() private {\r\n        _taxFee = 2;\r\n        _teamFee = 8;\r\n    }\r\n\r\n    function _approve(\r\n        address owner,\r\n        address spender,\r\n        uint256 amount\r\n    ) private {\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    function _transfer(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) private {\r\n        require(from != address(0), \"ERC20: transfer from the zero address\");\r\n        require(to != address(0), \"ERC20: transfer to the zero address\");\r\n        require(amount > 0, \"Transfer amount must be greater than zero\");\r\n\r\n        if (from != owner() && to != owner()) {\r\n            if (cooldownEnabled) {\r\n                if (\r\n                    from != address(this) &&\r\n                    to != address(this) &&\r\n                    from != address(uniswapV2Router) &&\r\n                    to != address(uniswapV2Router)\r\n                ) {\r\n                    require(\r\n                        _msgSender() == address(uniswapV2Router) ||\r\n                            _msgSender() == uniswapV2Pair,\r\n                        \"ERR: Uniswap only\"\r\n                    );\r\n                }\r\n            }\r\n            require(amount <= _maxTxAmount);\r\n            require(!bots[from] && !bots[to]);\r\n            if (\r\n                from == uniswapV2Pair &&\r\n                to != address(uniswapV2Router) &&\r\n                !_isExcludedFromFee[to] &&\r\n                cooldownEnabled\r\n            ) {\r\n                require(cooldown[to] < block.timestamp);\r\n                cooldown[to] = block.timestamp + (10 seconds);\r\n            }\r\n            uint256 contractTokenBalance = balanceOf(address(this));\r\n            if (!inSwap && from != uniswapV2Pair && swapEnabled) {\r\n                swapTokensForEth(contractTokenBalance);\r\n                uint256 contractETHBalance = address(this).balance;\r\n                if (contractETHBalance > 0) {\r\n                    sendETHToFee(address(this).balance);\r\n                }\r\n            }\r\n        }\r\n        bool takeFee = true;\r\n\r\n        if (_isExcludedFromFee[from] || _isExcludedFromFee[to]) {\r\n            takeFee = false;\r\n        }\r\n\r\n        _tokenTransfer(from, to, amount, takeFee);\r\n    }\r\n\r\n    function swapTokensForEth(uint256 tokenAmount) private lockTheSwap {\r\n        address[] memory path = new address[](2);\r\n        path[0] = address(this);\r\n        path[1] = uniswapV2Router.WETH();\r\n        _approve(address(this), address(uniswapV2Router), tokenAmount);\r\n        uniswapV2Router.swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n            tokenAmount,\r\n            0,\r\n            path,\r\n            address(this),\r\n            block.timestamp\r\n        );\r\n    }\r\n\r\n    function sendETHToFee(uint256 amount) private {\r\n        _teamAddress.transfer(amount.div(2));\r\n        _marketingFunds.transfer(amount.div(2));\r\n    }\r\n\r\n    function openTrading() external onlyOwner() {\r\n        require(!tradingOpen, \"trading is already open\");\r\n        IUniswapV2Router02 _uniswapV2Router = IUniswapV2Router02(\r\n            0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D\r\n        );\r\n        uniswapV2Router = _uniswapV2Router;\r\n        _approve(address(this), address(uniswapV2Router), _tTotal);\r\n        uniswapV2Pair = IUniswapV2Factory(_uniswapV2Router.factory())\r\n        .createPair(address(this), _uniswapV2Router.WETH());\r\n        uniswapV2Router.addLiquidityETH{value: address(this).balance}(\r\n            address(this),\r\n            balanceOf(address(this)),\r\n            0,\r\n            0,\r\n            owner(),\r\n            block.timestamp\r\n        );\r\n        swapEnabled = true;\r\n        cooldownEnabled = true;\r\n        _maxTxAmount = 1000000 * 10**9;\r\n        tradingOpen = true;\r\n        IERC20(uniswapV2Pair).approve(\r\n            address(uniswapV2Router),\r\n            type(uint256).max\r\n        );\r\n    }\r\n\r\n    function manualswap() external {\r\n        require(_msgSender() == _teamAddress);\r\n        uint256 contractBalance = balanceOf(address(this));\r\n        swapTokensForEth(contractBalance);\r\n    }\r\n\r\n    function manualsend() external {\r\n        require(_msgSender() == _teamAddress);\r\n        uint256 contractETHBalance = address(this).balance;\r\n        sendETHToFee(contractETHBalance);\r\n    }\r\n\r\n    function setBots(address[] memory bots_) public onlyOwner {\r\n        for (uint256 i = 0; i < bots_.length; i++) {\r\n            bots[bots_[i]] = true;\r\n        }\r\n    }\r\n\r\n    function delBot(address notbot) public onlyOwner {\r\n        bots[notbot] = false;\r\n    }\r\n\r\n    function _tokenTransfer(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount,\r\n        bool takeFee\r\n    ) private {\r\n        if (!takeFee) removeAllFee();\r\n        _transferStandard(sender, recipient, amount);\r\n        if (!takeFee) restoreAllFee();\r\n    }\r\n\r\n    function _transferStandard(\r\n        address sender,\r\n        address recipient,\r\n        uint256 tAmount\r\n    ) private {\r\n        (\r\n            uint256 rAmount,\r\n            uint256 rTransferAmount,\r\n            uint256 rFee,\r\n            uint256 tTransferAmount,\r\n            uint256 tFee,\r\n            uint256 tTeam\r\n        ) = _getValues(tAmount);\r\n        _rOwned[sender] = _rOwned[sender].sub(rAmount);\r\n        _rOwned[recipient] = _rOwned[recipient].add(rTransferAmount);\r\n        _takeTeam(tTeam);\r\n        _reflectFee(rFee, tFee);\r\n        emit Transfer(sender, recipient, tTransferAmount);\r\n    }\r\n\r\n    function _takeTeam(uint256 tTeam) private {\r\n        uint256 currentRate = _getRate();\r\n        uint256 rTeam = tTeam.mul(currentRate);\r\n        _rOwned[address(this)] = _rOwned[address(this)].add(rTeam);\r\n    }\r\n\r\n    function _reflectFee(uint256 rFee, uint256 tFee) private {\r\n        _rTotal = _rTotal.sub(rFee);\r\n        _tFeeTotal = _tFeeTotal.add(tFee);\r\n    }\r\n\r\n    receive() external payable {}\r\n\r\n    function _getValues(uint256 tAmount)\r\n        private\r\n        view\r\n        returns (\r\n            uint256,\r\n            uint256,\r\n            uint256,\r\n            uint256,\r\n            uint256,\r\n            uint256\r\n        )\r\n    {\r\n        (uint256 tTransferAmount, uint256 tFee, uint256 tTeam) = _getTValues(\r\n            tAmount,\r\n            _taxFee,\r\n            _teamFee\r\n        );\r\n        uint256 currentRate = _getRate();\r\n        (uint256 rAmount, uint256 rTransferAmount, uint256 rFee) = _getRValues(\r\n            tAmount,\r\n            tFee,\r\n            tTeam,\r\n            currentRate\r\n        );\r\n        return (rAmount, rTransferAmount, rFee, tTransferAmount, tFee, tTeam);\r\n    }\r\n\r\n    function _getTValues(\r\n        uint256 tAmount,\r\n        uint256 taxFee,\r\n        uint256 TeamFee\r\n    )\r\n        private\r\n        pure\r\n        returns (\r\n            uint256,\r\n            uint256,\r\n            uint256\r\n        )\r\n    {\r\n        uint256 tFee = tAmount.mul(taxFee).div(100);\r\n        uint256 tTeam = tAmount.mul(TeamFee).div(100);\r\n        uint256 tTransferAmount = tAmount.sub(tFee).sub(tTeam);\r\n        return (tTransferAmount, tFee, tTeam);\r\n    }\r\n\r\n    function _getRValues(\r\n        uint256 tAmount,\r\n        uint256 tFee,\r\n        uint256 tTeam,\r\n        uint256 currentRate\r\n    )\r\n        private\r\n        pure\r\n        returns (\r\n            uint256,\r\n            uint256,\r\n            uint256\r\n        )\r\n    {\r\n        uint256 rAmount = tAmount.mul(currentRate);\r\n        uint256 rFee = tFee.mul(currentRate);\r\n        uint256 rTeam = tTeam.mul(currentRate);\r\n        uint256 rTransferAmount = rAmount.sub(rFee).sub(rTeam);\r\n        return (rAmount, rTransferAmount, rFee);\r\n    }\r\n\r\n    function _getRate() private view returns (uint256) {\r\n        (uint256 rSupply, uint256 tSupply) = _getCurrentSupply();\r\n        return rSupply.div(tSupply);\r\n    }\r\n\r\n    function _getCurrentSupply() private view returns (uint256, uint256) {\r\n        uint256 rSupply = _rTotal;\r\n        uint256 tSupply = _tTotal;\r\n        if (rSupply < _rTotal.div(_tTotal)) return (_rTotal, _tTotal);\r\n        return (rSupply, tSupply);\r\n    }\r\n\r\n    function setMaxTxPercent(uint256 maxTxPercent) external onlyOwner() {\r\n        require(maxTxPercent > 0, \"Amount must be greater than 0\");\r\n        _maxTxAmount = _tTotal.mul(maxTxPercent).div(10**2);\r\n        emit MaxTxAmountUpdated(_maxTxAmount);\r\n    }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"addr1\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"addr2\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_maxTxAmount\",\"type\":\"uint256\"}],\"name\":\"MaxTxAmountUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"notbot\",\"type\":\"address\"}],\"name\":\"delBot\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"manualsend\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"manualswap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"openTrading\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"bots_\",\"type\":\"address[]\"}],\"name\":\"setBots\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"onoff\",\"type\":\"bool\"}],\"name\":\"setCooldownEnabled\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"maxTxPercent\",\"type\":\"uint256\"}],\"name\":\"setMaxTxPercent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]","ContractName":"Family","CompilerVersion":"v0.8.4+commit.c7e474f2","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"0000000000000000000000001a4a15d7231693b26a68c56c2491d96b9ce680d80000000000000000000000001a4a15d7231693b26a68c56c2491d96b9ce680d8","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"ipfs://ecef2aea2511061b309e7202b6d9e912758c856257a03db4fe81c4f073f2bbdd"}]}