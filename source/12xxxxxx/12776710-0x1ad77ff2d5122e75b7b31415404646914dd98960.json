{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/MeVesting.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.5.12;\\n\\nimport \\\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\\\";\\n\\nimport \\\"./libs/IERC20.sol\\\";\\nimport \\\"./libs/IERC1620.sol\\\";\\nimport \\\"./libs/CarefulMath.sol\\\";\\nimport \\\"./libs/Types.sol\\\";\\n\\n\\ncontract MeVesting is IERC1620, ReentrancyGuard, CarefulMath {\\n    /*** Storage Properties ***/\\n\\n    /// @notice check to enable stream withdrawals\\n    bool public withdrawable;\\n\\n    /// @notice address that can enable withdrawals\\n    address public gov;\\n\\n    /**\\n     * @notice Counter for new stream ids.\\n     */\\n    uint256 public nextStreamId;\\n\\n    /**\\n     * @notice The stream objects identifiable by their unsigned integer ids.\\n     */\\n    mapping(uint256 => Types.Stream) private streams;\\n\\n    /*** Modifiers ***/\\n\\n    /**\\n     * @dev Throws if the caller is not the sender of the recipient of the stream.\\n     */\\n    modifier onlySenderOrRecipient(uint256 streamId) {\\n        require(\\n            msg.sender == streams[streamId].sender || msg.sender == streams[streamId].recipient,\\n            \\\"caller is not the sender or the recipient of the stream\\\"\\n        );\\n        _;\\n    }\\n\\n    /**\\n     * @dev Throws if the provided id does not point to a valid stream.\\n     */\\n    modifier streamExists(uint256 streamId) {\\n        require(streams[streamId].isEntity, \\\"stream does not exist\\\");\\n        _;\\n    }\\n\\n    /*** Contract Logic Starts Here */\\n\\n    constructor() public {\\n        nextStreamId = 1;\\n        gov = msg.sender;\\n    }\\n\\n    /*** View Functions ***/\\n\\n    /**\\n     * @notice Returns the compounding stream with all its properties.\\n     * @dev Throws if the id does not point to a valid stream.\\n     * @param streamId The id of the stream to query.\\n     * @return The stream object as an array of info.\\n     */\\n    function getStream(uint256 streamId)\\n        external\\n        view\\n        streamExists(streamId)\\n        returns (\\n            address sender,\\n            address recipient,\\n            uint256 deposit,\\n            address tokenAddress,\\n            uint256 startTime,\\n            uint256 stopTime,\\n            uint256 remainingBalance,\\n            uint256 ratePerSecond\\n        )\\n    {\\n        sender = streams[streamId].sender;\\n        recipient = streams[streamId].recipient;\\n        deposit = streams[streamId].deposit;\\n        tokenAddress = streams[streamId].tokenAddress;\\n        startTime = streams[streamId].startTime;\\n        stopTime = streams[streamId].stopTime;\\n        remainingBalance = streams[streamId].remainingBalance;\\n        ratePerSecond = streams[streamId].ratePerSecond;\\n    }\\n\\n    /**\\n     * @notice Returns either the delta in seconds between `block.timestamp` and `startTime` or\\n     *  between `stopTime` and `startTime, whichever is smaller. If `block.timestamp` is before\\n     *  `startTime`, it returns 0.\\n     * @dev Throws if the id does not point to a valid stream.\\n     * @param streamId The id of the stream for which to query the delta.\\n     * @return The time delta in seconds.\\n     */\\n    function deltaOf(uint256 streamId) public view streamExists(streamId) returns (uint256 delta) {\\n        Types.Stream memory stream = streams[streamId];\\n        if (block.timestamp <= stream.startTime) return 0;\\n        if (block.timestamp < stream.stopTime) return block.timestamp - stream.startTime;\\n        return stream.stopTime - stream.startTime;\\n    }\\n\\n    struct BalanceOfLocalVars {\\n        MathError mathErr;\\n        uint256 recipientBalance;\\n        uint256 withdrawalAmount;\\n        uint256 senderBalance;\\n    }\\n\\n    /**\\n     * @notice Returns the available funds for the given stream id and address.\\n     * @dev Throws if the id does not point to a valid stream.\\n     * @param streamId The id of the stream for which to query the balance.\\n     * @param who The address for which to query the balance.\\n     * @return The total funds allocated to `who` as uint256.\\n     */\\n    function balanceOf(uint256 streamId, address who) public view streamExists(streamId) returns (uint256 balance) {\\n        Types.Stream memory stream = streams[streamId];\\n        BalanceOfLocalVars memory vars;\\n\\n        uint256 delta = deltaOf(streamId);\\n        (vars.mathErr, vars.recipientBalance) = mulUInt(delta, stream.ratePerSecond);\\n        require(vars.mathErr == MathError.NO_ERROR, \\\"recipient balance calculation error\\\");\\n\\n        /*\\n         * If the stream `balance` does not equal `deposit`, it means there have been withdrawals.\\n         * We have to subtract the total amount withdrawn from the amount of money that has been\\n         * streamed until now.\\n         */\\n        if (stream.deposit > stream.remainingBalance) {\\n            (vars.mathErr, vars.withdrawalAmount) = subUInt(stream.deposit, stream.remainingBalance);\\n            assert(vars.mathErr == MathError.NO_ERROR);\\n            (vars.mathErr, vars.recipientBalance) = subUInt(vars.recipientBalance, vars.withdrawalAmount);\\n            /* `withdrawalAmount` cannot and should not be bigger than `recipientBalance`. */\\n            assert(vars.mathErr == MathError.NO_ERROR);\\n        }\\n\\n        if (who == stream.recipient) return vars.recipientBalance;\\n        if (who == stream.sender) {\\n            (vars.mathErr, vars.senderBalance) = subUInt(stream.remainingBalance, vars.recipientBalance);\\n            /* `recipientBalance` cannot and should not be bigger than `remainingBalance`. */\\n            assert(vars.mathErr == MathError.NO_ERROR);\\n            return vars.senderBalance;\\n        }\\n        return 0;\\n    }\\n\\n    /*** Public Effects & Interactions Functions ***/\\n\\n    struct CreateStreamLocalVars {\\n        MathError mathErr;\\n        uint256 duration;\\n        uint256 ratePerSecond;\\n    }\\n\\n    /**\\n     * @notice Creates a new stream funded by `msg.sender` and paid towards `recipient`.\\n     * @dev Throws if paused.\\n     *  Throws if the recipient is the zero address, the contract itself or the caller.\\n     *  Throws if the deposit is 0.\\n     *  Throws if the start time is before `block.timestamp`.\\n     *  Throws if the stop time is before the start time.\\n     *  Throws if the duration calculation has a math error.\\n     *  Throws if the deposit is smaller than the duration.\\n     *  Throws if the deposit is not a multiple of the duration.\\n     *  Throws if the rate calculation has a math error.\\n     *  Throws if the next stream id calculation has a math error.\\n     *  Throws if the contract is not allowed to transfer enough tokens.\\n     *  Throws if there is a token transfer failure.\\n     * @param recipient The address towards which the money is streamed.\\n     * @param deposit The amount of money to be streamed.\\n     * @param tokenAddress The ERC20 token to use as streaming currency.\\n     * @param startTime The unix timestamp for when the stream starts accumulating a pending stream balance.\\n     * @param stopTime The unix timestamp for when the stream stops.\\n     * @return The uint256 id of the newly created stream.\\n     */\\n    function createStream(address recipient, uint256 deposit, address tokenAddress, uint256 startTime, uint256 stopTime)\\n        public\\n        returns (uint256)\\n    {\\n        require(recipient != address(0x00), \\\"stream to the zero address\\\");\\n        require(recipient != address(this), \\\"stream to the contract itself\\\");\\n        require(recipient != msg.sender, \\\"stream to the caller\\\");\\n        require(deposit > 0, \\\"deposit is zero\\\");\\n        require(startTime >= block.timestamp, \\\"start time before block.timestamp\\\");\\n\\n        require(stopTime > startTime, \\\"stop time before the start time\\\");\\n\\n        CreateStreamLocalVars memory vars;\\n        (vars.mathErr, vars.duration) = subUInt(stopTime, startTime);\\n        /* `subUInt` can only return MathError.INTEGER_UNDERFLOW but we know `stopTime` is higher than `startTime`. */\\n        assert(vars.mathErr == MathError.NO_ERROR);\\n\\n        /* Without this, the rate per second would be zero. */\\n        require(deposit >= vars.duration, \\\"deposit smaller than time delta\\\");\\n\\n        /* This condition avoids dealing with remainders */\\n        require(deposit % vars.duration == 0, \\\"deposit not multiple of time delta\\\");\\n\\n        (vars.mathErr, vars.ratePerSecond) = divUInt(deposit, vars.duration);\\n        /* `divUInt` can only return MathError.DIVISION_BY_ZERO but we know `duration` is not zero. */\\n        assert(vars.mathErr == MathError.NO_ERROR);\\n\\n        /* Create and store the stream object. */\\n        uint256 streamId = nextStreamId;\\n        streams[streamId] = Types.Stream({\\n            remainingBalance: deposit,\\n            deposit: deposit,\\n            isEntity: true,\\n            ratePerSecond: vars.ratePerSecond,\\n            recipient: recipient,\\n            sender: msg.sender,\\n            startTime: startTime,\\n            stopTime: stopTime,\\n            tokenAddress: tokenAddress\\n        });\\n\\n        /* Increment the next stream id. */\\n        (vars.mathErr, nextStreamId) = addUInt(nextStreamId, uint256(1));\\n        require(vars.mathErr == MathError.NO_ERROR, \\\"next stream id calculation error\\\");\\n\\n        require(IERC20(tokenAddress).transferFrom(msg.sender, address(this), deposit), \\\"token transfer failure\\\");\\n        emit CreateStream(streamId, msg.sender, recipient, deposit, tokenAddress, startTime, stopTime);\\n        return streamId;\\n    }\\n\\n    struct WithdrawFromStreamLocalVars {\\n        MathError mathErr;\\n    }\\n\\n    /**\\n     * @notice Withdraws from the contract to the recipient's account.\\n     * @dev Throws if the id does not point to a valid stream.\\n     *  Throws if the caller is not the sender or the recipient of the stream.\\n     *  Throws if the amount exceeds the available balance.\\n     *  Throws if there is a token transfer failure.\\n     * @param streamId The id of the stream to withdraw tokens from.\\n     * @param amount The amount of tokens to withdraw.\\n     * @return bool true=success, otherwise false.\\n     */\\n    function withdrawFromStream(uint256 streamId, uint256 amount)\\n        external\\n        nonReentrant\\n        streamExists(streamId)\\n        onlySenderOrRecipient(streamId)\\n        returns (bool)\\n    {\\n        require(withdrawable, \\\"not withdrawable\\\");\\n        require(amount > 0, \\\"amount is zero\\\");\\n        Types.Stream memory stream = streams[streamId];\\n        WithdrawFromStreamLocalVars memory vars;\\n\\n        uint256 balance = balanceOf(streamId, stream.recipient);\\n        require(balance >= amount, \\\"amount exceeds the available balance\\\");\\n\\n        (vars.mathErr, streams[streamId].remainingBalance) = subUInt(stream.remainingBalance, amount);\\n        /**\\n         * `subUInt` can only return MathError.INTEGER_UNDERFLOW but we know that `remainingBalance` is at least\\n         * as big as `amount`.\\n         */\\n        assert(vars.mathErr == MathError.NO_ERROR);\\n\\n        if (streams[streamId].remainingBalance == 0) delete streams[streamId];\\n\\n        require(IERC20(stream.tokenAddress).transfer(stream.recipient, amount), \\\"token transfer failure\\\");\\n        emit WithdrawFromStream(streamId, stream.recipient, amount);\\n    }\\n\\n    /**\\n     * @notice Cancels the stream and transfers the tokens back on a pro rata basis.\\n     * @dev Throws if the id does not point to a valid stream.\\n     *  Throws if the caller is not the sender or the recipient of the stream.\\n     *  Throws if there is a token transfer failure.\\n     * @param streamId The id of the stream to cancel.\\n     * @return bool true=success, otherwise false.\\n     */\\n    function cancelStream(uint256 streamId)\\n        external\\n        nonReentrant\\n        streamExists(streamId)\\n        onlySenderOrRecipient(streamId)\\n        returns (bool)\\n    {\\n        Types.Stream memory stream = streams[streamId];\\n        uint256 senderBalance = balanceOf(streamId, stream.sender);\\n        uint256 recipientBalance = balanceOf(streamId, stream.recipient);\\n\\n        delete streams[streamId];\\n\\n        IERC20 token = IERC20(stream.tokenAddress);\\n        if (recipientBalance > 0)\\n            require(token.transfer(stream.recipient, recipientBalance), \\\"recipient token transfer failure\\\");\\n        if (senderBalance > 0) require(token.transfer(stream.sender, senderBalance), \\\"sender token transfer failure\\\");\\n\\n        emit CancelStream(streamId, stream.sender, stream.recipient, senderBalance, recipientBalance);\\n    }\\n\\n    function setGov(address _gov) public {\\n        require(msg.sender == gov, \\\"gov: must gov\\\");\\n        gov = _gov;\\n    }\\n\\n    function turnOnWithdrawals() public {\\n        require(msg.sender == gov, \\\"!gov\\\");\\n        require(!withdrawable, \\\"withdrawals already enabled\\\");\\n        withdrawable = true;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/ReentrancyGuard.sol\": {\r\n      \"content\": \"pragma solidity ^0.5.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n *\\n * _Since v2.5.0:_ this module is now much more gas efficient, given net gas\\n * metering changes introduced in the Istanbul hardfork.\\n */\\ncontract ReentrancyGuard {\\n    bool private _notEntered;\\n\\n    constructor () internal {\\n        // Storing an initial non-zero value makes deployment a bit more\\n        // expensive, but in exchange the refund on every call to nonReentrant\\n        // will be lower in amount. Since refunds are capped to a percetange of\\n        // the total transaction's gas, it is best to keep them low in cases\\n        // like this one, to increase the likelihood of the full refund coming\\n        // into effect.\\n        _notEntered = true;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and make it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_notEntered, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _notEntered = false;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _notEntered = true;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/libs/IERC20.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.5.12;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\"\r\n    },\r\n    \"contracts/libs/IERC1620.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.5.12;\\n\\n/**\\n * @title ERC-1620 Money Streaming Standard\\n * @dev See https://eips.ethereum.org/EIPS/eip-1620\\n */\\ninterface IERC1620 {\\n    /**\\n     * @notice Emits when a stream is successfully created.\\n     */\\n    event CreateStream(\\n        uint256 indexed streamId,\\n        address indexed sender,\\n        address indexed recipient,\\n        uint256 deposit,\\n        address tokenAddress,\\n        uint256 startTime,\\n        uint256 stopTime\\n    );\\n\\n    /**\\n     * @notice Emits when the recipient of a stream withdraws a portion or all their pro rata share of the stream.\\n     */\\n    event WithdrawFromStream(\\n        uint256 indexed streamId,\\n        address indexed recipient,\\n        uint256 amount\\n    );\\n\\n    /**\\n     * @notice Emits when a stream is successfully cancelled and tokens are transferred back on a pro rata basis.\\n     */\\n    event CancelStream(\\n        uint256 indexed streamId,\\n        address indexed sender,\\n        address indexed recipient,\\n        uint256 senderBalance,\\n        uint256 recipientBalance\\n    );\\n\\n    function balanceOf(uint256 streamId, address who) external view \\n        returns (uint256 balance);\\n\\n    function getStream(uint256 streamId) external view\\n        returns (\\n            address sender,\\n            address recipient,\\n            uint256 deposit,\\n            address token,\\n            uint256 startTime,\\n            uint256 stopTime,\\n            uint256 remainingBalance,\\n            uint256 ratePerSecond\\n        );\\n\\n    function createStream(\\n        address recipient,\\n        uint256 deposit,\\n        address tokenAddress,\\n        uint256 startTime,\\n        uint256 stopTime\\n    ) external returns (uint256 streamId);\\n\\n    function withdrawFromStream(uint256 streamId, uint256 funds)\\n        external\\n        returns (bool);\\n\\n    function cancelStream(uint256 streamId) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"contracts/libs/CarefulMath.sol\": {\r\n      \"content\": \"\\npragma solidity ^0.5.8;\\n\\n/**\\n  * @title Careful Math\\n  * @author Compound\\n  * @notice Derived from OpenZeppelin's SafeMath library\\n  *         https://github.com/OpenZeppelin/openzeppelin-solidity/blob/master/contracts/math/SafeMath.sol\\n  */\\ncontract CarefulMath {\\n\\n    /**\\n     * @dev Possible error codes that we can return\\n     */\\n    enum MathError {\\n        NO_ERROR,\\n        DIVISION_BY_ZERO,\\n        INTEGER_OVERFLOW,\\n        INTEGER_UNDERFLOW\\n    }\\n\\n    /**\\n    * @dev Multiplies two numbers, returns an error on overflow.\\n    */\\n    function mulUInt(uint a, uint b) internal pure returns (MathError, uint) {\\n        if (a == 0) {\\n            return (MathError.NO_ERROR, 0);\\n        }\\n\\n        uint c = a * b;\\n\\n        if (c / a != b) {\\n            return (MathError.INTEGER_OVERFLOW, 0);\\n        } else {\\n            return (MathError.NO_ERROR, c);\\n        }\\n    }\\n\\n    /**\\n    * @dev Integer division of two numbers, truncating the quotient.\\n    */\\n    function divUInt(uint a, uint b) internal pure returns (MathError, uint) {\\n        if (b == 0) {\\n            return (MathError.DIVISION_BY_ZERO, 0);\\n        }\\n\\n        return (MathError.NO_ERROR, a / b);\\n    }\\n\\n    /**\\n    * @dev Subtracts two numbers, returns an error on overflow (i.e. if subtrahend is greater than minuend).\\n    */\\n    function subUInt(uint a, uint b) internal pure returns (MathError, uint) {\\n        if (b <= a) {\\n            return (MathError.NO_ERROR, a - b);\\n        } else {\\n            return (MathError.INTEGER_UNDERFLOW, 0);\\n        }\\n    }\\n\\n    /**\\n    * @dev Adds two numbers, returns an error on overflow.\\n    */\\n    function addUInt(uint a, uint b) internal pure returns (MathError, uint) {\\n        uint c = a + b;\\n\\n        if (c >= a) {\\n            return (MathError.NO_ERROR, c);\\n        } else {\\n            return (MathError.INTEGER_OVERFLOW, 0);\\n        }\\n    }\\n\\n    /**\\n    * @dev add a and b and then subtract c\\n    */\\n    function addThenSubUInt(uint a, uint b, uint c) internal pure returns (MathError, uint) {\\n        (MathError err0, uint sum) = addUInt(a, b);\\n\\n        if (err0 != MathError.NO_ERROR) {\\n            return (err0, 0);\\n        }\\n\\n        return subUInt(sum, c);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/libs/Types.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.5.12;\\n\\nlibrary Types {\\n    struct Stream {\\n        address sender;\\n        address recipient;\\n        uint256 deposit;\\n        address tokenAddress;\\n        uint256 startTime;\\n        uint256 stopTime;\\n        uint256 remainingBalance;\\n        uint256 ratePerSecond;\\n        bool isEntity;\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": false,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}","ABI":"[{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"streamId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"senderBalance\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"recipientBalance\",\"type\":\"uint256\"}],\"name\":\"CancelStream\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"streamId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"deposit\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"startTime\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"stopTime\",\"type\":\"uint256\"}],\"name\":\"CreateStream\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"streamId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"WithdrawFromStream\",\"type\":\"event\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"streamId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"streamId\",\"type\":\"uint256\"}],\"name\":\"cancelStream\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deposit\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"startTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stopTime\",\"type\":\"uint256\"}],\"name\":\"createStream\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"streamId\",\"type\":\"uint256\"}],\"name\":\"deltaOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"delta\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"streamId\",\"type\":\"uint256\"}],\"name\":\"getStream\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deposit\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"startTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stopTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"remainingBalance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"ratePerSecond\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"gov\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"nextStreamId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_gov\",\"type\":\"address\"}],\"name\":\"setGov\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"turnOnWithdrawals\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"streamId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdrawFromStream\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"withdrawable\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"MeVesting","CompilerVersion":"v0.5.12+commit.7709ece9","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}