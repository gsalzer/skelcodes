{"status":"1","message":"OK","result":[{"SourceCode":"\n// File: openzeppelin-solidity/contracts/token/ERC20/IERC20.sol\n\npragma solidity ^0.5.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP. Does not include\n * the optional functions; to access them see {ERC20Detailed}.\n */\ninterface IERC20 {\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n\n// File: contracts/ISygnumToken.sol\n\n/**\n * @title ISygnumToken\n * @notice Interface for custom functionality.\n */\n\npragma solidity 0.5.12;\n\n\ncontract ISygnumToken is IERC20 {\n    function block(address _account, uint256 _amount) external;\n\n    function unblock(address _account, uint256 _amount) external;\n}\n\n// File: openzeppelin-solidity/contracts/math/SafeMath.sol\n\npragma solidity ^0.5.0;\n\n/**\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\n * checks.\n *\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\n * in bugs, because programmers usually assume that an overflow raises an\n * error, which is the standard behavior in high level programming languages.\n * `SafeMath` restores this intuition by reverting the transaction when an\n * operation overflows.\n *\n * Using this library instead of the unchecked operations eliminates an entire\n * class of bugs, so it's recommended to use it always.\n */\nlibrary SafeMath {\n    /**\n     * @dev Returns the addition of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `+` operator.\n     *\n     * Requirements:\n     * - Addition cannot overflow.\n     */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a, \"SafeMath: addition overflow\");\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        return sub(a, b, \"SafeMath: subtraction overflow\");\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     * - Subtraction cannot overflow.\n     *\n     * _Available since v2.4.0._\n     */\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b <= a, errorMessage);\n        uint256 c = a - b;\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `*` operator.\n     *\n     * Requirements:\n     * - Multiplication cannot overflow.\n     */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n        // benefit is lost if 'b' is also tested.\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n        if (a == 0) {\n            return 0;\n        }\n\n        uint256 c = a * b;\n        require(c / a == b, \"SafeMath: multiplication overflow\");\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers. Reverts on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        return div(a, b, \"SafeMath: division by zero\");\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     * - The divisor cannot be zero.\n     *\n     * _Available since v2.4.0._\n     */\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        // Solidity only automatically asserts when dividing by 0\n        require(b > 0, errorMessage);\n        uint256 c = a / b;\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * Reverts when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        return mod(a, b, \"SafeMath: modulo by zero\");\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * Reverts with custom message when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     * - The divisor cannot be zero.\n     *\n     * _Available since v2.4.0._\n     */\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b != 0, errorMessage);\n        return a % b;\n    }\n}\n\n// File: openzeppelin-solidity/contracts/math/Math.sol\n\npragma solidity ^0.5.0;\n\n/**\n * @dev Standard math utilities missing in the Solidity language.\n */\nlibrary Math {\n    /**\n     * @dev Returns the largest of two numbers.\n     */\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a >= b ? a : b;\n    }\n\n    /**\n     * @dev Returns the smallest of two numbers.\n     */\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a < b ? a : b;\n    }\n\n    /**\n     * @dev Returns the average of two numbers. The result is rounded towards\n     * zero.\n     */\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b) / 2 can overflow, so we distribute\n        return (a / 2) + (b / 2) + ((a % 2 + b % 2) / 2);\n    }\n}\n\n// File: @sygnum/solidity-base-contracts/contracts/role/interface/ITraderOperators.sol\n\n/**\n * @title ITraderOperators\n * @notice Interface for TraderOperators contract\n */\n\npragma solidity 0.5.12;\n\n\ncontract ITraderOperators {\n    function isTrader(address _account) external view returns (bool);\n    function addTrader(address _account) external;\n    function removeTrader(address _account) external;\n}\n\n// File: @sygnum/solidity-base-contracts/contracts/role/interface/IBaseOperators.sol\n\n/**\n * @title IBaseOperators\n * @notice Interface for BaseOperators contract\n */\n\npragma solidity 0.5.12;\n\n\ninterface IBaseOperators {\n    function isOperator(address _account) external view returns (bool);\n    function isAdmin(address _account) external view returns (bool);\n    function isSystem(address _account) external view returns (bool);\n    function isRelay(address _account) external view returns (bool);\n    function isMultisig(address _contract) external view returns (bool);\n\n    function confirmFor(address _address) external;\n\n    function addOperator(address _account) external;\n    function removeOperator(address _account) external;\n    function addAdmin(address _account) external;\n    function removeAdmin(address _account) external;\n    function addSystem(address _account) external;\n    function removeSystem(address _account) external;\n    function addRelay(address _account) external;\n    function removeRelay(address _account) external;\n\n    function addOperatorAndAdmin(address _account) external;\n    function removeOperatorAndAdmin(address _account) external;\n}\n\n// File: @sygnum/solidity-base-contracts/contracts/helpers/Initializable.sol\n\npragma solidity 0.5.12;\n\n/**\n * @title Initializable\n *\n * @dev Helper contract to support initializer functions. To use it, replace\n * the constructor with a function that has the `initializer` modifier.\n * WARNING: Unlike constructors, initializer functions must be manually\n * invoked. This applies both to deploying an Initializable contract, as well\n * as extending an Initializable contract via inheritance.\n * WARNING: When used with inheritance, manual care must be taken to not invoke\n * a parent initializer twice, or ensure that all initializers are idempotent,\n * because this is not dealt with automatically as with constructors.\n */\ncontract Initializable {\n\n  /**\n   * @dev Indicates that the contract has been initialized.\n   */\n  bool private initialized;\n\n  /**\n   * @dev Indicates that the contract is in the process of being initialized.\n   */\n  bool private initializing;\n\n  /**\n   * @dev Modifier to use in the initializer function of a contract.\n   */\n  modifier initializer() {\n    require(initializing || isConstructor() || !initialized, \"Initializable: Contract instance has already been initialized\");\n\n    bool isTopLevelCall = !initializing;\n    if (isTopLevelCall) {\n      initializing = true;\n      initialized = true;\n    }\n\n    _;\n\n    if (isTopLevelCall) {\n      initializing = false;\n    }\n  }\n\n  /// @dev Returns true if and only if the function is running in the constructor\n  function isConstructor() private view returns (bool) {\n    // extcodesize checks the size of the code stored in an address, and\n    // address returns the current address. Since the code is still not\n    // deployed when running a constructor, any checks on its code size will\n    // yield zero, making it an effective way to detect if a contract is\n    // under construction or not.\n    uint256 cs;\n    assembly { cs := extcodesize(address) }\n    return cs == 0;\n  }\n\n  function isInitialized() public view returns (bool) {\n    return initialized;\n  }\n\n  // Reserved storage space to allow for layout changes in the future.\n  uint256[50] private ______gap;\n}\n\n// File: @sygnum/solidity-base-contracts/contracts/role/base/Operatorable.sol\n\n/**\n * @title Operatorable\n * @author Connor Howe <Connor.howe@sygnum.com>\n * @dev Operatorable contract stores the BaseOperators contract address, and modifiers for\n *       contracts.\n */\n\npragma solidity 0.5.12;\n\n\n\ncontract Operatorable is Initializable {\n    IBaseOperators internal operatorsInst;\n    address private operatorsPending;\n\n    event OperatorsContractChanged(address indexed caller, address indexed operatorsAddress);\n    event OperatorsContractPending(address indexed caller, address indexed operatorsAddress);\n\n    /**\n     * @dev Reverts if sender does not have operator role associated.\n     */\n    modifier onlyOperator() {\n        require(isOperator(msg.sender), \"Operatorable: caller does not have the operator role\");\n        _;\n    }\n\n    /**\n     * @dev Reverts if sender does not have admin role associated.\n     */\n    modifier onlyAdmin() {\n        require(isAdmin(msg.sender), \"Operatorable: caller does not have the admin role\");\n        _;\n    }\n\n    /**\n     * @dev Reverts if sender does not have system role associated.\n     */\n    modifier onlySystem() {\n        require(isSystem(msg.sender), \"Operatorable: caller does not have the system role\");\n        _;\n    }\n\n    /**\n     * @dev Reverts if sender does not have multisig privileges.\n     */\n    modifier onlyMultisig() {\n        require(isMultisig(msg.sender), \"Operatorable: caller does not have multisig role\");\n        _;\n    }\n\n    /**\n     * @dev Reverts if sender does not have admin or system role associated.\n     */\n    modifier onlyAdminOrSystem() {\n        require(isAdminOrSystem(msg.sender), \"Operatorable: caller does not have the admin role nor system\");\n        _;\n    }\n\n    /**\n     * @dev Reverts if sender does not have operator or system role associated.\n     */\n    modifier onlyOperatorOrSystem() {\n        require(isOperatorOrSystem(msg.sender), \"Operatorable: caller does not have the operator role nor system\");\n        _;\n    }\n\n    /**\n     * @dev Reverts if sender does not have the relay role associated.\n     */\n\tmodifier onlyRelay() {\n        require(isRelay(msg.sender), \"Operatorable: caller does not have relay role associated\");\n        _;\n    }\n\n    /**\n     * @dev Reverts if sender does not have relay or operator role associated.\n     */\n\tmodifier onlyOperatorOrRelay() {\n        require(isOperator(msg.sender) || isRelay(msg.sender), \"Operatorable: caller does not have the operator role nor relay\");\n        _;\n    }\n\n    /**\n     * @dev Reverts if sender does not have relay or admin role associated.\n     */\n\tmodifier onlyAdminOrRelay() {\n        require(isAdmin(msg.sender) || isRelay(msg.sender), \"Operatorable: caller does not have the admin role nor relay\");\n        _;\n    }\n\n    /**\n     * @dev Reverts if sender does not have the operator, or system, or relay role associated.\n     */\n\tmodifier onlyOperatorOrSystemOrRelay() {\n        require(isOperator(msg.sender) || isSystem(msg.sender) || isRelay(msg.sender), \"Operatorable: caller does not have the operator role nor system nor relay\");\n        _;\n    }\n\n    /**\n     * @dev Initialization instead of constructor, called once. The setOperatorsContract function can be called only by Admin role with\n     *       confirmation through the operators contract.\n     * @param _baseOperators BaseOperators contract address.\n     */\n    function initialize(address _baseOperators) public initializer {\n        _setOperatorsContract(_baseOperators);\n    }\n\n    /**\n     * @dev Set the new the address of Operators contract, should be confirmed from operators contract by calling confirmFor(addr)\n     *       where addr is the address of current contract instance. This is done to prevent the case when the new contract address is\n     *       broken and control of the contract can be lost in such case\n     * @param _baseOperators BaseOperators contract address.\n     */\n    function setOperatorsContract(address _baseOperators) public onlyAdmin {\n        require(_baseOperators != address(0), \"Operatorable: address of new operators contract can not be zero\");\n        operatorsPending = _baseOperators;\n        emit OperatorsContractPending(msg.sender, _baseOperators);\n    }\n\n    /**\n     * @dev The function should be called from new operators contract by admin to insure that operatorsPending address\n     *       is the real contract address.\n     */\n    function confirmOperatorsContract() public {\n        require(operatorsPending != address(0), \"Operatorable: address of new operators contract can not be zero\");\n        require(msg.sender == operatorsPending, \"Operatorable: should be called from new operators contract\");\n        _setOperatorsContract(operatorsPending);\n    }\n\n    /**\n     * @return The address of the BaseOperators contract.\n     */\n    function getOperatorsContract() public view returns(address) {\n        return address(operatorsInst);\n    }\n\n    /**\n     * @return The pending address of the BaseOperators contract.\n     */\n    function getOperatorsPending() public view returns(address) {\n        return operatorsPending;\n    }\n\n    /**\n     * @return If '_account' has operator privileges.\n     */\n    function isOperator(address _account) public view returns (bool) {\n        return operatorsInst.isOperator(_account);\n    }\n\n    /**\n     * @return If '_account' has admin privileges.\n     */\n    function isAdmin(address _account) public view returns (bool) {\n        return operatorsInst.isAdmin(_account);\n    }\n\n    /**\n     * @return If '_account' has system privileges.\n     */\n    function isSystem(address _account) public view returns (bool) {\n        return operatorsInst.isSystem(_account);\n    }\n\n    /**\n     * @return If '_account' has relay privileges.\n     */\n    function isRelay(address _account) public view returns (bool) {\n        return operatorsInst.isRelay(_account);\n    }\n\n    /**\n     * @return If '_contract' has multisig privileges.\n     */\n    function isMultisig(address _contract) public view returns (bool) {\n        return operatorsInst.isMultisig(_contract);\n    }\n\n    /**\n     * @return If '_account' has admin or system privileges.\n     */\n    function isAdminOrSystem(address _account) public view returns (bool) {\n        return (operatorsInst.isAdmin(_account) || operatorsInst.isSystem(_account));\n    }\n\n    /**\n     * @return If '_account' has operator or system privileges.\n     */\n    function isOperatorOrSystem(address _account) public view returns (bool) {\n        return (operatorsInst.isOperator(_account) || operatorsInst.isSystem(_account));\n    }\n\n    /** INTERNAL FUNCTIONS */\n    function _setOperatorsContract(address _baseOperators) internal {\n        require(_baseOperators != address(0), \"Operatorable: address of new operators contract cannot be zero\");\n        operatorsInst = IBaseOperators(_baseOperators);\n        emit OperatorsContractChanged(msg.sender, _baseOperators);\n    }\n}\n\n// File: @sygnum/solidity-base-contracts/contracts/role/trader/TraderOperatorable.sol\n\n/**\n * @title TraderOperatorable\n * @author Connor Howe <Connor.howe@sygnum.com>\n * @dev TraderOperatorable contract stores TraderOperators contract address, and modifiers for\n *      contracts.\n */\n\npragma solidity 0.5.12;\n\n\n\n\n\ncontract TraderOperatorable is Operatorable {\n    ITraderOperators internal traderOperatorsInst;\n    address private traderOperatorsPending;\n\n    event TraderOperatorsContractChanged(address indexed caller, address indexed traderOperatorsAddress);\n    event TraderOperatorsContractPending(address indexed caller, address indexed traderOperatorsAddress);\n\n    /**\n     * @dev Reverts if sender does not have the trader role associated.\n     */\n\tmodifier onlyTrader() {\n        require(isTrader(msg.sender), \"TraderOperatorable: caller is not trader\");\n        _;\n    }\n\n    /**\n     * @dev Reverts if sender does not have the operator or trader role associated.\n     */\n    modifier onlyOperatorOrTraderOrSystem() {\n        require(isOperator(msg.sender) || isTrader(msg.sender) || isSystem(msg.sender), \"TraderOperatorable: caller is not trader or operator or system\");\n        _;\n    }\n\n    /**\n     * @dev Initialization instead of constructor, called once. The setTradersOperatorsContract function can be called only by Admin role with\n     * confirmation through the operators contract.\n     * @param _baseOperators BaseOperators contract address.\n     * @param _traderOperators TraderOperators contract address.\n     */\n    function initialize(address _baseOperators, address _traderOperators) public initializer {\n        super.initialize(_baseOperators);\n        _setTraderOperatorsContract(_traderOperators);\n    }\n\n    /**\n     * @dev Set the new the address of Operators contract, should be confirmed from operators contract by calling confirmFor(addr)\n     * where addr is the address of current contract instance. This is done to prevent the case when the new contract address is\n     * broken and control of the contract can be lost in such case\n     * @param _traderOperators TradeOperators contract address.\n     */\n    function setTraderOperatorsContract(address _traderOperators) public onlyAdmin {\n        require(_traderOperators != address(0), \"TraderOperatorable: address of new traderOperators contract can not be zero\");\n        traderOperatorsPending = _traderOperators;\n        emit TraderOperatorsContractPending(msg.sender, _traderOperators);\n    }\n\n    /**\n     * @dev The function should be called from new operators contract by admin to insure that traderOperatorsPending address\n     *       is the real contract address.\n     */\n    function confirmTraderOperatorsContract() public {\n        require(traderOperatorsPending != address(0), \"TraderOperatorable: address of pending traderOperators contract can not be zero\");\n        require(msg.sender == traderOperatorsPending, \"TraderOperatorable: should be called from new traderOperators contract\");\n        _setTraderOperatorsContract(traderOperatorsPending);\n    }\n\n    /**\n     * @return The address of the TraderOperators contract.\n     */\n    function getTraderOperatorsContract() public view returns(address) {\n        return address(traderOperatorsInst);\n    }\n\n    /**\n     * @return The pending TraderOperators contract address\n     */\n    function getTraderOperatorsPending() public view returns(address) {\n        return traderOperatorsPending;\n    }\n\n    /**\n     * @return If '_account' has trader privileges.\n     */\n    function isTrader(address _account) public view returns (bool) {\n        return traderOperatorsInst.isTrader(_account);\n    }\n\n    /** INTERNAL FUNCTIONS */\n    function _setTraderOperatorsContract(address _traderOperators) internal {\n        require(_traderOperators != address(0), \"TraderOperatorable: address of new traderOperators contract can not be zero\");\n        traderOperatorsInst = ITraderOperators(_traderOperators);\n        emit TraderOperatorsContractChanged(msg.sender, _traderOperators);\n    }\n}\n\n// File: @sygnum/solidity-base-contracts/contracts/helpers/Pausable.sol\n\n/**\n * @title Pausable\n * @author Connor Howe <connor.howe@sygnum.com>\n * @dev Contract module which allows children to implement an emergency stop\n *      mechanism that can be triggered by an authorized account in the TraderOperatorable\n *      contract.\n */\npragma solidity 0.5.12;\n\n\ncontract Pausable is TraderOperatorable {\n    event Paused(address indexed account);\n    event Unpaused(address indexed account);\n\n    bool internal _paused;\n\n    constructor () internal {\n        _paused = false;\n    }\n\n    /**\n     * @dev Reverts if contract is paused.\n     */\n    modifier whenNotPaused() {\n        require(!_paused, \"Pausable: paused\");\n        _;\n    }\n\n    /**\n     * @dev Reverts if contract is paused.\n     */\n    modifier whenPaused() {\n        require(_paused, \"Pausable: not paused\");\n        _;\n    }\n\n    /**\n     * @dev Called by operator to pause child contract. The contract\n     *      must not already be paused.\n     */\n    function pause() public onlyOperatorOrTraderOrSystem whenNotPaused {\n        _paused = true;\n        emit Paused(msg.sender);\n    }\n\n    /** @dev Called by operator to pause child contract. The contract\n     *       must already be paused.\n     */\n    function unpause() public onlyOperatorOrTraderOrSystem whenPaused {\n        _paused = false;\n        emit Unpaused(msg.sender);\n    }\n\n    /**\n     * @return If child contract is already paused or not.\n     */\n    function isPaused() public view returns(bool){\n        return _paused;\n    }\n\n    /**\n     * @return If child contract is not paused.\n     */\n    function isNotPaused() public view returns(bool){\n        return !_paused;\n    }\n}\n\n// File: @sygnum/solidity-base-contracts/contracts/libraries/Bytes32Set.sol\n\npragma solidity 0.5.12;\n\n// SPDX-License-Identifier: Unlicensed\n// https://github.com/rob-Hitchens/SetTypes/blob/master/contracts/Bytes32Set.sol\n\nlibrary Bytes32Set {\n    \n    struct Set {\n        mapping(bytes32 => uint) keyPointers;\n        bytes32[] keyList;\n    }\n    \n    /**\n     * @notice insert a key. \n     * @dev duplicate keys are not permitted.\n     * @param self storage pointer to a Set. \n     * @param key value to insert.\n     */\n    function insert(Set storage self, bytes32 key) internal {\n        require(!exists(self, key), \"Bytes32Set: key already exists in the set.\");\n        self.keyPointers[key] = self.keyList.length;\n        self.keyList.push(key);\n    }\n\n    /**\n     * @notice remove a key.\n     * @dev key to remove must exist. \n     * @param self storage pointer to a Set.\n     * @param key value to remove.\n     */\n    function remove(Set storage self, bytes32 key) internal {\n        require(exists(self, key), \"Bytes32Set: key does not exist in the set.\");\n        uint last = count(self) - 1;\n        uint rowToReplace = self.keyPointers[key];\n        if(rowToReplace != last) {\n            bytes32 keyToMove = self.keyList[last];\n            self.keyPointers[keyToMove] = rowToReplace;\n            self.keyList[rowToReplace] = keyToMove;\n        }\n        delete self.keyPointers[key];\n        self.keyList.pop();\n    }\n\n    /**\n     * @notice count the keys.\n     * @param self storage pointer to a Set. \n     */    \n    function count(Set storage self) internal view returns(uint) {\n        return(self.keyList.length);\n    }\n    \n    /**\n     * @notice check if a key is in the Set.\n     * @param self storage pointer to a Set.\n     * @param key value to check. \n     * @return bool true: Set member, false: not a Set member.\n     */\n    function exists(Set storage self, bytes32 key) internal view returns(bool) {\n        if(self.keyList.length == 0) return false;\n        return self.keyList[self.keyPointers[key]] == key;\n    }\n\n    /**\n     * @notice fetch a key by row (enumerate).\n     * @param self storage pointer to a Set.\n     * @param index row to enumerate. Must be < count() - 1.\n     */    \n    function keyAtIndex(Set storage self, uint index) internal view returns(bytes32) {\n        return self.keyList[index];\n    }\n}\n\n// File: @sygnum/solidity-base-contracts/contracts/helpers/TradingPairWhitelist.sol\n\n/**\n * @title TradingPairWhitelist\n * @author Connor Howe <Connor.howe@sygnum.com>\n * @dev TradingPairWhitelist contract that allows particular trading pairs available within the DEX.  Whitelisting/unwhitelisting\n *       is controlled by operators in Operatorable contract which is initialized with the relevant BaseOperators address.\n */\n\npragma solidity 0.5.12;\n\n\n\n\ncontract TradingPairWhitelist is TraderOperatorable {\n    using Bytes32Set for Bytes32Set.Set;\n\n    Bytes32Set.Set internal pairs;\n    mapping (bytes32 => Pair) public pair;\n    mapping (address => mapping (address => bytes32)) pairIdentifier;\n\n    struct Pair {\n        bool paired;\n        bool frozen;\n        address buyToken;\n        address sellToken;\n    }\n\n    event PairedTokens(bytes32 indexed pairID, address indexed buytoken, address indexed sellToken);\n    event DepairedTokens(bytes32 indexed pairID, address indexed buytoken, address indexed sellToken);\n    event FrozenPair(bytes32 indexed pairID);\n    event UnFrozenPair(bytes32 indexed pairID);\n\n    /**\n     * @dev Reverts if _buyToken and _sellToken are not paired.\n     * @param _buyToken buy token against sell token to determine if whitelisted pair or not.\n     * @param _sellToken sell token against buy token to determine if whitelisted pair or not.\n     */\n    modifier onlyPaired(address _buyToken, address _sellToken) {\n        require(isPaired(_buyToken, _sellToken), 'TradingPairWhitelist: pair is not whitelisted');\n        _;\n    }\n\n    /**\n     * @dev Reverts if _buyToken and _sellToken are frozen.\n     * @param _buyToken buy token against sell token to determine if frozen pair or not.\n     * @param _sellToken sell token against buy token to determine if frozen pair or not.\n     */\n    modifier whenNotFrozen(address _buyToken, address _sellToken) {\n        require(!isFrozen(_buyToken, _sellToken), 'TradingPairWhitelist: pair is frozen');\n        _;\n    }\n\n    /**\n    * @dev Getter to determine if pairs are whitelisted.\n    * @param _buyToken buy token against sell token to determine if whitelisted pair or not.\n    * @param _sellToken sell token against buy token to determine if whitelisted pair or not.\n    * @return bool is whitelisted pair.\n    */\n    function isPaired(address _buyToken, address _sellToken) public view returns (bool) {\n        return pair[pairIdentifier[_buyToken][_sellToken]].paired;\n    }\n\n    /**\n    * @dev Getter to determine if pairs are frozen.\n    * @param _buyToken buy token against sell token to determine if frozen pair or not.\n    * @param _sellToken sell token against buy token to determine if frozen pair or not.\n    * @return bool is frozen pair.\n    */\n    function isFrozen(address _buyToken, address _sellToken) public view returns (bool) {\n        return pair[pairIdentifier[_buyToken][_sellToken]].frozen;\n    }\n\n    /**\n    * @dev Pair tokens to be available for trading on DEX.\n    * @param _pairID pair identifier.\n    * @param _buyToken buy token against sell token to whitelist.\n    * @param _sellToken sell token against buy token to whitelist.\n    */\n    function pairTokens(bytes32 _pairID, address _buyToken, address _sellToken)\n        public\n        onlyOperator\n    {\n        _pairTokens(_pairID, _buyToken, _sellToken);\n    }\n\n    /**\n    * @dev Depair tokens to be available for trading on DEX.\n    * @param _pairID pair identifier.\n    */\n    function depairTokens(bytes32 _pairID)\n        public\n        onlyOperator\n    {\n        _depairTokens(_pairID);\n    }\n\n    /**\n    * @dev Freeze pair trading on DEX.\n    * @param _pairID pair identifier.\n    */\n    function freezePair(bytes32 _pairID)\n        public\n        onlyOperatorOrTraderOrSystem\n    {\n        _freezePair(_pairID);\n    }\n\n    /**\n    * @dev Unfreeze pair trading on DEX.\n    * @param _pairID pair identifier.\n    */\n    function unfreezePair(bytes32 _pairID)\n        public\n        onlyOperatorOrTraderOrSystem\n    {\n        _unfreezePair(_pairID);\n    }\n\n    /**\n    * @dev Batch pair tokens.\n    * @param _pairID array of pairID.\n    * @param _buyToken address array of buyToken.\n    * @param _sellToken address array of buyToken.\n    */\n    function batchPairTokens(bytes32[] memory _pairID, address[] memory _buyToken, address[] memory _sellToken)\n        public\n        onlyOperator\n    {\n        require(_pairID.length <= 256, 'TradingPairWhitelist: batch count is greater than 256');\n        require(_pairID.length == _buyToken.length && _buyToken.length == _sellToken.length, 'TradingPairWhitelist: array lengths not equal');\n\n        for (uint256 i = 0; i < _buyToken.length; i++) {\n            _pairTokens(_pairID[i], _buyToken[i], _sellToken[i]);\n        }\n    }\n\n    /**\n    * @dev Batch depair tokens.\n    * @param _pairID array of pairID.\n    */\n    function batchDepairTokens(bytes32[] memory _pairID)\n        public\n        onlyOperator\n    {\n        require(_pairID.length <= 256, 'TradingPairWhitelist: batch count is greater than 256');\n\n        for (uint256 i = 0; i < _pairID.length; i++) {\n            _depairTokens(_pairID[i]);\n        }\n    }\n\n    /**\n    * @dev Batch freeze tokens.\n    * @param _pairID array of pairID.\n    */\n    function batchFreezeTokens(bytes32[] memory _pairID)\n        public\n        onlyOperatorOrTraderOrSystem\n    {\n        require(_pairID.length <= 256, 'TradingPairWhitelist: batch count is greater than 256');\n\n        for (uint256 i = 0; i < _pairID.length; i++) {\n            _freezePair(_pairID[i]);\n        }\n    }\n\n    /**\n    * @dev Batch unfreeze tokens.\n    * @param _pairID array of pairID.\n    */\n    function batchUnfreezeTokens(bytes32[] memory _pairID)\n        public\n        onlyOperatorOrTraderOrSystem\n    {\n        require(_pairID.length <= 256, 'TradingPairWhitelist: batch count is greater than 256');\n\n        for (uint256 i = 0; i < _pairID.length; i++) {\n            _unfreezePair(_pairID[i]);\n        }\n    }\n\n    /**\n    * @return Amount of pairs.\n    */\n    function getPairCount() \n        public\n        view\n        returns(uint256)\n    {\n        return pairs.count();\n    }\n\n    /**\n    * @return Key at index.\n    */\n    function getIdentifier(uint256 _index) \n        public\n        view\n        returns(bytes32)\n    {\n        return pairs.keyAtIndex(_index);\n    }\n\n\n    /** INTERNAL FUNCTIONS */\n    function _pairTokens(bytes32 _pairID, address _buyToken, address _sellToken)\n        internal\n    {\n        require(_buyToken != address(0) && _sellToken != address(0), 'TradingPairWhitelist: tokens cannot be empty');\n        require(_buyToken != _sellToken, 'TradingPairWhitelist: buy and sell tokens cannot be the same');\n        require(!isPaired(_buyToken, _sellToken), 'TradingPairWhitelist: tokens have already been paired');\n        require(!pairs.exists(_pairID), 'TradingPairWhitelist: pair ID exists');\n\n        pair[_pairID] = Pair({\n            paired: true,\n            frozen: false,\n            buyToken: _buyToken,\n            sellToken: _sellToken\n        });\n\n        pairs.insert(_pairID);\n        pairIdentifier[_buyToken][_sellToken] = _pairID;\n        emit PairedTokens(_pairID, _buyToken, _sellToken);\n    }\n\n    function _depairTokens(bytes32 _pairID)\n        internal\n    {\n        require(pairs.exists(_pairID), 'TradingPairWhitelist: pair ID not does not exist');\n\n        Pair memory p = pair[_pairID];\n\n        delete pair[_pairID];\n        pairs.remove(_pairID);\n        delete pairIdentifier[p.buyToken][p.sellToken];\n        emit DepairedTokens(_pairID, p.buyToken, p.sellToken);\n    }\n\n    function _freezePair(bytes32 _pairID)\n        internal\n    {\n        require(pairs.exists(_pairID), 'TradingPairWhitelist: pair ID not does not exist');\n        require(!pair[_pairID].frozen, 'TradingPairWhitelist: token pair is frozen');\n\n        pair[_pairID].frozen = true;\n        emit FrozenPair(_pairID);\n    }\n\n    function _unfreezePair(bytes32 _pairID)\n        internal\n    {\n        require(pairs.exists(_pairID), 'TradingPairWhitelist: pair ID not does not exist');\n        require(pair[_pairID].frozen, 'TradingPairWhitelist: token pair is not frozen');\n\n        pair[_pairID].frozen = false;\n        emit UnFrozenPair(_pairID);\n    }\n}\n\n// File: @sygnum/solidity-base-contracts/contracts/helpers/interface/IWhitelist.sol\n\npragma solidity 0.5.12;\n\n/**\n * @title IWhitelist\n * @notice Interface for Whitelist contract\n */\ncontract IWhitelist {\n    function isWhitelisted(address _account) external view returns (bool);\n    function toggleWhitelist(address _account, bool _toggled) external;\n}\n\n// File: @sygnum/solidity-base-contracts/contracts/helpers/instance/Whitelistable.sol\n\n/**\n * @title Whitelistable\n * @author Connor Howe <Connor.howe@sygnum.com>\n * @dev Whitelistable contract stores the Whitelist contract address, and modifiers for\n *       contracts.\n */\n\npragma solidity 0.5.12;\n\n\n\n\ncontract Whitelistable is Initializable, Operatorable {\n    IWhitelist internal whitelistInst;\n    address private whitelistPending;\n\n    event WhitelistContractChanged(address indexed caller, address indexed whitelistAddress);\n    event WhitelistContractPending(address indexed caller, address indexed whitelistAddress);\n\n    /**\n     * @dev Reverts if _account is not whitelisted.\n     * @param _account address to determine if whitelisted.\n     */\n    modifier whenWhitelisted(address _account) {\n        require(isWhitelisted(_account), \"Whitelistable: account is not whitelisted\");\n        _;\n    }\n\n    /**\n     * @dev Initialization instead of constructor, called once. The setWhitelistContract function can be called only by Admin role with\n     *       confirmation through the whitelist contract.\n     * @param _whitelist Whitelist contract address.\n     * @param _baseOperators BaseOperators contract address.\n     */\n    function initialize(address _baseOperators, address _whitelist) public initializer {\n        _setOperatorsContract(_baseOperators);\n        _setWhitelistContract(_whitelist);\n    }\n\n    /**\n     * @dev Set the new the address of Whitelist contract, should be confirmed from whitelist contract by calling confirmFor(addr)\n     *       where addr is the address of current contract instance. This is done to prevent the case when the new contract address is\n     *       broken and control of the contract can be lost in such case\n     * @param _whitelist Whitelist contract address.\n     */\n    function setWhitelistContract(address _whitelist) public onlyAdmin {\n        require(_whitelist != address(0), \"Whitelistable: address of new whitelist contract can not be zero\");\n        whitelistPending = _whitelist;\n        emit WhitelistContractPending(msg.sender, _whitelist);\n    }\n\n    /**\n     * @dev The function should be called from new whitelist contract by admin to insure that whitelistPending address\n     *       is the real contract address.\n     */\n    function confirmWhitelistContract() public {\n        require(whitelistPending != address(0), \"Whitelistable: address of new whitelist contract can not be zero\");\n        require(msg.sender == whitelistPending, \"Whitelistable: should be called from new whitelist contract\");\n        _setWhitelistContract(whitelistPending);\n    }\n\n    /**\n     * @return The address of the Whitelist contract.\n     */\n    function getWhitelistContract() public view returns(address) {\n        return address(whitelistInst);\n    }\n\n    /**\n     * @return The pending address of the Whitelist contract.\n     */\n    function getWhitelistPending() public view returns(address) {\n        return whitelistPending;\n    }\n\n    /**\n     * @return If '_account' is whitelisted.\n     */\n    function isWhitelisted(address _account) public view returns (bool) {\n        return whitelistInst.isWhitelisted(_account);\n    }\n\n    /** INTERNAL FUNCTIONS */\n    function _setWhitelistContract(address _whitelist) internal {\n        require(_whitelist != address(0), \"Whitelistable: address of new whitelist contract cannot be zero\");\n        whitelistInst = IWhitelist(_whitelist);\n        emit WhitelistContractChanged(msg.sender, _whitelist);\n    }\n}\n\n// File: @sygnum/solidity-base-contracts/contracts/helpers/interface/IWhitelistable.sol\n\npragma solidity 0.5.12;\n\n/**\n * @title IWhitelistable\n * @notice Interface for whitelistable contract.\n */\ncontract IWhitelistable {\n    function confirmWhitelistContract() external;\n}\n\n// File: @sygnum/solidity-base-contracts/contracts/helpers/Whitelist.sol\n\n/**\n * @title Whitelist\n * @author Connor Howe <Connor.howe@sygnum.com>\n * @dev Whitelist contract with whitelist/unwhitelist functionality for particular addresses.  Whitelisting/unwhitelisting\n *      is controlled by operators/system/relays in Operatorable contract.\n */\n\npragma solidity 0.5.12;\n\n\n\ncontract Whitelist is Operatorable {\n    mapping(address => bool) public whitelisted;\n\n    event WhitelistToggled(address indexed account, bool whitelisted);\n\n    /**\n     * @dev Reverts if _account is not whitelisted.\n     * @param _account address to determine if whitelisted.\n     */\n    modifier whenWhitelisted(address _account) {\n        require(isWhitelisted(_account), \"Whitelist: account is not whitelisted\");\n        _;\n    }\n\n    /**\n     * @dev Reverts if address is empty.\n     * @param _address address to validate.\n     */\n    modifier onlyValidAddress(address _address) {\n        require(_address != address(0), \"Whitelist: invalid address\");\n        _;\n    }\n\n    /**\n     * @dev Getter to determine if address is whitelisted.\n     * @param _account address to determine if whitelisted or not.\n     * @return bool is whitelisted\n     */\n    function isWhitelisted(address _account) public view returns (bool) {\n        return whitelisted[_account];\n    }\n\n    /**\n     * @dev Toggle whitelisted/unwhitelisted on _account address, with _toggled being true/false.\n     * @param _account address to toggle.\n     * @param _toggled whitelist/unwhitelist.\n     */\n    function toggleWhitelist(address _account, bool _toggled)\n        public\n        onlyValidAddress(_account)\n        onlyOperatorOrSystemOrRelay\n    {\n        whitelisted[_account] = _toggled;\n        emit WhitelistToggled(_account, whitelisted[_account]);\n    }\n\n    /**\n     * @dev Batch whitelisted/unwhitelist multiple addresses, with _toggled being true/false.\n     * @param _addresses address array.\n     * @param _toggled whitelist/unwhitelist.\n     */\n    function batchToggleWhitelist(address[] memory _addresses, bool _toggled) public {\n        require(_addresses.length <= 256, \"Whitelist: batch count is greater than 256\");\n        for (uint256 i = 0; i < _addresses.length; i++) {\n            toggleWhitelist(_addresses[i], _toggled);\n        }\n    }\n\n    /**\n     * @dev Confirms whitelist contract address once active.\n     * @param _address Whitelistable contract addres.\n     */\n    function confirmFor(address _address) public onlyAdmin {\n        require(_address != address(0), \"Whitelist: address cannot be empty\");\n        IWhitelistable(_address).confirmWhitelistContract();\n    }\n}\n\n// File: contracts/dex/Exchange.sol\n\n/**\n * @title Exchange.\n * @author Team 3301 <team3301@sygnum.com>\n * @dev Users can make/cancel an order and take one or multiple orders.\n */\n\npragma solidity ^0.5.12;\n\n\n\n\n\n\n\n\ncontract Exchange is Pausable, TradingPairWhitelist {\n    using Bytes32Set for Bytes32Set.Set;\n    using SafeMath for uint256;\n    using Math for uint256;\n\n    struct Order {\n        address maker; // account of the order maker.\n        address specificTaker; // address of a taker, if applies.\n        bool isComplete; // false: partial order; true: complete order;\n        ISygnumToken sellToken; // token that the order maker sells\n        uint256 sellAmount; // total amount of token planned to be sold by the maker\n        ISygnumToken buyToken; // token that the order maker buys\n        uint256 buyAmount; // total amount of token planned to be bought by the maker\n    }\n\n    Bytes32Set.Set internal orders;\n    mapping(bytes32 => Order) public order;\n\n    event MadeOrder(\n        bytes32 indexed orderID,\n        ISygnumToken indexed sellToken,\n        ISygnumToken indexed buyToken,\n        address maker,\n        address specificTaker,\n        bool isComplete,\n        uint256 sellAmount,\n        uint256 buyAmount\n    );\n\n    event MadeOrderParticipants(bytes32 indexed orderID, address indexed maker, address indexed specificTaker);\n\n    event TakenOrder(\n        bytes32 indexed orderID,\n        ISygnumToken indexed purchasedToken,\n        ISygnumToken indexed paidToken,\n        address maker,\n        address taker,\n        uint256 purchasedAmount,\n        uint256 paidAmount // computed amount of tokens paid by the taker\n    );\n\n    event TakenOrderParticipants(bytes32 indexed orderID, address indexed maker, address indexed taker);\n\n    event CancelledOrder(\n        bytes32 indexed orderID,\n        address killer,\n        ISygnumToken indexed sellToken,\n        ISygnumToken indexed buyToken\n    );\n\n    /**\n     * @dev Reverts if length is not within range\n     */\n    modifier checkBatchLength(uint256 length) {\n        require(length > 1, \"Exchange: Fewer than two orders\");\n        require(length < 256, \"Exchange: Too many orders\");\n        _;\n    }\n\n    /**\n     * @dev Reverts if current block less than time-out block number\n     */\n    modifier checkTimeOut(uint256 timeOutBlockNumber) {\n        require(block.number <= timeOutBlockNumber, \"Exchange: timeout\");\n        _;\n    }\n\n    /**\n     * @dev Take orders by their orderID.\n     * @param orderIDs Array of order ids to be taken.\n     * @param buyers Array of buyers.\n     * @param quantity Array of quantity per purchase.\n     * @param timeOutBlockNumber Time-out block number.\n     */\n    function takeOrders(\n        bytes32[] calldata orderIDs,\n        address[] calldata buyers,\n        uint256[] calldata quantity,\n        uint256 timeOutBlockNumber\n    ) external whenNotPaused checkBatchLength(orderIDs.length) checkTimeOut(timeOutBlockNumber) {\n        require(\n            orderIDs.length == buyers.length && buyers.length == quantity.length,\n            \"Exchange: orders and buyers not equal\"\n        );\n\n        for (uint256 i = 0; i < orderIDs.length; i = i + 1) {\n            takeOrder(orderIDs[i], buyers[i], quantity[i], timeOutBlockNumber);\n        }\n    }\n\n    /**\n     * @dev Cancel orders by their orderID.\n     * @param orderIDs Array of order ids to be taken.\n     */\n    function cancelOrders(bytes32[] calldata orderIDs) external checkBatchLength(orderIDs.length) {\n        for (uint256 i = 0; i < orderIDs.length; i = i + 1) {\n            cancelOrder(orderIDs[i]);\n        }\n    }\n\n    /**\n     * @dev Let investor make an order, providing the approval is done beforehand.\n     * @param isComplete If this order can be filled partially (by default), or can only been taken as a whole.\n     * @param sellToken Address of the token to be sold in this order.\n     * @param sellAmount Total amount of token that is planned to be sold in this order.\n     * @param buyToken Address of the token to be purchased in this order.\n     * @param buyAmount Total amount of token planned to be bought by the maker\n     * @param timeOutBlockNumber Time-out block number.\n     */\n    function makeOrder(\n        bytes32 orderID,\n        address specificTaker, // if no one, just pass address(0)\n        address seller,\n        bool isComplete,\n        ISygnumToken sellToken,\n        uint256 sellAmount,\n        ISygnumToken buyToken,\n        uint256 buyAmount,\n        uint256 timeOutBlockNumber\n    )\n        public\n        whenNotPaused\n        checkTimeOut(timeOutBlockNumber)\n        onlyPaired(address(buyToken), address(sellToken))\n        whenNotFrozen(address(buyToken), address(sellToken))\n    {\n        address _seller = isTrader(msg.sender) ? seller : msg.sender;\n        _makeOrder(orderID, specificTaker, _seller, isComplete, sellToken, sellAmount, buyToken, buyAmount);\n    }\n\n    /**\n     * @dev Take an order by its orderID.\n     * @param orderID Order ID.\n     * @param quantity The amount of 'sellToken' that the taker wants to purchase.\n     * @param timeOutBlockNumber Time-out block number.\n     */\n    function takeOrder(\n        bytes32 orderID,\n        address seller,\n        uint256 quantity,\n        uint256 timeOutBlockNumber\n    ) public whenNotPaused checkTimeOut(timeOutBlockNumber) {\n        address _buyer = isTrader(msg.sender) ? seller : msg.sender;\n        _takeOrder(orderID, _buyer, quantity);\n    }\n\n    /**\n     * @dev Cancel an order by its maker or a trader.\n     * @param orderID Order ID.\n     */\n    function cancelOrder(bytes32 orderID) public {\n        require(orders.exists(orderID), \"Exchange: order ID does not exist\");\n        Order memory theOrder = order[orderID];\n        require(\n            isTrader(msg.sender) || (isNotPaused() && theOrder.maker == msg.sender),\n            \"Exchange: not eligible to cancel this order or the exchange is paused\"\n        );\n        theOrder.sellToken.unblock(theOrder.maker, theOrder.sellAmount);\n        orders.remove(orderID);\n        delete order[orderID];\n        emit CancelledOrder(orderID, msg.sender, theOrder.sellToken, theOrder.buyToken);\n    }\n\n    /**\n     * @dev Internal take order\n     * @param orderID Order ID.\n     * @param buyer Address of a seller, if applies.\n     * @param quantity Amount to purchase.\n     */\n    function _takeOrder(\n        bytes32 orderID,\n        address buyer,\n        uint256 quantity\n    ) private {\n        require(orders.exists(orderID), \"Exchange: order ID does not exist\");\n        require(buyer != address(0), \"Exchange: buyer cannot be set to an empty address\");\n        require(quantity > 0, \"Exchange: quantity cannot be zero\");\n        Order memory theOrder = order[orderID];\n        require(\n            theOrder.specificTaker == address(0) || theOrder.specificTaker == buyer,\n            \"Exchange: not specific taker\"\n        );\n        require(!isFrozen(address(theOrder.buyToken), address(theOrder.sellToken)), \"Exchange: tokens are frozen\");\n        uint256 spend = 0;\n        uint256 receive = 0;\n        if (quantity >= theOrder.sellAmount) {\n            // take the entire order anyway\n            spend = theOrder.buyAmount;\n            receive = theOrder.sellAmount;\n            orders.remove(orderID);\n            delete order[orderID];\n        } else {\n            // check if partial order is possible or not.\n            require(!theOrder.isComplete, \"Cannot take a complete order partially\");\n            spend = quantity.mul(theOrder.buyAmount).div(theOrder.sellAmount);\n            receive = quantity;\n            order[orderID].sellAmount = theOrder.sellAmount.sub(receive);\n            order[orderID].buyAmount = theOrder.buyAmount.sub(spend);\n        }\n\n        require(\n            theOrder.buyToken.allowance(buyer, address(this)) >= spend,\n            \"Exchange: sender buy allowance is not sufficient\"\n        );\n        theOrder.buyToken.transferFrom(buyer, theOrder.maker, spend);\n\n        require(\n            theOrder.sellToken.allowance(theOrder.maker, address(this)) >= receive,\n            \"Exchange: allowance is greater than receiving\"\n        );\n        theOrder.sellToken.unblock(theOrder.maker, receive);\n        theOrder.sellToken.transferFrom(theOrder.maker, buyer, receive);\n        emit TakenOrder(orderID, theOrder.buyToken, theOrder.sellToken, theOrder.maker, buyer, spend, receive);\n        emit TakenOrderParticipants(orderID, theOrder.maker, buyer);\n    }\n\n    /**\n     * @dev Internal make order\n     * @param orderID Order ID.\n     * @param specificTaker Address of a taker, if applies.\n     * @param isComplete If this order can be filled partially, or can only been taken as a whole.\n     * @param sellToken Address of the token to be sold in this order.\n     * @param sellAmount Total amount of token that is planned to be sold in this order.\n     * @param buyToken Address of the token to be purchased in this order.\n     * @param buyAmount Total amount of token planned to be bought by the maker.\n     */\n    function _makeOrder(\n        bytes32 orderID,\n        address specificTaker,\n        address seller,\n        bool isComplete,\n        ISygnumToken sellToken,\n        uint256 sellAmount,\n        ISygnumToken buyToken,\n        uint256 buyAmount\n    ) private {\n        require(!orders.exists(orderID), \"Exchange: order id already exists\");\n        require(specificTaker != msg.sender, \"Exchange: Cannot make an order for oneself\");\n        require(sellAmount > 0, \"Exchange: sell amount cannot be empty\");\n        require(buyAmount > 0, \"Exchange: buy amount cannot be empty\");\n\n        require(sellToken.balanceOf(seller) >= sellAmount, \"Exchange: seller does not have enough balance\");\n        require(\n            sellToken.allowance(seller, address(this)) >= sellAmount,\n            \"Exchange: sell amount is greater than allowance\"\n        );\n        require(\n            Whitelist(Whitelistable(address(buyToken)).getWhitelistContract()).isWhitelisted(seller),\n            \"Exchange: seller is not on buy token whitelist\"\n        );\n\n        if (specificTaker != address(0)) {\n            require(\n                Whitelist(Whitelistable(address(sellToken)).getWhitelistContract()).isWhitelisted(specificTaker),\n                \"Exchange: specific taker is not on sell token whitelist\"\n            );\n        }\n\n        sellToken.block(seller, sellAmount);\n\n        order[orderID] = Order({\n            maker: seller,\n            specificTaker: specificTaker,\n            isComplete: isComplete,\n            sellToken: sellToken,\n            sellAmount: sellAmount,\n            buyToken: buyToken,\n            buyAmount: buyAmount\n        });\n        orders.insert(orderID);\n        emit MadeOrder(orderID, sellToken, buyToken, seller, specificTaker, isComplete, sellAmount, buyAmount);\n        emit MadeOrderParticipants(orderID, seller, specificTaker);\n    }\n\n    /**\n     * @return Amount of orders.\n     */\n    function getOrderCount() public view returns (uint256) {\n        return orders.count();\n    }\n\n    /**\n     * @return Key at index.\n     */\n    function getIdentifier(uint256 _index) public view returns (bytes32) {\n        return orders.keyAtIndex(_index);\n    }\n}\n","ABI":"[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"orderID\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"killer\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"contract ISygnumToken\",\"name\":\"sellToken\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"contract ISygnumToken\",\"name\":\"buyToken\",\"type\":\"address\"}],\"name\":\"CancelledOrder\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"pairID\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"buytoken\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sellToken\",\"type\":\"address\"}],\"name\":\"DepairedTokens\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"pairID\",\"type\":\"bytes32\"}],\"name\":\"FrozenPair\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"orderID\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"contract ISygnumToken\",\"name\":\"sellToken\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"contract ISygnumToken\",\"name\":\"buyToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"maker\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"specificTaker\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isComplete\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"sellAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"buyAmount\",\"type\":\"uint256\"}],\"name\":\"MadeOrder\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"orderID\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"maker\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"specificTaker\",\"type\":\"address\"}],\"name\":\"MadeOrderParticipants\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operatorsAddress\",\"type\":\"address\"}],\"name\":\"OperatorsContractChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operatorsAddress\",\"type\":\"address\"}],\"name\":\"OperatorsContractPending\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"pairID\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"buytoken\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sellToken\",\"type\":\"address\"}],\"name\":\"PairedTokens\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"orderID\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"contract ISygnumToken\",\"name\":\"purchasedToken\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"contract ISygnumToken\",\"name\":\"paidToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"maker\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"taker\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"purchasedAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"paidAmount\",\"type\":\"uint256\"}],\"name\":\"TakenOrder\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"orderID\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"maker\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"taker\",\"type\":\"address\"}],\"name\":\"TakenOrderParticipants\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"traderOperatorsAddress\",\"type\":\"address\"}],\"name\":\"TraderOperatorsContractChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"traderOperatorsAddress\",\"type\":\"address\"}],\"name\":\"TraderOperatorsContractPending\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"pairID\",\"type\":\"bytes32\"}],\"name\":\"UnFrozenPair\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"_pairID\",\"type\":\"bytes32[]\"}],\"name\":\"batchDepairTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"_pairID\",\"type\":\"bytes32[]\"}],\"name\":\"batchFreezeTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"_pairID\",\"type\":\"bytes32[]\"},{\"internalType\":\"address[]\",\"name\":\"_buyToken\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"_sellToken\",\"type\":\"address[]\"}],\"name\":\"batchPairTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"_pairID\",\"type\":\"bytes32[]\"}],\"name\":\"batchUnfreezeTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"orderID\",\"type\":\"bytes32\"}],\"name\":\"cancelOrder\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"orderIDs\",\"type\":\"bytes32[]\"}],\"name\":\"cancelOrders\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"confirmOperatorsContract\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"confirmTraderOperatorsContract\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_pairID\",\"type\":\"bytes32\"}],\"name\":\"depairTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_pairID\",\"type\":\"bytes32\"}],\"name\":\"freezePair\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"getIdentifier\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getOperatorsContract\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getOperatorsPending\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getOrderCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getPairCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getTraderOperatorsContract\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getTraderOperatorsPending\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_baseOperators\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_traderOperators\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_baseOperators\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"isAdmin\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"isAdminOrSystem\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_buyToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_sellToken\",\"type\":\"address\"}],\"name\":\"isFrozen\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isInitialized\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_contract\",\"type\":\"address\"}],\"name\":\"isMultisig\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isNotPaused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"isOperator\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"isOperatorOrSystem\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_buyToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_sellToken\",\"type\":\"address\"}],\"name\":\"isPaired\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isPaused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"isRelay\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"isSystem\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"isTrader\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"orderID\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"specificTaker\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isComplete\",\"type\":\"bool\"},{\"internalType\":\"contract ISygnumToken\",\"name\":\"sellToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"sellAmount\",\"type\":\"uint256\"},{\"internalType\":\"contract ISygnumToken\",\"name\":\"buyToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"buyAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timeOutBlockNumber\",\"type\":\"uint256\"}],\"name\":\"makeOrder\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"order\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"maker\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"specificTaker\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isComplete\",\"type\":\"bool\"},{\"internalType\":\"contract ISygnumToken\",\"name\":\"sellToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"sellAmount\",\"type\":\"uint256\"},{\"internalType\":\"contract ISygnumToken\",\"name\":\"buyToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"buyAmount\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"pair\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"paired\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"frozen\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"buyToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"sellToken\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_pairID\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"_buyToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_sellToken\",\"type\":\"address\"}],\"name\":\"pairTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_baseOperators\",\"type\":\"address\"}],\"name\":\"setOperatorsContract\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_traderOperators\",\"type\":\"address\"}],\"name\":\"setTraderOperatorsContract\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"orderID\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"quantity\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timeOutBlockNumber\",\"type\":\"uint256\"}],\"name\":\"takeOrder\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"orderIDs\",\"type\":\"bytes32[]\"},{\"internalType\":\"address[]\",\"name\":\"buyers\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"quantity\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"timeOutBlockNumber\",\"type\":\"uint256\"}],\"name\":\"takeOrders\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_pairID\",\"type\":\"bytes32\"}],\"name\":\"unfreezePair\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"Exchange","CompilerVersion":"v0.5.12+commit.7709ece9","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}