{"status":"1","message":"OK","result":[{"SourceCode":"{\"Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\"},\"Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.0;\\n\\nimport \\\"./Context.sol\\\";\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\ncontract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor () internal {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(_owner == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n}\\n\"},\"Users.sol\":{\"content\":\"/*\\n* SPDX-License-Identifier: UNLICENSED\\n* Copyright Â© 2021 Blocksquare d.o.o.\\n*/\\n\\npragma solidity ^0.6.12;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"./Ownable.sol\\\";\\n\\ninterface RolesUsers {\\n    function hasEndUserAdminRights(address addr) external view returns (bool);\\n}\\n\\n/// @title Users\\ncontract Users is Ownable {\\n    mapping(address =\\u003e bytes32) _walletToUser;\\n\\n    RolesUsers private _roles;\\n\\n    event AddedWallet(bytes32 indexed userBytes, address wallet, string user);\\n    event RemovedWallet(bytes32 indexed userBytes, address wallet);\\n\\n    modifier onlyEndUserAdmin {\\n        require(_roles.hasEndUserAdminRights(msg.sender), \\\"Whitelisted: You need to have end user admin rights!\\\");\\n        _;\\n    }\\n\\n    constructor(address roles) public {\\n        _roles = RolesUsers(roles);\\n    }\\n\\n    function changeRolesAddress(address newRoles) public onlyOwner {\\n        _roles = RolesUsers(newRoles);\\n    }\\n\\n    function _addWallet(string memory user, address wallet) private {\\n        bytes32 userBytes = getUserBytes(user);\\n        _walletToUser[wallet] = userBytes;\\n        emit AddedWallet(userBytes, wallet, user);\\n    }\\n\\n    function _removeWallet(address wallet) private {\\n        bytes32 userBytes = getUserBytesFromWallet(wallet);\\n        delete _walletToUser[wallet];\\n        emit RemovedWallet(userBytes, wallet);\\n    }\\n\\n\\n    /// @notice registers wallet addresses for users\\n    /// @param users Array of strings that identifies users\\n    /// @param wallets Array of wallet addresses\\n    function addWalletList(string[] memory users, address[] memory wallets) public onlyEndUserAdmin {\\n        require(users.length == wallets.length, \\\"Whitelisted: User and wallet lists must be of same length!\\\");\\n        for (uint i = 0; i \\u003c wallets.length; i++) {\\n            _addWallet(users[i], wallets[i]);\\n        }\\n    }\\n\\n    /// @notice removes wallets\\n    /// @param wallets Array of addresses\\n    function removeWalletList(address[] memory wallets) public onlyEndUserAdmin {\\n        for (uint i = 0; i \\u003c wallets.length; i++) {\\n            _removeWallet(wallets[i]);\\n        }\\n    }\\n\\n    /// @notice retrieves keccak256 hash of user based on wallet\\n    /// @param wallet Address of user\\n    /// @return keccak256 hash\\n    function getUserBytesFromWallet(address wallet) public view returns (bytes32) {\\n        return _walletToUser[wallet];\\n    }\\n\\n    /// @notice get keccak256 hash of string\\n    /// @param user User or Certified Partner identifier\\n    /// @return keccak256 hash\\n    function getUserBytes(string memory user) public pure returns (bytes32) {\\n        return keccak256(abi.encode(user));\\n    }\\n}\\n\"}}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"roles\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"userBytes\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"user\",\"type\":\"string\"}],\"name\":\"AddedWallet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"userBytes\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"}],\"name\":\"RemovedWallet\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"string[]\",\"name\":\"users\",\"type\":\"string[]\"},{\"internalType\":\"address[]\",\"name\":\"wallets\",\"type\":\"address[]\"}],\"name\":\"addWalletList\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newRoles\",\"type\":\"address\"}],\"name\":\"changeRolesAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"user\",\"type\":\"string\"}],\"name\":\"getUserBytes\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"}],\"name\":\"getUserBytesFromWallet\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"wallets\",\"type\":\"address[]\"}],\"name\":\"removeWalletList\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"Users","CompilerVersion":"v0.6.12+commit.27d51765","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000cddd81a19cfd74281c7c5f83415e195b44953ec4","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"ipfs://61ee3abffef7d9303ed1891578c34c90c7983e53c2be24393c46a73f2bbd3bda"}]}