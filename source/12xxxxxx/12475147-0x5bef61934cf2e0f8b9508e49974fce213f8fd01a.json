{"status":"1","message":"OK","result":[{"SourceCode":"// SPDX-License-Identifier: UNLICENSED\r\npragma solidity ^0.8.3;\r\n\r\ninterface ERC165 {\r\n    function supportsInterface(bytes4 interfaceID) external view returns (bool);\r\n}\r\ninterface ERC721 {\r\n    event Transfer(address indexed _from, address indexed _to, uint256 indexed _tokenId);\r\n    event Approval(address indexed _owner, address indexed _approved, uint256 indexed _tokenId);\r\n    event ApprovalForAll(address indexed _owner, address indexed _operator, bool _approved);\r\n\r\n    function balanceOf(address _owner) external view returns (uint256);\r\n    function ownerOf(uint256 _tokenId) external view returns (address);\r\n    function safeTransferFrom(address _from, address _to, uint256 _tokenId, bytes calldata) external;\r\n    function safeTransferFrom(address _from, address _to, uint256 _tokenId) external;\r\n    function transferFrom(address _from, address _to, uint256 _tokenId) external;\r\n    function approve(address _approved, uint256 _tokenId) external;\r\n    function setApprovalForAll(address _operator, bool _approved) external;\r\n    function getApproved(uint256 _tokenId) external view returns (address);\r\n    function isApprovedForAll(address _owner, address _operator) external view returns (bool);\r\n}\r\ninterface ERC721Metadata {\r\n    function name() external view returns (string memory);\r\n    function symbol() external view returns (string memory);\r\n    function tokenURI(uint256 _tokenId) external view returns (string memory);\r\n}\r\ninterface ERC721Enumerable {\r\n    function totalSupply() external view returns (uint256);\r\n    function tokenByIndex(uint256 _index) external view returns (uint256);\r\n    function tokenOfOwnerByIndex(address _owner, uint256 _index) external view returns (uint256);\r\n}\r\ninterface ERC721TokenReceiver {\r\n    function onERC721Received(address _operator, address _from, uint256 _tokenId, bytes calldata) external returns (bytes4);\r\n}\r\n\r\ncontract IDS_LR_MARS is ERC721, ERC721Metadata, ERC721Enumerable, ERC165 {\r\n    address payable private IDS;\r\n    bool private __OTC = true;\r\n    uint256 private __transactionFeePerMil = 1;\r\n\r\n    mapping (uint256 => address) private __owners;\r\n    mapping (address => uint256) private __balances;\r\n    mapping (uint256 => address) private __tokenApprovals;\r\n    mapping (address => mapping (address => bool)) private __operatorApprovals;\r\n    uint256[] private __allTokens;\r\n    mapping(uint256 => uint256) private __allTokensIndex;\r\n    mapping(address => mapping(uint256 => uint256)) private __ownedTokens;\r\n    mapping(uint256 => uint256) private __ownedTokensIndex;\r\n\r\n    struct __trade {\r\n        address seller;\r\n        uint256 price;\r\n        bytes16 status;\r\n    }\r\n    mapping (uint256 => __trade) private __trades;\r\n    event TradeStatusChange(uint256 indexed _tokenId, address _from, address _to, uint256 _price, bytes16 _status);\r\n\r\n    constructor() {\r\n        IDS = payable(msg.sender);\r\n    }\r\n\r\n    function supportsInterface(bytes4 interfaceID) public view virtual override returns (bool) {\r\n        return interfaceID == type(ERC721).interfaceId || interfaceID == type(ERC721Metadata).interfaceId || interfaceID == type(ERC721Enumerable).interfaceId || interfaceID == type(ERC165).interfaceId;\r\n    }\r\n\r\n    function balanceOf(address _owner) public view override returns (uint256) {\r\n        require(_owner != address(0), \"ERC721: balance query for the zero address\");\r\n\r\n        return __balances[_owner];\r\n    }\r\n    function ownerOf(uint256 _tokenId) public view override returns (address) {\r\n        address owner = __owners[_tokenId];\r\n        require(owner != address(0), \"ERC721: owner query for unregistered token\");\r\n\r\n        return owner;\r\n    }\r\n    function name() external pure override returns (string memory) {\r\n        return \"IDS-LR-MARS\";\r\n    }\r\n    function symbol() external pure override returns (string memory) {\r\n        return \"MARS\";\r\n    }\r\n    function tokenURI(uint256 _tokenId) public view override returns (string memory) {\r\n        require(__isRegistered(_tokenId), \"ERC721Metadata: URI query for unregistered token\");\r\n\r\n        return string(abi.encodePacked(\"https://mars.departmentofspace.org/tokens/\", __tokenString(_tokenId)));\r\n    }\r\n    function totalSupply() public view virtual override returns (uint256) {\r\n        return __allTokens.length;\r\n    }\r\n    function tokenByIndex(uint256 _index) public view virtual override returns (uint256) {\r\n        require(_index < totalSupply(), \"ERC721Enumerable: global index out of bounds\");\r\n\r\n        return __allTokens[_index];\r\n    }\r\n    function tokenOfOwnerByIndex(address _owner, uint256 _index) public view virtual override returns (uint256) {\r\n        require(_index < balanceOf(_owner), \"ERC721Enumerable: owner index out of bounds\");\r\n\r\n        return __ownedTokens[_owner][_index];\r\n    }\r\n\r\n    function safeTransferFrom(address _from, address _to, uint256 _tokenId, bytes memory data) public override {\r\n        transferFrom(_from, _to, _tokenId);\r\n\r\n        require(__checkOnERC721Received(_from, _to, _tokenId, data), \"ERC721: transfer to non ERC721Receiver implementer\");\r\n    }\r\n    function safeTransferFrom(address _from, address _to, uint256 _tokenId) external override {\r\n        safeTransferFrom(_from, _to, _tokenId, \"\");\r\n    }\r\n    function transferFrom(address _from, address _to, uint256 _tokenId) public override {\r\n        address owner = ownerOf(_tokenId);\r\n\r\n        require(__OTC, \"IDS_LR_MARS: over-the-counter trading is currently prohibited\");\r\n        require(__trades[_tokenId].status != \"Opened\", \"IDS_LR_MARS: token on sale\");\r\n        require(owner == msg.sender || __tokenApprovals[_tokenId] == msg.sender || __operatorApprovals[owner][msg.sender], \"ERC721: transfer caller is not owner nor approved\");\r\n        require(owner == _from, \"ERC721: transfer of token that is not own\");\r\n        require(_to != address(0), \"ERC721: transfer to the zero address\");\r\n\r\n        __tokenApprovals[_tokenId] = address(0);\r\n        emit Approval(owner, address(0), _tokenId);\r\n\r\n        uint256 lastTokenIndex = balanceOf(_from) - 1;\r\n        uint256 tokenIndex = __ownedTokensIndex[_tokenId];\r\n        if (tokenIndex != lastTokenIndex) {\r\n            uint256 lastTokenId = __ownedTokens[_from][lastTokenIndex];\r\n            __ownedTokens[_from][tokenIndex] = lastTokenId;\r\n            __ownedTokensIndex[lastTokenId] = tokenIndex;\r\n        }\r\n        delete __ownedTokensIndex[_tokenId];\r\n        delete __ownedTokens[_from][lastTokenIndex];\r\n        uint256 length = balanceOf(_to);\r\n        __ownedTokens[_to][length] = _tokenId;\r\n        __ownedTokensIndex[_tokenId] = length;\r\n\r\n        __owners[_tokenId] = _to;\r\n        __balances[_from]--;\r\n        __balances[_to]++;\r\n        emit Transfer(_from, _to, _tokenId);\r\n    }\r\n\r\n    function approve(address _approved, uint256 _tokenId) external override {\r\n        address owner = ownerOf(_tokenId);\r\n\r\n        require(_approved != owner, \"ERC721: approval to current owner\");\r\n        require(msg.sender == owner || __operatorApprovals[owner][msg.sender], \"ERC721: approve caller is not owner nor approved for all\");\r\n\r\n        __tokenApprovals[_tokenId] = _approved;\r\n        emit Approval(owner, _approved, _tokenId);\r\n    }\r\n    function setApprovalForAll(address _operator, bool _approved) external override {\r\n        require(_operator != msg.sender, \"ERC721: approve to caller\");\r\n\r\n        __operatorApprovals[msg.sender][_operator] = _approved;\r\n        emit ApprovalForAll(msg.sender, _operator, _approved);\r\n    }\r\n    function getApproved(uint256 _tokenId) external view override returns (address) {\r\n        require(__isRegistered(_tokenId), \"ERC721: approved query for unregistered token\");\r\n\r\n        return __tokenApprovals[_tokenId];\r\n    }\r\n    function isApprovedForAll(address _owner, address _operator) external view override returns (bool) {\r\n        return __operatorApprovals[_owner][_operator];\r\n    }\r\n\r\n    \r\n    function register(uint256 _tokenId) external payable {\r\n        require(msg.sender != address(0), \"ERC721: registration to the zero address\");\r\n        require(!__isRegistered(_tokenId), \"ERC721: token already registered\");\r\n        require(__isValidToken(_tokenId), \"IDS_LR_MARS: invalid token\");\r\n        require(msg.value == __registrationFeeOf(_tokenId), \"IDS_LR_MARS: incorrect registration fee\");\r\n\r\n        __allTokensIndex[_tokenId] = __allTokens.length;\r\n        __allTokens.push(_tokenId);\r\n        uint256 length = balanceOf(msg.sender);\r\n        __ownedTokens[msg.sender][length] = _tokenId;\r\n        __ownedTokensIndex[_tokenId] = length;\r\n\r\n        IDS.transfer(msg.value);\r\n        __balances[msg.sender]++;\r\n        __owners[_tokenId] = msg.sender;\r\n        emit Transfer(address(0), msg.sender, _tokenId);\r\n\r\n        require(__checkOnERC721Received(address(0), msg.sender, _tokenId, \"\"), \"ERC721: transfer to non ERC721Receiver implementer\");\r\n\r\n        __trades[_tokenId] = __trade({\r\n            seller: address(0),\r\n            price: 0,\r\n            status: \"Registered\"\r\n        });\r\n        emit TradeStatusChange(_tokenId, address(0), msg.sender, 0, \"Registered\");\r\n    }\r\n    function sell(uint256 _tokenId, uint256 _price) external {\r\n        address owner = ownerOf(_tokenId);\r\n        require(msg.sender == owner || __operatorApprovals[owner][msg.sender], \"ERC721: sell caller is not owner nor approved for all\");\r\n        require(__trades[_tokenId].status != \"Opened\", \"IDS_LR_MARS: token already on sale\");\r\n\r\n        __trades[_tokenId] = __trade({\r\n            seller: msg.sender,\r\n            price: _price,\r\n            status: \"Opened\"\r\n        });\r\n        emit TradeStatusChange(_tokenId, owner, address(0), _price, \"Opened\");\r\n    }\r\n    function cancelTrade(uint256 _tokenId) external {\r\n        address owner = ownerOf(_tokenId);\r\n        __trade memory trade = __trades[_tokenId];\r\n        require(msg.sender == owner || __operatorApprovals[owner][msg.sender], \"ERC721: cancle caller is not owner nor approved for all\");\r\n        require(trade.status == \"Opened\", \"IDS_LR_MARS: token not for sale\");\r\n\r\n        __trades[_tokenId].status = \"Canceled\";\r\n        emit TradeStatusChange(_tokenId, owner, owner, trade.price, \"Canceled\");\r\n    }\r\n    function buy(uint256 _tokenId) external payable {\r\n        address owner = ownerOf(_tokenId);\r\n        __trade memory trade = __trades[_tokenId];\r\n        require(trade.status == \"Opened\", \"IDS_LR_MARS: token not for sale\");\r\n        require(msg.value == trade.price, \"IDS_LR_MARS: incorrect price\");\r\n        require(msg.sender != address(0), \"ERC721: transfer to the zero address\");\r\n\r\n        __tokenApprovals[_tokenId] = address(0);\r\n        emit Approval(owner, address(0), _tokenId);\r\n\r\n        uint256 lastTokenIndex = balanceOf(owner) - 1;\r\n        uint256 tokenIndex = __ownedTokensIndex[_tokenId];\r\n        if (tokenIndex != lastTokenIndex) {\r\n            uint256 lastTokenId = __ownedTokens[owner][lastTokenIndex];\r\n            __ownedTokens[owner][tokenIndex] = lastTokenId;\r\n            __ownedTokensIndex[lastTokenId] = tokenIndex;\r\n        }\r\n        delete __ownedTokensIndex[_tokenId];\r\n        delete __ownedTokens[owner][lastTokenIndex];\r\n        uint256 length = balanceOf(msg.sender);\r\n        __ownedTokens[msg.sender][length] = _tokenId;\r\n        __ownedTokensIndex[_tokenId] = length;\r\n\r\n        uint256 transactionFee = msg.value * __transactionFeePerMil / 1000;\r\n        IDS.transfer(transactionFee);\r\n\r\n        payable(owner).transfer(msg.value - transactionFee);\r\n        __owners[_tokenId] = msg.sender;\r\n        __balances[owner]--;\r\n        __balances[msg.sender]++;\r\n        emit Transfer(owner, msg.sender, _tokenId);\r\n\r\n        require(__checkOnERC721Received(owner, msg.sender, _tokenId, \"\"), \"ERC721: transfer to non ERC721Receiver implementer\");\r\n\r\n        __trades[_tokenId].status = \"Settled\";\r\n        emit TradeStatusChange(_tokenId, owner, msg.sender, trade.price, \"Settled\");\r\n    }\r\n\r\n    function __registrationFeeOf(uint256 _tokenId) public pure returns (uint256) {\r\n        require(__isValidToken(_tokenId), \"IDS_LR_MARS: invalid token\");\r\n\r\n        uint256 section = (_tokenId / 100000000) % 10;\r\n        if (section == 4) return   12500000000000000;\r\n        if (section == 3) return  625000000000000000;\r\n        if (section == 2) return 1250000000000000000;\r\n        else              return 2500000000000000000;\r\n    }\r\n    function __dataOf(uint256 _tokenId) external view returns (address, bytes16, uint256) {\r\n        address owner = ownerOf(_tokenId);\r\n        __trade memory trade = __trades[_tokenId];\r\n        return (owner, trade.status, trade.price);\r\n    }\r\n    function __delegate(address _to) external {\r\n        require(msg.sender == IDS);\r\n\r\n        IDS = payable(_to);\r\n    }\r\n    function __setOTC(bool _permission) external {\r\n        require(msg.sender == IDS);\r\n\r\n        __OTC = _permission;\r\n    }\r\n    function __setTransactionFee(uint256 _feePerMil) external {\r\n        require(msg.sender == IDS);\r\n        require(_feePerMil < 1000);\r\n\r\n        __transactionFeePerMil = _feePerMil;\r\n    }\r\n\r\n    function __isRegistered(uint256 _tokenId) private view returns (bool) {\r\n        return __owners[_tokenId] != address(0);\r\n    }\r\n    function __tokenString(uint256 _tokenId) private pure returns (string memory) {\r\n        if (_tokenId == 0) {\r\n            return \"0\";\r\n        }\r\n        uint256 temp = _tokenId;\r\n        uint256 digits;\r\n        while (temp != 0) {\r\n            digits++;\r\n            temp /= 10;\r\n        }\r\n        bytes memory buffer = new bytes(digits);\r\n        while (_tokenId != 0) {\r\n            digits -= 1;\r\n            buffer[digits] = bytes1(uint8(48 + uint256(_tokenId % 10)));\r\n            _tokenId /= 10;\r\n        }\r\n        return string(buffer);\r\n    }\r\n    function __checkOnERC721Received(address _from, address _to, uint256 _tokenId, bytes memory data) private returns (bool) {\r\n        uint32 size;\r\n        assembly {\r\n            size := extcodesize(_to)\r\n        }\r\n        if (size > 0) {\r\n            ERC721TokenReceiver receiver = ERC721TokenReceiver(_to);\r\n            return receiver.onERC721Received(msg.sender, _from, _tokenId, data) == bytes4(keccak256(\"onERC721Received(address,address,uint256,bytes)\"));\r\n        } else {\r\n            return true;\r\n        }\r\n    }\r\n    function __isValidToken(uint256 _tokenId) internal pure returns (bool) {\r\n        uint256 section = _tokenId / 100000000;\r\n        uint256 NS = (_tokenId / 10000000) % 10;\r\n        uint256 lat = (_tokenId / 10000) % 1000;\r\n        uint256 lng = _tokenId % 10000;\r\n\r\n        return NS < 2 && ((section == 1 && lat > 80 && lat <= 90 && lng > 0 && lng <= 45)\r\n                       || (section == 2 && lat > 70 && lat <= 80 && lng > 0 && lng <= 90)\r\n                       || (section == 3 && lat > 60 && lat <= 70 && lng > 0 && lng <= 180)\r\n                       || (section == 4 && lat > 0 && lat <= 300 && lng > 0 && lng <= 1800));\r\n    }\r\n}\r\n\r\n// Copyright © 2021 INTERNATIONAL DEPARTMENT OF SPACE. All rights reserved.","ABI":"[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"_approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_price\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes16\",\"name\":\"_status\",\"type\":\"bytes16\"}],\"name\":\"TradeStatusChange\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"__dataOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"bytes16\",\"name\":\"\",\"type\":\"bytes16\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"__delegate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"__registrationFeeOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_permission\",\"type\":\"bool\"}],\"name\":\"__setOTC\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_feePerMil\",\"type\":\"uint256\"}],\"name\":\"__setTransactionFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_approved\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"buy\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"cancelTrade\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"register\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_price\",\"type\":\"uint256\"}],\"name\":\"sell\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceID\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"tokenByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"tokenOfOwnerByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"IDS_LR_MARS","CompilerVersion":"v0.8.4+commit.c7e474f2","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"Unlicense","Proxy":"0","Implementation":"","SwarmSource":"ipfs://7518e567b5129cb9671cefeb4803e2a8097194bfc2200a91e8720d09b9d94dc9"}]}