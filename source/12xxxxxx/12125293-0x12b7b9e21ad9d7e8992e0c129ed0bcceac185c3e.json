{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/MasterVampire.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.7.6;\\r\\n\\r\\nimport \\\"./IMasterVampire.sol\\\";\\r\\nimport \\\"./IIBVEth.sol\\\";\\r\\n\\r\\ncontract MasterVampire is IMasterVampire, ChiGasSaver {\\r\\n    using SafeMath for uint256;\\r\\n    using SafeERC20 for IERC20;\\r\\n    using VampireAdapter for Victim;\\r\\n    //     (_                   _)\\r\\n    //      /\\\\                 /\\\\\\r\\n    //     / \\\\'._   (\\\\_/)   _.'/ \\\\\\r\\n    //    /_.''._'--('.')--'_.''._\\\\\\r\\n    //    | \\\\_ / `;=/ \\\" \\\\=;` \\\\ _/ |\\r\\n    //     \\\\/ `\\\\__|`\\\\___/`|__/`  \\\\/\\r\\n    //   jgs`      \\\\(/|\\\\)/       `\\r\\n    //              \\\" ` \\\"\\r\\n    event Deposit(address indexed user, uint256 indexed pid, uint256 amount);\\r\\n    event Withdraw(address indexed user, uint256 indexed pid, uint256 amount);\\r\\n    event EmergencyWithdraw(address indexed user, uint256 indexed pid, uint256 amount);\\r\\n\\r\\n    IWETH immutable weth;\\r\\n\\r\\n    modifier onlyDev() {\\r\\n        require(devAddress == msg.sender, \\\"not dev\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    modifier onlyRewardUpdater() {\\r\\n        require(poolRewardUpdater == msg.sender, \\\"not reward updater\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    constructor(\\r\\n        address _drainAddress,\\r\\n        address _drainController,\\r\\n        address _IBVETH,\\r\\n        address _weth\\r\\n    ) {\\r\\n        drainAddress = _drainAddress;\\r\\n        drainController = _drainController;\\r\\n        devAddress = msg.sender;\\r\\n        poolRewardUpdater = msg.sender;\\r\\n        IBVETH = _IBVETH;\\r\\n        weth = IWETH(_weth);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Allow depositing ether to the contract\\r\\n     */\\r\\n    receive() external payable {}\\r\\n\\r\\n    function poolLength() external view returns (uint256) {\\r\\n        return poolInfo.length;\\r\\n    }\\r\\n\\r\\n    function add(Victim _victim, uint256 _victimPoolId) external onlyOwner {\\r\\n        poolInfo.push(PoolInfo({\\r\\n            victim: _victim,\\r\\n            victimPoolId: _victimPoolId,\\r\\n            lastRewardBlock: block.number,\\r\\n            accWethPerShare: 0,\\r\\n            wethAccumulator: 0,\\r\\n            basePoolShares: 0,\\r\\n            baseDeposits: 0\\r\\n        }));\\r\\n    }\\r\\n\\r\\n    function updateDistributionPeriod(uint256 _distributionPeriod) external onlyRewardUpdater {\\r\\n        distributionPeriod = _distributionPeriod;\\r\\n    }\\r\\n\\r\\n    function updateWithdrawPenalty(uint256 _withdrawalPenalty) external onlyRewardUpdater {\\r\\n        withdrawalPenalty = _withdrawalPenalty;\\r\\n    }\\r\\n\\r\\n    function updateVictimInfo(uint256 _pid, address _victim, uint256 _victimPoolId) external onlyOwner {\\r\\n        poolInfo[_pid].victim = Victim(_victim);\\r\\n        poolInfo[_pid].victimPoolId = _victimPoolId;\\r\\n    }\\r\\n\\r\\n    function updatePoolDrain(uint256 _wethDrainModifier) external onlyOwner {\\r\\n        wethDrainModifier = _wethDrainModifier;\\r\\n    }\\r\\n\\r\\n    function updateDevAddress(address _devAddress) external onlyDev {\\r\\n        devAddress = _devAddress;\\r\\n    }\\r\\n\\r\\n    function updateDrainAddress(address _drainAddress) external onlyOwner {\\r\\n        drainAddress = _drainAddress;\\r\\n    }\\r\\n\\r\\n    function updateIBEthStrategy(address _ibveth) external onlyOwner {\\r\\n        IBVETH = _ibveth;\\r\\n        (bool success,) = address(IBVETH).delegatecall(abi.encodeWithSignature(\\\"migrate()\\\"));\\r\\n        require(success, \\\"migrate() delegatecall failed.\\\");\\r\\n    }\\r\\n\\r\\n    function updateDrainController(address _drainController) external onlyOwner {\\r\\n        drainController = _drainController;\\r\\n    }\\r\\n\\r\\n    function updateRewardUpdaterAddress(address _poolRewardUpdater) external onlyOwner {\\r\\n        poolRewardUpdater = _poolRewardUpdater;\\r\\n    }\\r\\n\\r\\n    function pendingWeth(uint256 _pid, address _user) public view returns (uint256) {\\r\\n        PoolInfo storage pool = poolInfo[_pid];\\r\\n        UserInfo storage user = userInfo[_pid][_user];\\r\\n        uint256 accWethPerShare = pool.accWethPerShare;\\r\\n        uint256 lpSupply = pool.victim.lockedAmount(pool.victimPoolId);\\r\\n        if (block.number > pool.lastRewardBlock && lpSupply != 0) {\\r\\n            uint256 blocksToReward = block.number.sub(pool.lastRewardBlock);\\r\\n            uint256 wethReward = blocksToReward.mul(pool.wethAccumulator).div(distributionPeriod);\\r\\n            accWethPerShare = accWethPerShare.add(wethReward.mul(1e12).div(lpSupply));\\r\\n        }\\r\\n\\r\\n        return user.amount.mul(accWethPerShare).div(1e12).sub(user.rewardDebt);\\r\\n    }\\r\\n\\r\\n    event ETHValue(uint256 amount);\\r\\n\\r\\n    function pendingWethReal(uint256 _pid, address _user) external returns (uint256) {\\r\\n        uint256 ibETH = pendingWeth(_pid, _user);\\r\\n        uint256 ethVal = IIBVEth(IBVETH).ibETHValue(ibETH);\\r\\n        emit ETHValue(ethVal);\\r\\n        return ethVal;\\r\\n    }\\r\\n\\r\\n    function pendingVictimReward(uint256 pid) external view returns (uint256) {\\r\\n        PoolInfo storage pool = poolInfo[pid];\\r\\n        return pool.victim.pendingReward(pid, pool.victimPoolId);\\r\\n    }\\r\\n\\r\\n    function poolAccWeth(uint256 pid) external view returns (uint256) {\\r\\n        PoolInfo storage pool = poolInfo[pid];\\r\\n        return pool.wethAccumulator;\\r\\n    }\\r\\n\\r\\n    function massUpdatePools() external {\\r\\n        uint256 length = poolInfo.length;\\r\\n        for (uint256 pid = 0; pid < length; ++pid) {\\r\\n            updatePool(pid);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function updatePool(uint256 pid) public {\\r\\n        PoolInfo storage pool = poolInfo[pid];\\r\\n        if (block.number <= pool.lastRewardBlock) {\\r\\n            return;\\r\\n        }\\r\\n        uint256 lpSupply = pool.victim.lockedAmount(pool.victimPoolId);\\r\\n        if (lpSupply == 0) {\\r\\n            pool.lastRewardBlock = block.number;\\r\\n            return;\\r\\n        }\\r\\n\\r\\n        uint256 blocksToReward = block.number.sub(pool.lastRewardBlock);\\r\\n        uint256 wethReward = blocksToReward.mul(pool.wethAccumulator).div(distributionPeriod);\\r\\n        pool.accWethPerShare = pool.accWethPerShare.add(wethReward.mul(1e12).div(lpSupply));\\r\\n        pool.lastRewardBlock = block.number;\\r\\n        pool.wethAccumulator = pool.wethAccumulator.sub(wethReward);\\r\\n    }\\r\\n\\r\\n    function deposit(uint256 pid, uint256 amount, uint8 flag) external nonReentrant saveGas(flag) {\\r\\n        PoolInfo storage pool = poolInfo[pid];\\r\\n        UserInfo storage user = userInfo[pid][msg.sender];\\r\\n        user.coolOffTime = block.timestamp + 24 hours;\\r\\n\\r\\n        updatePool(pid);\\r\\n        if (user.amount > 0) {\\r\\n            _claim(pid, false, flag);\\r\\n        }\\r\\n\\r\\n        if (amount > 0) {\\r\\n            pool.victim.lockableToken(pool.victimPoolId).safeTransferFrom(address(msg.sender), address(this), amount);\\r\\n            uint256 shares = pool.victim.deposit(pool.victimPoolId, amount);\\r\\n            if (shares > 0) {\\r\\n                pool.basePoolShares = pool.basePoolShares.add(shares);\\r\\n                pool.baseDeposits = pool.baseDeposits.add(amount);\\r\\n                user.poolShares = user.poolShares.add(shares);\\r\\n            }\\r\\n            user.amount = user.amount.add(amount);\\r\\n        }\\r\\n\\r\\n        user.rewardDebt = user.amount.mul(pool.accWethPerShare).div(1e12);\\r\\n        emit Deposit(msg.sender, pid, amount);\\r\\n    }\\r\\n\\r\\n    function withdraw(uint256 pid, uint256 amount, uint8 flag) external nonReentrant saveGas(flag) {\\r\\n        PoolInfo storage pool = poolInfo[pid];\\r\\n        UserInfo storage user = userInfo[pid][msg.sender];\\r\\n        require(user.amount >= amount, \\\"withdraw: not good\\\");\\r\\n        updatePool(pid);\\r\\n        _claim(pid, true, flag);\\r\\n\\r\\n        if (amount > 0) {\\r\\n            user.amount = user.amount.sub(amount);\\r\\n            uint256 shares = pool.victim.withdraw(pool.victimPoolId, amount);\\r\\n            if (shares > 0) {\\r\\n                pool.basePoolShares = pool.basePoolShares.sub(shares);\\r\\n                pool.baseDeposits = pool.baseDeposits.sub(amount);\\r\\n                user.poolShares = user.poolShares.sub(shares);\\r\\n            }\\r\\n            pool.victim.lockableToken(pool.victimPoolId).safeTransfer(address(msg.sender), amount);\\r\\n        }\\r\\n\\r\\n        user.rewardDebt = user.amount.mul(pool.accWethPerShare).div(1e12);\\r\\n        emit Withdraw(msg.sender, pid, amount);\\r\\n    }\\r\\n\\r\\n    function claim(uint256 pid, uint8 flag) external nonReentrant saveGas(flag) {\\r\\n        PoolInfo storage pool = poolInfo[pid];\\r\\n        UserInfo storage user = userInfo[pid][msg.sender];\\r\\n        updatePool(pid);\\r\\n        _claim(pid, false, flag);\\r\\n        user.rewardDebt = user.amount.mul(pool.accWethPerShare).div(1e12);\\r\\n    }\\r\\n\\r\\n    function emergencyWithdraw(uint256 pid) external nonReentrant {\\r\\n        PoolInfo storage pool = poolInfo[pid];\\r\\n        UserInfo storage user = userInfo[pid][msg.sender];\\r\\n        pool.victim.withdraw(pool.victimPoolId, user.amount);\\r\\n        pool.victim.lockableToken(pool.victimPoolId).safeTransfer(address(msg.sender), user.amount);\\r\\n        emit EmergencyWithdraw(msg.sender, pid, user.amount);\\r\\n        user.amount = 0;\\r\\n        user.rewardDebt = 0;\\r\\n        user.poolShares = 0;\\r\\n    }\\r\\n\\r\\n    /// Can only be called by DrainController\\r\\n    function drain(uint256 pid) external {\\r\\n        require(drainController == msg.sender, \\\"not drainctrl\\\");\\r\\n        PoolInfo storage pool = poolInfo[pid];\\r\\n        Victim victim = pool.victim;\\r\\n        uint256 victimPoolId = pool.victimPoolId;\\r\\n        victim.claimReward(pid, victimPoolId);\\r\\n        IERC20 rewardToken = victim.rewardToken(pid);\\r\\n        uint256 claimedReward = rewardToken.balanceOf(address(this));\\r\\n\\r\\n        if (claimedReward == 0) {\\r\\n            return;\\r\\n        }\\r\\n\\r\\n        uint256 wethReward = victim.sellRewardForWeth(pid, claimedReward, address(this));\\r\\n        // Take a % of the drained reward to be redistributed to other contracts\\r\\n        uint256 wethDrainAmount = wethReward.mul(wethDrainModifier).div(1000);\\r\\n        if (wethDrainAmount > 0) {\\r\\n            weth.transfer(drainAddress, wethDrainAmount);\\r\\n            wethReward = wethReward.sub(wethDrainAmount);\\r\\n        }\\r\\n\\r\\n        // Remainder of rewards go to users of the drained pool as interest-bearing ETH\\r\\n        uint256 ibethBefore = IIBVEth(IBVETH).balance(address(this));\\r\\n        (bool success,) = IBVETH.delegatecall(abi.encodeWithSignature(\\\"handleDrainedWETH(uint256)\\\", wethReward));\\r\\n        require(success, \\\"handleDrainedWETH(uint256 amount) delegatecall failed.\\\");\\r\\n        uint256 ibethAfter = IIBVEth(IBVETH).balance(address(this));\\r\\n\\r\\n        pool.wethAccumulator = pool.wethAccumulator.add(ibethAfter.sub(ibethBefore));\\r\\n    }\\r\\n\\r\\n    /// This function allows owner to take unsupported tokens out of the contract.\\r\\n    /// It also allows for removal of airdropped tokens.\\r\\n    function recoverUnsupported(IERC20 token, uint256 amount, address to) external onlyOwner {\\r\\n        uint256 length = poolInfo.length;\\r\\n        for (uint256 pid = 0; pid < length; ++pid) {\\r\\n            PoolInfo storage pool = poolInfo[pid];\\r\\n            IERC20 lpToken = pool.victim.lockableToken(pool.victimPoolId);\\r\\n            // cant take staked asset\\r\\n            require(token != lpToken, \\\"!pool.lpToken\\\");\\r\\n        }\\r\\n        // transfer to\\r\\n        token.safeTransfer(to, amount);\\r\\n    }\\r\\n\\r\\n    /// Claim rewards from pool\\r\\n    function _claim(uint256 pid, bool withdrawing, uint8 flag) internal {\\r\\n        PoolInfo storage pool = poolInfo[pid];\\r\\n        UserInfo storage user = userInfo[pid][msg.sender];\\r\\n        uint256 pending = user.amount.mul(pool.accWethPerShare).div(1e12).sub(user.rewardDebt);\\r\\n        if (pending > 0) {\\r\\n            if (withdrawing && withdrawalPenalty > 0 && block.timestamp < user.coolOffTime) {\\r\\n                uint256 fee = pending.mul(withdrawalPenalty).div(1000);\\r\\n                pending = pending.sub(fee);\\r\\n                pool.wethAccumulator = pool.wethAccumulator.add(fee);\\r\\n            }\\r\\n\\r\\n            (bool success,) = address(IBVETH).delegatecall(abi.encodeWithSignature(\\\"handleClaim(uint256,uint8)\\\", pending, flag));\\r\\n            require(success, \\\"handleClaim(uint256 pending, uint8 flag) delegatecall failed.\\\");\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function _safeWethTransfer(address to, uint256 amount) internal {\\r\\n        uint256 balance = weth.balanceOf(address(this));\\r\\n        if (amount > balance) {\\r\\n            weth.transfer(to, balance);\\r\\n        } else {\\r\\n            weth.transfer(to, amount);\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/IMasterVampire.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.6;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\\\";\\nimport \\\"./VampireAdapter.sol\\\";\\nimport \\\"./ChiGasSaver.sol\\\";\\n\\n/**\\n* @title Interface for MV and adapters that follows the `Inherited Storage` pattern\\n* This allows adapters to add storage variables locally without causing collisions.\\n* Adapters simply need to inherit this interface so that new variables are appended.\\n*/\\nabstract contract IMasterVampire is Ownable, ReentrancyGuard {\\n    using SafeMath for uint256;\\n    using SafeERC20 for IERC20;\\n    using VampireAdapter for Victim;\\n\\n    struct UserInfo {\\n        uint256 amount;\\n        uint256 rewardDebt;\\n        uint256 coolOffTime;\\n        uint256 poolShares;\\n    }\\n\\n    struct PoolInfo {\\n        Victim victim;\\n        uint256 victimPoolId;\\n        uint256 lastRewardBlock;\\n        uint256 accWethPerShare;\\n        uint256 wethAccumulator;\\n        // Base amount of shares from user deposits for victims that return shares for the pool.\\n        uint256 basePoolShares;\\n        uint256 baseDeposits;\\n    }\\n\\n    address public IBVETH;\\n\\n    address public drainController;\\n    address public drainAddress;\\n    address public poolRewardUpdater;\\n    address public devAddress;\\n    uint256 public distributionPeriod = 6519; // Blocks in 24 hour period\\n    uint256 public withdrawalPenalty = 10;\\n    uint256 public wethDrainModifier = 150;\\n\\n    // Info of each pool\\n    PoolInfo[] public poolInfo;\\n    // Info of each user that stakes LP tokens\\n    mapping (uint256 => mapping (address => UserInfo)) public userInfo;\\n}\\n\"\r\n    },\r\n    \"contracts/IIBVEth.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.7.6;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"./interfaces/IWETH.sol\\\";\\n\\n/**\\n* @title Interface for interest bearing ETH strategies\\n*/\\nabstract contract IIBVEth  {\\n\\n    IWETH immutable WETH;\\n\\n    constructor(address weth) {\\n        WETH = IWETH(weth);\\n    }\\n\\n    function handleDrainedWETH(uint256 amount) external virtual;\\n    function handleClaim(uint256 pending, uint8 flag) external virtual;\\n    function migrate() external virtual;\\n    function ibToken() external view virtual returns(IERC20);\\n    function balance(address account) external view virtual returns(uint256);\\n    function ethBalance(address account) external virtual returns(uint256);\\n    function ibETHValue(uint256 amount) external virtual returns (uint256);\\n\\n    function _safeETHTransfer(address payable to, uint256 amount) internal virtual {\\n        uint256 _balance = address(this).balance;\\n        if (amount > _balance) {\\n            to.transfer(_balance);\\n        } else {\\n            to.transfer(amount);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"../../math/SafeMath.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using SafeMath for uint256;\\n    using Address for address;\\n\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        // solhint-disable-next-line max-line-length\\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \\\"SafeERC20: decreased allowance below zero\\\");\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) { // Return data is optional\\n            // solhint-disable-next-line max-line-length\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/math/SafeMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        uint256 c = a + b;\\n        if (c < a) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b > a) return (false, 0);\\n        return (true, a - b);\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) return (true, 0);\\n        uint256 c = a * b;\\n        if (c / a != b) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a / b);\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a % b);\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b <= a, \\\"SafeMath: subtraction overflow\\\");\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0) return 0;\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: division by zero\\\");\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: modulo by zero\\\");\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor () {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/ReentrancyGuard.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor () {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and make it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/VampireAdapter.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.6;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ncontract Victim {}\\n\\nlibrary VampireAdapter {\\n    // Victim info\\n    function rewardToken(Victim victim, uint256 poolId) external view returns (IERC20) {\\n        (bool success, bytes memory result) = address(victim).staticcall(abi.encodeWithSignature(\\\"rewardToken(uint256)\\\", poolId));\\n        require(success, \\\"rewardToken(uint256) staticcall failed.\\\");\\n        return abi.decode(result, (IERC20));\\n    }\\n\\n    function rewardValue(Victim victim, uint256 poolId, uint256 amount) external view returns (uint256) {\\n        (bool success, bytes memory result) = address(victim).staticcall(abi.encodeWithSignature(\\\"rewardValue(uint256,uint256)\\\", poolId, amount));\\n        require(success, \\\"rewardValue(uint256,uint256) staticcall failed.\\\");\\n        return abi.decode(result, (uint256));\\n    }\\n\\n    function poolCount(Victim victim) external view returns (uint256) {\\n        (bool success, bytes memory result) = address(victim).staticcall(abi.encodeWithSignature(\\\"poolCount()\\\"));\\n        require(success, \\\"poolCount() staticcall failed.\\\");\\n        return abi.decode(result, (uint256));\\n    }\\n\\n    function sellableRewardAmount(Victim victim, uint256 poolId) external view returns (uint256) {\\n        (bool success, bytes memory result) = address(victim).staticcall(abi.encodeWithSignature(\\\"sellableRewardAmount(uint256)\\\", poolId));\\n        require(success, \\\"sellableRewardAmount(uint256) staticcall failed.\\\");\\n        return abi.decode(result, (uint256));\\n    }\\n\\n    // Victim actions\\n    function sellRewardForWeth(Victim victim, uint256 poolId, uint256 rewardAmount, address to) external returns(uint256) {\\n        (bool success, bytes memory result) = address(victim).delegatecall(abi.encodeWithSignature(\\\"sellRewardForWeth(address,uint256,uint256,address)\\\", address(victim), poolId, rewardAmount, to));\\n        require(success, \\\"sellRewardForWeth(uint256,address) delegatecall failed.\\\");\\n        return abi.decode(result, (uint256));\\n    }\\n\\n    // Pool info\\n    function lockableToken(Victim victim, uint256 poolId) external view returns (IERC20) {\\n        (bool success, bytes memory result) = address(victim).staticcall(abi.encodeWithSignature(\\\"lockableToken(uint256)\\\", poolId));\\n        require(success, \\\"lockableToken(uint256) staticcall failed.\\\");\\n        return abi.decode(result, (IERC20));\\n    }\\n\\n    function lockedAmount(Victim victim, uint256 poolId) external view returns (uint256) {\\n        // note the impersonation\\n        (bool success, bytes memory result) = address(victim).staticcall(abi.encodeWithSignature(\\\"lockedAmount(address,uint256)\\\", address(this), poolId));\\n        require(success, \\\"lockedAmount(uint256) staticcall failed.\\\");\\n        return abi.decode(result, (uint256));\\n    }\\n\\n    function pendingReward(Victim victim, uint256 poolId, uint256 victimPoolId) external view returns (uint256) {\\n        // note the impersonation\\n        (bool success, bytes memory result) = address(victim).staticcall(abi.encodeWithSignature(\\\"pendingReward(address,uint256,uint256)\\\", address(victim), poolId, victimPoolId));\\n        require(success, \\\"pendingReward(address,uint256,uint256) staticcall failed.\\\");\\n        return abi.decode(result, (uint256));\\n    }\\n\\n    // Pool actions\\n    function deposit(Victim victim, uint256 poolId, uint256 amount) external returns (uint256) {\\n        (bool success, bytes memory result) = address(victim).delegatecall(abi.encodeWithSignature(\\\"deposit(address,uint256,uint256)\\\", address(victim), poolId, amount));\\n        require(success, \\\"deposit(uint256,uint256) delegatecall failed.\\\");\\n        return abi.decode(result, (uint256));\\n    }\\n\\n    function withdraw(Victim victim, uint256 poolId, uint256 amount) external returns (uint256) {\\n        (bool success, bytes memory result) = address(victim).delegatecall(abi.encodeWithSignature(\\\"withdraw(address,uint256,uint256)\\\", address(victim), poolId, amount));\\n        require(success, \\\"withdraw(uint256,uint256) delegatecall failed.\\\");\\n        return abi.decode(result, (uint256));\\n    }\\n\\n    function claimReward(Victim victim, uint256 poolId, uint256 victimPoolId) external {\\n        (bool success,) = address(victim).delegatecall(abi.encodeWithSignature(\\\"claimReward(address,uint256,uint256)\\\", address(victim), poolId, victimPoolId));\\n        require(success, \\\"claimReward(uint256,uint256) delegatecall failed.\\\");\\n    }\\n\\n    function emergencyWithdraw(Victim victim, uint256 poolId) external {\\n        (bool success,) = address(victim).delegatecall(abi.encodeWithSignature(\\\"emergencyWithdraw(address,uint256)\\\", address(victim), poolId));\\n        require(success, \\\"emergencyWithdraw(uint256) delegatecall failed.\\\");\\n    }\\n\\n    // Service methods\\n    function poolAddress(Victim victim, uint256 poolId) external view returns (address) {\\n        (bool success, bytes memory result) = address(victim).staticcall(abi.encodeWithSignature(\\\"poolAddress(uint256)\\\", poolId));\\n        require(success, \\\"poolAddress(uint256) staticcall failed.\\\");\\n        return abi.decode(result, (address));\\n    }\\n\\n    function rewardToWethPool(Victim victim) external view returns (address) {\\n        (bool success, bytes memory result) = address(victim).staticcall(abi.encodeWithSignature(\\\"rewardToWethPool()\\\"));\\n        require(success, \\\"rewardToWethPool() staticcall failed.\\\");\\n        return abi.decode(result, (address));\\n    }\\n}\"\r\n    },\r\n    \"contracts/ChiGasSaver.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.7.6;\\n\\nimport \\\"./interfaces/IChiToken.sol\\\";\\n\\n/**\\n* @title Inheritable contract to enable optional gas savings on functions via a modifier\\n*/\\nabstract contract ChiGasSaver {\\n\\n    modifier saveGas(uint8 flag) {\\n        if ((flag & 0x1) == 0) {\\n            _;\\n        } else {\\n            uint256 gasStart = gasleft();\\n            _;\\n            uint256 gasSpent = 21000 + gasStart - gasleft() + 16 * msg.data.length;\\n\\n            IChiToken chi = IChiToken(0x0000000000004946c0e9F43F4Dee607b0eF1fA1c);\\n            chi.freeFromUpTo(msg.sender, (gasSpent + 14154) / 41947);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IChiToken.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.7.6;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ninterface IChiToken is IERC20 {\\n    function mint(uint256 value) external;\\n    function freeFromUpTo(address from, uint256 value) external returns(uint256 freed);\\n}\"\r\n    },\r\n    \"contracts/interfaces/IWETH.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.5.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ninterface IWETH is IERC20 {\\n    function deposit() external payable;\\n    function withdraw(uint) external;\\n}\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 9999\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"metadata\": {\r\n      \"useLiteralContent\": true\r\n    },\r\n    \"libraries\": {\r\n      \"contracts/VampireAdapter.sol\": {\r\n        \"VampireAdapter\": \"0xc22c12d1a327c1bfe5782bca429a3f7828bc068a\"\r\n      }\r\n    }\r\n  }\r\n}}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_drainAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_drainController\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_IBVETH\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_weth\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"ETHValue\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"EmergencyWithdraw\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"IBVETH\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract Victim\",\"name\":\"_victim\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_victimPoolId\",\"type\":\"uint256\"}],\"name\":\"add\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"flag\",\"type\":\"uint8\"}],\"name\":\"claim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"flag\",\"type\":\"uint8\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"devAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"distributionPeriod\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"}],\"name\":\"drain\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"drainAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"drainController\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"}],\"name\":\"emergencyWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"massUpdatePools\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"}],\"name\":\"pendingVictimReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"pendingWeth\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"pendingWethReal\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"}],\"name\":\"poolAccWeth\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"poolInfo\",\"outputs\":[{\"internalType\":\"contract Victim\",\"name\":\"victim\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"victimPoolId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastRewardBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"accWethPerShare\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"wethAccumulator\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"basePoolShares\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"baseDeposits\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"poolLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"poolRewardUpdater\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"recoverUnsupported\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_devAddress\",\"type\":\"address\"}],\"name\":\"updateDevAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_distributionPeriod\",\"type\":\"uint256\"}],\"name\":\"updateDistributionPeriod\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_drainAddress\",\"type\":\"address\"}],\"name\":\"updateDrainAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_drainController\",\"type\":\"address\"}],\"name\":\"updateDrainController\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_ibveth\",\"type\":\"address\"}],\"name\":\"updateIBEthStrategy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"}],\"name\":\"updatePool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_wethDrainModifier\",\"type\":\"uint256\"}],\"name\":\"updatePoolDrain\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_poolRewardUpdater\",\"type\":\"address\"}],\"name\":\"updateRewardUpdaterAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_victim\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_victimPoolId\",\"type\":\"uint256\"}],\"name\":\"updateVictimInfo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_withdrawalPenalty\",\"type\":\"uint256\"}],\"name\":\"updateWithdrawPenalty\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewardDebt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"coolOffTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"poolShares\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"wethDrainModifier\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"flag\",\"type\":\"uint8\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawalPenalty\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]","ContractName":"MasterVampire","CompilerVersion":"v0.7.6+commit.7338295f","OptimizationUsed":"1","Runs":"9999","ConstructorArguments":"000000000000000000000000e4ce241d367b48c4c70719e0a634f1fd16b77b6e0000000000000000000000001c5d3785ac5a03be0505421fd36e38862635fd54000000000000000000000000c2a1b9d197e1e93dfd628876ee01fddbcd7b947b000000000000000000000000c02aaa39b223fe8d0a0e5c4f27ead9083c756cc2","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}