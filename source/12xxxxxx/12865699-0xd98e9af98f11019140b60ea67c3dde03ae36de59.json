{"status":"1","message":"OK","result":[{"SourceCode":"// File: @openzeppelin/contracts/token/ERC20/IERC20.sol\r\n\r\n// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n/*\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n/**\r\n * @dev Contract module which allows children to implement an emergency stop\r\n * mechanism that can be triggered by an authorized account.\r\n *\r\n * This module is used through inheritance. It will make available the\r\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\r\n * the functions of your contract. Note that they will not be pausable by\r\n * simply including this module, only once the modifiers are put in place.\r\n */\r\nabstract contract Pausable is Context {\r\n    /**\r\n     * @dev Emitted when the pause is triggered by `account`.\r\n     */\r\n    event Paused(address account);\r\n\r\n    /**\r\n     * @dev Emitted when the pause is lifted by `account`.\r\n     */\r\n    event Unpaused(address account);\r\n\r\n    bool private _paused;\r\n\r\n    /**\r\n     * @dev Initializes the contract in unpaused state.\r\n     */\r\n    constructor() {\r\n        _paused = false;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the contract is paused, and false otherwise.\r\n     */\r\n    function paused() public view virtual returns (bool) {\r\n        return _paused;\r\n    }\r\n\r\n    /**\r\n     * @dev Modifier to make a function callable only when the contract is not paused.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The contract must not be paused.\r\n     */\r\n    modifier whenNotPaused() {\r\n        require(!paused(), \"Pausable: paused\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Modifier to make a function callable only when the contract is paused.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The contract must be paused.\r\n     */\r\n    modifier whenPaused() {\r\n        require(paused(), \"Pausable: not paused\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Triggers stopped state.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The contract must not be paused.\r\n     */\r\n    function _pause() internal virtual whenNotPaused {\r\n        _paused = true;\r\n        emit Paused(_msgSender());\r\n    }\r\n\r\n    /**\r\n     * @dev Returns to normal state.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The contract must be paused.\r\n     */\r\n    function _unpause() internal virtual whenPaused {\r\n        _paused = false;\r\n        emit Unpaused(_msgSender());\r\n    }\r\n}\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor() {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\ncontract Escrow is Pausable, Ownable {\r\n    // Contract statuses\r\n    enum Statuses {\r\n        Pending, // When the contract is created\r\n        Completed, // When buyer completes it\r\n        Cancelled, // When seller cancels the contact\r\n        Paused // When seller puts it on HOLD\r\n    }\r\n\r\n    // seller wants to sell quantity item for amount currency to buyer\r\n    struct Contract {\r\n        uint256 id; // Contract id\r\n        address creator; // Creator of the contract\r\n        address buyer; // Member 2 of the contract\r\n        address creatorInputToken; // What creator is giving\r\n        address buyerInputToken; // What creator want in exchange\r\n        uint256 creatorInputAmount; // How much the creator is giving\r\n        uint256 buyerInputAmount; // How much the creator want in exchange\r\n        Statuses status; // Current status of contract\r\n        uint256 createdAt;\r\n        uint256 updatedAt;\r\n    }\r\n\r\n    Contract[] contracts;\r\n    uint256 public feePercentage;\r\n    mapping(address => uint256) public fees;\r\n    mapping(address => uint256[]) address_contract_ids; // Contract IDs associated with each address\r\n\r\n    // Fired when a new contract is created\r\n    event ContractCreated(Contract _contract);\r\n\r\n    // Fired when a new contract is cancelled\r\n    event ContractCancelled(Contract _contract);\r\n\r\n    // Fired when a new contract is paused\r\n    event ContractPaused(Contract _contract);\r\n\r\n    // Fired when a new contract is unpaused\r\n    event ContractUnpaused(Contract _contract);\r\n\r\n    // Fired when a new contract is completed\r\n    event ContractCompleted(\r\n        Contract _contract,\r\n        uint256 _creatorReceivedAmount,\r\n        uint256 _buyerReceivedAmount,\r\n        uint256 _serviceFeeForCreatorOutput,\r\n        uint256 _serviceFeeForBuyerOutput\r\n    );\r\n\r\n    constructor(uint256 _feePercentage) {\r\n        require(_feePercentage < 10000, \"You should charge less than 100% :-)\");\r\n\r\n        feePercentage = _feePercentage; // 100 = 1%, 1 = 0.01%\r\n    }\r\n\r\n    /**\r\n     * Only the creator of contract with this id\r\n     */\r\n    modifier onlyCreator(uint256 _id) {\r\n        require(contracts[_id].creator == msg.sender, \"Error: Only creator\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * Only buyer or if buyer is set to zero address for this id\r\n     */\r\n    modifier onlyBuyer(uint256 _id) {\r\n        require(\r\n            contracts[_id].buyer == msg.sender ||\r\n                (contracts[_id].buyer == address(0) && contracts[_id].creator != msg.sender),\r\n            \"Error: Only buyer\"\r\n        );\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * Only pending contracts\r\n     */\r\n    modifier onlyPending(uint256 _id) {\r\n        require(contracts[_id].status == Statuses.Pending, \"Error: Contract is not active.\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * Only paused contracts\r\n     */\r\n    modifier onlyPausedContract(uint256 _id) {\r\n        require(contracts[_id].status == Statuses.Paused, \"Error: Contract is not paused.\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * Only pending or paused contracts\r\n     */\r\n    modifier onlyPendingOrPaused(uint256 _id) {\r\n        require(\r\n            contracts[_id].status == Statuses.Pending || contracts[_id].status == Statuses.Paused,\r\n            \"Error: Contract is not pending or paused.\"\r\n        );\r\n        _;\r\n    }\r\n\r\n    // Disable the renounceOwnership function\r\n    function renounceOwnership() public view override onlyOwner {\r\n        revert(\"Disabled!\");\r\n    }\r\n\r\n    /**\r\n     * Pause contract\r\n     */\r\n    function pause() public onlyOwner {\r\n        _pause();\r\n    }\r\n\r\n    /**\r\n     * Unpause contract\r\n     */\r\n    function unpause() public onlyOwner {\r\n        _unpause();\r\n    }\r\n\r\n    /**\r\n     * Calculate fee\r\n     */\r\n    function calculateFee(uint256 _amount) public view returns (uint256) {\r\n        if (feePercentage > 0 && (_amount / 10000) * 10000 == _amount) {\r\n            return (_amount / 10000) * feePercentage;\r\n        }\r\n\r\n        return 0;\r\n    }\r\n\r\n    /**\r\n     * Find contract by id\r\n     */\r\n    function find(uint256 _id) public view returns (Contract memory) {\r\n        return contracts[_id];\r\n    }\r\n\r\n    /**\r\n     * Create contract\r\n     */\r\n    function create(\r\n        address _buyer,\r\n        address _creatorInputToken,\r\n        address _buyerInputToken,\r\n        uint256 _createInputAmount,\r\n        uint256 _buyerInputAmount\r\n    ) public payable whenNotPaused returns (uint256) {\r\n        require(_creatorInputToken != _buyerInputToken, \"Error: Cannot create contract with same currencies.\");\r\n        require(msg.sender != _buyer, \"Error: You cannot create contract with yourself.\");\r\n\r\n        // If creator is giving tokens\r\n        if (_creatorInputToken != address(0)) {\r\n            // Transfer _createInputAmount tokens to this contract (So we can later transfer to buyer upon completion)\r\n            IERC20(_creatorInputToken).transferFrom(msg.sender, address(this), _createInputAmount);\r\n        } else {\r\n            // If creator is giving ether\r\n            require(msg.value > 0, \"Error: Please send some ether.\");\r\n\r\n            // _createInputAmount is now the amount of ether creator sent\r\n            _createInputAmount = msg.value;\r\n        }\r\n\r\n        Contract memory _contract = Contract(\r\n            contracts.length,\r\n            msg.sender,\r\n            _buyer,\r\n            _creatorInputToken,\r\n            _buyerInputToken,\r\n            _createInputAmount,\r\n            _buyerInputAmount,\r\n            Statuses.Pending,\r\n            block.timestamp,\r\n            block.timestamp\r\n        );\r\n\r\n        contracts.push(_contract);\r\n\r\n        address_contract_ids[_contract.creator].push(_contract.id);\r\n\r\n        // Do not store zero address buyer (Will be updated with the sender address upon contract completion)\r\n        if (_contract.buyer != address(0)) {\r\n            address_contract_ids[_contract.buyer].push(_contract.id);\r\n        }\r\n\r\n        emit ContractCreated(_contract);\r\n\r\n        return _contract.id;\r\n    }\r\n\r\n    /**\r\n     * Pause contract\r\n     */\r\n    function pauseContract(uint256 _id) public onlyPending(_id) onlyCreator(_id) returns (bool) {\r\n        Contract storage _contract = contracts[_id];\r\n        _contract.status = Statuses.Paused;\r\n        emit ContractPaused(_contract);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Unpause contract\r\n     */\r\n    function unpauseContract(uint256 _id) public onlyPausedContract(_id) onlyCreator(_id) returns (bool) {\r\n        Contract storage _contract = contracts[_id];\r\n        _contract.status = Statuses.Pending;\r\n        emit ContractUnpaused(_contract);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Complete contract\r\n     */\r\n    function complete(uint256 _id) public payable onlyPending(_id) onlyBuyer(_id) returns (bool) {\r\n        Contract storage _contract = contracts[_id];\r\n\r\n        // If creator required ether\r\n        // if buyer is giving ether\r\n        if (_contract.buyerInputToken == address(0)) {\r\n            require(msg.value >= _contract.buyerInputAmount, \"Error: Incorrect amount.\");\r\n\r\n            // Mark order complete\r\n            _contract.status = Statuses.Completed;\r\n            _contract.updatedAt = block.timestamp;\r\n\r\n            // If buyer was a zero address\r\n            if (_contract.buyer == address(0)) {\r\n                address_contract_ids[msg.sender].push(_contract.id);\r\n                _contract.buyer = msg.sender;\r\n            }\r\n\r\n            uint256 _serviceFeeForCreatorOutput = calculateFee(msg.value);\r\n            uint256 _serviceFeeForBuyerOutput = calculateFee(_contract.creatorInputAmount);\r\n\r\n            uint256 _creatorReceivedAmount = msg.value - _serviceFeeForCreatorOutput;\r\n            uint256 _buyerReceivedAmount = _contract.creatorInputAmount - _serviceFeeForBuyerOutput;\r\n\r\n            // Transfer eth to creator\r\n            payable(_contract.creator).transfer(_creatorReceivedAmount);\r\n\r\n            // Transfer tokens to buyer\r\n            IERC20(_contract.creatorInputToken).transfer(_contract.buyer, _buyerReceivedAmount);\r\n\r\n            // Service fees\r\n            fees[_contract.buyerInputToken] += _serviceFeeForCreatorOutput;\r\n            fees[_contract.creatorInputToken] += _serviceFeeForBuyerOutput;\r\n\r\n            emit ContractCompleted(\r\n                _contract,\r\n                _creatorReceivedAmount,\r\n                _buyerReceivedAmount,\r\n                _serviceFeeForCreatorOutput,\r\n                _serviceFeeForBuyerOutput\r\n            );\r\n        } else {\r\n            // if seller required token\r\n            // if buyer is giving token\r\n            require(msg.value == 0, \"Error: Please don't send any ETH.\");\r\n\r\n            // Transfer _contract.buyerInputAmount tokens to this contract (So we can later transfer to seller upon completion)\r\n            IERC20(_contract.buyerInputToken).transferFrom(msg.sender, address(this), _contract.buyerInputAmount);\r\n\r\n            _contract.status = Statuses.Completed;\r\n            _contract.updatedAt = block.timestamp;\r\n\r\n            // If buyer was a zero address\r\n            if (_contract.buyer == address(0)) {\r\n                address_contract_ids[msg.sender].push(_contract.id);\r\n                _contract.buyer = msg.sender;\r\n            }\r\n\r\n            uint256 _serviceFeeForCreatorOutput = calculateFee(_contract.buyerInputAmount);\r\n            uint256 _serviceFeeForBuyerOutput = calculateFee(_contract.creatorInputAmount);\r\n\r\n            uint256 _creatorReceivedAmount = _contract.buyerInputAmount - _serviceFeeForCreatorOutput;\r\n            uint256 _buyerReceivedAmount = _contract.creatorInputAmount - _serviceFeeForBuyerOutput;\r\n\r\n            IERC20(_contract.buyerInputToken).transfer(_contract.creator, _creatorReceivedAmount);\r\n\r\n            // Transfer ether to buyer\r\n            if (_contract.creatorInputToken == address(0)) {\r\n                payable(_contract.buyer).transfer(_buyerReceivedAmount);\r\n            } else {\r\n                // Transfer tokens to buyer\r\n                IERC20(_contract.creatorInputToken).transfer(_contract.buyer, _buyerReceivedAmount);\r\n            }\r\n\r\n            // Service fees\r\n            fees[_contract.buyerInputToken] += _serviceFeeForCreatorOutput;\r\n            fees[_contract.creatorInputToken] += _serviceFeeForBuyerOutput;\r\n\r\n            emit ContractCompleted(\r\n                _contract,\r\n                _creatorReceivedAmount,\r\n                _buyerReceivedAmount,\r\n                _serviceFeeForCreatorOutput,\r\n                _serviceFeeForBuyerOutput\r\n            );\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Cancel contract\r\n     */\r\n    function cancel(uint256 _id) public onlyPendingOrPaused(_id) onlyCreator(_id) returns (bool) {\r\n        Contract storage _contract = contracts[_id];\r\n\r\n        _contract.status = Statuses.Cancelled;\r\n        _contract.updatedAt = block.timestamp;\r\n\r\n        // If seller sent ether\r\n        if (_contract.creatorInputToken == address(0)) {\r\n            payable(_contract.creator).transfer(_contract.creatorInputAmount);\r\n        } else {\r\n            IERC20(_contract.creatorInputToken).transfer(_contract.creator, _contract.creatorInputAmount);\r\n        }\r\n\r\n        emit ContractCancelled(_contract);\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Withdraw fees\r\n     */\r\n    function withdrawFees(address _currency) public onlyOwner {\r\n        uint256 _amount = fees[_currency];\r\n        require(_amount > 0, \"Nothing to withdraw!\");\r\n\r\n        fees[_currency] = 0;\r\n\r\n        // Withdrawing ETH\r\n        if (_currency == address(0)) {\r\n            payable(owner()).transfer(_amount);\r\n        } else {\r\n            IERC20(_currency).transfer(owner(), _amount);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Count total contracts\r\n     */\r\n    function countContracts() public view returns (uint256) {\r\n        return contracts.length;\r\n    }\r\n\r\n    /**\r\n     * Paginate all contracts\r\n     */\r\n    function paginateContracts(uint256 _offset, uint256 _limit)\r\n        public\r\n        view\r\n        returns (\r\n            Contract[] memory _contracts,\r\n            uint256 _nextOffset,\r\n            uint256 _total\r\n        )\r\n    {\r\n        _total = contracts.length;\r\n\r\n        if (_limit == 0) {\r\n            _limit = 1;\r\n        }\r\n\r\n        if (_limit > _total - _offset) {\r\n            _limit = _total - _offset;\r\n        }\r\n\r\n        _contracts = new Contract[](_limit);\r\n\r\n        for (uint256 _i = 0; _i < _limit; _i++) {\r\n            _contracts[_i] = contracts[_offset + _i];\r\n        }\r\n\r\n        return (_contracts, _offset + _limit, _total);\r\n    }\r\n\r\n    /**\r\n     * Count contracts for address\r\n     */\r\n    function countContractsOf(address _address) public view returns (uint256) {\r\n        return address_contract_ids[_address].length;\r\n    }\r\n\r\n    /**\r\n     * Paginate n contracts of address\r\n     */\r\n    function paginateContractsOf(\r\n        address _address,\r\n        uint256 _offset,\r\n        uint256 _limit\r\n    )\r\n        public\r\n        view\r\n        returns (\r\n            Contract[] memory _contracts,\r\n            uint256 _nextOffset,\r\n            uint256 _total\r\n        )\r\n    {\r\n        uint256[] memory _contractIds = address_contract_ids[_address];\r\n\r\n        _total = _contractIds.length;\r\n\r\n        if (_limit == 0) {\r\n            _limit = 1;\r\n        }\r\n\r\n        if (_limit > _total - _offset) {\r\n            _limit = _total - _offset;\r\n        }\r\n\r\n        _contracts = new Contract[](_limit);\r\n\r\n        for (uint256 _i = 0; _i < _limit; _i++) {\r\n            _contracts[_i] = contracts[_contractIds[_offset + _i]];\r\n        }\r\n\r\n        return (_contracts, _offset + _limit, _total);\r\n    }\r\n\r\n    /**\r\n     * Paginate contract ids of address\r\n     */\r\n    function paginateContractIdsOf(\r\n        address _address,\r\n        uint256 _offset,\r\n        uint256 _limit\r\n    )\r\n        public\r\n        view\r\n        returns (\r\n            uint256[] memory,\r\n            uint256 _nextOffset,\r\n            uint256 _total\r\n        )\r\n    {\r\n        uint256[] memory _contractIds = address_contract_ids[_address];\r\n\r\n        _total = _contractIds.length;\r\n\r\n        if (_limit == 0) {\r\n            _limit = 1;\r\n        }\r\n\r\n        if (_limit > _total - _offset) {\r\n            _limit = _total - _offset;\r\n        }\r\n\r\n        uint256[] memory _ids = new uint256[](_limit);\r\n\r\n        for (uint256 _i = 0; _i < _limit; _i++) {\r\n            _ids[_i] = _contractIds[_offset + _i];\r\n        }\r\n\r\n        return (_ids, _offset + _limit, _total);\r\n    }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_feePercentage\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"creatorInputToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"buyerInputToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"creatorInputAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"buyerInputAmount\",\"type\":\"uint256\"},{\"internalType\":\"enum Escrow.Statuses\",\"name\":\"status\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"createdAt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"updatedAt\",\"type\":\"uint256\"}],\"indexed\":false,\"internalType\":\"struct Escrow.Contract\",\"name\":\"_contract\",\"type\":\"tuple\"}],\"name\":\"ContractCancelled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"creatorInputToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"buyerInputToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"creatorInputAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"buyerInputAmount\",\"type\":\"uint256\"},{\"internalType\":\"enum Escrow.Statuses\",\"name\":\"status\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"createdAt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"updatedAt\",\"type\":\"uint256\"}],\"indexed\":false,\"internalType\":\"struct Escrow.Contract\",\"name\":\"_contract\",\"type\":\"tuple\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_creatorReceivedAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_buyerReceivedAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_serviceFeeForCreatorOutput\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_serviceFeeForBuyerOutput\",\"type\":\"uint256\"}],\"name\":\"ContractCompleted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"creatorInputToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"buyerInputToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"creatorInputAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"buyerInputAmount\",\"type\":\"uint256\"},{\"internalType\":\"enum Escrow.Statuses\",\"name\":\"status\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"createdAt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"updatedAt\",\"type\":\"uint256\"}],\"indexed\":false,\"internalType\":\"struct Escrow.Contract\",\"name\":\"_contract\",\"type\":\"tuple\"}],\"name\":\"ContractCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"creatorInputToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"buyerInputToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"creatorInputAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"buyerInputAmount\",\"type\":\"uint256\"},{\"internalType\":\"enum Escrow.Statuses\",\"name\":\"status\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"createdAt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"updatedAt\",\"type\":\"uint256\"}],\"indexed\":false,\"internalType\":\"struct Escrow.Contract\",\"name\":\"_contract\",\"type\":\"tuple\"}],\"name\":\"ContractPaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"creatorInputToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"buyerInputToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"creatorInputAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"buyerInputAmount\",\"type\":\"uint256\"},{\"internalType\":\"enum Escrow.Statuses\",\"name\":\"status\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"createdAt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"updatedAt\",\"type\":\"uint256\"}],\"indexed\":false,\"internalType\":\"struct Escrow.Contract\",\"name\":\"_contract\",\"type\":\"tuple\"}],\"name\":\"ContractUnpaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"calculateFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"cancel\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"complete\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"countContracts\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"countContractsOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_buyer\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_creatorInputToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_buyerInputToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_createInputAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_buyerInputAmount\",\"type\":\"uint256\"}],\"name\":\"create\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feePercentage\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"fees\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"find\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"creatorInputToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"buyerInputToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"creatorInputAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"buyerInputAmount\",\"type\":\"uint256\"},{\"internalType\":\"enum Escrow.Statuses\",\"name\":\"status\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"createdAt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"updatedAt\",\"type\":\"uint256\"}],\"internalType\":\"struct Escrow.Contract\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_offset\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_limit\",\"type\":\"uint256\"}],\"name\":\"paginateContractIdsOf\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"_nextOffset\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_total\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_offset\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_limit\",\"type\":\"uint256\"}],\"name\":\"paginateContracts\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"creatorInputToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"buyerInputToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"creatorInputAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"buyerInputAmount\",\"type\":\"uint256\"},{\"internalType\":\"enum Escrow.Statuses\",\"name\":\"status\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"createdAt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"updatedAt\",\"type\":\"uint256\"}],\"internalType\":\"struct Escrow.Contract[]\",\"name\":\"_contracts\",\"type\":\"tuple[]\"},{\"internalType\":\"uint256\",\"name\":\"_nextOffset\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_total\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_offset\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_limit\",\"type\":\"uint256\"}],\"name\":\"paginateContractsOf\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"creatorInputToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"buyerInputToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"creatorInputAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"buyerInputAmount\",\"type\":\"uint256\"},{\"internalType\":\"enum Escrow.Statuses\",\"name\":\"status\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"createdAt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"updatedAt\",\"type\":\"uint256\"}],\"internalType\":\"struct Escrow.Contract[]\",\"name\":\"_contracts\",\"type\":\"tuple[]\"},{\"internalType\":\"uint256\",\"name\":\"_nextOffset\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_total\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"pauseContract\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"unpauseContract\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_currency\",\"type\":\"address\"}],\"name\":\"withdrawFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"Escrow","CompilerVersion":"v0.8.6+commit.11564f7e","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000000000000000000000000000000000000000000a","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://7d01250861f2c32028ebd6fbecd77fa089e8565dc1dc10faee6beedc5651dc04"}]}