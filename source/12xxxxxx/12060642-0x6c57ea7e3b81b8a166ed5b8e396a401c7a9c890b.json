{"status":"1","message":"OK","result":[{"SourceCode":"// File: contracts/utils/Ownable.sol\r\n\r\npragma solidity >=0.4.21 <0.6.0;\r\n\r\ncontract Ownable {\r\n    address private _contract_owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor () internal {\r\n        address msgSender = msg.sender;\r\n        _contract_owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view returns (address) {\r\n        return _contract_owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(_contract_owner == msg.sender, \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     */\r\n    function _transferOwnership(address newOwner) internal {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_contract_owner, newOwner);\r\n        _contract_owner = newOwner;\r\n    }\r\n}\r\n\r\n// File: contracts/utils/SafeMath.sol\r\n\r\npragma solidity >=0.4.21 <0.6.0;\r\n\r\nlibrary SafeMath {\r\n    function safeAdd(uint a, uint b) public pure returns (uint c) {\r\n        c = a + b;\r\n        require(c >= a, \"add\");\r\n    }\r\n    function safeSubR(uint a, uint b, string memory s) public pure returns (uint c) {\r\n        require(b <= a, s);\r\n        c = a - b;\r\n    }\r\n    function safeSub(uint a, uint b) public pure returns (uint c) {\r\n        require(b <= a, \"sub\");\r\n        c = a - b;\r\n    }\r\n    function safeMul(uint a, uint b) public pure returns (uint c) {\r\n        c = a * b;\r\n        require(a == 0 || c / a == b, \"mul\");\r\n    }\r\n    function safeDiv(uint a, uint b) public pure returns (uint c) {\r\n        require(b > 0, \"div\");\r\n        c = a / b;\r\n    }\r\n    function safeDivR(uint a, uint b, string memory s) public pure returns (uint c) {\r\n        require(b > 0, s);\r\n        c = a / b;\r\n    }\r\n}\r\n\r\n// File: contracts/utils/Address.sol\r\n\r\npragma solidity >=0.4.21 <0.6.0;\r\n\r\nlibrary Address {\r\n    function isContract(address account) internal view returns (bool) {\r\n        bytes32 codehash;\r\n        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly { codehash := extcodehash(account) }\r\n        return (codehash != 0x0 && codehash != accountHash);\r\n    }\r\n    function toPayable(address account) internal pure returns (address payable) {\r\n        return address(uint160(account));\r\n    }\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        // solhint-disable-next-line avoid-call-value\r\n        (bool success, ) = recipient.call.value(amount)(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n}\r\n\r\n// File: contracts/erc20/IERC20.sol\r\n\r\npragma solidity >=0.4.21 <0.6.0;\r\n\r\ninterface IERC20 {\r\n    function totalSupply() external view returns (uint256);\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n// File: contracts/erc20/SafeERC20.sol\r\n\r\npragma solidity >=0.4.21 <0.6.0;\r\n\r\n\r\n\r\n\r\nlibrary SafeERC20 {\r\n    using SafeMath for uint256;\r\n    using Address for address;\r\n\r\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\r\n    }\r\n\r\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\r\n    }\r\n\r\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\r\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\r\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\r\n        );\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\r\n    }\r\n\r\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).safeAdd(value);\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).safeSub(value);\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n    function callOptionalReturn(IERC20 token, bytes memory data) private {\r\n        require(address(token).isContract(), \"SafeERC20: call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = address(token).call(data);\r\n        require(success, \"SafeERC20: low-level call failed\");\r\n\r\n        if (returndata.length > 0) { // Return data is optional\r\n            // solhint-disable-next-line max-line-length\r\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\r\n        }\r\n    }\r\n}\r\n\r\n// File: contracts/core/IPool.sol\r\n\r\npragma solidity >=0.4.21 <0.6.0;\r\n\r\ncontract ICurvePool{\r\n  function deposit(uint256 _amount) public;\r\n  function withdraw(uint256 _amount) public;\r\n\r\n  function get_virtual_price() public view returns(uint256);\r\n\r\n  function get_lp_token_balance() public view returns(uint256);\r\n\r\n  function get_lp_token_addr() public view returns(address);\r\n\r\n  function earn_crv() public;\r\n\r\n  string public name;\r\n}\r\n\r\ncontract ICurvePoolForETH{\r\n  function deposit() public payable;\r\n  function withdraw(uint256 _amount) public;\r\n\r\n  function get_virtual_price() public view returns(uint256);\r\n\r\n  function get_lp_token_balance() public view returns(uint256);\r\n\r\n  function get_lp_token_addr() public view returns(address);\r\n\r\n  function earn_crv() public;\r\n\r\n  string public name;\r\n}\r\n\r\n// File: contracts/utils/AddressArray.sol\r\n\r\npragma solidity >=0.4.21 <0.6.0;\r\n\r\nlibrary AddressArray{\r\n  function exists(address[] memory self, address addr) public pure returns(bool){\r\n    for (uint i = 0; i< self.length;i++){\r\n      if (self[i]==addr){\r\n        return true;\r\n      }\r\n    }\r\n    return false;\r\n  }\r\n\r\n  function index_of(address[] memory self, address addr) public pure returns(uint){\r\n    for (uint i = 0; i< self.length;i++){\r\n      if (self[i]==addr){\r\n        return i;\r\n      }\r\n    }\r\n    require(false, \"AddressArray:index_of, not exist\");\r\n  }\r\n\r\n  function remove(address[] storage self, address addr) public returns(bool){\r\n    uint index = index_of(self, addr);\r\n    self[index] = self[self.length - 1];\r\n\r\n    delete self[self.length-1];\r\n    self.length--;\r\n    return true;\r\n  }\r\n}\r\n\r\n// File: contracts/core/CFController.sol\r\n\r\npragma solidity >=0.4.21 <0.6.0;\r\n\r\n\r\n\r\n\r\n\r\n\r\ncontract CRVHandlerInterface{\r\n  function handleCRV(address target_token, uint256 amount, uint min_amount) public;\r\n  function handleExtraToken(address from, address target_token, uint256 amount, uint min_amount) public;\r\n}\r\n\r\ncontract CFController is Ownable{\r\n  using SafeERC20 for IERC20;\r\n  using AddressArray for address[];\r\n  using SafeMath for uint256;\r\n\r\n  address[] public all_pools;\r\n\r\n  address public current_pool;\r\n\r\n  uint256 public last_earn_block;\r\n  uint256 public earn_gap;\r\n  address public crv_token;\r\n  address public target_token;\r\n\r\n  address public fee_pool;\r\n  uint256 public harvest_fee_ratio;\r\n  uint256 public ratio_base;\r\n\r\n  address public extra_yield_token;\r\n  CRVHandlerInterface public crv_handler;\r\n\r\n  constructor(address _crv, address _target, uint256 _earn_gap) public{\r\n    last_earn_block = 0;\r\n    if(_earn_gap == 0){\r\n      earn_gap = 5760;\r\n    }else{\r\n      earn_gap = _earn_gap;\r\n    }\r\n\r\n    last_earn_block = block.number;\r\n    if(_crv == address(0x0)){\r\n      crv_token = address(0xD533a949740bb3306d119CC777fa900bA034cd52);\r\n    }else{\r\n      crv_token = _crv;\r\n    }\r\n    if(_target == address(0x0)){\r\n      target_token = address(0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48); //USDC\r\n    }else{\r\n      target_token = _target;\r\n    }\r\n\r\n    ratio_base = 10000;\r\n  }\r\n\r\n  function get_current_pool() public view returns(ICurvePool) {\r\n    return ICurvePool(current_pool);\r\n  }\r\n\r\n  function add_pool(address addr) public onlyOwner{\r\n    require(!all_pools.exists(addr), \"already exist\");\r\n    if(current_pool == address(0x0)){\r\n      current_pool = addr;\r\n    }\r\n    all_pools.push(addr);\r\n  }\r\n\r\n  function remove_pool(address addr) public onlyOwner{\r\n    require(all_pools.exists(addr), \"not exist\");\r\n    require(current_pool != addr, \"active, cannot remove\");\r\n    all_pools.remove(addr);\r\n  }\r\n\r\n  event ChangeCurrentPool(address old, address _new);\r\n  function change_current_pool(address addr) public onlyOwner{\r\n    require(all_pools.exists(addr), \"not exist\");\r\n    require(current_pool != addr, \"already active\");\r\n\r\n    emit ChangeCurrentPool(current_pool, addr);\r\n    //pull out all target token\r\n    uint256 cur = ICurvePool(current_pool).get_lp_token_balance();\r\n    ICurvePool(current_pool).withdraw(cur);\r\n    uint256 b = IERC20(target_token).balanceOf(address(this));\r\n    current_pool = addr;\r\n\r\n    //deposit to new pool\r\n    IERC20(target_token).safeApprove(current_pool, b);\r\n    ICurvePool(current_pool).deposit(b);\r\n  }\r\n\r\n\r\n  event EarnCRV(address addr, uint256 amount);\r\n  event EarnExtra(address addr, address token, uint256 amount);\r\n  //at least 24 hours to call this\r\n  function earnCRV(uint crv_min_amount, uint extra_min_amount) public onlyOwner{\r\n    require(block.number.safeSub(last_earn_block) >= earn_gap, \"not long enough\");\r\n    last_earn_block = block.number;\r\n\r\n    ICurvePool(current_pool).earn_crv();\r\n\r\n    uint256 amount = IERC20(crv_token).balanceOf(address(this));\r\n    emit EarnCRV(address(this), amount);\r\n\r\n    if(amount > 0){\r\n      require(crv_handler != CRVHandlerInterface(0x0), \"invalid crv handler\");\r\n      IERC20(crv_token).approve(address(crv_handler), amount);\r\n      crv_handler.handleCRV(target_token, amount, crv_min_amount);\r\n    }\r\n\r\n    if(extra_yield_token != address(0x0)){\r\n      amount = IERC20(extra_yield_token).balanceOf(address(this));\r\n      emit EarnExtra(address(this), extra_yield_token, amount);\r\n      if(amount > 0){\r\n        IERC20(extra_yield_token).approve(address(crv_handler), amount);\r\n        crv_handler.handleExtraToken(extra_yield_token, target_token, amount, extra_min_amount);\r\n      }\r\n    }\r\n  }\r\n\r\n  event CFFRefund(uint256 amount, uint256 fee);\r\n  function refundTarget(uint256 _amount) public{\r\n    IERC20(target_token).safeTransferFrom(msg.sender, address(this), _amount);\r\n\r\n    if(harvest_fee_ratio != 0 && fee_pool != address(0x0)){\r\n      uint256 f = _amount.safeMul(harvest_fee_ratio).safeDiv(ratio_base);\r\n      emit CFFRefund(_amount, f);\r\n      _amount = _amount.safeSub(f);\r\n      if(f != 0){\r\n        IERC20(target_token).safeTransfer(fee_pool, f);\r\n      }\r\n    }else{\r\n      emit CFFRefund(_amount, 0);\r\n    }\r\n\r\n    IERC20(target_token).safeApprove(current_pool, _amount);\r\n    ICurvePool(current_pool).deposit(_amount);\r\n  }\r\n\r\n  function pauseAndTransferTo(address _target) public onlyOwner{\r\n    //pull out all target token\r\n    uint256 cur = ICurvePool(current_pool).get_lp_token_balance();\r\n    ICurvePool(current_pool).withdraw(cur);\r\n    uint256 b = IERC20(target_token).balanceOf(address(this));\r\n\r\n    IERC20(target_token).safeTransfer(_target, b);\r\n\r\n    current_pool = address(0x0);\r\n  }\r\n\r\n  event ChangeExtraToken(address old, address _new);\r\n  function changeExtraToken(address _new) public onlyOwner{\r\n    address old = extra_yield_token;\r\n    extra_yield_token = _new;\r\n    emit ChangeExtraToken(old, extra_yield_token);\r\n  }\r\n\r\n  event ChangeCRVHandler(address old, address _new);\r\n  function changeCRVHandler(address _new) public onlyOwner{\r\n    address old = address(crv_handler);\r\n    crv_handler = CRVHandlerInterface(_new);\r\n    emit ChangeCRVHandler(old, address(crv_handler));\r\n  }\r\n\r\n  event ChangeFeePool(address old, address _new);\r\n  function changeFeePool(address _fp) public onlyOwner{\r\n    address old = fee_pool;\r\n    fee_pool = _fp;\r\n    emit ChangeFeePool(old, fee_pool);\r\n  }\r\n\r\n  event ChangeHarvestFee(uint256 old, uint256 _new);\r\n  function changeHarvestFee(uint256 _fee) public onlyOwner{\r\n    require(_fee < ratio_base, \"invalid fee\");\r\n    uint256 old = harvest_fee_ratio;\r\n    harvest_fee_ratio = _fee;\r\n    emit ChangeHarvestFee(old, harvest_fee_ratio);\r\n  }\r\n}\r\n\r\ncontract CFControllerFactory{\r\n  event NewCFController(address addr);\r\n  function createCFController(address _crv, address _target, uint256 _earn_gap) public returns(address){\r\n    CFController cf = new CFController(_crv, _target, _earn_gap);\r\n    emit NewCFController(address(cf));\r\n    cf.transferOwnership(msg.sender);\r\n    return address(cf);\r\n  }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"current_pool\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ratio_base\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"extra_yield_token\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"get_current_pool\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"refundTarget\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_fee\",\"type\":\"uint256\"}],\"name\":\"changeHarvestFee\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"remove_pool\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"last_earn_block\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"crv_token\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_target\",\"type\":\"address\"}],\"name\":\"pauseAndTransferTo\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"fee_pool\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"harvest_fee_ratio\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_new\",\"type\":\"address\"}],\"name\":\"changeExtraToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"all_pools\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_new\",\"type\":\"address\"}],\"name\":\"changeCRVHandler\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"add_pool\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"crv_min_amount\",\"type\":\"uint256\"},{\"name\":\"extra_min_amount\",\"type\":\"uint256\"}],\"name\":\"earnCRV\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_fp\",\"type\":\"address\"}],\"name\":\"changeFeePool\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"crv_handler\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"change_current_pool\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"target_token\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"earn_gap\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_crv\",\"type\":\"address\"},{\"name\":\"_target\",\"type\":\"address\"},{\"name\":\"_earn_gap\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"old\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_new\",\"type\":\"address\"}],\"name\":\"ChangeCurrentPool\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"addr\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"EarnCRV\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"addr\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"EarnExtra\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"fee\",\"type\":\"uint256\"}],\"name\":\"CFFRefund\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"old\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_new\",\"type\":\"address\"}],\"name\":\"ChangeExtraToken\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"old\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_new\",\"type\":\"address\"}],\"name\":\"ChangeCRVHandler\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"old\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_new\",\"type\":\"address\"}],\"name\":\"ChangeFeePool\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"old\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_new\",\"type\":\"uint256\"}],\"name\":\"ChangeHarvestFee\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"CFController","CompilerVersion":"v0.5.10+commit.5a6ea5b1","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000d533a949740bb3306d119cc777fa900ba034cd52000000000000000000000000a0b86991c6218b36c1d19d4a2e9eb0ce3606eb480000000000000000000000000000000000000000000000000000000000001680","EVMVersion":"Default","Library":"SafeMath:9aaeaa2250be1fa6f0a9321eacda26ab58d7532f;AddressArray:7e083c71912fd59bb99b7ca52d5d07f7febbafcc","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"bzzr://2a6b2472872b0cc8773064fc7008b641418ff7b26a25438241c1c8088f7bed34"}]}