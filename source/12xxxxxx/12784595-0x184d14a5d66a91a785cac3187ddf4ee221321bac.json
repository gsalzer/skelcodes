{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity >=0.7.0 <=0.8.4;\r\n// PoC Proof of Contribution\r\n// SPDX-License-Identifier: Unlicensed\r\ncontract Neuy {\r\n    string public name = \"NEUY\";\r\n    string public symbol = \"NEUY\";\r\n    string public standard = \"NEUY Token v1.0\";\r\n    uint256 public totalSupply = 72000000 * 10 ** 18;\r\n    uint public decimals = 18;\r\n    address payable public owner;\r\n    address payable public buOwner;\r\n    address payable public airdropOwner;\r\n    uint256 public minContributorBalance = 200 * 10 ** 18;\r\n    string private rewardKeyId;\r\n    bool public pullEnabled = false;\r\n    \r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner || msg.sender == buOwner);\r\n        _;\r\n    }\r\n    \r\n    modifier allOwners() {\r\n        require(msg.sender == owner || msg.sender == buOwner || msg.sender == airdropOwner);\r\n        _;\r\n    }\r\n    \r\n    event Transfer(\r\n        address indexed _from,\r\n        address indexed _to,\r\n        uint256 _value\r\n    );\r\n\r\n    event Approval(\r\n        address indexed _owner,\r\n        address indexed _spender,\r\n        uint256 _value\r\n    );\r\n    \r\n    // event for EVM logging\r\n    event OwnerSet(\r\n        address indexed oldOwner, \r\n        address indexed newOwner\r\n    );\r\n\r\n    mapping(address => uint256) public balanceOf;\r\n    mapping(address => mapping(address => uint256)) public allowance;\r\n    mapping(address => string) private claimedRewards;\r\n    mapping(address => bool) private contributors;\r\n    mapping(address => string) private contributorsAddresses;\r\n    \r\n    constructor(address _buOwner) {\r\n        balanceOf[msg.sender] = totalSupply;\r\n        buOwner = payable(_buOwner);\r\n        owner = payable(msg.sender);\r\n    }\r\n\r\n    function transfer(address _to, uint256 _value) public returns (bool success) {\r\n        \r\n        // Prevent transfer to 0x0 address. Use burn() instead\r\n        require(_to != address(0x0));\r\n        \r\n        // Check for sufficent funds\r\n        require(balanceOf[msg.sender] >= _value, 'insufficent tokens');\r\n        \r\n        // Check for overflows\r\n        require(balanceOf[_to] + _value >= balanceOf[_to]);\r\n        \r\n        // Transfer\r\n        balanceOf[msg.sender] -= _value;\r\n        balanceOf[_to] += _value;\r\n\r\n        emit Transfer(msg.sender, _to, _value);\r\n\r\n        return true;\r\n    }\r\n\r\n    function approve(address _spender, uint256 _value) public returns (bool) {\r\n        allowance[msg.sender][_spender] = _value;\r\n\r\n        emit Approval(msg.sender, _spender, _value);\r\n\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {\r\n        \r\n        // Sufficent funds\r\n        require(_value <= balanceOf[_from]);\r\n        \r\n        // Sufficent allowance\r\n        require(_value <= allowance[_from][msg.sender]);\r\n\r\n        // Transfer\r\n        balanceOf[_from] -= _value;\r\n        balanceOf[_to] += _value;\r\n\r\n        allowance[_from][msg.sender] -= _value;\r\n\r\n        emit Transfer(_from, _to, _value);\r\n\r\n        return true;\r\n    }\r\n    \r\n    // Change owner\r\n    function changeOwner(address newOwner) public onlyOwner {\r\n        emit OwnerSet(owner, newOwner);\r\n        owner = payable(newOwner);\r\n    }\r\n    \r\n    // Change backup owner\r\n    function changeBUOwner(address _buOwner) public onlyOwner {\r\n        require(_buOwner != address(0x0));\r\n        buOwner = payable(_buOwner);\r\n    }\r\n    \r\n    // Change airdrop owner\r\n    function changeAirDropOwner(address _airdropOwner) public onlyOwner {\r\n        require(_airdropOwner != address(0x0));\r\n        airdropOwner = payable(_airdropOwner);\r\n    }\r\n    \r\n    // Owner destories contract\r\n    function finalize() public onlyOwner payable {\r\n        selfdestruct(owner);\r\n    }\r\n    \r\n    // Add contributors\r\n    function addContributor(address _add, string memory _addS) public onlyOwner {\r\n        contributors[_add] = true;\r\n        contributorsAddresses[_add] = _addS;\r\n    }\r\n    \r\n    // Remove contributors\r\n    function removeContributor(address _add) public onlyOwner {\r\n        contributors[_add] = false;\r\n    }\r\n    \r\n    // Change minimum balance required by contributors\r\n    function changeMinBalance(uint256 _newMin) public onlyOwner {\r\n        minContributorBalance = _newMin * 10 ** 18;\r\n    }\r\n    \r\n    // Airdropping to contributors\r\n    function contributionAirDrop(address[] memory _to_list, uint[] memory _values) public allOwners payable {\r\n        require(_to_list.length < 100);\r\n        require(_to_list.length == _values.length); \r\n        \r\n        //Validate reward limit of 2000 * 100\r\n        uint totalReward = 0;\r\n        for (uint i = 0; i < _to_list.length; i++) {\r\n            totalReward += _values[i];\r\n        }\r\n        require(totalReward < 200001);\r\n        \r\n        for (uint i = 0; i < _to_list.length; i++) {\r\n            if (balanceOf[_to_list[i]] >= minContributorBalance) {\r\n                mintToken(_to_list[i], _values[i]);\r\n            }\r\n        }\r\n    }\r\n    \r\n    // Private method shared by `contributionAirDrop()`.\r\n    function mintToken(address _to, uint _value) private {\r\n        require(_value < 66800); // No single contributor should be able to get more than\r\n        balanceOf[_to] += _value * 10 ** 16;\r\n        totalSupply += _value * 10 ** 16;\r\n        require(totalSupply < 144000000 * 10 ** 18);\r\n        require(balanceOf[_to] >= _value && totalSupply >= _value); // overflow checks\r\n        emit Transfer(address(0), _to, _value);\r\n    }\r\n    \r\n    // Set reward key and enable pull\r\n    function setRewardKey(string memory _rewardId) public onlyOwner {\r\n        pullEnabled = true;\r\n        rewardKeyId = _rewardId;\r\n    }\r\n    \r\n    // Change status of pull\r\n    function setPullStatus(bool _pullStatus) public onlyOwner {\r\n        pullEnabled = _pullStatus;\r\n    }\r\n\r\n    // Pull contribution reward\r\n    function claimContributionReward(bytes32 _rewardHash, uint _value) public payable {\r\n        \r\n        // Pull reward system must be pullEnabled\r\n        require(pullEnabled == true);\r\n        \r\n        // Verify not already claimed\r\n        string memory previousRewardId = claimedRewards[msg.sender];\r\n        string memory presentRewardId = rewardKeyId;\r\n        require(sha256(abi.encodePacked(previousRewardId)) != sha256(abi.encodePacked(rewardKeyId)));\r\n        \r\n        // Contributor hash validation\r\n        require(_rewardHash == keccak256(abi.encodePacked(rewardKeyId,uintToString(_value),contributorsAddresses[address(msg.sender)])));\r\n        \r\n        // Verify authorized contributor\r\n        require(contributors[msg.sender] == true);    \r\n\r\n        // Min contributor balance\r\n        require(balanceOf[msg.sender] >= minContributorBalance); \r\n        mintToken(msg.sender, _value);\r\n        claimedRewards[msg.sender] = presentRewardId;\r\n    }\r\n    \r\n    // Helper method to convert uint To string\r\n    function uintToString(uint _v) internal pure returns (string memory) {\r\n        uint maxlength = 100;\r\n        bytes memory reversed = new bytes(maxlength);\r\n        uint i = 0;\r\n        while (_v != 0) {\r\n            uint remainder = _v % 10;\r\n            _v = _v / 10;\r\n            reversed[i++] = bytes1(uint8(48 + remainder));\r\n        }\r\n        bytes memory s = new bytes(i); // i + 1 is inefficient\r\n        for (uint j = 0; j < i; j++) {\r\n            s[j] = reversed[i - j - 1]; // to avoid the off-by-one error\r\n        }\r\n        string memory str = string(s);  // memory isn't implicitly convertible to storage\r\n        return str;\r\n    }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_buOwner\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnerSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_add\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"_addS\",\"type\":\"string\"}],\"name\":\"addContributor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"airdropOwner\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buOwner\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_airdropOwner\",\"type\":\"address\"}],\"name\":\"changeAirDropOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_buOwner\",\"type\":\"address\"}],\"name\":\"changeBUOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newMin\",\"type\":\"uint256\"}],\"name\":\"changeMinBalance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"changeOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_rewardHash\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"claimContributionReward\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_to_list\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_values\",\"type\":\"uint256[]\"}],\"name\":\"contributionAirDrop\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"finalize\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minContributorBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pullEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_add\",\"type\":\"address\"}],\"name\":\"removeContributor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_pullStatus\",\"type\":\"bool\"}],\"name\":\"setPullStatus\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_rewardId\",\"type\":\"string\"}],\"name\":\"setRewardKey\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"standard\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"Neuy","CompilerVersion":"v0.8.4+commit.c7e474f2","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000f8849b6d60c775d053932dd31918102e673df99a","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"ipfs://ab51fc6a031e8f866959b91d08e2dc0ca5af95bbfc660396a879f40d7267f007"}]}