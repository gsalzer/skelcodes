{"status":"1","message":"OK","result":[{"SourceCode":"// Sources flattened with hardhat v2.4.0 https://hardhat.org\r\n\r\n// File @sygnum/solidity-base-contracts/contracts/helpers/Initializable.sol@v1.0.2\r\n\r\npragma solidity 0.5.12;\r\n\r\n/**\r\n * @title Initializable\r\n *\r\n * @dev Helper contract to support initializer functions. To use it, replace\r\n * the constructor with a function that has the `initializer` modifier.\r\n * WARNING: Unlike constructors, initializer functions must be manually\r\n * invoked. This applies both to deploying an Initializable contract, as well\r\n * as extending an Initializable contract via inheritance.\r\n * WARNING: When used with inheritance, manual care must be taken to not invoke\r\n * a parent initializer twice, or ensure that all initializers are idempotent,\r\n * because this is not dealt with automatically as with constructors.\r\n */\r\ncontract Initializable {\r\n    /**\r\n     * @dev Indicates that the contract has been initialized.\r\n     */\r\n    bool private initialized;\r\n\r\n    /**\r\n     * @dev Indicates that the contract is in the process of being initialized.\r\n     */\r\n    bool private initializing;\r\n\r\n    /**\r\n     * @dev Modifier to use in the initializer function of a contract.\r\n     */\r\n    modifier initializer() {\r\n        require(\r\n            initializing || isConstructor() || !initialized,\r\n            \"Initializable: Contract instance has already been initialized\"\r\n        );\r\n\r\n        bool isTopLevelCall = !initializing;\r\n        if (isTopLevelCall) {\r\n            initializing = true;\r\n            initialized = true;\r\n        }\r\n\r\n        _;\r\n\r\n        if (isTopLevelCall) {\r\n            initializing = false;\r\n        }\r\n    }\r\n\r\n    /// @dev Returns true if and only if the function is running in the constructor\r\n    function isConstructor() private view returns (bool) {\r\n        // extcodesize checks the size of the code stored in an address, and\r\n        // address returns the current address. Since the code is still not\r\n        // deployed when running a constructor, any checks on its code size will\r\n        // yield zero, making it an effective way to detect if a contract is\r\n        // under construction or not.\r\n        uint256 cs;\r\n        // solhint-disable-next-line\r\n        assembly {\r\n            cs := extcodesize(address)\r\n        }\r\n        return cs == 0;\r\n    }\r\n\r\n    function isInitialized() public view returns (bool) {\r\n        return initialized;\r\n    }\r\n\r\n    // Reserved storage space to allow for layout changes in the future.\r\n    uint256[50] private ______gap;\r\n}\r\n\r\n\r\n// File @sygnum/solidity-base-contracts/contracts/role/interface/IRaiseOperators.sol@v1.0.2\r\n\r\n/**\r\n * @title IRaiseOperators\r\n * @notice Interface for RaiseOperators contract\r\n */\r\n\r\npragma solidity 0.5.12;\r\n\r\ncontract IRaiseOperators {\r\n    function isInvestor(address _account) external view returns (bool);\r\n\r\n    function isIssuer(address _account) external view returns (bool);\r\n\r\n    function addInvestor(address _account) external;\r\n\r\n    function removeInvestor(address _account) external;\r\n\r\n    function addIssuer(address _account) external;\r\n\r\n    function removeIssuer(address _account) external;\r\n}\r\n\r\n\r\n// File @sygnum/solidity-base-contracts/contracts/role/interface/IBaseOperators.sol@v1.0.2\r\n\r\n/**\r\n * @title IBaseOperators\r\n * @notice Interface for BaseOperators contract\r\n */\r\n\r\npragma solidity 0.5.12;\r\n\r\ninterface IBaseOperators {\r\n    function isOperator(address _account) external view returns (bool);\r\n\r\n    function isAdmin(address _account) external view returns (bool);\r\n\r\n    function isSystem(address _account) external view returns (bool);\r\n\r\n    function isRelay(address _account) external view returns (bool);\r\n\r\n    function isMultisig(address _contract) external view returns (bool);\r\n\r\n    function confirmFor(address _address) external;\r\n\r\n    function addOperator(address _account) external;\r\n\r\n    function removeOperator(address _account) external;\r\n\r\n    function addAdmin(address _account) external;\r\n\r\n    function removeAdmin(address _account) external;\r\n\r\n    function addSystem(address _account) external;\r\n\r\n    function removeSystem(address _account) external;\r\n\r\n    function addRelay(address _account) external;\r\n\r\n    function removeRelay(address _account) external;\r\n\r\n    function addOperatorAndAdmin(address _account) external;\r\n\r\n    function removeOperatorAndAdmin(address _account) external;\r\n}\r\n\r\n\r\n// File @sygnum/solidity-base-contracts/contracts/role/base/Operatorable.sol@v1.0.2\r\n\r\n/**\r\n * @title Operatorable\r\n * @author Team 3301 <team3301@sygnum.com>\r\n * @dev Operatorable contract stores the BaseOperators contract address, and modifiers for\r\n *       contracts.\r\n */\r\n\r\npragma solidity 0.5.12;\r\n\r\n\r\ncontract Operatorable is Initializable {\r\n    IBaseOperators internal operatorsInst;\r\n    address private operatorsPending;\r\n\r\n    event OperatorsContractChanged(address indexed caller, address indexed operatorsAddress);\r\n    event OperatorsContractPending(address indexed caller, address indexed operatorsAddress);\r\n\r\n    /**\r\n     * @dev Reverts if sender does not have operator role associated.\r\n     */\r\n    modifier onlyOperator() {\r\n        require(isOperator(msg.sender), \"Operatorable: caller does not have the operator role\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Reverts if sender does not have admin role associated.\r\n     */\r\n    modifier onlyAdmin() {\r\n        require(isAdmin(msg.sender), \"Operatorable: caller does not have the admin role\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Reverts if sender does not have system role associated.\r\n     */\r\n    modifier onlySystem() {\r\n        require(isSystem(msg.sender), \"Operatorable: caller does not have the system role\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Reverts if sender does not have multisig privileges.\r\n     */\r\n    modifier onlyMultisig() {\r\n        require(isMultisig(msg.sender), \"Operatorable: caller does not have multisig role\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Reverts if sender does not have admin or system role associated.\r\n     */\r\n    modifier onlyAdminOrSystem() {\r\n        require(isAdminOrSystem(msg.sender), \"Operatorable: caller does not have the admin role nor system\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Reverts if sender does not have operator or system role associated.\r\n     */\r\n    modifier onlyOperatorOrSystem() {\r\n        require(isOperatorOrSystem(msg.sender), \"Operatorable: caller does not have the operator role nor system\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Reverts if sender does not have the relay role associated.\r\n     */\r\n    modifier onlyRelay() {\r\n        require(isRelay(msg.sender), \"Operatorable: caller does not have relay role associated\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Reverts if sender does not have relay or operator role associated.\r\n     */\r\n    modifier onlyOperatorOrRelay() {\r\n        require(\r\n            isOperator(msg.sender) || isRelay(msg.sender),\r\n            \"Operatorable: caller does not have the operator role nor relay\"\r\n        );\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Reverts if sender does not have relay or admin role associated.\r\n     */\r\n    modifier onlyAdminOrRelay() {\r\n        require(\r\n            isAdmin(msg.sender) || isRelay(msg.sender),\r\n            \"Operatorable: caller does not have the admin role nor relay\"\r\n        );\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Reverts if sender does not have the operator, or system, or relay role associated.\r\n     */\r\n    modifier onlyOperatorOrSystemOrRelay() {\r\n        require(\r\n            isOperator(msg.sender) || isSystem(msg.sender) || isRelay(msg.sender),\r\n            \"Operatorable: caller does not have the operator role nor system nor relay\"\r\n        );\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Initialization instead of constructor, called once. The setOperatorsContract function can be called only by Admin role with\r\n     *       confirmation through the operators contract.\r\n     * @param _baseOperators BaseOperators contract address.\r\n     */\r\n    function initialize(address _baseOperators) public initializer {\r\n        _setOperatorsContract(_baseOperators);\r\n    }\r\n\r\n    /**\r\n     * @dev Set the new the address of Operators contract, should be confirmed from operators contract by calling confirmFor(addr)\r\n     *       where addr is the address of current contract instance. This is done to prevent the case when the new contract address is\r\n     *       broken and control of the contract can be lost in such case\r\n     * @param _baseOperators BaseOperators contract address.\r\n     */\r\n    function setOperatorsContract(address _baseOperators) public onlyAdmin {\r\n        require(_baseOperators != address(0), \"Operatorable: address of new operators contract can not be zero\");\r\n        operatorsPending = _baseOperators;\r\n        emit OperatorsContractPending(msg.sender, _baseOperators);\r\n    }\r\n\r\n    /**\r\n     * @dev The function should be called from new operators contract by admin to ensure that operatorsPending address\r\n     *       is the real contract address.\r\n     */\r\n    function confirmOperatorsContract() public {\r\n        require(operatorsPending != address(0), \"Operatorable: address of new operators contract can not be zero\");\r\n        require(msg.sender == operatorsPending, \"Operatorable: should be called from new operators contract\");\r\n        _setOperatorsContract(operatorsPending);\r\n    }\r\n\r\n    /**\r\n     * @return The address of the BaseOperators contract.\r\n     */\r\n    function getOperatorsContract() public view returns (address) {\r\n        return address(operatorsInst);\r\n    }\r\n\r\n    /**\r\n     * @return The pending address of the BaseOperators contract.\r\n     */\r\n    function getOperatorsPending() public view returns (address) {\r\n        return operatorsPending;\r\n    }\r\n\r\n    /**\r\n     * @return If '_account' has operator privileges.\r\n     */\r\n    function isOperator(address _account) public view returns (bool) {\r\n        return operatorsInst.isOperator(_account);\r\n    }\r\n\r\n    /**\r\n     * @return If '_account' has admin privileges.\r\n     */\r\n    function isAdmin(address _account) public view returns (bool) {\r\n        return operatorsInst.isAdmin(_account);\r\n    }\r\n\r\n    /**\r\n     * @return If '_account' has system privileges.\r\n     */\r\n    function isSystem(address _account) public view returns (bool) {\r\n        return operatorsInst.isSystem(_account);\r\n    }\r\n\r\n    /**\r\n     * @return If '_account' has relay privileges.\r\n     */\r\n    function isRelay(address _account) public view returns (bool) {\r\n        return operatorsInst.isRelay(_account);\r\n    }\r\n\r\n    /**\r\n     * @return If '_contract' has multisig privileges.\r\n     */\r\n    function isMultisig(address _contract) public view returns (bool) {\r\n        return operatorsInst.isMultisig(_contract);\r\n    }\r\n\r\n    /**\r\n     * @return If '_account' has admin or system privileges.\r\n     */\r\n    function isAdminOrSystem(address _account) public view returns (bool) {\r\n        return (operatorsInst.isAdmin(_account) || operatorsInst.isSystem(_account));\r\n    }\r\n\r\n    /**\r\n     * @return If '_account' has operator or system privileges.\r\n     */\r\n    function isOperatorOrSystem(address _account) public view returns (bool) {\r\n        return (operatorsInst.isOperator(_account) || operatorsInst.isSystem(_account));\r\n    }\r\n\r\n    /** INTERNAL FUNCTIONS */\r\n    function _setOperatorsContract(address _baseOperators) internal {\r\n        require(_baseOperators != address(0), \"Operatorable: address of new operators contract cannot be zero\");\r\n        operatorsInst = IBaseOperators(_baseOperators);\r\n        emit OperatorsContractChanged(msg.sender, _baseOperators);\r\n    }\r\n}\r\n\r\n\r\n// File @sygnum/solidity-base-contracts/contracts/role/raise/RaiseOperatorable.sol@v1.0.2\r\n\r\n/**\r\n * @title RaiseOperatorable\r\n * @author Team 3301 <team3301@sygnum.com>\r\n * @dev RaiseOperatorable contract stores RaiseOperators contract address, and modifiers for\r\n *      contracts.\r\n */\r\n\r\npragma solidity 0.5.12;\r\n\r\n\r\n\r\ncontract RaiseOperatorable is Operatorable {\r\n    IRaiseOperators internal raiseOperatorsInst;\r\n    address private raiseOperatorsPending;\r\n\r\n    event RaiseOperatorsContractChanged(address indexed caller, address indexed raiseOperatorsAddress);\r\n    event RaiseOperatorsContractPending(address indexed caller, address indexed raiseOperatorsAddress);\r\n\r\n    /**\r\n     * @dev Reverts if sender does not have the investor role associated.\r\n     */\r\n    modifier onlyInvestor() {\r\n        require(isInvestor(msg.sender), \"RaiseOperatorable: caller is not investor\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Reverts if sender does not have the issuer role associated.\r\n     */\r\n    modifier onlyIssuer() {\r\n        require(isIssuer(msg.sender), \"RaiseOperatorable: caller is not issuer\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Initialization instead of constructor, called once. The setOperatorsContract function can be called only by Admin role with\r\n     * confirmation through the operators contract.\r\n     * @param _baseOperators BaseOperators contract address.\r\n     */\r\n    function initialize(address _baseOperators, address _raiseOperators) public initializer {\r\n        super.initialize(_baseOperators);\r\n        _setRaiseOperatorsContract(_raiseOperators);\r\n    }\r\n\r\n    /**\r\n     * @dev Set the new the address of Operators contract, should be confirmed from operators contract by calling confirmFor(addr)\r\n     * where addr is the address of current contract instance. This is done to prevent the case when the new contract address is\r\n     *broken and control of the contract can be lost in such case\r\n     * @param _raiseOperators RaiseOperators contract address.\r\n     */\r\n    function setRaiseOperatorsContract(address _raiseOperators) public onlyAdmin {\r\n        require(\r\n            _raiseOperators != address(0),\r\n            \"RaiseOperatorable: address of new raiseOperators contract can not be zero\"\r\n        );\r\n        raiseOperatorsPending = _raiseOperators;\r\n        emit RaiseOperatorsContractPending(msg.sender, _raiseOperators);\r\n    }\r\n\r\n    /**\r\n     * @dev The function should be called from new operators contract by admin to insure that operatorsPending address\r\n     *       is the real contract address.\r\n     */\r\n    function confirmRaiseOperatorsContract() public {\r\n        require(\r\n            raiseOperatorsPending != address(0),\r\n            \"RaiseOperatorable: address of pending raiseOperators contract can not be zero\"\r\n        );\r\n        require(\r\n            msg.sender == raiseOperatorsPending,\r\n            \"RaiseOperatorable: should be called from new raiseOperators contract\"\r\n        );\r\n        _setRaiseOperatorsContract(raiseOperatorsPending);\r\n    }\r\n\r\n    /**\r\n     * @return The address of the RaiseOperators contract.\r\n     */\r\n    function getRaiseOperatorsContract() public view returns (address) {\r\n        return address(raiseOperatorsInst);\r\n    }\r\n\r\n    /**\r\n     * @return The pending RaiseOperators contract address\r\n     */\r\n    function getRaiseOperatorsPending() public view returns (address) {\r\n        return raiseOperatorsPending;\r\n    }\r\n\r\n    /**\r\n     * @return If '_account' has investor privileges.\r\n     */\r\n    function isInvestor(address _account) public view returns (bool) {\r\n        return raiseOperatorsInst.isInvestor(_account);\r\n    }\r\n\r\n    /**\r\n     * @return If '_account' has issuer privileges.\r\n     */\r\n    function isIssuer(address _account) public view returns (bool) {\r\n        return raiseOperatorsInst.isIssuer(_account);\r\n    }\r\n\r\n    /** INTERNAL FUNCTIONS */\r\n    function _setRaiseOperatorsContract(address _raiseOperators) internal {\r\n        require(\r\n            _raiseOperators != address(0),\r\n            \"RaiseOperatorable: address of new raiseOperators contract can not be zero\"\r\n        );\r\n        raiseOperatorsInst = IRaiseOperators(_raiseOperators);\r\n        emit RaiseOperatorsContractChanged(msg.sender, _raiseOperators);\r\n    }\r\n}\r\n\r\n\r\n// File @openzeppelin/contracts/token/ERC20/IERC20.sol@v2.5.0\r\n\r\npragma solidity ^0.5.0;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP. Does not include\r\n * the optional functions; to access them see {ERC20Detailed}.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n\r\n// File @sygnum/solidity-base-contracts/contracts/role/interface/ITraderOperators.sol@v1.0.2\r\n\r\n/**\r\n * @title ITraderOperators\r\n * @notice Interface for TraderOperators contract\r\n */\r\n\r\npragma solidity 0.5.12;\r\n\r\ncontract ITraderOperators {\r\n    function isTrader(address _account) external view returns (bool);\r\n\r\n    function addTrader(address _account) external;\r\n\r\n    function removeTrader(address _account) external;\r\n}\r\n\r\n\r\n// File @sygnum/solidity-base-contracts/contracts/role/trader/TraderOperatorable.sol@v1.0.2\r\n\r\n/**\r\n * @title TraderOperatorable\r\n * @author Team 3301 <team3301@sygnum.com>\r\n * @dev TraderOperatorable contract stores TraderOperators contract address, and modifiers for\r\n *      contracts.\r\n */\r\n\r\npragma solidity 0.5.12;\r\n\r\n\r\n\r\ncontract TraderOperatorable is Operatorable {\r\n    ITraderOperators internal traderOperatorsInst;\r\n    address private traderOperatorsPending;\r\n\r\n    event TraderOperatorsContractChanged(address indexed caller, address indexed traderOperatorsAddress);\r\n    event TraderOperatorsContractPending(address indexed caller, address indexed traderOperatorsAddress);\r\n\r\n    /**\r\n     * @dev Reverts if sender does not have the trader role associated.\r\n     */\r\n    modifier onlyTrader() {\r\n        require(isTrader(msg.sender), \"TraderOperatorable: caller is not trader\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Reverts if sender does not have the operator or trader role associated.\r\n     */\r\n    modifier onlyOperatorOrTraderOrSystem() {\r\n        require(\r\n            isOperator(msg.sender) || isTrader(msg.sender) || isSystem(msg.sender),\r\n            \"TraderOperatorable: caller is not trader or operator or system\"\r\n        );\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Initialization instead of constructor, called once. The setTradersOperatorsContract function can be called only by Admin role with\r\n     * confirmation through the operators contract.\r\n     * @param _baseOperators BaseOperators contract address.\r\n     * @param _traderOperators TraderOperators contract address.\r\n     */\r\n    function initialize(address _baseOperators, address _traderOperators) public initializer {\r\n        super.initialize(_baseOperators);\r\n        _setTraderOperatorsContract(_traderOperators);\r\n    }\r\n\r\n    /**\r\n     * @dev Set the new the address of Operators contract, should be confirmed from operators contract by calling confirmFor(addr)\r\n     * where addr is the address of current contract instance. This is done to prevent the case when the new contract address is\r\n     * broken and control of the contract can be lost in such case\r\n     * @param _traderOperators TradeOperators contract address.\r\n     */\r\n    function setTraderOperatorsContract(address _traderOperators) public onlyAdmin {\r\n        require(\r\n            _traderOperators != address(0),\r\n            \"TraderOperatorable: address of new traderOperators contract can not be zero\"\r\n        );\r\n        traderOperatorsPending = _traderOperators;\r\n        emit TraderOperatorsContractPending(msg.sender, _traderOperators);\r\n    }\r\n\r\n    /**\r\n     * @dev The function should be called from new operators contract by admin to insure that traderOperatorsPending address\r\n     *       is the real contract address.\r\n     */\r\n    function confirmTraderOperatorsContract() public {\r\n        require(\r\n            traderOperatorsPending != address(0),\r\n            \"TraderOperatorable: address of pending traderOperators contract can not be zero\"\r\n        );\r\n        require(\r\n            msg.sender == traderOperatorsPending,\r\n            \"TraderOperatorable: should be called from new traderOperators contract\"\r\n        );\r\n        _setTraderOperatorsContract(traderOperatorsPending);\r\n    }\r\n\r\n    /**\r\n     * @return The address of the TraderOperators contract.\r\n     */\r\n    function getTraderOperatorsContract() public view returns (address) {\r\n        return address(traderOperatorsInst);\r\n    }\r\n\r\n    /**\r\n     * @return The pending TraderOperators contract address\r\n     */\r\n    function getTraderOperatorsPending() public view returns (address) {\r\n        return traderOperatorsPending;\r\n    }\r\n\r\n    /**\r\n     * @return If '_account' has trader privileges.\r\n     */\r\n    function isTrader(address _account) public view returns (bool) {\r\n        return traderOperatorsInst.isTrader(_account);\r\n    }\r\n\r\n    /** INTERNAL FUNCTIONS */\r\n    function _setTraderOperatorsContract(address _traderOperators) internal {\r\n        require(\r\n            _traderOperators != address(0),\r\n            \"TraderOperatorable: address of new traderOperators contract can not be zero\"\r\n        );\r\n        traderOperatorsInst = ITraderOperators(_traderOperators);\r\n        emit TraderOperatorsContractChanged(msg.sender, _traderOperators);\r\n    }\r\n}\r\n\r\n\r\n// File @sygnum/solidity-base-contracts/contracts/helpers/Pausable.sol@v1.0.2\r\n\r\n/**\r\n * @title Pausable\r\n * @author Team 3301 <team3301@sygnum.com>\r\n * @dev Contract module which allows children to implement an emergency stop\r\n *      mechanism that can be triggered by an authorized account in the TraderOperatorable\r\n *      contract.\r\n */\r\npragma solidity 0.5.12;\r\n\r\ncontract Pausable is TraderOperatorable {\r\n    event Paused(address indexed account);\r\n    event Unpaused(address indexed account);\r\n\r\n    bool internal _paused;\r\n\r\n    constructor() internal {\r\n        _paused = false;\r\n    }\r\n\r\n    /**\r\n     * @dev Reverts if contract is paused.\r\n     */\r\n    modifier whenNotPaused() {\r\n        require(!_paused, \"Pausable: paused\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Reverts if contract is paused.\r\n     */\r\n    modifier whenPaused() {\r\n        require(_paused, \"Pausable: not paused\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Called by operator to pause child contract. The contract\r\n     *      must not already be paused.\r\n     */\r\n    function pause() public onlyOperatorOrTraderOrSystem whenNotPaused {\r\n        _paused = true;\r\n        emit Paused(msg.sender);\r\n    }\r\n\r\n    /** @dev Called by operator to pause child contract. The contract\r\n     *       must already be paused.\r\n     */\r\n    function unpause() public onlyOperatorOrTraderOrSystem whenPaused {\r\n        _paused = false;\r\n        emit Unpaused(msg.sender);\r\n    }\r\n\r\n    /**\r\n     * @return If child contract is already paused or not.\r\n     */\r\n    function isPaused() public view returns (bool) {\r\n        return _paused;\r\n    }\r\n\r\n    /**\r\n     * @return If child contract is not paused.\r\n     */\r\n    function isNotPaused() public view returns (bool) {\r\n        return !_paused;\r\n    }\r\n}\r\n\r\n\r\n// File @openzeppelin/contracts/math/SafeMath.sol@v2.5.0\r\n\r\npragma solidity ^0.5.0;\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     * - Subtraction cannot overflow.\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        // Solidity only automatically asserts when dividing by 0\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts with custom message when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n\r\n// File contracts/raise/CappedRaise.sol\r\n\r\n/**\r\n * @title CappedRaise\r\n * @author Team 3301 <team3301@sygnum.com>\r\n * @dev Stores, and modified amount of shares that have been sold.  This also implements total amount available to be sold limitations.\r\n */\r\n\r\npragma solidity 0.5.12;\r\n\r\ncontract CappedRaise {\r\n    using SafeMath for uint256;\r\n\r\n    uint256 private minCap;\r\n    uint256 private maxCap;\r\n    uint256 private sold;\r\n    address[] private receivers;\r\n\r\n    mapping(address => uint256) private shares;\r\n\r\n    /**\r\n     * @dev Sets the minimum and maximum cap for the capital raise.\r\n     * @param _minCap uint256 minimum cap.\r\n     * @param _maxCap uint256 maximum cap.\r\n     */\r\n    function _setCap(uint256 _minCap, uint256 _maxCap) internal {\r\n        require(_minCap > 0, \"CappedRaise: minimum cap must exceed zero\");\r\n        require(_maxCap > _minCap, \"CappedRaise: maximum cap must exceed minimum cap\");\r\n        minCap = _minCap;\r\n        maxCap = _maxCap;\r\n    }\r\n\r\n    /**\r\n     * @dev updates the total that the capital raise has sold and the relevant user shares balance.\r\n     * @param _receiver address Receiving address.\r\n     * @param _shares uint256 Amount of shares.\r\n     */\r\n    function _updateSold(address _receiver, uint256 _shares) internal {\r\n        shares[_receiver] = shares[_receiver].add(_shares);\r\n        sold = sold.add(_shares);\r\n\r\n        receivers.push(_receiver);\r\n    }\r\n\r\n    /**\r\n     * @return the max cap of the raise.\r\n     */\r\n    function getMaxCap() public view returns (uint256) {\r\n        return maxCap;\r\n    }\r\n\r\n    /**\r\n     * @return the min cap of the raise.\r\n     */\r\n    function getMinCap() public view returns (uint256) {\r\n        return minCap;\r\n    }\r\n\r\n    /**\r\n     * @return the sold amount of the raise.\r\n     */\r\n    function getSold() public view returns (uint256) {\r\n        return sold;\r\n    }\r\n\r\n    /**\r\n     * @return the length of receivers.\r\n     */\r\n    function getReceiversLength() public view returns (uint256) {\r\n        return receivers.length;\r\n    }\r\n\r\n    /**\r\n     * @param _index uint256 index of the receiver.\r\n     * @return receiver address at index.\r\n     */\r\n    function getReceiver(uint256 _index) public view returns (address) {\r\n        return receivers[_index];\r\n    }\r\n\r\n    /**\r\n     * @dev returns sub-array of receivers for a given range of indices\r\n     * @param _start uint256 start index\r\n     * @param _end uint256 end index\r\n     * @return address[] sub-array of receivers' addresses\r\n     */\r\n    function getReceiversBatch(uint256 _start, uint256 _end) public view returns (address[] memory) {\r\n        require(_start < _end, \"CappedRaise: Wrong receivers array indices\");\r\n        require(_end.sub(_start) <= 256, \"CappedRaise: Greater than block limit\");\r\n        address[] memory _receivers = new address[](_end.sub(_start));\r\n        for (uint256 _i = 0; _i < _end.sub(_start); _i++) {\r\n            _receivers[_i] = _i.add(_start) < receivers.length ? receivers[_i.add(_start)] : address(0);\r\n        }\r\n        return _receivers;\r\n    }\r\n\r\n    /**\r\n     * @return the available shares of raise (shares that are not sold yet).\r\n     */\r\n    function getAvailableShares() public view returns (uint256) {\r\n        return maxCap.sub(sold);\r\n    }\r\n\r\n    /**\r\n     * @param _receiver address Receiving address.\r\n     * @return the receiver's shares.\r\n     */\r\n    function getShares(address _receiver) public view returns (uint256) {\r\n        return shares[_receiver];\r\n    }\r\n\r\n    /**\r\n     * @dev Checks whether the max cap has been reached.\r\n     * @return Whether the max cap has been reached.\r\n     */\r\n    function maxCapReached() public view returns (bool) {\r\n        return sold >= maxCap;\r\n    }\r\n\r\n    /**\r\n     * @dev Checks whether the max cap has been reached with a new investment.\r\n     * @param _newInvestment uint256 containing the new proposed investment.\r\n     * @return Whether the max cap would be reached with the new investment.\r\n     */\r\n    function maxCapWouldBeReached(uint256 _newInvestment) public view returns (bool) {\r\n        return sold.add(_newInvestment) > maxCap;\r\n    }\r\n\r\n    /**\r\n     * @dev Checks whether the min cap has been reached.\r\n     * @return Whether the min cap has been reached.\r\n     */\r\n    function minCapReached() public view returns (bool) {\r\n        return sold >= minCap;\r\n    }\r\n}\r\n\r\n\r\n// File contracts/raise/TimedRaise.sol\r\n\r\n/**\r\n * @title TimedRaise\r\n * @author Team 3301 <team3301@sygnum.com>\r\n * @dev This contract implements time limitations upon contributions.\r\n */\r\n\r\npragma solidity 0.5.12;\r\n\r\ncontract TimedRaise {\r\n    using SafeMath for uint256;\r\n\r\n    uint256 private openingTime;\r\n    uint256 private closingTime;\r\n\r\n    /**\r\n     * @dev Reverts if not in raise time range.\r\n     */\r\n    modifier onlyWhileOpen {\r\n        require(isOpen(), \"TimedRaise: not open\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Reverts if not after raise time range.\r\n     */\r\n    modifier onlyWhenClosed {\r\n        require(hasClosed(), \"TimedRaise: not closed\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev sets raise opening and closing times.\r\n     * @param _openingTime uint256 Opening time for raise.\r\n     * @param _closingTime uint256 Closing time for raise.\r\n     */\r\n    function _setTime(uint256 _openingTime, uint256 _closingTime) internal {\r\n        // solhint-disable-next-line not-rely-on-time\r\n        require(_openingTime >= block.timestamp, \"TimedRaise: opening time is before current time\");\r\n        require(_closingTime > _openingTime, \"TimedRaise: opening time is not before closing time\");\r\n\r\n        openingTime = _openingTime;\r\n        closingTime = _closingTime;\r\n    }\r\n\r\n    /**\r\n     * @return the raise opening time.\r\n     */\r\n    function getOpening() public view returns (uint256) {\r\n        return openingTime;\r\n    }\r\n\r\n    /**\r\n     * @return the raise closing time.\r\n     */\r\n    function getClosing() public view returns (uint256) {\r\n        return closingTime;\r\n    }\r\n\r\n    /**\r\n     * @dev Checks whether the raise is still open.\r\n     * @return true if the raise is open, false otherwise.\r\n     */\r\n    function isOpen() public view returns (bool) {\r\n        // solhint-disable-next-line not-rely-on-time\r\n        return now >= openingTime && now <= closingTime;\r\n    }\r\n\r\n    /**\r\n     * @dev Checks whether the period in which the raise is open has already elapsed.\r\n     * @return Whether raise period has elapsed\r\n     */\r\n    function hasClosed() public view returns (bool) {\r\n        // solhint-disable-next-line not-rely-on-time\r\n        return now > closingTime;\r\n    }\r\n}\r\n\r\n\r\n// File contracts/libraries/Bytes32Set.sol\r\n\r\npragma solidity 0.5.12;\r\n\r\n// SPDX-License-Identifier: Unlicensed\r\n// https://github.com/rob-Hitchens/SetTypes/blob/master/contracts/Bytes32Set.sol\r\n\r\nlibrary Bytes32Set {\r\n    struct Set {\r\n        mapping(bytes32 => uint256) keyPointers;\r\n        bytes32[] keyList;\r\n    }\r\n\r\n    /**\r\n     * @notice insert a key.\r\n     * @dev duplicate keys are not permitted.\r\n     * @param self storage pointer to a Set.\r\n     * @param key value to insert.\r\n     */\r\n    function insert(Set storage self, bytes32 key) internal {\r\n        require(!exists(self, key), \"Bytes32Set: key already exists in the set.\");\r\n        self.keyPointers[key] = self.keyList.length;\r\n        self.keyList.push(key);\r\n    }\r\n\r\n    /**\r\n     * @notice remove a key.\r\n     * @dev key to remove must exist.\r\n     * @param self storage pointer to a Set.\r\n     * @param key value to remove.\r\n     */\r\n    function remove(Set storage self, bytes32 key) internal {\r\n        require(exists(self, key), \"Bytes32Set: key does not exist in the set.\");\r\n        uint256 last = count(self) - 1;\r\n        uint256 rowToReplace = self.keyPointers[key];\r\n        if (rowToReplace != last) {\r\n            bytes32 keyToMove = self.keyList[last];\r\n            self.keyPointers[keyToMove] = rowToReplace;\r\n            self.keyList[rowToReplace] = keyToMove;\r\n        }\r\n        delete self.keyPointers[key];\r\n        self.keyList.pop();\r\n    }\r\n\r\n    /**\r\n     * @notice count the keys.\r\n     * @param self storage pointer to a Set.\r\n     */\r\n    function count(Set storage self) internal view returns (uint256) {\r\n        return (self.keyList.length);\r\n    }\r\n\r\n    /**\r\n     * @notice check if a key is in the Set.\r\n     * @param self storage pointer to a Set.\r\n     * @param key value to check.\r\n     * @return bool true: Set member, false: not a Set member.\r\n     */\r\n    function exists(Set storage self, bytes32 key) internal view returns (bool) {\r\n        if (self.keyList.length == 0) return false;\r\n        return self.keyList[self.keyPointers[key]] == key;\r\n    }\r\n\r\n    /**\r\n     * @notice fetch a key by row (enumerate).\r\n     * @param self storage pointer to a Set.\r\n     * @param index row to enumerate. Must be < count() - 1.\r\n     */\r\n    function keyAtIndex(Set storage self, uint256 index) internal view returns (bytes32) {\r\n        return self.keyList[index];\r\n    }\r\n}\r\n\r\n\r\n// File contracts/raise/Raise.sol\r\n\r\n/**\r\n * @title Raise\r\n * @author Team 3301 <team3301@sygnum.com>\r\n * @dev The Raise contract acts as an escrow for subscriptions, and issuer payments.\r\n *       This contract also has a cap upon how much can be purchased, and time boundaries implemented.\r\n *       Contract is spawned from RaiseFactory.\r\n */\r\n\r\npragma solidity 0.5.12;\r\n\r\n\r\n\r\n\r\n\r\ncontract Raise is RaiseOperatorable, CappedRaise, TimedRaise, Pausable {\r\n    using SafeMath for uint256;\r\n    using Bytes32Set for Bytes32Set.Set;\r\n\r\n    IERC20 public dchf;\r\n    address public issuer;\r\n    uint256 public price;\r\n    uint256 public minSubscription;\r\n    uint256 public totalPendingDeposits;\r\n    uint256 public totalDeclinedDeposits;\r\n    uint256 public totalAcceptedDeposits;\r\n    uint256 public decimals;\r\n    bool public issuerPaid;\r\n\r\n    mapping(bytes32 => Subscription) public subscription;\r\n    mapping(bool => Bytes32Set.Set) internal subscriptions;\r\n    mapping(address => mapping(bool => Bytes32Set.Set)) internal investor;\r\n\r\n    Stage public stage;\r\n    enum Stage {Created, RepayAll, IssuerAccepted, OperatorAccepted, Closed}\r\n\r\n    struct Subscription {\r\n        address investor;\r\n        uint256 shares;\r\n        uint256 cost;\r\n    }\r\n\r\n    uint16 internal constant BATCH_LIMIT = 256;\r\n\r\n    event SubscriptionProposal(address indexed issuer, address indexed investor, bytes32 subID);\r\n    event SubscriptionAccepted(address indexed payee, bytes32 subID, uint256 shares, uint256 cost);\r\n    event SubscriptionDeclined(address indexed payee, bytes32 subID, uint256 cost);\r\n    event RaiseClosed(address indexed issuer, bool accepted);\r\n    event OperatorRaiseFinalization(address indexed issuer, bool accepted);\r\n    event IssuerPaid(address indexed issuer, uint256 amount);\r\n    event OperatorClosed(address indexed operator);\r\n    event UnsuccessfulRaise(address indexed issuer);\r\n    event ReleasedPending(address indexed investor, uint256 amount);\r\n    event ReleasedEmergency(address indexed investor, uint256 amount);\r\n\r\n    /**\r\n     * @dev Reverts if caller is not the issuer.\r\n     */\r\n    modifier onlyIssuer() {\r\n        require(msg.sender == issuer, \"Raise: caller not issuer\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Reverts if the current stage is not the specified stage.\r\n     */\r\n    modifier onlyAtStage(Stage _stage) {\r\n        require(stage == _stage, \"Raise: not at correct stage\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Initialization instead of constructor, called once to initialize all the necessary values.\r\n     * @param _dchf DCHF proxy contract address.\r\n     * @param _issuer Address of capital raise issuer.\r\n     * @param _min Minimum amount required in DCHF for the capital raise.\r\n     * @param _max Maximum amount required in DCHF for the capital raise.\r\n     * @param _price DCHF price per share.\r\n     * @param _minSubscription Minimum amount in DCHF that is required for a subscription.\r\n     * @param _open Opening time in unix epoch time.\r\n     * @param _close Closing time in unix epoch time.\r\n     * @param _baseOperators BaseOperators contract address.\r\n     * @param _raiseOperators RaiseOperators contract address.\r\n     */\r\n    function initialize(\r\n        IERC20 _dchf,\r\n        address _issuer,\r\n        uint256 _min,\r\n        uint256 _max,\r\n        uint256 _price,\r\n        uint256 _minSubscription,\r\n        uint256 _decimals,\r\n        uint256 _open,\r\n        uint256 _close,\r\n        address _baseOperators,\r\n        address _raiseOperators\r\n    ) public initializer {\r\n        dchf = _dchf;\r\n        price = _price;\r\n        issuer = _issuer;\r\n        _setCap(_min, _max);\r\n        _setTime(_open, _close);\r\n        minSubscription = _minSubscription;\r\n        RaiseOperatorable.initialize(_baseOperators, _raiseOperators);\r\n        decimals = _decimals;\r\n    }\r\n\r\n    /**\r\n     * @dev Investor can subscribe to the capital raise with the unique subscription hash.\r\n     * @param _subID Subscription unique identifier\r\n     * @param _shares Amount of shares to purchase.\r\n     */\r\n    function subscribe(bytes32 _subID, uint256 _shares)\r\n        public\r\n        whenNotPaused\r\n        onlyInvestor\r\n        onlyAtStage(Stage.Created)\r\n        onlyWhileOpen\r\n    {\r\n        require(_shares <= getAvailableShares(), \"Raise: above available\");\r\n\r\n        uint256 cost = _shares.mul(price);\r\n\r\n        require(cost >= minSubscription, \"Raise: below minimum subscription\");\r\n        require(cost <= dchf.allowance(msg.sender, address(this)), \"Raise: above allowance\");\r\n\r\n        dchf.transferFrom(msg.sender, address(this), cost);\r\n        totalPendingDeposits = totalPendingDeposits.add(cost);\r\n\r\n        investor[msg.sender][false].insert(_subID);\r\n        subscriptions[false].insert(_subID);\r\n        subscription[_subID] = Subscription({investor: msg.sender, shares: _shares, cost: cost});\r\n\r\n        emit SubscriptionProposal(issuer, msg.sender, _subID);\r\n    }\r\n\r\n    /**\r\n     * @dev Issuer accept or decline subscription.\r\n     * @param _subID Subscription unique identifier\r\n     * @param _accept Whether acceptance or not.\r\n     */\r\n    function issuerSubscription(bytes32 _subID, bool _accept)\r\n        public\r\n        whenNotPaused\r\n        onlyIssuer\r\n        onlyAtStage(Stage.Created)\r\n    {\r\n        require(subscriptions[false].exists(_subID), \"Raise: subscription does not exist\");\r\n        require(!maxCapReached(), \"Raise: max sold already met\");\r\n\r\n        Subscription memory sub = subscription[_subID];\r\n        require(!maxCapWouldBeReached(sub.shares) || !_accept, \"Raise: subscription would exceed max sold\");\r\n        totalPendingDeposits = totalPendingDeposits.sub(sub.cost);\r\n\r\n        if (!_accept || getAvailableShares() < sub.shares) {\r\n            subscriptions[false].remove(_subID);\r\n            investor[sub.investor][false].remove(_subID);\r\n            totalDeclinedDeposits = totalDeclinedDeposits.add(sub.cost);\r\n            delete subscription[_subID];\r\n            dchf.transfer(sub.investor, sub.cost);\r\n            emit SubscriptionDeclined(sub.investor, _subID, sub.cost);\r\n            return;\r\n        }\r\n\r\n        subscriptions[false].remove(_subID);\r\n        subscriptions[true].insert(_subID);\r\n        investor[sub.investor][false].remove(_subID);\r\n        investor[sub.investor][true].insert(_subID);\r\n        _updateSold(sub.investor, sub.shares);\r\n        // no reentrancy possibility here, only transferring to dchf, not arbitrary address\r\n        // solhint-disable-next-line reentrancy\r\n        totalAcceptedDeposits = totalAcceptedDeposits.add(sub.cost);\r\n        emit SubscriptionAccepted(sub.investor, _subID, sub.shares, sub.cost);\r\n    }\r\n\r\n    /**\r\n     * @dev Issuer closes the capital raise.\r\n     * @param _accept Whether acceptance or not of the capital raise.\r\n     */\r\n    function issuerClose(bool _accept) public whenNotPaused onlyIssuer onlyAtStage(Stage.Created) {\r\n        if (!minCapReached() && hasClosed()) {\r\n            stage = Stage.RepayAll;\r\n            emit UnsuccessfulRaise(msg.sender);\r\n        } else if ((minCapReached() && hasClosed()) || maxCapReached()) {\r\n            stage = _accept ? Stage.IssuerAccepted : Stage.RepayAll;\r\n            emit RaiseClosed(msg.sender, _accept);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Operator finalize capital raise after issuer has accepted.\r\n     * @param _accept Whether acceptance or not of the capital raise.\r\n     */\r\n    function operatorFinalize(bool _accept) public whenNotPaused onlyOperator {\r\n        if (_accept) {\r\n            require(stage == Stage.IssuerAccepted, \"Raise: incorrect stage\");\r\n            stage = Stage.OperatorAccepted;\r\n        } else {\r\n            require(stage != Stage.OperatorAccepted && stage != Stage.Closed, \"Raise: incorrect stage\");\r\n            stage = Stage.RepayAll;\r\n        }\r\n        emit OperatorRaiseFinalization(msg.sender, _accept);\r\n    }\r\n\r\n    /**\r\n     * @dev Release DCHF obtained to issuer.\r\n     */\r\n    function releaseToIssuer() public whenNotPaused onlyOperatorOrSystem onlyAtStage(Stage.OperatorAccepted) {\r\n        require(!issuerPaid, \"Raise: issuer already paid\");\r\n        issuerPaid = true;\r\n\r\n        dchf.transfer(issuer, totalAcceptedDeposits);\r\n\r\n        emit IssuerPaid(issuer, totalAcceptedDeposits);\r\n    }\r\n\r\n    /**\r\n     * @dev Release pending DCHF subscriptions.\r\n     * @param _investors Array of investors to release pending subscriptions for.\r\n     */\r\n    function batchReleasePending(address[] memory _investors) public whenNotPaused onlyOperatorOrSystem {\r\n        require(_investors.length <= BATCH_LIMIT, \"Raise: batch count is greater than BATCH_LIMIT\");\r\n        require(stage != Stage.Created, \"Raise: not at correct stage\");\r\n        for (uint256 i = 0; i < _investors.length; i++) {\r\n            address user = _investors[i];\r\n            uint256 amount = _clearInvestorFunds(user, false);\r\n            dchf.transfer(user, amount);\r\n            emit ReleasedPending(user, amount);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Close the capital raise after either pending participants have been paid back, or all participants have been repaid.\r\n     */\r\n    function close() public whenNotPaused onlyOperatorOrSystem onlyWhenClosed {\r\n        require(stage == Stage.OperatorAccepted || stage == Stage.RepayAll, \"Raise: not at correct stage\");\r\n        require(subscriptions[false].count() == 0, \"Raise: pending not emptied\");\r\n\r\n        if (stage == Stage.OperatorAccepted) require(issuerPaid, \"Raise: issuer not been paid\");\r\n\r\n        if (stage == Stage.RepayAll) require(subscriptions[true].count() == 0, \"Raise: not emptied\");\r\n\r\n        stage = Stage.Closed;\r\n        emit OperatorClosed(msg.sender);\r\n    }\r\n\r\n    /**\r\n     * @dev Pay pending and accepted DCHF back to investors.\r\n     * @param _investors Array of investors to repay.\r\n     */\r\n    function releaseAllFunds(address[] memory _investors) public onlyOperatorOrSystem {\r\n        require(Pausable.isPaused() || stage == Stage.RepayAll, \"Raise: not at correct stage\");\r\n\r\n        for (uint256 i = 0; i < _investors.length; i++) {\r\n            address user = _investors[i];\r\n            uint256 amount = _clearInvestorFunds(user, false).add(_clearInvestorFunds(user, true));\r\n            if (amount > 0) {\r\n                dchf.transfer(user, amount);\r\n                emit ReleasedEmergency(user, amount);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @param _accept Pending or accepted.\r\n     * @return Amount of pending/accepted subscriptions.\r\n     */\r\n    function getSubscriptionTypeLength(bool _accept) public view returns (uint256) {\r\n        return (subscriptions[_accept].count());\r\n    }\r\n\r\n    /**\r\n     * @param _investor address of investor.\r\n     * @param _accept pending or accepted.\r\n     * @return Subscription IDs per investor for pending or accepted subscriptions.\r\n     */\r\n    function getSubIDs(address _investor, bool _accept) public view returns (bytes32[] memory) {\r\n        bytes32[] memory subIDs = new bytes32[](investor[_investor][_accept].count());\r\n        for (uint256 i = 0; i < investor[_investor][_accept].count(); i++) {\r\n            subIDs[i] = investor[_investor][_accept].keyAtIndex(i);\r\n        }\r\n        return subIDs;\r\n    }\r\n\r\n    /**\r\n     * @param _investor address of investor.\r\n     * @param _accept pending or accepted.\r\n     * @return Deposit per investor for pending or accepted subscriptions.\r\n     */\r\n    function getDeposits(address _investor, bool _accept) public view returns (uint256 deposit) {\r\n        bytes32[] memory subIDs = getSubIDs(_investor, _accept);\r\n\r\n        for (uint256 i = 0; i < subIDs.length; i++) {\r\n            bytes32 subID = subIDs[i];\r\n\r\n            deposit = deposit.add(subscription[subID].cost);\r\n        }\r\n        return deposit;\r\n    }\r\n\r\n    function _clearInvestorFunds(address _user, bool _approved) internal returns (uint256) {\r\n        uint256 amount;\r\n        while (investor[_user][_approved].count() != 0) {\r\n            bytes32 subID = investor[_user][_approved].keyAtIndex(0);\r\n            Subscription memory sub = subscription[subID];\r\n            amount = amount.add(sub.cost);\r\n            subscriptions[_approved].remove(subID);\r\n            investor[_user][_approved].remove(subID);\r\n            delete subscription[subID];\r\n        }\r\n        return amount;\r\n    }\r\n}\r\n\r\n\r\n// File contracts/libraries/RaiseDeployer.sol\r\n\r\n/**\r\n * @title RaiseDeployer\r\n * @author Team 3301 <team3301@sygnum.com>\r\n * @dev Library to deploy and initialize a new instance of Sygnum Equity Token.\r\n * This is commonly used by a TokenFactory to automatically deploy and configure\r\n */\r\n\r\npragma solidity 0.5.12;\r\n\r\n\r\nlibrary RaiseDeployer {\r\n    function deployRaise() public returns (address) {\r\n        Raise raise = new Raise();\r\n        return address(raise);\r\n    }\r\n\r\n    function initializeRaise(\r\n        address _proxy,\r\n        IERC20 _dchf,\r\n        address _issuer,\r\n        uint256 _min,\r\n        uint256 _max,\r\n        uint256 _price,\r\n        uint256 _subscription,\r\n        uint256 _decimals,\r\n        uint256 _opening,\r\n        uint256 _closing,\r\n        address _baseOperators,\r\n        address _raiseOperators\r\n    ) public {\r\n        Raise(_proxy).initialize(\r\n            _dchf,\r\n            _issuer,\r\n            _min,\r\n            _max,\r\n            _price,\r\n            _subscription,\r\n            _decimals,\r\n            _opening,\r\n            _closing,\r\n            _baseOperators,\r\n            _raiseOperators\r\n        );\r\n    }\r\n}\r\n\r\n\r\n// File zos-lib/contracts/upgradeability/Proxy.sol@v2.4.3\r\n\r\npragma solidity ^0.5.0;\r\n\r\n/**\r\n * @title Proxy\r\n * @dev Implements delegation of calls to other contracts, with proper\r\n * forwarding of return values and bubbling of failures.\r\n * It defines a fallback function that delegates all calls to the address\r\n * returned by the abstract _implementation() internal function.\r\n */\r\ncontract Proxy {\r\n  /**\r\n   * @dev Fallback function.\r\n   * Implemented entirely in `_fallback`.\r\n   */\r\n  function () payable external {\r\n    _fallback();\r\n  }\r\n\r\n  /**\r\n   * @return The Address of the implementation.\r\n   */\r\n  function _implementation() internal view returns (address);\r\n\r\n  /**\r\n   * @dev Delegates execution to an implementation contract.\r\n   * This is a low level function that doesn't return to its internal call site.\r\n   * It will return to the external caller whatever the implementation returns.\r\n   * @param implementation Address to delegate.\r\n   */\r\n  function _delegate(address implementation) internal {\r\n    assembly {\r\n      // Copy msg.data. We take full control of memory in this inline assembly\r\n      // block because it will not return to Solidity code. We overwrite the\r\n      // Solidity scratch pad at memory position 0.\r\n      calldatacopy(0, 0, calldatasize)\r\n\r\n      // Call the implementation.\r\n      // out and outsize are 0 because we don't know the size yet.\r\n      let result := delegatecall(gas, implementation, 0, calldatasize, 0, 0)\r\n\r\n      // Copy the returned data.\r\n      returndatacopy(0, 0, returndatasize)\r\n\r\n      switch result\r\n      // delegatecall returns 0 on error.\r\n      case 0 { revert(0, returndatasize) }\r\n      default { return(0, returndatasize) }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @dev Function that is run as the first thing in the fallback function.\r\n   * Can be redefined in derived contracts to add functionality.\r\n   * Redefinitions must call super._willFallback().\r\n   */\r\n  function _willFallback() internal {\r\n  }\r\n\r\n  /**\r\n   * @dev fallback implementation.\r\n   * Extracted to enable manual triggering.\r\n   */\r\n  function _fallback() internal {\r\n    _willFallback();\r\n    _delegate(_implementation());\r\n  }\r\n}\r\n\r\n\r\n// File zos-lib/contracts/utils/Address.sol@v2.4.3\r\n\r\npragma solidity ^0.5.0;\r\n\r\n/**\r\n * Utility library of inline functions on addresses\r\n *\r\n * Source https://raw.githubusercontent.com/OpenZeppelin/openzeppelin-solidity/v2.1.3/contracts/utils/Address.sol\r\n * This contract is copied here and renamed from the original to avoid clashes in the compiled artifacts\r\n * when the user imports a zos-lib contract (that transitively causes this contract to be compiled and added to the\r\n * build/artifacts folder) as well as the vanilla Address implementation from an openzeppelin version.\r\n */\r\nlibrary ZOSLibAddress {\r\n    /**\r\n     * Returns whether the target address is a contract\r\n     * @dev This function will return false if invoked during the constructor of a contract,\r\n     * as the code is not actually created until after the constructor finishes.\r\n     * @param account address of the account to check\r\n     * @return whether the target address is a contract\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        uint256 size;\r\n        // XXX Currently there is no better way to check if there is a contract in an address\r\n        // than to check the size of the code at that address.\r\n        // See https://ethereum.stackexchange.com/a/14016/36603\r\n        // for more details about how this works.\r\n        // TODO Check this again before the Serenity release, because all addresses will be\r\n        // contracts then.\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly { size := extcodesize(account) }\r\n        return size > 0;\r\n    }\r\n}\r\n\r\n\r\n// File zos-lib/contracts/upgradeability/BaseUpgradeabilityProxy.sol@v2.4.3\r\n\r\npragma solidity ^0.5.0;\r\n\r\n\r\n/**\r\n * @title BaseUpgradeabilityProxy\r\n * @dev This contract implements a proxy that allows to change the\r\n * implementation address to which it will delegate.\r\n * Such a change is called an implementation upgrade.\r\n */\r\ncontract BaseUpgradeabilityProxy is Proxy {\r\n  /**\r\n   * @dev Emitted when the implementation is upgraded.\r\n   * @param implementation Address of the new implementation.\r\n   */\r\n  event Upgraded(address indexed implementation);\r\n\r\n  /**\r\n   * @dev Storage slot with the address of the current implementation.\r\n   * This is the keccak-256 hash of \"org.zeppelinos.proxy.implementation\", and is\r\n   * validated in the constructor.\r\n   */\r\n  bytes32 internal constant IMPLEMENTATION_SLOT = 0x7050c9e0f4ca769c69bd3a8ef740bc37934f8e2c036e5a723fd8ee048ed3f8c3;\r\n\r\n  /**\r\n   * @dev Returns the current implementation.\r\n   * @return Address of the current implementation\r\n   */\r\n  function _implementation() internal view returns (address impl) {\r\n    bytes32 slot = IMPLEMENTATION_SLOT;\r\n    assembly {\r\n      impl := sload(slot)\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @dev Upgrades the proxy to a new implementation.\r\n   * @param newImplementation Address of the new implementation.\r\n   */\r\n  function _upgradeTo(address newImplementation) internal {\r\n    _setImplementation(newImplementation);\r\n    emit Upgraded(newImplementation);\r\n  }\r\n\r\n  /**\r\n   * @dev Sets the implementation address of the proxy.\r\n   * @param newImplementation Address of the new implementation.\r\n   */\r\n  function _setImplementation(address newImplementation) internal {\r\n    require(ZOSLibAddress.isContract(newImplementation), \"Cannot set a proxy implementation to a non-contract address\");\r\n\r\n    bytes32 slot = IMPLEMENTATION_SLOT;\r\n\r\n    assembly {\r\n      sstore(slot, newImplementation)\r\n    }\r\n  }\r\n}\r\n\r\n\r\n// File zos-lib/contracts/upgradeability/UpgradeabilityProxy.sol@v2.4.3\r\n\r\npragma solidity ^0.5.0;\r\n\r\n/**\r\n * @title UpgradeabilityProxy\r\n * @dev Extends BaseUpgradeabilityProxy with a constructor for initializing\r\n * implementation and init data.\r\n */\r\ncontract UpgradeabilityProxy is BaseUpgradeabilityProxy {\r\n  /**\r\n   * @dev Contract constructor.\r\n   * @param _logic Address of the initial implementation.\r\n   * @param _data Data to send as msg.data to the implementation to initialize the proxied contract.\r\n   * It should include the signature and the parameters of the function to be called, as described in\r\n   * https://solidity.readthedocs.io/en/v0.4.24/abi-spec.html#function-selector-and-argument-encoding.\r\n   * This parameter is optional, if no data is given the initialization call to proxied contract will be skipped.\r\n   */\r\n  constructor(address _logic, bytes memory _data) public payable {\r\n    assert(IMPLEMENTATION_SLOT == keccak256(\"org.zeppelinos.proxy.implementation\"));\r\n    _setImplementation(_logic);\r\n    if(_data.length > 0) {\r\n      (bool success,) = _logic.delegatecall(_data);\r\n      require(success);\r\n    }\r\n  }  \r\n}\r\n\r\n\r\n// File zos-lib/contracts/upgradeability/BaseAdminUpgradeabilityProxy.sol@v2.4.3\r\n\r\npragma solidity ^0.5.0;\r\n\r\n/**\r\n * @title BaseAdminUpgradeabilityProxy\r\n * @dev This contract combines an upgradeability proxy with an authorization\r\n * mechanism for administrative tasks.\r\n * All external functions in this contract must be guarded by the\r\n * `ifAdmin` modifier. See ethereum/solidity#3864 for a Solidity\r\n * feature proposal that would enable this to be done automatically.\r\n */\r\ncontract BaseAdminUpgradeabilityProxy is BaseUpgradeabilityProxy {\r\n  /**\r\n   * @dev Emitted when the administration has been transferred.\r\n   * @param previousAdmin Address of the previous admin.\r\n   * @param newAdmin Address of the new admin.\r\n   */\r\n  event AdminChanged(address previousAdmin, address newAdmin);\r\n\r\n  /**\r\n   * @dev Storage slot with the admin of the contract.\r\n   * This is the keccak-256 hash of \"org.zeppelinos.proxy.admin\", and is\r\n   * validated in the constructor.\r\n   */\r\n  bytes32 internal constant ADMIN_SLOT = 0x10d6a54a4754c8869d6886b5f5d7fbfa5b4522237ea5c60d11bc4e7a1ff9390b;\r\n\r\n  /**\r\n   * @dev Modifier to check whether the `msg.sender` is the admin.\r\n   * If it is, it will run the function. Otherwise, it will delegate the call\r\n   * to the implementation.\r\n   */\r\n  modifier ifAdmin() {\r\n    if (msg.sender == _admin()) {\r\n      _;\r\n    } else {\r\n      _fallback();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @return The address of the proxy admin.\r\n   */\r\n  function admin() external ifAdmin returns (address) {\r\n    return _admin();\r\n  }\r\n\r\n  /**\r\n   * @return The address of the implementation.\r\n   */\r\n  function implementation() external ifAdmin returns (address) {\r\n    return _implementation();\r\n  }\r\n\r\n  /**\r\n   * @dev Changes the admin of the proxy.\r\n   * Only the current admin can call this function.\r\n   * @param newAdmin Address to transfer proxy administration to.\r\n   */\r\n  function changeAdmin(address newAdmin) external ifAdmin {\r\n    require(newAdmin != address(0), \"Cannot change the admin of a proxy to the zero address\");\r\n    emit AdminChanged(_admin(), newAdmin);\r\n    _setAdmin(newAdmin);\r\n  }\r\n\r\n  /**\r\n   * @dev Upgrade the backing implementation of the proxy.\r\n   * Only the admin can call this function.\r\n   * @param newImplementation Address of the new implementation.\r\n   */\r\n  function upgradeTo(address newImplementation) external ifAdmin {\r\n    _upgradeTo(newImplementation);\r\n  }\r\n\r\n  /**\r\n   * @dev Upgrade the backing implementation of the proxy and call a function\r\n   * on the new implementation.\r\n   * This is useful to initialize the proxied contract.\r\n   * @param newImplementation Address of the new implementation.\r\n   * @param data Data to send as msg.data in the low level call.\r\n   * It should include the signature and the parameters of the function to be called, as described in\r\n   * https://solidity.readthedocs.io/en/v0.4.24/abi-spec.html#function-selector-and-argument-encoding.\r\n   */\r\n  function upgradeToAndCall(address newImplementation, bytes calldata data) payable external ifAdmin {\r\n    _upgradeTo(newImplementation);\r\n    (bool success,) = newImplementation.delegatecall(data);\r\n    require(success);\r\n  }\r\n\r\n  /**\r\n   * @return The admin slot.\r\n   */\r\n  function _admin() internal view returns (address adm) {\r\n    bytes32 slot = ADMIN_SLOT;\r\n    assembly {\r\n      adm := sload(slot)\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @dev Sets the address of the proxy admin.\r\n   * @param newAdmin Address of the new proxy admin.\r\n   */\r\n  function _setAdmin(address newAdmin) internal {\r\n    bytes32 slot = ADMIN_SLOT;\r\n\r\n    assembly {\r\n      sstore(slot, newAdmin)\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @dev Only fall back when the sender is not the admin.\r\n   */\r\n  function _willFallback() internal {\r\n    require(msg.sender != _admin(), \"Cannot call fallback function from the proxy admin\");\r\n    super._willFallback();\r\n  }\r\n}\r\n\r\n\r\n// File zos-lib/contracts/upgradeability/AdminUpgradeabilityProxy.sol@v2.4.3\r\n\r\npragma solidity ^0.5.0;\r\n\r\n/**\r\n * @title AdminUpgradeabilityProxy\r\n * @dev Extends from BaseAdminUpgradeabilityProxy with a constructor for \r\n * initializing the implementation, admin, and init data.\r\n */\r\ncontract AdminUpgradeabilityProxy is BaseAdminUpgradeabilityProxy, UpgradeabilityProxy {\r\n  /**\r\n   * Contract constructor.\r\n   * @param _logic address of the initial implementation.\r\n   * @param _admin Address of the proxy administrator.\r\n   * @param _data Data to send as msg.data to the implementation to initialize the proxied contract.\r\n   * It should include the signature and the parameters of the function to be called, as described in\r\n   * https://solidity.readthedocs.io/en/v0.4.24/abi-spec.html#function-selector-and-argument-encoding.\r\n   * This parameter is optional, if no data is given the initialization call to proxied contract will be skipped.\r\n   */\r\n  constructor(address _logic, address _admin, bytes memory _data) UpgradeabilityProxy(_logic, _data) public payable {\r\n    assert(ADMIN_SLOT == keccak256(\"org.zeppelinos.proxy.admin\"));\r\n    _setAdmin(_admin);\r\n  }\r\n}\r\n\r\n\r\n// File contracts/factory/SygnumProxy.sol\r\n\r\n/**\r\n * @title SygnumProxy\r\n * @author Team 3301 <team3301@sygnum.com>\r\n * @dev Proxies Sygnum contract calls and enables Sygnum upgradability.\r\n */\r\npragma solidity 0.5.12;\r\n\r\ncontract SygnumProxy is AdminUpgradeabilityProxy {\r\n    /* solhint-disable no-empty-blocks */\r\n    constructor(\r\n        address implementation,\r\n        address proxyOwnerAddr,\r\n        bytes memory data\r\n    ) public AdminUpgradeabilityProxy(implementation, proxyOwnerAddr, data) {}\r\n    /* solhint-enable no-empty-blocks */\r\n}\r\n\r\n\r\n// File contracts/libraries/ProxyDeployer.sol\r\n\r\n/**\r\n * @title ProxyDeployer\r\n * @author Team 3301 <team3301@sygnum.com>\r\n * @dev Library to deploy a proxy instance for a Sygnum.\r\n */\r\n\r\npragma solidity 0.5.12;\r\n\r\nlibrary ProxyDeployer {\r\n    /**\r\n     * @dev Deploy the proxy instance and initialize it\r\n     * @param _implementation Address of the logic contract\r\n     * @param _proxyAdmin Address of the admin for the proxy\r\n     * @param _data Bytecode needed for initialization\r\n     * @return address New instance address\r\n     */\r\n    function deployProxy(\r\n        address _implementation,\r\n        address _proxyAdmin,\r\n        bytes memory _data\r\n    ) public returns (address) {\r\n        SygnumProxy proxy = new SygnumProxy(_implementation, _proxyAdmin, _data);\r\n        return address(proxy);\r\n    }\r\n}\r\n\r\n\r\n// File contracts/factory/RaiseFactory.sol\r\n\r\n/**\r\n * @title RaiseFactory\r\n * @author Team 3301 <team3301@sygnum.com>\r\n * @dev Raise factory to be used by operators to deploy arbitrary Sygnum Capital Raise.\r\n */\r\n\r\npragma solidity 0.5.12;\r\n\r\n\r\n\r\ncontract RaiseFactory is Initializable, RaiseOperatorable {\r\n    IERC20 public dchf;\r\n    address public proxyAdmin;\r\n    address public implementation;\r\n\r\n    mapping(bytes32 => Raise) public raise;\r\n\r\n    struct Raise {\r\n        address implementation;\r\n        address proxy;\r\n        address issuer;\r\n        address token;\r\n    }\r\n\r\n    event UpdatedProxyAdmin(address indexed proxyAdmin);\r\n    event UpdatedImplementation(address indexed implementation);\r\n    event NewProposal(address indexed issuer, bytes32 indexed identifier);\r\n    event ProposalAccepted(\r\n        address indexed issuer,\r\n        bytes32 indexed identifier,\r\n        address raise,\r\n        address proxy,\r\n        address token\r\n    );\r\n    event ProposalDeclined(\r\n        address indexed issuer,\r\n        bytes32 indexed identifier,\r\n        address indexed operator,\r\n        uint256 timestamp\r\n    );\r\n\r\n    /**\r\n     * @dev Initialization instead of constructor, called once to initialize all the necessary values.\r\n     * @param _dchf DCHF proxy contract address.\r\n     * @param _baseOperators BaseOperators contract address.\r\n     * @param _raiseOperators RaiseOperators contract address.\r\n     * @param _proxyAdmin Default proxy admin address.\r\n     * @param _implementation Raise implementation pointer address.\r\n     */\r\n    function initialize(\r\n        IERC20 _dchf,\r\n        address _baseOperators,\r\n        address _raiseOperators,\r\n        address _proxyAdmin,\r\n        address _implementation\r\n    ) public initializer {\r\n        require(address(_dchf) != address(0), \"RaiseFactory: _dchf cannot be set to an empty address\");\r\n        require(_proxyAdmin != address(0), \"RaiseFactory: _proxyAdmin cannot be set to an empty address\");\r\n        require(_implementation != address(0), \"RaiseFactory: _implementation cannot be set to an empty address\");\r\n        dchf = _dchf;\r\n        proxyAdmin = _proxyAdmin;\r\n        implementation = _implementation;\r\n\r\n        super.initialize(_baseOperators, _raiseOperators);\r\n    }\r\n\r\n    /**\r\n     * @dev Called by issuer to propose new capital raise.\r\n     * @param _identifier Unique identifier of raise.\r\n     */\r\n    function newRaiseProposal(bytes32 _identifier) public onlyIssuer {\r\n        require(raise[_identifier].issuer == address(0), \"RaiseFactory: already exists\");\r\n\r\n        raise[_identifier].issuer = msg.sender;\r\n\r\n        emit NewProposal(msg.sender, _identifier);\r\n    }\r\n\r\n    /**\r\n     * @dev Called by operator to accept a capital raise proposal with all of the necessary values for the raise.\r\n     * @param _identifier Unique identifier of raise.\r\n     * @param _accept Whether the operator has accepted.\r\n     * @param _min Minimum amount required in DCHF for the capital raise.\r\n     * @param _max Maximum amount required in DCHF for the capital raise.\r\n     * @param _price DCHF price per share.\r\n     * @param _subscription Minimum amount in DCHF that is required for a subscription.\r\n     * @param _open Opening time in unix epoch time.\r\n     * @param _close Closing time in unix epoch time.\r\n     * @param _token Equity token associated to the capital raise.\r\n     * @return proxy address of raise contract.\r\n     */\r\n    function operatorProposal(\r\n        bytes32 _identifier,\r\n        bool _accept,\r\n        uint256 _min,\r\n        uint256 _max,\r\n        uint256 _price,\r\n        uint256 _subscription,\r\n        uint256 _decimals,\r\n        uint256 _open,\r\n        uint256 _close,\r\n        address _token\r\n    ) public onlyOperator returns (address proxy) {\r\n        Raise storage info = raise[_identifier];\r\n\r\n        require(info.implementation == address(0), \"RaiseFactory: already exists\");\r\n        require(info.issuer != address(0), \"RaiseFactory: issuer not existing\");\r\n\r\n        if (!_accept) {\r\n            delete raise[_identifier];\r\n            // solhint-disable-next-line not-rely-on-time\r\n            emit ProposalDeclined(info.issuer, _identifier, msg.sender, now);\r\n            return proxy;\r\n        }\r\n\r\n        proxy = ProxyDeployer.deployProxy(implementation, proxyAdmin, \"\");\r\n        RaiseDeployer.initializeRaise(\r\n            proxy,\r\n            dchf,\r\n            info.issuer,\r\n            _min,\r\n            _max,\r\n            _price,\r\n            _subscription,\r\n            _decimals,\r\n            _open,\r\n            _close,\r\n            getOperatorsContract(),\r\n            getRaiseOperatorsContract()\r\n        );\r\n\r\n        raise[_identifier].token = _token;\r\n        raise[_identifier].implementation = implementation;\r\n        raise[_identifier].proxy = proxy;\r\n\r\n        emit ProposalAccepted(info.issuer, _identifier, info.implementation, info.proxy, info.token);\r\n    }\r\n\r\n    /**\r\n     * @dev Update the raise implementation address used when deploying proxy contracts\r\n     * @param _implementation Address of the raise implementation contract address.\r\n     */\r\n    function updateImplementation(address _implementation) public onlyOperator {\r\n        implementation = _implementation;\r\n        emit UpdatedImplementation(_implementation);\r\n    }\r\n\r\n    /**\r\n     * @dev Update the proxy admin address used when deploying proxy contracts\r\n     * @param _proxyAdmin Address of the default proxy admin address.\r\n     */\r\n    function updateProxyAdmin(address _proxyAdmin) public {\r\n        require(msg.sender == proxyAdmin, \"RaiseFactory: caller not proxy admin\");\r\n        proxyAdmin = _proxyAdmin;\r\n        emit UpdatedProxyAdmin(proxyAdmin);\r\n    }\r\n\r\n    /**\r\n     * @param _identifier Unique identifier of raise.\r\n     * @return whether a implementation has been associated to a raise identifier\r\n     */\r\n    function implementationExists(bytes32 _identifier) public view returns (bool) {\r\n        return (raise[_identifier].implementation != address(0));\r\n    }\r\n\r\n    /**\r\n     * @param _identifier Unique identifier of raise.\r\n     * @return implementation and proxy address\r\n     */\r\n    function getImplementationAndProxy(bytes32 _identifier) public view returns (address, address) {\r\n        return (raise[_identifier].implementation, raise[_identifier].proxy);\r\n    }\r\n\r\n    /**\r\n     * @param _identifier Unique identifier of raise.\r\n     * @return token associated to capital raise identifier\r\n     */\r\n    function getToken(bytes32 _identifier) public view returns (address) {\r\n        return raise[_identifier].token;\r\n    }\r\n\r\n    /**\r\n     * @param _identifier Unique identifier of raise.\r\n     * @return issuer associated to a capital raise identifier\r\n     */\r\n    function getIssuer(bytes32 _identifier) public view returns (address) {\r\n        return raise[_identifier].issuer;\r\n    }\r\n}","ABI":"[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"issuer\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"identifier\",\"type\":\"bytes32\"}],\"name\":\"NewProposal\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operatorsAddress\",\"type\":\"address\"}],\"name\":\"OperatorsContractChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operatorsAddress\",\"type\":\"address\"}],\"name\":\"OperatorsContractPending\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"issuer\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"identifier\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"raise\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"proxy\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"ProposalAccepted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"issuer\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"identifier\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"ProposalDeclined\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"raiseOperatorsAddress\",\"type\":\"address\"}],\"name\":\"RaiseOperatorsContractChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"raiseOperatorsAddress\",\"type\":\"address\"}],\"name\":\"RaiseOperatorsContractPending\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"}],\"name\":\"UpdatedImplementation\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"proxyAdmin\",\"type\":\"address\"}],\"name\":\"UpdatedProxyAdmin\",\"type\":\"event\"},{\"constant\":false,\"inputs\":[],\"name\":\"confirmOperatorsContract\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"confirmRaiseOperatorsContract\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"dchf\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_identifier\",\"type\":\"bytes32\"}],\"name\":\"getImplementationAndProxy\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_identifier\",\"type\":\"bytes32\"}],\"name\":\"getIssuer\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getOperatorsContract\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getOperatorsPending\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getRaiseOperatorsContract\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getRaiseOperatorsPending\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_identifier\",\"type\":\"bytes32\"}],\"name\":\"getToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"implementation\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_identifier\",\"type\":\"bytes32\"}],\"name\":\"implementationExists\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"_dchf\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_baseOperators\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_raiseOperators\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_proxyAdmin\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_implementation\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_baseOperators\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_raiseOperators\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_baseOperators\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"isAdmin\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"isAdminOrSystem\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isInitialized\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"isInvestor\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"isIssuer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_contract\",\"type\":\"address\"}],\"name\":\"isMultisig\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"isOperator\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"isOperatorOrSystem\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"isRelay\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"isSystem\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_identifier\",\"type\":\"bytes32\"}],\"name\":\"newRaiseProposal\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_identifier\",\"type\":\"bytes32\"},{\"internalType\":\"bool\",\"name\":\"_accept\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"_min\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_max\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_price\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_subscription\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_decimals\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_open\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_close\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"operatorProposal\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"proxy\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"proxyAdmin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"raise\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"proxy\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"issuer\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_baseOperators\",\"type\":\"address\"}],\"name\":\"setOperatorsContract\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_raiseOperators\",\"type\":\"address\"}],\"name\":\"setRaiseOperatorsContract\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_implementation\",\"type\":\"address\"}],\"name\":\"updateImplementation\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_proxyAdmin\",\"type\":\"address\"}],\"name\":\"updateProxyAdmin\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"RaiseFactory","CompilerVersion":"v0.5.12+commit.7709ece9","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"ProxyDeployer:db3069eb173c10424de2a58b8e3650a2db7e2cb4;RaiseDeployer:d19b2c6a68dce187d2cb9c08d2b35f96924a76d4","LicenseType":"Apache-2.0","Proxy":"0","Implementation":"","SwarmSource":"bzzr://444a6d16fb2e05d9ad18a98a3e0dfcc828b791bb08466a01ccd3ca4db25f2bff"}]}