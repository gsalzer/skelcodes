{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/MoneyPool.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.3;\\n\\nimport '@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol';\\n\\nimport './libraries/DataStruct.sol';\\n\\nimport './logic/Index.sol';\\nimport './logic/Rate.sol';\\nimport './logic/Validation.sol';\\nimport './logic/AssetBond.sol';\\n\\nimport './interfaces/ILToken.sol';\\nimport './interfaces/IDToken.sol';\\nimport './interfaces/IMoneyPool.sol';\\nimport './interfaces/IIncentivePool.sol';\\nimport './interfaces/ITokenizer.sol';\\n\\nimport './MoneyPoolStorage.sol';\\n\\n/**\\n * @title Main contract for ELYFI version 1.\\n * @author ELYSIA\\n * @notice This is the first version of ELYFI. ELYFI has various contract interactions centered\\n * on the Money Pool Contract. Several tokens are issued or destroyed to indicate the status of\\n * participants, and all issuance and burn processes are carried out through the Money Pool Contract.\\n * The depositor and borrower should approve the ELYFI moneypool contract to move their AssetBond token\\n * or ERC20 tokens on their behalf.\\n * @dev Only admin can modify the variables and state of the moneypool\\n **/\\ncontract MoneyPool is IMoneyPool, MoneyPoolStorage {\\n  using SafeERC20 for IERC20;\\n  using Index for DataStruct.ReserveData;\\n  using Validation for DataStruct.ReserveData;\\n  using Rate for DataStruct.ReserveData;\\n  using AssetBond for DataStruct.AssetBondData;\\n\\n  constructor(uint256 maxReserveCount_, address connector) {\\n    _connector = IConnector(connector);\\n    _maxReserveCount = maxReserveCount_;\\n    _reserveCount += 1;\\n  }\\n\\n  /************ MoneyPool Deposit Functions ************/\\n\\n  /**\\n   * @notice By depositing virtual assets in the MoneyPool and supply liquidity, depositors can receive\\n   * interest accruing from the MoneyPool.The return on the deposit arises from the interest on real asset\\n   * backed loans. MoneyPool depositors who deposit certain cryptoassets receives LTokens equivalent to\\n   * the deposit amount. LTokens are backed by cryptoassets deposited in the MoneyPool in a 1:1 ratio.\\n   * @dev Deposits an amount of underlying asset and receive corresponding LTokens.\\n   * @param asset The address of the underlying asset to deposit\\n   * @param account The address that will receive the LToken\\n   * @param amount Deposit amount\\n   **/\\n  function deposit(\\n    address asset,\\n    address account,\\n    uint256 amount\\n  ) external override {\\n    DataStruct.ReserveData storage reserve = _reserves[asset];\\n\\n    Validation.validateDeposit(reserve, amount);\\n\\n    reserve.updateState(asset);\\n\\n    reserve.updateRates(asset, amount, 0);\\n\\n    IERC20(asset).safeTransferFrom(msg.sender, reserve.lTokenAddress, amount);\\n\\n    ILToken(reserve.lTokenAddress).mint(account, amount, reserve.lTokenInterestIndex);\\n\\n    emit Deposit(asset, account, amount);\\n  }\\n\\n  /**\\n   * @notice The depositors can seize their virtual assets deposited in the MoneyPool whenever they wish.\\n   * @dev Withdraws an amount of underlying asset from the reserve and burns the corresponding lTokens.\\n   * @param asset The address of the underlying asset to withdraw\\n   * @param account The address that will receive the underlying asset\\n   * @param amount Withdrawl amount\\n   **/\\n  function withdraw(\\n    address asset,\\n    address account,\\n    uint256 amount\\n  ) external override {\\n    DataStruct.ReserveData storage reserve = _reserves[asset];\\n\\n    uint256 userLTokenBalance = ILToken(reserve.lTokenAddress).balanceOf(msg.sender);\\n\\n    uint256 amountToWithdraw = amount;\\n\\n    if (amount == type(uint256).max) {\\n      amountToWithdraw = userLTokenBalance;\\n    }\\n\\n    Validation.validateWithdraw(reserve, asset, amountToWithdraw, userLTokenBalance);\\n\\n    reserve.updateState(asset);\\n\\n    reserve.updateRates(asset, 0, amountToWithdraw);\\n\\n    ILToken(reserve.lTokenAddress).burn(\\n      msg.sender,\\n      account,\\n      amountToWithdraw,\\n      reserve.lTokenInterestIndex\\n    );\\n\\n    emit Withdraw(asset, msg.sender, account, amountToWithdraw);\\n  }\\n\\n  /************ AssetBond Formation Functions ************/\\n\\n  /**\\n   * @notice The collateral service provider can take out a loan of value equivalent to the principal\\n   * recorded in the asset bond data. As asset bonds are deposited as collateral in the Money Pool\\n   * and loans are made, financial services that link real assets and cryptoassets can be achieved.\\n   * @dev Transfer asset bond from the collateral service provider to the moneypool and mint dTokens\\n   *  corresponding to principal. After that, transfer the underlying asset\\n   * @param asset The address of the underlying asset to withdraw\\n   * @param tokenId The id of the token to collateralize\\n   **/\\n  function borrow(address asset, uint256 tokenId) external override {\\n    require(_connector.isCollateralServiceProvider(msg.sender), 'OnlyCollateralServiceProvider');\\n    DataStruct.ReserveData storage reserve = _reserves[asset];\\n    DataStruct.AssetBondData memory assetBond = ITokenizer(reserve.tokenizerAddress)\\n    .getAssetBondData(tokenId);\\n\\n    uint256 borrowAmount = assetBond.principal;\\n    address receiver = assetBond.borrower;\\n\\n    Validation.validateBorrow(reserve, assetBond, asset, borrowAmount);\\n\\n    reserve.updateState(asset);\\n\\n    ITokenizer(reserve.tokenizerAddress).collateralizeAssetBond(\\n      msg.sender,\\n      tokenId,\\n      borrowAmount,\\n      reserve.borrowAPY\\n    );\\n\\n    IDToken(reserve.dTokenAddress).mint(msg.sender, receiver, borrowAmount, reserve.borrowAPY);\\n\\n    reserve.updateRates(asset, 0, borrowAmount);\\n\\n    ILToken(reserve.lTokenAddress).transferUnderlyingTo(receiver, borrowAmount);\\n\\n    emit Borrow(asset, msg.sender, receiver, tokenId, reserve.borrowAPY, borrowAmount);\\n  }\\n\\n  /**\\n   * @notice repays an amount of underlying asset from the reserve and burns the corresponding lTokens.\\n   * @dev Transfer total repayment of the underlying asset from msg.sender to the moneypool and\\n   * burn the corresponding amount of dTokens. Then release the asset bond token which is locked\\n   * in the moneypool and transfer it to the borrower. The total amount of transferred underlying asset\\n   * is the sum of the fee on the collateral service provider and debt on the moneypool\\n   * @param asset The address of the underlying asset to repay\\n   * @param tokenId The id of the token to retrieve\\n   **/\\n  function repay(address asset, uint256 tokenId) external override {\\n    DataStruct.ReserveData storage reserve = _reserves[asset];\\n    DataStruct.AssetBondData memory assetBond = ITokenizer(reserve.tokenizerAddress)\\n    .getAssetBondData(tokenId);\\n\\n    Validation.validateRepay(reserve, assetBond);\\n\\n    (uint256 accruedDebtOnMoneyPool, uint256 feeOnCollateralServiceProvider) = assetBond\\n    .getAssetBondDebtData();\\n\\n    uint256 totalRetrieveAmount = accruedDebtOnMoneyPool + feeOnCollateralServiceProvider;\\n\\n    reserve.updateState(asset);\\n\\n    IERC20(asset).safeTransferFrom(msg.sender, reserve.lTokenAddress, totalRetrieveAmount);\\n\\n    IDToken(reserve.dTokenAddress).burn(assetBond.borrower, accruedDebtOnMoneyPool);\\n\\n    reserve.updateRates(asset, totalRetrieveAmount, 0);\\n\\n    ITokenizer(reserve.tokenizerAddress).releaseAssetBond(assetBond.borrower, tokenId);\\n\\n    ILToken(reserve.lTokenAddress).mint(\\n      assetBond.collateralServiceProvider,\\n      feeOnCollateralServiceProvider,\\n      reserve.lTokenInterestIndex\\n    );\\n\\n    emit Repay(\\n      asset,\\n      assetBond.borrower,\\n      tokenId,\\n      accruedDebtOnMoneyPool,\\n      feeOnCollateralServiceProvider\\n    );\\n  }\\n\\n  function liquidate(address asset, uint256 tokenId) external override {\\n    require(_connector.isCollateralServiceProvider(msg.sender), 'OnlyCollateralServiceProvider');\\n    DataStruct.ReserveData storage reserve = _reserves[asset];\\n    DataStruct.AssetBondData memory assetBond = ITokenizer(reserve.tokenizerAddress)\\n    .getAssetBondData(tokenId);\\n\\n    Validation.validateLiquidation(reserve, assetBond);\\n\\n    (uint256 accruedDebtOnMoneyPool, uint256 feeOnCollateralServiceProvider) = assetBond\\n    .getAssetBondLiquidationData();\\n\\n    uint256 totalLiquidationAmount = accruedDebtOnMoneyPool + feeOnCollateralServiceProvider;\\n\\n    reserve.updateState(asset);\\n\\n    IDToken(reserve.dTokenAddress).burn(assetBond.borrower, accruedDebtOnMoneyPool);\\n\\n    reserve.updateRates(asset, totalLiquidationAmount, 0);\\n\\n    IERC20(asset).safeTransferFrom(msg.sender, reserve.lTokenAddress, totalLiquidationAmount);\\n\\n    ITokenizer(reserve.tokenizerAddress).liquidateAssetBond(msg.sender, tokenId);\\n\\n    ILToken(reserve.lTokenAddress).mint(\\n      assetBond.collateralServiceProvider,\\n      feeOnCollateralServiceProvider,\\n      reserve.lTokenInterestIndex\\n    );\\n\\n    emit Liquidation(\\n      asset,\\n      assetBond.borrower,\\n      tokenId,\\n      accruedDebtOnMoneyPool,\\n      feeOnCollateralServiceProvider\\n    );\\n  }\\n\\n  /************ View Functions ************/\\n\\n  /**\\n   * @notice LToken Index is an indicator of interest occurring and accrued to liquidity providers\\n   * who have provided liquidity to the Money Pool. LToken Index is calculated every time user activities\\n   * occur in the Money Pool, such as loans and repayments by Money Pool participants.\\n   * @param asset The address of the underlying asset of the reserve\\n   * @return The LToken interest index of reserve\\n   */\\n  function getLTokenInterestIndex(address asset) external view override returns (uint256) {\\n    return _reserves[asset].getLTokenInterestIndex();\\n  }\\n\\n  /**\\n   * @dev Returns the reserveData struct of underlying asset\\n   * @param asset The address of the underlying asset of the reserve\\n   * @return The state of the reserve\\n   **/\\n  function getReserveData(address asset)\\n    external\\n    view\\n    override\\n    returns (DataStruct.ReserveData memory)\\n  {\\n    return _reserves[asset];\\n  }\\n\\n  /************ Configuration Functions ************/\\n\\n  function addNewReserve(\\n    address asset,\\n    address lToken,\\n    address dToken,\\n    address interestModel,\\n    address tokenizer,\\n    address incentivePool,\\n    uint256 moneyPoolFactor_\\n  ) external override onlyMoneyPoolAdmin {\\n    DataStruct.ReserveData memory newReserveData = DataStruct.ReserveData({\\n      moneyPoolFactor: moneyPoolFactor_,\\n      lTokenInterestIndex: WadRayMath.ray(),\\n      borrowAPY: 0,\\n      depositAPY: 0,\\n      lastUpdateTimestamp: block.timestamp,\\n      lTokenAddress: lToken,\\n      dTokenAddress: dToken,\\n      interestModelAddress: interestModel,\\n      tokenizerAddress: tokenizer,\\n      id: 0,\\n      isPaused: false,\\n      isActivated: true\\n    });\\n\\n    _reserves[asset] = newReserveData;\\n    _addNewReserveToList(asset);\\n\\n    IIncentivePool(incentivePool).initializeIncentivePool(lToken);\\n\\n    emit NewReserve(\\n      asset,\\n      lToken,\\n      dToken,\\n      interestModel,\\n      tokenizer,\\n      incentivePool,\\n      moneyPoolFactor_\\n    );\\n  }\\n\\n  function _addNewReserveToList(address asset) internal {\\n    uint256 reserveCount = _reserveCount;\\n\\n    require(reserveCount < _maxReserveCount, 'MaxReserveCountExceeded');\\n\\n    require(_reserves[asset].id == 0, 'DigitalAssetAlreadyAdded');\\n\\n    _reserves[asset].id = uint8(reserveCount);\\n    _reservesList[reserveCount] = asset;\\n\\n    _reserveCount = reserveCount + 1;\\n  }\\n\\n  function deactivateMoneyPool(address asset) external onlyMoneyPoolAdmin {\\n    _reserves[asset].isActivated = false;\\n  }\\n\\n  function activateMoneyPool(address asset) external onlyMoneyPoolAdmin {\\n    _reserves[asset].isActivated = true;\\n  }\\n\\n  function pauseMoneyPool(address asset) external onlyMoneyPoolAdmin {\\n    _reserves[asset].isPaused = true;\\n  }\\n\\n  function unPauseMoneyPool(address asset) external onlyMoneyPoolAdmin {\\n    _reserves[asset].isPaused = false;\\n  }\\n\\n  function updateIncentivePool(address asset, address newIncentivePool)\\n    external\\n    onlyMoneyPoolAdmin\\n  {\\n    DataStruct.ReserveData storage reserve = _reserves[asset];\\n    ILToken(reserve.lTokenAddress).updateIncentivePool(newIncentivePool);\\n  }\\n\\n  modifier onlyMoneyPoolAdmin {\\n    require(_connector.isMoneyPoolAdmin(msg.sender), 'OnlyMoneyPoolAdmin');\\n    _;\\n  }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/libraries/DataStruct.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.3;\\n\\nlibrary DataStruct {\\n  /**\\n    @notice The main reserve data struct.\\n   */\\n  struct ReserveData {\\n    uint256 moneyPoolFactor;\\n    uint256 lTokenInterestIndex;\\n    uint256 borrowAPY;\\n    uint256 depositAPY;\\n    uint256 lastUpdateTimestamp;\\n    address lTokenAddress;\\n    address dTokenAddress;\\n    address interestModelAddress;\\n    address tokenizerAddress;\\n    uint8 id;\\n    bool isPaused;\\n    bool isActivated;\\n  }\\n\\n  /**\\n   * @notice The asset bond data struct.\\n   * @param ipfsHash The IPFS hash that contains the informations and contracts\\n   * between Collateral Service Provider and lender.\\n   * @param maturityTimestamp The amount of time measured in seconds that can elapse\\n   * before the NPL company liquidate the loan and seize the asset bond collateral.\\n   * @param borrower The address of the borrower.\\n   */\\n  struct AssetBondData {\\n    AssetBondState state;\\n    address borrower;\\n    address signer;\\n    address collateralServiceProvider;\\n    uint256 principal;\\n    uint256 debtCeiling;\\n    uint256 couponRate;\\n    uint256 interestRate;\\n    uint256 delinquencyRate;\\n    uint256 loanStartTimestamp;\\n    uint256 collateralizeTimestamp;\\n    uint256 maturityTimestamp;\\n    uint256 liquidationTimestamp;\\n    string ipfsHash; // refactor : gas\\n    string signerOpinionHash;\\n  }\\n\\n  struct AssetBondIdData {\\n    uint256 nonce;\\n    uint256 countryCode;\\n    uint256 collateralServiceProviderIdentificationNumber;\\n    uint256 collateralLatitude;\\n    uint256 collateralLatitudeSign;\\n    uint256 collateralLongitude;\\n    uint256 collateralLongitudeSign;\\n    uint256 collateralDetail;\\n    uint256 collateralCategory;\\n    uint256 productNumber;\\n  }\\n\\n  /**\\n    @notice The states of asset bond\\n    * EMPTY: After\\n    * SETTLED:\\n    * CONFIRMED:\\n    * COLLATERALIZED:\\n    * DELINQUENT:\\n    * REDEEMED:\\n    * LIQUIDATED:\\n   */\\n  enum AssetBondState {\\n    EMPTY,\\n    SETTLED,\\n    CONFIRMED,\\n    COLLATERALIZED,\\n    DELINQUENT,\\n    REDEEMED,\\n    LIQUIDATED\\n  }\\n}\\n\"\r\n    },\r\n    \"contracts/logic/Index.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.3;\\n\\nimport '../libraries/DataStruct.sol';\\nimport '../libraries/Math.sol';\\n\\nlibrary Index {\\n  using WadRayMath for uint256;\\n  using Index for DataStruct.ReserveData;\\n\\n  event LTokenIndexUpdated(address indexed asset, uint256 lTokenIndex, uint256 lastUpdateTimestamp);\\n\\n  /**\\n   * @dev Returns the ongoing normalized income for the reserve\\n   * A value of 1e27 means there is no income. As time passes, the income is accrued\\n   * A value of 2*1e27 means for each unit of asset one unit of income has been accrued\\n   * @param reserve The reserve object\\n   * @return the normalized income. expressed in ray\\n   **/\\n  function getLTokenInterestIndex(DataStruct.ReserveData storage reserve)\\n    public\\n    view\\n    returns (uint256)\\n  {\\n    uint256 lastUpdateTimestamp = reserve.lastUpdateTimestamp;\\n\\n    // strict equality is not dangerous here\\n    // divide-before-multiply dangerous-strict-equalities\\n    if (lastUpdateTimestamp == block.timestamp) {\\n      return reserve.lTokenInterestIndex;\\n    }\\n\\n    uint256 newIndex = Math\\n    .calculateLinearInterest(reserve.depositAPY, lastUpdateTimestamp, block.timestamp)\\n    .rayMul(reserve.lTokenInterestIndex);\\n\\n    return newIndex;\\n  }\\n\\n  /**\\n   * @dev Updates the reserve indexes and the timestamp\\n   * @param reserve The reserve to be updated\\n   **/\\n  function updateState(DataStruct.ReserveData storage reserve, address asset) internal {\\n    if (reserve.depositAPY == 0) {\\n      reserve.lastUpdateTimestamp = block.timestamp;\\n      return;\\n    }\\n\\n    reserve.lTokenInterestIndex = getLTokenInterestIndex(reserve);\\n    reserve.lastUpdateTimestamp = block.timestamp;\\n\\n    emit LTokenIndexUpdated(asset, reserve.lTokenInterestIndex, reserve.lastUpdateTimestamp);\\n  }\\n}\\n\"\r\n    },\r\n    \"contracts/logic/Rate.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.3;\\n\\nimport '../libraries/DataStruct.sol';\\nimport '../libraries/Math.sol';\\n\\nimport '../interfaces/ILToken.sol';\\nimport '../interfaces/IDToken.sol';\\nimport '../interfaces/ITokenizer.sol';\\nimport '../interfaces/IInterestRateModel.sol';\\n\\nlibrary Rate {\\n  using WadRayMath for uint256;\\n  using Rate for DataStruct.ReserveData;\\n\\n  event RatesUpdated(\\n    address indexed underlyingAssetAddress,\\n    uint256 lTokenIndex,\\n    uint256 borrowAPY,\\n    uint256 depositAPY,\\n    uint256 totalBorrow,\\n    uint256 totalDeposit\\n  );\\n\\n  struct UpdateRatesLocalVars {\\n    uint256 totalDToken;\\n    uint256 newBorrowAPY;\\n    uint256 newDepositAPY;\\n    uint256 averageBorrowAPY;\\n    uint256 totalVariableDebt;\\n  }\\n\\n  function updateRates(\\n    DataStruct.ReserveData storage reserve,\\n    address underlyingAssetAddress,\\n    uint256 depositAmount,\\n    uint256 borrowAmount\\n  ) public {\\n    UpdateRatesLocalVars memory vars;\\n\\n    vars.totalDToken = IDToken(reserve.dTokenAddress).totalSupply();\\n\\n    vars.averageBorrowAPY = IDToken(reserve.dTokenAddress).getTotalAverageRealAssetBorrowRate();\\n\\n    uint256 lTokenAssetBalance = IERC20(underlyingAssetAddress).balanceOf(reserve.lTokenAddress);\\n    (vars.newBorrowAPY, vars.newDepositAPY) = IInterestRateModel(reserve.interestModelAddress)\\n    .calculateRates(\\n      lTokenAssetBalance,\\n      vars.totalDToken,\\n      depositAmount,\\n      borrowAmount,\\n      reserve.moneyPoolFactor\\n    );\\n\\n    reserve.borrowAPY = vars.newBorrowAPY;\\n    reserve.depositAPY = vars.newDepositAPY;\\n\\n    emit RatesUpdated(\\n      underlyingAssetAddress,\\n      reserve.lTokenInterestIndex,\\n      vars.newBorrowAPY,\\n      vars.newDepositAPY,\\n      vars.totalDToken,\\n      lTokenAssetBalance + depositAmount - borrowAmount + vars.totalDToken\\n    );\\n  }\\n}\\n\"\r\n    },\r\n    \"contracts/logic/Validation.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.3;\\n\\nimport '../libraries/DataStruct.sol';\\nimport '../libraries/Math.sol';\\n\\nimport '../interfaces/ILToken.sol';\\n\\nlibrary Validation {\\n  using WadRayMath for uint256;\\n  using Validation for DataStruct.ReserveData;\\n\\n  /**\\n   * @dev Validate Deposit\\n   * Check reserve state\\n   * @param reserve The reserve object\\n   * @param amount Deposit amount\\n   **/\\n  function validateDeposit(DataStruct.ReserveData storage reserve, uint256 amount) public view {\\n    require(amount != 0, 'InvalidAmount');\\n    require(!reserve.isPaused, 'ReservePaused');\\n    require(reserve.isActivated, 'ReserveInactivated');\\n  }\\n\\n  /**\\n   * @dev Validate Withdraw\\n   * Check reserve state\\n   * Check user amount\\n   * Check user total debt(later)\\n   * @param reserve The reserve object\\n   * @param amount Withdraw amount\\n   **/\\n  function validateWithdraw(\\n    DataStruct.ReserveData storage reserve,\\n    address asset,\\n    uint256 amount,\\n    uint256 userLTokenBalance\\n  ) public view {\\n    require(amount != 0, 'InvalidAmount');\\n    require(!reserve.isPaused, 'ReservePaused');\\n    require(reserve.isActivated, 'ReserveInactivated');\\n    require(amount <= userLTokenBalance, 'InsufficientBalance');\\n    uint256 availableLiquidity = IERC20(asset).balanceOf(reserve.lTokenAddress);\\n    require(availableLiquidity >= amount, 'NotEnoughLiquidity');\\n  }\\n\\n  function validateBorrow(\\n    DataStruct.ReserveData storage reserve,\\n    DataStruct.AssetBondData memory assetBond,\\n    address asset,\\n    uint256 borrowAmount\\n  ) public view {\\n    require(!reserve.isPaused, 'ReservePaused');\\n    require(reserve.isActivated, 'ReserveInactivated');\\n    require(assetBond.state == DataStruct.AssetBondState.CONFIRMED, 'OnlySignedTokenBorrowAllowed');\\n    require(msg.sender == assetBond.collateralServiceProvider, 'OnlyOwnerBorrowAllowed');\\n    uint256 availableLiquidity = IERC20(asset).balanceOf(reserve.lTokenAddress);\\n    require(availableLiquidity >= borrowAmount, 'NotEnoughLiquidity');\\n    require(block.timestamp >= assetBond.loanStartTimestamp, 'NotTimeForLoanStart');\\n    require(assetBond.loanStartTimestamp + 18 hours >= block.timestamp, 'TimeOutForCollateralize');\\n  }\\n\\n  function validateLTokenTrasfer() internal pure {}\\n\\n  function validateRepay(\\n    DataStruct.ReserveData storage reserve,\\n    DataStruct.AssetBondData memory assetBond\\n  ) public view {\\n    require(reserve.isActivated, 'ReserveInactivated');\\n    require(block.timestamp < assetBond.liquidationTimestamp, 'LoanExpired');\\n    require(\\n      (assetBond.state == DataStruct.AssetBondState.COLLATERALIZED ||\\n        assetBond.state == DataStruct.AssetBondState.DELINQUENT),\\n      'NotRepayableState'\\n    );\\n  }\\n\\n  function validateLiquidation(\\n    DataStruct.ReserveData storage reserve,\\n    DataStruct.AssetBondData memory assetBond\\n  ) public view {\\n    require(reserve.isActivated, 'ReserveInactivated');\\n    require(assetBond.state == DataStruct.AssetBondState.LIQUIDATED, 'NotLiquidatbleState');\\n  }\\n\\n  function validateSignAssetBond(DataStruct.AssetBondData storage assetBond) public view {\\n    require(assetBond.state == DataStruct.AssetBondState.SETTLED, 'OnlySettledTokenSignAllowed');\\n    require(assetBond.signer == msg.sender, 'NotAllowedSigner');\\n  }\\n\\n  function validateSettleAssetBond(DataStruct.AssetBondData memory assetBond) public view {\\n    require(block.timestamp < assetBond.loanStartTimestamp, 'OnlySettledSigned');\\n    require(assetBond.loanStartTimestamp != assetBond.maturityTimestamp, 'LoanDurationInvalid');\\n  }\\n\\n  function validateTokenId(DataStruct.AssetBondIdData memory idData) internal pure {\\n    require(idData.collateralLatitude < 9000000, 'InvaildLatitude');\\n    require(idData.collateralLongitude < 18000000, 'InvaildLongitude');\\n  }\\n}\\n\"\r\n    },\r\n    \"contracts/logic/AssetBond.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.3;\\n\\nimport '../libraries/DataStruct.sol';\\nimport '../libraries/Math.sol';\\nimport '../libraries/WadRayMath.sol';\\nimport '../libraries/TimeConverter.sol';\\n\\nlibrary AssetBond {\\n  using WadRayMath for uint256;\\n  using AssetBond for DataStruct.AssetBondData;\\n\\n  uint256 constant NONCE = 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFC00;\\n  uint256 constant COUNTRY_CODE =\\n    0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFC003FF;\\n  uint256 constant COLLATERAL_SERVICE_PROVIDER_IDENTIFICATION_NUMBER =\\n    0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0000000000003FFFFF;\\n  uint256 constant COLLATERAL_LATITUDE =\\n    0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0000000FFFFFFFFFFFFFFFFFF;\\n  uint256 constant COLLATERAL_LATITUDE_SIGNS =\\n    0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEFFFFFFFFFFFFFFFFFFFFFFFFF;\\n  uint256 constant COLLATERAL_LONGITUDE =\\n    0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0000001FFFFFFFFFFFFFFFFFFFFFFFFF;\\n  uint256 constant COLLATERAL_LONGITUDE_SIGNS =\\n    0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFDFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\\n  uint256 constant COLLATERAL_DETAILS =\\n    0xFFFFFFFFFFFFFFFFFFFFFC0000000003FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\\n  uint256 constant COLLATERAL_CATEGORY =\\n    0xFFFFFFFFFFFFFFFFFFF003FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\\n  uint256 constant PRODUCT_NUMBER =\\n    0xFFFFFFFFFFFFFFFFC00FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\\n\\n  uint256 constant NONCE_START = 0;\\n  uint256 constant COUNTRY_CODE_START = 10;\\n  uint256 constant COLLATERAL_SERVICE_PROVIDER_IDENTIFICATION_NUMBER_START = 22;\\n  uint256 constant COLLATERAL_LATITUDE_START = 72;\\n  uint256 constant COLLATERAL_LATITUDE_SIGNS_START = 100;\\n  uint256 constant COLLATERAL_LONGITUDE_START = 101;\\n  uint256 constant COLLATERAL_LONGITUDE_SIGNS_START = 129;\\n  uint256 constant COLLATERAL_DETAILS_START = 130;\\n  uint256 constant COLLATERAL_CATEGORY_START = 170;\\n  uint256 constant PRODUCT_NUMBER_START = 180;\\n\\n  function parseAssetBondId(uint256 tokenId)\\n    public\\n    pure\\n    returns (DataStruct.AssetBondIdData memory)\\n  {\\n    DataStruct.AssetBondIdData memory vars;\\n    vars.nonce = tokenId & ~NONCE;\\n    vars.countryCode = (tokenId & ~COUNTRY_CODE) >> COUNTRY_CODE_START;\\n    vars.collateralServiceProviderIdentificationNumber =\\n      (tokenId & ~COLLATERAL_SERVICE_PROVIDER_IDENTIFICATION_NUMBER) >>\\n      COLLATERAL_SERVICE_PROVIDER_IDENTIFICATION_NUMBER_START;\\n    vars.collateralLatitude = (tokenId & ~COLLATERAL_LATITUDE) >> COLLATERAL_LATITUDE_START;\\n    vars.collateralLatitudeSign =\\n      (tokenId & ~COLLATERAL_LATITUDE_SIGNS) >>\\n      COLLATERAL_LATITUDE_SIGNS_START;\\n    vars.collateralLongitude = (tokenId & ~COLLATERAL_LONGITUDE) >> COLLATERAL_LONGITUDE_START;\\n    vars.collateralLongitudeSign =\\n      (tokenId & ~COLLATERAL_LONGITUDE_SIGNS) >>\\n      COLLATERAL_LONGITUDE_SIGNS_START;\\n    vars.collateralDetail = (tokenId & ~COLLATERAL_DETAILS) >> COLLATERAL_DETAILS_START;\\n    vars.collateralCategory = (tokenId & ~COLLATERAL_CATEGORY) >> COLLATERAL_CATEGORY_START;\\n    vars.productNumber = (tokenId & ~PRODUCT_NUMBER) >> PRODUCT_NUMBER_START;\\n\\n    return vars;\\n  }\\n\\n  function getAssetBondDebtData(DataStruct.AssetBondData memory assetBondData)\\n    public\\n    view\\n    returns (uint256, uint256)\\n  {\\n    if (assetBondData.state != DataStruct.AssetBondState.COLLATERALIZED) {\\n      return (0, 0);\\n    }\\n\\n    uint256 accruedDebtOnMoneyPool = Math\\n    .calculateCompoundedInterest(\\n      assetBondData.interestRate,\\n      assetBondData.collateralizeTimestamp,\\n      block.timestamp\\n    ).rayMul(assetBondData.principal);\\n\\n    uint256 feeOnCollateralServiceProvider = calculateFeeOnRepayment(\\n      assetBondData,\\n      block.timestamp\\n    );\\n\\n    return (accruedDebtOnMoneyPool, feeOnCollateralServiceProvider);\\n  }\\n\\n  struct CalculateFeeOnRepaymentLocalVars {\\n    TimeConverter.DateTime paymentDateTimeStruct;\\n    uint256 paymentDate;\\n    uint256 firstTermRate;\\n    uint256 secondTermRate;\\n    uint256 secondTermOverdueRate;\\n    uint256 thirdTermRate;\\n    uint256 totalRate;\\n  }\\n\\n  function calculateFeeOnRepayment(\\n    DataStruct.AssetBondData memory assetBondData,\\n    uint256 paymentTimestamp\\n  ) internal pure returns (uint256) {\\n    CalculateFeeOnRepaymentLocalVars memory vars;\\n\\n    vars.firstTermRate = Math.calculateCompoundedInterest(\\n      assetBondData.couponRate,\\n      assetBondData.loanStartTimestamp,\\n      assetBondData.collateralizeTimestamp\\n    );\\n\\n    vars.paymentDateTimeStruct = TimeConverter.parseTimestamp(paymentTimestamp);\\n    vars.paymentDate = TimeConverter.toTimestamp(\\n      vars.paymentDateTimeStruct.year,\\n      vars.paymentDateTimeStruct.month,\\n      vars.paymentDateTimeStruct.day + 1\\n    );\\n\\n    if (paymentTimestamp <= assetBondData.liquidationTimestamp) {\\n      vars.secondTermRate =\\n        Math.calculateCompoundedInterest(\\n          assetBondData.couponRate - assetBondData.interestRate,\\n          assetBondData.collateralizeTimestamp,\\n          paymentTimestamp\\n        ) -\\n        WadRayMath.ray();\\n      vars.thirdTermRate =\\n        Math.calculateCompoundedInterest(\\n          assetBondData.couponRate,\\n          paymentTimestamp,\\n          vars.paymentDate\\n        ) -\\n        WadRayMath.ray();\\n\\n      vars.totalRate = vars.firstTermRate + vars.secondTermRate + vars.thirdTermRate;\\n\\n      return assetBondData.principal.rayMul(vars.totalRate) - assetBondData.principal;\\n    }\\n\\n    vars.secondTermRate =\\n      Math.calculateCompoundedInterest(\\n        assetBondData.couponRate - assetBondData.interestRate,\\n        assetBondData.collateralizeTimestamp,\\n        assetBondData.maturityTimestamp\\n      ) -\\n      WadRayMath.ray();\\n    vars.secondTermOverdueRate =\\n      Math.calculateCompoundedInterest(\\n        assetBondData.couponRate + assetBondData.delinquencyRate - assetBondData.interestRate,\\n        assetBondData.maturityTimestamp,\\n        paymentTimestamp\\n      ) -\\n      WadRayMath.ray();\\n    vars.thirdTermRate =\\n      Math.calculateCompoundedInterest(\\n        assetBondData.couponRate + assetBondData.delinquencyRate,\\n        paymentTimestamp,\\n        vars.paymentDate\\n      ) -\\n      WadRayMath.ray();\\n\\n    vars.totalRate =\\n      vars.firstTermRate +\\n      vars.secondTermRate +\\n      vars.secondTermOverdueRate +\\n      vars.thirdTermRate;\\n\\n    return assetBondData.principal.rayMul(vars.totalRate) - assetBondData.principal;\\n  }\\n\\n  function getAssetBondLiquidationData(DataStruct.AssetBondData memory assetBondData)\\n    internal\\n    view\\n    returns (uint256, uint256)\\n  {\\n    uint256 accruedDebtOnMoneyPool = Math\\n    .calculateCompoundedInterest(\\n      assetBondData.interestRate,\\n      assetBondData.collateralizeTimestamp,\\n      block.timestamp\\n    ).rayMul(assetBondData.principal);\\n\\n    uint256 feeOnCollateralServiceProvider = calculateDebtAmountToLiquidation(\\n      assetBondData,\\n      block.timestamp\\n    );\\n\\n    return (accruedDebtOnMoneyPool, feeOnCollateralServiceProvider);\\n  }\\n\\n  struct CalculateDebtAmountToLiquidationLocalVars {\\n    TimeConverter.DateTime paymentDateTimeStruct;\\n    uint256 paymentDate;\\n    uint256 firstTermRate;\\n    uint256 secondTermRate;\\n    uint256 totalRate;\\n  }\\n\\n  function calculateDebtAmountToLiquidation(\\n    DataStruct.AssetBondData memory assetBondData,\\n    uint256 paymentTimestamp\\n  ) internal pure returns (uint256) {\\n    CalculateDebtAmountToLiquidationLocalVars memory vars;\\n    vars.firstTermRate = Math.calculateCompoundedInterest(\\n      assetBondData.couponRate,\\n      assetBondData.loanStartTimestamp,\\n      assetBondData.maturityTimestamp\\n    );\\n\\n    vars.paymentDateTimeStruct = TimeConverter.parseTimestamp(paymentTimestamp);\\n    vars.paymentDate = TimeConverter.toTimestamp(\\n      vars.paymentDateTimeStruct.year,\\n      vars.paymentDateTimeStruct.month,\\n      vars.paymentDateTimeStruct.day + 1\\n    );\\n\\n    vars.secondTermRate =\\n      Math.calculateCompoundedInterest(\\n        assetBondData.couponRate + assetBondData.delinquencyRate,\\n        assetBondData.maturityTimestamp,\\n        vars.paymentDate\\n      ) -\\n      WadRayMath.ray();\\n    vars.totalRate = vars.firstTermRate + vars.secondTermRate;\\n\\n    return assetBondData.principal.rayMul(vars.totalRate) - assetBondData.principal;\\n  }\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/ILToken.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.3;\\n\\nimport '@openzeppelin/contracts/token/ERC20/IERC20.sol';\\n\\ninterface ILToken is IERC20 {\\n  /**\\n   * @dev Emitted after lTokens are minted\\n   * @param account The receiver of minted lToken\\n   * @param amount The amount being minted\\n   * @param index The new liquidity index of the reserve\\n   **/\\n  event Mint(address indexed account, uint256 amount, uint256 index);\\n\\n  /**\\n   * @dev Emitted after lTokens are burned\\n   * @param account The owner of the lTokens, getting them burned\\n   * @param underlyingAssetReceiver The address that will receive the underlying asset\\n   * @param amount The amount being burned\\n   * @param index The new liquidity index of the reserve\\n   **/\\n  event Burn(\\n    address indexed account,\\n    address indexed underlyingAssetReceiver,\\n    uint256 amount,\\n    uint256 index\\n  );\\n\\n  /**\\n   * @dev Emitted during the transfer action\\n   * @param account The account whose tokens are being transferred\\n   * @param to The recipient\\n   * @param amount The amount being transferred\\n   * @param index The new liquidity index of the reserve\\n   **/\\n  event BalanceTransfer(address indexed account, address indexed to, uint256 amount, uint256 index);\\n\\n  function mint(\\n    address account,\\n    uint256 amount,\\n    uint256 index\\n  ) external;\\n\\n  /**\\n   * @dev Burns lTokens account `account` and sends the equivalent amount of underlying to `receiver`\\n   * @param account The owner of the lTokens, getting them burned\\n   * @param receiver The address that will receive the underlying\\n   * @param amount The amount being burned\\n   * @param index The new liquidity index of the reserve\\n   **/\\n  function burn(\\n    address account,\\n    address receiver,\\n    uint256 amount,\\n    uint256 index\\n  ) external;\\n\\n  /**\\n   * @dev Returns the address of the underlying asset of this LTokens (E.g. WETH for aWETH)\\n   **/\\n  function getUnderlyingAsset() external view returns (address);\\n\\n  function implicitBalanceOf(address account) external view returns (uint256);\\n\\n  function implicitTotalSupply() external view returns (uint256);\\n\\n  function transferUnderlyingTo(address underlyingAssetReceiver, uint256 amount) external;\\n\\n  function updateIncentivePool(address newIncentivePool) external;\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IDToken.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.3;\\n\\nimport '@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol';\\n\\ninterface IDToken is IERC20Metadata {\\n  /**\\n   * @dev Emitted when new stable debt is minted\\n   * @param account The address of the account who triggered the minting\\n   * @param receiver The recipient of stable debt tokens\\n   * @param amount The amount minted\\n   * @param currentBalance The current balance of the account\\n   * @param balanceIncrease The increase in balance since the last action of the account\\n   * @param newRate The rate of the debt after the minting\\n   * @param avgStableRate The new average stable rate after the minting\\n   * @param newTotalSupply The new total supply of the stable debt token after the action\\n   **/\\n  event Mint(\\n    address indexed account,\\n    address indexed receiver,\\n    uint256 amount,\\n    uint256 currentBalance,\\n    uint256 balanceIncrease,\\n    uint256 newRate,\\n    uint256 avgStableRate,\\n    uint256 newTotalSupply\\n  );\\n\\n  /**\\n   * @dev Emitted when new stable debt is burned\\n   * @param account The address of the account\\n   * @param amount The amount being burned\\n   * @param currentBalance The current balance of the account\\n   * @param balanceIncrease The the increase in balance since the last action of the account\\n   * @param avgStableRate The new average stable rate after the burning\\n   * @param newTotalSupply The new total supply of the stable debt token after the action\\n   **/\\n  event Burn(\\n    address indexed account,\\n    uint256 amount,\\n    uint256 currentBalance,\\n    uint256 balanceIncrease,\\n    uint256 avgStableRate,\\n    uint256 newTotalSupply\\n  );\\n\\n  /**\\n   * @dev Mints debt token to the `receiver` address.\\n   * - The resulting rate is the weighted average between the rate of the new debt\\n   * and the rate of the previous debt\\n   * @param account The address receiving the borrowed underlying, being the delegatee in case\\n   * of credit delegate, or same as `receiver` otherwise\\n   * @param receiver The address receiving the debt tokens\\n   * @param amount The amount of debt tokens to mint\\n   * @param rate The rate of the debt being minted\\n   **/\\n  function mint(\\n    address account,\\n    address receiver,\\n    uint256 amount,\\n    uint256 rate\\n  ) external;\\n\\n  /**\\n   * @dev Burns debt of `account`\\n   * - The resulting rate is the weighted average between the rate of the new debt\\n   * and the rate of the previous debt\\n   * @param account The address of the account getting his debt burned\\n   * @param amount The amount of debt tokens getting burned\\n   **/\\n  function burn(address account, uint256 amount) external;\\n\\n  /**\\n   * @dev Returns the average rate of all the stable rate loans.\\n   * @return The average stable rate\\n   **/\\n  function getTotalAverageRealAssetBorrowRate() external view returns (uint256);\\n\\n  /**\\n   * @dev Returns the stable rate of the account debt\\n   * @return The stable rate of the account\\n   **/\\n  function getUserAverageRealAssetBorrowRate(address account) external view returns (uint256);\\n\\n  /**\\n   * @dev Returns the timestamp of the last update of the account\\n   * @return The timestamp\\n   **/\\n  function getUserLastUpdateTimestamp(address account) external view returns (uint256);\\n\\n  /**\\n   * @dev Returns the principal, the total supply and the average stable rate\\n   **/\\n  function getDTokenData()\\n    external\\n    view\\n    returns (\\n      uint256,\\n      uint256,\\n      uint256,\\n      uint256\\n    );\\n\\n  /**\\n   * @dev Returns the timestamp of the last update of the total supply\\n   * @return The timestamp\\n   **/\\n  function getTotalSupplyLastUpdated() external view returns (uint256);\\n\\n  /**\\n   * @dev Returns the total supply and the average stable rate\\n   **/\\n  function getTotalSupplyAndAvgRate() external view returns (uint256, uint256);\\n\\n  /**\\n   * @dev Returns the principal debt balance of the account\\n   * @return The debt balance of the account since the last burn/mint action\\n   **/\\n  function principalBalanceOf(address account) external view returns (uint256);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IMoneyPool.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.3;\\n\\nimport '../libraries/DataStruct.sol';\\n\\ninterface IMoneyPool {\\n  event NewReserve(\\n    address indexed asset,\\n    address lToken,\\n    address dToken,\\n    address interestModel,\\n    address tokenizer,\\n    address incentivePool,\\n    uint256 moneyPoolFactor\\n  );\\n\\n  event Deposit(address indexed asset, address indexed account, uint256 amount);\\n\\n  event Withdraw(\\n    address indexed asset,\\n    address indexed account,\\n    address indexed to,\\n    uint256 amount\\n  );\\n\\n  event Borrow(\\n    address indexed asset,\\n    address indexed collateralServiceProvider,\\n    address indexed borrower,\\n    uint256 tokenId,\\n    uint256 borrowAPY,\\n    uint256 borrowAmount\\n  );\\n\\n  event Repay(\\n    address indexed asset,\\n    address indexed borrower,\\n    uint256 tokenId,\\n    uint256 userDTokenBalance,\\n    uint256 feeOnCollateralServiceProvider\\n  );\\n\\n  event Liquidation(\\n    address indexed asset,\\n    address indexed borrower,\\n    uint256 tokenId,\\n    uint256 userDTokenBalance,\\n    uint256 feeOnCollateralServiceProvider\\n  );\\n\\n  function deposit(\\n    address asset,\\n    address account,\\n    uint256 amount\\n  ) external;\\n\\n  function withdraw(\\n    address asset,\\n    address account,\\n    uint256 amount\\n  ) external;\\n\\n  function borrow(address asset, uint256 tokenID) external;\\n\\n  function repay(address asset, uint256 tokenId) external;\\n\\n  function liquidate(address asset, uint256 tokenId) external;\\n\\n  function getLTokenInterestIndex(address asset) external view returns (uint256);\\n\\n  function getReserveData(address asset) external view returns (DataStruct.ReserveData memory);\\n\\n  function addNewReserve(\\n    address asset,\\n    address lToken,\\n    address dToken,\\n    address interestModel,\\n    address tokenizer,\\n    address incentivePool,\\n    uint256 moneyPoolFactor_\\n  ) external;\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IIncentivePool.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.3;\\n\\nimport '../libraries/DataStruct.sol';\\n\\ninterface IIncentivePool {\\n  event ClaimIncentive(address indexed user, uint256 claimedIncentive, uint256 userIncentiveIndex);\\n\\n  event UpdateIncentivePool(address indexed user, uint256 accruedIncentive, uint256 incentiveIndex);\\n\\n  event IncentivePoolEnded();\\n\\n  event RewardPerSecondUpdated(uint256 newAmountPerSecond);\\n\\n  event IncentiveEndTimestampUpdated(uint256 newEndTimestamp);\\n\\n  function initializeIncentivePool(address lToken) external;\\n\\n  function setAmountPerSecond(uint256 newAmountPerSecond) external;\\n\\n  /**\\n   * @notice Admin can update incentive pool end timestamp\\n   */\\n  function setEndTimestamp(uint256 newEndTimestamp) external;\\n\\n  function updateIncentivePool(address user) external;\\n\\n  function beforeTokenTransfer(address from, address to) external;\\n\\n  function claimIncentive() external;\\n\\n  function withdrawResidue() external;\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/ITokenizer.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.3;\\n\\nimport '@openzeppelin/contracts/token/ERC721/IERC721.sol';\\nimport '../libraries/DataStruct.sol';\\n\\ninterface ITokenizer is IERC721 {\\n  /**\\n   * @notice Emitted when a collateral service provider mints an empty asset bond token.\\n   * @param account The address of collateral service provider who minted\\n   * @param tokenId The id of minted token\\n   **/\\n  event EmptyAssetBondMinted(address indexed account, uint256 tokenId);\\n\\n  /**\\n   * @notice Emitted when a collateral service provider mints an empty asset bond token.\\n   **/\\n  event AssetBondSettled(\\n    address indexed borrower,\\n    address indexed signer,\\n    uint256 tokenId,\\n    uint256 principal,\\n    uint256 couponRate,\\n    uint256 delinquencyRate,\\n    uint256 debtCeiling,\\n    uint256 maturityTimestamp,\\n    uint256 liquidationTimestamp,\\n    uint256 loanStartTimestamp,\\n    string ifpsHash\\n  );\\n\\n  event AssetBondSigned(address indexed signer, uint256 tokenId, string signerOpinionHash);\\n\\n  event AssetBondCollateralized(\\n    address indexed account,\\n    uint256 tokenId,\\n    uint256 borrowAmount,\\n    uint256 interestRate\\n  );\\n\\n  event AssetBondReleased(address indexed borrower, uint256 tokenId);\\n\\n  event AssetBondLiquidated(address indexed liquidator, uint256 tokenId);\\n\\n  function mintAssetBond(address account, uint256 id) external;\\n\\n  function collateralizeAssetBond(\\n    address collateralServiceProvider,\\n    uint256 tokenId,\\n    uint256 borrowAmount,\\n    uint256 borrowAPY\\n  ) external;\\n\\n  function releaseAssetBond(address account, uint256 tokenId) external;\\n\\n  function liquidateAssetBond(address account, uint256 tokenId) external;\\n\\n  function getAssetBondIdData(uint256 tokenId)\\n    external\\n    view\\n    returns (DataStruct.AssetBondIdData memory);\\n\\n  function getAssetBondData(uint256 tokenId)\\n    external\\n    view\\n    returns (DataStruct.AssetBondData memory);\\n\\n  function getAssetBondDebtData(uint256 tokenId) external view returns (uint256, uint256);\\n\\n  function getMinter(uint256 tokenId) external view returns (address);\\n}\\n\"\r\n    },\r\n    \"contracts/MoneyPoolStorage.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.3;\\n\\nimport './libraries/DataStruct.sol';\\n\\nimport './logic/Index.sol';\\n\\nimport './interfaces/IConnector.sol';\\n\\ncontract MoneyPoolStorage {\\n  using Index for DataStruct.ReserveData;\\n\\n  mapping(address => DataStruct.ReserveData) internal _reserves;\\n\\n  mapping(uint256 => address) internal _reservesList;\\n\\n  uint256 internal _reserveCount;\\n\\n  uint256 internal _maxReserveCount;\\n\\n  IConnector internal _connector;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/libraries/Math.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.3;\\n\\nimport './WadRayMath.sol';\\n\\nlibrary Math {\\n  using WadRayMath for uint256;\\n\\n  uint256 internal constant SECONDSPERYEAR = 365 days;\\n\\n  function calculateLinearInterest(\\n    uint256 rate,\\n    uint256 lastUpdateTimestamp,\\n    uint256 currentTimestamp\\n  ) internal pure returns (uint256) {\\n    uint256 timeDelta = currentTimestamp - uint256(lastUpdateTimestamp);\\n\\n    return ((rate * timeDelta) / SECONDSPERYEAR) + WadRayMath.ray();\\n  }\\n\\n  /**\\n   * @notice Author : AAVE\\n   * @dev Function to calculate the interest using a compounded interest rate formula\\n   * To avoid expensive exponentiation, the calculation is performed using a binomial approximation:\\n   *  (1+x)^n = 1+n*x+[n/2*(n-1)]*x^2+[n/6*(n-1)*(n-2)*x^3...\\n   *\\n   * The approximation slightly underpays liquidity providers and undercharges borrowers, with the advantage of great gas cost reductions\\n   * The whitepaper contains reference to the approximation and a table showing the margin of error per different time periods\\n   *\\n   * @param rate The interest rate, in ray\\n   * @param lastUpdateTimestamp The timestamp of the last update of the interest\\n   * @return The interest rate compounded during the timeDelta, in ray\\n   **/\\n  function calculateCompoundedInterest(\\n    uint256 rate,\\n    uint256 lastUpdateTimestamp,\\n    uint256 currentTimestamp\\n  ) internal pure returns (uint256) {\\n    //solium-disable-next-line\\n    uint256 exp = currentTimestamp - lastUpdateTimestamp;\\n\\n    if (exp == 0) {\\n      return WadRayMath.ray();\\n    }\\n\\n    uint256 expMinusOne = exp - 1;\\n\\n    uint256 expMinusTwo = exp > 2 ? exp - 2 : 0;\\n\\n    // loss of precision is endurable\\n    // slither-disable-next-line divide-before-multiply\\n    uint256 ratePerSecond = rate / SECONDSPERYEAR;\\n\\n    uint256 basePowerTwo = ratePerSecond.rayMul(ratePerSecond);\\n    uint256 basePowerThree = basePowerTwo.rayMul(ratePerSecond);\\n\\n    uint256 secondTerm = (exp * expMinusOne * basePowerTwo) / 2;\\n    uint256 thirdTerm = (exp * expMinusOne * expMinusTwo * basePowerThree) / 6;\\n\\n    return WadRayMath.ray() + (ratePerSecond * exp) + secondTerm + thirdTerm;\\n  }\\n\\n  function calculateRateInIncreasingBalance(\\n    uint256 averageRate,\\n    uint256 totalBalance,\\n    uint256 amountIn,\\n    uint256 rate\\n  ) internal pure returns (uint256, uint256) {\\n    uint256 weightedAverageRate = totalBalance.wadToRay().rayMul(averageRate);\\n    uint256 weightedAmountRate = amountIn.wadToRay().rayMul(rate);\\n\\n    uint256 newTotalBalance = totalBalance + amountIn;\\n    uint256 newAverageRate = (weightedAverageRate + weightedAmountRate).rayDiv(\\n      newTotalBalance.wadToRay()\\n    );\\n\\n    return (newTotalBalance, newAverageRate);\\n  }\\n\\n  function calculateRateInDecreasingBalance(\\n    uint256 averageRate,\\n    uint256 totalBalance,\\n    uint256 amountOut,\\n    uint256 rate\\n  ) internal pure returns (uint256, uint256) {\\n    // if decreasing amount exceeds totalBalance,\\n    // overall rate and balacne would be set 0\\n    if (totalBalance <= amountOut) {\\n      return (0, 0);\\n    }\\n\\n    uint256 weightedAverageRate = totalBalance.wadToRay().rayMul(averageRate);\\n    uint256 weightedAmountRate = amountOut.wadToRay().rayMul(rate);\\n\\n    if (weightedAverageRate <= weightedAmountRate) {\\n      return (0, 0);\\n    }\\n\\n    uint256 newTotalBalance = totalBalance - amountOut;\\n\\n    uint256 newAverageRate = (weightedAverageRate - weightedAmountRate).rayDiv(\\n      newTotalBalance.wadToRay()\\n    );\\n\\n    return (newTotalBalance, newAverageRate);\\n  }\\n}\\n\"\r\n    },\r\n    \"contracts/libraries/WadRayMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.3;\\n\\n/**\\n * @title WadRayMath library\\n * @author Aave\\n * @dev Provides mul and div function for wads (decimal numbers with 18 digits precision) and rays (decimals with 27 digits)\\n **/\\n\\nlibrary WadRayMath {\\n  uint256 internal constant WAD = 1e18;\\n  uint256 internal constant halfWAD = WAD / 2;\\n\\n  uint256 internal constant RAY = 1e27;\\n  uint256 internal constant halfRAY = RAY / 2;\\n\\n  uint256 internal constant WAD_RAY_RATIO = 1e9;\\n\\n  /**\\n   * @return One ray, 1e27\\n   **/\\n  function ray() internal pure returns (uint256) {\\n    return RAY;\\n  }\\n\\n  /**\\n   * @return One wad, 1e18\\n   **/\\n\\n  function wad() internal pure returns (uint256) {\\n    return WAD;\\n  }\\n\\n  /**\\n   * @return Half ray, 1e27/2\\n   **/\\n  function halfRay() internal pure returns (uint256) {\\n    return halfRAY;\\n  }\\n\\n  /**\\n   * @return Half ray, 1e18/2\\n   **/\\n  function halfWad() internal pure returns (uint256) {\\n    return halfWAD;\\n  }\\n\\n  /**\\n   * @dev Multiplies two wad, rounding half up to the nearest wad\\n   * @param a Wad\\n   * @param b Wad\\n   * @return The result of a*b, in wad\\n   **/\\n  function wadMul(uint256 a, uint256 b) internal pure returns (uint256) {\\n    if (a == 0 || b == 0) {\\n      return 0;\\n    }\\n    return (a * b + halfWAD) / WAD;\\n  }\\n\\n  /**\\n   * @dev Divides two wad, rounding half up to the nearest wad\\n   * @param a Wad\\n   * @param b Wad\\n   * @return The result of a/b, in wad\\n   **/\\n  function wadDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n    require(b != 0, 'Division by Zero');\\n    uint256 halfB = b / 2;\\n    return (a * WAD + halfB) / b;\\n  }\\n\\n  /**\\n   * @dev Multiplies two ray, rounding half up to the nearest ray\\n   * @param a Ray\\n   * @param b Ray\\n   * @return The result of a*b, in ray\\n   **/\\n  function rayMul(uint256 a, uint256 b) internal pure returns (uint256) {\\n    if (a == 0 || b == 0) {\\n      return 0;\\n    }\\n    return (a * b + halfRAY) / RAY;\\n  }\\n\\n  /**\\n   * @dev Divides two ray, rounding half up to the nearest ray\\n   * @param a Ray\\n   * @param b Ray\\n   * @return The result of a/b, in ray\\n   **/\\n  function rayDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n    require(b != 0, 'Division by Zero');\\n    uint256 halfB = b / 2;\\n    return (a * RAY + halfB) / b;\\n  }\\n\\n  /**\\n   * @dev Casts ray down to wad\\n   * @param a Ray\\n   * @return a casted to wad, rounded half up to the nearest wad\\n   **/\\n  function rayToWad(uint256 a) internal pure returns (uint256) {\\n    uint256 halfRatio = WAD_RAY_RATIO / 2;\\n    uint256 result = halfRatio + a;\\n    return result / WAD_RAY_RATIO;\\n  }\\n\\n  /**\\n   * @dev Converts wad up to ray\\n   * @param a Wad\\n   * @return a converted in ray\\n   **/\\n  function wadToRay(uint256 a) internal pure returns (uint256) {\\n    uint256 result = a * WAD_RAY_RATIO;\\n    return result;\\n  }\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IInterestRateModel.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.3;\\n\\nimport '../libraries/DataStruct.sol';\\n\\ninterface IInterestRateModel {\\n  function calculateRates(\\n    uint256 lTokenAssetBalance,\\n    uint256 totalDTokenBalance,\\n    uint256 depositAmount,\\n    uint256 borrowAmount,\\n    uint256 moneyPoolFactor\\n  ) external view returns (uint256, uint256);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/IERC721.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/introspection/IERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"contracts/libraries/TimeConverter.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.3;\\n\\n/**\\n * @title Ethereum timestamp conversion library\\n * @author ethereum-datatime\\n */\\nlibrary TimeConverter {\\n  struct DateTime {\\n    uint16 year;\\n    uint8 month;\\n    uint8 day;\\n    uint8 hour;\\n    uint8 minute;\\n    uint8 second;\\n    uint8 weekday;\\n  }\\n\\n  uint256 constant DAY_IN_SECONDS = 86400;\\n  uint256 constant YEAR_IN_SECONDS = 31536000;\\n  uint256 constant LEAP_YEAR_IN_SECONDS = 31622400;\\n\\n  uint256 constant HOUR_IN_SECONDS = 3600;\\n  uint256 constant MINUTE_IN_SECONDS = 60;\\n\\n  uint16 constant ORIGIN_YEAR = 1970;\\n\\n  function isLeapYear(uint16 year) internal pure returns (bool) {\\n    if (year % 4 != 0) {\\n      return false;\\n    }\\n    if (year % 100 != 0) {\\n      return true;\\n    }\\n    if (year % 400 != 0) {\\n      return false;\\n    }\\n    return true;\\n  }\\n\\n  function leapYearsBefore(uint256 year) internal pure returns (uint256) {\\n    year -= 1;\\n    return year / 4 - year / 100 + year / 400;\\n  }\\n\\n  function getDaysInMonth(uint8 month, uint16 year) internal pure returns (uint8) {\\n    if (\\n      month == 1 ||\\n      month == 3 ||\\n      month == 5 ||\\n      month == 7 ||\\n      month == 8 ||\\n      month == 10 ||\\n      month == 12\\n    ) {\\n      return 31;\\n    } else if (month == 4 || month == 6 || month == 9 || month == 11) {\\n      return 30;\\n    } else if (isLeapYear(year)) {\\n      return 29;\\n    } else {\\n      return 28;\\n    }\\n  }\\n\\n  function parseTimestamp(uint256 timestamp) public pure returns (DateTime memory dateTime) {\\n    uint256 secondsAccountedFor = 0;\\n    uint256 buf;\\n    uint8 i;\\n\\n    // Year\\n    dateTime.year = getYear(timestamp);\\n    buf = leapYearsBefore(dateTime.year) - leapYearsBefore(ORIGIN_YEAR);\\n\\n    secondsAccountedFor += LEAP_YEAR_IN_SECONDS * buf;\\n    secondsAccountedFor += YEAR_IN_SECONDS * (dateTime.year - ORIGIN_YEAR - buf);\\n\\n    // Month\\n    uint256 secondsInMonth;\\n    for (i = 1; i <= 12; i++) {\\n      secondsInMonth = DAY_IN_SECONDS * getDaysInMonth(i, dateTime.year);\\n      if (secondsInMonth + secondsAccountedFor > timestamp) {\\n        dateTime.month = i;\\n        break;\\n      }\\n      secondsAccountedFor += secondsInMonth;\\n    }\\n\\n    // Day\\n    for (i = 1; i <= getDaysInMonth(dateTime.month, dateTime.year); i++) {\\n      if (DAY_IN_SECONDS + secondsAccountedFor > timestamp) {\\n        dateTime.day = i;\\n        break;\\n      }\\n      secondsAccountedFor += DAY_IN_SECONDS;\\n    }\\n\\n    // Hour\\n    dateTime.hour = getHour(timestamp);\\n    // Minute\\n    dateTime.minute = getMinute(timestamp);\\n    // Second\\n    dateTime.second = getSecond(timestamp);\\n    // Day of week.\\n    dateTime.weekday = getWeekday(timestamp);\\n  }\\n\\n  function getYear(uint256 timestamp) internal pure returns (uint16) {\\n    uint256 secondsAccountedFor = 0;\\n    uint16 year;\\n    uint256 numLeapYears;\\n\\n    // Year\\n    year = uint16(ORIGIN_YEAR + timestamp / YEAR_IN_SECONDS);\\n    numLeapYears = leapYearsBefore(year) - leapYearsBefore(ORIGIN_YEAR);\\n\\n    secondsAccountedFor += LEAP_YEAR_IN_SECONDS * numLeapYears;\\n    secondsAccountedFor += YEAR_IN_SECONDS * (year - ORIGIN_YEAR - numLeapYears);\\n\\n    while (secondsAccountedFor > timestamp) {\\n      if (isLeapYear(uint16(year - 1))) {\\n        secondsAccountedFor -= LEAP_YEAR_IN_SECONDS;\\n      } else {\\n        secondsAccountedFor -= YEAR_IN_SECONDS;\\n      }\\n      year -= 1;\\n    }\\n    return year;\\n  }\\n\\n  function getMonth(uint256 timestamp) internal pure returns (uint8) {\\n    return parseTimestamp(timestamp).month;\\n  }\\n\\n  function getDay(uint256 timestamp) internal pure returns (uint8) {\\n    return parseTimestamp(timestamp).day;\\n  }\\n\\n  function getHour(uint256 timestamp) internal pure returns (uint8) {\\n    return uint8((timestamp / 60 / 60) % 24);\\n  }\\n\\n  function getMinute(uint256 timestamp) internal pure returns (uint8) {\\n    return uint8((timestamp / 60) % 60);\\n  }\\n\\n  function getSecond(uint256 timestamp) internal pure returns (uint8) {\\n    return uint8(timestamp % 60);\\n  }\\n\\n  function getWeekday(uint256 timestamp) internal pure returns (uint8) {\\n    return uint8((timestamp / DAY_IN_SECONDS + 4) % 7);\\n  }\\n\\n  function toTimestamp(\\n    uint16 year,\\n    uint8 month,\\n    uint8 day\\n  ) public pure returns (uint256 timestamp) {\\n    return toTimestamp(year, month, day, 0, 0, 0);\\n  }\\n\\n  function toTimestamp(\\n    uint16 year,\\n    uint8 month,\\n    uint8 day,\\n    uint8 hour\\n  ) public pure returns (uint256 timestamp) {\\n    return toTimestamp(year, month, day, hour, 0, 0);\\n  }\\n\\n  function toTimestamp(\\n    uint16 year,\\n    uint8 month,\\n    uint8 day,\\n    uint8 hour,\\n    uint8 minute,\\n    uint8 second\\n  ) public pure returns (uint256 timestamp) {\\n    uint16 i;\\n\\n    // Year\\n    for (i = ORIGIN_YEAR; i < year; i++) {\\n      if (isLeapYear(i)) {\\n        timestamp += LEAP_YEAR_IN_SECONDS;\\n      } else {\\n        timestamp += YEAR_IN_SECONDS;\\n      }\\n    }\\n\\n    // Month\\n    uint8[12] memory monthDayCounts;\\n    monthDayCounts[0] = 31;\\n    if (isLeapYear(year)) {\\n      monthDayCounts[1] = 29;\\n    } else {\\n      monthDayCounts[1] = 28;\\n    }\\n    monthDayCounts[2] = 31;\\n    monthDayCounts[3] = 30;\\n    monthDayCounts[4] = 31;\\n    monthDayCounts[5] = 30;\\n    monthDayCounts[6] = 31;\\n    monthDayCounts[7] = 31;\\n    monthDayCounts[8] = 30;\\n    monthDayCounts[9] = 31;\\n    monthDayCounts[10] = 30;\\n    monthDayCounts[11] = 31;\\n\\n    for (i = 1; i < month; i++) {\\n      timestamp += DAY_IN_SECONDS * monthDayCounts[i - 1];\\n    }\\n\\n    // Day\\n    timestamp += DAY_IN_SECONDS * (day - 1);\\n    // Hour\\n    timestamp += HOUR_IN_SECONDS * (hour);\\n    // Minute\\n    timestamp += MINUTE_IN_SECONDS * (minute);\\n    // Second\\n    timestamp += second;\\n\\n    return timestamp;\\n  }\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IConnector.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.3;\\n\\nimport '../libraries/DataStruct.sol';\\n\\ninterface IConnector {\\n  /**\\n   * @notice Emitted when an admin adds a council role\\n   **/\\n  event NewCouncilAdded(address indexed account);\\n\\n  /**\\n   * @notice Emitted when an admin adds a collateral service provider role\\n   **/\\n  event NewCollateralServiceProviderAdded(address indexed account);\\n\\n  /**\\n   * @notice Emitted when a council role is revoked by admin\\n   **/\\n  event CouncilRevoked(address indexed account);\\n\\n  /**\\n   * @notice Emitted when a collateral service provider role is revoked by admin\\n   **/\\n  event CollateralServiceProviderRevoked(address indexed account);\\n\\n  function isCollateralServiceProvider(address account) external view returns (bool);\\n\\n  function isCouncil(address account) external view returns (bool);\\n\\n  function isMoneyPoolAdmin(address account) external view returns (bool);\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 1\r\n    },\r\n    \"metadata\": {\r\n      \"useLiteralContent\": true\r\n    },\r\n    \"libraries\": {\r\n      \"contracts/libraries/TimeConverter.sol\": {\r\n        \"TimeConverter\": \"0x01d07c9fd2e3fbc493e0a2de588ce1c1ead137e4\"\r\n      },\r\n      \"contracts/logic/AssetBond.sol\": {\r\n        \"AssetBond\": \"0xa139841e0d43bab85ddd00469eed93a5a000ca9e\"\r\n      },\r\n      \"contracts/logic/Index.sol\": {\r\n        \"Index\": \"0x9eb704b380e6cae794af479796866a264f87aa79\"\r\n      },\r\n      \"contracts/logic/Rate.sol\": {\r\n        \"Rate\": \"0x625b4afcf08a5f4f85fc45e56387376ff4bed6bf\"\r\n      },\r\n      \"contracts/logic/Validation.sol\": {\r\n        \"Validation\": \"0x08f7e687a90bba01e8613827fd0d67e41949f9cc\"\r\n      }\r\n    }\r\n  }\r\n}}","ABI":"[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"maxReserveCount_\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"connector\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"collateralServiceProvider\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"borrower\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"borrowAPY\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"borrowAmount\",\"type\":\"uint256\"}],\"name\":\"Borrow\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"borrower\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"userDTokenBalance\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"feeOnCollateralServiceProvider\",\"type\":\"uint256\"}],\"name\":\"Liquidation\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"lToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"dToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"interestModel\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"tokenizer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"incentivePool\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"moneyPoolFactor\",\"type\":\"uint256\"}],\"name\":\"NewReserve\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"borrower\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"userDTokenBalance\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"feeOnCollateralServiceProvider\",\"type\":\"uint256\"}],\"name\":\"Repay\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"}],\"name\":\"activateMoneyPool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"lToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"dToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"interestModel\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenizer\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"incentivePool\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"moneyPoolFactor_\",\"type\":\"uint256\"}],\"name\":\"addNewReserve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"borrow\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"}],\"name\":\"deactivateMoneyPool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"}],\"name\":\"getLTokenInterestIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"}],\"name\":\"getReserveData\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"moneyPoolFactor\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lTokenInterestIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"borrowAPY\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"depositAPY\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastUpdateTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"lTokenAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"dTokenAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"interestModelAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenizerAddress\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"id\",\"type\":\"uint8\"},{\"internalType\":\"bool\",\"name\":\"isPaused\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isActivated\",\"type\":\"bool\"}],\"internalType\":\"struct DataStruct.ReserveData\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"liquidate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"}],\"name\":\"pauseMoneyPool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"repay\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"}],\"name\":\"unPauseMoneyPool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"newIncentivePool\",\"type\":\"address\"}],\"name\":\"updateIncentivePool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"MoneyPool","CompilerVersion":"v0.8.3+commit.8d00100c","OptimizationUsed":"1","Runs":"1","ConstructorArguments":"00000000000000000000000000000000000000000000000000000000000000100000000000000000000000005c2ce44ff70ef0bd898e2bf37e7da7605d0ae607","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}