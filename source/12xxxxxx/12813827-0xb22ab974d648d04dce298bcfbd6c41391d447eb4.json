{"status":"1","message":"OK","result":[{"SourceCode":"// File: contracts/SafeMath.sol\r\n\r\npragma solidity ^0.5;\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Unsigned math operations with safety checks that revert on error\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Multiplies two unsigned integers, reverts on overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b);\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Integer division of two unsigned integers truncating the quotient, reverts on division by zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Solidity only automatically asserts when dividing by 0\r\n        require(b > 0);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Subtracts two unsigned integers, reverts on overflow (i.e. if subtrahend is greater than minuend).\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b <= a);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Adds two unsigned integers, reverts on overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a);\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Divides two unsigned integers and returns the remainder (unsigned integer modulo),\r\n     * reverts when dividing by zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b != 0);\r\n        return a % b;\r\n    }\r\n}\r\n// File: contracts/ExternalTokenSale.sol\r\n\r\npragma solidity ^0.5;\r\n\r\n\r\ncontract Owned {\r\n    address public owner;\r\n    \r\n    constructor() public {\r\n        owner = msg.sender;\r\n    }\r\n    \r\n    /**\r\n     * @dev Modifier to restrict owner access only.\r\n     */\r\n     \r\n    modifier onlyOwner {\r\n        require(msg.sender == owner,\"Invalid Owner\");\r\n        _;\r\n    }\r\n    \r\n    /**\r\n     * @dev Transfer ownership to new owner, can only be called by existing owner.\r\n     */\r\n     \r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        owner = newOwner;\r\n    }\r\n}\r\n\r\n\r\ncontract ERC20 {\r\n  uint256 public totalSupply;\r\n  uint256 public decimals;\r\n  function balanceOf(address who) public view returns (uint);\r\n  function allowance(address owner, address spender) public view returns (uint);\r\n  function transfer(address to, uint value) public returns (bool ok);\r\n  function transferFrom(address from, address to, uint value) public;\r\n  function approve(address spender, uint value) public returns (bool ok);\r\n}\r\n\r\n\r\ncontract ExternalTokenSale is Owned {\r\n\r\n    using SafeMath for uint;\r\n    \r\n    struct TokenArtifact {\r\n        uint256 totalSold;\r\n        uint256 exchangeRate; /* per Token in terms of base token (FTB) */\r\n        ERC20 targetToken;\r\n        uint256 pledgedFeePercent;\r\n        uint256 pledgedFeeDivisor;\r\n    }\r\n    \r\n    /* Seller => Token Address */\r\n    mapping(address => mapping(address => TokenArtifact)) public tokenLedger;\r\n    mapping(address => bool) authorizedCaller;\r\n\r\n    // Base Seller Fee;\r\n    uint256 baseFeePercent;\r\n    uint256 baseFeeDivisor;\r\n    \r\n    \r\n    /* Referral Commision Config */\r\n    uint256 referralCommissionChargePercent;\r\n    uint256 referralCommissionChargeDivisor;\r\n    address payable referralChargeReceiver;\r\n    \r\n    // Transaction Config \r\n    uint256 transactionChargePercent;\r\n    uint256 transactionChargeDivisor;\r\n    address payable transactionChargeReceiver;\r\n    \r\n    event ConfigUpdated(\r\n        address payable _transactionChargeReceiver,\r\n        uint256 _transactionChargePercent,\r\n        uint256 _transactionChargeDivisor,\r\n        address payable _referralChargeReceiver,\r\n        uint256 _referralCommissionChargePercent,\r\n        uint256 _referralCommissionChargeDivisor,\r\n        uint256 _baseFeePercent,\r\n        uint256 _baseFeeDivisor\r\n    );\r\n    \r\n    /**\r\n     * @dev Modifier to restrict access to authorized caller.\r\n     */\r\n    modifier onlyAuthCaller(){\r\n        require(authorizedCaller[msg.sender] == true || msg.sender == owner,\"Only Authorized and Owner can perform this action\");\r\n        _;\r\n    }\r\n    \r\n    /**\r\n     * @dev Modifier to make sure contribution satisfies condition of being non zero and Funding is enabled.\r\n     */\r\n    modifier onlyValidContribution(uint _value){\r\n        require(_value > 0 ,\"Value should be greater than zero\");\r\n        _;\r\n    }\r\n\r\n    /* Events */\r\n    event AuthorizedCaller(address _caller);\r\n    event DeAuthorizedCaller(address _caller);\r\n    \r\n    event PurchaseToken(address indexed _buyerAddress,\r\n                        address indexed _sellerAddress, \r\n                        address indexed _tokenAddress, \r\n                        uint256 _amount,\r\n                        uint256 _feeAmount);\r\n    \r\n    event AddTokenArtifact(address indexed _sellerAddress, \r\n                        address indexed _tokenAddress, \r\n                        uint256 _amount,\r\n                        uint256 _pledgedFeePercent,\r\n                        uint256 _pledgedFeeDivisor);\r\n                        \r\n    event TransactionConfigUpdated(uint _transactionChargePercent, uint _transactionChargeDivisor);\r\n    event ReferralCommissionConfigUpdated(uint _referralCommissionChargePercent, uint _referralCommissionChargeDivisor);\r\n\r\n    \r\n    constructor(address payable _transactionChargeReceiver, address payable _referralChargeReceiver) public {\r\n        \r\n        owner = msg.sender;\r\n        transactionChargeReceiver = _transactionChargeReceiver;\r\n        referralChargeReceiver = _referralChargeReceiver;\r\n    }\r\n    \r\n   \r\n     \r\n\r\n    \r\n    /**\r\n     * @dev Can be called to authorize address which can perform operation requiring elevated privileges \r\n     */\r\n    function authorizeCaller(address _caller) public onlyOwner returns(bool){\r\n        authorizedCaller[_caller] = true;\r\n        emit AuthorizedCaller(_caller);\r\n        return true;\r\n    }\r\n    \r\n    /**\r\n     * @dev Can be called to de-authorize address which can perform operation requiring elevated privileges\r\n     */\r\n    function deAuthorizeCaller(address _caller) public onlyOwner returns(bool){\r\n        authorizedCaller[_caller] = false;\r\n        emit DeAuthorizedCaller(_caller);\r\n        return true;\r\n    }   \r\n    \r\n    function getConfig()\r\n        public\r\n        view\r\n        returns (\r\n            address _transactionChargeReceiver,\r\n            uint256 _transactionChargePercent,\r\n            uint256 _transactionChargeDivisor,\r\n            address _referralChargeReceiver,\r\n            uint256 _referralCommissionChargePercent,\r\n            uint256 _referralCommissionChargeDivisor,\r\n            uint256 _baseFeePercent,\r\n            uint256 _baseFeeDivisor\r\n        )\r\n    {\r\n        return (\r\n            transactionChargeReceiver,\r\n            transactionChargePercent,\r\n            transactionChargeDivisor,\r\n            referralChargeReceiver,\r\n            referralCommissionChargePercent,\r\n            referralCommissionChargeDivisor,\r\n            baseFeePercent,\r\n            baseFeeDivisor\r\n        );\r\n    }\r\n\r\n    function updateConfig(\r\n        address payable _transactionChargeReceiver,\r\n        uint256 _transactionChargePercent,\r\n        uint256 _transactionChargeDivisor,\r\n        address payable _referralChargeReceiver,\r\n        uint256 _referralCommissionChargePercent,\r\n        uint256 _referralCommissionChargeDivisor,\r\n        uint256 _baseFeePercent,\r\n        uint256 _baseFeeDivisor\r\n    ) public onlyAuthCaller returns (bool) {\r\n        \r\n        // Base Fee \r\n        baseFeePercent = _baseFeePercent;\r\n        baseFeeDivisor = _baseFeeDivisor;\r\n        \r\n        // Transaction \r\n        transactionChargeReceiver = _transactionChargeReceiver;\r\n        transactionChargePercent = _transactionChargePercent;\r\n        transactionChargeDivisor = _transactionChargeDivisor;\r\n    \r\n        // Referral \r\n        referralChargeReceiver = _referralChargeReceiver;\r\n        referralCommissionChargePercent = _referralCommissionChargePercent;\r\n        referralCommissionChargeDivisor = _referralCommissionChargeDivisor;\r\n        \r\n        emit ConfigUpdated(\r\n            _transactionChargeReceiver,\r\n            _transactionChargePercent,\r\n            _transactionChargeDivisor,\r\n            _referralChargeReceiver,\r\n            _referralCommissionChargePercent,\r\n            _referralCommissionChargeDivisor,\r\n            _baseFeePercent,\r\n            _baseFeeDivisor\r\n        );\r\n\r\n        return true;\r\n    }\r\n    \r\n    /**\r\n     * @dev addTokenArtifact function need to be called to add the ERC20 Token artifact\r\n     * by providing ERC20 token contract address, Exchange Rate with respect to base token (FTB)\r\n    */\r\n    \r\n    function addTokenArtifact(\r\n        address _tokenAddress, \r\n        uint256 _exchangeRate,\r\n        uint256 _pledgedFeePercent,\r\n        uint256 _pledgedFeeDivisor) public returns(bool)\r\n    {\r\n        tokenLedger[msg.sender][_tokenAddress].totalSold =  0 ;\r\n        tokenLedger[msg.sender][_tokenAddress].exchangeRate =  _exchangeRate ;\r\n        tokenLedger[msg.sender][_tokenAddress].targetToken =  ERC20(_tokenAddress) ;\r\n        \r\n        tokenLedger[msg.sender][_tokenAddress].pledgedFeePercent = _pledgedFeePercent;\r\n        tokenLedger[msg.sender][_tokenAddress].pledgedFeeDivisor = _pledgedFeeDivisor;\r\n        \r\n        emit AddTokenArtifact(\r\n            msg.sender, \r\n            _tokenAddress, \r\n            _exchangeRate,\r\n            _pledgedFeePercent,\r\n            _pledgedFeeDivisor\r\n        );\r\n        return true;\r\n    }\r\n    \r\n\r\n    \r\n    \r\n    function purchaseToken(\r\n        address payable _sellerAddress, \r\n        address _tokenAddress, \r\n        bool _isReferredBuyer) public payable returns(bool)\r\n    { \r\n        \r\n        TokenArtifact memory _activeTokenArtifact = tokenLedger[_sellerAddress][_tokenAddress];\r\n        \r\n        require(_activeTokenArtifact.exchangeRate > 0, \"Exchange Rate should greater than zero \");\r\n        \r\n        /* Calculate Conversion in terms of target token decimals */\r\n        uint256 _targetTokenDecimalBase = uint256(_activeTokenArtifact.targetToken.decimals());\r\n        uint256 _finalAmount = 0;\r\n  \r\n       \r\n        \r\n        /* Msg Value  */\r\n        uint256 _depositedAmt = msg.value;\r\n  \r\n        uint256 _baseRecievableAmt = 0;\r\n        uint256 _baseFeeAmt = 0;\r\n        \r\n        uint256 _adminFeeAmt = 0;\r\n        uint256 _referralFeeAmt = 0;\r\n        \r\n   \r\n        // Get Product Pledged Fee\r\n   \r\n        _baseFeeAmt = _activeTokenArtifact.pledgedFeePercent.mul(_depositedAmt).div(_activeTokenArtifact.pledgedFeeDivisor.mul(100));\r\n        _baseRecievableAmt = _depositedAmt.sub(_baseFeeAmt);\r\n        \r\n        \r\n        if (transactionChargeDivisor > 0 && transactionChargePercent > 0) {\r\n            /* Calculate Transaction Fee */\r\n            \r\n            _adminFeeAmt = transactionChargePercent.mul(_baseFeeAmt).div(\r\n                transactionChargeDivisor.mul(100)\r\n            );\r\n         \r\n        }\r\n\r\n        if(referralCommissionChargeDivisor > 0 &&\r\n            referralCommissionChargePercent > 0){\r\n            _referralFeeAmt = referralCommissionChargePercent\r\n                .mul(_baseFeeAmt)\r\n                .div(referralCommissionChargeDivisor.mul(100));\r\n            }\r\n        \r\n\r\n        /* Debit Referral Commision Fee if set */\r\n        if (\r\n            _isReferredBuyer == false            \r\n        ) {\r\n            /* Calculate Referral Commision Fee */\r\n            _adminFeeAmt = _adminFeeAmt.add(_referralFeeAmt);                     \r\n        } \r\n\r\n        /* Send Transaction Receiver their share */\r\n        if (_adminFeeAmt > 0) {\r\n            transactionChargeReceiver.transfer(_adminFeeAmt);\r\n        }\r\n\r\n        /* Send Referral Receiver their share */\r\n        if (_referralFeeAmt > 0) {\r\n            referralChargeReceiver.transfer(_referralFeeAmt);\r\n        }\r\n        \r\n        \r\n        /* Transfer Leftover amount to product owner */\r\n        _sellerAddress.transfer(_baseRecievableAmt);\r\n\r\n        /* Transfer Final target Token from Seller to Buyer */\r\n        _finalAmount = _depositedAmt.mul(10 ** _targetTokenDecimalBase).div(_activeTokenArtifact.exchangeRate);\r\n        \r\n        /* Transfer Calculated token to investor */\r\n        _activeTokenArtifact.targetToken.transferFrom(_sellerAddress,msg.sender,_finalAmount);\r\n        \r\n        /* Update Sold */\r\n        _activeTokenArtifact.totalSold = tokenLedger[msg.sender][_tokenAddress].totalSold.add(_finalAmount);\r\n        \r\n        \r\n        \r\n        emit PurchaseToken(msg.sender, _sellerAddress, _tokenAddress, _finalAmount, _baseFeeAmt);\r\n        return true;   \r\n    }\r\n\r\n    \r\n    /**\r\n     * @dev Fallback function configured to accept any ether sent to smart contract\r\n     */\r\n    function () external onlyValidContribution(msg.value) payable {\r\n\r\n       revert();\r\n    }\r\n\r\n\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_transactionChargeReceiver\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"_referralChargeReceiver\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_sellerAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_pledgedFeePercent\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_pledgedFeeDivisor\",\"type\":\"uint256\"}],\"name\":\"AddTokenArtifact\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_caller\",\"type\":\"address\"}],\"name\":\"AuthorizedCaller\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address payable\",\"name\":\"_transactionChargeReceiver\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_transactionChargePercent\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_transactionChargeDivisor\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address payable\",\"name\":\"_referralChargeReceiver\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_referralCommissionChargePercent\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_referralCommissionChargeDivisor\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_baseFeePercent\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_baseFeeDivisor\",\"type\":\"uint256\"}],\"name\":\"ConfigUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_caller\",\"type\":\"address\"}],\"name\":\"DeAuthorizedCaller\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_buyerAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_sellerAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_feeAmount\",\"type\":\"uint256\"}],\"name\":\"PurchaseToken\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_referralCommissionChargePercent\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_referralCommissionChargeDivisor\",\"type\":\"uint256\"}],\"name\":\"ReferralCommissionConfigUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_transactionChargePercent\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_transactionChargeDivisor\",\"type\":\"uint256\"}],\"name\":\"TransactionConfigUpdated\",\"type\":\"event\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_exchangeRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_pledgedFeePercent\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_pledgedFeeDivisor\",\"type\":\"uint256\"}],\"name\":\"addTokenArtifact\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_caller\",\"type\":\"address\"}],\"name\":\"authorizeCaller\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_caller\",\"type\":\"address\"}],\"name\":\"deAuthorizeCaller\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getConfig\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"_transactionChargeReceiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_transactionChargePercent\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_transactionChargeDivisor\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_referralChargeReceiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_referralCommissionChargePercent\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_referralCommissionChargeDivisor\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_baseFeePercent\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_baseFeeDivisor\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_sellerAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_isReferredBuyer\",\"type\":\"bool\"}],\"name\":\"purchaseToken\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"tokenLedger\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"totalSold\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"exchangeRate\",\"type\":\"uint256\"},{\"internalType\":\"contract ERC20\",\"name\":\"targetToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"pledgedFeePercent\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"pledgedFeeDivisor\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_transactionChargeReceiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_transactionChargePercent\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_transactionChargeDivisor\",\"type\":\"uint256\"},{\"internalType\":\"address payable\",\"name\":\"_referralChargeReceiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_referralCommissionChargePercent\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_referralCommissionChargeDivisor\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_baseFeePercent\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_baseFeeDivisor\",\"type\":\"uint256\"}],\"name\":\"updateConfig\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"ExternalTokenSale","CompilerVersion":"v0.5.17+commit.d19bba13","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"0000000000000000000000009d222f983abcebcf814067b964d0e45ea9e3b9da0000000000000000000000009d222f983abcebcf814067b964d0e45ea9e3b9da","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"bzzr://07e50c63e703974be4d9e104d3b400828be132b44815ac0a08f01349e88c18b4"}]}