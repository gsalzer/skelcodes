{"status":"1","message":"OK","result":[{"SourceCode":"// SPDX-License-Identifier: GPL-3.0\r\n\r\npragma solidity ^0.8.0;\r\n\r\ncontract FeeSplitter {\r\n\r\n    address payable public dev1;\r\n    address payable public dev2;\r\n    uint public shares1;\r\n    uint public shares2;\r\n\r\n    bool internal locked;\r\n\r\n    /**\r\n     * @dev Call the constructor with two addresses and two share proportions, adding to 1000.\r\n     */\r\n    constructor(address payable _dev1, address payable _dev2, uint _shares1, uint _shares2) {\r\n        dev1 = _dev1;\r\n        dev2 = _dev2;\r\n        shares1 = _shares1;\r\n        shares2 = _shares2;\r\n        require(shares1 + shares2 == 1000, \"Shares must add up to 1000\");\r\n    }\r\n\r\n    receive() external payable {}\r\n\r\n    fallback() external payable {}\r\n\r\n    /**\r\n     * @dev Withdraw funds. Solidity integer division may leave up to 1 wei in the contract afterwards.\r\n     */\r\n    function withdraw() external noReentrant {\r\n        uint payout1 = address(this).balance * shares1 / 1000;\r\n        uint payout2 = address(this).balance * shares2 / 1000;\r\n\r\n        (bool success1,) = dev1.call{value: payout1}(\"\");\r\n        (bool success2,) = dev2.call{value: payout2}(\"\");\r\n\r\n        require(success1 && success2, \"Sending ether failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Don't allow reentrancy attacks in withdraw()\r\n     */\r\n    modifier noReentrant() {\r\n        require(!locked, \"No reentrancy\");\r\n        locked = true;\r\n        _;\r\n        locked = false;\r\n    }\r\n\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_dev1\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"_dev2\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_shares1\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_shares2\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[],\"name\":\"dev1\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dev2\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"shares1\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"shares2\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]","ContractName":"FeeSplitter","CompilerVersion":"v0.8.4+commit.c7e474f2","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"000000000000000000000000e5ee2b9d5320f2d1492e16567f36b578372b3d9f000000000000000000000000bb20019f79146563725fc76994ce87f7625561b8000000000000000000000000000000000000000000000000000000000000012c00000000000000000000000000000000000000000000000000000000000002bc","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"ipfs://dc88d117c8cb0ea19dd997dedaf8eff3f9e523548156b00ade4844461f1923a4"}]}