{"status":"1","message":"OK","result":[{"SourceCode":"// File: contracts/IERC20.sol\r\n\r\n// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.7.6;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n// File: contracts/IHTLCs.sol\r\n\r\n// Copyright (C) 2021 Autonomous Worlds Ltd\r\n\r\npragma solidity ^0.7.6;\r\n\r\n\r\n/**\r\n * @dev Interface for a contract that allows using HTLCs for ERC-20 tokens.\r\n */\r\ninterface IHTLCs\r\n{\r\n\r\n  /**\r\n   * @dev Returns the hash used in HTLCs of the given data.\r\n   */\r\n  function hashData (bytes memory data) external pure returns (bytes20);\r\n\r\n  /**\r\n   * @dev Computes and returns the hash / ID of an HTLC corresponding\r\n   * to the given data.\r\n   */\r\n  function getId (IERC20 token, address from, address to, uint256 value,\r\n                  uint endtime, bytes20 hash) external pure returns (bytes32);\r\n\r\n  /**\r\n   * @dev Creates a new HTLC:  value tokens are removed from the message\r\n   * sender's balance and \"locked\" into the HTLC.  They can be reclaimed\r\n   * by the message sender at the endtime block time, or redeemed for the\r\n   * receiver if the preimage of hash is provided.\r\n   */\r\n  function create (IERC20 token, address to, uint256 value,\r\n                   uint endtime, bytes20 hash)\r\n      external returns (bytes32);\r\n\r\n  /**\r\n   * @dev Refunds a HTLC that has timed out.  All data for the HTLC has to be\r\n   * provided here again, and the contract will check that a HTLC with this\r\n   * data exists (as well as that it is timed out).\r\n   */\r\n  function timeout (IERC20 token, address from, address to, uint256 value,\r\n                    uint endtime, bytes20 hash) external;\r\n\r\n  /**\r\n   * @dev Redeems a HTLC with the preimage to the receiver.  The data\r\n   * for the HTLC has to be passed in (the hash is computed from the preimage).\r\n   */\r\n  function redeem (IERC20 token, address from, address to, uint256 value,\r\n                   uint endtime, bytes memory preimage) external;\r\n\r\n  /** @dev Emitted when a new HTLC has been created.  */\r\n  event Created (IERC20 token, address from, address to, uint256 value,\r\n                 uint endtime, bytes20 hash, bytes32 id);\r\n\r\n  /** @dev Emitted when a HTLC is timed out.  */\r\n  event TimedOut (IERC20 token, address from, address to, uint256 value,\r\n                  uint endtime, bytes20 hash, bytes32 id);\r\n\r\n  /** @dev Emitted when a HTLC is redeemed.  */\r\n  event Redeemed (IERC20 token, address from, address to, uint256 value,\r\n                  uint endtime, bytes20 hash, bytes32 id);\r\n\r\n}\r\n\r\n// File: contracts/HTLCs.sol\r\n\r\n// Copyright (C) 2021 Autonomous Worlds Ltd\r\n\r\npragma solidity ^0.7.6;\r\n\r\n\r\n\r\n/**\r\n * @dev This contract allows creating (and redeeming) HTLCs based on RIPMED-160\r\n * for ERC-20 tokens.  With this, those tokens can be used in atomic\r\n * swaps e.g. with Bitcoin-based blockchains or even Lightning.\r\n */\r\ncontract HTLCs is IHTLCs\r\n{\r\n\r\n  /**\r\n   * @dev Hashes of all currently active HTLCs.  Each HTLC consists of\r\n   * its token's address, the value in tokens, a sender and receiver address,\r\n   * a timestamp for when it times out, and a hash value with which the\r\n   * receiver can redeem it.\r\n   *\r\n   * These pieces of data are hashed together to produce an ID, which is\r\n   * stored here in a set.  This way, the contract can verify any claims about\r\n   * active HTLCs, while not having to store all the corresponding data\r\n   * itself in contract storage.\r\n   */\r\n  mapping (bytes32 => bool) public active;\r\n\r\n  /**\r\n   * @dev Returns the hash used for HTLCs.  We use RIPEMD160, to be\r\n   * compatible with HTLCs from BOLT 03 (Lightning).\r\n   */\r\n  function hashData (bytes memory data) public override pure returns (bytes20)\r\n  {\r\n    return ripemd160 (data);\r\n  }\r\n\r\n  /**\r\n   * @dev Computes and returns the ID that we use internally to refer\r\n   * to an HTLC with the given data.  This is a hash value of the data,\r\n   * so commits to the HTLC's content.\r\n   */\r\n  function getId (IERC20 token, address from, address to, uint256 value,\r\n                  uint endtime, bytes20 hash)\r\n      public override pure returns (bytes32)\r\n  {\r\n    return keccak256 (abi.encodePacked (address (token), from, to, value,\r\n                                        endtime, hash));\r\n  }\r\n\r\n  /**\r\n   * @dev Creates a new HTLC, locking the tokens and marking its hash as active.\r\n   */\r\n  function create (IERC20 token, address to, uint256 value,\r\n                   uint endtime, bytes20 hash)\r\n      external override returns (bytes32)\r\n  {\r\n    bytes32 id = getId (token, msg.sender, to, value, endtime, hash);\r\n    require (!active[id], \"HTLCs: HTLC with this data is already active\");\r\n\r\n    require (token.transferFrom (msg.sender, address (this), value),\r\n             \"HTLCs: failed to receive tokens\");\r\n    active[id] = true;\r\n\r\n    emit Created (token, msg.sender, to, value, endtime, hash, id);\r\n    return id;\r\n  }\r\n\r\n  /**\r\n   * @dev Times out an HTLC.  This can be called by anyone who wants to\r\n   * execute the transaction, and will pay back to the original sender\r\n   * who locked the tokens.\r\n   */\r\n  function timeout (IERC20 token, address from, address to, uint256 value,\r\n                    uint endtime, bytes20 hash) external override\r\n  {\r\n    require (block.timestamp >= endtime,\r\n             \"HTLCs: HTLC is not yet timed out\");\r\n\r\n    bytes32 id = getId (token, from, to, value, endtime, hash);\r\n    require (active[id], \"HTLCs: HTLC with this data is not active\");\r\n\r\n    delete active[id];\r\n    require (token.transfer (from, value), \"HTLCs: failed to send tokens\");\r\n\r\n    emit TimedOut (token, from, to, value, endtime, hash, id);\r\n  }\r\n\r\n  /**\r\n   * @dev Redeems an HTLC with its preimage to the receiver.  This can be\r\n   * called by anyone willing to pay for execution, and will send the tokens\r\n   * always to the HTLC's receiver.\r\n   */\r\n  function redeem (IERC20 token, address from, address to, uint256 value,\r\n                   uint endtime, bytes memory preimage) external override\r\n  {\r\n    bytes20 hash = hashData (preimage);\r\n    bytes32 id = getId (token, from, to, value, endtime, hash);\r\n    /* Since we compute the hash from the preimage, and then the HTLC ID\r\n       from the hash, the check below automatically verifies that the\r\n       sender knows a preimage to the HTLC.  */\r\n    require (active[id], \"HTLCs: HTLC with this data is not active\");\r\n\r\n    delete active[id];\r\n    require (token.transfer (to, value), \"HTLCs: failed to send tokens\");\r\n\r\n    emit Redeemed (token, from, to, value, endtime, hash, id);\r\n  }\r\n\r\n}","ABI":"[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"endtime\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes20\",\"name\":\"hash\",\"type\":\"bytes20\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"}],\"name\":\"Created\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"endtime\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes20\",\"name\":\"hash\",\"type\":\"bytes20\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"}],\"name\":\"Redeemed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"endtime\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes20\",\"name\":\"hash\",\"type\":\"bytes20\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"}],\"name\":\"TimedOut\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"active\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endtime\",\"type\":\"uint256\"},{\"internalType\":\"bytes20\",\"name\":\"hash\",\"type\":\"bytes20\"}],\"name\":\"create\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endtime\",\"type\":\"uint256\"},{\"internalType\":\"bytes20\",\"name\":\"hash\",\"type\":\"bytes20\"}],\"name\":\"getId\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"hashData\",\"outputs\":[{\"internalType\":\"bytes20\",\"name\":\"\",\"type\":\"bytes20\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endtime\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"preimage\",\"type\":\"bytes\"}],\"name\":\"redeem\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endtime\",\"type\":\"uint256\"},{\"internalType\":\"bytes20\",\"name\":\"hash\",\"type\":\"bytes20\"}],\"name\":\"timeout\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"HTLCs","CompilerVersion":"v0.7.6+commit.7338295f","OptimizationUsed":"1","Runs":"20000","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://6bba7515429ce84a8ecf651abf0ae125adada33a0c1a6842c4606e1415c112db"}]}