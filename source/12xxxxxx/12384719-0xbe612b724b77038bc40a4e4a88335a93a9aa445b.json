{"status":"1","message":"OK","result":[{"SourceCode":"// File: iface/IPTokenFactory.sol\r\n\r\n// SPDX-License-Identifier: GPL-3.0-or-later\r\npragma solidity ^0.6.12;\r\n\r\ninterface IPTokenFactory {\r\n    function getGovernance() external view returns(address);\r\n    function getPTokenOperator(address contractAddress) external view returns(bool);\r\n    function getPTokenAuthenticity(address pToken) external view returns(bool);\r\n}\r\n// File: iface/IParasset.sol\r\n\r\npragma solidity ^0.6.12;\r\n\r\ninterface IParasset {\r\n    function totalSupply() external view returns (uint256);\r\n    function balanceOf(address who) external view returns (uint256);\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n    function transfer(address to, uint256 value) external returns (bool);\r\n    function approve(address spender, uint256 value) external returns (bool);\r\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\r\n    function destroy(uint256 amount, address account) external;\r\n    function issuance(uint256 amount, address account) external;\r\n    \r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n// File: lib/SafeMath.sol\r\n\r\npragma solidity ^0.6.12;\r\n\r\n// a library for performing overflow-safe math, courtesy of DappHub (https://github.com/dapphub/ds-math)\r\n\r\nlibrary SafeMath {\r\n    function add(uint x, uint y) internal pure returns (uint z) {\r\n        require((z = x + y) >= x, 'ds-math-add-overflow');\r\n    }\r\n\r\n    function sub(uint x, uint y) internal pure returns (uint z) {\r\n        require((z = x - y) <= x, 'ds-math-sub-underflow');\r\n    }\r\n\r\n    function mul(uint x, uint y) internal pure returns (uint z) {\r\n        require(y == 0 || (z = x * y) / y == x, 'ds-math-mul-overflow');\r\n    }\r\n\r\n    function div(uint x, uint y) internal pure returns (uint z) {\r\n        require(y > 0, \"ds-math-div-zero\");\r\n        z = x / y;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    }\r\n}\r\n// File: PToken.sol\r\n\r\npragma solidity ^0.6.12;\r\n\r\ncontract PToken is IParasset {\r\n    using SafeMath for uint256;\r\n\r\n    mapping (address => uint256) private _balances;\r\n    mapping (address => mapping (address => uint256)) private _allowed;\r\n    uint256 public _totalSupply = 0;                                        \r\n    string public name = \"\";\r\n    string public symbol = \"\";\r\n    uint8 public decimals = 18;\r\n\r\n    IPTokenFactory pTokenFactory;\r\n\r\n    constructor (string memory _name, \r\n                 string memory _symbol) public {\r\n    \tname = _name;                                                               \r\n    \tsymbol = _symbol;\r\n    \tpTokenFactory = IPTokenFactory(address(msg.sender));\r\n    }\r\n\r\n    //---------modifier---------\r\n\r\n    modifier onlyGovernance() {\r\n        require(address(msg.sender) == pTokenFactory.getGovernance(), \"Log:PToken:!governance\");\r\n        _;\r\n    }\r\n\r\n    modifier onlyPool() {\r\n    \trequire(pTokenFactory.getPTokenOperator(address(msg.sender)), \"Log:PToken:!Pool\");\r\n    \t_;\r\n    }\r\n\r\n    //---------view---------\r\n\r\n    // Query factory contract address\r\n    function getPTokenFactory() public view returns(address) {\r\n        return address(pTokenFactory);\r\n    }\r\n\r\n    /// @notice The view of totalSupply\r\n    /// @return The total supply of ntoken\r\n    function totalSupply() override public view returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    /// @dev The view of balances\r\n    /// @param owner The address of an account\r\n    /// @return The balance of the account\r\n    function balanceOf(address owner) override public view returns (uint256) {\r\n        return _balances[owner];\r\n    }\r\n\r\n    function allowance(address owner, address spender) override public view returns (uint256) {\r\n        return _allowed[owner][spender];\r\n    }\r\n\r\n    //---------transaction---------\r\n\r\n    function changeFactory(address factory) public onlyGovernance {\r\n        pTokenFactory = IPTokenFactory(address(factory));\r\n    }\r\n\r\n    function rename(string memory _name, \r\n                    string memory _symbol) public onlyGovernance {\r\n        name = _name;                                                               \r\n        symbol = _symbol;\r\n    }\r\n\r\n    function transfer(address to, uint256 value) override public returns (bool) \r\n    {\r\n        _transfer(msg.sender, to, value);\r\n        return true;\r\n    }\r\n\r\n    function approve(address spender, uint256 value) override public returns (bool) \r\n    {\r\n        require(spender != address(0));\r\n        _allowed[msg.sender][spender] = value;\r\n        emit Approval(msg.sender, spender, value);\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(address from, address to, uint256 value) override public returns (bool) \r\n    {\r\n        _allowed[from][msg.sender] = _allowed[from][msg.sender].sub(value);\r\n        _transfer(from, to, value);\r\n        emit Approval(from, msg.sender, _allowed[from][msg.sender]);\r\n        return true;\r\n    }\r\n\r\n    function increaseAllowance(address spender, uint256 addedValue) public returns (bool) \r\n    {\r\n        require(spender != address(0));\r\n\r\n        _allowed[msg.sender][spender] = _allowed[msg.sender][spender].add(addedValue);\r\n        emit Approval(msg.sender, spender, _allowed[msg.sender][spender]);\r\n        return true;\r\n    }\r\n\r\n    function decreaseAllowance(address spender, uint256 subtractedValue) public returns (bool) \r\n    {\r\n        require(spender != address(0));\r\n\r\n        _allowed[msg.sender][spender] = _allowed[msg.sender][spender].sub(subtractedValue);\r\n        emit Approval(msg.sender, spender, _allowed[msg.sender][spender]);\r\n        return true;\r\n    }\r\n\r\n    function _transfer(address from, address to, uint256 value) internal {\r\n        _balances[from] = _balances[from].sub(value);\r\n        _balances[to] = _balances[to].add(value);\r\n        emit Transfer(from, to, value);\r\n    }\r\n\r\n    function destroy(uint256 amount, address account) override external onlyPool{\r\n    \trequire(_balances[account] >= amount, \"Log:PToken:!destroy\");\r\n    \t_balances[account] = _balances[account].sub(amount);\r\n    \t_totalSupply = _totalSupply.sub(amount);\r\n    \temit Transfer(account, address(0x0), amount);\r\n    }\r\n\r\n    function issuance(uint256 amount, address account) override external onlyPool{\r\n    \t_balances[account] = _balances[account].add(amount);\r\n    \t_totalSupply = _totalSupply.add(amount);\r\n    \temit Transfer(address(0x0), account, amount);\r\n    }\r\n}\r\n// File: PTokenFactory.sol\r\n\r\npragma solidity ^0.6.12;\r\n\r\ncontract PTokenFactory {\r\n\r\n\t// Governance address\r\n\taddress public governance;\r\n\t// contract address => bool, ptoken operation permissions\r\n\tmapping(address=>bool) allowAddress;\r\n\t// ptoken address => bool, ptoken verification\r\n\tmapping(address=>bool) pTokenMapping;\r\n    // ptoken list\r\n\taddress[] pTokenList;\r\n\r\n    event createLog(address pTokenAddress);\r\n    event pTokenOperator(address contractAddress, bool allow);\r\n\r\n\tconstructor () public {\r\n        governance = msg.sender;\r\n    }\r\n\r\n    //---------modifier---------\r\n\r\n    modifier onlyGovernance() {\r\n        require(msg.sender == governance, \"Log:PTokenFactory:!gov\");\r\n        _;\r\n    }\r\n\r\n    //---------view---------\r\n\r\n    function strConcat(string memory _a, string memory _b) public pure returns (string memory){\r\n        bytes memory _ba = bytes(_a);\r\n        bytes memory _bb = bytes(_b);\r\n        string memory ret = new string(_ba.length + _bb.length);\r\n        bytes memory bret = bytes(ret);\r\n        uint s = 0;\r\n        for (uint i = 0; i < _ba.length; i++) {\r\n            bret[s++] = _ba[i];\r\n        } \r\n        for (uint i = 0; i < _bb.length; i++) {\r\n            bret[s++] = _bb[i];\r\n        } \r\n        return string(ret);\r\n    }\r\n\r\n    /// @dev View governance address\r\n    /// @return governance address\r\n    function getGovernance() public view returns(address) {\r\n        return governance;\r\n    }\r\n\r\n    /// @dev View ptoken operation permissions\r\n    /// @param contractAddress contract address\r\n    /// @return bool\r\n    function getPTokenOperator(address contractAddress) public view returns(bool) {\r\n    \treturn allowAddress[contractAddress];\r\n    }\r\n\r\n    /// @dev View ptoken operation permissions\r\n    /// @param pToken ptoken verification\r\n    /// @return bool\r\n    function getPTokenAuthenticity(address pToken) public view returns(bool) {\r\n    \treturn pTokenMapping[pToken];\r\n    }\r\n\r\n    /// @dev View ptoken list length\r\n    /// @return ptoken list length\r\n    function getPTokenNum() public view returns(uint256) {\r\n    \treturn pTokenList.length;\r\n    }\r\n\r\n    /// @dev View ptoken address\r\n    /// @param index array subscript\r\n    /// @return ptoken address\r\n    function getPTokenAddress(uint256 index) public view returns(address) {\r\n    \treturn pTokenList[index];\r\n    }\r\n\r\n    //---------governance----------\r\n\r\n    /// @dev Set governance address\r\n    /// @param add new governance address\r\n    function setGovernance(address add) public onlyGovernance {\r\n    \trequire(add != address(0x0), \"Log:PTokenFactory:0x0\");\r\n    \tgovernance = add;\r\n    }\r\n\r\n    /// @dev Set governance address\r\n    /// @param contractAddress contract address\r\n    /// @param allow bool\r\n    function setPTokenOperator(address contractAddress, \r\n                               bool allow) public onlyGovernance {\r\n        allowAddress[contractAddress] = allow;\r\n        emit pTokenOperator(contractAddress, allow);\r\n    }\r\n\r\n    /// @dev Create PToken\r\n    /// @param name token name\r\n    function createPtoken(string memory name) public onlyGovernance {\r\n    \tPToken pToken = new PToken(strConcat(\"PToken_\", name), strConcat(\"P\", name));\r\n    \tpTokenMapping[address(pToken)] = true;\r\n    \tpTokenList.push(address(pToken));\r\n    \temit createLog(address(pToken));\r\n    }\r\n}","ABI":"[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"pTokenAddress\",\"type\":\"address\"}],\"name\":\"createLog\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"contractAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"allow\",\"type\":\"bool\"}],\"name\":\"pTokenOperator\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"}],\"name\":\"createPtoken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getGovernance\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getPTokenAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pToken\",\"type\":\"address\"}],\"name\":\"getPTokenAuthenticity\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPTokenNum\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"contractAddress\",\"type\":\"address\"}],\"name\":\"getPTokenOperator\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"governance\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"add\",\"type\":\"address\"}],\"name\":\"setGovernance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"contractAddress\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"allow\",\"type\":\"bool\"}],\"name\":\"setPTokenOperator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_a\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_b\",\"type\":\"string\"}],\"name\":\"strConcat\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"}]","ContractName":"PTokenFactory","CompilerVersion":"v0.6.12+commit.27d51765","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"GNU GPLv3","Proxy":"0","Implementation":"","SwarmSource":"ipfs://b69f86cc99ca184582e83b963c81d045f12c0de70095d54bf7b9cdb752ac4083"}]}