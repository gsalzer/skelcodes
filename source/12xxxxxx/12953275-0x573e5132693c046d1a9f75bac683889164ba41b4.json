{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/mainnet/mapping/reflexer.sol\": {\r\n      \"content\": \"pragma solidity ^0.7.0;\\npragma experimental ABIEncoderV2;\\n\\ninterface CollateralJoinInterface {\\n    function collateralType() external view returns (bytes32);\\n}\\n\\ninterface ConnectorsInterface {\\n    function chief(address) external view returns (bool);\\n}\\n\\ninterface IndexInterface {\\n    function master() external view returns (address);\\n}\\n\\ninterface MappingControllerInterface {\\n    function hasRole(address,address) external view returns (bool);\\n}\\ncontract Helpers {\\n    ConnectorsInterface public constant connectors = ConnectorsInterface(0x97b0B3A8bDeFE8cB9563a3c610019Ad10DB8aD11); // InstaConnectorsV2\\n    IndexInterface public constant instaIndex = IndexInterface(0x2971AdFa57b20E5a416aE5a708A8655A9c74f723);\\n    \\n    MappingControllerInterface public constant mappingController = MappingControllerInterface(0xDdd075D5e1024901E4038461e1e4BbC3A48a08d4);\\n    uint public version = 1;\\n\\n    mapping (bytes32 => address) public collateralJoinMapping;\\n\\n    event LogAddCollateralJoinMapping(address[] collateralJoin);\\n    \\n    modifier hasRoleOrIsChief {\\n        require(\\n            msg.sender == instaIndex.master() ||\\n                connectors.chief(msg.sender) ||\\n                mappingController.hasRole(address(this), msg.sender),\\n            \\\"not-an-chief\\\"\\n        );\\n        _;\\n    }    \\n    \\n    function addCollateralJoinMapping(address[] memory collateralJoins) public hasRoleOrIsChief {\\n        _addCollateralJoinMapping(collateralJoins);\\n    }\\n\\n    function _addCollateralJoinMapping(address[] memory collateralJoins) internal {\\n        require(collateralJoins.length > 0, \\\"No-CollateralJoin-Address\\\");\\n        for(uint i = 0; i < collateralJoins.length; i++) {\\n            address collateralJoin = collateralJoins[i];\\n            bytes32 collateralType = CollateralJoinInterface(collateralJoin).collateralType();\\n            require(collateralJoinMapping[collateralType] == address(0), \\\"CollateralJoin-Already-Added\\\");\\n            collateralJoinMapping[collateralType] = collateralJoin;\\n        }\\n        emit LogAddCollateralJoinMapping(collateralJoins);\\n    }\\n\\n}\\n\\ncontract InstaReflexerGebMapping is Helpers {\\n    string constant public name = \\\"Reflexer-Geb-Mapping-v1\\\";\\n    \\n    constructor() public {\\n        address[] memory collateralJoins = new address[](1);\\n        collateralJoins[0] = 0x2D3cD7b81c93f188F3CB8aD87c8Acc73d6226e3A; // ETH-A Join contract address\\n        _addCollateralJoinMapping(collateralJoins); \\n    }\\n}\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": false,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"metadata\": {\r\n      \"useLiteralContent\": true\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}","ABI":"[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"collateralJoin\",\"type\":\"address[]\"}],\"name\":\"LogAddCollateralJoinMapping\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"collateralJoins\",\"type\":\"address[]\"}],\"name\":\"addCollateralJoinMapping\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"collateralJoinMapping\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"connectors\",\"outputs\":[{\"internalType\":\"contract ConnectorsInterface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"instaIndex\",\"outputs\":[{\"internalType\":\"contract IndexInterface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mappingController\",\"outputs\":[{\"internalType\":\"contract MappingControllerInterface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"InstaReflexerGebMapping","CompilerVersion":"v0.7.6+commit.7338295f","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}