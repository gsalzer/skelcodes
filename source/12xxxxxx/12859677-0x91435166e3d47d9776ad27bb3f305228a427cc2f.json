{"status":"1","message":"OK","result":[{"SourceCode":"/**\r\n *Submitted for verification at Etherscan.io on 2021-07-18\r\n*/\r\n\r\n// SPDX-License-Identifier: UNLICENSED\r\npragma solidity 0.8.4;\r\n\r\ncontract Owned {\r\n    address public owner;\r\n    address public proposedOwner;\r\n\r\n    event OwnershipTransferred(\r\n        address indexed previousOwner,\r\n        address indexed newOwner\r\n    );\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor() {\r\n        owner = msg.sender;\r\n        emit OwnershipTransferred(address(0), msg.sender);\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() virtual {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev propeses a new owner\r\n     * Can only be called by the current owner.\r\n     */\r\n    function proposeOwner(address payable _newOwner) external onlyOwner {\r\n        proposedOwner = _newOwner;\r\n    }\r\n\r\n    /**\r\n     * @dev claims ownership of the contract\r\n     * Can only be called by the new proposed owner.\r\n     */\r\n    function claimOwnership() external {\r\n        require(msg.sender == proposedOwner);\r\n        emit OwnershipTransferred(owner, proposedOwner);\r\n        owner = proposedOwner;\r\n    }\r\n}\r\n// File: @openzeppelin/contracts/utils/Context.sol\r\n\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/*\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\r\n\r\n\r\n\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\ninterface ERC20 {\r\n   function balanceOf(address _owner) view external  returns (uint256 balance);\r\n   function transfer(address _to, uint256 _value) external  returns (bool success);\r\n   function transferFrom(address _from, address _to, uint256 _value) external  returns (bool success);\r\n   function approve(address _spender, uint256 _value) external returns (bool success);\r\n   function allowance(address _owner, address _spender) view external  returns (uint256 remaining);\r\n   event Transfer(address indexed _from, address indexed _to, uint256 _value);\r\n   event Approval(address indexed _owner, address indexed _spender, uint256 _value);\r\n}\r\n\r\n\r\n\r\n\r\n\r\npragma solidity 0.8.4;\r\n\r\n\r\n\r\ncontract BISHUswapper is Context, Owned {\r\n   \r\n    address oldToken ;\r\n    address newToken;\r\n\r\n    \r\n \r\n    constructor(address oldTokens,address newTokens)  {\r\n       \r\n         owner = msg.sender;\r\n         oldToken = oldTokens;\r\n         newToken = newTokens;\r\n    }\r\n\r\n\r\n\r\n\r\n\r\n  function exchangeToken(uint256 tokens)external   \r\n        {\r\n        \r\n            require(tokens <= ERC20(newToken).balanceOf(address(this)), \"Not enough tokens in the reserve\");\r\n            require(ERC20(oldToken).transferFrom(_msgSender(), address(this), tokens), \"Tokens cannot be transferred from user account\");      \r\n            \r\n            ERC20(newToken).transfer(_msgSender(), tokens);\r\n    }\r\n\r\n\r\n   function extractOldTokens() external onlyOwner\r\n        {\r\n            ERC20(oldToken).transfer(_msgSender(), ERC20(oldToken).balanceOf(address(this)));\r\n           \r\n        }\r\n\r\n   function extractNewTokens() external onlyOwner\r\n        {\r\n            ERC20(newToken).transfer(_msgSender(), ERC20(newToken).balanceOf(address(this)));\r\n            \r\n        }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"oldTokens\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"newTokens\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"claimOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"exchangeToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"extractNewTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"extractOldTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"proposeOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"proposedOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"BISHUswapper","CompilerVersion":"v0.8.4+commit.c7e474f2","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"00000000000000000000000099043bb680ab9262c7b2ac524e00b215efb7db9b000000000000000000000000d49374d1d6d2b2d793035a0116f2b0d19230de26","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"ipfs://6c28617b125e3a93aacd45ab5d93b80473eadec28f9dd26828a07976435625ec"}]}