{"status":"1","message":"OK","result":[{"SourceCode":"//SPDX-License-Identifier: Apache-2.0;\r\npragma solidity ^0.7.6;\r\n\r\nlibrary SafeMath {\r\n\r\n  /**\r\n  * @dev Multiplies two numbers, throws on overflow.\r\n  */\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n    c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Integer division of two numbers, truncating the quotient.\r\n  */\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    // uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return a / b;\r\n  }\r\n\r\n  /**\r\n  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n  */\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  /**\r\n  * @dev Adds two numbers, throws on overflow.\r\n  */\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n    c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\ninterface ERC20Interface {\r\n    function totalSupply() external view returns (uint256);\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n}\r\n\r\n\r\ncontract Barbecue {\r\n    \r\n    using SafeMath for uint256;\r\n    uint256 constant EXCHANGE_RATE = 10;\r\n    \r\n    event Exchanged(address indexed from, uint256 ethValue, uint256 wurstValue);\r\n    \r\n    ERC20Interface public tokenContract = ERC20Interface(address(0x67e74603DF95cAbBEbC6795478c2402A01eA1517));\r\n    address payable public fundingWallet = payable(0x67E0023d1E7176Cdaf65a9afA374D774484839e0);\r\n\r\n    receive() external payable {\r\n        address from = msg.sender;\r\n        uint256 ethValue = msg.value;\r\n        require(ethValue > 0, \"sent eth has to be greater than 0\");\r\n        uint256 wurstValue = ethValue.div(EXCHANGE_RATE);\r\n        require(wurstValue > 0, \"exchanged wurstValue has to be greater than 0\");\r\n        \r\n        require(tokenContract.transfer(from, wurstValue), \"wurst transfer failed\");\r\n        emit Exchanged(from, ethValue, wurstValue);\r\n    }\r\n    \r\n    function withdraw() external payable {\r\n        require(msg.sender == fundingWallet, \"only the funding wallet can issue a withdraw\");\r\n        fundingWallet.transfer(address(this).balance);\r\n    }\r\n}\r\n\r\ncontract CheapBarbecue {\r\n    \r\n    using SafeMath for uint256;\r\n    uint256 constant EXCHANGE_RATE = 100;\r\n    \r\n    event Exchanged(address indexed from, uint256 ethValue, uint256 wurstValue);\r\n    \r\n    ERC20Interface public tokenContract = ERC20Interface(address(0x67e74603DF95cAbBEbC6795478c2402A01eA1517));\r\n    address payable public fundingWallet = payable(0x67E0023d1E7176Cdaf65a9afA374D774484839e0);\r\n\r\n    receive() external payable {\r\n        address from = msg.sender;\r\n        uint256 ethValue = msg.value;\r\n        require(ethValue > 0, \"sent eth has to be greater than 0\");\r\n        uint256 wurstValue = ethValue.mul(EXCHANGE_RATE);\r\n        require(wurstValue > 0, \"exchanged wurstValue has to be greater than 0\");\r\n        \r\n        require(tokenContract.transfer(from, wurstValue), \"wurst transfer failed\");\r\n        emit Exchanged(from, ethValue, wurstValue);\r\n    }\r\n    \r\n    function withdraw() external payable {\r\n        require(msg.sender == fundingWallet, \"only the funding wallet can issue a withdraw\");\r\n        fundingWallet.transfer(address(this).balance);\r\n    }\r\n}","ABI":"[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"ethValue\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"wurstValue\",\"type\":\"uint256\"}],\"name\":\"Exchanged\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"fundingWallet\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenContract\",\"outputs\":[{\"internalType\":\"contract ERC20Interface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]","ContractName":"CheapBarbecue","CompilerVersion":"v0.7.6+commit.7338295f","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"Apache-2.0","Proxy":"0","Implementation":"","SwarmSource":"ipfs://bbaefce879971180b1e81f2edcd008f5ccd5f724333fa41d2d11be625009c6ed"}]}