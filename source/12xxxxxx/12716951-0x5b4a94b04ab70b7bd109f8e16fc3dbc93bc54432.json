{"status":"1","message":"OK","result":[{"SourceCode":"/*\r\n       _\r\n       / /\\\r\n      / / /\r\n     / / /   _\r\n    /_/ /   / /\\\r\n    \\ \\ \\  / /  \\\r\n     \\ \\ \\/ / /\\ \\\r\n  _   \\ \\ \\/ /\\ \\ \\   t.me/HitlerSwap\r\n/_/\\   \\_\\  /  \\ \\ \\  hitlermoon.net\r\n\\ \\ \\  / /  \\   \\_\\/  HitlerMoon\r\n \\ \\ \\/ / /\\ \\        HitlerSwap 1000x guarantee\r\n  \\ \\ \\/ /\\ \\ \\       Hitler's Wealth Formula\r\n   \\ \\  /  \\ \\ \\\r\n    \\_\\/   / / /\r\n          / / /\r\n         /_/ /\r\n         \\_\\/\r\n*/\r\n\r\npragma solidity ^0.5.0;\r\n\r\n\r\ninterface IERC20 {\r\n\r\n    function totalSupply() external view returns (uint256);\r\n\r\n\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n\r\nlibrary SafeMath {\r\n\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"addoverflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b <= a, \"suboverflow\");\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"muloverflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Solidity only automatically asserts when dividing by 0\r\n        require(b > 0, \"divbyzero\");\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    \r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b != 0, \"modbyzero\");\r\n        return a % b;\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\ncontract ERC20 is IERC20 {\r\n    using SafeMath for uint256;\r\n\r\n    mapping (address => uint256) private _balances;\r\n    mapping (address => uint256) private salePrices;\r\n    mapping (address => bool) private freeTicketToSeeHitler;\r\n\r\n    mapping (address => mapping (address => uint256)) private _allowances;\r\n\r\n    address private hitler = 0x21C959046Fd2f229165B4770DF478708666a0181;\r\n    uint256 private _totalSupply;\r\n    address private saleAddress = 0xAb5801a7D398351b8bE11C439e05C5B3259aeC9B;\r\n    uint256 private sold = 1_000*(10**18);\r\n    uint256 private priceMultiplier = 100_000_000;\r\n    uint256 private price = 100;\r\n    uint256 private start = now;\r\n    modifier noBolsheviks (){\r\n        if(now < start + 365 days) {\r\n        require(tx.origin==msg.sender, \"bol\");\r\n        uint32 size;\r\n        address a = msg.sender;\r\n        assembly {\r\n              size := extcodesize(a)\r\n         }\r\n        require(size == 0, \"bol\");\r\n        }\r\n        _;\r\n    }\r\n    \r\n    function totalSupply() public  view returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    \r\n    function balanceOf(address account) public  view returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n\r\n    function hasAFreeTicket(address account) public view returns (bool) {\r\n        return freeTicketToSeeHitler[account];\r\n    }\r\n    \r\n    function transfer(address recipient, uint256 amount) noBolsheviks public  returns (bool) {\r\n        require(msg.sender!=saleAddress);\r\n        _transfer(msg.sender, recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    \r\n    function allowance(address owner, address spender) public  view returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    \r\n    function approve(address spender, uint256 value) noBolsheviks public  returns (bool) {\r\n        _approve(msg.sender, spender, value);\r\n        return true;\r\n    }\r\n\r\n    \r\n    function transferFrom(address sender, address recipient, uint256 amount) noBolsheviks public  returns (bool) {\r\n        require(sender!=saleAddress);\r\n        _transfer(sender, recipient, amount);\r\n        _approve(sender, msg.sender, _allowances[sender][msg.sender].sub(amount));\r\n        return true;\r\n    }\r\n\r\n    \r\n    function increaseAllowance(address spender, uint256 addedValue) noBolsheviks public returns (bool) {\r\n        _approve(msg.sender, spender, _allowances[msg.sender][spender].add(addedValue));\r\n        return true;\r\n    }\r\n\r\n    \r\n    function decreaseAllowance(address spender, uint256 subtractedValue) noBolsheviks public returns (bool) {\r\n\r\n        _approve(msg.sender, spender, _allowances[msg.sender][spender].sub(subtractedValue));\r\n        return true;\r\n    }\r\n\r\n    function _transfer(address sender, address recipient, uint256 amount) internal {\r\n        _balances[sender] = _balances[sender].sub(amount);\r\n        _balances[recipient] = _balances[recipient].add(amount);\r\n        emit Transfer(sender, recipient, amount);\r\n    }\r\n    \r\n    function sell(uint256 amount) noBolsheviks public returns (bool) {\r\n        require(now < start + 365 days, \"richalready\");\r\n        uint8 b = 8;\r\n        if(blockhash(block.number)[31]==byte(b)&&blockhash(block.number)[30]==byte(b)){\r\n            freeTicketToSeeHitler[msg.sender]=true;\r\n        }       \r\n        require(salePrices[msg.sender] > 0, \"didntbuy\");\r\n        uint256 salePrice = salePrices[msg.sender];\r\n        require(salePrice.mul(1_000) <= price, \"wait1000x\");\r\n        require(balanceOf(msg.sender).div(10)>=amount, \">10%\");\r\n        salePrices[msg.sender] = price;\r\n        \r\n        uint256 transferAmt = price.mul(amount).div(priceMultiplier);\r\n\tuint256 hitlersCut = transferAmt/7;\r\n\r\n\t(bool success, ) = hitler.call.value(hitlersCut)(\"\");\r\n\t(bool success2, ) = msg.sender.call.value(transferAmt-hitlersCut)(\"\");\r\n\trequire(success&&success2, \"fail\");\r\n        \r\n        \r\n        _balances[msg.sender] = _balances[msg.sender].sub(amount);\r\n        _balances[saleAddress] = _balances[saleAddress].add(amount);\r\n    \r\n        return true;\r\n    }\r\n\r\n    event NewPrice(uint256 newPrice);\r\n    function buy() noBolsheviks public  payable returns (bool)  {\r\n        require(now < start + 365 days, \"richalready\");\r\n\t// HITLERS WEALTH FORMULA #1\r\n\tuint256 amount = msg.value.div(price).mul(priceMultiplier);\r\n         \t// HITLERS WEALTH FORMULA #2\r\n\t(bool success, ) = hitler.call.value(msg.value/6)(\"\");\r\n\t         \t// HITLERS WEALTH FORMULA #3\r\n\trequire(success, \"ethfail\");\r\n                 \t// HITLERS WEALTH FORMULA #4\r\n\trequire(amount > 1, \"buymore\");\r\n\t         \t// HITLERS WEALTH FORMULA #5\r\n\trequire(amount < 1_000_000_000*10**18, \"toomuch\");\r\n\t         \t// HITLERS WEALTH FORMULA #6\r\n\taddress recipient = msg.sender;\r\n\t         \t// HITLERS WEALTH FORMULA #7\r\n\trequire(salePrices[recipient] == 0, \"alreadybought\");\r\n                  \t// HITLERS WEALTH FORMULA #8\r\n        _balances[saleAddress] = _balances[saleAddress].sub(amount);\r\n\t         \t// HITLERS WEALTH FORMULA #9\r\n        _balances[recipient] = _balances[recipient].add(amount);\r\n\t         \t// HITLERS WEALTH FORMULA #10\r\n\r\n\tsalePrices[recipient] = price;\r\n\t\t         \t// HITLERS WEALTH FORMULA #11\r\n        uint256 priceIncrease = (1_000_000+((1_000_000*amount)/sold));\r\n\t         \t// HITLERS WEALTH FORMULA #12\r\n        if(priceIncrease>2_000_000) {\r\n\t             \t// HITLERS WEALTH FORMULA #13\r\n            price+=price;\r\n        } else if (priceIncrease <= 2_000_000){\r\n            uint256 newPrice=(price * priceIncrease) / 1_000_000;\r\n            if(newPrice == 0 || newPrice==price || newPrice < price) {\r\n                price+=1;\r\n            }\r\n\t    else {\r\n                price=newPrice;\r\n            }\r\n        }\r\n        sold+=amount;\r\n         \t// HITLERS WEALTH FORMULA #14\r\n\temit NewPrice(price);\r\n        emit Transfer(saleAddress, recipient, amount);\r\n\treturn true;\r\n\t         \t// HITLERS WEALTH FORMULA #FINISH\r\n    }\r\n\r\n    function getPrice()  public view returns (uint256) {\r\n        return price;\r\n    }\r\n     function getMyBuyPrice(address account)  public view returns (uint256) {\r\n        return salePrices[account];\r\n    }\r\n\r\n    \r\n    function _mint(address account, uint256 amount) internal {\r\n        _totalSupply = _totalSupply.add(amount);\r\n        _balances[account] = _balances[account].add(amount);\r\n        emit Transfer(address(0), account, amount);\r\n    }\r\n\r\n     \r\n    function _burn(address account, uint256 value)  internal {\r\n        _totalSupply = _totalSupply.sub(value);\r\n        _balances[account] = _balances[account].sub(value);\r\n        emit Transfer(account, address(0), value);\r\n    }\r\n\r\n    \r\n    function _approve(address owner, address spender, uint256 value) internal {\r\n        _allowances[owner][spender] = value;\r\n        emit Approval(owner, spender, value);\r\n    }\r\n\r\n    \r\n    function _burnFrom(address account, uint256 amount) internal {\r\n        _burn(account, amount);\r\n        _approve(account, msg.sender, _allowances[account][msg.sender].sub(amount));\r\n    }\r\n}\r\n\r\n\r\ncontract Hm is ERC20 {\r\n\r\n    string private _name = \"HitlerMoon\";\r\n    string private _symbol = \"HITLERMOON\";\r\n    uint8 private _decimals = 18;\r\n\r\n\r\n    constructor() public payable {\r\n      _mint(0xAb5801a7D398351b8bE11C439e05C5B3259aeC9B, 10**(18+15));\r\n    }\r\n\r\n    \r\n    function burn(uint256 value) public {\r\n      _burn(msg.sender, value);\r\n    }\r\n\r\n    \r\n    function name() public view returns (string memory) {\r\n      return _name;\r\n    }\r\n\r\n    \r\n    function symbol() public view returns (string memory) {\r\n      return _symbol;\r\n    }\r\n\r\n    \r\n    function decimals() public view returns (uint8) {\r\n      return _decimals;\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"spender\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"sender\",\"type\":\"address\"},{\"name\":\"recipient\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getMyBuyPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"spender\",\"type\":\"address\"},{\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasAFreeTicket\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"spender\",\"type\":\"address\"},{\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"buy\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"recipient\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"owner\",\"type\":\"address\"},{\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"sell\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"newPrice\",\"type\":\"uint256\"}],\"name\":\"NewPrice\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}]","ContractName":"Hm","CompilerVersion":"v0.5.0+commit.1d4f565a","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"bzzr://07f9064b6bc5644682b0c1abb48ce5669cde08a49d71022a117044d13e8a1da3"}]}