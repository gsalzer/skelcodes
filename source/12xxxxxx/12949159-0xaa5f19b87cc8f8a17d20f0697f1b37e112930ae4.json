{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.6.7;\r\n\r\nabstract contract TokenLike {\r\n    function balanceOf(address) virtual public view returns (uint256);\r\n}\r\nabstract contract AccountingEngineLike {\r\n    function debtAuctionBidSize() virtual public view returns (uint256);\r\n    function unqueuedUnauctionedDebt() virtual public view returns (uint256);\r\n}\r\nabstract contract GebLenderFirstResortLike {\r\n    function ancestorPool() virtual external view returns (address);\r\n    function modifyParameters(bytes32, uint256) virtual external;\r\n}\r\nabstract contract SAFEEngineLike {\r\n    function coinBalance(address) virtual public view returns (uint256);\r\n    function debtBalance(address) virtual public view returns (uint256);\r\n}\r\nabstract contract TokenPoolLike {\r\n    function token() virtual external view returns (address);\r\n}\r\n\r\ncontract StakedTokensToKeepSetter {\r\n    // --- Auth ---\r\n    mapping (address => uint) public authorizedAccounts;\r\n    /**\r\n     * @notice Add auth to an account\r\n     * @param account Account to add auth to\r\n     */\r\n    function addAuthorization(address account) virtual external isAuthorized {\r\n        authorizedAccounts[account] = 1;\r\n        emit AddAuthorization(account);\r\n    }\r\n    /**\r\n     * @notice Remove auth from an account\r\n     * @param account Account to remove auth from\r\n     */\r\n    function removeAuthorization(address account) virtual external isAuthorized {\r\n        authorizedAccounts[account] = 0;\r\n        emit RemoveAuthorization(account);\r\n    }\r\n    /**\r\n    * @notice Checks whether msg.sender can call an authed function\r\n    **/\r\n    modifier isAuthorized {\r\n        require(authorizedAccounts[msg.sender] == 1, \"StakedTokensToKeepSetter/account-not-authorized\");\r\n        _;\r\n    }\r\n\r\n    // --- Variables ---\r\n    // Percentage of tokens to keep in the pool at all times\r\n    uint256                  public tokenPercentageToKeep;\r\n    // The lender of first resort pool\r\n    GebLenderFirstResortLike public lenderFirstResort;\r\n    // Accounting engine contract\r\n    AccountingEngineLike     public accountingEngine;\r\n    // SAFE database\r\n    SAFEEngineLike           public safeEngine;\r\n\r\n    uint256 public constant  MIN_TOKENS = 1 ether;\r\n\r\n    // --- Events ---\r\n    event AddAuthorization(address account);\r\n    event RemoveAuthorization(address account);\r\n    event RecomputeTokensToKeep(uint256 tokensToKeep);\r\n\r\n    constructor(address safeEngine_, address accountingEngine_, address lenderFirstResort_, uint256 tokenPercentageToKeep_) public {\r\n        require(accountingEngine_ != address(0), \"StakedTokensToKeepSetter/null-accounting-engine\");\r\n        require(lenderFirstResort_ != address(0), \"StakedTokensToKeepSetter/null-lender-first-resort\");\r\n        require(safeEngine_ != address(0), \"StakedTokensToKeepSetter/null-safe-engine\");\r\n        require(both(tokenPercentageToKeep_ > 0, tokenPercentageToKeep_ < HUNDRED), \"StakedTokensToKeepSetter/invalid-pc-to-keep\");\r\n\r\n        authorizedAccounts[msg.sender] = 1;\r\n\r\n        accountingEngine      = AccountingEngineLike(accountingEngine_);\r\n        lenderFirstResort     = GebLenderFirstResortLike(lenderFirstResort_);\r\n        safeEngine            = SAFEEngineLike(safeEngine_);\r\n        tokenPercentageToKeep = tokenPercentageToKeep_;\r\n\r\n        emit AddAuthorization(msg.sender);\r\n    }\r\n\r\n    // --- Boolean Logic ---\r\n    function both(bool x, bool y) internal pure returns (bool z) {\r\n        assembly{ z := and(x, y)}\r\n    }\r\n\r\n    // --- Math ---\r\n    uint256 public constant HUNDRED = 100;\r\n    function multiply(uint x, uint y) internal pure returns (uint z) {\r\n        require(y == 0 || (z = x * y) / y == x, \"StakedTokensToKeepSetter/mul-overflow\");\r\n    }\r\n\r\n    // --- Administration ---\r\n    /*\r\n    * @notify Modify an uint256 parameter\r\n    * @param parameter The name of the parameter to modify\r\n    * @param data New value for the parameter\r\n    */\r\n    function modifyParameters(bytes32 parameter, uint256 data) external isAuthorized {\r\n        if (parameter == \"tokenPercentageToKeep\") {\r\n          require(both(data > 0, data < HUNDRED), \"StakedTokensToKeepSetter/invalid-pc-to-keep\");\r\n          tokenPercentageToKeep = data;\r\n        }\r\n        else revert(\"StakedTokensToKeepSetter/modify-unrecognized-param\");\r\n    }\r\n\r\n    // --- Core Logic ---\r\n    /*\r\n    * @notice Returns whether the protocol is underwater or not\r\n    */\r\n    function protocolUnderwater() public view returns (bool) {\r\n        uint256 unqueuedUnauctionedDebt = accountingEngine.unqueuedUnauctionedDebt();\r\n\r\n        return both(\r\n          accountingEngine.debtAuctionBidSize() <= unqueuedUnauctionedDebt,\r\n          safeEngine.coinBalance(address(accountingEngine)) < unqueuedUnauctionedDebt\r\n        );\r\n    }\r\n\r\n    /*\r\n    * @notice Recompute and set the new min amount of tokens to keep unauctioned in the lender of first resort pool\r\n    */\r\n    function recomputeTokensToKeep() external {\r\n        require(!protocolUnderwater(), \"StakedTokensToKeepSetter/cannot-compute-when-underwater\");\r\n\r\n        TokenPoolLike ancestorPool = TokenPoolLike(address(lenderFirstResort.ancestorPool()));\r\n        TokenLike ancestorToken    = TokenLike(address(ancestorPool.token()));\r\n\r\n        uint256 tokensToKeep       = multiply(tokenPercentageToKeep, ancestorToken.balanceOf(address(ancestorPool))) / HUNDRED;\r\n        if (tokensToKeep == 0) {\r\n          tokensToKeep = MIN_TOKENS;\r\n        }\r\n\r\n        lenderFirstResort.modifyParameters(\"minStakedTokensToKeep\", tokensToKeep);\r\n\r\n        emit RecomputeTokensToKeep(tokensToKeep);\r\n    }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"safeEngine_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"accountingEngine_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"lenderFirstResort_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenPercentageToKeep_\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"AddAuthorization\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokensToKeep\",\"type\":\"uint256\"}],\"name\":\"RecomputeTokensToKeep\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"RemoveAuthorization\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"HUNDRED\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MIN_TOKENS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"accountingEngine\",\"outputs\":[{\"internalType\":\"contract AccountingEngineLike\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"addAuthorization\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"authorizedAccounts\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lenderFirstResort\",\"outputs\":[{\"internalType\":\"contract GebLenderFirstResortLike\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"parameter\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"data\",\"type\":\"uint256\"}],\"name\":\"modifyParameters\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"protocolUnderwater\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"recomputeTokensToKeep\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"removeAuthorization\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"safeEngine\",\"outputs\":[{\"internalType\":\"contract SAFEEngineLike\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenPercentageToKeep\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"StakedTokensToKeepSetter","CompilerVersion":"v0.6.7+commit.b8d736ae","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000cc88a9d330da1133df3a7bd823b95e52511a6962000000000000000000000000cee6aa1ab47d0fb0f24f51a3072ec16e20f90fce00000000000000000000000069c6c08b91010c88c95775b6fd768e5b04efc1060000000000000000000000000000000000000000000000000000000000000046","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"ipfs://c7144ce5699d7c7a548b34154a86580d9d9d8cac237de076943ab579728f70ef"}]}