{"status":"1","message":"OK","result":[{"SourceCode":"// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.2;\r\n\r\ninterface PriceRouter {\r\n    function getAmountsOut(uint256 amountIn, address[] calldata path)\r\n        external\r\n        view\r\n        returns (uint256[] memory amounts);\r\n\r\n    function WETH() external view returns (address);\r\n}\r\n\r\ninterface Pair {\r\n    function factory() external view returns (address);\r\n\r\n    function token0() external view returns (address);\r\n\r\n    function token1() external view returns (address);\r\n\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    function decimals() external view returns (uint8);\r\n\r\n    function getReserves()\r\n        external\r\n        view\r\n        returns (\r\n            uint112,\r\n            uint112,\r\n            uint32\r\n        );\r\n}\r\n\r\ninterface IERC20 {\r\n    function decimals() external view returns (uint8);\r\n\r\n    function balanceOf(address account) external view returns (uint256);\r\n}\r\n\r\ninterface IOracle {\r\n    function usdcAddress() external view returns (address);\r\n}\r\n\r\ncontract CalculationsSushiswap {\r\n    address public primaryRouterAddress;\r\n    address public primaryFactoryAddress;\r\n    address public secondaryRouterAddress;\r\n    address public secondaryFactoryAddress;\r\n    address public wethAddress;\r\n    PriceRouter primaryRouter;\r\n    PriceRouter secondaryRouter;\r\n\r\n    address ethAddress = 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE;\r\n    address zeroAddress = 0x0000000000000000000000000000000000000000;\r\n\r\n    constructor(\r\n        address _primaryRouterAddress,\r\n        address _primaryFactoryAddress,\r\n        address _secondaryRouterAddress,\r\n        address _secondaryFactoryAddress\r\n    ) {\r\n        primaryRouterAddress = _primaryRouterAddress;\r\n        primaryFactoryAddress = _primaryFactoryAddress;\r\n        secondaryRouterAddress = _secondaryRouterAddress;\r\n        secondaryFactoryAddress = _secondaryFactoryAddress;\r\n        primaryRouter = PriceRouter(primaryRouterAddress);\r\n        secondaryRouter = PriceRouter(secondaryRouterAddress);\r\n        wethAddress = primaryRouter.WETH();\r\n    }\r\n\r\n    // Uniswap/Sushiswap\r\n    function getPriceUsdc(address tokenAddress) public view returns (uint256) {\r\n        if (isLpToken(tokenAddress)) {\r\n            return getLpTokenPriceUsdc(tokenAddress);\r\n        }\r\n        return getPriceFromRouterUsdc(tokenAddress);\r\n    }\r\n\r\n    function getPriceFromRouter(address token0Address, address token1Address)\r\n        public\r\n        view\r\n        returns (uint256)\r\n    {\r\n        // Convert ETH address (0xEeee...) to WETH\r\n        if (token0Address == ethAddress) {\r\n            token0Address = wethAddress;\r\n        }\r\n        if (token1Address == ethAddress) {\r\n            token1Address = wethAddress;\r\n        }\r\n\r\n        address[] memory path;\r\n        uint8 numberOfJumps;\r\n        bool inputTokenIsWeth =\r\n            token0Address == wethAddress || token1Address == wethAddress;\r\n        if (inputTokenIsWeth) {\r\n            // path = [token0, weth] or [weth, token1]\r\n            numberOfJumps = 1;\r\n            path = new address[](numberOfJumps + 1);\r\n            path[0] = token0Address;\r\n            path[1] = token1Address;\r\n        } else {\r\n            // path = [token0, weth, token1]\r\n            numberOfJumps = 2;\r\n            path = new address[](numberOfJumps + 1);\r\n            path[0] = token0Address;\r\n            path[1] = wethAddress;\r\n            path[2] = token1Address;\r\n        }\r\n\r\n        IERC20 token0 = IERC20(token0Address);\r\n        uint256 amountIn = 10**uint256(token0.decimals());\r\n        uint256[] memory amountsOut;\r\n\r\n        bool fallbackRouterExists = secondaryRouterAddress != zeroAddress;\r\n        if (fallbackRouterExists) {\r\n            try primaryRouter.getAmountsOut(amountIn, path) returns (\r\n                uint256[] memory _amountsOut\r\n            ) {\r\n                amountsOut = _amountsOut;\r\n            } catch {\r\n                amountsOut = secondaryRouter.getAmountsOut(amountIn, path);\r\n            }\r\n        } else {\r\n            amountsOut = primaryRouter.getAmountsOut(amountIn, path);\r\n        }\r\n\r\n        // Return raw price (without fees)\r\n        uint256 amountOut = amountsOut[amountsOut.length - 1];\r\n        uint256 feeBips = 30; // .3% per swap\r\n        amountOut = (amountOut * 10000) / (10000 - (feeBips * numberOfJumps));\r\n        return amountOut;\r\n    }\r\n\r\n    function getUsdcAddressFromSender() internal view returns (address) {\r\n        IOracle oracle = IOracle(msg.sender);\r\n        return oracle.usdcAddress();\r\n    }\r\n\r\n    function getPriceFromRouterUsdc(address tokenAddress)\r\n        public\r\n        view\r\n        returns (uint256)\r\n    {\r\n        address usdcAddress = getUsdcAddressFromSender();\r\n        return getPriceFromRouter(tokenAddress, usdcAddress);\r\n    }\r\n\r\n    function isLpToken(address tokenAddress) public view returns (bool) {\r\n        Pair lpToken = Pair(tokenAddress);\r\n        try lpToken.factory() {\r\n            return true;\r\n        } catch {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    function getRouterForLpToken(address tokenAddress)\r\n        public\r\n        view\r\n        returns (PriceRouter)\r\n    {\r\n        Pair lpToken = Pair(tokenAddress);\r\n        address factoryAddress = lpToken.factory();\r\n        if (factoryAddress == primaryFactoryAddress) {\r\n            return primaryRouter;\r\n        } else if (factoryAddress == secondaryFactoryAddress) {\r\n            return secondaryRouter;\r\n        }\r\n        revert();\r\n    }\r\n\r\n    function getLpTokenTotalLiquidityUsdc(address tokenAddress)\r\n        public\r\n        view\r\n        returns (uint256)\r\n    {\r\n        Pair pair = Pair(tokenAddress);\r\n        address token0Address = pair.token0();\r\n        address token1Address = pair.token1();\r\n        IERC20 token0 = IERC20(token0Address);\r\n        IERC20 token1 = IERC20(token1Address);\r\n        uint8 token0Decimals = token0.decimals();\r\n        uint8 token1Decimals = token1.decimals();\r\n        uint256 token0Price = getPriceUsdc(token0Address);\r\n        uint256 token1Price = getPriceUsdc(token1Address);\r\n        (uint112 reserve0, uint112 reserve1, ) = pair.getReserves();\r\n        uint256 totalLiquidity =\r\n            ((reserve0 / 10**token0Decimals) * token0Price) +\r\n                ((reserve1 / 10**token1Decimals) * token1Price);\r\n        return totalLiquidity;\r\n    }\r\n\r\n    function getLpTokenPriceUsdc(address tokenAddress)\r\n        public\r\n        view\r\n        returns (uint256)\r\n    {\r\n        Pair pair = Pair(tokenAddress);\r\n        uint256 totalLiquidity = getLpTokenTotalLiquidityUsdc(tokenAddress);\r\n        uint256 totalSupply = pair.totalSupply();\r\n        uint8 pairDecimals = pair.decimals();\r\n        uint256 pricePerLpTokenUsdc =\r\n            (totalLiquidity * 10**pairDecimals) / totalSupply;\r\n        return pricePerLpTokenUsdc;\r\n    }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_primaryRouterAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_primaryFactoryAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_secondaryRouterAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_secondaryFactoryAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"}],\"name\":\"getLpTokenPriceUsdc\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"}],\"name\":\"getLpTokenTotalLiquidityUsdc\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token0Address\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token1Address\",\"type\":\"address\"}],\"name\":\"getPriceFromRouter\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"}],\"name\":\"getPriceFromRouterUsdc\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"}],\"name\":\"getPriceUsdc\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"}],\"name\":\"getRouterForLpToken\",\"outputs\":[{\"internalType\":\"contract PriceRouter\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"}],\"name\":\"isLpToken\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"primaryFactoryAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"primaryRouterAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"secondaryFactoryAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"secondaryRouterAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"wethAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"CalculationsSushiswap","CompilerVersion":"v0.8.2+commit.661d1103","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"0000000000000000000000007a250d5630b4cf539739df2c5dacb4c659f2488d0000000000000000000000005c69bee701ef814a2b6a3edd4b1652cb9cc5aa6f000000000000000000000000d9e1ce17f2641f24ae83637ab66a2cca9c378b9f000000000000000000000000c0aee478e3658e2610c5f7a4a2e1777ce9e4f2ac","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"ipfs://7628c4108b425ff28878d50444204f731f5e1a4578422c74c76c498eb124e8f2"}]}