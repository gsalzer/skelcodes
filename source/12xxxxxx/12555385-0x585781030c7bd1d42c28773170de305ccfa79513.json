{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.8.2;\r\n\r\n\r\ninterface IUniswapV3SwapRouter {\r\n    struct ExactInputSingleParams {\r\n        address tokenIn;\r\n        address tokenOut;\r\n        uint24 fee;\r\n        address recipient;\r\n        uint256 deadline;\r\n        uint256 amountIn;\r\n        uint256 amountOutMinimum;\r\n        uint160 sqrtPriceLimitX96;\r\n    }\r\n\r\n    /// @notice Swaps `amountIn` of one token for as much as possible of another token\r\n    /// @param params The parameters necessary for the swap, encoded as `ExactInputSingleParams` in calldata\r\n    /// @return amountOut The amount of the received token\r\n    function exactInputSingle(ExactInputSingleParams calldata params) external payable returns (uint256 amountOut);\r\n\r\n    struct ExactInputParams {\r\n        bytes path;\r\n        address recipient;\r\n        uint256 deadline;\r\n        uint256 amountIn;\r\n        uint256 amountOutMinimum;\r\n    }\r\n\r\n    /// @notice Swaps `amountIn` of one token for as much as possible of another along the specified path\r\n    /// @param params The parameters necessary for the multi-hop swap, encoded as `ExactInputParams` in calldata\r\n    /// @return amountOut The amount of the received token\r\n    function exactInput(ExactInputParams calldata params) external payable returns (uint256 amountOut);\r\n\r\n    struct ExactOutputSingleParams {\r\n        address tokenIn;\r\n        address tokenOut;\r\n        uint24 fee;\r\n        address recipient;\r\n        uint256 deadline;\r\n        uint256 amountOut;\r\n        uint256 amountInMaximum;\r\n        uint160 sqrtPriceLimitX96;\r\n    }\r\n\r\n    /// @notice Swaps as little as possible of one token for `amountOut` of another token\r\n    /// @param params The parameters necessary for the swap, encoded as `ExactOutputSingleParams` in calldata\r\n    /// @return amountIn The amount of the input token\r\n    function exactOutputSingle(ExactOutputSingleParams calldata params) external payable returns (uint256 amountIn);\r\n\r\n    struct ExactOutputParams {\r\n        bytes path;\r\n        address recipient;\r\n        uint256 deadline;\r\n        uint256 amountOut;\r\n        uint256 amountInMaximum;\r\n    }\r\n\r\n    /// @notice Swaps as little as possible of one token for `amountOut` of another along the specified path (reversed)\r\n    /// @param params The parameters necessary for the multi-hop swap, encoded as `ExactOutputParams` in calldata\r\n    /// @return amountIn The amount of the input token\r\n    function exactOutput(ExactOutputParams calldata params) external payable returns (uint256 amountIn);\r\n}\r\n\r\ninterface IUniswapV3Quoter {\r\n    /// @notice Returns the amount out received for a given exact input swap without executing the swap\r\n    /// @param path The path of the swap, i.e. each token pair and the pool fee\r\n    /// @param amountIn The amount of the first token to swap\r\n    /// @return amountOut The amount of the last token that would be received\r\n    function quoteExactInput(bytes memory path, uint256 amountIn) external returns (uint256 amountOut);\r\n\r\n    /// @notice Returns the amount out received for a given exact input but for a swap of a single pool\r\n    /// @param tokenIn The token being swapped in\r\n    /// @param tokenOut The token being swapped out\r\n    /// @param fee The fee of the token pool to consider for the pair\r\n    /// @param amountIn The desired input amount\r\n    /// @param sqrtPriceLimitX96 The price limit of the pool that cannot be exceeded by the swap\r\n    /// @return amountOut The amount of `tokenOut` that would be received\r\n    function quoteExactInputSingle(\r\n        address tokenIn,\r\n        address tokenOut,\r\n        uint24 fee,\r\n        uint256 amountIn,\r\n        uint160 sqrtPriceLimitX96\r\n    ) external returns (uint256 amountOut);\r\n\r\n    /// @notice Returns the amount in required for a given exact output swap without executing the swap\r\n    /// @param path The path of the swap, i.e. each token pair and the pool fee\r\n    /// @param amountOut The amount of the last token to receive\r\n    /// @return amountIn The amount of first token required to be paid\r\n    function quoteExactOutput(bytes memory path, uint256 amountOut) external returns (uint256 amountIn);\r\n\r\n    /// @notice Returns the amount in required to receive the given exact output amount but for a swap of a single pool\r\n    /// @param tokenIn The token being swapped in\r\n    /// @param tokenOut The token being swapped out\r\n    /// @param fee The fee of the token pool to consider for the pair\r\n    /// @param amountOut The desired output amount\r\n    /// @param sqrtPriceLimitX96 The price limit of the pool that cannot be exceeded by the swap\r\n    /// @return amountIn The amount required as the input for the swap in order to receive `amountOut`\r\n    function quoteExactOutputSingle(\r\n        address tokenIn,\r\n        address tokenOut,\r\n        uint24 fee,\r\n        uint256 amountOut,\r\n        uint160 sqrtPriceLimitX96\r\n    ) external returns (uint256 amountIn);\r\n}\r\n\r\ninterface ISavingsManager {\r\n    /** @dev Admin privs */\r\n    function distributeUnallocatedInterest(address _mAsset) external;\r\n\r\n    /** @dev Liquidator */\r\n    function depositLiquidation(address _mAsset, uint256 _liquidation) external;\r\n\r\n    /** @dev Liquidator */\r\n    function collectAndStreamInterest(address _mAsset) external;\r\n\r\n    /** @dev Public privs */\r\n    function collectAndDistributeInterest(address _mAsset) external;\r\n\r\n    /** @dev getter for public lastBatchCollected mapping */\r\n    function lastBatchCollected(address _mAsset) external view returns (uint256);\r\n}\r\n\r\nstruct BassetPersonal {\r\n    // Address of the bAsset\r\n    address addr;\r\n    // Address of the bAsset\r\n    address integrator;\r\n    // An ERC20 can charge transfer fee, for example USDT, DGX tokens.\r\n    bool hasTxFee; // takes a byte in storage\r\n    // Status of the bAsset\r\n    BassetStatus status;\r\n}\r\n\r\n// Status of the Basset - has it broken its peg?\r\nenum BassetStatus {\r\n    Default,\r\n    Normal,\r\n    BrokenBelowPeg,\r\n    BrokenAbovePeg,\r\n    Blacklisted,\r\n    Liquidating,\r\n    Liquidated,\r\n    Failed\r\n}\r\n\r\nstruct BassetData {\r\n    // 1 Basset * ratio / ratioScale == x Masset (relative value)\r\n    // If ratio == 10e8 then 1 bAsset = 10 mAssets\r\n    // A ratio is divised as 10^(18-tokenDecimals) * measurementMultiple(relative value of 1 base unit)\r\n    uint128 ratio;\r\n    // Amount of the Basset that is held in Collateral\r\n    uint128 vaultBalance;\r\n}\r\n\r\nabstract contract IMasset {\r\n    // Mint\r\n    function mint(\r\n        address _input,\r\n        uint256 _inputQuantity,\r\n        uint256 _minOutputQuantity,\r\n        address _recipient\r\n    ) external virtual returns (uint256 mintOutput);\r\n\r\n    function mintMulti(\r\n        address[] calldata _inputs,\r\n        uint256[] calldata _inputQuantities,\r\n        uint256 _minOutputQuantity,\r\n        address _recipient\r\n    ) external virtual returns (uint256 mintOutput);\r\n\r\n    function getMintOutput(address _input, uint256 _inputQuantity)\r\n        external\r\n        view\r\n        virtual\r\n        returns (uint256 mintOutput);\r\n\r\n    function getMintMultiOutput(address[] calldata _inputs, uint256[] calldata _inputQuantities)\r\n        external\r\n        view\r\n        virtual\r\n        returns (uint256 mintOutput);\r\n\r\n    // Swaps\r\n    function swap(\r\n        address _input,\r\n        address _output,\r\n        uint256 _inputQuantity,\r\n        uint256 _minOutputQuantity,\r\n        address _recipient\r\n    ) external virtual returns (uint256 swapOutput);\r\n\r\n    function getSwapOutput(\r\n        address _input,\r\n        address _output,\r\n        uint256 _inputQuantity\r\n    ) external view virtual returns (uint256 swapOutput);\r\n\r\n    // Redemption\r\n    function redeem(\r\n        address _output,\r\n        uint256 _mAssetQuantity,\r\n        uint256 _minOutputQuantity,\r\n        address _recipient\r\n    ) external virtual returns (uint256 outputQuantity);\r\n\r\n    function redeemMasset(\r\n        uint256 _mAssetQuantity,\r\n        uint256[] calldata _minOutputQuantities,\r\n        address _recipient\r\n    ) external virtual returns (uint256[] memory outputQuantities);\r\n\r\n    function redeemExactBassets(\r\n        address[] calldata _outputs,\r\n        uint256[] calldata _outputQuantities,\r\n        uint256 _maxMassetQuantity,\r\n        address _recipient\r\n    ) external virtual returns (uint256 mAssetRedeemed);\r\n\r\n    function getRedeemOutput(address _output, uint256 _mAssetQuantity)\r\n        external\r\n        view\r\n        virtual\r\n        returns (uint256 bAssetOutput);\r\n\r\n    function getRedeemExactBassetsOutput(\r\n        address[] calldata _outputs,\r\n        uint256[] calldata _outputQuantities\r\n    ) external view virtual returns (uint256 mAssetAmount);\r\n\r\n    // Views\r\n    function getBasket() external view virtual returns (bool, bool);\r\n\r\n    function getBasset(address _token)\r\n        external\r\n        view\r\n        virtual\r\n        returns (BassetPersonal memory personal, BassetData memory data);\r\n\r\n    function getBassets()\r\n        external\r\n        view\r\n        virtual\r\n        returns (BassetPersonal[] memory personal, BassetData[] memory data);\r\n\r\n    function bAssetIndexes(address) external view virtual returns (uint8);\r\n\r\n    function getPrice() external view virtual returns (uint256 price, uint256 k);\r\n\r\n    // SavingsManager\r\n    function collectInterest() external virtual returns (uint256 swapFeesGained, uint256 newSupply);\r\n\r\n    function collectPlatformInterest()\r\n        external\r\n        virtual\r\n        returns (uint256 mintAmount, uint256 newSupply);\r\n\r\n    // Admin\r\n    function setCacheSize(uint256 _cacheSize) external virtual;\r\n\r\n    function setFees(uint256 _swapFee, uint256 _redemptionFee) external virtual;\r\n\r\n    function setTransferFeesFlag(address _bAsset, bool _flag) external virtual;\r\n\r\n    function migrateBassets(address[] calldata _bAssets, address _newIntegration) external virtual;\r\n}\r\n\r\ninterface IPlatformIntegration {\r\n    /**\r\n     * @dev Deposit the given bAsset to Lending platform\r\n     * @param _bAsset bAsset address\r\n     * @param _amount Amount to deposit\r\n     */\r\n    function deposit(\r\n        address _bAsset,\r\n        uint256 _amount,\r\n        bool isTokenFeeCharged\r\n    ) external returns (uint256 quantityDeposited);\r\n\r\n    /**\r\n     * @dev Withdraw given bAsset from Lending platform\r\n     */\r\n    function withdraw(\r\n        address _receiver,\r\n        address _bAsset,\r\n        uint256 _amount,\r\n        bool _hasTxFee\r\n    ) external;\r\n\r\n    /**\r\n     * @dev Withdraw given bAsset from Lending platform\r\n     */\r\n    function withdraw(\r\n        address _receiver,\r\n        address _bAsset,\r\n        uint256 _amount,\r\n        uint256 _totalAmount,\r\n        bool _hasTxFee\r\n    ) external;\r\n\r\n    /**\r\n     * @dev Withdraw given bAsset from the cache\r\n     */\r\n    function withdrawRaw(\r\n        address _receiver,\r\n        address _bAsset,\r\n        uint256 _amount\r\n    ) external;\r\n\r\n    /**\r\n     * @dev Returns the current balance of the given bAsset\r\n     */\r\n    function checkBalance(address _bAsset) external returns (uint256 balance);\r\n\r\n    /**\r\n     * @dev Returns the pToken\r\n     */\r\n    function bAssetToPToken(address _bAsset) external returns (address pToken);\r\n}\r\n\r\ninterface IStakedAave {\r\n    function COOLDOWN_SECONDS() external returns (uint256);\r\n\r\n    function UNSTAKE_WINDOW() external returns (uint256);\r\n\r\n    function stake(address to, uint256 amount) external;\r\n\r\n    function redeem(address to, uint256 amount) external;\r\n\r\n    function cooldown() external;\r\n\r\n    function claimRewards(address to, uint256 amount) external;\r\n\r\n    function stakersCooldowns(address staker) external returns (uint256);\r\n}\r\n\r\ninterface ILendingPoolAddressesProviderV2 {\r\n    /**\r\n     * @notice Get the current address for Aave LendingPool\r\n     * @dev Lending pool is the core contract on which to call deposit\r\n     */\r\n    function getLendingPool() external view returns (address);\r\n}\r\n\r\ninterface IAaveATokenV2 {\r\n    /**\r\n     * @notice returns the current total aToken balance of _user all interest collected included.\r\n     * To obtain the user asset principal balance with interests excluded , ERC20 non-standard\r\n     * method principalBalanceOf() can be used.\r\n     */\r\n    function balanceOf(address _user) external view returns (uint256);\r\n}\r\n\r\ninterface IAaveLendingPoolV2 {\r\n    /**\r\n     * @dev deposits The underlying asset into the reserve. A corresponding amount of the overlying asset (aTokens)\r\n     * is minted.\r\n     * @param reserve the address of the reserve\r\n     * @param amount the amount to be deposited\r\n     * @param referralCode integrators are assigned a referral code and can potentially receive rewards.\r\n     **/\r\n    function deposit(\r\n        address reserve,\r\n        uint256 amount,\r\n        address onBehalfOf,\r\n        uint16 referralCode\r\n    ) external;\r\n\r\n    /**\r\n     * @dev withdraws the assets of user.\r\n     * @param reserve the address of the reserve\r\n     * @param amount the underlying amount to be redeemed\r\n     * @param to address that will receive the underlying\r\n     **/\r\n    function withdraw(\r\n        address reserve,\r\n        uint256 amount,\r\n        address to\r\n    ) external;\r\n}\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n/**\r\n * @dev Collection of functions related to the address type\r\n */\r\nlibrary Address {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     *\r\n     * Among others, `isContract` will return false for the following\r\n     * types of addresses:\r\n     *\r\n     *  - an externally-owned account\r\n     *  - a contract in construction\r\n     *  - an address where a contract will be created\r\n     *  - an address where a contract lived, but was destroyed\r\n     * ====\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // This method relies on extcodesize, which returns 0 for contracts in\r\n        // construction, since the code is only stored at the end of the\r\n        // constructor execution.\r\n\r\n        uint256 size;\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly { size := extcodesize(account) }\r\n        return size > 0;\r\n    }\r\n\r\n    /**\r\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * IMPORTANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     */\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\r\n        (bool success, ) = recipient.call{ value: amount }(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n\r\n    /**\r\n     * @dev Performs a Solidity function call using a low level `call`. A\r\n     * plain`call` is an unsafe replacement for a function call: use this\r\n     * function instead.\r\n     *\r\n     * If `target` reverts with a revert reason, it is bubbled up by this\r\n     * function (like regular Solidity function calls).\r\n     *\r\n     * Returns the raw returned data. To convert to the expected return value,\r\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `target` must be a contract.\r\n     * - calling `target` with `data` must not revert.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n      return functionCall(target, data, \"Address: low-level call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\r\n     * `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but also transferring `value` wei to `target`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the calling contract must have an ETH balance of at least `value`.\r\n     * - the called Solidity function must be `payable`.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\r\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\r\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\r\n        require(isContract(target), \"Address: call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\r\n        return _verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\r\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\r\n        require(isContract(target), \"Address: static call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.staticcall(data);\r\n        return _verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\r\n        require(isContract(target), \"Address: delegate call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.delegatecall(data);\r\n        return _verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            // Look for revert reason and bubble it up if present\r\n            if (returndata.length > 0) {\r\n                // The easiest way to bubble the revert reason is using memory via assembly\r\n\r\n                // solhint-disable-next-line no-inline-assembly\r\n                assembly {\r\n                    let returndata_size := mload(returndata)\r\n                    revert(add(32, returndata), returndata_size)\r\n                }\r\n            } else {\r\n                revert(errorMessage);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nlibrary SafeERC20 {\r\n    using Address for address;\r\n\r\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\r\n    }\r\n\r\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\r\n    }\r\n\r\n    /**\r\n     * @dev Deprecated. This function has issues similar to the ones found in\r\n     * {IERC20-approve}, and its usage is discouraged.\r\n     *\r\n     * Whenever possible, use {safeIncreaseAllowance} and\r\n     * {safeDecreaseAllowance} instead.\r\n     */\r\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\r\n        // safeApprove should only be called when setting an initial allowance,\r\n        // or when resetting it to zero. To increase and decrease it, use\r\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\r\n        // solhint-disable-next-line max-line-length\r\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\r\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\r\n        );\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\r\n    }\r\n\r\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n        unchecked {\r\n            uint256 oldAllowance = token.allowance(address(this), spender);\r\n            require(oldAllowance >= value, \"SafeERC20: decreased allowance below zero\");\r\n            uint256 newAllowance = oldAllowance - value;\r\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\r\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\r\n     * @param token The token targeted by the call.\r\n     * @param data The call data (encoded using abi.encode or one of its variants).\r\n     */\r\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\r\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\r\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\r\n        // the target address contains contract code and also asserts for success in the low-level call.\r\n\r\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\r\n        if (returndata.length > 0) { // Return data is optional\r\n            // solhint-disable-next-line max-line-length\r\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\r\n        }\r\n    }\r\n}\r\n\r\nlibrary MassetHelpers {\r\n    using SafeERC20 for IERC20;\r\n\r\n    function transferReturnBalance(\r\n        address _sender,\r\n        address _recipient,\r\n        address _bAsset,\r\n        uint256 _qty\r\n    ) internal returns (uint256 receivedQty, uint256 recipientBalance) {\r\n        uint256 balBefore = IERC20(_bAsset).balanceOf(_recipient);\r\n        IERC20(_bAsset).safeTransferFrom(_sender, _recipient, _qty);\r\n        recipientBalance = IERC20(_bAsset).balanceOf(_recipient);\r\n        receivedQty = recipientBalance - balBefore;\r\n    }\r\n\r\n    function safeInfiniteApprove(address _asset, address _spender) internal {\r\n        IERC20(_asset).safeApprove(_spender, 0);\r\n        IERC20(_asset).safeApprove(_spender, 2**256 - 1);\r\n    }\r\n}\r\n\r\nabstract contract Initializable {\r\n\r\n    /**\r\n     * @dev Indicates that the contract has been initialized.\r\n     */\r\n    bool private _initialized;\r\n\r\n    /**\r\n     * @dev Indicates that the contract is in the process of being initialized.\r\n     */\r\n    bool private _initializing;\r\n\r\n    /**\r\n     * @dev Modifier to protect an initializer function from being invoked twice.\r\n     */\r\n    modifier initializer() {\r\n        require(_initializing || !_initialized, \"Initializable: contract is already initialized\");\r\n\r\n        bool isTopLevelCall = !_initializing;\r\n        if (isTopLevelCall) {\r\n            _initializing = true;\r\n            _initialized = true;\r\n        }\r\n\r\n        _;\r\n\r\n        if (isTopLevelCall) {\r\n            _initializing = false;\r\n        }\r\n    }\r\n}\r\n\r\ncontract ModuleKeys {\r\n    // Governance\r\n    // ===========\r\n    // keccak256(\"Governance\");\r\n    bytes32 internal constant KEY_GOVERNANCE =\r\n        0x9409903de1e6fd852dfc61c9dacb48196c48535b60e25abf92acc92dd689078d;\r\n    //keccak256(\"Staking\");\r\n    bytes32 internal constant KEY_STAKING =\r\n        0x1df41cd916959d1163dc8f0671a666ea8a3e434c13e40faef527133b5d167034;\r\n    //keccak256(\"ProxyAdmin\");\r\n    bytes32 internal constant KEY_PROXY_ADMIN =\r\n        0x96ed0203eb7e975a4cbcaa23951943fa35c5d8288117d50c12b3d48b0fab48d1;\r\n\r\n    // mStable\r\n    // =======\r\n    // keccak256(\"OracleHub\");\r\n    bytes32 internal constant KEY_ORACLE_HUB =\r\n        0x8ae3a082c61a7379e2280f3356a5131507d9829d222d853bfa7c9fe1200dd040;\r\n    // keccak256(\"Manager\");\r\n    bytes32 internal constant KEY_MANAGER =\r\n        0x6d439300980e333f0256d64be2c9f67e86f4493ce25f82498d6db7f4be3d9e6f;\r\n    //keccak256(\"Recollateraliser\");\r\n    bytes32 internal constant KEY_RECOLLATERALISER =\r\n        0x39e3ed1fc335ce346a8cbe3e64dd525cf22b37f1e2104a755e761c3c1eb4734f;\r\n    //keccak256(\"MetaToken\");\r\n    bytes32 internal constant KEY_META_TOKEN =\r\n        0xea7469b14936af748ee93c53b2fe510b9928edbdccac3963321efca7eb1a57a2;\r\n    // keccak256(\"SavingsManager\");\r\n    bytes32 internal constant KEY_SAVINGS_MANAGER =\r\n        0x12fe936c77a1e196473c4314f3bed8eeac1d757b319abb85bdda70df35511bf1;\r\n    // keccak256(\"Liquidator\");\r\n    bytes32 internal constant KEY_LIQUIDATOR =\r\n        0x1e9cb14d7560734a61fa5ff9273953e971ff3cd9283c03d8346e3264617933d4;\r\n    // keccak256(\"InterestValidator\");\r\n    bytes32 internal constant KEY_INTEREST_VALIDATOR =\r\n        0xc10a28f028c7f7282a03c90608e38a4a646e136e614e4b07d119280c5f7f839f;\r\n}\r\n\r\ninterface INexus {\r\n    function governor() external view returns (address);\r\n\r\n    function getModule(bytes32 key) external view returns (address);\r\n\r\n    function proposeModule(bytes32 _key, address _addr) external;\r\n\r\n    function cancelProposedModule(bytes32 _key) external;\r\n\r\n    function acceptProposedModule(bytes32 _key) external;\r\n\r\n    function acceptProposedModules(bytes32[] calldata _keys) external;\r\n\r\n    function requestLockModule(bytes32 _key) external;\r\n\r\n    function cancelLockModule(bytes32 _key) external;\r\n\r\n    function lockModule(bytes32 _key) external;\r\n}\r\n\r\nabstract contract ImmutableModule is ModuleKeys {\r\n    INexus public immutable nexus;\r\n\r\n    /**\r\n     * @dev Initialization function for upgradable proxy contracts\r\n     * @param _nexus Nexus contract address\r\n     */\r\n    constructor(address _nexus) {\r\n        require(_nexus != address(0), \"Nexus address is zero\");\r\n        nexus = INexus(_nexus);\r\n    }\r\n\r\n    /**\r\n     * @dev Modifier to allow function calls only from the Governor.\r\n     */\r\n    modifier onlyGovernor() {\r\n        _onlyGovernor();\r\n        _;\r\n    }\r\n\r\n    function _onlyGovernor() internal view {\r\n        require(msg.sender == _governor(), \"Only governor can execute\");\r\n    }\r\n\r\n    /**\r\n     * @dev Modifier to allow function calls only from the Governance.\r\n     *      Governance is either Governor address or Governance address.\r\n     */\r\n    modifier onlyGovernance() {\r\n        require(\r\n            msg.sender == _governor() || msg.sender == _governance(),\r\n            \"Only governance can execute\"\r\n        );\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns Governor address from the Nexus\r\n     * @return Address of Governor Contract\r\n     */\r\n    function _governor() internal view returns (address) {\r\n        return nexus.governor();\r\n    }\r\n\r\n    /**\r\n     * @dev Returns Governance Module address from the Nexus\r\n     * @return Address of the Governance (Phase 2)\r\n     */\r\n    function _governance() internal view returns (address) {\r\n        return nexus.getModule(KEY_GOVERNANCE);\r\n    }\r\n\r\n    /**\r\n     * @dev Return SavingsManager Module address from the Nexus\r\n     * @return Address of the SavingsManager Module contract\r\n     */\r\n    function _savingsManager() internal view returns (address) {\r\n        return nexus.getModule(KEY_SAVINGS_MANAGER);\r\n    }\r\n\r\n    /**\r\n     * @dev Return Recollateraliser Module address from the Nexus\r\n     * @return  Address of the Recollateraliser Module contract (Phase 2)\r\n     */\r\n    function _recollateraliser() internal view returns (address) {\r\n        return nexus.getModule(KEY_RECOLLATERALISER);\r\n    }\r\n\r\n    /**\r\n     * @dev Return Recollateraliser Module address from the Nexus\r\n     * @return  Address of the Recollateraliser Module contract (Phase 2)\r\n     */\r\n    function _liquidator() internal view returns (address) {\r\n        return nexus.getModule(KEY_LIQUIDATOR);\r\n    }\r\n\r\n    /**\r\n     * @dev Return ProxyAdmin Module address from the Nexus\r\n     * @return Address of the ProxyAdmin Module contract\r\n     */\r\n    function _proxyAdmin() internal view returns (address) {\r\n        return nexus.getModule(KEY_PROXY_ADMIN);\r\n    }\r\n}\r\n\r\nabstract contract ReentrancyGuard {\r\n    // Booleans are more expensive than uint256 or any type that takes up a full\r\n    // word because each write operation emits an extra SLOAD to first read the\r\n    // slot's contents, replace the bits taken up by the boolean, and then write\r\n    // back. This is the compiler's defense against contract upgrades and\r\n    // pointer aliasing, and it cannot be disabled.\r\n\r\n    // The values being non-zero value makes deployment a bit more expensive,\r\n    // but in exchange the refund on every call to nonReentrant will be lower in\r\n    // amount. Since refunds are capped to a percentage of the total\r\n    // transaction's gas, it is best to keep them low in cases like this one, to\r\n    // increase the likelihood of the full refund coming into effect.\r\n    uint256 private constant _NOT_ENTERED = 1;\r\n    uint256 private constant _ENTERED = 2;\r\n\r\n    uint256 private _status;\r\n\r\n    constructor () {\r\n        _status = _NOT_ENTERED;\r\n    }\r\n\r\n    /**\r\n     * @dev Prevents a contract from calling itself, directly or indirectly.\r\n     * Calling a `nonReentrant` function from another `nonReentrant`\r\n     * function is not supported. It is possible to prevent this from happening\r\n     * by making the `nonReentrant` function external, and make it call a\r\n     * `private` function that does the actual work.\r\n     */\r\n    modifier nonReentrant() {\r\n        // On the first call to nonReentrant, _notEntered will be true\r\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\r\n\r\n        // Any calls to nonReentrant after this point will fail\r\n        _status = _ENTERED;\r\n\r\n        _;\r\n\r\n        // By storing the original value once again, a refund is triggered (see\r\n        // https://eips.ethereum.org/EIPS/eip-2200)\r\n        _status = _NOT_ENTERED;\r\n    }\r\n}\r\n\r\nabstract contract AbstractIntegration is\r\n    IPlatformIntegration,\r\n    Initializable,\r\n    ImmutableModule,\r\n    ReentrancyGuard\r\n{\r\n    event PTokenAdded(address indexed _bAsset, address _pToken);\r\n\r\n    event Deposit(address indexed _bAsset, address _pToken, uint256 _amount);\r\n    event Withdrawal(address indexed _bAsset, address _pToken, uint256 _amount);\r\n    event PlatformWithdrawal(\r\n        address indexed bAsset,\r\n        address pToken,\r\n        uint256 totalAmount,\r\n        uint256 userAmount\r\n    );\r\n\r\n    // LP has write access\r\n    address public immutable lpAddress;\r\n\r\n    // bAsset => pToken (Platform Specific Token Address)\r\n    mapping(address => address) public override bAssetToPToken;\r\n    // Full list of all bAssets supported here\r\n    address[] internal bAssetsMapped;\r\n\r\n    /**\r\n     * @param _nexus     Address of the Nexus\r\n     * @param _lp        Address of LP\r\n     */\r\n    constructor(address _nexus, address _lp) ReentrancyGuard() ImmutableModule(_nexus) {\r\n        require(_lp != address(0), \"Invalid LP address\");\r\n        lpAddress = _lp;\r\n    }\r\n\r\n    /**\r\n     * @dev Simple initializer to set first bAsset/pTokens\r\n     */\r\n    function initialize(address[] calldata _bAssets, address[] calldata _pTokens)\r\n        public\r\n        initializer\r\n    {\r\n        uint256 len = _bAssets.length;\r\n        require(len == _pTokens.length, \"Invalid inputs\");\r\n        for (uint256 i = 0; i < len; i++) {\r\n            _setPTokenAddress(_bAssets[i], _pTokens[i]);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Modifier to allow function calls only from the Governor.\r\n     */\r\n    modifier onlyLP() {\r\n        require(msg.sender == lpAddress, \"Only the LP can execute\");\r\n        _;\r\n    }\r\n\r\n    /***************************************\r\n                    CONFIG\r\n    ****************************************/\r\n\r\n    /**\r\n     * @dev Provide support for bAsset by passing its pToken address.\r\n     * This method can only be called by the system Governor\r\n     * @param _bAsset   Address for the bAsset\r\n     * @param _pToken   Address for the corresponding platform token\r\n     */\r\n    function setPTokenAddress(address _bAsset, address _pToken) external onlyGovernor {\r\n        _setPTokenAddress(_bAsset, _pToken);\r\n    }\r\n\r\n    /**\r\n     * @dev Provide support for bAsset by passing its pToken address.\r\n     * Add to internal mappings and execute the platform specific,\r\n     * abstract method `_abstractSetPToken`\r\n     * @param _bAsset   Address for the bAsset\r\n     * @param _pToken   Address for the corresponding platform token\r\n     */\r\n    function _setPTokenAddress(address _bAsset, address _pToken) internal {\r\n        require(bAssetToPToken[_bAsset] == address(0), \"pToken already set\");\r\n        require(_bAsset != address(0) && _pToken != address(0), \"Invalid addresses\");\r\n\r\n        bAssetToPToken[_bAsset] = _pToken;\r\n        bAssetsMapped.push(_bAsset);\r\n\r\n        emit PTokenAdded(_bAsset, _pToken);\r\n\r\n        _abstractSetPToken(_bAsset, _pToken);\r\n    }\r\n\r\n    function _abstractSetPToken(address _bAsset, address _pToken) internal virtual;\r\n\r\n    /**\r\n     * @dev Simple helper func to get the min of two values\r\n     */\r\n    function _min(uint256 x, uint256 y) internal pure returns (uint256) {\r\n        return x > y ? y : x;\r\n    }\r\n}\r\n\r\ncontract AaveV2Integration is AbstractIntegration {\r\n    using SafeERC20 for IERC20;\r\n\r\n    // Core address for the given platform */\r\n    address public immutable platformAddress;\r\n    address public immutable rewardToken;\r\n\r\n    event RewardTokenApproved(address rewardToken, address account);\r\n\r\n    /**\r\n     * @param _nexus            Address of the Nexus\r\n     * @param _lp               Address of LP\r\n     * @param _platformAddress  Generic platform address\r\n     * @param _rewardToken      Reward token, if any\r\n     */\r\n    constructor(\r\n        address _nexus,\r\n        address _lp,\r\n        address _platformAddress,\r\n        address _rewardToken\r\n    ) AbstractIntegration(_nexus, _lp) {\r\n        require(_platformAddress != address(0), \"Invalid platform address\");\r\n\r\n        platformAddress = _platformAddress;\r\n\r\n        rewardToken = _rewardToken;\r\n    }\r\n\r\n    /***************************************\r\n                    ADMIN\r\n    ****************************************/\r\n\r\n    /**\r\n     * @dev Approves Liquidator to spend reward tokens\r\n     */\r\n    function approveRewardToken() external onlyGovernor {\r\n        address liquidator = nexus.getModule(keccak256(\"Liquidator\"));\r\n        require(liquidator != address(0), \"Liquidator address cannot be zero\");\r\n\r\n        MassetHelpers.safeInfiniteApprove(rewardToken, liquidator);\r\n\r\n        emit RewardTokenApproved(rewardToken, liquidator);\r\n    }\r\n\r\n    /***************************************\r\n                    CORE\r\n    ****************************************/\r\n\r\n    /**\r\n     * @dev Deposit a quantity of bAsset into the platform. Credited aTokens\r\n     *      remain here in the vault. Can only be called by whitelisted addresses\r\n     *      (mAsset and corresponding BasketManager)\r\n     * @param _bAsset              Address for the bAsset\r\n     * @param _amount              Units of bAsset to deposit\r\n     * @param _hasTxFee            Is the bAsset known to have a tx fee?\r\n     * @return quantityDeposited   Quantity of bAsset that entered the platform\r\n     */\r\n    function deposit(\r\n        address _bAsset,\r\n        uint256 _amount,\r\n        bool _hasTxFee\r\n    ) external override onlyLP nonReentrant returns (uint256 quantityDeposited) {\r\n        require(_amount > 0, \"Must deposit something\");\r\n\r\n        IAaveATokenV2 aToken = _getATokenFor(_bAsset);\r\n\r\n        quantityDeposited = _amount;\r\n\r\n        if (_hasTxFee) {\r\n            // If we charge a fee, account for it\r\n            uint256 prevBal = _checkBalance(aToken);\r\n            _getLendingPool().deposit(_bAsset, _amount, address(this), 36);\r\n            uint256 newBal = _checkBalance(aToken);\r\n            quantityDeposited = _min(quantityDeposited, newBal - prevBal);\r\n        } else {\r\n            _getLendingPool().deposit(_bAsset, _amount, address(this), 36);\r\n        }\r\n\r\n        emit Deposit(_bAsset, address(aToken), quantityDeposited);\r\n    }\r\n\r\n    /**\r\n     * @dev Withdraw a quantity of bAsset from the platform\r\n     * @param _receiver     Address to which the bAsset should be sent\r\n     * @param _bAsset       Address of the bAsset\r\n     * @param _amount       Units of bAsset to withdraw\r\n     * @param _hasTxFee     Is the bAsset known to have a tx fee?\r\n     */\r\n    function withdraw(\r\n        address _receiver,\r\n        address _bAsset,\r\n        uint256 _amount,\r\n        bool _hasTxFee\r\n    ) external override onlyLP nonReentrant {\r\n        _withdraw(_receiver, _bAsset, _amount, _amount, _hasTxFee);\r\n    }\r\n\r\n    /**\r\n     * @dev Withdraw a quantity of bAsset from the platform\r\n     * @param _receiver     Address to which the bAsset should be sent\r\n     * @param _bAsset       Address of the bAsset\r\n     * @param _amount       Units of bAsset to send to recipient\r\n     * @param _totalAmount  Total units to pull from lending platform\r\n     * @param _hasTxFee     Is the bAsset known to have a tx fee?\r\n     */\r\n    function withdraw(\r\n        address _receiver,\r\n        address _bAsset,\r\n        uint256 _amount,\r\n        uint256 _totalAmount,\r\n        bool _hasTxFee\r\n    ) external override onlyLP nonReentrant {\r\n        _withdraw(_receiver, _bAsset, _amount, _totalAmount, _hasTxFee);\r\n    }\r\n\r\n    /** @dev Withdraws _totalAmount from the lending pool, sending _amount to user */\r\n    function _withdraw(\r\n        address _receiver,\r\n        address _bAsset,\r\n        uint256 _amount,\r\n        uint256 _totalAmount,\r\n        bool _hasTxFee\r\n    ) internal {\r\n        require(_totalAmount > 0, \"Must withdraw something\");\r\n\r\n        IAaveATokenV2 aToken = _getATokenFor(_bAsset);\r\n\r\n        if (_hasTxFee) {\r\n            require(_amount == _totalAmount, \"Cache inactive for assets with fee\");\r\n            _getLendingPool().withdraw(_bAsset, _amount, _receiver);\r\n        } else {\r\n            _getLendingPool().withdraw(_bAsset, _totalAmount, address(this));\r\n            // Send redeemed bAsset to the receiver\r\n            IERC20(_bAsset).safeTransfer(_receiver, _amount);\r\n        }\r\n\r\n        emit PlatformWithdrawal(_bAsset, address(aToken), _totalAmount, _amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Withdraw a quantity of bAsset from the cache.\r\n     * @param _receiver     Address to which the bAsset should be sent\r\n     * @param _bAsset       Address of the bAsset\r\n     * @param _amount       Units of bAsset to withdraw\r\n     */\r\n    function withdrawRaw(\r\n        address _receiver,\r\n        address _bAsset,\r\n        uint256 _amount\r\n    ) external override onlyLP nonReentrant {\r\n        require(_amount > 0, \"Must withdraw something\");\r\n        require(_receiver != address(0), \"Must specify recipient\");\r\n\r\n        IERC20(_bAsset).safeTransfer(_receiver, _amount);\r\n\r\n        emit Withdrawal(_bAsset, address(0), _amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Get the total bAsset value held in the platform\r\n     *      This includes any interest that was generated since depositing\r\n     *      Aave gradually increases the balances of all aToken holders, as the interest grows\r\n     * @param _bAsset     Address of the bAsset\r\n     * @return balance    Total value of the bAsset in the platform\r\n     */\r\n    function checkBalance(address _bAsset) external override returns (uint256 balance) {\r\n        // balance is always with token aToken decimals\r\n        IAaveATokenV2 aToken = _getATokenFor(_bAsset);\r\n        return _checkBalance(aToken);\r\n    }\r\n\r\n    /***************************************\r\n                    APPROVALS\r\n    ****************************************/\r\n\r\n    /**\r\n     * @dev Internal method to respond to the addition of new bAsset / pTokens\r\n     *      We need to approve the Aave lending pool core conrtact and give it permission\r\n     *      to spend the bAsset\r\n     * @param _bAsset Address of the bAsset to approve\r\n     */\r\n    function _abstractSetPToken(\r\n        address _bAsset,\r\n        address /*_pToken*/\r\n    ) internal override {\r\n        address lendingPool = address(_getLendingPool());\r\n        // approve the pool to spend the bAsset\r\n        MassetHelpers.safeInfiniteApprove(_bAsset, lendingPool);\r\n    }\r\n\r\n    /***************************************\r\n                    HELPERS\r\n    ****************************************/\r\n\r\n    /**\r\n     * @dev Get the current address of the Aave lending pool, which is the gateway to\r\n     *      depositing.\r\n     * @return Current lending pool implementation\r\n     */\r\n    function _getLendingPool() internal view returns (IAaveLendingPoolV2) {\r\n        address lendingPool = ILendingPoolAddressesProviderV2(platformAddress).getLendingPool();\r\n        require(lendingPool != address(0), \"Lending pool does not exist\");\r\n        return IAaveLendingPoolV2(lendingPool);\r\n    }\r\n\r\n    /**\r\n     * @dev Get the pToken wrapped in the IAaveAToken interface for this bAsset, to use\r\n     *      for withdrawing or balance checking. Fails if the pToken doesn't exist in our mappings.\r\n     * @param _bAsset  Address of the bAsset\r\n     * @return aToken  Corresponding to this bAsset\r\n     */\r\n    function _getATokenFor(address _bAsset) internal view returns (IAaveATokenV2) {\r\n        address aToken = bAssetToPToken[_bAsset];\r\n        require(aToken != address(0), \"aToken does not exist\");\r\n        return IAaveATokenV2(aToken);\r\n    }\r\n\r\n    /**\r\n     * @dev Get the total bAsset value held in the platform\r\n     * @param _aToken     aToken for which to check balance\r\n     * @return balance    Total value of the bAsset in the platform\r\n     */\r\n    function _checkBalance(IAaveATokenV2 _aToken) internal view returns (uint256 balance) {\r\n        return _aToken.balanceOf(address(this));\r\n    }\r\n}\r\n\r\ninterface IAaveIncentivesController {\r\n    /**\r\n     * @dev Claims reward for an user, on all the assets of the lending pool, accumulating the pending rewards\r\n     * @param amount Amount of rewards to claim\r\n     * @param to Address that will be receiving the rewards\r\n     * @return Rewards claimed\r\n     **/\r\n    function claimRewards(\r\n        address[] calldata assets,\r\n        uint256 amount,\r\n        address to\r\n    ) external returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the total of rewards of an user, already accrued + not yet accrued\r\n     * @param user The address of the user\r\n     * @return The rewards\r\n     **/\r\n    function getRewardsBalance(address[] calldata assets, address user)\r\n        external\r\n        view\r\n        returns (uint256);\r\n\r\n    /**\r\n     * @dev returns the unclaimed rewards of the user\r\n     * @param user the address of the user\r\n     * @return the unclaimed user rewards\r\n     */\r\n    function getUserUnclaimedRewards(address user) external view returns (uint256);\r\n}\r\n\r\ncontract PAaveIntegration is AaveV2Integration {\r\n    event RewardsClaimed(address[] assets, uint256 amount);\r\n\r\n    IAaveIncentivesController public immutable rewardController;\r\n\r\n    /**\r\n     * @param _nexus            Address of the Nexus\r\n     * @param _lp               Address of LP\r\n     * @param _platformAddress  Generic platform address\r\n     * @param _rewardToken      Reward token, if any\r\n     * @param _rewardController AaveIncentivesController\r\n     */\r\n    constructor(\r\n        address _nexus,\r\n        address _lp,\r\n        address _platformAddress,\r\n        address _rewardToken,\r\n        address _rewardController\r\n    ) AaveV2Integration(_nexus, _lp, _platformAddress, _rewardToken) {\r\n        require(_rewardController != address(0), \"Invalid controller address\");\r\n\r\n        rewardController = IAaveIncentivesController(_rewardController);\r\n    }\r\n\r\n    /**\r\n     * @dev Claims outstanding rewards from market\r\n     */\r\n    function claimRewards() external {\r\n        uint256 len = bAssetsMapped.length;\r\n        address[] memory pTokens = new address[](len);\r\n        for (uint256 i = 0; i < len; i++) {\r\n            pTokens[i] = bAssetToPToken[bAssetsMapped[i]];\r\n        }\r\n        uint256 rewards = rewardController.claimRewards(pTokens, type(uint256).max, address(this));\r\n\r\n        emit RewardsClaimed(pTokens, rewards);\r\n    }\r\n}\r\n\r\ncontract InitializableOld {\r\n\r\n  /**\r\n   * @dev Indicates that the contract has been initialized.\r\n   */\r\n  bool private initialized;\r\n\r\n  /**\r\n   * @dev Indicates that the contract is in the process of being initialized.\r\n   */\r\n  bool private initializing;\r\n\r\n  /**\r\n   * @dev Modifier to use in the initializer function of a contract.\r\n   */\r\n  modifier initializer() {\r\n    require(initializing || isConstructor() || !initialized, \"Contract instance has already been initialized\");\r\n\r\n    bool isTopLevelCall = !initializing;\r\n    if (isTopLevelCall) {\r\n      initializing = true;\r\n      initialized = true;\r\n    }\r\n\r\n    _;\r\n\r\n    if (isTopLevelCall) {\r\n      initializing = false;\r\n    }\r\n  }\r\n\r\n  /// @dev Returns true if and only if the function is running in the constructor\r\n  function isConstructor() private view returns (bool) {\r\n    // extcodesize checks the size of the code stored in an address, and\r\n    // address returns the current address. Since the code is still not\r\n    // deployed when running a constructor, any checks on its code size will\r\n    // yield zero, making it an effective way to detect if a contract is\r\n    // under construction or not.\r\n    address self = address(this);\r\n    uint256 cs;\r\n    assembly { cs := extcodesize(self) }\r\n    return cs == 0;\r\n  }\r\n\r\n  // Reserved storage space to allow for layout changes in the future.\r\n  uint256[50] private ______gap;\r\n}\r\n\r\ncontract ModuleKeysStorage {\r\n    // Deprecated stotage variables, but kept around to mirror storage layout\r\n    bytes32 private DEPRECATED_KEY_GOVERNANCE;\r\n    bytes32 private DEPRECATED_KEY_STAKING;\r\n    bytes32 private DEPRECATED_KEY_PROXY_ADMIN;\r\n    bytes32 private DEPRECATED_KEY_ORACLE_HUB;\r\n    bytes32 private DEPRECATED_KEY_MANAGER;\r\n    bytes32 private DEPRECATED_KEY_RECOLLATERALISER;\r\n    bytes32 private DEPRECATED_KEY_META_TOKEN;\r\n    bytes32 private DEPRECATED_KEY_SAVINGS_MANAGER;\r\n}\r\n\r\ninterface IBasicToken {\r\n    function decimals() external view returns (uint8);\r\n}\r\n\r\n// SPDX-License-Identifier: AGPL-3.0-or-later\r\n// Need to use the old OZ Initializable as it reserved the first 50 slots of storage\r\n/**\r\n * @title   Liquidator\r\n * @author  mStable\r\n * @notice  The Liquidator allows rewards to be swapped for another token\r\n *          and returned to a calling contract\r\n * @dev     VERSION: 1.3\r\n *          DATE:    2021-05-28\r\n */\r\ncontract Liquidator is InitializableOld, ModuleKeysStorage, ImmutableModule {\r\n    using SafeERC20 for IERC20;\r\n\r\n    event LiquidationModified(address indexed integration);\r\n    event LiquidationEnded(address indexed integration);\r\n    event Liquidated(address indexed sellToken, address mUSD, uint256 mUSDAmount, address buyToken);\r\n    event ClaimedStakedAave(uint256 rewardsAmount);\r\n    event RedeemedAave(uint256 redeemedAmount);\r\n\r\n    // Deprecated stotage variables, but kept around to mirror storage layout\r\n    address private deprecated_nexus;\r\n    address public deprecated_mUSD;\r\n    address public deprecated_curve;\r\n    address public deprecated_uniswap;\r\n    uint256 private deprecated_interval = 7 days;\r\n    mapping(address => DeprecatedLiquidation) public deprecated_liquidations;\r\n    mapping(address => uint256) public deprecated_minReturn;\r\n\r\n    /// @notice mapping of integration addresses to liquidation data\r\n    mapping(address => Liquidation) public liquidations;\r\n    /// @notice Array of integration contracts used to loop through the Aave balances\r\n    address[] public aaveIntegrations;\r\n    /// @notice The total amount of stkAave that was claimed from all the Aave integration contracts.\r\n    /// This can then be redeemed for Aave after the 10 day cooldown period.\r\n    uint256 public totalAaveBalance;\r\n\r\n    // Immutable variables set in the constructor\r\n    /// @notice Staked AAVE token (stkAAVE) address\r\n    address public immutable stkAave;\r\n    /// @notice Aave Token (AAVE) address\r\n    address public immutable aaveToken;\r\n    /// @notice Uniswap V3 Router address\r\n    IUniswapV3SwapRouter public immutable uniswapRouter;\r\n    /// @notice Uniswap V3 Quoter address\r\n    IUniswapV3Quoter public immutable uniswapQuoter;\r\n    /// @notice Compound Token (COMP) address\r\n    address public immutable compToken;\r\n\r\n    // No longer used\r\n    struct DeprecatedLiquidation {\r\n        address sellToken;\r\n        address bAsset;\r\n        int128 curvePosition;\r\n        address[] uniswapPath;\r\n        uint256 lastTriggered;\r\n        uint256 trancheAmount;\r\n    }\r\n\r\n    struct Liquidation {\r\n        address sellToken;\r\n        address bAsset;\r\n        bytes uniswapPath;\r\n        bytes uniswapPathReversed;\r\n        uint256 lastTriggered;\r\n        uint256 trancheAmount; // The max amount of bAsset units to buy each week, with token decimals\r\n        uint256 minReturn;\r\n        address mAsset;\r\n        uint256 aaveBalance;\r\n    }\r\n\r\n    constructor(\r\n        address _nexus,\r\n        address _stkAave,\r\n        address _aaveToken,\r\n        address _uniswapRouter,\r\n        address _uniswapQuoter,\r\n        address _compToken\r\n    ) ImmutableModule(_nexus) {\r\n        require(_stkAave != address(0), \"Invalid stkAAVE address\");\r\n        stkAave = _stkAave;\r\n\r\n        require(_aaveToken != address(0), \"Invalid AAVE address\");\r\n        aaveToken = _aaveToken;\r\n\r\n        require(_uniswapRouter != address(0), \"Invalid Uniswap Router address\");\r\n        uniswapRouter = IUniswapV3SwapRouter(_uniswapRouter);\r\n\r\n        require(_uniswapQuoter != address(0), \"Invalid Uniswap Quoter address\");\r\n        uniswapQuoter = IUniswapV3Quoter(_uniswapQuoter);\r\n\r\n        require(_compToken != address(0), \"Invalid COMP address\");\r\n        compToken = _compToken;\r\n    }\r\n\r\n    /**\r\n     * @notice Liquidator approves Uniswap to transfer Aave and COMP tokens\r\n     * @dev to be called via the proxy proposeUpgrade function, not the constructor.\r\n     */\r\n    function upgrade() external {\r\n        IERC20(aaveToken).safeApprove(address(uniswapRouter), type(uint256).max);\r\n        IERC20(compToken).safeApprove(address(uniswapRouter), type(uint256).max);\r\n    }\r\n\r\n    /***************************************\r\n                    GOVERNANCE\r\n    ****************************************/\r\n\r\n    /**\r\n     * @notice Create a liquidation\r\n     * @param _integration The integration contract address from which to receive sellToken\r\n     * @param _sellToken Token harvested from the integration contract. eg COMP or stkAave.\r\n     * @param _bAsset The asset to buy on Uniswap. eg USDC or WBTC\r\n     * @param _uniswapPath The Uniswap V3 bytes encoded path.\r\n     * @param _trancheAmount The max amount of bAsset units to buy in each weekly tranche.\r\n     * @param _minReturn Minimum exact amount of bAsset to get for each (whole) sellToken unit\r\n     * @param _mAsset optional address of the mAsset. eg mUSD or mBTC. Use zero address if from a Feeder Pool.\r\n     * @param _useAave flag if integration is with Aave\r\n     */\r\n    function createLiquidation(\r\n        address _integration,\r\n        address _sellToken,\r\n        address _bAsset,\r\n        bytes calldata _uniswapPath,\r\n        bytes calldata _uniswapPathReversed,\r\n        uint256 _trancheAmount,\r\n        uint256 _minReturn,\r\n        address _mAsset,\r\n        bool _useAave\r\n    ) external onlyGovernance {\r\n        require(liquidations[_integration].sellToken == address(0), \"Liquidation already exists\");\r\n\r\n        require(\r\n            _integration != address(0) &&\r\n                _sellToken != address(0) &&\r\n                _bAsset != address(0) &&\r\n                _minReturn > 0,\r\n            \"Invalid inputs\"\r\n        );\r\n        require(_validUniswapPath(_sellToken, _bAsset, _uniswapPath), \"Invalid uniswap path\");\r\n        require(\r\n            _validUniswapPath(_bAsset, _sellToken, _uniswapPathReversed),\r\n            \"Invalid uniswap path reversed\"\r\n        );\r\n\r\n        liquidations[_integration] = Liquidation({\r\n            sellToken: _sellToken,\r\n            bAsset: _bAsset,\r\n            uniswapPath: _uniswapPath,\r\n            uniswapPathReversed: _uniswapPathReversed,\r\n            lastTriggered: 0,\r\n            trancheAmount: _trancheAmount,\r\n            minReturn: _minReturn,\r\n            mAsset: _mAsset,\r\n            aaveBalance: 0\r\n        });\r\n        if (_useAave) {\r\n            aaveIntegrations.push(_integration);\r\n        }\r\n\r\n        if (_mAsset != address(0)) {\r\n            // This Liquidator contract approves the mAsset to transfer bAssets for mint.\r\n            // eg USDC in mUSD or WBTC in mBTC\r\n            IERC20(_bAsset).safeApprove(_mAsset, 0);\r\n            IERC20(_bAsset).safeApprove(_mAsset, type(uint256).max);\r\n\r\n            // This Liquidator contract approves the Savings Manager to transfer mAssets\r\n            // for depositLiquidation. eg mUSD\r\n            // If the Savings Manager address was to change then\r\n            // this liquidation would have to be deleted and a new one created.\r\n            // Alternatively, a new liquidation contract could be deployed and proxy upgraded.\r\n            address savings = _savingsManager();\r\n            IERC20(_mAsset).safeApprove(savings, 0);\r\n            IERC20(_mAsset).safeApprove(savings, type(uint256).max);\r\n        } else {\r\n            // This Liquidator contract approves the integration contract to transfer bAssets for deposits.\r\n            // eg GUSD as part of the GUSD Feeder Pool.\r\n            IERC20(_bAsset).safeApprove(_integration, 0);\r\n            IERC20(_bAsset).safeApprove(_integration, type(uint256).max);\r\n        }\r\n\r\n        emit LiquidationModified(_integration);\r\n    }\r\n\r\n    /**\r\n     * @notice Update a liquidation\r\n     * @param _integration The integration contract in question\r\n     * @param _bAsset New asset to buy on Uniswap\r\n     * @param _uniswapPath The Uniswap V3 bytes encoded path.\r\n     * @param _trancheAmount The max amount of bAsset units to buy in each weekly tranche.\r\n     * @param _minReturn Minimum exact amount of bAsset to get for each (whole) sellToken unit\r\n     */\r\n    function updateBasset(\r\n        address _integration,\r\n        address _bAsset,\r\n        bytes calldata _uniswapPath,\r\n        bytes calldata _uniswapPathReversed,\r\n        uint256 _trancheAmount,\r\n        uint256 _minReturn\r\n    ) external onlyGovernance {\r\n        Liquidation memory liquidation = liquidations[_integration];\r\n\r\n        address oldBasset = liquidation.bAsset;\r\n        require(oldBasset != address(0), \"Liquidation does not exist\");\r\n\r\n        require(_minReturn > 0, \"Must set some minimum value\");\r\n        require(_bAsset != address(0), \"Invalid bAsset\");\r\n        require(\r\n            _validUniswapPath(liquidation.sellToken, _bAsset, _uniswapPath),\r\n            \"Invalid uniswap path\"\r\n        );\r\n        require(\r\n            _validUniswapPath(_bAsset, liquidation.sellToken, _uniswapPathReversed),\r\n            \"Invalid uniswap path reversed\"\r\n        );\r\n\r\n        liquidations[_integration].bAsset = _bAsset;\r\n        liquidations[_integration].uniswapPath = _uniswapPath;\r\n        liquidations[_integration].trancheAmount = _trancheAmount;\r\n        liquidations[_integration].minReturn = _minReturn;\r\n\r\n        emit LiquidationModified(_integration);\r\n    }\r\n\r\n    /**\r\n     * @notice Validates a given uniswap path - valid if sellToken at position 0 and bAsset at end\r\n     * @param _sellToken Token harvested from the integration contract\r\n     * @param _bAsset New asset to buy on Uniswap\r\n     * @param _uniswapPath The Uniswap V3 bytes encoded path.\r\n     */\r\n    function _validUniswapPath(\r\n        address _sellToken,\r\n        address _bAsset,\r\n        bytes calldata _uniswapPath\r\n    ) internal pure returns (bool) {\r\n        uint256 len = _uniswapPath.length;\r\n        require(_uniswapPath.length >= 43, \"Uniswap path too short\");\r\n        // check sellToken is first 20 bytes and bAsset is the last 20 bytes of the uniswap path\r\n        return\r\n            keccak256(abi.encodePacked(_sellToken)) ==\r\n            keccak256(abi.encodePacked(_uniswapPath[0:20])) &&\r\n            keccak256(abi.encodePacked(_bAsset)) ==\r\n            keccak256(abi.encodePacked(_uniswapPath[len - 20:len]));\r\n    }\r\n\r\n    /**\r\n     * @notice Delete a liquidation\r\n     */\r\n    function deleteLiquidation(address _integration) external onlyGovernance {\r\n        Liquidation memory liquidation = liquidations[_integration];\r\n        require(liquidation.bAsset != address(0), \"Liquidation does not exist\");\r\n\r\n        delete liquidations[_integration];\r\n\r\n        emit LiquidationEnded(_integration);\r\n    }\r\n\r\n    /***************************************\r\n                    LIQUIDATION\r\n    ****************************************/\r\n\r\n    /**\r\n     * @notice Triggers a liquidation, flow (once per week):\r\n     *    - Sells $COMP for $USDC (or other) on Uniswap (up to trancheAmount)\r\n     *    - Mint mUSD using USDC\r\n     *    - Send to SavingsManager\r\n     * @param _integration Integration for which to trigger liquidation\r\n     */\r\n    function triggerLiquidation(address _integration) external {\r\n        // solium-disable-next-line security/no-tx-origin\r\n        require(tx.origin == msg.sender, \"Must be EOA\");\r\n\r\n        Liquidation memory liquidation = liquidations[_integration];\r\n\r\n        address bAsset = liquidation.bAsset;\r\n        require(bAsset != address(0), \"Liquidation does not exist\");\r\n\r\n        require(block.timestamp > liquidation.lastTriggered + 7 days, \"Must wait for interval\");\r\n        liquidations[_integration].lastTriggered = block.timestamp;\r\n\r\n        address sellToken = liquidation.sellToken;\r\n\r\n        // 1. Transfer sellTokens from integration contract if there are some\r\n        //    Assumes infinite approval\r\n        uint256 integrationBal = IERC20(sellToken).balanceOf(_integration);\r\n        if (integrationBal > 0) {\r\n            IERC20(sellToken).safeTransferFrom(_integration, address(this), integrationBal);\r\n        }\r\n\r\n        // 2. Get the amount to sell based on the tranche amount we want to buy\r\n        //    Check contract balance\r\n        uint256 sellTokenBal = IERC20(sellToken).balanceOf(address(this));\r\n        require(sellTokenBal > 0, \"No sell tokens to liquidate\");\r\n        require(liquidation.trancheAmount > 0, \"Liquidation has been paused\");\r\n        //    Calc amounts for max tranche\r\n        uint256 sellAmount =\r\n            uniswapQuoter.quoteExactOutput(\r\n                liquidation.uniswapPathReversed,\r\n                liquidation.trancheAmount\r\n            );\r\n\r\n        if (sellTokenBal < sellAmount) {\r\n            sellAmount = sellTokenBal;\r\n        }\r\n\r\n        // 3. Make the swap\r\n        // Uniswap V2 > https://docs.uniswap.org/reference/periphery/interfaces/ISwapRouter#exactinput\r\n        // min amount out = sellAmount * priceFloor / 1e18\r\n        // e.g. 1e18 * 100e6 / 1e18 = 100e6\r\n        // e.g. 30e8 * 100e6 / 1e8 = 3000e6\r\n        // e.g. 30e18 * 100e18 / 1e18 = 3000e18\r\n        uint256 sellTokenDec = IBasicToken(sellToken).decimals();\r\n        uint256 minOut = (sellAmount * liquidation.minReturn) / (10**sellTokenDec);\r\n        require(minOut > 0, \"Must have some price floor\");\r\n        IUniswapV3SwapRouter.ExactInputParams memory param =\r\n            IUniswapV3SwapRouter.ExactInputParams(\r\n                liquidation.uniswapPath,\r\n                address(this),\r\n                block.timestamp,\r\n                sellAmount,\r\n                minOut\r\n            );\r\n        uniswapRouter.exactInput(param);\r\n\r\n        // 4. Mint mAsset using purchased bAsset\r\n        address mAsset = liquidation.mAsset;\r\n        uint256 minted = _mint(bAsset, mAsset);\r\n\r\n        // 5. Send to SavingsManager\r\n        address savings = _savingsManager();\r\n        ISavingsManager(savings).depositLiquidation(mAsset, minted);\r\n\r\n        emit Liquidated(sellToken, mAsset, minted, bAsset);\r\n    }\r\n\r\n    /**\r\n     * @notice Claims stake Aave token rewards from each Aave integration contract\r\n     * and then transfers all reward tokens to the liquidator contract.\r\n     * Can only claim more stkAave if the last claim's unstake window has ended.\r\n     */\r\n    function claimStakedAave() external {\r\n        // solium-disable-next-line security/no-tx-origin\r\n        require(tx.origin == msg.sender, \"Must be EOA\");\r\n\r\n        // If the last claim has not yet been liquidated\r\n        uint256 totalAaveBalanceMemory = totalAaveBalance;\r\n        if (totalAaveBalanceMemory > 0) {\r\n            // Check unstake period has expired for this liquidator contract\r\n            IStakedAave stkAaveContract = IStakedAave(stkAave);\r\n            uint256 cooldownStartTime = stkAaveContract.stakersCooldowns(address(this));\r\n            uint256 cooldownPeriod = stkAaveContract.COOLDOWN_SECONDS();\r\n            uint256 unstakeWindow = stkAaveContract.UNSTAKE_WINDOW();\r\n\r\n            // Can not claim more stkAave rewards if the last unstake window has not ended\r\n            // Wait until the cooldown ends and liquidate\r\n            require(\r\n                block.timestamp > cooldownStartTime + cooldownPeriod,\r\n                \"Last claim cooldown not ended\"\r\n            );\r\n            // or liquidate now as currently in the\r\n            require(\r\n                block.timestamp > cooldownStartTime + cooldownPeriod + unstakeWindow,\r\n                \"Must liquidate last claim\"\r\n            );\r\n            // else the current time is past the unstake window so claim more stkAave and reactivate the cool down\r\n        }\r\n\r\n        // 1. For each Aave integration contract\r\n        uint256 len = aaveIntegrations.length;\r\n        for (uint256 i = 0; i < len; i++) {\r\n            address integrationAdddress = aaveIntegrations[i];\r\n\r\n            // 2. Claim the platform rewards on the integration contract. eg stkAave\r\n            PAaveIntegration(integrationAdddress).claimRewards();\r\n\r\n            // 3. Transfer sell token from integration contract if there are some\r\n            //    Assumes the integration contract has already given infinite approval to this liquidator contract.\r\n            uint256 integrationBal = IERC20(stkAave).balanceOf(integrationAdddress);\r\n            if (integrationBal > 0) {\r\n                IERC20(stkAave).safeTransferFrom(\r\n                    integrationAdddress,\r\n                    address(this),\r\n                    integrationBal\r\n                );\r\n            }\r\n            // Increate the integration contract's staked Aave balance.\r\n            liquidations[integrationAdddress].aaveBalance += integrationBal;\r\n            totalAaveBalanceMemory += integrationBal;\r\n        }\r\n\r\n        // Store the final total Aave balance in memory to storage variable.\r\n        totalAaveBalance = totalAaveBalanceMemory;\r\n\r\n        // 4. Restart the cool down as the start timestamp would have been reset to zero after the last redeem\r\n        IStakedAave(stkAave).cooldown();\r\n\r\n        emit ClaimedStakedAave(totalAaveBalanceMemory);\r\n    }\r\n\r\n    /**\r\n     * @notice liquidates stkAave rewards earned by the Aave integration contracts:\r\n     *      - Redeems Aave for stkAave rewards\r\n     *      - swaps Aave for bAsset using Uniswap V2. eg Aave for USDC\r\n     *      - for each Aave integration contract\r\n     *        - if from a mAsset\r\n     *          - mints mAssets using bAssets. eg mUSD for USDC\r\n     *          - deposits mAssets to Savings Manager. eg mUSD\r\n     *        - else from a Feeder Pool\r\n     *          - transfer bAssets to integration contract. eg GUSD\r\n     */\r\n    function triggerLiquidationAave() external {\r\n        // solium-disable-next-line security/no-tx-origin\r\n        require(tx.origin == msg.sender, \"Must be EOA\");\r\n        // Can not liquidate stkAave rewards if not already claimed by the integration contracts.\r\n        require(totalAaveBalance > 0, \"Must claim before liquidation\");\r\n\r\n        // 1. Redeem as many stkAave as we can for Aave\r\n        // This will fail if the 10 day cooldown period has not passed\r\n        // which is triggered in claimStakedAave().\r\n        IStakedAave(stkAave).redeem(address(this), type(uint256).max);\r\n\r\n        // 2. Get the amount of Aave tokens to sell\r\n        uint256 totalAaveToLiquidate = IERC20(aaveToken).balanceOf(address(this));\r\n        require(totalAaveToLiquidate > 0, \"No Aave redeemed from stkAave\");\r\n\r\n        // for each Aave integration\r\n        uint256 len = aaveIntegrations.length;\r\n        for (uint256 i = 0; i < len; i++) {\r\n            address _integration = aaveIntegrations[i];\r\n            Liquidation memory liquidation = liquidations[_integration];\r\n\r\n            // 3. Get the proportional amount of Aave tokens for this integration contract to liquidate\r\n            // Amount of Aave to sell for this integration = total Aave to liquidate * integration's Aave balance / total of all integration Aave balances\r\n            uint256 aaveSellAmount =\r\n                (liquidation.aaveBalance * totalAaveToLiquidate) / totalAaveBalance;\r\n            address bAsset = liquidation.bAsset;\r\n            // If there's no Aave tokens to liquidate for this integration contract\r\n            // or the liquidation has been deleted for the integration\r\n            // then just move to the next integration contract.\r\n            if (aaveSellAmount == 0 || bAsset == address(0)) {\r\n                continue;\r\n            }\r\n\r\n            // Reset integration's Aave balance in storage\r\n            liquidations[_integration].aaveBalance = 0;\r\n\r\n            // 4. Make the swap of Aave for the bAsset\r\n            // Make the sale > https://docs.uniswap.org/reference/periphery/interfaces/ISwapRouter#exactinput\r\n            // min bAsset amount out = Aave sell amount * priceFloor / 1e18\r\n            // e.g. 1e18 * 100e6 / 1e18 = 100e6\r\n            // e.g. 30e8 * 100e6 / 1e8 = 3000e6\r\n            // e.g. 30e18 * 100e18 / 1e18 = 3000e18\r\n            uint256 minBassetsOut = (aaveSellAmount * liquidation.minReturn) / 1e18;\r\n            require(minBassetsOut > 0, \"Must have some price floor\");\r\n            IUniswapV3SwapRouter.ExactInputParams memory param =\r\n                IUniswapV3SwapRouter.ExactInputParams(\r\n                    liquidation.uniswapPath,\r\n                    address(this),\r\n                    block.timestamp + 1,\r\n                    aaveSellAmount,\r\n                    minBassetsOut\r\n                );\r\n            uniswapRouter.exactInput(param);\r\n\r\n            address mAsset = liquidation.mAsset;\r\n            // If the integration contract is connected to a mAsset like mUSD or mBTC\r\n            if (mAsset != address(0)) {\r\n                // 5a. Mint mAsset using bAsset from the Uniswap swap\r\n                uint256 minted = _mint(bAsset, mAsset);\r\n\r\n                // 6a. Send to SavingsManager to streamed to the savings vault. eg imUSD or imBTC\r\n                address savings = _savingsManager();\r\n                ISavingsManager(savings).depositLiquidation(mAsset, minted);\r\n\r\n                emit Liquidated(aaveToken, mAsset, minted, bAsset);\r\n            } else {\r\n                // If a feeder pool like GUSD\r\n                // 5b. transfer bAsset directly to the integration contract.\r\n                // this will then increase the boosted savings vault price.\r\n                IERC20 bAssetToken = IERC20(bAsset);\r\n                uint256 bAssetBal = bAssetToken.balanceOf(address(this));\r\n                bAssetToken.transfer(_integration, bAssetBal);\r\n\r\n                emit Liquidated(aaveToken, mAsset, bAssetBal, bAsset);\r\n            }\r\n        }\r\n\r\n        totalAaveBalance = 0;\r\n    }\r\n\r\n    function _mint(address _bAsset, address _mAsset) internal returns (uint256 minted) {\r\n        uint256 bAssetBal = IERC20(_bAsset).balanceOf(address(this));\r\n\r\n        uint256 bAssetDec = IBasicToken(_bAsset).decimals();\r\n        // e.g. 100e6 * 95e16 / 1e6 = 100e18\r\n        uint256 minOut = (bAssetBal * 90e16) / (10**bAssetDec);\r\n        minted = IMasset(_mAsset).mint(_bAsset, bAssetBal, minOut, address(this));\r\n    }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_nexus\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_stkAave\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_aaveToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_uniswapRouter\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_uniswapQuoter\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_compToken\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"rewardsAmount\",\"type\":\"uint256\"}],\"name\":\"ClaimedStakedAave\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sellToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"mUSD\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"mUSDAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"buyToken\",\"type\":\"address\"}],\"name\":\"Liquidated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"integration\",\"type\":\"address\"}],\"name\":\"LiquidationEnded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"integration\",\"type\":\"address\"}],\"name\":\"LiquidationModified\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"redeemedAmount\",\"type\":\"uint256\"}],\"name\":\"RedeemedAave\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"aaveIntegrations\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"aaveToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimStakedAave\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"compToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_integration\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_sellToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_bAsset\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"_uniswapPath\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"_uniswapPathReversed\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"_trancheAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_minReturn\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_mAsset\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_useAave\",\"type\":\"bool\"}],\"name\":\"createLiquidation\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_integration\",\"type\":\"address\"}],\"name\":\"deleteLiquidation\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"deprecated_curve\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"deprecated_liquidations\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"sellToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"bAsset\",\"type\":\"address\"},{\"internalType\":\"int128\",\"name\":\"curvePosition\",\"type\":\"int128\"},{\"internalType\":\"uint256\",\"name\":\"lastTriggered\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"trancheAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"deprecated_mUSD\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"deprecated_minReturn\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"deprecated_uniswap\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"liquidations\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"sellToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"bAsset\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"uniswapPath\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"uniswapPathReversed\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"lastTriggered\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"trancheAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minReturn\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"mAsset\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"aaveBalance\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nexus\",\"outputs\":[{\"internalType\":\"contract INexus\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stkAave\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalAaveBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_integration\",\"type\":\"address\"}],\"name\":\"triggerLiquidation\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"triggerLiquidationAave\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapQuoter\",\"outputs\":[{\"internalType\":\"contract IUniswapV3Quoter\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapRouter\",\"outputs\":[{\"internalType\":\"contract IUniswapV3SwapRouter\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_integration\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_bAsset\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"_uniswapPath\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"_uniswapPathReversed\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"_trancheAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_minReturn\",\"type\":\"uint256\"}],\"name\":\"updateBasset\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"upgrade\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"Liquidator","CompilerVersion":"v0.8.2+commit.661d1103","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000afce80b19a8ce13dec0739a1aab7a028d6845eb30000000000000000000000004da27a545c0c5b758a6ba100e3a049001de870f50000000000000000000000007fc66500c84a76ad7e9c93437bfc5ac33e2ddae9000000000000000000000000e592427a0aece92de3edee1f18e0157c05861564000000000000000000000000b27308f9f90d607463bb33ea1bebb41c27ce5ab6000000000000000000000000c00e94cb662c3520282e6f5717214004a7f26888","EVMVersion":"Default","Library":"","LicenseType":"Unknown","Proxy":"0","Implementation":"","SwarmSource":"ipfs://5e051b21cf9287fa7afca53d8427f7fcdd8f680e0324cca79760f7d1c243f851"}]}