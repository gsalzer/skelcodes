{"status":"1","message":"OK","result":[{"SourceCode":"//SPDX-License-Identifier: UNLICENSED\r\npragma solidity ^0.8.6;\r\n//+commit.4cb486ee;\r\n\r\nstruct File{\r\n    uint256 timestamp;\r\n    bool set;\r\n    bool deleted;\r\n    bool closed;\r\n    uint256 size;\r\n    bytes32[][] data;\r\n}\r\n\r\nstruct FileTransfer{\r\n    string name;\r\n    address sender;\r\n    uint256 transferTimestamp;\r\n    uint256 timestamp;\r\n    bool closed;\r\n    uint256 size;\r\n    bytes32[] data;\r\n}\r\n\r\ncontract ethFS {\r\n    // Events \r\n    // File modification events\r\n    event FileSaved (\r\n        address indexed user,\r\n        string indexed name,\r\n        uint256 timestamp,\r\n        uint256 size,\r\n        bool appended,\r\n        bytes32 dataHash\r\n    );\r\n    event FileClosed (\r\n        address indexed user,\r\n        string indexed name\r\n    );\r\n    event FileDeleted (\r\n        address indexed user,\r\n        string indexed name\r\n    );\r\n    // File transfer events\r\n    event InboxCleared (\r\n        address indexed user\r\n    );\r\n    event InboxWhitelistStatusChange (\r\n        address indexed user,\r\n        bool enabled\r\n    );\r\n    event InboxWhitelistUserStatusChange (\r\n        address indexed user,\r\n        address indexed sender,\r\n        bool enabled\r\n    );\r\n    \r\n    event FileTransfered (\r\n        address indexed user,\r\n        address indexed receiver,\r\n        string indexed name,\r\n        uint256 transferTimestamp\r\n    );\r\n    \r\n    event FileTransferAccepted (\r\n        address indexed user,\r\n        address indexed sender,\r\n        string indexed name,\r\n        uint256 transferTimestamp\r\n    );\r\n    \r\n    // Ownership\r\n    address owner;\r\n    address nextOwner;\r\n    address beneficiary;\r\n    \r\n    // Constraints\r\n    uint256 minNameLenth = 1;\r\n    uint256 maxNameLength = 1024;\r\n    \r\n    // Fees\r\n    uint256 feePerFile = 0;\r\n    uint256 feePerByte = 0;\r\n    uint256 deletionFee = 0;\r\n    uint256 closingFee = 0;\r\n    uint256 transferSendFeePerFile = 0;\r\n    uint256 transferSendFeePerByte = 0;\r\n    uint256 transferAcceptFeePerFile = 0;\r\n    uint256 transferAcceptFeePerByte = 0;\r\n    \r\n    // Active flags\r\n    bool enabled = true;\r\n    \r\n    bool deletionAllowed = false;\r\n    bool deletionEnabled = false;\r\n    bool transferEnabled = true;\r\n    \r\n    // Statistics\r\n    // Files\r\n    uint256 totalSizeWritten = 0;\r\n    uint256 totalSize = 0;\r\n    uint256 totalSizeDeleted = 0;\r\n    uint256 numberOfFiles = 0; // Increased when file is written that has not been set\r\n    uint256 numberOfWrites = 0; // Increased whenever a file is written (created, overwritten, appended, transfers accepted)\r\n    uint256 numberOfTrueAppends = 0; // Increased whenever a file is appended\r\n    uint256 numberOfDeletedFiles = 0; // Number of times the delete bit has been set on a file\r\n    // File transfers\r\n    uint256 numberOfInboxClearings = 0;\r\n    uint256 numberOfWhitelistedUsers = 0;\r\n    uint256 numberOfUsersWithDisabledInboxWhitelist = 0;\r\n    uint256 numberOfTransferRequests = 0;\r\n    uint256 numberOfAcceptedFileTransfers = 0;\r\n    \r\n    \r\n    // Operations\r\n    uint256 defaultNumberOfNewestNames = 100;\r\n\r\n    // Data store\r\n    mapping(bytes32 => bytes) store;\r\n    mapping(address => mapping(string => File)) nodes;\r\n    mapping(address => string[]) index;\r\n    \r\n    // Inbox\r\n    mapping(address => FileTransfer[][]) inbox;\r\n    mapping(address => bool) inboxWhitelistDisabled;\r\n    mapping(address => mapping(address => bool)) inboxWhitelist;\r\n    \r\n    // Ownership\r\n    constructor() payable {\r\n        owner = msg.sender;\r\n        beneficiary = msg.sender;\r\n    }\r\n    function transferOwnership(address newOwner) external {\r\n        require(msg.sender == owner, \"Only owner can transfer ownership\");\r\n        nextOwner = newOwner;\r\n    }\r\n    function confirmOwnership() external {\r\n        require(msg.sender == nextOwner, \"Only next owner can confirm owner\");\r\n        owner = nextOwner;\r\n    }\r\n    function setBeneficiary(address b) external {\r\n        require(msg.sender == owner, \"Only owner can set the beneficiary\");\r\n        beneficiary = b;\r\n    }\r\n    function withdraw(uint256 amount) external {\r\n        require(msg.sender == beneficiary, \"Only the beneficiary can withdraw\");\r\n        payable(msg.sender).transfer(amount);\r\n    }\r\n    \r\n    // Activity flags\r\n    function setEnabled(bool flag) external {\r\n        require(msg.sender == owner, \"Only owner can enable/disable\");\r\n        enabled = flag;\r\n    }\r\n    function setDeletionFlags(bool enabledFlag, bool allowedFlag) external {\r\n        require(msg.sender == owner, \"Only the owner can allow/disallow / enable/disable deletion\");\r\n        deletionAllowed = allowedFlag;\r\n        deletionEnabled = enabledFlag;\r\n    }\r\n    function setTransferEnabled(bool flag) external {\r\n        require(msg.sender == owner, \"Only the owner can set the transfer enabled flag\");\r\n        transferEnabled = flag;\r\n    }\r\n    function setFilenameLimits(uint256 minLen, uint256 maxLen) external {\r\n        require(msg.sender == owner, \"Only the owner can set the max name length\");\r\n        require(minLen > 0, \"Minimal filename length needs to be greater than 0\");\r\n        minNameLenth = minLen;\r\n        maxNameLength = maxLen;\r\n    }\r\n    \r\n    // Operations \r\n    function setOperationParameters(uint256 nNewest) external {\r\n        require(msg.sender == owner, \"Only the owner can set operation parameters\");\r\n        defaultNumberOfNewestNames = nNewest;\r\n    }\r\n    \r\n    // Fees\r\n    function setFileOperationFees(uint256 perFile, uint256 perByte, uint256 perDeletion, uint256 perClose) external {\r\n        require(msg.sender == owner, \"Only the owner can set the per file fee\");\r\n        feePerFile = perFile;\r\n        feePerByte = perByte;\r\n        deletionFee = perDeletion;\r\n        closingFee = perClose;\r\n    }\r\n    function setTransferFees(uint256 sendPerFile, uint256 sendPerByte, uint256 acceptPerFile, uint256 acceptPerByte) external {\r\n        require(msg.sender == owner, \"Only the owner can set the transfer fees\");\r\n        transferSendFeePerFile = sendPerFile;\r\n        transferSendFeePerByte = sendPerByte;\r\n        transferAcceptFeePerFile = acceptPerFile;\r\n        transferAcceptFeePerByte = acceptPerByte;\r\n    }\r\n    \r\n    // Filesystem operations\r\n    function calculateSaveFee(bytes memory data) view public returns (uint256) {\r\n        return data.length * feePerByte + feePerFile;\r\n    }\r\n    function save(string memory name, bytes memory data) public payable {\r\n        save(name, data, false);\r\n    }\r\n    function save(string memory name, bytes memory data, bool append) public payable {\r\n        require(enabled == true, \"ethFS disabled\");\r\n        require(bytes(name).length >= minNameLenth, \"Name shorter than min filename length\");\r\n        require(bytes(name).length <= maxNameLength, \"Name longer than max filename length\");\r\n        require(!containsNewline(name), \"Filename should not contain newline\");\r\n        require(msg.value >= calculateSaveFee(data), \"Not enough ether provided for saving fee\");\r\n        require(!append || !nodes[msg.sender][name].closed, \"Trying to append but file is closed\");\r\n        require(!deletionEnabled || !append || !nodes[msg.sender][name].deleted, \"Trying to append to deleted file\");\r\n        \r\n        bool trueAppend = nodes[msg.sender][name].set && append;\r\n        \r\n        if(!nodes[msg.sender][name].set) {\r\n            index[msg.sender].push(name);\r\n            numberOfFiles++;\r\n            assert(nodes[msg.sender][name].data.length == 0); // Data store for file that is not set should be empty\r\n            nodes[msg.sender][name].data.push();\r\n        } else {\r\n            // If file is already set and operation is not append (=> overwrite)\r\n            if(!append) {\r\n                nodes[msg.sender][name].data.push();\r\n                totalSize -= nodes[msg.sender][name].size;\r\n                nodes[msg.sender][name].size = 0;\r\n            }\r\n            if(nodes[msg.sender][name].deleted){\r\n                totalSizeDeleted -= nodes[msg.sender][name].size;\r\n                numberOfDeletedFiles--;\r\n            }\r\n        }\r\n        \r\n        bytes32 dataHash = keccak256(data);\r\n        store[dataHash] = data;\r\n        nodes[msg.sender][name].set = true;\r\n        nodes[msg.sender][name].deleted = false;\r\n        nodes[msg.sender][name].closed = false;\r\n        nodes[msg.sender][name].timestamp = block.timestamp;\r\n        nodes[msg.sender][name].size += data.length;\r\n        nodes[msg.sender][name].data[nodes[msg.sender][name].data.length - 1].push(dataHash);\r\n        \r\n        \r\n        totalSizeWritten += data.length;\r\n        totalSize += data.length;\r\n        numberOfWrites++;\r\n        if(trueAppend) {\r\n            numberOfTrueAppends++;\r\n        }\r\n        emit FileSaved(msg.sender, name, block.timestamp, data.length, trueAppend, dataHash);\r\n    }\r\n    function close(string calldata name) external payable {\r\n        require(enabled == true, \"ethFS disabled\");\r\n        require(nodes[msg.sender][name].set = true, \"Trying to close file that is not set\");\r\n        require(msg.value >= closingFee, \"Not enough ether provided for closing fee\");\r\n        nodes[msg.sender][name].closed = true;\r\n        \r\n        emit FileClosed(msg.sender, name);\r\n    }\r\n    function remove(string calldata name) external payable {\r\n        require(enabled == true, \"ethFS disabled\");\r\n        require(deletionAllowed, \"Deletion not allowed\");\r\n        require(deletionEnabled, \"Deletion disabled\");\r\n        require(nodes[msg.sender][name].set, \"File not found\");\r\n        require(msg.value >= deletionFee, \"Not enough ether provided for deletion fee\");\r\n        \r\n        bool trueDelete = !nodes[msg.sender][name].deleted;\r\n        nodes[msg.sender][name].deleted = true;\r\n        \r\n        if(trueDelete){\r\n            numberOfDeletedFiles++;\r\n            totalSizeDeleted += nodes[msg.sender][name].size;\r\n        }\r\n        emit FileDeleted(msg.sender, name);\r\n    }\r\n    \r\n    // Data chunk helpers\r\n    function getFileData(bytes32[] memory data) private view returns (bytes memory) {\r\n        bytes memory res;\r\n        for(uint256 i=0; i<data.length; i++){\r\n            res = abi.encodePacked(res, store[data[i]]);\r\n        }\r\n        return res;\r\n    }\r\n    \r\n    // Transfer operations\r\n    function clearInbox() external {\r\n        inbox[msg.sender].push();\r\n        \r\n        numberOfInboxClearings++;\r\n        emit InboxCleared(msg.sender);\r\n    }\r\n    function setInboxWhitelistEnabled(bool flag) external {\r\n        bool previousState = !inboxWhitelistDisabled[msg.sender];\r\n        inboxWhitelistDisabled[msg.sender] = !flag;\r\n        \r\n        if(previousState != flag){\r\n            if(!flag){\r\n                numberOfUsersWithDisabledInboxWhitelist++;\r\n            } else {\r\n                numberOfUsersWithDisabledInboxWhitelist--;\r\n            }\r\n        }\r\n        emit InboxWhitelistStatusChange(msg.sender, flag);\r\n    }\r\n    function setInboxWhitelist(address sender, bool flag) external {\r\n        bool previousState = inboxWhitelist[msg.sender][sender];\r\n        inboxWhitelist[msg.sender][sender] = flag;\r\n        \r\n        if(previousState != flag) {\r\n            if(flag){\r\n                numberOfWhitelistedUsers++;\r\n            } else {\r\n                numberOfWhitelistedUsers--;\r\n            }\r\n        }\r\n        emit InboxWhitelistUserStatusChange(msg.sender, sender, flag);\r\n    }\r\n    function calculateTransferSendingFee(string memory name) public view returns (uint256) {\r\n        require(nodes[msg.sender][name].set, \"File does not exist\");\r\n        require(!nodes[msg.sender][name].deleted || !deletionEnabled, \"File has been deleted\");\r\n        return nodes[msg.sender][name].size * transferSendFeePerByte + transferSendFeePerFile;\r\n    }\r\n    function transfer(string calldata name, address receiver) external payable {\r\n        require(enabled == true, \"ethFS disabled\");\r\n        require(transferEnabled, \"Transfer is not enabled\");\r\n        require(nodes[msg.sender][name].set, \"File does not exist\");\r\n        require(!nodes[msg.sender][name].deleted || !deletionEnabled, \"File has been deleted\");\r\n        require(inboxWhitelistDisabled[receiver] || inboxWhitelist[receiver][msg.sender], \"Inbox whitelist enabled by receiver and sender not whitelisted\");\r\n        require(msg.value >= calculateTransferSendingFee(name), \"Not enough ether provided for transfer fee\");\r\n        \r\n        FileTransfer memory ft;\r\n        ft.sender = msg.sender;\r\n        ft.name = name;\r\n        ft.transferTimestamp = block.timestamp;\r\n        ft.timestamp = nodes[msg.sender][name].timestamp;\r\n        ft.closed = nodes[msg.sender][name].closed;\r\n        ft.size = nodes[msg.sender][name].size;\r\n        ft.data = nodes[msg.sender][name].data[nodes[msg.sender][name].data.length - 1];\r\n        if(inbox[receiver].length == 0){\r\n            inbox[receiver].push();\r\n        }\r\n        inbox[receiver][inbox[receiver].length - 1].push(ft);\r\n        \r\n        numberOfTransferRequests++;\r\n        emit FileTransfered(msg.sender, receiver, name, ft.transferTimestamp);\r\n    }\r\n    \r\n    // returns (index of last FileTransfer, fee)\r\n    function calculateLastFileTransferAcceptanceFee() public view returns (uint256, uint256) {\r\n        require(inbox[msg.sender].length > 0, \"Inbox not yet existing\");\r\n        require(inbox[msg.sender][inbox[msg.sender].length - 1].length > 0, \"Inbox empty\");\r\n        \r\n        uint256 i = inbox[msg.sender][inbox[msg.sender].length - 1].length - 1;\r\n        return (i, inbox[msg.sender][inbox[msg.sender].length - 1][i].size * transferAcceptFeePerByte + transferAcceptFeePerFile);\r\n    }\r\n    function acceptLastFileTransfer(uint256 i) external payable {\r\n        require(enabled == true, \"ethFS disabled\");\r\n        require(transferEnabled, \"Transfer is not enabled\");\r\n        require(inbox[msg.sender].length > 0, \"Inbox not yet existing\");\r\n        require(inbox[msg.sender][inbox[msg.sender].length - 1].length > 0, \"Inbox empty\");\r\n        require(i == inbox[msg.sender][inbox[msg.sender].length - 1].length - 1, \"Requested transfer index not the last file in inbox (inbox)\");\r\n        (, uint256 fee) = calculateLastFileTransferAcceptanceFee();\r\n        require(msg.value >= fee, \"Not enough ether provided for transfer fee\");\r\n        \r\n        FileTransfer storage ft = inbox[msg.sender][inbox[msg.sender].length - 1][i];\r\n        inbox[msg.sender][inbox[msg.sender].length - 1].pop();\r\n        \r\n        if(!nodes[msg.sender][ft.name].set) {\r\n            index[msg.sender].push(ft.name);\r\n            numberOfFiles++;\r\n            assert(nodes[msg.sender][ft.name].data.length == 0); // Data store for file that is not set should be empty\r\n        } else {\r\n            // If file is already set => overwrite\r\n            totalSize -= nodes[msg.sender][ft.name].size;\r\n            if(nodes[msg.sender][ft.name].deleted){\r\n                totalSizeDeleted -= nodes[msg.sender][ft.name].size;\r\n                numberOfDeletedFiles--;\r\n            }\r\n        }\r\n        \r\n        nodes[msg.sender][ft.name].set = true;\r\n        nodes[msg.sender][ft.name].deleted = false;\r\n        nodes[msg.sender][ft.name].timestamp = ft.timestamp;\r\n        nodes[msg.sender][ft.name].closed = ft.closed;\r\n        nodes[msg.sender][ft.name].size = ft.size;\r\n        nodes[msg.sender][ft.name].data.push(ft.data);\r\n        \r\n        numberOfAcceptedFileTransfers++;\r\n        totalSize += ft.size;\r\n        numberOfWrites++;\r\n        emit FileTransferAccepted(msg.sender, ft.sender, ft.name, ft.transferTimestamp);\r\n    }\r\n    \r\n    // Getters\r\n    \r\n    // Filesystem \r\n    function count(address user, bool excludeDeleted) public view returns (uint256){\r\n        uint256 c = 0;\r\n        for(uint256 i=0; i<index[user].length; i++){\r\n            c += (deletionEnabled && excludeDeleted && nodes[user][index[user][i]].deleted) ? 0 : 1;\r\n        }\r\n        return c;\r\n    }    \r\n    function count() public view returns (uint256){\r\n        return count(msg.sender, true);\r\n    }\r\n    function getName(address user, uint256 i) public view returns (string memory) {\r\n        return index[user][i];\r\n    }\r\n    function getName(uint256 i) public view returns (string memory) {\r\n        return getName(msg.sender, i);\r\n    }\r\n    function getAllNames(address user, uint256 n, bool excludeDeleted) public view returns (string memory){\r\n        string[] memory nameIndex = index[user];\r\n        bytes memory res;\r\n        uint256 nAdded = 0;\r\n        for(uint256 i=0; i<nameIndex.length; i++){\r\n            if(n == 0 || nAdded < n){\r\n                uint256 current = nameIndex.length - i - 1;\r\n                if(!deletionEnabled || !excludeDeleted || !nodes[user][nameIndex[current]].deleted) {\r\n                    res = abi.encodePacked(res, nameIndex[current], '\\n');\r\n                    nAdded++;\r\n                }\r\n            }\r\n        }\r\n        return string(res);\r\n    }\r\n    function getAllNames(address user) public view returns (string memory){\r\n        return getAllNames(user, 0, true);\r\n    }\r\n    function getAllNames() public view returns (string memory){\r\n        return getAllNames(msg.sender, 0, true);\r\n    }\r\n    function getNewestNames(address user, uint256 n) public view returns (string memory){\r\n        return getAllNames(user, n, true);\r\n    }\r\n    function getNewestNames(uint256 n) public view returns (string memory){\r\n        return getAllNames(msg.sender, n, true);\r\n    }\r\n    function getNewestNames() public view returns (string memory){\r\n        return getAllNames(msg.sender, defaultNumberOfNewestNames, true);\r\n    }\r\n    function exists(string memory name) public view returns (bool) {\r\n        return exists(msg.sender, name);\r\n    }\r\n    function exists(address user, string memory name) public view returns (bool) {\r\n        return nodes[user][name].set && (!nodes[msg.sender][name].deleted || !deletionEnabled);\r\n    }\r\n\r\n    function retrieve(address user, string memory name) public view returns (bytes memory){\r\n        require(nodes[user][name].set, \"File does not exist\");\r\n        require(!nodes[user][name].deleted || !deletionEnabled, \"File has been deleted\");\r\n        return getFileData(nodes[user][name].data[nodes[msg.sender][name].data.length - 1]);\r\n        \r\n    }\r\n    function retrieve(string memory name) public view returns (bytes memory){\r\n        return retrieve(msg.sender, name);\r\n    }\r\n\r\n    function getTimestamp(address user, string memory name) public view returns (uint256){\r\n        require(nodes[user][name].set, \"File does not exist\");\r\n        require(!nodes[user][name].deleted || !deletionEnabled, \"File has been deleted\");\r\n        return nodes[user][name].timestamp;\r\n    }\r\n    function getTimestamp(string calldata name) external view returns (uint256){\r\n        return getTimestamp(msg.sender, name);\r\n    }\r\n    \r\n    function getSize(address user, string memory name) public view returns (uint256){\r\n        require(nodes[user][name].set, \"File does not exist\");\r\n        require(!nodes[user][name].deleted || !deletionEnabled, \"File has been deleted\");\r\n        return nodes[user][name].size;\r\n    }\r\n    function getSize(string calldata name) external view returns (uint256){\r\n        return getSize(msg.sender, name);\r\n    }\r\n    \r\n    // Inbox\r\n    // returns index, name, sender, transferTimestamp, timestamp, dataHash\r\n    function getLastFileFromInbox() external view returns (uint256, string memory, address, uint256, uint256, bytes memory) {\r\n        require(inbox[msg.sender].length > 0, \"Inbox not yet existing\");\r\n        require(inbox[msg.sender][inbox[msg.sender].length - 1].length > 0, \"Inbox empty\");\r\n        uint256 i = inbox[msg.sender][inbox[msg.sender].length - 1].length - 1;\r\n        (string memory name, address sender, uint256 transferTimestamp, uint256 timestamp, bytes memory data) = getFileFromInbox(i);\r\n        return (i, name, sender, transferTimestamp, timestamp, data);\r\n        \r\n    }\r\n    // returns name, sender, transferTimestamp, timestamp, dataHash\r\n    function getFileFromInbox(uint256 i) public view returns (string memory, address, uint256, uint256, bytes memory) {\r\n        require(inbox[msg.sender].length > 0, \"Inbox not yet existing\");\r\n        require(i >= 0 && i < inbox[msg.sender][inbox[msg.sender].length - 1].length, \"Index out of range\");\r\n        FileTransfer memory ft = inbox[msg.sender][inbox[msg.sender].length - 1][i];\r\n        return (ft.name, ft.sender, ft.transferTimestamp, ft.timestamp, getFileData(ft.data));\r\n    }\r\n    \r\n    // Helpers\r\n    function containsNewline(string memory s) public pure returns (bool) {\r\n        bytes memory stringBytes = bytes(s);\r\n        for(uint256 i=0; i<stringBytes.length; i++){\r\n            if (stringBytes[i] == '\\n') {\r\n                return true;\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n    \r\n}","ABI":"[{\"inputs\":[],\"stateMutability\":\"payable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"}],\"name\":\"FileClosed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"}],\"name\":\"FileDeleted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"size\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"appended\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"dataHash\",\"type\":\"bytes32\"}],\"name\":\"FileSaved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"transferTimestamp\",\"type\":\"uint256\"}],\"name\":\"FileTransferAccepted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"transferTimestamp\",\"type\":\"uint256\"}],\"name\":\"FileTransfered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"InboxCleared\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"enabled\",\"type\":\"bool\"}],\"name\":\"InboxWhitelistStatusChange\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"enabled\",\"type\":\"bool\"}],\"name\":\"InboxWhitelistUserStatusChange\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"i\",\"type\":\"uint256\"}],\"name\":\"acceptLastFileTransfer\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"calculateLastFileTransferAcceptanceFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"calculateSaveFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"}],\"name\":\"calculateTransferSendingFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"clearInbox\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"}],\"name\":\"close\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"confirmOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"s\",\"type\":\"string\"}],\"name\":\"containsNewline\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"count\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"excludeDeleted\",\"type\":\"bool\"}],\"name\":\"count\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"}],\"name\":\"exists\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"}],\"name\":\"exists\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getAllNames\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"n\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"excludeDeleted\",\"type\":\"bool\"}],\"name\":\"getAllNames\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAllNames\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"i\",\"type\":\"uint256\"}],\"name\":\"getFileFromInbox\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLastFileFromInbox\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"i\",\"type\":\"uint256\"}],\"name\":\"getName\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"i\",\"type\":\"uint256\"}],\"name\":\"getName\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getNewestNames\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"n\",\"type\":\"uint256\"}],\"name\":\"getNewestNames\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"n\",\"type\":\"uint256\"}],\"name\":\"getNewestNames\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"}],\"name\":\"getSize\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"}],\"name\":\"getSize\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"}],\"name\":\"getTimestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"}],\"name\":\"getTimestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"}],\"name\":\"remove\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"}],\"name\":\"retrieve\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"}],\"name\":\"retrieve\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"save\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"},{\"internalType\":\"bool\",\"name\":\"append\",\"type\":\"bool\"}],\"name\":\"save\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"b\",\"type\":\"address\"}],\"name\":\"setBeneficiary\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"enabledFlag\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"allowedFlag\",\"type\":\"bool\"}],\"name\":\"setDeletionFlags\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"flag\",\"type\":\"bool\"}],\"name\":\"setEnabled\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"perFile\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"perByte\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"perDeletion\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"perClose\",\"type\":\"uint256\"}],\"name\":\"setFileOperationFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"minLen\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxLen\",\"type\":\"uint256\"}],\"name\":\"setFilenameLimits\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"flag\",\"type\":\"bool\"}],\"name\":\"setInboxWhitelist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"flag\",\"type\":\"bool\"}],\"name\":\"setInboxWhitelistEnabled\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"nNewest\",\"type\":\"uint256\"}],\"name\":\"setOperationParameters\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"flag\",\"type\":\"bool\"}],\"name\":\"setTransferEnabled\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"sendPerFile\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"sendPerByte\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"acceptPerFile\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"acceptPerByte\",\"type\":\"uint256\"}],\"name\":\"setTransferFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"transfer\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"ethFS","CompilerVersion":"v0.8.6+commit.11564f7e","OptimizationUsed":"1","Runs":"20000","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"ipfs://fcc5bd57b8b62fb3b4eb554ff12e5cfdaf55dec3bc518143041cf9b000c970b3"}]}