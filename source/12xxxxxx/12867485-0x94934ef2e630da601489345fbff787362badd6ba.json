{"status":"1","message":"OK","result":[{"SourceCode":"// SPDX-License-Identifier: UNLICENSED\r\n\r\npragma solidity 0.8.6;\r\n\r\ninterface IInterestRateModel {\r\n  function systemRate(ILendingPair _pair, address _token) external view returns(uint);\r\n  function supplyRatePerBlock(ILendingPair _pair, address _token) external view returns(uint);\r\n  function borrowRatePerBlock(ILendingPair _pair, address _token) external view returns(uint);\r\n}\r\n\r\ninterface IRewardDistribution {\r\n  function distributeReward(address _account, address _token) external;\r\n}\r\n\r\ninterface IController {\r\n  function interestRateModel() external view returns(IInterestRateModel);\r\n  function rewardDistribution() external view returns(IRewardDistribution);\r\n  function feeRecipient() external view returns(address);\r\n  function LIQ_MIN_HEALTH() external view returns(uint);\r\n  function minBorrowUSD() external view returns(uint);\r\n  function liqFeeSystem(address _token) external view returns(uint);\r\n  function liqFeeCaller(address _token) external view returns(uint);\r\n  function liqFeesTotal(address _token) external view returns(uint);\r\n  function colFactor(address _token) external view returns(uint);\r\n  function depositLimit(address _lendingPair, address _token) external view returns(uint);\r\n  function borrowLimit(address _lendingPair, address _token) external view returns(uint);\r\n  function originFee(address _token) external view returns(uint);\r\n  function depositsEnabled() external view returns(bool);\r\n  function borrowingEnabled() external view returns(bool);\r\n  function setFeeRecipient(address _feeRecipient) external;\r\n  function tokenPrice(address _token) external view returns(uint);\r\n  function tokenSupported(address _token) external view returns(bool);\r\n}\r\n\r\ninterface ILendingPair {\r\n  function checkAccountHealth(address _account) external view;\r\n  function accrueAccount(address _account) external;\r\n  function accrue() external;\r\n  function accountHealth(address _account) external view returns(uint);\r\n  function totalDebt(address _token) external view returns(uint);\r\n  function tokenA() external view returns(address);\r\n  function tokenB() external view returns(address);\r\n  function lpToken(address _token) external view returns(IERC20);\r\n  function debtOf(address _account, address _token) external view returns(uint);\r\n  function pendingDebtTotal(address _token) external view returns(uint);\r\n  function pendingSupplyTotal(address _token) external view returns(uint);\r\n  function deposit(address _token, uint _amount) external;\r\n  function withdraw(address _token, uint _amount) external;\r\n  function borrow(address _token, uint _amount) external;\r\n  function repay(address _token, uint _amount) external;\r\n  function withdrawBorrow(address _token, uint _amount) external;\r\n  function controller() external view returns(IController);\r\n\r\n  function borrowBalance(\r\n    address _account,\r\n    address _borrowedToken,\r\n    address _returnToken\r\n  ) external view returns(uint);\r\n\r\n  function convertTokenValues(\r\n    address _fromToken,\r\n    address _toToken,\r\n    uint    _inputAmount\r\n  ) external view returns(uint);\r\n}\r\n\r\ninterface IERC20 {\r\n  function totalSupply() external view returns (uint);\r\n  function balanceOf(address account) external view returns (uint);\r\n  function transfer(address recipient, uint256 amount) external returns (bool);\r\n  function allowance(address owner, address spender) external view returns (uint);\r\n  function symbol() external view returns (string memory);\r\n  function decimals() external view returns (uint);\r\n  function approve(address spender, uint amount) external returns (bool);\r\n  function mint(address account, uint amount) external;\r\n  function burn(address account, uint amount) external;\r\n  function transferFrom(address sender, address recipient, uint amount) external returns (bool);\r\n  event Transfer(address indexed from, address indexed to, uint value);\r\n  event Approval(address indexed owner, address indexed spender, uint value);\r\n}\r\n\r\nlibrary Math {\r\n\r\n  function max(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    return a >= b ? a : b;\r\n  }\r\n\r\n  function min(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    return a < b ? a : b;\r\n  }\r\n\r\n  function average(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // (a + b) / 2 can overflow, so we distribute.\r\n    return (a / 2) + (b / 2) + (((a % 2) + (b % 2)) / 2);\r\n  }\r\n\r\n  function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // (a + b - 1) / b can overflow on addition, so we distribute.\r\n    return a / b + (a % b == 0 ? 0 : 1);\r\n  }\r\n}\r\n\r\ncontract InterestRateModel {\r\n\r\n  // Per block\r\n  uint public constant MIN_RATE  = 0;\r\n  uint public constant LOW_RATE  = 8371385083713;   // 20%    / year = 20e18   / 365 / 86400 * 13.2 (block time)\r\n  uint public constant HIGH_RATE = 418569254185692; // 1,000% / year = 1000e18 / 365 / 86400 * 13.2 (block time)\r\n\r\n  uint public constant TARGET_UTILIZATION = 80e18; // 80%\r\n  uint public constant SYSTEM_RATE        = 50e18; // share of fees earned by the system\r\n\r\n  function supplyRatePerBlock(ILendingPair _pair, address _token) external view returns(uint) {\r\n    return borrowRatePerBlock(_pair, _token) * (100e18 - SYSTEM_RATE) / 100e18;\r\n  }\r\n\r\n  function borrowRatePerBlock(ILendingPair _pair, address _token) public view returns(uint) {\r\n    uint debt = _pair.totalDebt(_token);\r\n    uint supply = IERC20(_pair.lpToken(_token)).totalSupply();\r\n\r\n    if (supply == 0 || debt == 0) { return MIN_RATE; }\r\n\r\n    uint utilization = (debt * 100e18 / supply) * 100e18 / TARGET_UTILIZATION;\r\n\r\n    if (utilization < 100e18) {\r\n      uint rate = LOW_RATE * utilization / 100e18;\r\n      return Math.max(rate, MIN_RATE);\r\n    } else {\r\n      utilization = 100e18 * ( debt - (supply * TARGET_UTILIZATION / 100e18) ) / (supply * (100e18 - TARGET_UTILIZATION) / 100e18);\r\n      utilization = Math.min(utilization, 100e18);\r\n      return LOW_RATE + (HIGH_RATE - LOW_RATE) * utilization / 100e18;\r\n    }\r\n  }\r\n\r\n  function utilizationRate(ILendingPair _pair, address _token) external view returns(uint) {\r\n    uint debt = _pair.totalDebt(_token);\r\n    uint supply = IERC20(_pair.lpToken(_token)).totalSupply();\r\n\r\n    if (supply == 0 || debt == 0) { return 0; }\r\n\r\n    return Math.min(debt * 100e18 / supply, 100e18);\r\n  }\r\n\r\n  // InterestRateModel can later be replaced for more granular fees per _lendingPair\r\n  function systemRate(ILendingPair _pair, address _token) external pure returns(uint) {\r\n    return SYSTEM_RATE;\r\n  }\r\n}","ABI":"[{\"inputs\":[],\"name\":\"HIGH_RATE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"LOW_RATE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MIN_RATE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"SYSTEM_RATE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"TARGET_UTILIZATION\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ILendingPair\",\"name\":\"_pair\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"borrowRatePerBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ILendingPair\",\"name\":\"_pair\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"supplyRatePerBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ILendingPair\",\"name\":\"_pair\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"systemRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ILendingPair\",\"name\":\"_pair\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"utilizationRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"InterestRateModel","CompilerVersion":"v0.8.6+commit.11564f7e","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"ipfs://86fe08a96b9848b0dd3f05e1dd232236ec988bc809e65bda749800dc4889bfbb"}]}