{"status":"1","message":"OK","result":[{"SourceCode":"// SPDX-License-Identifier: UNLICENSED\r\npragma solidity ^0.6.12;\r\n\r\n/**\r\n * @dev Contract module that helps prevent reentrant calls to a function.\r\n *\r\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\r\n * available, which can be applied to functions to make sure there are no nested\r\n * (reentrant) calls to them.\r\n *\r\n * Note that because there is a single `nonReentrant` guard, functions marked as\r\n * `nonReentrant` may not call one another. This can be worked around by making\r\n * those functions `private`, and then adding `external` `nonReentrant` entry\r\n * points to them.\r\n *\r\n * TIP: If you would like to learn more about reentrancy and alternative ways\r\n * to protect against it, check out our blog post\r\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\r\n */\r\nabstract contract ReentrancyGuard {\r\n    // Booleans are more expensive than uint256 or any type that takes up a full\r\n    // word because each write operation emits an extra SLOAD to first read the\r\n    // slot's contents, replace the bits taken up by the boolean, and then write\r\n    // back. This is the compiler's defense against contract upgrades and\r\n    // pointer aliasing, and it cannot be disabled.\r\n\r\n    // The values being non-zero value makes deployment a bit more expensive,\r\n    // but in exchange the refund on every call to nonReentrant will be lower in\r\n    // amount. Since refunds are capped to a percentage of the total\r\n    // transaction's gas, it is best to keep them low in cases like this one, to\r\n    // increase the likelihood of the full refund coming into effect.\r\n    uint256 private constant _NOT_ENTERED = 1;\r\n    uint256 private constant _ENTERED = 2;\r\n\r\n    uint256 private _status;\r\n\r\n    constructor () internal {\r\n        _status = _NOT_ENTERED;\r\n    }\r\n\r\n    /**\r\n     * @dev Prevents a contract from calling itself, directly or indirectly.\r\n     * Calling a `nonReentrant` function from another `nonReentrant`\r\n     * function is not supported. It is possible to prevent this from happening\r\n     * by making the `nonReentrant` function external, and make it call a\r\n     * `private` function that does the actual work.\r\n     */\r\n    modifier nonReentrant() {\r\n        // On the first call to nonReentrant, _notEntered will be true\r\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\r\n\r\n        // Any calls to nonReentrant after this point will fail\r\n        _status = _ENTERED;\r\n\r\n        _;\r\n\r\n        // By storing the original value once again, a refund is triggered (see\r\n        // https://eips.ethereum.org/EIPS/eip-2200)\r\n        _status = _NOT_ENTERED;\r\n    }\r\n}\r\n/*\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with GSN meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address payable) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes memory) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\ninterface IMultiSig { \r\n    function isSigner(address _recepient) external returns(bool);\r\n}\r\n\r\ncontract MultiSigWallet is Context, ReentrancyGuard, IMultiSig {\r\n\r\n    event SignerChanged(address indexed previousSigner, address indexed newSigner);\r\n    event Deposit(address indexed signer, uint256 value);\r\n    event Withdraw(address indexed recepient, uint256 value);\r\n\r\n    event TxSubmitted(address indexed signer, uint256 indexed transactionId);\r\n\r\n    event TxConfirmed(address indexed signer, uint256 indexed transactionId);\r\n    event TxConfirmationRevoked(address indexed signer, uint256 indexed transactionId);\r\n    \r\n    event TxExecuted(uint256 indexed transactionId);\r\n    event TxExecutionFailed(uint256 indexed transactionId);\r\n    \r\n    \r\n    /*\r\n     *  Constants\r\n     */\r\n    uint256 constant MAX_SIGNERS = 15;\r\n    uint256 constant THRESHOLD_SIGNERS = 3;\r\n\r\n\r\n    /*\r\n     *  Storage\r\n     */\r\n    mapping (uint => Transaction) public transactions;\r\n    mapping (uint => mapping (address => bool)) public confirmations;\r\n    mapping (address => bool) public override isSigner;\r\n    address[] public signers;\r\n\r\n    uint public transactionCount;\r\n\r\n    struct Transaction {\r\n        string name;\r\n        address destination;\r\n        uint value;\r\n        bytes data;\r\n        bool executed;\r\n    }\r\n\r\n    /*\r\n     *  Modifiers\r\n     */\r\n    modifier onlyMultisig() {\r\n        require(_msgSender() == address(this), \"Not multisig\");\r\n        _;\r\n    }\r\n\r\n    modifier isNotSigner(address _account) {\r\n        require(_account != address(0), \"Zero address\");\r\n        require(!isSigner[_account], \"Already a signer\");\r\n        _;\r\n    }\r\n\r\n    modifier isAllowedSigner(address _account) {\r\n        require(isSigner[_account], \"Is not a signer\");\r\n        _;\r\n    }\r\n\r\n    modifier transactionExists(uint256 transactionId) {\r\n        require(transactions[transactionId].destination != address(0), \"Incorrect id\");\r\n        _;\r\n    }\r\n\r\n    modifier confirmed(uint256 transactionId, address signer) {\r\n        require(confirmations[transactionId][signer], \"Not confirmed\");\r\n        _;\r\n    }\r\n\r\n    modifier notConfirmed(uint256 transactionId, address signer) {\r\n        require(!confirmations[transactionId][signer], \"Already confirmed\");\r\n        _;\r\n    }\r\n\r\n    modifier notExecuted(uint256 transactionId) {\r\n        require(!transactions[transactionId].executed, \"Already executed\");\r\n        _;\r\n    }\r\n\r\n    /// @dev Fallback function allows to deposit ether.\r\n    receive() external payable\r\n    {\r\n        if (msg.value > 0)\r\n            emit Deposit(msg.sender, msg.value);\r\n    }\r\n\r\n    /*\r\n     * Public functions\r\n     */\r\n    /// @dev Contract constructor sets initial signers.\r\n    /// @param _signers List of initial signers.\r\n    constructor(address[] memory _signers) public\r\n    {\r\n        require(_signers.length == MAX_SIGNERS, \"Incorrect signers number\");\r\n        signers = new address[](MAX_SIGNERS);\r\n        for (uint256 i = 0; i < MAX_SIGNERS; i++) {\r\n            require(_signers[i] != address(0), \"Zero address\");\r\n            require(!isSigner[_signers[i]], \"Signer already registered\");\r\n            isSigner[_signers[i]] = true;\r\n            signers[i] = _signers[i];\r\n        }\r\n\r\n        transactionCount = 0;\r\n    }\r\n\r\n    /// @dev Allows to return a deposited ehter from the wallet.\r\n    /// @param _recepient Address of the signer to receive the ether.\r\n    /// @param _amount Amount of ether to be withdrawn.\r\n    function returnDeposit(address payable _recepient, uint256 _amount) external onlyMultisig\r\n        isAllowedSigner(_recepient)\r\n    {\r\n        require(_amount <= address(this).balance, \"Incorrect amount\");\r\n\r\n        emit Withdraw(_recepient, _amount);\r\n        _recepient.transfer(_amount);\r\n    }\r\n\r\n    /// @dev Allows to replace a signer with a new one. Transaction has to be sent by wallet.\r\n    /// @param _previousSigner Address of the signer to be replaced.\r\n    /// @param _newSigner Address of a new signer.\r\n    function replaceSigner(address _previousSigner, address _newSigner) external onlyMultisig\r\n        isAllowedSigner(_previousSigner)\r\n        isNotSigner(_newSigner)\r\n    {\r\n        for (uint i = 0; i < MAX_SIGNERS; i++) {\r\n            if (signers[i] == _previousSigner) {\r\n                signers[i] = _newSigner;\r\n                break;\r\n            }\r\n        }\r\n        isSigner[_previousSigner] = false;\r\n        isSigner[_newSigner] = true;\r\n\r\n        emit SignerChanged(_previousSigner, _newSigner);\r\n    }\r\n\r\n    /// @dev Submits a transaction and confirms it (allowed for signers only).\r\n    /// @param _destination Transaction target address.\r\n    /// @param _ethValue Transaction ether value.\r\n    /// @param _data Transaction data payload.\r\n    /// @return transactionId Returns transaction ID.\r\n    function submitTransaction(string memory _name, address _destination, uint256 _ethValue, bytes memory _data) external\r\n        isAllowedSigner(_msgSender())\r\n        returns (uint256 transactionId)\r\n    {\r\n        require(_destination != address(0), \"Zero address\");\r\n        transactionId = transactionCount;\r\n\r\n        transactions[transactionId] = Transaction({\r\n            name: _name,\r\n            destination: _destination,\r\n            value: _ethValue,\r\n            data: _data,\r\n            executed: false\r\n        });\r\n\r\n        transactionCount += 1;\r\n        emit TxSubmitted(_msgSender(), transactionId);\r\n\r\n        confirmTransaction(transactionId);\r\n    }\r\n\r\n    /// @dev Confirm a transaction (for signers only).\r\n    /// @param transactionId Transaction ID.\r\n    function confirmTransaction(uint256 transactionId) public\r\n        isAllowedSigner(_msgSender())\r\n        transactionExists(transactionId)\r\n        notConfirmed(transactionId, _msgSender())\r\n    {\r\n        confirmations[transactionId][_msgSender()] = true;\r\n\r\n        emit TxConfirmed(_msgSender(), transactionId);\r\n\r\n        /// Execute the transaction if it is the last confirmation\r\n        executeTransaction(transactionId);\r\n    }\r\n\r\n    /// @dev Allows a signer to revoke a confirmation for a transaction.\r\n    /// @param transactionId Transaction ID.\r\n    function revokeConfirmation(uint transactionId) external\r\n        isAllowedSigner(_msgSender())\r\n        transactionExists(transactionId)\r\n        confirmed(transactionId, _msgSender())\r\n        notExecuted(transactionId)\r\n    {\r\n        confirmations[transactionId][_msgSender()] = false;\r\n        emit TxConfirmationRevoked(_msgSender(), transactionId);\r\n    }\r\n\r\n    /// @dev Executes a confirmed transaction (signers only).\r\n    /// @param transactionId Transaction ID.\r\n    function executeTransaction(uint transactionId) internal\r\n        notExecuted(transactionId)\r\n    {\r\n        if (isConfirmed(transactionId)) {\r\n            if (external_call(transactionId)) {\r\n                transactions[transactionId].executed = true;\r\n                emit TxExecuted(transactionId);\r\n            }\r\n            else {\r\n                confirmations[transactionId][_msgSender()] = false;\r\n                emit TxExecutionFailed(transactionId);\r\n            }\r\n        }\r\n    }\r\n\r\n    function external_call(uint256 transactionId) internal returns (bool) {\r\n        bool result;\r\n        Transaction storage txn = transactions[transactionId];\r\n        address destination = txn.destination;\r\n        uint256 value = txn.value;\r\n        bytes memory data =  txn.data;\r\n        uint256 len = data.length;\r\n        assembly {\r\n            let x := mload(0x40)   // Memory for output\r\n            let d := add(data, 32) // First 32 bytes are the padded length of data, so exclude that\r\n            result := call(\r\n                sub(gas(), 34710),   // 34710 is the value that solidity is currently emitting\r\n                                   // It includes callGas (700) + callVeryLow (3) + callValueTransferGas (9000) +\r\n                                   // callNewAccountGas (25000, if destination address does not exist)\r\n                destination,\r\n                value,\r\n                d,\r\n                len,        // Size of the input (in bytes) - this is what fixes the padding problem\r\n                x,\r\n                0                  // Output is ignored, therefore the output size is zero\r\n            )\r\n        }\r\n        return result;\r\n    }\r\n\r\n    /// @dev Returns the confirmation status of a transaction.\r\n    /// @param transactionId Transaction ID.\r\n    /// @return Confirmation status.\r\n    function isConfirmed(uint256 transactionId) public view returns (bool)\r\n    {\r\n        if (transactions[transactionId].executed) {\r\n            return true;\r\n        }\r\n\r\n        uint256 count = 0;\r\n        for (uint256 i = 0; i < MAX_SIGNERS; i++) {\r\n            if (confirmations[transactionId][signers[i]])\r\n                count += 1;\r\n            if (count == THRESHOLD_SIGNERS)\r\n                return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    /// @dev Returns number of confirmations of a transaction.\r\n    /// @param transactionId Transaction ID.\r\n    /// @return count Number of confirmations.\r\n    function getConfirmationCount(uint256 transactionId) external view returns (uint256 count)\r\n    {\r\n        if (transactions[transactionId].executed) {\r\n            return THRESHOLD_SIGNERS;\r\n        }\r\n\r\n        for (uint256 i = 0; i < MAX_SIGNERS; i++)\r\n            if (confirmations[transactionId][signers[i]])\r\n                count += 1;\r\n    }\r\n\r\n    /// @dev Returns total number of pending transactions\r\n    /// @return count Total number of transactions after filters are applied.\r\n    function getPendingTransactionCount() external view returns (uint256 count)\r\n    {\r\n        for (uint256 i = 0; i < transactionCount; i++)\r\n            if (!transactions[i].executed)\r\n                count += 1;\r\n    }\r\n\r\n    /// @dev Returns list of signers.\r\n    /// @return signers List of owner addresses.\r\n    function getSigners() external view returns (address[] memory)\r\n    {\r\n        return signers;\r\n    }\r\n\r\n    /// @dev Returns array with signers addresses, which confirmed transaction.\r\n    /// @param transactionId Transaction ID.\r\n    /// @return _confirmations Returns array of signer addresses.\r\n    function getConfirmations(uint256 transactionId) external view\r\n        returns (address[] memory _confirmations)\r\n    {\r\n        address[] memory confirmationsTemp = new address[](MAX_SIGNERS);\r\n        uint256 count = 0;\r\n        uint i;\r\n        for (i = 0; i < MAX_SIGNERS; i++)\r\n            if (confirmations[transactionId][signers[i]]) {\r\n                confirmationsTemp[count] = signers[i];\r\n                count += 1;\r\n            }\r\n        _confirmations = new address[](count);\r\n        for (i = 0; i < count; i++)\r\n            _confirmations[i] = confirmationsTemp[i];\r\n    }\r\n\r\n    /// @dev Returns list of pending transaction IDs in defined range. (>= from and < to)\r\n    /// @param from Number of the first pending transaction.\r\n    /// @param to Number of the last pending transaction.\r\n    /// @return _transactionIds Returns array of transaction IDs.\r\n    function getPendingTransactionIds(uint256 from, uint256 to) external view\r\n        returns (uint[] memory _transactionIds)\r\n    {\r\n        require(to > from && to <= transactionCount, \"Incorrect indeces\");\r\n        uint[] memory transactionIdsTemp = new uint[](transactionCount);\r\n        uint count = 0;\r\n        uint penNumCount = 0;\r\n        uint i;\r\n        for (i = 0; i < transactionCount; i++)\r\n        {\r\n            if ( !transactions[i].executed)\r\n            {\r\n                if (penNumCount < from)\r\n                {\r\n                    penNumCount += 1;\r\n                    continue;\r\n                }\r\n                if (penNumCount < to)\r\n                {\r\n                    transactionIdsTemp[count] = i;\r\n                    count += 1;\r\n                }\r\n                else\r\n                    break;\r\n            }\r\n        }\r\n\r\n        _transactionIds = new uint[](to - from);\r\n        for (i = from; i < to; i++)\r\n            _transactionIds[i - from] = transactionIdsTemp[i];\r\n    }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_signers\",\"type\":\"address[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"signer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousSigner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newSigner\",\"type\":\"address\"}],\"name\":\"SignerChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"signer\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"transactionId\",\"type\":\"uint256\"}],\"name\":\"TxConfirmationRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"signer\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"transactionId\",\"type\":\"uint256\"}],\"name\":\"TxConfirmed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"transactionId\",\"type\":\"uint256\"}],\"name\":\"TxExecuted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"transactionId\",\"type\":\"uint256\"}],\"name\":\"TxExecutionFailed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"signer\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"transactionId\",\"type\":\"uint256\"}],\"name\":\"TxSubmitted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"recepient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"transactionId\",\"type\":\"uint256\"}],\"name\":\"confirmTransaction\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"confirmations\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"transactionId\",\"type\":\"uint256\"}],\"name\":\"getConfirmationCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"count\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"transactionId\",\"type\":\"uint256\"}],\"name\":\"getConfirmations\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"_confirmations\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPendingTransactionCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"count\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"from\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"to\",\"type\":\"uint256\"}],\"name\":\"getPendingTransactionIds\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_transactionIds\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getSigners\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"transactionId\",\"type\":\"uint256\"}],\"name\":\"isConfirmed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isSigner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_previousSigner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_newSigner\",\"type\":\"address\"}],\"name\":\"replaceSigner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_recepient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"returnDeposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"transactionId\",\"type\":\"uint256\"}],\"name\":\"revokeConfirmation\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"signers\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"_destination\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_ethValue\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"submitTransaction\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"transactionId\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"transactionCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"transactions\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"destination\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"},{\"internalType\":\"bool\",\"name\":\"executed\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]","ContractName":"MultiSigWallet","CompilerVersion":"v0.6.12+commit.27d51765","OptimizationUsed":"1","Runs":"99999","ConstructorArguments":"0000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000000f000000000000000000000000129df9b2184e85cb59f1ec52fc9a39a07507819b00000000000000000000000031267c07896b26224481f75bd1ca5d1383c7274700000000000000000000000049bbff2d74b551d190c763c68867cb3f730ff7c4000000000000000000000000efa3d3c1fb37b2fe01db499c3c83294242336f8a000000000000000000000000a4d488fdfd9443c27d0fd42e09ef9021d9975d810000000000000000000000003a5d2248c6966be9db1f5798c54c6e4f51e4c3c10000000000000000000000009ae05b435c8a12ac5bf6515ebd6de341649e9b5c000000000000000000000000448fc37254dee6288643f394a547caaf2fa2aa05000000000000000000000000c6ae4d74c55af8a37409964fcef67defeaf2a75500000000000000000000000082e4582021f99f2141bc10cacdd71059e978e505000000000000000000000000112d13268c6fe4e89eb95ec0574ccb403182edd0000000000000000000000000778bb9edf93596c4db65f2d99e6bcacd85020e14000000000000000000000000490c2622a058d9973e872d0f884d83c15ab4f02a000000000000000000000000f8dc13540205404384e71588b372bc271e9f942200000000000000000000000075ea93a1889a7909fe10e68f7266d532ffe2e473","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"ipfs://1fb1e28e2951d6b714faaf59066e99dca7bde63fc3986a8ea9490d7f56edebec"}]}