{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.6.11;\r\npragma experimental ABIEncoderV2;\r\n\r\ninterface UniswapLens {\r\n    function quoteExactInputSingle(\r\n        address tokenIn,\r\n        address tokenOut,\r\n        uint24 fee,\r\n        uint256 amountIn,\r\n        uint160 sqrtPriceLimitX96\r\n    ) external returns (uint256 amountOut);\r\n}\r\n\r\ninterface UniswapRouter {\r\n    struct ExactInputSingleParams {\r\n        address tokenIn;\r\n        address tokenOut;\r\n        uint24  fee;\r\n        address recipient;\r\n        uint256 deadline;\r\n        uint256 amountIn;\r\n        uint256 amountOutMinimum;\r\n        uint160 sqrtPriceLimitX96;\r\n    }\r\n\r\n    function exactInputSingle(\r\n        ExactInputSingleParams calldata params\r\n    ) external returns (uint256 amountOut);\r\n}\r\n\r\ninterface UniswapReserve {\r\n    function swap(\r\n        address recipient,\r\n        bool zeroForOne,\r\n        int256 amountSpecified,\r\n        uint160 sqrtPriceLimitX96,\r\n        bytes calldata data\r\n    ) external returns (int256 amount0, int256 amount1);\r\n}\r\n\r\ninterface ERC20Like {\r\n    function approve(address spender, uint value) external returns(bool);\r\n    function transfer(address to, uint value) external returns(bool);\r\n    function balanceOf(address a) external view returns(uint);\r\n}\r\n\r\ninterface WethLike is ERC20Like {\r\n    function deposit() external payable;\r\n}\r\n\r\ninterface CurveLike {\r\n    function exchange_underlying(int128 i, int128 j, uint256 dx, uint256 min_dy) external returns(uint);\r\n}\r\n\r\ninterface BAMMLike {\r\n    function swap(uint lusdAmount, uint minEthReturn, address payable dest) external returns(uint);\r\n}\r\n\r\ncontract Arb {\r\n    address constant USDC = 0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48;\r\n    address constant LUSD = 0x5f98805A4E8be255a32880FDeC7F6728C6568bA0;    \r\n    address constant WETH = 0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2;\r\n\r\n    UniswapLens constant LENS = UniswapLens(0xb27308f9F90D607463bb33eA1BeBb41C27CE5AB6);\r\n    UniswapRouter constant ROUTER = UniswapRouter(0xE592427A0AEce92De3Edee1F18E0157C05861564);\r\n    UniswapReserve constant USDCETH = UniswapReserve(0x8ad599c3A0ff1De082011EFDDc58f1908eb6e6D8);\r\n    uint160 constant MAX_SQRT_RATIO = 1461446703485210103287273052203988822378723970342;\r\n    CurveLike constant CURV = CurveLike(0xEd279fDD11cA84bEef15AF5D39BB4d4bEE23F0cA);\r\n\r\n    constructor() public {\r\n        ERC20Like(USDC).approve(address(CURV), uint(-1));\r\n    }\r\n\r\n    function approve(address bamm) external {\r\n        ERC20Like(LUSD).approve(address(bamm), uint(-1));\r\n    }\r\n\r\n    function getPrice(uint wethQty) external returns(uint) {\r\n        return LENS.quoteExactInputSingle(WETH, USDC, 3000, wethQty, 0);\r\n    }\r\n\r\n    function swap(uint ethQty, address bamm) external payable returns(uint) {\r\n        bytes memory data = abi.encode(bamm);\r\n        USDCETH.swap(address(this), false, int256(ethQty), MAX_SQRT_RATIO - 1, data);\r\n\r\n        uint retVal = address(this).balance;\r\n        msg.sender.transfer(retVal);\r\n\r\n        return retVal;\r\n     }\r\n\r\n    function uniswapV3SwapCallback(\r\n        int256 amount0Delta,\r\n        int256 amount1Delta,\r\n        bytes calldata data\r\n    ) external {\r\n        require(msg.sender == address(USDCETH), \"uniswapV3SwapCallback: invalid sender\");\r\n        // swap USDC to LUSD\r\n        uint USDCAmount = uint(-1 * amount0Delta);\r\n        uint LUSDReturn = CURV.exchange_underlying(2, 0, USDCAmount, 1);\r\n\r\n        address bamm = abi.decode(data, (address));\r\n        BAMMLike(bamm).swap(LUSDReturn, 1, address(this));\r\n\r\n        if(amount1Delta > 0) {\r\n            WethLike(WETH).deposit{value: uint(amount1Delta)}();\r\n            if(amount1Delta > 0) WethLike(WETH).transfer(msg.sender, uint(amount1Delta));            \r\n        }\r\n    }\r\n\r\n    receive() external payable {}\r\n}","ABI":"[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"bamm\",\"type\":\"address\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"wethQty\",\"type\":\"uint256\"}],\"name\":\"getPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"ethQty\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"bamm\",\"type\":\"address\"}],\"name\":\"swap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"int256\",\"name\":\"amount0Delta\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"amount1Delta\",\"type\":\"int256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"uniswapV3SwapCallback\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]","ContractName":"Arb","CompilerVersion":"v0.6.11+commit.5ef660b1","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"BSD-3-Clause","Proxy":"0","Implementation":"","SwarmSource":"ipfs://9c332a97bf22ccf8cf67eb1f3b6bff0c28f1accba171f1e03a5a88f9ed30c55c"}]}