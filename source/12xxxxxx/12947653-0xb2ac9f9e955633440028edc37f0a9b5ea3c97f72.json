{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/FirstDibsMarketSettings.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: Unlicensed\\npragma solidity 0.6.12;\\n\\nimport '@openzeppelin/contracts/access/Ownable.sol';\\nimport './IFirstDibsMarketSettings.sol';\\n\\ncontract FirstDibsMarketSettings is Ownable, IFirstDibsMarketSettings {\\n    // default buyer's premium (price paid by buyer above winning bid)\\n    uint32 public override globalBuyerPremium = 0;\\n\\n    // default commission for auction admin (1stDibs)\\n    uint32 public override globalMarketCommission = 5;\\n\\n    // default royalties to creators\\n    uint32 public override globalCreatorRoyaltyRate = 5;\\n\\n    // 10% min bid increment\\n    uint32 public override globalMinimumBidIncrement = 10;\\n\\n    // default global auction time buffer (if bid is made in last 15 min,\\n    // extend auction another 15 min)\\n    uint32 public override globalTimeBuffer = 15 * 60;\\n\\n    // default global auction duration (24 hours)\\n    uint32 public override globalAuctionDuration = 24 * 60 * 60;\\n\\n    // address of the auction admin (1stDibs)\\n    address public override commissionAddress;\\n\\n    constructor(address _commissionAddress) public {\\n        require(\\n            _commissionAddress != address(0),\\n            'Cannot have null address for _commissionAddress'\\n        );\\n\\n        commissionAddress = _commissionAddress; // receiver address for auction admin (globalMarketplaceCommission gets sent here)\\n    }\\n\\n    modifier nonZero(uint256 _value) {\\n        require(_value > 0, 'Value must be greater than zero');\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier used to ensure passed value is <= 100. Handy to validate percent values.\\n     * @param _value uint256 to validate\\n     */\\n    modifier lte100(uint256 _value) {\\n        require(_value <= 100, 'Value must be <= 100');\\n        _;\\n    }\\n\\n    /**\\n     * @dev setter for global auction admin\\n     * @param _commissionAddress address of the global auction admin (1stDibs wallet)\\n     */\\n    function setCommissionAddress(address _commissionAddress) external onlyOwner {\\n        require(\\n            _commissionAddress != address(0),\\n            'Cannot have null address for _commissionAddress'\\n        );\\n        commissionAddress = _commissionAddress;\\n    }\\n\\n    /**\\n     * @dev setter for global time buffer\\n     * @param _timeBuffer new time buffer in seconds\\n     */\\n    function setGlobalTimeBuffer(uint32 _timeBuffer) external onlyOwner nonZero(_timeBuffer) {\\n        globalTimeBuffer = _timeBuffer;\\n    }\\n\\n    /**\\n     * @dev setter for global auction duration\\n     * @param _auctionDuration new auction duration in seconds\\n     */\\n    function setGlobalAuctionDuration(uint32 _auctionDuration)\\n        external\\n        onlyOwner\\n        nonZero(_auctionDuration)\\n    {\\n        globalAuctionDuration = _auctionDuration;\\n    }\\n\\n    /**\\n     * @dev setter for global buyer premium\\n     * @param _buyerPremium new buyer premium percent\\n     */\\n    function setGlobalBuyerPremium(uint32 _buyerPremium) external onlyOwner {\\n        globalBuyerPremium = _buyerPremium;\\n    }\\n\\n    /**\\n     * @dev setter for global market commission rate\\n     * @param _marketCommission new market commission rate\\n     */\\n    function setGlobalMarketCommission(uint32 _marketCommission)\\n        external\\n        onlyOwner\\n        lte100(_marketCommission)\\n    {\\n        require(_marketCommission >= 3, 'Market commission cannot be lower than 3%');\\n        globalMarketCommission = _marketCommission;\\n    }\\n\\n    /**5\\n     * @dev setter for global creator royalty rate\\n     * @param _royaltyRate new creator royalty rate\\n     */\\n    function setGlobalCreatorRoyaltyRate(uint32 _royaltyRate)\\n        external\\n        onlyOwner\\n        lte100(_royaltyRate)\\n    {\\n        require(_royaltyRate >= 2, 'Creator royalty cannot be lower than 2%');\\n        globalCreatorRoyaltyRate = _royaltyRate;\\n    }\\n\\n    /**\\n     * @dev setter for global minimum bid increment\\n     * @param _bidIncrement new minimum bid increment\\n     */\\n    function setGlobalMinimumBidIncrement(uint32 _bidIncrement)\\n        external\\n        onlyOwner\\n        nonZero(_bidIncrement)\\n    {\\n        globalMinimumBidIncrement = _bidIncrement;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor () internal {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/IFirstDibsMarketSettings.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: Unlicensed\\npragma solidity 0.6.12;\\n\\ninterface IFirstDibsMarketSettings {\\n    function globalBuyerPremium() external view returns (uint32);\\n\\n    function globalMarketCommission() external view returns (uint32);\\n\\n    function globalCreatorRoyaltyRate() external view returns (uint32);\\n\\n    function globalMinimumBidIncrement() external view returns (uint32);\\n\\n    function globalTimeBuffer() external view returns (uint32);\\n\\n    function globalAuctionDuration() external view returns (uint32);\\n\\n    function commissionAddress() external view returns (address);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 1348\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_commissionAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"commissionAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"globalAuctionDuration\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"globalBuyerPremium\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"globalCreatorRoyaltyRate\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"globalMarketCommission\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"globalMinimumBidIncrement\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"globalTimeBuffer\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_commissionAddress\",\"type\":\"address\"}],\"name\":\"setCommissionAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"_auctionDuration\",\"type\":\"uint32\"}],\"name\":\"setGlobalAuctionDuration\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"_buyerPremium\",\"type\":\"uint32\"}],\"name\":\"setGlobalBuyerPremium\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"_royaltyRate\",\"type\":\"uint32\"}],\"name\":\"setGlobalCreatorRoyaltyRate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"_marketCommission\",\"type\":\"uint32\"}],\"name\":\"setGlobalMarketCommission\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"_bidIncrement\",\"type\":\"uint32\"}],\"name\":\"setGlobalMinimumBidIncrement\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"_timeBuffer\",\"type\":\"uint32\"}],\"name\":\"setGlobalTimeBuffer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"FirstDibsMarketSettings","CompilerVersion":"v0.6.12+commit.27d51765","OptimizationUsed":"1","Runs":"1348","ConstructorArguments":"0000000000000000000000009a5a2713d334e82cc1edd25f3cff42513c175769","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}