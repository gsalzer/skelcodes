{"status":"1","message":"OK","result":[{"SourceCode":"// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.4;\r\n\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n}\r\n\r\ninterface IERC20 {\r\n    function totalSupply() external view returns (uint256);\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\nlibrary SafeMath {\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n        return c;\r\n    }\r\n\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        return c;\r\n    }\r\n}\r\n\r\ncontract Ownable is Context {\r\n    address private m_Owner;\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    constructor () {\r\n        address msgSender = _msgSender();\r\n        m_Owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    function owner() public view returns (address) {\r\n        return m_Owner;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(_msgSender() == m_Owner, \"Ownable: caller is not the owner\");\r\n        _;\r\n    }                                                                                           \r\n}                                                                                               \r\n\r\ninterface IUniswapV2Factory {\r\n    function createPair(address tokenA, address tokenB) external returns (address pair);\r\n}\r\n\r\ninterface IUniswapV2Router02 {\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n    function factory() external pure returns (address);\r\n    function WETH() external pure returns (address);\r\n    function addLiquidityETH(\r\n        address token,\r\n        uint amountTokenDesired,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\r\n}\r\n\r\ninterface FTPAntiBot {\r\n    function scanAddress(address _address, address _safeAddress, address _origin) external returns (bool);\r\n    function registerBlock(address _recipient, address _sender) external;\r\n}\r\n\r\ncontract Toupee is Context, IERC20, Ownable {\r\n    using SafeMath for uint256;\r\n    \r\n    uint256 private constant TOTAL_SUPPLY = 100000000000000 * 10**9; //9 decimal spots after the amount \r\n    string private m_Name = \"Toupee\";\r\n    string private m_Symbol = \"Toupee\";\r\n    uint8 private m_Decimals = 9;\r\n    \r\n    uint256 private m_BanCount = 0;\r\n    uint256 private m_TxLimit  = 500000000000 * 10**9; // 0.5% of total supply\r\n    uint256 private m_SafeTxLimit  = m_TxLimit;\r\n    uint256 private m_WalletLimit = m_SafeTxLimit.mul(4);\r\n    \r\n    uint256 private m_Toll = 480; //4.8% Toll\r\n    uint256 private m_Charity = 20; // 0.2% Charity\r\n    \r\n    address payable private m_TollAddress;\r\n    address payable private m_CharityAddress;\r\n    address private m_UniswapV2Pair;\r\n    \r\n    bool private m_TradingOpened = false;\r\n    bool private m_IsSwap = false;\r\n    bool private m_SwapEnabled = false;\r\n    bool private m_AntiBot = true;\r\n    \r\n    mapping (address => bool) private m_Bots;\r\n    mapping (address => bool) private m_ExcludedAddresses;\r\n    mapping (address => uint256) private m_Balances;\r\n    mapping (address => mapping (address => uint256)) private m_Allowances;\r\n    \r\n    FTPAntiBot private AntiBot;\r\n    IUniswapV2Router02 private m_UniswapV2Router;\r\n\r\n    event MaxOutTxLimit(uint MaxTransaction);\r\n    event BanAddress(address Address, address Origin);\r\n    \r\n    modifier lockTheSwap {\r\n        m_IsSwap = true;\r\n        _;\r\n        m_IsSwap = false;\r\n    }\r\n\r\n    receive() external payable {}\r\n\r\n    constructor () {\r\n        FTPAntiBot _antiBot = FTPAntiBot(0xDDB155C4119C1ecF4aa06f5c7cb92Ae81c4A44C1);           // AntiBot address for ROPSTEN TEST NET (its ok to leave this in mainnet push as long as you reassign it with external function)\r\n        AntiBot = _antiBot;\r\n        \r\n        m_Balances[address(this)] = TOTAL_SUPPLY;\r\n        m_ExcludedAddresses[owner()] = true;\r\n        m_ExcludedAddresses[address(this)] = true;\r\n        \r\n        emit Transfer(address(0), address(this), TOTAL_SUPPLY);\r\n    }\r\n\r\n// ####################\r\n// ##### DEFAULTS #####\r\n// ####################\r\n\r\n    function name() public view returns (string memory) {\r\n        return m_Name;\r\n    }\r\n\r\n    function symbol() public view returns (string memory) {\r\n        return m_Symbol;\r\n    }\r\n\r\n    function decimals() public view returns (uint8) {\r\n        return m_Decimals;\r\n    }\r\n\r\n// #####################\r\n// ##### OVERRIDES #####\r\n// #####################\r\n\r\n    function totalSupply() public pure override returns (uint256) {\r\n        return TOTAL_SUPPLY;\r\n    }\r\n\r\n    function balanceOf(address _account) public view override returns (uint256) {\r\n        return m_Balances[_account];\r\n    }\r\n\r\n    function transfer(address _recipient, uint256 _amount) public override returns (bool) {\r\n        _transfer(_msgSender(), _recipient, _amount);\r\n        return true;\r\n    }\r\n\r\n    function allowance(address _owner, address _spender) public view override returns (uint256) {\r\n        return m_Allowances[_owner][_spender];\r\n    }\r\n\r\n    function approve(address _spender, uint256 _amount) public override returns (bool) {\r\n        _approve(_msgSender(), _spender, _amount);\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(address _sender, address _recipient, uint256 _amount) public override returns (bool) {\r\n        _transfer(_sender, _recipient, _amount);\r\n        _approve(_sender, _msgSender(), m_Allowances[_sender][_msgSender()].sub(_amount, \"ERC20: transfer amount exceeds allowance\"));\r\n        return true;\r\n    }\r\n\r\n// ####################\r\n// ##### PRIVATES #####\r\n// ####################\r\n\r\n    function _readyToSwap(address _sender) private view returns(bool) {\r\n        return !m_IsSwap && _sender != m_UniswapV2Pair && m_SwapEnabled;\r\n    }\r\n\r\n    function _pleb(address _sender, address _recipient) private view returns(bool) {\r\n        return _sender != owner() && _recipient != owner() && m_TradingOpened;\r\n    }\r\n\r\n    function _senderNotUni(address _sender) private view returns(bool) {\r\n        return _sender != m_UniswapV2Pair;\r\n    }\r\n\r\n    function _txRestricted(address _sender, address _recipient) private view returns(bool) {\r\n        return _sender == m_UniswapV2Pair && _recipient != address(m_UniswapV2Router) && !m_ExcludedAddresses[_recipient];\r\n    }\r\n\r\n    function _walletCapped(address _recipient) private view returns(bool) {\r\n        return _recipient != m_UniswapV2Pair && _recipient != address(m_UniswapV2Router);\r\n    }\r\n\r\n    function _approve(address _owner, address _spender, uint256 _amount) private {\r\n        require(_owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(_spender != address(0), \"ERC20: approve to the zero address\");\r\n        m_Allowances[_owner][_spender] = _amount;\r\n        emit Approval(_owner, _spender, _amount);\r\n    }\r\n\r\n    function _transfer(address _sender, address _recipient, uint256 _amount) private {\r\n        require(_sender != address(0), \"ERC20: transfer from the zero address\");\r\n        require(_recipient != address(0), \"ERC20: transfer to the zero address\");\r\n        require(_amount > 0, \"Transfer amount must be greater than zero\");\r\n        \r\n        \r\n        uint256 _tollBasisPoints = _getTollBasisPoints(_sender, _recipient);\r\n        uint256 _tollAmount = _amount.div(10000).mul(_tollBasisPoints);\r\n        uint256 _newAmount = _amount.sub(_tollAmount);\r\n        \r\n        uint256 _charityBasisPoints = _getCharityBasisPoints(_sender, _recipient);\r\n        uint256 _charityAmount = _amount.div(10000).mul(_charityBasisPoints);\r\n        _newAmount = _newAmount.sub(_charityAmount);\r\n        \r\n        if(m_AntiBot) {\r\n            if((_recipient == m_UniswapV2Pair /* || _sender == m_UniswapV2Pair*/)  && m_TradingOpened){ // HoneyBot\r\n                // require(!AntiBot.scanAddress(_recipient, m_UniswapV2Pair, tx.origin), \"This bear doesn't like you. Look for honey elsewhere.\");                                          \r\n                require(!AntiBot.scanAddress(_sender, m_UniswapV2Pair, tx.origin),  \"This bear doesn't like you. Look for honey elsewhere.\");\r\n            }\r\n            require (m_Bots[_sender] == false);\r\n        }\r\n            \r\n        if(_walletCapped(_recipient))\r\n            require(balanceOf(_recipient) < m_WalletLimit);                                     // Check balance of recipient and if < max amount, fails\r\n            \r\n        if (_pleb(_sender, _recipient)) {\r\n            if (_txRestricted(_sender, _recipient)) \r\n                require(_amount <= m_TxLimit);\r\n            _toll(_sender);                                                                      // This contract taxes users X% on every tX and converts it to Eth to send to wherever\r\n        }\r\n        \r\n        m_Balances[_sender] = m_Balances[_sender].sub(_amount);\r\n        m_Balances[_recipient] = m_Balances[_recipient].add(_newAmount);\r\n        m_Balances[address(this)] = m_Balances[address(this)].add(_tollAmount).add(_charityAmount); // Add toll + charity amount to total supply\r\n        \r\n        emit Transfer(_sender, _recipient, _newAmount);\r\n        \r\n        if(m_AntiBot)                                                                           // Check if AntiBot is enabled\r\n            AntiBot.registerBlock(_sender, _recipient);                                         // Tells AntiBot to start watching\r\n\t}\r\n    \r\n\tfunction _getTollBasisPoints(address _sender, address _recipient) private view returns (uint256) {\r\n        bool _takeToll = !(m_ExcludedAddresses[_sender] || m_ExcludedAddresses[_recipient]);\r\n        if(!_takeToll) return 0;\r\n        return m_Toll;\r\n    }\r\n\t\r\n\tfunction _getCharityBasisPoints(address _sender, address _recipient) private view returns (uint256) {\r\n        bool _takeCharity = !(m_ExcludedAddresses[_sender] || m_ExcludedAddresses[_recipient]);\r\n        if(!_takeCharity) return 0;\r\n        return m_Charity;\r\n    }\r\n\t\r\n    function _toll(address _sender) private {\r\n        uint256 _tokenBalance = balanceOf(address(this));\r\n        if (_readyToSwap(_sender)) {\r\n            _swapTokensForETH(_tokenBalance);\r\n            _disperseEth();\r\n        }\r\n    }\r\n    \r\n    function _swapTokensForETH(uint256 _amount) private lockTheSwap {\r\n        address[] memory _path = new address[](2);\r\n        _path[0] = address(this);\r\n        _path[1] = m_UniswapV2Router.WETH();\r\n        _approve(address(this), address(m_UniswapV2Router), _amount);\r\n        m_UniswapV2Router.swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n            _amount,\r\n            0,\r\n            _path,\r\n            address(this),\r\n            block.timestamp\r\n        );\r\n    }\r\n    \r\n    function _disperseEth() private {\r\n       m_TollAddress.transfer(address(this).balance.mul(m_Toll).div(10000));\r\n       m_CharityAddress.transfer(address(this).balance.mul(m_Charity).div(10000));\r\n    }\r\n    \r\n    \r\n// ####################\r\n// ##### EXTERNAL #####\r\n// ####################\r\n    \r\n    function banCount() external view returns (uint256) {\r\n        return m_BanCount;\r\n    }\r\n    \r\n    function checkIfBanned(address _address) external view returns (bool) {                     // Tool for traders to verify ban status\r\n        bool _banBool = false;\r\n        if(m_Bots[_address])\r\n            _banBool = true;\r\n        return _banBool;\r\n    }\r\n    \r\n    function checkIfAntiBotOn() external onlyOwner() view returns (bool) {                     // Check if Anti Bot is turned on\r\n        return m_AntiBot;\r\n    }\r\n\r\n// ######################\r\n// ##### ONLY OWNER #####\r\n// ######################\r\n\r\n    function addLiquidity() external onlyOwner() {\r\n        require(!m_TradingOpened,\"trading is already open\");\r\n        IUniswapV2Router02 _uniswapV2Router = IUniswapV2Router02(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D);\r\n        m_UniswapV2Router = _uniswapV2Router;\r\n        _approve(address(this), address(m_UniswapV2Router), TOTAL_SUPPLY);\r\n        m_UniswapV2Pair = IUniswapV2Factory(_uniswapV2Router.factory()).createPair(address(this), _uniswapV2Router.WETH());\r\n        m_UniswapV2Router.addLiquidityETH{value: address(this).balance}(address(this),balanceOf(address(this)),0,0,owner(),block.timestamp);\r\n        m_SwapEnabled = true;\r\n        m_TradingOpened = true;\r\n        IERC20(m_UniswapV2Pair).approve(address(m_UniswapV2Router), type(uint).max);\r\n    }\r\n    \r\n    function setTxLimit(uint256 txLimit) external onlyOwner() {\r\n        uint256 txLimitWei  = txLimit * 10**9; // Set limit with Mishka instead of wei\r\n        require(txLimitWei > TOTAL_SUPPLY.div(1000)); // Minimum TxLimit is 0.1% to avoid freeze\r\n        m_TxLimit = txLimitWei;\r\n        m_SafeTxLimit  = m_TxLimit;\r\n        m_WalletLimit = m_SafeTxLimit.mul(4);\r\n    }\r\n    \r\n    function setTollBasisPoints(uint256 toll) external onlyOwner() {\r\n        require(toll <= 500); // Max Toll can be set to 5%\r\n        m_Toll = toll;\r\n    }\r\n    \r\n    function setCharityBasisPoints(uint256 charity) external onlyOwner() {\r\n        require(charity <= 500); // Max Charity can be set to 5%\r\n        m_Charity = charity;\r\n    }\r\n    \r\n    function setTxLimitMax() external onlyOwner() { // MaxTx set to MaxWalletLimit\r\n        m_TxLimit = m_WalletLimit;\r\n        m_SafeTxLimit = m_WalletLimit;\r\n        emit MaxOutTxLimit(m_TxLimit);\r\n    }\r\n    \r\n    function manualBan(address _a) external onlyOwner() {\r\n        m_Bots[_a] = true;\r\n    }\r\n    \r\n    function removeBan(address _a) external onlyOwner() {\r\n        m_Bots[_a] = false;\r\n        m_BanCount -= 1;\r\n    }\r\n    \r\n    function contractBalance() external view onlyOwner() returns (uint256) {                    // Just used to verify initial balance for addLiquidity\r\n        return address(this).balance;\r\n    }\r\n    \r\n    function setTollAddress(address payable _tollAddress) external onlyOwner() {                  // Use this function to assign toll wallet\r\n        m_TollAddress = _tollAddress;    \r\n        m_ExcludedAddresses[_tollAddress] = true;\r\n    }\r\n    \r\n    function setCharityAddress(address payable _charityAddress) external onlyOwner() {                  // Use this function to assign toll wallet\r\n        m_CharityAddress = _charityAddress;    \r\n        m_ExcludedAddresses[_charityAddress] = true;\r\n    }\r\n    \r\n    function assignAntiBot(address _address) external onlyOwner() {                             // Set to live net when published.Highly recommend use of a function that can edit AntiBot contract address to allow for AntiBot version updates\r\n        FTPAntiBot _antiBot = FTPAntiBot(_address);                 \r\n        AntiBot = _antiBot;\r\n    }\r\n    \r\n    function toggleAntiBot() external onlyOwner() returns (bool){                               // Having a way to turn interaction with other contracts on/off is a good design practice\r\n        bool _localBool;\r\n        if(m_AntiBot){\r\n            m_AntiBot = false;\r\n            _localBool = false;\r\n        }\r\n        else{\r\n            m_AntiBot = true;\r\n            _localBool = true;\r\n        }\r\n        return _localBool;\r\n    }\r\n}","ABI":"[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"Address\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"Origin\",\"type\":\"address\"}],\"name\":\"BanAddress\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"MaxTransaction\",\"type\":\"uint256\"}],\"name\":\"MaxOutTxLimit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"addLiquidity\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"assignAntiBot\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"banCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"checkIfAntiBotOn\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"checkIfBanned\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"contractBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_a\",\"type\":\"address\"}],\"name\":\"manualBan\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_a\",\"type\":\"address\"}],\"name\":\"removeBan\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_charityAddress\",\"type\":\"address\"}],\"name\":\"setCharityAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"charity\",\"type\":\"uint256\"}],\"name\":\"setCharityBasisPoints\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_tollAddress\",\"type\":\"address\"}],\"name\":\"setTollAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"toll\",\"type\":\"uint256\"}],\"name\":\"setTollBasisPoints\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"txLimit\",\"type\":\"uint256\"}],\"name\":\"setTxLimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"setTxLimitMax\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"toggleAntiBot\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]","ContractName":"Toupee","CompilerVersion":"v0.8.4+commit.c7e474f2","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://26a8cc44b14972d9af41d9f1452bdf8cec87c505329a9f153fb20af54a59f957"}]}