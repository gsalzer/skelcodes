{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"/Users/koloale/orion-projects/orion-exchange-bsc-test/contracts/libs/LibValidator.sol\": {\r\n      \"content\": \"pragma solidity 0.7.4;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"@openzeppelin/contracts/cryptography/ECDSA.sol\\\";\\n\\nlibrary LibValidator {\\n\\n    using ECDSA for bytes32;\\n\\n    string public constant DOMAIN_NAME = \\\"Orion Exchange\\\";\\n    string public constant DOMAIN_VERSION = \\\"1\\\";\\n    uint256 public constant CHAIN_ID = 1;\\n    bytes32\\n        public constant DOMAIN_SALT = 0xf2d857f4a3edcb9b78b4d503bfe733db1e3f6cdc2b7971ee739626c97e86a557;\\n\\n    bytes32 public constant EIP712_DOMAIN_TYPEHASH = keccak256(\\n        abi.encodePacked(\\n            \\\"EIP712Domain(string name,string version,uint256 chainId,bytes32 salt)\\\"\\n        )\\n    );\\n    bytes32 public constant ORDER_TYPEHASH = keccak256(\\n        abi.encodePacked(\\n            \\\"Order(address senderAddress,address matcherAddress,address baseAsset,address quoteAsset,address matcherFeeAsset,uint64 amount,uint64 price,uint64 matcherFee,uint64 nonce,uint64 expiration,uint8 buySide)\\\"\\n        )\\n    );\\n\\n    bytes32 public constant DOMAIN_SEPARATOR = keccak256(\\n        abi.encode(\\n            EIP712_DOMAIN_TYPEHASH,\\n            keccak256(bytes(DOMAIN_NAME)),\\n            keccak256(bytes(DOMAIN_VERSION)),\\n            CHAIN_ID,\\n            DOMAIN_SALT\\n        )\\n    );\\n\\n    struct Order {\\n        address senderAddress;\\n        address matcherAddress;\\n        address baseAsset;\\n        address quoteAsset;\\n        address matcherFeeAsset;\\n        uint64 amount;\\n        uint64 price;\\n        uint64 matcherFee;\\n        uint64 nonce;\\n        uint64 expiration;\\n        uint8 buySide; // buy or sell\\n        bool isPersonalSign;\\n        bytes signature;\\n    }\\n\\n    function validateV3(Order memory order) public pure returns (bool) {\\n        bytes32 domainSeparator = DOMAIN_SEPARATOR;\\n\\n        bytes32 digest = keccak256(\\n            abi.encodePacked(\\n                \\\"\\\\x19\\\\x01\\\",\\n                domainSeparator,\\n                getTypeValueHash(order)\\n            )\\n        );\\n\\n        return digest.recover(order.signature) == order.senderAddress;\\n    }\\n\\n    function getTypeValueHash(Order memory _order)\\n        internal\\n        pure\\n        returns (bytes32)\\n    {\\n        bytes32 orderTypeHash = ORDER_TYPEHASH;\\n\\n        return\\n            keccak256(\\n                abi.encode(\\n                    orderTypeHash,\\n                    _order.senderAddress,\\n                    _order.matcherAddress,\\n                    _order.baseAsset,\\n                    _order.quoteAsset,\\n                    _order.matcherFeeAsset,\\n                    _order.amount,\\n                    _order.price,\\n                    _order.matcherFee,\\n                    _order.nonce,\\n                    _order.expiration,\\n                    _order.buySide\\n                )\\n            );\\n    }\\n\\n    function checkOrdersInfo(\\n        Order memory buyOrder,\\n        Order memory sellOrder,\\n        address sender,\\n        uint256 filledAmount,\\n        uint256 filledPrice,\\n        uint256 currentTime,\\n        address allowedMatcher\\n    ) public pure returns (bool success) {\\n        buyOrder.isPersonalSign ? require(validatePersonal(buyOrder), \\\"E2BP\\\") : require(validateV3(buyOrder), \\\"E2B\\\");\\n        sellOrder.isPersonalSign ? require(validatePersonal(sellOrder), \\\"E2SP\\\") : require(validateV3(sellOrder), \\\"E2S\\\");\\n\\n        // Same matcher address\\n        require(\\n            buyOrder.matcherAddress == sender &&\\n                sellOrder.matcherAddress == sender,\\n            \\\"E3M\\\"\\n        );\\n\\n        if(allowedMatcher != address(0)) {\\n          require(buyOrder.matcherAddress == allowedMatcher, \\\"E3M2\\\");\\n        }\\n\\n\\n        // Check matching assets\\n        require(\\n            buyOrder.baseAsset == sellOrder.baseAsset &&\\n                buyOrder.quoteAsset == sellOrder.quoteAsset,\\n            \\\"E3As\\\"\\n        );\\n\\n        // Check order amounts\\n        require(filledAmount <= buyOrder.amount, \\\"E3AmB\\\");\\n        require(filledAmount <= sellOrder.amount, \\\"E3AmS\\\");\\n\\n        // Check Price values\\n        require(filledPrice <= buyOrder.price, \\\"E3\\\");\\n        require(filledPrice >= sellOrder.price, \\\"E3\\\");\\n\\n        // Check Expiration Time. Convert to seconds first\\n        require(buyOrder.expiration/1000 >= currentTime, \\\"E4B\\\");\\n        require(sellOrder.expiration/1000 >= currentTime, \\\"E4S\\\");\\n\\n        require( buyOrder.buySide==1 && sellOrder.buySide==0, \\\"E3D\\\");\\n        success = true;\\n    }\\n\\n    function getEthSignedOrderHash(Order memory _order) public pure returns (bytes32) {\\n        return\\n            keccak256(\\n                abi.encodePacked(\\n                    \\\"order\\\",\\n                    _order.senderAddress,\\n                    _order.matcherAddress,\\n                    _order.baseAsset,\\n                    _order.quoteAsset,\\n                    _order.matcherFeeAsset,\\n                    _order.amount,\\n                    _order.price,\\n                    _order.matcherFee,\\n                    _order.nonce,\\n                    _order.expiration,\\n                    _order.buySide\\n                )\\n            ).toEthSignedMessageHash();\\n    }\\n\\n    function validatePersonal(Order memory order) public pure returns (bool) {\\n\\n        bytes32 digest = getEthSignedOrderHash(order);\\n        return digest.recover(order.signature) == order.senderAddress;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/cryptography/ECDSA.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\\n *\\n * These functions can be used to verify that a message was signed by the holder\\n * of the private keys of a given address.\\n */\\nlibrary ECDSA {\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature`. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     */\\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\\n        // Check the signature length\\n        if (signature.length != 65) {\\n            revert(\\\"ECDSA: invalid signature length\\\");\\n        }\\n\\n        // Divide the signature in r, s and v variables\\n        bytes32 r;\\n        bytes32 s;\\n        uint8 v;\\n\\n        // ecrecover takes the signature parameters, and the only way to get them\\n        // currently is to use assembly.\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            r := mload(add(signature, 0x20))\\n            s := mload(add(signature, 0x40))\\n            v := byte(0, mload(add(signature, 0x60)))\\n        }\\n\\n        return recover(hash, v, r, s);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover-bytes32-bytes-} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     */\\n    function recover(bytes32 hash, uint8 v, bytes32 r, bytes32 s) internal pure returns (address) {\\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\\n        // the valid range for s in (281): 0 < s < secp256k1n ÷ 2 + 1, and for v in (282): v ∈ {27, 28}. Most\\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\\n        //\\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\\n        // these malleable signatures as well.\\n        require(uint256(s) <= 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0, \\\"ECDSA: invalid signature 's' value\\\");\\n        require(v == 27 || v == 28, \\\"ECDSA: invalid signature 'v' value\\\");\\n\\n        // If the signature is valid (and not malleable), return the signer address\\n        address signer = ecrecover(hash, v, r, s);\\n        require(signer != address(0), \\\"ECDSA: invalid signature\\\");\\n\\n        return signer;\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\\n     * replicates the behavior of the\\n     * https://github.com/ethereum/wiki/wiki/JSON-RPC#eth_sign[`eth_sign`]\\n     * JSON-RPC method.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\\n        // 32 is the length in bytes of hash,\\n        // enforced by the type signature above\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n32\\\", hash));\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"remappings\": [],\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"evmVersion\": \"istanbul\",\r\n    \"libraries\": {},\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}","ABI":"[{\"inputs\":[],\"name\":\"CHAIN_ID\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DOMAIN_NAME\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DOMAIN_SALT\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DOMAIN_SEPARATOR\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DOMAIN_VERSION\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"EIP712_DOMAIN_TYPEHASH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ORDER_TYPEHASH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"senderAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"matcherAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"baseAsset\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"quoteAsset\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"matcherFeeAsset\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"amount\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"price\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"matcherFee\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"nonce\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"expiration\",\"type\":\"uint64\"},{\"internalType\":\"uint8\",\"name\":\"buySide\",\"type\":\"uint8\"},{\"internalType\":\"bool\",\"name\":\"isPersonalSign\",\"type\":\"bool\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"internalType\":\"struct LibValidator.Order\",\"name\":\"buyOrder\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"senderAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"matcherAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"baseAsset\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"quoteAsset\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"matcherFeeAsset\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"amount\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"price\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"matcherFee\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"nonce\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"expiration\",\"type\":\"uint64\"},{\"internalType\":\"uint8\",\"name\":\"buySide\",\"type\":\"uint8\"},{\"internalType\":\"bool\",\"name\":\"isPersonalSign\",\"type\":\"bool\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"internalType\":\"struct LibValidator.Order\",\"name\":\"sellOrder\",\"type\":\"tuple\"},{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"filledAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"filledPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"currentTime\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"allowedMatcher\",\"type\":\"address\"}],\"name\":\"checkOrdersInfo\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"senderAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"matcherAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"baseAsset\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"quoteAsset\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"matcherFeeAsset\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"amount\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"price\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"matcherFee\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"nonce\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"expiration\",\"type\":\"uint64\"},{\"internalType\":\"uint8\",\"name\":\"buySide\",\"type\":\"uint8\"},{\"internalType\":\"bool\",\"name\":\"isPersonalSign\",\"type\":\"bool\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"internalType\":\"struct LibValidator.Order\",\"name\":\"_order\",\"type\":\"tuple\"}],\"name\":\"getEthSignedOrderHash\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"senderAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"matcherAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"baseAsset\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"quoteAsset\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"matcherFeeAsset\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"amount\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"price\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"matcherFee\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"nonce\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"expiration\",\"type\":\"uint64\"},{\"internalType\":\"uint8\",\"name\":\"buySide\",\"type\":\"uint8\"},{\"internalType\":\"bool\",\"name\":\"isPersonalSign\",\"type\":\"bool\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"internalType\":\"struct LibValidator.Order\",\"name\":\"order\",\"type\":\"tuple\"}],\"name\":\"validatePersonal\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"senderAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"matcherAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"baseAsset\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"quoteAsset\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"matcherFeeAsset\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"amount\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"price\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"matcherFee\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"nonce\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"expiration\",\"type\":\"uint64\"},{\"internalType\":\"uint8\",\"name\":\"buySide\",\"type\":\"uint8\"},{\"internalType\":\"bool\",\"name\":\"isPersonalSign\",\"type\":\"bool\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"internalType\":\"struct LibValidator.Order\",\"name\":\"order\",\"type\":\"tuple\"}],\"name\":\"validateV3\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"pure\",\"type\":\"function\"}]","ContractName":"LibValidator","CompilerVersion":"v0.7.4+commit.3f05b770","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}