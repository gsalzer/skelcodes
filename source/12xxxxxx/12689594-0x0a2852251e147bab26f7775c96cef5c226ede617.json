{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.6.6;\r\n\r\n\r\n// SPDX-License-Identifier: MIT\r\n/*\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with GSN meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address payable) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes memory) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n// SPDX-License-Identifier: MIT\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor () internal {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\n// SPDX-License-Identifier: MIT\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts with custom message when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n// SPDX-License-Identifier: MIT\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n// SPDX-License-Identifier: MIT\r\n/**\r\n * @title Roles\r\n * @dev Library for managing addresses assigned to a Role.\r\n */\r\nlibrary Roles {\r\n  struct Role {\r\n    mapping(address => bool) bearer;\r\n  }\r\n\r\n  /**\r\n   * @dev Give an account access to this role.\r\n   */\r\n  function add(Role storage role, address account) internal {\r\n    require(!has(role, account), \"Roles: account already has role\");\r\n    role.bearer[account] = true;\r\n  }\r\n\r\n  /**\r\n   * @dev Remove an account's access to this role.\r\n   */\r\n  function remove(Role storage role, address account) internal {\r\n    require(has(role, account), \"Roles: account does not have role\");\r\n    role.bearer[account] = false;\r\n  }\r\n\r\n  /**\r\n   * @dev Check if an account has this role.\r\n   * @return bool\r\n   */\r\n  function has(Role storage role, address account) internal view returns (bool) {\r\n    require(account != address(0), \"Roles: account is the zero address\");\r\n    return role.bearer[account];\r\n  }\r\n}\r\n\r\n// SPDX-License-Identifier: MIT\r\ncontract PauserRole is Context {\r\n  using Roles for Roles.Role;\r\n\r\n  event PauserAdded(address indexed account);\r\n  event PauserRemoved(address indexed account);\r\n\r\n  Roles.Role private _pausers;\r\n\r\n  constructor() internal {\r\n    _addPauser(_msgSender());\r\n  }\r\n\r\n  modifier onlyPauser() {\r\n    require(isPauser(_msgSender()), \"PauserRole: caller does not have the Pauser role\");\r\n    _;\r\n  }\r\n\r\n  function isPauser(address account) public view returns (bool) {\r\n    return _pausers.has(account);\r\n  }\r\n\r\n  function addPauser(address account) public onlyPauser {\r\n    _addPauser(account);\r\n  }\r\n\r\n  function renouncePauser() public {\r\n    _removePauser(_msgSender());\r\n  }\r\n\r\n  function _addPauser(address account) internal {\r\n    _pausers.add(account);\r\n    emit PauserAdded(account);\r\n  }\r\n\r\n  function _removePauser(address account) internal {\r\n    _pausers.remove(account);\r\n    emit PauserRemoved(account);\r\n  }\r\n}\r\n\r\n// SPDX-License-Identifier: MIT\r\n/**\r\n * @dev Contract module which allows children to implement an emergency stop\r\n * mechanism that can be triggered by an authorized account.\r\n *\r\n * This module is used through inheritance. It will make available the\r\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\r\n * the functions of your contract. Note that they will not be pausable by\r\n * simply including this module, only once the modifiers are put in place.\r\n */\r\ncontract Pausable is Context, PauserRole {\r\n  /**\r\n   * @dev Emitted when the pause is triggered by a pauser (`account`).\r\n   */\r\n  event Paused(address account);\r\n\r\n  /**\r\n   * @dev Emitted when the pause is lifted by a pauser (`account`).\r\n   */\r\n  event Unpaused(address account);\r\n\r\n  bool private _paused;\r\n\r\n  /**\r\n   * @dev Initializes the contract in unpaused state. Assigns the Pauser role\r\n   * to the deployer.\r\n   */\r\n  constructor() internal {\r\n    _paused = false;\r\n  }\r\n\r\n  /**\r\n   * @dev Returns true if the contract is paused, and false otherwise.\r\n   */\r\n  function paused() public view returns (bool) {\r\n    return _paused;\r\n  }\r\n\r\n  /**\r\n   * @dev Modifier to make a function callable only when the contract is not paused.\r\n   */\r\n  modifier whenNotPaused() {\r\n    require(!_paused, \"Pausable: paused\");\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Modifier to make a function callable only when the contract is paused.\r\n   */\r\n  modifier whenPaused() {\r\n    require(_paused, \"Pausable: not paused\");\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Called by a pauser to pause, triggers stopped state.\r\n   */\r\n  function pause() public onlyPauser whenNotPaused {\r\n    _paused = true;\r\n    emit Paused(_msgSender());\r\n  }\r\n\r\n  /**\r\n   * @dev Called by a pauser to unpause, returns to normal state.\r\n   */\r\n  function unpause() public onlyPauser whenPaused {\r\n    _paused = false;\r\n    emit Unpaused(_msgSender());\r\n  }\r\n}\r\n\r\n// SPDX-License-Identifier: MIT\r\ncontract PoolTokenWrapper {\r\n  using SafeMath for uint256;\r\n  IERC20 public token;\r\n\r\n  constructor(IERC20 _erc20Address) public {\r\n    token = IERC20(_erc20Address);\r\n  }\r\n\r\n  uint256 private _totalSupply;\r\n  // Objects balances [id][address] => balance\r\n  mapping(uint256 => mapping(address => uint256)) internal _balances;\r\n  mapping(address => uint256) private _accountBalances;\r\n  mapping(uint256 => uint256) private _poolBalances;\r\n\r\n  function totalSupply() public view returns (uint256) {\r\n    return _totalSupply;\r\n  }\r\n\r\n  function balanceOfAccount(address account) public view returns (uint256) {\r\n    return _accountBalances[account];\r\n  }\r\n\r\n  function balanceOfPool(uint256 id) public view returns (uint256) {\r\n    return _poolBalances[id];\r\n  }\r\n\r\n  function balanceOf(address account, uint256 id) public view returns (uint256) {\r\n    return _balances[id][account];\r\n  }\r\n\r\n  function stake(uint256 id, uint256 amount) public virtual {\r\n    _totalSupply = _totalSupply.add(amount);\r\n    _poolBalances[id] = _poolBalances[id].add(amount);\r\n    _accountBalances[msg.sender] = _accountBalances[msg.sender].add(amount);\r\n    _balances[id][msg.sender] = _balances[id][msg.sender].add(amount);\r\n    token.transferFrom(msg.sender, address(this), amount);\r\n  }\r\n\r\n  function withdraw(uint256 id, uint256 amount) public virtual {\r\n    _totalSupply = _totalSupply.sub(amount);\r\n    _poolBalances[id] = _poolBalances[id].sub(amount);\r\n    _accountBalances[msg.sender] = _accountBalances[msg.sender].sub(amount);\r\n    _balances[id][msg.sender] = _balances[id][msg.sender].sub(amount);\r\n    token.transfer(msg.sender, amount);\r\n  }\r\n\r\n  function transfer(\r\n    uint256 fromId,\r\n    uint256 toId,\r\n    uint256 amount\r\n  ) public virtual {\r\n    _poolBalances[fromId] = _poolBalances[fromId].sub(amount);\r\n    _balances[fromId][msg.sender] = _balances[fromId][msg.sender].sub(amount);\r\n\r\n    _poolBalances[toId] = _poolBalances[toId].add(amount);\r\n    _balances[toId][msg.sender] = _balances[toId][msg.sender].add(amount);\r\n  }\r\n\r\n  function _rescuePoints(address account, uint256 id) internal {\r\n    uint256 amount = _balances[id][account];\r\n\r\n    _totalSupply = _totalSupply.sub(amount);\r\n    _poolBalances[id] = _poolBalances[id].sub(amount);\r\n    _accountBalances[msg.sender] = _accountBalances[msg.sender].sub(amount);\r\n    _balances[id][account] = _balances[id][account].sub(amount);\r\n    token.transfer(account, amount);\r\n  }\r\n}\r\n\r\n// SPDX-License-Identifier: MIT\r\n/**\r\n * @title ERC1155Tradable\r\n * ERC1155Tradable - ERC1155 contract that whitelists an operator address, \r\n * has create and mint functionality, and supports useful standards from OpenZeppelin,\r\n  like _exists(), name(), symbol(), and totalSupply()\r\n */\r\ninterface IERC1155Tradable {\r\n  /**\r\n   * @dev Creates a new token type and assigns _initialSupply to an address\r\n   * @param _maxSupply max supply allowed\r\n   * @param _initialSupply Optional amount to supply the first owner\r\n   * @param _uri Optional URI for this token type\r\n   * @param _data Optional data to pass if receiver is contract\r\n   * @return tokenId The newly created token ID\r\n   */\r\n  function create(\r\n    uint256 _maxSupply,\r\n    uint256 _initialSupply,\r\n    string calldata _uri,\r\n    bytes calldata _data,\r\n    address _beneficiary,\r\n    uint256 _residualsFee,\r\n    bool _residualsRequired\r\n  ) external returns (uint256 tokenId);\r\n\r\n  function mint(\r\n    address _to,\r\n    uint256 _id,\r\n    uint256 _quantity,\r\n    bytes calldata _data\r\n  ) external;\r\n}\r\n\r\n// SPDX-License-Identifier: MIT\r\ncontract RareNftStake is PoolTokenWrapper, Ownable, Pausable {\r\n  using SafeMath for uint256;\r\n  IERC1155Tradable public nfts;\r\n\r\n  struct Card {\r\n    uint256 points;\r\n    uint256 releaseTime;\r\n    uint256 mintFee;\r\n  }\r\n\r\n  struct Pool {\r\n    uint256 periodStart;\r\n    uint256 maxStake;\r\n    uint256 rewardRate; // 11574074074000, 1 point per day per staked token\r\n    uint256 feesCollected;\r\n    uint256 spentPoints;\r\n    uint256 controllerShare;\r\n    address artist;\r\n    mapping(address => uint256) lastUpdateTime;\r\n    mapping(address => uint256) points;\r\n    mapping(uint256 => Card) cards;\r\n  }\r\n\r\n  address public controller;\r\n  address public rescuer;\r\n  mapping(address => uint256) public pendingWithdrawals;\r\n  mapping(uint256 => Pool) public pools;\r\n\r\n  event UpdatedArtist(uint256 poolId, address artist);\r\n  event PoolAdded(uint256 poolId, address artist, uint256 periodStart, uint256 rewardRate, uint256 maxStake);\r\n  event CardAdded(uint256 poolId, uint256 cardId, uint256 points, uint256 mintFee, uint256 releaseTime);\r\n  event Staked(address indexed user, uint256 poolId, uint256 amount);\r\n  event Withdrawn(address indexed user, uint256 poolId, uint256 amount);\r\n  event Transferred(address indexed user, uint256 fromPoolId, uint256 toPoolId, uint256 amount);\r\n  event Redeemed(address indexed user, uint256 poolId, uint256 amount);\r\n  event CardPointsUpdated(uint256 poolId, uint256 cardId, uint256 points);\r\n\r\n  modifier updateReward(address account, uint256 id) {\r\n    if (account != address(0)) {\r\n      pools[id].points[account] = earned(account, id);\r\n      pools[id].lastUpdateTime[account] = block.timestamp;\r\n    }\r\n    _;\r\n  }\r\n\r\n  modifier poolExists(uint256 id) {\r\n    require(pools[id].rewardRate > 0, \"pool does not exists\");\r\n    _;\r\n  }\r\n\r\n  modifier cardExists(uint256 pool, uint256 card) {\r\n    require(pools[pool].cards[card].points > 0 || pools[pool].cards[card].mintFee > 0, \"card does not exists\");\r\n    _;\r\n  }\r\n\r\n  constructor(\r\n    address _controller,\r\n    IERC1155Tradable _nftsAddress,\r\n    IERC20 _tokenAddress\r\n  ) public PoolTokenWrapper(_tokenAddress) {\r\n    controller = _controller;\r\n    nfts = _nftsAddress;\r\n  }\r\n\r\n  function cardMintFee(uint256 pool, uint256 card) public view returns (uint256) {\r\n    return pools[pool].cards[card].mintFee;\r\n  }\r\n\r\n  function cardReleaseTime(uint256 pool, uint256 card) public view returns (uint256) {\r\n    return pools[pool].cards[card].releaseTime;\r\n  }\r\n\r\n  function cardPoints(uint256 pool, uint256 card) public view returns (uint256) {\r\n    return pools[pool].cards[card].points;\r\n  }\r\n\r\n  function earned(address account, uint256 pool) public view returns (uint256) {\r\n    Pool storage p = pools[pool];\r\n    uint256 blockTime = block.timestamp;\r\n    return\r\n      balanceOf(account, pool).mul(blockTime.sub(p.lastUpdateTime[account]).mul(p.rewardRate)).div(1e18).add(\r\n        p.points[account]\r\n      );\r\n  }\r\n\r\n  // override PoolTokenWrapper's stake() function\r\n  function stake(uint256 pool, uint256 amount)\r\n    public\r\n    override\r\n    poolExists(pool)\r\n    updateReward(msg.sender, pool)\r\n    whenNotPaused()\r\n  {\r\n    Pool memory p = pools[pool];\r\n\r\n    require(block.timestamp >= p.periodStart, \"pool not open\");\r\n    require(amount.add(balanceOf(msg.sender, pool)) <= p.maxStake, \"stake exceeds max\");\r\n\r\n    super.stake(pool, amount);\r\n    emit Staked(msg.sender, pool, amount);\r\n  }\r\n\r\n  // override PoolTokenWrapper's withdraw() function\r\n  function withdraw(uint256 pool, uint256 amount) public override poolExists(pool) updateReward(msg.sender, pool) {\r\n    require(amount > 0, \"cannot withdraw 0\");\r\n\r\n    super.withdraw(pool, amount);\r\n    emit Withdrawn(msg.sender, pool, amount);\r\n  }\r\n\r\n  // override PoolTokenWrapper's transfer() function\r\n  function transfer(\r\n    uint256 fromPool,\r\n    uint256 toPool,\r\n    uint256 amount\r\n  )\r\n    public\r\n    override\r\n    poolExists(fromPool)\r\n    poolExists(toPool)\r\n    updateReward(msg.sender, fromPool)\r\n    updateReward(msg.sender, toPool)\r\n    whenNotPaused()\r\n  {\r\n    Pool memory toP = pools[toPool];\r\n\r\n    require(block.timestamp >= toP.periodStart, \"pool not open\");\r\n    require(amount.add(balanceOf(msg.sender, toPool)) <= toP.maxStake, \"stake exceeds max\");\r\n\r\n    super.transfer(fromPool, toPool, amount);\r\n    emit Transferred(msg.sender, fromPool, toPool, amount);\r\n  }\r\n\r\n  function transferAll(uint256 fromPool, uint256 toPool) external {\r\n    transfer(fromPool, toPool, balanceOf(msg.sender, fromPool));\r\n  }\r\n\r\n  function exit(uint256 pool) external {\r\n    withdraw(pool, balanceOf(msg.sender, pool));\r\n  }\r\n\r\n  function redeem(uint256 pool, uint256 card)\r\n    public\r\n    payable\r\n    poolExists(pool)\r\n    cardExists(pool, card)\r\n    updateReward(msg.sender, pool)\r\n  {\r\n    Pool storage p = pools[pool];\r\n    Card memory c = p.cards[card];\r\n    require(block.timestamp >= c.releaseTime, \"card not released\");\r\n    require(p.points[msg.sender] >= c.points, \"not enough points\");\r\n    require(msg.value == c.mintFee, \"support our artists, send eth\");\r\n\r\n    if (c.mintFee > 0) {\r\n      uint256 _controllerShare = msg.value.mul(p.controllerShare).div(1000);\r\n      uint256 _artistRoyalty = msg.value.sub(_controllerShare);\r\n      require(_artistRoyalty.add(_controllerShare) == msg.value, \"problem with fee\");\r\n\r\n      p.feesCollected = p.feesCollected.add(c.mintFee);\r\n      pendingWithdrawals[controller] = pendingWithdrawals[controller].add(_controllerShare);\r\n      pendingWithdrawals[p.artist] = pendingWithdrawals[p.artist].add(_artistRoyalty);\r\n    }\r\n\r\n    p.points[msg.sender] = p.points[msg.sender].sub(c.points);\r\n    p.spentPoints = p.spentPoints.add(c.points);\r\n    nfts.mint(msg.sender, card, 1, \"\");\r\n    emit Redeemed(msg.sender, pool, c.points);\r\n  }\r\n\r\n  function rescuePoints(address account, uint256 pool)\r\n    public\r\n    poolExists(pool)\r\n    updateReward(account, pool)\r\n    returns (uint256)\r\n  {\r\n    require(msg.sender == rescuer, \"!rescuer\");\r\n    Pool storage p = pools[pool];\r\n\r\n    uint256 earnedPoints = p.points[account];\r\n    p.spentPoints = p.spentPoints.add(earnedPoints);\r\n    p.points[account] = 0;\r\n\r\n    // transfer remaining tokens to the account\r\n    if (balanceOf(account, pool) > 0) {\r\n      _rescuePoints(account, pool);\r\n    }\r\n\r\n    emit Redeemed(account, pool, earnedPoints);\r\n    return earnedPoints;\r\n  }\r\n\r\n  function setArtist(uint256 pool, address artist) public onlyOwner {\r\n    uint256 amount = pendingWithdrawals[artist];\r\n    pendingWithdrawals[artist] = 0;\r\n    pendingWithdrawals[artist] = pendingWithdrawals[artist].add(amount);\r\n    pools[pool].artist = artist;\r\n\r\n    emit UpdatedArtist(pool, artist);\r\n  }\r\n\r\n  function setController(address _controller) public onlyOwner {\r\n    uint256 amount = pendingWithdrawals[controller];\r\n    pendingWithdrawals[controller] = 0;\r\n    pendingWithdrawals[_controller] = pendingWithdrawals[_controller].add(amount);\r\n    controller = _controller;\r\n  }\r\n\r\n  function setRescuer(address _rescuer) public onlyOwner {\r\n    rescuer = _rescuer;\r\n  }\r\n\r\n  function setControllerShare(uint256 pool, uint256 _controllerShare) public onlyOwner poolExists(pool) {\r\n    pools[pool].controllerShare = _controllerShare;\r\n  }\r\n\r\n  function addCard(\r\n    uint256 pool,\r\n    uint256 id,\r\n    uint256 points,\r\n    uint256 mintFee,\r\n    uint256 releaseTime\r\n  ) public onlyOwner poolExists(pool) {\r\n    Card storage c = pools[pool].cards[id];\r\n    c.points = points;\r\n    c.releaseTime = releaseTime;\r\n    c.mintFee = mintFee;\r\n    emit CardAdded(pool, id, points, mintFee, releaseTime);\r\n  }\r\n\r\n  function createCard(\r\n    uint256 pool,\r\n    uint256 supply,\r\n    uint256 points,\r\n    uint256 mintFee,\r\n    uint256 releaseTime,\r\n    address beneficiary,\r\n    uint256 residualsFee,\r\n    bool residualsRequired\r\n  ) public onlyOwner poolExists(pool) returns (uint256) {\r\n    uint256 tokenId = nfts.create(supply, 0, \"\", \"\", beneficiary, residualsFee, residualsRequired);\r\n    require(tokenId > 0, \"ERC1155 create did not succeed\");\r\n\r\n    Card storage c = pools[pool].cards[tokenId];\r\n    c.points = points;\r\n    c.releaseTime = releaseTime;\r\n    c.mintFee = mintFee;\r\n    emit CardAdded(pool, tokenId, points, mintFee, releaseTime);\r\n    return tokenId;\r\n  }\r\n\r\n  function createPool(\r\n    uint256 id,\r\n    uint256 periodStart,\r\n    uint256 maxStake,\r\n    uint256 rewardRate,\r\n    uint256 controllerShare,\r\n    address artist\r\n  ) public onlyOwner returns (uint256) {\r\n    require(pools[id].rewardRate == 0, \"pool exists\");\r\n\r\n    Pool storage p = pools[id];\r\n\r\n    p.periodStart = periodStart;\r\n    p.maxStake = maxStake;\r\n    p.rewardRate = rewardRate;\r\n    p.controllerShare = controllerShare;\r\n    p.artist = artist;\r\n\r\n    emit PoolAdded(id, artist, periodStart, rewardRate, maxStake);\r\n  }\r\n\r\n  function withdrawFee() public {\r\n    uint256 amount = pendingWithdrawals[msg.sender];\r\n    require(amount > 0, \"nothing to withdraw\");\r\n    pendingWithdrawals[msg.sender] = 0;\r\n    msg.sender.transfer(amount);\r\n  }\r\n\r\n  // For development and QA\r\n  function assignPointsTo(\r\n    uint256 pool_,\r\n    address tester_,\r\n    uint256 points_\r\n  ) public onlyOwner poolExists(pool_) returns (uint256) {\r\n    Pool storage p = pools[pool_];\r\n    p.points[tester_] = points_;\r\n\r\n    // rescue continues\r\n    return p.points[tester_];\r\n  }\r\n\r\n  /**\r\n   * @dev Updates card points\r\n   * @param poolId_ uint256 ID of the pool\r\n   * @param cardId_ uint256 ID of the card to update\r\n   * @param points_ uint256 new \"points\" value\r\n   */\r\n  function updateCardPoints(\r\n    uint256 poolId_,\r\n    uint256 cardId_,\r\n    uint256 points_\r\n  ) public onlyOwner poolExists(poolId_) cardExists(poolId_, cardId_) {\r\n    Card storage c = pools[poolId_].cards[cardId_];\r\n    c.points = points_;\r\n    emit CardPointsUpdated(poolId_, cardId_, points_);\r\n  }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_controller\",\"type\":\"address\"},{\"internalType\":\"contract IERC1155Tradable\",\"name\":\"_nftsAddress\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"_tokenAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"poolId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"cardId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"points\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"mintFee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"releaseTime\",\"type\":\"uint256\"}],\"name\":\"CardAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"poolId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"cardId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"points\",\"type\":\"uint256\"}],\"name\":\"CardPointsUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"PauserAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"PauserRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"poolId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"artist\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"periodStart\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"rewardRate\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"maxStake\",\"type\":\"uint256\"}],\"name\":\"PoolAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"poolId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Redeemed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"poolId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Staked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"fromPoolId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"toPoolId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Transferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"poolId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"artist\",\"type\":\"address\"}],\"name\":\"UpdatedArtist\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"poolId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Withdrawn\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"pool\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"points\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"mintFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"releaseTime\",\"type\":\"uint256\"}],\"name\":\"addCard\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"addPauser\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"pool_\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"tester_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"points_\",\"type\":\"uint256\"}],\"name\":\"assignPointsTo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOfAccount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"balanceOfPool\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"pool\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"card\",\"type\":\"uint256\"}],\"name\":\"cardMintFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"pool\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"card\",\"type\":\"uint256\"}],\"name\":\"cardPoints\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"pool\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"card\",\"type\":\"uint256\"}],\"name\":\"cardReleaseTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"controller\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"pool\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"supply\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"points\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"mintFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"releaseTime\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"beneficiary\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"residualsFee\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"residualsRequired\",\"type\":\"bool\"}],\"name\":\"createCard\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"periodStart\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxStake\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewardRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"controllerShare\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"artist\",\"type\":\"address\"}],\"name\":\"createPool\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"pool\",\"type\":\"uint256\"}],\"name\":\"earned\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"pool\",\"type\":\"uint256\"}],\"name\":\"exit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isPauser\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nfts\",\"outputs\":[{\"internalType\":\"contract IERC1155Tradable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"pendingWithdrawals\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"pools\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"periodStart\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxStake\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewardRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"feesCollected\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"spentPoints\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"controllerShare\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"artist\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"pool\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"card\",\"type\":\"uint256\"}],\"name\":\"redeem\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renouncePauser\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"pool\",\"type\":\"uint256\"}],\"name\":\"rescuePoints\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rescuer\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"pool\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"artist\",\"type\":\"address\"}],\"name\":\"setArtist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_controller\",\"type\":\"address\"}],\"name\":\"setController\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"pool\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_controllerShare\",\"type\":\"uint256\"}],\"name\":\"setControllerShare\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_rescuer\",\"type\":\"address\"}],\"name\":\"setRescuer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"pool\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"stake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"fromPool\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"toPool\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"fromPool\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"toPool\",\"type\":\"uint256\"}],\"name\":\"transferAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"poolId_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"cardId_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"points_\",\"type\":\"uint256\"}],\"name\":\"updateCardPoints\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"pool\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"RareNftStake","CompilerVersion":"v0.6.6+commit.6c089d02","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000a50fb3356ed18da0c1bc98f0dff04dfdebd7c9dd000000000000000000000000938162638322f7ce676034fe89eba6a8bfac7f41000000000000000000000000e7e3f49e5380f734fb7bbaa5b1e2d9b1a10b85d6","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://cbbd096d41a132ab384f2586aefa87604d79d03faa78b78807ff23f10d51564c"}]}