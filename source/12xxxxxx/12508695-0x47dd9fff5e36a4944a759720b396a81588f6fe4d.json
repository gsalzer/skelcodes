{"status":"1","message":"OK","result":[{"SourceCode":"// SPDX-License-Identifier: UNLICENSED\r\n\r\npragma solidity ^0.8.0;\r\n\r\ninterface IERC20 {\r\n  function initialize() external;\r\n  function totalSupply() external view returns (uint);\r\n  function balanceOf(address account) external view returns (uint);\r\n  function transfer(address recipient, uint256 amount) external returns (bool);\r\n  function allowance(address owner, address spender) external view returns (uint);\r\n  function symbol() external view returns (string memory);\r\n  function decimals() external view returns (uint);\r\n  function approve(address spender, uint amount) external returns (bool);\r\n  function mint(address account, uint amount) external;\r\n  function burn(address account, uint amount) external;\r\n  function transferFrom(address sender, address recipient, uint amount) external returns (bool);\r\n  event Transfer(address indexed from, address indexed to, uint value);\r\n  event Approval(address indexed owner, address indexed spender, uint value);\r\n}\r\n\r\ninterface IUniswapV3Pool {\r\n\r\n  function slot0() external view returns (\r\n    uint160 sqrtPriceX96,\r\n    int24 tick,\r\n    uint16 observationIndex,\r\n    uint16 observationCardinality,\r\n    uint16 observationCardinalityNext,\r\n    uint8 feeProtocol,\r\n    bool unlocked\r\n  );\r\n\r\n  function increaseObservationCardinalityNext(\r\n    uint16 observationCardinalityNext\r\n  ) external;\r\n}\r\n\r\ninterface IUniswapV3Factory {\r\n\r\n  function getPool(\r\n    address tokenA,\r\n    address tokenB,\r\n    uint24 fee\r\n  ) external view returns (address pool);\r\n}\r\n\r\ninterface ILinkOracle {\r\n  function latestAnswer() external view returns(uint);\r\n  function decimals() external view returns(int256);\r\n}\r\n\r\ninterface IUniswapPriceConverter {\r\n\r\n  function assetToAssetThruRoute(\r\n    address _tokenIn,\r\n    uint256 _amountIn,\r\n    address _tokenOut,\r\n    uint32 _twapPeriod,\r\n    address _routeThruToken,\r\n    uint24[2] memory _poolFees\r\n  ) external view returns (uint256 amountOut);\r\n}\r\n\r\ncontract Ownable {\r\n\r\n  address public owner;\r\n\r\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n  constructor() {\r\n    owner = msg.sender;\r\n    emit OwnershipTransferred(address(0), owner);\r\n  }\r\n\r\n  modifier onlyOwner() {\r\n    require(isOwner(), \"Ownable: caller is not the owner\");\r\n    _;\r\n  }\r\n\r\n  function isOwner() public view returns (bool) {\r\n    return msg.sender == owner;\r\n  }\r\n\r\n  function renounceOwnership() public onlyOwner {\r\n    emit OwnershipTransferred(owner, address(0));\r\n    owner = address(0);\r\n  }\r\n\r\n  function transferOwnership(address newOwner) public onlyOwner {\r\n    _transferOwnership(newOwner);\r\n  }\r\n\r\n  function _transferOwnership(address newOwner) internal {\r\n    require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n    emit OwnershipTransferred(owner, newOwner);\r\n    owner = newOwner;\r\n  }\r\n}\r\n\r\ncontract UniswapV3Oracle is Ownable {\r\n\r\n  IUniswapV3Factory public constant uniFactory    = IUniswapV3Factory(0x1F98431c8aD98523631AE4a59f267346ea31F984);\r\n  ILinkOracle       public constant wethOracle    = ILinkOracle(0x5f4eC3Df9cbd43714FE2740f5E3616155c5b8419);\r\n  address           public constant WETH          = 0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2;\r\n  uint24            public constant WETH_POOL_FEE = 3000;\r\n\r\n  struct Pool {\r\n    address pairToken;\r\n    uint24  poolFee;\r\n  }\r\n\r\n  uint32 public twapPeriod;\r\n  uint   public minObservations;\r\n\r\n  IUniswapPriceConverter public uniPriceConverter;\r\n\r\n  mapping(address => Pool) public pools;\r\n\r\n  event PoolAdded(address indexed token);\r\n  event PoolRemoved(address indexed token);\r\n\r\n  constructor(\r\n    IUniswapPriceConverter _uniPriceConverter,\r\n    uint32       _twapPeriod,\r\n    uint         _minObservations\r\n  ) {\r\n    uniPriceConverter = _uniPriceConverter;\r\n    twapPeriod        = _twapPeriod;\r\n    minObservations   = _minObservations;\r\n  }\r\n\r\n  function addPool(\r\n    address _token,\r\n    address _pairToken,\r\n    uint24  _poolFee\r\n  ) public onlyOwner {\r\n\r\n    _validatePool(_token, _pairToken, _poolFee);\r\n\r\n    pools[_token] = Pool({\r\n      pairToken: _pairToken,\r\n      poolFee: _poolFee\r\n    });\r\n\r\n    emit PoolAdded(_token);\r\n  }\r\n\r\n  function removePool(address _token) public onlyOwner {\r\n    pools[_token] = Pool(address(0), 0);\r\n    emit PoolRemoved(_token);\r\n  }\r\n\r\n  function setUniPriceConverter(IUniswapPriceConverter _value) public onlyOwner {\r\n    uniPriceConverter = _value;\r\n  }\r\n\r\n  function setTwapPeriod(uint32 _value) public onlyOwner {\r\n    twapPeriod = _value;\r\n  }\r\n\r\n  function setMinObservations(uint _value) public onlyOwner {\r\n    minObservations = _value;\r\n  }\r\n\r\n  function tokenPrice(address _token) public view returns(uint) {\r\n    require(pools[_token].pairToken != address(0), \"UniswapV3Oracle: token not supported\");\r\n    _validatePool(_token, pools[_token].pairToken, pools[_token].poolFee);\r\n\r\n    uint ethValue = uniPriceConverter.assetToAssetThruRoute(\r\n      _token,\r\n      10 ** IERC20(_token).decimals(),\r\n      WETH,\r\n      twapPeriod,\r\n      pools[_token].pairToken,\r\n      [pools[_token].poolFee, WETH_POOL_FEE]\r\n    );\r\n\r\n    return ethValue * ethPrice() / 1e18;\r\n  }\r\n\r\n  function ethPrice() public view returns(uint) {\r\n    return wethOracle.latestAnswer() * 1e10;\r\n  }\r\n\r\n  function isPoolValid(address _token, address _pairToken, uint24 _poolFee) public view returns(bool) {\r\n    address poolAddress = uniFactory.getPool(_token, _pairToken, _poolFee);\r\n    if (poolAddress == address(0)) { return false; }\r\n\r\n    (, , , , uint observationSlots , ,) = IUniswapV3Pool(poolAddress).slot0();\r\n    return observationSlots >= minObservations;\r\n  }\r\n\r\n  function tokenSupported(address _token) public view returns(bool) {\r\n    return pools[_token].pairToken != address(0);\r\n  }\r\n\r\n  function _validatePool(address _token, address _pairToken, uint24 _poolFee) internal view {\r\n    require(isPoolValid(_token, _pairToken, _poolFee), \"UniswapV3Oracle: invalid pool\");\r\n  }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"contract IUniswapPriceConverter\",\"name\":\"_uniPriceConverter\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"_twapPeriod\",\"type\":\"uint32\"},{\"internalType\":\"uint256\",\"name\":\"_minObservations\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"PoolAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"PoolRemoved\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"WETH\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"WETH_POOL_FEE\",\"outputs\":[{\"internalType\":\"uint24\",\"name\":\"\",\"type\":\"uint24\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_pairToken\",\"type\":\"address\"},{\"internalType\":\"uint24\",\"name\":\"_poolFee\",\"type\":\"uint24\"}],\"name\":\"addPool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ethPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isOwner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_pairToken\",\"type\":\"address\"},{\"internalType\":\"uint24\",\"name\":\"_poolFee\",\"type\":\"uint24\"}],\"name\":\"isPoolValid\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minObservations\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"pools\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"pairToken\",\"type\":\"address\"},{\"internalType\":\"uint24\",\"name\":\"poolFee\",\"type\":\"uint24\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"removePool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"setMinObservations\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"_value\",\"type\":\"uint32\"}],\"name\":\"setTwapPeriod\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IUniswapPriceConverter\",\"name\":\"_value\",\"type\":\"address\"}],\"name\":\"setUniPriceConverter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"tokenPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"tokenSupported\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"twapPeriod\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniFactory\",\"outputs\":[{\"internalType\":\"contract IUniswapV3Factory\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniPriceConverter\",\"outputs\":[{\"internalType\":\"contract IUniswapPriceConverter\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"wethOracle\",\"outputs\":[{\"internalType\":\"contract ILinkOracle\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"UniswapV3Oracle","CompilerVersion":"v0.8.1+commit.df193b15","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"0000000000000000000000000f1f5a87f99f0918e6c81f16e59f3518698221ff00000000000000000000000000000000000000000000000000000000000002580000000000000000000000000000000000000000000000000000000000000032","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"ipfs://ad50a0b4bd0e0d484f5e64f7c8b1ca9e21a7ce22fb31503a598739b2dca31f82"}]}