{"status":"1","message":"OK","result":[{"SourceCode":"// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.4;\r\n\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n}\r\n\r\ninterface IERC20 {\r\n    function totalSupply() external view returns (uint256);\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n    \r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\nlibrary SafeMath {\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n        return c;\r\n    }\r\n\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        return c;\r\n    }\r\n\r\n}\r\n\r\ncontract Ownable is Context {\r\n    address private _Owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    constructor () {\r\n        address msgSender = _msgSender();\r\n        _Owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    function owner() public view returns (address) {\r\n        return _Owner;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(_Owner == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n}  \r\n\r\ninterface IUniswapV2Factory {\r\n    function createPair(address tokenA, address tokenB) external returns (address pair);\r\n}\r\n\r\ninterface IUniswapV2Router02 {\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external payable;\r\n    function factory() external pure returns (address);\r\n    function WETH() external pure returns (address);\r\n    function addLiquidityETH(\r\n        address token,\r\n        uint amountTokenDesired,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\r\n}\r\n\r\ninterface FTPAntiBot {\r\n    function scanAddress(address _address, address _safeAddress, address _origin) external returns (bool);\r\n    function registerBlock(address _recipient, address _sender, address _origin) external;\r\n}\r\n\r\ncontract Balancer {\r\n    constructor()  {\r\n    }\r\n}\r\n\r\ncontract DownDogeToken is Context, IERC20, Ownable {\r\n    using SafeMath for uint256;\r\n    \r\n    uint256 internal _total_supply = 1_000_000_000_000 * 10**9;\r\n    string private _Name = \"Down Doge Token\";\r\n    string private _Symbol = \"DDT\";\r\n    uint8 private _Decimals = 9;\r\n    \r\n    uint256 private _BanCount = 0;\r\n\r\n    uint256 public _minTokensBeforeSwap = 1_000_000 * 10**9; // 1,000,000 DDT\r\n    uint256 public _minWeiBeforeSwap = 1000_000_000 * 10**9; // 1 Eth\r\n\r\n    uint256 public _lastBuyAndBurn = block.timestamp ;\r\n    uint256 public _buyAndBurnInterval = 30 minutes;\r\n    uint256 public _totalBurntFees;\r\n    \r\n    uint256 private _BuyBackFee = 6;\r\n    uint256 private _CharityFee = 2;\r\n    uint256 private _DevFee = 2;\r\n    \r\n    address payable private _FeeAddress;\r\n    address payable private _DevAddress;\r\n    address private _UniswapV2Pair;\r\n    \r\n\r\n    bool private _IsSwap = false;\r\n    bool private _AntiBotEnabled = true;\r\n    bool private _buyAndBurnEnabled = true;\r\n\r\n    address public _AntiBotAddress = 0xCD5312d086f078D1554e8813C27Cf6C9D1C3D9b3;\r\n    address public _DeadWallet = 0x000000000000000000000000000000000000dEaD;\r\n    address public _balancer;\r\n    bool public _SwapEnabled = false;\r\n    bool public _TradingOpened = false;\r\n    \r\n    uint256 public _CalledReadyToTax = 0;\r\n    bool public _CalledReadyToTax2 = false;\r\n    uint256 public _CalledTax1 = 0;\r\n    uint256 public _CalledTax2 = 0;\r\n    uint256 public _CalledTax3 = 0;\r\n    uint256 public _CalledSenderNotUni = 0;\r\n    uint256 public _CalledBuyAndBurn = 0;\r\n    uint256 public _CalledCanSwap = 0;\r\n    uint256 public _CalledSwapTokensForETH = 0;\r\n    \r\n    mapping (address => bool) private _Bots;\r\n    mapping (address => bool) private _ExcludedAddresses;\r\n\r\n    mapping (address => uint256) private _Balances;\r\n    mapping (address => mapping (address => uint256)) private _Allowances;\r\n    \r\n    FTPAntiBot private AntiBot;\r\n    IUniswapV2Router02 private _UniswapV2Router;\r\n\r\n    event BanAddress(address Address, address Origin);\r\n    event Burnt(uint256 Amount);\r\n    \r\n    modifier lockTheSwap {\r\n        _IsSwap = true;\r\n        _;\r\n        _IsSwap = false;\r\n    }\r\n\r\n    constructor (address payable _feeAddress, address payable _devAddress ) {\r\n        \r\n        _FeeAddress = _feeAddress;\r\n        _DevAddress = _DevAddress;\r\n        _initAntiBot(); // activates antibot if enabled\r\n        _balancer = address(new Balancer()); // new contract to handle auto buy-back\r\n\r\n        _Balances[owner()] = _total_supply.div(100).mul(50); // send 50% to owner address for presale, remaining will be sent back to contract before liquidity will be added.\r\n        _Balances[address(this)] = _total_supply.div(100).mul(50);\r\n        _ExcludedAddresses[owner()] = true;\r\n        _ExcludedAddresses[address(this)] = true;\r\n        _ExcludedAddresses[_balancer] = true;\r\n        _ExcludedAddresses[_feeAddress] = true;\r\n        _ExcludedAddresses[_devAddress] = true;\r\n\r\n        \r\n        emit Transfer(address(0), address(this), _total_supply);\r\n    }\r\n    \r\n    receive() external payable {}\r\n\r\n// ####################\r\n// ##### DEFAULTS #####\r\n// ####################\r\n\r\n    function name() public view returns (string memory) {\r\n        return _Name;\r\n    }\r\n\r\n    function symbol() public view returns (string memory) {\r\n        return _Symbol;\r\n    }\r\n\r\n    function decimals() public view returns (uint8) {\r\n        return _Decimals;\r\n    }\r\n\r\n// #####################\r\n// ##### OVERRIDES #####\r\n// #####################\r\n\r\n    function totalSupply() public view override returns (uint256) {\r\n        return _total_supply;\r\n    }\r\n\r\n    function balanceOf(address _account) public view override returns (uint256) {\r\n        return _Balances[_account];\r\n    }\r\n\r\n    function transfer(address _recipient, uint256 _amount) public override returns (bool) {\r\n        _transfer(_msgSender(), _recipient, _amount);\r\n        return true;\r\n    }\r\n\r\n    function allowance(address _owner, address _spender) public view override returns (uint256) {\r\n        return _Allowances[_owner][_spender];\r\n    }\r\n\r\n    function approve(address _spender, uint256 _amount) public override returns (bool) {\r\n        _approve(_msgSender(), _spender, _amount);\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(address _sender, address _recipient, uint256 _amount) public override returns (bool) {\r\n        _transfer(_sender, _recipient, _amount);\r\n        _approve(_sender, _msgSender(), _Allowances[_sender][_msgSender()].sub(_amount, \"ERC20: transfer amount exceeds allowance\"));\r\n        return true;\r\n    }\r\n\r\n// ####################\r\n// ##### PRIVATES #####\r\n// ####################\r\n\r\n    function _readyToTax(address _sender) private returns(bool) {\r\n        _CalledReadyToTax += 1;\r\n        _CalledReadyToTax2 = _senderNotUni(_sender) && !_ExcludedAddresses[_sender] && _SwapEnabled;\r\n        return _CalledReadyToTax2;\r\n    }\r\n    \r\n    function _notOwnerAddress(address _sender, address _recipient) private view returns(bool) {\r\n        return _sender != owner() && _recipient != owner() && _TradingOpened;\r\n    }\r\n\r\n    function _senderNotUni(address _sender) private view returns(bool) {\r\n        return _sender != _UniswapV2Pair;\r\n    }\r\n\r\n    function _approve(address _owner, address _spender, uint256 _amount) private {\r\n        require(_owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(_spender != address(0), \"ERC20: approve to the zero address\");\r\n        _Allowances[_owner][_spender] = _amount;\r\n        emit Approval(_owner, _spender, _amount);\r\n    }\r\n\r\n    function _transfer(address _sender, address _recipient, uint256 _amount) private {\r\n        require(_sender != address(0), \"ERC20: transfer from the zero address\");\r\n        require(_recipient != address(0), \"ERC20: transfer to the zero address\");\r\n        require(_amount > 0, \"Transfer amount must be greater than zero\");\r\n        require(_TradingOpened || _sender == owner() || _recipient == owner() ||\r\n                _ExcludedAddresses[_sender] || _ExcludedAddresses[_recipient], \"Trading is locked.\");\r\n        \r\n                        \r\n        uint256 _bbFee = _setBuyBackFee(_sender, _recipient); // buy-back fees\r\n        uint256 _cFee = _setCharityFee(_sender, _recipient); // charity fee\r\n        uint256 _dFee = _setDevFee(_sender, _recipient); // dev fee\r\n\r\n        uint256 _bbFeeAmount = _amount.div(100).mul(_bbFee);\r\n        uint256 _cFeeAmount = _amount.div(100).mul(_cFee);\r\n        uint256 _dFeeAmount = _amount.div(100).mul(_dFee);\r\n        uint256 _totalFee = _bbFeeAmount.add(_cFeeAmount).add(_dFeeAmount);\r\n\r\n        uint256 _newAmount = _amount.sub(_totalFee);\r\n        _Balances[address(this)] = _Balances[address(this)].add(_totalFee);\r\n        \r\n         if (_AntiBotEnabled)\r\n            _checkBot(_recipient, _sender, tx.origin); //calls AntiBot for results\r\n        \r\n        if(_senderNotUni(_sender)) {\r\n            _CalledSenderNotUni += 1;\r\n            require(!_Bots[_sender]); // Local logic for banning based on AntiBot results \r\n            _tax(_sender);\r\n        }\r\n\r\n        _Balances[_sender] = _Balances[_sender].sub(_amount);\r\n        _Balances[_recipient] = _Balances[_recipient].add(_newAmount);\r\n\r\n        \r\n        emit Transfer(_sender, _recipient, _newAmount);\r\n\r\n        if (_AntiBotEnabled)\r\n            AntiBot.registerBlock(_sender, _recipient, tx.origin); //Tells AntiBot to start watching\r\n\t}\r\n\t\r\n\tfunction _checkBot(address _recipient, address _sender, address _origin) private {\r\n        if((_recipient == _UniswapV2Pair || _sender == _UniswapV2Pair) && _TradingOpened){\r\n            bool recipientAddress = AntiBot.scanAddress(_recipient, _UniswapV2Pair, _origin); // Get AntiBot result\r\n            bool senderAddress = AntiBot.scanAddress(_sender, _UniswapV2Pair, _origin); // Get AntiBot result\r\n            if(recipientAddress){\r\n                _banSeller(_recipient);\r\n                _banSeller(_origin);\r\n                emit BanAddress(_recipient, _origin);\r\n            }\r\n            if(senderAddress){\r\n                _banSeller(_sender);\r\n                _banSeller(_origin);\r\n                emit BanAddress(_sender, _origin);\r\n            }\r\n        }\r\n    }\r\n    \r\n    function _banSeller(address _address) private {\r\n        if(!_Bots[_address])\r\n            _BanCount += 1;\r\n        _Bots[_address] = true;\r\n    }\r\n\t\r\n\tfunction _setBuyBackFee(address _sender, address _recipient) private view returns(uint256){\r\n        bool _takeFee = !(_ExcludedAddresses[_sender] || _ExcludedAddresses[_recipient]);\r\n        uint256 _buyBackFee;\r\n        \r\n        if(!_takeFee)\r\n            _buyBackFee = 0;\r\n        if(_takeFee)\r\n            _buyBackFee = _BuyBackFee;\r\n        return _buyBackFee;\r\n    }\r\n\r\n\tfunction _setCharityFee(address _sender, address _recipient) private view returns(uint256){\r\n        bool _takeFee = !(_ExcludedAddresses[_sender] || _ExcludedAddresses[_recipient]);\r\n        uint256 _charityFee;\r\n        \r\n        if(!_takeFee)\r\n            _charityFee = 0;\r\n        if(_takeFee)\r\n            _charityFee = _CharityFee;\r\n        return _charityFee;\r\n    }\r\n    \r\n\tfunction _setDevFee(address _sender, address _recipient) private view returns(uint256){\r\n        bool _takeFee = !(_ExcludedAddresses[_sender] || _ExcludedAddresses[_recipient]);\r\n        uint256 _devFee;\r\n        \r\n        if(!_takeFee)\r\n            _devFee = 0;\r\n        if(_takeFee)\r\n            _devFee = _DevFee;\r\n        return _devFee;\r\n    }\r\n\r\n    function _tax(address _sender) private {\r\n        uint256 _tokenBalance = balanceOf(address(this));\r\n        uint256 _FeesSum = _CharityFee.add(_BuyBackFee).add(_DevFee);\r\n        \r\n        uint256 _cAmount = _tokenBalance.div(_FeesSum).mul(_CharityFee);\r\n        uint256 _bbAmount = _tokenBalance.div(_FeesSum).mul(_BuyBackFee);\r\n        uint256 _dAmount = _tokenBalance.div(_FeesSum).mul(_DevFee);\r\n        \r\n        uint256 _contractBalance = address(this).balance;\r\n        \r\n        bool swap = true;\r\n        \r\n        _CalledTax1 += 1;\r\n\r\n        if (block.timestamp > _lastBuyAndBurn + _buyAndBurnInterval \r\n            && _buyAndBurnEnabled\r\n            && _contractBalance >= _minWeiBeforeSwap) {\r\n                _CalledBuyAndBurn += 1;\r\n                _buyAndBurnToken(_contractBalance);\r\n                swap = false;\r\n        }\r\n        \r\n        if (swap) {\r\n            _CalledCanSwap += 1;\r\n            if (_readyToTax(_sender)) {\r\n                _CalledTax2 += 1;\r\n                if (_tokenBalance >= _minTokensBeforeSwap) {\r\n                    _CalledTax3 += 1;\r\n                    _swapTokensForETH(address(this), _bbAmount);\r\n                    _swapTokensForETH(_FeeAddress, _cAmount);\r\n                    _swapTokensForETH(_DevAddress, _dAmount);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    function _swapTokensForETH(address _recipient, uint256 _amount) private lockTheSwap {\r\n        _CalledSwapTokensForETH += 1;\r\n        address[] memory _path = new address[](2);\r\n        _path[0] = address(this);\r\n        _path[1] = _UniswapV2Router.WETH();\r\n        _approve(address(this), address(_UniswapV2Router), _amount);\r\n        _UniswapV2Router.swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n            _amount,\r\n            0,\r\n            _path,\r\n            _recipient,\r\n            block.timestamp\r\n        );\r\n    }\r\n    \r\n    function _swapEthForTokens(uint256 _EthAmount) private {\r\n        address[] memory _path = new address[](2);\r\n        _path[0] = _UniswapV2Router.WETH();\r\n        _path[1] = address(this);\r\n\r\n        //@dev buy back tokens but send bought tokens to balancer to be burnt\r\n        _UniswapV2Router.swapExactETHForTokensSupportingFeeOnTransferTokens{value: _EthAmount}(\r\n                0,\r\n                _path,\r\n                address(_balancer),\r\n                block.timestamp\r\n            );\r\n    }\r\n    \r\n    function _initAntiBot() private {\r\n        if (_AntiBotEnabled) {\r\n            FTPAntiBot _antiBot = FTPAntiBot(_AntiBotAddress);\r\n            AntiBot = _antiBot;\r\n        }\r\n    }\r\n\r\n    function _buyAndBurnToken(uint256 _contractBalance) private lockTheSwap {\r\n        _lastBuyAndBurn = block.timestamp;\r\n        \r\n        //@dev using smart contract generated account to automate buybacks, Uniswap doesn't allow for a contract to by itself\r\n        _swapEthForTokens(_contractBalance);\r\n\r\n        //@dev How much tokens we swaped into\r\n        uint256 _swapedTokens = balanceOf(address(_balancer));\r\n        uint256 amountToBurn = _swapedTokens;\r\n        _Balances[address(_balancer)] = 0;\r\n        _Balances[_DeadWallet] = _Balances[_DeadWallet].add(amountToBurn);\r\n\r\n        \r\n        _totalBurntFees = _totalBurntFees.add(amountToBurn);\r\n\r\n        emit Transfer(address(_balancer), _DeadWallet, amountToBurn);\r\n        emit Burnt(amountToBurn);\r\n    }\r\n    \r\n    \r\n// ####################\r\n// ##### EXTERNAL #####\r\n// ####################\r\n    function banCount() external view returns (uint256) {\r\n        return _BanCount;\r\n    }\r\n    \r\n    function checkIfBanned(address _address) external view returns (bool) { //Tool for traders to verify ban status\r\n        bool _banBool = false;\r\n        if(_Bots[_address])\r\n            _banBool = true;\r\n        return _banBool;\r\n    }\r\n\r\n    function isAntiBotEnabled() external view returns (bool) {\r\n        return _AntiBotEnabled;\r\n    }    \r\n    \r\n    function isBuyAndBurnEnabled() external view returns (bool) {\r\n        return _buyAndBurnEnabled;\r\n    }\r\n    \r\n// ######################\r\n// ##### ONLY OWNER #####\r\n// ######################\r\n    function addLiquidity() external onlyOwner() {\r\n        require(!_TradingOpened,\"trading is already open\");\r\n        IUniswapV2Router02 _uniswapV2Router = IUniswapV2Router02(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D);\r\n        _UniswapV2Router = _uniswapV2Router;\r\n        _approve(address(this), address(_UniswapV2Router), _total_supply);\r\n        _UniswapV2Pair = IUniswapV2Factory(_uniswapV2Router.factory()).createPair(address(this), _uniswapV2Router.WETH());\r\n        _UniswapV2Router.addLiquidityETH{value: address(this).balance}(address(this),balanceOf(address(this)),0,0,owner(),block.timestamp); // check \r\n        _SwapEnabled = true;\r\n        _TradingOpened = true;\r\n        IERC20(_UniswapV2Pair).approve(address(_UniswapV2Router), type(uint).max);\r\n    }\r\n    \r\n    function manualBan(address _a) external onlyOwner() {\r\n       _banSeller(_a);\r\n    }\r\n    \r\n    function removeBan(address _a) external onlyOwner() {\r\n        _Bots[_a] = false;\r\n        _BanCount -= 1;\r\n    }\r\n    \r\n    function contractEthBalance() external view onlyOwner() returns (uint256) {\r\n        return address(this).balance;\r\n    }\r\n    \r\n    function setFeeAddress(address payable _feeAddress) external onlyOwner() {\r\n        _FeeAddress = _feeAddress;    \r\n        _ExcludedAddresses[_feeAddress] = true;\r\n    }\r\n   \r\n    function setBuyAndBurnFee(uint256 _fee) external onlyOwner() {\r\n        _BuyBackFee = _fee;    \r\n    }\r\n   \r\n    function setCharityFee(uint256 _fee) external onlyOwner() {\r\n        _CharityFee = _fee;    \r\n    }\r\n     \r\n    function setDevFee(uint256 _fee) external onlyOwner() {\r\n        _DevFee = _fee;    \r\n    }\r\n\r\n    function assignAntiBot(address _address) external onlyOwner() {                             // Highly recommend use of a function that can edit AntiBot contract address to allow for AntiBot version updates\r\n        _AntiBotAddress = _address;                 \r\n        _initAntiBot();\r\n    }\r\n\r\n    function setMinBuyAndBurnWei(uint256 _amount) public onlyOwner {\r\n        _minWeiBeforeSwap = _amount;\r\n    }\r\n\r\n    function setMinTokensSellForBuyBack(uint256 _amount) public onlyOwner {\r\n        _minTokensBeforeSwap = _amount;\r\n    }\r\n    \r\n    function emergencyContractEthRemoval(uint256 _amount, address payable _recipient) public onlyOwner {\r\n        //@dev all contract ETH is considered ETH to be used for buybacks. \r\n        //If someone accidentally sends ETH to contract there might be a slight chance to refund their ETH as long as buy back has not executed\r\n        uint256 _contractBalance = address(this).balance;\r\n        require( _amount <= _contractBalance, \"Can't remove more ETH than available ETH\");\r\n        \r\n        _recipient.transfer(_amount);\r\n    }\r\n    \r\n    function toggleAntiBot() external onlyOwner() {                               // Having a way to turn interaction with other contracts on/off is a good design practice\r\n        _AntiBotEnabled = !_AntiBotEnabled;\r\n    }    \r\n    \r\n    function toggleBuyAndBurn() external onlyOwner() {                               // Having a way to turn interaction with other contracts on/off is a good design practice\r\n        _buyAndBurnEnabled = !_buyAndBurnEnabled;\r\n    }\r\n    \r\n    function toggleSwapAndOpenTrade() external onlyOwner() {\r\n        _SwapEnabled = !_SwapEnabled;\r\n        _TradingOpened = !_TradingOpened;\r\n    }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_feeAddress\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"_devAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"Address\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"Origin\",\"type\":\"address\"}],\"name\":\"BanAddress\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"Amount\",\"type\":\"uint256\"}],\"name\":\"Burnt\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"_AntiBotAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_CalledBuyAndBurn\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_CalledCanSwap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_CalledReadyToTax\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_CalledReadyToTax2\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_CalledSenderNotUni\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_CalledSwapTokensForETH\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_CalledTax1\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_CalledTax2\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_CalledTax3\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_DeadWallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_SwapEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_TradingOpened\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_balancer\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_buyAndBurnInterval\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_lastBuyAndBurn\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_minTokensBeforeSwap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_minWeiBeforeSwap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_totalBurntFees\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"addLiquidity\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"assignAntiBot\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"banCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"checkIfBanned\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"contractEthBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"address payable\",\"name\":\"_recipient\",\"type\":\"address\"}],\"name\":\"emergencyContractEthRemoval\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isAntiBotEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isBuyAndBurnEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_a\",\"type\":\"address\"}],\"name\":\"manualBan\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_a\",\"type\":\"address\"}],\"name\":\"removeBan\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_fee\",\"type\":\"uint256\"}],\"name\":\"setBuyAndBurnFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_fee\",\"type\":\"uint256\"}],\"name\":\"setCharityFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_fee\",\"type\":\"uint256\"}],\"name\":\"setDevFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_feeAddress\",\"type\":\"address\"}],\"name\":\"setFeeAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"setMinBuyAndBurnWei\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"setMinTokensSellForBuyBack\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"toggleAntiBot\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"toggleBuyAndBurn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"toggleSwapAndOpenTrade\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]","ContractName":"DownDogeToken","CompilerVersion":"v0.8.4+commit.c7e474f2","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000c6108b1edd933fb0df3c355a9a93260bd2ee799b0000000000000000000000006ba2fa0e90d6bc31e1e8c3d128681e65ad03ffbd","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://e4faa20d3bfd2b4024577b194e74c01281d721f24033bfccc7adb3d49ebb0776"}]}