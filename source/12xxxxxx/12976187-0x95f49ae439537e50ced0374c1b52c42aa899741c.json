{"status":"1","message":"OK","result":[{"SourceCode":"{\"Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\"},\"IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller\\u0027s account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller\\u0027s tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender\\u0027s allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller\\u0027s\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"},\"ILiquidityProtection.sol\":{\"content\":\"pragma solidity ^0.8.0;\\n\\ninterface ILiquidityProtection {\\n    function liquidityAdded(\\n        uint _liquidity_block_number,\\n        uint _added_liquidity_amount,\\n        bool _IDOFactoryEnabled,\\n        uint _IDONumber,\\n        uint _IDOBlocks,\\n        uint _IDOParts,\\n        bool _firstBlockProtectionEnabled,\\n        bool _blockProtectionEnabled,\\n        uint _blocksToProtect,\\n        address _token\\n        ) external;\\n    function updateIDOPartAmount(address _from, uint _amount) external returns(bool);\\n    function verifyAmountPercent(uint _amount, uint _amountProtectorPercent) external view returns (bool);\\n    function verifyBlockNumber() external view returns(bool);\\n    function verifyFirstBlock() external view returns (bool);\\n    function verifyPriceAffect(address _from, uint _amount, uint _priceAfeectValue) external returns(bool);\\n    function updateRateLimitProtector(address _from, address _to, uint _rateLimitTime) external returns(bool);\\n    function verifyBlockedAddress(address _from, address _to) external view returns (bool);\\n    function blockAddress(address _address) external;\\n    function blockAddresses(address[] memory _addresses) external;\\n    function unblockAddress(address _address) external;\\n    function unblockAddresses(address[] memory _addresses) external;\\n}\"},\"IUniswapV2Factory.sol\":{\"content\":\"pragma solidity ^0.8.0;\\n\\ninterface IUniswapV2Factory {\\n    event PairCreated(address indexed token0, address indexed token1, address pair, uint);\\n\\n    function feeTo() external view returns (address);\\n    function feeToSetter() external view returns (address);\\n\\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\\n    function allPairs(uint) external view returns (address pair);\\n    function allPairsLength() external view returns (uint);\\n\\n    function createPair(address tokenA, address tokenB) external returns (address pair);\\n\\n    function setFeeTo(address) external;\\n    function setFeeToSetter(address) external;\\n}\"},\"IUniswapV2Router01.sol\":{\"content\":\"pragma solidity ^0.8.0;\\n\\ninterface IUniswapV2Router01 {\\n    function factory() external pure returns (address);\\n    function WETH() external pure returns (address);\\n\\n    function addLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint amountADesired,\\n        uint amountBDesired,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountA, uint amountB, uint liquidity);\\n    function addLiquidityETH(\\n        address token,\\n        uint amountTokenDesired,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\\n    function removeLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint liquidity,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountA, uint amountB);\\n    function removeLiquidityETH(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountToken, uint amountETH);\\n    function removeLiquidityWithPermit(\\n        address tokenA,\\n        address tokenB,\\n        uint liquidity,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\n    ) external returns (uint amountA, uint amountB);\\n    function removeLiquidityETHWithPermit(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\n    ) external returns (uint amountToken, uint amountETH);\\n    function swapExactTokensForTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external returns (uint[] memory amounts);\\n    function swapTokensForExactTokens(\\n        uint amountOut,\\n        uint amountInMax,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external returns (uint[] memory amounts);\\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\\n        external\\n        payable\\n        returns (uint[] memory amounts);\\n    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\\n        external\\n        returns (uint[] memory amounts);\\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\\n        external\\n        returns (uint[] memory amounts);\\n    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\\n        external\\n        payable\\n        returns (uint[] memory amounts);\\n\\n    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\\n    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\\n}\"},\"IUniswapV2Router02.sol\":{\"content\":\"pragma solidity ^0.8.0;\\n\\nimport \\\"./IUniswapV2Router01.sol\\\";\\n\\ninterface IUniswapV2Router02 is IUniswapV2Router01 {\\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountETH);\\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\n    ) external returns (uint amountETH);\\n\\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external;\\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external payable;\\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external;\\n}\"},\"Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _setOwner(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _setOwner(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _setOwner(newOwner);\\n    }\\n\\n    function _setOwner(address newOwner) private {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"},\"PuppyToken.sol\":{\"content\":\"pragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./Ownable.sol\\\";\\nimport \\\"./IUniswapV2Router02.sol\\\";\\nimport \\\"./IUniswapV2Factory.sol\\\";\\nimport \\\"./UsingSmartStateProtection.sol\\\";\\n\\ncontract PuppyToken is IERC20, Ownable, UsingSmartStateProtection {\\n\\n    address UniswapPair;\\n    IUniswapV2Router02 UniswapV2Router;\\n    address internal protection_service;\\n\\n    mapping (address =\\u003e uint256) private _rOwned;\\n    mapping (address =\\u003e mapping (address =\\u003e uint256)) private _allowances;\\n   \\n    uint256 private constant MAX = ~uint256(0);\\n    uint256 public constant _tTotal = 1e15 * 1e9; //1 quadrillion\\n    uint256 private _rTotal = (MAX - (MAX % _tTotal));\\n    uint256 private _tFeeTotal;\\n    bool public _feesEnabled = true;\\n    event FeesChanged(bool status);\\n\\n    string private _name = \\u0027Puppies Network\\u0027;\\n    string private _symbol = \\u0027PPN\\u0027;\\n    uint8 private _decimals = 9;\\n    \\n\\n    constructor () {\\n        _rOwned[_msgSender()] = _rTotal;\\n        UniswapV2Router = IUniswapV2Router02(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D);\\n        UniswapPair = IUniswapV2Factory(UniswapV2Router.factory())\\n            .createPair(address(this), UniswapV2Router.WETH());\\n        setPair(UniswapPair);\\n        emit Transfer(address(0), _msgSender(), _tTotal);\\n    }\\n    \\n    receive() external payable {}\\n    \\n    function name() public view returns (string memory) {\\n        return _name;\\n    }\\n\\n    function symbol() public view returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    function decimals() public view returns (uint8) {\\n        return _decimals;\\n    }\\n\\n    function totalSupply() public view override returns (uint256) {\\n        return _tTotal;\\n    }\\n\\n    function balanceOf(address account) public view override returns (uint256) {\\n        return tokenFromReflection(_rOwned[account]);\\n    }\\n\\n    function transfer(address recipient, uint256 amount) public override returns (bool) {\\n        _transfer(_msgSender(), recipient, amount);\\n        return true;\\n    }\\n\\n    function allowance(address owner, address spender) public view override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    function approve(address spender, uint256 amount) public override returns (bool) {\\n        _approve(_msgSender(), spender, amount);\\n        return true;\\n    }\\n\\n    function transferFrom(address sender, address recipient, uint256 amount) public override returns (bool) {\\n        _transfer(sender, recipient, amount);\\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()] - amount);\\n        return true;\\n    }\\n\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender] + addedValue);\\n        return true;\\n    }\\n\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender] - subtractedValue);\\n        return true;\\n    }\\n\\n    function totalFees() external view returns (uint256) {\\n        return _tFeeTotal;\\n    }\\n\\n    function disableFees() external onlyOwner {\\n        _feesEnabled = false;\\n        emit FeesChanged(false);\\n    }\\n\\n    function enableFees() external onlyOwner {\\n        _feesEnabled = true;\\n        emit FeesChanged(true);\\n    }\\n\\n    function reflect(uint256 tAmount) external {\\n        require(_feesEnabled, \\\"Not allowed\\\");\\n        address sender = _msgSender();\\n        (uint256 rAmount,,,,) = _getValues(tAmount);\\n        _rOwned[sender] = _rOwned[sender] - rAmount;\\n        _rTotal = _rTotal - rAmount;\\n        _tFeeTotal = _tFeeTotal + tAmount;\\n    }\\n\\n    function reflectionFromToken(uint256 tAmount, bool deductTransferFee) external view returns(uint256) {\\n        require(tAmount \\u003c= _tTotal, \\\"Amount must be less than supply\\\");\\n        if (!deductTransferFee) {\\n            (uint256 rAmount,,,,) = _getValues(tAmount);\\n            return rAmount;\\n        } else {\\n            (,uint256 rTransferAmount,,,) = _getValues(tAmount);\\n            return rTransferAmount;\\n        }\\n    }\\n\\n    function tokenFromReflection(uint256 rAmount) public view returns(uint256) {\\n        require(rAmount \\u003c= _rTotal, \\\"Amount must be less than total reflections\\\");\\n        uint256 currentRate =  _getRate();\\n        return rAmount / currentRate;\\n    }\\n\\n    function _approve(address owner, address spender, uint256 amount) private {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    function _transfer(address sender, address recipient, uint256 amount) private {\\n        require(sender != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(recipient != address(0), \\\"ERC20: transfer to the zero address\\\");\\n        if (_feesEnabled) {\\n            if (sender != address(this)) {\\n                _beforeTokenTransfer(sender, recipient, amount);\\n            }\\n            if (recipient == UniswapPair \\u0026\\u0026 sender != address(this)) {\\n                _transferWithFee(sender, recipient, amount);\\n            } else {\\n                 _transferWithoutFee(sender, recipient, amount);\\n            }\\n        } else {\\n            if (sender != address(this)) {\\n                _beforeTokenTransfer(sender, recipient, amount);\\n            }\\n            _transferWithoutFee(sender, recipient, amount);\\n        }\\n    }\\n\\n    function _transferWithFee(address sender, address recipient, uint256 tAmount) private {\\n        (uint256 rAmount, uint256 rTransferAmount, uint256 rFee, uint256 tTransferAmount, uint256 tFee) = _getValues(tAmount);\\n        _liquify(rFee);\\n        _rOwned[sender] = _rOwned[sender] - rAmount;\\n        _rOwned[recipient] = _rOwned[recipient] + rTransferAmount;\\n        _reflectFee(rFee, tFee);\\n        emit Transfer(sender, recipient, tTransferAmount);\\n    }\\n\\n    function _transferWithoutFee(address sender, address recipient, uint256 tAmount) private {\\n        (uint256 rAmount, uint256 rTransferAmount, uint256 rFee, , ) = _getValues(tAmount);\\n        _rOwned[sender] = _rOwned[sender] - rAmount;\\n        _rOwned[recipient] = _rOwned[recipient] + rTransferAmount + rFee; \\n        emit Transfer(sender, recipient, tAmount);\\n    }\\n\\n    function _reflectFee(uint256 rFee, uint256 tFee) private {\\n        _rTotal = _rTotal - rFee * 2 / 5;\\n        _tFeeTotal = _tFeeTotal + tFee;\\n    }\\n    \\n    function _getValues(uint256 tAmount) private view returns (uint256, uint256, uint256, uint256, uint256) {\\n        (uint256 tTransferAmount, uint256 tFee) = _getTValues(tAmount);\\n        uint256 currentRate =  _getRate();\\n        (uint256 rAmount, uint256 rTransferAmount, uint256 rFee) = _getRValues(tAmount, tFee, currentRate);\\n        return (rAmount, rTransferAmount, rFee, tTransferAmount, tFee);\\n    }\\n\\n    function _getTValues(uint256 tAmount) private pure returns (uint256, uint256) {\\n        uint256 tFee = tAmount * 5 / 100;\\n        uint256 tTransferAmount = tAmount - tFee;\\n        return (tTransferAmount, tFee);\\n    }\\n\\n    function _getRValues(uint256 tAmount, uint256 tFee, uint256 currentRate) private pure returns (uint256, uint256, uint256) {\\n        uint256 rAmount = tAmount * currentRate;\\n        uint256 rFee = tFee * currentRate;\\n        uint256 rTransferAmount = rAmount - rFee;\\n        return (rAmount, rTransferAmount, rFee);\\n    }\\n\\n    function _getRate() private view returns(uint256) {\\n        (uint256 rSupply, uint256 tSupply) = _getCurrentSupply();\\n        return rSupply / tSupply;\\n    }\\n\\n    function _getCurrentSupply() private view returns(uint256, uint256) {\\n        return (_rTotal, _tTotal);\\n    }\\n    \\n    function _liquify(uint256 rFee) private {\\n        _rOwned[address(this)] += rFee * 3 / 5;\\n        uint _tokenAmount = tokenFromReflection(rFee * 3 / 5);\\n        uint half = _tokenAmount / 2;\\n        uint anotherHalf = _tokenAmount - half;\\n        _approve(address(this), address(UniswapV2Router), half);\\n        address[] memory path = new address[](2);\\n        path[0] = address(this);\\n        path[1] = UniswapV2Router.WETH();\\n        uint balanceBefore = address(this).balance;\\n        UniswapV2Router.swapExactTokensForETHSupportingFeeOnTransferTokens(\\n            half,\\n            0, //accept any amount of ETH\\n            path,\\n            address(this),\\n            block.timestamp\\n        );\\n        uint balanceAfter = address(this).balance;\\n        _approve(address(this), address(UniswapV2Router), anotherHalf);\\n        UniswapV2Router.addLiquidityETH{value: balanceAfter - balanceBefore}(\\n            address(this),\\n            anotherHalf,\\n            0,\\n            0,\\n            owner(),\\n            block.timestamp\\n        );\\n    }\\n    \\n    function addLiquidityETH(\\n        uint _amountTokenDesired,\\n        uint _amountTokenMin,\\n        uint _amountETHMin,\\n        address _to,\\n        uint _deadline\\n    ) external onlyOwner {\\n        _approve(address(this), address(UniswapV2Router), _amountTokenDesired);\\n        UniswapV2Router.addLiquidityETH{value: _amountETHMin}(\\n            address(this),\\n            _amountTokenDesired,\\n            _amountTokenMin,\\n            _amountETHMin,\\n            _to,\\n            _deadline\\n        );\\n    }\\n    \\n    function addLiquidityETHAndEnableProtection(\\n        uint _amountTokenDesired,\\n        uint _amountTokenMin,\\n        uint _amountETHMin,\\n        address _to,\\n        uint _deadline,\\n        uint _IDONumber)\\n        external payable onlyOwner {\\n            _approve(address(this), address(UniswapV2Router), _amountTokenDesired);\\n            UniswapV2Router.addLiquidityETH{value: msg.value}(\\n                address(this),\\n                _amountTokenDesired,\\n                _amountTokenMin,\\n                _amountETHMin,\\n                _to,\\n                _deadline);\\n            ps().liquidityAdded(\\n                block.number,\\n                _amountTokenMin,\\n                IDOFactoryEnabled(),\\n                _IDONumber,\\n                IDOFactoryBlocks(),\\n                IDOFactoryParts(),\\n                firstBlockProtectionEnabled(),\\n                blockProtectionEnabled(),\\n                blocksToProtect(),\\n                address(this));\\n            enableProtection();\\n    }\\n    \\n    function _beforeTokenTransfer(address _from, address _to, uint _amount) internal {\\n        protectionBeforeTokenTransfer(_from, _to, _amount);\\n    }\\n\\n    function isAdmin() internal view override returns(bool) {\\n        return msg.sender == owner() || msg.sender == address(this); //replace with correct value\\n    }\\n\\n    function setProtectionService(address _ps) external onlyOwner {\\n        protection_service = _ps;\\n    }\\n\\n    function protectionService() internal view override returns(address) {\\n        return protection_service;\\n    }\\n\\n    function firstBlockProtectionEnabled() internal pure override returns(bool) {\\n        return true; //set true or false\\n    }\\n\\n    function blockProtectionEnabled() internal pure override returns(bool) {\\n        return true; //set true or false\\n    }\\n    \\n    function blocksToProtect() internal pure override returns(uint) {\\n        return 69; //replace with correct value\\n    }\\n    \\n    function amountPercentProtectionEnabled() internal pure override returns(bool) {\\n        return true; //set true or false\\n    }\\n    \\n    function amountPercentProtection() internal pure override returns(uint) {\\n        return 5; //replace with correct value\\n    }\\n    \\n    function IDOFactoryEnabled() internal pure override returns(bool) {\\n        return true; //set true or false\\n    }\\n\\n    function priceChangeProtectionEnabled() internal pure override returns(bool) {\\n        return false; //set true or false\\n    }\\n    \\n    function priceProtectionPercent() internal pure override returns(uint) {\\n        return 5; //replace with correct value\\n    }\\n    \\n    function rateLimitProtectionEnabled() internal pure override returns(bool) {\\n        return true; //set true or false\\n    }\\n    \\n    function rateLimitProtection() internal pure override returns(uint) {\\n        return 60; //replace with correct value\\n    }\\n    \\n    function IDOFactoryBlocks() internal pure override returns(uint) {\\n        return 30; //replace with correct value\\n    }\\n\\n    function IDOFactoryParts() internal pure override returns(uint) {\\n        return 3; //replace with correct value\\n    }\\n    \\n    function blockSuspiciousAddresses() internal pure override returns(bool) {\\n        return true; //set true or false\\n    }\\n}\\n    \"},\"UsingSmartStateProtection.sol\":{\"content\":\"pragma solidity ^0.8.0;\\nimport \\\"./ILiquidityProtection.sol\\\";\\n\\nabstract contract UsingSmartStateProtection {\\n\\n    bool internal protected = false;\\n    address internal pair;\\n    mapping(address =\\u003e bool) public excludedBuy;\\n    mapping(address =\\u003e bool) public excludedSell;\\n    mapping(address =\\u003e bool) public excludedTransfer;\\n\\n    function protectionService() internal view virtual returns(address);\\n    function isAdmin() internal view virtual returns(bool);\\n    function ps() internal view returns(ILiquidityProtection) {\\n        return ILiquidityProtection(protectionService());\\n    }\\n    \\n    function disableProtection() public {\\n        require(isAdmin());\\n        protected = false;\\n    }\\n\\n    function enableProtection() public {\\n        require(isAdmin());\\n        protected = true;\\n\\n    }\\n\\n    function isProtected() public view returns(bool) {\\n        return protected;\\n    }\\n\\n    function firstBlockProtectionEnabled() internal pure virtual returns(bool) {\\n        return false;\\n    }\\n\\n    function blockProtectionEnabled() internal pure virtual returns(bool) {\\n        return false;\\n    }\\n\\n    function blocksToProtect() internal pure virtual returns(uint) {\\n        return 69; //can\\u0027t buy tokens for 7 blocks\\n    }\\n\\n    function amountPercentProtectionEnabled() internal pure virtual returns(bool) {\\n        return false;\\n    }\\n\\n    function amountPercentProtection() internal pure virtual returns(uint) {\\n        return 5; //can\\u0027t buy more than 5 percent at once\\n    }\\n\\n    function priceChangeProtectionEnabled() internal pure virtual returns(bool) {\\n        return false;\\n    }\\n\\n    function priceProtectionPercent() internal pure virtual returns(uint) {\\n        return 5; //price can\\u0027t change for more than 5 percent during 1 transaction\\n    }\\n\\n    function rateLimitProtectionEnabled() internal pure virtual returns(bool) {\\n        return false;\\n    }\\n\\n    function rateLimitProtection() internal pure virtual returns(uint) {\\n        return 60; //user can make only one transaction per minute\\n    }\\n\\n    function IDOFactoryEnabled() internal pure virtual returns(bool) {\\n        return false;\\n    }\\n\\n    function IDOFactoryBlocks() internal pure virtual returns(uint) {\\n        return 30; //blocks for ido factory\\n    }\\n\\n    function IDOFactoryParts() internal pure virtual returns(uint) {\\n        return 3; //blocks should be devidable by parts\\n    }\\n\\n    function blockSuspiciousAddresses() internal pure virtual returns(bool) {\\n        return false;\\n    }\\n\\n    function blockAddress(address _address) external {\\n        require(isAdmin());\\n        ps().blockAddress(_address);\\n\\n    }\\n\\n    function blockAddresses(address[] memory _addresses) external {\\n        require(isAdmin());\\n        ps().blockAddresses(_addresses);\\n    }\\n\\n    function unblockAddress(address _address) external {\\n        require(isAdmin());\\n        ps().unblockAddress(_address);\\n    }\\n\\n    function unblockAddresses(address[] memory _addresses) external {\\n        require(isAdmin());\\n        ps().unblockAddresses(_addresses);\\n    }\\n    \\n    function excludeBuy(address[] memory _users) external {\\n        require(isAdmin());\\n        for (uint i = 0; i \\u003c _users.length; i ++) {\\n            excludedBuy[_users[i]] = true;\\n        }\\n    }\\n    \\n    function includeBuy(address[] memory _users) external {\\n        require(isAdmin());\\n        for (uint i = 0; i \\u003c _users.length; i ++) {\\n            excludedBuy[_users[i]] = false;\\n        }\\n    }\\n    \\n    function excludeSell(address[] memory _users) external {\\n        require(isAdmin());\\n        for (uint i = 0; i \\u003c _users.length; i ++) {\\n            excludedSell[_users[i]] = true;\\n        }\\n    }\\n    \\n    function includeSell(address[] memory _users) external {\\n        require(isAdmin());\\n        for (uint i = 0; i \\u003c _users.length; i ++) {\\n            excludedSell[_users[i]] = false;\\n        }\\n    }\\n    \\n    function excludeTransfer(address[] memory _users) external {\\n        require(isAdmin());\\n        for (uint i = 0; i \\u003c _users.length; i ++) {\\n            excludedTransfer[_users[i]] = true;\\n        }\\n    }\\n    \\n    function includeTransfer(address[] memory _users) external {\\n        require(isAdmin());\\n        for (uint i = 0; i \\u003c _users.length; i ++) {\\n            excludedTransfer[_users[i]] = false;\\n        }\\n    }\\n    \\n    function setPair(address _pair) internal {\\n        pair = _pair;\\n    }\\n    //main protection logic\\n    \\n    function protectionBeforeTokenTransfer(address _from, address _to, uint _amount) internal {\\n        if (protected \\u0026\\u0026 _from == pair \\u0026\\u0026 excludedBuy[_to]) {\\n            return;\\n        }\\n        if (protected \\u0026\\u0026 _to == pair \\u0026\\u0026 excludedSell[_from]) {\\n            return;\\n        }\\n        if (protected \\u0026\\u0026 _to != pair \\u0026\\u0026 _from != pair \\u0026\\u0026 excludedTransfer[_from]) {\\n            return;\\n        }\\n        if (protected) {\\n            require(!firstBlockProtectionEnabled() || !ps().verifyFirstBlock(), \\\"First Block Protector\\\");\\n            require(!blockProtectionEnabled() || !ps().verifyBlockNumber(), \\\"Block Protector\\\");\\n            require(!amountPercentProtectionEnabled() || !ps().verifyAmountPercent(_amount, priceProtectionPercent()), \\\"Amount Protector\\\");\\n            require(!priceChangeProtectionEnabled() || !ps().verifyPriceAffect(_from, _amount, priceProtectionPercent()), \\\"Percent protector\\\");\\n            require(!IDOFactoryEnabled() || !ps().updateIDOPartAmount(_from, _amount), \\\"IDO protector\\\");\\n            require(!rateLimitProtectionEnabled() || !ps().updateRateLimitProtector(_from, _to, rateLimitProtection()), \\\"Rate limit protector\\\");\\n            require(!blockSuspiciousAddresses() || !ps().verifyBlockedAddress(_from, _to), \\\"Blocked address protector\\\");\\n        }\\n    }\\n}\"}}","ABI":"[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"status\",\"type\":\"bool\"}],\"name\":\"FeesChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"_feesEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_tTotal\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amountTokenDesired\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amountTokenMin\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amountETHMin\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_deadline\",\"type\":\"uint256\"}],\"name\":\"addLiquidityETH\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amountTokenDesired\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amountTokenMin\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amountETHMin\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_IDONumber\",\"type\":\"uint256\"}],\"name\":\"addLiquidityETHAndEnableProtection\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"blockAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_addresses\",\"type\":\"address[]\"}],\"name\":\"blockAddresses\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"disableFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"disableProtection\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"enableFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"enableProtection\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_users\",\"type\":\"address[]\"}],\"name\":\"excludeBuy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_users\",\"type\":\"address[]\"}],\"name\":\"excludeSell\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_users\",\"type\":\"address[]\"}],\"name\":\"excludeTransfer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"excludedBuy\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"excludedSell\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"excludedTransfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_users\",\"type\":\"address[]\"}],\"name\":\"includeBuy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_users\",\"type\":\"address[]\"}],\"name\":\"includeSell\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_users\",\"type\":\"address[]\"}],\"name\":\"includeTransfer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isProtected\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tAmount\",\"type\":\"uint256\"}],\"name\":\"reflect\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tAmount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"deductTransferFee\",\"type\":\"bool\"}],\"name\":\"reflectionFromToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_ps\",\"type\":\"address\"}],\"name\":\"setProtectionService\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"rAmount\",\"type\":\"uint256\"}],\"name\":\"tokenFromReflection\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalFees\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"unblockAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_addresses\",\"type\":\"address[]\"}],\"name\":\"unblockAddresses\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]","ContractName":"PuppyToken","CompilerVersion":"v0.8.0+commit.c7dfd78e","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"ipfs://e4934fe91bbda4ea6ecdd510116e83fe6f7234862b759853c741339a584c6dbb"}]}