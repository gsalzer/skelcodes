{"status":"1","message":"OK","result":[{"SourceCode":"// File: @chainlink/contracts/src/v0.6/interfaces/AggregatorV3Interface.sol\r\n\r\n// SPDX-License-Identifier: MIT\r\npragma solidity ^0.6.0;\r\n\r\ninterface AggregatorV3Interface {\r\n\r\n  function decimals()\r\n    external\r\n    view\r\n    returns (\r\n      uint8\r\n    );\r\n\r\n  function description()\r\n    external\r\n    view\r\n    returns (\r\n      string memory\r\n    );\r\n\r\n  function version()\r\n    external\r\n    view\r\n    returns (\r\n      uint256\r\n    );\r\n\r\n  // getRoundData and latestRoundData should both raise \"No data present\"\r\n  // if they do not have data to report, instead of returning unset values\r\n  // which could be misinterpreted as actual reported values.\r\n  function getRoundData(\r\n    uint80 _roundId\r\n  )\r\n    external\r\n    view\r\n    returns (\r\n      uint80 roundId,\r\n      int256 answer,\r\n      uint256 startedAt,\r\n      uint256 updatedAt,\r\n      uint80 answeredInRound\r\n    );\r\n\r\n  function latestRoundData()\r\n    external\r\n    view\r\n    returns (\r\n      uint80 roundId,\r\n      int256 answer,\r\n      uint256 startedAt,\r\n      uint256 updatedAt,\r\n      uint80 answeredInRound\r\n    );\r\n\r\n}\r\n\r\n// File: gist-62587a7f0885c4cbdbd587ca0dc74a12/Counter.sol\r\n\r\npragma solidity ^0.6.7;\r\n\r\n\r\ninterface KeeperCompatibleInterface {\r\n    function checkUpkeep(bytes calldata checkData) external returns (bool upkeepNeeded, bytes memory performData);\r\n    function performUpkeep(bytes calldata performData) external;\r\n}\r\n\r\ncontract ProxyFarmer {\r\n    function rewardXUNIC() public {}\r\n}\r\n\r\ncontract RewardXUnicPeriodically is KeeperCompatibleInterface {\r\n\r\n    /**\r\n    * Use an interval in seconds and a timestamp to slow execution of Upkeep\r\n    */\r\n    uint public interval;\r\n    uint public lastTimeStamp;\r\n    ProxyFarmer farmer;\r\n    address owner;\r\n\r\n    \r\n    constructor(uint updateInterval, address _t) public {\r\n      interval = updateInterval;\r\n      lastTimeStamp = block.timestamp;\r\n      farmer = ProxyFarmer(_t);\r\n      owner = msg.sender;\r\n    }\r\n    \r\n    function changeInterval(uint updateInterval) public {\r\n      require(owner == msg.sender, \"Only the owner can change the update interval.\");\r\n      interval = updateInterval;\r\n      lastTimeStamp = block.timestamp;\r\n    }\r\n\r\n    function checkUpkeep(bytes calldata checkData) external override returns (bool upkeepNeeded, bytes memory performData) {\r\n        upkeepNeeded = (block.timestamp - lastTimeStamp) > interval;\r\n\r\n        // We don't use the checkData in this example\r\n        // checkData was defined when the Upkeep was registered\r\n        performData = checkData;\r\n    }\r\n\r\n    function performUpkeep(bytes calldata performData) external override {\r\n        lastTimeStamp = block.timestamp;\r\n\r\n        // We don't use the performData in this example\r\n        // performData is generated by the Keeper's call to your `checkUpkeep` function\r\n        performData;\r\n        farmer.rewardXUNIC();\r\n        \r\n    }\r\n    \r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"updateInterval\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_t\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"updateInterval\",\"type\":\"uint256\"}],\"name\":\"changeInterval\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"checkData\",\"type\":\"bytes\"}],\"name\":\"checkUpkeep\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"upkeepNeeded\",\"type\":\"bool\"},{\"internalType\":\"bytes\",\"name\":\"performData\",\"type\":\"bytes\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"interval\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastTimeStamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"performData\",\"type\":\"bytes\"}],\"name\":\"performUpkeep\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"RewardXUnicPeriodically","CompilerVersion":"v0.6.12+commit.27d51765","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"000000000000000000000000000000000000000000000000000000000000a8c00000000000000000000000001f2f77dcf34c55c119a27e74249f4f234934d1c8","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"ipfs://ab17ac44d5b396598ffb29c43cd1b45a7cd4a862cd95e6cc8a2ebbdf79150352"}]}