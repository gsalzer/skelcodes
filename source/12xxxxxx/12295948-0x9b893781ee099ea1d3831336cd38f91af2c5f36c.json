{"status":"1","message":"OK","result":[{"SourceCode":"// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.5.16;\r\n\r\n\r\nlibrary SafeMath {\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n        uint256 c = a * b;\r\n        require(c / a == b);\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b > 0);\r\n        uint256 c = a / b;\r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b <= a);\r\n        uint256 c = a - b;\r\n        return c;\r\n    }\r\n\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a);\r\n        return c;\r\n    }\r\n\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b != 0);\r\n        return a % b;\r\n    }\r\n}\r\n\r\ncontract IntermediaryBank {\r\n\r\nusing SafeMath for uint256;\r\n\r\naddress public bonusPool;\r\naddress public _admin;\r\n\r\n    event LOG_SETADMIN(\r\n        address indexed caller,\r\n        address indexed admin\r\n    );\r\n    \r\n    event LOG_SETPOOL(\r\n        address indexed caller,\r\n        address indexed pool\r\n    );\r\n    \r\n    event LOG_ETHTRANSFER(\r\n        address indexed to,\r\n        uint256 amount\r\n    );\r\n\r\n\r\n   constructor(\r\n    address _pool\r\n  ) public {\r\n      _admin=msg.sender;\r\n      bonusPool=_pool;\r\n  }\r\n    function () external payable {}\r\n    function setAdmin(address b)\r\n        external\r\n    {\r\n        require(msg.sender == _admin, \"ERR_NOT_ADMIN\");\r\n        emit LOG_SETADMIN(msg.sender, b);\r\n        _admin = b;\r\n    }\r\n    function setBonusPool(address b)\r\n        external\r\n    {\r\n        require(msg.sender == _admin, \"ERR_NOT_ADMIN\");\r\n        emit LOG_SETPOOL(msg.sender, b);\r\n        bonusPool = b;\r\n    }\r\n    \r\n    function poolTransferALL()\r\n        external\r\n    {\r\n        require(msg.sender == _admin, \"ERR_NOT_ADMIN\");\r\n        uint256 balance=address(this).balance;\r\n        (bool success, ) =address(uint160(bonusPool)).call.value(balance)(\"\");\r\n        require(success,\"ERR contract transfer eth to bonusPool fail,maybe gas fail\");\r\n        emit LOG_ETHTRANSFER(bonusPool, balance);\r\n    }\r\n    function transferPercentage(address _to, uint256 _percentage)\r\n        external\r\n    {\r\n        require(msg.sender == _admin, \"ERR_NOT_ADMIN\");\r\n        require(_percentage<=100, \"ERR_PERCENTAGE_TOO_LARGE\");\r\n        uint256 balance=(address(this).balance).mul(_percentage).div(100);\r\n        (bool success, ) =address(uint160(_to)).call.value(balance)(\"\");\r\n        require(success,\"ERR contract transfer eth fail,maybe gas fail\");\r\n        emit LOG_ETHTRANSFER(_to, balance);\r\n    }\r\n    \r\n    function transfer(address _to, uint256 _rawAmount)\r\n        external\r\n    {\r\n        require(msg.sender == _admin, \"ERR_NOT_ADMIN\");\r\n        \r\n        uint256 balance=address(this).balance;\r\n        \r\n        require(_rawAmount<=balance, \"amount exceed balance\");\r\n        \r\n        (bool success, ) =address(uint160(_to)).call.value(_rawAmount)(\"\");\r\n        require(success,\"ERR contract transfer eth fail,maybe gas fail\");\r\n        emit LOG_ETHTRANSFER(_to, _rawAmount);\r\n    }\r\n  \r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_pool\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"LOG_ETHTRANSFER\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"admin\",\"type\":\"address\"}],\"name\":\"LOG_SETADMIN\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"}],\"name\":\"LOG_SETPOOL\",\"type\":\"event\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"constant\":true,\"inputs\":[],\"name\":\"_admin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"bonusPool\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"poolTransferALL\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"b\",\"type\":\"address\"}],\"name\":\"setAdmin\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"b\",\"type\":\"address\"}],\"name\":\"setBonusPool\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_rawAmount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_percentage\",\"type\":\"uint256\"}],\"name\":\"transferPercentage\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"IntermediaryBank","CompilerVersion":"v0.5.16+commit.9c3226ce","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"000000000000000000000000f817ad50f5aab69ad32146617433321b7b8608d9","EVMVersion":"Default","Library":"","LicenseType":"GNU GPLv3","Proxy":"0","Implementation":"","SwarmSource":"bzzr://8127d7e5621216a4920479499c629e418f4e0cec3485fe68614e9182ac6152e0"}]}