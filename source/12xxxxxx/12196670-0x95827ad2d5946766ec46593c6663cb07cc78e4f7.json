{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity >=0.4.24;\r\n\r\nlibrary SafeMath {\r\n    function add(\r\n        uint256 a,\r\n        uint256 b)\r\n        internal\r\n        pure\r\n        returns(uint256 c)\r\n    {\r\n        c = a + b;\r\n        require(c >= a);\r\n    }\r\n\r\n    function sub(\r\n        uint256 a,\r\n        uint256 b)\r\n        internal\r\n        pure\r\n        returns(uint256 c)\r\n    {\r\n        require(b <= a);\r\n        c = a - b;\r\n    }\r\n\r\n    function mul(\r\n        uint256 a,\r\n        uint256 b)\r\n        internal\r\n        pure\r\n        returns(uint256 c) {\r\n        c = a * b;\r\n        require(a == 0 || c / a == b);\r\n    }\r\n    \r\n     function div(\r\n        uint256 a,\r\n        uint256 b)\r\n        internal\r\n        pure\r\n        returns(uint256 c) {\r\n        require(b > 0);\r\n        c = a / b;\r\n    }\r\n}\r\n\r\ninterface IERC20 {\r\n    // ERC20 Optional Views\r\n    function name() external view returns (string memory);\r\n\r\n    function symbol() external view returns (string memory);\r\n\r\n    function decimals() external view returns (uint8);\r\n\r\n    // Views\r\n    function totalSupply() external view returns (uint);\r\n\r\n    function balanceOf(address owner) external view returns (uint);\r\n\r\n    function allowance(address owner, address spender) external view returns (uint);\r\n\r\n    // Mutative functions\r\n    function transfer(address to, uint value) external returns (bool);\r\n\r\n    function approve(address spender, uint value) external returns (bool);\r\n\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint value\r\n    ) external returns (bool);\r\n\r\n    // Events\r\n    event Transfer(address indexed from, address indexed to, uint value);\r\n\r\n    event Approval(address indexed owner, address indexed spender, uint value);\r\n}\r\n\r\n\r\n// https://docs.synthetix.io/contracts/source/contracts/owned\r\ncontract Owned {\r\n    address public owner;\r\n    address public nominatedOwner;\r\n\r\n    constructor(address _owner) public {\r\n        require(_owner != address(0), \"Owner address cannot be 0\");\r\n        owner = _owner;\r\n        emit OwnerChanged(address(0), _owner);\r\n    }\r\n\r\n    function nominateNewOwner(address _owner) external onlyOwner {\r\n        nominatedOwner = _owner;\r\n        emit OwnerNominated(_owner);\r\n    }\r\n\r\n    function acceptOwnership() external {\r\n        require(msg.sender == nominatedOwner, \"You must be nominated before you can accept ownership\");\r\n        emit OwnerChanged(owner, nominatedOwner);\r\n        owner = nominatedOwner;\r\n        nominatedOwner = address(0);\r\n    }\r\n\r\n    modifier onlyOwner {\r\n        _onlyOwner();\r\n        _;\r\n    }\r\n\r\n    function _onlyOwner() private view {\r\n        require(msg.sender == owner, \"Only the contract owner may perform this action\");\r\n    }\r\n\r\n    event OwnerNominated(address newOwner);\r\n    event OwnerChanged(address oldOwner, address newOwner);\r\n}\r\n\r\ncontract Pausable is Owned {\r\n  event Pause();\r\n  event Unpause();\r\n\r\n  bool public paused = false;\r\n\r\n  modifier whenNotPaused() {\r\n    require(!paused);\r\n    _;\r\n  }\r\n\r\n  modifier whenPaused() {\r\n    require(paused);\r\n    _;\r\n  }\r\n\r\n  function pause() onlyOwner whenNotPaused public {\r\n    paused = true;\r\n    emit Pause();\r\n  }\r\n\r\n  function unpause() onlyOwner whenPaused public {\r\n    paused = false;\r\n    emit Unpause();\r\n  }\r\n}\r\n\r\n\r\n\r\n\r\npragma solidity >=0.4.24;\r\n\r\ncontract IDODistribution is Owned, Pausable {\r\n    \r\n    using SafeMath for uint;\r\n\r\n    /**\r\n     * @notice Authorised address able to call batchDeposit\r\n     */\r\n    address public authority;\r\n\r\n    /**\r\n     * @notice Address of ERC20 token\r\n     */\r\n    address public erc20Address;\r\n\r\n\r\n    mapping(address => uint) balances;\r\n    mapping(address => uint) counts;\r\n\r\n    uint public totalSupply;\r\n\r\n    constructor(\r\n        address _owner,\r\n        address _authority\r\n    ) public Owned(_owner) {\r\n        authority = _authority;\r\n    }\r\n\r\n    function balanceOf(address _address) public view returns (uint) {\r\n        return balances[_address];\r\n    }\r\n\r\n    function depositNumberOf(address _address) public view returns (uint) {\r\n        return counts[_address];\r\n    }\r\n\r\n    // ========== EXTERNAL SETTERS ==========\r\n\r\n    function setTokenAddress(address _erc20Address) public onlyOwner {\r\n        erc20Address = _erc20Address;\r\n    }\r\n\r\n    /**\r\n     * @notice Set the address of the contract authorised to call distributeReward()\r\n     * @param _authority Address of the authorised calling contract.\r\n     */\r\n    function setAuthority(address _authority) public onlyOwner {\r\n        authority = _authority;\r\n    }\r\n\r\n    function batchDeposit(address[] destinations, uint[] amounts) public returns (bool) {\r\n        require(msg.sender == authority, \"Caller is not authorized\");\r\n        require(erc20Address != address(0), \"erc20 token address is not set\");\r\n        require(destinations.length == amounts.length, \"length of inputs not match\");\r\n\r\n        // we don't need check amount[i] > 0 or destinations != 0x0 because they cannot claim anyway\r\n        uint amount = 0;\r\n        for (uint i = 0; i < amounts.length; i++) {\r\n            amount = amount.add(amounts[i]);\r\n            balances[destinations[i]] =  balances[destinations[i]].add(amounts[i]);\r\n            counts[destinations[i]] += 1;\r\n        }\r\n\r\n        totalSupply = totalSupply.add(amount);\r\n\r\n        emit TokenDeposit(amount);\r\n        return true;\r\n    }\r\n\r\n    function claim() public whenNotPaused returns (bool) {\r\n        require(erc20Address != address(0), \"erc20 token address is not set\");\r\n        require(balances[msg.sender] > 0, \"account balance is zero\");\r\n\r\n        uint _amount = balances[msg.sender];\r\n        require(\r\n            IERC20(erc20Address).balanceOf(address(this)) >= _amount,\r\n            \"This contract does not have enough tokens to distribute\"\r\n        );\r\n\r\n        balances[msg.sender] = 0;\r\n        IERC20(erc20Address).transfer(msg.sender, _amount);\r\n        totalSupply = totalSupply.sub(_amount);\r\n\r\n        emit UserClaimed(msg.sender, _amount);\r\n        return true;\r\n    }\r\n\r\n    /* ========== Events ========== */\r\n    event TokenDeposit(uint _amount);\r\n    event UserClaimed(address _address, uint _amount);\r\n}","ABI":"[{\"constant\":true,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"depositNumberOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"nominateNewOwner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_erc20Address\",\"type\":\"address\"}],\"name\":\"setTokenAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"erc20Address\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"destinations\",\"type\":\"address[]\"},{\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"name\":\"batchDeposit\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"claim\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"nominatedOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"acceptOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_authority\",\"type\":\"address\"}],\"name\":\"setAuthority\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"authority\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_authority\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"TokenDeposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_address\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"UserClaimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Pause\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Unpause\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnerNominated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"oldOwner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnerChanged\",\"type\":\"event\"}]","ContractName":"IDODistribution","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"00000000000000000000000031497f6d5011627f2ae83d9afc1e58010f6fe23b00000000000000000000000031497f6d5011627f2ae83d9afc1e58010f6fe23b","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"bzzr://e453a34603ae8829ea0fe53dc3c12e96ba7e9928f139246b49ba83787d8f523f"}]}