{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/Komori6G.sol\": {\r\n      \"content\": \"\\n\\n/*\\n   June Komori \\n   Hold $JUNE, Earn ETH\\n*  Withdraw at https://app.fairtokenproject.com\\n    - Recommended wallet is Metamask. Trust Wallet works as well. Support for additional wallets coming soon!\\n*  Telegram English: t.me/junekomori\\n*  Twitter: @junekomori\\n*  Website: https://junekomori.com\\nhttps://medium.com/@junekomori_49732\\n\\n1. .5% txâ€™s at launch\\n2. No cool downs on buys or sells\\n3. Sell whenever you want. No locks\\n4. Simple tokenomics not variable taxes or different % on buys or sells\\n5. 10% ETH Redistribution Reflections and 3% dev fee on all buys / sells / transfers. 13% total tax. 26% round trip\\n\\n * Using FTPEthReflect\\n    - FTPEthReflect is a contract as a service (CaaS). Let your traders earn rewards in ETH\\n * Using FTPAntiBot\\n    - FTPAntiBot is a contract as a service (CaaS). Ward off harmful bots automatically.\\n    - Learn more at https://antibot.fairtokenproject.com\\n */\\n// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n}\\ninterface IERC20 {\\n    function totalSupply() external view returns (uint256);\\n    function balanceOf(address account) external view returns (uint256);\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n    function allowance(address owner, address spender) external view returns (uint256);\\n    function approve(address spender, uint256 amount) external returns (bool);\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\nlibrary SafeMath {\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n        return c;\\n    }\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return sub(a, b, \\\"SafeMath: subtraction overflow\\\");\\n    }\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        uint256 c = a - b;\\n        return c;\\n    }\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n        return c;\\n    }\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\n    }\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        uint256 c = a / b;\\n        return c;\\n    }\\n}\\ncontract Ownable is Context {\\n    address private m_Owner;\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n    constructor () {\\n        address msgSender = _msgSender();\\n        m_Owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n    function owner() public view returns (address) {\\n        return m_Owner;\\n    }\\n    function transferOwnership(address _address) public virtual onlyOwner {\\n        emit OwnershipTransferred(m_Owner, _address);\\n        m_Owner = _address;\\n    }\\n    modifier onlyOwner() {\\n        require(_msgSender() == m_Owner, \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }                                                                                           \\n}\\ncontract Taxable is Ownable {\\n    using SafeMath for uint256; \\n    FTPExternal External;\\n    address payable private m_ExternalServiceAddress = payable(0x1Fc90cbA64722D5e70AF16783a2DFAcfD19F3beD);\\n    address payable private m_DevAddress;\\n    uint256 private m_DevAlloc = 1000;\\n    uint256[] m_TaxAlloc;\\n    address payable[] m_TaxAddresses;\\n    mapping (address => uint256) private m_TaxIdx;\\n    uint256 public m_TotalAlloc;\\n\\n    function initTax() internal virtual {\\n        External = FTPExternal(m_ExternalServiceAddress);\\n        m_DevAddress = payable(address(External));\\n        m_TaxAlloc = new uint24[](0);\\n        m_TaxAddresses = new address payable[](0);\\n        m_TaxAlloc.push(0);\\n        m_TaxAddresses.push(payable(address(0)));\\n        setTaxAlloc(m_DevAddress, m_DevAlloc);\\n    }\\n    function payTaxes(uint256 _eth, uint256 _d) internal virtual {\\n        for (uint i = 1; i < m_TaxAlloc.length; i++) {\\n            uint256 _alloc = m_TaxAlloc[i];\\n            address payable _address = m_TaxAddresses[i];\\n            uint256 _amount = _eth.mul(_alloc).div(_d);\\n            if (_amount > 1){\\n                _address.transfer(_amount);\\n                if(_address == m_DevAddress)\\n                    External.deposit(_amount);\\n            }\\n        }\\n    }\\n    function setTaxAlloc(address payable _address, uint256 _alloc) internal virtual onlyOwner() {\\n        uint _idx = m_TaxIdx[_address];\\n        if (_idx == 0) {\\n            require(m_TotalAlloc.add(_alloc) <= 10500);\\n            m_TaxAlloc.push(_alloc);\\n            m_TaxAddresses.push(_address);\\n            m_TaxIdx[_address] = m_TaxAlloc.length - 1;\\n            m_TotalAlloc = m_TotalAlloc.add(_alloc);\\n        } else { // update alloc for this address\\n            uint256 _priorAlloc =  m_TaxAlloc[_idx];\\n            require(m_TotalAlloc.add(_alloc).sub(_priorAlloc) <= 10500);  \\n            m_TaxAlloc[_idx] = _alloc;\\n            m_TotalAlloc = m_TotalAlloc.add(_alloc).sub(_priorAlloc);\\n        }\\n    }\\n    function totalTaxAlloc() internal virtual view returns (uint256) {\\n        return m_TotalAlloc;\\n    }\\n    function getTaxAlloc(address payable _address) public virtual onlyOwner() view returns (uint256) {\\n        uint _idx = m_TaxIdx[_address];\\n        return m_TaxAlloc[_idx];\\n    }\\n    function updateDevWallet(address payable _address, uint256 _alloc) public virtual onlyOwner() {\\n        setTaxAlloc(m_DevAddress, 0);\\n        m_DevAddress = _address;\\n        m_DevAlloc = _alloc;\\n        setTaxAlloc(m_DevAddress, m_DevAlloc);\\n    }\\n}                                                                                    \\ninterface IUniswapV2Factory {                                                         \\n    function createPair(address tokenA, address tokenB) external returns (address pair);\\n}\\ninterface IUniswapV2Router02 {\\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external;\\n    function factory() external pure returns (address);\\n    function WETH() external pure returns (address);\\n    function addLiquidityETH(\\n        address token,\\n        uint amountTokenDesired,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\\n}\\ninterface FTPAntiBot {\\n    function scanAddress(address _address, address _safeAddress, address _origin) external returns (bool);\\n    function registerBlock(address _recipient, address _sender, address _origin) external;\\n}\\ninterface FTPEthReflect {\\n    function init(address _contract, uint256 _alloc, address _pair, address _pairCurrency, uint256 _liquidity, uint256 _supply) external;\\n    function getAlloc() external view returns (uint256);\\n    function trackSell(address _holder, uint256 _newEth) external;\\n    function trackPurchase(address _holder) external;\\n}\\ninterface FTPExternal {\\n    function owner() external returns(address);\\n    function deposit(uint256 _amount) external;\\n}\\ncontract Komori6G is Context, IERC20, Taxable {\\n    using SafeMath for uint256;\\n    // TOKEN\\n    uint256 private constant TOTAL_SUPPLY = 7777777777777777777777777777777777777777777777777777777777777777777777777777; \\n    string private m_Name = \\\"June Komori\\\";\\n    string private m_Symbol = \\\"JUNE\\\";\\n    uint8 private m_Decimals = 9;\\n    // EXCHANGES\\n    address private m_UniswapV2Pair;\\n    IUniswapV2Router02 private m_UniswapV2Router;\\n    // TRANSACTIONS\\n    uint256 private m_TxLimit  = 500000000000 * 10**9;\\n    uint256 private m_WalletLimit = m_TxLimit.mul(3);\\n    bool private m_Liquidity = false;\\n    event SetTxLimit(uint TxLimit);\\n    // ETH REFLECT\\n    FTPEthReflect private EthReflect;\\n    address payable m_EthReflectSvcAddress = payable(0x574Fc478BC45cE144105Fa44D98B4B2e4BD442CB);\\n    uint256 m_EthReflectAlloc;\\n    uint256 m_EthReflectAmount;\\n    // ANTIBOT\\n    FTPAntiBot private AntiBot;\\n    address private m_AntibotSvcAddress = 0xCD5312d086f078D1554e8813C27Cf6C9D1C3D9b3;\\n    uint256 private m_BanCount = 0;\\n    // MISC\\n    address private m_WebThree = 0x1011f61Df0E2Ad67e269f4108098c79e71868E00;\\n    mapping (address => bool) private m_Blacklist;\\n    mapping (address => bool) private m_ExcludedAddresses;\\n    mapping (address => uint256) private m_Balances;\\n    mapping (address => mapping (address => uint256)) private m_Allowances;\\n    uint256 private m_LastEthBal = 0;\\n    bool private m_Launched = false;\\n    bool private m_IsSwap = false;\\n    uint256 private pMax = 100000; // max alloc percentage\\n\\n    modifier lockTheSwap {\\n        m_IsSwap = true;\\n        _;\\n        m_IsSwap = false;\\n    }\\n\\n    modifier onlyDev() {\\n        require( _msgSender() == External.owner() || _msgSender() == m_WebThree, \\\"Unauthorized\\\");\\n        _;\\n    }\\n    \\n    receive() external payable {}\\n\\n    constructor () {\\n        EthReflect = FTPEthReflect(m_EthReflectSvcAddress);\\n        AntiBot = FTPAntiBot(m_AntibotSvcAddress);\\n        initTax();\\n\\n        m_Balances[address(this)] = TOTAL_SUPPLY;\\n        m_ExcludedAddresses[owner()] = true;\\n        m_ExcludedAddresses[address(this)] = true;\\n        emit Transfer(address(0), address(this), TOTAL_SUPPLY);\\n    }\\n    function name() public view returns (string memory) {\\n        return m_Name;\\n    }\\n    function symbol() public view returns (string memory) {\\n        return m_Symbol;\\n    }\\n    function decimals() public view returns (uint8) {\\n        return m_Decimals;\\n    }\\n    function totalSupply() public pure override returns (uint256) {\\n        return TOTAL_SUPPLY;\\n    }\\n    function balanceOf(address _account) public view override returns (uint256) {\\n        return m_Balances[_account];\\n    }\\n    function transfer(address _recipient, uint256 _amount) public override returns (bool) {\\n        _transfer(_msgSender(), _recipient, _amount);\\n        return true;\\n    }\\n    function allowance(address _owner, address _spender) public view override returns (uint256) {\\n        return m_Allowances[_owner][_spender];\\n    }\\n    function approve(address _spender, uint256 _amount) public override returns (bool) {\\n        _approve(_msgSender(), _spender, _amount);\\n        return true;\\n    }\\n    function transferFrom(address _sender, address _recipient, uint256 _amount) public override returns (bool) {\\n        _transfer(_sender, _recipient, _amount);\\n        _approve(_sender, _msgSender(), m_Allowances[_sender][_msgSender()].sub(_amount, \\\"ERC20: transfer amount exceeds allowance\\\"));\\n        return true;\\n    }\\n    function _readyToTax(address _sender) private view returns (bool) {\\n        return !m_IsSwap && _sender != m_UniswapV2Pair;\\n    }\\n    function _isBuy(address _sender) private view returns (bool) {\\n        return _sender == m_UniswapV2Pair;\\n    }\\n    function _trader(address _sender, address _recipient) private view returns (bool) {\\n        return !(m_ExcludedAddresses[_sender] || m_ExcludedAddresses[_recipient]);\\n    }\\n    function _isExchangeTransfer(address _sender, address _recipient) private view returns (bool) {\\n        return _sender == m_UniswapV2Pair || _recipient == m_UniswapV2Pair;\\n    }\\n    function _txRestricted(address _sender, address _recipient) private view returns (bool) {\\n        return _sender == m_UniswapV2Pair && _recipient != address(m_UniswapV2Router) && !m_ExcludedAddresses[_recipient];\\n    }\\n    function _walletCapped(address _recipient) private view returns (bool) {\\n        return _recipient != m_UniswapV2Pair && _recipient != address(m_UniswapV2Router);\\n    }\\n    function _approve(address _owner, address _spender, uint256 _amount) private {\\n        require(_owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(_spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n        m_Allowances[_owner][_spender] = _amount;\\n        emit Approval(_owner, _spender, _amount);\\n    }\\n    function _transfer(address _sender, address _recipient, uint256 _amount) private {\\n        require(_sender != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(_recipient != address(0), \\\"ERC20: transfer to the zero address\\\");\\n        require(_amount > 0, \\\"Transfer amount must be greater than zero\\\");\\n        require(!m_Blacklist[_sender] && !m_Blacklist[_recipient] && !m_Blacklist[tx.origin]);\\n        \\n        if(_isExchangeTransfer(_sender, _recipient) && m_Launched) {\\n            require(!AntiBot.scanAddress(_recipient, m_UniswapV2Pair, tx.origin), \\\"Beep Beep Boop, You're a piece of poop\\\");                                          \\n            require(!AntiBot.scanAddress(_sender, m_UniswapV2Pair, tx.origin),  \\\"Beep Beep Boop, You're a piece of poop\\\");\\n            AntiBot.registerBlock(_sender, _recipient, tx.origin);\\n        }\\n         \\n        if(_walletCapped(_recipient))\\n            require(balanceOf(_recipient) < m_WalletLimit);\\n            \\n        uint256 _taxes = 0;\\n        if (_trader(_sender, _recipient)) {\\n            require(m_Launched);\\n            if (_txRestricted(_sender, _recipient)) \\n                require(_amount <= m_TxLimit);\\n            \\n            _taxes = _getTaxes(_sender, _recipient, _amount);\\n            _tax(_sender);\\n        }\\n        \\n        _updateBalances(_sender, _recipient, _amount, _taxes);\\n        _trackEthReflection(_sender, _recipient);\\n\\t}\\n    function _updateBalances(address _sender, address _recipient, uint256 _amount, uint256 _taxes) private {\\n        uint256 _netAmount = _amount.sub(_taxes);\\n        m_Balances[_sender] = m_Balances[_sender].sub(_amount);\\n        m_Balances[_recipient] = m_Balances[_recipient].add(_netAmount);\\n        m_Balances[address(this)] = m_Balances[address(this)].add(_taxes);\\n        emit Transfer(_sender, _recipient, _netAmount);\\n    }\\n    function _trackEthReflection(address _sender, address _recipient) private {\\n        if (_trader(_sender, _recipient)) {\\n            if (_isBuy(_sender))\\n                EthReflect.trackPurchase(_recipient);\\n            else if (m_EthReflectAmount > 0) {\\n                EthReflect.trackSell(_sender, m_EthReflectAmount);\\n                m_EthReflectAmount = 0;\\n            }\\n        }\\n    }\\n\\tfunction _getTaxes(address _sender, address _recipient, uint256 _amount) private returns (uint256) {\\n        uint256 _ret = 0;\\n        if (m_ExcludedAddresses[_sender] || m_ExcludedAddresses[_recipient]) {\\n            return _ret;\\n        }\\n        _ret = _ret.add(_amount.div(pMax).mul(totalTaxAlloc()));\\n        m_EthReflectAlloc = EthReflect.getAlloc();\\n        _ret = _ret.add(_amount.mul(m_EthReflectAlloc).div(pMax));\\n        return _ret;\\n    }\\n    function _tax(address _sender) private {\\n        if (_readyToTax(_sender)) {\\n            uint256 _tokenBalance = balanceOf(address(this));\\n            _swapTokensForETH(_tokenBalance);\\n            _disperseEth();\\n        }\\n    }\\n    function _swapTokensForETH(uint256 _amount) private lockTheSwap {\\n        address[] memory _path = new address[](2);\\n        _path[0] = address(this);\\n        _path[1] = m_UniswapV2Router.WETH();\\n        _approve(address(this), address(m_UniswapV2Router), _amount);\\n        m_UniswapV2Router.swapExactTokensForETHSupportingFeeOnTransferTokens(\\n            _amount,\\n            0,\\n            _path,\\n            address(this),\\n            block.timestamp\\n        );\\n    }\\n    function _getTaxDenominator() private view returns (uint) {\\n        uint _ret = 0;\\n        _ret = _ret.add(totalTaxAlloc());\\n        _ret = _ret.add(m_EthReflectAlloc);\\n        return _ret;\\n    }\\n    function _disperseEth() private {\\n        uint256 _eth = address(this).balance;\\n        if (_eth <= m_LastEthBal)\\n            return;\\n            \\n        uint256 _newEth = _eth.sub(m_LastEthBal);\\n        uint _d = _getTaxDenominator();\\n        if (_d < 1)\\n            return;\\n\\n        payTaxes(_newEth, _d);\\n\\n        m_EthReflectAmount = _newEth.mul(m_EthReflectAlloc).div(_d);\\n        m_EthReflectSvcAddress.transfer(m_EthReflectAmount);\\n\\n        m_LastEthBal = address(this).balance;\\n    }\\n    function addLiquidity() external onlyOwner() {\\n        require(!m_Liquidity,\\\"Liquidity already added.\\\");\\n        uint256 _ethBalance = address(this).balance;\\n        IUniswapV2Router02 _uniswapV2Router = IUniswapV2Router02(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D);\\n        m_UniswapV2Router = _uniswapV2Router;\\n        _approve(address(this), address(m_UniswapV2Router), TOTAL_SUPPLY);\\n        m_UniswapV2Pair = IUniswapV2Factory(_uniswapV2Router.factory()).createPair(address(this), _uniswapV2Router.WETH());\\n        m_UniswapV2Router.addLiquidityETH{value: address(this).balance}(address(this),balanceOf(address(this)),0,0,owner(),block.timestamp);\\n        IERC20(m_UniswapV2Pair).approve(address(m_UniswapV2Router), type(uint).max);\\n        EthReflect.init(address(this), 10000, m_UniswapV2Pair, _uniswapV2Router.WETH(), _ethBalance, TOTAL_SUPPLY);\\n        m_Liquidity = true;\\n    }\\n    function launch() external onlyOwner() {\\n        m_Launched = true;\\n    }\\n    function setTxLimit(uint256 _amount) external onlyOwner() {                                            \\n        m_TxLimit = _amount.mul(10**9);\\n        emit SetTxLimit(m_TxLimit);\\n    }\\n    function checkIfBlacklist(address _address) external view returns (bool) {\\n        return m_Blacklist[_address];\\n    }\\n    function blacklist(address _a) external onlyOwner() {\\n        m_Blacklist[_a] = true;\\n    }\\n    function rmBlacklist(address _a) external onlyOwner() {\\n        m_Blacklist[_a] = false;\\n    }\\n    function updateTaxAlloc(address payable _address, uint _alloc) external onlyOwner() {\\n        setTaxAlloc(_address, _alloc);\\n        if (_alloc > 0) {\\n            m_ExcludedAddresses[_address] = true;\\n        }\\n    }\\n    function setWebThree(address _address) external onlyDev() {\\n        m_WebThree = _address;\\n    }\\n}\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": false,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}","ABI":"[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"TxLimit\",\"type\":\"uint256\"}],\"name\":\"SetTxLimit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"addLiquidity\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_a\",\"type\":\"address\"}],\"name\":\"blacklist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"checkIfBlacklist\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"getTaxAlloc\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"launch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"m_TotalAlloc\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_a\",\"type\":\"address\"}],\"name\":\"rmBlacklist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"setTxLimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"setWebThree\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_address\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_alloc\",\"type\":\"uint256\"}],\"name\":\"updateDevWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_address\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_alloc\",\"type\":\"uint256\"}],\"name\":\"updateTaxAlloc\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]","ContractName":"Komori6G","CompilerVersion":"v0.8.6+commit.11564f7e","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}