{"status":"1","message":"OK","result":[{"SourceCode":"# @version 0.2.12\r\n\"\"\"\r\n@title Yearn Vault Token Burner\r\n@notice Withdraw from vault and send result to receiver\r\n\"\"\"\r\n\r\nfrom vyper.interfaces import ERC20\r\n\r\n\r\ninterface YearnVaultToken:\r\n    def withdraw(amount:uint256): nonpayable\r\n    def token() -> address: view\r\n\r\nreceiver: public(address)\r\nrecovery: public(address)\r\nowner: public(address)\r\nis_killed: public(bool)\r\nemergency_owner: public(address)\r\nfuture_owner: public(address)\r\nfuture_emergency_owner: public(address)\r\nburnable_coins:public(HashMap[address,address])\r\n\r\n\r\nevent Burn:\r\n    lp_token: address\r\n    amount: uint256\r\n    token0_amount:uint256\r\n\r\n@external\r\ndef __init__(_receiver:address, _recovery: address, _owner: address, _emergency_owner: address):\r\n    \"\"\"\r\n    @notice Contract constructor\r\n    @param _receiver the receiver address to which the resultant tokens will be sent\r\n    @param _recovery Address that tokens are transferred to during an\r\n                     emergency token recovery.\r\n    @param _owner Owner address. Can kill the contract, recover tokens\r\n                  and modify the recovery address.\r\n    @param _emergency_owner Emergency owner address. Can kill the contract\r\n                            and recover tokens.\r\n    \"\"\"\r\n    self.receiver = _receiver\r\n    self.recovery = _recovery\r\n    self.owner = _owner\r\n    self.emergency_owner = _emergency_owner\r\n    self.burnable_coins[0x986b4AFF588a109c09B50A03f42E4110E29D353F]=0xA3D87FffcE63B53E0d54fAa1cc983B7eB0b74A9c # Yearn Vault Curve: sETH -> withdraw and get Curve.fi ETH/sETH LP token\r\n    self.burnable_coins[0xdCD90C7f6324cfa40d7169ef80b12031770B4325]=0x06325440D014e39736583c165C2963BA99fAf14E # Yearn Vault Curve: stETH -> withdraw and get Curve.fi ETH/stETH LP token\r\n    \r\n\r\n\r\n\r\n@external\r\ndef burn(_coin: address) -> bool:\r\n    \"\"\"\r\n    @notice Convert `_coin` by leaving Sushibar and get Sushi, then send it to receiver\r\n    @param _coin Address of the coin being converted\r\n    @return bool success\r\n    \"\"\"\r\n    assert not self.is_killed  # dev: is killed\r\n    assert self.burnable_coins[_coin] != ZERO_ADDRESS, \"token not burnable\"\r\n    \r\n    # transfer coins from caller\r\n    amount: uint256 = ERC20(_coin).balanceOf(msg.sender)\r\n    if amount != 0:\r\n        ERC20(_coin).transferFrom(msg.sender, self, amount)\r\n\r\n    # get actual balance in case of transfer fee or pre-existing balance\r\n    amount = ERC20(_coin).balanceOf(self)\r\n    result_token:address = self.burnable_coins[_coin]\r\n\r\n    if amount != 0:\r\n        YearnVaultToken(_coin).withdraw(amount)\r\n        result_token_amount:uint256 = ERC20(result_token).balanceOf(self)\r\n        assert ERC20(result_token).transfer(self.receiver, result_token_amount)\r\n        log Burn(_coin, amount, result_token_amount)\r\n    return True\r\n\r\n\r\n@external\r\ndef add_burnable_coin(_coin:address) -> bool:\r\n    \"\"\"\r\n    @notice allow more Yearn Vault CRV LP Tokens to be burned with this burner\r\n    @param _coin Yearn Vault CRV LP Token\r\n    @return bool success\r\n    \"\"\"\r\n    assert msg.sender in [self.owner, self.emergency_owner]  # dev: only owner\r\n    self.burnable_coins[_coin] = YearnVaultToken(_coin).token()\r\n    return True\r\n    \r\n\r\n@external\r\ndef recover_balance(_coin: address) -> bool:\r\n    \"\"\"\r\n    @notice Recover ERC20 tokens from this contract\r\n    @dev Tokens are sent to the recovery address\r\n    @param _coin Token address\r\n    @return bool success\r\n    \"\"\"\r\n    assert msg.sender in [self.owner, self.emergency_owner]  # dev: only owner\r\n\r\n    amount: uint256 = ERC20(_coin).balanceOf(self)\r\n    response: Bytes[32] = raw_call(\r\n        _coin,\r\n        concat(\r\n            method_id(\"transfer(address,uint256)\"),\r\n            convert(self.recovery, bytes32),\r\n            convert(amount, bytes32),\r\n        ),\r\n        max_outsize=32,\r\n    )\r\n    if len(response) != 0:\r\n        assert convert(response, bool)\r\n\r\n    return True\r\n\r\n\r\n@external\r\ndef set_recovery(_recovery: address) -> bool:\r\n    \"\"\"\r\n    @notice Set the token recovery address\r\n    @param _recovery Token recovery address\r\n    @return bool success\r\n    \"\"\"\r\n    assert msg.sender == self.owner  # dev: only owner\r\n    self.recovery = _recovery\r\n\r\n    return True\r\n\r\n\r\n@external\r\ndef set_killed(_is_killed: bool) -> bool:\r\n    \"\"\"\r\n    @notice Set killed status for this contract\r\n    @dev When killed, the `burn` function cannot be called\r\n    @param _is_killed Killed status\r\n    @return bool success\r\n    \"\"\"\r\n    assert msg.sender in [self.owner, self.emergency_owner]  # dev: only owner\r\n    self.is_killed = _is_killed\r\n\r\n    return True\r\n\r\n\r\n\r\n@external\r\ndef commit_transfer_ownership(_future_owner: address) -> bool:\r\n    \"\"\"\r\n    @notice Commit a transfer of ownership\r\n    @dev Must be accepted by the new owner via `accept_transfer_ownership`\r\n    @param _future_owner New owner address\r\n    @return bool success\r\n    \"\"\"\r\n    assert msg.sender == self.owner  # dev: only owner\r\n    self.future_owner = _future_owner\r\n\r\n    return True\r\n\r\n\r\n@external\r\ndef accept_transfer_ownership() -> bool:\r\n    \"\"\"\r\n    @notice Accept a transfer of ownership\r\n    @return bool success\r\n    \"\"\"\r\n    assert msg.sender == self.future_owner  # dev: only owner\r\n    self.owner = msg.sender\r\n\r\n    return True\r\n\r\n\r\n@external\r\ndef commit_transfer_emergency_ownership(_future_owner: address) -> bool:\r\n    \"\"\"\r\n    @notice Commit a transfer of ownership\r\n    @dev Must be accepted by the new owner via `accept_transfer_ownership`\r\n    @param _future_owner New owner address\r\n    @return bool success\r\n    \"\"\"\r\n    assert msg.sender == self.emergency_owner  # dev: only owner\r\n    self.future_emergency_owner = _future_owner\r\n\r\n    return True\r\n\r\n\r\n@external\r\ndef accept_transfer_emergency_ownership() -> bool:\r\n    \"\"\"\r\n    @notice Accept a transfer of ownership\r\n    @return bool success\r\n    \"\"\"\r\n    assert msg.sender == self.future_emergency_owner  # dev: only owner\r\n    self.emergency_owner = msg.sender\r\n    return True","ABI":"[{\"name\":\"Burn\",\"inputs\":[{\"name\":\"lp_token\",\"type\":\"address\",\"indexed\":false},{\"name\":\"amount\",\"type\":\"uint256\",\"indexed\":false},{\"name\":\"token0_amount\",\"type\":\"uint256\",\"indexed\":false}],\"anonymous\":false,\"type\":\"event\"},{\"stateMutability\":\"nonpayable\",\"type\":\"constructor\",\"inputs\":[{\"name\":\"_receiver\",\"type\":\"address\"},{\"name\":\"_recovery\",\"type\":\"address\"},{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_emergency_owner\",\"type\":\"address\"}],\"outputs\":[]},{\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"burn\",\"inputs\":[{\"name\":\"_coin\",\"type\":\"address\"}],\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"gas\":28892},{\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"add_burnable_coin\",\"inputs\":[{\"name\":\"_coin\",\"type\":\"address\"}],\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"gas\":42631},{\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"recover_balance\",\"inputs\":[{\"name\":\"_coin\",\"type\":\"address\"}],\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"gas\":19290},{\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"set_recovery\",\"inputs\":[{\"name\":\"_recovery\",\"type\":\"address\"}],\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"gas\":37680},{\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"set_killed\",\"inputs\":[{\"name\":\"_is_killed\",\"type\":\"bool\"}],\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"gas\":40231},{\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"commit_transfer_ownership\",\"inputs\":[{\"name\":\"_future_owner\",\"type\":\"address\"}],\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"gas\":37740},{\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"accept_transfer_ownership\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"gas\":37666},{\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"commit_transfer_emergency_ownership\",\"inputs\":[{\"name\":\"_future_owner\",\"type\":\"address\"}],\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"gas\":37800},{\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"accept_transfer_emergency_ownership\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"gas\":37726},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"receiver\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"gas\":2658},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"recovery\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"gas\":2688},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"owner\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"gas\":2718},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"is_killed\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"gas\":2748},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"emergency_owner\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"gas\":2778},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"future_owner\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"gas\":2808},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"future_emergency_owner\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"gas\":2838},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"burnable_coins\",\"inputs\":[{\"name\":\"arg0\",\"type\":\"address\"}],\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"gas\":3083}]","ContractName":"Vyper_contract","CompilerVersion":"vyper:0.2.12","OptimizationUsed":"0","Runs":"0","ConstructorArguments":"00000000000000000000000079ea17bee0a8dcb900737e8caa247c8358a5dfa10000000000000000000000006d5a7597896a703fe8c85775b23395a48f9713050000000000000000000000006d5a7597896a703fe8c85775b23395a48f971305000000000000000000000000197939c1ca20c2b506d6811d8b6cdb3394471074","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":""}]}