{"status":"1","message":"OK","result":[{"SourceCode":"/**\r\n *Submitted for verification at Etherscan.io on 2021-08-06\r\n*/\r\n\r\n// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.6;\r\n\r\nlibrary Math {\r\n    function max(uint a, uint b) internal pure returns (uint) {\r\n        return a >= b ? a : b;\r\n    }\r\n    function min(uint a, uint b) internal pure returns (uint) {\r\n        return a < b ? a : b;\r\n    }\r\n}\r\n\r\ninterface erc20 {\r\n    function totalSupply() external view returns (uint256);\r\n    function transfer(address recipient, uint amount) external returns (bool);\r\n    function decimals() external view returns (uint8);\r\n    function balanceOf(address) external view returns (uint);\r\n    function transferFrom(address sender, address recipient, uint amount) external returns (bool);\r\n    function approve(address spender, uint value) external returns (bool);\r\n}\r\n\r\ninterface ve {\r\n    function locked__end(address) external view returns (uint);\r\n    function deposit_for(address, uint) external;\r\n}\r\n\r\ninterface delegate {\r\n    function get_adjusted_ve_balance(address, address) external view returns (uint);\r\n}\r\n\r\ncontract Gauge {\r\n    address constant _ibff = 0xb347132eFf18a3f63426f4988ef626d2CbE274F5;\r\n    address constant _veibff = 0x4D0518C9136025903751209dDDdf6C67067357b1;\r\n    address constant _delegate = 0x0ea89fb2E5b8FA8F14b741ffe1A4617A32611DfC;\r\n    address constant _vedist = 0x83893c4A42F8654c2dd4FF7b4a7cd0e33ae8C859;\r\n    \r\n    uint constant DURATION = 7 days;\r\n    uint constant PRECISION = 10 ** 18;\r\n    uint constant MAXTIME = 4 * 365 * 86400;\r\n    \r\n    address public immutable stake;\r\n    address immutable distribution;\r\n    \r\n    uint public rewardRate;\r\n    uint public periodFinish;\r\n    uint public lastUpdateTime;\r\n    uint public rewardPerTokenStored;\r\n    \r\n    modifier onlyDistribution() {\r\n        require(msg.sender == distribution);\r\n        _;\r\n    }\r\n    \r\n    mapping(address => uint) public userRewardPerTokenPaid;\r\n    mapping(address => uint) public rewards;\r\n\r\n    uint public totalSupply;\r\n    uint public derivedSupply;\r\n    mapping(address => uint) public balanceOf;\r\n    mapping(address => uint) public derivedBalances;\r\n    \r\n    constructor(address _stake) {\r\n        stake = _stake;\r\n        distribution = msg.sender;\r\n    }\r\n\r\n    function lastTimeRewardApplicable() public view returns (uint) {\r\n        return Math.min(block.timestamp, periodFinish);\r\n    }\r\n\r\n    function rewardPerToken() public view returns (uint) {\r\n        if (totalSupply == 0) {\r\n            return rewardPerTokenStored;\r\n        }\r\n        return rewardPerTokenStored + ((lastTimeRewardApplicable() - lastUpdateTime) * rewardRate * PRECISION / derivedSupply);\r\n    }\r\n    \r\n    function derivedBalance(address account) public view returns (uint) {\r\n        uint _balance = balanceOf[account];\r\n        uint _derived = _balance * 40 / 100;\r\n        uint _adjusted = (totalSupply * delegate(_delegate).get_adjusted_ve_balance(account, address(this)) / erc20(_veibff).totalSupply()) * 60 / 100;\r\n        return Math.min(_derived + _adjusted, _balance);\r\n    }\r\n    \r\n    function kick(address account) public {\r\n        uint _derivedBalance = derivedBalances[account];\r\n        derivedSupply -= _derivedBalance;\r\n        _derivedBalance = derivedBalance(account);\r\n        derivedBalances[account] = _derivedBalance;\r\n        derivedSupply += _derivedBalance;\r\n    }\r\n\r\n    function earned(address account) public view returns (uint) {\r\n        return (derivedBalances[account] * (rewardPerToken() - userRewardPerTokenPaid[account]) / PRECISION) + rewards[account];\r\n    }\r\n\r\n    function getRewardForDuration() external view returns (uint) {\r\n        return rewardRate * DURATION;\r\n    }\r\n    \r\n    function deposit() external {\r\n        _deposit(erc20(stake).balanceOf(msg.sender), msg.sender);\r\n    }\r\n    \r\n    function deposit(uint amount) external {\r\n        _deposit(amount, msg.sender);\r\n    }\r\n    \r\n    function deposit(uint amount, address account) external {\r\n        _deposit(amount, account);\r\n    }\r\n    \r\n    function _deposit(uint amount, address account) internal updateReward(account) {\r\n        totalSupply += amount;\r\n        balanceOf[account] += amount;\r\n        _safeTransferFrom(stake, account, address(this), amount);\r\n    }\r\n    \r\n    function withdraw() external {\r\n        _withdraw(balanceOf[msg.sender]);\r\n    }\r\n\r\n    function withdraw(uint amount) external {\r\n        _withdraw(amount);\r\n    }\r\n    \r\n    function _withdraw(uint amount) internal updateReward(msg.sender) {\r\n        totalSupply -= amount;\r\n        balanceOf[msg.sender] -= amount;\r\n        _safeTransfer(stake, msg.sender, amount);\r\n    }\r\n\r\n    function getReward() public updateReward(msg.sender) {\r\n        uint _reward = rewards[msg.sender];\r\n        uint _user_lock = ve(_veibff).locked__end(msg.sender);\r\n        uint _adj = Math.min(_reward * (_user_lock - block.timestamp) / MAXTIME, _reward);\r\n        if (_adj > 0) {\r\n            rewards[msg.sender] = 0;\r\n            _safeTransfer(_ibff, msg.sender, _adj);\r\n            ve(_veibff).deposit_for(msg.sender, _adj);\r\n            _safeTransfer(_ibff, _vedist, _reward - _adj);\r\n        }\r\n    }\r\n\r\n    function exit() external {\r\n       _withdraw(balanceOf[msg.sender]);\r\n        getReward();\r\n    }\r\n    \r\n    function notifyRewardAmount(uint amount) external onlyDistribution updateReward(address(0)) {\r\n        if (block.timestamp >= periodFinish) {\r\n            rewardRate = amount / DURATION;\r\n        } else {\r\n            uint _remaining = periodFinish - block.timestamp;\r\n            uint _left = _remaining * rewardRate;\r\n            rewardRate = (amount + _left) / DURATION;\r\n        }\r\n        \r\n        lastUpdateTime = block.timestamp;\r\n        periodFinish = block.timestamp + DURATION;\r\n    }\r\n\r\n    modifier updateReward(address account) {\r\n        rewardPerTokenStored = rewardPerToken();\r\n        lastUpdateTime = lastTimeRewardApplicable();\r\n        if (account != address(0)) {\r\n            rewards[account] = earned(account);\r\n            userRewardPerTokenPaid[account] = rewardPerTokenStored;\r\n        }\r\n        _;\r\n        if (account != address(0)) {\r\n            kick(account);\r\n        }\r\n    }\r\n    \r\n    function _safeTransfer(address token, address to, uint256 value) internal {\r\n        (bool success, bytes memory data) =\r\n            token.call(abi.encodeWithSelector(erc20.transfer.selector, to, value));\r\n        require(success && (data.length == 0 || abi.decode(data, (bool))));\r\n    }\r\n    \r\n    function _safeTransferFrom(address token, address from, address to, uint256 value) internal {\r\n        (bool success, bytes memory data) =\r\n            token.call(abi.encodeWithSelector(erc20.transferFrom.selector, from, to, value));\r\n        require(success && (data.length == 0 || abi.decode(data, (bool))));\r\n    }\r\n}\r\n\r\ncontract GaugeProxy {\r\n    address constant _ibff = 0xb347132eFf18a3f63426f4988ef626d2CbE274F5;\r\n    address constant _delegate = 0x0ea89fb2E5b8FA8F14b741ffe1A4617A32611DfC;\r\n    address constant ZERO_ADDRESS = 0x0000000000000000000000000000000000000000;\r\n    \r\n    uint public totalWeight;\r\n    \r\n    address public gov;\r\n    address public nextgov;\r\n    uint public commitgov;\r\n    uint public constant delay = 1 days;\r\n    \r\n    address[] internal _tokens;\r\n    mapping(address => address) public gauges; // token => gauge\r\n    mapping(address => uint) public weights; // token => weight\r\n    mapping(address => mapping(address => uint)) public votes; // msg.sender => votes\r\n    mapping(address => address[]) public tokenVote;// msg.sender => token\r\n    mapping(address => uint) public usedWeights;  // msg.sender => total voting weight of user\r\n    mapping(address => bool) public enabled;\r\n    \r\n    function tokens() external view returns (address[] memory) {\r\n        return _tokens;\r\n    }\r\n    \r\n    constructor() {\r\n        gov = msg.sender;\r\n    }\r\n    \r\n    modifier g() {\r\n        require(msg.sender == gov);\r\n        _;\r\n    }\r\n    \r\n    function setGov(address _gov) external g {\r\n        nextgov = _gov;\r\n        commitgov = block.timestamp + delay;\r\n    }\r\n    \r\n    function acceptGov() external {\r\n        require(msg.sender == nextgov && commitgov < block.timestamp);\r\n        gov = nextgov;\r\n    }\r\n    \r\n    function reset() external {\r\n        _reset(msg.sender);\r\n    }\r\n    \r\n    function _reset(address _owner) internal {\r\n        address[] storage _tokenVote = tokenVote[_owner];\r\n        uint _tokenVoteCnt = _tokenVote.length;\r\n\r\n        for (uint i = 0; i < _tokenVoteCnt; i ++) {\r\n            address _token = _tokenVote[i];\r\n            uint _votes = votes[_owner][_token];\r\n            \r\n            if (_votes > 0) {\r\n                totalWeight -= _votes;\r\n                weights[_token] -= _votes;\r\n                votes[_owner][_token] = 0;\r\n            }\r\n        }\r\n\r\n        delete tokenVote[_owner];\r\n    }\r\n    \r\n    function poke(address _owner) public {\r\n        address[] memory _tokenVote = tokenVote[_owner];\r\n        uint _tokenCnt = _tokenVote.length;\r\n        uint[] memory _weights = new uint[](_tokenCnt);\r\n        \r\n        uint _prevUsedWeight = usedWeights[_owner];\r\n        uint _weight = delegate(_delegate).get_adjusted_ve_balance(_owner, ZERO_ADDRESS);\r\n\r\n        for (uint i = 0; i < _tokenCnt; i ++) {\r\n            uint _prevWeight = votes[_owner][_tokenVote[i]];\r\n            _weights[i] = _prevWeight * _weight / _prevUsedWeight;\r\n        }\r\n\r\n        _vote(_owner, _tokenVote, _weights);\r\n    }\r\n    \r\n    function _vote(address _owner, address[] memory _tokenVote, uint[] memory _weights) internal {\r\n        // _weights[i] = percentage * 100\r\n        _reset(_owner);\r\n        uint _tokenCnt = _tokenVote.length;\r\n        uint _weight = delegate(_delegate).get_adjusted_ve_balance(_owner, ZERO_ADDRESS);\r\n        uint _totalVoteWeight = 0;\r\n        uint _usedWeight = 0;\r\n\r\n        for (uint i = 0; i < _tokenCnt; i ++) {\r\n            _totalVoteWeight += _weights[i];\r\n        }\r\n\r\n        for (uint i = 0; i < _tokenCnt; i ++) {\r\n            address _token = _tokenVote[i];\r\n            address _gauge = gauges[_token];\r\n            uint _tokenWeight = _weights[i] * _weight / _totalVoteWeight;\r\n\r\n            if (_gauge != address(0x0)) {\r\n                _usedWeight += _tokenWeight;\r\n                totalWeight += _tokenWeight;\r\n                weights[_token] += _tokenWeight;\r\n                tokenVote[_owner].push(_token);\r\n                votes[_owner][_token] = _tokenWeight;\r\n            }\r\n        }\r\n\r\n        usedWeights[_owner] = _usedWeight;\r\n    }\r\n    \r\n    function vote(address[] calldata _tokenVote, uint[] calldata _weights) external {\r\n        require(_tokenVote.length == _weights.length);\r\n        _vote(msg.sender, _tokenVote, _weights);\r\n    }\r\n    \r\n    function addGauge(address _token) external g {\r\n        require(gauges[_token] == address(0x0), \"exists\");\r\n        address _gauge = address(new Gauge(_token));\r\n        gauges[_token] = _gauge;\r\n        enabled[_token] = true;\r\n        _tokens.push(_token);\r\n    }\r\n    \r\n    function disable(address _token) external g {\r\n        enabled[_token] = false;\r\n    }\r\n    \r\n    function enable(address _token) external g {\r\n        enabled[_token] = true;\r\n    }\r\n    \r\n    function length() external view returns (uint) {\r\n        return _tokens.length;\r\n    }\r\n    \r\n    function distribute() external {\r\n        uint _balance = erc20(_ibff).balanceOf(address(this));\r\n        if (_balance > 0 && totalWeight > 0) {\r\n            uint _totalWeight = totalWeight;\r\n            for (uint i = 0; i < _tokens.length; i++) {\r\n                if (!enabled[_tokens[i]]) {\r\n                    _totalWeight -= weights[_tokens[i]];\r\n                }\r\n            }\r\n            for (uint x = 0; x < _tokens.length; x++) {\r\n                if (enabled[_tokens[x]]) {\r\n                    uint _reward = _balance * weights[_tokens[x]] / _totalWeight;\r\n                    if (_reward > 0) {\r\n                        address _gauge = gauges[_tokens[x]];\r\n                        _safeTransfer(_ibff, _gauge, _reward);\r\n                        Gauge(_gauge).notifyRewardAmount(_reward);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n    \r\n    function _safeTransfer(address token, address to, uint256 value) internal {\r\n        (bool success, bytes memory data) =\r\n            token.call(abi.encodeWithSelector(erc20.transfer.selector, to, value));\r\n        require(success && (data.length == 0 || abi.decode(data, (bool))));\r\n    }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_stake\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"derivedBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"derivedBalances\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"derivedSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"earned\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"exit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRewardForDuration\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"kick\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastTimeRewardApplicable\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastUpdateTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"notifyRewardAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"periodFinish\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardPerToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardPerTokenStored\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"rewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stake\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userRewardPerTokenPaid\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"Gauge","CompilerVersion":"v0.8.6+commit.11564f7e","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"00000000000000000000000019b080fe1ffa0553469d20ca36219f17fcf03859","EVMVersion":"Default","Library":"","LicenseType":"GNU LGPLv3","Proxy":"0","Implementation":"","SwarmSource":"ipfs://7ed7ebc47d3f3e42639645b93076c82ba3d42bfa37fb1974ab8e0d17e08170f0"}]}