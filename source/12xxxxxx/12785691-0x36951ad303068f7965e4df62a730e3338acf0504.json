{"status":"1","message":"OK","result":[{"SourceCode":"/**\r\n *Submitted for verification at Etherscan.io on 2021-09-07\r\n*/\r\n\r\n/**\r\n *Submitted for verification at Etherscan.io on 2021-08-20\r\n*/\r\n\r\n// Dependency file: @openzeppelin/contracts/math/Math.sol\r\n\r\n// SPDX-License-Identifier: MIT\r\n\r\n// pragma solidity >=0.6.0 <0.8.0;\r\n\r\n/**\r\n * @dev Standard math utilities missing in the Solidity language.\r\n */\r\nlibrary Math {\r\n    /**\r\n     * @dev Returns the largest of two numbers.\r\n     */\r\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a >= b ? a : b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the smallest of two numbers.\r\n     */\r\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a < b ? a : b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the average of two numbers. The result is rounded towards\r\n     * zero.\r\n     */\r\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // (a + b) / 2 can overflow, so we distribute\r\n        return (a / 2) + (b / 2) + ((a % 2 + b % 2) / 2);\r\n    }\r\n}\r\n\r\n\r\n// Dependency file: @openzeppelin/contracts/utils/ReentrancyGuard.sol\r\n\r\n\r\n// pragma solidity >=0.6.0 <0.8.0;\r\n\r\n/**\r\n * @dev Contract module that helps prevent reentrant calls to a function.\r\n *\r\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\r\n * available, which can be applied to functions to make sure there are no nested\r\n * (reentrant) calls to them.\r\n *\r\n * Note that because there is a single `nonReentrant` guard, functions marked as\r\n * `nonReentrant` may not call one another. This can be worked around by making\r\n * those functions `private`, and then adding `external` `nonReentrant` entry\r\n * points to them.\r\n *\r\n * TIP: If you would like to learn more about reentrancy and alternative ways\r\n * to protect against it, check out our blog post\r\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\r\n */\r\nabstract contract ReentrancyGuard {\r\n    // Booleans are more expensive than uint256 or any type that takes up a full\r\n    // word because each write operation emits an extra SLOAD to first read the\r\n    // slot's contents, replace the bits taken up by the boolean, and then write\r\n    // back. This is the compiler's defense against contract upgrades and\r\n    // pointer aliasing, and it cannot be disabled.\r\n\r\n    // The values being non-zero value makes deployment a bit more expensive,\r\n    // but in exchange the refund on every call to nonReentrant will be lower in\r\n    // amount. Since refunds are capped to a percentage of the total\r\n    // transaction's gas, it is best to keep them low in cases like this one, to\r\n    // increase the likelihood of the full refund coming into effect.\r\n    uint256 private constant _NOT_ENTERED = 1;\r\n    uint256 private constant _ENTERED = 2;\r\n\r\n    uint256 private _status;\r\n\r\n    constructor () internal {\r\n        _status = _NOT_ENTERED;\r\n    }\r\n\r\n    /**\r\n     * @dev Prevents a contract from calling itself, directly or indirectly.\r\n     * Calling a `nonReentrant` function from another `nonReentrant`\r\n     * function is not supported. It is possible to prevent this from happening\r\n     * by making the `nonReentrant` function external, and make it call a\r\n     * `private` function that does the actual work.\r\n     */\r\n    modifier nonReentrant() {\r\n        // On the first call to nonReentrant, _notEntered will be true\r\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\r\n\r\n        // Any calls to nonReentrant after this point will fail\r\n        _status = _ENTERED;\r\n\r\n        _;\r\n\r\n        // By storing the original value once again, a refund is triggered (see\r\n        // https://eips.ethereum.org/EIPS/eip-2200)\r\n        _status = _NOT_ENTERED;\r\n    }\r\n}\r\n\r\n\r\n// Dependency file: @openzeppelin/contracts/utils/Address.sol\r\n\r\n\r\n// pragma solidity >=0.6.2 <0.8.0;\r\n\r\n/**\r\n * @dev Collection of functions related to the address type\r\n */\r\nlibrary Address {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     *\r\n     * Among others, `isContract` will return false for the following\r\n     * types of addresses:\r\n     *\r\n     *  - an externally-owned account\r\n     *  - a contract in construction\r\n     *  - an address where a contract will be created\r\n     *  - an address where a contract lived, but was destroyed\r\n     * ====\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // This method relies on extcodesize, which returns 0 for contracts in\r\n        // construction, since the code is only stored at the end of the\r\n        // constructor execution.\r\n\r\n        uint256 size;\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly { size := extcodesize(account) }\r\n        return size > 0;\r\n    }\r\n\r\n    /**\r\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * IMPORTANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     */\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\r\n        (bool success, ) = recipient.call{ value: amount }(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n\r\n    /**\r\n     * @dev Performs a Solidity function call using a low level `call`. A\r\n     * plain`call` is an unsafe replacement for a function call: use this\r\n     * function instead.\r\n     *\r\n     * If `target` reverts with a revert reason, it is bubbled up by this\r\n     * function (like regular Solidity function calls).\r\n     *\r\n     * Returns the raw returned data. To convert to the expected return value,\r\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `target` must be a contract.\r\n     * - calling `target` with `data` must not revert.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n      return functionCall(target, data, \"Address: low-level call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\r\n     * `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but also transferring `value` wei to `target`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the calling contract must have an ETH balance of at least `value`.\r\n     * - the called Solidity function must be `payable`.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\r\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\r\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\r\n        require(isContract(target), \"Address: call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\r\n        return _verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\r\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\r\n        require(isContract(target), \"Address: static call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.staticcall(data);\r\n        return _verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\r\n        require(isContract(target), \"Address: delegate call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.delegatecall(data);\r\n        return _verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            // Look for revert reason and bubble it up if present\r\n            if (returndata.length > 0) {\r\n                // The easiest way to bubble the revert reason is using memory via assembly\r\n\r\n                // solhint-disable-next-line no-inline-assembly\r\n                assembly {\r\n                    let returndata_size := mload(returndata)\r\n                    revert(add(32, returndata), returndata_size)\r\n                }\r\n            } else {\r\n                revert(errorMessage);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n\r\n// Dependency file: @openzeppelin/contracts/math/SafeMath.sol\r\n\r\n\r\n// pragma solidity >=0.6.0 <0.8.0;\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        uint256 c = a + b;\r\n        if (c < a) return (false, 0);\r\n        return (true, c);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        if (b > a) return (false, 0);\r\n        return (true, a - b);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) return (true, 0);\r\n        uint256 c = a * b;\r\n        if (c / a != b) return (false, 0);\r\n        return (true, c);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        if (b == 0) return (false, 0);\r\n        return (true, a / b);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        if (b == 0) return (false, 0);\r\n        return (true, a % b);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b <= a, \"SafeMath: subtraction overflow\");\r\n        return a - b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) return 0;\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers, reverting on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b > 0, \"SafeMath: division by zero\");\r\n        return a / b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * reverting when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b > 0, \"SafeMath: modulo by zero\");\r\n        return a % b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\r\n     * message unnecessarily. For custom revert reasons use {trySub}.\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        return a - b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\r\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        return a / b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * reverting with custom message when dividing by zero.\r\n     *\r\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\r\n     * message unnecessarily. For custom revert reasons use {tryMod}.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n\r\n// Dependency file: @openzeppelin/contracts/token/ERC20/IERC20.sol\r\n\r\n\r\n// pragma solidity >=0.6.0 <0.8.0;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n\r\n// Dependency file: contracts/interfaces/IChainlink.sol\r\n\r\n// pragma solidity >=0.6.5 <0.8.0;\r\ninterface IChainlink {\r\n  function latestAnswer() external view returns (int256);\r\n}\r\n\r\n// Dependency file: contracts/interfaces/IFryerConfig.sol\r\n\r\n// pragma solidity >=0.6.5 <0.8.0;\r\n\r\ninterface IFryerConfig {\r\n    function getConfigValue(bytes32 _name) external view returns (uint256);\r\n\r\n    function PERCENT_DENOMINATOR() external view returns (uint256);\r\n\r\n    function ZERO_ADDRESS() external view returns (address);\r\n}\r\n\r\n\r\n// Dependency file: contracts/interfaces/IVaultAdapter.sol\r\n\r\n// pragma solidity >=0.6.5 <0.8.0;\r\n\r\n/// Interface for all Vault Adapter implementations.\r\ninterface IVaultAdapter {\r\n\r\n  /// @dev Gets the token that the adapter accepts.\r\n  function token() external view returns (address);\r\n\r\n  /// @dev The total value of the assets deposited into the vault.\r\n  function totalValue() external view returns (uint256);\r\n\r\n  /// @dev Deposits funds into the vault.\r\n  ///\r\n  /// @param _amount  the amount of funds to deposit.\r\n  function deposit(uint256 _amount) external;\r\n\r\n  /// @dev Attempts to withdraw funds from the wrapped vault.\r\n  ///\r\n  /// The amount withdrawn to the recipient may be less than the amount requested.\r\n  ///\r\n  /// @param _recipient the recipient of the funds.\r\n  /// @param _amount    the amount of funds to withdraw.\r\n  function withdraw(address _recipient, uint256 _amount) external;\r\n}\r\n\r\n// Dependency file: contracts/interfaces/IOven.sol\r\n\r\n// pragma solidity >=0.6.5 <0.8.0;\r\n\r\n\r\n\r\n\r\ninterface IOven {\r\n    function distribute (address origin, uint256 amount) external;\r\n}\r\n\r\n// Dependency file: contracts/interfaces/IMintableERC20.sol\r\n\r\n// pragma solidity >=0.6.5 <0.8.0;\r\n\r\n\r\ninterface IMintableERC20 {\r\n  function mint(address _recipient, uint256 _amount) external;\r\n  function burnFrom(address account, uint256 amount) external;\r\n  function lowerHasMinted(uint256 amount)external;\r\n}\r\n\r\n\r\n// Dependency file: contracts/interfaces/IDetailedERC20.sol\r\n\r\n// pragma solidity >=0.6.5 <0.8.0;\r\n\r\ninterface IDetailedERC20 {\r\n    function name() external view returns (string memory);\r\n\r\n    function symbol() external view returns (string memory);\r\n\r\n    function decimals() external view returns (uint8);\r\n}\r\n\r\n\r\n// Dependency file: contracts/interfaces/IERC3156FlashBorrower.sol\r\n\r\n// pragma solidity >=0.6.0 <=0.8.0;\r\n\r\n\r\ninterface IERC3156FlashBorrower {\r\n\r\n    /**\r\n     * @dev Receive a flash loan.\r\n     * @param initiator The initiator of the loan.\r\n     * @param token The loan currency.\r\n     * @param amount The amount of tokens lent.\r\n     * @param fee The additional amount of tokens to repay.\r\n     * @param data Arbitrary data structure, intended to contain user-defined parameters.\r\n     * @return The keccak256 hash of \"ERC3156FlashBorrower.onFlashLoan\"\r\n     */\r\n    function onFlashLoan(\r\n        address initiator,\r\n        address token,\r\n        uint256 amount,\r\n        uint256 fee,\r\n        bytes calldata data\r\n    ) external returns (bytes32);\r\n}\r\n\r\n\r\n// Dependency file: contracts/interfaces/IERC3156FlashLender.sol\r\n\r\n// pragma solidity >=0.6.0 <=0.8.0;\r\n// import \"contracts/interfaces/IERC3156FlashBorrower.sol\";\r\n\r\n\r\ninterface IERC3156FlashLender {\r\n\r\n    /**\r\n     * @dev The amount of currency available to be lended.\r\n     * @param token The loan currency.\r\n     * @return The amount of `token` that can be borrowed.\r\n     */\r\n    function maxFlashLoan(\r\n        address token\r\n    ) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev The fee to be charged for a given loan.\r\n     * @param token The loan currency.\r\n     * @param amount The amount of tokens lent.\r\n     * @return The amount of `token` to be charged for the loan, on top of the returned principal.\r\n     */\r\n    function flashFee(\r\n        address token,\r\n        uint256 amount\r\n    ) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Initiate a flash loan.\r\n     * @param receiver The receiver of the tokens in the loan, and the receiver of the callback.\r\n     * @param token The loan currency.\r\n     * @param amount The amount of tokens lent.\r\n     * @param data Arbitrary data structure, intended to contain user-defined parameters.\r\n     */\r\n    function flashLoan(\r\n        IERC3156FlashBorrower receiver,\r\n        address token,\r\n        uint256 amount,\r\n        bytes calldata data\r\n    ) external returns (bool);\r\n}\r\n\r\n// Dependency file: contracts/libraries/Upgradable.sol\r\n\r\n// pragma solidity >=0.6.5 <0.8.0;\r\n\r\ncontract UpgradableProduct {\r\n    address public impl;\r\n\r\n    event ImplChanged(address indexed _oldImpl, address indexed _newImpl);\r\n\r\n    constructor() public {\r\n        impl = msg.sender;\r\n    }\r\n\r\n    modifier requireImpl() {\r\n        require(msg.sender == impl, \"FORBIDDEN\");\r\n        _;\r\n    }\r\n\r\n    function upgradeImpl(address _newImpl) public requireImpl {\r\n        require(_newImpl != address(0), \"INVALID_ADDRESS\");\r\n        require(_newImpl != impl, \"NO_CHANGE\");\r\n        address lastImpl = impl;\r\n        impl = _newImpl;\r\n        emit ImplChanged(lastImpl, _newImpl);\r\n    }\r\n}\r\n\r\ncontract UpgradableGovernance {\r\n    address public governor;\r\n\r\n    event GovernorChanged(\r\n        address indexed _oldGovernor,\r\n        address indexed _newGovernor\r\n    );\r\n\r\n    constructor() public {\r\n        governor = msg.sender;\r\n    }\r\n\r\n    modifier requireGovernor() {\r\n        require(msg.sender == governor, \"FORBIDDEN\");\r\n        _;\r\n    }\r\n\r\n    function upgradeGovernance(address _newGovernor) public requireGovernor {\r\n        require(_newGovernor != address(0), \"INVALID_ADDRESS\");\r\n        require(_newGovernor != governor, \"NO_CHANGE\");\r\n        address lastGovernor = governor;\r\n        governor = _newGovernor;\r\n        emit GovernorChanged(lastGovernor, _newGovernor);\r\n    }\r\n}\r\n\r\n\r\n// Dependency file: contracts/libraries/FixedPointMath.sol\r\n\r\n// pragma solidity >=0.6.5 <0.8.0;\r\n\r\n\r\nlibrary FixedPointMath {\r\n  uint256 public constant DECIMALS = 18;\r\n  uint256 public constant SCALAR = 10**DECIMALS;\r\n\r\n  struct uq192x64 {\r\n    uint256 x;\r\n  }\r\n\r\n  function fromU256(uint256 value) internal pure returns (uq192x64 memory) {\r\n    uint256 x;\r\n    require(value == 0 || (x = value * SCALAR) / SCALAR == value);\r\n    return uq192x64(x);\r\n  }\r\n\r\n  function maximumValue() internal pure returns (uq192x64 memory) {\r\n    return uq192x64(uint256(-1));\r\n  }\r\n\r\n  function add(uq192x64 memory self, uq192x64 memory value) internal pure returns (uq192x64 memory) {\r\n    uint256 x;\r\n    require((x = self.x + value.x) >= self.x);\r\n    return uq192x64(x);\r\n  }\r\n\r\n  function add(uq192x64 memory self, uint256 value) internal pure returns (uq192x64 memory) {\r\n    return add(self, fromU256(value));\r\n  }\r\n\r\n  function sub(uq192x64 memory self, uq192x64 memory value) internal pure returns (uq192x64 memory) {\r\n    uint256 x;\r\n    require((x = self.x - value.x) <= self.x);\r\n    return uq192x64(x);\r\n  }\r\n\r\n  function sub(uq192x64 memory self, uint256 value) internal pure returns (uq192x64 memory) {\r\n    return sub(self, fromU256(value));\r\n  }\r\n\r\n  function mul(uq192x64 memory self, uint256 value) internal pure returns (uq192x64 memory) {\r\n    uint256 x;\r\n    require(value == 0 || (x = self.x * value) / value == self.x);\r\n    return uq192x64(x);\r\n  }\r\n\r\n  function div(uq192x64 memory self, uint256 value) internal pure returns (uq192x64 memory) {\r\n    require(value != 0);\r\n    return uq192x64(self.x / value);\r\n  }\r\n\r\n  function cmp(uq192x64 memory self, uq192x64 memory value) internal pure returns (int256) {\r\n    if (self.x < value.x) {\r\n      return -1;\r\n    }\r\n\r\n    if (self.x > value.x) {\r\n      return 1;\r\n    }\r\n\r\n    return 0;\r\n  }\r\n\r\n  function decode(uq192x64 memory self) internal pure returns (uint256) {\r\n    return self.x / SCALAR;\r\n  }\r\n}\r\n\r\n// Dependency file: contracts/libraries/TransferHelper.sol\r\n\r\n// pragma solidity >=0.6.5 <0.8.0;\r\n\r\nlibrary TransferHelper {\r\n    function safeApprove(address token, address to, uint value) internal {\r\n        // bytes4(keccak256(bytes('approve(address,uint256)')));\r\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x095ea7b3, to, value));\r\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'TransferHelper: APPROVE_FAILED');\r\n    }\r\n\r\n    function safeTransfer(address token, address to, uint value) internal {\r\n        // bytes4(keccak256(bytes('transfer(address,uint256)')));\r\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0xa9059cbb, to, value));\r\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'TransferHelper: TRANSFER_FAILED');\r\n    }\r\n\r\n    function safeTransferFrom(address token, address from, address to, uint value) internal {\r\n        // bytes4(keccak256(bytes('transferFrom(address,address,uint256)')));\r\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x23b872dd, from, to, value));\r\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'TransferHelper: TRANSFER_FROM_FAILED');\r\n    }\r\n\r\n    function safeTransferETH(address to, uint value) internal {\r\n        (bool success,) = to.call{value:value}(new bytes(0));\r\n        require(success, 'TransferHelper: ETH_TRANSFER_FAILED');\r\n    }\r\n}\r\n\r\n\r\n// Dependency file: contracts/libraries/Vault.sol\r\n\r\n// pragma solidity >=0.6.5 <0.8.0;\r\n\r\n// import '/Users/sg99022ml/Desktop/chfry-protocol-internal/node_modules/@openzeppelin/contracts/math/SafeMath.sol';\r\n// import '/Users/sg99022ml/Desktop/chfry-protocol-internal/node_modules/@openzeppelin/contracts/token/ERC20/IERC20.sol';\r\n// import 'contracts/interfaces/IVaultAdapter.sol';\r\n// import 'contracts/libraries/TransferHelper.sol';\r\n\r\n/// @title Pool\r\n///\r\n/// @dev A library which provides the Vault data struct and associated functions.\r\nlibrary Vault {\r\n\tusing Vault for Data;\r\n\tusing Vault for List;\r\n\tusing TransferHelper for address;\r\n\tusing SafeMath for uint256;\r\n\r\n\tstruct Data {\r\n\t\tIVaultAdapter adapter;\r\n\t\tuint256 totalDeposited;\r\n\t}\r\n\r\n\tstruct List {\r\n\t\tData[] elements;\r\n\t}\r\n\r\n\t/// @dev Gets the total amount of assets deposited in the vault.\r\n\t///\r\n\t/// @return the total assets.\r\n\tfunction totalValue(Data storage _self) internal view returns (uint256) {\r\n\t\treturn _self.adapter.totalValue();\r\n\t}\r\n\r\n\t/// @dev Gets the token that the vault accepts.\r\n\t///\r\n\t/// @return the accepted token.\r\n\tfunction token(Data storage _self) internal view returns (address) {\r\n\t\treturn _self.adapter.token();\r\n\t}\r\n\r\n\t/// @dev Deposits funds from the caller into the vault.\r\n\t///\r\n\t/// @param _amount the amount of funds to deposit.\r\n\tfunction deposit(Data storage _self, uint256 _amount) internal returns (uint256) {\r\n\t\t// Push the token that the vault accepts onto the stack to save gas.\r\n\t\taddress _token = _self.token();\r\n\t\t_token.safeTransfer(address(_self.adapter), _amount);\r\n\t\t_self.adapter.deposit(_amount);\r\n\t\t_self.totalDeposited = _self.totalDeposited.add(_amount);\r\n\r\n\t\treturn _amount;\r\n\t}\r\n\r\n\t/// @dev Withdraw deposited funds from the vault.\r\n\t///\r\n\t/// @param _recipient the account to withdraw the tokens to.\r\n\t/// @param _amount    the amount of tokens to withdraw.\r\n\tfunction withdraw(\r\n\t\tData storage _self,\r\n\t\taddress _recipient,\r\n\t\tuint256 _amount\r\n\t) internal returns (uint256, uint256) {\r\n\t\t(uint256 _withdrawnAmount, uint256 _decreasedValue) = _self.directWithdraw(_recipient, _amount);\r\n\t\t_self.totalDeposited = _self.totalDeposited.sub(_decreasedValue);\r\n\t\treturn (_withdrawnAmount, _decreasedValue);\r\n\t}\r\n\r\n\t/// @dev Directly withdraw deposited funds from the vault.\r\n\t///\r\n\t/// @param _recipient the account to withdraw the tokens to.\r\n\t/// @param _amount    the amount of tokens to withdraw.\r\n\tfunction directWithdraw(\r\n\t\tData storage _self,\r\n\t\taddress _recipient,\r\n\t\tuint256 _amount\r\n\t) internal returns (uint256, uint256) {\r\n\t\taddress _token = _self.token();\r\n\r\n\t\tuint256 _startingBalance = IERC20(_token).balanceOf(_recipient);\r\n\t\tuint256 _startingTotalValue = _self.totalValue();\r\n\r\n\t\t_self.adapter.withdraw(_recipient, _amount);\r\n\r\n\t\tuint256 _endingBalance = IERC20(_token).balanceOf(_recipient);\r\n\t\tuint256 _withdrawnAmount = _endingBalance.sub(_startingBalance);\r\n\r\n\t\tuint256 _endingTotalValue = _self.totalValue();\r\n\t\tuint256 _decreasedValue = _startingTotalValue.sub(_endingTotalValue);\r\n\r\n\t\treturn (_withdrawnAmount, _decreasedValue);\r\n\t}\r\n\r\n\t/// @dev Withdraw all the deposited funds from the vault.\r\n\t///\r\n\t/// @param _recipient the account to withdraw the tokens to.\r\n\tfunction withdrawAll(Data storage _self, address _recipient) internal returns (uint256, uint256) {\r\n\t\treturn _self.withdraw(_recipient, _self.totalDeposited);\r\n\t}\r\n\r\n\t/// @dev Harvests yield from the vault.\r\n\t///\r\n\t/// @param _recipient the account to withdraw the harvested yield to.\r\n\tfunction harvest(Data storage _self, address _recipient) internal returns (uint256, uint256) {\r\n\t\tif (_self.totalValue() <= _self.totalDeposited) {\r\n\t\t\treturn (0, 0);\r\n\t\t}\r\n\t\tuint256 _withdrawAmount = _self.totalValue().sub(_self.totalDeposited);\r\n\t\treturn _self.directWithdraw(_recipient, _withdrawAmount);\r\n\t}\r\n\r\n\t/// @dev Adds a element to the list.\r\n\t///\r\n\t/// @param _element the element to add.\r\n\tfunction push(List storage _self, Data memory _element) internal {\r\n\t\tfor (uint256 i = 0; i < _self.elements.length; i++) {\r\n\t\t\t// Avoid duplicated adapter\r\n\t\t\trequire(address(_element.adapter) != address(_self.elements[i].adapter), '!Repeat adapter');\r\n\t\t}\r\n\t\t_self.elements.push(_element);\r\n\t}\r\n\r\n\t/// @dev Gets a element from the list.\r\n\t///\r\n\t/// @param _index the index in the list.\r\n\t///\r\n\t/// @return the element at the specified index.\r\n\tfunction get(List storage _self, uint256 _index) internal view returns (Data storage) {\r\n\t\treturn _self.elements[_index];\r\n\t}\r\n\r\n\t/// @dev Gets the last element in the list.\r\n\t///\r\n\t/// This function will revert if there are no elements in the list.\r\n\t///\r\n\t/// @return the last element in the list.\r\n\tfunction last(List storage _self) internal view returns (Data storage) {\r\n\t\treturn _self.elements[_self.lastIndex()];\r\n\t}\r\n\r\n\t/// @dev Gets the index of the last element in the list.\r\n\t///\r\n\t/// This function will revert if there are no elements in the list.\r\n\t///\r\n\t/// @return the index of the last element.\r\n\tfunction lastIndex(List storage _self) internal view returns (uint256) {\r\n\t\tuint256 _length = _self.length();\r\n\t\treturn _length.sub(1, 'Vault.List: empty');\r\n\t}\r\n\r\n\t/// @dev Gets the number of elements in the list.\r\n\t///\r\n\t/// @return the number of elements.\r\n\tfunction length(List storage _self) internal view returns (uint256) {\r\n\t\treturn _self.elements.length;\r\n\t}\r\n}\r\n\r\n\r\n// Dependency file: contracts/libraries/ConfigNames.sol\r\n\r\n// pragma solidity >=0.6.5 <0.8.0;\r\n\r\nlibrary ConfigNames {\r\n    bytes32 public constant FRYER_LTV = bytes32(\"FRYER_LTV\");\r\n    bytes32 public constant FRYER_HARVEST_FEE = bytes32(\"FRYER_HARVEST_FEE\");\r\n    bytes32 public constant FRYER_VAULT_PERCENTAGE =\r\n        bytes32(\"FRYER_VAULT_PERCENTAGE\");\r\n\r\n    bytes32 public constant FRYER_FLASH_FEE_PROPORTION =\r\n        bytes32(\"FRYER_FLASH_FEE_PROPORTION\");\r\n\r\n    bytes32 public constant PRIVATE = bytes32(\"PRIVATE\");\r\n    bytes32 public constant STAKE = bytes32(\"STAKE\");\r\n}\r\n\r\n\r\n// Dependency file: contracts/libraries/CDP.sol\r\n\r\n// pragma solidity >=0.6.5 <0.8.0;\r\n\r\n// import '/Users/sg99022ml/Desktop/chfry-protocol-internal/node_modules/@openzeppelin/contracts/math/SafeMath.sol';\r\n// import 'contracts/libraries/FixedPointMath.sol';\r\n// import 'contracts/libraries/TransferHelper.sol';\r\n// import 'contracts/libraries/ConfigNames.sol';\r\n// import 'contracts/interfaces/IFryerConfig.sol';\r\n\r\nlibrary CDP {\r\n\tusing CDP for Data;\r\n\tusing FixedPointMath for FixedPointMath.uq192x64;\r\n\tusing SafeMath for uint256;\r\n\r\n\tuint256 public constant MAXIMUM_COLLATERALIZATION_LIMIT = 4000000000000000000;\r\n\r\n\tstruct Context {\r\n\t\tIFryerConfig fryerConfig;\r\n\t\tFixedPointMath.uq192x64 accumulatedYieldWeight;\r\n\t}\r\n\r\n\tstruct Data {\r\n\t\tuint256 totalDeposited;\r\n\t\tuint256 totalDebt;\r\n\t\tuint256 totalCredit;\r\n\t\tuint256 lastDeposit;\r\n\t\tFixedPointMath.uq192x64 lastAccumulatedYieldWeight;\r\n\t}\r\n\r\n\tfunction update(Data storage _self, Context storage _ctx) internal {\r\n\t\tuint256 _earnedYield = _self.getEarnedYield(_ctx);\r\n\t\tif (_earnedYield > _self.totalDebt) {\r\n\t\t\tuint256 _currentTotalDebt = _self.totalDebt;\r\n\t\t\t_self.totalDebt = 0;\r\n\t\t\t_self.totalCredit = _earnedYield.sub(_currentTotalDebt);\r\n\t\t} else {\r\n\t\t\t_self.totalCredit = 0;\r\n\t\t\t_self.totalDebt = _self.totalDebt.sub(_earnedYield);\r\n\t\t}\r\n\t\t_self.lastAccumulatedYieldWeight = _ctx.accumulatedYieldWeight;\r\n\t}\r\n\r\n\tfunction checkHealth(\r\n\t\tData storage _self,\r\n\t\tContext storage _ctx,\r\n\t\tstring memory _msg\r\n\t) internal view {\r\n\t\trequire(_self.isHealthy(_ctx), _msg);\r\n\t}\r\n\r\n\tfunction isHealthy(Data storage _self, Context storage _ctx) internal view returns (bool) {\r\n\t\treturn collateralizationLimit(_ctx).cmp(_self.getCollateralizationRatio(_ctx)) <= 0;\r\n\t}\r\n\r\n\tfunction collateralizationLimit(Context storage _ctx) internal view returns (FixedPointMath.uq192x64 memory) {\r\n\t\treturn\r\n\t\t\tFixedPointMath.uq192x64(\r\n\t\t\t\tMAXIMUM_COLLATERALIZATION_LIMIT.mul(_ctx.fryerConfig.getConfigValue(ConfigNames.FRYER_LTV)).div(\r\n\t\t\t\t\t_ctx.fryerConfig.PERCENT_DENOMINATOR()\r\n\t\t\t\t)\r\n\t\t\t);\r\n\t}\r\n\r\n\tfunction getUpdatedTotalDebt(Data storage _self, Context storage _ctx) internal view returns (uint256) {\r\n\t\tuint256 _unclaimedYield = _self.getEarnedYield(_ctx);\r\n\t\tif (_unclaimedYield == 0) {\r\n\t\t\treturn _self.totalDebt;\r\n\t\t}\r\n\r\n\t\tuint256 _currentTotalDebt = _self.totalDebt;\r\n\t\tif (_unclaimedYield >= _currentTotalDebt) {\r\n\t\t\treturn 0;\r\n\t\t}\r\n\r\n\t\treturn _currentTotalDebt.sub(_unclaimedYield);\r\n\t}\r\n\r\n\tfunction getUpdatedTotalCredit(Data storage _self, Context storage _ctx) internal view returns (uint256) {\r\n\t\tuint256 _unclaimedYield = _self.getEarnedYield(_ctx);\r\n\t\tif (_unclaimedYield == 0) {\r\n\t\t\treturn _self.totalCredit;\r\n\t\t}\r\n\r\n\t\tuint256 _currentTotalDebt = _self.totalDebt;\r\n\t\tif (_unclaimedYield <= _currentTotalDebt) {\r\n\t\t\treturn 0;\r\n\t\t}\r\n\r\n\t\treturn _self.totalCredit.add(_unclaimedYield.sub(_currentTotalDebt));\r\n\t}\r\n\r\n\tfunction getEarnedYield(Data storage _self, Context storage _ctx) internal view returns (uint256) {\r\n\t\tFixedPointMath.uq192x64 memory _currentAccumulatedYieldWeight = _ctx.accumulatedYieldWeight;\r\n\t\tFixedPointMath.uq192x64 memory _lastAccumulatedYieldWeight = _self.lastAccumulatedYieldWeight;\r\n\r\n\t\tif (_currentAccumulatedYieldWeight.cmp(_lastAccumulatedYieldWeight) == 0) {\r\n\t\t\treturn 0;\r\n\t\t}\r\n\r\n\t\treturn _currentAccumulatedYieldWeight.sub(_lastAccumulatedYieldWeight).mul(_self.totalDeposited).decode();\r\n\t}\r\n\r\n\tfunction getCollateralizationRatio(Data storage _self, Context storage _ctx)\r\n\t\tinternal\r\n\t\tview\r\n\t\treturns (FixedPointMath.uq192x64 memory)\r\n\t{\r\n\t\tuint256 _totalDebt = _self.getUpdatedTotalDebt(_ctx);\r\n\t\tif (_totalDebt == 0) {\r\n\t\t\treturn FixedPointMath.maximumValue();\r\n\t\t}\r\n\t\treturn FixedPointMath.fromU256(_self.totalDeposited).div(_totalDebt);\r\n\t}\r\n}\r\n\r\n\r\n// Dependency file: @openzeppelin/contracts/utils/Context.sol\r\n\r\n\r\n// pragma solidity >=0.6.0 <0.8.0;\r\n\r\n/*\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with GSN meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address payable) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes memory) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n\r\n// Dependency file: @openzeppelin/contracts/token/ERC20/ERC20.sol\r\n\r\n\r\n// pragma solidity >=0.6.0 <0.8.0;\r\n\r\n// import \"@openzeppelin/contracts/utils/Context.sol\";\r\n// import \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\r\n// import \"@openzeppelin/contracts/math/SafeMath.sol\";\r\n\r\n/**\r\n * @dev Implementation of the {IERC20} interface.\r\n *\r\n * This implementation is agnostic to the way tokens are created. This means\r\n * that a supply mechanism has to be added in a derived contract using {_mint}.\r\n * For a generic mechanism see {ERC20PresetMinterPauser}.\r\n *\r\n * TIP: For a detailed writeup see our guide\r\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\r\n * to implement supply mechanisms].\r\n *\r\n * We have followed general OpenZeppelin guidelines: functions revert instead\r\n * of returning `false` on failure. This behavior is nonetheless conventional\r\n * and does not conflict with the expectations of ERC20 applications.\r\n *\r\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\r\n * This allows applications to reconstruct the allowance for all accounts just\r\n * by listening to said events. Other implementations of the EIP may not emit\r\n * these events, as it isn't required by the specification.\r\n *\r\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\r\n * functions have been added to mitigate the well-known issues around setting\r\n * allowances. See {IERC20-approve}.\r\n */\r\ncontract ERC20 is Context, IERC20 {\r\n    using SafeMath for uint256;\r\n\r\n    mapping (address => uint256) private _balances;\r\n\r\n    mapping (address => mapping (address => uint256)) private _allowances;\r\n\r\n    uint256 private _totalSupply;\r\n\r\n    string private _name;\r\n    string private _symbol;\r\n    uint8 private _decimals;\r\n\r\n    /**\r\n     * @dev Sets the values for {name} and {symbol}, initializes {decimals} with\r\n     * a default value of 18.\r\n     *\r\n     * To select a different value for {decimals}, use {_setupDecimals}.\r\n     *\r\n     * All three of these values are immutable: they can only be set once during\r\n     * construction.\r\n     */\r\n    constructor (string memory name_, string memory symbol_) public {\r\n        _name = name_;\r\n        _symbol = symbol_;\r\n        _decimals = 18;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the name of the token.\r\n     */\r\n    function name() public view virtual returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the symbol of the token, usually a shorter version of the\r\n     * name.\r\n     */\r\n    function symbol() public view virtual returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of decimals used to get its user representation.\r\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\r\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\r\n     *\r\n     * Tokens usually opt for a value of 18, imitating the relationship between\r\n     * Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is\r\n     * called.\r\n     *\r\n     * NOTE: This information is only used for _display_ purposes: it in\r\n     * no way affects any of the arithmetic of the contract, including\r\n     * {IERC20-balanceOf} and {IERC20-transfer}.\r\n     */\r\n    function decimals() public view virtual returns (uint8) {\r\n        return _decimals;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-totalSupply}.\r\n     */\r\n    function totalSupply() public view virtual override returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-balanceOf}.\r\n     */\r\n    function balanceOf(address account) public view virtual override returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-transfer}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `recipient` cannot be the zero address.\r\n     * - the caller must have a balance of at least `amount`.\r\n     */\r\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\r\n        _transfer(_msgSender(), recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-allowance}.\r\n     */\r\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-approve}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\r\n        _approve(_msgSender(), spender, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-transferFrom}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance. This is not\r\n     * required by the EIP. See the note at the beginning of {ERC20}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `sender` and `recipient` cannot be the zero address.\r\n     * - `sender` must have a balance of at least `amount`.\r\n     * - the caller must have allowance for ``sender``'s tokens of at least\r\n     * `amount`.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \"ERC20: transfer amount exceeds allowance\"));\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\r\n     *\r\n     * This is an alternative to {approve} that can be used as a mitigation for\r\n     * problems described in {IERC20-approve}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\r\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\r\n     *\r\n     * This is an alternative to {approve} that can be used as a mitigation for\r\n     * problems described in {IERC20-approve}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     * - `spender` must have allowance for the caller of at least\r\n     * `subtractedValue`.\r\n     */\r\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\r\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \"ERC20: decreased allowance below zero\"));\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\r\n     *\r\n     * This is internal function is equivalent to {transfer}, and can be used to\r\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `sender` cannot be the zero address.\r\n     * - `recipient` cannot be the zero address.\r\n     * - `sender` must have a balance of at least `amount`.\r\n     */\r\n    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\r\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\r\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\r\n\r\n        _beforeTokenTransfer(sender, recipient, amount);\r\n\r\n        _balances[sender] = _balances[sender].sub(amount, \"ERC20: transfer amount exceeds balance\");\r\n        _balances[recipient] = _balances[recipient].add(amount);\r\n        emit Transfer(sender, recipient, amount);\r\n    }\r\n\r\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\r\n     * the total supply.\r\n     *\r\n     * Emits a {Transfer} event with `from` set to the zero address.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `to` cannot be the zero address.\r\n     */\r\n    function _mint(address account, uint256 amount) internal virtual {\r\n        require(account != address(0), \"ERC20: mint to the zero address\");\r\n\r\n        _beforeTokenTransfer(address(0), account, amount);\r\n\r\n        _totalSupply = _totalSupply.add(amount);\r\n        _balances[account] = _balances[account].add(amount);\r\n        emit Transfer(address(0), account, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Destroys `amount` tokens from `account`, reducing the\r\n     * total supply.\r\n     *\r\n     * Emits a {Transfer} event with `to` set to the zero address.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `account` cannot be the zero address.\r\n     * - `account` must have at least `amount` tokens.\r\n     */\r\n    function _burn(address account, uint256 amount) internal virtual {\r\n        require(account != address(0), \"ERC20: burn from the zero address\");\r\n\r\n        _beforeTokenTransfer(account, address(0), amount);\r\n\r\n        _balances[account] = _balances[account].sub(amount, \"ERC20: burn amount exceeds balance\");\r\n        _totalSupply = _totalSupply.sub(amount);\r\n        emit Transfer(account, address(0), amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\r\n     *\r\n     * This internal function is equivalent to `approve`, and can be used to\r\n     * e.g. set automatic allowances for certain subsystems, etc.\r\n     *\r\n     * Emits an {Approval} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `owner` cannot be the zero address.\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Sets {decimals} to a value other than the default one of 18.\r\n     *\r\n     * WARNING: This function should only be called from the constructor. Most\r\n     * applications that interact with token contracts will not expect\r\n     * {decimals} to ever change, and may work incorrectly if it does.\r\n     */\r\n    function _setupDecimals(uint8 decimals_) internal virtual {\r\n        _decimals = decimals_;\r\n    }\r\n\r\n    /**\r\n     * @dev Hook that is called before any transfer of tokens. This includes\r\n     * minting and burning.\r\n     *\r\n     * Calling conditions:\r\n     *\r\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\r\n     * will be to transferred to `to`.\r\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\r\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\r\n     * - `from` and `to` are never both zero.\r\n     *\r\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\r\n     */\r\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual { }\r\n}\r\n\r\n\r\n// Dependency file: contracts/libraries/Convert.sol\r\n\r\n// pragma solidity >=0.6.5 <0.8.0;\r\n\r\n// pragma experimental ABIEncoderV2;\r\n\r\n// import '/Users/sg99022ml/Desktop/chfry-protocol-internal/node_modules/@openzeppelin/contracts/token/ERC20/ERC20.sol';\r\n// import '/Users/sg99022ml/Desktop/chfry-protocol-internal/node_modules/@openzeppelin/contracts/math/SafeMath.sol';\r\n\r\ncontract Convert {\r\n\tusing SafeMath for uint256;\r\n\r\n\tfunction convertTokenAmount(\r\n\t\taddress _fromToken,\r\n\t\taddress _toToken,\r\n\t\tuint256 _fromAmount\r\n\t) public view returns (uint256 toAmount) {\r\n\t\tuint256 fromDecimals = uint256(ERC20(_fromToken).decimals());\r\n\t\tuint256 toDecimals = uint256(ERC20(_toToken).decimals());\r\n\t\tif (fromDecimals > toDecimals) {\r\n\t\t\ttoAmount = _fromAmount.div(10**(fromDecimals.sub(toDecimals)));\r\n\t\t} else if (toDecimals > fromDecimals) {\r\n\t\t\ttoAmount = _fromAmount.mul(10**(toDecimals.sub(fromDecimals)));\r\n\t\t} else {\r\n\t\t\ttoAmount = _fromAmount;\r\n\t\t}\r\n\t\treturn toAmount;\r\n\t}\r\n}\r\n\r\n\r\n// Dependency file: contracts/libraries/NoDelegateCall.sol\r\n\r\n// pragma solidity >=0.6.5 <0.8.0;\r\n\r\n\r\n/// @title Prevents delegatecall to a contract\r\n/// @notice Base contract that provides a modifier for preventing delegatecall to methods in a child contract\r\nabstract contract NoDelegateCall {\r\n    /// @dev The original address of this contract\r\n    address private immutable original;\r\n\r\n    constructor() public {\r\n        // Immutables are computed in the init code of the contract, and then inlined into the deployed bytecode.\r\n        // In other words, this variable won't change when it's checked at runtime.\r\n        original = address(this);\r\n    }\r\n\r\n    /// @dev Private method is used instead of inlining into modifier because modifiers are copied into each method,\r\n    ///     and the use of immutable means the address bytes are copied in every place the modifier is used.\r\n    function checkNotDelegateCall() private view {\r\n        require(address(this) == original);\r\n    }\r\n\r\n    /// @notice Prevents delegatecall into the modified method\r\n    modifier noDelegateCall() {\r\n        checkNotDelegateCall();\r\n        _;\r\n    }\r\n}\r\n\r\n// Root file: contracts/Fryer.sol\r\n\r\npragma solidity >=0.6.5 <0.8.0;\r\n\r\npragma experimental ABIEncoderV2;\r\n\r\n// import \"/Users/sg99022ml/Desktop/chfry-protocol-internal/node_modules/@openzeppelin/contracts/math/Math.sol\";\r\n// import \"/Users/sg99022ml/Desktop/chfry-protocol-internal/node_modules/@openzeppelin/contracts/utils/ReentrancyGuard.sol\";\r\n// import \"/Users/sg99022ml/Desktop/chfry-protocol-internal/node_modules/@openzeppelin/contracts/utils/Address.sol\";\r\n// import \"/Users/sg99022ml/Desktop/chfry-protocol-internal/node_modules/@openzeppelin/contracts/math/SafeMath.sol\";\r\n// import \"/Users/sg99022ml/Desktop/chfry-protocol-internal/node_modules/@openzeppelin/contracts/token/ERC20/IERC20.sol\";\r\n\r\n// import \"contracts/interfaces/IChainlink.sol\";\r\n// import \"contracts/interfaces/IFryerConfig.sol\";\r\n// import \"contracts/interfaces/IVaultAdapter.sol\";\r\n// import \"contracts/interfaces/IOven.sol\";\r\n// import \"contracts/interfaces/IMintableERC20.sol\";\r\n// import \"contracts/interfaces/IDetailedERC20.sol\";\r\n// import \"contracts/interfaces/IERC3156FlashLender.sol\";\r\n// import \"contracts/interfaces/IERC3156FlashBorrower.sol\";\r\n// import \"contracts/libraries/Upgradable.sol\";\r\n// import \"contracts/libraries/FixedPointMath.sol\";\r\n// import \"contracts/libraries/Vault.sol\";\r\n// import \"contracts/libraries/CDP.sol\";\r\n// import \"contracts/libraries/TransferHelper.sol\";\r\n// import \"contracts/libraries/ConfigNames.sol\";\r\n// import \"contracts/libraries/Convert.sol\";\r\n// import \"contracts/libraries/NoDelegateCall.sol\";\r\n\r\ncontract Fryer is\r\n    ReentrancyGuard,\r\n    UpgradableProduct,\r\n    IERC3156FlashLender,\r\n    Convert,\r\n    NoDelegateCall\r\n{\r\n    using CDP for CDP.Data;\r\n    using FixedPointMath for FixedPointMath.uq192x64;\r\n    using Vault for Vault.Data;\r\n    using Vault for Vault.List;\r\n    using TransferHelper for address;\r\n    using SafeMath for uint256;\r\n    using Address for address;\r\n\r\n    event OvenUpdated(address indexed newOven);\r\n    event ConfigUpdated(address indexed newConfig);\r\n    event RewardsUpdated(address indexed reward);\r\n    event EmergencyExitUpdated(bool indexed emergencyExit);\r\n    event ActiveVaultUpdated(address indexed adapter);\r\n    event FundsHarvested(\r\n        uint256 indexed harvestedAmount,\r\n        uint256 indexed decreasedValue\r\n    );\r\n    event FundsFlushed(uint256 indexed depositedAmount);\r\n    event TokensDeposited(address indexed user, uint256 indexed amount);\r\n    event TokensWithdrawn(\r\n        address indexed user,\r\n        uint256 indexed amount,\r\n        uint256 withdrawnAmount,\r\n        uint256 decreasedValue\r\n    );\r\n    event TokensRepaid(\r\n        address indexed user,\r\n        uint256 indexed parentAmount,\r\n        uint256 indexed childAmount\r\n    );\r\n    event TokensLiquidated(\r\n        address indexed user,\r\n        uint256 indexed amount,\r\n        uint256 withdrawnAmount,\r\n        uint256 decreasedValue\r\n    );\r\n    event FundsRecalled(\r\n        uint256 indexed vaultId,\r\n        uint256 withdrawnAmount,\r\n        uint256 decreasedValue\r\n    );\r\n    event UseFlashloan(\r\n        address indexed user,\r\n        address token,\r\n        uint256 amount,\r\n        uint256 fee\r\n    );\r\n\r\n    bytes32 public constant FLASH_CALLBACK_SUCCESS =\r\n        keccak256(\"ERC3156FlashBorrower.onFlashLoan\");\r\n\r\n    // DAI/USDT/USDC\r\n    address public token;\r\n\r\n    // FiresToken\r\n    address public friesToken;\r\n\r\n    address public oven;\r\n\r\n    address public rewards;\r\n\r\n    uint256 public totalDeposited;\r\n\r\n    uint256 public flushActivator;\r\n\r\n    bool public initialized;\r\n\r\n    bool public emergencyExit;\r\n\r\n    CDP.Context private _ctx;\r\n\r\n    mapping(address => CDP.Data) private _cdps;\r\n\r\n    Vault.List private _vaults;\r\n\r\n    address public _linkGasOracle;\r\n\r\n    uint256 public pegMinimum;\r\n\r\n    IFryerConfig public fryerConfig;\r\n\r\n    constructor(\r\n        address _token,\r\n        address _friesToken,\r\n        address _fryerConfig\r\n    ) public {\r\n        token = _token;\r\n        friesToken = _friesToken;\r\n        flushActivator = 100000 * 10**uint256(IDetailedERC20(token).decimals());\r\n        fryerConfig = IFryerConfig(_fryerConfig);\r\n        _ctx.fryerConfig = fryerConfig;\r\n        _ctx.accumulatedYieldWeight = FixedPointMath.uq192x64(0);\r\n    }\r\n\r\n    modifier expectInitialized() {\r\n        require(initialized, \"not initialized.\");\r\n        _;\r\n    }\r\n\r\n    function setOven(address _oven) external requireImpl {\r\n        require(\r\n            _oven != fryerConfig.ZERO_ADDRESS(),\r\n            \"oven address cannot be 0x0.\"\r\n        );\r\n        oven = _oven;\r\n        emit OvenUpdated(_oven);\r\n    }\r\n\r\n    function setConfig(address _config) external requireImpl {\r\n        require(\r\n            _config != fryerConfig.ZERO_ADDRESS(),\r\n            \"config address cannot be 0x0.\"\r\n        );\r\n        fryerConfig = IFryerConfig(_config);\r\n        _ctx.fryerConfig = fryerConfig;\r\n        emit ConfigUpdated(_config);\r\n    }\r\n\r\n    function setFlushActivator(uint256 _flushActivator) external requireImpl {\r\n        flushActivator = _flushActivator;\r\n    }\r\n\r\n    function setRewards(address _rewards) external requireImpl {\r\n        require(\r\n            _rewards != fryerConfig.ZERO_ADDRESS(),\r\n            \"rewards address cannot be 0x0.\"\r\n        );\r\n        rewards = _rewards;\r\n        emit RewardsUpdated(_rewards);\r\n    }\r\n\r\n    function setOracleAddress(address Oracle, uint256 peg)\r\n        external\r\n        requireImpl\r\n    {\r\n        _linkGasOracle = Oracle;\r\n        pegMinimum = peg;\r\n    }\r\n\r\n    function setEmergencyExit(bool _emergencyExit) external requireImpl {\r\n        emergencyExit = _emergencyExit;\r\n\r\n        emit EmergencyExitUpdated(_emergencyExit);\r\n    }\r\n\r\n    function collateralizationLimit()\r\n        external\r\n        view\r\n        returns (FixedPointMath.uq192x64 memory)\r\n    {\r\n        return CDP.collateralizationLimit(_ctx);\r\n    }\r\n\r\n    function initialize(address _adapter) external requireImpl {\r\n        require(!initialized, \"already initialized\");\r\n        require(\r\n            oven != fryerConfig.ZERO_ADDRESS(),\r\n            \"cannot initialize oven address to 0x0\"\r\n        );\r\n        require(\r\n            rewards != fryerConfig.ZERO_ADDRESS(),\r\n            \"cannot initialize rewards address to 0x0\"\r\n        );\r\n        _updateActiveVault(_adapter);\r\n        initialized = true;\r\n    }\r\n\r\n    function migrate(address _adapter) external expectInitialized requireImpl {\r\n        _updateActiveVault(_adapter);\r\n    }\r\n\r\n    function _updateActiveVault(address _adapter) internal {\r\n        require(\r\n            _adapter != fryerConfig.ZERO_ADDRESS(),\r\n            \"active vault address cannot be 0x0.\"\r\n        );\r\n        IVaultAdapter adapter = IVaultAdapter(_adapter);\r\n        require(adapter.token() == token, \"token mismatch.\");\r\n        _vaults.push(Vault.Data({adapter: adapter, totalDeposited: 0}));\r\n        emit ActiveVaultUpdated(_adapter);\r\n    }\r\n\r\n    function harvest(uint256 _vaultId)\r\n        external\r\n        expectInitialized\r\n        returns (uint256, uint256)\r\n    {\r\n        Vault.Data storage _vault = _vaults.get(_vaultId);\r\n\r\n        (uint256 _harvestedAmount, uint256 _decreasedValue) =\r\n            _vault.harvest(address(this));\r\n\r\n        _incomeDistribution(_harvestedAmount);\r\n\r\n        emit FundsHarvested(_harvestedAmount, _decreasedValue);\r\n\r\n        return (_harvestedAmount, _decreasedValue);\r\n    }\r\n\r\n    function _incomeDistribution(uint256 amount) internal {\r\n        if (amount > 0) {\r\n            uint256 feeRate = fryerConfig.getConfigValue(ConfigNames.FRYER_HARVEST_FEE);\r\n            uint256 _feeAmount =  amount.mul(feeRate).div(fryerConfig.PERCENT_DENOMINATOR());\r\n            uint256 _distributeAmount = amount.sub(_feeAmount);\r\n\r\n            if (totalDeposited > 0) {\r\n                FixedPointMath.uq192x64 memory _weight =\r\n                    FixedPointMath.fromU256(_distributeAmount).div(\r\n                        totalDeposited\r\n                    );\r\n                _ctx.accumulatedYieldWeight = _ctx.accumulatedYieldWeight.add(\r\n                    _weight\r\n                );\r\n            }\r\n\r\n            if (_feeAmount > 0) {\r\n                token.safeTransfer(rewards, _feeAmount);\r\n            }\r\n\r\n            if (_distributeAmount > 0) {\r\n                _distributeToOven(_distributeAmount);\r\n            }\r\n        }\r\n    }\r\n\r\n    function recall(uint256 _vaultId, uint256 _amount)\r\n        external\r\n        nonReentrant\r\n        expectInitialized\r\n        returns (uint256, uint256)\r\n    {\r\n        return _recallFunds(_vaultId, _amount);\r\n    }\r\n\r\n    function recallAll(uint256 _vaultId)\r\n        external\r\n        nonReentrant\r\n        expectInitialized\r\n        returns (uint256, uint256)\r\n    {\r\n        Vault.Data storage _vault = _vaults.get(_vaultId);\r\n        return _recallFunds(_vaultId, _vault.totalDeposited);\r\n    }\r\n\r\n    function flush() external nonReentrant expectInitialized returns (uint256) {\r\n        require(!emergencyExit, \"emergency pause enabled\");\r\n\r\n        return flushActiveVault();\r\n    }\r\n\r\n    function flushActiveVault() internal returns (uint256) {\r\n        Vault.Data storage _activeVault = _vaults.last();\r\n        uint256 balance = IERC20(token).balanceOf(address(this));\r\n        uint256 ratio = fryerConfig.getConfigValue(ConfigNames.FRYER_VAULT_PERCENTAGE);\r\n        uint256 pendingTotal =\r\n            balance.add(_activeVault.totalDeposited).mul(ratio)\r\n                .div(fryerConfig.PERCENT_DENOMINATOR());\r\n        if (pendingTotal > _activeVault.totalDeposited) {\r\n            uint256 _depositedAmount =\r\n                _activeVault.deposit(\r\n                    pendingTotal.sub(_activeVault.totalDeposited)\r\n                );\r\n            emit FundsFlushed(_depositedAmount);\r\n            return _depositedAmount;\r\n        } else {\r\n            return 0;\r\n        }\r\n    }\r\n\r\n    function deposit(uint256 _amount)\r\n        external\r\n        nonReentrant\r\n        noDelegateCall\r\n        noContractAllowed\r\n        expectInitialized\r\n    {\r\n        require(!emergencyExit, \"emergency pause enabled\");\r\n\r\n        CDP.Data storage _cdp = _cdps[msg.sender];\r\n        _cdp.update(_ctx);\r\n\r\n        token.safeTransferFrom(msg.sender, address(this), _amount);\r\n\r\n        totalDeposited = totalDeposited.add(_amount);\r\n\r\n        _cdp.totalDeposited = _cdp.totalDeposited.add(_amount);\r\n        _cdp.lastDeposit = block.number;\r\n\r\n        if (_amount >= flushActivator) {\r\n            flushActiveVault();\r\n        }\r\n\r\n        emit TokensDeposited(msg.sender, _amount);\r\n    }\r\n\r\n    function withdraw(uint256 _amount)\r\n        external\r\n        nonReentrant\r\n        noDelegateCall\r\n        noContractAllowed\r\n        expectInitialized\r\n        returns (uint256, uint256)\r\n    {\r\n        CDP.Data storage _cdp = _cdps[msg.sender];\r\n        require(block.number > _cdp.lastDeposit, \"\");\r\n\r\n        _cdp.update(_ctx);\r\n\r\n        (uint256 _withdrawnAmount, uint256 _decreasedValue) =\r\n            _withdrawFundsTo(msg.sender, _amount);\r\n\r\n        _cdp.totalDeposited = _cdp.totalDeposited.sub(\r\n            _decreasedValue,\r\n            \"Exceeds withdrawable amount\"\r\n        );\r\n        _cdp.checkHealth(\r\n            _ctx,\r\n            \"Action blocked: unhealthy collateralization ratio\"\r\n        );\r\n        if (_amount >= flushActivator) {\r\n            flushActiveVault();\r\n        }\r\n        emit TokensWithdrawn(\r\n            msg.sender,\r\n            _amount,\r\n            _withdrawnAmount,\r\n            _decreasedValue\r\n        );\r\n\r\n        return (_withdrawnAmount, _decreasedValue);\r\n    }\r\n\r\n    function repay(uint256 _parentAmount, uint256 _childAmount)\r\n        external\r\n        nonReentrant\r\n        noDelegateCall\r\n        noContractAllowed\r\n        onLinkCheck\r\n        expectInitialized\r\n    {\r\n        CDP.Data storage _cdp = _cdps[msg.sender];\r\n        _cdp.update(_ctx);\r\n\r\n        if (_parentAmount > 0) {\r\n            token.safeTransferFrom(msg.sender, address(this), _parentAmount);\r\n            _distributeToOven(_parentAmount);\r\n        }\r\n\r\n        uint256 childAmount_ =\r\n            convertTokenAmount(friesToken, token, _childAmount);\r\n        // friesUsd convert USDT/DAI/USDC > 0\r\n        if (childAmount_ > 0) {\r\n            IMintableERC20(friesToken).burnFrom(msg.sender, _childAmount);\r\n            IMintableERC20(friesToken).lowerHasMinted(_childAmount);\r\n        } else {\r\n            _childAmount = 0;\r\n        }\r\n\r\n        uint256 _totalAmount = _parentAmount.add(childAmount_);\r\n        _cdp.totalDebt = _cdp.totalDebt.sub(_totalAmount);\r\n\r\n        emit TokensRepaid(msg.sender, _parentAmount, _childAmount);\r\n    }\r\n\r\n    function liquidate(uint256 _amount)\r\n        external\r\n        nonReentrant\r\n        noDelegateCall\r\n        noContractAllowed\r\n        onLinkCheck\r\n        expectInitialized\r\n        returns (uint256, uint256)\r\n    {\r\n        CDP.Data storage _cdp = _cdps[msg.sender];\r\n        _cdp.update(_ctx);\r\n\r\n        if (_amount > _cdp.totalDebt) {\r\n            _amount = _cdp.totalDebt;\r\n        }\r\n        (uint256 _withdrawnAmount, uint256 _decreasedValue) =\r\n            _withdrawFundsTo(address(this), _amount);\r\n        _distributeToOven(_withdrawnAmount);\r\n\r\n        _cdp.totalDeposited = _cdp.totalDeposited.sub(_decreasedValue);\r\n        _cdp.totalDebt = _cdp.totalDebt.sub(_withdrawnAmount);\r\n        emit TokensLiquidated(\r\n            msg.sender,\r\n            _amount,\r\n            _withdrawnAmount,\r\n            _decreasedValue\r\n        );\r\n\r\n        return (_withdrawnAmount, _decreasedValue);\r\n    }\r\n\r\n    function borrow(uint256 _amount)\r\n        external\r\n        nonReentrant\r\n        noDelegateCall\r\n        noContractAllowed\r\n        onLinkCheck\r\n        expectInitialized\r\n    {\r\n        CDP.Data storage _cdp = _cdps[msg.sender];\r\n        _cdp.update(_ctx);\r\n\r\n        uint256 _totalCredit = _cdp.totalCredit;\r\n\r\n        if (_totalCredit < _amount) {\r\n            uint256 _remainingAmount = _amount.sub(_totalCredit);\r\n            _cdp.totalDebt = _cdp.totalDebt.add(_remainingAmount);\r\n            _cdp.totalCredit = 0;\r\n            _cdp.checkHealth(_ctx, \"Loan-to-value ratio breached\");\r\n        } else {\r\n            _cdp.totalCredit = _totalCredit.sub(_amount);\r\n        }\r\n        uint256 mint = convertTokenAmount(token, friesToken, _amount);\r\n        IMintableERC20(friesToken).mint(msg.sender, mint);\r\n        if (_amount >= flushActivator) {\r\n            flushActiveVault();\r\n        }\r\n    }\r\n\r\n    function vaultCount() external view returns (uint256) {\r\n        return _vaults.length();\r\n    }\r\n\r\n    function getVaultAdapter(uint256 _vaultId)\r\n        external\r\n        view\r\n        returns (IVaultAdapter)\r\n    {\r\n        Vault.Data storage _vault = _vaults.get(_vaultId);\r\n        return _vault.adapter;\r\n    }\r\n\r\n    function getVaultTotalDeposited(uint256 _vaultId)\r\n        external\r\n        view\r\n        returns (uint256)\r\n    {\r\n        Vault.Data storage _vault = _vaults.get(_vaultId);\r\n        return _vault.totalDeposited;\r\n    }\r\n\r\n    function getCdpTotalDeposited(address _account)\r\n        external\r\n        view\r\n        returns (uint256)\r\n    {\r\n        CDP.Data storage _cdp = _cdps[_account];\r\n        return _cdp.totalDeposited;\r\n    }\r\n\r\n    function getCdpTotalDebt(address _account) external view returns (uint256) {\r\n        CDP.Data storage _cdp = _cdps[_account];\r\n        return _cdp.getUpdatedTotalDebt(_ctx);\r\n    }\r\n\r\n    function getCdpTotalCredit(address _account)\r\n        external\r\n        view\r\n        returns (uint256)\r\n    {\r\n        CDP.Data storage _cdp = _cdps[_account];\r\n        return _cdp.getUpdatedTotalCredit(_ctx);\r\n    }\r\n\r\n    function getCdpLastDeposit(address _account)\r\n        external\r\n        view\r\n        returns (uint256)\r\n    {\r\n        CDP.Data storage _cdp = _cdps[_account];\r\n        return _cdp.lastDeposit;\r\n    }\r\n\r\n    function _distributeToOven(uint256 amount) internal {\r\n        token.safeApprove(oven, amount);\r\n        IOven(oven).distribute(address(this), amount);\r\n        uint256 mintAmount = convertTokenAmount(token, friesToken, amount);\r\n        IMintableERC20(friesToken).lowerHasMinted(mintAmount);\r\n    }\r\n\r\n    modifier onLinkCheck() {\r\n        if (pegMinimum > 0) {\r\n            uint256 oracleAnswer =\r\n                uint256(IChainlink(_linkGasOracle).latestAnswer());\r\n            require(oracleAnswer > pegMinimum, \"off peg limitation\");\r\n        }\r\n        _;\r\n    }\r\n\r\n    modifier noContractAllowed() {\r\n        require(\r\n            !address(msg.sender).isContract() && msg.sender == tx.origin,\r\n            \"Sorry we do not accept contract!\"\r\n        );\r\n        _;\r\n    }\r\n\r\n    function _recallFunds(uint256 _vaultId, uint256 _amount)\r\n        internal\r\n        returns (uint256, uint256)\r\n    {\r\n        require(\r\n            emergencyExit ||\r\n                msg.sender == impl ||\r\n                _vaultId != _vaults.lastIndex(),\r\n            \"not an emergency, not governance, and user does not have permission to recall funds from active vault\"\r\n        );\r\n\r\n        Vault.Data storage _vault = _vaults.get(_vaultId);\r\n        (uint256 _withdrawnAmount, uint256 _decreasedValue) =\r\n            _vault.withdraw(address(this), _amount);\r\n\r\n        emit FundsRecalled(_vaultId, _withdrawnAmount, _decreasedValue);\r\n\r\n        return (_withdrawnAmount, _decreasedValue);\r\n    }\r\n\r\n    function _withdrawFundsTo(address _recipient, uint256 _amount)\r\n        internal\r\n        returns (uint256, uint256)\r\n    {\r\n        uint256 _bufferedAmount =\r\n            Math.min(_amount, IERC20(token).balanceOf(address(this)));\r\n\r\n        if (_recipient != address(this)) {\r\n            token.safeTransfer(_recipient, _bufferedAmount);\r\n        }\r\n\r\n        uint256 _totalWithdrawn = _bufferedAmount;\r\n        uint256 _totalDecreasedValue = _bufferedAmount;\r\n\r\n        uint256 _remainingAmount = _amount.sub(_bufferedAmount);\r\n        if (_remainingAmount > 0) {\r\n            Vault.Data storage _activeVault = _vaults.last();\r\n            (uint256 _withdrawAmount, uint256 _decreasedValue) =\r\n                _activeVault.withdraw(_recipient, _remainingAmount);\r\n\r\n            _totalWithdrawn = _totalWithdrawn.add(_withdrawAmount);\r\n            _totalDecreasedValue = _totalDecreasedValue.add(_decreasedValue);\r\n        }\r\n\r\n        totalDeposited = totalDeposited.sub(_totalDecreasedValue);\r\n\r\n        return (_totalWithdrawn, _totalDecreasedValue);\r\n    }\r\n\r\n    // flash\r\n\r\n    function flashLoan(\r\n        IERC3156FlashBorrower receiver,\r\n        address token_,\r\n        uint256 amount,\r\n        bytes calldata data\r\n    ) external override returns (bool) {\r\n        require(token == token_, \"FlashLender: Unsupported currency\");\r\n        uint256 _fee = _flashFee(amount);\r\n        token.safeTransfer(address(receiver), amount);\r\n        require(\r\n            receiver.onFlashLoan(msg.sender, token, amount, _fee, data) ==\r\n                FLASH_CALLBACK_SUCCESS,\r\n            \"FlashLender: Callback failed\"\r\n        );\r\n        token.safeTransferFrom(\r\n            address(receiver),\r\n            address(this),\r\n            amount.add(_fee)\r\n        );\r\n\r\n        _incomeDistribution(_fee);\r\n        emit UseFlashloan(tx.origin, token, amount, _fee);\r\n        return true;\r\n    }\r\n\r\n    function flashFee(address token_, uint256 amount)\r\n        external\r\n        view\r\n        override\r\n        returns (uint256)\r\n    {\r\n        require(token == token_, \"FlashLender: Unsupported currency\");\r\n        return _flashFee(amount);\r\n    }\r\n\r\n    function _flashFee(uint256 amount) internal view returns (uint256) {\r\n        uint256 prop =\r\n            fryerConfig.getConfigValue(ConfigNames.FRYER_FLASH_FEE_PROPORTION);\r\n        uint256 PERCENT_DENOMINATOR = fryerConfig.PERCENT_DENOMINATOR();\r\n        return amount.mul(prop).div(PERCENT_DENOMINATOR);\r\n    }\r\n\r\n    /**\r\n     * @dev The amount of currency available to be lended.\r\n     * @param token_ The loan currency.\r\n     * @return The amount of `token` that can be borrowed.\r\n     */\r\n    function maxFlashLoan(address token_)\r\n        external\r\n        view\r\n        override\r\n        returns (uint256)\r\n    {\r\n        if (token == token_) {\r\n            return IERC20(token).balanceOf(address(this));\r\n        } else {\r\n            return 0;\r\n        }\r\n    }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_friesToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_fryerConfig\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"adapter\",\"type\":\"address\"}],\"name\":\"ActiveVaultUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newConfig\",\"type\":\"address\"}],\"name\":\"ConfigUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bool\",\"name\":\"emergencyExit\",\"type\":\"bool\"}],\"name\":\"EmergencyExitUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"depositedAmount\",\"type\":\"uint256\"}],\"name\":\"FundsFlushed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"harvestedAmount\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"decreasedValue\",\"type\":\"uint256\"}],\"name\":\"FundsHarvested\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"vaultId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"withdrawnAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"decreasedValue\",\"type\":\"uint256\"}],\"name\":\"FundsRecalled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_oldImpl\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_newImpl\",\"type\":\"address\"}],\"name\":\"ImplChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOven\",\"type\":\"address\"}],\"name\":\"OvenUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"reward\",\"type\":\"address\"}],\"name\":\"RewardsUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TokensDeposited\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"withdrawnAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"decreasedValue\",\"type\":\"uint256\"}],\"name\":\"TokensLiquidated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"parentAmount\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"childAmount\",\"type\":\"uint256\"}],\"name\":\"TokensRepaid\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"withdrawnAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"decreasedValue\",\"type\":\"uint256\"}],\"name\":\"TokensWithdrawn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"}],\"name\":\"UseFlashloan\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"FLASH_CALLBACK_SUCCESS\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_linkGasOracle\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"borrow\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"collateralizationLimit\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"x\",\"type\":\"uint256\"}],\"internalType\":\"struct FixedPointMath.uq192x64\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_fromToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_toToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_fromAmount\",\"type\":\"uint256\"}],\"name\":\"convertTokenAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"toAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"emergencyExit\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"flashFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC3156FlashBorrower\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"flashLoan\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"flush\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"flushActivator\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"friesToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fryerConfig\",\"outputs\":[{\"internalType\":\"contract IFryerConfig\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"getCdpLastDeposit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"getCdpTotalCredit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"getCdpTotalDebt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"getCdpTotalDeposited\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_vaultId\",\"type\":\"uint256\"}],\"name\":\"getVaultAdapter\",\"outputs\":[{\"internalType\":\"contract IVaultAdapter\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_vaultId\",\"type\":\"uint256\"}],\"name\":\"getVaultTotalDeposited\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_vaultId\",\"type\":\"uint256\"}],\"name\":\"harvest\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"impl\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_adapter\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initialized\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"liquidate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token_\",\"type\":\"address\"}],\"name\":\"maxFlashLoan\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_adapter\",\"type\":\"address\"}],\"name\":\"migrate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"oven\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pegMinimum\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_vaultId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"recall\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_vaultId\",\"type\":\"uint256\"}],\"name\":\"recallAll\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_parentAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_childAmount\",\"type\":\"uint256\"}],\"name\":\"repay\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewards\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_config\",\"type\":\"address\"}],\"name\":\"setConfig\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_emergencyExit\",\"type\":\"bool\"}],\"name\":\"setEmergencyExit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_flushActivator\",\"type\":\"uint256\"}],\"name\":\"setFlushActivator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"Oracle\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"peg\",\"type\":\"uint256\"}],\"name\":\"setOracleAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_oven\",\"type\":\"address\"}],\"name\":\"setOven\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_rewards\",\"type\":\"address\"}],\"name\":\"setRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalDeposited\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newImpl\",\"type\":\"address\"}],\"name\":\"upgradeImpl\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vaultCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"Fryer","CompilerVersion":"v0.6.12+commit.27d51765","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000dac17f958d2ee523a2206206994597c13d831ec7000000000000000000000000f6226fe14df431c2c8de9b3215b3dda9eba3ab3b000000000000000000000000b6cadb64b72a64aa1e9768d3d70958069d64b011","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://a3c8583c6fe1378e6304a6a8c114de830a1c749692530feef1082a3c3e76ec65"}]}