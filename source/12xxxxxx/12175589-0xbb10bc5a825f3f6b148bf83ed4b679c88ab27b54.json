{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"settings\": {\r\n    \"evmVersion\": \"istanbul\",\r\n    \"libraries\": {},\r\n    \"metadata\": {\r\n      \"bytecodeHash\": \"ipfs\",\r\n      \"useLiteralContent\": true\r\n    },\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 150\r\n    },\r\n    \"remappings\": [],\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  },\r\n  \"sources\": {\r\n    \"contracts/AnyStakeRegulator.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity 0.6.6;\\r\\n\\r\\nimport \\\"./lib/@defiat-crypto/interfaces/IDeFiatPoints.sol\\\";\\r\\nimport \\\"./interfaces/IAnyStakeMigrator.sol\\\";\\r\\nimport \\\"./interfaces/IAnyStakeRegulator.sol\\\";\\r\\nimport \\\"./interfaces/IAnyStakeVault.sol\\\";\\r\\nimport \\\"./utils/AnyStakeUtils.sol\\\";\\r\\n\\r\\ncontract AnyStakeRegulator is IAnyStakeRegulator, AnyStakeUtils {\\r\\n    using SafeMath for uint256;\\r\\n\\r\\n    event Initialized(address indexed user, address vault);\\r\\n    event Claim(address indexed user, uint256 amount);\\r\\n    event Deposit(address indexed user, uint256 amount);\\r\\n    event Withdraw(address indexed user, uint256 amount);\\r\\n    event Migrate(address indexed user, uint256 amount);\\r\\n    event EmergencyWithdraw(address indexed user, uint256 amount);\\r\\n    event StakingFeeUpdated(address indexed user, uint256 stakingFee);\\r\\n    event BuybackRateUpdated(address indexed user, uint256 buybackRate);\\r\\n    event PriceMultiplierUpdated(address indexed user, uint256 amount);\\r\\n    event MigratorUpdated(address indexed user, address migrator);\\r\\n    event VaultUpdated(address indexed user, address vault);\\r\\n    event RegulatorActive(address indexed user, bool active);\\r\\n\\r\\n    struct UserInfo {\\r\\n        uint256 amount;\\r\\n        uint256 rewardDebt;\\r\\n        uint256 lastRewardBlock;\\r\\n    }\\r\\n\\r\\n    mapping (address => UserInfo) public userInfo;\\r\\n    \\r\\n    address public migrator;\\r\\n    address public vault;\\r\\n\\r\\n    bool public active; // staking is active\\r\\n    bool public initialized; // contract has been initialized\\r\\n    uint256 public stakingFee; // fee taken on withdrawals\\r\\n    uint256 public priceMultiplier; // price peg control, DFT_PRICE = (DFTP_PRICE * priceMultiplier) / 1000\\r\\n    uint256 public lastRewardBlock; // last block that rewards were received\\r\\n    uint256 public buybackBalance; // total pending DFT awaiting stabilization\\r\\n    uint256 public buybackRate; // rate of rewards stockpiled for stabilization\\r\\n    uint256 public rewardsPerShare; // DFT rewards per DFTP, times 1e18 to prevent underflow\\r\\n    uint256 public pendingRewards; // total pending DFT rewards\\r\\n    uint256 public totalShares; // total staked shares\\r\\n\\r\\n    modifier NoReentrant(address user) {\\r\\n        require(\\r\\n            block.number > userInfo[user].lastRewardBlock,\\r\\n            \\\"Regulator: Must wait 1 block\\\"\\r\\n        );\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    modifier onlyVault() {\\r\\n        require(msg.sender == vault, \\\"AnyStake: Only Vault allowed\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    modifier activated() {\\r\\n        require(initialized, \\\"Regulator: Not initialized yet\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    constructor(address _router, address _gov, address _points, address _token) \\r\\n        public \\r\\n        AnyStakeUtils(_router, _gov, _points, _token)\\r\\n    {\\r\\n        priceMultiplier = 10000; // 10000 / 1000 = 10:1\\r\\n        stakingFee = 100; // 10%\\r\\n        buybackRate = 300; // 30%\\r\\n    }\\r\\n\\r\\n    function initialize(address _vault) external onlyGovernor {\\r\\n        require(_vault != address(0), \\\"Initialize: Must pass in Vault\\\");\\r\\n        require(!initialized, \\\"Initialize: Regulator already initialized\\\");\\r\\n\\r\\n        vault = _vault;\\r\\n        active = true;\\r\\n        initialized = true;\\r\\n        emit Initialized(msg.sender, vault);\\r\\n    }\\r\\n\\r\\n    function stabilize(uint256 amount) internal {\\r\\n        if (isAbovePeg()) {\\r\\n            // Above Peg: sell DFTP, buy DFT, add to rewards\\r\\n\\r\\n            IERC20(DeFiatPoints).transfer(vault, amount);\\r\\n            IAnyStakeVault(vault).buyDeFiatWithTokens(DeFiatPoints, amount);\\r\\n        } else {\\r\\n            // Below Peg: sell DFT, buy DFTP, burn all proceeds (deflationary)\\r\\n\\r\\n            IAnyStakeVault(vault).buyPointsWithTokens(DeFiatToken, buybackBalance);\\r\\n            IDeFiatPoints(DeFiatPoints).burn(amount);\\r\\n            IDeFiatPoints(DeFiatPoints).overrideLoyaltyPoints(vault, 0);\\r\\n            buybackBalance = 0;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    // Pool - Add rewards\\r\\n    function addReward(uint256 amount) external override onlyVault {\\r\\n        if (amount == 0) {\\r\\n            return;\\r\\n        }\\r\\n\\r\\n        uint256 buybackAmount = amount.mul(buybackRate).div(1000);\\r\\n        uint256 rewardAmount = amount.sub(buybackAmount);\\r\\n\\r\\n        if (buybackAmount > 0) {\\r\\n            buybackBalance = buybackBalance.add(buybackAmount);\\r\\n        }\\r\\n\\r\\n        if (rewardAmount > 0) {\\r\\n            pendingRewards = pendingRewards.add(rewardAmount);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    // Pool - Update pool rewards, pull from Vault\\r\\n    function updatePool() external override {\\r\\n        _updatePool();\\r\\n    }\\r\\n\\r\\n    // Pool - Update pool internal\\r\\n    function _updatePool() internal {\\r\\n        if (totalShares == 0 || block.number <= lastRewardBlock || !active) {\\r\\n            return;\\r\\n        }\\r\\n\\r\\n        // calculate rewards, calls addReward()\\r\\n        IAnyStakeVault(vault).calculateRewards();\\r\\n\\r\\n        // update rewardsPerShare            \\r\\n        rewardsPerShare = rewardsPerShare.add(pendingRewards.mul(1e18).div(totalShares));\\r\\n        lastRewardBlock = block.number;\\r\\n        pendingRewards = 0;\\r\\n    }\\r\\n\\r\\n    function claim() external override activated NoReentrant(msg.sender) {\\r\\n        _updatePool();\\r\\n        _claim(msg.sender);\\r\\n    }\\r\\n\\r\\n    // Pool - Claim internal\\r\\n    function _claim(address _user) internal {\\r\\n        // get pending rewards\\r\\n        UserInfo storage user = userInfo[_user];\\r\\n        uint256 rewards = pending(_user);\\r\\n        if (rewards == 0) {\\r\\n            return;\\r\\n        }\\r\\n\\r\\n        // update pool / user metrics\\r\\n        user.rewardDebt = user.amount.mul(rewardsPerShare).div(1e18);\\r\\n        user.lastRewardBlock = block.number;\\r\\n        \\r\\n        // transfer\\r\\n        IAnyStakeVault(vault).distributeRewards(_user, rewards);\\r\\n        emit Claim(_user, rewards);\\r\\n    }\\r\\n\\r\\n    // Pool - Deposit DeFiat Points (DFTP) to earn DFT and stablize token prices\\r\\n    function deposit(uint256 amount) external override activated NoReentrant(msg.sender) {\\r\\n        _updatePool();\\r\\n        _deposit(msg.sender, amount);\\r\\n    }\\r\\n\\r\\n    // Pool - deposit internal, perform the stablization\\r\\n    function _deposit(address _user, uint256 _amount) internal {\\r\\n        UserInfo storage user = userInfo[_user];\\r\\n        require(_amount > 0, \\\"Deposit: Cannot deposit zero tokens\\\");\\r\\n\\r\\n        _claim(_user);\\r\\n\\r\\n        // update pool / user metrics\\r\\n        totalShares = totalShares.add(_amount);\\r\\n        user.amount = user.amount.add(_amount);\\r\\n        user.rewardDebt = user.amount.mul(rewardsPerShare).div(1e18);\\r\\n\\r\\n        IERC20(DeFiatPoints).transferFrom(_user, address(this), _amount);\\r\\n        emit Deposit(_user, _amount);\\r\\n    }\\r\\n\\r\\n    // Pool - Withdraw function, currently unused\\r\\n    function withdraw(uint256 amount) external override NoReentrant(msg.sender) {\\r\\n        _updatePool();\\r\\n        _withdraw(msg.sender, amount); // internal, unused\\r\\n    }\\r\\n\\r\\n    // Pool - Withdraw internal, unused\\r\\n    function _withdraw(address _user, uint256 _amount) internal {\\r\\n        UserInfo storage user = userInfo[_user];\\r\\n        require(_amount <= user.amount, \\\"Withdraw: Not enough staked\\\");\\r\\n\\r\\n        _claim(_user);\\r\\n\\r\\n        uint256 feeAmount = _amount.mul(stakingFee).div(1000);\\r\\n        uint256 remainingUserAmount = _amount.sub(feeAmount);\\r\\n\\r\\n        if (feeAmount > 0) {\\r\\n            stabilize(feeAmount);\\r\\n        }\\r\\n\\r\\n        totalShares = totalShares.sub(_amount);\\r\\n        user.amount = user.amount.sub(_amount);\\r\\n        user.rewardDebt = user.amount.mul(rewardsPerShare).div(1e18);\\r\\n\\r\\n        IERC20(DeFiatPoints).transfer(_user, remainingUserAmount);\\r\\n        emit Withdraw(_user, remainingUserAmount);\\r\\n    }\\r\\n\\r\\n    function migrate() external override NoReentrant(msg.sender) {\\r\\n        _updatePool();\\r\\n        _migrate(msg.sender);\\r\\n    }\\r\\n\\r\\n    function _migrate(address _user) internal {\\r\\n        UserInfo storage user = userInfo[_user];\\r\\n        uint256 balance = user.amount;\\r\\n\\r\\n        require(migrator != address(0), \\\"Migrate: No migrator set\\\");\\r\\n        require(balance > 0, \\\"Migrate: No tokens to migrate\\\");\\r\\n\\r\\n        IERC20(DeFiatPoints).approve(migrator, balance);\\r\\n        IAnyStakeMigrator(migrator).migrateTo(_user, DeFiatPoints, balance);\\r\\n        emit Migrate(_user, balance);\\r\\n    }\\r\\n\\r\\n    // Emergency withdraw all basis, burn the staking fee\\r\\n    function emergencyWithdraw() external NoReentrant(msg.sender) {\\r\\n        UserInfo storage user = userInfo[msg.sender];\\r\\n\\r\\n        require(user.amount > 0, \\\"EmergencyWithdraw: user amount insufficient\\\");\\r\\n\\r\\n        uint256 feeAmount = user.amount.mul(stakingFee).div(1000);\\r\\n        uint256 remainingUserAmount = user.amount.sub(feeAmount);\\r\\n        totalShares = totalShares.sub(user.amount);\\r\\n        user.amount = 0;\\r\\n        user.rewardDebt = 0;\\r\\n        user.lastRewardBlock = block.number;\\r\\n\\r\\n        IDeFiatPoints(DeFiatPoints).burn(feeAmount);\\r\\n        safeTokenTransfer(msg.sender, DeFiatPoints, remainingUserAmount);\\r\\n        emit EmergencyWithdraw(msg.sender, remainingUserAmount);\\r\\n    }\\r\\n\\r\\n    function isAbovePeg() public view returns (bool) {\\r\\n        uint256 tokenPrice = IAnyStakeVault(vault).getTokenPrice(DeFiatToken, DeFiatTokenLp);\\r\\n        uint256 pointsPrice = IAnyStakeVault(vault).getTokenPrice(DeFiatPoints, DeFiatPointsLp);\\r\\n        \\r\\n        return pointsPrice.mul(priceMultiplier).div(1000) > tokenPrice;\\r\\n    }\\r\\n\\r\\n    // View - Pending DFT Rewards for user in pool\\r\\n    function pending(address _user)\\r\\n        public\\r\\n        view\\r\\n        returns (uint256)\\r\\n    {\\r\\n        UserInfo memory user = userInfo[_user];\\r\\n        return user.amount.mul(rewardsPerShare).div(1e18).sub(user.rewardDebt);\\r\\n    }\\r\\n\\r\\n\\r\\n    // Governance - Set Staking Fee\\r\\n    function setStakingFee(uint256 _stakingFee) external onlyGovernor {\\r\\n        require(_stakingFee != stakingFee, \\\"SetFee: No fee change\\\");\\r\\n        require(_stakingFee <= 1000, \\\"SetFee: Fee cannot exceed 100%\\\");\\r\\n\\r\\n        stakingFee = _stakingFee;\\r\\n        emit StakingFeeUpdated(msg.sender, stakingFee);\\r\\n    }\\r\\n\\r\\n    // Governance - Set Buyback Rate\\r\\n    function setBuybackRate(uint256 _buybackRate) external onlyGovernor {\\r\\n        require(_buybackRate != buybackRate, \\\"SetBuybackRate: No rate change\\\");\\r\\n        require(_buybackRate <= 1000, \\\"SetBuybackRate: Cannot exceed 100%\\\");\\r\\n\\r\\n        buybackRate = _buybackRate;\\r\\n        emit BuybackRateUpdated(msg.sender, buybackRate);\\r\\n    }\\r\\n\\r\\n    // Governance - Set DeFiat Points price multiplier\\r\\n    function setPriceMultiplier(uint256 _priceMultiplier) external onlyGovernor {\\r\\n        require(_priceMultiplier != priceMultiplier, \\\"SetMultiplier: No multiplier change\\\");\\r\\n        require(_priceMultiplier > 0, \\\"SetMultiplier: Must be greater than zero\\\");\\r\\n\\r\\n        priceMultiplier = _priceMultiplier;\\r\\n        emit PriceMultiplierUpdated(msg.sender, priceMultiplier);\\r\\n    }\\r\\n\\r\\n    // Governance - Set Migrator\\r\\n    function setMigrator(address _migrator) external onlyGovernor {\\r\\n        require(_migrator != address(0), \\\"SetMigrator: No migrator change\\\");\\r\\n\\r\\n        migrator = _migrator;\\r\\n        emit MigratorUpdated(msg.sender, _migrator);\\r\\n    }\\r\\n    \\r\\n    // Governance - Set Vault\\r\\n    function setVault(address _vault) external onlyGovernor {\\r\\n        require(_vault != address(0), \\\"SetVault: No migrator change\\\");\\r\\n\\r\\n        vault = _vault;\\r\\n        emit VaultUpdated(msg.sender, vault);\\r\\n    }\\r\\n\\r\\n    // Governance - Set Pool Deposits active\\r\\n    function setActive(bool _active) external onlyGovernor {\\r\\n        require(_active != active, \\\"SetActive: No active change\\\");\\r\\n        \\r\\n        active = _active;\\r\\n        emit RegulatorActive(msg.sender, active);\\r\\n    }\\r\\n}\"\r\n    },\r\n    \"contracts/interfaces/IAnyStakeMigrator.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\n\\r\\npragma solidity 0.6.6;\\r\\n\\r\\ninterface IAnyStakeMigrator {\\r\\n    function migrateTo(address user, address token, uint256 amount) external;\\r\\n}\"\r\n    },\r\n    \"contracts/interfaces/IAnyStakeRegulator.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity 0.6.6;\\r\\n\\r\\ninterface IAnyStakeRegulator {\\r\\n    function addReward(uint256 amount) external;\\r\\n    function claim() external;\\r\\n    function deposit(uint256 amount) external;\\r\\n    function withdraw(uint256 amount) external;\\r\\n    function migrate() external;\\r\\n    function updatePool() external;\\r\\n}\"\r\n    },\r\n    \"contracts/interfaces/IAnyStakeVault.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity 0.6.6;\\r\\n\\r\\ninterface IAnyStakeVault {\\r\\n    function buyDeFiatWithTokens(address token, uint256 amount) external;\\r\\n    function buyPointsWithTokens(address token, uint256 amount) external;\\r\\n\\r\\n    function calculateRewards() external;\\r\\n    function distributeRewards(address recipient, uint256 amount) external;\\r\\n    function getTokenPrice(address token, address lpToken) external view returns (uint256);\\r\\n}\"\r\n    },\r\n    \"contracts/lib/@defiat-crypto/interfaces/IDeFiatGov.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity 0.6.6;\\r\\n\\r\\ninterface IDeFiatGov {\\r\\n    function mastermind() external view returns (address);\\r\\n    function viewActorLevelOf(address _address) external view returns (uint256);\\r\\n    function viewFeeDestination() external view returns (address);\\r\\n    function viewTxThreshold() external view returns (uint256);\\r\\n    function viewBurnRate() external view returns (uint256);\\r\\n    function viewFeeRate() external view returns (uint256);\\r\\n}\"\r\n    },\r\n    \"contracts/lib/@defiat-crypto/interfaces/IDeFiatPoints.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity 0.6.6;\\r\\n\\r\\ninterface IDeFiatPoints {\\r\\n    function viewDiscountOf(address _address) external view returns (uint256);\\r\\n    function viewEligibilityOf(address _address) external view returns (uint256 tranche);\\r\\n    function discountPointsNeeded(uint256 _tranche) external view returns (uint256 pointsNeeded);\\r\\n    function viewTxThreshold() external view returns (uint256);\\r\\n    function viewRedirection(address _address) external view returns (bool);\\r\\n\\r\\n    function overrideLoyaltyPoints(address _address, uint256 _points) external;\\r\\n    function addPoints(address _address, uint256 _txSize, uint256 _points) external;\\r\\n    function burn(uint256 _amount) external;\\r\\n}\"\r\n    },\r\n    \"contracts/lib/@defiat-crypto/utils/DeFiatGovernedUtils.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity 0.6.6;\\r\\n\\r\\nimport \\\"./DeFiatUtils.sol\\\";\\r\\nimport \\\"../interfaces/IDeFiatGov.sol\\\";\\r\\n\\r\\nabstract contract DeFiatGovernedUtils is DeFiatUtils {\\r\\n    event GovernanceUpdated(address indexed user, address governance);\\r\\n\\r\\n    address public governance;\\r\\n\\r\\n    modifier onlyMastermind {\\r\\n        require(\\r\\n            msg.sender == IDeFiatGov(governance).mastermind() || msg.sender == owner(),\\r\\n            \\\"Gov: Only Mastermind\\\"\\r\\n        );\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    modifier onlyGovernor {\\r\\n        require(\\r\\n            IDeFiatGov(governance).viewActorLevelOf(msg.sender) >= 2 || msg.sender == owner(),\\r\\n            \\\"Gov: Only Governors\\\"\\r\\n        );\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    modifier onlyPartner {\\r\\n        require(\\r\\n            IDeFiatGov(governance).viewActorLevelOf(msg.sender) >= 1 || msg.sender == owner(),\\r\\n            \\\"Gov: Only Partners\\\"\\r\\n        );\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    function _setGovernance(address _governance) internal {\\r\\n        require(_governance != governance, \\\"SetGovernance: No governance change\\\");\\r\\n\\r\\n        governance = _governance;\\r\\n        emit GovernanceUpdated(msg.sender, governance);\\r\\n    }\\r\\n\\r\\n    function setGovernance(address _governance) external onlyGovernor {\\r\\n        _setGovernance(_governance);\\r\\n    }\\r\\n}\"\r\n    },\r\n    \"contracts/lib/@defiat-crypto/utils/DeFiatUtils.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity 0.6.6;\\r\\n\\r\\nimport \\\"../../@openzeppelin/token/ERC20/IERC20.sol\\\";\\r\\nimport \\\"../../@openzeppelin/access/Ownable.sol\\\";\\r\\n\\r\\nabstract contract DeFiatUtils is Ownable {\\r\\n    event TokenSweep(address indexed user, address indexed token, uint256 amount);\\r\\n\\r\\n    // Sweep any tokens/ETH accidentally sent or airdropped to the contract\\r\\n    function sweep(address token) public virtual onlyOwner {\\r\\n        uint256 amount = IERC20(token).balanceOf(address(this));\\r\\n        require(amount > 0, \\\"Sweep: No token balance\\\");\\r\\n\\r\\n        IERC20(token).transfer(msg.sender, amount); // use of the ERC20 traditional transfer\\r\\n\\r\\n        if (address(this).balance > 0) {\\r\\n            payable(msg.sender).transfer(address(this).balance);\\r\\n        }\\r\\n\\r\\n        emit TokenSweep(msg.sender, token, amount);\\r\\n    }\\r\\n\\r\\n    // Self-Destruct contract to free space on-chain, sweep any ETH to owner\\r\\n    function kill() external onlyOwner {\\r\\n        selfdestruct(payable(msg.sender));\\r\\n    }\\r\\n}\"\r\n    },\r\n    \"contracts/lib/@openzeppelin/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity >=0.6.0 <0.8.0;\\r\\n\\r\\nimport \\\"../utils/Context.sol\\\";\\r\\n\\r\\nabstract contract Ownable is Context {\\r\\n    address private _owner;\\r\\n\\r\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\r\\n\\r\\n    constructor () internal {\\r\\n        address msgSender = _msgSender();\\r\\n        _owner = msgSender;\\r\\n        emit OwnershipTransferred(address(0), msgSender);\\r\\n    }\\r\\n\\r\\n    function owner() public view returns (address) {\\r\\n        return _owner;\\r\\n    }\\r\\n\\r\\n    modifier onlyOwner() {\\r\\n        require(_owner == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    function renounceOwnership() public virtual onlyOwner {\\r\\n        emit OwnershipTransferred(_owner, address(0));\\r\\n        _owner = address(0);\\r\\n    }\\r\\n\\r\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\r\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\r\\n        emit OwnershipTransferred(_owner, newOwner);\\r\\n        _owner = newOwner;\\r\\n    }\\r\\n}\"\r\n    },\r\n    \"contracts/lib/@openzeppelin/math/SafeMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity >=0.6.0 <0.8.0;\\r\\n\\r\\nlibrary SafeMath {\\r\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        uint256 c = a + b;\\r\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\r\\n\\r\\n        return c;\\r\\n    }\\r\\n\\r\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        return sub(a, b, \\\"SafeMath: subtraction overflow\\\");\\r\\n    }\\r\\n\\r\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\r\\n        require(b <= a, errorMessage);\\r\\n        uint256 c = a - b;\\r\\n\\r\\n        return c;\\r\\n    }\\r\\n\\r\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\r\\n        // benefit is lost if 'b' is also tested.\\r\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\r\\n        if (a == 0) {\\r\\n            return 0;\\r\\n        }\\r\\n\\r\\n        uint256 c = a * b;\\r\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\r\\n\\r\\n        return c;\\r\\n    }\\r\\n\\r\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\r\\n    }\\r\\n\\r\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\r\\n        require(b > 0, errorMessage);\\r\\n        uint256 c = a / b;\\r\\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\r\\n\\r\\n        return c;\\r\\n    }\\r\\n\\r\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        return mod(a, b, \\\"SafeMath: modulo by zero\\\");\\r\\n    }\\r\\n\\r\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\r\\n        require(b != 0, errorMessage);\\r\\n        return a % b;\\r\\n    }\\r\\n}\"\r\n    },\r\n    \"contracts/lib/@openzeppelin/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity >=0.6.0 <0.8.0;\\r\\n\\r\\ninterface IERC20 {\\r\\n    function symbol() external view returns (string memory);\\r\\n    function decimals() external view returns (uint8);\\r\\n    function totalSupply() external view returns (uint256);\\r\\n\\r\\n    // Standard\\r\\n    function balanceOf(address account) external view returns (uint256);\\r\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\r\\n    function allowance(address owner, address spender) external view returns (uint256);\\r\\n    function approve(address spender, uint256 amount) external returns (bool);\\r\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\r\\n\\r\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\r\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\r\\n}\"\r\n    },\r\n    \"contracts/lib/@openzeppelin/token/ERC20/SafeERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity >=0.6.0 <0.8.0;\\r\\n\\r\\nimport \\\"./IERC20.sol\\\";\\r\\nimport \\\"../../math/SafeMath.sol\\\";\\r\\nimport \\\"../../utils/Address.sol\\\";\\r\\n\\r\\n/**\\r\\n * @title SafeERC20\\r\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\r\\n * contract returns false). Tokens that return no value (and instead revert or\\r\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\r\\n * successful.\\r\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\r\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\r\\n */\\r\\nlibrary SafeERC20 {\\r\\n    using SafeMath for uint256;\\r\\n    using Address for address;\\r\\n\\r\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\r\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\r\\n    }\\r\\n\\r\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\r\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Deprecated. This function has issues similar to the ones found in\\r\\n     * {IERC20-approve}, and its usage is discouraged.\\r\\n     *\\r\\n     * Whenever possible, use {safeIncreaseAllowance} and\\r\\n     * {safeDecreaseAllowance} instead.\\r\\n     */\\r\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\r\\n        // safeApprove should only be called when setting an initial allowance,\\r\\n        // or when resetting it to zero. To increase and decrease it, use\\r\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\r\\n        // solhint-disable-next-line max-line-length\\r\\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\\r\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\r\\n        );\\r\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\r\\n    }\\r\\n\\r\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\r\\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\\r\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\r\\n    }\\r\\n\\r\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\r\\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \\\"SafeERC20: decreased allowance below zero\\\");\\r\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\r\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\r\\n     * @param token The token targeted by the call.\\r\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\r\\n     */\\r\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\r\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\r\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\r\\n        // the target address contains contract code and also asserts for success in the low-level call.\\r\\n\\r\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\r\\n        if (returndata.length > 0) { // Return data is optional\\r\\n            // solhint-disable-next-line max-line-length\\r\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\r\\n        }\\r\\n    }\\r\\n}\"\r\n    },\r\n    \"contracts/lib/@openzeppelin/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.6.2;\\r\\n\\r\\n/**\\r\\n * @dev Collection of functions related to the address type\\r\\n */\\r\\nlibrary Address {\\r\\n    /**\\r\\n     * @dev Returns true if `account` is a contract.\\r\\n     *\\r\\n     * [IMPORTANT]\\r\\n     * ====\\r\\n     * It is unsafe to assume that an address for which this function returns\\r\\n     * false is an externally-owned account (EOA) and not a contract.\\r\\n     *\\r\\n     * Among others, `isContract` will return false for the following\\r\\n     * types of addresses:\\r\\n     *\\r\\n     *  - an externally-owned account\\r\\n     *  - a contract in construction\\r\\n     *  - an address where a contract will be created\\r\\n     *  - an address where a contract lived, but was destroyed\\r\\n     * ====\\r\\n     */\\r\\n    function isContract(address account) internal view returns (bool) {\\r\\n        // This method relies on extcodesize, which returns 0 for contracts in\\r\\n        // construction, since the code is only stored at the end of the\\r\\n        // constructor execution.\\r\\n\\r\\n        uint256 size;\\r\\n        // solhint-disable-next-line no-inline-assembly\\r\\n        assembly { size := extcodesize(account) }\\r\\n        return size > 0;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\r\\n     * `recipient`, forwarding all available gas and reverting on errors.\\r\\n     *\\r\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\r\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\r\\n     * imposed by `transfer`, making them unable to receive funds via\\r\\n     * `transfer`. {sendValue} removes this limitation.\\r\\n     *\\r\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\r\\n     *\\r\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\r\\n     * taken to not create reentrancy vulnerabilities. Consider using\\r\\n     * {ReentrancyGuard} or the\\r\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\r\\n     */\\r\\n    function sendValue(address payable recipient, uint256 amount) internal {\\r\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\r\\n\\r\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\r\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\r\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Performs a Solidity function call using a low level `call`. A\\r\\n     * plain`call` is an unsafe replacement for a function call: use this\\r\\n     * function instead.\\r\\n     *\\r\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\r\\n     * function (like regular Solidity function calls).\\r\\n     *\\r\\n     * Returns the raw returned data. To convert to the expected return value,\\r\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `target` must be a contract.\\r\\n     * - calling `target` with `data` must not revert.\\r\\n     *\\r\\n     * _Available since v3.1._\\r\\n     */\\r\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\r\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\r\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\r\\n     *\\r\\n     * _Available since v3.1._\\r\\n     */\\r\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\r\\n        return functionCallWithValue(target, data, 0, errorMessage);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\r\\n     * but also transferring `value` wei to `target`.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - the calling contract must have an ETH balance of at least `value`.\\r\\n     * - the called Solidity function must be `payable`.\\r\\n     *\\r\\n     * _Available since v3.1._\\r\\n     */\\r\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\r\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\r\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\r\\n     *\\r\\n     * _Available since v3.1._\\r\\n     */\\r\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\r\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\r\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\r\\n\\r\\n        // solhint-disable-next-line avoid-low-level-calls\\r\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\r\\n        return _verifyCallResult(success, returndata, errorMessage);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\r\\n     * but performing a static call.\\r\\n     *\\r\\n     * _Available since v3.3._\\r\\n     */\\r\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\r\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\r\\n     * but performing a static call.\\r\\n     *\\r\\n     * _Available since v3.3._\\r\\n     */\\r\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\r\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\r\\n\\r\\n        // solhint-disable-next-line avoid-low-level-calls\\r\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\r\\n        return _verifyCallResult(success, returndata, errorMessage);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\r\\n     * but performing a delegate call.\\r\\n     *\\r\\n     * _Available since v3.3._\\r\\n     */\\r\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\r\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\r\\n     * but performing a delegate call.\\r\\n     *\\r\\n     * _Available since v3.3._\\r\\n     */\\r\\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\r\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\r\\n\\r\\n        // solhint-disable-next-line avoid-low-level-calls\\r\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\r\\n        return _verifyCallResult(success, returndata, errorMessage);\\r\\n    }\\r\\n\\r\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\r\\n        if (success) {\\r\\n            return returndata;\\r\\n        } else {\\r\\n            // Look for revert reason and bubble it up if present\\r\\n            if (returndata.length > 0) {\\r\\n                // The easiest way to bubble the revert reason is using memory via assembly\\r\\n\\r\\n                // solhint-disable-next-line no-inline-assembly\\r\\n                assembly {\\r\\n                    let returndata_size := mload(returndata)\\r\\n                    revert(add(32, returndata), returndata_size)\\r\\n                }\\r\\n            } else {\\r\\n                revert(errorMessage);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/lib/@openzeppelin/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity 0.6.6;\\r\\n\\r\\nabstract contract Context {\\r\\n    function _msgSender() internal view virtual returns (address payable) {\\r\\n        return msg.sender;\\r\\n    }\\r\\n\\r\\n    function _msgData() internal view virtual returns (bytes memory) {\\r\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\r\\n        return msg.data;\\r\\n    }\\r\\n}\"\r\n    },\r\n    \"contracts/lib/@uniswap/interfaces/IUniswapV2Factory.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.5.0;\\n\\ninterface IUniswapV2Factory {\\n    event PairCreated(address indexed token0, address indexed token1, address pair, uint);\\n\\n    function feeTo() external view returns (address);\\n    function feeToSetter() external view returns (address);\\n\\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\\n    function allPairs(uint) external view returns (address pair);\\n    function allPairsLength() external view returns (uint);\\n\\n    function createPair(address tokenA, address tokenB) external returns (address pair);\\n\\n    function setFeeTo(address) external;\\n    function setFeeToSetter(address) external;\\n}\\n\"\r\n    },\r\n    \"contracts/lib/@uniswap/interfaces/IUniswapV2Router01.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.2;\\n\\ninterface IUniswapV2Router01 {\\n    function factory() external pure returns (address);\\n    function WETH() external pure returns (address);\\n\\n    function addLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint amountADesired,\\n        uint amountBDesired,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountA, uint amountB, uint liquidity);\\n    function addLiquidityETH(\\n        address token,\\n        uint amountTokenDesired,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\\n    function removeLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint liquidity,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountA, uint amountB);\\n    function removeLiquidityETH(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountToken, uint amountETH);\\n    function removeLiquidityWithPermit(\\n        address tokenA,\\n        address tokenB,\\n        uint liquidity,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\n    ) external returns (uint amountA, uint amountB);\\n    function removeLiquidityETHWithPermit(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\n    ) external returns (uint amountToken, uint amountETH);\\n    function swapExactTokensForTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external returns (uint[] memory amounts);\\n    function swapTokensForExactTokens(\\n        uint amountOut,\\n        uint amountInMax,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external returns (uint[] memory amounts);\\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\\n        external\\n        payable\\n        returns (uint[] memory amounts);\\n    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\\n        external\\n        returns (uint[] memory amounts);\\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\\n        external\\n        returns (uint[] memory amounts);\\n    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\\n        external\\n        payable\\n        returns (uint[] memory amounts);\\n\\n    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\\n    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\\n}\\n\"\r\n    },\r\n    \"contracts/lib/@uniswap/interfaces/IUniswapV2Router02.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.2;\\n\\nimport './IUniswapV2Router01.sol';\\n\\ninterface IUniswapV2Router02 is IUniswapV2Router01 {\\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountETH);\\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\n    ) external returns (uint amountETH);\\n\\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external;\\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external payable;\\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external;\\n}\\n\"\r\n    },\r\n    \"contracts/utils/AnyStakeUtils.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity 0.6.6;\\r\\n\\r\\nimport \\\"../lib/@defiat-crypto/utils/DeFiatUtils.sol\\\";\\r\\nimport \\\"../lib/@defiat-crypto/utils/DeFiatGovernedUtils.sol\\\";\\r\\nimport \\\"../lib/@openzeppelin/token/ERC20/SafeERC20.sol\\\";\\r\\nimport \\\"../lib/@uniswap/interfaces/IUniswapV2Factory.sol\\\";\\r\\nimport \\\"../lib/@uniswap/interfaces/IUniswapV2Router02.sol\\\";\\r\\n\\r\\nabstract contract AnyStakeUtils is DeFiatGovernedUtils {\\r\\n    using SafeERC20 for IERC20;\\r\\n\\r\\n    event PointsUpdated(address indexed user, address points);\\r\\n    event TokenUpdated(address indexed user, address token);\\r\\n    event UniswapUpdated(address indexed user, address router, address weth, address factory);\\r\\n  \\r\\n    address public router;\\r\\n    address public factory;\\r\\n    address public weth;\\r\\n    address public DeFiatToken;\\r\\n    address public DeFiatPoints;\\r\\n    address public DeFiatTokenLp;\\r\\n    address public DeFiatPointsLp;\\r\\n\\r\\n    mapping (address => bool) internal _blacklistedAdminWithdraw;\\r\\n\\r\\n    constructor(address _router, address _gov, address _points, address _token) public {\\r\\n        _setGovernance(_gov);\\r\\n\\r\\n        router = _router;\\r\\n        DeFiatPoints = _points;\\r\\n        DeFiatToken = _token;\\r\\n         \\r\\n        weth = IUniswapV2Router02(router).WETH();\\r\\n        factory = IUniswapV2Router02(router).factory();\\r\\n        DeFiatTokenLp = IUniswapV2Factory(factory).getPair(_token, weth);\\r\\n        DeFiatPointsLp = IUniswapV2Factory(factory).getPair(_points, weth);\\r\\n    }\\r\\n\\r\\n    function sweep(address _token) public override onlyOwner {\\r\\n        require(!_blacklistedAdminWithdraw[_token], \\\"Sweep: Cannot withdraw blacklisted token\\\");\\r\\n\\r\\n        DeFiatUtils.sweep(_token);\\r\\n    }\\r\\n\\r\\n    function isBlacklistedAdminWithdraw(address _token)\\r\\n        external\\r\\n        view\\r\\n        returns (bool)\\r\\n    {\\r\\n        return _blacklistedAdminWithdraw[_token];\\r\\n    }\\r\\n\\r\\n    // Method to avoid underflow on token transfers\\r\\n    function safeTokenTransfer(address user, address token, uint256 amount) internal {\\r\\n        if (amount == 0) {\\r\\n            return;\\r\\n        }\\r\\n\\r\\n        uint256 tokenBalance = IERC20(token).balanceOf(address(this));\\r\\n        if (amount > tokenBalance) {\\r\\n            IERC20(token).safeTransfer(user, tokenBalance);\\r\\n        } else {\\r\\n            IERC20(token).safeTransfer(user, amount);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function setToken(address _token) external onlyGovernor {\\r\\n        require(_token != DeFiatToken, \\\"SetToken: No token change\\\");\\r\\n        require(_token != address(0), \\\"SetToken: Must set token value\\\");\\r\\n\\r\\n        DeFiatToken = _token;\\r\\n        DeFiatTokenLp = IUniswapV2Factory(factory).getPair(_token, weth);\\r\\n        emit TokenUpdated(msg.sender, DeFiatToken);\\r\\n    }\\r\\n\\r\\n    function setPoints(address _points) external onlyGovernor {\\r\\n        require(_points != DeFiatPoints, \\\"SetPoints: No points change\\\");\\r\\n        require(_points != address(0), \\\"SetPoints: Must set points value\\\");\\r\\n\\r\\n        DeFiatPoints = _points;\\r\\n        DeFiatPointsLp = IUniswapV2Factory(factory).getPair(_points, weth);\\r\\n        emit PointsUpdated(msg.sender, DeFiatPoints);\\r\\n    }\\r\\n\\r\\n    function setUniswap(address _router) external onlyGovernor {\\r\\n        require(_router != router, \\\"SetUniswap: No uniswap change\\\");\\r\\n        require(_router != address(0), \\\"SetUniswap: Must set uniswap value\\\");\\r\\n\\r\\n        router = _router;\\r\\n        weth = IUniswapV2Router02(router).WETH();\\r\\n        factory = IUniswapV2Router02(router).factory();\\r\\n        emit UniswapUpdated(msg.sender, router, weth, factory);\\r\\n    }\\r\\n}\"\r\n    }\r\n  }\r\n}}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_router\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_gov\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_points\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"buybackRate\",\"type\":\"uint256\"}],\"name\":\"BuybackRateUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Claim\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"EmergencyWithdraw\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"governance\",\"type\":\"address\"}],\"name\":\"GovernanceUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"vault\",\"type\":\"address\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Migrate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"migrator\",\"type\":\"address\"}],\"name\":\"MigratorUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"points\",\"type\":\"address\"}],\"name\":\"PointsUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"PriceMultiplierUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"active\",\"type\":\"bool\"}],\"name\":\"RegulatorActive\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"stakingFee\",\"type\":\"uint256\"}],\"name\":\"StakingFeeUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TokenSweep\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"TokenUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"router\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"weth\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"factory\",\"type\":\"address\"}],\"name\":\"UniswapUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"vault\",\"type\":\"address\"}],\"name\":\"VaultUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DeFiatPoints\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DeFiatPointsLp\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DeFiatToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DeFiatTokenLp\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"active\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"addReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buybackBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buybackRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"emergencyWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"factory\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"governance\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_vault\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initialized\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isAbovePeg\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"isBlacklistedAdminWithdraw\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"kill\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastRewardBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"migrate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"migrator\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"pending\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pendingRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"priceMultiplier\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardsPerShare\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"router\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_active\",\"type\":\"bool\"}],\"name\":\"setActive\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_buybackRate\",\"type\":\"uint256\"}],\"name\":\"setBuybackRate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_governance\",\"type\":\"address\"}],\"name\":\"setGovernance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_migrator\",\"type\":\"address\"}],\"name\":\"setMigrator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_points\",\"type\":\"address\"}],\"name\":\"setPoints\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_priceMultiplier\",\"type\":\"uint256\"}],\"name\":\"setPriceMultiplier\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_stakingFee\",\"type\":\"uint256\"}],\"name\":\"setStakingFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"setToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_router\",\"type\":\"address\"}],\"name\":\"setUniswap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_vault\",\"type\":\"address\"}],\"name\":\"setVault\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakingFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"sweep\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalShares\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"updatePool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewardDebt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastRewardBlock\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vault\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"weth\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"AnyStakeRegulator","CompilerVersion":"v0.6.6+commit.6c089d02","OptimizationUsed":"1","Runs":"150","ConstructorArguments":"0000000000000000000000007a250d5630b4cf539739df2c5dacb4c659f2488d000000000000000000000000efccb112270c3c197b86ff03d26340d82a087f6c000000000000000000000000de3e18ecb613498b9a1483af51394ec2259bcd0a000000000000000000000000b6ee603933e024d8d53dde3faa0bf98fe2a3d6f1","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":""}]}