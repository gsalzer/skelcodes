{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"settings\": {\r\n    \"evmVersion\": \"istanbul\",\r\n    \"libraries\": {},\r\n    \"metadata\": {\r\n      \"useLiteralContent\": true\r\n    },\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"remappings\": [],\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  },\r\n  \"sources\": {\r\n    \"contracts/Curve/Curve_Registry_V2.sol\": {\r\n      \"content\": \"// ███████╗░█████╗░██████╗░██████╗░███████╗██████╗░░░░███████╗██╗\\n// ╚════██║██╔══██╗██╔══██╗██╔══██╗██╔════╝██╔══██╗░░░██╔════╝██║\\n// ░░███╔═╝███████║██████╔╝██████╔╝█████╗░░██████╔╝░░░█████╗░░██║\\n// ██╔══╝░░██╔══██║██╔═══╝░██╔═══╝░██╔══╝░░██╔══██╗░░░██╔══╝░░██║\\n// ███████╗██║░░██║██║░░░░░██║░░░░░███████╗██║░░██║██╗██║░░░░░██║\\n// ╚══════╝╚═╝░░╚═╝╚═╝░░░░░╚═╝░░░░░╚══════╝╚═╝░░╚═╝╚═╝╚═╝░░░░░╚═╝\\n// Copyright (C) 2020 zapper\\n\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU Affero General Public License as published by\\n// the Free Software Foundation, either version 2 of the License, or\\n// (at your option) any later version.\\n//\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU Affero General Public License for more details.\\n//\\n\\n///@author Zapper\\n///@notice Registry for Curve Pools with Utility functions.\\n\\npragma solidity ^0.5.7;\\n\\nimport \\\"../oz/ownership/Ownable.sol\\\";\\nimport \\\"../oz/token/ERC20/SafeERC20.sol\\\";\\n\\ninterface ICurveAddressProvider {\\n    function get_registry() external view returns (address);\\n\\n    function get_address(uint256 _id) external view returns (address);\\n}\\n\\ninterface ICurveRegistry {\\n    function get_pool_from_lp_token(address lpToken)\\n        external\\n        view\\n        returns (address);\\n\\n    function get_lp_token(address swapAddress) external view returns (address);\\n\\n    function get_n_coins(address _pool)\\n        external\\n        view\\n        returns (uint256[2] memory);\\n\\n    function get_coins(address _pool) external view returns (address[8] memory);\\n\\n    function get_underlying_coins(address _pool)\\n        external\\n        view\\n        returns (address[8] memory);\\n}\\n\\ninterface ICurveFactoryRegistry {\\n    function get_n_coins(address _pool)\\n        external\\n        view\\n        returns (uint256, uint256);\\n\\n    function get_coins(address _pool) external view returns (address[2] memory);\\n\\n    function get_underlying_coins(address _pool)\\n        external\\n        view\\n        returns (address[8] memory);\\n}\\n\\ncontract Curve_Registry_V2 is Ownable {\\n    using SafeMath for uint256;\\n    using SafeERC20 for IERC20;\\n\\n    ICurveAddressProvider private constant CurveAddressProvider =\\n        ICurveAddressProvider(0x0000000022D53366457F9d5E68Ec105046FC4383);\\n    ICurveRegistry public CurveRegistry;\\n\\n    ICurveFactoryRegistry public FactoryRegistry;\\n\\n    address private constant wbtcToken =\\n        0x2260FAC5E5542a773Aa44fBCfeDf7C193bc2C599;\\n    address private constant sbtcCrvToken =\\n        0x075b1bb99792c9E1041bA13afEf80C91a1e70fB3;\\n    address internal constant ETHAddress =\\n        0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE;\\n\\n    mapping(address => bool) public shouldAddUnderlying;\\n    mapping(address => address) private depositAddresses;\\n\\n    constructor() public {\\n        CurveRegistry = ICurveRegistry(CurveAddressProvider.get_registry());\\n        FactoryRegistry = ICurveFactoryRegistry(\\n            CurveAddressProvider.get_address(3)\\n        );\\n    }\\n\\n    function isCurvePool(address swapAddress) public view returns (bool) {\\n        if (CurveRegistry.get_lp_token(swapAddress) != address(0)) {\\n            return true;\\n        }\\n        return false;\\n    }\\n\\n    function isFactoryPool(address swapAddress) public view returns (bool) {\\n        if (FactoryRegistry.get_coins(swapAddress)[0] != address(0)) {\\n            return true;\\n        }\\n        return false;\\n    }\\n\\n    /**\\n    @notice This function is used to get the curve pool deposit address\\n    @notice The deposit address is used for pools with wrapped (c, y) tokens\\n    @param swapAddress Curve swap address for the pool\\n    @return curve pool deposit address or the swap address not mapped\\n    */\\n    function getDepositAddress(address swapAddress)\\n        external\\n        view\\n        returns (address depositAddress)\\n    {\\n        depositAddress = depositAddresses[swapAddress];\\n        if (depositAddress == address(0)) return swapAddress;\\n    }\\n\\n    /**\\n    @notice This function is used to get the curve pool swap address\\n    @notice The token and swap address is the same for metapool factory pools\\n    @param swapAddress Curve swap address for the pool\\n    @return curve pool swap address or address(0) if pool doesnt exist\\n    */\\n    function getSwapAddress(address tokenAddress)\\n        external\\n        view\\n        returns (address swapAddress)\\n    {\\n        swapAddress = CurveRegistry.get_pool_from_lp_token(tokenAddress);\\n        if (swapAddress != address(0)) {\\n            return swapAddress;\\n        }\\n        if (isFactoryPool(swapAddress)) {\\n            return tokenAddress;\\n        }\\n        return address(0);\\n    }\\n\\n    /**\\n    @notice This function is used to check the curve pool token address\\n    @notice The token and swap address is the same for metapool factory pools\\n    @param swapAddress Curve swap address for the pool\\n    @return curve pool token address or address(0) if pool doesnt exist\\n    */\\n    function getTokenAddress(address swapAddress)\\n        external\\n        view\\n        returns (address tokenAddress)\\n    {\\n        tokenAddress = CurveRegistry.get_lp_token(swapAddress);\\n        if (tokenAddress != address(0)) {\\n            return tokenAddress;\\n        }\\n        if (isFactoryPool(swapAddress)) {\\n            return swapAddress;\\n        }\\n        return address(0);\\n    }\\n\\n    /**\\n    @notice Checks the number of non-underlying tokens in a pool\\n    @param swapAddress Curve swap address for the pool\\n    @return number of underlying tokens in the pool\\n    */\\n    function getNumTokens(address swapAddress) public view returns (uint256) {\\n        if (isCurvePool(swapAddress)) {\\n            return CurveRegistry.get_n_coins(swapAddress)[0];\\n        } else {\\n            (uint256 numTokens, ) = FactoryRegistry.get_n_coins(swapAddress);\\n            return numTokens;\\n        }\\n    }\\n\\n    /**\\n    @notice This function is used to check if the curve pool is a metapool\\n    @notice all factory pools are metapools\\n    @param swapAddress Curve swap address for the pool\\n    @return true if the pool is a metapool, false otherwise\\n    */\\n    function isMetaPool(address swapAddress) public view returns (bool) {\\n        if (isCurvePool(swapAddress)) {\\n            uint256[2] memory poolTokenCounts =\\n                CurveRegistry.get_n_coins(swapAddress);\\n            if (poolTokenCounts[0] == poolTokenCounts[1]) return false;\\n            else return true;\\n        }\\n        if (isFactoryPool(swapAddress)) return true;\\n    }\\n\\n    /**\\n    @notice This function returns an array of underlying pool token addresses\\n    @param swapAddress Curve swap address for the pool\\n    @return returns 4 element array containing the addresses of the pool tokens (0 address if pool contains < 4 tokens)\\n    */\\n    function getPoolTokens(address swapAddress)\\n        public\\n        view\\n        returns (address[4] memory poolTokens)\\n    {\\n        if (isMetaPool(swapAddress)) {\\n            if (isFactoryPool(swapAddress)) {\\n                address[2] memory poolUnderlyingCoins =\\n                    FactoryRegistry.get_coins(swapAddress);\\n                for (uint256 i = 0; i < 2; i++) {\\n                    poolTokens[i] = poolUnderlyingCoins[i];\\n                }\\n            } else {\\n                address[8] memory poolUnderlyingCoins =\\n                    CurveRegistry.get_coins(swapAddress);\\n                for (uint256 i = 0; i < 2; i++) {\\n                    poolTokens[i] = poolUnderlyingCoins[i];\\n                }\\n            }\\n\\n            return poolTokens;\\n        } else {\\n            address[8] memory poolUnderlyingCoins;\\n            if (isBtcPool(swapAddress) && !isMetaPool(swapAddress)) {\\n                poolUnderlyingCoins = CurveRegistry.get_coins(swapAddress);\\n            } else {\\n                poolUnderlyingCoins = CurveRegistry.get_underlying_coins(\\n                    swapAddress\\n                );\\n            }\\n            for (uint256 i = 0; i < 4; i++) {\\n                poolTokens[i] = poolUnderlyingCoins[i];\\n            }\\n        }\\n    }\\n\\n    /**\\n    @notice This function checks if the curve pool contains WBTC\\n    @param swapAddress Curve swap address for the pool\\n    @return true if the pool contains WBTC, false otherwise\\n    */\\n    function isBtcPool(address swapAddress) public view returns (bool) {\\n        address[8] memory poolTokens = CurveRegistry.get_coins(swapAddress);\\n        for (uint256 i = 0; i < 4; i++) {\\n            if (poolTokens[i] == wbtcToken || poolTokens[i] == sbtcCrvToken)\\n                return true;\\n        }\\n        return false;\\n    }\\n\\n    /**\\n    @notice This function checks if the curve pool contains ETH\\n    @param swapAddress Curve swap address for the pool\\n    @return true if the pool contains ETH, false otherwise\\n    */\\n    function isEthPool(address swapAddress) external view returns (bool) {\\n        address[8] memory poolTokens = CurveRegistry.get_coins(swapAddress);\\n        for (uint256 i = 0; i < 4; i++) {\\n            if (poolTokens[i] == ETHAddress) {\\n                return true;\\n            }\\n        }\\n        return false;\\n    }\\n\\n    /**\\n    @notice This function is used to check if the pool contains the token\\n    @param swapAddress Curve swap address for the pool\\n    @param tokenContractAddress contract address of the token\\n    @return true if the pool contains the token, false otherwise\\n    @return index of the token in the pool, 0 if pool does not contain the token\\n    */\\n    function isUnderlyingToken(\\n        address swapAddress,\\n        address tokenContractAddress\\n    ) external view returns (bool, uint256) {\\n        address[4] memory poolTokens = getPoolTokens(swapAddress);\\n        for (uint256 i = 0; i < 4; i++) {\\n            if (poolTokens[i] == address(0)) return (false, 0);\\n            if (poolTokens[i] == tokenContractAddress) return (true, i);\\n        }\\n    }\\n\\n    /**\\n    @notice Updates to the latest curve registry from the address provider\\n    */\\n    function update_curve_registry() external onlyOwner {\\n        address new_address = CurveAddressProvider.get_registry();\\n\\n        require(address(CurveRegistry) != new_address, \\\"Already updated\\\");\\n\\n        CurveRegistry = ICurveRegistry(new_address);\\n    }\\n\\n    /**\\n    @notice Updates to the latest curve registry from the address provider\\n    */\\n    function update_factory_registry() external onlyOwner {\\n        address new_address = CurveAddressProvider.get_address(3);\\n\\n        require(address(FactoryRegistry) != new_address, \\\"Already updated\\\");\\n\\n        FactoryRegistry = ICurveFactoryRegistry(new_address);\\n    }\\n\\n    /**\\n    @notice Add new pools which use the _use_underlying bool\\n    @param swapAddresses Curve swap addresses for the pool\\n    @param addUnderlying True if underlying tokens are always added\\n    */\\n    function updateShouldAddUnderlying(\\n        address[] calldata swapAddresses,\\n        bool[] calldata addUnderlying\\n    ) external onlyOwner {\\n        require(\\n            swapAddresses.length == addUnderlying.length,\\n            \\\"Mismatched arrays\\\"\\n        );\\n        for (uint256 i = 0; i < swapAddresses.length; i++) {\\n            shouldAddUnderlying[swapAddresses[i]] = addUnderlying[i];\\n        }\\n    }\\n\\n    /**\\n    @notice Add new pools which use uamounts for add_liquidity\\n    @param swapAddresses Curve swap addresses to map from\\n    @param _depositAddresses Curve deposit addresses to map to\\n    */\\n    function updateDepositAddresses(\\n        address[] calldata swapAddresses,\\n        address[] calldata _depositAddresses\\n    ) external onlyOwner {\\n        require(\\n            swapAddresses.length == _depositAddresses.length,\\n            \\\"Mismatched arrays\\\"\\n        );\\n        for (uint256 i = 0; i < swapAddresses.length; i++) {\\n            depositAddresses[swapAddresses[i]] = _depositAddresses[i];\\n        }\\n    }\\n\\n    /**\\n    //@notice Add new pools which use the _use_underlying bool\\n    */\\n    function withdrawTokens(address[] calldata tokens) external onlyOwner {\\n        for (uint256 i = 0; i < tokens.length; i++) {\\n            uint256 qty;\\n\\n            if (tokens[i] == ETHAddress) {\\n                qty = address(this).balance;\\n                Address.sendValue(Address.toPayable(owner()), qty);\\n            } else {\\n                qty = IERC20(tokens[i]).balanceOf(address(this));\\n                IERC20(tokens[i]).safeTransfer(owner(), qty);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/Curve/Curve_ZapOut_General_V4.sol\": {\r\n      \"content\": \"// ███████╗░█████╗░██████╗░██████╗░███████╗██████╗░░░░███████╗██╗\\n// ╚════██║██╔══██╗██╔══██╗██╔══██╗██╔════╝██╔══██╗░░░██╔════╝██║\\n// ░░███╔═╝███████║██████╔╝██████╔╝█████╗░░██████╔╝░░░█████╗░░██║\\n// ██╔══╝░░██╔══██║██╔═══╝░██╔═══╝░██╔══╝░░██╔══██╗░░░██╔══╝░░██║\\n// ███████╗██║░░██║██║░░░░░██║░░░░░███████╗██║░░██║██╗██║░░░░░██║\\n// ╚══════╝╚═╝░░╚═╝╚═╝░░░░░╚═╝░░░░░╚══════╝╚═╝░░╚═╝╚═╝╚═╝░░░░░╚═╝\\n// Copyright (C) 2021 zapper\\n\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU Affero General Public License as published by\\n// the Free Software Foundation, either version 2 of the License, or\\n// (at your option) any later version.\\n//\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU Affero General Public License for more details.\\n//\\n\\n///@author Zapper\\n///@notice This contract removes liquidity from Curve pools\\n// SPDX-License-Identifier: GPL-2.0\\n\\npragma solidity ^0.5.7;\\nimport \\\"../_base/ZapOutBaseV2.sol\\\";\\nimport \\\"./Curve_Registry_V2.sol\\\";\\n\\ninterface ICurveSwap {\\n    function remove_liquidity_one_coin(\\n        uint256 _token_amount,\\n        int128 i,\\n        uint256 min_amount\\n    ) external;\\n\\n    function remove_liquidity_one_coin(\\n        uint256 _token_amount,\\n        int128 i,\\n        uint256 min_amount,\\n        bool removeUnderlying\\n    ) external;\\n\\n    function remove_liquidity_one_coin(\\n        uint256 _token_amount,\\n        uint256 i,\\n        uint256 min_amount\\n    ) external;\\n\\n    function calc_withdraw_one_coin(uint256 tokenAmount, int128 index)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function calc_withdraw_one_coin(\\n        uint256 tokenAmount,\\n        int128 index,\\n        bool _use_underlying\\n    ) external view returns (uint256);\\n\\n    function calc_withdraw_one_coin(uint256 tokenAmount, uint256 index)\\n        external\\n        view\\n        returns (uint256);\\n}\\n\\ninterface IWETH {\\n    function withdraw(uint256 wad) external;\\n\\n    function deposit() external payable;\\n}\\n\\ncontract Curve_ZapOut_General_V4_2 is ZapOutBaseV2_1 {\\n    using SafeMath for uint256;\\n    using SafeERC20 for IERC20;\\n\\n    address private constant wethTokenAddress =\\n        address(0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2);\\n\\n    Curve_Registry_V2 public curveReg;\\n\\n    mapping(address => bool) public approvedTargets;\\n\\n    mapping(address => bool) internal v2Pool;\\n\\n    constructor(\\n        Curve_Registry_V2 _curveRegistry,\\n        uint256 _goodwill,\\n        uint256 _affiliateSplit\\n    ) public ZapBaseV1(_goodwill, _affiliateSplit) {\\n        approvedTargets[0xDef1C0ded9bec7F1a1670819833240f027b25EfF] = true;\\n        v2Pool[0x80466c64868E1ab14a1Ddf27A676C3fcBE638Fe5] = true;\\n        curveReg = _curveRegistry;\\n    }\\n\\n    event zapOut(\\n        address sender,\\n        address pool,\\n        address token,\\n        uint256 tokensRec\\n    );\\n\\n    /**\\n    @notice This method removes the liquidity from curve pools to ETH/ERC tokens\\n    @param swapAddress indicates Curve swap address for the pool\\n    @param incomingCrv indicates the amount of lp tokens to remove\\n    @param intermediateToken specifies in which token to exit the curve pool\\n    @param toToken indicates the ETH/ERC token to which tokens to convert\\n    @param minToTokens indicates the minimum amount of toTokens to receive\\n    @param _swapTarget Excecution target for the first swap\\n    @param _swapCallData DEX quote data\\n    @param affiliate Affiliate address to share fees\\n    @param shouldSellEntireBalance True if incomingCrv is determined at execution time (i.e. contract is caller)\\n    @return ToTokensBought- indicates the amount of toTokens received\\n     */\\n    function ZapOut(\\n        address swapAddress,\\n        uint256 incomingCrv,\\n        address intermediateToken,\\n        address toToken,\\n        uint256 minToTokens,\\n        address _swapTarget,\\n        bytes calldata _swapCallData,\\n        address affiliate,\\n        bool shouldSellEntireBalance\\n    ) external stopInEmergency returns (uint256 ToTokensBought) {\\n        address poolTokenAddress = curveReg.getTokenAddress(swapAddress);\\n\\n        // get lp tokens\\n        incomingCrv = _pullTokens(\\n            poolTokenAddress,\\n            incomingCrv,\\n            shouldSellEntireBalance\\n        );\\n\\n        if (intermediateToken == address(0)) {\\n            intermediateToken = ETHAddress;\\n        }\\n\\n        // perform zapOut\\n        ToTokensBought = _zapOut(\\n            swapAddress,\\n            incomingCrv,\\n            intermediateToken,\\n            toToken,\\n            _swapTarget,\\n            _swapCallData\\n        );\\n        require(ToTokensBought >= minToTokens, \\\"High Slippage\\\");\\n\\n        uint256 totalGoodwillPortion;\\n\\n        // Transfer tokens\\n        if (toToken == address(0)) {\\n            totalGoodwillPortion = _subtractGoodwill(\\n                ETHAddress,\\n                ToTokensBought,\\n                affiliate,\\n                true\\n            );\\n            Address.sendValue(\\n                msg.sender,\\n                ToTokensBought.sub(totalGoodwillPortion)\\n            );\\n        } else {\\n            totalGoodwillPortion = _subtractGoodwill(\\n                toToken,\\n                ToTokensBought,\\n                affiliate,\\n                true\\n            );\\n\\n            IERC20(toToken).safeTransfer(\\n                msg.sender,\\n                ToTokensBought.sub(totalGoodwillPortion)\\n            );\\n        }\\n\\n        emit zapOut(msg.sender, swapAddress, toToken, ToTokensBought);\\n\\n        return ToTokensBought.sub(totalGoodwillPortion);\\n    }\\n\\n    function _zapOut(\\n        address swapAddress,\\n        uint256 incomingCrv,\\n        address intermediateToken,\\n        address toToken,\\n        address _swapTarget,\\n        bytes memory _swapCallData\\n    ) internal returns (uint256 ToTokensBought) {\\n        (bool isUnderlying, uint256 underlyingIndex) =\\n            curveReg.isUnderlyingToken(swapAddress, intermediateToken);\\n\\n        // not metapool\\n        if (isUnderlying) {\\n            uint256 intermediateBought =\\n                _exitCurve(\\n                    swapAddress,\\n                    incomingCrv,\\n                    underlyingIndex,\\n                    intermediateToken\\n                );\\n\\n            if (intermediateToken == ETHAddress) intermediateToken = address(0);\\n\\n            ToTokensBought = _fillQuote(\\n                intermediateToken,\\n                toToken,\\n                intermediateBought,\\n                _swapTarget,\\n                _swapCallData\\n            );\\n        } else {\\n            // from metapool\\n            address[4] memory poolTokens = curveReg.getPoolTokens(swapAddress);\\n            address intermediateSwapAddress;\\n            uint8 i;\\n            for (; i < 4; i++) {\\n                if (curveReg.getSwapAddress(poolTokens[i]) != address(0)) {\\n                    intermediateSwapAddress = curveReg.getSwapAddress(\\n                        poolTokens[i]\\n                    );\\n                    break;\\n                }\\n            }\\n            // _exitCurve to intermediateSwapAddress Token\\n            uint256 intermediateCrvBought =\\n                _exitMetaCurve(swapAddress, incomingCrv, i, poolTokens[i]);\\n            // _performZapOut: fromPool = intermediateSwapAddress\\n            ToTokensBought = _zapOut(\\n                intermediateSwapAddress,\\n                intermediateCrvBought,\\n                intermediateToken,\\n                toToken,\\n                _swapTarget,\\n                _swapCallData\\n            );\\n        }\\n    }\\n\\n    /**\\n    @notice This method removes the liquidity from meta curve pools\\n    @param swapAddress indicates the curve pool address from which liquidity to be removed.\\n    @param incomingCrv indicates the amount of liquidity to be removed from the pool\\n    @param index indicates the index of underlying token of the pool in which liquidity will be removed. \\n    @return tokensReceived- indicates the amount of reserve tokens received \\n    */\\n    function _exitMetaCurve(\\n        address swapAddress,\\n        uint256 incomingCrv,\\n        uint256 index,\\n        address exitTokenAddress\\n    ) internal returns (uint256 tokensReceived) {\\n        address tokenAddress = curveReg.getTokenAddress(swapAddress);\\n        _approveToken(tokenAddress, swapAddress);\\n\\n        uint256 iniTokenBal = IERC20(exitTokenAddress).balanceOf(address(this));\\n        ICurveSwap(swapAddress).remove_liquidity_one_coin(\\n            incomingCrv,\\n            int128(index),\\n            0\\n        );\\n        tokensReceived = (IERC20(exitTokenAddress).balanceOf(address(this)))\\n            .sub(iniTokenBal);\\n\\n        require(tokensReceived > 0, \\\"Could not receive reserve tokens\\\");\\n    }\\n\\n    /**\\n    @notice This method removes the liquidity from given curve pool\\n    @param swapAddress indicates the curve pool address from which liquidity to be removed.\\n    @param incomingCrv indicates the amount of liquidity to be removed from the pool\\n    @param index indicates the index of underlying token of the pool in which liquidity will be removed. \\n    @return tokensReceived- indicates the amount of reserve tokens received \\n    */\\n    function _exitCurve(\\n        address swapAddress,\\n        uint256 incomingCrv,\\n        uint256 index,\\n        address exitTokenAddress\\n    ) internal returns (uint256 tokensReceived) {\\n        address depositAddress = curveReg.getDepositAddress(swapAddress);\\n\\n        address tokenAddress = curveReg.getTokenAddress(swapAddress);\\n        _approveToken(tokenAddress, depositAddress);\\n\\n        address balanceToken =\\n            exitTokenAddress == ETHAddress ? address(0) : exitTokenAddress;\\n\\n        uint256 iniTokenBal = _getBalance(balanceToken);\\n\\n        if (curveReg.shouldAddUnderlying(swapAddress)) {\\n            // aave\\n            ICurveSwap(depositAddress).remove_liquidity_one_coin(\\n                incomingCrv,\\n                int128(index),\\n                0,\\n                true\\n            );\\n        } else if (v2Pool[swapAddress]) {\\n            ICurveSwap(depositAddress).remove_liquidity_one_coin(\\n                incomingCrv,\\n                index,\\n                0\\n            );\\n        } else {\\n            ICurveSwap(depositAddress).remove_liquidity_one_coin(\\n                incomingCrv,\\n                int128(index),\\n                0\\n            );\\n        }\\n\\n        tokensReceived = _getBalance(balanceToken).sub(iniTokenBal);\\n\\n        require(tokensReceived > 0, \\\"Could not receive reserve tokens\\\");\\n    }\\n\\n    /**\\n    @notice This method swaps the fromToken to toToken using the 0x swap\\n    @param _fromTokenAddress indicates the ETH/ERC20 token\\n    @param _toTokenAddress indicates the ETH/ERC20 token\\n    @param _amount indicates the amount of from tokens to swap\\n    @param _swapTarget Excecution target for the first swap\\n    @param _swapCallData DEX quote data\\n    */\\n    function _fillQuote(\\n        address _fromTokenAddress,\\n        address _toTokenAddress,\\n        uint256 _amount,\\n        address _swapTarget,\\n        bytes memory _swapCallData\\n    ) internal returns (uint256 amountBought) {\\n        if (_fromTokenAddress == _toTokenAddress) return _amount;\\n\\n        if (\\n            _fromTokenAddress == wethTokenAddress &&\\n            _toTokenAddress == address(0)\\n        ) {\\n            IWETH(wethTokenAddress).withdraw(_amount);\\n            return _amount;\\n        } else if (\\n            _fromTokenAddress == address(0) &&\\n            _toTokenAddress == wethTokenAddress\\n        ) {\\n            IWETH(wethTokenAddress).deposit.value(_amount)();\\n            return _amount;\\n        }\\n\\n        uint256 valueToSend;\\n        if (_fromTokenAddress == address(0)) valueToSend = _amount;\\n        else _approveToken(_fromTokenAddress, _swapTarget, _amount);\\n\\n        uint256 iniBal = _getBalance(_toTokenAddress);\\n        require(approvedTargets[_swapTarget], \\\"Target not Authorized\\\");\\n        (bool success, ) = _swapTarget.call.value(valueToSend)(_swapCallData);\\n        require(success, \\\"Error Swapping Tokens\\\");\\n        uint256 finalBal = _getBalance(_toTokenAddress);\\n\\n        amountBought = finalBal.sub(iniBal);\\n\\n        require(amountBought > 0, \\\"Swapped To Invalid Intermediate\\\");\\n    }\\n\\n    /**\\n    @notice Utility function to determine the quantity and address of a token being removed\\n    @param swapAddress indicates the curve pool address from which liquidity to be removed\\n    @param tokenAddress token to be removed\\n    @param liquidity Quantity of LP tokens to remove.\\n    @return  amount Quantity of token removed\\n    */\\n    function removeLiquidityReturn(\\n        address swapAddress,\\n        address tokenAddress,\\n        uint256 liquidity\\n    ) external view returns (uint256 amount) {\\n        if (tokenAddress == address(0)) tokenAddress = ETHAddress;\\n        (bool underlying, uint256 index) =\\n            curveReg.isUnderlyingToken(swapAddress, tokenAddress);\\n        if (underlying) {\\n            if (v2Pool[swapAddress]) {\\n                return\\n                    ICurveSwap(curveReg.getDepositAddress(swapAddress))\\n                        .calc_withdraw_one_coin(liquidity, uint256(index));\\n            } else if (curveReg.shouldAddUnderlying(swapAddress)) {\\n                return\\n                    ICurveSwap(curveReg.getDepositAddress(swapAddress))\\n                        .calc_withdraw_one_coin(liquidity, int128(index), true);\\n            } else {\\n                return\\n                    ICurveSwap(curveReg.getDepositAddress(swapAddress))\\n                        .calc_withdraw_one_coin(liquidity, int128(index));\\n            }\\n        } else {\\n            address[4] memory poolTokens = curveReg.getPoolTokens(swapAddress);\\n            address intermediateSwapAddress;\\n            for (uint256 i = 0; i < 4; i++) {\\n                intermediateSwapAddress = curveReg.getSwapAddress(\\n                    poolTokens[i]\\n                );\\n                if (intermediateSwapAddress != address(0)) break;\\n            }\\n            uint256 metaTokensRec =\\n                ICurveSwap(swapAddress).calc_withdraw_one_coin(\\n                    liquidity,\\n                    int128(1)\\n                );\\n\\n            (, index) = curveReg.isUnderlyingToken(\\n                intermediateSwapAddress,\\n                tokenAddress\\n            );\\n\\n            return\\n                ICurveSwap(intermediateSwapAddress).calc_withdraw_one_coin(\\n                    metaTokensRec,\\n                    int128(index)\\n                );\\n        }\\n    }\\n\\n    function updateCurveRegistry(Curve_Registry_V2 newCurveRegistry)\\n        external\\n        onlyOwner\\n    {\\n        require(newCurveRegistry != curveReg, \\\"Already using this Registry\\\");\\n        curveReg = newCurveRegistry;\\n    }\\n\\n    function setApprovedTargets(\\n        address[] calldata targets,\\n        bool[] calldata isApproved\\n    ) external onlyOwner {\\n        require(targets.length == isApproved.length, \\\"Invalid Input length\\\");\\n\\n        for (uint256 i = 0; i < targets.length; i++) {\\n            approvedTargets[targets[i]] = isApproved[i];\\n        }\\n    }\\n\\n    function setV2Pool(address[] calldata pool, bool[] calldata isV2Pool)\\n        external\\n        onlyOwner\\n    {\\n        require(pool.length == isV2Pool.length, \\\"Invalid Input length\\\");\\n\\n        for (uint256 i = 0; i < pool.length; i++) {\\n            v2Pool[pool[i]] = isV2Pool[i];\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/_base/ZapBaseV1.sol\": {\r\n      \"content\": \"pragma solidity ^0.5.7;\\n\\nimport \\\"../oz/ownership/Ownable.sol\\\";\\nimport \\\"../oz/token/ERC20/SafeERC20.sol\\\";\\n\\ncontract ZapBaseV1 is Ownable {\\n    using SafeMath for uint256;\\n    using SafeERC20 for IERC20;\\n    bool public stopped = false;\\n\\n    // if true, goodwill is not deducted\\n    mapping(address => bool) public feeWhitelist;\\n\\n    uint256 public goodwill;\\n    // % share of goodwill (0-100 %)\\n    uint256 affiliateSplit;\\n    // restrict affiliates\\n    mapping(address => bool) public affiliates;\\n    // affiliate => token => amount\\n    mapping(address => mapping(address => uint256)) public affiliateBalance;\\n    // token => amount\\n    mapping(address => uint256) public totalAffiliateBalance;\\n\\n    address internal constant ETHAddress =\\n        0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE;\\n\\n    constructor(uint256 _goodwill, uint256 _affiliateSplit) public {\\n        goodwill = _goodwill;\\n        affiliateSplit = _affiliateSplit;\\n    }\\n\\n    // circuit breaker modifiers\\n    modifier stopInEmergency {\\n        if (stopped) {\\n            revert(\\\"Temporarily Paused\\\");\\n        } else {\\n            _;\\n        }\\n    }\\n\\n    function _getBalance(address token)\\n        internal\\n        view\\n        returns (uint256 balance)\\n    {\\n        if (token == address(0)) {\\n            balance = address(this).balance;\\n        } else {\\n            balance = IERC20(token).balanceOf(address(this));\\n        }\\n    }\\n\\n    function _approveToken(address token, address spender) internal {\\n        IERC20 _token = IERC20(token);\\n        if (_token.allowance(address(this), spender) > 0) return;\\n        else {\\n            _token.safeApprove(spender, uint256(-1));\\n        }\\n    }\\n\\n    function _approveToken(\\n        address token,\\n        address spender,\\n        uint256 amount\\n    ) internal {\\n        IERC20 _token = IERC20(token);\\n        _token.safeApprove(spender, 0);\\n        _token.safeApprove(spender, amount);\\n    }\\n\\n    // - to Pause the contract\\n    function toggleContractActive() public onlyOwner {\\n        stopped = !stopped;\\n    }\\n\\n    function set_feeWhitelist(address zapAddress, bool status)\\n        external\\n        onlyOwner\\n    {\\n        feeWhitelist[zapAddress] = status;\\n    }\\n\\n    function set_new_goodwill(uint256 _new_goodwill) public onlyOwner {\\n        require(\\n            _new_goodwill >= 0 && _new_goodwill <= 100,\\n            \\\"GoodWill Value not allowed\\\"\\n        );\\n        goodwill = _new_goodwill;\\n    }\\n\\n    function set_new_affiliateSplit(uint256 _new_affiliateSplit)\\n        external\\n        onlyOwner\\n    {\\n        require(\\n            _new_affiliateSplit <= 100,\\n            \\\"Affiliate Split Value not allowed\\\"\\n        );\\n        affiliateSplit = _new_affiliateSplit;\\n    }\\n\\n    function set_affiliate(address _affiliate, bool _status)\\n        external\\n        onlyOwner\\n    {\\n        affiliates[_affiliate] = _status;\\n    }\\n\\n    ///@notice Withdraw goodwill share, retaining affilliate share\\n    function withdrawTokens(address[] calldata tokens) external onlyOwner {\\n        for (uint256 i = 0; i < tokens.length; i++) {\\n            uint256 qty;\\n\\n            if (tokens[i] == ETHAddress) {\\n                qty = address(this).balance.sub(\\n                    totalAffiliateBalance[tokens[i]]\\n                );\\n                Address.sendValue(Address.toPayable(owner()), qty);\\n            } else {\\n                qty = IERC20(tokens[i]).balanceOf(address(this)).sub(\\n                    totalAffiliateBalance[tokens[i]]\\n                );\\n                IERC20(tokens[i]).safeTransfer(owner(), qty);\\n            }\\n        }\\n    }\\n\\n    ///@notice Withdraw affilliate share, retaining goodwill share\\n    function affilliateWithdraw(address[] calldata tokens) external {\\n        uint256 tokenBal;\\n        for (uint256 i = 0; i < tokens.length; i++) {\\n            tokenBal = affiliateBalance[msg.sender][tokens[i]];\\n            affiliateBalance[msg.sender][tokens[i]] = 0;\\n            totalAffiliateBalance[tokens[i]] = totalAffiliateBalance[tokens[i]]\\n                .sub(tokenBal);\\n\\n            if (tokens[i] == ETHAddress) {\\n                Address.sendValue(msg.sender, tokenBal);\\n            } else {\\n                IERC20(tokens[i]).safeTransfer(msg.sender, tokenBal);\\n            }\\n        }\\n    }\\n\\n    function() external payable {\\n        require(msg.sender != tx.origin, \\\"Do not send ETH directly\\\");\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/_base/ZapOutBaseV2.sol\": {\r\n      \"content\": \"pragma solidity ^0.5.7;\\n\\nimport \\\"./ZapBaseV1.sol\\\";\\n\\ncontract ZapOutBaseV2_1 is ZapBaseV1 {\\n    /**\\n    @dev Transfer tokens from msg.sender to this contract\\n    @param token The ERC20 token to transfer to this contract\\n    @param shouldSellEntireBalance If True transfers entrire allowable amount from another contract\\n    @return Quantity of tokens transferred to this contract\\n     */\\n    function _pullTokens(\\n        address token,\\n        uint256 amount,\\n        bool shouldSellEntireBalance\\n    ) internal returns (uint256) {\\n        if (shouldSellEntireBalance) {\\n            require(\\n                Address.isContract(msg.sender),\\n                \\\"ERR: shouldSellEntireBalance is true for EOA\\\"\\n            );\\n\\n            IERC20 _token = IERC20(token);\\n            uint256 allowance = _token.allowance(msg.sender, address(this));\\n            _token.safeTransferFrom(msg.sender, address(this), allowance);\\n\\n            return allowance;\\n        } else {\\n            IERC20(token).safeTransferFrom(msg.sender, address(this), amount);\\n\\n            return amount;\\n        }\\n    }\\n\\n    function _subtractGoodwill(\\n        address token,\\n        uint256 amount,\\n        address affiliate,\\n        bool enableGoodwill\\n    ) internal returns (uint256 totalGoodwillPortion) {\\n        bool whitelisted = feeWhitelist[msg.sender];\\n        if (enableGoodwill && !whitelisted && goodwill > 0) {\\n            totalGoodwillPortion = SafeMath.div(\\n                SafeMath.mul(amount, goodwill),\\n                10000\\n            );\\n\\n            if (affiliates[affiliate]) {\\n                if (token == address(0)) {\\n                    token = ETHAddress;\\n                }\\n\\n                uint256 affiliatePortion =\\n                    totalGoodwillPortion.mul(affiliateSplit).div(100);\\n                affiliateBalance[affiliate][token] = affiliateBalance[\\n                    affiliate\\n                ][token]\\n                    .add(affiliatePortion);\\n                totalAffiliateBalance[token] = totalAffiliateBalance[token].add(\\n                    affiliatePortion\\n                );\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/oz/GSN/Context.sol\": {\r\n      \"content\": \"pragma solidity ^0.5.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\ncontract Context {\\n    // Empty internal constructor, to prevent people from mistakenly deploying\\n    // an instance of this contract, which should be used via inheritance.\\n    constructor() internal {}\\n\\n    // solhint-disable-previous-line no-empty-blocks\\n\\n    function _msgSender() internal view returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/oz/math/SafeMath.sol\": {\r\n      \"content\": \"pragma solidity ^0.5.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return sub(a, b, \\\"SafeMath: subtraction overflow\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     * - Subtraction cannot overflow.\\n     *\\n     * _Available since v2.4.0._\\n     */\\n    function sub(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        uint256 c = a - b;\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     *\\n     * _Available since v2.4.0._\\n     */\\n    function div(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        // Solidity only automatically asserts when dividing by 0\\n        require(b > 0, errorMessage);\\n        uint256 c = a / b;\\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return mod(a, b, \\\"SafeMath: modulo by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts with custom message when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     *\\n     * _Available since v2.4.0._\\n     */\\n    function mod(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        require(b != 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/oz/ownership/Ownable.sol\": {\r\n      \"content\": \"pragma solidity ^0.5.0;\\n\\nimport \\\"../GSN/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\ncontract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(\\n        address indexed previousOwner,\\n        address indexed newOwner\\n    );\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() internal {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(isOwner(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns true if the caller is the current owner.\\n     */\\n    function isOwner() public view returns (bool) {\\n        return _msgSender() == _owner;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public onlyOwner {\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     */\\n    function _transferOwnership(address newOwner) internal {\\n        require(\\n            newOwner != address(0),\\n            \\\"Ownable: new owner is the zero address\\\"\\n        );\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/oz/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"pragma solidity ^0.5.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP. Does not include\\n * the optional functions; to access them see {ERC20Detailed}.\\n */\\ninterface IERC20 {\\n    function decimals() external view returns (uint8);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount)\\n        external\\n        returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender)\\n        external\\n        view\\n        returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(\\n        address indexed owner,\\n        address indexed spender,\\n        uint256 value\\n    );\\n}\\n\"\r\n    },\r\n    \"contracts/oz/token/ERC20/SafeERC20.sol\": {\r\n      \"content\": \"pragma solidity ^0.5.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"../../math/SafeMath.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for ERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using SafeMath for uint256;\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        callOptionalReturn(\\n            token,\\n            abi.encodeWithSelector(token.transfer.selector, to, value)\\n        );\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        callOptionalReturn(\\n            token,\\n            abi.encodeWithSelector(token.transferFrom.selector, from, to, value)\\n        );\\n    }\\n\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        // solhint-disable-next-line max-line-length\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        callOptionalReturn(\\n            token,\\n            abi.encodeWithSelector(token.approve.selector, spender, value)\\n        );\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance =\\n            token.allowance(address(this), spender).add(value);\\n        callOptionalReturn(\\n            token,\\n            abi.encodeWithSelector(\\n                token.approve.selector,\\n                spender,\\n                newAllowance\\n            )\\n        );\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance =\\n            token.allowance(address(this), spender).sub(\\n                value,\\n                \\\"SafeERC20: decreased allowance below zero\\\"\\n            );\\n        callOptionalReturn(\\n            token,\\n            abi.encodeWithSelector(\\n                token.approve.selector,\\n                spender,\\n                newAllowance\\n            )\\n        );\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves.\\n\\n        // A Solidity high level call has three parts:\\n        //  1. The target address is checked to verify it contains contract code\\n        //  2. The call itself is made, and success asserted\\n        //  3. The return value is decoded, which in turn checks the size of the returned data.\\n        // solhint-disable-next-line max-line-length\\n        require(address(token).isContract(), \\\"SafeERC20: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = address(token).call(data);\\n        require(success, \\\"SafeERC20: low-level call failed\\\");\\n\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            // solhint-disable-next-line max-line-length\\n            require(\\n                abi.decode(returndata, (bool)),\\n                \\\"SafeERC20: ERC20 operation did not succeed\\\"\\n            );\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/oz/utils/Address.sol\": {\r\n      \"content\": \"pragma solidity ^0.5.5;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\\n        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\\n        // for accounts without code, i.e. `keccak256('')`\\n        bytes32 codehash;\\n\\n        bytes32 accountHash =\\n            0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            codehash := extcodehash(account)\\n        }\\n        return (codehash != accountHash && codehash != 0x0);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` into `address payable`. Note that this is\\n     * simply a type cast: the actual underlying value is not changed.\\n     *\\n     * _Available since v2.4.0._\\n     */\\n    function toPayable(address account)\\n        internal\\n        pure\\n        returns (address payable)\\n    {\\n        return address(uint160(account));\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     *\\n     * _Available since v2.4.0._\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(\\n            address(this).balance >= amount,\\n            \\\"Address: insufficient balance\\\"\\n        );\\n\\n        // solhint-disable-next-line avoid-call-value\\n        (bool success, ) = recipient.call.value(amount)(\\\"\\\");\\n        require(\\n            success,\\n            \\\"Address: unable to send value, recipient may have reverted\\\"\\n        );\\n    }\\n}\\n\"\r\n    }\r\n  }\r\n}}","ABI":"[{\"inputs\":[{\"internalType\":\"contract Curve_Registry_V2\",\"name\":\"_curveRegistry\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_goodwill\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_affiliateSplit\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokensRec\",\"type\":\"uint256\"}],\"name\":\"zapOut\",\"type\":\"event\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"swapAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"incomingCrv\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"intermediateToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"toToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"minToTokens\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_swapTarget\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"_swapCallData\",\"type\":\"bytes\"},{\"internalType\":\"address\",\"name\":\"affiliate\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"shouldSellEntireBalance\",\"type\":\"bool\"}],\"name\":\"ZapOut\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"ToTokensBought\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"affiliateBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"affiliates\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"tokens\",\"type\":\"address[]\"}],\"name\":\"affilliateWithdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"approvedTargets\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"curveReg\",\"outputs\":[{\"internalType\":\"contract Curve_Registry_V2\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"feeWhitelist\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"goodwill\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isOwner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"swapAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"liquidity\",\"type\":\"uint256\"}],\"name\":\"removeLiquidityReturn\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"targets\",\"type\":\"address[]\"},{\"internalType\":\"bool[]\",\"name\":\"isApproved\",\"type\":\"bool[]\"}],\"name\":\"setApprovedTargets\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"pool\",\"type\":\"address[]\"},{\"internalType\":\"bool[]\",\"name\":\"isV2Pool\",\"type\":\"bool[]\"}],\"name\":\"setV2Pool\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_affiliate\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_status\",\"type\":\"bool\"}],\"name\":\"set_affiliate\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"zapAddress\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"status\",\"type\":\"bool\"}],\"name\":\"set_feeWhitelist\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_new_affiliateSplit\",\"type\":\"uint256\"}],\"name\":\"set_new_affiliateSplit\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_new_goodwill\",\"type\":\"uint256\"}],\"name\":\"set_new_goodwill\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"stopped\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"toggleContractActive\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"totalAffiliateBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"contract Curve_Registry_V2\",\"name\":\"newCurveRegistry\",\"type\":\"address\"}],\"name\":\"updateCurveRegistry\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"tokens\",\"type\":\"address[]\"}],\"name\":\"withdrawTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"Curve_ZapOut_General_V4_2","CompilerVersion":"v0.5.17+commit.d19bba13","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"0000000000000000000000008aee0a8a05a319bfca41ff2e95c48f3f8638321100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000","EVMVersion":"Default","Library":"","LicenseType":"GNU GPLv2","Proxy":"0","Implementation":"","SwarmSource":""}]}