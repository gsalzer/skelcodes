{"status":"1","message":"OK","result":[{"SourceCode":"// SPDX-License-Identifier: MIT\r\n// File: contracts/StorageSlot.sol\r\n\r\n\r\n/**\r\n * @dev Copied from https://github.com/OpenZeppelin/openzeppelin-contracts/blob/v4.1.0/contracts/utils/StorageSlot.sol\r\n */\r\n\r\npragma solidity 0.8.4;\r\n\r\n\r\nlibrary StorageSlot {\r\n    struct AddressSlot {\r\n        address value;\r\n    }\r\n\r\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\r\n        assembly {\r\n            r.slot := slot\r\n        }\r\n    }\r\n}\r\n\r\n// File: contracts/Claimer.sol\r\n\r\npragma solidity ^0.8.4;\r\n\r\n\r\n\r\ninterface IERC20 {\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n}\r\n\r\n\r\ncontract Claimer {\r\n    /**\r\n    * @dev Emitted when ETH has claimed.\r\n    */\r\n    event Claimed(address recipient, uint256 amount);\r\n\r\n\r\n    /**\r\n    * @dev Emitted when ERC20 has claimed.\r\n    */\r\n    event ClaimedERC20(address recipient, address token, uint256 amount);\r\n\r\n\r\n    /**\r\n     * @dev Storage slot with the admin of the contract.\r\n     *\r\n     * Equals `bytes32(uint256(keccak256(\"eip1967.proxy.admin\")) - 1)`.\r\n     */\r\n    bytes32 internal constant ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\r\n\r\n\r\n    /**\r\n     * @dev Transfer all contract ETH to recipient. Only owner can use it\r\n     *\r\n     * Emits an {Claimed} event.\r\n     *\r\n     * @param recipient Account for transfer ETH\r\n     */\r\n    function claim(address payable recipient)  public onlyOwner {\r\n        uint256 amount = address(this).balance;\r\n        (bool sent, ) = recipient.call{value: amount}(\"\");\r\n        require(sent, \"Failed to send Ether\");\r\n        emit Claimed(recipient, amount);\r\n    }\r\n\r\n\r\n    /**\r\n     * @dev Transfer all contract amount of specified tokent to recipient. Only owner can use it\r\n     *\r\n     * Emits an {ClaimedERC20} event.\r\n     *\r\n     * @param recipient Account for transfer ERC20 token\r\n     * @param token Address of ERC20 token\r\n     */\r\n    function claimERC20(address payable recipient, address token) public onlyOwner {\r\n        uint256 amount = IERC20(token).balanceOf(address(this));\r\n        IERC20(token).transfer(recipient, amount);\r\n        emit ClaimedERC20(recipient, token, amount);\r\n    }\r\n\r\n\r\n    /**\r\n     * @dev Returns the current admin.\r\n     */\r\n    function _getAdmin() internal view returns (address) {\r\n        return StorageSlot.getAddressSlot(ADMIN_SLOT).value;\r\n    }\r\n\r\n\r\n    modifier onlyOwner {\r\n        require(msg.sender == _getAdmin(), \"Only the contract owner may perform this action\");\r\n        _;\r\n    }\r\n\r\n}","ABI":"[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Claimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"ClaimedERC20\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"recipient\",\"type\":\"address\"}],\"name\":\"claim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"claimERC20\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"Claimer","CompilerVersion":"v0.8.4+commit.c7e474f2","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://5a5994265feaceced3403bff047c630142d4aaa6bf0f03d8c75a0e4d0e952b87"}]}