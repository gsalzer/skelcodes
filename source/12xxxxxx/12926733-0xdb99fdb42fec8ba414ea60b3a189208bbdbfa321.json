{"status":"1","message":"OK","result":[{"SourceCode":"# @version 0.2.12\r\n# @author skozin <info@lido.fi>\r\n# @licence MIT\r\nfrom vyper.interfaces import ERC20\r\n\r\n\r\ninterface ERC20Decimals:\r\n    def decimals() -> uint256: view\r\n\r\n\r\ninterface LidoStethOracle:\r\n    def stethPrice() -> uint256: view\r\n\r\n\r\ninterface ChainlinkAggregatorV3Interface:\r\n    def decimals() -> uint256: view\r\n    # (roundId: uint80, answer: int256, startedAt: uint256, updatedAt: uint256, answeredInRound: uint80)\r\n    def latestRoundData() -> (uint256, int256, uint256, uint256, uint256): view\r\n\r\n\r\ninterface CurveStableSwap:\r\n    def get_dy(i: int128, j: int128, dx: uint256) -> uint256: view\r\n    def exchange(i: int128, j: int128, dx: uint256, min_dy: uint256) -> uint256: payable\r\n\r\n\r\nevent SoldStethToUST:\r\n    steth_amount: uint256\r\n    eth_amount: uint256\r\n    ust_amount: uint256\r\n    steth_anchor_price: uint256\r\n    ust_anchor_price: uint256\r\n\r\n\r\nevent AdminChanged:\r\n    new_admin: address\r\n\r\n\r\nevent PriceDifferenceChanged:\r\n    max_steth_price_difference_percent: uint256\r\n    max_eth_price_difference_percent: uint256\r\n\r\n\r\nUST_TOKEN: constant(address) = 0xa47c8bf37f92aBed4A126BDA807A7b7498661acD\r\nSTETH_TOKEN: constant(address) = 0xae7ab96520DE3A18E5e111B5EaAb095312D7fE84\r\nWETH_TOKEN: constant(address) = 0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2\r\n\r\nLIDO_STETH_ETH_ORACLE: constant(address) = 0x3A6Bd15abf19581e411621D669B6a2bbe741ffD6\r\nCHAINLINK_ETH_USD_FEED: constant(address) = 0x5f4eC3Df9cbd43714FE2740f5E3616155c5b8419\r\n\r\nCURVE_STETH_POOL: constant(address) = 0xDC24316b9AE028F1497c275EB9192a3Ea0f67022\r\nSUSHISWAP_ROUTER_V2: constant(address) = 0xd9e1cE17f2641f24aE83637ab66a2cca9C378B9F\r\n\r\nCURVE_ETH_INDEX: constant(uint256) = 0\r\nCURVE_STETH_INDEX: constant(uint256) = 1\r\n\r\nSUSHISWAP_EXCH_PATH: constant(address[2]) = [WETH_TOKEN, UST_TOKEN]\r\n\r\n\r\n# An address that is allowed to configure the liquidator settings.\r\nadmin: public(address)\r\n\r\n# An address that is allowed to sell.\r\nvault: public(address)\r\n\r\n# Maximum difference (in percents multiplied by 10**18) between the resulting\r\n# ETH/UST price and the ETH/USD anchor price obtained from the oracle.\r\nmax_eth_price_difference_percent: public(uint256)\r\n\r\n# Maximum difference (in percents multiplied by 10**18) between the resulting\r\n# stETH/ETH price and the stETH/ETH anchor price obtained from the oracle.\r\nmax_steth_price_difference_percent: public(uint256)\r\n\r\n\r\n@external\r\ndef __init__(\r\n    vault: address,\r\n    admin: address,\r\n    max_steth_price_difference_percent: uint256,\r\n    max_eth_price_difference_percent: uint256\r\n):\r\n    assert ERC20Decimals(UST_TOKEN).decimals() == 18\r\n    assert ERC20Decimals(STETH_TOKEN).decimals() == 18\r\n\r\n    assert max_steth_price_difference_percent <= 10**18, \"invalid percentage\"\r\n    assert max_eth_price_difference_percent <= 10**18, \"invalid percentage\"\r\n\r\n    self.vault = vault\r\n    self.admin = admin\r\n    self.max_steth_price_difference_percent = max_steth_price_difference_percent\r\n    self.max_eth_price_difference_percent = max_eth_price_difference_percent\r\n\r\n    log AdminChanged(self.admin)\r\n\r\n    log PriceDifferenceChanged(\r\n        self.max_steth_price_difference_percent, \r\n        self.max_eth_price_difference_percent\r\n    )\r\n\r\n\r\n@external\r\n@payable\r\ndef __default__():\r\n    pass\r\n\r\n\r\n@external\r\ndef change_admin(new_admin: address):\r\n    assert msg.sender == self.admin\r\n    self.admin = new_admin\r\n    log AdminChanged(self.admin)\r\n\r\n\r\n@external\r\ndef configure(\r\n    max_steth_price_difference_percent: uint256,\r\n    max_eth_price_difference_percent: uint256\r\n):\r\n    assert msg.sender == self.admin\r\n    assert max_steth_price_difference_percent <= 10**18, \"invalid percentage\"\r\n    assert max_eth_price_difference_percent <= 10**18, \"invalid percentage\"\r\n\r\n    self.max_steth_price_difference_percent = max_steth_price_difference_percent\r\n    self.max_eth_price_difference_percent = max_eth_price_difference_percent\r\n\r\n    log PriceDifferenceChanged(\r\n        self.max_steth_price_difference_percent, \r\n        self.max_eth_price_difference_percent\r\n    )\r\n\r\n\r\n@internal\r\n@view\r\ndef _get_steth_anchor_price() -> uint256:\r\n    return LidoStethOracle(LIDO_STETH_ETH_ORACLE).stethPrice()\r\n\r\n\r\n@internal\r\n@view\r\ndef _get_eth_anchor_price() -> uint256:\r\n    eth_price_decimals: uint256 = ChainlinkAggregatorV3Interface(CHAINLINK_ETH_USD_FEED).decimals()\r\n    assert 0 < eth_price_decimals and eth_price_decimals <= 18\r\n\r\n    round_id: uint256 = 0\r\n    answer: int256 = 0\r\n    started_at: uint256 = 0\r\n    updated_at: uint256 = 0\r\n    answered_in_round: uint256 = 0\r\n\r\n    (round_id, answer, started_at, updated_at, answered_in_round) = \\\r\n        ChainlinkAggregatorV3Interface(CHAINLINK_ETH_USD_FEED).latestRoundData()\r\n\r\n    assert updated_at != 0\r\n\r\n    return convert(answer, uint256) * (10 ** (18 - eth_price_decimals))\r\n\r\n\r\n@internal\r\ndef _sushi_sell_eth_to_ust(\r\n    eth_amount_in: uint256,\r\n    ust_amount_out_min: uint256,\r\n    ust_recipient: address\r\n) -> uint256:\r\n    result: Bytes[128] = raw_call(\r\n        SUSHISWAP_ROUTER_V2,\r\n        concat(\r\n            # uint256 amountOutMin, address[] calldata path, address to, uint256 deadline\r\n            method_id(\"swapExactETHForTokens(uint256,address[],address,uint256)\"),\r\n            convert(ust_amount_out_min, bytes32),\r\n            convert(128, bytes32),\r\n            convert(ust_recipient, bytes32),\r\n            convert(MAX_UINT256, bytes32),\r\n            convert(2, bytes32),\r\n            convert(WETH_TOKEN, bytes32),\r\n            convert(UST_TOKEN, bytes32)\r\n        ),\r\n        value=eth_amount_in,\r\n        max_outsize=128\r\n    )\r\n    # The return type is uint256[] and the actual length of the array is 2, so the\r\n    # layout of the data is (pad32(64) . pad32(2) . pad32(arr[0]) . pad32(arr[1])).\r\n    # We need the second array item, thus the byte offset is 96.\r\n    return convert(extract32(result, 96), uint256)\r\n\r\n\r\n@internal\r\n@pure\r\ndef _get_min_amount_out(amount_in: uint256, price: uint256, max_diff_percent: uint256) -> uint256:\r\n    amount_out: uint256 = (amount_in * price) / 10**18\r\n    min_mult: uint256 = 10**18 - max_diff_percent\r\n    return (amount_out * min_mult) / 10**18\r\n\r\n\r\n@external\r\ndef liquidate(ust_recipient: address) -> uint256:\r\n    assert msg.sender == self.vault, \"unauthorized\"\r\n\r\n    steth_amount: uint256 = ERC20(STETH_TOKEN).balanceOf(self)\r\n    assert steth_amount > 0, \"zero stETH balance\"\r\n\r\n    steth_anchor_price: uint256 = self._get_steth_anchor_price()\r\n\r\n    min_eth_amount: uint256 = self._get_min_amount_out(\r\n        steth_amount,\r\n        steth_anchor_price,\r\n        self.max_steth_price_difference_percent\r\n    )\r\n\r\n    ERC20(STETH_TOKEN).approve(CURVE_STETH_POOL, steth_amount)\r\n\r\n    eth_amount: uint256 = CurveStableSwap(CURVE_STETH_POOL).exchange(\r\n        CURVE_STETH_INDEX,\r\n        CURVE_ETH_INDEX,\r\n        steth_amount,\r\n        min_eth_amount\r\n    )\r\n\r\n    assert eth_amount >= min_eth_amount, \"insuff. ETH return\"\r\n    assert self.balance >= eth_amount\r\n\r\n    eth_anchor_price: uint256 = self._get_eth_anchor_price()\r\n\r\n    min_ust_amount: uint256 = self._get_min_amount_out(\r\n        eth_amount,\r\n        eth_anchor_price,\r\n        self.max_eth_price_difference_percent\r\n    )\r\n\r\n    ust_amount_actual: uint256 = self._sushi_sell_eth_to_ust(\r\n        eth_amount,\r\n        min_ust_amount,\r\n        ust_recipient\r\n    )\r\n\r\n    assert ust_amount_actual >= min_ust_amount, \"insuff. UST return\"\r\n\r\n    log SoldStethToUST(\r\n        steth_amount,\r\n        eth_amount,\r\n        ust_amount_actual,\r\n        steth_anchor_price,\r\n        eth_anchor_price\r\n    )\r\n\r\n    return ust_amount_actual","ABI":"[{\"name\":\"SoldStethToUST\",\"inputs\":[{\"name\":\"steth_amount\",\"type\":\"uint256\",\"indexed\":false},{\"name\":\"eth_amount\",\"type\":\"uint256\",\"indexed\":false},{\"name\":\"ust_amount\",\"type\":\"uint256\",\"indexed\":false},{\"name\":\"steth_anchor_price\",\"type\":\"uint256\",\"indexed\":false},{\"name\":\"ust_anchor_price\",\"type\":\"uint256\",\"indexed\":false}],\"anonymous\":false,\"type\":\"event\"},{\"name\":\"AdminChanged\",\"inputs\":[{\"name\":\"new_admin\",\"type\":\"address\",\"indexed\":false}],\"anonymous\":false,\"type\":\"event\"},{\"name\":\"PriceDifferenceChanged\",\"inputs\":[{\"name\":\"max_steth_price_difference_percent\",\"type\":\"uint256\",\"indexed\":false},{\"name\":\"max_eth_price_difference_percent\",\"type\":\"uint256\",\"indexed\":false}],\"anonymous\":false,\"type\":\"event\"},{\"stateMutability\":\"nonpayable\",\"type\":\"constructor\",\"inputs\":[{\"name\":\"vault\",\"type\":\"address\"},{\"name\":\"admin\",\"type\":\"address\"},{\"name\":\"max_steth_price_difference_percent\",\"type\":\"uint256\"},{\"name\":\"max_eth_price_difference_percent\",\"type\":\"uint256\"}],\"outputs\":[]},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"change_admin\",\"inputs\":[{\"name\":\"new_admin\",\"type\":\"address\"}],\"outputs\":[],\"gas\":41082},{\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"configure\",\"inputs\":[{\"name\":\"max_steth_price_difference_percent\",\"type\":\"uint256\"},{\"name\":\"max_eth_price_difference_percent\",\"type\":\"uint256\"}],\"outputs\":[],\"gas\":78954},{\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"liquidate\",\"inputs\":[{\"name\":\"ust_recipient\",\"type\":\"address\"}],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"gas\":75737},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"admin\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"gas\":2568},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"vault\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"gas\":2598},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"max_eth_price_difference_percent\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"gas\":2628},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"max_steth_price_difference_percent\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"gas\":2658}]","ContractName":"Vyper_contract","CompilerVersion":"vyper:0.2.12","OptimizationUsed":"0","Runs":"0","ConstructorArguments":"000000000000000000000000a2f987a546d4cd1c607ee8141276876c26b72bdf0000000000000000000000003cd9f71f80ab08ea5a7dca348b5e94bc595f26a000000000000000000000000000000000000000000000000000ba8478cab54000000000000000000000000000000000000000000000000000002386f26fc10000","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":""}]}