{"status":"1","message":"OK","result":[{"SourceCode":"//SPDX-License-Identifier: UNLICENSED\r\n\r\npragma solidity >=0.6.0 <0.8.0;\r\n\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address payable) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes memory) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor () internal {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\ninterface IERC20 {\r\n\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\nlibrary SafeMath {\r\n\r\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        uint256 c = a + b;\r\n        if (c < a) return (false, 0);\r\n        return (true, c);\r\n    }\r\n\r\n\r\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        if (b > a) return (false, 0);\r\n        return (true, a - b);\r\n    }\r\n\r\n \r\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) return (true, 0);\r\n        uint256 c = a * b;\r\n        if (c / a != b) return (false, 0);\r\n        return (true, c);\r\n    }\r\n\r\n\r\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        if (b == 0) return (false, 0);\r\n        return (true, a / b);\r\n    }\r\n\r\n\r\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        if (b == 0) return (false, 0);\r\n        return (true, a % b);\r\n    }\r\n\r\n\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n        return c;\r\n    }\r\n\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b <= a, \"SafeMath: subtraction overflow\");\r\n        return a - b;\r\n    }\r\n\r\n\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) return 0;\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n        return c;\r\n    }\r\n\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b > 0, \"SafeMath: division by zero\");\r\n        return a / b;\r\n    }\r\n\r\n\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b > 0, \"SafeMath: modulo by zero\");\r\n        return a % b;\r\n    }\r\n\r\n\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        return a - b;\r\n    }\r\n\r\n \r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        return a / b;\r\n    }\r\n\r\n\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\nlibrary Roles {\r\n    struct Role {\r\n        mapping (address => bool) bearer;\r\n    }\r\n\r\n    /**\r\n     * @dev Give an account access to this role.\r\n     */\r\n    function add(Role storage role, address account) internal {\r\n        require(!has(role, account), \"Roles: account already has role\");\r\n        role.bearer[account] = true;\r\n    }\r\n\r\n    /**\r\n     * @dev Remove an account's access to this role.\r\n     */\r\n    function remove(Role storage role, address account) internal {\r\n        require(has(role, account), \"Roles: account does not have role\");\r\n        role.bearer[account] = false;\r\n    }\r\n\r\n    /**\r\n     * @dev Check if an account has this role.\r\n     * @return bool\r\n     */\r\n    function has(Role storage role, address account) internal view returns (bool) {\r\n        require(account != address(0), \"Roles: account is the zero address\");\r\n        return role.bearer[account];\r\n    }\r\n}\r\nabstract contract AdminRole is Context {\r\n    using Roles for Roles.Role;\r\n\r\n    event AdminAdded(address indexed account);\r\n    event AdminRemoved(address indexed account);\r\n\r\n    Roles.Role private _Admins;\r\n\r\n    constructor () internal {\r\n        _addAdmin(_msgSender());\r\n    }\r\n\r\n    modifier onlyAdmin() {\r\n        require(isAdmin(_msgSender()), \"AdminRole: caller does not have the Admin role\");\r\n        _;\r\n    }\r\n\r\n    function isAdmin(address account) public view returns (bool) {\r\n        return _Admins.has(account);\r\n    }\r\n\r\n    function addAdmin(address account) public onlyAdmin {\r\n        _addAdmin(account);\r\n    }\r\n\r\n    function renounceAdmin() public {\r\n        _removeAdmin(_msgSender());\r\n    }\r\n\r\n    function _addAdmin(address account) internal {\r\n        _Admins.add(account);\r\n        emit AdminAdded(account);\r\n    }\r\n\r\n    function _removeAdmin(address account) internal {\r\n        _Admins.remove(account);\r\n        emit AdminRemoved(account);\r\n    }\r\n}\r\ncontract A5T_USDC_Staking is Ownable,AdminRole{\r\n    using SafeMath for uint256;\r\n    \r\n    address public A5T_USDC_Address         = address(0x7d34F36bdD18e67783Df5d4Df9092c83614f9033);\r\n    address public A5T_Address              = address(0xe8272210954eA85DE6D2Ae739806Ab593B5d9c51);\r\n    \r\n    IERC20 A5T;\r\n    IERC20 A5T_USDC_Pair;\r\n    \r\n    uint256 public window_start_date;\r\n    uint256 public window_end_date;\r\n    \r\n    struct Pool{\r\n        uint                        pool_Duration;\r\n        uint256                     total_A5T_Reward;\r\n        uint256                     TVL;                //Total Value Locked in A5T-USDC LP Tokens\r\n        mapping(address => uint256) stake_amount;\r\n        mapping(address => bool)    isClaimed;\r\n    }\r\n    \r\n    mapping(uint => Pool)   public pools;\r\n    uint                    public pool_count;\r\n    \r\n    event stakeEvent(address staker, uint256 LP_amount,uint pool_number);\r\n    event unstakeEvent(address staker, uint256 LP_amount,uint pool_number);\r\n    event rewardEvent(address staker, uint256 reward_amount,uint pool_number);\r\n    \r\n    constructor () public //creation settings\r\n    {\r\n        A5T               = IERC20(A5T_Address);\r\n        A5T_USDC_Pair     = IERC20(A5T_USDC_Address);\r\n        pool_count++;\r\n        pools[pool_count].pool_Duration     = 30 days;\r\n        pools[pool_count].total_A5T_Reward  = 100000 * (10**18);\r\n        \r\n        pool_count++;\r\n        pools[pool_count].pool_Duration     = 60 days;\r\n        pools[pool_count].total_A5T_Reward  = 500000 * (10**18);\r\n        \r\n    }\r\n    function stake(uint _pool_number,uint256 _LP_Amount) public\r\n    {\r\n        require(_LP_Amount>=0,'zero amount');\r\n        require(_pool_number>0 && _pool_number<=pool_count,'invalid pool number');\r\n        require(window_start_date >0 && window_end_date>0,'not started');\r\n        require(block.timestamp <= window_end_date && block.timestamp >= window_start_date,'not time to stake');\r\n        \r\n        //Check if the contract is allowed to send token on user behalf\r\n        uint256 allowance = A5T_USDC_Pair.allowance(msg.sender,address(this));\r\n        require (allowance>=_LP_Amount,'allowance error');\r\n        \r\n        require(A5T_USDC_Pair.transferFrom(msg.sender,address(this),_LP_Amount),'transfer Token Error');\r\n        pools[_pool_number].TVL = pools[_pool_number].TVL.add(_LP_Amount);\r\n        pools[_pool_number].stake_amount[msg.sender] = pools[_pool_number].stake_amount[msg.sender].add(_LP_Amount);\r\n        \r\n        emit stakeEvent(msg.sender, _LP_Amount,_pool_number);\r\n        \r\n    }\r\n    // function unstake(uint _pool_number) public {\r\n        \r\n    //     require(_pool_number>0 && _pool_number<=pool_count,'invalid pool number');\r\n    //     require(block.timestamp >= window_end_date+pools[_pool_number].pool_Duration,'not time to unstake yet');\r\n    //     require(!pools[_pool_number].isUnstaked[msg.sender],'already unstaked');\r\n        \r\n    //     pools[_pool_number].isUnstaked[msg.sender] = true;\r\n        \r\n    //     require(A5T_USDC_Pair.transfer(msg.sender, pools[_pool_number].stake_amount[msg.sender]),'transfer Token Error');\r\n        \r\n    //     emit unstakeEvent(msg.sender, pools[_pool_number].stake_amount[msg.sender],_pool_number);\r\n    // }\r\n    // function claimReward(uint _pool_number) public{\r\n    //     require(_pool_number>0 && _pool_number<=pool_count,'invalid pool number');\r\n    //     require(block.timestamp >= window_end_date+pools[_pool_number].pool_Duration,'not time to unstake yet');\r\n    //     require(pools[_pool_number].stake_amount[msg.sender] > 0,'nothing to unstake');\r\n    //     require(!pools[_pool_number].isClaimed[msg.sender],'already claimed');\r\n        \r\n    //     pools[_pool_number].isClaimed[msg.sender] = true;\r\n        \r\n    //     require(A5T.transfer(msg.sender, pools[_pool_number].stake_amount[msg.sender].mul(pools[_pool_number].total_A5T_Reward).div(pools[_pool_number].TVL)),'transfer Token Error');\r\n        \r\n    //     emit rewardEvent(msg.sender, pools[_pool_number].stake_amount[msg.sender].mul(pools[_pool_number].total_A5T_Reward).div(pools[_pool_number].TVL),_pool_number);\r\n    // }\r\n    function claimAndUnstake(uint _pool_number) public{\r\n        require(_pool_number>0 && _pool_number<=pool_count,'invalid pool number');\r\n        require(block.timestamp >= window_end_date+pools[_pool_number].pool_Duration,'not time to unstake yet');\r\n        require(pools[_pool_number].stake_amount[msg.sender] > 0,'nothing to unstake');\r\n        require(!pools[_pool_number].isClaimed[msg.sender],'already claimed');\r\n        \r\n        pools[_pool_number].isClaimed[msg.sender] = true;\r\n        \r\n        require(A5T_USDC_Pair.transfer(msg.sender, pools[_pool_number].stake_amount[msg.sender]),'transfer Token Error');\r\n        \r\n        emit unstakeEvent(msg.sender, pools[_pool_number].stake_amount[msg.sender],_pool_number);\r\n        \r\n        require(A5T.transfer(msg.sender, pools[_pool_number].stake_amount[msg.sender].mul(pools[_pool_number].total_A5T_Reward).div(pools[_pool_number].TVL)),'transfer Token Error');\r\n        \r\n        emit rewardEvent(msg.sender, pools[_pool_number].stake_amount[msg.sender].mul(pools[_pool_number].total_A5T_Reward).div(pools[_pool_number].TVL),_pool_number);\r\n    }\r\n    //Getters\r\n    function getNow() public view returns(uint256){\r\n        return block.timestamp;\r\n    }\r\n    function getPool_stakeAmount(uint _pool_number,address _staker) public view returns(uint256 _stakeAmount){\r\n        return pools[_pool_number].stake_amount[_staker];\r\n    }\r\n    \r\n    function getPool_isClaimed(uint _pool_number,address _staker) public view returns(bool _isClaimed){\r\n        return pools[_pool_number].isClaimed[_staker];\r\n    }\r\n    //Setters\r\n    function change_Pool_Reward(uint _pool_number,uint256 _new_A5T_reward) public onlyAdmin {\r\n        require(_new_A5T_reward>0,'invalid reward');\r\n        require(_pool_number>0 && _pool_number<=pool_count,'invalid pool number');\r\n        pools[_pool_number].total_A5T_Reward = _new_A5T_reward;\r\n        \r\n    }\r\n    function change_Pool_Duration(uint _pool_number,uint256 _new_Duration) public onlyAdmin {\r\n        require(_new_Duration>0,'invalid duration');\r\n        require(_pool_number>0 && _pool_number<=pool_count,'invalid pool number');\r\n        pools[_pool_number].pool_Duration = _new_Duration;\r\n        \r\n    }\r\n    function setWindow_Start_Date(uint256 _date) public onlyAdmin {\r\n        if (window_end_date != 0)\r\n            require(_date<window_end_date,'start date must less than end date');\r\n        window_start_date = _date;\r\n    }\r\n    function setWindow_End_Date(uint256 _date) public onlyAdmin {\r\n        if (window_start_date != 0)\r\n            require(window_start_date<_date,'start date must less than end date');\r\n        window_end_date = _date;\r\n    }\r\n    function setA5Taddress(address _newAddress) public onlyAdmin {\r\n        A5T_Address         = _newAddress;\r\n        A5T                 = IERC20(A5T_Address);\r\n    }\r\n    function setPairAddress(address _newPairAddress) public onlyAdmin {\r\n        A5T_USDC_Address            = _newPairAddress;\r\n        A5T_USDC_Pair               = IERC20(A5T_USDC_Address);\r\n    }\r\n\r\n    \r\n    //Protect the pool in case of hacking\r\n    function kill(address payable _to) onlyOwner public {\r\n        uint256 balance = A5T.balanceOf(address(this));\r\n        A5T.transfer(_to, balance);\r\n        A5T_USDC_Pair.transfer(_to, balance);\r\n        selfdestruct(_to);\r\n    }\r\n    function transferFundA5T(uint256 amount, address payable _to) onlyOwner public {\r\n        uint256 balance = A5T.balanceOf(address(this));\r\n        require(amount<=balance,'exceed contract balance');\r\n        A5T.transfer(_to, amount);\r\n    }\r\n    function transferFundPair(uint256 amount, address payable _to) onlyOwner public {\r\n        uint256 balance = A5T_USDC_Pair.balanceOf(address(this));\r\n        require(amount<=balance,'exceed contract balance');\r\n        A5T_USDC_Pair.transfer(_to, amount);\r\n    }\r\n    function transferFund(uint256 amount, address payable _to) public onlyOwner {\r\n        require(amount<=address(this).balance,'exceed contract balance');\r\n        _to.transfer(amount);\r\n    }\r\n}","ABI":"[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"AdminAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"AdminRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"reward_amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"pool_number\",\"type\":\"uint256\"}],\"name\":\"rewardEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"LP_amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"pool_number\",\"type\":\"uint256\"}],\"name\":\"stakeEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"LP_amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"pool_number\",\"type\":\"uint256\"}],\"name\":\"unstakeEvent\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"A5T_Address\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"A5T_USDC_Address\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"addAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pool_number\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_new_Duration\",\"type\":\"uint256\"}],\"name\":\"change_Pool_Duration\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pool_number\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_new_A5T_reward\",\"type\":\"uint256\"}],\"name\":\"change_Pool_Reward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pool_number\",\"type\":\"uint256\"}],\"name\":\"claimAndUnstake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getNow\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pool_number\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_staker\",\"type\":\"address\"}],\"name\":\"getPool_isClaimed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"_isClaimed\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pool_number\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_staker\",\"type\":\"address\"}],\"name\":\"getPool_stakeAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_stakeAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isAdmin\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"kill\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pool_count\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"pools\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"pool_Duration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"total_A5T_Reward\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"TVL\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newAddress\",\"type\":\"address\"}],\"name\":\"setA5Taddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newPairAddress\",\"type\":\"address\"}],\"name\":\"setPairAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_date\",\"type\":\"uint256\"}],\"name\":\"setWindow_End_Date\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_date\",\"type\":\"uint256\"}],\"name\":\"setWindow_Start_Date\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pool_number\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_LP_Amount\",\"type\":\"uint256\"}],\"name\":\"stake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address payable\",\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"transferFund\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address payable\",\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"transferFundA5T\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address payable\",\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"transferFundPair\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"window_end_date\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"window_start_date\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"A5T_USDC_Staking","CompilerVersion":"v0.7.6+commit.7338295f","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"ipfs://b750e5328194226d741de8e3a7bcdd685785c9c08d320f3684029df8d24c4412"}]}