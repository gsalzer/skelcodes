{"status":"1","message":"OK","result":[{"SourceCode":"// SPDX-License-Identifier: GPL-3.0-or-later\r\npragma solidity ^0.8.4;\r\n\r\n// 升级合约\r\ncontract Nest36Withdraw {\r\n\r\n\t//==========NHBTC未领取参数\r\n\t// NHBTC Owner\r\n\taddress constant NHBTC_OWNER = 0x3CeeFBbB0e6C60cf64DB9D17B94917D6D78cec05;\r\n\t// NHBTC地址\r\n\taddress constant NHBTC_ADDRESS = 0x1F832091fAf289Ed4f50FE7418cFbD2611225d46;\r\n\t// NHBTC未领取数量\r\n\t// uint256 constant NHBTC_AMOUNT = 38216800000000000000000;\r\n\t\r\n\r\n\t//==========NN未领取NEST参数\r\n\t// NN领取合约地址\r\n\taddress constant NNREWARDPOOL_ADDRESS = 0xf1A7201749fA81463799383D7D0565B6bfECE757;\r\n\t// NN未领取NEST数量\r\n\t// uint256 constant NN_NEST_AMOUNT = 3441295249408000000000000;\r\n\r\n\t//==========挖矿资金参数\r\n\t// 矿工0x4FD6CEAc4FF7c5F4d57A4043cbaA1862F227145A私钥出现问题，导致有两笔nest报价单(6886, 6885)不能正常关闭\r\n\t// 经其确认，两笔报价单内锁定的60eth和2996558.362758784295450000nest协助其转入到其提供的新地址0xA05684C9e3A1d62a4EBC5a9FFB13030Bbe5e82a8\r\n\t// 新矿工地址\r\n\taddress constant NEW_MINER = 0xA05684C9e3A1d62a4EBC5a9FFB13030Bbe5e82a8;\r\n\t// 挖矿ETH资金\r\n\tuint256 constant ETH_AMOUNT_MINING = 60000000000000000000;\r\n\t// 挖矿NEST资金\r\n\tuint256 constant NEST_AMOUNT_MINING = 2996558362758784295450000;\r\n\r\n\t// NEST地址\r\n\taddress constant NEST_ADDRESS = 0x04abEdA201850aC0124161F037Efd70c74ddC74C;\r\n\t// NEST3.5挖矿合约地址\r\n\taddress constant NEST_MINING_ADDRESS = 0x243f207F9358cf67243aDe4A8fF3C5235aa7b8f6;\r\n\t// 3.5矿池合约地址\r\n\taddress constant NEST_POOL_ADDRESS = 0xCA208DCfbEF22941D176858A640190C2222C8c8F;\r\n\r\n\t// 管理员\r\n    address public _owner;\r\n    \r\n    constructor() {\r\n        _owner = msg.sender;\r\n    }\r\n\r\n    // 恢复3.5管理员\r\n    function setGov35() public onlyOwner {\r\n        INestPool(NEST_POOL_ADDRESS).setGovernance(_owner);\r\n    }\r\n\r\n    function doit() public onlyOwner {\r\n    \tINestPool NestPool = INestPool(NEST_POOL_ADDRESS);\r\n    \t// 零:设置地址\r\n    \tNestPool.setContracts(address(0x0), address(this), address(0x0), address(0x0), address(0x0), address(0x0), address(0x0), address(0x0));\r\n\r\n    \t// 一:转移挖矿资金\r\n    \t// 1_1.更换ETH账本、更换NEST账本\r\n    \tNestPool.transferEthInPool(NEST_POOL_ADDRESS, NEW_MINER, ETH_AMOUNT_MINING);\r\n    \tNestPool.transferNestInPool(NEST_POOL_ADDRESS, NEW_MINER, NEST_AMOUNT_MINING);\r\n    \t// 1_2.给新矿工地址转ETH和NEST\r\n    \tNestPool.withdrawEthAndToken(NEW_MINER, ETH_AMOUNT_MINING, NEST_ADDRESS, NEST_AMOUNT_MINING);\r\n\r\n    \t// 二:转移NN未领取的NEST\r\n    \tuint256 NN_NestAmount = NestPool.getMinerNest(NNREWARDPOOL_ADDRESS);\r\n    \t// 2_1.更换NEST账本\r\n    \tNestPool.transferNestInPool(NNREWARDPOOL_ADDRESS, _owner, NN_NestAmount);\r\n    \t// 2_2.给管理员转账NEST\r\n    \tNestPool.withdrawToken(_owner, NEST_ADDRESS, NN_NestAmount);\r\n\r\n    \t// 三:NHBTC转账\r\n    \tuint256 NHBTCAmount = NestPool.balanceOfTokenInPool(NHBTC_OWNER, NHBTC_ADDRESS);\r\n    \tNestPool.withdrawToken(NHBTC_OWNER, NHBTC_ADDRESS, NHBTCAmount);\r\n\r\n    \t// 四:恢复地址\r\n    \tNestPool.setContracts(address(0x0), NEST_MINING_ADDRESS, address(0x0), address(0x0), address(0x0), address(0x0), address(0x0), address(0x0));\r\n\r\n    \t// 五:恢复3.5管理员\r\n    \tsetGov35();\r\n    }\r\n\r\n    modifier onlyOwner {\r\n        require(msg.sender == _owner);\r\n        _;\r\n    }\r\n\r\n}\r\n\r\n// 3.5矿池合约\r\ninterface INestPool {\r\n    // 设置管理员\r\n    function setGovernance(address _gov) external;\r\n    // 设置地址\r\n    function setContracts(\r\n            address NestToken, address NestMining, \r\n            address NestStaking, address NTokenController, \r\n            address NNToken, address NNRewardPool, \r\n            address NestQuery, address NestDAO\r\n        ) external;\r\n    // 转移nest账本\r\n    function transferNestInPool(address from, address to, uint256 amount) external;\r\n    // 转移ETH账本\r\n    function transferEthInPool(address from, address to, uint256 amount) external;\r\n    // 给矿工地址转账ETH和NEST\r\n    function withdrawEthAndToken(address miner, uint256 ethAmount, address token, uint256 tokenAmount) external;\r\n    // 转出Token\r\n    function withdrawToken(address miner, address token, uint256 tokenAmount) external;\r\n    // 查询NEST数量\r\n    function getMinerNest(address miner) external view returns (uint256 nestAmount);\r\n    // 查询其他token数量\r\n    function balanceOfTokenInPool(address miner, address token) external view returns (uint256);\r\n}","ABI":"[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"_owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"doit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"setGov35\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"Nest36Withdraw","CompilerVersion":"v0.8.4+commit.c7e474f2","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"GNU GPLv3","Proxy":"0","Implementation":"","SwarmSource":"ipfs://72acca742e2b30046b429636464ae967c8684b0bcb0f5137e1f772b049f638ab"}]}