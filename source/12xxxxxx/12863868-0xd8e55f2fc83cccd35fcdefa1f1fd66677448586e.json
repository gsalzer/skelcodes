{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.6.12;\r\n// SPDX-License-Identifier: UNLICENSED\r\n\r\ninterface IERC20 {\r\n\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n    \r\n    \r\n    function mint(address to, uint amount) external;\r\n    \r\n    function burn( address _account, uint amount) external;\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n \r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts with custom message when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address payable) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes memory) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n\r\nlibrary Address {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     *\r\n     * Among others, `isContract` will return false for the following\r\n     * types of addresses:\r\n     *\r\n     *  - an externally-owned account\r\n     *  - a contract in construction\r\n     *  - an address where a contract will be created\r\n     *  - an address where a contract lived, but was destroyed\r\n     * ====\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\r\n        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\r\n        // for accounts without code, i.e. `keccak256('')`\r\n        bytes32 codehash;\r\n        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly { codehash := extcodehash(account) }\r\n        return (codehash != accountHash && codehash != 0x0);\r\n    }\r\n\r\n    /**\r\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * IMPORTANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     */\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\r\n        (bool success, ) = recipient.call{ value: amount }(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n\r\n    /**\r\n     * @dev Performs a Solidity function call using a low level `call`. A\r\n     * plain`call` is an unsafe replacement for a function call: use this\r\n     * function instead.\r\n     *\r\n     * If `target` reverts with a revert reason, it is bubbled up by this\r\n     * function (like regular Solidity function calls).\r\n     *\r\n     * Returns the raw returned data. To convert to the expected return value,\r\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `target` must be a contract.\r\n     * - calling `target` with `data` must not revert.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n      return functionCall(target, data, \"Address: low-level call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\r\n     * `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\r\n        return _functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but also transferring `value` wei to `target`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the calling contract must have an ETH balance of at least `value`.\r\n     * - the called Solidity function must be `payable`.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\r\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\r\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\r\n        return _functionCallWithValue(target, data, value, errorMessage);\r\n    }\r\n\r\n    function _functionCallWithValue(address target, bytes memory data, uint256 weiValue, string memory errorMessage) private returns (bytes memory) {\r\n        require(isContract(target), \"Address: call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.call{ value: weiValue }(data);\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            // Look for revert reason and bubble it up if present\r\n            if (returndata.length > 0) {\r\n                // The easiest way to bubble the revert reason is using memory via assembly\r\n\r\n                // solhint-disable-next-line no-inline-assembly\r\n                assembly {\r\n                    let returndata_size := mload(returndata)\r\n                    revert(add(32, returndata), returndata_size)\r\n                }\r\n            } else {\r\n                revert(errorMessage);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\ncontract Ownable is Context {\r\n    address private _owner;\r\n    address private _previousOwner;\r\n    uint256 private _lockTime;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor () internal {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n     /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n\r\n    function geUnlockTime() public view returns (uint256) {\r\n        return _lockTime;\r\n    }\r\n\r\n    //Locks the contract for owner for the amount of time provided\r\n    function lock(uint256 time) public virtual onlyOwner {\r\n        _previousOwner = _owner;\r\n        _owner = address(0);\r\n        _lockTime = now + time;\r\n        emit OwnershipTransferred(_owner, address(0));\r\n    }\r\n    \r\n    //Unlocks the contract for owner when _lockTime is exceeds\r\n    function unlock() public virtual {\r\n        require(_previousOwner == msg.sender, \"You don't have permission to unlock\");\r\n        require(now > _lockTime , \"Contract is locked until 7 days\");\r\n        emit OwnershipTransferred(_owner, _previousOwner);\r\n        _owner = _previousOwner;\r\n    }\r\n}\r\n\r\ninterface PredictionLala {\r\n    function depositFor( address _account, uint _amount) external returns (bool);\r\n    function updateLiquidateLala( address _account, uint _amount) external;\r\n    function updateLiquidatedBrorrowLala( address _account, uint _amount) external;\r\n    function viewBorrowAvailable( address _user) external view returns ( uint);\r\n}\r\n\r\ncontract BorrowLala is Ownable {\r\n    using SafeMath for uint;\r\n    \r\n    // Event logs\r\n    event Borrow( address indexed _vault, address indexed _token, uint _collateral, uint _borrowed, uint indexed _borrowID, uint _borrowTime);\r\n    event Payback( address indexed _vault, address indexed _token, uint _paybackToken, uint _collateral, uint _borrowTime);\r\n    \r\n    IERC20 public lala;\r\n    PredictionLala public PredictionCon;\r\n    \r\n    struct token {\r\n        uint _tokenPrice;\r\n        uint _decimals;\r\n        bool _isActive;\r\n    }\r\n    \r\n    struct Vault {\r\n        uint _borrowed;\r\n        mapping(address => borrows)  _borrow;\r\n    }\r\n    \r\n    struct borrows {\r\n        uint borrowID;\r\n        uint pastBorrowID;\r\n        uint pastBorrows;\r\n        uint pastLalaBorrows;\r\n        uint recentBorrows;\r\n        mapping(uint => borrowListStruct) listOfBorrows;\r\n    }\r\n    \r\n    struct borrowListStruct{\r\n        uint borrows;\r\n        uint lalaBorrows;\r\n        uint pastBorrowTime;\r\n        bool isExpired;\r\n    }\r\n    \r\n    mapping(address => token) public getToken;\r\n    mapping(address => Vault) public vault;\r\n    \r\n    address public predictionContract;\r\n    address[] public tokenList;\r\n    \r\n    address liquidateWallet;\r\n    address public _dead = 0x000000000000000000000000000000000000dEaD;\r\n    \r\n    uint public estimatedLoop = 10; \r\n    uint public borrowTimeStamp = 7 days;\r\n    \r\n    constructor(PredictionLala _predictionContract, address _liquidateWallet) public {\r\n        PredictionCon = _predictionContract;\r\n        liquidateWallet = _liquidateWallet;\r\n    }\r\n    \r\n    function setlala(IERC20 _lala) public onlyOwner { lala = _lala; }\r\n    \r\n    function updateLoopEstimation( uint _esLp) public onlyOwner { estimatedLoop = _esLp; }\r\n    \r\n    function updateBorrowTimeStamp( uint _borrowTimeStamp) public onlyOwner { borrowTimeStamp = _borrowTimeStamp; }\r\n    \r\n    function updatePrediction( PredictionLala _predict) public onlyOwner { PredictionCon = _predict; }\r\n    \r\n    function addToken( address _token, uint _decimal, uint _price) public onlyOwner {\r\n        require(_price > 0, \"lendingAndBorrow :: addToken : Price must be greater than zero\");\r\n        require(!getToken[_token]._isActive, \"lendingAndBorrow :: addToken : Token already activated\");\r\n        require((_decimal >= 0) && (_decimal <= 18), \"lendingAndBorrow :: addToken : decimals must be inbetween 0 to 18\");\r\n        \r\n        getToken[_token] = token(_price,(10**(_decimal)),true);\r\n        tokenList.push(_token);\r\n    }\r\n    \r\n    function updateTokenPrice(address _token, uint _price) public onlyOwner {\r\n        require(_price > 0, \"lendingAndBorrow :: updateCollateralPrice : Price must be greater than zero\");\r\n        require(getToken[_token]._isActive, \"lendingAndBupdateCollateralPriceorrow :: updateCollateralPrice : Token is not activated\");\r\n        \r\n        getToken[_token]._tokenPrice = _price;\r\n    }\r\n    \r\n    function borrow( address _token, uint _value, uint _leverage, bool _withUpdate) public payable {\r\n        require(getToken[_token]._isActive, \"lendingAndBorrow :: borrow : Token is not activated\");\r\n        require(_leverage <= 125, \"lendingAndBorrow :: borrow : leverage must be between 1 to 125\");\r\n        \r\n        if(_token == address(0)) { require((msg.value > 0) && (msg.value == _value), \"lendingAndBorrow :: borrow : value must be equal to msg.value and msg.value must be greater than zero\"); }\r\n        else{\r\n            require(IERC20(_token).balanceOf(msg.sender) > _value, \"lendingAndBorrow :: borrow : insufficient balance\");\r\n            require(IERC20(_token).allowance(msg.sender, address(this)) >= _value, \"lendingAndBorrow :: borrow : insufficient allowance\");\r\n            require(IERC20(_token).transferFrom(msg.sender, address(this), _value), \"lendingAndBorrow :: borrow : transferFrom failed\");\r\n        }\r\n        \r\n        uint _borrow = cumulativePrice(_token, _value);\r\n        _borrow = _borrow.add(cumulativePrice(_token, _value.mul(30).div(100))); // 30% more on investment\r\n        \r\n        if(_leverage >= 1)\r\n            _borrow = _borrow.add(_borrow.mul(_leverage).div(100));\r\n        \r\n        lala.mint( address(PredictionCon), _borrow);\r\n        PredictionCon.depositFor( msg.sender, _borrow);\r\n        \r\n        vault[msg.sender]._borrowed = vault[msg.sender]._borrowed.add(_borrow);\r\n        \r\n        if(_withUpdate) { updateTokenVaults( msg.sender,_token); }// With update. \r\n        \r\n        vault[msg.sender]._borrow[_token].borrowID++;\r\n        \r\n        uint _collateralFee = _value.div(100);\r\n        \r\n        vault[msg.sender]._borrow[_token].listOfBorrows[vault[msg.sender]._borrow[_token].borrowID] = borrowListStruct(_value.sub(_collateralFee), _borrow, block.timestamp, false);\r\n        vault[msg.sender]._borrow[_token].recentBorrows = vault[msg.sender]._borrow[_token].recentBorrows.add(_value.sub(_collateralFee));\r\n        \r\n        if(_token == address(0)) require(payable(liquidateWallet).send(_collateralFee), \"borrow: _collateralFee transfer failed\");\r\n        else\r\n            IERC20(_token).transfer(liquidateWallet,_collateralFee);\r\n        \r\n        emit Borrow( msg.sender, _token, _value, _borrow, vault[msg.sender]._borrow[_token].borrowID, block.timestamp);\r\n    }\r\n    \r\n    function payBack( address _token, address _account, uint _borrowID, uint _amount) external {\r\n        require(vault[_account]._borrow[_token].borrowID >= _borrowID);\r\n        require(vault[_account]._borrow[_token].listOfBorrows[_borrowID].lalaBorrows > 0, \"lendingAndBorrow :: payBack : borrow amount already paybacked\");\r\n        \r\n        updateTokenVaults( _account,_token);\r\n        \r\n        require(vault[_account]._borrow[_token].recentBorrows > 0, \"lendingAndBorrow :: payBack : There is no recent borrows to payback\");\r\n        require(_amount == vault[_account]._borrow[_token].listOfBorrows[_borrowID].lalaBorrows, \"lendingAndBorrow :: payBack : payBack amount doesnot match\");\r\n        require(!vault[_account]._borrow[_token].listOfBorrows[_borrowID].isExpired, \"lendingAndBorrow :: payBack : payback period ends\");\r\n        \r\n        lala.transferFrom(msg.sender, _dead, _amount);\r\n        \r\n        uint _amountOut = vault[_account]._borrow[_token].listOfBorrows[_borrowID].borrows;\r\n         uint _deduction;\r\n         \r\n        if(_amountOut > 0){\r\n            _deduction = _amountOut.mul(3).div(100);\r\n            if(_token == address(0)){\r\n                require(payable(_account).send(_amountOut.sub(_deduction)), \"lendingAndBorrow :: payBack : value send failed\");\r\n                require(payable(liquidateWallet).send(_deduction), \"lendingAndBorrow :: payBack : payback commission value send failed\");\r\n            }\r\n            else{\r\n                require(IERC20(_token).transfer(_account,_amountOut.sub(_deduction)), \"lendingAndBorrow :: payBack : Token transfer failed\");\r\n                require(IERC20(_token).transfer(liquidateWallet,_deduction), \"lendingAndBorrow :: payBack : payback commission Token transfer failed\");\r\n            }\r\n            \r\n            vault[_account]._borrow[_token].listOfBorrows[_borrowID].lalaBorrows = 0;\r\n            vault[_account]._borrow[_token].recentBorrows = vault[_account]._borrow[_token].recentBorrows.sub(_amount);\r\n        }\r\n        else{\r\n            revert(\"lendingAndBorrow :: payBack : collateral returns zero\");\r\n        }\r\n        \r\n        emit Payback( _account, _token, _amount, _amountOut.sub(_deduction), block.timestamp);\r\n    }\r\n    \r\n    function updateTokenVaults(address _vault, address _token) public returns (bool) {\r\n        if((vault[_vault]._borrow[_token].borrowID > 0) && (vault[_vault]._borrow[_token].pastBorrowID < vault[_vault]._borrow[_token].borrowID)){\r\n            uint _workUntill = vault[_vault]._borrow[_token].borrowID;\r\n            uint _start = vault[_vault]._borrow[_token].pastBorrowID;\r\n            if(vault[_vault]._borrow[_token].borrowID.sub(vault[_vault]._borrow[_token].pastBorrowID) > estimatedLoop) _workUntill = vault[_vault]._borrow[_token].pastBorrowID.add(estimatedLoop);\r\n            \r\n            _start = (vault[_vault]._borrow[_token].pastBorrowID == 0) ? 1 : vault[_vault]._borrow[_token].pastBorrowID;\r\n            \r\n            for(uint i=_start;i <= _workUntill;i++){\r\n                if((vault[_vault]._borrow[_token].listOfBorrows[i].pastBorrowTime.add(borrowTimeStamp) < block.timestamp) && (vault[_vault]._borrow[_token].listOfBorrows[i].pastBorrowTime != 0)){\r\n                    if(vault[_vault]._borrow[_token].listOfBorrows[i].borrows > 0){\r\n                        vault[_vault]._borrow[_token].pastLalaBorrows = vault[_vault]._borrow[_token].pastLalaBorrows.add(vault[_vault]._borrow[_token].listOfBorrows[i].lalaBorrows);\r\n                        vault[_vault]._borrow[_token].recentBorrows = vault[_vault]._borrow[_token].recentBorrows.sub(vault[_vault]._borrow[_token].listOfBorrows[i].borrows);\r\n                        vault[_vault]._borrow[_token].pastBorrows = vault[_vault]._borrow[_token].pastBorrows.add(vault[_vault]._borrow[_token].listOfBorrows[i].borrows);\r\n                        vault[_vault]._borrow[_token].listOfBorrows[i].isExpired = true;\r\n                    }\r\n                }\r\n                else break;\r\n                \r\n                vault[_vault]._borrow[_token].pastBorrowID++;\r\n            }\r\n        }\r\n        \r\n        return true;\r\n    }\r\n    \r\n    function liquidateVault( address _vault, address _token) public {\r\n        if(updateTokenVaults( _vault, _token)){\r\n            if(vault[_vault]._borrow[_token].pastBorrows > 0){\r\n                uint _amount = vault[_vault]._borrow[_token].pastBorrows;\r\n                vault[_vault]._borrow[_token].pastBorrows = 0;\r\n                liquidate(_token, _amount);\r\n            }\r\n        }\r\n    }\r\n    \r\n    function liquidate(address _token, uint _amount) internal returns (bool) {\r\n        address _contract = address(this);\r\n        \r\n        if(_token == address(0)){\r\n            if(_contract.balance < _amount) { return false; }\r\n            require(payable(liquidateWallet).send(_amount), \"lendingAndBorrow :: liquidate : value send failed\");\r\n        }\r\n        else{\r\n            if(IERC20(_token).balanceOf(_contract) < _amount) { return false; }\r\n            require(IERC20(_token).transfer(liquidateWallet,_amount), \"lendingAndBorrow :: liquidate : Token transfer failed\");\r\n        }\r\n        \r\n        return true;\r\n    }\r\n    \r\n    function cumulativePrice( address _token, uint _amountIn) public view returns (uint){\r\n          return _amountIn.mul(1e18).div(getToken[_token]._tokenPrice);\r\n    }\r\n    \r\n    function cumulativePaybackPrice( address _token, uint _amountIn) public view returns (uint){\r\n          uint _price = _amountIn.mul(1e12).mul(getToken[_token]._tokenPrice).div(1e18);\r\n          return _price.div(1e12);\r\n    }\r\n    \r\n    function getUserCurrentBorrowID( address _vault, address _token) public view returns (uint) {\r\n        return vault[_vault]._borrow[_token].borrowID;\r\n    }\r\n    \r\n    function getBorrowDetails( address _vault, address _token, uint _borrowID) public view returns ( uint pastBorrowID, uint pastBorrows, uint recentBorrows, uint borrowed, uint pastBorrowTime, bool _isexpired) {\r\n        (pastBorrowID, pastBorrows, recentBorrows, borrowed, pastBorrowTime, _isexpired) = (\r\n            vault[_vault]._borrow[_token].pastBorrowID,\r\n            vault[_vault]._borrow[_token].pastBorrows,\r\n            vault[_vault]._borrow[_token].recentBorrows,\r\n            vault[_vault]._borrow[_token].listOfBorrows[_borrowID].borrows,\r\n            vault[_vault]._borrow[_token].listOfBorrows[_borrowID].pastBorrowTime,\r\n            vault[_vault]._borrow[_token].listOfBorrows[_borrowID].isExpired);\r\n    }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"contract PredictionLala\",\"name\":\"_predictionContract\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_liquidateWallet\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_vault\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_collateral\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_borrowed\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_borrowID\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_borrowTime\",\"type\":\"uint256\"}],\"name\":\"Borrow\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_vault\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_paybackToken\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_collateral\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_borrowTime\",\"type\":\"uint256\"}],\"name\":\"Payback\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"PredictionCon\",\"outputs\":[{\"internalType\":\"contract PredictionLala\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_dead\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_decimal\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_price\",\"type\":\"uint256\"}],\"name\":\"addToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_leverage\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_withUpdate\",\"type\":\"bool\"}],\"name\":\"borrow\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"borrowTimeStamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amountIn\",\"type\":\"uint256\"}],\"name\":\"cumulativePaybackPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amountIn\",\"type\":\"uint256\"}],\"name\":\"cumulativePrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"estimatedLoop\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"geUnlockTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_vault\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_borrowID\",\"type\":\"uint256\"}],\"name\":\"getBorrowDetails\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"pastBorrowID\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"pastBorrows\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"recentBorrows\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"borrowed\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"pastBorrowTime\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_isexpired\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"getToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_decimals\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_isActive\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_vault\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"getUserCurrentBorrowID\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lala\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_vault\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"liquidateVault\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"}],\"name\":\"lock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_borrowID\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"payBack\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"predictionContract\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"_lala\",\"type\":\"address\"}],\"name\":\"setlala\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"tokenList\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unlock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_borrowTimeStamp\",\"type\":\"uint256\"}],\"name\":\"updateBorrowTimeStamp\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_esLp\",\"type\":\"uint256\"}],\"name\":\"updateLoopEstimation\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract PredictionLala\",\"name\":\"_predict\",\"type\":\"address\"}],\"name\":\"updatePrediction\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_price\",\"type\":\"uint256\"}],\"name\":\"updateTokenPrice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_vault\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"updateTokenVaults\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"vault\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_borrowed\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"BorrowLala","CompilerVersion":"v0.6.12+commit.27d51765","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"000000000000000000000000598f6d6c69549c05a0c5640a38df7eb0fa35cbbc0000000000000000000000007656b961025d6bb1c368d96ba1d728df3e737178","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"ipfs://649ccc6b252420124ec4bb55ff3e455f89675e3b171a3223c00d3b4be4a45ef4"}]}