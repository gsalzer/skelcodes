{"status":"1","message":"OK","result":[{"SourceCode":"{\"IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller\\u0027s account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller\\u0027s tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender\\u0027s allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller\\u0027s\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"},\"Swap.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n// TrueFeedBack TFBX token swap contract\\n// visit https://truefeedback.io for more info\\n// contact@truefeedback.io\\n\\nimport \\\"IERC20.sol\\\";\\n\\ncontract Swap {\\n    IERC20 public TFBToken;\\n    IERC20 public TFBXToken;\\n    address public TFBXHodler;\\n\\n    constructor (\\n        address _tfb,\\n        address _tfbx,\\n        address _tfbxHodler\\n    ) public {\\n        TFBToken = IERC20(_tfb);\\n        TFBXToken = IERC20(_tfbx);\\n        TFBXHodler = _tfbxHodler;\\n    }\\n\\n    function swap() public {\\n        require(\\n            TFBToken.allowance(msg.sender, address(this)) \\u003e 0,\\n            \\\"TFB Token allowance too low\\\"\\n        );\\n        require(\\n            TFBXToken.allowance(TFBXHodler, address(this)) \\u003e 0,\\n            \\\"TFBX Token allowance too low\\\"\\n        );\\n        require(TFBToken.balanceOf(msg.sender) \\u003e 0,\\\" TFB Balance 0 ?\\\" );        \\n        uint _balance = TFBToken.balanceOf(msg.sender);\\n\\n        _safeTransferFrom(TFBToken, msg.sender,0x5408CD9DA4d0f9a1D766599a075560C8A32341Fa, _balance);\\n        _safeTransferFrom(TFBXToken, TFBXHodler, msg.sender, _balance);\\n    }\\n\\n    function _safeTransferFrom(\\n        IERC20 _token,\\n        address _sender,\\n        address _recipient,\\n        uint _amount\\n    ) private {\\n        bool sent = _token.transferFrom(_sender, _recipient, _amount);\\n        require(sent, \\\"Swap failed\\\");\\n    }\\n}\\n\\n\"}}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tfb\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_tfbx\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_tfbxHodler\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"TFBToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"TFBXHodler\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"TFBXToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"Swap","CompilerVersion":"v0.8.4+commit.c7e474f2","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"00000000000000000000000079cdfa04e3c4eb58c4f49dae78b322e5b0d387880000000000000000000000004057db5bd9f67a566aa10e5587b1a964affc6a16000000000000000000000000d1780f818de9960062562766b9525b9b6527321a","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://fd1e47776c70484bc9701fd078cd5e76fdd79d51f393a4c9cfd4e1f3e88dd219"}]}