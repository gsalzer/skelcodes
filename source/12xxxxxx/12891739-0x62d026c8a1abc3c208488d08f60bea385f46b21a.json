{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.8.6;\r\n\r\n/**\r\n * @title Roles\r\n * @dev Library for managing addresses assigned to a Role.\r\n */\r\nlibrary Roles {\r\n    struct Role {\r\n        mapping (address => bool) bearer;\r\n    }\r\n\r\n    /**\r\n     * @dev Give an account access to this role.\r\n     */\r\n    function add(Role storage role, address account) internal {\r\n        require(!has(role, account), \"Roles: account already has role\");\r\n        role.bearer[account] = true;\r\n    }\r\n\r\n    /**\r\n     * @dev Remove an account's access to this role.\r\n     */\r\n    function remove(Role storage role, address account) internal {\r\n        require(has(role, account), \"Roles: account does not have role\");\r\n        role.bearer[account] = false;\r\n    }\r\n\r\n    /**\r\n     * @dev Check if an account has this role.\r\n     * @return bool\r\n     */\r\n    function has(Role storage role, address account) internal view returns (bool) {\r\n        require(account != address(0), \"Roles: account is the zero address\");\r\n        return role.bearer[account];\r\n    }\r\n}\r\n\r\n\r\ninterface AvastarsNFT {\r\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\r\n    function balanceOf(address owner) external view returns (uint256 balance);\r\n    function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256 tokenId);\r\n}\r\n\r\ncontract TerminusClaim {\r\n\r\n    address owner;\r\n    bool addressesFinalized;\r\n    mapping (address => uint256) private amountClaimableByAddress;\r\n    address public reserveAddress = 0xc53f5c08237F679b5411B0028c0c8FA4C91c54Ca; //terminus address \r\n    \r\n    using Roles for Roles.Role;\r\n        \r\n    Roles.Role private _approvedCaller;\r\n\r\n    AvastarsNFT private avastarsNFT = AvastarsNFT(0xF3E778F839934fC819cFA1040AabaCeCBA01e049);  //mainnet avastars \r\n\r\n    constructor() {\r\n        owner = msg.sender;\r\n    _approvedCaller.add(0x63a9dbCe75413036B2B778E670aaBd4493aAF9F3);\r\n    _approvedCaller.add(0xBFfAc0D7B5AfAED417C36Ec492BEA4ec16DfC8b9); \r\n    _approvedCaller.add(0x442DCCEe68425828C106A3662014B4F131e3BD9b);    \r\n    }\r\n\r\n    modifier isOwner() {\r\n        require(msg.sender == owner, \"Not ownwer\");\r\n        _;\r\n    }\r\n\r\n    function pushAddresses(address[] memory attendee) public isOwner {\r\n\r\n        for(uint256 i = 0; i < attendee.length; i++){\r\n            amountClaimableByAddress[attendee[i]] = 1;\r\n        }\r\n\r\n    }\r\n\r\n    function finalizeAddresses() public {\r\n        require(_approvedCaller.has(msg.sender), \"Only team can finalize list.\");\r\n        addressesFinalized = true;\r\n    }\r\n    \r\n    function getRandomAvastar(uint256 avastarsInReserve) internal view returns (uint256 randomAvastarIndex) {\r\n        uint256 hash = uint((keccak256(abi.encodePacked(avastarsInReserve,msg.sender,block.number))));\r\n        randomAvastarIndex = hash % avastarsInReserve;\r\n    }\r\n\r\n    function claimAvastar() public {\r\n        require(addressesFinalized == true);\r\n        require(amountClaimableByAddress[msg.sender] == 1);\r\n        \r\n        amountClaimableByAddress[msg.sender] = 0;\r\n        \r\n        uint256 avastarsInReserve = avastarsNFT.balanceOf(reserveAddress);\r\n\r\n        uint256 randomAvastarIndex = getRandomAvastar(avastarsInReserve); \r\n        \r\n        uint256 avastarToSend = avastarsNFT.tokenOfOwnerByIndex(reserveAddress, randomAvastarIndex);\r\n        \r\n        avastarsNFT.safeTransferFrom(reserveAddress, msg.sender, avastarToSend);\r\n    }\r\n    \r\n    function avastarsRemaining() public view returns (uint256 avastarsInReserveAccount) {\r\n        avastarsInReserveAccount = avastarsNFT.balanceOf(reserveAddress);\r\n    }\r\n    \r\n    function addCaller(address newCaller) public isOwner {\r\n        _approvedCaller.add(newCaller);\r\n    }\r\n    \r\n    function removeCaller(address newCaller) public isOwner {\r\n        _approvedCaller.remove(newCaller);\r\n    }    \r\n\r\n}","ABI":"[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newCaller\",\"type\":\"address\"}],\"name\":\"addCaller\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"avastarsRemaining\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"avastarsInReserveAccount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimAvastar\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"finalizeAddresses\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"attendee\",\"type\":\"address[]\"}],\"name\":\"pushAddresses\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newCaller\",\"type\":\"address\"}],\"name\":\"removeCaller\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"reserveAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"TerminusClaim","CompilerVersion":"v0.8.6+commit.11564f7e","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://3b19fd3bc6e166ae6d1ac5017cf1f48bdd25acf8900d0e7b72a40092342b39fb"}]}