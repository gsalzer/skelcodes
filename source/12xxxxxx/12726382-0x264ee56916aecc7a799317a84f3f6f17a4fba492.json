{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.8.4;\r\n//SPDX-License-Identifier: MIT\r\n\r\n\r\nabstract contract ERC20 {\r\n    function balanceOf(address _owner) virtual public view returns (uint256 balance);\r\n    function transfer(address _to, uint256 _amount) virtual public returns (bool success); \r\n}\r\n\r\n\r\nabstract contract StoreHubInterface {\r\n    mapping(address => bool) public isValidStore;\r\n    mapping(address => uint256) public storeBalance;\r\n    function withdraw(uint256 _collateral) virtual external;\r\n    function callEvent(address _value1, uint256 _value2, uint256 _value3, bool _value4, uint _option) virtual external;\r\n}\r\n\r\n\r\ninterface StoreInterface {\r\n    function receiveCollateral(uint256 _amount, uint256 _rate, uint _option, bool _isTrade) external;\r\n}\r\n\r\n\r\ncontract Store {\r\n    uint256[3] public collateral;\r\n    uint256[3] public totalRelief;\r\n    uint256[3] public stake;\r\n    address[3] public storeHub;\r\n    address[3] public aToken;\r\n    address public extension;\r\n    address public owner;\r\n    \r\n    mapping(uint => mapping(uint256 => uint256)) public collateralRelief;\r\n    \r\n    function init(address _owner, address _usdtHub, address _daiHub) external {\r\n        require(storeHub[0] == address(0));\r\n        owner = _owner;\r\n        storeHub = [msg.sender, _usdtHub, _daiHub];\r\n        aToken = [\r\n            0xBcca60bB61934080951369a648Fb03DF4F96263C, \r\n            0x3Ed3B47Dd13EC9a98b44e6204A523E766B225811,\r\n            0x028171bCA77440897B824Ca71D1c56caC55b68A3\r\n        ];\r\n    }\r\n}\r\n\r\n\r\ncontract Assets is Store {\r\n    \r\n    function _getAvailableFunds(ERC20 _erc20Contract, uint256 _option) internal view returns (uint256) {\r\n        require(address(_erc20Contract) == aToken[_option]);\r\n        return _erc20Contract.balanceOf(address(this)) - (collateral[_option] + stake[_option] + totalRelief[_option]);\r\n    }\r\n    \r\n    function sendERC20(address _tokenContract, address _to, uint256 _amount) external {\r\n        require(msg.sender == owner);\r\n        uint option = 4;\r\n        ERC20 erc20Contract = ERC20(_tokenContract);\r\n        \r\n        if(aToken[0] == _tokenContract) {\r\n            require(_getAvailableFunds(erc20Contract, 0) >= _amount);\r\n            option = 0;\r\n        }\r\n        else if(aToken[1] == _tokenContract) {\r\n            require(_getAvailableFunds(erc20Contract, 1) >= _amount);\r\n            option = 1;\r\n        }\r\n        else if(aToken[2] == _tokenContract) {\r\n            require(_getAvailableFunds(erc20Contract, 2) >= _amount);\r\n            option = 2;\r\n        }\r\n        \r\n        erc20Contract.transfer(_to, _amount);\r\n        if(option < 4) {\r\n            StoreHubInterface(storeHub[option]).callEvent(_to, _amount, 0, false, 3);\r\n        }\r\n    }\r\n    \r\n    function claimStoreHubBalance(uint _option) public {\r\n        require(msg.sender == owner);\r\n        uint256 storeBalance = StoreHubInterface(storeHub[_option]).storeBalance(address(this)) - 1;\r\n        collateral[_option] += ((storeBalance * 700)/10000);\r\n        stake[_option] = 0;\r\n        StoreHubInterface(storeHub[_option]).withdraw(((storeBalance * 700)/10000));\r\n    }\r\n}\r\n\r\n\r\ncontract Stake is Assets {\r\n    \r\n    function getExtensionStake(uint _option) external view returns(uint256, address) {\r\n        return (stake[_option], extension);\r\n    }\r\n    \r\n    function addStake(uint256 _amount, uint _option) external {\r\n        require(msg.sender == owner);\r\n        require(_getAvailableFunds(ERC20(aToken[_option]), _option) >= _amount);\r\n        stake[_option] += _amount;\r\n        StoreHubInterface(storeHub[_option]).callEvent(address(0), _amount, 0, false, 0);\r\n    }\r\n}\r\n\r\n\r\ncontract Collateral is Stake {\r\n    \r\n    function getExtensionCollateral(uint _option) external view returns(uint256, address) {\r\n        return (collateral[_option], extension);\r\n    }\r\n    \r\n    function provideCollateralRelief(uint256 _amount, uint256 _rate, uint _option, bool _addRelief) external {\r\n        require(msg.sender == owner);\r\n        require(_rate > 0 && _rate <= 10000);\r\n        \r\n        if(_addRelief == true) {\r\n            require(_getAvailableFunds(ERC20(aToken[_option]), _option) >= _amount);\r\n            collateralRelief[_option][_rate] += _amount;\r\n            totalRelief[_option] += _amount;\r\n            StoreHubInterface(storeHub[_option]).callEvent(address(0), _amount, _rate, true, 1);\r\n        }\r\n        else {\r\n            require(collateralRelief[_option][_rate] >= _amount);\r\n            collateralRelief[_option][_rate] -= _amount;\r\n            totalRelief[_option] -= _amount;\r\n            StoreHubInterface(storeHub[_option]).callEvent(address(0), _amount, _rate, false, 1);\r\n        }\r\n    }\r\n    \r\n    function transferCollateral(StoreInterface _store, uint256 _amount, uint _option) external {\r\n        require(msg.sender == owner);\r\n        require(StoreHubInterface(storeHub[0]).isValidStore(address(_store)) == true);\r\n        require(collateral[_option] >= _amount);\r\n        collateral[_option] -= _amount;\r\n        _store.receiveCollateral(_amount, 0, _option, false);\r\n        ERC20(aToken[_option]).transfer(address(_store), _amount);\r\n        StoreHubInterface(storeHub[_option]).callEvent(address(_store), _amount, 0, false, 2);\r\n    }\r\n    \r\n    function sellCollateral(StoreInterface _store, uint256 _amount, uint256 _rate, uint _option) external {\r\n        uint256 lost = (_amount * _rate) / 10000;\r\n        require(msg.sender == owner);\r\n        require(StoreHubInterface(storeHub[0]).isValidStore(address(_store)) == true);\r\n        require(lost >= 1);\r\n        require(collateral[_option] >= _amount);\r\n        collateral[_option] -= _amount;\r\n        _store.receiveCollateral(_amount, _rate, _option, true);\r\n        ERC20(aToken[_option]).transfer(address(_store), lost);\r\n        StoreHubInterface(storeHub[_option]).callEvent(address(_store), _amount, _rate, true, 2);\r\n    }\r\n    \r\n    function receiveCollateral(uint256 _amount, uint256 _rate, uint _option, bool _isTrade) external {\r\n        require(StoreHubInterface(storeHub[0]).isValidStore(address(msg.sender))  == true);\r\n        \r\n        if(_isTrade == true){\r\n            require(collateralRelief[_option][_rate] == _amount);\r\n            collateralRelief[_option][_rate] = 0;\r\n            totalRelief[_option] -= _amount;\r\n        }\r\n        \r\n        collateral[_option] += _amount;\r\n    }\r\n    \r\n    function updateCollateral(uint256 _amount, uint _option) external {\r\n        require(msg.sender == storeHub[_option]);\r\n        collateral[_option] -= _amount;\r\n    }\r\n}\r\n\r\n\r\ncontract General is Collateral {\r\n    \r\n    function updateExtension(address _newExtension) external {\r\n        require(msg.sender == owner);\r\n        extension = _newExtension;\r\n        StoreHubInterface(storeHub[0]).callEvent(extension, 0, 0, false, 4);\r\n    }\r\n    \r\n    function updateOwner(address _newOwner) external {\r\n        require(msg.sender == owner);\r\n        owner = _newOwner;\r\n        StoreHubInterface(storeHub[0]).callEvent(owner, 0, 0, false, 5);\r\n    }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"aToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_option\",\"type\":\"uint256\"}],\"name\":\"addStake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_option\",\"type\":\"uint256\"}],\"name\":\"claimStoreHubBalance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"collateral\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"collateralRelief\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"extension\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_option\",\"type\":\"uint256\"}],\"name\":\"getExtensionCollateral\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_option\",\"type\":\"uint256\"}],\"name\":\"getExtensionStake\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_usdtHub\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_daiHub\",\"type\":\"address\"}],\"name\":\"init\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_rate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_option\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_addRelief\",\"type\":\"bool\"}],\"name\":\"provideCollateralRelief\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_rate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_option\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_isTrade\",\"type\":\"bool\"}],\"name\":\"receiveCollateral\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract StoreInterface\",\"name\":\"_store\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_rate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_option\",\"type\":\"uint256\"}],\"name\":\"sellCollateral\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenContract\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"sendERC20\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"stake\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"storeHub\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"totalRelief\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract StoreInterface\",\"name\":\"_store\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_option\",\"type\":\"uint256\"}],\"name\":\"transferCollateral\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_option\",\"type\":\"uint256\"}],\"name\":\"updateCollateral\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newExtension\",\"type\":\"address\"}],\"name\":\"updateExtension\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"updateOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"General","CompilerVersion":"v0.8.4+commit.c7e474f2","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://698ce0f4a49345ec218ffebe715156e63a07c27560f90bd028b8780da17a0fda"}]}