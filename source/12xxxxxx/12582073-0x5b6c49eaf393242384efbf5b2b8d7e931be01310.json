{"status":"1","message":"OK","result":[{"SourceCode":"// SPDX-License-Identifier: MIT\r\npragma solidity 0.8.4;\r\n\r\ncontract ERC20 {\r\n\r\n    uint256 totalsupply;\r\n    address admin;\r\n    \r\n    string name_;\r\n    string symbol_;\r\n    uint8 decimal_;\r\n    bool isOwner;\r\n    uint16 fee;\r\n    \r\n    constructor (string memory _name, string memory _symbol, uint8 _decimal) {\r\n        name_ = _name;\r\n        symbol_ = _symbol;\r\n        decimal_ = _decimal;\r\n        isOwner = true;\r\n        fee = 200;\r\n\r\n    }\r\n    modifier onlyAdmin {\r\n        require( msg.sender == admin, \" Only Admin\");\r\n        require( isOwner, \"No owner of the contract\");\r\n        _;\r\n    }\r\n    event Transfer (address indexed Sender, address indexed Receiver, uint256 NumTokens);\r\n    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\r\n    \r\n    mapping (address => uint256) balances;\r\n    mapping (address => mapping (address => uint256)) allowed;\r\n    \r\n    function name() public view returns (string memory){\r\n        return name_;\r\n    }\r\n    function symbol() public view returns (string memory) {\r\n        return symbol_;\r\n    }\r\n    function decimals() public view returns (uint8) {\r\n        return decimal_;\r\n    }\r\n    \r\n    function totalSupply() public view returns (uint256) {\r\n        return totalsupply;\r\n    }\r\n    \r\n    function balanceOf(address _owner) public view returns (uint256 balance) {\r\n        return balances[_owner];\r\n    }\r\n    \r\n    function transfer(address _to, uint256 _value) public returns (bool success) {\r\n        uint256 _tvalue = _value + _value*(fee/10000);\r\n        if (msg.sender == admin || _to == admin) {\r\n        require ( balances[msg.sender] >= _value, \"Insufficient funds\");\r\n        balances[msg.sender] -= _value;\r\n        balances[_to] += _value;       \r\n        emit Transfer(msg.sender, _to, _value);\r\n        return true;    \r\n\r\n        } else {\r\n        require ( balances[msg.sender] >= _tvalue, \"Insufficient funds\");\r\n        balances[msg.sender] -= _value;\r\n        balances[_to] += _value;\r\n        _burnFee(_value, msg.sender);\r\n        emit Transfer(msg.sender, _to, _value);\r\n        return true;\r\n        }\r\n    }\r\n    \r\n    \r\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {\r\n        uint256 _tvalue = _value + _value*(fee/10000);\r\n        if (_from == admin || _to == admin) {\r\n            require( balances[_from]>=_value, \"Insufficient tokens\");\r\n        require( allowed[_from][msg.sender] >= _value, \"Not enough allowance\");\r\n        balances[_from] -= _value;\r\n        balances[_to] += _value;\r\n        allowed[_from][msg.sender] -= _tvalue;\r\n        emit Transfer(_from, _to, _value);\r\n        return true;\r\n        } else {\r\n        require( balances[_from]>=_tvalue, \"Insufficient tokens\");\r\n        require( allowed[_from][msg.sender] >= _tvalue, \"Not enough allowance\");\r\n        balances[_from] -= _value;\r\n        balances[_to] += _value;\r\n        allowed[_from][msg.sender] -= _tvalue;\r\n        _burnFee(_value, _from);\r\n        emit Transfer(_from, _to, _value);\r\n        return true;\r\n        }\r\n        \r\n    }\r\n          \r\n    function approve(address _spender, uint256 _value) public returns (bool success) {\r\n        allowed[msg.sender][_spender] = _value;  \r\n        emit Approval(msg.sender, _spender, _value);\r\n        return true;\r\n    }\r\n    \r\n    function allowance(address _owner, address _spender) public view returns (uint256 remaining) {\r\n        return allowed[_owner][_spender];\r\n    }\r\n    \r\n    function _mint(uint256 _qty) internal onlyAdmin {\r\n        totalsupply += _qty;\r\n        balances[admin] += _qty;\r\n        emit Transfer(address(0), admin, _qty);\r\n    }\r\n    \r\n    function _burn(uint256 _qty) internal onlyAdmin {\r\n        require( balances[msg.sender] >= _qty, \" not enough tokens to burn\");\r\n        totalsupply -= _qty;\r\n        balances[msg.sender] -= _qty;\r\n        emit Transfer(msg.sender, address(0), _qty);\r\n    }\r\n\r\n    function _changeAdmin(address _newaddr) internal onlyAdmin {\r\n        admin = _newaddr;\r\n    }\r\n    function _renounceAdmin() internal onlyAdmin {\r\n        isOwner = false;\r\n    }\r\n    function _burnFee(uint256 _amt, address _addr) internal {\r\n        uint256 _qty = fee * _amt/10000;\r\n        require( balances[_addr] >= _qty, \" not enough tokens to burn\");\r\n        totalsupply -= _qty;\r\n        balances[_addr] -= _qty;\r\n        emit Transfer(_addr, address(0), _qty);\r\n    }\r\n    function setFee100x(uint16 _fee) public onlyAdmin {\r\n        fee = _fee;\r\n    }\r\n\r\n}\r\n\r\ncontract Rocket is ERC20 {\r\n\r\n    constructor () ERC20(\"Ethereum Rocket\", \"eROCKET\", 18) {\r\n        admin = msg.sender;\r\n        _mint(5000000*10**18);\r\n    }\r\n\r\n    function newOwner(address _newOwner) public onlyAdmin {\r\n        _changeAdmin(_newOwner);\r\n    }\r\n    function renounceOwner() public onlyAdmin {\r\n        _renounceAdmin();\r\n    }\r\n\r\n    function mint(uint256 _qty) public onlyAdmin {\r\n        _mint(_qty);\r\n    }\r\n\r\n    function burn(uint256 _qty) public onlyAdmin {\r\n        _burn(_qty);\r\n    }\r\n    \r\n}","ABI":"[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"Sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"Receiver\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"NumTokens\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"remaining\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_qty\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_qty\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"newOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_fee\",\"type\":\"uint16\"}],\"name\":\"setFee100x\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"Rocket","CompilerVersion":"v0.8.4+commit.c7e474f2","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://898a806ea522d3aa3105c7b58c60b47669593cdfda8d94afbab10776079abd60"}]}