{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"/Users/tudorg/Desktop/projects/botocean/dapp-contracts-LAUNCH-NO-GITHUB/contracts/fund/FundLogic.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.12;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"./../utils/Address.sol\\\";\\nimport \\\"./../utils/SafeMath.sol\\\";\\nimport \\\"./../utils/ERC20.sol\\\";\\nimport \\\"./../utils/SafeERC20.sol\\\";\\nimport \\\"./../oracle/AssetOracle.sol\\\";\\nimport \\\"./utils/FundShares.sol\\\";\\nimport \\\"./FundLibrary.sol\\\";\\nimport \\\"./FundDeployer.sol\\\";\\nimport \\\"./../interfaces/IParaswapAugustus.sol\\\";\\n\\ncontract FundLogic is FundShares, FundLibrary{\\n    using Address for address;\\n    using SafeMath for uint256;\\n    using SafeERC20 for ERC20;\\n\\n    address public deployer;\\n    address public manager;\\n    address public oracle;\\n\\n    string public fundName;\\n    string public managerName;\\n\\n    uint256 public constant MAX_ASSETS = 20;\\n\\n    mapping(address => uint256) private arbSender;\\n    mapping(address => uint256) private arbOrigin;\\n\\n    address public depositAsset;\\n    uint8 public depositAssetDecimals;\\n    address[] public activeAssets;\\n    mapping(address => bool) public isActiveAsset;\\n\\n    bool private wasInitialized = false;\\n    bool private firstDeposit;\\n    bool public managerFeesEnabled;\\n\\n    uint256 public sharePriceLastFee;\\n    uint256 public timeLastFee;\\n    uint256 public PERFORMANCE_FEE;\\n\\n    address public buybackVault;\\n\\n    address public PARASWAP_TOKEN_PROXY;\\n    address public PARASWAP_AUGUSTUS;\\n\\n    uint256 public minDeposit;\\n    uint256 public maxDeposit;\\n\\n    modifier onlyManager() {\\n        require(msg.sender == manager, \\\"Unauthorized: Only manager\\\");\\n        _;\\n    }\\n\\n    modifier arbProtection() {\\n        require(arbSender[msg.sender] != block.number, \\\"ARB PROTECTION: msg.sender\\\");\\n        require(arbOrigin[tx.origin] != block.number, \\\"ARB PROTECTION: tx.origin\\\");\\n        arbSender[msg.sender] = block.number;\\n        arbOrigin[tx.origin] = block.number;\\n        _;\\n    }\\n\\n    modifier onlyProxy() {\\n        bool _genesisFlag;\\n        assembly {\\n            // solium-disable-line\\n            _genesisFlag := sload(0xa7e8032f370433e2cd75389d33b731b61bee456da1b0f7117f2621cbd1fdcf7a)\\n        }\\n        require(_genesisFlag == true, \\\"Genesis Logic: Only callable by proxy\\\");\\n        _;\\n    }\\n\\n    modifier depositLimit(uint256 _amount) {\\n        if(minDeposit > 0) {\\n            require(_amount > minDeposit, \\\"Deposit too small\\\");\\n        }\\n\\n        if(maxDeposit > 0) {\\n            require(_amount < maxDeposit, \\\"Deposit too big\\\");\\n        }\\n\\n        _;\\n    }\\n\\n    function init(\\n        address _oracle,\\n        address _deployer,\\n        address _manager,\\n        string memory _fundName,\\n        string memory _managerName,\\n        address _depositAsset,\\n        uint256 _performanceFee,\\n        address _paraswapProxy,\\n        address _paraswapAugustus,\\n        address _bbvault,\\n        uint256 _min,\\n        uint256 _max\\n    ) public onlyProxy{\\n        require(!wasInitialized, \\\"Fund already initialized\\\");\\n        require(_performanceFee <= 10000, \\\"Performance fee too big\\\");\\n        wasInitialized = true;\\n\\n        oracle = _oracle;\\n        deployer = _deployer;\\n        manager = _manager;\\n        fundName = _fundName;\\n        managerName = _managerName;\\n\\n        _addActiveAsset(_depositAsset);\\n        depositAsset = _depositAsset;\\n        depositAssetDecimals = uint8(ERC20(depositAsset).decimals()); // For USDT's non ERC20 compliant functions\\n\\n        firstDeposit = false;\\n        timeLastFee = 0;\\n        PERFORMANCE_FEE = _performanceFee;\\n        managerFeesEnabled = true;\\n\\n        PARASWAP_TOKEN_PROXY = _paraswapProxy;\\n        PARASWAP_AUGUSTUS = _paraswapAugustus;\\n\\n        buybackVault = _bbvault;\\n\\n        minDeposit = _min;\\n        maxDeposit = _max;\\n\\n        _initializeShares(\\\"BotOcean Fund\\\", \\\"BOF\\\");\\n    }\\n\\n    function getManager() external view returns (address) {\\n        return manager;\\n    }\\n\\n    function getName() external view returns (string memory) {\\n        return fundName;\\n    }\\n\\n    function getManagerName() external view returns (string memory) {\\n        return managerName;\\n    }\\n\\n    function getBuybackFee() external view returns (uint256,uint256) {\\n        return FundDeployer(deployer).getBuybackFee();\\n    }\\n\\n    function getVersion() external pure returns (string memory) {\\n        return \\\"v1.0\\\";\\n    }\\n\\n    function getIsActiveAsset(address _asset) external view returns (bool) {\\n        return isActiveAsset[_asset];\\n    }\\n\\n    function getActiveAssetsLength() external view returns (uint) {\\n        return activeAssets.length;\\n    }\\n\\n    // Only Manager can call this function to get new paraswap addresses\\n    // They are fetched from the FundDeployer\\n    // Migrations are not \\\"automatic\\\" to prevent the FundDeployer's owner ability to create\\n    // a fake ParaSwap contract and steal funds\\n    function upgradeParaswap() external onlyManager {\\n        (address _aug, address _proxy) = FundDeployer(deployer).getParaswapAddresses();\\n\\n        emit ParaswapUpgrade(\\n            PARASWAP_TOKEN_PROXY,\\n            PARASWAP_AUGUSTUS,\\n            _proxy,\\n            _aug\\n        );\\n\\n        PARASWAP_AUGUSTUS = _aug;\\n        PARASWAP_TOKEN_PROXY = _proxy;\\n    }\\n\\n    // Only Manager can call this function to get new buyback addresse\\n    // They are fetched from the FundDeployer\\n    // Migrations are not \\\"automatic\\\" to prevent the FundDeployer's owner ability to create\\n    // a fake buyback contract and steal funds\\n    function upgradeBuyBackVault() external onlyManager {\\n        address _newVault = FundDeployer(deployer).getBuybackVault();\\n        emit BuybackVaultUpgrade(\\n            buybackVault,\\n            _newVault\\n        );\\n        buybackVault = _newVault;\\n    }\\n\\n    // Only Manager can call this function to get new oracle addresse\\n    // They are fetched from the FundDeployer\\n    // Migrations are not \\\"automatic\\\" to prevent the FundDeployer's owner ability to create\\n    // a fake oracle contract and steal funds\\n    function upgradeOracle() external onlyManager {\\n        address _newOracle = FundDeployer(deployer).getOracle();\\n        emit OracleUpgrade(\\n            oracle,\\n            _newOracle\\n        );\\n        oracle = _newOracle;\\n    }\\n\\n    function changeManager(address _manager, string memory _managerName) external onlyManager {\\n        emit ManagerUpdated(manager, managerName, _manager, _managerName);\\n        manager = _manager;\\n        managerName = _managerName;\\n    }\\n\\n    // Sefety function for disabling manager fees in case of emergency withdrawls\\n    // Manager should only set this to false if _settleFees() fails\\n    function setManagerFeeEnabled(bool _newStatus) external onlyManager {\\n        managerFeesEnabled = _newStatus;\\n    }\\n\\n    function addActiveAsset(address _asset) external onlyManager {\\n        _addActiveAsset(_asset);\\n    }\\n\\n    function removeActiveAsset(address _asset) external onlyManager {\\n        address _tempDA  = depositAsset;\\n        require(_asset != _tempDA, \\\"deposit asset\\\");\\n        _removeActiveAsset(_asset);\\n        emit AssetRemoved(_asset);\\n    }\\n\\n    function changeDepositLimits(uint256 _minD, uint256 _maxD) external onlyManager {\\n        minDeposit = _minD;\\n        maxDeposit = _maxD;\\n    }\\n\\n    function changeMinDeposit(uint256 _minDeposit) external onlyManager {\\n        minDeposit = _minDeposit;\\n    }\\n\\n    function changeMaxDeposit(uint256 _maxDeposit) external onlyManager {\\n        maxDeposit = _maxDeposit;\\n    }\\n\\n    function _addActiveAsset(address _asset) internal {\\n        if(!isActiveAsset[_asset]){\\n            require(AssetOracle(oracle).isSupportedAsset(_asset), \\\"Asset not supported\\\");\\n            require(activeAssets.length < MAX_ASSETS, \\\"Max assets reached\\\");\\n            activeAssets.push(_asset);\\n            isActiveAsset[_asset] = true;\\n            emit AssetAdded(_asset);\\n        }\\n    }\\n\\n    function _removeActiveAsset(address _asset) internal {\\n        if(isActiveAsset[_asset]) {\\n            require(ERC20(_asset).balanceOf(address(this)) <= 100, \\\"Cannot remove asset with balance\\\");\\n\\n            isActiveAsset[_asset] = false;\\n            uint256 _length = activeAssets.length;\\n            for (uint256 i = 0; i < _length; i++) {\\n                if (activeAssets[i] == _asset) {\\n                    if (i < _length - 1) {\\n                        activeAssets[i] = activeAssets[_length - 1];\\n                    }\\n                    activeAssets.pop();\\n                    break;\\n                }\\n            }\\n        }\\n    }\\n\\n    function _getAssetsBalances() internal view returns (uint256[] memory) {\\n        uint256 _length = activeAssets.length;\\n        uint256[] memory _bal = new uint256[](_length);\\n        for (uint256 i = 0; i < _length; i++) {\\n            _bal[i] = (ERC20(activeAssets[i]).balanceOf(address(this)));\\n        }\\n        \\n        return _bal;\\n    }\\n\\n    function totalValueUSD() public view returns (uint256) {\\n        uint256[] memory _balances = _getAssetsBalances();\\n        uint256 _aumUSD = AssetOracle(oracle).aum(activeAssets, _balances);\\n        return _aumUSD;\\n    }\\n\\n    function totalValueDepositAsset() public view returns (uint256) {\\n        uint256[] memory _balances = _getAssetsBalances();\\n        uint256 _aumDepositAsset = AssetOracle(oracle).aumDepositAsset(depositAsset, activeAssets, _balances);\\n        return _aumDepositAsset;\\n    }\\n\\n    function sharePriceUSD() public view returns (uint256) {\\n        uint256 _valueUSD = totalValueUSD(); // 8 decimals\\n        uint256 _totalSupply = totalSupply(); // 18 decimals\\n\\n        if(_valueUSD == 0 || _totalSupply == 0) {\\n            return 0;\\n        }\\n\\n        return _valueUSD.mul(1e18).div(_totalSupply);\\n    }\\n\\n    function deposit(uint256 _amount) external onlyProxy arbProtection depositLimit(_amount) returns (uint256){\\n        // Dont't mint fees on first deposit since we do not know the share of a price\\n        if(firstDeposit){\\n            _settleFees();\\n        }\\n\\n        uint256 depositAssetValue = totalValueDepositAsset();\\n        uint256 totalShares = totalSupply();\\n\\n        uint256 _balBefore = ERC20(depositAsset).balanceOf(address(this));\\n        ERC20(depositAsset).safeTransferFrom(msg.sender, address(this), _amount);\\n        uint256 _balAfter = ERC20(depositAsset).balanceOf(address(this));\\n\\n        // Extra protection\\n        require(_balAfter.sub(_balBefore) >= _amount, \\\"Incorrect deposit transfer amount\\\");\\n\\n        uint256 sharesToMint;\\n        // Deposit asset ranges from 0-18 decimals. Shares are always 18 decimals.\\n        // This does the conversion\\n        // AUDIT: VERY VERY IMPORTANT TO CHECK IF EVERYTHING IS RIGHT\\n        if(totalShares == 0){\\n            sharesToMint = _amount.mul(1e18);\\n            sharesToMint = sharesToMint.div(10**uint256(depositAssetDecimals));\\n        } else {\\n            uint256 _amount18 = _amount.mul(1e18);\\n            _amount18 = _amount18.div(10**uint256(depositAssetDecimals));\\n            uint256 _value18 = depositAssetValue.mul(1e18);\\n            _value18 = _value18.div(10**uint256(depositAssetDecimals));\\n            sharesToMint = _amount18.mul(totalShares).div(_value18);\\n        }\\n\\n        _mint(msg.sender, sharesToMint);\\n\\n        if(!firstDeposit){\\n            firstDeposit = true;\\n            sharePriceLastFee = sharePriceUSD();\\n        }\\n\\n        emit Deposit(\\n            msg.sender,\\n            _amount,\\n            sharesToMint,\\n            sharePriceUSD(),\\n            block.timestamp\\n        );\\n\\n        return sharesToMint;\\n    }\\n\\n    function withdraw(uint256 _sharesAmount) external onlyProxy arbProtection {\\n        require(balanceOf(msg.sender) >= _sharesAmount, \\\"Not enough shares\\\");\\n\\n        // Dont't mint fees on first deposit since we do not know the share of a price\\n        if(firstDeposit){\\n            _settleFees();\\n        }\\n\\n        // Deposit asset ranges from 0-18 decimals. Shares are always 18 decimals.\\n        // This does the conversion\\n        // AUDIT: VERY VERY IMPORTANT TO CHECK IF EVERYTHING IS RIGHT\\n        uint256 _ownership = _sharesAmount.mul(1e18).div(totalSupply());\\n\\n        _burn(msg.sender, _sharesAmount);\\n\\n        uint256 _length = activeAssets.length;\\n        for(uint256 i = 0; i < _length; i++) {\\n            uint256 _totalBal = ERC20(activeAssets[i]).balanceOf(address(this));\\n            // Deposit asset ranges from 0-18 decimals. Shares are always 18 decimals.\\n            // This does the conversion\\n            // AUDIT: VERY VERY IMPORTANT TO CHECK IF EVERYTHING IS RIGHT\\n            uint256 _withdrawAmount = _totalBal.mul(_ownership).div(1e18);\\n\\n            if(_withdrawAmount > 0) {\\n                ERC20(activeAssets[i]).safeTransfer(msg.sender, _withdrawAmount);\\n            }               \\n        }\\n\\n        emit Withdraw(\\n            msg.sender,\\n            _sharesAmount,\\n            sharePriceUSD(),\\n            block.timestamp\\n        );\\n    }\\n\\n    function _swap(address _src, address _dst, uint256 _amount, uint256 _toAmount, uint256 _expectedAmount, IParaswapAugustus.Path[] memory _path) internal returns (uint256){\\n        require(ERC20(_src).balanceOf(address(this)) >= _amount, \\\"Not enough tokens\\\");\\n        uint256 _before = ERC20(_dst).balanceOf(address(this));\\n        // TODO: SWAP\\n        ERC20(_src).safeApprove(PARASWAP_TOKEN_PROXY, 0);\\n        ERC20(_src).safeApprove(PARASWAP_TOKEN_PROXY, _amount);\\n\\n        IParaswapAugustus.SellData memory swapData = IParaswapAugustus.SellData({\\n            fromToken: _src,\\n            fromAmount: _amount,\\n            toAmount: _toAmount,\\n            expectedAmount: _expectedAmount,\\n            beneficiary: payable(address(this)),\\n            referrer: \\\"BOTOCEAN\\\",\\n            useReduxToken: false,\\n            path: _path\\n        });\\n\\n        IParaswapAugustus(PARASWAP_AUGUSTUS).multiSwap(swapData);\\n\\n        uint256 _after = ERC20(_dst).balanceOf(address(this));\\n\\n        emit Swap(\\n            _src,\\n            _dst,\\n            _amount,\\n            _after.sub(_before),\\n            block.timestamp\\n        );\\n\\n        return _after.sub(_before);\\n    }\\n\\n    // The path will be made available from Paraswap's param transaction builder API.\\n    function swap(address _src, address _dst, uint256 _amount, uint256 _toAmount, uint256 _expectedAmount, IParaswapAugustus.Path[] memory _path) external onlyManager {\\n        require(_src != _dst, \\\"same asset\\\");\\n        require(isActiveAsset[_src], \\\"Unknown asset\\\");\\n        if(!isActiveAsset[_dst]) {\\n            _addActiveAsset(_dst);\\n        }\\n        uint256 _swapAmount = _amount;\\n        uint256 _myBal = ERC20(_src).balanceOf(address(this));\\n        if(_myBal < _swapAmount) {\\n            _swapAmount = _myBal;\\n        }\\n\\n        // Other Checks\\n\\n        // Swap\\n        _swap(_src, _dst, _swapAmount, _toAmount, _expectedAmount, _path);\\n    }\\n\\n    function _settleFees() internal {\\n        if(managerFeesEnabled && PERFORMANCE_FEE > 0){\\n            uint256 feeWaitTime = FundDeployer(deployer).getFeeWaitPeriod();\\n            uint256 _currentSharePrice = sharePriceUSD();\\n            uint256 _totalSupply = totalSupply();\\n\\n            uint256 _buybackFee;\\n            uint256 _buybackFeeMax;\\n            (_buybackFee, _buybackFeeMax) = FundDeployer(deployer).getBuybackFee();\\n\\n            if(timeLastFee.add(feeWaitTime) > block.timestamp) {\\n                return;\\n            }\\n\\n            if(_currentSharePrice == 0 || _currentSharePrice < sharePriceLastFee) {\\n                return;\\n            }\\n\\n            // Calculate fees\\n            uint256 profitUSD = _currentSharePrice.sub(sharePriceLastFee).mul(_totalSupply).div(1e18);\\n            if(profitUSD < 100000) { // If profit smaller than $0.001, don't mint fees\\n                return;\\n            }\\n            uint256 managerFeeUSD = profitUSD.mul(PERFORMANCE_FEE).div(10000);\\n            uint256 managerFeeShares = managerFeeUSD.mul(1e18).div(_currentSharePrice);\\n            uint256 buybackShares = managerFeeShares.mul(_buybackFee).div(_buybackFeeMax);\\n            managerFeeShares = managerFeeShares.sub(buybackShares);\\n\\n            // Mint fees\\n            _mint(buybackVault, buybackShares);\\n            _mint(manager, managerFeeShares);\\n\\n            // Emit event\\n            uint256 newSharePrice = sharePriceUSD();\\n            emit FeeMinted(\\n                sharePriceLastFee,\\n                newSharePrice,\\n                profitUSD,\\n                buybackShares,\\n                managerFeeShares,\\n                block.timestamp\\n            );\\n\\n            // Update values\\n            sharePriceLastFee = newSharePrice;\\n            timeLastFee = block.timestamp;\\n        }\\n    }\\n\\n    function settleFees() external onlyManager {\\n        require(firstDeposit, \\\"Cannot mint fees before first deposit\\\");\\n        _settleFees();\\n    }\\n\\n    function getFundLogic() public view returns (address) {\\n        address _impl;\\n        assembly {\\n            // solium-disable-line\\n            _impl := sload(0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc)\\n        }\\n\\n        return _impl;\\n    }\\n}\"\r\n    },\r\n    \"/Users/tudorg/Desktop/projects/botocean/dapp-contracts-LAUNCH-NO-GITHUB/contracts/utils/SafeMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.12;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return sub(a, b, \\\"SafeMath: subtraction overflow\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        uint256 c = a - b;\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        uint256 c = a / b;\\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return mod(a, b, \\\"SafeMath: modulo by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts with custom message when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b != 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\"\r\n    },\r\n    \"/Users/tudorg/Desktop/projects/botocean/dapp-contracts-LAUNCH-NO-GITHUB/contracts/utils/SafeERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.12;\\n\\nimport \\\"../interfaces/IERC20.sol\\\";\\nimport \\\"./SafeMath.sol\\\";\\nimport \\\"./Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using SafeMath for uint256;\\n    using Address for address;\\n\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        // solhint-disable-next-line max-line-length\\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \\\"SafeERC20: decreased allowance below zero\\\");\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) { // Return data is optional\\n            // solhint-disable-next-line max-line-length\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"/Users/tudorg/Desktop/projects/botocean/dapp-contracts-LAUNCH-NO-GITHUB/contracts/utils/ERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.12;\\n\\nimport \\\"./Context.sol\\\";\\nimport \\\"../interfaces/IERC20.sol\\\";\\nimport \\\"./SafeMath.sol\\\";\\nimport \\\"./Address.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin guidelines: functions revert instead\\n * of returning `false` on failure. This behavior is nonetheless conventional\\n * and does not conflict with the expectations of ERC20 applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20 {\\n    using SafeMath for uint256;\\n    using Address for address;\\n\\n    mapping (address => uint256) private _balances;\\n\\n    mapping (address => mapping (address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n    uint8 private _decimals;\\n\\n    address public owner;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}, initializes {decimals} with\\n     * a default value of 18.\\n     *\\n     * To select a different value for {decimals}, use {_setupDecimals}.\\n     *\\n     * All three of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor (string memory name, string memory symbol) public {\\n        _name = name;\\n        _symbol = symbol;\\n        _decimals = 18;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is\\n     * called.\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view returns (uint8) {\\n        return _decimals;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `recipient` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(_msgSender(), recipient, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address _owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[_owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        _approve(_msgSender(), spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20};\\n     *\\n     * Requirements:\\n     * - `sender` and `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``sender``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(sender, recipient, amount);\\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \\\"ERC20: transfer amount exceeds allowance\\\"));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \\\"ERC20: decreased allowance below zero\\\"));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\\n     *\\n     * This is internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` cannot be the zero address.\\n     * - `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     */\\n    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\\n        require(sender != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(recipient != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(sender, recipient, amount);\\n\\n        _balances[sender] = _balances[sender].sub(amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        _balances[recipient] = _balances[recipient].add(amount);\\n        emit Transfer(sender, recipient, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements\\n     *\\n     * - `to` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply = _totalSupply.add(amount);\\n        _balances[account] = _balances[account].add(amount);\\n        emit Transfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        _balances[account] = _balances[account].sub(amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        _totalSupply = _totalSupply.sub(amount);\\n        emit Transfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(address _owner, address spender, uint256 amount) internal virtual {\\n        require(_owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[_owner][spender] = amount;\\n        emit Approval(_owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Sets {decimals} to a value other than the default one of 18.\\n     *\\n     * WARNING: This function should only be called from the constructor. Most\\n     * applications that interact with token contracts will not expect\\n     * {decimals} to ever change, and may work incorrectly if it does.\\n     */\\n    function _setupDecimals(uint8 decimals_) internal {\\n        _decimals = decimals_;\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be to transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual { }\\n}\\n\"\r\n    },\r\n    \"/Users/tudorg/Desktop/projects/botocean/dapp-contracts-LAUNCH-NO-GITHUB/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.12;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"/Users/tudorg/Desktop/projects/botocean/dapp-contracts-LAUNCH-NO-GITHUB/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.12;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies in extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return _functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        return _functionCallWithValue(target, data, value, errorMessage);\\n    }\\n\\n    function _functionCallWithValue(address target, bytes memory data, uint256 weiValue, string memory errorMessage) private returns (bytes memory) {\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: weiValue }(data);\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"/Users/tudorg/Desktop/projects/botocean/dapp-contracts-LAUNCH-NO-GITHUB/contracts/oracle/chainlink/AggregatorV3Interface.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.6.12;\\n\\ninterface AggregatorV3Interface {\\n\\n  function decimals()\\n    external\\n    view\\n    returns (\\n      uint8\\n    );\\n\\n  function description()\\n    external\\n    view\\n    returns (\\n      string memory\\n    );\\n\\n  function version()\\n    external\\n    view\\n    returns (\\n      uint256\\n    );\\n\\n  // getRoundData and latestRoundData should both raise \\\"No data present\\\"\\n  // if they do not have data to report, instead of returning unset values\\n  // which could be misinterpreted as actual reported values.\\n  function getRoundData(\\n    uint80 _roundId\\n  )\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n\\n  function latestRoundData()\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n\\n}\"\r\n    },\r\n    \"/Users/tudorg/Desktop/projects/botocean/dapp-contracts-LAUNCH-NO-GITHUB/contracts/oracle/AssetOracle.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.12;\\n\\nimport \\\"./../utils/Address.sol\\\";\\nimport \\\"./../utils/SafeMath.sol\\\";\\nimport \\\"./../utils/ERC20.sol\\\";\\nimport \\\"./chainlink/AggregatorV3Interface.sol\\\";\\n\\ncontract AssetOracle {\\n    using SafeMath for uint256;\\n    using Address for address;\\n\\n    address public owner;\\n\\n    mapping(address => address) private assetTokenFeed;\\n    address[] public supportedAssets;\\n\\n    modifier onlyOwner {\\n        require(msg.sender == owner, \\\"Unauthorized: owner only\\\");\\n        _;\\n    }\\n\\n    constructor() public {\\n        owner = msg.sender;\\n    }\\n\\n    function getOwner() external view returns (address) {\\n        return owner;\\n    }\\n\\n    function isSupportedAsset(address _asset) external view returns (bool) {\\n        return assetTokenFeed[_asset] != address(0);\\n    }\\n\\n    function changeOwner(address _newOwner) external onlyOwner {\\n        owner = _newOwner;\\n    }\\n\\n    function _addSupportedAsset(address _asset, address _priceFeed) internal {\\n        uint8 _decs = AggregatorV3Interface(_priceFeed).decimals();\\n        // If decimals is not 8, price calculation vuln will occur\\n        require(_decs == 8, \\\"Not USD feed\\\");\\n\\n        uint8 _ercDecs = ERC20(_asset).decimals();\\n        require(_ercDecs <= 18, \\\"Logic not implemented for assets with decimals > 18\\\");\\n        assetTokenFeed[_asset] = _priceFeed;\\n        supportedAssets.push(_asset);\\n    }\\n\\n    function addSupportedAssets(address[] memory _assets, address[] memory _priceFeeds) external onlyOwner {\\n        require(_assets.length == _priceFeeds.length, \\\"Not equal arrays\\\");\\n        uint256 _length = _assets.length;\\n\\n        for(uint256 i = 0; i < _length; i++) {\\n            _addSupportedAsset(_assets[i], _priceFeeds[i]);\\n        }\\n    }\\n\\n    // Returns USD value of asset with 8 decimals\\n    function _assetValue(address _asset, uint256 _amount) internal view returns (uint256) {\\n        if(assetTokenFeed[_asset] == address(0)) {\\n            // Safe fail for unknown assets\\n            return 0;\\n        }\\n        (, int price, , ,) = AggregatorV3Interface(assetTokenFeed[_asset]).latestRoundData();\\n        uint8 assetDecimals = ERC20(_asset).decimals();\\n        uint256 finalValue = uint256(price).mul(_amount).div(10**uint256(assetDecimals));\\n        return finalValue;\\n    }\\n\\n    function assetValue(address _asset, uint256 _amount) external view returns (uint256) {\\n        return _assetValue(_asset, _amount);\\n    }\\n\\n    function aum(address[] memory _assets, uint256[] memory _amounts) public view returns (uint256) {\\n        require(_assets.length == _amounts.length, \\\"Not equal arrays\\\");\\n        uint256 _length = _assets.length;\\n\\n        uint256 _aum = 0;\\n        for(uint256 i = 0; i < _length; i++) {\\n            _aum = _aum.add(_assetValue(_assets[i], _amounts[i]));\\n        }\\n\\n        return _aum;\\n    }\\n\\n    function aumDepositAsset(address _depositAsset, address[] memory _assets, uint256[] memory _amounts) external view returns (uint256) {\\n        if(assetTokenFeed[_depositAsset] == address(0)) {\\n            // Safe fail for unknown assets\\n            return 0;\\n        }\\n\\n        uint256 _aumUSD = aum(_assets, _amounts); // 8 decimals\\n        (, int price, , ,) = AggregatorV3Interface(assetTokenFeed[_depositAsset]).latestRoundData(); // 8 decimals\\n        uint8 _decimalsDepositAsset = ERC20(_depositAsset).decimals();\\n        uint256 _aumDepositAsset = _aumUSD.mul(10**uint256(_decimalsDepositAsset)).div(uint256(price));\\n        return _aumDepositAsset;\\n    }\\n\\n    function getSupportedAssetsLength() external view returns (uint) {\\n        return supportedAssets.length;\\n    }\\n}\"\r\n    },\r\n    \"/Users/tudorg/Desktop/projects/botocean/dapp-contracts-LAUNCH-NO-GITHUB/contracts/interfaces/IUniswapV2Router02.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity >=0.6.2;\\n\\nimport './IUniswapV2Router01.sol';\\n\\ninterface IUniswapV2Router02 is IUniswapV2Router01 {\\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountETH);\\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\n    ) external returns (uint amountETH);\\n\\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external;\\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external payable;\\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external;\\n}\\n\"\r\n    },\r\n    \"/Users/tudorg/Desktop/projects/botocean/dapp-contracts-LAUNCH-NO-GITHUB/contracts/interfaces/IUniswapV2Router01.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity >=0.6.2;\\n\\ninterface IUniswapV2Router01 {\\n    function factory() external pure returns (address);\\n    function WETH() external pure returns (address);\\n\\n    function addLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint amountADesired,\\n        uint amountBDesired,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountA, uint amountB, uint liquidity);\\n    function addLiquidityETH(\\n        address token,\\n        uint amountTokenDesired,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\\n    function removeLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint liquidity,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountA, uint amountB);\\n    function removeLiquidityETH(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountToken, uint amountETH);\\n    function removeLiquidityWithPermit(\\n        address tokenA,\\n        address tokenB,\\n        uint liquidity,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\n    ) external returns (uint amountA, uint amountB);\\n    function removeLiquidityETHWithPermit(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\n    ) external returns (uint amountToken, uint amountETH);\\n    function swapExactTokensForTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external returns (uint[] memory amounts);\\n    function swapTokensForExactTokens(\\n        uint amountOut,\\n        uint amountInMax,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external returns (uint[] memory amounts);\\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\\n        external\\n        payable\\n        returns (uint[] memory amounts);\\n    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\\n        external\\n        returns (uint[] memory amounts);\\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\\n        external\\n        returns (uint[] memory amounts);\\n    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\\n        external\\n        payable\\n        returns (uint[] memory amounts);\\n\\n    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\\n    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\\n}\\n\"\r\n    },\r\n    \"/Users/tudorg/Desktop/projects/botocean/dapp-contracts-LAUNCH-NO-GITHUB/contracts/interfaces/IParaswapAugustus.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.6.12;\\npragma experimental ABIEncoderV2;\\n\\ninterface IParaswapAugustus {\\n    struct Route {\\n        address payable exchange;\\n        address targetExchange;\\n        uint256 percent;\\n        bytes payload;\\n        uint256 networkFee;\\n    }\\n\\n    struct Path {\\n        address to;\\n        uint256 totalNetworkFee;\\n        Route[] routes;\\n    }\\n\\n    struct SellData {\\n        address fromToken;\\n        uint256 fromAmount;\\n        uint256 toAmount;\\n        uint256 expectedAmount;\\n        address payable beneficiary;\\n        string referrer;\\n        bool useReduxToken;\\n        Path[] path;\\n    }\\n\\n    function multiSwap(SellData calldata) external payable returns (uint256);\\n}\\n\"\r\n    },\r\n    \"/Users/tudorg/Desktop/projects/botocean/dapp-contracts-LAUNCH-NO-GITHUB/contracts/interfaces/ILockedOwner.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.6.12;\\n\\ninterface ILockedOwner {\\n    function burnTokens(uint256 amount) external;\\n}\"\r\n    },\r\n    \"/Users/tudorg/Desktop/projects/botocean/dapp-contracts-LAUNCH-NO-GITHUB/contracts/interfaces/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.12;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"/Users/tudorg/Desktop/projects/botocean/dapp-contracts-LAUNCH-NO-GITHUB/contracts/fund/utils/FundShares.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.6.12;\\n\\nimport \\\"./../../utils/SafeMath.sol\\\";\\nimport \\\"./../../interfaces/IERC20.sol\\\";\\n\\nabstract contract FundShares {\\n    using SafeMath for uint256;\\n\\n    mapping (address => uint256) private _balances;\\n\\n    mapping (address => mapping (address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string internal _name;\\n    string internal _symbol;\\n    uint8 private _decimals = 18;\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    function _initializeShares(string memory shareName, string memory shareSymbol) internal {\\n        _name = shareName;\\n        _symbol = shareSymbol;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is\\n     * called.\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view returns (uint8) {\\n        return _decimals;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\\n     *\\n     * This is internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` cannot be the zero address.\\n     * - `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     */\\n    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\\n        require(sender != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(recipient != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _balances[sender] = _balances[sender].sub(amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        _balances[recipient] = _balances[recipient].add(amount);\\n        emit Transfer(sender, recipient, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements\\n     *\\n     * - `to` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _totalSupply = _totalSupply.add(amount);\\n        _balances[account] = _balances[account].add(amount);\\n        emit Transfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _balances[account] = _balances[account].sub(amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        _totalSupply = _totalSupply.sub(amount);\\n        emit Transfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `recipient` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address recipient, uint256 amount) public virtual returns (bool) {\\n        _transfer(msg.sender, recipient, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual returns (bool) {\\n        _approve(msg.sender, spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20};\\n     *\\n     * Requirements:\\n     * - `sender` and `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``sender``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) public virtual returns (bool) {\\n        _transfer(sender, recipient, amount);\\n        _approve(sender, msg.sender, _allowances[sender][msg.sender].sub(amount, \\\"ERC20: transfer amount exceeds allowance\\\"));\\n        return true;\\n    }\\n\\n    \\n}\"\r\n    },\r\n    \"/Users/tudorg/Desktop/projects/botocean/dapp-contracts-LAUNCH-NO-GITHUB/contracts/fund/FundProxy.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.12;\\n\\n// https://eips.ethereum.org/EIPS/eip-1822\\ncontract FundProxy {\\n    constructor(bytes memory _constructData, address _fundLogic) public {\\n        assembly {\\n            // solium-disable-line\\n            sstore(0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc, _fundLogic)\\n            // Genesis proxy flag\\n            sstore(0xa7e8032f370433e2cd75389d33b731b61bee456da1b0f7117f2621cbd1fdcf7a, true)\\n        }\\n\\n        (bool success, bytes memory returnData) = _fundLogic.delegatecall(_constructData);\\n        require(success, string(returnData));\\n    }\\n\\n    fallback() external payable {\\n        assembly {\\n            // solium-disable-line\\n            let contractLogic := sload(\\n                0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc\\n            )\\n            calldatacopy(0x0, 0x0, calldatasize())\\n            let success := delegatecall(\\n                sub(gas(), 10000),\\n                contractLogic,\\n                0x0,\\n                calldatasize(),\\n                0,\\n                0\\n            )\\n            let retSz := returndatasize()\\n            returndatacopy(0, 0, retSz)\\n            switch success\\n                case 0 {\\n                    revert(0, retSz)\\n                }\\n                default {\\n                    return(0, retSz)\\n                }\\n        }\\n    }\\n}\"\r\n    },\r\n    \"/Users/tudorg/Desktop/projects/botocean/dapp-contracts-LAUNCH-NO-GITHUB/contracts/fund/FundLibrary.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.6.12;\\n\\nabstract contract FundLibrary {\\n    event Deposit(\\n        address depositor,\\n        uint256 depositAmount,\\n        uint256 sharesEmitted,\\n        uint256 sharePrice,\\n        uint256 timestamp\\n    );\\n\\n    event Swap(\\n        address from,\\n        address to,\\n        uint256 amount,\\n        uint256 receivedAmount,\\n        uint256 timestamp\\n    );\\n\\n    event Withdraw(\\n        address withdrawer,\\n        uint256 sharesWithdrew,\\n        uint256 sharePrice,\\n        uint256 timestamp\\n    );\\n\\n    event ManagerUpdated(\\n        address oldManager,\\n        string oldName,\\n        address newManager,\\n        string newName\\n    );\\n\\n    event AssetAdded(\\n        address asset\\n    );\\n\\n    event AssetRemoved(\\n        address asset\\n    );\\n\\n    event ParaswapUpgrade(\\n        address oldParaswapProxy,\\n        address oldParaswapAugustus,\\n        address newParaswapProxy,\\n        address newParaswapAugustus\\n    );\\n\\n    event BuybackVaultUpgrade(\\n        address oldVault,\\n        address newVault\\n    );\\n\\n    event OracleUpgrade(\\n        address oldOracle,\\n        address newOracle\\n    );\\n\\n    event FeeMinted(\\n        uint256 oldSharePrice,\\n        uint256 newSharePrice,\\n        uint256 profitUSD,\\n        uint256 sharesBuybackMinted,\\n        uint256 sharesManagerMinted,\\n        uint256 timestamp\\n    );\\n}\"\r\n    },\r\n    \"/Users/tudorg/Desktop/projects/botocean/dapp-contracts-LAUNCH-NO-GITHUB/contracts/fund/FundDeployer.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.12;\\n\\nimport \\\"./../utils/Address.sol\\\";\\nimport \\\"./../utils/SafeMath.sol\\\";\\nimport \\\"./../utils/ERC20.sol\\\";\\nimport \\\"./../utils/SafeERC20.sol\\\";\\n\\nimport \\\"./FundProxy.sol\\\";\\nimport \\\"./FundLogic.sol\\\";\\nimport \\\"./../buyback/BuybackVault.sol\\\";\\n\\ncontract FundDeployer {\\n    using SafeMath for uint256;\\n    using Address for address;\\n    using SafeERC20 for ERC20;\\n\\n    address public owner;\\n    address public oracle;\\n\\n    uint256 public BUYBACK_FEE;\\n    uint256 public constant BUYBACK_FEE_MAX = 10000;\\n\\n    uint256 public MAX_PERFORMANCE_FEE_ALLOWED = 5000;\\n\\n    address public PARASWAP_TOKEN_PROXY;\\n    address public PARASWAP_AUGUSTUS;\\n\\n    uint256 public feeWaitPeriod = 1 days;\\n\\n    address public buybackVault;\\n\\n    address public fundLogic;\\n\\n    address[] public deployedFunds;\\n    mapping(address => bool) isDeployedFund;\\n\\n    event FundDeployed(\\n        address fund,\\n        string fundName,\\n        string managerName,\\n        address depositAsset,\\n        address manager,\\n        uint256 timestamp\\n    );\\n\\n    event OwnerUpdate(\\n        address oldOwner,\\n        address newOwner\\n    );\\n\\n    event OracleUpdate(\\n        address oldOracle,\\n        address newOracle\\n    );\\n\\n    event LogicUpdate(\\n        address oldLogic,\\n        address newLogic\\n    );\\n\\n    event BuybackFeeUpdate(\\n        uint256 oldFee,\\n        uint256 newFee\\n    );\\n\\n    event BuybackVaultUpdate(\\n        address oldVault,\\n        address newVault\\n    );\\n\\n    event ParaswapUpdate(\\n        address oldParaswapProxy,\\n        address oldParaswapAugustus,\\n        address newParaswapProxy,\\n        address newParaswapAugustus\\n    );\\n\\n    event MaxPerformanceFeeUpdate(\\n        uint256 oldMaxPerformanceFeeAllowed,\\n        uint256 newMaxPerformanceFeeAllowed\\n    );\\n\\n    event FeeWaitPeriodChange(\\n        uint256 oldFeeWaitPeriod,\\n        uint256 newFeeWaitPeriod\\n    );\\n\\n    modifier onlyOwner {\\n        require(msg.sender == owner, \\\"Unauthorized: Only owner\\\");\\n        _;\\n    }\\n\\n    constructor(\\n        address _oracle,\\n        uint256 _buybackFee,\\n        address _paraswapProxy,\\n        address _paraswapAugustus,\\n        address _bbvault,\\n        address _fundLogic\\n    ) public {\\n        owner = msg.sender;\\n        oracle = _oracle;\\n        BUYBACK_FEE = _buybackFee;\\n        PARASWAP_TOKEN_PROXY = _paraswapProxy;\\n        PARASWAP_AUGUSTUS = _paraswapAugustus;\\n        buybackVault = _bbvault;\\n        fundLogic = _fundLogic;\\n    }\\n\\n    function changeOwner(address _owner) external onlyOwner {\\n        emit OwnerUpdate(owner, _owner);\\n        owner = _owner;\\n    }\\n\\n    function changeOracle(address _oracle) external onlyOwner {\\n        emit OracleUpdate(oracle, _oracle);\\n        oracle = _oracle;\\n    }\\n\\n    function changeLogic(address _newLogic) external onlyOwner {\\n        emit LogicUpdate(fundLogic, _newLogic);\\n        fundLogic = _newLogic;\\n    }\\n\\n    function changeFeeWaitPeriod(uint256 _newPeriod) external onlyOwner {\\n        emit FeeWaitPeriodChange(feeWaitPeriod, _newPeriod);\\n        feeWaitPeriod = _newPeriod;\\n    }\\n\\n    function changeBuybackFee(uint256 _newFee) external onlyOwner {\\n        // Ensure our users we will never set an extremly high buy back fee\\n        require(_newFee <= 5000, \\\"Buyback fee too big\\\");\\n        emit BuybackFeeUpdate(BUYBACK_FEE, _newFee);\\n        BUYBACK_FEE = _newFee;\\n    }\\n\\n    function changeBuybackVault(address _newVault) external onlyOwner {\\n        emit BuybackVaultUpdate(buybackVault, _newVault);\\n        buybackVault = _newVault;\\n    }\\n\\n    function changeMaxPerformanceFeeAllowed(uint256 _newMax) external onlyOwner {\\n        require (_newMax < 10000, \\\"Max performance fee allowed too big\\\");\\n        emit MaxPerformanceFeeUpdate(MAX_PERFORMANCE_FEE_ALLOWED, _newMax);\\n        MAX_PERFORMANCE_FEE_ALLOWED = _newMax;\\n    }\\n\\n    function upgradeParaswap(address _paraProxy, address _paraAugustus) external onlyOwner {\\n        emit ParaswapUpdate(PARASWAP_TOKEN_PROXY, PARASWAP_AUGUSTUS, _paraProxy, _paraAugustus);\\n        PARASWAP_TOKEN_PROXY = _paraProxy;\\n        PARASWAP_AUGUSTUS = _paraAugustus;\\n    }\\n\\n    function getBuybackFee() external view returns (uint256,uint256) {\\n        return (BUYBACK_FEE, BUYBACK_FEE_MAX);\\n    }\\n\\n    function getParaswapAddresses() external view returns (address,address) {\\n        return (PARASWAP_AUGUSTUS, PARASWAP_TOKEN_PROXY);\\n    }\\n\\n    function getBuybackVault() external view returns (address) {\\n        return buybackVault;\\n    }\\n\\n    function getOracle() external view returns (address) {\\n        return oracle;\\n    }\\n\\n    function getDeployedFunds() external view returns (address[] memory) {\\n        return deployedFunds;\\n    }\\n\\n    function getFundLogic() external view returns (address) {\\n        return fundLogic;\\n    }\\n\\n    function getFeeWaitPeriod() external view returns (uint256) {\\n        return feeWaitPeriod;\\n    }\\n\\n    function addressIsFund(address _fund) external view returns (bool) {\\n        return isDeployedFund[_fund];\\n    }\\n\\n    function deployFund(\\n        string memory _fundName,\\n        string memory _managerName,\\n        address _depositAsset,\\n        uint256 _performanceFee,\\n        uint256 _minDeposit,\\n        uint256 _maxDeposit\\n    ) external returns (address) {\\n        require(_performanceFee <= MAX_PERFORMANCE_FEE_ALLOWED, \\\"Performance fee too big\\\");\\n        // _depositAsset will be validated when the fund is created\\n\\n        bytes memory constructData = abi.encodeWithSignature(\\n            \\\"init(address,address,address,string,string,address,uint256,address,address,address,uint256,uint256)\\\",\\n            oracle,\\n            address(this),\\n            msg.sender,\\n            _fundName,\\n            _managerName,\\n            _depositAsset,\\n            _performanceFee,\\n            PARASWAP_TOKEN_PROXY,\\n            PARASWAP_AUGUSTUS,\\n            buybackVault,\\n            _minDeposit,\\n            _maxDeposit\\n        );\\n\\n        address _fundProxy = address(new FundProxy(constructData, fundLogic));\\n\\n        require(FundLogic(_fundProxy).getFundLogic() == fundLogic && FundLogic(_fundProxy).getManager() == msg.sender, \\\"FundProxy creation failed\\\");\\n\\n        deployedFunds.push(_fundProxy);\\n        isDeployedFund[_fundProxy] = true;\\n        BuybackVault(buybackVault).addFund(_fundProxy);\\n\\n        emit FundDeployed(\\n            _fundProxy,\\n            _fundName,\\n            _managerName,\\n            _depositAsset,\\n            msg.sender,\\n            block.timestamp\\n        );\\n\\n        // Alert buyback vault with new fund\\n\\n        return _fundProxy;\\n    }\\n\\n    function getRegisteredFundsLength() external view returns (uint) {\\n        return deployedFunds.length;\\n    }\\n\\n    function getIsDeployedFund(address _fund) external view returns (bool) {\\n        return isDeployedFund[_fund];\\n    }\\n}\"\r\n    },\r\n    \"/Users/tudorg/Desktop/projects/botocean/dapp-contracts-LAUNCH-NO-GITHUB/contracts/buyback/BuybackVault.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.6.12;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"./../utils/SafeMath.sol\\\";\\nimport \\\"./../utils/Address.sol\\\";\\nimport \\\"./../utils/ERC20.sol\\\";\\nimport \\\"./../utils/SafeERC20.sol\\\";\\nimport \\\"./../interfaces/IParaswapAugustus.sol\\\";\\nimport \\\"./../interfaces/IUniswapV2Router02.sol\\\";\\nimport \\\"./../interfaces/ILockedOwner.sol\\\";\\n\\nimport \\\"./../fund/FundLogic.sol\\\";\\n\\ncontract BuybackVault {\\n    using SafeMath for uint256;\\n    using Address for address;\\n    using SafeERC20 for ERC20;\\n\\n    address public fundDeployer;\\n    address public owner;\\n\\n    address[] public deployedFunds;\\n    mapping(address => bool) isDeployedFund;\\n\\n    address public PARASWAP_TOKEN_PROXY;\\n    address public PARASWAP_AUGUSTUS;\\n    address public UNISWAP_ROUTER;\\n\\n    address public BOTS;\\n\\n    modifier onlyOwner() {\\n        require(msg.sender == owner, \\\"Unauthorized\\\");\\n        _;\\n    }\\n\\n    modifier onlyDeployer() {\\n        require(msg.sender == fundDeployer || msg.sender == owner, \\\"Unauthorized\\\");\\n        _;\\n    }\\n\\n    constructor(\\n        address _paraswapProxy,\\n        address _paraswapAugustus,\\n        address _uniRouter,\\n        address _bots\\n    ) public {\\n        owner = msg.sender;\\n        PARASWAP_TOKEN_PROXY = _paraswapProxy;\\n        PARASWAP_AUGUSTUS = _paraswapAugustus;\\n        UNISWAP_ROUTER = _uniRouter;\\n        BOTS = _bots;\\n    }\\n\\n    function changeDeployer(address _newDeployer) external onlyOwner {\\n        fundDeployer = _newDeployer;\\n    }\\n\\n    function changeOwner(address _newOwner) external onlyOwner {\\n        owner = _newOwner;\\n    }\\n\\n    function changeParaswap(address _newProxy, address _newAugustus) external onlyOwner {\\n        PARASWAP_TOKEN_PROXY = _newProxy;\\n        PARASWAP_AUGUSTUS = _newAugustus;\\n    }\\n\\n    function changeUniswap(address _newRouter) external onlyOwner {\\n        UNISWAP_ROUTER = _newRouter;\\n    }\\n\\n    function changeBots(address _newBOTS) external onlyOwner {\\n        BOTS = _newBOTS;\\n    }\\n\\n    function addFund(address _vaultProxy) external onlyDeployer {\\n        if(!isDeployedFund[_vaultProxy]){\\n            isDeployedFund[_vaultProxy] = true;\\n            deployedFunds.push(_vaultProxy);\\n        }\\n    }\\n\\n    function removeFund(address _vaultProxy) external onlyDeployer {\\n        if(isDeployedFund[_vaultProxy]){\\n            isDeployedFund[_vaultProxy] = false;\\n            uint256 _length = deployedFunds.length;\\n            for (uint256 i = 0; i < _length; i++) {\\n                if (deployedFunds[i] == _vaultProxy) {\\n                    if (i < _length - 1) {\\n                        deployedFunds[i] = deployedFunds[_length - 1];\\n                    }\\n                    deployedFunds.pop();\\n                    break;\\n                }\\n            }\\n        }\\n    }\\n\\n    function withdrawFromFund(address _fundProxy, uint256 _sharesAmount) public onlyOwner {\\n        uint256 _myBal = FundLogic(_fundProxy).balanceOf(address(this));\\n        if(_sharesAmount > _myBal || _sharesAmount == 0){\\n            _sharesAmount = _myBal;\\n        }\\n\\n        // Soft fail\\n        if(_sharesAmount > 0){\\n            FundLogic(_fundProxy).withdraw(_sharesAmount);\\n        }\\n    }\\n\\n    function withdrawFromFunds(address[] memory _funds) public onlyOwner {\\n        uint256 _length = _funds.length;\\n        for(uint256 i = 0; i < _length; i++){\\n            withdrawFromFund(_funds[i], 0); // Withdraw all\\n        }\\n    }\\n\\n    function withdrawAllFunds() external onlyOwner {\\n        withdrawFromFunds(deployedFunds);\\n    }\\n\\n    function paraswapSwap(address _src, uint256 _amount, uint256 _toAmount, uint256 _expectedAmount, IParaswapAugustus.Path[] memory _path) public onlyOwner {\\n        uint256 _srcBal = ERC20(_src).balanceOf(address(this));\\n        if(_srcBal < _amount || _amount == 0){\\n            _amount = _srcBal;\\n        }\\n        \\n        ERC20(_src).safeApprove(PARASWAP_TOKEN_PROXY, 0);\\n        ERC20(_src).safeApprove(PARASWAP_TOKEN_PROXY, _amount);\\n\\n        IParaswapAugustus.SellData memory swapData = IParaswapAugustus.SellData({\\n            fromToken: _src,\\n            fromAmount: _amount,\\n            toAmount: _toAmount,\\n            expectedAmount: _expectedAmount,\\n            beneficiary: payable(address(this)),\\n            referrer: \\\"BOTOCEAN\\\",\\n            useReduxToken: false,\\n            path: _path\\n        });\\n\\n        IParaswapAugustus(PARASWAP_AUGUSTUS).multiSwap(swapData);\\n    }\\n\\n    function uniswapSwap(uint256 _amount, uint256 _toMinAmount, address[] memory _path) public onlyOwner {\\n        address _src = _path[0];\\n        uint256 _srcBal = ERC20(_src).balanceOf(address(this));\\n        if(_srcBal < _amount || _amount == 0){\\n            _amount = _srcBal;\\n        }\\n\\n        ERC20(_src).safeApprove(UNISWAP_ROUTER, _amount);\\n        uint256 expTime = uint256(block.timestamp).add(uint256(1 days));\\n\\n        IUniswapV2Router02(UNISWAP_ROUTER).swapExactTokensForTokens(\\n            _amount,\\n            _toMinAmount,\\n            _path,\\n            address(this),\\n            expTime\\n        );\\n    }\\n\\n    function burnBOTS() external onlyOwner {\\n        uint256 _botsBal = ERC20(BOTS).balanceOf(address(this));\\n        address botsOwner = ERC20(BOTS).owner();\\n        ILockedOwner(botsOwner).burnTokens(_botsBal);\\n    }\\n\\n    // Only used if burnBOTS fails\\n    function manualBurnBOTS() external onlyOwner {\\n        uint256 _botsBal = ERC20(BOTS).balanceOf(address(this));\\n        ERC20(BOTS).safeTransfer(address(0x0000000000000000000000000000000000000001), _botsBal);\\n    }\\n\\n    function getRegisteredFundsLength() external view returns (uint) {\\n        return deployedFunds.length;\\n    }\\n\\n    function getIsDeployedFund(address _fund) external view returns (bool) {\\n        return isDeployedFund[_fund];\\n    }\\n}\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"remappings\": [],\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 26000\r\n    },\r\n    \"evmVersion\": \"byzantium\",\r\n    \"libraries\": {},\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}","ABI":"[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"}],\"name\":\"AssetAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"}],\"name\":\"AssetRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldVault\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newVault\",\"type\":\"address\"}],\"name\":\"BuybackVaultUpgrade\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"depositor\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"depositAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"sharesEmitted\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"sharePrice\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldSharePrice\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newSharePrice\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"profitUSD\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"sharesBuybackMinted\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"sharesManagerMinted\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"FeeMinted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldManager\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"oldName\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newManager\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"newName\",\"type\":\"string\"}],\"name\":\"ManagerUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldOracle\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newOracle\",\"type\":\"address\"}],\"name\":\"OracleUpgrade\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldParaswapProxy\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldParaswapAugustus\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newParaswapProxy\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newParaswapAugustus\",\"type\":\"address\"}],\"name\":\"ParaswapUpgrade\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"receivedAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"Swap\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"withdrawer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"sharesWithdrew\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"sharePrice\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"MAX_ASSETS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PARASWAP_AUGUSTUS\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PARASWAP_TOKEN_PROXY\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PERFORMANCE_FEE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"activeAssets\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_asset\",\"type\":\"address\"}],\"name\":\"addActiveAsset\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buybackVault\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_minD\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_maxD\",\"type\":\"uint256\"}],\"name\":\"changeDepositLimits\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_manager\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"_managerName\",\"type\":\"string\"}],\"name\":\"changeManager\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_maxDeposit\",\"type\":\"uint256\"}],\"name\":\"changeMaxDeposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_minDeposit\",\"type\":\"uint256\"}],\"name\":\"changeMinDeposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"deployer\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"depositAsset\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"depositAssetDecimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fundName\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getActiveAssetsLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBuybackFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getFundLogic\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_asset\",\"type\":\"address\"}],\"name\":\"getIsActiveAsset\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getManager\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getManagerName\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getName\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getVersion\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_oracle\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_deployer\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_manager\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"_fundName\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_managerName\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"_depositAsset\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_performanceFee\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_paraswapProxy\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_paraswapAugustus\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_bbvault\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_min\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_max\",\"type\":\"uint256\"}],\"name\":\"init\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isActiveAsset\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"manager\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"managerFeesEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"managerName\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxDeposit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minDeposit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"oracle\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_asset\",\"type\":\"address\"}],\"name\":\"removeActiveAsset\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_newStatus\",\"type\":\"bool\"}],\"name\":\"setManagerFeeEnabled\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"settleFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sharePriceLastFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sharePriceUSD\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_src\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_dst\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_toAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_expectedAmount\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"totalNetworkFee\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"address payable\",\"name\":\"exchange\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"targetExchange\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"percent\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"payload\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"networkFee\",\"type\":\"uint256\"}],\"internalType\":\"struct IParaswapAugustus.Route[]\",\"name\":\"routes\",\"type\":\"tuple[]\"}],\"internalType\":\"struct IParaswapAugustus.Path[]\",\"name\":\"_path\",\"type\":\"tuple[]\"}],\"name\":\"swap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"timeLastFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalValueDepositAsset\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalValueUSD\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"upgradeBuyBackVault\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"upgradeOracle\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"upgradeParaswap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_sharesAmount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"FundLogic","CompilerVersion":"v0.6.12+commit.27d51765","OptimizationUsed":"1","Runs":"26000","ConstructorArguments":"","EVMVersion":"byzantium","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}