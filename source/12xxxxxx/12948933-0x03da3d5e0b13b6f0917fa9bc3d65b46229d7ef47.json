{"status":"1","message":"OK","result":[{"SourceCode":"/// AutoRewardDripper.sol\r\n\r\n// Copyright (C) 2021 Reflexer Labs, INC\r\n//\r\n// This program is free software: you can redistribute it and/or modify\r\n// it under the terms of the GNU Affero General Public License as published by\r\n// the Free Software Foundation, either version 3 of the License, or\r\n// (at your option) any later version.\r\n//\r\n// This program is distributed in the hope that it will be useful,\r\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n// GNU Affero General Public License for more details.\r\n//\r\n// You should have received a copy of the GNU Affero General Public License\r\n// along with this program.  If not, see <https://www.gnu.org/licenses/>.\r\n\r\npragma solidity 0.6.7;\r\n\r\nabstract contract TokenLike {\r\n    function balanceOf(address) virtual public view returns (uint256);\r\n    function transfer(address, uint256) virtual external returns (bool);\r\n}\r\n\r\ncontract AutoRewardDripper {\r\n    // --- Auth ---\r\n    mapping (address => uint) public authorizedAccounts;\r\n    /**\r\n     * @notice Add auth to an account\r\n     * @param account Account to add auth to\r\n     */\r\n    function addAuthorization(address account) virtual external isAuthorized {\r\n        authorizedAccounts[account] = 1;\r\n        emit AddAuthorization(account);\r\n    }\r\n    /**\r\n     * @notice Remove auth from an account\r\n     * @param account Account to remove auth from\r\n     */\r\n    function removeAuthorization(address account) virtual external isAuthorized {\r\n        authorizedAccounts[account] = 0;\r\n        emit RemoveAuthorization(account);\r\n    }\r\n    /**\r\n    * @notice Checks whether msg.sender can call an authed function\r\n    **/\r\n    modifier isAuthorized {\r\n        require(authorizedAccounts[msg.sender] == 1, \"AutoRewardDripper/account-not-authorized\");\r\n        _;\r\n    }\r\n\r\n    // --- Variables ---\r\n    // Last block when a reward was given\r\n    uint256   public lastRewardBlock;\r\n    // Amount of tokens distributed per block\r\n    uint256   public rewardPerBlock;\r\n    // The timeline (in number of blocks) used to calculate rewardPerBlock\r\n    uint256   public rewardTimeline;\r\n    // Last time when the reward was calculated\r\n    uint256   public lastRewardCalculation;\r\n    // Delay between reward calculations\r\n    uint256   public rewardCalculationDelay;\r\n    // The address that can request rewards\r\n    address   public requestor;\r\n    // The reward token being distributed\r\n    TokenLike public rewardToken;\r\n\r\n    uint256 public constant MAX_REWARD_TIMELINE = 2250000;\r\n\r\n    // --- Events ---\r\n    event AddAuthorization(address account);\r\n    event RemoveAuthorization(address account);\r\n    event ModifyParameters(bytes32 indexed parameter, uint256 data);\r\n    event ModifyParameters(bytes32 indexed parameter, address data);\r\n    event DripReward(address requestor, uint256 amountToTransfer);\r\n    event TransferTokenOut(address dst, uint256 amount);\r\n    event RecomputePerBlockReward(uint256 rewardPerBlock);\r\n\r\n    constructor(\r\n      address requestor_,\r\n      address rewardToken_,\r\n      uint256 rewardTimeline_,\r\n      uint256 rewardCalculationDelay_\r\n    ) public {\r\n        require(requestor_ != address(0), \"AutoRewardDripper/null-requoestor\");\r\n        require(rewardToken_ != address(0), \"AutoRewardDripper/null-reward-token\");\r\n        require(rewardTimeline_ > 0, \"AutoRewardDripper/null-reward-time\");\r\n        require(rewardTimeline_ <= MAX_REWARD_TIMELINE, \"AutoRewardDripper/high-reward-timeline\");\r\n        require(rewardCalculationDelay_ > 0, \"AutoRewardDripper/null-reward-calc-delay\");\r\n\r\n        authorizedAccounts[msg.sender] = 1;\r\n\r\n        rewardTimeline         = rewardTimeline_;\r\n        requestor              = requestor_;\r\n        rewardCalculationDelay = rewardCalculationDelay_;\r\n        rewardToken            = TokenLike(rewardToken_);\r\n        lastRewardBlock        = block.number;\r\n\r\n        emit AddAuthorization(msg.sender);\r\n        emit ModifyParameters(\"rewardTimeline\", rewardTimeline);\r\n        emit ModifyParameters(\"rewardCalculationDelay\", rewardCalculationDelay);\r\n        emit ModifyParameters(\"requestor\", requestor);\r\n        emit ModifyParameters(\"lastRewardBlock\", lastRewardBlock);\r\n    }\r\n\r\n    // --- Boolean ---\r\n    function either(bool x, bool y) internal pure returns (bool z) {\r\n        assembly{ z := or(x, y)}\r\n    }\r\n\r\n    // --- Math ---\r\n    function subtract(uint256 x, uint256 y) internal pure returns (uint256 z) {\r\n        require((z = x - y) <= x, \"AutoRewardDripper/sub-underflow\");\r\n    }\r\n    function multiply(uint x, uint y) internal pure returns (uint z) {\r\n        require(y == 0 || (z = x * y) / y == x, \"AutoRewardDripper/mul-overflow\");\r\n    }\r\n\r\n    // --- Administration ---\r\n    /*\r\n    * @notify Modify an uint256 parameter\r\n    * @param parameter The name of the parameter to modify\r\n    * @param data New value for the parameter\r\n    */\r\n    function modifyParameters(bytes32 parameter, uint256 data) external isAuthorized {\r\n        if (parameter == \"lastRewardBlock\") {\r\n            require(data >= block.number, \"AutoRewardDripper/invalid-last-reward-block\");\r\n            lastRewardBlock = data;\r\n        } else if (parameter == \"rewardPerBlock\") {\r\n            require(data > 0, \"AutoRewardDripper/invalid-reward-per-block\");\r\n            rewardPerBlock = data;\r\n        } else if (parameter == \"rewardCalculationDelay\") {\r\n            require(data > 0, \"AutoRewardDripper/invalid-reward-calculation-delay\");\r\n            rewardCalculationDelay = data;\r\n        } else if (parameter == \"rewardTimeline\") {\r\n            require(data > 0 && data <= MAX_REWARD_TIMELINE, \"AutoRewardDripper/invalid-reward-timeline\");\r\n            rewardTimeline = data;\r\n        }\r\n        else revert(\"AutoRewardDripper/modify-unrecognized-param\");\r\n        emit ModifyParameters(parameter, data);\r\n    }\r\n    /*\r\n    * @notify Modify an address parameter\r\n    * @param parameter The name of the parameter to modify\r\n    * @param data New value for the parameter\r\n    */\r\n    function modifyParameters(bytes32 parameter, address data) external isAuthorized {\r\n        require(data != address(0), \"AutoRewardDripper/null-data\");\r\n        if (parameter == \"requestor\") {\r\n            requestor = data;\r\n        }\r\n        else revert(\"AutoRewardDripper/modify-unrecognized-param\");\r\n        emit ModifyParameters(parameter, data);\r\n    }\r\n\r\n    // --- Core Logic ---\r\n    /*\r\n    * @notice Transfer tokens to a custom address\r\n    * @param dst The destination address for the tokens\r\n    * @param amount The amount of tokens transferred\r\n    */\r\n    function transferTokenOut(address dst, uint256 amount) external isAuthorized {\r\n        require(dst != address(0), \"AutoRewardDripper/null-dst\");\r\n        require(amount > 0, \"AutoRewardDripper/null-amount\");\r\n\r\n        require(rewardToken.transfer(dst, amount), \"AutoRewardDripper/failed-transfer\");\r\n\r\n        emit TransferTokenOut(dst, amount);\r\n    }\r\n    /*\r\n    * @notify Send rewards to the requestor\r\n    */\r\n    function dripReward() external {\r\n        dripReward(msg.sender);\r\n    }\r\n    /*\r\n    * @notify Recompute rewardPerBlock\r\n    */\r\n    function recomputePerBlockReward() public {\r\n        uint256 remainingBalance = rewardToken.balanceOf(address(this));\r\n        if (either(remainingBalance == 0, subtract(now, lastRewardCalculation) < rewardCalculationDelay)) return;\r\n        lastRewardCalculation    = now;\r\n        rewardPerBlock           = (rewardTimeline >= remainingBalance) ? remainingBalance : remainingBalance / rewardTimeline;\r\n        emit RecomputePerBlockReward(rewardPerBlock);\r\n    }\r\n    /*\r\n    * @notify Send rewards to an address defined by the requestor\r\n    */\r\n    function dripReward(address to) public {\r\n        if (lastRewardBlock >= block.number) return;\r\n        require(msg.sender == requestor, \"AutoRewardDripper/invalid-caller\");\r\n\r\n        uint256 remainingBalance = rewardToken.balanceOf(address(this));\r\n        uint256 amountToTransfer = multiply(subtract(block.number, lastRewardBlock), rewardPerBlock);\r\n        amountToTransfer         = (amountToTransfer > remainingBalance) ? remainingBalance : amountToTransfer;\r\n\r\n        lastRewardBlock = block.number;\r\n        recomputePerBlockReward();\r\n\r\n        if (amountToTransfer == 0) return;\r\n        require(rewardToken.transfer(to, amountToTransfer), \"AutoRewardDripper/failed-transfer\");\r\n\r\n        emit DripReward(to, amountToTransfer);\r\n    }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"requestor_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"rewardToken_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"rewardTimeline_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewardCalculationDelay_\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"AddAuthorization\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"requestor\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountToTransfer\",\"type\":\"uint256\"}],\"name\":\"DripReward\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"parameter\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"data\",\"type\":\"uint256\"}],\"name\":\"ModifyParameters\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"parameter\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"data\",\"type\":\"address\"}],\"name\":\"ModifyParameters\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"rewardPerBlock\",\"type\":\"uint256\"}],\"name\":\"RecomputePerBlockReward\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"RemoveAuthorization\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"dst\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TransferTokenOut\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"MAX_REWARD_TIMELINE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"addAuthorization\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"authorizedAccounts\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"dripReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dripReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastRewardBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastRewardCalculation\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"parameter\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"data\",\"type\":\"address\"}],\"name\":\"modifyParameters\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"parameter\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"data\",\"type\":\"uint256\"}],\"name\":\"modifyParameters\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"recomputePerBlockReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"removeAuthorization\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"requestor\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardCalculationDelay\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardPerBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardTimeline\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardToken\",\"outputs\":[{\"internalType\":\"contract TokenLike\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"dst\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferTokenOut\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"AutoRewardDripper","CompilerVersion":"v0.6.7+commit.b8d736ae","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000fa5e4955a11902f849ecaddef355db69c2036de60000000000000000000000006243d8cea23066d098a15582d81a598b4e8391f40000000000000000000000000000000000000000000000000000000000030ad80000000000000000000000000000000000000000000000000000000000000078","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"ipfs://6332207ff983cbe98a2dc1e0a0f1de7e5297de03b967516b7945d51f68e97077"}]}