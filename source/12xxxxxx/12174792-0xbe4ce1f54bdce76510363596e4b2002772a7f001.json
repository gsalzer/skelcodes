{"status":"1","message":"OK","result":[{"SourceCode":"{\"BusinessFund4Skyler.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity =0.7.5;\\r\\n\\r\\n\\r\\nimport \\\"LibSafeMath.sol\\\";\\r\\nimport \\\"LibIVesting.sol\\\";\\r\\nimport \\\"LibIVokenTB.sol\\\";\\r\\nimport \\\"LibAuthPause.sol\\\";\\r\\nimport \\\"LibAuthProxy.sol\\\";\\r\\nimport \\\"SkylerVestingPermille1.sol\\\";\\r\\n\\r\\n\\r\\ncontract BusinessFund4Skyler is IVesting, AuthPause, AuthProxy, WithVestingPermille {\\r\\n    using SafeMath for uint256;\\r\\n\\r\\n    uint256 private immutable CREDIT = 1_000_000e9;  // credit: 1 million\\r\\n    uint256 private immutable TOP = 50_000e9;\\r\\n    uint256 private _vokenIssued;\\r\\n    IVokenTB private immutable VOKEN_TB = IVokenTB(0x1234567a022acaa848E7D6bC351d075dBfa76Dd4);\\r\\n    mapping (address =\\u003e uint256) private _minted;\\r\\n\\r\\n    event Distribute(address indexed account, uint256 amount);\\r\\n\\r\\n    receive() external payable {}\\r\\n\\r\\n    function status(address account)\\r\\n        public\\r\\n        view\\r\\n        returns (\\r\\n            uint256 credit,\\r\\n            uint256 issued,\\r\\n            \\r\\n            uint256 balance,\\r\\n            uint256 minted,\\r\\n            uint256 vesting\\r\\n        )\\r\\n    {\\r\\n        credit = CREDIT.sub(_vokenIssued);\\r\\n        issued = _vokenIssued;\\r\\n        \\r\\n        balance = VOKEN_TB.balanceOf(account);\\r\\n        minted = _minted[account];\\r\\n        vesting = vestingOf(account);\\r\\n    }\\r\\n\\r\\n    function vestingOf(address account)\\r\\n        public\\r\\n        override\\r\\n        view\\r\\n        returns (uint256 vesting)\\r\\n    {\\r\\n        vesting = vesting.add(_getVestingAmountForIssued(_minted[account]));\\r\\n    }\\r\\n\\r\\n\\r\\n    function distribute(address account, uint256 amount)\\r\\n        public\\r\\n        onlyProxy\\r\\n        onlyNotPaused\\r\\n        returns (bool)\\r\\n    {\\r\\n        require(_minted[account] == 0, \\\"Already minted before\\\");\\r\\n        require(amount \\u003c= TOP, \\\"Mint greater than 50k\\\");\\r\\n\\r\\n        _vokenIssued = _vokenIssued.add(amount);\\r\\n        require(_vokenIssued \\u003c= CREDIT, \\\"BusinessFund: credit exceeded\\\");\\r\\n\\r\\n        _minted[account] = _minted[account].add(amount);\\r\\n\\r\\n        emit Distribute(account, amount);\\r\\n\\r\\n        return VOKEN_TB.mintWithVesting(account, amount, address(this));\\r\\n    }\\r\\n}\\r\\n\"},\"LibAuthPause.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity =0.7.5;\\r\\n\\r\\nimport \\\"LibBaseAuth.sol\\\";\\r\\n\\r\\n\\r\\n/**\\r\\n * @dev Auth pause.\\r\\n */\\r\\ncontract AuthPause is BaseAuth {\\r\\n    using Roles for Roles.Role;\\r\\n\\r\\n    bool private _paused = false;\\r\\n\\r\\n    event PausedON();\\r\\n    event PausedOFF();\\r\\n\\r\\n\\r\\n    /**\\r\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\r\\n     */\\r\\n    modifier onlyNotPaused() {\\r\\n        require(!_paused, \\\"Paused\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @return Returns true if the contract is paused, false otherwise.\\r\\n     */\\r\\n    function isPaused()\\r\\n        public\\r\\n        view\\r\\n        returns (bool)\\r\\n    {\\r\\n        return _paused;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Sets paused state.\\r\\n     *\\r\\n     * Can only be called by the current owner.\\r\\n     */\\r\\n    function setPaused(bool value)\\r\\n        external\\r\\n        onlyAgent\\r\\n    {\\r\\n        _paused = value;\\r\\n\\r\\n        if (_paused) {\\r\\n            emit PausedON();\\r\\n        } else {\\r\\n            emit PausedOFF();\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\"},\"LibAuthProxy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity =0.7.5;\\r\\n\\r\\nimport \\\"LibBaseAuth.sol\\\";\\r\\n\\r\\n\\r\\n/**\\r\\n * @dev Auth proxy.\\r\\n */\\r\\ncontract AuthProxy is BaseAuth {\\r\\n    using Roles for Roles.Role;\\r\\n\\r\\n    Roles.Role private _proxies;\\r\\n    \\r\\n    event ProxyAdded(address indexed account);\\r\\n    event ProxyRemoved(address indexed account);\\r\\n\\r\\n\\r\\n    /**\\r\\n     * @dev Throws if called by account which is not a proxy.\\r\\n     */\\r\\n    modifier onlyProxy() {\\r\\n        require(isProxy(msg.sender), \\\"ProxyRole: caller does not have the Proxy role\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns true if the `account` has the Proxy role.\\r\\n     */\\r\\n    function isProxy(address account)\\r\\n        public\\r\\n        view\\r\\n        returns (bool)\\r\\n    {\\r\\n        return _proxies.has(account);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Give an `account` access to the Proxy role.\\r\\n     *\\r\\n     * Can only be called by the current owner.\\r\\n     */\\r\\n    function addProxy(address account)\\r\\n        public\\r\\n        onlyAgent\\r\\n    {\\r\\n        _proxies.add(account);\\r\\n        emit ProxyAdded(account);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Remove an `account` access from the Proxy role.\\r\\n     *\\r\\n     * Can only be called by the current owner.\\r\\n     */\\r\\n    function removeProxy(address account)\\r\\n        public\\r\\n        onlyAgent\\r\\n    {\\r\\n        _proxies.remove(account);\\r\\n        emit ProxyRemoved(account);\\r\\n    }\\r\\n}\\r\\n\"},\"LibBaseAuth.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity =0.7.5;\\r\\n\\r\\nimport \\\"LibRoles.sol\\\";\\r\\nimport \\\"LibIERC20.sol\\\";\\r\\n\\r\\n\\r\\n/**\\r\\n * @dev Base auth.\\r\\n */\\r\\ncontract BaseAuth {\\r\\n    using Roles for Roles.Role;\\r\\n\\r\\n    Roles.Role private _agents;\\r\\n\\r\\n    event AgentAdded(address indexed account);\\r\\n    event AgentRemoved(address indexed account);\\r\\n\\r\\n    /**\\r\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\r\\n     */\\r\\n    constructor ()\\r\\n    {\\r\\n        _agents.add(msg.sender);\\r\\n        emit AgentAdded(msg.sender);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Throws if called by account which is not an agent.\\r\\n     */\\r\\n    modifier onlyAgent() {\\r\\n        require(isAgent(msg.sender), \\\"AgentRole: caller does not have the Agent role\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Rescue compatible ERC20 Token\\r\\n     *\\r\\n     * Can only be called by an agent.\\r\\n     */\\r\\n    function rescueToken(\\r\\n        address tokenAddr,\\r\\n        address recipient,\\r\\n        uint256 amount\\r\\n    )\\r\\n        external\\r\\n        onlyAgent\\r\\n    {\\r\\n        IERC20 _token = IERC20(tokenAddr);\\r\\n        require(recipient != address(0), \\\"Rescue: recipient is the zero address\\\");\\r\\n        uint256 balance = _token.balanceOf(address(this));\\r\\n\\r\\n        require(balance \\u003e= amount, \\\"Rescue: amount exceeds balance\\\");\\r\\n        _token.transfer(recipient, amount);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Withdraw Ether\\r\\n     *\\r\\n     * Can only be called by an agent.\\r\\n     */\\r\\n    function withdrawEther(\\r\\n        address payable recipient,\\r\\n        uint256 amount\\r\\n    )\\r\\n        external\\r\\n        onlyAgent\\r\\n    {\\r\\n        require(recipient != address(0), \\\"Withdraw: recipient is the zero address\\\");\\r\\n        uint256 balance = address(this).balance;\\r\\n        require(balance \\u003e= amount, \\\"Withdraw: amount exceeds balance\\\");\\r\\n        recipient.transfer(amount);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns true if the `account` has the Agent role.\\r\\n     */\\r\\n    function isAgent(address account)\\r\\n        public\\r\\n        view\\r\\n        returns (bool)\\r\\n    {\\r\\n        return _agents.has(account);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Give an `account` access to the Agent role.\\r\\n     *\\r\\n     * Can only be called by an agent.\\r\\n     */\\r\\n    function addAgent(address account)\\r\\n        public\\r\\n        onlyAgent\\r\\n    {\\r\\n        _agents.add(account);\\r\\n        emit AgentAdded(account);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Remove an `account` access from the Agent role.\\r\\n     *\\r\\n     * Can only be called by an agent.\\r\\n     */\\r\\n    function removeAgent(address account)\\r\\n        public\\r\\n        onlyAgent\\r\\n    {\\r\\n        _agents.remove(account);\\r\\n        emit AgentRemoved(account);\\r\\n    }\\r\\n}\\r\\n\\r\\n\"},\"LibIERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity =0.7.5;\\r\\n\\r\\n\\r\\n/**\\r\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\r\\n */\\r\\ninterface IERC20 {\\r\\n    function name() external view returns (string memory);\\r\\n    function symbol() external view returns (string memory);\\r\\n    function decimals() external view returns (uint8);\\r\\n    function totalSupply() external view returns (uint256);\\r\\n    function allowance(address owner, address spender) external view returns (uint256);\\r\\n    function balanceOf(address account) external view returns (uint256);\\r\\n    function approve(address spender, uint256 amount) external returns (bool);\\r\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\r\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\r\\n\\r\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\r\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\r\\n}\\r\\n\"},\"LibIPermille.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity =0.7.5;\\r\\n\\r\\n\\r\\n/**\\r\\n * @dev Interface of a permille contract.\\r\\n */\\r\\ninterface IPermille {\\r\\n    function permille() external view returns (uint16);\\r\\n}\\r\\n\"},\"LibIVesting.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity =0.7.5;\\r\\n\\r\\n\\r\\n/**\\r\\n * @dev Interface of an vesting contract.\\r\\n */\\r\\ninterface IVesting {\\r\\n    function vestingOf(address account) external view returns (uint256);\\r\\n}\\r\\n\"},\"LibIVokenTB.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity =0.7.5;\\r\\n\\r\\n\\r\\n/**\\r\\n * @title Interface of VokenTB.\\r\\n */\\r\\ninterface IVokenTB {\\r\\n    function balanceOf(address account) external view returns (uint256);\\r\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\r\\n    \\r\\n    function cap() external view returns (uint256);\\r\\n    function totalSupply() external view returns (uint256);\\r\\n    \\r\\n    function mint(address account, uint256 amount) external returns (bool);\\r\\n    function mintWithVesting(address account, uint256 amount, address vestingContract) external returns (bool);\\r\\n\\r\\n    function referrer(address account) external view returns (address payable);\\r\\n    function address2voken(address account) external view returns (uint160);\\r\\n    function voken2address(uint160 voken) external view returns (address payable);\\r\\n}\\r\\n\"},\"LibRoles.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity =0.7.5;\\r\\n\\r\\n\\r\\n/**\\r\\n * @dev Library for managing addresses assigned to a Role.\\r\\n */\\r\\nlibrary Roles {\\r\\n    struct Role\\r\\n    {\\r\\n        mapping (address =\\u003e bool) bearer;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Give an account access to this role.\\r\\n     */\\r\\n    function add(\\r\\n        Role storage role,\\r\\n        address account\\r\\n    )\\r\\n        internal\\r\\n    {\\r\\n        require(!has(role, account), \\\"Roles: account already has role\\\");\\r\\n        role.bearer[account] = true;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Remove an account\\u0027s access to this role.\\r\\n     */\\r\\n    function remove(\\r\\n        Role storage role,\\r\\n        address account\\r\\n    )\\r\\n        internal\\r\\n    {\\r\\n        require(has(role, account), \\\"Roles: account does not have role\\\");\\r\\n        role.bearer[account] = false;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Check if an account has this role.\\r\\n     *\\r\\n     * @return bool\\r\\n     */\\r\\n    function has(\\r\\n        Role storage role,\\r\\n        address account\\r\\n    )\\r\\n        internal\\r\\n        view\\r\\n        returns (bool)\\r\\n    {\\r\\n        require(account != address(0), \\\"Roles: account is the zero address\\\");\\r\\n        return role.bearer[account];\\r\\n    }\\r\\n}\\r\\n\"},\"LibSafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity =0.7.5;\\r\\n\\r\\n\\r\\n/**\\r\\n * @dev Wrappers over Solidity\\u0027s arithmetic operations with added overflow\\r\\n * checks.\\r\\n *\\r\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\r\\n * in bugs, because programmers usually assume that an overflow raises an\\r\\n * error, which is the standard behavior in high level programming languages.\\r\\n * `SafeMath` restores this intuition by reverting the transaction when an\\r\\n * operation overflows.\\r\\n *\\r\\n * Using this library instead of the unchecked operations eliminates an entire\\r\\n * class of bugs, so it\\u0027s recommended to use it always.\\r\\n */\\r\\nlibrary SafeMath {\\r\\n    /**\\r\\n     * @dev Returns the addition of two unsigned integers, reverting on\\r\\n     * overflow.\\r\\n     *\\r\\n     * Counterpart to Solidity\\u0027s `+` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - Addition cannot overflow.\\r\\n     */\\r\\n    function add(\\r\\n        uint256 a,\\r\\n        uint256 b\\r\\n    )\\r\\n        internal\\r\\n        pure\\r\\n        returns (uint256)\\r\\n    {\\r\\n        uint256 c = a + b;\\r\\n        require(c \\u003e= a, \\\"SafeMath: addition overflow\\\");\\r\\n\\r\\n        return c;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\r\\n     * overflow (when the result is negative).\\r\\n     *\\r\\n     * Counterpart to Solidity\\u0027s `-` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - Subtraction cannot overflow.\\r\\n     */\\r\\n    function sub(\\r\\n        uint256 a,\\r\\n        uint256 b\\r\\n    )\\r\\n        internal\\r\\n        pure\\r\\n        returns (uint256)\\r\\n    {\\r\\n        return sub(a, b, \\\"SafeMath: subtraction overflow\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\r\\n     * overflow (when the result is negative).\\r\\n     *\\r\\n     * Counterpart to Solidity\\u0027s `-` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - Subtraction cannot overflow.\\r\\n     */\\r\\n    function sub(\\r\\n        uint256 a,\\r\\n        uint256 b,\\r\\n        string memory errorMessage\\r\\n    )\\r\\n        internal\\r\\n        pure\\r\\n        returns (uint256)\\r\\n    {\\r\\n        require(b \\u003c= a, errorMessage);\\r\\n        uint256 c = a - b;\\r\\n\\r\\n        return c;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\r\\n     * overflow.\\r\\n     *\\r\\n     * Counterpart to Solidity\\u0027s `*` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - Multiplication cannot overflow.\\r\\n     */\\r\\n    function mul(\\r\\n        uint256 a,\\r\\n        uint256 b\\r\\n    )\\r\\n        internal\\r\\n        pure\\r\\n        returns (uint256)\\r\\n    {\\r\\n        // Gas optimization: this is cheaper than requiring \\u0027a\\u0027 not being zero, but the\\r\\n        // benefit is lost if \\u0027b\\u0027 is also tested.\\r\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\r\\n        if (a == 0) {\\r\\n            return 0;\\r\\n        }\\r\\n\\r\\n        uint256 c = a * b;\\r\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\r\\n\\r\\n        return c;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the integer division of two unsigned integers. Reverts on\\r\\n     * division by zero. The result is rounded towards zero.\\r\\n     *\\r\\n     * Counterpart to Solidity\\u0027s `/` operator. Note: this function uses a\\r\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\r\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - The divisor cannot be zero.\\r\\n     */\\r\\n    function div(\\r\\n        uint256 a,\\r\\n        uint256 b\\r\\n    )\\r\\n        internal\\r\\n        pure\\r\\n        returns (uint256)\\r\\n    {\\r\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\\r\\n     * division by zero. The result is rounded towards zero.\\r\\n     *\\r\\n     * Counterpart to Solidity\\u0027s `/` operator. Note: this function uses a\\r\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\r\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - The divisor cannot be zero.\\r\\n     */\\r\\n    function div(\\r\\n        uint256 a,\\r\\n        uint256 b,\\r\\n        string memory errorMessage\\r\\n    )\\r\\n        internal\\r\\n        pure\\r\\n        returns (uint256)\\r\\n    {\\r\\n        require(b \\u003e 0, errorMessage);\\r\\n        uint256 c = a / b;\\r\\n        // assert(a == b * c + a % b); // There is no case in which this doesn\\u0027t hold\\r\\n\\r\\n        return c;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\r\\n     * Reverts when dividing by zero.\\r\\n     *\\r\\n     * Counterpart to Solidity\\u0027s `%` operator. This function uses a `revert`\\r\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\r\\n     * invalid opcode to revert (consuming all remaining gas).\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - The divisor cannot be zero.\\r\\n     */\\r\\n    function mod(\\r\\n        uint256 a,\\r\\n        uint256 b\\r\\n    )\\r\\n        internal\\r\\n        pure\\r\\n        returns (uint256)\\r\\n    {\\r\\n        return mod(a, b, \\\"SafeMath: modulo by zero\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\r\\n     * Reverts with custom message when dividing by zero.\\r\\n     *\\r\\n     * Counterpart to Solidity\\u0027s `%` operator. This function uses a `revert`\\r\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\r\\n     * invalid opcode to revert (consuming all remaining gas).\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - The divisor cannot be zero.\\r\\n     */\\r\\n    function mod(\\r\\n        uint256 a,\\r\\n        uint256 b,\\r\\n        string memory errorMessage\\r\\n    )\\r\\n        internal\\r\\n        pure\\r\\n        returns (uint256)\\r\\n    {\\r\\n        require(b != 0, errorMessage);\\r\\n        return a % b;\\r\\n    }\\r\\n}\"},\"SkylerVestingPermille1.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity =0.7.5;\\r\\n\\r\\n\\r\\nimport \\\"LibSafeMath.sol\\\";\\r\\nimport \\\"LibBaseAuth.sol\\\";\\r\\nimport \\\"LibIPermille.sol\\\";\\r\\n\\r\\n\\r\\ncontract WithVestingPermille is BaseAuth {\\r\\n    using SafeMath for uint256;\\r\\n    \\r\\n    IPermille private _vestingPermilleContract;\\r\\n\\r\\n    /**\\r\\n     * @dev Set Vesting Permille Contract(s).\\r\\n     */\\r\\n    function setVestingPermilleContract(address vpContract)\\r\\n        external\\r\\n        onlyAgent\\r\\n    {\\r\\n        _vestingPermilleContract = IPermille(vpContract);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the Vesting Permille Contract.\\r\\n     */\\r\\n    function vestingPermilleContract()\\r\\n        public\\r\\n        view\\r\\n        returns (IPermille)\\r\\n    {\\r\\n        return _vestingPermilleContract;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns vesting amount for issued of `amount`.\\r\\n     */\\r\\n    function _getVestingAmountForIssued(uint256 amount)\\r\\n        internal\\r\\n        view\\r\\n        returns (uint256 vesting)\\r\\n    {\\r\\n        if (amount \\u003e 0) {\\r\\n            vesting = _getVestingAmount(amount, _vestingPermilleContract, 970);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns vesting amount via the `permilleContract`.\\r\\n     */\\r\\n    function _getVestingAmount(uint256 amount, IPermille permilleContract, uint16 defaultPermille)\\r\\n        private\\r\\n        view\\r\\n        returns (uint256 vesting)\\r\\n    {\\r\\n        vesting = amount;\\r\\n\\r\\n        uint16 permille = defaultPermille;\\r\\n\\r\\n        if (permilleContract != IPermille(0)) {\\r\\n            try permilleContract.permille() returns (uint16 permille_) {\\r\\n                permille = permille_;\\r\\n            }\\r\\n\\r\\n            catch {\\r\\n                //\\r\\n            }\\r\\n        }\\r\\n\\r\\n        if (permille == 0) {\\r\\n            vesting = 0;\\r\\n        }\\r\\n\\r\\n        else if (permille \\u003c 1_000) {\\r\\n            vesting = vesting.mul(permille).div(1_000);\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\"}}","ABI":"[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"AgentAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"AgentRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Distribute\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"PausedOFF\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"PausedON\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"ProxyAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"ProxyRemoved\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"addAgent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"addProxy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"distribute\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isAgent\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isPaused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isProxy\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"removeAgent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"removeProxy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddr\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"rescueToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"value\",\"type\":\"bool\"}],\"name\":\"setPaused\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"vpContract\",\"type\":\"address\"}],\"name\":\"setVestingPermilleContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"status\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"credit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"issued\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minted\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"vesting\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"vestingOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"vesting\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vestingPermilleContract\",\"outputs\":[{\"internalType\":\"contract IPermille\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdrawEther\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]","ContractName":"BusinessFund4Skyler","CompilerVersion":"v0.7.5+commit.eb77ed08","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://c2a7e582f2cc89f1e0e672e2829c22e3b014fff1c96bbeaf1e692986d3fb6de2"}]}