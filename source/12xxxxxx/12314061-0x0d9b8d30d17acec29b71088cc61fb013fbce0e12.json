{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"/C/Users/thanhphi/Desktop/PolkaBridgeSolution/PolkaBridge-LaunchPad/contracts/PolkaBridgeLaunchPad.sol\": {\r\n      \"content\": \"pragma solidity >=0.6.0;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/ownership/Ownable.sol\\\";\\r\\nimport \\\"./ReentrancyGuard.sol\\\";\\r\\n\\r\\ncontract PolkaBridgeLaunchPad is Ownable, ReentrancyGuard {\\r\\n    string public name = \\\"PolkaBridge: LaunchPad v2\\\";\\r\\n    using SafeMath for uint256;\\r\\n    using SafeERC20 for IERC20;\\r\\n\\r\\n    IERC20 polkaBridgeToken;\\r\\n\\r\\n    address payable private ReceiveToken;\\r\\n\\r\\n    struct IDOPool {\\r\\n        uint256 Id;\\r\\n        uint256 Begin;\\r\\n        uint256 End;\\r\\n        uint256 Type; //1:public, 2:private\\r\\n        uint256 AmountPBRRequire; //must e18,important when init\\r\\n        IERC20 IDOToken;\\r\\n        uint256 MinPurchase;\\r\\n        uint256 MaxPurchase;\\r\\n        uint256 TotalCap;\\r\\n        uint256 MinimumTokenSoldout;\\r\\n        uint256 TotalToken; //total sale token for this pool\\r\\n        uint256 RatePerETH;\\r\\n        bool IsActived;\\r\\n        bool IsStoped;\\r\\n        uint256 ActivedDate;\\r\\n        uint256 StopDate;\\r\\n        uint256 LockDuration; //lock after purchase\\r\\n        uint256 TotalSold; //total number of token sold\\r\\n    }\\r\\n\\r\\n    struct User {\\r\\n        uint256 Id;\\r\\n        address UserAddress;\\r\\n        bool IsWhitelist;\\r\\n        uint256 WhitelistDate;\\r\\n        uint256 TotalTokenPurchase;\\r\\n        uint256 TotalETHPurchase;\\r\\n        uint256 PurchaseTime;\\r\\n        bool IsActived;\\r\\n        bool IsClaimed;\\r\\n    }\\r\\n\\r\\n    mapping(uint256 => mapping(address => User)) public whitelist; //poolid - listuser\\r\\n\\r\\n    IDOPool[] pools;\\r\\n\\r\\n    constructor(address payable receiveTokenAdd, IERC20 polkaBridge) public {\\r\\n        ReceiveToken = receiveTokenAdd;\\r\\n        polkaBridgeToken = polkaBridge;\\r\\n    }\\r\\n\\r\\n    function addWhitelist(address user, uint256 pid) public onlyOwner {\\r\\n        whitelist[pid][user].Id = pid;\\r\\n        whitelist[pid][user].UserAddress = user;\\r\\n        whitelist[pid][user].IsWhitelist = true;\\r\\n        whitelist[pid][user].WhitelistDate = block.timestamp;\\r\\n        whitelist[pid][user].IsActived = true;\\r\\n    }\\r\\n\\r\\n    function addMulWhitelist(address[] memory user, uint256 pid)\\r\\n        public\\r\\n        onlyOwner\\r\\n    {\\r\\n        for (uint256 i = 0; i < user.length; i++) {\\r\\n            whitelist[pid][user[i]].Id = pid;\\r\\n            whitelist[pid][user[i]].UserAddress = user[i];\\r\\n            whitelist[pid][user[i]].IsWhitelist = true;\\r\\n            whitelist[pid][user[i]].WhitelistDate = block.timestamp;\\r\\n            whitelist[pid][user[i]].IsActived = true;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function updateWhitelist(\\r\\n        address user,\\r\\n        uint256 pid,\\r\\n        bool isWhitelist,\\r\\n        bool isActived\\r\\n    ) public onlyOwner {\\r\\n        whitelist[pid][user].IsWhitelist = isWhitelist;\\r\\n        whitelist[pid][user].IsActived = isActived;\\r\\n    }\\r\\n\\r\\n    function IsWhitelist(address user, uint256 pid) public view returns (bool) {\\r\\n        return whitelist[pid][user].IsWhitelist;\\r\\n    }\\r\\n\\r\\n    function addPool(\\r\\n        uint256 begin,\\r\\n        uint256 end,\\r\\n        uint256 _type,\\r\\n        IERC20 idoToken,\\r\\n        uint256 minPurchase,\\r\\n        uint256 maxPurchase,\\r\\n        uint256 totalCap,\\r\\n        uint256 totalToken,\\r\\n        uint256 amountPBRRequire,\\r\\n        uint256 ratePerETH,\\r\\n        uint256 lockDuration,\\r\\n        uint256 minimumTokenSoldout\\r\\n    ) public onlyOwner {\\r\\n        uint256 id = pools.length.add(1);\\r\\n        pools.push(\\r\\n            IDOPool({\\r\\n                Id: id,\\r\\n                Begin: begin,\\r\\n                End: end,\\r\\n                Type: _type,\\r\\n                AmountPBRRequire: amountPBRRequire,\\r\\n                IDOToken: idoToken,\\r\\n                MinPurchase: minPurchase,\\r\\n                MaxPurchase: maxPurchase,\\r\\n                TotalCap: totalCap,\\r\\n                TotalToken: totalToken,\\r\\n                RatePerETH: ratePerETH,\\r\\n                IsActived: true,\\r\\n                IsStoped: false,\\r\\n                ActivedDate: block.timestamp,\\r\\n                StopDate: 0,\\r\\n                LockDuration: lockDuration,\\r\\n                TotalSold: 0,\\r\\n                MinimumTokenSoldout: minimumTokenSoldout\\r\\n            })\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function updatePool(\\r\\n        uint256 pid,\\r\\n        uint256 begin,\\r\\n        uint256 end,\\r\\n        uint256 amountPBRRequire,\\r\\n        uint256 minPurchase,\\r\\n        uint256 maxPurchase,\\r\\n        uint256 totalCap,\\r\\n        uint256 totalToken,\\r\\n        uint256 ratePerETH,\\r\\n        uint256 lockDuration,\\r\\n        IERC20 idoToken,\\r\\n        uint256 minimumTokenSoldout\\r\\n    ) public onlyOwner {\\r\\n        uint256 poolIndex = pid.sub(1);\\r\\n        if (begin > 0) {\\r\\n            pools[poolIndex].Begin = begin;\\r\\n        }\\r\\n        if (end > 0) {\\r\\n            pools[poolIndex].End = end;\\r\\n        }\\r\\n        if (amountPBRRequire > 0) {\\r\\n            pools[poolIndex].AmountPBRRequire = amountPBRRequire;\\r\\n        }\\r\\n        if (minPurchase > 0) {\\r\\n            pools[poolIndex].MinPurchase = minPurchase;\\r\\n        }\\r\\n        if (maxPurchase > 0) {\\r\\n            pools[poolIndex].MaxPurchase = maxPurchase;\\r\\n        }\\r\\n        if (totalCap > 0) {\\r\\n            pools[poolIndex].TotalCap = totalCap;\\r\\n        }\\r\\n        if (totalToken > 0) {\\r\\n            pools[poolIndex].TotalToken = totalToken;\\r\\n        }\\r\\n        if (ratePerETH > 0) {\\r\\n            pools[poolIndex].RatePerETH = ratePerETH;\\r\\n        }\\r\\n        if (lockDuration > 0) {\\r\\n            pools[poolIndex].LockDuration = lockDuration;\\r\\n        }\\r\\n        if (minimumTokenSoldout > 0) {\\r\\n            pools[poolIndex].MinimumTokenSoldout = minimumTokenSoldout;\\r\\n        }\\r\\n        pools[poolIndex].IDOToken = idoToken;\\r\\n    }\\r\\n\\r\\n    function stopPool(uint256 pid) public onlyOwner {\\r\\n        uint256 poolIndex = pid.sub(1);\\r\\n        pools[poolIndex].IsActived = false;\\r\\n        pools[poolIndex].IsStoped = true;\\r\\n\\r\\n        pools[poolIndex].StopDate = block.timestamp;\\r\\n    }\\r\\n\\r\\n    function activePool(uint256 pid) public onlyOwner {\\r\\n        uint256 poolIndex = pid.sub(1);\\r\\n        pools[poolIndex].IsActived = true;\\r\\n        pools[poolIndex].IsStoped = false;\\r\\n\\r\\n        pools[poolIndex].StopDate = 0;\\r\\n    }\\r\\n\\r\\n    //withdraw contract token\\r\\n    //use for someone send token to contract\\r\\n    //recuse wrong user\\r\\n\\r\\n    function withdrawErc20(IERC20 token) public onlyOwner {\\r\\n        token.transfer(owner(), token.balanceOf(address(this)));\\r\\n    }\\r\\n\\r\\n    //withdraw ETH after IDO\\r\\n    function withdrawPoolFund() public onlyOwner {\\r\\n        uint256 balance = address(this).balance;\\r\\n        require(balance > 0, \\\"not enough fund\\\");\\r\\n        ReceiveToken.transfer(balance);\\r\\n    }\\r\\n\\r\\n    function purchaseIDO(uint256 pid) public payable nonReentrant {\\r\\n        uint256 poolIndex = pid.sub(1);\\r\\n\\r\\n        require(\\r\\n            pools[poolIndex].IsActived && !pools[poolIndex].IsStoped,\\r\\n            \\\"invalid pool\\\"\\r\\n        );\\r\\n        require(\\r\\n            block.timestamp >= pools[poolIndex].Begin &&\\r\\n                block.timestamp <= pools[poolIndex].End,\\r\\n            \\\"invalid time\\\"\\r\\n        );\\r\\n        //check user\\r\\n        require(\\r\\n            whitelist[pid][msg.sender].IsWhitelist &&\\r\\n                whitelist[pid][msg.sender].IsActived,\\r\\n            \\\"invalid user\\\"\\r\\n        );\\r\\n\\r\\n        //check amount\\r\\n        uint256 ethAmount = msg.value;\\r\\n        uint256 tokenAmount =\\r\\n            ethAmount.mul(pools[poolIndex].RatePerETH).div(1e18);\\r\\n\\r\\n        require(\\r\\n            ethAmount <= pools[poolIndex].MaxPurchase,\\r\\n            \\\"invalid maximum contribute\\\"\\r\\n        );\\r\\n\\r\\n        whitelist[pid][msg.sender].TotalETHPurchase = whitelist[pid][msg.sender]\\r\\n            .TotalETHPurchase\\r\\n            .add(ethAmount);\\r\\n        if (\\r\\n            whitelist[pid][msg.sender].TotalETHPurchase >\\r\\n            pools[poolIndex].MaxPurchase\\r\\n        ) {\\r\\n            revert(\\\"invalid maximum contribute\\\"); //already revert state\\r\\n        }\\r\\n\\r\\n        uint256 remainToken = getRemainIDOToken(pid);\\r\\n        require(\\r\\n            remainToken > pools[poolIndex].MinimumTokenSoldout,\\r\\n            \\\"IDO sold out\\\"\\r\\n        );\\r\\n        require(remainToken >= tokenAmount, \\\"IDO sold out\\\");\\r\\n\\r\\n        if (pools[poolIndex].Type == 2) //private, check hold PBR\\r\\n        {\\r\\n            require(\\r\\n                polkaBridgeToken.balanceOf(msg.sender) >=\\r\\n                    pools[poolIndex].AmountPBRRequire,\\r\\n                \\\"must hold enough PBR\\\"\\r\\n            );\\r\\n        }\\r\\n\\r\\n       \\r\\n\\r\\n        whitelist[pid][msg.sender].TotalTokenPurchase = whitelist[pid][\\r\\n            msg.sender\\r\\n        ]\\r\\n            .TotalTokenPurchase\\r\\n            .add(tokenAmount);\\r\\n\\r\\n        pools[poolIndex].TotalSold = pools[poolIndex].TotalSold.add(\\r\\n            tokenAmount\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function claimToken(uint256 pid) public nonReentrant {\\r\\n        require(!whitelist[pid][msg.sender].IsClaimed, \\\"user already claimed\\\");\\r\\n        uint256 poolIndex = pid.sub(1);\\r\\n\\r\\n        require(\\r\\n            block.timestamp >=\\r\\n                pools[poolIndex].End.add(pools[poolIndex].LockDuration),\\r\\n            \\\"not on time for claiming token\\\"\\r\\n        );\\r\\n\\r\\n        uint256 userBalance = getUserTotalPurchase(pid);\\r\\n\\r\\n        require(userBalance > 0, \\\"invalid claim\\\");\\r\\n\\r\\n        pools[poolIndex].IDOToken.transfer(msg.sender, userBalance);\\r\\n        whitelist[pid][msg.sender].IsClaimed = true;\\r\\n    }\\r\\n\\r\\n    function getUserTotalPurchase(uint256 pid) public view returns (uint256) {\\r\\n        return whitelist[pid][msg.sender].TotalTokenPurchase;\\r\\n    }\\r\\n\\r\\n    function getRemainIDOToken(uint256 pid) public view returns (uint256) {\\r\\n        uint256 poolIndex = pid.sub(1);\\r\\n        uint256 tokenBalance = getBalanceTokenByPoolId(pid);\\r\\n        if (pools[poolIndex].TotalSold > tokenBalance) {\\r\\n            return 0;\\r\\n        }\\r\\n\\r\\n        return tokenBalance.sub(pools[poolIndex].TotalSold);\\r\\n    }\\r\\n\\r\\n    function getBalanceTokenByPoolId(uint256 pid)\\r\\n        public\\r\\n        view\\r\\n        returns (uint256)\\r\\n    {\\r\\n        uint256 poolIndex = pid.sub(1);\\r\\n        //return pools[poolIndex].IDOToken.balanceOf(address(this));\\r\\n        return pools[poolIndex].TotalToken;\\r\\n    }\\r\\n\\r\\n    function getPoolInfo(uint256 pid)\\r\\n        public\\r\\n        view\\r\\n        returns (\\r\\n            uint256,\\r\\n            uint256,\\r\\n            uint256,\\r\\n            uint256,\\r\\n            uint256,\\r\\n            uint256,\\r\\n            uint256,\\r\\n            uint256,\\r\\n            bool,\\r\\n            IERC20\\r\\n        )\\r\\n    {\\r\\n        uint256 poolIndex = pid.sub(1);\\r\\n        return (\\r\\n            pools[poolIndex].Begin,\\r\\n            pools[poolIndex].End,\\r\\n            pools[poolIndex].Type,\\r\\n            pools[poolIndex].AmountPBRRequire,\\r\\n            pools[poolIndex].MaxPurchase,\\r\\n            pools[poolIndex].RatePerETH,\\r\\n            pools[poolIndex].LockDuration,\\r\\n            pools[poolIndex].TotalSold,\\r\\n            pools[poolIndex].IsActived,\\r\\n            pools[poolIndex].IDOToken\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function getPoolSoldInfo(uint256 pid)\\r\\n        public\\r\\n        view\\r\\n        returns (uint256, uint256)\\r\\n    {\\r\\n        uint256 poolIndex = pid.sub(1);\\r\\n        return (pools[poolIndex].LockDuration, pools[poolIndex].TotalSold);\\r\\n    }\\r\\n\\r\\n    function getWhitelistfo(uint256 pid)\\r\\n        public\\r\\n        view\\r\\n        returns (\\r\\n            address,\\r\\n            bool,\\r\\n            uint256,\\r\\n            uint256,\\r\\n            uint256,\\r\\n            bool\\r\\n        )\\r\\n    {\\r\\n        return (\\r\\n            whitelist[pid][msg.sender].UserAddress,\\r\\n            whitelist[pid][msg.sender].IsWhitelist,\\r\\n            whitelist[pid][msg.sender].WhitelistDate,\\r\\n            whitelist[pid][msg.sender].TotalTokenPurchase,\\r\\n            whitelist[pid][msg.sender].TotalETHPurchase,\\r\\n            whitelist[pid][msg.sender].IsClaimed\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function getUserInfo(uint256 pid, address user)\\r\\n        public\\r\\n        view\\r\\n        returns (\\r\\n            bool,\\r\\n            uint256,\\r\\n            uint256,\\r\\n            uint256,\\r\\n            bool\\r\\n        )\\r\\n    {\\r\\n        return (\\r\\n            whitelist[pid][user].IsWhitelist,\\r\\n            whitelist[pid][user].WhitelistDate,\\r\\n            whitelist[pid][user].TotalTokenPurchase,\\r\\n            whitelist[pid][user].TotalETHPurchase,\\r\\n            whitelist[pid][user].IsClaimed\\r\\n        );\\r\\n    }\\r\\n}\\r\\n\"\r\n    },\r\n    \"/C/Users/thanhphi/Desktop/PolkaBridgeSolution/PolkaBridge-LaunchPad/contracts/ReentrancyGuard.sol\": {\r\n      \"content\": \"pragma solidity >=0.6.0;\\r\\n\\r\\nabstract contract ReentrancyGuard {\\r\\n    uint256 private constant _NOT_ENTERED = 1;\\r\\n    uint256 private constant _ENTERED = 2;\\r\\n\\r\\n    uint256 private _status;\\r\\n\\r\\n    constructor() internal {\\r\\n        _status = _NOT_ENTERED;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\r\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\r\\n     * function is not supported. It is possible to prevent this from happening\\r\\n     * by making the `nonReentrant` function external, and make it call a\\r\\n     * `private` function that does the actual work.\\r\\n     */\\r\\n    modifier nonReentrant() {\\r\\n        // On the first call to nonReentrant, _notEntered will be true\\r\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\r\\n\\r\\n        // Any calls to nonReentrant after this point will fail\\r\\n        _status = _ENTERED;\\r\\n\\r\\n        _;\\r\\n\\r\\n        // By storing the original value once again, a refund is triggered (see\\r\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\r\\n        _status = _NOT_ENTERED;\\r\\n    }\\r\\n}\\r\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/GSN/Context.sol\": {\r\n      \"content\": \"pragma solidity ^0.6.0;\\n\\n\\ncontract Context {\\n  \\n    constructor () internal { }\\n\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/math/SafeMath.sol\": {\r\n      \"content\": \"pragma solidity ^0.6.0;\\n\\nlibrary SafeMath {\\n   \\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n\\n        return c;\\n    }\\n\\n   \\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return sub(a, b, \\\"SafeMath: subtraction overflow\\\");\\n    }\\n\\n    \\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        uint256 c = a - b;\\n\\n        return c;\\n    }\\n\\n   \\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n\\n        return c;\\n    }\\n\\n    \\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\n    }\\n\\n    \\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        // Solidity only automatically asserts when dividing by 0\\n        require(b > 0, errorMessage);\\n        uint256 c = a / b;\\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\n\\n        return c;\\n    }\\n\\n    \\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return mod(a, b, \\\"SafeMath: modulo by zero\\\");\\n    }\\n\\n    \\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b != 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/ownership/Ownable.sol\": {\r\n      \"content\": \"pragma solidity ^0.6.0;\\n\\nimport \\\"../GSN/Context.sol\\\";\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\ncontract Ownable is Context {\\n    address  private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor () internal {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(isOwner(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns true if the caller is the current owner.\\n     */\\n    function isOwner() public view returns (bool) {\\n        return _msgSender() == _owner;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"pragma solidity ^0.6.0;\\n\\n\\ninterface IERC20 {\\n   \\n    function totalSupply() external view returns (uint256);\\n\\n  \\n    function balanceOf(address account) external view returns (uint256);\\n\\n    \\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n   \\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    \\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    \\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    \\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    \\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\": {\r\n      \"content\": \"pragma solidity ^0.6.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"../../math/SafeMath.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for ERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using SafeMath for uint256;\\n    using Address for address;\\n\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        // solhint-disable-next-line max-line-length\\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\\n        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \\\"SafeERC20: decreased allowance below zero\\\");\\n        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves.\\n\\n        // A Solidity high level call has three parts:\\n        //  1. The target address is checked to verify it contains contract code\\n        //  2. The call itself is made, and success asserted\\n        //  3. The return value is decoded, which in turn checks the size of the returned data.\\n        // solhint-disable-next-line max-line-length\\n        require(address(token).isContract(), \\\"SafeERC20: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = address(token).call(data);\\n        require(success, \\\"SafeERC20: low-level call failed\\\");\\n\\n        if (returndata.length > 0) { // Return data is optional\\n            // solhint-disable-next-line max-line-length\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"pragma solidity ^0.6.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\\n        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\\n        // for accounts without code, i.e. `keccak256('')`\\n        bytes32 codehash;\\n        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { codehash := extcodehash(account) }\\n        return (codehash != accountHash && codehash != 0x0);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` into `address payable`. Note that this is\\n     * simply a type cast: the actual underlying value is not changed.\\n     *\\n     * _Available since v2.4.0._\\n     */\\n    function toPayable(address account) internal pure returns (address payable) {\\n        return address(uint160(account));\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     *\\n     * _Available since v2.4.0._\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call.value(amount)(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"remappings\": [],\r\n    \"optimizer\": {\r\n      \"enabled\": false,\r\n      \"runs\": 200\r\n    },\r\n    \"evmVersion\": \"istanbul\",\r\n    \"libraries\": {},\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}","ABI":"[{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"receiveTokenAdd\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"polkaBridge\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"}],\"name\":\"IsWhitelist\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"}],\"name\":\"activePool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"user\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"}],\"name\":\"addMulWhitelist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"begin\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"end\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_type\",\"type\":\"uint256\"},{\"internalType\":\"contract IERC20\",\"name\":\"idoToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"minPurchase\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxPurchase\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalCap\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalToken\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountPBRRequire\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"ratePerETH\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lockDuration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minimumTokenSoldout\",\"type\":\"uint256\"}],\"name\":\"addPool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"}],\"name\":\"addWhitelist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"}],\"name\":\"claimToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"}],\"name\":\"getBalanceTokenByPoolId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"}],\"name\":\"getPoolInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"},{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"}],\"name\":\"getPoolSoldInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"}],\"name\":\"getRemainIDOToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getUserInfo\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"}],\"name\":\"getUserTotalPurchase\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"}],\"name\":\"getWhitelistfo\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isOwner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"}],\"name\":\"purchaseIDO\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"}],\"name\":\"stopPool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"begin\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"end\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountPBRRequire\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minPurchase\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxPurchase\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalCap\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalToken\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"ratePerETH\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lockDuration\",\"type\":\"uint256\"},{\"internalType\":\"contract IERC20\",\"name\":\"idoToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"minimumTokenSoldout\",\"type\":\"uint256\"}],\"name\":\"updatePool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isWhitelist\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isActived\",\"type\":\"bool\"}],\"name\":\"updateWhitelist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"whitelist\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"Id\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"UserAddress\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"IsWhitelist\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"WhitelistDate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"TotalTokenPurchase\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"TotalETHPurchase\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"PurchaseTime\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"IsActived\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"IsClaimed\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"withdrawErc20\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawPoolFund\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"PolkaBridgeLaunchPad","CompilerVersion":"v0.6.2+commit.bacdbe57","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"00000000000000000000000057866ed63ca5f9744cef9aa270bd1f1dce935831000000000000000000000000298d492e8c1d909d3f63bc4a36c66c64acb3d695","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}