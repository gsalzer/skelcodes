{"status":"1","message":"OK","result":[{"SourceCode":"// File: @openzeppelin/contracts/math/SafeMath.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     * - Subtraction cannot overflow.\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        // Solidity only automatically asserts when dividing by 0\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts with custom message when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n// File: contracts/src/common/libs/Decimals.sol\r\n\r\npragma solidity 0.5.17;\r\n\r\n\r\n/**\r\n * Library for emulating calculations involving decimals.\r\n */\r\nlibrary Decimals {\r\n\tusing SafeMath for uint256;\r\n\tuint120 private constant BASIS_VAKUE = 1000000000000000000;\r\n\r\n\t/**\r\n\t * @dev Returns the ratio of the first argument to the second argument.\r\n\t * @param _a Numerator.\r\n\t * @param _b Fraction.\r\n\t * @return Calculated ratio.\r\n\t */\r\n\tfunction outOf(uint256 _a, uint256 _b)\r\n\t\tinternal\r\n\t\tpure\r\n\t\treturns (uint256 result)\r\n\t{\r\n\t\tif (_a == 0) {\r\n\t\t\treturn 0;\r\n\t\t}\r\n\t\tuint256 a = _a.mul(BASIS_VAKUE);\r\n\t\tif (a < _b) {\r\n\t\t\treturn 0;\r\n\t\t}\r\n\t\treturn (a.div(_b));\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Returns multiplied the number by 10^18.\r\n\t * @param _a Numerical value to be multiplied.\r\n\t * @return Multiplied value.\r\n\t */\r\n\tfunction mulBasis(uint256 _a) internal pure returns (uint256) {\r\n\t\treturn _a.mul(BASIS_VAKUE);\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Returns divisioned the number by 10^18.\r\n\t * This function can use it to restore the number of digits in the result of `outOf`.\r\n\t * @param _a Numerical value to be divisioned.\r\n\t * @return Divisioned value.\r\n\t */\r\n\tfunction divBasis(uint256 _a) internal pure returns (uint256) {\r\n\t\treturn _a.div(BASIS_VAKUE);\r\n\t}\r\n}\r\n\r\n// File: contracts/interface/IAddressConfig.sol\r\n\r\n// SPDX-License-Identifier: MPL-2.0\r\npragma solidity >=0.5.17;\r\n\r\ninterface IAddressConfig {\r\n\tfunction token() external view returns (address);\r\n\r\n\tfunction allocator() external view returns (address);\r\n\r\n\tfunction allocatorStorage() external view returns (address);\r\n\r\n\tfunction withdraw() external view returns (address);\r\n\r\n\tfunction withdrawStorage() external view returns (address);\r\n\r\n\tfunction marketFactory() external view returns (address);\r\n\r\n\tfunction marketGroup() external view returns (address);\r\n\r\n\tfunction propertyFactory() external view returns (address);\r\n\r\n\tfunction propertyGroup() external view returns (address);\r\n\r\n\tfunction metricsGroup() external view returns (address);\r\n\r\n\tfunction metricsFactory() external view returns (address);\r\n\r\n\tfunction policy() external view returns (address);\r\n\r\n\tfunction policyFactory() external view returns (address);\r\n\r\n\tfunction policySet() external view returns (address);\r\n\r\n\tfunction policyGroup() external view returns (address);\r\n\r\n\tfunction lockup() external view returns (address);\r\n\r\n\tfunction lockupStorage() external view returns (address);\r\n\r\n\tfunction voteTimes() external view returns (address);\r\n\r\n\tfunction voteTimesStorage() external view returns (address);\r\n\r\n\tfunction voteCounter() external view returns (address);\r\n\r\n\tfunction voteCounterStorage() external view returns (address);\r\n\r\n\tfunction setAllocator(address _addr) external;\r\n\r\n\tfunction setAllocatorStorage(address _addr) external;\r\n\r\n\tfunction setWithdraw(address _addr) external;\r\n\r\n\tfunction setWithdrawStorage(address _addr) external;\r\n\r\n\tfunction setMarketFactory(address _addr) external;\r\n\r\n\tfunction setMarketGroup(address _addr) external;\r\n\r\n\tfunction setPropertyFactory(address _addr) external;\r\n\r\n\tfunction setPropertyGroup(address _addr) external;\r\n\r\n\tfunction setMetricsFactory(address _addr) external;\r\n\r\n\tfunction setMetricsGroup(address _addr) external;\r\n\r\n\tfunction setPolicyFactory(address _addr) external;\r\n\r\n\tfunction setPolicyGroup(address _addr) external;\r\n\r\n\tfunction setPolicySet(address _addr) external;\r\n\r\n\tfunction setPolicy(address _addr) external;\r\n\r\n\tfunction setToken(address _addr) external;\r\n\r\n\tfunction setLockup(address _addr) external;\r\n\r\n\tfunction setLockupStorage(address _addr) external;\r\n\r\n\tfunction setVoteTimes(address _addr) external;\r\n\r\n\tfunction setVoteTimesStorage(address _addr) external;\r\n\r\n\tfunction setVoteCounter(address _addr) external;\r\n\r\n\tfunction setVoteCounterStorage(address _addr) external;\r\n}\r\n\r\n// File: contracts/src/common/config/UsingConfig.sol\r\n\r\npragma solidity 0.5.17;\r\n\r\n\r\n/**\r\n * Module for using AddressConfig contracts.\r\n */\r\ncontract UsingConfig {\r\n\taddress private _config;\r\n\r\n\t/**\r\n\t * Initialize the argument as AddressConfig address.\r\n\t */\r\n\tconstructor(address _addressConfig) public {\r\n\t\t_config = _addressConfig;\r\n\t}\r\n\r\n\t/**\r\n\t * Returns the latest AddressConfig instance.\r\n\t */\r\n\tfunction config() internal view returns (IAddressConfig) {\r\n\t\treturn IAddressConfig(_config);\r\n\t}\r\n\r\n\t/**\r\n\t * Returns the latest AddressConfig address.\r\n\t */\r\n\tfunction configAddress() external view returns (address) {\r\n\t\treturn _config;\r\n\t}\r\n}\r\n\r\n// File: contracts/interface/IUsingStorage.sol\r\n\r\n// SPDX-License-Identifier: MPL-2.0\r\npragma solidity >=0.5.17;\r\n\r\ninterface IUsingStorage {\r\n\tfunction getStorageAddress() external view returns (address);\r\n\r\n\tfunction createStorage() external;\r\n\r\n\tfunction setStorage(address _storageAddress) external;\r\n\r\n\tfunction changeOwner(address newOwner) external;\r\n}\r\n\r\n// File: @openzeppelin/contracts/GSN/Context.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n/*\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with GSN meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\ncontract Context {\r\n    // Empty internal constructor, to prevent people from mistakenly deploying\r\n    // an instance of this contract, which should be used via inheritance.\r\n    constructor () internal { }\r\n    // solhint-disable-previous-line no-empty-blocks\r\n\r\n    function _msgSender() internal view returns (address payable) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view returns (bytes memory) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/ownership/Ownable.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\ncontract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor () internal {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(isOwner(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the caller is the current owner.\r\n     */\r\n    function isOwner() public view returns (bool) {\r\n        return _msgSender() == _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     */\r\n    function _transferOwnership(address newOwner) internal {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\n// File: contracts/src/common/storage/EternalStorage.sol\r\n\r\npragma solidity 0.5.17;\r\n\r\n/**\r\n * Module for persisting states.\r\n * Stores a map for `uint256`, `string`, `address`, `bytes32`, `bool`, and `int256` type with `bytes32` type as a key.\r\n */\r\ncontract EternalStorage {\r\n\taddress private currentOwner = msg.sender;\r\n\r\n\tmapping(bytes32 => uint256) private uIntStorage;\r\n\tmapping(bytes32 => string) private stringStorage;\r\n\tmapping(bytes32 => address) private addressStorage;\r\n\tmapping(bytes32 => bytes32) private bytesStorage;\r\n\tmapping(bytes32 => bool) private boolStorage;\r\n\tmapping(bytes32 => int256) private intStorage;\r\n\r\n\t/**\r\n\t * Modifiers to validate that only the owner can execute.\r\n\t */\r\n\tmodifier onlyCurrentOwner() {\r\n\t\trequire(msg.sender == currentOwner, \"not current owner\");\r\n\t\t_;\r\n\t}\r\n\r\n\t/**\r\n\t * Transfer the owner.\r\n\t * Only the owner can execute this function.\r\n\t */\r\n\tfunction changeOwner(address _newOwner) external {\r\n\t\trequire(msg.sender == currentOwner, \"not current owner\");\r\n\t\tcurrentOwner = _newOwner;\r\n\t}\r\n\r\n\t// *** Getter Methods ***\r\n\r\n\t/**\r\n\t * Returns the value of the `uint256` type that mapped to the given key.\r\n\t */\r\n\tfunction getUint(bytes32 _key) external view returns (uint256) {\r\n\t\treturn uIntStorage[_key];\r\n\t}\r\n\r\n\t/**\r\n\t * Returns the value of the `string` type that mapped to the given key.\r\n\t */\r\n\tfunction getString(bytes32 _key) external view returns (string memory) {\r\n\t\treturn stringStorage[_key];\r\n\t}\r\n\r\n\t/**\r\n\t * Returns the value of the `address` type that mapped to the given key.\r\n\t */\r\n\tfunction getAddress(bytes32 _key) external view returns (address) {\r\n\t\treturn addressStorage[_key];\r\n\t}\r\n\r\n\t/**\r\n\t * Returns the value of the `bytes32` type that mapped to the given key.\r\n\t */\r\n\tfunction getBytes(bytes32 _key) external view returns (bytes32) {\r\n\t\treturn bytesStorage[_key];\r\n\t}\r\n\r\n\t/**\r\n\t * Returns the value of the `bool` type that mapped to the given key.\r\n\t */\r\n\tfunction getBool(bytes32 _key) external view returns (bool) {\r\n\t\treturn boolStorage[_key];\r\n\t}\r\n\r\n\t/**\r\n\t * Returns the value of the `int256` type that mapped to the given key.\r\n\t */\r\n\tfunction getInt(bytes32 _key) external view returns (int256) {\r\n\t\treturn intStorage[_key];\r\n\t}\r\n\r\n\t// *** Setter Methods ***\r\n\r\n\t/**\r\n\t * Maps a value of `uint256` type to a given key.\r\n\t * Only the owner can execute this function.\r\n\t */\r\n\tfunction setUint(bytes32 _key, uint256 _value) external onlyCurrentOwner {\r\n\t\tuIntStorage[_key] = _value;\r\n\t}\r\n\r\n\t/**\r\n\t * Maps a value of `string` type to a given key.\r\n\t * Only the owner can execute this function.\r\n\t */\r\n\tfunction setString(bytes32 _key, string calldata _value)\r\n\t\texternal\r\n\t\tonlyCurrentOwner\r\n\t{\r\n\t\tstringStorage[_key] = _value;\r\n\t}\r\n\r\n\t/**\r\n\t * Maps a value of `address` type to a given key.\r\n\t * Only the owner can execute this function.\r\n\t */\r\n\tfunction setAddress(bytes32 _key, address _value)\r\n\t\texternal\r\n\t\tonlyCurrentOwner\r\n\t{\r\n\t\taddressStorage[_key] = _value;\r\n\t}\r\n\r\n\t/**\r\n\t * Maps a value of `bytes32` type to a given key.\r\n\t * Only the owner can execute this function.\r\n\t */\r\n\tfunction setBytes(bytes32 _key, bytes32 _value) external onlyCurrentOwner {\r\n\t\tbytesStorage[_key] = _value;\r\n\t}\r\n\r\n\t/**\r\n\t * Maps a value of `bool` type to a given key.\r\n\t * Only the owner can execute this function.\r\n\t */\r\n\tfunction setBool(bytes32 _key, bool _value) external onlyCurrentOwner {\r\n\t\tboolStorage[_key] = _value;\r\n\t}\r\n\r\n\t/**\r\n\t * Maps a value of `int256` type to a given key.\r\n\t * Only the owner can execute this function.\r\n\t */\r\n\tfunction setInt(bytes32 _key, int256 _value) external onlyCurrentOwner {\r\n\t\tintStorage[_key] = _value;\r\n\t}\r\n\r\n\t// *** Delete Methods ***\r\n\r\n\t/**\r\n\t * Deletes the value of the `uint256` type that mapped to the given key.\r\n\t * Only the owner can execute this function.\r\n\t */\r\n\tfunction deleteUint(bytes32 _key) external onlyCurrentOwner {\r\n\t\tdelete uIntStorage[_key];\r\n\t}\r\n\r\n\t/**\r\n\t * Deletes the value of the `string` type that mapped to the given key.\r\n\t * Only the owner can execute this function.\r\n\t */\r\n\tfunction deleteString(bytes32 _key) external onlyCurrentOwner {\r\n\t\tdelete stringStorage[_key];\r\n\t}\r\n\r\n\t/**\r\n\t * Deletes the value of the `address` type that mapped to the given key.\r\n\t * Only the owner can execute this function.\r\n\t */\r\n\tfunction deleteAddress(bytes32 _key) external onlyCurrentOwner {\r\n\t\tdelete addressStorage[_key];\r\n\t}\r\n\r\n\t/**\r\n\t * Deletes the value of the `bytes32` type that mapped to the given key.\r\n\t * Only the owner can execute this function.\r\n\t */\r\n\tfunction deleteBytes(bytes32 _key) external onlyCurrentOwner {\r\n\t\tdelete bytesStorage[_key];\r\n\t}\r\n\r\n\t/**\r\n\t * Deletes the value of the `bool` type that mapped to the given key.\r\n\t * Only the owner can execute this function.\r\n\t */\r\n\tfunction deleteBool(bytes32 _key) external onlyCurrentOwner {\r\n\t\tdelete boolStorage[_key];\r\n\t}\r\n\r\n\t/**\r\n\t * Deletes the value of the `int256` type that mapped to the given key.\r\n\t * Only the owner can execute this function.\r\n\t */\r\n\tfunction deleteInt(bytes32 _key) external onlyCurrentOwner {\r\n\t\tdelete intStorage[_key];\r\n\t}\r\n}\r\n\r\n// File: contracts/src/common/storage/UsingStorage.sol\r\n\r\npragma solidity 0.5.17;\r\n\r\n\r\n\r\n\r\n/**\r\n * Module for contrast handling EternalStorage.\r\n */\r\ncontract UsingStorage is Ownable, IUsingStorage {\r\n\taddress private _storage;\r\n\r\n\t/**\r\n\t * Modifier to verify that EternalStorage is set.\r\n\t */\r\n\tmodifier hasStorage() {\r\n\t\trequire(_storage != address(0), \"storage is not set\");\r\n\t\t_;\r\n\t}\r\n\r\n\t/**\r\n\t * Returns the set EternalStorage instance.\r\n\t */\r\n\tfunction eternalStorage()\r\n\t\tinternal\r\n\t\tview\r\n\t\thasStorage\r\n\t\treturns (EternalStorage)\r\n\t{\r\n\t\treturn EternalStorage(_storage);\r\n\t}\r\n\r\n\t/**\r\n\t * Returns the set EternalStorage address.\r\n\t */\r\n\tfunction getStorageAddress() external view hasStorage returns (address) {\r\n\t\treturn _storage;\r\n\t}\r\n\r\n\t/**\r\n\t * Create a new EternalStorage contract.\r\n\t * This function call will fail if the EternalStorage contract is already set.\r\n\t * Also, only the owner can execute it.\r\n\t */\r\n\tfunction createStorage() external onlyOwner {\r\n\t\trequire(_storage == address(0), \"storage is set\");\r\n\t\tEternalStorage tmp = new EternalStorage();\r\n\t\t_storage = address(tmp);\r\n\t}\r\n\r\n\t/**\r\n\t * Assigns the EternalStorage contract that has already been created.\r\n\t * Only the owner can execute this function.\r\n\t */\r\n\tfunction setStorage(address _storageAddress) external onlyOwner {\r\n\t\t_storage = _storageAddress;\r\n\t}\r\n\r\n\t/**\r\n\t * Delegates the owner of the current EternalStorage contract.\r\n\t * Only the owner can execute this function.\r\n\t */\r\n\tfunction changeOwner(address newOwner) external onlyOwner {\r\n\t\tEternalStorage(_storage).changeOwner(newOwner);\r\n\t}\r\n}\r\n\r\n// File: contracts/src/lockup/LockupStorage.sol\r\n\r\npragma solidity 0.5.17;\r\n\r\n\r\n\r\ncontract LockupStorage is UsingStorage {\r\n\tusing SafeMath for uint256;\r\n\r\n\tuint256 private constant BASIS = 100000000000000000000000000000000;\r\n\r\n\t//AllValue\r\n\tfunction setStorageAllValue(uint256 _value) internal {\r\n\t\tbytes32 key = getStorageAllValueKey();\r\n\t\teternalStorage().setUint(key, _value);\r\n\t}\r\n\r\n\tfunction getStorageAllValue() public view returns (uint256) {\r\n\t\tbytes32 key = getStorageAllValueKey();\r\n\t\treturn eternalStorage().getUint(key);\r\n\t}\r\n\r\n\tfunction getStorageAllValueKey() private pure returns (bytes32) {\r\n\t\treturn keccak256(abi.encodePacked(\"_allValue\"));\r\n\t}\r\n\r\n\t//Value\r\n\tfunction setStorageValue(\r\n\t\taddress _property,\r\n\t\taddress _sender,\r\n\t\tuint256 _value\r\n\t) internal {\r\n\t\tbytes32 key = getStorageValueKey(_property, _sender);\r\n\t\teternalStorage().setUint(key, _value);\r\n\t}\r\n\r\n\tfunction getStorageValue(address _property, address _sender)\r\n\t\tpublic\r\n\t\tview\r\n\t\treturns (uint256)\r\n\t{\r\n\t\tbytes32 key = getStorageValueKey(_property, _sender);\r\n\t\treturn eternalStorage().getUint(key);\r\n\t}\r\n\r\n\tfunction getStorageValueKey(address _property, address _sender)\r\n\t\tprivate\r\n\t\tpure\r\n\t\treturns (bytes32)\r\n\t{\r\n\t\treturn keccak256(abi.encodePacked(\"_value\", _property, _sender));\r\n\t}\r\n\r\n\t//PropertyValue\r\n\tfunction setStoragePropertyValue(address _property, uint256 _value)\r\n\t\tinternal\r\n\t{\r\n\t\tbytes32 key = getStoragePropertyValueKey(_property);\r\n\t\teternalStorage().setUint(key, _value);\r\n\t}\r\n\r\n\tfunction getStoragePropertyValue(address _property)\r\n\t\tpublic\r\n\t\tview\r\n\t\treturns (uint256)\r\n\t{\r\n\t\tbytes32 key = getStoragePropertyValueKey(_property);\r\n\t\treturn eternalStorage().getUint(key);\r\n\t}\r\n\r\n\tfunction getStoragePropertyValueKey(address _property)\r\n\t\tprivate\r\n\t\tpure\r\n\t\treturns (bytes32)\r\n\t{\r\n\t\treturn keccak256(abi.encodePacked(\"_propertyValue\", _property));\r\n\t}\r\n\r\n\t//InterestPrice\r\n\tfunction setStorageInterestPrice(address _property, uint256 _value)\r\n\t\tinternal\r\n\t{\r\n\t\t// The previously used function\r\n\t\t// This function is only used in testing\r\n\t\teternalStorage().setUint(getStorageInterestPriceKey(_property), _value);\r\n\t}\r\n\r\n\tfunction getStorageInterestPrice(address _property)\r\n\t\tpublic\r\n\t\tview\r\n\t\treturns (uint256)\r\n\t{\r\n\t\treturn eternalStorage().getUint(getStorageInterestPriceKey(_property));\r\n\t}\r\n\r\n\tfunction getStorageInterestPriceKey(address _property)\r\n\t\tprivate\r\n\t\tpure\r\n\t\treturns (bytes32)\r\n\t{\r\n\t\treturn keccak256(abi.encodePacked(\"_interestTotals\", _property));\r\n\t}\r\n\r\n\t//LastInterestPrice\r\n\tfunction setStorageLastInterestPrice(\r\n\t\taddress _property,\r\n\t\taddress _user,\r\n\t\tuint256 _value\r\n\t) internal {\r\n\t\teternalStorage().setUint(\r\n\t\t\tgetStorageLastInterestPriceKey(_property, _user),\r\n\t\t\t_value\r\n\t\t);\r\n\t}\r\n\r\n\tfunction getStorageLastInterestPrice(address _property, address _user)\r\n\t\tpublic\r\n\t\tview\r\n\t\treturns (uint256)\r\n\t{\r\n\t\treturn\r\n\t\t\teternalStorage().getUint(\r\n\t\t\t\tgetStorageLastInterestPriceKey(_property, _user)\r\n\t\t\t);\r\n\t}\r\n\r\n\tfunction getStorageLastInterestPriceKey(address _property, address _user)\r\n\t\tprivate\r\n\t\tpure\r\n\t\treturns (bytes32)\r\n\t{\r\n\t\treturn\r\n\t\t\tkeccak256(\r\n\t\t\t\tabi.encodePacked(\"_lastLastInterestPrice\", _property, _user)\r\n\t\t\t);\r\n\t}\r\n\r\n\t//LastSameRewardsAmountAndBlock\r\n\tfunction setStorageLastSameRewardsAmountAndBlock(\r\n\t\tuint256 _amount,\r\n\t\tuint256 _block\r\n\t) internal {\r\n\t\tuint256 record = _amount.mul(BASIS).add(_block);\r\n\t\teternalStorage().setUint(\r\n\t\t\tgetStorageLastSameRewardsAmountAndBlockKey(),\r\n\t\t\trecord\r\n\t\t);\r\n\t}\r\n\r\n\tfunction getStorageLastSameRewardsAmountAndBlock()\r\n\t\tpublic\r\n\t\tview\r\n\t\treturns (uint256 _amount, uint256 _block)\r\n\t{\r\n\t\tuint256 record = eternalStorage().getUint(\r\n\t\t\tgetStorageLastSameRewardsAmountAndBlockKey()\r\n\t\t);\r\n\t\tuint256 amount = record.div(BASIS);\r\n\t\tuint256 blockNumber = record.sub(amount.mul(BASIS));\r\n\t\treturn (amount, blockNumber);\r\n\t}\r\n\r\n\tfunction getStorageLastSameRewardsAmountAndBlockKey()\r\n\t\tprivate\r\n\t\tpure\r\n\t\treturns (bytes32)\r\n\t{\r\n\t\treturn keccak256(abi.encodePacked(\"_LastSameRewardsAmountAndBlock\"));\r\n\t}\r\n\r\n\t//CumulativeGlobalRewards\r\n\tfunction setStorageCumulativeGlobalRewards(uint256 _value) internal {\r\n\t\teternalStorage().setUint(\r\n\t\t\tgetStorageCumulativeGlobalRewardsKey(),\r\n\t\t\t_value\r\n\t\t);\r\n\t}\r\n\r\n\tfunction getStorageCumulativeGlobalRewards() public view returns (uint256) {\r\n\t\treturn eternalStorage().getUint(getStorageCumulativeGlobalRewardsKey());\r\n\t}\r\n\r\n\tfunction getStorageCumulativeGlobalRewardsKey()\r\n\t\tprivate\r\n\t\tpure\r\n\t\treturns (bytes32)\r\n\t{\r\n\t\treturn keccak256(abi.encodePacked(\"_cumulativeGlobalRewards\"));\r\n\t}\r\n\r\n\t//PendingWithdrawal\r\n\tfunction setStoragePendingInterestWithdrawal(\r\n\t\taddress _property,\r\n\t\taddress _user,\r\n\t\tuint256 _value\r\n\t) internal {\r\n\t\teternalStorage().setUint(\r\n\t\t\tgetStoragePendingInterestWithdrawalKey(_property, _user),\r\n\t\t\t_value\r\n\t\t);\r\n\t}\r\n\r\n\tfunction getStoragePendingInterestWithdrawal(\r\n\t\taddress _property,\r\n\t\taddress _user\r\n\t) public view returns (uint256) {\r\n\t\treturn\r\n\t\t\teternalStorage().getUint(\r\n\t\t\t\tgetStoragePendingInterestWithdrawalKey(_property, _user)\r\n\t\t\t);\r\n\t}\r\n\r\n\tfunction getStoragePendingInterestWithdrawalKey(\r\n\t\taddress _property,\r\n\t\taddress _user\r\n\t) private pure returns (bytes32) {\r\n\t\treturn\r\n\t\t\tkeccak256(\r\n\t\t\t\tabi.encodePacked(\"_pendingInterestWithdrawal\", _property, _user)\r\n\t\t\t);\r\n\t}\r\n\r\n\t//DIP4GenesisBlock\r\n\tfunction setStorageDIP4GenesisBlock(uint256 _block) internal {\r\n\t\teternalStorage().setUint(getStorageDIP4GenesisBlockKey(), _block);\r\n\t}\r\n\r\n\tfunction getStorageDIP4GenesisBlock() public view returns (uint256) {\r\n\t\treturn eternalStorage().getUint(getStorageDIP4GenesisBlockKey());\r\n\t}\r\n\r\n\tfunction getStorageDIP4GenesisBlockKey() private pure returns (bytes32) {\r\n\t\treturn keccak256(abi.encodePacked(\"_dip4GenesisBlock\"));\r\n\t}\r\n\r\n\t//lastStakedInterestPrice\r\n\tfunction setStorageLastStakedInterestPrice(\r\n\t\taddress _property,\r\n\t\taddress _user,\r\n\t\tuint256 _value\r\n\t) internal {\r\n\t\teternalStorage().setUint(\r\n\t\t\tgetStorageLastStakedInterestPriceKey(_property, _user),\r\n\t\t\t_value\r\n\t\t);\r\n\t}\r\n\r\n\tfunction getStorageLastStakedInterestPrice(address _property, address _user)\r\n\t\tpublic\r\n\t\tview\r\n\t\treturns (uint256)\r\n\t{\r\n\t\treturn\r\n\t\t\teternalStorage().getUint(\r\n\t\t\t\tgetStorageLastStakedInterestPriceKey(_property, _user)\r\n\t\t\t);\r\n\t}\r\n\r\n\tfunction getStorageLastStakedInterestPriceKey(\r\n\t\taddress _property,\r\n\t\taddress _user\r\n\t) private pure returns (bytes32) {\r\n\t\treturn\r\n\t\t\tkeccak256(\r\n\t\t\t\tabi.encodePacked(\"_lastStakedInterestPrice\", _property, _user)\r\n\t\t\t);\r\n\t}\r\n\r\n\t//lastStakesChangedCumulativeReward\r\n\tfunction setStorageLastStakesChangedCumulativeReward(uint256 _value)\r\n\t\tinternal\r\n\t{\r\n\t\teternalStorage().setUint(\r\n\t\t\tgetStorageLastStakesChangedCumulativeRewardKey(),\r\n\t\t\t_value\r\n\t\t);\r\n\t}\r\n\r\n\tfunction getStorageLastStakesChangedCumulativeReward()\r\n\t\tpublic\r\n\t\tview\r\n\t\treturns (uint256)\r\n\t{\r\n\t\treturn\r\n\t\t\teternalStorage().getUint(\r\n\t\t\t\tgetStorageLastStakesChangedCumulativeRewardKey()\r\n\t\t\t);\r\n\t}\r\n\r\n\tfunction getStorageLastStakesChangedCumulativeRewardKey()\r\n\t\tprivate\r\n\t\tpure\r\n\t\treturns (bytes32)\r\n\t{\r\n\t\treturn\r\n\t\t\tkeccak256(abi.encodePacked(\"_lastStakesChangedCumulativeReward\"));\r\n\t}\r\n\r\n\t//LastCumulativeHoldersRewardPrice\r\n\tfunction setStorageLastCumulativeHoldersRewardPrice(uint256 _holders)\r\n\t\tinternal\r\n\t{\r\n\t\teternalStorage().setUint(\r\n\t\t\tgetStorageLastCumulativeHoldersRewardPriceKey(),\r\n\t\t\t_holders\r\n\t\t);\r\n\t}\r\n\r\n\tfunction getStorageLastCumulativeHoldersRewardPrice()\r\n\t\tpublic\r\n\t\tview\r\n\t\treturns (uint256)\r\n\t{\r\n\t\treturn\r\n\t\t\teternalStorage().getUint(\r\n\t\t\t\tgetStorageLastCumulativeHoldersRewardPriceKey()\r\n\t\t\t);\r\n\t}\r\n\r\n\tfunction getStorageLastCumulativeHoldersRewardPriceKey()\r\n\t\tprivate\r\n\t\tpure\r\n\t\treturns (bytes32)\r\n\t{\r\n\t\treturn keccak256(abi.encodePacked(\"0lastCumulativeHoldersRewardPrice\"));\r\n\t}\r\n\r\n\t//LastCumulativeInterestPrice\r\n\tfunction setStorageLastCumulativeInterestPrice(uint256 _interest) internal {\r\n\t\teternalStorage().setUint(\r\n\t\t\tgetStorageLastCumulativeInterestPriceKey(),\r\n\t\t\t_interest\r\n\t\t);\r\n\t}\r\n\r\n\tfunction getStorageLastCumulativeInterestPrice()\r\n\t\tpublic\r\n\t\tview\r\n\t\treturns (uint256)\r\n\t{\r\n\t\treturn\r\n\t\t\teternalStorage().getUint(\r\n\t\t\t\tgetStorageLastCumulativeInterestPriceKey()\r\n\t\t\t);\r\n\t}\r\n\r\n\tfunction getStorageLastCumulativeInterestPriceKey()\r\n\t\tprivate\r\n\t\tpure\r\n\t\treturns (bytes32)\r\n\t{\r\n\t\treturn keccak256(abi.encodePacked(\"0lastCumulativeInterestPrice\"));\r\n\t}\r\n\r\n\t//LastCumulativeHoldersRewardAmountPerProperty\r\n\tfunction setStorageLastCumulativeHoldersRewardAmountPerProperty(\r\n\t\taddress _property,\r\n\t\tuint256 _value\r\n\t) internal {\r\n\t\teternalStorage().setUint(\r\n\t\t\tgetStorageLastCumulativeHoldersRewardAmountPerPropertyKey(\r\n\t\t\t\t_property\r\n\t\t\t),\r\n\t\t\t_value\r\n\t\t);\r\n\t}\r\n\r\n\tfunction getStorageLastCumulativeHoldersRewardAmountPerProperty(\r\n\t\taddress _property\r\n\t) public view returns (uint256) {\r\n\t\treturn\r\n\t\t\teternalStorage().getUint(\r\n\t\t\t\tgetStorageLastCumulativeHoldersRewardAmountPerPropertyKey(\r\n\t\t\t\t\t_property\r\n\t\t\t\t)\r\n\t\t\t);\r\n\t}\r\n\r\n\tfunction getStorageLastCumulativeHoldersRewardAmountPerPropertyKey(\r\n\t\taddress _property\r\n\t) private pure returns (bytes32) {\r\n\t\treturn\r\n\t\t\tkeccak256(\r\n\t\t\t\tabi.encodePacked(\r\n\t\t\t\t\t\"0lastCumulativeHoldersRewardAmountPerProperty\",\r\n\t\t\t\t\t_property\r\n\t\t\t\t)\r\n\t\t\t);\r\n\t}\r\n\r\n\t//LastCumulativeHoldersRewardPricePerProperty\r\n\tfunction setStorageLastCumulativeHoldersRewardPricePerProperty(\r\n\t\taddress _property,\r\n\t\tuint256 _price\r\n\t) internal {\r\n\t\teternalStorage().setUint(\r\n\t\t\tgetStorageLastCumulativeHoldersRewardPricePerPropertyKey(_property),\r\n\t\t\t_price\r\n\t\t);\r\n\t}\r\n\r\n\tfunction getStorageLastCumulativeHoldersRewardPricePerProperty(\r\n\t\taddress _property\r\n\t) public view returns (uint256) {\r\n\t\treturn\r\n\t\t\teternalStorage().getUint(\r\n\t\t\t\tgetStorageLastCumulativeHoldersRewardPricePerPropertyKey(\r\n\t\t\t\t\t_property\r\n\t\t\t\t)\r\n\t\t\t);\r\n\t}\r\n\r\n\tfunction getStorageLastCumulativeHoldersRewardPricePerPropertyKey(\r\n\t\taddress _property\r\n\t) private pure returns (bytes32) {\r\n\t\treturn\r\n\t\t\tkeccak256(\r\n\t\t\t\tabi.encodePacked(\r\n\t\t\t\t\t\"0lastCumulativeHoldersRewardPricePerProperty\",\r\n\t\t\t\t\t_property\r\n\t\t\t\t)\r\n\t\t\t);\r\n\t}\r\n\r\n\t//cap\r\n\tfunction setStorageCap(uint256 _cap) internal {\r\n\t\teternalStorage().setUint(getStorageCapKey(), _cap);\r\n\t}\r\n\r\n\tfunction getStorageCap() public view returns (uint256) {\r\n\t\treturn eternalStorage().getUint(getStorageCapKey());\r\n\t}\r\n\r\n\tfunction getStorageCapKey() private pure returns (bytes32) {\r\n\t\treturn keccak256(abi.encodePacked(\"_cap\"));\r\n\t}\r\n\r\n\t//CumulativeHoldersRewardCap\r\n\tfunction setStorageCumulativeHoldersRewardCap(uint256 _value) internal {\r\n\t\teternalStorage().setUint(\r\n\t\t\tgetStorageCumulativeHoldersRewardCapKey(),\r\n\t\t\t_value\r\n\t\t);\r\n\t}\r\n\r\n\tfunction getStorageCumulativeHoldersRewardCap()\r\n\t\tpublic\r\n\t\tview\r\n\t\treturns (uint256)\r\n\t{\r\n\t\treturn\r\n\t\t\teternalStorage().getUint(getStorageCumulativeHoldersRewardCapKey());\r\n\t}\r\n\r\n\tfunction getStorageCumulativeHoldersRewardCapKey()\r\n\t\tprivate\r\n\t\tpure\r\n\t\treturns (bytes32)\r\n\t{\r\n\t\treturn keccak256(abi.encodePacked(\"_cumulativeHoldersRewardCap\"));\r\n\t}\r\n\r\n\t//LastCumulativeHoldersPriceCap\r\n\tfunction setStorageLastCumulativeHoldersPriceCap(uint256 _value) internal {\r\n\t\teternalStorage().setUint(\r\n\t\t\tgetStorageLastCumulativeHoldersPriceCapKey(),\r\n\t\t\t_value\r\n\t\t);\r\n\t}\r\n\r\n\tfunction getStorageLastCumulativeHoldersPriceCap()\r\n\t\tpublic\r\n\t\tview\r\n\t\treturns (uint256)\r\n\t{\r\n\t\treturn\r\n\t\t\teternalStorage().getUint(\r\n\t\t\t\tgetStorageLastCumulativeHoldersPriceCapKey()\r\n\t\t\t);\r\n\t}\r\n\r\n\tfunction getStorageLastCumulativeHoldersPriceCapKey()\r\n\t\tprivate\r\n\t\tpure\r\n\t\treturns (bytes32)\r\n\t{\r\n\t\treturn keccak256(abi.encodePacked(\"_lastCumulativeHoldersPriceCap\"));\r\n\t}\r\n\r\n\t//InitialCumulativeHoldersRewardCap\r\n\tfunction setStorageInitialCumulativeHoldersRewardCap(\r\n\t\taddress _property,\r\n\t\tuint256 _value\r\n\t) internal {\r\n\t\teternalStorage().setUint(\r\n\t\t\tgetStorageInitialCumulativeHoldersRewardCapKey(_property),\r\n\t\t\t_value\r\n\t\t);\r\n\t}\r\n\r\n\tfunction getStorageInitialCumulativeHoldersRewardCap(address _property)\r\n\t\tpublic\r\n\t\tview\r\n\t\treturns (uint256)\r\n\t{\r\n\t\treturn\r\n\t\t\teternalStorage().getUint(\r\n\t\t\t\tgetStorageInitialCumulativeHoldersRewardCapKey(_property)\r\n\t\t\t);\r\n\t}\r\n\r\n\tfunction getStorageInitialCumulativeHoldersRewardCapKey(address _property)\r\n\t\tprivate\r\n\t\tpure\r\n\t\treturns (bytes32)\r\n\t{\r\n\t\treturn\r\n\t\t\tkeccak256(\r\n\t\t\t\tabi.encodePacked(\r\n\t\t\t\t\t\"_initialCumulativeHoldersRewardCap\",\r\n\t\t\t\t\t_property\r\n\t\t\t\t)\r\n\t\t\t);\r\n\t}\r\n\r\n\t//FallbackInitialCumulativeHoldersRewardCap\r\n\tfunction setStorageFallbackInitialCumulativeHoldersRewardCap(uint256 _value)\r\n\t\tinternal\r\n\t{\r\n\t\teternalStorage().setUint(\r\n\t\t\tgetStorageFallbackInitialCumulativeHoldersRewardCapKey(),\r\n\t\t\t_value\r\n\t\t);\r\n\t}\r\n\r\n\tfunction getStorageFallbackInitialCumulativeHoldersRewardCap()\r\n\t\tpublic\r\n\t\tview\r\n\t\treturns (uint256)\r\n\t{\r\n\t\treturn\r\n\t\t\teternalStorage().getUint(\r\n\t\t\t\tgetStorageFallbackInitialCumulativeHoldersRewardCapKey()\r\n\t\t\t);\r\n\t}\r\n\r\n\tfunction getStorageFallbackInitialCumulativeHoldersRewardCapKey()\r\n\t\tprivate\r\n\t\tpure\r\n\t\treturns (bytes32)\r\n\t{\r\n\t\treturn\r\n\t\t\tkeccak256(\r\n\t\t\t\tabi.encodePacked(\"_fallbackInitialCumulativeHoldersRewardCap\")\r\n\t\t\t);\r\n\t}\r\n}\r\n\r\n// File: contracts/interface/IDevMinter.sol\r\n\r\n// SPDX-License-Identifier: MPL-2.0\r\npragma solidity >=0.5.17;\r\n\r\ninterface IDevMinter {\r\n\tfunction mint(address account, uint256 amount) external returns (bool);\r\n\r\n\tfunction renounceMinter() external;\r\n}\r\n\r\n// File: contracts/interface/IProperty.sol\r\n\r\n// SPDX-License-Identifier: MPL-2.0\r\npragma solidity >=0.5.17;\r\n\r\ninterface IProperty {\r\n\tfunction author() external view returns (address);\r\n\r\n\tfunction changeAuthor(address _nextAuthor) external;\r\n\r\n\tfunction changeName(string calldata _name) external;\r\n\r\n\tfunction changeSymbol(string calldata _symbol) external;\r\n\r\n\tfunction withdraw(address _sender, uint256 _value) external;\r\n}\r\n\r\n// File: contracts/interface/IPolicy.sol\r\n\r\n// SPDX-License-Identifier: MPL-2.0\r\npragma solidity >=0.5.17;\r\n\r\ninterface IPolicy {\r\n\tfunction rewards(uint256 _lockups, uint256 _assets)\r\n\t\texternal\r\n\t\tview\r\n\t\treturns (uint256);\r\n\r\n\tfunction holdersShare(uint256 _amount, uint256 _lockups)\r\n\t\texternal\r\n\t\tview\r\n\t\treturns (uint256);\r\n\r\n\tfunction authenticationFee(uint256 _assets, uint256 _propertyAssets)\r\n\t\texternal\r\n\t\tview\r\n\t\treturns (uint256);\r\n\r\n\tfunction marketApproval(uint256 _agree, uint256 _opposite)\r\n\t\texternal\r\n\t\tview\r\n\t\treturns (bool);\r\n\r\n\tfunction policyApproval(uint256 _agree, uint256 _opposite)\r\n\t\texternal\r\n\t\tview\r\n\t\treturns (bool);\r\n\r\n\tfunction marketVotingBlocks() external view returns (uint256);\r\n\r\n\tfunction policyVotingBlocks() external view returns (uint256);\r\n\r\n\tfunction shareOfTreasury(uint256 _supply) external view returns (uint256);\r\n\r\n\tfunction treasury() external view returns (address);\r\n\r\n\tfunction capSetter() external view returns (address);\r\n}\r\n\r\n// File: contracts/interface/IAllocator.sol\r\n\r\n// SPDX-License-Identifier: MPL-2.0\r\npragma solidity >=0.5.17;\r\n\r\ninterface IAllocator {\r\n\tfunction beforeBalanceChange(\r\n\t\taddress _property,\r\n\t\taddress _from,\r\n\t\taddress _to\r\n\t) external;\r\n\r\n\tfunction calculateMaxRewardsPerBlock() external view returns (uint256);\r\n}\r\n\r\n// File: contracts/interface/ILockup.sol\r\n\r\n// SPDX-License-Identifier: MPL-2.0\r\npragma solidity >=0.5.17;\r\n\r\ninterface ILockup {\r\n\tfunction lockup(\r\n\t\taddress _from,\r\n\t\taddress _property,\r\n\t\tuint256 _value\r\n\t) external;\r\n\r\n\tfunction update() external;\r\n\r\n\tfunction withdraw(address _property, uint256 _amount) external;\r\n\r\n\tfunction calculateCumulativeRewardPrices()\r\n\t\texternal\r\n\t\tview\r\n\t\treturns (\r\n\t\t\tuint256 _reward,\r\n\t\t\tuint256 _holders,\r\n\t\t\tuint256 _interest,\r\n\t\t\tuint256 _holdersCap\r\n\t\t);\r\n\r\n\tfunction calculateRewardAmount(address _property)\r\n\t\texternal\r\n\t\tview\r\n\t\treturns (uint256, uint256);\r\n\r\n\t/**\r\n\t * caution!!!this function is deprecated!!!\r\n\t * use calculateRewardAmount\r\n\t */\r\n\tfunction calculateCumulativeHoldersRewardAmount(address _property)\r\n\t\texternal\r\n\t\tview\r\n\t\treturns (uint256);\r\n\r\n\tfunction getPropertyValue(address _property)\r\n\t\texternal\r\n\t\tview\r\n\t\treturns (uint256);\r\n\r\n\tfunction getAllValue() external view returns (uint256);\r\n\r\n\tfunction getValue(address _property, address _sender)\r\n\t\texternal\r\n\t\tview\r\n\t\treturns (uint256);\r\n\r\n\tfunction calculateWithdrawableInterestAmount(\r\n\t\taddress _property,\r\n\t\taddress _user\r\n\t) external view returns (uint256);\r\n\r\n\tfunction cap() external view returns (uint256);\r\n\r\n\tfunction updateCap(uint256 _cap) external;\r\n\r\n\tfunction devMinter() external view returns (address);\r\n}\r\n\r\n// File: contracts/interface/IMetricsGroup.sol\r\n\r\n// SPDX-License-Identifier: MPL-2.0\r\npragma solidity >=0.5.17;\r\n\r\ninterface IMetricsGroup {\r\n\tfunction addGroup(address _addr) external;\r\n\r\n\tfunction removeGroup(address _addr) external;\r\n\r\n\tfunction isGroup(address _addr) external view returns (bool);\r\n\r\n\tfunction totalIssuedMetrics() external view returns (uint256);\r\n\r\n\tfunction hasAssets(address _property) external view returns (bool);\r\n\r\n\tfunction getMetricsCountPerProperty(address _property)\r\n\t\texternal\r\n\t\tview\r\n\t\treturns (uint256);\r\n\r\n\tfunction totalAuthenticatedProperties() external view returns (uint256);\r\n}\r\n\r\n// File: contracts/src/lockup/Lockup.sol\r\n\r\npragma solidity 0.5.17;\r\n\r\n// prettier-ignore\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n * A contract that manages the staking of DEV tokens and calculates rewards.\r\n * Staking and the following mechanism determines that reward calculation.\r\n *\r\n * Variables:\r\n * -`M`: Maximum mint amount per block determined by Allocator contract\r\n * -`B`: Number of blocks during staking\r\n * -`P`: Total number of staking locked up in a Property contract\r\n * -`S`: Total number of staking locked up in all Property contracts\r\n * -`U`: Number of staking per account locked up in a Property contract\r\n *\r\n * Formula:\r\n * Staking Rewards = M * B * (P / S) * (U / P)\r\n *\r\n * Note:\r\n * -`M`, `P` and `S` vary from block to block, and the variation cannot be predicted.\r\n * -`B` is added every time the Ethereum block is created.\r\n * - Only `U` and `B` are predictable variables.\r\n * - As `M`, `P` and `S` cannot be observed from a staker, the \"cumulative sum\" is often used to calculate ratio variation with history.\r\n * - Reward withdrawal always withdraws the total withdrawable amount.\r\n *\r\n * Scenario:\r\n * - Assume `M` is fixed at 500\r\n * - Alice stakes 100 DEV on Property-A (Alice's staking state on Property-A: `M`=500, `B`=0, `P`=100, `S`=100, `U`=100)\r\n * - After 10 blocks, Bob stakes 60 DEV on Property-B (Alice's staking state on Property-A: `M`=500, `B`=10, `P`=100, `S`=160, `U`=100)\r\n * - After 10 blocks, Carol stakes 40 DEV on Property-A (Alice's staking state on Property-A: `M`=500, `B`=20, `P`=140, `S`=200, `U`=100)\r\n * - After 10 blocks, Alice withdraws Property-A staking reward. The reward at this time is 5000 DEV (10 blocks * 500 DEV) + 3125 DEV (10 blocks * 62.5% * 500 DEV) + 2500 DEV (10 blocks * 50% * 500 DEV).\r\n */\r\ncontract Lockup is ILockup, UsingConfig, LockupStorage {\r\n\tusing SafeMath for uint256;\r\n\tusing Decimals for uint256;\r\n\taddress public devMinter;\r\n\tstruct RewardPrices {\r\n\t\tuint256 reward;\r\n\t\tuint256 holders;\r\n\t\tuint256 interest;\r\n\t\tuint256 holdersCap;\r\n\t}\r\n\tevent Lockedup(address _from, address _property, uint256 _value);\r\n\tevent UpdateCap(uint256 _cap);\r\n\r\n\t/**\r\n\t * Initialize the passed address as AddressConfig address and Devminter.\r\n\t */\r\n\tconstructor(address _config, address _devMinter)\r\n\t\tpublic\r\n\t\tUsingConfig(_config)\r\n\t{\r\n\t\tdevMinter = _devMinter;\r\n\t}\r\n\r\n\t/**\r\n\t * Adds staking.\r\n\t * Only the Dev contract can execute this function.\r\n\t */\r\n\tfunction lockup(\r\n\t\taddress _from,\r\n\t\taddress _property,\r\n\t\tuint256 _value\r\n\t) external {\r\n\t\t/**\r\n\t\t * Validates the sender is Dev contract.\r\n\t\t */\r\n\t\trequire(msg.sender == config().token(), \"this is illegal address\");\r\n\r\n\t\t/**\r\n\t\t * Validates _value is not 0.\r\n\t\t */\r\n\t\trequire(_value != 0, \"illegal lockup value\");\r\n\r\n\t\t/**\r\n\t\t * Validates the passed Property has greater than 1 asset.\r\n\t\t */\r\n\t\trequire(\r\n\t\t\tIMetricsGroup(config().metricsGroup()).hasAssets(_property),\r\n\t\t\t\"unable to stake to unauthenticated property\"\r\n\t\t);\r\n\r\n\t\t/**\r\n\t\t * Since the reward per block that can be withdrawn will change with the addition of staking,\r\n\t\t * saves the undrawn withdrawable reward before addition it.\r\n\t\t */\r\n\t\tRewardPrices memory prices = updatePendingInterestWithdrawal(\r\n\t\t\t_property,\r\n\t\t\t_from\r\n\t\t);\r\n\r\n\t\t/**\r\n\t\t * Saves variables that should change due to the addition of staking.\r\n\t\t */\r\n\t\tupdateValues(true, _from, _property, _value, prices);\r\n\r\n\t\temit Lockedup(_from, _property, _value);\r\n\t}\r\n\r\n\t/**\r\n\t * Withdraw staking.\r\n\t * Releases staking, withdraw rewards, and transfer the staked and withdraw rewards amount to the sender.\r\n\t */\r\n\tfunction withdraw(address _property, uint256 _amount) external {\r\n\t\t/**\r\n\t\t * Validates the sender is staking to the target Property.\r\n\t\t */\r\n\t\trequire(\r\n\t\t\thasValue(_property, msg.sender, _amount),\r\n\t\t\t\"insufficient tokens staked\"\r\n\t\t);\r\n\r\n\t\t/**\r\n\t\t * Withdraws the staking reward\r\n\t\t */\r\n\t\tRewardPrices memory prices = _withdrawInterest(_property);\r\n\r\n\t\t/**\r\n\t\t * Transfer the staked amount to the sender.\r\n\t\t */\r\n\t\tif (_amount != 0) {\r\n\t\t\tIProperty(_property).withdraw(msg.sender, _amount);\r\n\t\t}\r\n\r\n\t\t/**\r\n\t\t * Saves variables that should change due to the canceling staking..\r\n\t\t */\r\n\t\tupdateValues(false, msg.sender, _property, _amount, prices);\r\n\t}\r\n\r\n\t/**\r\n\t * get cap\r\n\t */\r\n\tfunction cap() external view returns (uint256) {\r\n\t\treturn getStorageCap();\r\n\t}\r\n\r\n\t/**\r\n\t * set cap\r\n\t */\r\n\tfunction updateCap(uint256 _cap) external {\r\n\t\taddress setter = IPolicy(config().policy()).capSetter();\r\n\t\trequire(setter == msg.sender, \"illegal access\");\r\n\r\n\t\t/**\r\n\t\t * Updates cumulative amount of the holders reward cap\r\n\t\t */\r\n\t\t(\r\n\t\t\t,\r\n\t\t\tuint256 holdersPrice,\r\n\t\t\t,\r\n\t\t\tuint256 cCap\r\n\t\t) = calculateCumulativeRewardPrices();\r\n\r\n\t\t// TODO: When this function is improved to be called on-chain, the source of `getStorageLastCumulativeHoldersPriceCap` can be rewritten to `getStorageLastCumulativeHoldersRewardPrice`.\r\n\t\tsetStorageCumulativeHoldersRewardCap(cCap);\r\n\t\tsetStorageLastCumulativeHoldersPriceCap(holdersPrice);\r\n\t\tsetStorageCap(_cap);\r\n\t\temit UpdateCap(_cap);\r\n\t}\r\n\r\n\t/**\r\n\t * Returns the latest cap\r\n\t */\r\n\tfunction _calculateLatestCap(uint256 _holdersPrice)\r\n\t\tprivate\r\n\t\tview\r\n\t\treturns (uint256)\r\n\t{\r\n\t\tuint256 cCap = getStorageCumulativeHoldersRewardCap();\r\n\t\tuint256 lastHoldersPrice = getStorageLastCumulativeHoldersPriceCap();\r\n\t\tuint256 additionalCap = _holdersPrice.sub(lastHoldersPrice).mul(\r\n\t\t\tgetStorageCap()\r\n\t\t);\r\n\t\treturn cCap.add(additionalCap);\r\n\t}\r\n\r\n\t/**\r\n\t * Store staking states as a snapshot.\r\n\t */\r\n\tfunction beforeStakesChanged(\r\n\t\taddress _property,\r\n\t\taddress _user,\r\n\t\tRewardPrices memory _prices\r\n\t) private {\r\n\t\t/**\r\n\t\t * Gets latest cumulative holders reward for the passed Property.\r\n\t\t */\r\n\t\tuint256 cHoldersReward = _calculateCumulativeHoldersRewardAmount(\r\n\t\t\t_prices.holders,\r\n\t\t\t_property\r\n\t\t);\r\n\r\n\t\t/**\r\n\t\t * Sets `InitialCumulativeHoldersRewardCap`.\r\n\t\t * Records this value only when the \"first staking to the passed Property\" is transacted.\r\n\t\t */\r\n\t\tif (\r\n\t\t\tgetStorageLastCumulativeHoldersRewardPricePerProperty(_property) ==\r\n\t\t\t0 &&\r\n\t\t\tgetStorageInitialCumulativeHoldersRewardCap(_property) == 0 &&\r\n\t\t\tgetStoragePropertyValue(_property) == 0\r\n\t\t) {\r\n\t\t\tsetStorageInitialCumulativeHoldersRewardCap(\r\n\t\t\t\t_property,\r\n\t\t\t\t_prices.holdersCap\r\n\t\t\t);\r\n\t\t}\r\n\r\n\t\t/**\r\n\t\t * Store each value.\r\n\t\t */\r\n\t\tsetStorageLastStakedInterestPrice(_property, _user, _prices.interest);\r\n\t\tsetStorageLastStakesChangedCumulativeReward(_prices.reward);\r\n\t\tsetStorageLastCumulativeHoldersRewardPrice(_prices.holders);\r\n\t\tsetStorageLastCumulativeInterestPrice(_prices.interest);\r\n\t\tsetStorageLastCumulativeHoldersRewardAmountPerProperty(\r\n\t\t\t_property,\r\n\t\t\tcHoldersReward\r\n\t\t);\r\n\t\tsetStorageLastCumulativeHoldersRewardPricePerProperty(\r\n\t\t\t_property,\r\n\t\t\t_prices.holders\r\n\t\t);\r\n\t\tsetStorageCumulativeHoldersRewardCap(_prices.holdersCap);\r\n\t\tsetStorageLastCumulativeHoldersPriceCap(_prices.holders);\r\n\t}\r\n\r\n\t/**\r\n\t * Gets latest value of cumulative sum of the reward amount, cumulative sum of the holders reward per stake, and cumulative sum of the stakers reward per stake.\r\n\t */\r\n\tfunction calculateCumulativeRewardPrices()\r\n\t\tpublic\r\n\t\tview\r\n\t\treturns (\r\n\t\t\tuint256 _reward,\r\n\t\t\tuint256 _holders,\r\n\t\t\tuint256 _interest,\r\n\t\t\tuint256 _holdersCap\r\n\t\t)\r\n\t{\r\n\t\tuint256 lastReward = getStorageLastStakesChangedCumulativeReward();\r\n\t\tuint256 lastHoldersPrice = getStorageLastCumulativeHoldersRewardPrice();\r\n\t\tuint256 lastInterestPrice = getStorageLastCumulativeInterestPrice();\r\n\t\tuint256 allStakes = getStorageAllValue();\r\n\r\n\t\t/**\r\n\t\t * Gets latest cumulative sum of the reward amount.\r\n\t\t */\r\n\t\t(uint256 reward, ) = dry();\r\n\t\tuint256 mReward = reward.mulBasis();\r\n\r\n\t\t/**\r\n\t\t * Calculates reward unit price per staking.\r\n\t\t * Later, the last cumulative sum of the reward amount is subtracted because to add the last recorded holder/staking reward.\r\n\t\t */\r\n\t\tuint256 price = allStakes > 0\r\n\t\t\t? mReward.sub(lastReward).div(allStakes)\r\n\t\t\t: 0;\r\n\r\n\t\t/**\r\n\t\t * Calculates the holders reward out of the total reward amount.\r\n\t\t */\r\n\t\tuint256 holdersShare = IPolicy(config().policy()).holdersShare(\r\n\t\t\tprice,\r\n\t\t\tallStakes\r\n\t\t);\r\n\r\n\t\t/**\r\n\t\t * Calculates and returns each reward.\r\n\t\t */\r\n\t\tuint256 holdersPrice = holdersShare.add(lastHoldersPrice);\r\n\t\tuint256 interestPrice = price.sub(holdersShare).add(lastInterestPrice);\r\n\t\tuint256 cCap = _calculateLatestCap(holdersPrice);\r\n\t\treturn (mReward, holdersPrice, interestPrice, cCap);\r\n\t}\r\n\r\n\t/**\r\n\t * Calculates cumulative sum of the holders reward per Property.\r\n\t * To save computing resources, it receives the latest holder rewards from a caller.\r\n\t */\r\n\tfunction _calculateCumulativeHoldersRewardAmount(\r\n\t\tuint256 _holdersPrice,\r\n\t\taddress _property\r\n\t) private view returns (uint256) {\r\n\t\t(uint256 cHoldersReward, uint256 lastReward) = (\r\n\t\t\tgetStorageLastCumulativeHoldersRewardAmountPerProperty(_property),\r\n\t\t\tgetStorageLastCumulativeHoldersRewardPricePerProperty(_property)\r\n\t\t);\r\n\r\n\t\t/**\r\n\t\t * `cHoldersReward` contains the calculation of `lastReward`, so subtract it here.\r\n\t\t */\r\n\t\tuint256 additionalHoldersReward = _holdersPrice.sub(lastReward).mul(\r\n\t\t\tgetStoragePropertyValue(_property)\r\n\t\t);\r\n\r\n\t\t/**\r\n\t\t * Calculates and returns the cumulative sum of the holder reward by adds the last recorded holder reward and the latest holder reward.\r\n\t\t */\r\n\t\treturn cHoldersReward.add(additionalHoldersReward);\r\n\t}\r\n\r\n\t/**\r\n\t * Calculates cumulative sum of the holders reward per Property.\r\n\t * caution!!!this function is deprecated!!!\r\n\t * use calculateRewardAmount\r\n\t */\r\n\tfunction calculateCumulativeHoldersRewardAmount(address _property)\r\n\t\texternal\r\n\t\tview\r\n\t\treturns (uint256)\r\n\t{\r\n\t\t(, uint256 holders, , ) = calculateCumulativeRewardPrices();\r\n\t\treturn _calculateCumulativeHoldersRewardAmount(holders, _property);\r\n\t}\r\n\r\n\t/**\r\n\t * Calculates holders reward and cap per Property.\r\n\t */\r\n\tfunction calculateRewardAmount(address _property)\r\n\t\texternal\r\n\t\tview\r\n\t\treturns (uint256, uint256)\r\n\t{\r\n\t\t(\r\n\t\t\t,\r\n\t\t\tuint256 holders,\r\n\t\t\t,\r\n\t\t\tuint256 holdersCap\r\n\t\t) = calculateCumulativeRewardPrices();\r\n\t\tuint256 initialCap = _getInitialCap(_property);\r\n\r\n\t\t/**\r\n\t\t * Calculates the cap\r\n\t\t */\r\n\t\tuint256 capValue = holdersCap.sub(initialCap);\r\n\t\treturn (\r\n\t\t\t_calculateCumulativeHoldersRewardAmount(holders, _property),\r\n\t\t\tcapValue\r\n\t\t);\r\n\t}\r\n\r\n\tfunction _getInitialCap(address _property) private view returns (uint256) {\r\n\t\tuint256 initialCap = getStorageInitialCumulativeHoldersRewardCap(\r\n\t\t\t_property\r\n\t\t);\r\n\t\tif (initialCap > 0) {\r\n\t\t\treturn initialCap;\r\n\t\t}\r\n\r\n\t\t// Fallback when there is a data past staked.\r\n\t\tif (\r\n\t\t\tgetStorageLastCumulativeHoldersRewardPricePerProperty(_property) >\r\n\t\t\t0 ||\r\n\t\t\tgetStoragePropertyValue(_property) > 0\r\n\t\t) {\r\n\t\t\treturn getStorageFallbackInitialCumulativeHoldersRewardCap();\r\n\t\t}\r\n\t\treturn 0;\r\n\t}\r\n\r\n\t/**\r\n\t * Updates cumulative sum of the maximum mint amount calculated by Allocator contract, the latest maximum mint amount per block,\r\n\t * and the last recorded block number.\r\n\t * The cumulative sum of the maximum mint amount is always added.\r\n\t * By recording that value when the staker last stakes, the difference from the when the staker stakes can be calculated.\r\n\t */\r\n\tfunction update() public {\r\n\t\t/**\r\n\t\t * Gets the cumulative sum of the maximum mint amount and the maximum mint number per block.\r\n\t\t */\r\n\t\t(uint256 _nextRewards, uint256 _amount) = dry();\r\n\r\n\t\t/**\r\n\t\t * Records each value and the latest block number.\r\n\t\t */\r\n\t\tsetStorageCumulativeGlobalRewards(_nextRewards);\r\n\t\tsetStorageLastSameRewardsAmountAndBlock(_amount, block.number);\r\n\t}\r\n\r\n\t/**\r\n\t * Referring to the values recorded in each storage to returns the latest cumulative sum of the maximum mint amount and the latest maximum mint amount per block.\r\n\t */\r\n\tfunction dry()\r\n\t\tprivate\r\n\t\tview\r\n\t\treturns (uint256 _nextRewards, uint256 _amount)\r\n\t{\r\n\t\t/**\r\n\t\t * Gets the latest mint amount per block from Allocator contract.\r\n\t\t */\r\n\t\tuint256 rewardsAmount = IAllocator(config().allocator())\r\n\t\t.calculateMaxRewardsPerBlock();\r\n\r\n\t\t/**\r\n\t\t * Gets the maximum mint amount per block, and the last recorded block number from `LastSameRewardsAmountAndBlock` storage.\r\n\t\t */\r\n\t\t(\r\n\t\t\tuint256 lastAmount,\r\n\t\t\tuint256 lastBlock\r\n\t\t) = getStorageLastSameRewardsAmountAndBlock();\r\n\r\n\t\t/**\r\n\t\t * If the recorded maximum mint amount per block and the result of the Allocator contract are different,\r\n\t\t * the result of the Allocator contract takes precedence as a maximum mint amount per block.\r\n\t\t */\r\n\t\tuint256 lastMaxRewards = lastAmount == rewardsAmount\r\n\t\t\t? rewardsAmount\r\n\t\t\t: lastAmount;\r\n\r\n\t\t/**\r\n\t\t * Calculates the difference between the latest block number and the last recorded block number.\r\n\t\t */\r\n\t\tuint256 blocks = lastBlock > 0 ? block.number.sub(lastBlock) : 0;\r\n\r\n\t\t/**\r\n\t\t * Adds the calculated new cumulative maximum mint amount to the recorded cumulative maximum mint amount.\r\n\t\t */\r\n\t\tuint256 additionalRewards = lastMaxRewards.mul(blocks);\r\n\t\tuint256 nextRewards = getStorageCumulativeGlobalRewards().add(\r\n\t\t\tadditionalRewards\r\n\t\t);\r\n\r\n\t\t/**\r\n\t\t * Returns the latest theoretical cumulative sum of maximum mint amount and maximum mint amount per block.\r\n\t\t */\r\n\t\treturn (nextRewards, rewardsAmount);\r\n\t}\r\n\r\n\t/**\r\n\t * Returns the staker reward as interest.\r\n\t */\r\n\tfunction _calculateInterestAmount(address _property, address _user)\r\n\t\tprivate\r\n\t\tview\r\n\t\treturns (\r\n\t\t\tuint256 _amount,\r\n\t\t\tuint256 _interestPrice,\r\n\t\t\tRewardPrices memory _prices\r\n\t\t)\r\n\t{\r\n\t\t/**\r\n\t\t * Get the amount the user is staking for the Property.\r\n\t\t */\r\n\t\tuint256 lockedUpPerAccount = getStorageValue(_property, _user);\r\n\r\n\t\t/**\r\n\t\t * Gets the cumulative sum of the interest price recorded the last time you withdrew.\r\n\t\t */\r\n\t\tuint256 lastInterest = getStorageLastStakedInterestPrice(\r\n\t\t\t_property,\r\n\t\t\t_user\r\n\t\t);\r\n\r\n\t\t/**\r\n\t\t * Gets the latest cumulative sum of the interest price.\r\n\t\t */\r\n\t\t(\r\n\t\t\tuint256 reward,\r\n\t\t\tuint256 holders,\r\n\t\t\tuint256 interest,\r\n\t\t\tuint256 holdersCap\r\n\t\t) = calculateCumulativeRewardPrices();\r\n\r\n\t\t/**\r\n\t\t * Calculates and returns the latest withdrawable reward amount from the difference.\r\n\t\t */\r\n\t\tuint256 result = interest >= lastInterest\r\n\t\t\t? interest.sub(lastInterest).mul(lockedUpPerAccount).divBasis()\r\n\t\t\t: 0;\r\n\t\treturn (\r\n\t\t\tresult,\r\n\t\t\tinterest,\r\n\t\t\tRewardPrices(reward, holders, interest, holdersCap)\r\n\t\t);\r\n\t}\r\n\r\n\t/**\r\n\t * Returns the total rewards currently available for withdrawal. (For calling from inside the contract)\r\n\t */\r\n\tfunction _calculateWithdrawableInterestAmount(\r\n\t\taddress _property,\r\n\t\taddress _user\r\n\t) private view returns (uint256 _amount, RewardPrices memory _prices) {\r\n\t\t/**\r\n\t\t * If the passed Property has not authenticated, returns always 0.\r\n\t\t */\r\n\t\tif (\r\n\t\t\tIMetricsGroup(config().metricsGroup()).hasAssets(_property) == false\r\n\t\t) {\r\n\t\t\treturn (0, RewardPrices(0, 0, 0, 0));\r\n\t\t}\r\n\r\n\t\t/**\r\n\t\t * Gets the reward amount in saved without withdrawal.\r\n\t\t */\r\n\t\tuint256 pending = getStoragePendingInterestWithdrawal(_property, _user);\r\n\r\n\t\t/**\r\n\t\t * Gets the reward amount of before DIP4.\r\n\t\t */\r\n\t\tuint256 legacy = __legacyWithdrawableInterestAmount(_property, _user);\r\n\r\n\t\t/**\r\n\t\t * Gets the latest withdrawal reward amount.\r\n\t\t */\r\n\t\t(\r\n\t\t\tuint256 amount,\r\n\t\t\t,\r\n\t\t\tRewardPrices memory prices\r\n\t\t) = _calculateInterestAmount(_property, _user);\r\n\r\n\t\t/**\r\n\t\t * Returns the sum of all values.\r\n\t\t */\r\n\t\tuint256 withdrawableAmount = amount.add(pending).add(legacy);\r\n\t\treturn (withdrawableAmount, prices);\r\n\t}\r\n\r\n\t/**\r\n\t * Returns the total rewards currently available for withdrawal. (For calling from external of the contract)\r\n\t */\r\n\tfunction calculateWithdrawableInterestAmount(\r\n\t\taddress _property,\r\n\t\taddress _user\r\n\t) public view returns (uint256) {\r\n\t\t(uint256 amount, ) = _calculateWithdrawableInterestAmount(\r\n\t\t\t_property,\r\n\t\t\t_user\r\n\t\t);\r\n\t\treturn amount;\r\n\t}\r\n\r\n\t/**\r\n\t * Withdraws staking reward as an interest.\r\n\t */\r\n\tfunction _withdrawInterest(address _property)\r\n\t\tprivate\r\n\t\treturns (RewardPrices memory _prices)\r\n\t{\r\n\t\t/**\r\n\t\t * Gets the withdrawable amount.\r\n\t\t */\r\n\t\t(\r\n\t\t\tuint256 value,\r\n\t\t\tRewardPrices memory prices\r\n\t\t) = _calculateWithdrawableInterestAmount(_property, msg.sender);\r\n\r\n\t\t/**\r\n\t\t * Sets the unwithdrawn reward amount to 0.\r\n\t\t */\r\n\t\tsetStoragePendingInterestWithdrawal(_property, msg.sender, 0);\r\n\r\n\t\t/**\r\n\t\t * Updates the staking status to avoid double rewards.\r\n\t\t */\r\n\t\tsetStorageLastStakedInterestPrice(\r\n\t\t\t_property,\r\n\t\t\tmsg.sender,\r\n\t\t\tprices.interest\r\n\t\t);\r\n\t\t__updateLegacyWithdrawableInterestAmount(_property, msg.sender);\r\n\r\n\t\t/**\r\n\t\t * Mints the reward.\r\n\t\t */\r\n\t\trequire(\r\n\t\t\tIDevMinter(devMinter).mint(msg.sender, value),\r\n\t\t\t\"dev mint failed\"\r\n\t\t);\r\n\r\n\t\t/**\r\n\t\t * Since the total supply of tokens has changed, updates the latest maximum mint amount.\r\n\t\t */\r\n\t\tupdate();\r\n\r\n\t\treturn prices;\r\n\t}\r\n\r\n\t/**\r\n\t * Status updates with the addition or release of staking.\r\n\t */\r\n\tfunction updateValues(\r\n\t\tbool _addition,\r\n\t\taddress _account,\r\n\t\taddress _property,\r\n\t\tuint256 _value,\r\n\t\tRewardPrices memory _prices\r\n\t) private {\r\n\t\tbeforeStakesChanged(_property, _account, _prices);\r\n\t\t/**\r\n\t\t * If added staking:\r\n\t\t */\r\n\t\tif (_addition) {\r\n\t\t\t/**\r\n\t\t\t * Updates the current staking amount of the protocol total.\r\n\t\t\t */\r\n\t\t\taddAllValue(_value);\r\n\r\n\t\t\t/**\r\n\t\t\t * Updates the current staking amount of the Property.\r\n\t\t\t */\r\n\t\t\taddPropertyValue(_property, _value);\r\n\r\n\t\t\t/**\r\n\t\t\t * Updates the user's current staking amount in the Property.\r\n\t\t\t */\r\n\t\t\taddValue(_property, _account, _value);\r\n\r\n\t\t\t/**\r\n\t\t\t * If released staking:\r\n\t\t\t */\r\n\t\t} else {\r\n\t\t\t/**\r\n\t\t\t * Updates the current staking amount of the protocol total.\r\n\t\t\t */\r\n\t\t\tsubAllValue(_value);\r\n\r\n\t\t\t/**\r\n\t\t\t * Updates the current staking amount of the Property.\r\n\t\t\t */\r\n\t\t\tsubPropertyValue(_property, _value);\r\n\r\n\t\t\t/**\r\n\t\t\t * Updates the current staking amount of the Property.\r\n\t\t\t */\r\n\t\t\tsubValue(_property, _account, _value);\r\n\t\t}\r\n\r\n\t\t/**\r\n\t\t * Since each staking amount has changed, updates the latest maximum mint amount.\r\n\t\t */\r\n\t\tupdate();\r\n\t}\r\n\r\n\t/**\r\n\t * Returns the staking amount of the protocol total.\r\n\t */\r\n\tfunction getAllValue() external view returns (uint256) {\r\n\t\treturn getStorageAllValue();\r\n\t}\r\n\r\n\t/**\r\n\t * Adds the staking amount of the protocol total.\r\n\t */\r\n\tfunction addAllValue(uint256 _value) private {\r\n\t\tuint256 value = getStorageAllValue();\r\n\t\tvalue = value.add(_value);\r\n\t\tsetStorageAllValue(value);\r\n\t}\r\n\r\n\t/**\r\n\t * Subtracts the staking amount of the protocol total.\r\n\t */\r\n\tfunction subAllValue(uint256 _value) private {\r\n\t\tuint256 value = getStorageAllValue();\r\n\t\tvalue = value.sub(_value);\r\n\t\tsetStorageAllValue(value);\r\n\t}\r\n\r\n\t/**\r\n\t * Returns the user's staking amount in the Property.\r\n\t */\r\n\tfunction getValue(address _property, address _sender)\r\n\t\texternal\r\n\t\tview\r\n\t\treturns (uint256)\r\n\t{\r\n\t\treturn getStorageValue(_property, _sender);\r\n\t}\r\n\r\n\t/**\r\n\t * Adds the user's staking amount in the Property.\r\n\t */\r\n\tfunction addValue(\r\n\t\taddress _property,\r\n\t\taddress _sender,\r\n\t\tuint256 _value\r\n\t) private {\r\n\t\tuint256 value = getStorageValue(_property, _sender);\r\n\t\tvalue = value.add(_value);\r\n\t\tsetStorageValue(_property, _sender, value);\r\n\t}\r\n\r\n\t/**\r\n\t * Subtracts the user's staking amount in the Property.\r\n\t */\r\n\tfunction subValue(\r\n\t\taddress _property,\r\n\t\taddress _sender,\r\n\t\tuint256 _value\r\n\t) private {\r\n\t\tuint256 value = getStorageValue(_property, _sender);\r\n\t\tvalue = value.sub(_value);\r\n\t\tsetStorageValue(_property, _sender, value);\r\n\t}\r\n\r\n\t/**\r\n\t * Returns whether the user is staking in the Property.\r\n\t */\r\n\tfunction hasValue(\r\n\t\taddress _property,\r\n\t\taddress _sender,\r\n\t\tuint256 _amount\r\n\t) private view returns (bool) {\r\n\t\tuint256 value = getStorageValue(_property, _sender);\r\n\t\treturn value >= _amount;\r\n\t}\r\n\r\n\t/**\r\n\t * Returns the staking amount of the Property.\r\n\t */\r\n\tfunction getPropertyValue(address _property)\r\n\t\texternal\r\n\t\tview\r\n\t\treturns (uint256)\r\n\t{\r\n\t\treturn getStoragePropertyValue(_property);\r\n\t}\r\n\r\n\t/**\r\n\t * Adds the staking amount of the Property.\r\n\t */\r\n\tfunction addPropertyValue(address _property, uint256 _value) private {\r\n\t\tuint256 value = getStoragePropertyValue(_property);\r\n\t\tvalue = value.add(_value);\r\n\t\tsetStoragePropertyValue(_property, value);\r\n\t}\r\n\r\n\t/**\r\n\t * Subtracts the staking amount of the Property.\r\n\t */\r\n\tfunction subPropertyValue(address _property, uint256 _value) private {\r\n\t\tuint256 value = getStoragePropertyValue(_property);\r\n\t\tuint256 nextValue = value.sub(_value);\r\n\t\tsetStoragePropertyValue(_property, nextValue);\r\n\t}\r\n\r\n\t/**\r\n\t * Saves the latest reward amount as an undrawn amount.\r\n\t */\r\n\tfunction updatePendingInterestWithdrawal(address _property, address _user)\r\n\t\tprivate\r\n\t\treturns (RewardPrices memory _prices)\r\n\t{\r\n\t\t/**\r\n\t\t * Gets the latest reward amount.\r\n\t\t */\r\n\t\t(\r\n\t\t\tuint256 withdrawableAmount,\r\n\t\t\tRewardPrices memory prices\r\n\t\t) = _calculateWithdrawableInterestAmount(_property, _user);\r\n\r\n\t\t/**\r\n\t\t * Saves the amount to `PendingInterestWithdrawal` storage.\r\n\t\t */\r\n\t\tsetStoragePendingInterestWithdrawal(\r\n\t\t\t_property,\r\n\t\t\t_user,\r\n\t\t\twithdrawableAmount\r\n\t\t);\r\n\r\n\t\t/**\r\n\t\t * Updates the reward amount of before DIP4 to prevent further addition it.\r\n\t\t */\r\n\t\t__updateLegacyWithdrawableInterestAmount(_property, _user);\r\n\r\n\t\treturn prices;\r\n\t}\r\n\r\n\t/**\r\n\t * Returns the reward amount of the calculation model before DIP4.\r\n\t * It can be calculated by subtracting \"the last cumulative sum of reward unit price\" from\r\n\t * \"the current cumulative sum of reward unit price,\" and multiplying by the staking amount.\r\n\t */\r\n\tfunction __legacyWithdrawableInterestAmount(\r\n\t\taddress _property,\r\n\t\taddress _user\r\n\t) private view returns (uint256) {\r\n\t\tuint256 _last = getStorageLastInterestPrice(_property, _user);\r\n\t\tuint256 price = getStorageInterestPrice(_property);\r\n\t\tuint256 priceGap = price.sub(_last);\r\n\t\tuint256 lockedUpValue = getStorageValue(_property, _user);\r\n\t\tuint256 value = priceGap.mul(lockedUpValue);\r\n\t\treturn value.divBasis();\r\n\t}\r\n\r\n\t/**\r\n\t * Updates and treats the reward of before DIP4 as already received.\r\n\t */\r\n\tfunction __updateLegacyWithdrawableInterestAmount(\r\n\t\taddress _property,\r\n\t\taddress _user\r\n\t) private {\r\n\t\tuint256 interestPrice = getStorageInterestPrice(_property);\r\n\t\tif (getStorageLastInterestPrice(_property, _user) != interestPrice) {\r\n\t\t\tsetStorageLastInterestPrice(_property, _user, interestPrice);\r\n\t\t}\r\n\t}\r\n\r\n\tfunction ___setFallbackInitialCumulativeHoldersRewardCap(uint256 _value)\r\n\t\texternal\r\n\t\tonlyOwner\r\n\t{\r\n\t\tsetStorageFallbackInitialCumulativeHoldersRewardCap(_value);\r\n\t}\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_config\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_devMinter\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_property\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Lockedup\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_cap\",\"type\":\"uint256\"}],\"name\":\"UpdateCap\",\"type\":\"event\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"___setFallbackInitialCumulativeHoldersRewardCap\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_property\",\"type\":\"address\"}],\"name\":\"calculateCumulativeHoldersRewardAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"calculateCumulativeRewardPrices\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_reward\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_holders\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_interest\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_holdersCap\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_property\",\"type\":\"address\"}],\"name\":\"calculateRewardAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_property\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"calculateWithdrawableInterestAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"cap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"changeOwner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"configAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"createStorage\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"devMinter\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getAllValue\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_property\",\"type\":\"address\"}],\"name\":\"getPropertyValue\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getStorageAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getStorageAllValue\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getStorageCap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getStorageCumulativeGlobalRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getStorageCumulativeHoldersRewardCap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getStorageDIP4GenesisBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getStorageFallbackInitialCumulativeHoldersRewardCap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_property\",\"type\":\"address\"}],\"name\":\"getStorageInitialCumulativeHoldersRewardCap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_property\",\"type\":\"address\"}],\"name\":\"getStorageInterestPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getStorageLastCumulativeHoldersPriceCap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_property\",\"type\":\"address\"}],\"name\":\"getStorageLastCumulativeHoldersRewardAmountPerProperty\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getStorageLastCumulativeHoldersRewardPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_property\",\"type\":\"address\"}],\"name\":\"getStorageLastCumulativeHoldersRewardPricePerProperty\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getStorageLastCumulativeInterestPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_property\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getStorageLastInterestPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getStorageLastSameRewardsAmountAndBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_block\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_property\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getStorageLastStakedInterestPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getStorageLastStakesChangedCumulativeReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_property\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getStoragePendingInterestWithdrawal\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_property\",\"type\":\"address\"}],\"name\":\"getStoragePropertyValue\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_property\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_sender\",\"type\":\"address\"}],\"name\":\"getStorageValue\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_property\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_sender\",\"type\":\"address\"}],\"name\":\"getValue\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isOwner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_property\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"lockup\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_storageAddress\",\"type\":\"address\"}],\"name\":\"setStorage\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"update\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_cap\",\"type\":\"uint256\"}],\"name\":\"updateCap\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_property\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"Lockup","CompilerVersion":"v0.5.17+commit.d19bba13","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"0000000000000000000000001d415aa39d647834786eb9b5a333a50e9935b7960000000000000000000000004596dae6955693c50522f1b06bdbf7b93ceb5479","EVMVersion":"Default","Library":"","LicenseType":"MPL-2.0","Proxy":"0","Implementation":"","SwarmSource":"bzzr://971eaf677dc46df00936349572e1830a12b5af56a97ec4b4dd501b83dbe17aa4"}]}