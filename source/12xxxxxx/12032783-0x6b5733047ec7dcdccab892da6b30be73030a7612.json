{"status":"1","message":"OK","result":[{"SourceCode":"/**\r\n *Submitted for verification at Etherscan.io on 2021-04-21\r\n*/\r\n\r\npragma solidity ^0.7.6;\r\n\r\n// SPDX-License-Identifier: MIT\r\n// Source code: https://github.com/DeCash-Official/smart-contracts\r\n\r\ninterface DeCashRoleInterface {\r\n    function transferOwnership(address _newOwner) external;\r\n\r\n    function addRole(string memory _role, address _address) external;\r\n\r\n    function removeRole(string memory _role, address _address) external;\r\n}\r\n\r\ninterface DeCashStorageInterface {\r\n    // Getters\r\n    function getAddress(bytes32 _key) external view returns (address);\r\n\r\n    function getUint(bytes32 _key) external view returns (uint256);\r\n\r\n    function getString(bytes32 _key) external view returns (string memory);\r\n\r\n    function getBytes(bytes32 _key) external view returns (bytes memory);\r\n\r\n    function getBool(bytes32 _key) external view returns (bool);\r\n\r\n    function getInt(bytes32 _key) external view returns (int256);\r\n\r\n    function getBytes32(bytes32 _key) external view returns (bytes32);\r\n\r\n    // Setters\r\n    function setAddress(bytes32 _key, address _value) external;\r\n\r\n    function setUint(bytes32 _key, uint256 _value) external;\r\n\r\n    function setString(bytes32 _key, string calldata _value) external;\r\n\r\n    function setBytes(bytes32 _key, bytes calldata _value) external;\r\n\r\n    function setBool(bytes32 _key, bool _value) external;\r\n\r\n    function setInt(bytes32 _key, int256 _value) external;\r\n\r\n    function setBytes32(bytes32 _key, bytes32 _value) external;\r\n\r\n    // Deleters\r\n    function deleteAddress(bytes32 _key) external;\r\n\r\n    function deleteUint(bytes32 _key) external;\r\n\r\n    function deleteString(bytes32 _key) external;\r\n\r\n    function deleteBytes(bytes32 _key) external;\r\n\r\n    function deleteBool(bytes32 _key) external;\r\n\r\n    function deleteInt(bytes32 _key) external;\r\n\r\n    function deleteBytes32(bytes32 _key) external;\r\n}\r\n\r\n/// @title Base settings / modifiers for each contract in DeCash Token (Credits David Rugendyke/Rocket Pool)\r\n/// @author Fabrizio Amodio (ZioFabry)\r\n\r\nabstract contract DeCashBase {\r\n    // Version of the contract\r\n    uint8 public version;\r\n\r\n    // The main storage contract where primary persistant storage is maintained\r\n    DeCashStorageInterface internal _decashStorage = DeCashStorageInterface(0);\r\n\r\n    /**\r\n     * @dev Throws if called by any sender that doesn't match one of the supplied contract or is the latest version of that contract\r\n     */\r\n    modifier onlyLatestContract(\r\n        string memory _contractName,\r\n        address _contractAddress\r\n    ) {\r\n        require(\r\n            _contractAddress ==\r\n                _getAddress(\r\n                    keccak256(\r\n                        abi.encodePacked(\"contract.address\", _contractName)\r\n                    )\r\n                ),\r\n            \"Invalid or outdated contract\"\r\n        );\r\n        _;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(_isOwner(msg.sender), \"Account is not the owner\");\r\n        _;\r\n    }\r\n    modifier onlyAdmin() {\r\n        require(_isAdmin(msg.sender), \"Account is not an admin\");\r\n        _;\r\n    }\r\n    modifier onlySuperUser() {\r\n        require(_isSuperUser(msg.sender), \"Account is not a super user\");\r\n        _;\r\n    }\r\n    modifier onlyDelegator(address _address) {\r\n        require(_isDelegator(_address), \"Account is not a delegator\");\r\n        _;\r\n    }\r\n    modifier onlyFeeRecipient(address _address) {\r\n        require(_isFeeRecipient(_address), \"Account is not a fee recipient\");\r\n        _;\r\n    }\r\n    modifier onlyRole(string memory _role) {\r\n        require(_roleHas(_role, msg.sender), \"Account does not match the role\");\r\n        _;\r\n    }\r\n\r\n    /// @dev Set the main DeCash Storage address\r\n    constructor(address _decashStorageAddress) {\r\n        // Update the contract address\r\n        _decashStorage = DeCashStorageInterface(_decashStorageAddress);\r\n    }\r\n\r\n    function isOwner(address _address) external view returns (bool) {\r\n        return _isOwner(_address);\r\n    }\r\n\r\n    function isAdmin(address _address) external view returns (bool) {\r\n        return _isAdmin(_address);\r\n    }\r\n\r\n    function isSuperUser(address _address) external view returns (bool) {\r\n        return _isSuperUser(_address);\r\n    }\r\n\r\n    function isDelegator(address _address) external view returns (bool) {\r\n        return _isDelegator(_address);\r\n    }\r\n\r\n    function isFeeRecipient(address _address) external view returns (bool) {\r\n        return _isFeeRecipient(_address);\r\n    }\r\n\r\n    function isBlacklisted(address _address) external view returns (bool) {\r\n        return _isBlacklisted(_address);\r\n    }\r\n\r\n    /// @dev Get the address of a network contract by name\r\n    function _getContractAddress(string memory _contractName)\r\n        internal\r\n        view\r\n        returns (address)\r\n    {\r\n        // Get the current contract address\r\n        address contractAddress =\r\n            _getAddress(\r\n                keccak256(abi.encodePacked(\"contract.address\", _contractName))\r\n            );\r\n        // Check it\r\n        require(contractAddress != address(0x0), \"Contract not found\");\r\n        // Return\r\n        return contractAddress;\r\n    }\r\n\r\n    /// @dev Get the name of a network contract by address\r\n    function _getContractName(address _contractAddress)\r\n        internal\r\n        view\r\n        returns (string memory)\r\n    {\r\n        // Get the contract name\r\n        string memory contractName =\r\n            _getString(\r\n                keccak256(abi.encodePacked(\"contract.name\", _contractAddress))\r\n            );\r\n        // Check it\r\n        require(\r\n            keccak256(abi.encodePacked(contractName)) !=\r\n                keccak256(abi.encodePacked(\"\")),\r\n            \"Contract not found\"\r\n        );\r\n        // Return\r\n        return contractName;\r\n    }\r\n\r\n    /// @dev Role Management\r\n    function _roleHas(string memory _role, address _address)\r\n        internal\r\n        view\r\n        returns (bool)\r\n    {\r\n        return\r\n            _getBool(\r\n                keccak256(abi.encodePacked(\"access.role\", _role, _address))\r\n            );\r\n    }\r\n\r\n    function _isOwner(address _address) internal view returns (bool) {\r\n        return _roleHas(\"owner\", _address);\r\n    }\r\n\r\n    function _isAdmin(address _address) internal view returns (bool) {\r\n        return _roleHas(\"admin\", _address);\r\n    }\r\n\r\n    function _isSuperUser(address _address) internal view returns (bool) {\r\n        return _roleHas(\"admin\", _address) || _isOwner(_address);\r\n    }\r\n\r\n    function _isDelegator(address _address) internal view returns (bool) {\r\n        return _roleHas(\"delegator\", _address) || _isOwner(_address);\r\n    }\r\n\r\n    function _isFeeRecipient(address _address) internal view returns (bool) {\r\n        return _roleHas(\"fee\", _address) || _isOwner(_address);\r\n    }\r\n\r\n    function _isBlacklisted(address _address) internal view returns (bool) {\r\n        return _roleHas(\"blacklisted\", _address) && !_isOwner(_address);\r\n    }\r\n\r\n    /// @dev Storage get methods\r\n    function _getAddress(bytes32 _key) internal view returns (address) {\r\n        return _decashStorage.getAddress(_key);\r\n    }\r\n\r\n    function _getUint(bytes32 _key) internal view returns (uint256) {\r\n        return _decashStorage.getUint(_key);\r\n    }\r\n\r\n    function _getString(bytes32 _key) internal view returns (string memory) {\r\n        return _decashStorage.getString(_key);\r\n    }\r\n\r\n    function _getBytes(bytes32 _key) internal view returns (bytes memory) {\r\n        return _decashStorage.getBytes(_key);\r\n    }\r\n\r\n    function _getBool(bytes32 _key) internal view returns (bool) {\r\n        return _decashStorage.getBool(_key);\r\n    }\r\n\r\n    function _getInt(bytes32 _key) internal view returns (int256) {\r\n        return _decashStorage.getInt(_key);\r\n    }\r\n\r\n    function _getBytes32(bytes32 _key) internal view returns (bytes32) {\r\n        return _decashStorage.getBytes32(_key);\r\n    }\r\n\r\n    function _getAddressS(string memory _key) internal view returns (address) {\r\n        return _decashStorage.getAddress(keccak256(abi.encodePacked(_key)));\r\n    }\r\n\r\n    function _getUintS(string memory _key) internal view returns (uint256) {\r\n        return _decashStorage.getUint(keccak256(abi.encodePacked(_key)));\r\n    }\r\n\r\n    function _getStringS(string memory _key)\r\n        internal\r\n        view\r\n        returns (string memory)\r\n    {\r\n        return _decashStorage.getString(keccak256(abi.encodePacked(_key)));\r\n    }\r\n\r\n    function _getBytesS(string memory _key)\r\n        internal\r\n        view\r\n        returns (bytes memory)\r\n    {\r\n        return _decashStorage.getBytes(keccak256(abi.encodePacked(_key)));\r\n    }\r\n\r\n    function _getBoolS(string memory _key) internal view returns (bool) {\r\n        return _decashStorage.getBool(keccak256(abi.encodePacked(_key)));\r\n    }\r\n\r\n    function _getIntS(string memory _key) internal view returns (int256) {\r\n        return _decashStorage.getInt(keccak256(abi.encodePacked(_key)));\r\n    }\r\n\r\n    function _getBytes32S(string memory _key) internal view returns (bytes32) {\r\n        return _decashStorage.getBytes32(keccak256(abi.encodePacked(_key)));\r\n    }\r\n\r\n    /// @dev Storage set methods\r\n    function _setAddress(bytes32 _key, address _value) internal {\r\n        _decashStorage.setAddress(_key, _value);\r\n    }\r\n\r\n    function _setUint(bytes32 _key, uint256 _value) internal {\r\n        _decashStorage.setUint(_key, _value);\r\n    }\r\n\r\n    function _setString(bytes32 _key, string memory _value) internal {\r\n        _decashStorage.setString(_key, _value);\r\n    }\r\n\r\n    function _setBytes(bytes32 _key, bytes memory _value) internal {\r\n        _decashStorage.setBytes(_key, _value);\r\n    }\r\n\r\n    function _setBool(bytes32 _key, bool _value) internal {\r\n        _decashStorage.setBool(_key, _value);\r\n    }\r\n\r\n    function _setInt(bytes32 _key, int256 _value) internal {\r\n        _decashStorage.setInt(_key, _value);\r\n    }\r\n\r\n    function _setBytes32(bytes32 _key, bytes32 _value) internal {\r\n        _decashStorage.setBytes32(_key, _value);\r\n    }\r\n\r\n    function _setAddressS(string memory _key, address _value) internal {\r\n        _decashStorage.setAddress(keccak256(abi.encodePacked(_key)), _value);\r\n    }\r\n\r\n    function _setUintS(string memory _key, uint256 _value) internal {\r\n        _decashStorage.setUint(keccak256(abi.encodePacked(_key)), _value);\r\n    }\r\n\r\n    function _setStringS(string memory _key, string memory _value) internal {\r\n        _decashStorage.setString(keccak256(abi.encodePacked(_key)), _value);\r\n    }\r\n\r\n    function _setBytesS(string memory _key, bytes memory _value) internal {\r\n        _decashStorage.setBytes(keccak256(abi.encodePacked(_key)), _value);\r\n    }\r\n\r\n    function _setBoolS(string memory _key, bool _value) internal {\r\n        _decashStorage.setBool(keccak256(abi.encodePacked(_key)), _value);\r\n    }\r\n\r\n    function _setIntS(string memory _key, int256 _value) internal {\r\n        _decashStorage.setInt(keccak256(abi.encodePacked(_key)), _value);\r\n    }\r\n\r\n    function _setBytes32S(string memory _key, bytes32 _value) internal {\r\n        _decashStorage.setBytes32(keccak256(abi.encodePacked(_key)), _value);\r\n    }\r\n\r\n    /// @dev Storage delete methods\r\n    function _deleteAddress(bytes32 _key) internal {\r\n        _decashStorage.deleteAddress(_key);\r\n    }\r\n\r\n    function _deleteUint(bytes32 _key) internal {\r\n        _decashStorage.deleteUint(_key);\r\n    }\r\n\r\n    function _deleteString(bytes32 _key) internal {\r\n        _decashStorage.deleteString(_key);\r\n    }\r\n\r\n    function _deleteBytes(bytes32 _key) internal {\r\n        _decashStorage.deleteBytes(_key);\r\n    }\r\n\r\n    function _deleteBool(bytes32 _key) internal {\r\n        _decashStorage.deleteBool(_key);\r\n    }\r\n\r\n    function _deleteInt(bytes32 _key) internal {\r\n        _decashStorage.deleteInt(_key);\r\n    }\r\n\r\n    function _deleteBytes32(bytes32 _key) internal {\r\n        _decashStorage.deleteBytes32(_key);\r\n    }\r\n\r\n    function _deleteAddressS(string memory _key) internal {\r\n        _decashStorage.deleteAddress(keccak256(abi.encodePacked(_key)));\r\n    }\r\n\r\n    function _deleteUintS(string memory _key) internal {\r\n        _decashStorage.deleteUint(keccak256(abi.encodePacked(_key)));\r\n    }\r\n\r\n    function _deleteStringS(string memory _key) internal {\r\n        _decashStorage.deleteString(keccak256(abi.encodePacked(_key)));\r\n    }\r\n\r\n    function _deleteBytesS(string memory _key) internal {\r\n        _decashStorage.deleteBytes(keccak256(abi.encodePacked(_key)));\r\n    }\r\n\r\n    function _deleteBoolS(string memory _key) internal {\r\n        _decashStorage.deleteBool(keccak256(abi.encodePacked(_key)));\r\n    }\r\n\r\n    function _deleteIntS(string memory _key) internal {\r\n        _decashStorage.deleteInt(keccak256(abi.encodePacked(_key)));\r\n    }\r\n\r\n    function _deleteBytes32S(string memory _key) internal {\r\n        _decashStorage.deleteBytes32(keccak256(abi.encodePacked(_key)));\r\n    }\r\n}\r\n\r\n/// @title Role Based Access Control for DeCash Token (Credits David Rugendyke/Rocket Pool)\r\n/// @author Fabrizio Amodio (ZioFabry)\r\n\r\ncontract DeCashRole is DeCashBase, DeCashRoleInterface {\r\n    // Events\r\n    event RoleAdded(bytes32 indexed role, address indexed to);\r\n    event RoleRemoved(bytes32 indexed role, address indexed to);\r\n    event OwnershipTransferred(address indexed from, address indexed to);\r\n\r\n    // Construct\r\n    constructor(address _decashStorageAddress)\r\n        DeCashBase(_decashStorageAddress)\r\n    {\r\n        version = 1;\r\n    }\r\n\r\n    /**\r\n     * @dev Allows the current owner to transfer control of the network to a new owner\r\n     * @param _newOwner The address to transfer ownership to\r\n     */\r\n    function transferOwnership(address _newOwner)\r\n        external\r\n        override\r\n        onlyLatestContract(\"role\", address(this))\r\n        onlyOwner\r\n    {\r\n        // Check new owner address\r\n        require(_newOwner != address(0x0), \"The new owner address is invalid\");\r\n        require(\r\n            _newOwner != msg.sender,\r\n            \"The new owner address must not be the existing owner address\"\r\n        );\r\n        // Remove current owner\r\n        _deleteBool(\r\n            keccak256(abi.encodePacked(\"access.role\", \"owner\", msg.sender))\r\n        );\r\n        // Add new owner\r\n        _setBool(\r\n            keccak256(abi.encodePacked(\"access.role\", \"owner\", _newOwner)),\r\n            true\r\n        );\r\n        // Emit ownership transferred event\r\n        emit OwnershipTransferred(msg.sender, _newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Add a role to an address\r\n     */\r\n    function addRole(string memory _role, address _address)\r\n        external\r\n        override\r\n        onlyLatestContract(\"role\", address(this))\r\n        onlySuperUser\r\n    {\r\n        // Check role\r\n        require(\r\n            keccak256(abi.encodePacked(_role)) !=\r\n                keccak256(abi.encodePacked(\"owner\")),\r\n            \"The owner role cannot be added to an address\"\r\n        );\r\n        // Check address\r\n        require(_address != address(0x0), \"The address is invalid\");\r\n        // Check address does not already have role\r\n        require(\r\n            !_getBool(\r\n                keccak256(abi.encodePacked(\"access.role\", _role, _address))\r\n            ),\r\n            \"The address already has access to this role\"\r\n        );\r\n        // Add role\r\n        _setBool(\r\n            keccak256(abi.encodePacked(\"access.role\", _role, _address)),\r\n            true\r\n        );\r\n        // Emit role added event\r\n        emit RoleAdded(keccak256(abi.encodePacked(_role)), _address);\r\n    }\r\n\r\n    /**\r\n     * @dev Remove a role from an address\r\n     */\r\n    function removeRole(string memory _role, address _address)\r\n        external\r\n        override\r\n        onlyLatestContract(\"role\", address(this))\r\n        onlySuperUser\r\n    {\r\n        // Check role is not being removed from owner address\r\n        require(\r\n            !_roleHas(\"owner\", _address),\r\n            \"Roles cannot be removed from the owner address\"\r\n        );\r\n        // Check address has role\r\n        require(\r\n            _getBool(\r\n                keccak256(abi.encodePacked(\"access.role\", _role, _address))\r\n            ),\r\n            \"The address does not have access to this role\"\r\n        );\r\n        // Remove role\r\n        _deleteBool(\r\n            keccak256(abi.encodePacked(\"access.role\", _role, _address))\r\n        );\r\n        // Emit role removed event\r\n        emit RoleRemoved(keccak256(abi.encodePacked(_role)), _address);\r\n    }\r\n}\r\n\r\ncontract EURDRole is DeCashRole {\r\n    constructor(address _storage) DeCashRole(_storage) {}\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_decashStorageAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"RoleAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"RoleRemoved\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_role\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"addRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"isAdmin\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"isBlacklisted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"isDelegator\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"isFeeRecipient\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"isOwner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"isSuperUser\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_role\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"removeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"DeCashRole","CompilerVersion":"v0.7.6+commit.7338295f","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"00000000000000000000000070c70f1195a5d7544fa36eb70b58a89ab270daf0","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://5551edc0785b9dbb2829e964f8f6441d1730eb72232b33acbd074902363cc2ac"}]}