{"status":"1","message":"OK","result":[{"SourceCode":"{\"B34RToken.sol\":{\"content\":\"pragma solidity ^0.4.23;\\n\\nimport \\\"./MintableToken.sol\\\";\\nimport \\\"./BurnableToken.sol\\\";\\nimport \\\"./Blacklisted.sol\\\";\\n\\n/**\\n * @title Token\\n * ERC20 Token.\\n * Genesis Token\\n */\\ncontract B34R is MintableToken, BurnableToken, Blacklisted {\\n\\n  string public constant name = \\\"B34R\\\"; // solium-disable-line uppercase\\n  string public constant symbol = \\\"B34R\\\"; // solium-disable-line uppercase\\n  uint8 public constant decimals = 18; // solium-disable-line uppercase\\n\\n  uint256 public constant INITIAL_SUPPLY = 1000 * 1000 * (1000 ** uint256(decimals)); // initial supply B34R token\\n\\n  bool public isUnlocked = false;\\n\\n  /**\\n   * Constructor that gives msg.sender all of existing tokens.\\n   */\\n  constructor(address _wallet) public {\\n    totalSupply_ = INITIAL_SUPPLY;\\n    balances[_wallet] = INITIAL_SUPPLY;\\n    emit Transfer(address(0), _wallet, INITIAL_SUPPLY);\\n  }\\n\\n  modifier onlyTransferable() {\\n    require(isUnlocked || owners[msg.sender] != 0);\\n    _;\\n  }\\n\\n  function transferFrom(address _from, address _to, uint256 _value) public onlyTransferable notBlacklisted returns (bool) {\\n      return super.transferFrom(_from, _to, _value);\\n  }\\n\\n  function transfer(address _to, uint256 _value) public onlyTransferable notBlacklisted returns (bool) {\\n      return super.transfer(_to, _value);\\n  }\\n\\n  function unlockTransfer() public onlyOwner {\\n      isUnlocked = true;\\n  }\\n\\n  function lockTransfer() public onlyOwner {\\n      isUnlocked = false;\\n  }\\n\\n}\\n\"},\"BasicToken.sol\":{\"content\":\"pragma solidity ^0.4.23;\\n\\nimport \\\"./ERC20Basic.sol\\\";\\nimport \\\"./SafeMath.sol\\\";\\n\\n\\n/**\\n * @title Basic token\\n * Basic version of StandardToken, with no allowances.\\n */\\ncontract BasicToken is ERC20Basic {\\n  using SafeMath for uint256;\\n\\n  mapping(address =\\u003e uint256) balances;\\n\\n  uint256 totalSupply_;\\n\\n  /**\\n  *  total number of tokens in existence\\n  */\\n  function totalSupply() public view returns (uint256) {\\n    return totalSupply_;\\n  }\\n\\n  /**\\n  *  transfer token for a specified address\\n  * @param _to The address to transfer to.\\n  * @param _value The amount to be transferred.\\n  */\\n  function transfer(address _to, uint256 _value) public returns (bool) {\\n    require(_to != address(0));\\n    require(_value \\u003c= balances[msg.sender]);\\n\\n    balances[msg.sender] = balances[msg.sender].sub(_value);\\n    balances[_to] = balances[_to].add(_value);\\n    emit Transfer(msg.sender, _to, _value);\\n    return true;\\n  }\\n\\n  /**\\n  *  Gets the balance of the specified address.\\n  * @param _owner The address to query the the balance of.\\n  * @return An uint256 representing the amount owned by the passed address.\\n  */\\n  function balanceOf(address _owner) public view returns (uint256 balance) {\\n    return balances[_owner];\\n  }\\n\\n}\\n\"},\"Blacklisted.sol\":{\"content\":\"pragma solidity ^0.4.23;\\n\\nimport \\\"./MultiOwnable.sol\\\";\\n\\n/**\\n * @title Basic token\\n *  Basic version of StandardToken, with no allowances.\\n */\\ncontract Blacklisted is MultiOwnable {\\n\\n  mapping(address =\\u003e bool) public blacklist;\\n\\n  /**\\n  *  Throws if called by any account other than the owner.\\n  */\\n  modifier notBlacklisted() {\\n    require(blacklist[msg.sender] == false);\\n    _;\\n  }\\n\\n  /**\\n   *  Adds single address to blacklist.\\n   * @param _villain Address to be added to the blacklist\\n   */\\n  function addToBlacklist(address _villain) external onlyOwner {\\n    blacklist[_villain] = true;\\n  }\\n\\n  /**\\n   *  Adds list of addresses to blacklist. Not overloaded due to limitations with truffle testing.\\n   * @param _villains Addresses to be added to the blacklist\\n   */\\n  function addManyToBlacklist(address[] _villains) external onlyOwner {\\n    for (uint256 i = 0; i \\u003c _villains.length; i++) {\\n      blacklist[_villains[i]] = true;\\n    }\\n  }\\n\\n  /**\\n   *  Removes single address from blacklist.\\n   * @param _villain Address to be removed to the blacklist\\n   */\\n  function removeFromBlacklist(address _villain) external onlyOwner {\\n    blacklist[_villain] = false;\\n  }\\n}\\n\"},\"BurnableToken.sol\":{\"content\":\"pragma solidity ^0.4.23;\\n\\nimport \\\"./BasicToken.sol\\\";\\n\\n\\n/**\\n * @title Burnable Token\\n *  Token that can be irreversibly burned (destroyed).\\n */\\ncontract BurnableToken is BasicToken {\\n\\n  event Burn(address indexed burner, uint256 value);\\n\\n  /**\\n   *  Burns a specific amount of tokens.\\n   * @param _value The amount of token to be burned.\\n   */\\n  function burn(uint256 _value) public {\\n    _burn(msg.sender, _value);\\n  }\\n\\n  function _burn(address _who, uint256 _value) internal {\\n    require(_value \\u003c= balances[_who]);\\n    // no need to require value \\u003c= totalSupply, since that would imply the\\n    // sender\\u0027s balance is greater than the totalSupply, which *should* be an assertion failure\\n\\n    balances[_who] = balances[_who].sub(_value);\\n    totalSupply_ = totalSupply_.sub(_value);\\n    emit Burn(_who, _value);\\n    emit Transfer(_who, address(0), _value);\\n  }\\n}\\n\"},\"ERC20.sol\":{\"content\":\"pragma solidity ^0.4.23;\\n\\nimport \\\"./ERC20Basic.sol\\\";\\n\\n\\n/**\\n * @title ERC20 interface\\n * \\n */\\ncontract ERC20 is ERC20Basic {\\n  function allowance(address owner, address spender) public view returns (uint256);\\n  function transferFrom(address from, address to, uint256 value) public returns (bool);\\n  function approve(address spender, uint256 value) public returns (bool);\\n  event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"},\"ERC20Basic.sol\":{\"content\":\"pragma solidity ^0.4.23;\\n\\n\\n/**\\n * @title ERC20Basic\\n */\\ncontract ERC20Basic {\\n  function totalSupply() public view returns (uint256);\\n  function balanceOf(address who) public view returns (uint256);\\n  function transfer(address to, uint256 value) public returns (bool);\\n  event Transfer(address indexed from, address indexed to, uint256 value);\\n}\\n\"},\"MintableToken.sol\":{\"content\":\"pragma solidity ^0.4.23;\\n\\nimport \\\"./StandardToken.sol\\\";\\nimport \\\"./MultiOwnable.sol\\\";\\n\\n\\n/**\\n * @title Mintable token\\n *  Simple ERC20 Token example, with mintable token creation\\n * Based on code by TokenMarketNet: https://github.com/TokenMarketNet/ico/blob/master/contracts/MintableToken.sol\\n */\\ncontract MintableToken is StandardToken, MultiOwnable {\\n  event Mint(address indexed to, uint256 amount);\\n  event MintFinished();\\n\\n  bool public mintingFinished = false;\\n\\n\\n  modifier canMint() {\\n    require(!mintingFinished);\\n    _;\\n  }\\n\\n  /**\\n   * @param _to The address that will receive the minted tokens.\\n   * @param _amount The amount of tokens to mint.\\n   * @return A boolean that indicates if the operation was successful.\\n   */\\n  function mint(address _to, uint256 _amount) onlyOwner canMint public returns (bool) {\\n    totalSupply_ = totalSupply_.add(_amount);\\n    balances[_to] = balances[_to].add(_amount);\\n    emit Mint(_to, _amount);\\n    emit Transfer(address(0), _to, _amount);\\n    return true;\\n  }\\n\\n  /**\\n   *  Function to stop minting new tokens.\\n   * @return True if the operation was successful.\\n   */\\n  function finishMinting() onlyOwner canMint public returns (bool) {\\n    mintingFinished = true;\\n    emit MintFinished();\\n    return true;\\n  }\\n}\\n\"},\"MultiOwnable.sol\":{\"content\":\"pragma solidity ^0.4.23;\\n\\n/**\\n * @title MultiOwnable\\n */\\ncontract MultiOwnable {\\n  address public root;\\n  mapping (address =\\u003e address) public owners; // owner =\\u003e parent of owner\\n  \\n  /**\\n  *  The Ownable constructor sets the original `owner` of the contract to the sender\\n  * account.\\n  */\\n  constructor() public {\\n    root = msg.sender;\\n    owners[root] = root;\\n  }\\n  \\n  /**\\n  *  Throws if called by any account other than the owner.\\n  */\\n  modifier onlyOwner() {\\n    require(owners[msg.sender] != 0);\\n    _;\\n  }\\n  \\n  /**\\n  *  Adding new owners\\n  */\\n  function newOwner(address _owner) onlyOwner external returns (bool) {\\n    require(_owner != 0);\\n    require(owners[_owner] == 0);\\n    owners[_owner] = msg.sender;\\n    return true;\\n  }\\n  \\n  /**\\n    *  Deleting owners\\n    */\\n  function deleteOwner(address _owner) onlyOwner external returns (bool) {\\n    require(owners[_owner] == msg.sender || (owners[_owner] != 0 \\u0026\\u0026 msg.sender == root));\\n    owners[_owner] = 0;\\n    return true;\\n  }\\n}\\n\"},\"RBAC.sol\":{\"content\":\"pragma solidity ^0.4.23;\\n\\nimport \\\"./Roles.sol\\\";\\n\\n\\n/**\\n * @title RBAC (Role-Based Access Control)\\n * @author Matt Condon (@Shrugs)\\n * @ Stores and provides setters and getters for roles and addresses.\\n * @ Supports unlimited numbers of roles and addresses.\\n * @ See //contracts/mocks/RBACMock.sol for an example of usage.\\n * This RBAC method uses strings to key roles. It may be beneficial\\n *  for you to write your own implementation of this interface using Enums or similar.\\n * It\\u0027s also recommended that you define constants in the contract, like ROLE_ADMIN below,\\n *  to avoid typos.\\n */\\ncontract RBAC {\\n  using Roles for Roles.Role;\\n\\n  mapping (string =\\u003e Roles.Role) private roles;\\n\\n  event RoleAdded(address addr, string roleName);\\n  event RoleRemoved(address addr, string roleName);\\n\\n  /**\\n   *  reverts if addr does not have role\\n   * @param addr address\\n   * @param roleName the name of the role\\n   * // reverts\\n   */\\n  function checkRole(address addr, string roleName)\\n    view\\n    public\\n  {\\n    roles[roleName].check(addr);\\n  }\\n\\n  /**\\n   *  determine if addr has role\\n   * @param addr address\\n   * @param roleName the name of the role\\n   * @return bool\\n   */\\n  function hasRole(address addr, string roleName)\\n    view\\n    public\\n    returns (bool)\\n  {\\n    return roles[roleName].has(addr);\\n  }\\n\\n  /**\\n   *  add a role to an address\\n   * @param addr address\\n   * @param roleName the name of the role\\n   */\\n  function addRole(address addr, string roleName)\\n    internal\\n  {\\n    roles[roleName].add(addr);\\n    emit RoleAdded(addr, roleName);\\n  }\\n\\n  /**\\n   *  remove a role from an address\\n   * @param addr address\\n   * @param roleName the name of the role\\n   */\\n  function removeRole(address addr, string roleName)\\n    internal\\n  {\\n    roles[roleName].remove(addr);\\n    emit RoleRemoved(addr, roleName);\\n  }\\n\\n  /**\\n   *  modifier to scope access to a single role (uses msg.sender as addr)\\n   * @param roleName the name of the role\\n   * // reverts\\n   */\\n  modifier onlyRole(string roleName)\\n  {\\n    checkRole(msg.sender, roleName);\\n    _;\\n  }\\n}\\n\"},\"RBACImplement.sol\":{\"content\":\"pragma solidity ^0.4.23;\\n\\nimport \\\"./RBACWithAdmin.sol\\\";\\n\\n\\ncontract RBACImplement is RBACWithAdmin {\\n\\n  string public constant ROLE_ADVISOR = \\\"advisor\\\";\\n\\n  modifier onlyAdminOrAdvisor()\\n  {\\n    require(\\n      hasRole(msg.sender, ROLE_ADMIN) ||\\n      hasRole(msg.sender, ROLE_ADVISOR)\\n    );\\n    _;\\n  }\\n\\n  constructor()\\n    public\\n  {\\n    addRole(msg.sender, ROLE_ADVISOR);\\n  }\\n\\n  // admins can remove advisor\\u0027s role\\n  function removeAdvisor(address _addr)\\n    onlyAdmin\\n    public\\n  {\\n    // revert if the user isn\\u0027t an advisor\\n    //  (perhaps you want to soft-fail here instead?)\\n    checkRole(_addr, ROLE_ADVISOR);\\n\\n    // remove the advisor\\u0027s role\\n    removeRole(_addr, ROLE_ADVISOR);\\n  }\\n}\\n\"},\"RBACWithAdmin.sol\":{\"content\":\"pragma solidity ^0.4.23;\\n\\nimport \\\"./RBAC.sol\\\";\\n\\n\\n/**\\n * @title RBACWithAdmin\\n * @author Matt Condon (@Shrugs)\\n * @ It\\u0027s recommended that you define constants in the contract,\\n * @ like ROLE_ADMIN below, to avoid typos.\\n */\\ncontract RBACWithAdmin is RBAC {\\n  /**\\n   * A constant role name for indicating admins.\\n   */\\n  string public constant ROLE_ADMIN = \\\"admin\\\";\\n\\n  /**\\n   *  modifier to scope access to admins\\n   * // reverts\\n   */\\n  modifier onlyAdmin()\\n  {\\n    checkRole(msg.sender, ROLE_ADMIN);\\n    _;\\n  }\\n\\n  /**\\n   *  constructor. Sets msg.sender as admin by default\\n   */\\n  constructor()\\n    public\\n  {\\n    addRole(msg.sender, ROLE_ADMIN);\\n  }\\n\\n  /**\\n   *  add a role to an address\\n   * @param addr address\\n   * @param roleName the name of the role\\n   */\\n  function adminAddRole(address addr, string roleName)\\n    onlyAdmin\\n    public\\n  {\\n    addRole(addr, roleName);\\n  }\\n\\n  /**\\n   *  remove a role from an address\\n   * @param addr address\\n   * @param roleName the name of the role\\n   */\\n  function adminRemoveRole(address addr, string roleName)\\n    onlyAdmin\\n    public\\n  {\\n    removeRole(addr, roleName);\\n  }\\n}\\n\"},\"Roles.sol\":{\"content\":\"pragma solidity ^0.4.23;\\n\\n\\n/**\\n * @title Roles\\n * @author Francisco Giordano (@frangio)\\n * @dev Library for managing addresses assigned to a Role.\\n *      See RBAC.sol for example usage.\\n */\\nlibrary Roles {\\n  struct Role {\\n    mapping (address =\\u003e bool) bearer;\\n  }\\n\\n  /**\\n   *  give an address access to this role\\n   */\\n  function add(Role storage role, address addr)\\n    internal\\n  {\\n    role.bearer[addr] = true;\\n  }\\n\\n  /**\\n   *  remove an address\\u0027 access to this role\\n   */\\n  function remove(Role storage role, address addr)\\n    internal\\n  {\\n    role.bearer[addr] = false;\\n  }\\n\\n  /**\\n   *  check if an address has this role\\n   * // reverts\\n   */\\n  function check(Role storage role, address addr)\\n    view\\n    internal\\n  {\\n    require(has(role, addr));\\n  }\\n\\n  /**\\n   *  check if an address has this role\\n   * @return bool\\n   */\\n  function has(Role storage role, address addr)\\n    view\\n    internal\\n    returns (bool)\\n  {\\n    return role.bearer[addr];\\n  }\\n}\\n\"},\"SafeMath.sol\":{\"content\":\"pragma solidity ^0.4.23;\\n\\n\\n/**\\n * @title SafeMath\\n *  Math operations with safety checks that throw on error\\n */\\nlibrary SafeMath {\\n\\n  /**\\n  *  Multiplies two numbers, throws on overflow.\\n  */\\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n    if (a == 0) {\\n      return 0;\\n    }\\n    uint256 c = a * b;\\n    assert(c / a == b);\\n    return c;\\n  }\\n\\n  /**\\n  *  Integer division of two numbers, truncating the quotient.\\n  */\\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n    // assert(b \\u003e 0); // Solidity automatically throws when dividing by 0\\n    // uint256 c = a / b;\\n    // assert(a == b * c + a % b); // There is no case in which this doesn\\u0027t hold\\n    return a / b;\\n  }\\n\\n  /**\\n  *  Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\\n  */\\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n    assert(b \\u003c= a);\\n    return a - b;\\n  }\\n\\n  /**\\n  *  Adds two numbers, throws on overflow.\\n  */\\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n    uint256 c = a + b;\\n    assert(c \\u003e= a);\\n    return c;\\n  }\\n}\\n\"},\"StandardToken.sol\":{\"content\":\"pragma solidity ^0.4.23;\\n\\nimport \\\"./BasicToken.sol\\\";\\nimport \\\"./ERC20.sol\\\";\\n\\n\\n/**\\n * @title Standard ERC20 token\\n *\\n */\\ncontract StandardToken is ERC20, BasicToken {\\n\\n  mapping (address =\\u003e mapping (address =\\u003e uint256)) internal allowed;\\n\\n\\n  /**\\n   *  Transfer tokens from one address to another\\n   * @param _from address The address which you want to send tokens from\\n   * @param _to address The address which you want to transfer to\\n   * @param _value uint256 the amount of tokens to be transferred\\n   */\\n  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\\n    require(_to != address(0));\\n    require(_value \\u003c= balances[_from]);\\n    require(_value \\u003c= allowed[_from][msg.sender]);\\n\\n    balances[_from] = balances[_from].sub(_value);\\n    balances[_to] = balances[_to].add(_value);\\n    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\\n    emit Transfer(_from, _to, _value);\\n    return true;\\n  }\\n\\n  /**\\n   *  Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\\n   *\\n   * Beware that changing an allowance with this method brings the risk that someone may use both the old\\n   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\\n   * race condition is to first reduce the spender\\u0027s allowance to 0 and set the desired value afterwards:\\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n   * @param _spender The address which will spend the funds.\\n   * @param _value The amount of tokens to be spent.\\n   */\\n  function approve(address _spender, uint256 _value) public returns (bool) {\\n    allowed[msg.sender][_spender] = _value;\\n    emit Approval(msg.sender, _spender, _value);\\n    return true;\\n  }\\n\\n  /**\\n   *  Function to check the amount of tokens that an owner allowed to a spender.\\n   * @param _owner address The address which owns the funds.\\n   * @param _spender address The address which will spend the funds.\\n   * @return A uint256 specifying the amount of tokens still available for the spender.\\n   */\\n  function allowance(address _owner, address _spender) public view returns (uint256) {\\n    return allowed[_owner][_spender];\\n  }\\n\\n  /**\\n   *  Increase the amount of tokens that an owner allowed to a spender.\\n   *\\n   * approve should be called when allowed[_spender] == 0. To increment\\n   * allowed value is better to use this function to avoid 2 calls (and wait until\\n   * the first transaction is mined)\\n   * From MonolithDAO Token.sol\\n   * @param _spender The address which will spend the funds.\\n   * @param _addedValue The amount of tokens to increase the allowance by.\\n   */\\n  function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\\n    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\\n    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\\n    return true;\\n  }\\n\\n  /**\\n   *  Decrease the amount of tokens that an owner allowed to a spender.\\n   *\\n   * approve should be called when allowed[_spender] == 0. To decrement\\n   * allowed value is better to use this function to avoid 2 calls (and wait until\\n   * the first transaction is mined)\\n   * From MonolithDAO Token.sol\\n   * @param _spender The address which will spend the funds.\\n   * @param _subtractedValue The amount of tokens to decrease the allowance by.\\n   */\\n  function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\\n    uint oldValue = allowed[msg.sender][_spender];\\n    if (_subtractedValue \\u003e oldValue) {\\n      allowed[msg.sender][_spender] = 0;\\n    } else {\\n      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\\n    }\\n    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\\n    return true;\\n  }\\n\\n}\\n\"}}","ABI":"[{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"owners\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"mintingFinished\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"lockTransfer\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_villains\",\"type\":\"address[]\"}],\"name\":\"addManyToBlacklist\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"INITIAL_SUPPLY\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_villain\",\"type\":\"address\"}],\"name\":\"addToBlacklist\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_villain\",\"type\":\"address\"}],\"name\":\"removeFromBlacklist\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseApproval\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"finishMinting\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isUnlocked\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"newOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unlockTransfer\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"deleteOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseApproval\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"root\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"blacklist\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_wallet\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"burner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Burn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Mint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"MintFinished\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"}]","ContractName":"B34R","CompilerVersion":"v0.4.23+commit.124ca40d","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"000000000000000000000000bef5d5e89f6d1622ad7316b83ca115e928f8b7a2","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"bzzr://c0fd855061a95de72199865e192034b9dfd1e4327f19450ca777874238af5666"}]}