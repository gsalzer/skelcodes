{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"settings\": {\r\n    \"evmVersion\": \"istanbul\",\r\n    \"libraries\": {},\r\n    \"metadata\": {\r\n      \"bytecodeHash\": \"ipfs\",\r\n      \"useLiteralContent\": true\r\n    },\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"remappings\": [],\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  },\r\n  \"sources\": {\r\n    \"contracts/AutoTopUp.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.0;\\n\\nimport {EnumerableSet} from \\\"./openzeppelin/utils/EnumerableSet.sol\\\";\\nimport {Ownable} from \\\"./openzeppelin/access/Ownable.sol\\\";\\n\\ncontract AutoTopUp is Ownable {\\n    using EnumerableSet for EnumerableSet.AddressSet;\\n\\n    address payable public immutable gelato;\\n\\n    struct TopUpData {\\n        uint256 amount;\\n        uint256 balanceThreshold;\\n    }\\n\\n    EnumerableSet.AddressSet internal _receivers;\\n    mapping(address => bytes32) public hashes;\\n    mapping(address => TopUpData) public receiverDetails;\\n\\n    event LogFundsDeposited(address indexed sender, uint256 amount);\\n    event LogFundsWithdrawn(\\n        address indexed sender,\\n        uint256 amount,\\n        address receiver\\n    );\\n    event LogTaskSubmitted(\\n        address indexed receiver,\\n        uint256 amount,\\n        uint256 balanceThreshold\\n    );\\n    event LogTaskCancelled(address indexed receiver, bytes32 cancelledHash);\\n\\n    constructor(address payable _gelato) {\\n        gelato = _gelato;\\n    }\\n\\n    modifier gelatofy() {\\n        require(msg.sender == gelato, \\\"AutoTopUp: Only gelato\\\");\\n        _;\\n    }\\n\\n    /// @notice deposit funds\\n    receive() external payable {\\n        emit LogFundsDeposited(msg.sender, msg.value);\\n    }\\n\\n    /// @notice withdraw fuds\\n    function withdraw(uint256 _amount, address payable _receiver)\\n        external\\n        onlyOwner\\n    {\\n        (bool success, ) = _receiver.call{value: _amount}(\\\"\\\");\\n        require(success, \\\"AutoTopUp: exec: Receiver payment failed\\\");\\n\\n        emit LogFundsWithdrawn(msg.sender, _amount, _receiver);\\n    }\\n\\n    /// @notice start an autopay\\n    function startAutoPay(\\n        address payable _receiver,\\n        uint256 _amount,\\n        uint256 _balanceThreshold\\n    ) external payable onlyOwner {\\n        require(\\n            !_receivers.contains(_receiver),\\n            \\\"AutoTopUp: startAutoPay: Receiver already assigned\\\"\\n        );\\n\\n        require(\\n            hashes[_receiver] == bytes32(0),\\n            \\\"AutoTopUp: startAutoPay: Hash already assigned\\\"\\n        );\\n\\n        _receivers.add(_receiver);\\n\\n        hashes[_receiver] = keccak256(abi.encode(_amount, _balanceThreshold));\\n        receiverDetails[_receiver] = TopUpData({\\n            amount: _amount,\\n            balanceThreshold: _balanceThreshold\\n        });\\n\\n        LogTaskSubmitted(_receiver, _amount, _balanceThreshold);\\n    }\\n\\n    /// @notice stop an autopay\\n    function stopAutoPay(address payable _receiver) external onlyOwner {\\n        require(\\n            _receivers.contains(_receiver),\\n            \\\"AutoTopUp: stopAutoPay: Invalid Autopay\\\"\\n        );\\n\\n        bytes32 storedHash = hashes[_receiver];\\n\\n        require(\\n            storedHash != bytes32(0),\\n            \\\"AutoTopUp: stopAutoPay: Hash not found\\\"\\n        );\\n\\n        // store receiver\\n        _receivers.remove(_receiver);\\n\\n        delete hashes[_receiver];\\n        delete receiverDetails[_receiver];\\n\\n        LogTaskCancelled(_receiver, storedHash);\\n    }\\n\\n    /// @dev entry point for gelato executiom\\n    /// @notice overcharging is prevented on Gelato.sol\\n    function exec(\\n        address payable _receiver,\\n        uint256 _amount,\\n        uint256 _balanceThreshold,\\n        uint256 _fee\\n    ) external gelatofy {\\n        require(\\n            isScheduled(_receiver, _amount, _balanceThreshold),\\n            \\\"AutoTopUp: exec: Hash invalid\\\"\\n        );\\n        require(\\n            _receiver.balance <= _balanceThreshold,\\n            \\\"AutoTopUp: exec: Balance not below threshold\\\"\\n        );\\n\\n        bool success;\\n        (success, ) = _receiver.call{value: _amount}(\\\"\\\");\\n        require(success, \\\"AutoTopUp: exec: Receiver payment failed\\\");\\n\\n        (success, ) = gelato.call{value: _fee}(\\\"\\\");\\n        require(success, \\\"AutoTopUp: exec: Receiver payment failed\\\");\\n    }\\n\\n    /// @notice Get all receivers\\n    /// @dev useful to query which autoPays to cancel\\n    function getReceivers()\\n        external\\n        view\\n        returns (address[] memory currentReceivers)\\n    {\\n        uint256 length = _receivers.length();\\n        currentReceivers = new address[](length);\\n        for (uint256 i; i < length; i++) currentReceivers[i] = _receivers.at(i);\\n    }\\n\\n    function isScheduled(\\n        address payable _receiver,\\n        uint256 _amount,\\n        uint256 _balanceThreshold\\n    ) public view returns (bool) {\\n        return\\n            hashes[_receiver] ==\\n            keccak256(abi.encode(_amount, _balanceThreshold));\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/AutoTopUpFactory.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.0;\\n\\nimport {EnumerableSet} from \\\"./openzeppelin/utils/EnumerableSet.sol\\\";\\nimport {AutoTopUp} from \\\"./AutoTopUp.sol\\\";\\nimport {Ownable} from \\\"./openzeppelin/access/Ownable.sol\\\";\\n\\ncontract AutoTopUpFactory is Ownable {\\n    using EnumerableSet for EnumerableSet.AddressSet;\\n\\n    mapping(address => AutoTopUp) public autoTopUpByOwner;\\n    mapping(AutoTopUp => address) public ownerByAutoTopUp;\\n\\n    EnumerableSet.AddressSet internal _autoTopUps;\\n\\n    event LogContractDeployed(address indexed autoTopUp, address owner);\\n\\n    address payable public immutable gelato;\\n\\n    constructor(address payable _gelato) {\\n        gelato = _gelato;\\n    }\\n\\n    function newAutoTopUp(\\n        address payable[] calldata _receivers,\\n        uint256[] calldata _amounts,\\n        uint256[] calldata _balanceThresholds\\n    ) external payable returns (AutoTopUp autoTopUp) {\\n        require(\\n            autoTopUpByOwner[msg.sender] == AutoTopUp(payable(address(0))),\\n            \\\"AutoTopUpFactory: newAutoTopUp: Already created AutoTopUp\\\"\\n        );\\n        require(\\n            _receivers.length == _amounts.length &&\\n                _receivers.length == _balanceThresholds.length,\\n            \\\"AutoTopUpFactory: newAutoTopUp: Input length mismatch\\\"\\n        );\\n\\n        autoTopUp = new AutoTopUp(gelato);\\n        for (uint256 i; i < _receivers.length; i++) {\\n            autoTopUp.startAutoPay(\\n                _receivers[i],\\n                _amounts[i],\\n                _balanceThresholds[i]\\n            );\\n        }\\n\\n        if (msg.value > 0) {\\n            (bool success, ) =\\n                payable(address(autoTopUp)).call{value: msg.value}(\\\"\\\");\\n            require(\\n                success,\\n                \\\"AutoTopUpFactory: newAutoTopUp: ETH transfer failed\\\"\\n            );\\n        }\\n\\n        autoTopUp.transferOwnership(msg.sender);\\n\\n        autoTopUpByOwner[msg.sender] = autoTopUp;\\n        ownerByAutoTopUp[autoTopUp] = msg.sender;\\n        _autoTopUps.add(address(autoTopUp));\\n\\n        emit LogContractDeployed(address(autoTopUp), msg.sender);\\n    }\\n\\n    /// @notice Get all autoTopUps\\n    /// @dev useful to query which autoTopUps to cancel\\n    function getAutoTopUps()\\n        external\\n        view\\n        returns (address[] memory currentAutoTopUps)\\n    {\\n        uint256 length = _autoTopUps.length();\\n        currentAutoTopUps = new address[](length);\\n        for (uint256 i; i < length; i++)\\n            currentAutoTopUps[i] = _autoTopUps.at(i);\\n    }\\n\\n    function withdraw(uint256 _amount, address payable _to) external onlyOwner {\\n        (bool success, ) = _to.call{value: _amount}(\\\"\\\");\\n        require(success, \\\"AutoTopUpFactory: withdraw: ETH transfer failed\\\");\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/openzeppelin/GSN/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return payable(msg.sender);\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/openzeppelin/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0;\\n\\nimport \\\"../GSN/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(\\n        address indexed previousOwner,\\n        address indexed newOwner\\n    );\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(_owner == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(\\n            newOwner != address(0),\\n            \\\"Ownable: new owner is the zero address\\\"\\n        );\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/openzeppelin/utils/EnumerableSet.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping(bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) {\\n            // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            // When the value to delete is the last one, the swap operation is unnecessary. However, since this occurs\\n            // so rarely, we still do the swap anyway to avoid the gas cost of adding an 'if' statement.\\n\\n            bytes32 lastvalue = set._values[lastIndex];\\n\\n            // Move the last value to the index where the value to delete is\\n            set._values[toDeleteIndex] = lastvalue;\\n            // Update the index for the moved value\\n            set._indexes[lastvalue] = toDeleteIndex + 1; // All indexes are 1-based\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value)\\n        private\\n        view\\n        returns (bool)\\n    {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Set storage set, uint256 index)\\n        private\\n        view\\n        returns (bytes32)\\n    {\\n        require(\\n            set._values.length > index,\\n            \\\"EnumerableSet: index out of bounds\\\"\\n        );\\n        return set._values[index];\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value)\\n        internal\\n        returns (bool)\\n    {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value)\\n        internal\\n        returns (bool)\\n    {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value)\\n        internal\\n        view\\n        returns (bool)\\n    {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32Set storage set, uint256 index)\\n        internal\\n        view\\n        returns (bytes32)\\n    {\\n        return _at(set._inner, index);\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value)\\n        internal\\n        returns (bool)\\n    {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value)\\n        internal\\n        returns (bool)\\n    {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value)\\n        internal\\n        view\\n        returns (bool)\\n    {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressSet storage set, uint256 index)\\n        internal\\n        view\\n        returns (address)\\n    {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value)\\n        internal\\n        returns (bool)\\n    {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value)\\n        internal\\n        view\\n        returns (bool)\\n    {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintSet storage set, uint256 index)\\n        internal\\n        view\\n        returns (uint256)\\n    {\\n        return uint256(_at(set._inner, index));\\n    }\\n}\\n\"\r\n    }\r\n  }\r\n}}","ABI":"[{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_gelato\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"autoTopUp\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"LogContractDeployed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"autoTopUpByOwner\",\"outputs\":[{\"internalType\":\"contract AutoTopUp\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"gelato\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAutoTopUps\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"currentAutoTopUps\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable[]\",\"name\":\"_receivers\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_balanceThresholds\",\"type\":\"uint256[]\"}],\"name\":\"newAutoTopUp\",\"outputs\":[{\"internalType\":\"contract AutoTopUp\",\"name\":\"autoTopUp\",\"type\":\"address\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract AutoTopUp\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"ownerByAutoTopUp\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"address payable\",\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"AutoTopUpFactory","CompilerVersion":"v0.8.0+commit.c7dfd78e","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"0000000000000000000000003caca7b48d0573d793d3b0279b5f0029180e83b6","EVMVersion":"Default","Library":"","LicenseType":"Unlicense","Proxy":"0","Implementation":"","SwarmSource":""}]}