{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"/Users/jasper/Documents/GitHub/DEX/contracts/DeFiPlaza.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.7.6;\\n\\nimport \\\"../interfaces/IDeFiPlaza.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\\\";\\n\\n/**\\n * @title DeFi Plaza exchange controct, multi token DEX.\\n * @author Jazzer 9F\\n * @notice Trades between two tokens follow the local bonding curve x*y=k\\n * The number of tokens used is hard coded to 16 for efficiency reasons.\\n */\\ncontract DeFiPlaza is IDeFiPlaza, Ownable, ERC20 {\\n  using SafeMath for uint256;\\n  using SafeERC20 for IERC20;\\n\\n  // States that each token can be in\\n  enum State {Unlisted, PreListing, Delisting, Listed}\\n\\n  // Configuration per token. Still some bits available if needed\\n  struct TokenSettings {\\n    State state;                      // What state the token is currently in\\n    uint112 listingTarget;            // Amount of tokens needed to activate listing\\n  }\\n\\n  // Exchange configuration\\n  struct Config {\\n    bool unlocked;                    // Locked for trading to prevent re-entrancy misery\\n    uint64 oneMinusTradingFee;        // One minus the swap fee (0.64 fixed point integer)\\n    uint64 delistingBonus;            // Amount of additional tokens to encourage immediate delisting (0.64 fixed point)\\n  }\\n\\n  // Keeps track of whether there is a listing change underway and if so between which tokens\\n  struct ListingUpdate {\\n    address tokenToDelist;            // Token to be removed\\n    address tokenToList;              // Token to be listed\\n  }\\n\\n  // Mapping to keep track of the listed tokens\\n  mapping(address => TokenSettings) public listedTokens;\\n  Config public DFPconfig;\\n  ListingUpdate public listingUpdate;\\n  address public admin;\\n\\n  /**\\n  * Sets up default configuration\\n  * Initialize with ordered list of 15 token addresses (ETH is always listed)\\n  * Doesn't do any checks. Make sure you ONLY add well behaved ERC20s!!\\n  */\\n  constructor(address[] memory tokensToList, string memory name_, string memory symbol_) ERC20(name_, symbol_) {\\n    // Basic exchange configuration\\n    Config memory config;\\n    config.unlocked = false;\\n    config.oneMinusTradingFee = 0xffbe76c8b4395800;   // approximately 0.999\\n    config.delistingBonus = 0;\\n    DFPconfig = config;\\n\\n    // Configure the listed tokens as such\\n    TokenSettings memory listed;\\n    listed.state = State.Listed;\\n    require(tokensToList.length == 15, \\\"Incorrect number of tokens\\\");\\n    address previous = address(0);\\n    address current = address(0);\\n    for (uint256 i = 0; i < 15; i++) {\\n      current = tokensToList[i];\\n      require(current > previous, \\\"Require ordered list\\\");\\n      listedTokens[current] = listed;\\n      previous = current;\\n    }\\n\\n    // Generate the LP tokens reflecting the initial liquidity (to be loaded externally)\\n    _mint(msg.sender, 1600e18);\\n  }\\n\\n  // For bootstrapping ETH liquidity\\n  receive() external payable {}\\n\\n  // To safeguard some functionality is only applied to listed tokens\\n  modifier onlyListedToken(address token) {\\n    require(\\n      token == address(0) || listedTokens[token].state > State.Delisting,\\n      \\\"DFP: Token not listed\\\"\\n    );\\n    _;\\n  }\\n\\n  modifier onlyAdmin() {\\n    require(\\n      msg.sender == admin || msg.sender == owner(),\\n      \\\"DFP: admin rights required\\\"\\n    );\\n    _;\\n  }\\n\\n  /**\\n  * Allows users to swap between any two tokens listed on the DEX.\\n  * Follows the x*y=k swap invariant hyperbole\\n  * For ETH trades, send the ETH with the transaction and use the NULL address as inputToken.\\n  */\\n  function swap(\\n    address inputToken,\\n    address outputToken,\\n    uint256 inputAmount,\\n    uint256 minOutputAmount\\n  )\\n    external\\n    payable\\n    onlyListedToken(inputToken)\\n    onlyListedToken(outputToken)\\n    override\\n    returns (uint256 outputAmount)\\n  {\\n    // Check that the exchange is unlocked and thus open for business\\n    Config memory _config = DFPconfig;\\n    require(_config.unlocked, \\\"DFP: Locked\\\");\\n\\n    // Pull in input token and check the exchange balance for that token\\n    uint256 initialInputBalance;\\n    if (inputToken == address(0)) {\\n      require(msg.value == inputAmount, \\\"DFP: bad ETH amount\\\");\\n      initialInputBalance = address(this).balance - inputAmount;\\n    } else {\\n      initialInputBalance = IERC20(inputToken).balanceOf(address(this));\\n      IERC20(inputToken).safeTransferFrom(msg.sender, address(this), inputAmount);\\n    }\\n\\n    // Check dex balance of the output token\\n    uint256 initialOutputBalance;\\n    if (outputToken == address(0)) {\\n      initialOutputBalance = address(this).balance;\\n    } else {\\n      initialOutputBalance = IERC20(outputToken).balanceOf(address(this));\\n    }\\n\\n    // Calculate the output amount through the x*y=k invariant\\n    // Can skip overflow/underflow checks on this calculation as they will always work against an attacker anyway.\\n    uint256 netInputAmount = inputAmount * _config.oneMinusTradingFee;\\n    outputAmount = netInputAmount * initialOutputBalance / ((initialInputBalance << 64) + netInputAmount);\\n    require(outputAmount > minOutputAmount, \\\"DFP: No deal\\\");\\n\\n    // Send output tokens to whoever invoked the swap function\\n    if (outputToken == address(0)) {\\n      address payable sender = msg.sender;\\n      sender.transfer(outputAmount);\\n    } else {\\n      IERC20(outputToken).safeTransfer(msg.sender, outputAmount);\\n    }\\n\\n    // Emit swap event to enable better governance decision making\\n    emit Swapped(msg.sender, inputToken, outputToken, inputAmount, outputAmount);\\n  }\\n\\n  /**\\n  * Single sided liquidity add. More economic at moderate liquidity amounts.\\n  * Mathematically works as adding all tokens and swapping back to 1 token at no fee.\\n  *\\n  *         R = (1 + X_supplied/X_initial)^(1/N) - 1\\n  *         LP_minted = R * LP_total\\n  *\\n  * When adding ETH, the inputToken address to be used is the NULL address.\\n  * A fee is applied to prevent zero fee swapping through liquidity add/remove.\\n  */\\n  function addLiquidity(address inputToken, uint256 inputAmount, uint256 minLP)\\n    external\\n    payable\\n    onlyListedToken(inputToken)\\n    override\\n    returns (uint256 actualLP)\\n  {\\n    // Check that the exchange is unlocked and thus open for business\\n    Config memory _config = DFPconfig;\\n    require(_config.unlocked, \\\"DFP: Locked\\\");\\n\\n    // Pull in input token and check the exchange balance for that token\\n    uint256 initialBalance;\\n    if (inputToken == address(0)) {\\n      require(msg.value == inputAmount, \\\"DFP: Incorrect amount of ETH\\\");\\n      initialBalance = address(this).balance - inputAmount;\\n    } else {\\n      initialBalance = IERC20(inputToken).balanceOf(address(this));\\n      IERC20(inputToken).safeTransferFrom(msg.sender, address(this), inputAmount);\\n    }\\n\\n    // Prevent excessive liquidity add which runs of the approximation curve\\n    require(inputAmount < initialBalance, \\\"DFP: Too much at once\\\");\\n\\n    // 6th power binomial series approximation of R\\n    uint256 X = (inputAmount * _config.oneMinusTradingFee) / initialBalance;  // 0.64 bits\\n    uint256 X_ = X * X;                                // X^2   0.128 bits\\n    uint256 R_ = (X >> 4) - (X_ * 15 >> 73);           // R2    0.64 bits\\n    X_ = X_ * X;                                       // X^3   0.192 bits\\n    R_ = R_ + (X_ * 155 >> 141);                       // R3    0.64 bits\\n    X_ = X_ * X >> 192;                                // X^4   0.64 bits\\n    R_ = R_ - (X_ * 7285 >> 19);                       // R4    0.64 bits\\n    X_ = X_ * X;                                       // X^5   0.128 bits\\n    R_ = R_ + (X_ * 91791 >> 87);                      // R5    0.64 bits\\n    X_ = X_ * X;                                       // X^6   0.192 bits\\n    R_ = R_ - (X_ * 2417163 >> 156);                   // R6    0.64 bits\\n\\n    // Calculate and mint LPs to be awarded\\n    actualLP = R_ * totalSupply() >> 64;\\n    require(actualLP > minLP, \\\"DFP: No deal\\\");\\n    _mint(msg.sender, actualLP);\\n\\n    // Emitting liquidity add event to enable better governance decisions\\n    emit LiquidityAdded(msg.sender, inputToken, inputAmount, actualLP);\\n  }\\n\\n  /**\\n  * Multi-token liquidity add. More economic for large amounts of liquidity.\\n  * Simply takes in all 16 listed tokens in ratio and mints the LPs accordingly.\\n  * For ETH, the inputToken address to be used is the NULL address.\\n  * A fee is applied to prevent zero fee swapping through liquidity add/remove.\\n  */\\n  function addMultiple(address[] calldata tokens, uint256[] calldata maxAmounts)\\n    external\\n    payable\\n    override\\n    returns (uint256 actualLP)\\n  {\\n    // Perform basic checks\\n    Config memory _config = DFPconfig;\\n    require(_config.unlocked, \\\"DFP: Locked\\\");\\n    require(tokens.length == 16, \\\"DFP: Bad tokens array length\\\");\\n    require(maxAmounts.length == 16, \\\"DFP: Bad maxAmount array length\\\");\\n\\n    // Check ETH amount/ratio first\\n    require(tokens[0] == address(0), \\\"DFP: No ETH found\\\");\\n    require(maxAmounts[0] == msg.value, \\\"DFP: Incorrect ETH amount\\\");\\n    uint256 dexBalance = address(this).balance - msg.value;\\n    uint256 actualRatio = msg.value.mul(1<<128) / dexBalance;\\n\\n    // Check ERC20 amounts/ratios\\n    uint256 currentRatio;\\n    address previous;\\n    address token;\\n    for (uint256 i = 1; i < 16; i++) {\\n      token = tokens[i];\\n      require(token > previous, \\\"DFP: Require ordered list\\\");\\n      require(\\n        listedTokens[token].state > State.Delisting,\\n        \\\"DFP: Token not listed\\\"\\n      );\\n      dexBalance = IERC20(token).balanceOf(address(this));\\n      currentRatio = maxAmounts[i].mul(1 << 128) / dexBalance;\\n      if (currentRatio < actualRatio) {\\n        actualRatio = currentRatio;\\n      }\\n      previous = token;\\n    }\\n\\n    // Calculate how many LP will be generated\\n    actualLP = (actualRatio.mul(totalSupply()) >> 64) * DFPconfig.oneMinusTradingFee >> 128;\\n\\n    // Collect ERC20 tokens\\n    previous = address(0);\\n    for (uint256 i = 1; i < 16; i++) {\\n      token = tokens[i];\\n      dexBalance = IERC20(token).balanceOf(address(this));\\n      IERC20(token).safeTransferFrom(msg.sender, address(this), dexBalance.mul(actualRatio) >> 128);\\n      previous = token;\\n    }\\n\\n    // Mint the LP tokens\\n    _mint(msg.sender, actualLP);\\n    emit MultiLiquidityAdded(msg.sender, actualLP, totalSupply());\\n\\n    // Refund ETH change\\n    dexBalance = address(this).balance - msg.value;\\n    address payable sender = msg.sender;\\n    sender.transfer(msg.value - (dexBalance.mul(actualRatio) >> 128));\\n  }\\n\\n  /**\\n  * Single sided liquidity withdrawal. More efficient at lower liquidity amounts.\\n  * Mathematically withdraws 16 tokens in ratio and then swaps 15 back in at no fees.\\n  * Calculates the following:\\n  *\\n  *        R = LP_burnt / LP_initial\\n  *        X_out = X_initial * (1 - (1 - R)^N)\\n  *\\n  * No fee is applied for withdrawals. For ETH output, use the NULL address as outputToken.\\n  */\\n  function removeLiquidity(uint256 LPamount, address outputToken, uint256 minOutputAmount)\\n    external\\n    onlyListedToken(outputToken)\\n    override\\n    returns (uint256 actualOutput)\\n  {\\n    // Checks the initial balance of the token desired as output token\\n    uint256 initialBalance;\\n    if (outputToken == address(0)) {\\n      initialBalance = address(this).balance;\\n    } else {\\n      initialBalance = IERC20(outputToken).balanceOf(address(this));\\n    }\\n\\n    // Calculates intermediate variable F = (1-R)^16 and then the resulting output amount.\\n    uint256 F_;\\n    F_ = (1 << 64) - (LPamount << 64) / totalSupply();   // (1-R)      (0.64 bits)\\n    F_ = F_ * F_;                                       // (1-R)^2    (0.128 bits)\\n    F_ = F_ * F_ >> 192;                                // (1-R)^4    (0.64 bits)\\n    F_ = F_ * F_;                                       // (1-R)^8    (0.128 bits)\\n    F_ = F_ * F_ >> 192;                                // (1-R)^16   (0.64 bits)\\n    actualOutput = initialBalance * ((1 << 64) - F_) >> 64;\\n    require(actualOutput > minOutputAmount, \\\"DFP: No deal\\\");\\n\\n    // Burns the LP tokens and sends the output tokens\\n    _burn(msg.sender, LPamount);\\n    if (outputToken == address(0)) {\\n      address payable sender = msg.sender;\\n      sender.transfer(actualOutput);\\n    } else {\\n      IERC20(outputToken).safeTransfer(msg.sender, actualOutput);\\n    }\\n\\n    // Emitting liquidity removal event to enable better governance decisions\\n    emit LiquidityRemoved(msg.sender, outputToken, actualOutput, LPamount);\\n  }\\n\\n  /**\\n  * Multi-token liquidity removal. More economic for large amounts of liquidity.\\n  * Returns all 16 listed tokens in ratio and burns the LPs accordingly.\\n  */\\n  function removeMultiple(uint256 LPamount, address[] calldata tokens)\\n    external\\n    override\\n    returns (bool success)\\n  {\\n    // Perform basic validation (no lock check here on purpose)\\n    require(tokens.length == 16, \\\"DFP: Bad tokens array length\\\");\\n\\n    // Calculate fraction of total liquidity to be returned\\n    uint256 fraction = (LPamount << 128) / totalSupply();\\n\\n    // Send the ETH first (use transfer to prevent reentrancy)\\n    uint256 dexBalance = address(this).balance;\\n    address payable sender = msg.sender;\\n    sender.transfer(fraction * dexBalance >> 128);\\n\\n    // Send the ERC20 tokens\\n    address previous;\\n    for (uint256 i = 1; i < 16; i++) {\\n      address token = tokens[i];\\n      require(token > previous, \\\"DFP: Require ordered list\\\");\\n      require(\\n        listedTokens[token].state > State.Delisting,\\n        \\\"DFP: Token not listed\\\"\\n      );\\n      dexBalance = IERC20(token).balanceOf(address(this));\\n      IERC20(token).safeTransfer(msg.sender, fraction * dexBalance >> 128);\\n      previous = token;\\n    }\\n\\n    // Burn the LPs\\n    _burn(msg.sender, LPamount);\\n    emit MultiLiquidityRemoved(msg.sender, LPamount, totalSupply());\\n\\n    // That's all folks\\n    return true;\\n  }\\n\\n\\n  /**\\n  * When a token is delisted and another one gets listed in its place, the users can\\n  * call this function to provide liquidity for the new token in exchange for the old\\n  * token. The ratio should be set such that the users have a financial incentive to\\n  * perform this transaction.\\n  */\\n  function bootstrapNewToken(\\n    address inputToken,\\n    uint256 maxInputAmount,\\n    address outputToken\\n  ) public override returns (uint64 fractionBootstrapped) {\\n    // Check whether the valid token is being bootstrapped\\n    TokenSettings memory tokenToList = listedTokens[inputToken];\\n    require(\\n      tokenToList.state == State.PreListing,\\n      \\\"DFP: Wrong token\\\"\\n    );\\n\\n    // Calculate how many tokens to actually take in (clamp at max available)\\n    uint256 initialInputBalance = IERC20(inputToken).balanceOf(address(this));\\n    uint256 availableAmount = tokenToList.listingTarget - initialInputBalance;\\n    if (initialInputBalance >= tokenToList.listingTarget) { availableAmount = 1; }\\n    uint256 actualInputAmount = maxInputAmount > availableAmount ? availableAmount : maxInputAmount;\\n\\n    // Actually pull the tokens in\\n    IERC20(inputToken).safeTransferFrom(msg.sender, address(this), actualInputAmount);\\n\\n    // Check whether the output token requested is indeed being delisted\\n    TokenSettings memory tokenToDelist = listedTokens[outputToken];\\n    require(\\n      tokenToDelist.state == State.Delisting,\\n      \\\"DFP: Wrong token\\\"\\n    );\\n\\n    // Check how many of the output tokens should be given out and transfer those\\n    uint256 initialOutputBalance = IERC20(outputToken).balanceOf(address(this));\\n    uint256 outputAmount = actualInputAmount.mul(initialOutputBalance).div(availableAmount);\\n    IERC20(outputToken).safeTransfer(msg.sender, outputAmount);\\n    fractionBootstrapped = uint64((actualInputAmount << 64) / tokenToList.listingTarget);\\n\\n    // Emit event for better governance decisions\\n    emit Bootstrapped(\\n      msg.sender,\\n      inputToken,\\n      actualInputAmount,\\n      outputToken,\\n      outputAmount\\n    );\\n\\n    // If the input token liquidity is now at the target we complete the (de)listing\\n    if (actualInputAmount == availableAmount) {\\n      tokenToList.state = State.Listed;\\n      listedTokens[inputToken] = tokenToList;\\n      delete listedTokens[outputToken];\\n      delete listingUpdate;\\n      DFPconfig.delistingBonus = 0;\\n      emit BootstrapCompleted(outputToken, inputToken);\\n    }\\n  }\\n\\n  /**\\n   * Emergency bonus withdrawal when bootstrapping is expected to remain incomplete\\n   * A fraction is specified (for example 5%) that is then rewarded in bonus tokens\\n   * on top of the regular bootstrapping output tokens.\\n   */\\n  function bootstrapNewTokenWithBonus(\\n    address inputToken,\\n    uint256 maxInputAmount,\\n    address outputToken,\\n    address bonusToken\\n  ) external onlyListedToken(bonusToken) override returns (uint256 bonusAmount) {\\n    // Check whether the output token requested is indeed being delisted\\n    TokenSettings memory tokenToDelist = listedTokens[outputToken];\\n    require(\\n      tokenToDelist.state == State.Delisting,\\n      \\\"DFP: Wrong token\\\"\\n    );\\n\\n    // Collect parameters required to calculate bonus\\n    uint256 bonusFactor = uint256(DFPconfig.delistingBonus);\\n    uint64 fractionBootstrapped = bootstrapNewToken(inputToken, maxInputAmount, outputToken);\\n\\n    // Balance of selected bonus token\\n    uint256 bonusBalance;\\n    if (bonusToken == address(0)) {\\n      bonusBalance = address(this).balance;\\n    } else {\\n      bonusBalance = IERC20(bonusToken).balanceOf(address(this));\\n    }\\n\\n    // Calculate bonus amount\\n    bonusAmount = (uint256(fractionBootstrapped) * bonusFactor).mul(bonusBalance) >> 128;\\n\\n    // Payout bonus tokens\\n    if (bonusToken == address(0)) {\\n      address payable sender = msg.sender;\\n      sender.transfer(bonusAmount);\\n    } else {\\n      IERC20(bonusToken).transfer(msg.sender, bonusAmount);\\n    }\\n\\n    // Emit event to enable data driven governance\\n    emit BootstrapBonus(\\n      msg.sender,\\n      bonusToken,\\n      bonusAmount\\n    );\\n  }\\n\\n  /**\\n   * Initiates process to delist one token and list another.\\n   */\\n  function changeListing(\\n    address tokenToDelist,              // Address of token to be delisted\\n    address tokenToList,                // Address of token to be listed\\n    uint112 listingTarget               // Amount of tokens needed to activate listing\\n  ) external onlyListedToken(tokenToDelist) onlyOwner() {\\n    // Basic validity checks. ETH cannot be delisted, only one delisting at a time.\\n    require(tokenToDelist != address(0), \\\"DFP: Cannot delist ETH\\\");\\n    ListingUpdate memory update = listingUpdate;\\n    require(update.tokenToDelist == address(0), \\\"DFP: Previous update incomplete\\\");\\n\\n    // Can't list an already listed token\\n    TokenSettings memory _token = listedTokens[tokenToList];\\n    require(_token.state == State.Unlisted, \\\"DFP: Token already listed\\\");\\n\\n    // Set the delisting/listing struct.\\n    update.tokenToDelist = tokenToDelist;\\n    update.tokenToList = tokenToList;\\n    listingUpdate = update;\\n\\n    // Configure the token states for incoming/outgoing tokens\\n    _token.state = State.PreListing;\\n    _token.listingTarget = listingTarget;\\n    listedTokens[tokenToList] = _token;\\n    listedTokens[tokenToDelist].state = State.Delisting;\\n  }\\n\\n  /**\\n  * Sets trading fee (actually calculates using 1-fee) as a 0.64 fixed point number.\\n  */\\n  function setTradingFee(uint64 oneMinusFee) external onlyOwner() {\\n    DFPconfig.oneMinusTradingFee = oneMinusFee;\\n  }\\n\\n  /**\\n  * Sets delisting bonus as emergency measure to complete a (de)listing when it gets stuck.\\n  */\\n  function setDeListingBonus(uint64 delistingBonus) external onlyOwner() {\\n    ListingUpdate memory update = listingUpdate;\\n    require(update.tokenToDelist != address(0), \\\"DFP: No active delisting\\\");\\n\\n    DFPconfig.delistingBonus = delistingBonus;\\n  }\\n\\n  /**\\n  * Sets admin address for emergency exchange locking\\n  */\\n  function setAdmin(address adminAddress) external onlyOwner() {\\n    admin = adminAddress;\\n  }\\n\\n  /**\\n  * Sets exchange lock, under which swap and liquidity add (but not remove) are disabled\\n  */\\n  function lockExchange() external onlyAdmin() {\\n    DFPconfig.unlocked = false;\\n  }\\n\\n  /**\\n  * Resets exchange lock.\\n  */\\n  function unlockExchange() external onlyAdmin() {\\n    DFPconfig.unlocked = true;\\n  }\\n}\\n\"\r\n    },\r\n    \"/Users/jasper/Documents/GitHub/DEX/interfaces/IDeFiPlaza.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Unlicensed\\npragma solidity ^0.7.6;\\n\\ninterface IDeFiPlaza {\\n  function swap(\\n    address inputToken,\\n    address outputToken,\\n    uint256 inputAmount,\\n    uint256 minOutputAmount\\n  ) external payable returns (uint256 outputAmount);\\n\\n  function addLiquidity(\\n    address inputToken,\\n    uint256 inputAmount,\\n    uint256 minLP\\n  ) external payable returns (uint256 deltaLP);\\n\\n  function addMultiple(\\n    address[] calldata tokens,\\n    uint256[] calldata maxAmounts\\n  ) external payable returns (uint256 actualLP);\\n\\n  function removeLiquidity(\\n    uint256 LPamount,\\n    address outputToken,\\n    uint256 minOutputAmount\\n  ) external returns (uint256 actualOutput);\\n\\n  function removeMultiple(\\n    uint256 LPamount,\\n    address[] calldata tokens\\n  ) external returns (bool success);\\n\\n  function bootstrapNewToken(\\n    address inputToken,\\n    uint256 maxInputAmount,\\n    address outputToken\\n  ) external returns (uint64 fractionBootstrapped);\\n\\n  function bootstrapNewTokenWithBonus(\\n    address inputToken,\\n    uint256 maxInputAmount,\\n    address outputToken,\\n    address bonusToken\\n  ) external returns (uint256 bonusAmount);\\n\\n  event Swapped(\\n    address sender,\\n    address inputToken,\\n    address outputToken,\\n    uint256 inputAmount,\\n    uint256 outputAmount\\n  );\\n\\n  event LiquidityAdded(\\n    address sender,\\n    address token,\\n    uint256 tokenAmount,\\n    uint256 LPs\\n  );\\n\\n  event MultiLiquidityAdded(\\n    address sender,\\n    uint256 LPs,\\n    uint256 totalLPafter\\n  );\\n\\n  event LiquidityRemoved(\\n    address recipient,\\n    address token,\\n    uint256 tokenAmount,\\n    uint256 LPs\\n  );\\n\\n  event MultiLiquidityRemoved(\\n    address sender,\\n    uint256 LPs,\\n    uint256 totalLPafter\\n  );\\n\\n  event Bootstrapped(\\n    address sender,\\n    address inputToken,\\n    uint256 inputAmount,\\n    address outputToken,\\n    uint256 outputAmount\\n  );\\n\\n  event BootstrapBonus(\\n    address sender,\\n    address bonusToken,\\n    uint256 bonusAmount\\n  );\\n\\n  event BootstrapCompleted(\\n    address delistedToken,\\n    address listedToken\\n  );\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor () internal {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/math/SafeMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        uint256 c = a + b;\\n        if (c < a) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b > a) return (false, 0);\\n        return (true, a - b);\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) return (true, 0);\\n        uint256 c = a * b;\\n        if (c / a != b) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a / b);\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a % b);\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b <= a, \\\"SafeMath: subtraction overflow\\\");\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0) return 0;\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: division by zero\\\");\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: modulo by zero\\\");\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/ERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"../../math/SafeMath.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin guidelines: functions revert instead\\n * of returning `false` on failure. This behavior is nonetheless conventional\\n * and does not conflict with the expectations of ERC20 applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20 {\\n    using SafeMath for uint256;\\n\\n    mapping (address => uint256) private _balances;\\n\\n    mapping (address => mapping (address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n    uint8 private _decimals;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}, initializes {decimals} with\\n     * a default value of 18.\\n     *\\n     * To select a different value for {decimals}, use {_setupDecimals}.\\n     *\\n     * All three of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor (string memory name_, string memory symbol_) public {\\n        _name = name_;\\n        _symbol = symbol_;\\n        _decimals = 18;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is\\n     * called.\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual returns (uint8) {\\n        return _decimals;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `recipient` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(_msgSender(), recipient, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        _approve(_msgSender(), spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` and `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``sender``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(sender, recipient, amount);\\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \\\"ERC20: transfer amount exceeds allowance\\\"));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \\\"ERC20: decreased allowance below zero\\\"));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\\n     *\\n     * This is internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` cannot be the zero address.\\n     * - `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     */\\n    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\\n        require(sender != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(recipient != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(sender, recipient, amount);\\n\\n        _balances[sender] = _balances[sender].sub(amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        _balances[recipient] = _balances[recipient].add(amount);\\n        emit Transfer(sender, recipient, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply = _totalSupply.add(amount);\\n        _balances[account] = _balances[account].add(amount);\\n        emit Transfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        _balances[account] = _balances[account].sub(amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        _totalSupply = _totalSupply.sub(amount);\\n        emit Transfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Sets {decimals} to a value other than the default one of 18.\\n     *\\n     * WARNING: This function should only be called from the constructor. Most\\n     * applications that interact with token contracts will not expect\\n     * {decimals} to ever change, and may work incorrectly if it does.\\n     */\\n    function _setupDecimals(uint8 decimals_) internal virtual {\\n        _decimals = decimals_;\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be to transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual { }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"../../math/SafeMath.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using SafeMath for uint256;\\n    using Address for address;\\n\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        // solhint-disable-next-line max-line-length\\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \\\"SafeERC20: decreased allowance below zero\\\");\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) { // Return data is optional\\n            // solhint-disable-next-line max-line-length\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.2 <0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"remappings\": [],\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 100000\r\n    },\r\n    \"evmVersion\": \"istanbul\",\r\n    \"libraries\": {},\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}","ABI":"[{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"tokensToList\",\"type\":\"address[]\"},{\"internalType\":\"string\",\"name\":\"name_\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol_\",\"type\":\"string\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"bonusToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"bonusAmount\",\"type\":\"uint256\"}],\"name\":\"BootstrapBonus\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"delistedToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"listedToken\",\"type\":\"address\"}],\"name\":\"BootstrapCompleted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"inputToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"inputAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"outputToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"outputAmount\",\"type\":\"uint256\"}],\"name\":\"Bootstrapped\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"LPs\",\"type\":\"uint256\"}],\"name\":\"LiquidityAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"LPs\",\"type\":\"uint256\"}],\"name\":\"LiquidityRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"LPs\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalLPafter\",\"type\":\"uint256\"}],\"name\":\"MultiLiquidityAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"LPs\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalLPafter\",\"type\":\"uint256\"}],\"name\":\"MultiLiquidityRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"inputToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"outputToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"inputAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"outputAmount\",\"type\":\"uint256\"}],\"name\":\"Swapped\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DFPconfig\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"unlocked\",\"type\":\"bool\"},{\"internalType\":\"uint64\",\"name\":\"oneMinusTradingFee\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"delistingBonus\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"inputToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"inputAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minLP\",\"type\":\"uint256\"}],\"name\":\"addLiquidity\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"actualLP\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"tokens\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"maxAmounts\",\"type\":\"uint256[]\"}],\"name\":\"addMultiple\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"actualLP\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"admin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"inputToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"maxInputAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"outputToken\",\"type\":\"address\"}],\"name\":\"bootstrapNewToken\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"fractionBootstrapped\",\"type\":\"uint64\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"inputToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"maxInputAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"outputToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"bonusToken\",\"type\":\"address\"}],\"name\":\"bootstrapNewTokenWithBonus\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"bonusAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenToDelist\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenToList\",\"type\":\"address\"},{\"internalType\":\"uint112\",\"name\":\"listingTarget\",\"type\":\"uint112\"}],\"name\":\"changeListing\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"listedTokens\",\"outputs\":[{\"internalType\":\"enum DeFiPlaza.State\",\"name\":\"state\",\"type\":\"uint8\"},{\"internalType\":\"uint112\",\"name\":\"listingTarget\",\"type\":\"uint112\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"listingUpdate\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"tokenToDelist\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenToList\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lockExchange\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"LPamount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"outputToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"minOutputAmount\",\"type\":\"uint256\"}],\"name\":\"removeLiquidity\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"actualOutput\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"LPamount\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"tokens\",\"type\":\"address[]\"}],\"name\":\"removeMultiple\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"adminAddress\",\"type\":\"address\"}],\"name\":\"setAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"delistingBonus\",\"type\":\"uint64\"}],\"name\":\"setDeListingBonus\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"oneMinusFee\",\"type\":\"uint64\"}],\"name\":\"setTradingFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"inputToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"outputToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"inputAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minOutputAmount\",\"type\":\"uint256\"}],\"name\":\"swap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"outputAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unlockExchange\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]","ContractName":"DeFiPlaza","CompilerVersion":"v0.7.6+commit.7338295f","OptimizationUsed":"1","Runs":"100000","ConstructorArguments":"0000000000000000000000000000000000000000000000000000000000000060000000000000000000000000000000000000000000000000000000000000026000000000000000000000000000000000000000000000000000000000000002a0000000000000000000000000000000000000000000000000000000000000000f0000000000000000000000000bc529c00c6401aef6d220be8c6ea1667f6ad93e0000000000000000000000001f9840a85d5af5bf1d1762f925bdaddc4201f9840000000000000000000000002260fac5e5542a773aa44fbcfedf7c193bc2c599000000000000000000000000514910771af9ca656af840dff83e8264ecf986ca0000000000000000000000006468e79a80c0eab0f9a2b574c8d5bc374af594140000000000000000000000006b175474e89094c44da98b954eedeac495271d0f0000000000000000000000006b3595068778dd592e39a122f4f5a5cf09c90fe20000000000000000000000007d1afa7b718fb893db30a3abc0cfc608aacfebb00000000000000000000000007fc66500c84a76ad7e9c93437bfc5ac33e2ddae900000000000000000000000095ad61b0a150d79219dcf64e1e6cc01f0b64c4ce0000000000000000000000009f8f72aa9304c8b593d555f12ef6589cc3a579a2000000000000000000000000a0b86991c6218b36c1d19d4a2e9eb0ce3606eb48000000000000000000000000c9444d31a580d35a951f77b36f0de073dac69316000000000000000000000000d533a949740bb3306d119cc777fa900ba034cd52000000000000000000000000dac17f958d2ee523a2206206994597c13d831ec700000000000000000000000000000000000000000000000000000000000000154465466920506c617a61204d61696e20496e646578000000000000000000000000000000000000000000000000000000000000000000000000000000000000045844503100000000000000000000000000000000000000000000000000000000","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}