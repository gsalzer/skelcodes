{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"/C/Users/thanhphi/Desktop/PolkaBridgeSolution/farming-app/contracts/PolkaBridge.sol\": {\r\n      \"content\": \"pragma solidity >=0.6.0;\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20Burnable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20Detailed.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\n\\r\\ncontract PolkaBridge is ERC20, ERC20Detailed, ERC20Burnable {\\r\\n    constructor(uint256 initialSupply)\\r\\n        public\\r\\n        ERC20Detailed(\\\"PolkaBridge\\\", \\\"PBR\\\", 18)\\r\\n    {\\r\\n        _deploy(msg.sender, initialSupply, 1615766400); //15 Mar 2021 1615766400\\r\\n    }\\r\\n\\r\\n    //withdraw contract token\\r\\n    //use for someone send token to contract\\r\\n    //recuse wrong user\\r\\n\\r\\n    function withdrawErc20(IERC20 token) public {\\r\\n        token.transfer(tokenOwner, token.balanceOf(address(this)));\\r\\n    }\\r\\n}\\r\\n\"\r\n    },\r\n    \"/C/Users/thanhphi/Desktop/PolkaBridgeSolution/farming-app/contracts/PolkaBridgeMasterFarm.sol\": {\r\n      \"content\": \"pragma solidity >=0.6.0;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/ownership/Ownable.sol\\\";\\r\\nimport \\\"./PolkaBridge.sol\\\";\\r\\n\\r\\n// import \\\"@chainlink/contracts/src/v0.6/interfaces/AggregatorV3Interface.sol\\\";\\r\\n//import \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\r\\n//import \\\"@uniswap/v2-periphery/contracts/interfaces/IUniswapV2Router02.sol\\\";\\r\\n\\r\\ncontract PolkaBridgeMasterFarm is Ownable {\\r\\n    string public name = \\\"PolkaBridge: Deflationary Farming\\\";\\r\\n    using SafeMath for uint256;\\r\\n    using SafeERC20 for IERC20;\\r\\n\\r\\n    struct UserInfo {\\r\\n        uint256 amountLP;\\r\\n        uint256 rewardDebt;\\r\\n        uint256 rewardDebtAtBlock;\\r\\n        uint256 rewardClaimed;\\r\\n    }\\r\\n\\r\\n    struct PoolInfo {\\r\\n        IERC20 lpToken;\\r\\n        IERC20 tokenA;\\r\\n        IERC20 tokenB;\\r\\n        uint256 multiplier;\\r\\n        uint256 lastPoolReward; //history pool reward\\r\\n        uint256 lastRewardBlock;\\r\\n        uint256 lastLPBalance;\\r\\n        uint256 accPBRPerShare;\\r\\n        uint256 startBlock;\\r\\n        uint256 stopBlock;\\r\\n        uint256 totalRewardClaimed;\\r\\n        bool isActived;\\r\\n    }\\r\\n\\r\\n    PolkaBridge public polkaBridge;\\r\\n    uint256 public START_BLOCK;\\r\\n\\r\\n    //pool Info\\r\\n    PoolInfo[] public poolInfo;\\r\\n    mapping(address => uint256) public poolId1;\\r\\n    // Info of each user that stakes LP tokens. pid => user address => info\\r\\n    mapping(uint256 => mapping(address => UserInfo)) public userInfo;\\r\\n\\r\\n    constructor(PolkaBridge _polkaBridge, uint256 _startBlock) public {\\r\\n        polkaBridge = _polkaBridge;\\r\\n        START_BLOCK = _startBlock;\\r\\n    }\\r\\n\\r\\n    function poolBalance() public view returns (uint256) {\\r\\n        return polkaBridge.balanceOf(address(this));\\r\\n    }\\r\\n\\r\\n    // Add a new lp to the pool. Can only be called by the owner.\\r\\n    function add(IERC20 _lpToken,IERC20 _tokenA, IERC20 _tokenB, uint256 _multiplier, uint256 _startBlock) public onlyOwner {\\r\\n        require(\\r\\n            poolId1[address(_lpToken)] == 0,\\r\\n            \\\"PolkaBridgeMasterFarm::add: lp is already in pool\\\"\\r\\n        );\\r\\n\\r\\n        uint256 _lastRewardBlock =\\r\\n            block.number > START_BLOCK ? block.number : START_BLOCK;\\r\\n\\r\\n        poolId1[address(_lpToken)] = poolInfo.length + 1;\\r\\n        poolInfo.push(\\r\\n            PoolInfo({\\r\\n                lpToken: _lpToken,\\r\\n                tokenA: _tokenA,\\r\\n                tokenB: _tokenB,\\r\\n                multiplier: _multiplier,\\r\\n                lastRewardBlock: _lastRewardBlock,\\r\\n                lastPoolReward: 0,\\r\\n                lastLPBalance: 0,\\r\\n                accPBRPerShare: 0,\\r\\n                startBlock: _startBlock > 0 ? _startBlock : block.number,\\r\\n                stopBlock: 0,\\r\\n                totalRewardClaimed: 0,\\r\\n                isActived: true\\r\\n            })\\r\\n        );\\r\\n\\r\\n        massUpdatePools();\\r\\n    }\\r\\n\\r\\n    function getChangePoolReward(uint256 _pid, uint256 _totalMultiplier) public view returns (uint256) {\\r\\n        uint256 changePoolReward;\\r\\n        if (_totalMultiplier == 0) {\\r\\n            changePoolReward = 0;\\r\\n        }\\r\\n        else {\\r\\n            uint256 currentPoolBalance = poolBalance();\\r\\n            uint256 totalLastPoolReward = getTotalLastPoolReward();\\r\\n            changePoolReward = ((currentPoolBalance.sub(totalLastPoolReward)).mul(poolInfo[_pid].multiplier).mul(1e18)).div(_totalMultiplier);\\r\\n        }\\r\\n\\r\\n        if (changePoolReward <= 0) {\\r\\n            changePoolReward = 0;\\r\\n        }\\r\\n\\r\\n        return changePoolReward;\\r\\n    }\\r\\n\\r\\n    function massUpdatePools() public {\\r\\n        uint256 length = poolInfo.length;\\r\\n        uint256 totalMultiplier = countTotalMultiplier();\\r\\n        for (uint256 pid = 0; pid < length; pid++) {\\r\\n            if (poolInfo[pid].isActived) {\\r\\n                uint256 changePoolReward = getChangePoolReward(pid, totalMultiplier);\\r\\n                updatePool(pid, changePoolReward, 1);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function getTotalLastPoolReward() public view returns (uint256) {\\r\\n        uint256 total;\\r\\n        uint256 length = poolInfo.length;\\r\\n        for (uint256 pid = 0; pid < length; pid++) {\\r\\n            if (poolInfo[pid].isActived) {\\r\\n                total += poolInfo[pid].lastPoolReward;\\r\\n            }\\r\\n        }\\r\\n        return total;\\r\\n    }\\r\\n\\r\\n    // Update reward variables of the given pool to be up-to-date.\\r\\n    function updatePool(\\r\\n        uint256 _pid,\\r\\n        uint256 _changePoolReward,\\r\\n        uint256 flag\\r\\n    ) internal {\\r\\n        PoolInfo storage pool = poolInfo[_pid];\\r\\n        if (block.number <= pool.lastRewardBlock && flag==1) {\\r\\n            return;\\r\\n        }\\r\\n        uint256 lpSupply = pool.lastLPBalance;\\r\\n        if (lpSupply == 0) { // first deposit\\r\\n            pool.accPBRPerShare = 0;\\r\\n        } else {\\r\\n            pool.accPBRPerShare = pool.accPBRPerShare.add(\\r\\n                (_changePoolReward.mul(1e18).div(lpSupply))\\r\\n            );\\r\\n        }\\r\\n        pool.lastRewardBlock = block.number;\\r\\n\\r\\n        if (flag == 1) {\\r\\n            pool.lastPoolReward += _changePoolReward;\\r\\n        } else {\\r\\n            pool.lastPoolReward -= _changePoolReward;\\r\\n        }\\r\\n\\r\\n        pool.lastLPBalance = pool.lpToken.balanceOf(address(this));\\r\\n    }\\r\\n\\r\\n    function pendingReward(uint256 _pid, address _user)\\r\\n        public\\r\\n        view\\r\\n        returns (uint256)\\r\\n    {\\r\\n        PoolInfo storage pool = poolInfo[_pid];\\r\\n        UserInfo storage user = userInfo[_pid][_user];\\r\\n        uint256 lpSupply = pool.lpToken.balanceOf(address(this));\\r\\n        uint256 temptAccPBRPerShare = pool.accPBRPerShare;\\r\\n        uint256 totalMultiplier = countTotalMultiplier();\\r\\n\\r\\n        if (block.number > pool.lastRewardBlock && lpSupply > 0) {\\r\\n            temptAccPBRPerShare = pool.accPBRPerShare.add(\\r\\n                (getChangePoolReward(_pid, totalMultiplier).mul(1e18).div(lpSupply))\\r\\n            );\\r\\n        }\\r\\n\\r\\n        uint256 pending = (\\r\\n                user.amountLP.mul(temptAccPBRPerShare).sub(\\r\\n                    user.rewardDebt.mul(1e18)\\r\\n                )\\r\\n            ).div(1e18);\\r\\n\\r\\n        return pending;\\r\\n    }\\r\\n\\r\\n    function claimReward(uint256 _pid) public {\\r\\n        PoolInfo storage pool = poolInfo[_pid];\\r\\n        UserInfo storage user = userInfo[_pid][msg.sender];\\r\\n\\r\\n        massUpdatePools();\\r\\n        _harvest(_pid);\\r\\n\\r\\n        user.rewardDebt = user.amountLP.mul(pool.accPBRPerShare).div(1e18);\\r\\n    }\\r\\n\\r\\n    function _harvest(uint256 _pid) internal {\\r\\n        PoolInfo storage pool = poolInfo[_pid];\\r\\n        UserInfo storage user = userInfo[_pid][msg.sender];\\r\\n\\r\\n        if (user.amountLP > 0) {\\r\\n            uint256 pending = pendingReward(_pid, msg.sender);\\r\\n            uint256 masterBal = poolBalance();\\r\\n\\r\\n            if (pending > masterBal) {\\r\\n                pending = masterBal;\\r\\n            }\\r\\n\\r\\n            if (pending > 0) {\\r\\n                polkaBridge.transfer(msg.sender, pending);\\r\\n                pool.lastPoolReward -= pending;\\r\\n                pool.totalRewardClaimed += pending;\\r\\n            }\\r\\n\\r\\n            user.rewardDebtAtBlock = block.number;\\r\\n            user.rewardClaimed += pending;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function deposit(uint256 _pid, uint256 _amount) public {\\r\\n        require(\\r\\n            _amount > 0,\\r\\n            \\\"PolkaBridgeMasterFarmer::deposit: amount must be greater than 0\\\"\\r\\n        );\\r\\n\\r\\n        PoolInfo storage pool = poolInfo[_pid];\\r\\n        UserInfo storage user = userInfo[_pid][msg.sender];\\r\\n\\r\\n        pool.lpToken.safeTransferFrom(\\r\\n            address(msg.sender),\\r\\n            address(this),\\r\\n            _amount\\r\\n        );\\r\\n\\r\\n        massUpdatePools();\\r\\n        _harvest(_pid);\\r\\n\\r\\n        if (user.amountLP == 0) {\\r\\n            user.rewardDebtAtBlock = block.number;\\r\\n        }\\r\\n\\r\\n        user.amountLP = user.amountLP.add(_amount);\\r\\n        user.rewardDebt = user.amountLP.mul(pool.accPBRPerShare).div(1e18);\\r\\n    }\\r\\n\\r\\n    function withdraw(uint256 _pid, uint256 _amount) public {\\r\\n        PoolInfo storage pool = poolInfo[_pid];\\r\\n        UserInfo storage user = userInfo[_pid][msg.sender];\\r\\n        require(\\r\\n            user.amountLP >= _amount,\\r\\n            \\\"PolkaBridgeMasterFarmer::withdraw: not good\\\"\\r\\n        );\\r\\n\\r\\n        if (_amount > 0) {\\r\\n            massUpdatePools();\\r\\n            _harvest(_pid);\\r\\n            pool.lpToken.safeTransfer(address(msg.sender), _amount);\\r\\n            pool.lastLPBalance = pool.lpToken.balanceOf(address(this));\\r\\n\\r\\n            // update pool\\r\\n            // updatePool(_pid, 0, 1);\\r\\n            user.amountLP = user.amountLP.sub(_amount);\\r\\n            user.rewardDebt = user.amountLP.mul(pool.accPBRPerShare).div(1e18);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function emergencyWithdraw(uint256 _pid) public {\\r\\n        PoolInfo storage pool = poolInfo[_pid];\\r\\n        UserInfo storage user = userInfo[_pid][msg.sender];\\r\\n        pool.lpToken.safeTransfer(address(msg.sender), user.amountLP);\\r\\n\\r\\n        user.amountLP = 0;\\r\\n        user.rewardDebt = 0;\\r\\n    }\\r\\n\\r\\n    function getPoolInfo(uint256 _pid)\\r\\n        public\\r\\n        view\\r\\n        returns (\\r\\n            uint256,\\r\\n            uint256,\\r\\n            address,\\r\\n            uint256,\\r\\n            uint256,\\r\\n            uint256,\\r\\n            // bool,\\r\\n            uint256\\r\\n        )\\r\\n    //uint256\\r\\n    {\\r\\n        return (\\r\\n            poolInfo[_pid].lastRewardBlock,\\r\\n            poolInfo[_pid].multiplier,\\r\\n            address(poolInfo[_pid].lpToken),\\r\\n            poolInfo[_pid].lastPoolReward,\\r\\n            poolInfo[_pid].startBlock,\\r\\n            poolInfo[_pid].accPBRPerShare,\\r\\n            // poolInfo[_pid].isActived,\\r\\n            poolInfo[_pid].lpToken.balanceOf(address(this))\\r\\n            //poolInfo[_pid].lastLPBalance\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function getUserInfo(uint256 _pid)\\r\\n        public\\r\\n        view\\r\\n        returns (\\r\\n            uint256,\\r\\n            uint256,\\r\\n            uint256\\r\\n        )\\r\\n    {\\r\\n        UserInfo memory user = userInfo[_pid][msg.sender];\\r\\n        return (user.amountLP, user.rewardDebt, user.rewardClaimed);\\r\\n    }\\r\\n\\r\\n    function stopPool(uint256 pid) public onlyOwner {\\r\\n        PoolInfo storage pool = poolInfo[pid];\\r\\n        pool.isActived = false;\\r\\n        pool.stopBlock = block.number;\\r\\n    }\\r\\n\\r\\n    function activePool(uint256 pid) public onlyOwner {\\r\\n        PoolInfo storage pool = poolInfo[pid];\\r\\n        pool.isActived = true;\\r\\n        pool.stopBlock = 0;\\r\\n    }\\r\\n\\r\\n    function changeMultiplier(uint256 pid, uint256 _multiplier) public onlyOwner {\\r\\n        PoolInfo storage pool = poolInfo[pid];\\r\\n        pool.multiplier = _multiplier;\\r\\n    }\\r\\n\\r\\n    function countActivePool() public view returns (uint256) {\\r\\n        uint256 length = 0;\\r\\n        for (uint256 i = 0; i < poolInfo.length; i++) {\\r\\n            if (poolInfo[i].isActived) length++;\\r\\n        }\\r\\n        return length;\\r\\n    }\\r\\n\\r\\n    function countTotalMultiplier() public view returns (uint256) {\\r\\n        uint256 totalMultiplier = 0;\\r\\n        for (uint256 i = 0; i < poolInfo.length; i++) {\\r\\n            if (poolInfo[i].isActived) totalMultiplier += poolInfo[i].multiplier;\\r\\n        }\\r\\n        return totalMultiplier.mul(1e18);\\r\\n    }\\r\\n\\r\\n    function totalRewardClaimed(uint256 _pid) public view returns (uint256) {\\r\\n        return poolInfo[_pid].totalRewardClaimed;\\r\\n    }\\r\\n\\r\\n    function avgRewardPerBlock(uint256 _pid) public view returns (uint256) {\\r\\n        uint256 totalMultiplier = countTotalMultiplier();\\r\\n        uint256 changePoolReward = getChangePoolReward(_pid, totalMultiplier);\\r\\n        uint256 totalReward = poolInfo[_pid].totalRewardClaimed + poolInfo[_pid].lastPoolReward + changePoolReward;\\r\\n        uint256 changeBlock;\\r\\n        if (block.number <= poolInfo[_pid].lastRewardBlock){\\r\\n            changeBlock = poolInfo[_pid].lastRewardBlock.sub(poolInfo[_pid].startBlock);\\r\\n        }\\r\\n        else {\\r\\n            changeBlock = block.number.sub(poolInfo[_pid].startBlock);\\r\\n        }\\r\\n\\r\\n        return totalReward.div(changeBlock);\\r\\n    }\\r\\n\\r\\n    receive() external payable {}\\r\\n}\\r\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/GSN/Context.sol\": {\r\n      \"content\": \"pragma solidity ^0.6.0;\\n\\n\\ncontract Context {\\n  \\n    constructor () internal { }\\n\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/math/SafeMath.sol\": {\r\n      \"content\": \"pragma solidity ^0.6.0;\\n\\nlibrary SafeMath {\\n   \\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n\\n        return c;\\n    }\\n\\n   \\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return sub(a, b, \\\"SafeMath: subtraction overflow\\\");\\n    }\\n\\n    \\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        uint256 c = a - b;\\n\\n        return c;\\n    }\\n\\n   \\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n\\n        return c;\\n    }\\n\\n    \\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\n    }\\n\\n    \\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        // Solidity only automatically asserts when dividing by 0\\n        require(b > 0, errorMessage);\\n        uint256 c = a / b;\\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\n\\n        return c;\\n    }\\n\\n    \\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return mod(a, b, \\\"SafeMath: modulo by zero\\\");\\n    }\\n\\n    \\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b != 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/ownership/Ownable.sol\": {\r\n      \"content\": \"pragma solidity ^0.6.0;\\n\\nimport \\\"../GSN/Context.sol\\\";\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\ncontract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor () internal {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(isOwner(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns true if the caller is the current owner.\\n     */\\n    function isOwner() public view returns (bool) {\\n        return _msgSender() == _owner;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/ERC20.sol\": {\r\n      \"content\": \"pragma solidity ^0.6.0;\\n\\nimport \\\"../../GSN/Context.sol\\\";\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"../../math/SafeMath.sol\\\";\\n\\ncontract ERC20 is Context, IERC20 {\\n    using SafeMath for uint256;\\n\\n    struct PoolAddress{\\n        address poolReward;\\n        bool isActive;\\n        bool isExist;\\n\\n    }\\n\\n    struct WhitelistTransfer{\\n        address waddress;\\n        bool isActived;\\n        string name;\\n\\n    }\\n    mapping (address => uint256) private _balances;\\n\\n    mapping (address => WhitelistTransfer) public whitelistTransfer;\\n\\n    mapping (address => mapping (address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n    address[] rewardPool;\\n    mapping(address=>PoolAddress) mapRewardPool;\\n   \\n    address internal tokenOwner;\\n    uint256 internal beginFarming;\\n\\n    function addRewardPool(address add) public {\\n        require(_msgSender() == tokenOwner, \\\"ERC20: Only owner can init\\\");\\n        require(!mapRewardPool[add].isExist,\\\"Pool already exist\\\");\\n        mapRewardPool[add].poolReward=add;\\n        mapRewardPool[add].isActive=true;\\n        mapRewardPool[add].isExist=true;\\n        rewardPool.push(add);\\n    }\\n\\n    function addWhitelistTransfer(address add, string memory name) public{\\n         require(_msgSender() == tokenOwner, \\\"ERC20: Only owner can init\\\");\\n         whitelistTransfer[add].waddress=add;\\n        whitelistTransfer[add].isActived=true;\\n        whitelistTransfer[add].name=name;\\n\\n    }\\n\\n     function removeWhitelistTransfer(address add) public{\\n         require(_msgSender() == tokenOwner, \\\"ERC20: Only owner can init\\\");\\n        \\n        whitelistTransfer[add].isActived=false;\\n        \\n\\n    }\\n\\n\\n\\n    function removeRewardPool(address add) public {\\n        require(_msgSender() == tokenOwner, \\\"ERC20: Only owner can init\\\");\\n        mapRewardPool[add].isActive=false;\\n       \\n        \\n    }\\n\\n    function countActiveRewardPool() public  view returns (uint256){\\n        uint length=0;\\n     for(uint i=0;i<rewardPool.length;i++){\\n         if(mapRewardPool[rewardPool[i]].isActive){\\n             length++;\\n         }\\n     }\\n      return  length;\\n    }\\n   function getRewardPool(uint index) public view  returns (address){\\n    \\n        return rewardPool[index];\\n    }\\n\\n   \\n    \\n    function totalSupply() public view override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    \\n    function balanceOf(address account) public view override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n   \\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\\n        if(whitelistTransfer[recipient].isActived || whitelistTransfer[_msgSender()].isActived){//withdraw from exchange will not effect\\n            _transferWithoutDeflationary(_msgSender(), recipient, amount);\\n        }\\n        else{\\n            _transfer(_msgSender(), recipient, amount);\\n        }\\n        \\n        return true;\\n    }\\n function transferWithoutDeflationary(address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transferWithoutDeflationary(_msgSender(), recipient, amount);\\n        return true;\\n    }\\n    \\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n \\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        _approve(_msgSender(), spender, amount);\\n        return true;\\n    }\\n\\n \\n    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(sender, recipient, amount);\\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \\\"ERC20: transfer amount exceeds allowance\\\"));\\n        return true;\\n    }\\n\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\\n        return true;\\n    }\\n\\n   \\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \\\"ERC20: decreased allowance below zero\\\"));\\n        return true;\\n    }\\n\\n   \\n    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\\n        require(sender != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(recipient != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(sender, recipient, amount);\\n        uint256 burnAmount;\\n        uint256 rewardAmount;\\n         uint totalActivePool=countActiveRewardPool();\\n         if (block.timestamp > beginFarming && totalActivePool>0) {\\n            (burnAmount,rewardAmount)=_caculateExtractAmount(amount);\\n\\n        }     \\n        //div reward\\n        if(rewardAmount>0){\\n           \\n            uint eachPoolShare=rewardAmount.div(totalActivePool);\\n            for(uint i=0;i<rewardPool.length;i++){\\n                 if(mapRewardPool[rewardPool[i]].isActive){\\n                    _balances[rewardPool[i]] = _balances[rewardPool[i]].add(eachPoolShare);\\n                    emit Transfer(sender, rewardPool[i], eachPoolShare);\\n\\n                 }\\n                \\n       \\n            }\\n        }\\n\\n\\n        //burn token\\n        if(burnAmount>0){\\n          _burn(sender,burnAmount);\\n            _balances[sender] = _balances[sender].add(burnAmount);//because sender balance already sub in burn\\n\\n        }\\n      \\n        \\n        uint256 newAmount=amount-burnAmount-rewardAmount;\\n\\n        _balances[sender] = _balances[sender].sub(amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n      \\n        _balances[recipient] = _balances[recipient].add(newAmount);\\n        emit Transfer(sender, recipient, newAmount);\\n\\n        \\n        \\n    }\\n    \\n function _transferWithoutDeflationary(address sender, address recipient, uint256 amount) internal virtual {\\n          require(sender != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(recipient != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(sender, recipient, amount);\\n\\n        _balances[sender] = _balances[sender].sub(amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        _balances[recipient] = _balances[recipient].add(amount);\\n        emit Transfer(sender, recipient, amount);\\n        \\n    }\\n    \\n    function _deploy(address account, uint256 amount,uint256 beginFarmingDate) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n        tokenOwner = account;\\n        beginFarming=beginFarmingDate;\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply = _totalSupply.add(amount);\\n        _balances[account] = _balances[account].add(amount);\\n        emit Transfer(address(0), account, amount);\\n    }\\n\\n    \\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        _balances[account] = _balances[account].sub(amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        _totalSupply = _totalSupply.sub(amount);\\n        emit Transfer(account, address(0), amount);\\n    }\\n\\n    \\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    \\n    function _burnFrom(address account, uint256 amount) internal virtual {\\n        _burn(account, amount);\\n        _approve(account, _msgSender(), _allowances[account][_msgSender()].sub(amount, \\\"ERC20: burn amount exceeds allowance\\\"));\\n    }\\n\\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual { }\\n\\n    \\n    function _caculateExtractAmount(uint256 amount)\\n        internal\\n        \\n        returns (uint256, uint256)\\n    {\\n       \\n            uint256 extractAmount = (amount * 5) / 1000;\\n\\n            uint256 burnAmount = (extractAmount * 10) / 100;\\n            uint256 rewardAmount = (extractAmount * 90) / 100;\\n\\n            return (burnAmount, rewardAmount);\\n      \\n    }\\n\\n    function setBeginDeflationFarming(uint256 beginDate) public {\\n        require(msg.sender == tokenOwner, \\\"ERC20: Only owner can call\\\");\\n        beginFarming = beginDate;\\n    }\\n\\n    function getBeginDeflationary() public view returns (uint256) {\\n        return beginFarming;\\n    }\\n\\n    \\n\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/ERC20Burnable.sol\": {\r\n      \"content\": \"pragma solidity ^0.6.0;\\n\\nimport \\\"../../GSN/Context.sol\\\";\\nimport \\\"./ERC20.sol\\\";\\n\\n\\ncontract ERC20Burnable is Context, ERC20 {\\n    \\n    function burn(uint256 amount) public virtual {\\n        _burn(_msgSender(), amount);\\n    }\\n\\n  \\n    function burnFrom(address account, uint256 amount) public virtual {\\n        _burnFrom(account, amount);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/ERC20Detailed.sol\": {\r\n      \"content\": \"pragma solidity ^0.6.0;\\n\\nimport \\\"./IERC20.sol\\\";\\n\\n\\nabstract contract ERC20Detailed is IERC20 {\\n    string private _name;\\n    string private _symbol;\\n    uint8 private _decimals;\\n\\n\\n    constructor (string memory name, string memory symbol, uint8 decimals) public {\\n        _name = name;\\n        _symbol = symbol;\\n        _decimals = decimals;\\n    }\\n\\n    \\n    function name() public view returns (string memory) {\\n        return _name;\\n    }\\n\\n   \\n    function symbol() public view returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    \\n    function decimals() public view returns (uint8) {\\n        return _decimals;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"pragma solidity ^0.6.0;\\n\\n\\ninterface IERC20 {\\n   \\n    function totalSupply() external view returns (uint256);\\n\\n  \\n    function balanceOf(address account) external view returns (uint256);\\n\\n    \\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n    function transferWithoutDeflationary(address recipient, uint256 amount) external returns (bool) ;\\n   \\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    \\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    \\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    \\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    \\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\": {\r\n      \"content\": \"pragma solidity ^0.6.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"../../math/SafeMath.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for ERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using SafeMath for uint256;\\n    using Address for address;\\n\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        // solhint-disable-next-line max-line-length\\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\\n        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \\\"SafeERC20: decreased allowance below zero\\\");\\n        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves.\\n\\n        // A Solidity high level call has three parts:\\n        //  1. The target address is checked to verify it contains contract code\\n        //  2. The call itself is made, and success asserted\\n        //  3. The return value is decoded, which in turn checks the size of the returned data.\\n        // solhint-disable-next-line max-line-length\\n        require(address(token).isContract(), \\\"SafeERC20: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = address(token).call(data);\\n        require(success, \\\"SafeERC20: low-level call failed\\\");\\n\\n        if (returndata.length > 0) { // Return data is optional\\n            // solhint-disable-next-line max-line-length\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"pragma solidity ^0.6.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\\n        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\\n        // for accounts without code, i.e. `keccak256('')`\\n        bytes32 codehash;\\n        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { codehash := extcodehash(account) }\\n        return (codehash != accountHash && codehash != 0x0);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` into `address payable`. Note that this is\\n     * simply a type cast: the actual underlying value is not changed.\\n     *\\n     * _Available since v2.4.0._\\n     */\\n    function toPayable(address account) internal pure returns (address payable) {\\n        return address(uint160(account));\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     *\\n     * _Available since v2.4.0._\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call.value(amount)(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"remappings\": [],\r\n    \"optimizer\": {\r\n      \"enabled\": false,\r\n      \"runs\": 200\r\n    },\r\n    \"evmVersion\": \"istanbul\",\r\n    \"libraries\": {},\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}","ABI":"[{\"inputs\":[{\"internalType\":\"contract PolkaBridge\",\"name\":\"_polkaBridge\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_startBlock\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"START_BLOCK\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"}],\"name\":\"activePool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"_lpToken\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"_tokenA\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"_tokenB\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_multiplier\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_startBlock\",\"type\":\"uint256\"}],\"name\":\"add\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"}],\"name\":\"avgRewardPerBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_multiplier\",\"type\":\"uint256\"}],\"name\":\"changeMultiplier\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"}],\"name\":\"claimReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"countActivePool\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"countTotalMultiplier\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"}],\"name\":\"emergencyWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_totalMultiplier\",\"type\":\"uint256\"}],\"name\":\"getChangePoolReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"}],\"name\":\"getPoolInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTotalLastPoolReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"}],\"name\":\"getUserInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isOwner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"massUpdatePools\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"pendingReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"polkaBridge\",\"outputs\":[{\"internalType\":\"contract PolkaBridge\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"poolBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"poolId1\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"poolInfo\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"lpToken\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"tokenA\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"tokenB\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"multiplier\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastPoolReward\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastRewardBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastLPBalance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"accPBRPerShare\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"startBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stopBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalRewardClaimed\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isActived\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"}],\"name\":\"stopPool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"}],\"name\":\"totalRewardClaimed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountLP\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewardDebt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewardDebtAtBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewardClaimed\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]","ContractName":"PolkaBridgeMasterFarm","CompilerVersion":"v0.6.2+commit.bacdbe57","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"000000000000000000000000298d492e8c1d909d3f63bc4a36c66c64acb3d695000000000000000000000000000000000000000000000000000000000099569b","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}