{"status":"1","message":"OK","result":[{"SourceCode":"// File: contracts/interfaces/IVaultParameters.sol\r\n\r\ninterface IVaultParameters {\r\n    function canModifyVault ( address ) external view returns ( bool );\r\n    function foundation (  ) external view returns ( address );\r\n    function isManager ( address ) external view returns ( bool );\r\n    function isOracleTypeEnabled ( uint256, address ) external view returns ( bool );\r\n    function liquidationFee ( address ) external view returns ( uint256 );\r\n    function setCollateral ( address asset, uint256 stabilityFeeValue, uint256 liquidationFeeValue, uint256 usdpLimit, uint256[] calldata oracles ) external;\r\n    function setFoundation ( address newFoundation ) external;\r\n    function setLiquidationFee ( address asset, uint256 newValue ) external;\r\n    function setManager ( address who, bool permit ) external;\r\n    function setOracleType ( uint256 _type, address asset, bool enabled ) external;\r\n    function setStabilityFee ( address asset, uint256 newValue ) external;\r\n    function setTokenDebtLimit ( address asset, uint256 limit ) external;\r\n    function setVaultAccess ( address who, bool permit ) external;\r\n    function stabilityFee ( address ) external view returns ( uint256 );\r\n    function tokenDebtLimit ( address ) external view returns ( uint256 );\r\n    function vault (  ) external view returns ( address );\r\n    function vaultParameters (  ) external view returns ( address );\r\n}\r\n\r\n// File: contracts/interfaces/IVaultManagerParameters.sol\r\n\r\ninterface IVaultManagerParameters {\r\n    function devaluationPeriod ( address ) external view returns ( uint256 );\r\n    function initialCollateralRatio ( address ) external view returns ( uint256 );\r\n    function liquidationDiscount ( address ) external view returns ( uint256 );\r\n    function liquidationRatio ( address ) external view returns ( uint256 );\r\n    function maxColPercent ( address ) external view returns ( uint256 );\r\n    function minColPercent ( address ) external view returns ( uint256 );\r\n    function setColPartRange ( address asset, uint256 min, uint256 max ) external;\r\n    function setCollateral (\r\n        address asset,\r\n        uint256 stabilityFeeValue,\r\n        uint256 liquidationFeeValue,\r\n        uint256 initialCollateralRatioValue,\r\n        uint256 liquidationRatioValue,\r\n        uint256 liquidationDiscountValue,\r\n        uint256 devaluationPeriodValue,\r\n        uint256 usdpLimit,\r\n        uint256[] calldata oracles,\r\n        uint256 minColP,\r\n        uint256 maxColP\r\n    ) external;\r\n    function setDevaluationPeriod ( address asset, uint256 newValue ) external;\r\n    function setInitialCollateralRatio ( address asset, uint256 newValue ) external;\r\n    function setLiquidationDiscount ( address asset, uint256 newValue ) external;\r\n    function setLiquidationRatio ( address asset, uint256 newValue ) external;\r\n    function vaultParameters (  ) external view returns ( address );\r\n}\r\n\r\n// File: contracts/interfaces/IVault.sol\r\n\r\ninterface IVault {\r\n    function DENOMINATOR_1E2 (  ) external view returns ( uint256 );\r\n    function DENOMINATOR_1E5 (  ) external view returns ( uint256 );\r\n    function borrow ( address asset, address user, uint256 amount ) external returns ( uint256 );\r\n    function calculateFee ( address asset, address user, uint256 amount ) external view returns ( uint256 );\r\n    function changeOracleType ( address asset, address user, uint256 newOracleType ) external;\r\n    function chargeFee ( address asset, address user, uint256 amount ) external;\r\n    function col (  ) external view returns ( address );\r\n    function colToken ( address, address ) external view returns ( uint256 );\r\n    function collaterals ( address, address ) external view returns ( uint256 );\r\n    function debts ( address, address ) external view returns ( uint256 );\r\n    function depositCol ( address asset, address user, uint256 amount ) external;\r\n    function depositEth ( address user ) external payable;\r\n    function depositMain ( address asset, address user, uint256 amount ) external;\r\n    function destroy ( address asset, address user ) external;\r\n    function getTotalDebt ( address asset, address user ) external view returns ( uint256 );\r\n    function lastUpdate ( address, address ) external view returns ( uint256 );\r\n    function liquidate ( address asset, address positionOwner, uint256 mainAssetToLiquidator, uint256 colToLiquidator, uint256 mainAssetToPositionOwner, uint256 colToPositionOwner, uint256 repayment, uint256 penalty, address liquidator ) external;\r\n    function liquidationBlock ( address, address ) external view returns ( uint256 );\r\n    function liquidationFee ( address, address ) external view returns ( uint256 );\r\n    function liquidationPrice ( address, address ) external view returns ( uint256 );\r\n    function oracleType ( address, address ) external view returns ( uint256 );\r\n    function repay ( address asset, address user, uint256 amount ) external returns ( uint256 );\r\n    function spawn ( address asset, address user, uint256 _oracleType ) external;\r\n    function stabilityFee ( address, address ) external view returns ( uint256 );\r\n    function tokenDebts ( address ) external view returns ( uint256 );\r\n    function triggerLiquidation ( address asset, address positionOwner, uint256 initialPrice ) external;\r\n    function update ( address asset, address user ) external;\r\n    function usdp (  ) external view returns ( address );\r\n    function vaultParameters (  ) external view returns ( address );\r\n    function weth (  ) external view returns ( address payable );\r\n    function withdrawCol ( address asset, address user, uint256 amount ) external;\r\n    function withdrawEth ( address user, uint256 amount ) external;\r\n    function withdrawMain ( address asset, address user, uint256 amount ) external;\r\n}\r\n\r\n// File: contracts/interfaces/IToken.sol\r\n\r\ninterface IToken {\r\n    function decimals() external view returns (uint8);\r\n    function symbol() external view returns (string memory);\r\n    function balanceOf(address) external view returns (uint);\r\n}\r\n\r\n// File: contracts/interfaces/IOracleRegistry.sol\r\n\r\npragma abicoder v2;\r\n\r\n\r\ninterface IOracleRegistry {\r\n\r\n    struct Oracle {\r\n        uint oracleType;\r\n        address oracleAddress;\r\n    }\r\n\r\n    function WETH (  ) external view returns ( address );\r\n    function getKeydonixOracleTypes (  ) external view returns ( uint256[] memory );\r\n    function getOracles (  ) external view returns ( Oracle[] memory foundOracles );\r\n    function keydonixOracleTypes ( uint256 ) external view returns ( uint256 );\r\n    function maxOracleType (  ) external view returns ( uint256 );\r\n    function oracleByAsset ( address asset ) external view returns ( address );\r\n    function oracleByType ( uint256 ) external view returns ( address );\r\n    function oracleTypeByAsset ( address ) external view returns ( uint256 );\r\n    function oracleTypeByOracle ( address ) external view returns ( uint256 );\r\n    function setKeydonixOracleTypes ( uint256[] memory _keydonixOracleTypes ) external;\r\n    function setOracle ( uint256 oracleType, address oracle ) external;\r\n    function setOracleTypeForAsset ( address asset, uint256 oracleType ) external;\r\n    function setOracleTypeForAssets ( address[] memory assets, uint256 oracleType ) external;\r\n    function unsetOracle ( uint256 oracleType ) external;\r\n    function unsetOracleForAsset ( address asset ) external;\r\n    function unsetOracleForAssets ( address[] memory assets ) external;\r\n    function vaultParameters (  ) external view returns ( address );\r\n}\r\n\r\n// File: contracts/helpers/IUniswapV2PairFull.sol\r\n\r\n// SPDX-License-Identifier: bsl-1.1\r\n\r\n/*\r\n  Copyright 2020 Unit Protocol: Artem Zakharov (az@unit.xyz).\r\n*/\r\npragma solidity 0.7.6;\r\n\r\ninterface IUniswapV2PairFull {\r\n    event Approval(address indexed owner, address indexed spender, uint value);\r\n    event Transfer(address indexed from, address indexed to, uint value);\r\n\r\n    function name() external pure returns (string memory);\r\n    function symbol() external pure returns (string memory);\r\n    function decimals() external pure returns (uint8);\r\n    function totalSupply() external view returns (uint);\r\n    function balanceOf(address owner) external view returns (uint);\r\n    function allowance(address owner, address spender) external view returns (uint);\r\n\r\n    function approve(address spender, uint value) external returns (bool);\r\n    function transfer(address to, uint value) external returns (bool);\r\n    function transferFrom(address from, address to, uint value) external returns (bool);\r\n\r\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\r\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\r\n    function nonces(address owner) external view returns (uint);\r\n\r\n    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\r\n\r\n    event Mint(address indexed sender, uint amount0, uint amount1);\r\n    event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);\r\n    event Swap(\r\n        address indexed sender,\r\n        uint amount0In,\r\n        uint amount1In,\r\n        uint amount0Out,\r\n        uint amount1Out,\r\n        address indexed to\r\n    );\r\n    event Sync(uint112 reserve0, uint112 reserve1);\r\n\r\n    function MINIMUM_LIQUIDITY() external pure returns (uint);\r\n    function factory() external view returns (address);\r\n    function token0() external view returns (address);\r\n    function token1() external view returns (address);\r\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\r\n    function price0CumulativeLast() external view returns (uint);\r\n    function price1CumulativeLast() external view returns (uint);\r\n    function kLast() external view returns (uint);\r\n\r\n    function mint(address to) external returns (uint liquidity);\r\n    function burn(address to) external returns (uint amount0, uint amount1);\r\n    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\r\n    function skim(address to) external;\r\n    function sync() external;\r\n\r\n    function initialize(address, address) external;\r\n}\r\n\r\n// File: contracts/helpers/CDPViewer.sol\r\n\r\n/*\r\n  Copyright 2021 Unit Protocol: Artem Zakharov (az@unit.xyz).\r\n*/\r\npragma solidity 0.7.6;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\ninterface IMaker {\r\n    function symbol() external view returns(bytes32);\r\n}\r\n\r\n\r\n/**\r\n * @notice Views collaterals in one request to save node requests and speed up dapps.\r\n */\r\ncontract CDPViewer {\r\n\r\n    IVault public vault;\r\n    IVaultParameters public  vaultParameters;\r\n    IVaultManagerParameters public  vaultManagerParameters;\r\n    IOracleRegistry public  oracleRegistry;\r\n\r\n    struct CDP {\r\n        address owner;\r\n\r\n        // Collateral amount\r\n        uint128 collateral;\r\n\r\n        // Debt amount\r\n        uint128 debt;\r\n\r\n        // Percentage with 3 decimals\r\n        uint32 stabilityFee;\r\n\r\n        // Percentage with 0 decimals\r\n        uint16 liquidationFee;\r\n    }\r\n\r\n    struct CollateralParameters {\r\n\r\n        address asset;\r\n\r\n        // Percentage with 3 decimals\r\n        uint32 stabilityFee;\r\n\r\n        // Percentage with 0 decimals\r\n        uint16 liquidationFee;\r\n\r\n        // Percentage with 0 decimals\r\n        uint16 initialCollateralRatio;\r\n\r\n        // Percentage with 0 decimals\r\n        uint16 liquidationRatio;\r\n\r\n        // Percentage with 3 decimals\r\n        uint32 liquidationDiscount;\r\n\r\n        // Devaluation period in blocks\r\n        uint32 devaluationPeriod;\r\n\r\n        // USDP mint limit\r\n        uint128 tokenDebtLimit;\r\n\r\n        // USDP mint limit\r\n        uint128 tokenDebt;\r\n\r\n        // Oracle types enabled for this asset\r\n        uint16 oracleType;\r\n\r\n        CDP cdp;\r\n    }\r\n\r\n    struct TokenDetails {\r\n        uint balance;\r\n        address[2] lpUnderlyings;\r\n    }\r\n\r\n\r\n    constructor() {\r\n         IVaultManagerParameters vmp = IVaultManagerParameters(0x203153522B9EAef4aE17c6e99851EE7b2F7D312E);\r\n         vaultManagerParameters = vmp;\r\n         IVaultParameters vp = IVaultParameters(vmp.vaultParameters());\r\n         vaultParameters = vp;\r\n         vault = IVault(vp.vault());\r\n         IOracleRegistry or = IOracleRegistry(0x75fBFe26B21fd3EA008af0C764949f8214150C8f);\r\n         oracleRegistry = or;\r\n    }\r\n\r\n    /**\r\n     * @notice Get parameters of one asset\r\n     * @param asset asset address\r\n     * @param owner owner address\r\n     */\r\n    function getCollateralParameters(address asset, address owner)\r\n        public\r\n        view\r\n        returns (CollateralParameters memory r)\r\n    {\r\n        r.asset = asset;\r\n        r.stabilityFee = uint32(vaultParameters.stabilityFee(asset));\r\n        r.liquidationFee = uint16(vaultParameters.liquidationFee(asset));\r\n        r.initialCollateralRatio = uint16(vaultManagerParameters.initialCollateralRatio(asset));\r\n        r.liquidationRatio = uint16(vaultManagerParameters.liquidationRatio(asset));\r\n        r.liquidationDiscount = uint32(vaultManagerParameters.liquidationDiscount(asset));\r\n        r.devaluationPeriod = uint32(vaultManagerParameters.devaluationPeriod(asset));\r\n\r\n        r.tokenDebtLimit = uint128(vaultParameters.tokenDebtLimit(asset));\r\n        r.tokenDebt = uint128(vault.tokenDebts(asset));\r\n        r.oracleType = uint16(oracleRegistry.oracleTypeByAsset(asset));\r\n\r\n        if (owner == address(0)) return r;\r\n\r\n        r.cdp.owner = owner;\r\n        r.cdp.stabilityFee = uint32(vault.stabilityFee(asset, owner));\r\n        r.cdp.liquidationFee = uint16(vault.liquidationFee(asset, owner));\r\n        r.cdp.debt = uint128(vault.debts(asset, owner));\r\n        r.cdp.collateral = uint128(vault.collaterals(asset, owner));\r\n    }\r\n\r\n    /**\r\n     * @notice Get details of one token\r\n     * @param asset token address\r\n     * @param owner owner address\r\n     */\r\n    function getTokenDetails(address asset, address owner)\r\n        public\r\n        view\r\n        returns (TokenDetails memory r)\r\n    {\r\n        try IUniswapV2PairFull(asset).token0() returns(address token0) {\r\n            r.lpUnderlyings[0] = token0;\r\n            r.lpUnderlyings[1] = IUniswapV2PairFull(asset).token1();\r\n        } catch (bytes memory) { }\r\n\r\n        if (owner == address(0)) return r;\r\n        r.balance = IToken(asset).balanceOf(owner);\r\n    }\r\n\r\n    /**\r\n     * @notice Get parameters of many collaterals\r\n     * @param assets asset addresses\r\n     * @param owner owner address\r\n     */\r\n    function getMultiCollateralParameters(address[] calldata assets, address owner)\r\n        external\r\n        view\r\n        returns (CollateralParameters[] memory r)\r\n    {\r\n        uint length = assets.length;\r\n        r = new CollateralParameters[](length);\r\n        for (uint i = 0; i < length; ++i) {\r\n            r[i] = getCollateralParameters(assets[i], owner);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @notice Get details of many token\r\n     * @param assets token addresses\r\n     * @param owner owner address\r\n     */\r\n    function getMultiTokenDetails(address[] calldata assets, address owner)\r\n        external\r\n        view\r\n        returns (TokenDetails[] memory r)\r\n    {\r\n        uint length = assets.length;\r\n        r = new TokenDetails[](length);\r\n        for (uint i = 0; i < length; ++i) {\r\n            r[i] = getTokenDetails(assets[i], owner);\r\n        }\r\n    }\r\n}","ABI":"[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"getCollateralParameters\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"stabilityFee\",\"type\":\"uint32\"},{\"internalType\":\"uint16\",\"name\":\"liquidationFee\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"initialCollateralRatio\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"liquidationRatio\",\"type\":\"uint16\"},{\"internalType\":\"uint32\",\"name\":\"liquidationDiscount\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"devaluationPeriod\",\"type\":\"uint32\"},{\"internalType\":\"uint128\",\"name\":\"tokenDebtLimit\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"tokenDebt\",\"type\":\"uint128\"},{\"internalType\":\"uint16\",\"name\":\"oracleType\",\"type\":\"uint16\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint128\",\"name\":\"collateral\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"debt\",\"type\":\"uint128\"},{\"internalType\":\"uint32\",\"name\":\"stabilityFee\",\"type\":\"uint32\"},{\"internalType\":\"uint16\",\"name\":\"liquidationFee\",\"type\":\"uint16\"}],\"internalType\":\"struct CDPViewer.CDP\",\"name\":\"cdp\",\"type\":\"tuple\"}],\"internalType\":\"struct CDPViewer.CollateralParameters\",\"name\":\"r\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"assets\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"getMultiCollateralParameters\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"stabilityFee\",\"type\":\"uint32\"},{\"internalType\":\"uint16\",\"name\":\"liquidationFee\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"initialCollateralRatio\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"liquidationRatio\",\"type\":\"uint16\"},{\"internalType\":\"uint32\",\"name\":\"liquidationDiscount\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"devaluationPeriod\",\"type\":\"uint32\"},{\"internalType\":\"uint128\",\"name\":\"tokenDebtLimit\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"tokenDebt\",\"type\":\"uint128\"},{\"internalType\":\"uint16\",\"name\":\"oracleType\",\"type\":\"uint16\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint128\",\"name\":\"collateral\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"debt\",\"type\":\"uint128\"},{\"internalType\":\"uint32\",\"name\":\"stabilityFee\",\"type\":\"uint32\"},{\"internalType\":\"uint16\",\"name\":\"liquidationFee\",\"type\":\"uint16\"}],\"internalType\":\"struct CDPViewer.CDP\",\"name\":\"cdp\",\"type\":\"tuple\"}],\"internalType\":\"struct CDPViewer.CollateralParameters[]\",\"name\":\"r\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"assets\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"getMultiTokenDetails\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"},{\"internalType\":\"address[2]\",\"name\":\"lpUnderlyings\",\"type\":\"address[2]\"}],\"internalType\":\"struct CDPViewer.TokenDetails[]\",\"name\":\"r\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"getTokenDetails\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"},{\"internalType\":\"address[2]\",\"name\":\"lpUnderlyings\",\"type\":\"address[2]\"}],\"internalType\":\"struct CDPViewer.TokenDetails\",\"name\":\"r\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"oracleRegistry\",\"outputs\":[{\"internalType\":\"contract IOracleRegistry\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vault\",\"outputs\":[{\"internalType\":\"contract IVault\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vaultManagerParameters\",\"outputs\":[{\"internalType\":\"contract IVaultManagerParameters\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vaultParameters\",\"outputs\":[{\"internalType\":\"contract IVaultParameters\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"CDPViewer","CompilerVersion":"v0.7.6+commit.7338295f","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"GNU GPLv3","Proxy":"0","Implementation":"","SwarmSource":"ipfs://e7f30201481261d1aba2e82e6db5484295fcc3d5a2a89981ed57231093d14699"}]}