{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/connectors/aaveV2.sol\": {\r\n      \"content\": \"pragma solidity ^0.7.0;\\npragma experimental ABIEncoderV2;\\n\\n// import files from common directory\\ninterface TokenInterface {\\n    function allowance(address, address) external view returns (uint);\\n    function balanceOf(address) external view returns (uint);\\n    function approve(address, uint) external;\\n    function transfer(address, uint) external returns (bool);\\n    function transferFrom(address, address, uint) external returns (bool);\\n    function deposit() external payable;\\n    function withdraw(uint) external;\\n}\\n\\ninterface AaveInterface {\\n    function deposit(address _asset, uint256 _amount, address _onBehalfOf, uint16 _referralCode) external;\\n    function withdraw(address _asset, uint256 _amount, address _to) external;\\n    function borrow(\\n        address _asset,\\n        uint256 _amount,\\n        uint256 _interestRateMode,\\n        uint16 _referralCode,\\n        address _onBehalfOf\\n    ) external;\\n    function repay(address _asset, uint256 _amount, uint256 _rateMode, address _onBehalfOf) external;\\n    function setUserUseReserveAsCollateral(address _asset, bool _useAsCollateral) external;\\n}\\n\\ninterface AaveLendingPoolProviderInterface {\\n    function getLendingPool() external view returns (address);\\n}\\n\\n// Aave Protocol Data Provider\\ninterface AaveDataProviderInterface {\\n    function getReserveTokensAddresses(address _asset) external view returns (\\n        address aTokenAddress,\\n        address stableDebtTokenAddress,\\n        address variableDebtTokenAddress\\n    );\\n    function getUserReserveData(address _asset, address _user) external view returns (\\n        uint256 currentATokenBalance,\\n        uint256 currentStableDebt,\\n        uint256 currentVariableDebt,\\n        uint256 principalStableDebt,\\n        uint256 scaledVariableDebt,\\n        uint256 stableBorrowRate,\\n        uint256 liquidityRate,\\n        uint40 stableRateLastUpdated,\\n        bool usageAsCollateralEnabled\\n    );\\n}\\n\\ninterface AaveAddressProviderRegistryInterface {\\n    function getAddressesProvidersList() external view returns (address[] memory);\\n}\\n\\ninterface ATokenInterface {\\n    function balanceOf(address _user) external view returns(uint256);\\n}\\n\\ncontract DSMath {\\n\\n    function add(uint x, uint y) internal pure returns (uint z) {\\n        require((z = x + y) >= x, \\\"math-not-safe\\\");\\n    }\\n\\n    function mul(uint x, uint y) internal pure returns (uint z) {\\n        require(y == 0 || (z = x * y) / y == x, \\\"math-not-safe\\\");\\n    }\\n\\n    uint constant WAD = 10 ** 18;\\n\\n    function wmul(uint x, uint y) internal pure returns (uint z) {\\n        z = add(mul(x, y), WAD / 2) / WAD;\\n    }\\n\\n    function wdiv(uint x, uint y) internal pure returns (uint z) {\\n        z = add(mul(x, WAD), y / 2) / y;\\n    }\\n\\n    function sub(uint x, uint y) internal pure returns (uint z) {\\n        require((z = x - y) <= x, \\\"ds-math-sub-underflow\\\");\\n    }\\n\\n}\\n\\ncontract Stores {\\n\\n    /**\\n    * @dev Return ethereum address\\n    */\\n    address constant internal ethAddr = 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE;\\n\\n    /**\\n    * @dev Return Wrapped ETH address\\n    */\\n    address constant internal wethAddr = 0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2;\\n}\\n\\nabstract contract AaveHelpers is DSMath, Stores {\\n    /**\\n     * @dev get Aave Lending Pool Provider\\n    */\\n    function getAaveProvider() internal pure returns (AaveLendingPoolProviderInterface) {\\n        return AaveLendingPoolProviderInterface(0xB53C1a33016B2DC2fF3653530bfF1848a515c8c5); //mainnet\\n    }\\n\\n    /**\\n     * @dev get Aave Protocol Data Provider\\n    */\\n    function getAaveDataProvider() internal pure returns (AaveDataProviderInterface) {\\n        return AaveDataProviderInterface(0x057835Ad21a177dbdd3090bB1CAE03EaCF78Fc6d); //mainnet\\n    }\\n\\n    /**\\n     * @dev Return Weth address\\n    */\\n    function getWethAddr() internal pure returns (address) {\\n        return 0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2; // Mainnet WETH Address\\n    }\\n\\n    /**\\n     * @dev get Referral Code\\n    */\\n    function getReferralCode() internal pure returns (uint16) {\\n        return 3228;\\n    }\\n\\n    function getIsColl(AaveDataProviderInterface aaveData, address token, address user) internal view returns (bool isCol) {\\n        (, , , , , , , , isCol) = aaveData.getUserReserveData(token, user);\\n    }\\n\\n    function convertEthToWeth(bool isEth, TokenInterface token, uint amount) internal {\\n        if(isEth) token.deposit{value: amount}();\\n    }\\n\\n    function convertWethToEth(bool isEth, TokenInterface token, uint amount) internal {\\n       if(isEth) {\\n            token.approve(address(token), amount);\\n            token.withdraw(amount);\\n        }\\n    }\\n\\n    function getPaybackBalance(AaveDataProviderInterface aaveData, address token, uint rateMode) internal view returns (uint) {\\n        (, uint stableDebt, uint variableDebt, , , , , , ) = aaveData.getUserReserveData(token, address(this));\\n        return rateMode == 1 ? stableDebt : variableDebt;\\n    }\\n\\n    function getCollateralBalance(AaveDataProviderInterface aaveData, address token) internal view returns (uint bal) {\\n        (bal, , , , , , , ,) = aaveData.getUserReserveData(token, address(this));\\n    }\\n}\\n\\nabstract contract BasicResolver is AaveHelpers {\\n    event LogDeposit(address indexed token, uint256 tokenAmt);\\n    event LogWithdraw(address indexed token, uint256 tokenAmt);\\n    event LogBorrow(address indexed token, uint256 tokenAmt, uint256 indexed rateMode);\\n    event LogPayback(address indexed token, uint256 tokenAmt, uint256 indexed rateMode);\\n    event LogEnableCollateral(address[] tokens);\\n\\n    /**\\n     * @dev Deposit ETH/ERC20_Token.\\n     * @param token token address to deposit.(For ETH: 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE)\\n     * @param amt token amount to deposit.\\n    */\\n    function deposit(address token, uint amt) external payable {\\n        uint _amt = amt;\\n\\n        AaveInterface aave = AaveInterface(getAaveProvider().getLendingPool());\\n        AaveDataProviderInterface aaveData = getAaveDataProvider();\\n\\n        bool isEth = token == ethAddr;\\n        address _token = isEth ? getWethAddr() : token;\\n\\n        TokenInterface tokenContract = TokenInterface(_token);\\n\\n        if (isEth) {\\n            _amt = _amt == uint(-1) ? address(this).balance : _amt;\\n            convertEthToWeth(isEth, tokenContract, _amt);\\n        } else {\\n            _amt = _amt == uint(-1) ? tokenContract.balanceOf(address(this)) : _amt;\\n        }\\n\\n        tokenContract.approve(address(aave), _amt);\\n\\n        aave.deposit(_token, _amt, address(this), getReferralCode());\\n\\n        if (!getIsColl(aaveData, _token, address(this))) {\\n            aave.setUserUseReserveAsCollateral(_token, true);\\n        }\\n\\n        emit LogDeposit(token, _amt);\\n    }\\n\\n    /**\\n     * @dev Withdraw ETH/ERC20_Token.\\n     * @param token token address to withdraw.(For ETH: 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE)\\n     * @param amt token amount to withdraw.\\n    */\\n    function withdraw(address token, uint amt) external payable {\\n        uint _amt = amt;\\n\\n        AaveInterface aave = AaveInterface(getAaveProvider().getLendingPool());\\n        bool isEth = token == ethAddr;\\n        address _token = isEth ? getWethAddr() : token;\\n\\n        TokenInterface tokenContract = TokenInterface(_token);\\n\\n        uint initialBal = tokenContract.balanceOf(address(this));\\n        aave.withdraw(_token, _amt, address(this));\\n        uint finalBal = tokenContract.balanceOf(address(this));\\n\\n        _amt = sub(finalBal, initialBal);\\n\\n        convertWethToEth(isEth, tokenContract, _amt);\\n\\n        emit LogWithdraw(token, _amt);\\n    }\\n\\n    /**\\n     * @dev Borrow ETH/ERC20_Token.\\n     * @param token token address to borrow.(For ETH: 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE)\\n     * @param amt token amount to borrow.\\n     * @param rateMode type of borrow debt.(For Stable: 1, Variable: 2)\\n    */\\n    function borrow(address token, uint amt, uint rateMode) external payable {\\n        uint _amt = amt;\\n\\n        AaveInterface aave = AaveInterface(getAaveProvider().getLendingPool());\\n\\n        bool isEth = token == ethAddr;\\n        address _token = isEth ? getWethAddr() : token;\\n\\n        aave.borrow(_token, _amt, rateMode, getReferralCode(), address(this));\\n        convertWethToEth(isEth, TokenInterface(_token), _amt);\\n\\n        emit LogBorrow(token, _amt, rateMode);\\n    }\\n\\n    /**\\n     * @dev Payback borrowed ETH/ERC20_Token.\\n     * @param token token address to payback.(For ETH: 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE)\\n     * @param amt token amount to payback.\\n     * @param rateMode type of borrow debt.(For Stable: 1, Variable: 2)\\n    */\\n    function payback(address token, uint amt, uint rateMode) external payable {\\n        uint _amt = amt;\\n\\n        AaveInterface aave = AaveInterface(getAaveProvider().getLendingPool());\\n        AaveDataProviderInterface aaveData = getAaveDataProvider();\\n\\n        bool isEth = token == ethAddr;\\n        address _token = isEth ? getWethAddr() : token;\\n\\n        TokenInterface tokenContract = TokenInterface(_token);\\n\\n        _amt = _amt == uint(-1) ? getPaybackBalance(aaveData, _token, rateMode) : _amt;\\n\\n        if (isEth) convertEthToWeth(isEth, tokenContract, _amt);\\n\\n        tokenContract.approve(address(aave), _amt);\\n\\n        aave.repay(_token, _amt, rateMode, address(this));\\n\\n        emit LogPayback(token, _amt, rateMode);\\n    }\\n}\\n\\ncontract ConnectAave is BasicResolver {\\n    string public name = \\\"AaveV2-v1\\\";\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": false,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}","ABI":"[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenAmt\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"rateMode\",\"type\":\"uint256\"}],\"name\":\"LogBorrow\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenAmt\",\"type\":\"uint256\"}],\"name\":\"LogDeposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"tokens\",\"type\":\"address[]\"}],\"name\":\"LogEnableCollateral\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenAmt\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"rateMode\",\"type\":\"uint256\"}],\"name\":\"LogPayback\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenAmt\",\"type\":\"uint256\"}],\"name\":\"LogWithdraw\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rateMode\",\"type\":\"uint256\"}],\"name\":\"borrow\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amt\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rateMode\",\"type\":\"uint256\"}],\"name\":\"payback\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amt\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"}]","ContractName":"ConnectAave","CompilerVersion":"v0.7.0+commit.9e61f92b","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}