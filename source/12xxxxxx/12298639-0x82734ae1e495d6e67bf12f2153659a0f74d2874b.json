{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.5.8;\r\n\r\n/**\r\n * @title The standard ERC20 interface\r\n * @dev see https://eips.ethereum.org/EIPS/eip-20\r\n */\r\ninterface IERC20 {\r\n    function transfer(address, uint256) external returns (bool);\r\n    function approve(address, uint256) external returns (bool);\r\n    function transferFrom(address, address, uint256) external returns (bool);\r\n    function totalSupply() external view returns (uint256);\r\n    function balanceOf(address) external view returns (uint256);\r\n    function allowance(address, address) external view returns (uint256);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed holder, address indexed spender, uint256 value);\r\n}\r\n\r\n/// @title Time-delayed ERC-20 wallet contract.\r\n/// Can only transfer tokens after publicly recording the intention to do so\r\n/// at least four weeks in advance.\r\ncontract SlowWallet {\r\n\r\n    // TYPES\r\n\r\n    struct TransferProposal {\r\n        address destination;\r\n        uint256 value;\r\n        uint256 time;\r\n        string notes;\r\n        bool closed;\r\n    }\r\n\r\n    // DATA\r\n\r\n    IERC20 public token;\r\n    uint256 public constant delay = 4 weeks;\r\n    address public owner;\r\n\r\n    // PROPOSALS\r\n\r\n    mapping (uint256 => TransferProposal) public proposals;\r\n    uint256 public proposalsLength;\r\n\r\n    // EVENTS\r\n\r\n    event TransferProposed(\r\n        uint256 index,\r\n        address indexed destination,\r\n        uint256 value,\r\n        uint256 delayUntil,\r\n        string notes\r\n    );\r\n    event TransferConfirmed(uint256 index, address indexed destination, uint256 value, string notes);\r\n    event TransferCancelled(uint256 index, address indexed destination, uint256 value, string notes);\r\n    event AllTransfersCancelled();\r\n\r\n    // FUNCTIONALITY\r\n\r\n    constructor(address tokenAddress) public {\r\n        token = IERC20(tokenAddress);\r\n        owner = 0xA7b123D54BcEc14b4206dAb796982a6d5aaA6770;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner, \"must be owner\");\r\n        _;\r\n    }\r\n\r\n    /// Propose a new transfer, which can be confirmed after two weeks.\r\n    function propose(address destination, uint256 value, string calldata notes) external onlyOwner {\r\n        // Delay by at least two weeks.\r\n        // We are relying on block.timestamp for this, and aware of the possibility of its\r\n        // manipulation by miners. But we are working at a timescale that is already much\r\n        // longer than the variance in timestamps we have observed and expect in the future,\r\n        // so we are satisfied with this choice.\r\n        // solium-disable-next-line security/no-block-members\r\n        uint256 delayUntil = now + delay;\r\n        require(delayUntil >= now, \"delay overflowed\");\r\n\r\n        proposals[proposalsLength] = TransferProposal({\r\n            destination: destination,\r\n            value: value,\r\n            time: delayUntil,\r\n            notes: notes,\r\n            closed: false\r\n        });\r\n        proposalsLength++;\r\n\r\n        emit TransferProposed(proposalsLength-1, destination, value, delayUntil, notes);\r\n    }\r\n\r\n    /// Cancel a proposed transfer.\r\n    function cancel(uint256 index, address addr, uint256 value) external onlyOwner {\r\n        // Check authorization.\r\n        requireMatchingOpenProposal(index, addr, value);\r\n\r\n        // Cancel transfer.\r\n        proposals[index].closed = true;\r\n        emit TransferCancelled(index, addr, value, proposals[index].notes);\r\n    }\r\n\r\n    /// Mark all proposals \"void\", in O(1).\r\n    function voidAll() external onlyOwner {\r\n        proposalsLength = 0;\r\n        emit AllTransfersCancelled();\r\n    }\r\n\r\n    /// Confirm and execute a proposed transfer, if enough time has passed since it was proposed.\r\n    function confirm(uint256 index, address destination, uint256 value) external onlyOwner {\r\n        // Check authorization.\r\n        requireMatchingOpenProposal(index, destination, value);\r\n\r\n        // See commentary above about using `now`.\r\n        // solium-disable-next-line security/no-block-members\r\n        require(proposals[index].time < now, \"too early\");\r\n\r\n        // Record execution of transfer.\r\n        proposals[index].closed = true;\r\n        emit TransferConfirmed(index, destination, value, proposals[index].notes);\r\n\r\n        // Proceed with execution of transfer.\r\n        require(token.transfer(destination, value));\r\n    }\r\n\r\n    /// Throw unless the given transfer proposal exists and matches `destination` and `value`.\r\n    function requireMatchingOpenProposal(uint256 index, address destination, uint256 value) private view {\r\n        require(index < proposalsLength, \"index too high, or transfer voided\");\r\n        require(!proposals[index].closed, \"transfer already closed\");\r\n\r\n        // Slither reports \"dangerous strict equality\" for each of these, but it's OK.\r\n        // These equalities are to confirm that the transfer entered is equal to the\r\n        // matching previous transfer. We're vetting data entry; strict equality is appropriate.\r\n        require(proposals[index].destination == destination, \"destination mismatched\");\r\n        require(proposals[index].value == value, \"value mismatched\");\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"proposals\",\"outputs\":[{\"name\":\"destination\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"},{\"name\":\"time\",\"type\":\"uint256\"},{\"name\":\"notes\",\"type\":\"string\"},{\"name\":\"closed\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"index\",\"type\":\"uint256\"},{\"name\":\"addr\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"cancel\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"proposalsLength\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"delay\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"destination\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"},{\"name\":\"notes\",\"type\":\"string\"}],\"name\":\"propose\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"voidAll\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"index\",\"type\":\"uint256\"},{\"name\":\"destination\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"confirm\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"tokenAddress\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"index\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"destination\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"delayUntil\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"notes\",\"type\":\"string\"}],\"name\":\"TransferProposed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"index\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"destination\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"notes\",\"type\":\"string\"}],\"name\":\"TransferConfirmed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"index\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"destination\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"notes\",\"type\":\"string\"}],\"name\":\"TransferCancelled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"AllTransfersCancelled\",\"type\":\"event\"}]","ContractName":"SlowWallet","CompilerVersion":"v0.5.8+commit.23d335f2","OptimizationUsed":"1","Runs":"1","ConstructorArguments":"0000000000000000000000008762db106b2c2a0bccb3a80d1ed41273552616e8","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"bzzr://6811defaf98e92dd59622754e5637e22462d388026609bac1a4c78e23c7ae563"}]}