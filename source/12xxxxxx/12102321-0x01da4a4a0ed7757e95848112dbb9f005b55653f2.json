{"status":"1","message":"OK","result":[{"SourceCode":"// File: contracts/interface/IMarketRegulator.sol\r\n\r\npragma solidity 0.6.12;\r\n\r\ninterface IMarketRegulator {\r\n    function IsInWhiteList(address wantToken)\r\n        external\r\n        view\r\n        returns (bool inTheList);\r\n\r\n    function IsInBlackList(uint256 _shardPoolId)\r\n        external\r\n        view\r\n        returns (bool inTheList);\r\n}\r\n\r\n// File: contracts/interface/IBuyoutProposals.sol\r\n\r\npragma solidity 0.6.12;\r\n\r\ncontract DelegationStorage {\r\n    address public governance;\r\n    /**\r\n     * @notice Implementation address for this contract\r\n     */\r\n    address public implementation;\r\n}\r\n\r\ncontract IBuyoutProposalsStorge is DelegationStorage {\r\n    address public regulator;\r\n    address public market;\r\n\r\n    uint256 public proposolIdCount;\r\n\r\n    uint256 public voteLenth = 259200;\r\n\r\n    mapping(uint256 => uint256) public proposalIds;\r\n\r\n    mapping(uint256 => uint256[]) internal proposalsHistory;\r\n\r\n    mapping(uint256 => Proposal) public proposals;\r\n\r\n    mapping(uint256 => mapping(address => bool)) public voted;\r\n\r\n    uint256 public passNeeded = 75;\r\n\r\n    // n times higher than the market price to buyout\r\n    uint256 public buyoutTimes = 100;\r\n\r\n    uint256 internal constant max = 100;\r\n\r\n    uint256 public buyoutProportion = 15;\r\n\r\n    mapping(uint256 => uint256) allVotes;\r\n\r\n    struct Proposal {\r\n        uint256 votesReceived;\r\n        uint256 voteTotal;\r\n        bool passed;\r\n        address submitter;\r\n        uint256 voteDeadline;\r\n        uint256 shardAmount;\r\n        uint256 wantTokenAmount;\r\n        uint256 buyoutTimes;\r\n        uint256 price;\r\n        bool isSubmitterWithDraw;\r\n        uint256 shardPoolId;\r\n        bool isFailedConfirmed;\r\n        uint256 blockHeight;\r\n        uint256 createTime;\r\n    }\r\n}\r\n\r\nabstract contract IBuyoutProposals is IBuyoutProposalsStorge {\r\n    function createProposal(\r\n        uint256 _shardPoolId,\r\n        uint256 shardBalance,\r\n        uint256 wantTokenAmount,\r\n        uint256 currentPrice,\r\n        uint256 totalShardSupply,\r\n        address submitter\r\n    ) external virtual returns (uint256 proposalId, uint256 buyoutTimes);\r\n\r\n    function vote(\r\n        uint256 _shardPoolId,\r\n        bool isAgree,\r\n        address shard,\r\n        address voter\r\n    ) external virtual returns (uint256 proposalId, uint256 balance);\r\n\r\n    function voteResultConfirm(uint256 _shardPoolId)\r\n        external\r\n        virtual\r\n        returns (\r\n            uint256 proposalId,\r\n            bool result,\r\n            address submitter,\r\n            uint256 shardAmount,\r\n            uint256 wantTokenAmount\r\n        );\r\n\r\n    function exchangeForWantToken(uint256 _shardPoolId, uint256 shardAmount)\r\n        external\r\n        view\r\n        virtual\r\n        returns (uint256 wantTokenAmount);\r\n\r\n    function redeemForBuyoutFailed(uint256 _proposalId, address submitter)\r\n        external\r\n        virtual\r\n        returns (\r\n            uint256 _shardPoolId,\r\n            uint256 shardTokenAmount,\r\n            uint256 wantTokenAmount\r\n        );\r\n\r\n    function setBuyoutTimes(uint256 _buyoutTimes) external virtual;\r\n\r\n    function setVoteLenth(uint256 _voteLenth) external virtual;\r\n\r\n    function setPassNeeded(uint256 _passNeeded) external virtual;\r\n\r\n    function setBuyoutProportion(uint256 _buyoutProportion) external virtual;\r\n\r\n    function setMarket(address _market) external virtual;\r\n\r\n    function setRegulator(address _regulator) external virtual;\r\n\r\n    function getProposalsForExactPool(uint256 _shardPoolId)\r\n        external\r\n        view\r\n        virtual\r\n        returns (uint256[] memory _proposalsHistory);\r\n}\r\n\r\n// File: contracts/interface/IShardToken.sol\r\n\r\npragma solidity 0.6.12;\r\n\r\ninterface IShardToken {\r\n    event Approval(\r\n        address indexed owner,\r\n        address indexed spender,\r\n        uint256 value\r\n    );\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    function name() external pure returns (string memory);\r\n\r\n    function symbol() external pure returns (string memory);\r\n\r\n    function decimals() external pure returns (uint8);\r\n\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    function balanceOf(address owner) external view returns (uint256);\r\n\r\n    function allowance(address owner, address spender)\r\n        external\r\n        view\r\n        returns (uint256);\r\n\r\n    function approve(address spender, uint256 value) external returns (bool);\r\n\r\n    function transfer(address to, uint256 value) external returns (bool);\r\n\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 value\r\n    ) external returns (bool);\r\n\r\n    function burn(uint256 value) external;\r\n\r\n    function mint(address to, uint256 value) external;\r\n\r\n    function initialize(\r\n        string memory _name,\r\n        string memory _symbol,\r\n        address market\r\n    ) external;\r\n\r\n    function getPriorVotes(address account, uint256 blockNumber)\r\n        external\r\n        view\r\n        returns (uint256);\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/math/SafeMath.sol\r\n\r\n// SPDX-License-Identifier: MIT\r\n\r\npragma solidity >=0.6.0 <0.8.0;\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        uint256 c = a + b;\r\n        if (c < a) return (false, 0);\r\n        return (true, c);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        if (b > a) return (false, 0);\r\n        return (true, a - b);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) return (true, 0);\r\n        uint256 c = a * b;\r\n        if (c / a != b) return (false, 0);\r\n        return (true, c);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        if (b == 0) return (false, 0);\r\n        return (true, a / b);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        if (b == 0) return (false, 0);\r\n        return (true, a % b);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b <= a, \"SafeMath: subtraction overflow\");\r\n        return a - b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) return 0;\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers, reverting on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b > 0, \"SafeMath: division by zero\");\r\n        return a / b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * reverting when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b > 0, \"SafeMath: modulo by zero\");\r\n        return a % b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\r\n     * message unnecessarily. For custom revert reasons use {trySub}.\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        return a - b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\r\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        return a / b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * reverting with custom message when dividing by zero.\r\n     *\r\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\r\n     * message unnecessarily. For custom revert reasons use {tryMod}.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n// File: contracts/BuyoutProposals.sol\r\n\r\npragma solidity 0.6.12;\r\n\r\n\r\n\r\n\r\n\r\ncontract BuyoutProposals is IBuyoutProposals {\r\n    using SafeMath for uint256;\r\n\r\n    constructor() public {}\r\n\r\n    function initialize(address _governance, address _regulator) external {\r\n        require(governance == msg.sender, \"UNAUTHORIZED\");\r\n        require(regulator == address(0), \"ALREADY INITIALIZED\");\r\n        governance = _governance;\r\n        regulator = _regulator;\r\n    }\r\n\r\n    function createProposal(\r\n        uint256 _shardPoolId,\r\n        uint256 shardBalance,\r\n        uint256 wantTokenAmount,\r\n        uint256 currentPrice,\r\n        uint256 totalShardSupply,\r\n        address submitter\r\n    ) external override returns (uint256, uint256) {\r\n        require(msg.sender == market, \"UNAUTHORIZED\");\r\n        require(\r\n            shardBalance >= totalShardSupply.mul(buyoutProportion).div(max),\r\n            \"INSUFFIENT BALANCE\"\r\n        );\r\n        uint256 otherShards = totalShardSupply.sub(shardBalance);\r\n        uint256 needAmount =\r\n            otherShards.mul(currentPrice).mul(buyoutTimes).div(max).div(1e18);\r\n        require(wantTokenAmount >= needAmount, \"INSUFFICIENT WANTTOKENAMOUNT\");\r\n        require(\r\n            !IMarketRegulator(regulator).IsInBlackList(_shardPoolId),\r\n            \"ON THE BLACKLIST\"\r\n        );\r\n        uint256 proposalId = proposolIdCount.add(1);\r\n        proposalIds[_shardPoolId] = proposalId;\r\n        uint256 timestamp = block.timestamp.add(voteLenth);\r\n        proposals[proposalId] = Proposal({\r\n            votesReceived: 0,\r\n            voteTotal: 0,\r\n            passed: false,\r\n            submitter: submitter,\r\n            voteDeadline: timestamp,\r\n            shardAmount: shardBalance,\r\n            wantTokenAmount: wantTokenAmount,\r\n            buyoutTimes: buyoutTimes,\r\n            price: currentPrice,\r\n            isSubmitterWithDraw: false,\r\n            shardPoolId: _shardPoolId,\r\n            isFailedConfirmed: false,\r\n            blockHeight: block.number,\r\n            createTime: block.timestamp\r\n        });\r\n        allVotes[proposalId] = otherShards;\r\n        proposalsHistory[_shardPoolId].push(proposalId);\r\n        voted[proposalId][submitter] = true;\r\n        proposolIdCount = proposalId;\r\n        return (proposalId, buyoutTimes);\r\n    }\r\n\r\n    function vote(\r\n        uint256 _shardPoolId,\r\n        bool isAgree,\r\n        address shard,\r\n        address voter\r\n    ) external override returns (uint256 proposalId, uint256 balance) {\r\n        require(msg.sender == market, \"UNAUTHORIZED\");\r\n        proposalId = proposalIds[_shardPoolId];\r\n        require(\r\n            block.timestamp <= proposals[proposalId].voteDeadline,\r\n            \"EXPIRED\"\r\n        );\r\n        uint256 blockHeight = proposals[proposalId].blockHeight;\r\n        balance = IShardToken(shard).getPriorVotes(voter, blockHeight);\r\n        require(balance > 0, \"INSUFFICIENT VOTERIGHT\");\r\n        require(!voted[proposalId][voter], \"AlREADY VOTED\");\r\n        voted[proposalId][voter] = true;\r\n        if (isAgree) {\r\n            proposals[proposalId].votesReceived = proposals[proposalId]\r\n                .votesReceived\r\n                .add(balance);\r\n            proposals[proposalId].voteTotal = proposals[proposalId]\r\n                .voteTotal\r\n                .add(balance);\r\n        } else {\r\n            proposals[proposalId].voteTotal = proposals[proposalId]\r\n                .voteTotal\r\n                .add(balance);\r\n        }\r\n    }\r\n\r\n    function voteResultConfirm(uint256 _shardPoolId)\r\n        external\r\n        override\r\n        returns (\r\n            uint256 proposalId,\r\n            bool result,\r\n            address submitter,\r\n            uint256 shardAmount,\r\n            uint256 wantTokenAmount\r\n        )\r\n    {\r\n        require(msg.sender == market, \"UNAUTHORIZED\");\r\n        proposalId = proposalIds[_shardPoolId];\r\n        require(\r\n            block.timestamp > proposals[proposalId].voteDeadline,\r\n            \"NOT READY\"\r\n        );\r\n        uint256 votesRejected =\r\n            proposals[proposalId].voteTotal.sub(\r\n                proposals[proposalId].votesReceived\r\n            );\r\n        uint256 rejectNeed = max.sub(passNeeded);\r\n        if (\r\n            votesRejected <= allVotes[proposalId].mul(rejectNeed).div(max) &&\r\n            !IMarketRegulator(regulator).IsInBlackList(_shardPoolId)\r\n        ) {\r\n            proposals[proposalId].passed = true;\r\n            result = true;\r\n            submitter = proposals[proposalId].submitter;\r\n            shardAmount = proposals[proposalId].shardAmount;\r\n            wantTokenAmount = proposals[proposalId].wantTokenAmount;\r\n        } else {\r\n            proposals[proposalId].passed = false;\r\n            proposals[proposalId].isFailedConfirmed = true;\r\n            result = false;\r\n        }\r\n    }\r\n\r\n    function exchangeForWantToken(uint256 _shardPoolId, uint256 shardAmount)\r\n        external\r\n        view\r\n        override\r\n        returns (uint256 wantTokenAmount)\r\n    {\r\n        uint256 proposalId = proposalIds[_shardPoolId];\r\n        Proposal memory p = proposals[proposalId];\r\n        uint256 otherShards = allVotes[proposalId];\r\n        wantTokenAmount = shardAmount.mul(p.wantTokenAmount).div(otherShards);\r\n    }\r\n\r\n    function redeemForBuyoutFailed(uint256 _proposalId, address submitter)\r\n        external\r\n        override\r\n        returns (\r\n            uint256 shardPoolId,\r\n            uint256 shardTokenAmount,\r\n            uint256 wantTokenAmount\r\n        )\r\n    {\r\n        require(msg.sender == market, \"UNAUTHORIZED\");\r\n        Proposal memory p = proposals[_proposalId];\r\n        require(submitter == p.submitter, \"UNAUTHORIZED\");\r\n        require(\r\n            p.isFailedConfirmed && !p.isSubmitterWithDraw && !p.passed,\r\n            \"WRONG STATE\"\r\n        );\r\n        shardPoolId = p.shardPoolId;\r\n        shardTokenAmount = p.shardAmount;\r\n        wantTokenAmount = p.wantTokenAmount;\r\n        proposals[_proposalId].isSubmitterWithDraw = true;\r\n    }\r\n\r\n    function setVoteLenth(uint256 _voteLenth) external override {\r\n        require(msg.sender == governance, \"UNAUTHORIZED\");\r\n        voteLenth = _voteLenth;\r\n    }\r\n\r\n    function setPassNeeded(uint256 _passNeeded) external override {\r\n        require(msg.sender == governance, \"UNAUTHORIZED\");\r\n        require(_passNeeded < max, \"INVALID\");\r\n        passNeeded = _passNeeded;\r\n    }\r\n\r\n    function setBuyoutProportion(uint256 _buyoutProportion) external override {\r\n        require(msg.sender == governance, \"UNAUTHORIZED\");\r\n        require(_buyoutProportion < max, \"INVALID\");\r\n        buyoutProportion = _buyoutProportion;\r\n    }\r\n\r\n    function setBuyoutTimes(uint256 _buyoutTimes) external override {\r\n        require(msg.sender == governance, \"UNAUTHORIZED\");\r\n        buyoutTimes = _buyoutTimes;\r\n    }\r\n\r\n    function setMarket(address _market) external override {\r\n        require(msg.sender == governance, \"UNAUTHORIZED\");\r\n        market = _market;\r\n    }\r\n\r\n    function setRegulator(address _regulator) external override {\r\n        require(msg.sender == governance, \"UNAUTHORIZED\");\r\n        regulator = _regulator;\r\n    }\r\n\r\n    function getProposalsForExactPool(uint256 _shardPoolId)\r\n        external\r\n        view\r\n        override\r\n        returns (uint256[] memory _proposalsHistory)\r\n    {\r\n        _proposalsHistory = proposalsHistory[_shardPoolId];\r\n    }\r\n}\r\n\r\n// File: contracts/BuyoutProposalsdelegate.sol\r\n\r\npragma solidity 0.6.12;\r\n\r\n\r\ncontract BuyoutProposalsDelegate is BuyoutProposals {\r\n    /**\r\n     * @notice Construct an empty delegate\r\n     */\r\n    constructor() public {}\r\n}","ABI":"[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"buyoutProportion\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyoutTimes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_shardPoolId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"shardBalance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"wantTokenAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"currentPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalShardSupply\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"submitter\",\"type\":\"address\"}],\"name\":\"createProposal\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_shardPoolId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"shardAmount\",\"type\":\"uint256\"}],\"name\":\"exchangeForWantToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"wantTokenAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_shardPoolId\",\"type\":\"uint256\"}],\"name\":\"getProposalsForExactPool\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_proposalsHistory\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"governance\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"implementation\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_governance\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_regulator\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"market\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"passNeeded\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"proposalIds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"proposals\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"votesReceived\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"voteTotal\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"passed\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"submitter\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"voteDeadline\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"shardAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"wantTokenAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"buyoutTimes\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isSubmitterWithDraw\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"shardPoolId\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isFailedConfirmed\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"blockHeight\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"createTime\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"proposolIdCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_proposalId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"submitter\",\"type\":\"address\"}],\"name\":\"redeemForBuyoutFailed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"shardPoolId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"shardTokenAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"wantTokenAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"regulator\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_buyoutProportion\",\"type\":\"uint256\"}],\"name\":\"setBuyoutProportion\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_buyoutTimes\",\"type\":\"uint256\"}],\"name\":\"setBuyoutTimes\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_market\",\"type\":\"address\"}],\"name\":\"setMarket\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_passNeeded\",\"type\":\"uint256\"}],\"name\":\"setPassNeeded\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_regulator\",\"type\":\"address\"}],\"name\":\"setRegulator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_voteLenth\",\"type\":\"uint256\"}],\"name\":\"setVoteLenth\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_shardPoolId\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isAgree\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"shard\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"voter\",\"type\":\"address\"}],\"name\":\"vote\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"proposalId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"voteLenth\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_shardPoolId\",\"type\":\"uint256\"}],\"name\":\"voteResultConfirm\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"proposalId\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"result\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"submitter\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"shardAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"wantTokenAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"voted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"BuyoutProposals","CompilerVersion":"v0.6.12+commit.27d51765","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"ipfs://d7b743c2730a56dc7496aef987770f7c7dd7180b2a5d116c6f8f14bc1e2f8894"}]}