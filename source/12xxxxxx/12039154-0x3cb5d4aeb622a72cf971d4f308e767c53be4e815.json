{"status":"1","message":"OK","result":[{"SourceCode":"// SPDX-License-Identifier: MIT\r\n\r\npragma solidity 0.6.12;\r\n\r\n\r\n\r\n// Part: ABDKMath64x64\r\n\r\n/**\r\n * Smart contract library of mathematical functions operating with signed\r\n * 64.64-bit fixed point numbers.  Signed 64.64-bit fixed point number is\r\n * basically a simple fraction whose numerator is signed 128-bit integer and\r\n * denominator is 2^64.  As long as denominator is always the same, there is no\r\n * need to store it, thus in Solidity signed 64.64-bit fixed point numbers are\r\n * represented by int128 type holding only the numerator.\r\n */\r\nlibrary ABDKMath64x64 {\r\n  /*\r\n   * Minimum value signed 64.64-bit fixed point number may have.\r\n   */\r\n  int128 private constant MIN_64x64 = -0x80000000000000000000000000000000;\r\n\r\n  /*\r\n   * Maximum value signed 64.64-bit fixed point number may have.\r\n   */\r\n  int128 private constant MAX_64x64 = 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\r\n\r\n  /**\r\n   * Convert signed 256-bit integer number into signed 64.64-bit fixed point\r\n   * number.  Revert on overflow.\r\n   *\r\n   * @param x signed 256-bit integer number\r\n   * @return signed 64.64-bit fixed point number\r\n   */\r\n  function fromInt (int256 x) internal pure returns (int128) {\r\n    require (x >= -0x8000000000000000 && x <= 0x7FFFFFFFFFFFFFFF);\r\n    return int128 (x << 64);\r\n  }\r\n\r\n  /**\r\n   * Convert signed 64.64 fixed point number into signed 64-bit integer number\r\n   * rounding down.\r\n   *\r\n   * @param x signed 64.64-bit fixed point number\r\n   * @return signed 64-bit integer number\r\n   */\r\n  function toInt (int128 x) internal pure returns (int64) {\r\n    return int64 (x >> 64);\r\n  }\r\n\r\n  /**\r\n   * Convert unsigned 256-bit integer number into signed 64.64-bit fixed point\r\n   * number.  Revert on overflow.\r\n   *\r\n   * @param x unsigned 256-bit integer number\r\n   * @return signed 64.64-bit fixed point number\r\n   */\r\n  function fromUInt (uint256 x) internal pure returns (int128) {\r\n    require (x <= 0x7FFFFFFFFFFFFFFF);\r\n    return int128 (x << 64);\r\n  }\r\n\r\n  /**\r\n   * Convert signed 64.64 fixed point number into unsigned 64-bit integer\r\n   * number rounding down.  Revert on underflow.\r\n   *\r\n   * @param x signed 64.64-bit fixed point number\r\n   * @return unsigned 64-bit integer number\r\n   */\r\n  function toUInt (int128 x) internal pure returns (uint64) {\r\n    require (x >= 0);\r\n    return uint64 (x >> 64);\r\n  }\r\n\r\n  /**\r\n   * Convert signed 128.128 fixed point number into signed 64.64-bit fixed point\r\n   * number rounding down.  Revert on overflow.\r\n   *\r\n   * @param x signed 128.128-bin fixed point number\r\n   * @return signed 64.64-bit fixed point number\r\n   */\r\n  function from128x128 (int256 x) internal pure returns (int128) {\r\n    int256 result = x >> 64;\r\n    require (result >= MIN_64x64 && result <= MAX_64x64);\r\n    return int128 (result);\r\n  }\r\n\r\n  /**\r\n   * Convert signed 64.64 fixed point number into signed 128.128 fixed point\r\n   * number.\r\n   *\r\n   * @param x signed 64.64-bit fixed point number\r\n   * @return signed 128.128 fixed point number\r\n   */\r\n  function to128x128 (int128 x) internal pure returns (int256) {\r\n    return int256 (x) << 64;\r\n  }\r\n\r\n  /**\r\n   * Calculate x + y.  Revert on overflow.\r\n   *\r\n   * @param x signed 64.64-bit fixed point number\r\n   * @param y signed 64.64-bit fixed point number\r\n   * @return signed 64.64-bit fixed point number\r\n   */\r\n  function add (int128 x, int128 y) internal pure returns (int128) {\r\n    int256 result = int256(x) + y;\r\n    require (result >= MIN_64x64 && result <= MAX_64x64);\r\n    return int128 (result);\r\n  }\r\n\r\n  /**\r\n   * Calculate x - y.  Revert on overflow.\r\n   *\r\n   * @param x signed 64.64-bit fixed point number\r\n   * @param y signed 64.64-bit fixed point number\r\n   * @return signed 64.64-bit fixed point number\r\n   */\r\n  function sub (int128 x, int128 y) internal pure returns (int128) {\r\n    int256 result = int256(x) - y;\r\n    require (result >= MIN_64x64 && result <= MAX_64x64);\r\n    return int128 (result);\r\n  }\r\n\r\n  /**\r\n   * Calculate x * y rounding down.  Revert on overflow.\r\n   *\r\n   * @param x signed 64.64-bit fixed point number\r\n   * @param y signed 64.64-bit fixed point number\r\n   * @return signed 64.64-bit fixed point number\r\n   */\r\n  function mul (int128 x, int128 y) internal pure returns (int128) {\r\n    int256 result = int256(x) * y >> 64;\r\n    require (result >= MIN_64x64 && result <= MAX_64x64);\r\n    return int128 (result);\r\n  }\r\n\r\n  /**\r\n   * Calculate x * y rounding towards zero, where x is signed 64.64 fixed point\r\n   * number and y is signed 256-bit integer number.  Revert on overflow.\r\n   *\r\n   * @param x signed 64.64 fixed point number\r\n   * @param y signed 256-bit integer number\r\n   * @return signed 256-bit integer number\r\n   */\r\n  function muli (int128 x, int256 y) internal pure returns (int256) {\r\n    if (x == MIN_64x64) {\r\n      require (y >= -0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF &&\r\n        y <= 0x1000000000000000000000000000000000000000000000000);\r\n      return -y << 63;\r\n    } else {\r\n      bool negativeResult = false;\r\n      if (x < 0) {\r\n        x = -x;\r\n        negativeResult = true;\r\n      }\r\n      if (y < 0) {\r\n        y = -y; // We rely on overflow behavior here\r\n        negativeResult = !negativeResult;\r\n      }\r\n      uint256 absoluteResult = mulu (x, uint256 (y));\r\n      if (negativeResult) {\r\n        require (absoluteResult <=\r\n          0x8000000000000000000000000000000000000000000000000000000000000000);\r\n        return -int256 (absoluteResult); // We rely on overflow behavior here\r\n      } else {\r\n        require (absoluteResult <=\r\n          0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF);\r\n        return int256 (absoluteResult);\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Calculate x * y rounding down, where x is signed 64.64 fixed point number\r\n   * and y is unsigned 256-bit integer number.  Revert on overflow.\r\n   *\r\n   * @param x signed 64.64 fixed point number\r\n   * @param y unsigned 256-bit integer number\r\n   * @return unsigned 256-bit integer number\r\n   */\r\n  function mulu (int128 x, uint256 y) internal pure returns (uint256) {\r\n    if (y == 0) return 0;\r\n\r\n    require (x >= 0);\r\n\r\n    uint256 lo = (uint256 (x) * (y & 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF)) >> 64;\r\n    uint256 hi = uint256 (x) * (y >> 128);\r\n\r\n    require (hi <= 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF);\r\n    hi <<= 64;\r\n\r\n    require (hi <=\r\n      0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF - lo);\r\n    return hi + lo;\r\n  }\r\n\r\n  /**\r\n   * Calculate x / y rounding towards zero.  Revert on overflow or when y is\r\n   * zero.\r\n   *\r\n   * @param x signed 64.64-bit fixed point number\r\n   * @param y signed 64.64-bit fixed point number\r\n   * @return signed 64.64-bit fixed point number\r\n   */\r\n  function div (int128 x, int128 y) internal pure returns (int128) {\r\n    require (y != 0);\r\n    int256 result = (int256 (x) << 64) / y;\r\n    require (result >= MIN_64x64 && result <= MAX_64x64);\r\n    return int128 (result);\r\n  }\r\n\r\n  /**\r\n   * Calculate x / y rounding towards zero, where x and y are signed 256-bit\r\n   * integer numbers.  Revert on overflow or when y is zero.\r\n   *\r\n   * @param x signed 256-bit integer number\r\n   * @param y signed 256-bit integer number\r\n   * @return signed 64.64-bit fixed point number\r\n   */\r\n  function divi (int256 x, int256 y) internal pure returns (int128) {\r\n    require (y != 0);\r\n\r\n    bool negativeResult = false;\r\n    if (x < 0) {\r\n      x = -x; // We rely on overflow behavior here\r\n      negativeResult = true;\r\n    }\r\n    if (y < 0) {\r\n      y = -y; // We rely on overflow behavior here\r\n      negativeResult = !negativeResult;\r\n    }\r\n    uint128 absoluteResult = divuu (uint256 (x), uint256 (y));\r\n    if (negativeResult) {\r\n      require (absoluteResult <= 0x80000000000000000000000000000000);\r\n      return -int128 (absoluteResult); // We rely on overflow behavior here\r\n    } else {\r\n      require (absoluteResult <= 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF);\r\n      return int128 (absoluteResult); // We rely on overflow behavior here\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Calculate x / y rounding towards zero, where x and y are unsigned 256-bit\r\n   * integer numbers.  Revert on overflow or when y is zero.\r\n   *\r\n   * @param x unsigned 256-bit integer number\r\n   * @param y unsigned 256-bit integer number\r\n   * @return signed 64.64-bit fixed point number\r\n   */\r\n  function divu (uint256 x, uint256 y) internal pure returns (int128) {\r\n    require (y != 0);\r\n    uint128 result = divuu (x, y);\r\n    require (result <= uint128 (MAX_64x64));\r\n    return int128 (result);\r\n  }\r\n\r\n  /**\r\n   * Calculate -x.  Revert on overflow.\r\n   *\r\n   * @param x signed 64.64-bit fixed point number\r\n   * @return signed 64.64-bit fixed point number\r\n   */\r\n  function neg (int128 x) internal pure returns (int128) {\r\n    require (x != MIN_64x64);\r\n    return -x;\r\n  }\r\n\r\n  /**\r\n   * Calculate |x|.  Revert on overflow.\r\n   *\r\n   * @param x signed 64.64-bit fixed point number\r\n   * @return signed 64.64-bit fixed point number\r\n   */\r\n  function abs (int128 x) internal pure returns (int128) {\r\n    require (x != MIN_64x64);\r\n    return x < 0 ? -x : x;\r\n  }\r\n\r\n  /**\r\n   * Calculate 1 / x rounding towards zero.  Revert on overflow or when x is\r\n   * zero.\r\n   *\r\n   * @param x signed 64.64-bit fixed point number\r\n   * @return signed 64.64-bit fixed point number\r\n   */\r\n  function inv (int128 x) internal pure returns (int128) {\r\n    require (x != 0);\r\n    int256 result = int256 (0x100000000000000000000000000000000) / x;\r\n    require (result >= MIN_64x64 && result <= MAX_64x64);\r\n    return int128 (result);\r\n  }\r\n\r\n  /**\r\n   * Calculate arithmetics average of x and y, i.e. (x + y) / 2 rounding down.\r\n   *\r\n   * @param x signed 64.64-bit fixed point number\r\n   * @param y signed 64.64-bit fixed point number\r\n   * @return signed 64.64-bit fixed point number\r\n   */\r\n  function avg (int128 x, int128 y) internal pure returns (int128) {\r\n    return int128 ((int256 (x) + int256 (y)) >> 1);\r\n  }\r\n\r\n  /**\r\n   * Calculate geometric average of x and y, i.e. sqrt (x * y) rounding down.\r\n   * Revert on overflow or in case x * y is negative.\r\n   *\r\n   * @param x signed 64.64-bit fixed point number\r\n   * @param y signed 64.64-bit fixed point number\r\n   * @return signed 64.64-bit fixed point number\r\n   */\r\n  function gavg (int128 x, int128 y) internal pure returns (int128) {\r\n    int256 m = int256 (x) * int256 (y);\r\n    require (m >= 0);\r\n    require (m <\r\n        0x4000000000000000000000000000000000000000000000000000000000000000);\r\n    return int128 (sqrtu (uint256 (m)));\r\n  }\r\n\r\n  /**\r\n   * Calculate x^y assuming 0^0 is 1, where x is signed 64.64 fixed point number\r\n   * and y is unsigned 256-bit integer number.  Revert on overflow.\r\n   *\r\n   * @param x signed 64.64-bit fixed point number\r\n   * @param y uint256 value\r\n   * @return signed 64.64-bit fixed point number\r\n   */\r\n  function pow (int128 x, uint256 y) internal pure returns (int128) {\r\n    uint256 absoluteResult;\r\n    bool negativeResult = false;\r\n    if (x >= 0) {\r\n      absoluteResult = powu (uint256 (x) << 63, y);\r\n    } else {\r\n      // We rely on overflow behavior here\r\n      absoluteResult = powu (uint256 (uint128 (-x)) << 63, y);\r\n      negativeResult = y & 1 > 0;\r\n    }\r\n\r\n    absoluteResult >>= 63;\r\n\r\n    if (negativeResult) {\r\n      require (absoluteResult <= 0x80000000000000000000000000000000);\r\n      return -int128 (absoluteResult); // We rely on overflow behavior here\r\n    } else {\r\n      require (absoluteResult <= 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF);\r\n      return int128 (absoluteResult); // We rely on overflow behavior here\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Calculate sqrt (x) rounding down.  Revert if x < 0.\r\n   *\r\n   * @param x signed 64.64-bit fixed point number\r\n   * @return signed 64.64-bit fixed point number\r\n   */\r\n  function sqrt (int128 x) internal pure returns (int128) {\r\n    require (x >= 0);\r\n    return int128 (sqrtu (uint256 (x) << 64));\r\n  }\r\n\r\n  /**\r\n   * Calculate binary logarithm of x.  Revert if x <= 0.\r\n   *\r\n   * @param x signed 64.64-bit fixed point number\r\n   * @return signed 64.64-bit fixed point number\r\n   */\r\n  function log_2 (int128 x) internal pure returns (int128) {\r\n    require (x > 0);\r\n\r\n    int256 msb = 0;\r\n    int256 xc = x;\r\n    if (xc >= 0x10000000000000000) { xc >>= 64; msb += 64; }\r\n    if (xc >= 0x100000000) { xc >>= 32; msb += 32; }\r\n    if (xc >= 0x10000) { xc >>= 16; msb += 16; }\r\n    if (xc >= 0x100) { xc >>= 8; msb += 8; }\r\n    if (xc >= 0x10) { xc >>= 4; msb += 4; }\r\n    if (xc >= 0x4) { xc >>= 2; msb += 2; }\r\n    if (xc >= 0x2) msb += 1;  // No need to shift xc anymore\r\n\r\n    int256 result = msb - 64 << 64;\r\n    uint256 ux = uint256 (x) << uint256 (127 - msb);\r\n    for (int256 bit = 0x8000000000000000; bit > 0; bit >>= 1) {\r\n      ux *= ux;\r\n      uint256 b = ux >> 255;\r\n      ux >>= 127 + b;\r\n      result += bit * int256 (b);\r\n    }\r\n\r\n    return int128 (result);\r\n  }\r\n\r\n  /**\r\n   * Calculate natural logarithm of x.  Revert if x <= 0.\r\n   *\r\n   * @param x signed 64.64-bit fixed point number\r\n   * @return signed 64.64-bit fixed point number\r\n   */\r\n  function ln (int128 x) internal pure returns (int128) {\r\n    require (x > 0);\r\n\r\n    return int128 (\r\n        uint256 (log_2 (x)) * 0xB17217F7D1CF79ABC9E3B39803F2F6AF >> 128);\r\n  }\r\n\r\n  /**\r\n   * Calculate binary exponent of x.  Revert on overflow.\r\n   *\r\n   * @param x signed 64.64-bit fixed point number\r\n   * @return signed 64.64-bit fixed point number\r\n   */\r\n  function exp_2 (int128 x) internal pure returns (int128) {\r\n    require (x < 0x400000000000000000); // Overflow\r\n\r\n    if (x < -0x400000000000000000) return 0; // Underflow\r\n\r\n    uint256 result = 0x80000000000000000000000000000000;\r\n\r\n    if (x & 0x8000000000000000 > 0)\r\n      result = result * 0x16A09E667F3BCC908B2FB1366EA957D3E >> 128;\r\n    if (x & 0x4000000000000000 > 0)\r\n      result = result * 0x1306FE0A31B7152DE8D5A46305C85EDEC >> 128;\r\n    if (x & 0x2000000000000000 > 0)\r\n      result = result * 0x1172B83C7D517ADCDF7C8C50EB14A791F >> 128;\r\n    if (x & 0x1000000000000000 > 0)\r\n      result = result * 0x10B5586CF9890F6298B92B71842A98363 >> 128;\r\n    if (x & 0x800000000000000 > 0)\r\n      result = result * 0x1059B0D31585743AE7C548EB68CA417FD >> 128;\r\n    if (x & 0x400000000000000 > 0)\r\n      result = result * 0x102C9A3E778060EE6F7CACA4F7A29BDE8 >> 128;\r\n    if (x & 0x200000000000000 > 0)\r\n      result = result * 0x10163DA9FB33356D84A66AE336DCDFA3F >> 128;\r\n    if (x & 0x100000000000000 > 0)\r\n      result = result * 0x100B1AFA5ABCBED6129AB13EC11DC9543 >> 128;\r\n    if (x & 0x80000000000000 > 0)\r\n      result = result * 0x10058C86DA1C09EA1FF19D294CF2F679B >> 128;\r\n    if (x & 0x40000000000000 > 0)\r\n      result = result * 0x1002C605E2E8CEC506D21BFC89A23A00F >> 128;\r\n    if (x & 0x20000000000000 > 0)\r\n      result = result * 0x100162F3904051FA128BCA9C55C31E5DF >> 128;\r\n    if (x & 0x10000000000000 > 0)\r\n      result = result * 0x1000B175EFFDC76BA38E31671CA939725 >> 128;\r\n    if (x & 0x8000000000000 > 0)\r\n      result = result * 0x100058BA01FB9F96D6CACD4B180917C3D >> 128;\r\n    if (x & 0x4000000000000 > 0)\r\n      result = result * 0x10002C5CC37DA9491D0985C348C68E7B3 >> 128;\r\n    if (x & 0x2000000000000 > 0)\r\n      result = result * 0x1000162E525EE054754457D5995292026 >> 128;\r\n    if (x & 0x1000000000000 > 0)\r\n      result = result * 0x10000B17255775C040618BF4A4ADE83FC >> 128;\r\n    if (x & 0x800000000000 > 0)\r\n      result = result * 0x1000058B91B5BC9AE2EED81E9B7D4CFAB >> 128;\r\n    if (x & 0x400000000000 > 0)\r\n      result = result * 0x100002C5C89D5EC6CA4D7C8ACC017B7C9 >> 128;\r\n    if (x & 0x200000000000 > 0)\r\n      result = result * 0x10000162E43F4F831060E02D839A9D16D >> 128;\r\n    if (x & 0x100000000000 > 0)\r\n      result = result * 0x100000B1721BCFC99D9F890EA06911763 >> 128;\r\n    if (x & 0x80000000000 > 0)\r\n      result = result * 0x10000058B90CF1E6D97F9CA14DBCC1628 >> 128;\r\n    if (x & 0x40000000000 > 0)\r\n      result = result * 0x1000002C5C863B73F016468F6BAC5CA2B >> 128;\r\n    if (x & 0x20000000000 > 0)\r\n      result = result * 0x100000162E430E5A18F6119E3C02282A5 >> 128;\r\n    if (x & 0x10000000000 > 0)\r\n      result = result * 0x1000000B1721835514B86E6D96EFD1BFE >> 128;\r\n    if (x & 0x8000000000 > 0)\r\n      result = result * 0x100000058B90C0B48C6BE5DF846C5B2EF >> 128;\r\n    if (x & 0x4000000000 > 0)\r\n      result = result * 0x10000002C5C8601CC6B9E94213C72737A >> 128;\r\n    if (x & 0x2000000000 > 0)\r\n      result = result * 0x1000000162E42FFF037DF38AA2B219F06 >> 128;\r\n    if (x & 0x1000000000 > 0)\r\n      result = result * 0x10000000B17217FBA9C739AA5819F44F9 >> 128;\r\n    if (x & 0x800000000 > 0)\r\n      result = result * 0x1000000058B90BFCDEE5ACD3C1CEDC823 >> 128;\r\n    if (x & 0x400000000 > 0)\r\n      result = result * 0x100000002C5C85FE31F35A6A30DA1BE50 >> 128;\r\n    if (x & 0x200000000 > 0)\r\n      result = result * 0x10000000162E42FF0999CE3541B9FFFCF >> 128;\r\n    if (x & 0x100000000 > 0)\r\n      result = result * 0x100000000B17217F80F4EF5AADDA45554 >> 128;\r\n    if (x & 0x80000000 > 0)\r\n      result = result * 0x10000000058B90BFBF8479BD5A81B51AD >> 128;\r\n    if (x & 0x40000000 > 0)\r\n      result = result * 0x1000000002C5C85FDF84BD62AE30A74CC >> 128;\r\n    if (x & 0x20000000 > 0)\r\n      result = result * 0x100000000162E42FEFB2FED257559BDAA >> 128;\r\n    if (x & 0x10000000 > 0)\r\n      result = result * 0x1000000000B17217F7D5A7716BBA4A9AE >> 128;\r\n    if (x & 0x8000000 > 0)\r\n      result = result * 0x100000000058B90BFBE9DDBAC5E109CCE >> 128;\r\n    if (x & 0x4000000 > 0)\r\n      result = result * 0x10000000002C5C85FDF4B15DE6F17EB0D >> 128;\r\n    if (x & 0x2000000 > 0)\r\n      result = result * 0x1000000000162E42FEFA494F1478FDE05 >> 128;\r\n    if (x & 0x1000000 > 0)\r\n      result = result * 0x10000000000B17217F7D20CF927C8E94C >> 128;\r\n    if (x & 0x800000 > 0)\r\n      result = result * 0x1000000000058B90BFBE8F71CB4E4B33D >> 128;\r\n    if (x & 0x400000 > 0)\r\n      result = result * 0x100000000002C5C85FDF477B662B26945 >> 128;\r\n    if (x & 0x200000 > 0)\r\n      result = result * 0x10000000000162E42FEFA3AE53369388C >> 128;\r\n    if (x & 0x100000 > 0)\r\n      result = result * 0x100000000000B17217F7D1D351A389D40 >> 128;\r\n    if (x & 0x80000 > 0)\r\n      result = result * 0x10000000000058B90BFBE8E8B2D3D4EDE >> 128;\r\n    if (x & 0x40000 > 0)\r\n      result = result * 0x1000000000002C5C85FDF4741BEA6E77E >> 128;\r\n    if (x & 0x20000 > 0)\r\n      result = result * 0x100000000000162E42FEFA39FE95583C2 >> 128;\r\n    if (x & 0x10000 > 0)\r\n      result = result * 0x1000000000000B17217F7D1CFB72B45E1 >> 128;\r\n    if (x & 0x8000 > 0)\r\n      result = result * 0x100000000000058B90BFBE8E7CC35C3F0 >> 128;\r\n    if (x & 0x4000 > 0)\r\n      result = result * 0x10000000000002C5C85FDF473E242EA38 >> 128;\r\n    if (x & 0x2000 > 0)\r\n      result = result * 0x1000000000000162E42FEFA39F02B772C >> 128;\r\n    if (x & 0x1000 > 0)\r\n      result = result * 0x10000000000000B17217F7D1CF7D83C1A >> 128;\r\n    if (x & 0x800 > 0)\r\n      result = result * 0x1000000000000058B90BFBE8E7BDCBE2E >> 128;\r\n    if (x & 0x400 > 0)\r\n      result = result * 0x100000000000002C5C85FDF473DEA871F >> 128;\r\n    if (x & 0x200 > 0)\r\n      result = result * 0x10000000000000162E42FEFA39EF44D91 >> 128;\r\n    if (x & 0x100 > 0)\r\n      result = result * 0x100000000000000B17217F7D1CF79E949 >> 128;\r\n    if (x & 0x80 > 0)\r\n      result = result * 0x10000000000000058B90BFBE8E7BCE544 >> 128;\r\n    if (x & 0x40 > 0)\r\n      result = result * 0x1000000000000002C5C85FDF473DE6ECA >> 128;\r\n    if (x & 0x20 > 0)\r\n      result = result * 0x100000000000000162E42FEFA39EF366F >> 128;\r\n    if (x & 0x10 > 0)\r\n      result = result * 0x1000000000000000B17217F7D1CF79AFA >> 128;\r\n    if (x & 0x8 > 0)\r\n      result = result * 0x100000000000000058B90BFBE8E7BCD6D >> 128;\r\n    if (x & 0x4 > 0)\r\n      result = result * 0x10000000000000002C5C85FDF473DE6B2 >> 128;\r\n    if (x & 0x2 > 0)\r\n      result = result * 0x1000000000000000162E42FEFA39EF358 >> 128;\r\n    if (x & 0x1 > 0)\r\n      result = result * 0x10000000000000000B17217F7D1CF79AB >> 128;\r\n\r\n    result >>= uint256 (63 - (x >> 64));\r\n    require (result <= uint256 (MAX_64x64));\r\n\r\n    return int128 (result);\r\n  }\r\n\r\n  /**\r\n   * Calculate natural exponent of x.  Revert on overflow.\r\n   *\r\n   * @param x signed 64.64-bit fixed point number\r\n   * @return signed 64.64-bit fixed point number\r\n   */\r\n  function exp (int128 x) internal pure returns (int128) {\r\n    require (x < 0x400000000000000000); // Overflow\r\n\r\n    if (x < -0x400000000000000000) return 0; // Underflow\r\n\r\n    return exp_2 (\r\n        int128 (int256 (x) * 0x171547652B82FE1777D0FFDA0D23A7D12 >> 128));\r\n  }\r\n\r\n  /**\r\n   * Calculate x / y rounding towards zero, where x and y are unsigned 256-bit\r\n   * integer numbers.  Revert on overflow or when y is zero.\r\n   *\r\n   * @param x unsigned 256-bit integer number\r\n   * @param y unsigned 256-bit integer number\r\n   * @return unsigned 64.64-bit fixed point number\r\n   */\r\n  function divuu (uint256 x, uint256 y) private pure returns (uint128) {\r\n    require (y != 0);\r\n\r\n    uint256 result;\r\n\r\n    if (x <= 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF)\r\n      result = (x << 64) / y;\r\n    else {\r\n      uint256 msb = 192;\r\n      uint256 xc = x >> 192;\r\n      if (xc >= 0x100000000) { xc >>= 32; msb += 32; }\r\n      if (xc >= 0x10000) { xc >>= 16; msb += 16; }\r\n      if (xc >= 0x100) { xc >>= 8; msb += 8; }\r\n      if (xc >= 0x10) { xc >>= 4; msb += 4; }\r\n      if (xc >= 0x4) { xc >>= 2; msb += 2; }\r\n      if (xc >= 0x2) msb += 1;  // No need to shift xc anymore\r\n\r\n      result = (x << 255 - msb) / ((y - 1 >> msb - 191) + 1);\r\n      require (result <= 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF);\r\n\r\n      uint256 hi = result * (y >> 128);\r\n      uint256 lo = result * (y & 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF);\r\n\r\n      uint256 xh = x >> 192;\r\n      uint256 xl = x << 64;\r\n\r\n      if (xl < lo) xh -= 1;\r\n      xl -= lo; // We rely on overflow behavior here\r\n      lo = hi << 128;\r\n      if (xl < lo) xh -= 1;\r\n      xl -= lo; // We rely on overflow behavior here\r\n\r\n      assert (xh == hi >> 128);\r\n\r\n      result += xl / y;\r\n    }\r\n\r\n    require (result <= 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF);\r\n    return uint128 (result);\r\n  }\r\n\r\n  /**\r\n   * Calculate x^y assuming 0^0 is 1, where x is unsigned 129.127 fixed point\r\n   * number and y is unsigned 256-bit integer number.  Revert on overflow.\r\n   *\r\n   * @param x unsigned 129.127-bit fixed point number\r\n   * @param y uint256 value\r\n   * @return unsigned 129.127-bit fixed point number\r\n   */\r\n  function powu (uint256 x, uint256 y) private pure returns (uint256) {\r\n    if (y == 0) return 0x80000000000000000000000000000000;\r\n    else if (x == 0) return 0;\r\n    else {\r\n      int256 msb = 0;\r\n      uint256 xc = x;\r\n      if (xc >= 0x100000000000000000000000000000000) { xc >>= 128; msb += 128; }\r\n      if (xc >= 0x10000000000000000) { xc >>= 64; msb += 64; }\r\n      if (xc >= 0x100000000) { xc >>= 32; msb += 32; }\r\n      if (xc >= 0x10000) { xc >>= 16; msb += 16; }\r\n      if (xc >= 0x100) { xc >>= 8; msb += 8; }\r\n      if (xc >= 0x10) { xc >>= 4; msb += 4; }\r\n      if (xc >= 0x4) { xc >>= 2; msb += 2; }\r\n      if (xc >= 0x2) msb += 1;  // No need to shift xc anymore\r\n\r\n      int256 xe = msb - 127;\r\n      if (xe > 0) x >>= uint256 (xe);\r\n      else x <<= uint256 (-xe);\r\n\r\n      uint256 result = 0x80000000000000000000000000000000;\r\n      int256 re = 0;\r\n\r\n      while (y > 0) {\r\n        if (y & 1 > 0) {\r\n          result = result * x;\r\n          y -= 1;\r\n          re += xe;\r\n          if (result >=\r\n            0x8000000000000000000000000000000000000000000000000000000000000000) {\r\n            result >>= 128;\r\n            re += 1;\r\n          } else result >>= 127;\r\n          if (re < -127) return 0; // Underflow\r\n          require (re < 128); // Overflow\r\n        } else {\r\n          x = x * x;\r\n          y >>= 1;\r\n          xe <<= 1;\r\n          if (x >=\r\n            0x8000000000000000000000000000000000000000000000000000000000000000) {\r\n            x >>= 128;\r\n            xe += 1;\r\n          } else x >>= 127;\r\n          if (xe < -127) return 0; // Underflow\r\n          require (xe < 128); // Overflow\r\n        }\r\n      }\r\n\r\n      if (re > 0) result <<= uint256 (re);\r\n      else if (re < 0) result >>= uint256 (-re);\r\n\r\n      return result;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Calculate sqrt (x) rounding down, where x is unsigned 256-bit integer\r\n   * number.\r\n   *\r\n   * @param x unsigned 256-bit integer number\r\n   * @return unsigned 128-bit integer number\r\n   */\r\n  function sqrtu (uint256 x) private pure returns (uint128) {\r\n    if (x == 0) return 0;\r\n    else {\r\n      uint256 xx = x;\r\n      uint256 r = 1;\r\n      if (xx >= 0x100000000000000000000000000000000) { xx >>= 128; r <<= 64; }\r\n      if (xx >= 0x10000000000000000) { xx >>= 64; r <<= 32; }\r\n      if (xx >= 0x100000000) { xx >>= 32; r <<= 16; }\r\n      if (xx >= 0x10000) { xx >>= 16; r <<= 8; }\r\n      if (xx >= 0x100) { xx >>= 8; r <<= 4; }\r\n      if (xx >= 0x10) { xx >>= 4; r <<= 2; }\r\n      if (xx >= 0x8) { r <<= 1; }\r\n      r = (r + x / r) >> 1;\r\n      r = (r + x / r) >> 1;\r\n      r = (r + x / r) >> 1;\r\n      r = (r + x / r) >> 1;\r\n      r = (r + x / r) >> 1;\r\n      r = (r + x / r) >> 1;\r\n      r = (r + x / r) >> 1; // Seven iterations should be enough\r\n      uint256 r1 = x / r;\r\n      return uint128 (r < r1 ? r : r1);\r\n    }\r\n  }\r\n}\r\n\r\n// Part: IOracle\r\n\r\ninterface IOracle {\r\n    function getPrice() external view returns (uint256);\r\n}\r\n\r\n// Part: Initializable\r\n\r\n/**\r\n * @title Initializable\r\n *\r\n * @dev Helper contract to support initializer functions. To use it, replace\r\n * the constructor with a function that has the `initializer` modifier.\r\n * WARNING: Unlike constructors, initializer functions must be manually\r\n * invoked. This applies both to deploying an Initializable contract, as well\r\n * as extending an Initializable contract via inheritance.\r\n * WARNING: When used with inheritance, manual care must be taken to not invoke\r\n * a parent initializer twice, or ensure that all initializers are idempotent,\r\n * because this is not dealt with automatically as with constructors.\r\n */\r\ncontract Initializable {\r\n\r\n  /**\r\n   * @dev Indicates that the contract has been initialized.\r\n   */\r\n  bool private initialized;\r\n\r\n  /**\r\n   * @dev Indicates that the contract is in the process of being initialized.\r\n   */\r\n  bool private initializing;\r\n\r\n  /**\r\n   * @dev Modifier to use in the initializer function of a contract.\r\n   */\r\n  modifier initializer() {\r\n    require(initializing || isConstructor() || !initialized, \"Contract instance has already been initialized\");\r\n\r\n    bool isTopLevelCall = !initializing;\r\n    if (isTopLevelCall) {\r\n      initializing = true;\r\n      initialized = true;\r\n    }\r\n\r\n    _;\r\n\r\n    if (isTopLevelCall) {\r\n      initializing = false;\r\n    }\r\n  }\r\n\r\n  /// @dev Returns true if and only if the function is running in the constructor\r\n  function isConstructor() private view returns (bool) {\r\n    // extcodesize checks the size of the code stored in an address, and\r\n    // address returns the current address. Since the code is still not\r\n    // deployed when running a constructor, any checks on its code size will\r\n    // yield zero, making it an effective way to detect if a contract is\r\n    // under construction or not.\r\n    address self = address(this);\r\n    uint256 cs;\r\n    assembly { cs := extcodesize(self) }\r\n    return cs == 0;\r\n  }\r\n\r\n  // Reserved storage space to allow for layout changes in the future.\r\n  uint256[50] private ______gap;\r\n}\r\n\r\n// Part: OpenZeppelin/openzeppelin-contracts@3.2.0/Address\r\n\r\n/**\r\n * @dev Collection of functions related to the address type\r\n */\r\nlibrary Address {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     *\r\n     * Among others, `isContract` will return false for the following\r\n     * types of addresses:\r\n     *\r\n     *  - an externally-owned account\r\n     *  - a contract in construction\r\n     *  - an address where a contract will be created\r\n     *  - an address where a contract lived, but was destroyed\r\n     * ====\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // This method relies in extcodesize, which returns 0 for contracts in\r\n        // construction, since the code is only stored at the end of the\r\n        // constructor execution.\r\n\r\n        uint256 size;\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly { size := extcodesize(account) }\r\n        return size > 0;\r\n    }\r\n\r\n    /**\r\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * IMPORTANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     */\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\r\n        (bool success, ) = recipient.call{ value: amount }(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n\r\n    /**\r\n     * @dev Performs a Solidity function call using a low level `call`. A\r\n     * plain`call` is an unsafe replacement for a function call: use this\r\n     * function instead.\r\n     *\r\n     * If `target` reverts with a revert reason, it is bubbled up by this\r\n     * function (like regular Solidity function calls).\r\n     *\r\n     * Returns the raw returned data. To convert to the expected return value,\r\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `target` must be a contract.\r\n     * - calling `target` with `data` must not revert.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n      return functionCall(target, data, \"Address: low-level call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\r\n     * `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\r\n        return _functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but also transferring `value` wei to `target`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the calling contract must have an ETH balance of at least `value`.\r\n     * - the called Solidity function must be `payable`.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\r\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\r\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\r\n        return _functionCallWithValue(target, data, value, errorMessage);\r\n    }\r\n\r\n    function _functionCallWithValue(address target, bytes memory data, uint256 weiValue, string memory errorMessage) private returns (bytes memory) {\r\n        require(isContract(target), \"Address: call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.call{ value: weiValue }(data);\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            // Look for revert reason and bubble it up if present\r\n            if (returndata.length > 0) {\r\n                // The easiest way to bubble the revert reason is using memory via assembly\r\n\r\n                // solhint-disable-next-line no-inline-assembly\r\n                assembly {\r\n                    let returndata_size := mload(returndata)\r\n                    revert(add(32, returndata), returndata_size)\r\n                }\r\n            } else {\r\n                revert(errorMessage);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n// Part: OpenZeppelin/openzeppelin-contracts@3.2.0/IERC20\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n// Part: OpenZeppelin/openzeppelin-contracts@3.2.0/Math\r\n\r\n/**\r\n * @dev Standard math utilities missing in the Solidity language.\r\n */\r\nlibrary Math {\r\n    /**\r\n     * @dev Returns the largest of two numbers.\r\n     */\r\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a >= b ? a : b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the smallest of two numbers.\r\n     */\r\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a < b ? a : b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the average of two numbers. The result is rounded towards\r\n     * zero.\r\n     */\r\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // (a + b) / 2 can overflow, so we distribute\r\n        return (a / 2) + (b / 2) + ((a % 2 + b % 2) / 2);\r\n    }\r\n}\r\n\r\n// Part: OpenZeppelin/openzeppelin-contracts@3.2.0/SafeMath\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts with custom message when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n// Part: ContextUpgradeSafe\r\n\r\n/*\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with GSN meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\ncontract ContextUpgradeSafe is Initializable {\r\n    // Empty internal constructor, to prevent people from mistakenly deploying\r\n    // an instance of this contract, which should be used via inheritance.\r\n\r\n    function __Context_init() internal initializer {\r\n        __Context_init_unchained();\r\n    }\r\n\r\n    function __Context_init_unchained() internal initializer {\r\n\r\n\r\n    }\r\n\r\n\r\n    function _msgSender() internal view virtual returns (address payable) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes memory) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n\r\n    uint256[50] private __gap;\r\n}\r\n\r\n// Part: OpenZeppelin/openzeppelin-contracts@3.2.0/SafeERC20\r\n\r\n/**\r\n * @title SafeERC20\r\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\r\n * contract returns false). Tokens that return no value (and instead revert or\r\n * throw on failure) are also supported, non-reverting calls are assumed to be\r\n * successful.\r\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\r\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\r\n */\r\nlibrary SafeERC20 {\r\n    using SafeMath for uint256;\r\n    using Address for address;\r\n\r\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\r\n    }\r\n\r\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\r\n    }\r\n\r\n    /**\r\n     * @dev Deprecated. This function has issues similar to the ones found in\r\n     * {IERC20-approve}, and its usage is discouraged.\r\n     *\r\n     * Whenever possible, use {safeIncreaseAllowance} and\r\n     * {safeDecreaseAllowance} instead.\r\n     */\r\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\r\n        // safeApprove should only be called when setting an initial allowance,\r\n        // or when resetting it to zero. To increase and decrease it, use\r\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\r\n        // solhint-disable-next-line max-line-length\r\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\r\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\r\n        );\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\r\n    }\r\n\r\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \"SafeERC20: decreased allowance below zero\");\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    /**\r\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\r\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\r\n     * @param token The token targeted by the call.\r\n     * @param data The call data (encoded using abi.encode or one of its variants).\r\n     */\r\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\r\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\r\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\r\n        // the target address contains contract code and also asserts for success in the low-level call.\r\n\r\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\r\n        if (returndata.length > 0) { // Return data is optional\r\n            // solhint-disable-next-line max-line-length\r\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\r\n        }\r\n    }\r\n}\r\n\r\n// Part: OptionMath\r\n\r\nlibrary OptionMath {\r\n    using SafeMath for uint256;\r\n\r\n    uint256 public constant SCALE = 1e18;\r\n\r\n    /**\r\n     * Converts total supplies of options into the tokenized payoff quantities used\r\n     * by the LMSR\r\n     *\r\n     * For puts, multiply by strike price since option quantity is in terms of the\r\n     * underlying, but lmsr quantities should be in terms of the strike currency\r\n     */\r\n    function calcQuantities(\r\n        uint256[] memory strikePrices,\r\n        bool isPut,\r\n        uint256[] memory longSupplies,\r\n        uint256[] memory shortSupplies\r\n    ) internal pure returns (uint256[] memory) {\r\n        uint256 n = strikePrices.length;\r\n        require(longSupplies.length == n, \"Lengths do not match\");\r\n        require(shortSupplies.length == n, \"Lengths do not match\");\r\n\r\n        // this mutates the method arguments, but costs less gas\r\n        if (isPut) {\r\n            for (uint256 i = 0; i < n; i++) {\r\n                longSupplies[i] = longSupplies[i].mul(strikePrices[i]).div(SCALE);\r\n                shortSupplies[i] = shortSupplies[i].mul(strikePrices[i]).div(SCALE);\r\n            }\r\n        }\r\n\r\n        // swap shortSupplies and longSupplies for puts\r\n        uint256[] memory leftSupplies = isPut ? shortSupplies : longSupplies;\r\n        uint256[] memory rightSupplies = isPut ? longSupplies : shortSupplies;\r\n\r\n        uint256[] memory quantities = new uint256[](n + 1);\r\n\r\n        // set quantities[0] = sum(rightSupplies)\r\n        for (uint256 i = 0; i < n; i++) {\r\n            quantities[0] = quantities[0].add(rightSupplies[i]);\r\n        }\r\n\r\n        // set quantities[i] = leftSupplies[:i] + rightSupplies[i:]\r\n        for (uint256 i = 0; i < n; i++) {\r\n            quantities[i + 1] = quantities[i].add(leftSupplies[i]).sub(rightSupplies[i]);\r\n        }\r\n        return quantities;\r\n    }\r\n\r\n    /**\r\n     * Calculates the LMSR cost function\r\n     *\r\n     *   C(q_1, ..., q_n) = b * log(exp(q_1 / b) + ... + exp(q_n / b))\r\n     *\r\n     * where\r\n     *\r\n     *   q_i = total supply of ith tokenized payoff\r\n     *   b = liquidity parameter\r\n     *\r\n     * An equivalent expression for C is used to avoid overflow when calculating exponentials\r\n     *\r\n     *   C(q_1, ..., q_n) = m + b * log(exp((q_1 - m) / b) + ... + exp((q_n - m) / b))\r\n     *\r\n     * where\r\n     *\r\n     *   m = max(q_1, ..., q_n)\r\n     */\r\n    function calcLmsrCost(uint256[] memory quantities, uint256 b) internal pure returns (uint256) {\r\n        uint256 maxQuantity = quantities[0];\r\n        for (uint256 i = 1; i < quantities.length; i++) {\r\n            maxQuantity = Math.max(maxQuantity, quantities[i]);\r\n        }\r\n\r\n        // cost converges to max(q) as b tends to 0\r\n        if (b == 0) {\r\n            return maxQuantity;\r\n        }\r\n\r\n        int128 sumExp;\r\n        for (uint256 i = 0; i < quantities.length; i++) {\r\n            // max(q) - q_i\r\n            uint256 diff = maxQuantity.sub(quantities[i]);\r\n\r\n            // (max(q) - q_i) / b\r\n            int128 div = ABDKMath64x64.divu(diff, b);\r\n\r\n            // exp((q_i - max(q)) / b)\r\n            int128 exp = ABDKMath64x64.exp(ABDKMath64x64.neg(div));\r\n            sumExp = ABDKMath64x64.add(sumExp, exp);\r\n        }\r\n\r\n        // log(sumExp)\r\n        int128 log = ABDKMath64x64.ln(sumExp);\r\n\r\n        // b * log(sumExp) + max(q)\r\n        return ABDKMath64x64.mulu(log, b).add(maxQuantity);\r\n    }\r\n\r\n    /**\r\n     * Calculate total payoff of all outstanding options\r\n     *\r\n     * This value will decrease as options are redeemed\r\n     *\r\n     * For calls, divide by expiry price since payoff should be in terms of the\r\n     * `baseToken`\r\n     */\r\n    function calcPayoff(\r\n        uint256[] memory strikePrices,\r\n        uint256 expiryPrice,\r\n        bool isPut,\r\n        uint256[] memory longSupplies,\r\n        uint256[] memory shortSupplies\r\n    ) internal pure returns (uint256) {\r\n        require(longSupplies.length == strikePrices.length, \"Lengths do not match\");\r\n        require(shortSupplies.length == strikePrices.length, \"Lengths do not match\");\r\n\r\n        if (expiryPrice == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 payoff;\r\n        for (uint256 i = 0; i < strikePrices.length; i++) {\r\n            uint256 strikePrice = strikePrices[i];\r\n\r\n            if (isPut && expiryPrice < strikePrice) {\r\n                // put payoff = max(K - S, 0)\r\n                payoff = payoff.add(longSupplies[i].mul(strikePrice.sub(expiryPrice)));\r\n            } else if (!isPut && expiryPrice > strikePrice) {\r\n                // call payoff = max(S - K, 0)\r\n                payoff = payoff.add(longSupplies[i].mul(expiryPrice.sub(strikePrice)));\r\n            }\r\n\r\n            // short payoff = min(S, K)\r\n            payoff = payoff.add(shortSupplies[i].mul(Math.min(expiryPrice, strikePrice)));\r\n        }\r\n        return payoff.div(isPut ? SCALE : expiryPrice);\r\n    }\r\n}\r\n\r\n// Part: ReentrancyGuardUpgradeSafe\r\n\r\n/**\r\n * @dev Contract module that helps prevent reentrant calls to a function.\r\n *\r\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\r\n * available, which can be applied to functions to make sure there are no nested\r\n * (reentrant) calls to them.\r\n *\r\n * Note that because there is a single `nonReentrant` guard, functions marked as\r\n * `nonReentrant` may not call one another. This can be worked around by making\r\n * those functions `private`, and then adding `external` `nonReentrant` entry\r\n * points to them.\r\n *\r\n * TIP: If you would like to learn more about reentrancy and alternative ways\r\n * to protect against it, check out our blog post\r\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\r\n */\r\ncontract ReentrancyGuardUpgradeSafe is Initializable {\r\n    bool private _notEntered;\r\n\r\n\r\n    function __ReentrancyGuard_init() internal initializer {\r\n        __ReentrancyGuard_init_unchained();\r\n    }\r\n\r\n    function __ReentrancyGuard_init_unchained() internal initializer {\r\n\r\n\r\n        // Storing an initial non-zero value makes deployment a bit more\r\n        // expensive, but in exchange the refund on every call to nonReentrant\r\n        // will be lower in amount. Since refunds are capped to a percetange of\r\n        // the total transaction's gas, it is best to keep them low in cases\r\n        // like this one, to increase the likelihood of the full refund coming\r\n        // into effect.\r\n        _notEntered = true;\r\n\r\n    }\r\n\r\n\r\n    /**\r\n     * @dev Prevents a contract from calling itself, directly or indirectly.\r\n     * Calling a `nonReentrant` function from another `nonReentrant`\r\n     * function is not supported. It is possible to prevent this from happening\r\n     * by making the `nonReentrant` function external, and make it call a\r\n     * `private` function that does the actual work.\r\n     */\r\n    modifier nonReentrant() {\r\n        // On the first call to nonReentrant, _notEntered will be true\r\n        require(_notEntered, \"ReentrancyGuard: reentrant call\");\r\n\r\n        // Any calls to nonReentrant after this point will fail\r\n        _notEntered = false;\r\n\r\n        _;\r\n\r\n        // By storing the original value once again, a refund is triggered (see\r\n        // https://eips.ethereum.org/EIPS/eip-2200)\r\n        _notEntered = true;\r\n    }\r\n\r\n    uint256[49] private __gap;\r\n}\r\n\r\n// Part: ERC20UpgradeSafe\r\n\r\n/**\r\n * @dev Implementation of the {IERC20} interface.\r\n *\r\n * This implementation is agnostic to the way tokens are created. This means\r\n * that a supply mechanism has to be added in a derived contract using {_mint}.\r\n * For a generic mechanism see {ERC20MinterPauser}.\r\n *\r\n * TIP: For a detailed writeup see our guide\r\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\r\n * to implement supply mechanisms].\r\n *\r\n * We have followed general OpenZeppelin guidelines: functions revert instead\r\n * of returning `false` on failure. This behavior is nonetheless conventional\r\n * and does not conflict with the expectations of ERC20 applications.\r\n *\r\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\r\n * This allows applications to reconstruct the allowance for all accounts just\r\n * by listening to said events. Other implementations of the EIP may not emit\r\n * these events, as it isn't required by the specification.\r\n *\r\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\r\n * functions have been added to mitigate the well-known issues around setting\r\n * allowances. See {IERC20-approve}.\r\n */\r\ncontract ERC20UpgradeSafe is Initializable, ContextUpgradeSafe, IERC20 {\r\n    using SafeMath for uint256;\r\n    using Address for address;\r\n\r\n    mapping (address => uint256) private _balances;\r\n\r\n    mapping (address => mapping (address => uint256)) private _allowances;\r\n\r\n    uint256 private _totalSupply;\r\n\r\n    string private _name;\r\n    string private _symbol;\r\n    uint8 private _decimals;\r\n\r\n    /**\r\n     * @dev Sets the values for {name} and {symbol}, initializes {decimals} with\r\n     * a default value of 18.\r\n     *\r\n     * To select a different value for {decimals}, use {_setupDecimals}.\r\n     *\r\n     * All three of these values are immutable: they can only be set once during\r\n     * construction.\r\n     */\r\n\r\n    function __ERC20_init(string memory name, string memory symbol) internal initializer {\r\n        __Context_init_unchained();\r\n        __ERC20_init_unchained(name, symbol);\r\n    }\r\n\r\n    function __ERC20_init_unchained(string memory name, string memory symbol) internal initializer {\r\n\r\n\r\n        _name = name;\r\n        _symbol = symbol;\r\n        _decimals = 18;\r\n\r\n    }\r\n\r\n\r\n    /**\r\n     * @dev Returns the name of the token.\r\n     */\r\n    function name() public view returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the symbol of the token, usually a shorter version of the\r\n     * name.\r\n     */\r\n    function symbol() public view returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of decimals used to get its user representation.\r\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\r\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\r\n     *\r\n     * Tokens usually opt for a value of 18, imitating the relationship between\r\n     * Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is\r\n     * called.\r\n     *\r\n     * NOTE: This information is only used for _display_ purposes: it in\r\n     * no way affects any of the arithmetic of the contract, including\r\n     * {IERC20-balanceOf} and {IERC20-transfer}.\r\n     */\r\n    function decimals() public view returns (uint8) {\r\n        return _decimals;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-totalSupply}.\r\n     */\r\n    function totalSupply() public view override returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-balanceOf}.\r\n     */\r\n    function balanceOf(address account) public view override returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-transfer}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `recipient` cannot be the zero address.\r\n     * - the caller must have a balance of at least `amount`.\r\n     */\r\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\r\n        _transfer(_msgSender(), recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-allowance}.\r\n     */\r\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-approve}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\r\n        _approve(_msgSender(), spender, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-transferFrom}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance. This is not\r\n     * required by the EIP. See the note at the beginning of {ERC20};\r\n     *\r\n     * Requirements:\r\n     * - `sender` and `recipient` cannot be the zero address.\r\n     * - `sender` must have a balance of at least `amount`.\r\n     * - the caller must have allowance for ``sender``'s tokens of at least\r\n     * `amount`.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \"ERC20: transfer amount exceeds allowance\"));\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\r\n     *\r\n     * This is an alternative to {approve} that can be used as a mitigation for\r\n     * problems described in {IERC20-approve}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\r\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\r\n     *\r\n     * This is an alternative to {approve} that can be used as a mitigation for\r\n     * problems described in {IERC20-approve}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     * - `spender` must have allowance for the caller of at least\r\n     * `subtractedValue`.\r\n     */\r\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\r\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \"ERC20: decreased allowance below zero\"));\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\r\n     *\r\n     * This is internal function is equivalent to {transfer}, and can be used to\r\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `sender` cannot be the zero address.\r\n     * - `recipient` cannot be the zero address.\r\n     * - `sender` must have a balance of at least `amount`.\r\n     */\r\n    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\r\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\r\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\r\n\r\n        _beforeTokenTransfer(sender, recipient, amount);\r\n\r\n        _balances[sender] = _balances[sender].sub(amount, \"ERC20: transfer amount exceeds balance\");\r\n        _balances[recipient] = _balances[recipient].add(amount);\r\n        emit Transfer(sender, recipient, amount);\r\n    }\r\n\r\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\r\n     * the total supply.\r\n     *\r\n     * Emits a {Transfer} event with `from` set to the zero address.\r\n     *\r\n     * Requirements\r\n     *\r\n     * - `to` cannot be the zero address.\r\n     */\r\n    function _mint(address account, uint256 amount) internal virtual {\r\n        require(account != address(0), \"ERC20: mint to the zero address\");\r\n\r\n        _beforeTokenTransfer(address(0), account, amount);\r\n\r\n        _totalSupply = _totalSupply.add(amount);\r\n        _balances[account] = _balances[account].add(amount);\r\n        emit Transfer(address(0), account, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Destroys `amount` tokens from `account`, reducing the\r\n     * total supply.\r\n     *\r\n     * Emits a {Transfer} event with `to` set to the zero address.\r\n     *\r\n     * Requirements\r\n     *\r\n     * - `account` cannot be the zero address.\r\n     * - `account` must have at least `amount` tokens.\r\n     */\r\n    function _burn(address account, uint256 amount) internal virtual {\r\n        require(account != address(0), \"ERC20: burn from the zero address\");\r\n\r\n        _beforeTokenTransfer(account, address(0), amount);\r\n\r\n        _balances[account] = _balances[account].sub(amount, \"ERC20: burn amount exceeds balance\");\r\n        _totalSupply = _totalSupply.sub(amount);\r\n        emit Transfer(account, address(0), amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the `owner`s tokens.\r\n     *\r\n     * This is internal function is equivalent to `approve`, and can be used to\r\n     * e.g. set automatic allowances for certain subsystems, etc.\r\n     *\r\n     * Emits an {Approval} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `owner` cannot be the zero address.\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Sets {decimals} to a value other than the default one of 18.\r\n     *\r\n     * WARNING: This function should only be called from the constructor. Most\r\n     * applications that interact with token contracts will not expect\r\n     * {decimals} to ever change, and may work incorrectly if it does.\r\n     */\r\n    function _setupDecimals(uint8 decimals_) internal {\r\n        _decimals = decimals_;\r\n    }\r\n\r\n    /**\r\n     * @dev Hook that is called before any transfer of tokens. This includes\r\n     * minting and burning.\r\n     *\r\n     * Calling conditions:\r\n     *\r\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\r\n     * will be to transferred to `to`.\r\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\r\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\r\n     * - `from` and `to` are never both zero.\r\n     *\r\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\r\n     */\r\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual { }\r\n\r\n    uint256[44] private __gap;\r\n}\r\n\r\n// Part: OwnableUpgradeSafe\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\ncontract OwnableUpgradeSafe is Initializable, ContextUpgradeSafe {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n\r\n    function __Ownable_init() internal initializer {\r\n        __Context_init_unchained();\r\n        __Ownable_init_unchained();\r\n    }\r\n\r\n    function __Ownable_init_unchained() internal initializer {\r\n\r\n\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n\r\n    }\r\n\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n\r\n    uint256[49] private __gap;\r\n}\r\n\r\n// Part: UniERC20\r\n\r\nlibrary UniERC20 {\r\n    using SafeMath for uint256;\r\n    using SafeERC20 for IERC20;\r\n\r\n    function isETH(IERC20 token) internal pure returns (bool) {\r\n        return (address(token) == address(0));\r\n    }\r\n\r\n    function uniBalanceOf(IERC20 token, address account) internal view returns (uint256) {\r\n        if (isETH(token)) {\r\n            return account.balance;\r\n        } else {\r\n            return token.balanceOf(account);\r\n        }\r\n    }\r\n\r\n    function uniTransfer(\r\n        IERC20 token,\r\n        address payable to,\r\n        uint256 amount\r\n    ) internal {\r\n        if (amount > 0) {\r\n            if (isETH(token)) {\r\n                (bool success, ) = to.call{value: amount}(\"\");\r\n                require(success, \"Transfer failed\");\r\n            } else {\r\n                token.safeTransfer(to, amount);\r\n            }\r\n        }\r\n    }\r\n\r\n    function uniTransferFromSenderToThis(IERC20 token, uint256 amount) internal {\r\n        if (amount > 0) {\r\n            if (isETH(token)) {\r\n                require(msg.value >= amount, \"UniERC20: not enough value\");\r\n                if (msg.value > amount) {\r\n                    // Return remainder if exist\r\n                    uint256 refundAmount = msg.value.sub(amount);\r\n                    (bool success, ) = msg.sender.call{value: refundAmount}(\"\");\r\n                    require(success, \"Transfer failed\");\r\n                }\r\n            } else {\r\n                token.safeTransferFrom(msg.sender, address(this), amount);\r\n            }\r\n        }\r\n    }\r\n\r\n    function uniSymbol(IERC20 token) internal view returns (string memory) {\r\n        if (isETH(token)) {\r\n            return \"ETH\";\r\n        }\r\n\r\n        (bool success, bytes memory data) = address(token).staticcall{gas: 20000}(abi.encodeWithSignature(\"symbol()\"));\r\n        if (!success) {\r\n            (success, data) = address(token).staticcall{gas: 20000}(abi.encodeWithSignature(\"SYMBOL()\"));\r\n        }\r\n\r\n        if (success && data.length >= 96) {\r\n            (uint256 offset, uint256 len) = abi.decode(data, (uint256, uint256));\r\n            if (offset == 0x20 && len > 0 && len <= 256) {\r\n                return string(abi.decode(data, (bytes)));\r\n            }\r\n        }\r\n\r\n        if (success && data.length == 32) {\r\n            uint256 len = 0;\r\n            while (len < data.length && data[len] >= 0x20 && data[len] <= 0x7E) {\r\n                len++;\r\n            }\r\n\r\n            if (len > 0) {\r\n                bytes memory result = new bytes(len);\r\n                for (uint256 i = 0; i < len; i++) {\r\n                    result[i] = data[i];\r\n                }\r\n                return string(result);\r\n            }\r\n        }\r\n\r\n        return _toHex(address(token));\r\n    }\r\n\r\n    function _toHex(address account) private pure returns (string memory) {\r\n        return _toHex(abi.encodePacked(account));\r\n    }\r\n\r\n    function _toHex(bytes memory data) private pure returns (string memory) {\r\n        bytes memory str = new bytes(2 + data.length * 2);\r\n        str[0] = \"0\";\r\n        str[1] = \"x\";\r\n        uint256 j = 2;\r\n        for (uint256 i = 0; i < data.length; i++) {\r\n            uint256 a = uint8(data[i]) >> 4;\r\n            uint256 b = uint8(data[i]) & 0x0f;\r\n            str[j++] = bytes1(uint8(a + 48 + (a / 10) * 39));\r\n            str[j++] = bytes1(uint8(b + 48 + (b / 10) * 39));\r\n        }\r\n\r\n        return string(str);\r\n    }\r\n}\r\n\r\n// Part: OptionToken\r\n\r\n/**\r\n * ERC20 token representing a long or short option position. It is intended to be\r\n * used by `OptionMarket`, which mints/burns these tokens when users buy/sell options\r\n *\r\n * Note that `decimals` should match the decimals of the `baseToken` in `OptionMarket`\r\n */\r\ncontract OptionToken is ERC20UpgradeSafe {\r\n    using Address for address;\r\n    using SafeERC20 for IERC20;\r\n    using SafeMath for uint256;\r\n\r\n    address public market;\r\n\r\n    function initialize(\r\n        address _market,\r\n        string memory name,\r\n        string memory symbol,\r\n        uint8 decimals\r\n    ) public initializer {\r\n        __ERC20_init(name, symbol);\r\n        _setupDecimals(decimals);\r\n        market = _market;\r\n    }\r\n\r\n    function mint(address account, uint256 amount) external {\r\n        require(msg.sender == market, \"!market\");\r\n        _mint(account, amount);\r\n    }\r\n\r\n    function burn(address account, uint256 amount) external {\r\n        require(msg.sender == market, \"!market\");\r\n        _burn(account, amount);\r\n    }\r\n}\r\n\r\n// Part: OptionMarket\r\n\r\n/**\r\n * Automated market-maker for options\r\n *\r\n * This contract allows an asset to be split up into tokenized payoffs such that\r\n * different combinations of payoffs sum up to different call/put option payoffs.\r\n * An LMSR (Hanson's market-maker) is used to provide liquidity for the tokenized\r\n * payoffs.\r\n *\r\n * The parameter `b` in the LMSR represents the market depth. `b` is increased when\r\n * users provide liquidity by depositing funds and it is decreased when they withdraw\r\n * liquidity. Trading fees are distributed proportionally to liquidity providers\r\n * at the time of the trade.\r\n *\r\n * Call and put option with any of the supported strikes are provided. Short options\r\n * (equivalent to owning 1 underlying + sell 1 option) are provided, which let users\r\n * take on short option exposure\r\n *\r\n * `buy`, `sell`, `deposit` and `withdraw` are the main methods used to interact with\r\n * this contract.\r\n *\r\n * After expiration, `settle` can be called to fetch the expiry price from a\r\n * price oracle. `buy` and `deposit` cannot be called after expiration, but `sell`\r\n * can be called to redeem options for their corresponding payouts and `withdraw`\r\n * can be called to redeem LP tokens for a stake of the remaining funds left\r\n * in the contract.\r\n *\r\n * Methods to calculate the LMSR cost and option payoffs can be found in `OptionMath`.\r\n * `OptionToken` is an ERC20 token representing a long or short option position\r\n * that's minted or burned when users buy or sell options.\r\n *\r\n * This contract is also an ERC20 token itself representing shares in the liquidity\r\n * pool.\r\n *\r\n * The intended way to deploy this contract is to call `createMarket` in `OptionFactory`\r\n * Then liquidity has to be provided using `deposit` before trades can occur.\r\n *\r\n * Please note that the deployer of this contract is highly privileged and has\r\n * permissions such as withdrawing all funds from the contract, being able to pause\r\n * trading, modify the market parameters and override the settlement price. These\r\n * permissions will be removed in future versions.\r\n */\r\ncontract OptionMarket is ERC20UpgradeSafe, ReentrancyGuardUpgradeSafe, OwnableUpgradeSafe {\r\n    using Address for address;\r\n    using SafeERC20 for IERC20;\r\n    using UniERC20 for IERC20;\r\n    using SafeMath for uint256;\r\n\r\n    event Buy(\r\n        address indexed account,\r\n        bool isLongToken,\r\n        uint256 strikeIndex,\r\n        uint256 optionsOut,\r\n        uint256 amountIn,\r\n        uint256 newSupply\r\n    );\r\n\r\n    event Sell(\r\n        address indexed account,\r\n        bool isLongToken,\r\n        uint256 strikeIndex,\r\n        uint256 optionsIn,\r\n        uint256 amountOut,\r\n        uint256 newSupply,\r\n        bool isSettled\r\n    );\r\n\r\n    event Deposit(address indexed account, uint256 sharesOut, uint256 amountIn, uint256 newSupply);\r\n    event Withdraw(address indexed account, uint256 sharesIn, uint256 amountOut, uint256 newSupply, bool isSettled);\r\n    event Settle(uint256 expiryPrice);\r\n\r\n    uint256 public constant SCALE = 1e18;\r\n    uint256 public constant SCALE_SCALE = 1e36;\r\n\r\n    IERC20 public baseToken;\r\n    IOracle public oracle;\r\n    OptionToken[] public longTokens;\r\n    OptionToken[] public shortTokens;\r\n    uint256[] public strikePrices;\r\n    uint256 public expiryTime;\r\n    bool public isPut;\r\n    uint256 public tradingFee;\r\n    uint256 public balanceCap;\r\n    uint256 public totalSupplyCap;\r\n    uint256 public disputePeriod;\r\n\r\n    bool public isPaused;\r\n    bool public isSettled;\r\n    uint256 public expiryPrice;\r\n\r\n    // cache getCurrentCost and getCurrentPayoff between trades to save gas\r\n    uint256 public lastCost;\r\n    uint256 public lastPayoff;\r\n\r\n    // total value of fees owed to LPs\r\n    uint256 public poolValue;\r\n\r\n    /**\r\n     * @param _baseToken        Underlying asset if call. Strike currency if put\r\n     *                          Represents ETH if equal to 0x0\r\n     * @param _oracle           Oracle from which settlement price is obtained\r\n     * @param _longTokens       Tokens representing long calls/puts\r\n     * @param _shortTokens      Tokens representing short calls/puts\r\n     * @param _strikePrices     Strike prices expressed in wei. Must be in increasing order\r\n     * @param _expiryTime       Expiration time as a unix timestamp\r\n     * @param _isPut            Whether this market provides calls or puts\r\n     * @param _tradingFee       Trading fee as fraction of underlying expressed in wei\r\n     * @param _symbol           Name and symbol of LP tokens\r\n     */\r\n    function initialize(\r\n        address _baseToken,\r\n        address _oracle,\r\n        address[] memory _longTokens,\r\n        address[] memory _shortTokens,\r\n        uint256[] memory _strikePrices,\r\n        uint256 _expiryTime,\r\n        bool _isPut,\r\n        uint256 _tradingFee,\r\n        string memory _symbol\r\n    ) public payable initializer {\r\n        // this contract is also an ERC20 token, representing shares in the liquidity pool\r\n        __ERC20_init(_symbol, _symbol);\r\n        __ReentrancyGuard_init();\r\n        __Ownable_init();\r\n\r\n        // use same decimals as base token\r\n        uint8 decimals = IERC20(_baseToken).isETH() ? 18 : ERC20UpgradeSafe(_baseToken).decimals();\r\n        _setupDecimals(decimals);\r\n\r\n        require(_longTokens.length == _strikePrices.length, \"Lengths do not match\");\r\n        require(_shortTokens.length == _strikePrices.length, \"Lengths do not match\");\r\n\r\n        require(_strikePrices.length > 0, \"Strike prices must not be empty\");\r\n        require(_strikePrices[0] > 0, \"Strike prices must be > 0\");\r\n\r\n        // check strike prices are increasing\r\n        for (uint256 i = 0; i < _strikePrices.length - 1; i++) {\r\n            require(_strikePrices[i] < _strikePrices[i + 1], \"Strike prices must be increasing\");\r\n        }\r\n\r\n        // check trading fee is less than 100%\r\n        // note trading fee can be 0\r\n        require(_tradingFee < SCALE, \"Trading fee must be < 1\");\r\n\r\n        baseToken = IERC20(_baseToken);\r\n        oracle = IOracle(_oracle);\r\n        strikePrices = _strikePrices;\r\n        expiryTime = _expiryTime;\r\n        isPut = _isPut;\r\n        tradingFee = _tradingFee;\r\n\r\n        for (uint256 i = 0; i < _strikePrices.length; i++) {\r\n            longTokens.push(OptionToken(_longTokens[i]));\r\n            shortTokens.push(OptionToken(_shortTokens[i]));\r\n        }\r\n\r\n        require(!isExpired(), \"Already expired\");\r\n    }\r\n\r\n    /**\r\n     * Buy options\r\n     *\r\n     * The option bought is specified by `isLongToken` and `strikeIndex` and the\r\n     * amount by `optionsOut`\r\n     *\r\n     * This method reverts if the resulting cost is greater than `maxAmountIn`\r\n     */\r\n    function buy(\r\n        bool isLongToken,\r\n        uint256 strikeIndex,\r\n        uint256 optionsOut,\r\n        uint256 maxAmountIn\r\n    ) external payable nonReentrant returns (uint256 amountIn) {\r\n        require(totalSupply() > 0, \"No liquidity\");\r\n        require(!isExpired(), \"Already expired\");\r\n        require(msg.sender == owner() || !isPaused, \"Paused\");\r\n        require(strikeIndex < strikePrices.length, \"Index too large\");\r\n        require(optionsOut > 0, \"Options out must be > 0\");\r\n\r\n        // mint options to user\r\n        OptionToken option = isLongToken ? longTokens[strikeIndex] : shortTokens[strikeIndex];\r\n        option.mint(msg.sender, optionsOut);\r\n\r\n        // calculate trading fee and allocate it to the LP pool\r\n        // like LMSR cost, fees have to be multiplied by strike price\r\n        uint256 fee = optionsOut.mul(tradingFee);\r\n        fee = isPut ? fee.mul(strikePrices[strikeIndex]).div(SCALE_SCALE) : fee.div(SCALE);\r\n        poolValue = poolValue.add(fee);\r\n\r\n        // calculate amount that needs to be paid by user to buy these options\r\n        // it's equal to the increase in LMSR cost after minting the options\r\n        uint256 costAfter = getCurrentCost();\r\n        amountIn = costAfter.sub(lastCost).add(fee); // do sub first as a check since should not fail\r\n        lastCost = costAfter;\r\n        require(amountIn > 0, \"Amount in must be > 0\");\r\n        require(amountIn <= maxAmountIn, \"Max slippage exceeded\");\r\n\r\n        // transfer in amount from user\r\n        _transferIn(amountIn);\r\n        emit Buy(msg.sender, isLongToken, strikeIndex, optionsOut, amountIn, option.totalSupply());\r\n    }\r\n\r\n    /**\r\n     * Sell options\r\n     *\r\n     * The option sold is specified by `isLongToken` and `strikeIndex` and the\r\n     * amount by `optionsIn`\r\n     *\r\n     * This method reverts if the resulting amount returned is less than `minAmountOut`\r\n     */\r\n    function sell(\r\n        bool isLongToken,\r\n        uint256 strikeIndex,\r\n        uint256 optionsIn,\r\n        uint256 minAmountOut\r\n    ) external nonReentrant returns (uint256 amountOut) {\r\n        require(!isExpired() || isSettled, \"Must be called before expiry or after settlement\");\r\n        require(!isDisputePeriod(), \"Dispute period\");\r\n        require(msg.sender == owner() || !isPaused, \"Paused\");\r\n        require(strikeIndex < strikePrices.length, \"Index too large\");\r\n        require(optionsIn > 0, \"Options in must be > 0\");\r\n\r\n        // burn user's options\r\n        OptionToken option = isLongToken ? longTokens[strikeIndex] : shortTokens[strikeIndex];\r\n        option.burn(msg.sender, optionsIn);\r\n\r\n        // calculate amount that needs to be returned to user\r\n        if (isSettled) {\r\n            // if after settlement, amount is the option payoff\r\n            uint256 payoffAfter = getCurrentPayoff();\r\n            amountOut = lastPayoff.sub(payoffAfter);\r\n            lastPayoff = payoffAfter;\r\n        } else {\r\n            // if before expiry, amount is the decrease in LMSR cost after burning the options\r\n            uint256 costAfter = getCurrentCost();\r\n            amountOut = lastCost.sub(costAfter);\r\n            lastCost = costAfter;\r\n        }\r\n        require(amountOut > 0, \"Amount out must be > 0\");\r\n        require(amountOut >= minAmountOut, \"Max slippage exceeded\");\r\n\r\n        // transfer amount to user\r\n        baseToken.uniTransfer(msg.sender, amountOut);\r\n        emit Sell(msg.sender, isLongToken, strikeIndex, optionsIn, amountOut, option.totalSupply(), isSettled);\r\n    }\r\n\r\n    /**\r\n     * Deposit liquidity\r\n     *\r\n     * `sharesOut` is the intended increase in the parameter `b`\r\n     *\r\n     * This method reverts if the resulting cost is greater than `maxAmountIn`\r\n     */\r\n    function deposit(uint256 sharesOut, uint256 maxAmountIn) external payable nonReentrant returns (uint256 amountIn) {\r\n        require(!isExpired(), \"Already expired\");\r\n        require(msg.sender == owner() || !isPaused, \"Paused\");\r\n        require(sharesOut > 0, \"Shares out must be > 0\");\r\n\r\n        // user needs to contribute proportional amount of fees to pool, which\r\n        // ensures they are only earning fees generated after they have deposited\r\n        if (totalSupply() > 0) {\r\n            // add 1 to round up\r\n            amountIn = poolValue.mul(sharesOut).div(totalSupply()).add(1);\r\n            poolValue = poolValue.add(amountIn);\r\n        }\r\n        _mint(msg.sender, sharesOut);\r\n        require(totalSupplyCap == 0 || totalSupply() <= totalSupplyCap, \"Total supply cap exceeded\");\r\n\r\n        // need to add increase in LMSR cost after increasing b\r\n        uint256 costAfter = getCurrentCost();\r\n        amountIn = costAfter.sub(lastCost).add(amountIn); // do sub first as a check since should not fail\r\n        lastCost = costAfter;\r\n        require(amountIn > 0, \"Amount in must be > 0\");\r\n        require(amountIn <= maxAmountIn, \"Max slippage exceeded\");\r\n\r\n        // transfer in amount from user\r\n        _transferIn(amountIn);\r\n        emit Deposit(msg.sender, sharesOut, amountIn, totalSupply());\r\n    }\r\n\r\n    /**\r\n     * Withdraw liquidity\r\n     *\r\n     * `sharesIn` is the intended decrease in the parameter `b`\r\n     *\r\n     * This method reverts if the resulting amount returned is less than `minAmountOut`\r\n     */\r\n    function withdraw(uint256 sharesIn, uint256 minAmountOut) external nonReentrant returns (uint256 amountOut) {\r\n        require(!isExpired() || isSettled, \"Must be called before expiry or after settlement\");\r\n        require(!isDisputePeriod(), \"Dispute period\");\r\n        require(msg.sender == owner() || !isPaused, \"Paused\");\r\n        require(sharesIn > 0, \"Shares in must be > 0\");\r\n\r\n        // calculate cut of fees earned by user\r\n        amountOut = poolValue.mul(sharesIn).div(totalSupply());\r\n        poolValue = poolValue.sub(amountOut);\r\n        _burn(msg.sender, sharesIn);\r\n\r\n        // if before expiry, add decrease in LMSR cost after decreasing b\r\n        if (!isSettled) {\r\n            uint256 costAfter = getCurrentCost();\r\n            amountOut = lastCost.sub(costAfter).add(amountOut); // do sub first as a check since should not fail\r\n            lastCost = costAfter;\r\n        }\r\n        require(amountOut > 0, \"Amount out must be > 0\");\r\n        require(amountOut >= minAmountOut, \"Max slippage exceeded\");\r\n\r\n        // return amount to user\r\n        baseToken.uniTransfer(msg.sender, amountOut);\r\n        emit Withdraw(msg.sender, sharesIn, amountOut, totalSupply(), isSettled);\r\n    }\r\n\r\n    /**\r\n     * Retrieve and store the underlying price from the oracle\r\n     *\r\n     * This method can be called by anyone after expiration but cannot be called\r\n     * more than once. In practice it should be called as soon as possible after the\r\n     * expiration time.\r\n     */\r\n    function settle() external nonReentrant {\r\n        require(isExpired(), \"Cannot be called before expiry\");\r\n        require(!isSettled, \"Already settled\");\r\n\r\n        // fetch expiry price from oracle\r\n        isSettled = true;\r\n        expiryPrice = oracle.getPrice();\r\n        require(expiryPrice > 0, \"Price from oracle must be > 0\");\r\n\r\n        // update cached payoff and pool value\r\n        lastPayoff = getCurrentPayoff();\r\n        poolValue = baseToken.uniBalanceOf(address(this)).sub(lastPayoff);\r\n        emit Settle(expiryPrice);\r\n    }\r\n\r\n    /**\r\n     * Calculate LMSR cost\r\n     *\r\n     * Represents total amount locked in the LMSR\r\n     *\r\n     * This value will increase as options are bought and decrease as options\r\n     * are sold. The change in value corresponds to the total cost of a purchase\r\n     * or the amount returned from a sale.\r\n     *\r\n     * This method is only used before expiry. Before expiry, the `baseToken`\r\n     * balance of this contract is always at least current cost + pool value.\r\n     * Current cost is maximum possible amount that needs to be paid out to\r\n     * option holders. Pool value is the fees earned by LPs.\r\n     */\r\n    function getCurrentCost() public view returns (uint256) {\r\n        uint256[] memory longSupplies = getTotalSupplies(longTokens);\r\n        uint256[] memory shortSupplies = getTotalSupplies(shortTokens);\r\n        uint256[] memory quantities = OptionMath.calcQuantities(strikePrices, isPut, longSupplies, shortSupplies);\r\n        return OptionMath.calcLmsrCost(quantities, totalSupply());\r\n    }\r\n\r\n    /**\r\n     * Calculate option payoff\r\n     *\r\n     * Represents total payoff to option holders\r\n     *\r\n     * This value will decrease as options are redeemed. The change in value\r\n     * corresponds to the payoff returned from a redemption.\r\n     *\r\n     * This method is only used after expiry. After expiry, the `baseToken` balance\r\n     * of this contract is always at least current payoff + pool value. Current\r\n     * payoff is the amount owed to option holders and pool value is the amount\r\n     * owed to LPs.\r\n     */\r\n    function getCurrentPayoff() public view returns (uint256) {\r\n        uint256[] memory longSupplies = getTotalSupplies(longTokens);\r\n        uint256[] memory shortSupplies = getTotalSupplies(shortTokens);\r\n        return OptionMath.calcPayoff(strikePrices, expiryPrice, isPut, longSupplies, shortSupplies);\r\n    }\r\n\r\n    function getTotalSupplies(OptionToken[] memory optionTokens) public view returns (uint256[] memory totalSupplies) {\r\n        totalSupplies = new uint256[](optionTokens.length);\r\n        for (uint256 i = 0; i < optionTokens.length; i++) {\r\n            totalSupplies[i] = optionTokens[i].totalSupply();\r\n        }\r\n    }\r\n\r\n    function isExpired() public view returns (bool) {\r\n        return block.timestamp >= expiryTime;\r\n    }\r\n\r\n    function isDisputePeriod() public view returns (bool) {\r\n        return block.timestamp >= expiryTime && block.timestamp < expiryTime.add(disputePeriod);\r\n    }\r\n\r\n    function numStrikes() external view returns (uint256) {\r\n        return strikePrices.length;\r\n    }\r\n\r\n    /**\r\n     * Transfer amount from sender and do additional checks\r\n     */\r\n    function _transferIn(uint256 amountIn) private {\r\n        // save gas\r\n        IERC20 _baseToken = baseToken;\r\n        uint256 balanceBefore = _baseToken.uniBalanceOf(address(this));\r\n        _baseToken.uniTransferFromSenderToThis(amountIn);\r\n        uint256 balanceAfter = _baseToken.uniBalanceOf(address(this));\r\n        require(_baseToken.isETH() || balanceAfter.sub(balanceBefore) == amountIn, \"Deflationary tokens not supported\");\r\n        require(balanceCap == 0 || _baseToken.uniBalanceOf(address(this)) <= balanceCap, \"Balance cap exceeded\");\r\n    }\r\n\r\n    // used for guarded launch\r\n    function setBalanceCap(uint256 _balanceCap) external onlyOwner {\r\n        balanceCap = _balanceCap;\r\n    }\r\n\r\n    // used for guarded launch\r\n    function setTotalSupplyCap(uint256 _totalSupplyCap) external onlyOwner {\r\n        totalSupplyCap = _totalSupplyCap;\r\n    }\r\n\r\n    // emergency use only. to be removed in future versions\r\n    function pause() external onlyOwner {\r\n        isPaused = true;\r\n    }\r\n\r\n    // emergency use only. to be removed in future versions\r\n    function unpause() external onlyOwner {\r\n        isPaused = false;\r\n    }\r\n\r\n    // emergency use only. to be removed in future versions\r\n    function setOracle(IOracle _oracle) external onlyOwner {\r\n        oracle = _oracle;\r\n    }\r\n\r\n    // emergency use only. to be removed in future versions\r\n    function setExpiryTime(uint256 _expiryTime) external onlyOwner {\r\n        expiryTime = _expiryTime;\r\n    }\r\n\r\n    // emergency use only. to be removed in future versions\r\n    function setDisputePeriod(uint256 _disputePeriod) external onlyOwner {\r\n        disputePeriod = _disputePeriod;\r\n    }\r\n\r\n    // emergency use only. to be removed in future versions\r\n    function disputeExpiryPrice(uint256 _expiryPrice) external onlyOwner {\r\n        require(isDisputePeriod(), \"Not dispute period\");\r\n        require(isSettled, \"Cannot be called before settlement\");\r\n        expiryPrice = _expiryPrice;\r\n\r\n        // update cached payoff and pool value\r\n        lastPayoff = getCurrentPayoff();\r\n        poolValue = baseToken.uniBalanceOf(address(this)).sub(lastPayoff);\r\n        emit Settle(_expiryPrice);\r\n    }\r\n\r\n    // emergency use only. to be removed in future versions\r\n    function emergencyWithdraw() external onlyOwner {\r\n        baseToken.uniTransfer(msg.sender, baseToken.uniBalanceOf(address(this)));\r\n    }\r\n}\r\n\r\n// File: OptionViews.sol\r\n\r\ncontract OptionViews {\r\n    using Address for address;\r\n    using SafeERC20 for IERC20;\r\n    using SafeMath for uint256;\r\n\r\n    function getBuyOptionCost(\r\n        OptionMarket market,\r\n        bool isLongToken,\r\n        uint256 strikeIndex,\r\n        uint256 optionsOut\r\n    ) external view returns (uint256) {\r\n        uint256 n = market.numStrikes();\r\n        uint256[] memory longOptionsOut = new uint256[](n);\r\n        uint256[] memory shortOptionsOut = new uint256[](n);\r\n        (isLongToken ? longOptionsOut : shortOptionsOut)[strikeIndex] = optionsOut;\r\n        return getBuyCost(market, longOptionsOut, shortOptionsOut, 0);\r\n    }\r\n\r\n    function getSellOptionCost(\r\n        OptionMarket market,\r\n        bool isLongToken,\r\n        uint256 strikeIndex,\r\n        uint256 optionsIn\r\n    ) external view returns (uint256) {\r\n        uint256 n = market.numStrikes();\r\n        uint256[] memory longOptionsIn = new uint256[](n);\r\n        uint256[] memory shortOptionsIn = new uint256[](n);\r\n        (isLongToken ? longOptionsIn : shortOptionsIn)[strikeIndex] = optionsIn;\r\n        return getSellCost(market, longOptionsIn, shortOptionsIn, 0);\r\n    }\r\n\r\n    function getDepositCost(OptionMarket market, uint256 lpSharesOut) external view returns (uint256) {\r\n        uint256 n = market.numStrikes();\r\n        uint256[] memory longOptionsOut = new uint256[](n);\r\n        uint256[] memory shortOptionsOut = new uint256[](n);\r\n        return getBuyCost(market, longOptionsOut, shortOptionsOut, lpSharesOut);\r\n    }\r\n\r\n    function getWithdrawCost(OptionMarket market, uint256 lpSharesIn) external view returns (uint256) {\r\n        uint256 n = market.numStrikes();\r\n        uint256[] memory longOptionsIn = new uint256[](n);\r\n        uint256[] memory shortOptionsIn = new uint256[](n);\r\n        return getSellCost(market, longOptionsIn, shortOptionsIn, lpSharesIn);\r\n    }\r\n\r\n    function getBuyCost(\r\n        OptionMarket market,\r\n        uint256[] memory longOptionsOut,\r\n        uint256[] memory shortOptionsOut,\r\n        uint256 lpSharesOut\r\n    ) public view returns (uint256 cost) {\r\n        require(!market.isExpired(), \"Already expired\");\r\n\r\n        uint256 lpSupply = market.totalSupply();\r\n        uint256[] memory longSupplies = getLongSupplies(market);\r\n        uint256[] memory shortSupplies = getShortSupplies(market);\r\n\r\n        uint256 costBefore = _getLmsrCost(market, longSupplies, shortSupplies, lpSupply);\r\n\r\n        // need to recalculate as mutated by calcLmsrCost\r\n        longSupplies = getLongSupplies(market);\r\n        shortSupplies = getShortSupplies(market);\r\n        uint256 n = market.numStrikes();\r\n        for (uint256 i = 0; i < n; i++) {\r\n            longSupplies[i] = longSupplies[i].add(longOptionsOut[i]);\r\n            shortSupplies[i] = shortSupplies[i].add(shortOptionsOut[i]);\r\n        }\r\n        lpSupply = lpSupply.add(lpSharesOut);\r\n\r\n        cost = _getLmsrCost(market, longSupplies, shortSupplies, lpSupply);\r\n        if (lpSharesOut > 0) {\r\n            cost = cost.add(_getPoolValue(market, lpSharesOut).add(1));\r\n        }\r\n        cost = cost.add(_getFee(market, longOptionsOut, shortOptionsOut));\r\n        cost = cost.sub(costBefore);\r\n    }\r\n\r\n    function getSellCost(\r\n        OptionMarket market,\r\n        uint256[] memory longOptionsIn,\r\n        uint256[] memory shortOptionsIn,\r\n        uint256 lpSharesIn\r\n    ) public view returns (uint256 cost) {\r\n        uint256 lpSupply = market.totalSupply();\r\n        uint256[] memory longSupplies = getLongSupplies(market);\r\n        uint256[] memory shortSupplies = getShortSupplies(market);\r\n\r\n        if (market.isExpired()) {\r\n            cost = _getPayoff(market, longSupplies, shortSupplies);\r\n        } else {\r\n            cost = _getLmsrCost(market, longSupplies, shortSupplies, lpSupply);\r\n        }\r\n\r\n        // need to recalculate as mutated by calcLmsrCost\r\n        longSupplies = getLongSupplies(market);\r\n        shortSupplies = getShortSupplies(market);\r\n\r\n        uint256 n = market.numStrikes();\r\n        for (uint256 i = 0; i < n; i++) {\r\n            longSupplies[i] = longSupplies[i].sub(longOptionsIn[i]);\r\n            shortSupplies[i] = shortSupplies[i].sub(shortOptionsIn[i]);\r\n        }\r\n        lpSupply = lpSupply.sub(lpSharesIn);\r\n\r\n        if (market.isExpired()) {\r\n            cost = cost.sub(_getPayoff(market, longSupplies, shortSupplies));\r\n        } else {\r\n            cost = cost.sub(_getLmsrCost(market, longSupplies, shortSupplies, lpSupply));\r\n        }\r\n\r\n        cost = cost.add(_getPoolValue(market, lpSharesIn));\r\n    }\r\n\r\n    function getStrikePrices(OptionMarket market) public view returns (uint256[] memory strikePrices) {\r\n        uint256 n = market.numStrikes();\r\n        strikePrices = new uint256[](n);\r\n        for (uint256 i = 0; i < n; i++) {\r\n            strikePrices[i] = market.strikePrices(i);\r\n        }\r\n    }\r\n\r\n    function getLongSupplies(OptionMarket market) public view returns (uint256[] memory longSupplies) {\r\n        uint256 n = market.numStrikes();\r\n        longSupplies = new uint256[](n);\r\n        for (uint256 i = 0; i < n; i++) {\r\n            longSupplies[i] = market.longTokens(i).totalSupply();\r\n        }\r\n    }\r\n\r\n    function getShortSupplies(OptionMarket market) public view returns (uint256[] memory shortSupplies) {\r\n        uint256 n = market.numStrikes();\r\n        shortSupplies = new uint256[](n);\r\n        for (uint256 i = 0; i < n; i++) {\r\n            shortSupplies[i] = market.shortTokens(i).totalSupply();\r\n        }\r\n    }\r\n\r\n    function _getLmsrCost(\r\n        OptionMarket market,\r\n        uint256[] memory longSupplies,\r\n        uint256[] memory shortSupplies,\r\n        uint256 lpSupply\r\n    ) internal view returns (uint256) {\r\n        uint256[] memory quantities = OptionMath.calcQuantities(\r\n            getStrikePrices(market),\r\n            market.isPut(),\r\n            longSupplies,\r\n            shortSupplies\r\n        );\r\n        return OptionMath.calcLmsrCost(quantities, lpSupply);\r\n    }\r\n\r\n    function _getPayoff(\r\n        OptionMarket market,\r\n        uint256[] memory longSupplies,\r\n        uint256[] memory shortSupplies\r\n    ) internal view returns (uint256) {\r\n        return\r\n            OptionMath.calcPayoff(\r\n                getStrikePrices(market),\r\n                market.expiryPrice(),\r\n                market.isPut(),\r\n                longSupplies,\r\n                shortSupplies\r\n            );\r\n    }\r\n\r\n    function _getFee(\r\n        OptionMarket market,\r\n        uint256[] memory longOptionsOut,\r\n        uint256[] memory shortOptionsOut\r\n    ) internal view returns (uint256) {\r\n        uint256 scale = market.SCALE();\r\n        bool isPut = market.isPut();\r\n\r\n        uint256 total;\r\n        uint256 n = market.numStrikes();\r\n        for (uint256 i = 0; i < n; i++) {\r\n            if (isPut) {\r\n                uint256 strike = market.strikePrices(i);\r\n                total = total.add(longOptionsOut[i].mul(strike).div(scale));\r\n                total = total.add(shortOptionsOut[i].mul(strike).div(scale));\r\n            } else {\r\n                total = total.add(longOptionsOut[i]);\r\n                total = total.add(shortOptionsOut[i]);\r\n            }\r\n        }\r\n        return total.mul(market.tradingFee()).div(scale);\r\n    }\r\n\r\n    function _getPoolValue(OptionMarket market, uint256 lpShares) internal view returns (uint256) {\r\n        uint256 totalSupply = market.totalSupply();\r\n        if (totalSupply == 0) {\r\n            return 0;\r\n        }\r\n        return market.poolValue().mul(lpShares).div(totalSupply);\r\n    }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"contract OptionMarket\",\"name\":\"market\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"longOptionsOut\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"shortOptionsOut\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"lpSharesOut\",\"type\":\"uint256\"}],\"name\":\"getBuyCost\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"cost\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract OptionMarket\",\"name\":\"market\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isLongToken\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"strikeIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"optionsOut\",\"type\":\"uint256\"}],\"name\":\"getBuyOptionCost\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract OptionMarket\",\"name\":\"market\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"lpSharesOut\",\"type\":\"uint256\"}],\"name\":\"getDepositCost\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract OptionMarket\",\"name\":\"market\",\"type\":\"address\"}],\"name\":\"getLongSupplies\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"longSupplies\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract OptionMarket\",\"name\":\"market\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"longOptionsIn\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"shortOptionsIn\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"lpSharesIn\",\"type\":\"uint256\"}],\"name\":\"getSellCost\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"cost\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract OptionMarket\",\"name\":\"market\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isLongToken\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"strikeIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"optionsIn\",\"type\":\"uint256\"}],\"name\":\"getSellOptionCost\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract OptionMarket\",\"name\":\"market\",\"type\":\"address\"}],\"name\":\"getShortSupplies\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"shortSupplies\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract OptionMarket\",\"name\":\"market\",\"type\":\"address\"}],\"name\":\"getStrikePrices\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"strikePrices\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract OptionMarket\",\"name\":\"market\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"lpSharesIn\",\"type\":\"uint256\"}],\"name\":\"getWithdrawCost\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"OptionViews","CompilerVersion":"v0.6.12+commit.27d51765","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"ipfs://effdad5e87dc9eaa0b0a20e2cfca393ddd8a2d9cc157dd805007a195184a6e50"}]}