{"status":"1","message":"OK","result":[{"SourceCode":"{\"sale.sol\":{\"content\":\"pragma solidity ^0.5.0;\\r\\n\\r\\nimport \\\"./token.sol\\\";\\r\\n\\r\\ncontract TokenSale {\\r\\n    address payable admin;\\r\\n    Token public tokenContract;\\r\\n\\r\\n\\r\\n    constructor(Token _tokenContract) public {\\r\\n        admin = msg.sender;\\r\\n        tokenContract = _tokenContract;\\r\\n    }\\r\\n\\r\\n    function buyTokens(uint256 _numberOfTokens) public payable{\\r\\n        \\r\\n        require(\\r\\n            _numberOfTokens == msg.value / 10**14,\\r\\n            \\\"Number of tokens does not match with the value\\\"\\r\\n        );\\r\\n        \\r\\n\\r\\n        require(\\r\\n            tokenContract.balanceOf(address(this)) \\u003e= _numberOfTokens,\\r\\n            \\\"Contact does not have enough tokens\\\"\\r\\n        );\\r\\n        require(\\r\\n            tokenContract.transfer(msg.sender, _numberOfTokens),\\r\\n            \\\"Some problem with token transfer\\\"\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function endSale() public {\\r\\n        require(msg.sender == admin, \\\"Only the admin can call this function\\\");\\r\\n        require(\\r\\n            tokenContract.transfer(\\r\\n                address(0),\\r\\n                tokenContract.balanceOf(address(this))\\r\\n            ),\\r\\n            \\\"Unable to transfer tokens to 0x0000\\\"\\r\\n        );\\r\\n        selfdestruct(admin);\\r\\n    }\\r\\n    \\r\\n    function expenses(uint256 _expenses) public {\\r\\n        require(msg.sender == admin, \\\"Only the admin can call this function\\\");\\r\\n        msg.sender.transfer(_expenses);\\r\\n    }\\r\\n    \\r\\n    function()payable external{}\\r\\n}\"},\"token.sol\":{\"content\":\"pragma solidity ^0.5.0;\\r\\n\\r\\ncontract Token {\\r\\n    string public name = \\\"CHIAX Token\\\"; \\r\\n    string public symbol = \\\"XCHX\\\"; \\r\\n    uint256 public totalSupply;\\r\\n\\r\\n    event Transfer(address indexed _from, address indexed _to, uint256 _value);\\r\\n\\r\\n    event Approval(\\r\\n        address indexed _owner,\\r\\n        address indexed _spender,\\r\\n        uint256 _value\\r\\n    );\\r\\n\\r\\n    mapping(address =\\u003e uint256) public balanceOf;\\r\\n    mapping(address =\\u003e mapping(address =\\u003e uint256)) public allowance;\\r\\n\\r\\n    constructor(uint256 _initialSupply) public {\\r\\n        balanceOf[msg.sender] = _initialSupply;\\r\\n        totalSupply = _initialSupply;\\r\\n    }\\r\\n\\r\\n    function transfer(address _to, uint256 _value)\\r\\n        public\\r\\n        returns (bool success)\\r\\n    {\\r\\n        require(balanceOf[msg.sender] \\u003e= _value, \\\"Not enough balance\\\");\\r\\n        balanceOf[msg.sender] -= _value;\\r\\n        balanceOf[_to] += _value;\\r\\n        emit Transfer(msg.sender, _to, _value);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    function approve(address _spender, uint256 _value)\\r\\n        public\\r\\n        returns (bool success)\\r\\n    {\\r\\n        allowance[msg.sender][_spender] = _value;\\r\\n        emit Approval(msg.sender, _spender, _value);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    function transferFrom(\\r\\n        address _from,\\r\\n        address _to,\\r\\n        uint256 _value\\r\\n    ) public returns (bool success) {\\r\\n        require(\\r\\n            balanceOf[_from] \\u003e= _value,\\r\\n            \\\"_from does not have enough tokens\\\"\\r\\n        );\\r\\n        require(\\r\\n            allowance[_from][msg.sender] \\u003e= _value,\\r\\n            \\\"Spender limit exceeded\\\"\\r\\n        );\\r\\n        balanceOf[_from] -= _value;\\r\\n        balanceOf[_to] += _value;\\r\\n        allowance[_from][msg.sender] -= _value;\\r\\n        emit Transfer(_from, _to, _value);\\r\\n        return true;\\r\\n    }\\r\\n}\"}}","ABI":"[{\"inputs\":[{\"internalType\":\"contract Token\",\"name\":\"_tokenContract\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_numberOfTokens\",\"type\":\"uint256\"}],\"name\":\"buyTokens\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"endSale\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_expenses\",\"type\":\"uint256\"}],\"name\":\"expenses\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokenContract\",\"outputs\":[{\"internalType\":\"contract Token\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"TokenSale","CompilerVersion":"v0.5.17+commit.d19bba13","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"00000000000000000000000003c5526fb1f3703cdfdbffa4ced004653128e73a","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"bzzr://13350e4f457ed6bf1e3448f25462dd7dab95d6e32e523cb324e7e92a6460d870"}]}