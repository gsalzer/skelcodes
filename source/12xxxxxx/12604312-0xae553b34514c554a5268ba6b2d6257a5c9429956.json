{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/TVLManager.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.6.11;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\nimport \\\"./utils/EnumerableSet.sol\\\";\\nimport \\\"./interfaces/IAssetAllocation.sol\\\";\\nimport \\\"./interfaces/ITVLManager.sol\\\";\\nimport \\\"./interfaces/IOracleAdapter.sol\\\";\\nimport \\\"./interfaces/IAddressRegistryV2.sol\\\";\\n\\n/// @title TVL Manager\\n/// @author APY.Finance\\n/// @notice Deployed assets can exist across various platforms within the\\n/// defi ecosystem: pools, accounts, defi protocols, etc. This contract\\n/// tracks deployed capital by registering the look up functions so that\\n/// the TVL can be properly computed.\\n/// @dev It is imperative that this manager has the most up to date asset\\n/// allocations registered. Any assets in the system that have been deployed,\\n/// but are not registered can have devastating and catastrophic effects on the TVL.\\ncontract TVLManager is Ownable, ReentrancyGuard, ITVLManager, IAssetAllocation {\\n    using EnumerableSet for EnumerableSet.Bytes32Set;\\n    using Address for address;\\n\\n    IAddressRegistryV2 public addressRegistry;\\n\\n    // all registered allocation ids\\n    EnumerableSet.Bytes32Set private _allocationIds;\\n    // ids mapped to data\\n    mapping(bytes32 => Data) private _allocationData;\\n    // ids mapped to symbol\\n    mapping(bytes32 => string) private _allocationSymbols;\\n    // ids mapped to decimals\\n    mapping(bytes32 => uint256) private _allocationDecimals;\\n\\n    /// @notice Constructor TVLManager\\n    /// @param _addressRegistry the address registry to initialize with\\n    constructor(address _addressRegistry) public {\\n        setAddressRegistry(_addressRegistry);\\n    }\\n\\n    /// @dev Reverts if non-permissed account calls.\\n    /// Permissioned accounts are: owner, pool manager, and account manager\\n    modifier onlyPermissioned() {\\n        require(\\n            msg.sender == owner() ||\\n                msg.sender == addressRegistry.poolManagerAddress() ||\\n                msg.sender == addressRegistry.lpSafeAddress(),\\n            \\\"PERMISSIONED_ONLY\\\"\\n        );\\n        _;\\n    }\\n\\n    function lockOracleAdapter() internal {\\n        IOracleAdapter oracleAdapter =\\n            IOracleAdapter(addressRegistry.oracleAdapterAddress());\\n        oracleAdapter.lock();\\n    }\\n\\n    /// @notice Registers a new asset allocation\\n    /// @dev only permissed accounts can call.\\n    /// New ids are uniquely determined by the provided data struct; no duplicates are allowed\\n    /// @param data the data struct containing the target address and the bytes lookup data that will be registered\\n    /// @param symbol the token symbol to register for the asset allocation\\n    /// @param decimals the decimals to register for the new asset allocation\\n    function addAssetAllocation(\\n        Data memory data,\\n        string calldata symbol,\\n        uint256 decimals\\n    ) external override nonReentrant onlyPermissioned {\\n        require(!isAssetAllocationRegistered(data), \\\"DUPLICATE_DATA_DETECTED\\\");\\n        bytes32 dataHash = generateDataHash(data);\\n        _allocationIds.add(dataHash);\\n        _allocationData[dataHash] = data;\\n        _allocationSymbols[dataHash] = symbol;\\n        _allocationDecimals[dataHash] = decimals;\\n        lockOracleAdapter();\\n    }\\n\\n    /// @notice Removes an existing asset allocation\\n    /// @dev only permissed accounts can call.\\n    /// @param data the data struct containing the target address and bytes lookup data that will be removed\\n    function removeAssetAllocation(Data memory data)\\n        external\\n        override\\n        nonReentrant\\n        onlyPermissioned\\n    {\\n        require(isAssetAllocationRegistered(data), \\\"ALLOCATION_DOES_NOT_EXIST\\\");\\n        bytes32 dataHash = generateDataHash(data);\\n        _allocationIds.remove(dataHash);\\n        delete _allocationData[dataHash];\\n        delete _allocationSymbols[dataHash];\\n        delete _allocationDecimals[dataHash];\\n        lockOracleAdapter();\\n    }\\n\\n    /// @notice Generates a data hash used for uniquely identifying asset allocations\\n    /// @param data the data hash containing the target address and the bytes lookup data\\n    /// @return returns the resulting bytes32 hash of the abi encode packed target address and bytes look up data\\n    function generateDataHash(Data memory data)\\n        public\\n        pure\\n        override\\n        returns (bytes32)\\n    {\\n        return keccak256(abi.encodePacked(data.target, data.data));\\n    }\\n\\n    /// @notice determines if a target address and bytes lookup data has already been registered\\n    /// @param data the data hash containing the target address and the bytes lookup data\\n    /// @return returns true if the asset allocation is currently registered, otherwise false\\n    function isAssetAllocationRegistered(Data memory data)\\n        public\\n        view\\n        override\\n        returns (bool)\\n    {\\n        return _isAssetAllocationRegistered(generateDataHash(data));\\n    }\\n\\n    /// @notice helper function for isAssetallocationRegistered function\\n    /// @param data the bytes32 hash\\n    /// @return returns true if the asset allocation is currently registered, otherwise false\\n    function _isAssetAllocationRegistered(bytes32 data)\\n        public\\n        view\\n        returns (bool)\\n    {\\n        return _allocationIds.contains(data);\\n    }\\n\\n    /// @notice Returns a list of all identifiers where asset allocations have been registered\\n    /// @dev the list contains no duplicate identifiers\\n    /// @return list of all the registered identifiers\\n    function getAssetAllocationIds()\\n        external\\n        view\\n        override\\n        returns (bytes32[] memory)\\n    {\\n        uint256 length = _allocationIds.length();\\n        bytes32[] memory allocationIds = new bytes32[](length);\\n        for (uint256 i = 0; i < length; i++) {\\n            allocationIds[i] = _allocationIds.at(i);\\n        }\\n        return allocationIds;\\n    }\\n\\n    /// @notice Executes the bytes lookup data registered under an id\\n    /// @dev The balance of an id may be aggregated from multiple contracts\\n    /// @param allocationId the id to fetch the balance for\\n    /// @return returns the result of the executed lookup data registered for the provided id\\n    function balanceOf(bytes32 allocationId)\\n        external\\n        view\\n        override\\n        returns (uint256)\\n    {\\n        require(\\n            _isAssetAllocationRegistered(allocationId),\\n            \\\"INVALID_ALLOCATION_ID\\\"\\n        );\\n        Data memory data = _allocationData[allocationId];\\n        bytes memory returnData = executeView(data);\\n\\n        uint256 _balance;\\n        assembly {\\n            _balance := mload(add(returnData, 0x20))\\n        }\\n\\n        return _balance;\\n    }\\n\\n    /// @notice Returns the token symbol registered under an id\\n    /// @param allocationId the id to fetch the token for\\n    /// @return returns the result of the token symbol registered for the provided id\\n    function symbolOf(bytes32 allocationId)\\n        external\\n        view\\n        override\\n        returns (string memory)\\n    {\\n        return _allocationSymbols[allocationId];\\n    }\\n\\n    /// @notice Returns the decimals registered under an id\\n    /// @param allocationId the id to fetch the decimals for\\n    /// @return returns the result of the decimal value registered for the provided id\\n    function decimalsOf(bytes32 allocationId)\\n        external\\n        view\\n        override\\n        returns (uint256)\\n    {\\n        return _allocationDecimals[allocationId];\\n    }\\n\\n    /// @notice Executes data's bytes look up data against data's target address\\n    /// @dev execution is a static call\\n    /// @param data the data hash containing the target address and the bytes lookup data to execute\\n    /// @return returnData returns return data from the executed contract\\n    function executeView(Data memory data)\\n        public\\n        view\\n        returns (bytes memory returnData)\\n    {\\n        returnData = data.target.functionStaticCall(data.data);\\n    }\\n\\n    /**\\n     * @notice Sets the address registry\\n     * @dev only callable by owner\\n     * @param _addressRegistry the address of the registry\\n     */\\n    function setAddressRegistry(address _addressRegistry) public onlyOwner {\\n        require(Address.isContract(_addressRegistry), \\\"INVALID_ADDRESS\\\");\\n        addressRegistry = IAddressRegistryV2(_addressRegistry);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor () internal {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/ReentrancyGuard.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor () internal {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and make it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.2 <0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/utils/EnumerableSet.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.11;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n */\\n\\n/* solhint-disable */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping (bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) { // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            // When the value to delete is the last one, the swap operation is unnecessary. However, since this occurs\\n            // so rarely, we still do the swap anyway to avoid the gas cost of adding an 'if' statement.\\n\\n            bytes32 lastvalue = set._values[lastIndex];\\n\\n            // Move the last value to the index where the value to delete is\\n            set._values[toDeleteIndex] = lastvalue;\\n            // Update the index for the moved value\\n            set._indexes[lastvalue] = toDeleteIndex + 1; // All indexes are 1-based\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        require(set._values.length > index, \\\"EnumerableSet: index out of bounds\\\");\\n        return set._values[index];\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IAssetAllocation.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.6.11;\\n\\n/// @title Interface to Access APY.Finance's Asset Allocations\\n/// @author APY.Finance\\n/// @notice Enables 3rd Parties (ie. Chainlink) to pull relevant asset allocations\\n/// in order to compute the TVL across the entire APY.Finance system.\\ninterface IAssetAllocation {\\n    /// @notice Returns a list of all identifiers where asset allocations have been registered\\n    /// @dev the list contains no duplicate identifiers\\n    /// @return list of all the registered identifiers\\n    function getAssetAllocationIds() external view returns (bytes32[] memory);\\n\\n    /// @notice Executes the bytes lookup data registered under an id\\n    /// @dev The balance of an id may be aggregated from multiple contracts\\n    /// @param allocationId the id to fetch the balance for\\n    /// @return returns the result of the executed lookup data registered for the provided id\\n    function balanceOf(bytes32 allocationId) external view returns (uint256);\\n\\n    /// @notice Returns the token symbol registered under an id\\n    /// @param allocationId the id to fetch the token for\\n    /// @return returns the result of the token symbol registered for the provided id\\n    function symbolOf(bytes32 allocationId)\\n        external\\n        view\\n        returns (string memory);\\n\\n    /// @notice Returns the decimals registered under an id\\n    /// @param allocationId the id to fetch the decimals for\\n    /// @return returns the result of the decimal value registered for the provided id\\n    function decimalsOf(bytes32 allocationId) external view returns (uint256);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/ITVLManager.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.6.11;\\npragma experimental ABIEncoderV2;\\n\\n/**\\n * @title Interface for addition and removal of asset allocations\\n          for account deployments\\n * @author APY.Finance\\n * @notice These functions enable external systems to pull necessary info\\n *         to compute the TVL of the APY.Finance system.\\n */\\ninterface ITVLManager {\\n    // struct representing a view call execution against a target contract given bytes\\n    // target is the target contract to execute view calls against\\n    // bytes data represents the encoded function signature + parameters\\n    struct Data {\\n        address target;\\n        bytes data;\\n    }\\n\\n    // struct representing the relevant pieces of data that need to be provided when registering an asset allocation\\n    // symbol is the symbol of the token that the resulting view call execution will need to be evaluated as\\n    // decimals is the number of decimals that the resulting view call execution will need to be evaluated as\\n    // data is the struct representing the view call execution\\n    struct AssetAllocation {\\n        string symbol;\\n        uint256 decimals;\\n        Data data;\\n    }\\n\\n    function addAssetAllocation(\\n        Data calldata data,\\n        string calldata symbol,\\n        uint256 decimals\\n    ) external;\\n\\n    function removeAssetAllocation(Data calldata data) external;\\n\\n    function generateDataHash(Data calldata data)\\n        external\\n        pure\\n        returns (bytes32);\\n\\n    function isAssetAllocationRegistered(Data calldata data)\\n        external\\n        view\\n        returns (bool);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IOracleAdapter.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.6.11;\\n\\ninterface IOracleAdapter {\\n    struct Value {\\n        uint256 value;\\n        uint256 periodEnd;\\n    }\\n\\n    function setTvl(uint256 value, uint256 period) external;\\n\\n    function setAssetValue(\\n        address asset,\\n        uint256 value,\\n        uint256 period\\n    ) external;\\n\\n    function lock() external;\\n\\n    function defaultLockPeriod() external returns (uint256 period);\\n\\n    function setDefaultLockPeriod(uint256 period) external;\\n\\n    function lockFor(uint256 period) external;\\n\\n    function unlock() external;\\n\\n    function getAssetPrice(address asset) external view returns (uint256);\\n\\n    function getTvl() external view returns (uint256);\\n\\n    function isLocked() external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IAddressRegistryV2.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.6.11;\\n\\n/**\\n * @title Interface to access APY.Finance's address registry\\n * @author APY.Finance\\n * @notice The address registry has two important purposes, one which\\n *         is fairly concrete and another abstract.\\n *\\n *         1. The registry enables components of the APY.Finance system\\n *         and external systems to retrieve core addresses reliably\\n *         even when the functionality may move to a different\\n *         address.\\n *\\n *         2. The registry also makes explicit which contracts serve\\n *         as primary entrypoints for interacting with different\\n *         components.  Not every contract is registered here, only\\n *         the ones properly deserving of an identifier.  This helps\\n *         define explicit boundaries between groups of contracts,\\n *         each of which is logically cohesive.\\n */\\ninterface IAddressRegistryV2 {\\n    /**\\n     * @notice Returns the list of identifiers for core components of\\n     *         the APY.Finance system.\\n     * @return List of identifiers\\n     */\\n    function getIds() external view returns (bytes32[] memory);\\n\\n    /**\\n     * @notice Returns the current address represented by an identifier\\n     *         for a core component.\\n     * @param id Component identifier\\n     * @return The current address represented by an identifier\\n     */\\n    function getAddress(bytes32 id) external view returns (address);\\n\\n    function poolManagerAddress() external view returns (address);\\n\\n    function tvlManagerAddress() external view returns (address);\\n\\n    function chainlinkRegistryAddress() external view returns (address);\\n\\n    function daiPoolAddress() external view returns (address);\\n\\n    function usdcPoolAddress() external view returns (address);\\n\\n    function usdtPoolAddress() external view returns (address);\\n\\n    function mAptAddress() external view returns (address);\\n\\n    function lpSafeAddress() external view returns (address);\\n\\n    function oracleAdapterAddress() external view returns (address);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 999999\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addressRegistry\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"data\",\"type\":\"bytes32\"}],\"name\":\"_isAssetAllocationRegistered\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"internalType\":\"struct ITVLManager.Data\",\"name\":\"data\",\"type\":\"tuple\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"decimals\",\"type\":\"uint256\"}],\"name\":\"addAssetAllocation\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"addressRegistry\",\"outputs\":[{\"internalType\":\"contract IAddressRegistryV2\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"allocationId\",\"type\":\"bytes32\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"allocationId\",\"type\":\"bytes32\"}],\"name\":\"decimalsOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"internalType\":\"struct ITVLManager.Data\",\"name\":\"data\",\"type\":\"tuple\"}],\"name\":\"executeView\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"returnData\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"internalType\":\"struct ITVLManager.Data\",\"name\":\"data\",\"type\":\"tuple\"}],\"name\":\"generateDataHash\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAssetAllocationIds\",\"outputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"\",\"type\":\"bytes32[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"internalType\":\"struct ITVLManager.Data\",\"name\":\"data\",\"type\":\"tuple\"}],\"name\":\"isAssetAllocationRegistered\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"internalType\":\"struct ITVLManager.Data\",\"name\":\"data\",\"type\":\"tuple\"}],\"name\":\"removeAssetAllocation\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addressRegistry\",\"type\":\"address\"}],\"name\":\"setAddressRegistry\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"allocationId\",\"type\":\"bytes32\"}],\"name\":\"symbolOf\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"TVLManager","CompilerVersion":"v0.6.11+commit.5ef660b1","OptimizationUsed":"1","Runs":"999999","ConstructorArguments":"0000000000000000000000007ec81b7035e91f8435bdeb2787dcbd51116ad303","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}