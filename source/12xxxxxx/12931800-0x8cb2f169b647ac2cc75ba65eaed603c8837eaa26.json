{"status":"1","message":"OK","result":[{"SourceCode":"// SPDX-License-Identifier: UNLICENSED\r\npragma solidity 0.7.6;\r\n\r\n\r\n// ----------------------------------------------------------------------------\r\n// SafeMath library\r\n// ----------------------------------------------------------------------------\r\n\r\n\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts with custom message when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n    \r\n    function ceil(uint a, uint m) internal pure returns (uint r) {\r\n        return (a + m - 1) / m * m;\r\n    }\r\n}\r\n\r\n// ----------------------------------------------------------------------------\r\n// Owned contract\r\n// ----------------------------------------------------------------------------\r\ncontract Owned {\r\n    address payable public owner;\r\n\r\n    event OwnershipTransferred(address indexed _from, address indexed _to);\r\n\r\n    constructor() {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    modifier onlyOwner {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n    function transferOwnership(address payable _newOwner) public onlyOwner {\r\n        require(_newOwner != address(0), \"ERC20: sending to the zero address\");\r\n        owner = _newOwner;\r\n        emit OwnershipTransferred(msg.sender, _newOwner);\r\n    }\r\n}\r\n\r\n// ----------------------------------------------------------------------------\r\n// ERC Token Standard #20 Interface\r\n// ----------------------------------------------------------------------------\r\ninterface IERC20 {\r\n    function totalSupply() external view returns (uint256);\r\n    function balanceOf(address tokenOwner) external view returns (uint256 balance);\r\n    function allowance(address tokenOwner, address spender) external view returns (uint256 remaining);\r\n    function transfer(address to, uint256 tokens) external returns (bool success);\r\n    function approve(address spender, uint256 tokens) external returns (bool success);\r\n    function transferFrom(\r\n        address src, address dst, uint amt\r\n    ) external returns (bool);\r\n    function burnTokens(uint256 _amount) external;\r\n    \r\n    function calculateFeesBeforeSend(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) external view returns (uint256, uint256);\r\n    \r\n    \r\n    event Transfer(address indexed from, address indexed to, uint256 tokens);\r\n    event Approval(address indexed tokenOwner, address indexed spender, uint256 tokens);\r\n}\r\n\r\n\r\ninterface stakeContract {\r\n    function DisributeTxFunds() external;\r\n    function ADDFUNDS(uint256 tokens) external;\r\n    function ADDFUNDS1(uint256 tokens) external;\r\n}\r\n\r\ninterface stakeContract1 {\r\n    function ADDFUNDS1(uint256 tokens) external;\r\n    function ADDFUNDS2(uint256 tokens) external;\r\n    function ADDFUNDS3(uint256 tokens) external;\r\n    function totalSupply() external returns (uint);\r\n}\r\n\r\ninterface FEGex2 {\r\n    function SELL(\r\n        address to,\r\n        uint tokenAmountIn,\r\n        uint minAmountOut\r\n    ) \r\n        external\r\n        returns (uint tokenAmountOut, uint spotPriceAfter);\r\n}\r\n\r\ninterface wrap {\r\n    function deposit() external payable;\r\n    function withdraw(uint amt) external;\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n}\r\n\r\ncontract ShareDistributor is Owned {\r\n    using SafeMath for uint256;\r\n    \r\n    address public fETH    = 0xf786c34106762Ab4Eeb45a51B42a62470E9D5332;\r\n    address public fUSDT   = 0x979838c9C16FD365C9fE028B0bEa49B1750d86e9;\r\n    address public fBTC    = 0xe3cDB92b094a3BeF3f16103b53bECfb17A3558ad;\r\n    address public other   = 0x94D4Ac11689C6EbbA91cDC1430fc7dfa9a858753;\r\n    address public deploy  = 0x3B30Bac3c331168e40FC6338BA2295A2F3adDe52;\r\n    address public FEG     = 0x389999216860AB8E0175387A0c90E5c52522C945;\r\n    address public v2pair  = 0xa40462266dC28dB1d570FC8F8a0F4B72B8618f7a;\r\n    address public stake1  = 0x5bCF1f407c0fc922074283B4e11DaaF539f6644D;\r\n    address public stake2  = 0x4a9D6b95459eb9532B7E4d82Ca214a3b20fa2358;\r\n    uint public v1Share = 36;\r\n    uint public v2Share = 12;\r\n    uint public give = 50;\r\n    bool public sell = true;\r\n    uint256 public must  = 5e17;\r\n    uint256 public must1 = 200e18;\r\n    uint256 public must2 = 5e15;\r\n    uint256 public totaldist  = 0; // Total other rewards fETH\r\n    uint256 public totaldist1 = 0; // Total other rewards fUSDT\r\n    uint256 public totaldist2 = 0; // Total other rewards fBTC\r\n    \r\n    \r\n    stakeContract stakingContract; //FEG staking v1 contract address\r\n    stakeContract1 v2stakingContract; //FEG v2 staking contract address\r\n    FEGex2 fegexpair;\r\n    wrap wrapp;\r\n    \r\n    receive() external payable {\r\n    }\r\n\r\n    constructor() {\r\n        owner = msg.sender;\r\n        stakingContract     = stakeContract(stake1);\r\n        v2stakingContract   = stakeContract1(stake2);\r\n        fegexpair = FEGex2(v2pair);\r\n        wrapp = wrap(fETH);\r\n    }\r\n    \r\n    function changeWrap(wrap _wrapp) external onlyOwner{ // Incase FEGex updates in future\r\n        require(address(_wrapp) != address(0), \"setting 0 to contract\"); \r\n        wrapp = _wrapp;\r\n    }\r\n    \r\n    function updateBase(address _BTC, address _ETH, address _USDT) external onlyOwner{ // Incase wraps ever update\r\n        fBTC = _BTC;\r\n        fETH = _ETH;\r\n        fUSDT = _USDT;\r\n    }\r\n    \r\n    function changeStakingContract(stakeContract _stakingContract) external onlyOwner{\r\n        require(address(_stakingContract) != address(0), \"setting 0 to contract\");\r\n        stakingContract = _stakingContract;\r\n    }\r\n    \r\n    function changeLPStakingContract(stakeContract1 _v2StakingContract) external onlyOwner{\r\n        require(address(_v2StakingContract) != address(0), \"setting 0 to contract\");\r\n        v2stakingContract = _v2StakingContract;\r\n    }\r\n    \r\n    function changeFEGExPair(FEGex2 _fegexpair) external onlyOwner{\r\n        require(address(_fegexpair) != address(0), \"setting 0 to contract\");\r\n        fegexpair = _fegexpair;\r\n    }\r\n    \r\n    function changeDeploy(address _deploy) external onlyOwner{\r\n        require(address(_deploy) != address(0), \"setting 0 to contract\");\r\n        deploy = _deploy;\r\n    }\r\n    \r\n    function changeV2Pair(address _V2) external onlyOwner{\r\n        v2pair = _V2;\r\n    }\r\n    \r\n    function changeOther(address _other) external onlyOwner{\r\n        other = _other;\r\n    }\r\n    \r\n    function changeMust(uint256 _must, uint256 _must1, uint256 _must2) external onlyOwner{\r\n        require(_must >= 5e17, \"_must must be greater then 0.5\");\r\n        require(_must1 >= 200e18, \"_must1 must be greater then 20\");\r\n        require(_must2 >= 5e15, \"_must2 must be greater then 0.005\");\r\n        must = _must;\r\n        must1 = _must1;\r\n        must2 = _must2;\r\n    } \r\n\r\n    function changeSell(bool _bool) external onlyOwner{\r\n        sell = _bool;\r\n    }\r\n    \r\n    function changeGive(uint _give) external onlyOwner{\r\n        require(_give >= 20, \"over 20% required\");\r\n        give = _give;\r\n    }\r\n    \r\n    function changeRewardShare(uint _v1rs, uint _v2rs) external onlyOwner{\r\n        require(_v1rs + _v2rs <= 48, \"Must be under 0.12%\"); // Total of both v1 and v2 share is 48% of the 0.25% collected from FEGex, this determines the reward split to each pool.\r\n        require(_v1rs !=0 && _v2rs !=0, \"Cannot set to 0\");\r\n        v1Share = _v1rs;\r\n        v2Share = _v2rs;\r\n    }\r\n   \r\n\r\n    function distributeAll() public{\r\n        \r\n        if(IERC20(fETH).balanceOf(address(this)) > must){\r\n        uint256 amount = (IERC20(fETH).balanceOf(address(this)).mul(995).div(1000)).sub(totaldist);\r\n        uint256 v1Balance = IERC20(FEG).balanceOf(address(stakingContract));\r\n        uint256 v2Balance = IERC20(FEG).balanceOf(address(v2stakingContract));\r\n        uint256 fETHbalanceToDistribute = amount.mul(v1Share.add(v2Share)).div(100);\r\n        uint256 total = v1Balance.add(v2Balance);\r\n        uint256 fETHbalanceToDistributeToV1 = fETHbalanceToDistribute.mul(v1Balance).div(total);\r\n        uint256 fETHbalanceToDistributeToV2 = fETHbalanceToDistribute - fETHbalanceToDistributeToV1;\r\n        \r\n        require(IERC20(fETH).transfer(address(stakingContract), fETHbalanceToDistributeToV1), \"Tokens cannot be transferred from funder account\");\r\n        stakingContract.ADDFUNDS(fETHbalanceToDistributeToV1);\r\n        \r\n        require(IERC20(fETH).transfer(address(v2stakingContract), fETHbalanceToDistributeToV2), \"Tokens cannot be transferred from funder account\");\r\n        v2stakingContract.ADDFUNDS1(fETHbalanceToDistributeToV2);  \r\n        \r\n        uint256 amountFinal     = amount.sub(fETHbalanceToDistributeToV2.add(fETHbalanceToDistributeToV1));\r\n        totaldist = totaldist.add(amountFinal);\r\n        \r\n        }\r\n    \r\n        if(IERC20(fUSDT).balanceOf(address(this)) > must1){\r\n        uint256 amountmust1 = (IERC20(fUSDT).balanceOf(address(this)).mul(995).div(1000)).sub(totaldist1);\r\n        uint256 stakeshare = amountmust1.mul(48).div(100); \r\n        uint256 othershare = amountmust1.sub(stakeshare);\r\n        v2stakingContract.ADDFUNDS2(stakeshare); \r\n        totaldist1 = totaldist1.add(othershare);\r\n        }\r\n    \r\n        if(IERC20(fBTC).balanceOf(address(this)) > must2){\r\n        uint256 amountmust2 = (IERC20(fBTC).balanceOf(address(this)).mul(995).div(1000)).sub(totaldist2);\r\n        uint256 stakeshare2 = amountmust2.mul(48).div(100); \r\n        uint256 othershare2 = amountmust2.sub(stakeshare2);\r\n        v2stakingContract.ADDFUNDS3(stakeshare2); \r\n        totaldist2 = totaldist2.add(othershare2);\r\n        }   \r\n    \r\n        if(sell==true){\r\n        distributeSell();\r\n        }\r\n    } \r\n    \r\n    function distributeSell() internal{ \r\n        stakingContract.DisributeTxFunds();\r\n        uint256 stakesell       = IERC20(FEG).balanceOf(address(deploy)).div(give);\r\n        bool xfer = IERC20(FEG).transferFrom(deploy, address(this), stakesell);\r\n        require(xfer, \"ERR_ERC20_FALSE\");\r\n        fegexpair.SELL(address(this), IERC20(FEG).balanceOf(address(this)), 100);\r\n        wrap(fETH).deposit{value: address(this).balance}();\r\n        uint256 wrapped = (IERC20(fETH).balanceOf(address(this)).mul(uint256(995)).div(1000)).sub(totaldist);\r\n        stakingContract.ADDFUNDS1(wrapped);\r\n    }\r\n    \r\n    function distributeV2() public{\r\n       if(IERC20(fETH).balanceOf(address(this)) > must){\r\n        uint256 amount = (IERC20(fETH).balanceOf(address(this)).mul(995).div(1000)).sub(totaldist);\r\n        uint256 v1Balance = IERC20(FEG).balanceOf(address(stakingContract));\r\n        uint256 v2Balance = IERC20(FEG).balanceOf(address(v2stakingContract));\r\n        uint256 fETHbalanceToDistribute = amount.mul(v1Share.add(v2Share)).div(100);\r\n        uint256 total = v1Balance.add(v2Balance);\r\n        uint256 fETHbalanceToDistributeToV1 = fETHbalanceToDistribute.mul(v1Balance).div(total);\r\n        uint256 fETHbalanceToDistributeToV2 = fETHbalanceToDistribute - fETHbalanceToDistributeToV1;\r\n        \r\n        require(IERC20(fETH).transfer(address(stakingContract), fETHbalanceToDistributeToV1), \"Tokens cannot be transferred from funder account\");\r\n        stakingContract.ADDFUNDS(fETHbalanceToDistributeToV1);\r\n        \r\n        require(IERC20(fETH).transfer(address(v2stakingContract), fETHbalanceToDistributeToV2), \"Tokens cannot be transferred from funder account\");\r\n        v2stakingContract.ADDFUNDS1(fETHbalanceToDistributeToV2);  \r\n        \r\n        uint256 amountFinal     = amount.sub(fETHbalanceToDistributeToV2.add(fETHbalanceToDistributeToV1));\r\n        totaldist = totaldist.add(amountFinal);\r\n        \r\n        }\r\n    \r\n        if(IERC20(fUSDT).balanceOf(address(this)) > must1){\r\n        uint256 amountmust1 = (IERC20(fUSDT).balanceOf(address(this)).mul(995).div(1000)).sub(totaldist1);\r\n        uint256 stakeshare = amountmust1.mul(48).div(100); \r\n        uint256 othershare = amountmust1.sub(stakeshare);\r\n        v2stakingContract.ADDFUNDS2(stakeshare); \r\n        totaldist1 = totaldist1.add(othershare);\r\n        }\r\n    \r\n        if(IERC20(fBTC).balanceOf(address(this)) > must2){\r\n        uint256 amountmust2 = (IERC20(fBTC).balanceOf(address(this)).mul(995).div(1000)).sub(totaldist2);\r\n        uint256 stakeshare2 = amountmust2.mul(48).div(100); \r\n        uint256 othershare2 = amountmust2.sub(stakeshare2);\r\n        v2stakingContract.ADDFUNDS3(stakeshare2); \r\n        totaldist2 = totaldist2.add(othershare2);\r\n        }\r\n    }     \r\n    \r\n    function setup() public {\r\n        IERC20(address(FEG)).approve(address(v2pair), 100000000000000000e18);        \r\n        IERC20(address(fETH)).approve(address(stakingContract), 1000000000000000000e18);   \r\n        IERC20(address(fETH)).approve(address(v2stakingContract), 1000000000000000000e18); \r\n        IERC20(address(fUSDT)).approve(address(v2stakingContract), 1000000000000000000e18); \r\n        IERC20(address(fBTC)).approve(address(v2stakingContract), 1000000000000000000e18); \r\n    }  \r\n    \r\n    function emergencySaveLostTokens(address _token) public onlyOwner {\r\n        require(_token != FEG, \"Cannot remove users FEG\");\r\n        require(_token != fETH, \"Cannot remove users fETH\");\r\n        require(_token != fUSDT, \"Cannot remove users fUSDT\");\r\n        require(_token != fBTC, \"Cannot remove users fBTC\");\r\n        require(IERC20(_token).transfer(owner, IERC20(_token).balanceOf(address(this))), \"Error in retrieving tokens\");\r\n        payable(owner).transfer(address(this).balance);\r\n    }\r\n    \r\n    function claimDist() public onlyOwner {\r\n        require(IERC20(fETH).transfer(other, totaldist), \"Error in retrieving tokens\");\r\n        totaldist = 0;\r\n        require(IERC20(fUSDT).transfer(other, totaldist1), \"Error in retrieving tokens\");\r\n        totaldist1 = 0;\r\n        require(IERC20(fBTC).transfer(other, totaldist2), \"Error in retrieving tokens\");\r\n        totaldist2 = 0;\r\n    }\r\n}","ABI":"[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"FEG\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_deploy\",\"type\":\"address\"}],\"name\":\"changeDeploy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract FEGex2\",\"name\":\"_fegexpair\",\"type\":\"address\"}],\"name\":\"changeFEGExPair\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_give\",\"type\":\"uint256\"}],\"name\":\"changeGive\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract stakeContract1\",\"name\":\"_v2StakingContract\",\"type\":\"address\"}],\"name\":\"changeLPStakingContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_must\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_must1\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_must2\",\"type\":\"uint256\"}],\"name\":\"changeMust\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_other\",\"type\":\"address\"}],\"name\":\"changeOther\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_v1rs\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_v2rs\",\"type\":\"uint256\"}],\"name\":\"changeRewardShare\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_bool\",\"type\":\"bool\"}],\"name\":\"changeSell\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract stakeContract\",\"name\":\"_stakingContract\",\"type\":\"address\"}],\"name\":\"changeStakingContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_V2\",\"type\":\"address\"}],\"name\":\"changeV2Pair\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract wrap\",\"name\":\"_wrapp\",\"type\":\"address\"}],\"name\":\"changeWrap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimDist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"deploy\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"distributeAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"distributeV2\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"emergencySaveLostTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fBTC\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fETH\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fUSDT\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"give\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"must\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"must1\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"must2\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"other\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sell\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"setup\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stake1\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stake2\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totaldist\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totaldist1\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totaldist2\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_BTC\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_ETH\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_USDT\",\"type\":\"address\"}],\"name\":\"updateBase\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"v1Share\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"v2Share\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"v2pair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]","ContractName":"ShareDistributor","CompilerVersion":"v0.7.6+commit.7338295f","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"ipfs://3b6e41ddf71ed2cd85157aa5e69307f53280b9d32aa0324b6a879f4adad638ea"}]}