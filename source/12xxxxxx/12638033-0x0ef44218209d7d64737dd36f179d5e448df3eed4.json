{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/core/PendlePausingManager.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.7.6;\\n\\nimport \\\"../periphery/PermissionsV2.sol\\\";\\nimport \\\"../interfaces/IPendlePausingManager.sol\\\";\\n\\ncontract PendlePausingManager is PermissionsV2, IPendlePausingManager {\\n    struct EmergencyHandlerSetting {\\n        address handler;\\n        address pendingHandler;\\n        uint256 timelockDeadline;\\n    }\\n\\n    struct CachedStatus {\\n        uint128 timestamp;\\n        bool paused;\\n        bool locked;\\n    }\\n\\n    uint256 private constant EMERGENCY_HANDLER_CHANGE_TIMELOCK = 7 days;\\n\\n    mapping(bytes32 => mapping(address => mapping(uint256 => bool))) public forgeAssetExpiryPaused; // reversible\\n    mapping(bytes32 => mapping(address => bool)) public forgeAssetPaused; // reversible\\n    mapping(bytes32 => bool) public forgePaused; // reversible\\n\\n    mapping(bytes32 => mapping(address => mapping(uint256 => bool))) public forgeAssetExpiryLocked; // non-reversible\\n    mapping(bytes32 => mapping(address => bool)) public forgeAssetLocked; // non-reversible\\n    mapping(bytes32 => bool) public forgeLocked; // non-reversible\\n\\n    mapping(bytes32 => mapping(address => bool)) public marketPaused; // reversible\\n    mapping(bytes32 => bool) public marketFactoryPaused; // reversible\\n\\n    mapping(bytes32 => mapping(address => bool)) public marketLocked; // non-reversible\\n    mapping(bytes32 => bool) public marketFactoryLocked; // non-reversible\\n\\n    mapping(address => bool) public liqMiningPaused; // reversible\\n    mapping(address => bool) public liqMiningLocked;\\n\\n    EmergencyHandlerSetting public override forgeEmergencyHandler;\\n    EmergencyHandlerSetting public override marketEmergencyHandler;\\n    EmergencyHandlerSetting public override liqMiningEmergencyHandler;\\n\\n    bool public override permLocked;\\n    bool public override permForgeHandlerLocked;\\n    bool public override permMarketHandlerLocked;\\n    bool public override permLiqMiningHandlerLocked;\\n\\n    uint256 internal lastUpdated;\\n    mapping(bytes32 => mapping(address => mapping(uint256 => CachedStatus)))\\n        public forgeAssetExpiryCachedStatus;\\n    mapping(bytes32 => mapping(address => CachedStatus)) public marketCachedStatus;\\n    mapping(address => CachedStatus) public liqMiningCachedStatus;\\n\\n    mapping(address => bool) public override isPausingAdmin;\\n\\n    // only governance can unpause; pausing admins can pause\\n    modifier isAllowedToSetPaused(bool settingToPaused) {\\n        if (settingToPaused) {\\n            require(isPausingAdmin[msg.sender], \\\"FORBIDDEN\\\");\\n        } else {\\n            require(msg.sender == _governance(), \\\"ONLY_GOVERNANCE\\\");\\n        }\\n        _;\\n    }\\n\\n    modifier notPermLocked {\\n        require(!permLocked, \\\"PERMANENTLY_LOCKED\\\");\\n        _;\\n    }\\n\\n    // This must be used in every function that changes any of the pausing/locked status\\n    modifier updateSomeStatus {\\n        _;\\n        lastUpdated = block.timestamp;\\n    }\\n\\n    constructor(\\n        address _governanceManager,\\n        address initialForgeHandler,\\n        address initialMarketHandler,\\n        address initialLiqMiningHandler\\n    ) PermissionsV2(_governanceManager) {\\n        forgeEmergencyHandler.handler = initialForgeHandler;\\n        marketEmergencyHandler.handler = initialMarketHandler;\\n        liqMiningEmergencyHandler.handler = initialLiqMiningHandler;\\n        lastUpdated = block.timestamp;\\n    }\\n\\n    /////////////////////////\\n    //////// ADMIN FUNCTIONS\\n    ////////\\n    function setPausingAdmin(address admin, bool isAdmin)\\n        external\\n        override\\n        onlyGovernance\\n        notPermLocked\\n    {\\n        require(isPausingAdmin[admin] != isAdmin, \\\"REDUNDANT_SET\\\");\\n        isPausingAdmin[admin] = isAdmin;\\n        if (isAdmin) {\\n            emit AddPausingAdmin(admin);\\n        } else {\\n            emit RemovePausingAdmin(admin);\\n        }\\n    }\\n\\n    //// Changing forgeEmergencyHandler and marketEmergencyHandler\\n    function requestForgeHandlerChange(address _pendingForgeHandler)\\n        external\\n        override\\n        onlyGovernance\\n        notPermLocked\\n    {\\n        require(!permForgeHandlerLocked, \\\"FORGE_HANDLER_LOCKED\\\");\\n        require(_pendingForgeHandler != address(0), \\\"ZERO_ADDRESS\\\");\\n        forgeEmergencyHandler.pendingHandler = _pendingForgeHandler;\\n        forgeEmergencyHandler.timelockDeadline =\\n            block.timestamp +\\n            EMERGENCY_HANDLER_CHANGE_TIMELOCK;\\n\\n        emit PendingForgeEmergencyHandler(_pendingForgeHandler);\\n    }\\n\\n    function requestMarketHandlerChange(address _pendingMarketHandler)\\n        external\\n        override\\n        onlyGovernance\\n        notPermLocked\\n    {\\n        require(!permMarketHandlerLocked, \\\"MARKET_HANDLER_LOCKED\\\");\\n        require(_pendingMarketHandler != address(0), \\\"ZERO_ADDRESS\\\");\\n        marketEmergencyHandler.pendingHandler = _pendingMarketHandler;\\n        marketEmergencyHandler.timelockDeadline =\\n            block.timestamp +\\n            EMERGENCY_HANDLER_CHANGE_TIMELOCK;\\n\\n        emit PendingMarketEmergencyHandler(_pendingMarketHandler);\\n    }\\n\\n    function requestLiqMiningHandlerChange(address _pendingLiqMiningHandler)\\n        external\\n        override\\n        onlyGovernance\\n        notPermLocked\\n    {\\n        require(!permLiqMiningHandlerLocked, \\\"LIQUIDITY_MINING_HANDLER_LOCKED\\\");\\n        require(_pendingLiqMiningHandler != address(0), \\\"ZERO_ADDRESS\\\");\\n        liqMiningEmergencyHandler.pendingHandler = _pendingLiqMiningHandler;\\n        liqMiningEmergencyHandler.timelockDeadline =\\n            block.timestamp +\\n            EMERGENCY_HANDLER_CHANGE_TIMELOCK;\\n\\n        emit PendingLiqMiningEmergencyHandler(_pendingLiqMiningHandler);\\n    }\\n\\n    function applyForgeHandlerChange() external override notPermLocked {\\n        require(forgeEmergencyHandler.pendingHandler != address(0), \\\"INVALID_HANDLER\\\");\\n        require(block.timestamp > forgeEmergencyHandler.timelockDeadline, \\\"TIMELOCK_NOT_OVER\\\");\\n        forgeEmergencyHandler.handler = forgeEmergencyHandler.pendingHandler;\\n        forgeEmergencyHandler.pendingHandler = address(0);\\n        forgeEmergencyHandler.timelockDeadline = uint256(-1);\\n\\n        emit ForgeEmergencyHandlerSet(forgeEmergencyHandler.handler);\\n    }\\n\\n    function applyMarketHandlerChange() external override notPermLocked {\\n        require(marketEmergencyHandler.pendingHandler != address(0), \\\"INVALID_HANDLER\\\");\\n        require(block.timestamp > marketEmergencyHandler.timelockDeadline, \\\"TIMELOCK_NOT_OVER\\\");\\n        marketEmergencyHandler.handler = marketEmergencyHandler.pendingHandler;\\n        marketEmergencyHandler.pendingHandler = address(0);\\n        marketEmergencyHandler.timelockDeadline = uint256(-1);\\n\\n        emit MarketEmergencyHandlerSet(marketEmergencyHandler.handler);\\n    }\\n\\n    function applyLiqMiningHandlerChange() external override notPermLocked {\\n        require(liqMiningEmergencyHandler.pendingHandler != address(0), \\\"INVALID_HANDLER\\\");\\n        require(block.timestamp > liqMiningEmergencyHandler.timelockDeadline, \\\"TIMELOCK_NOT_OVER\\\");\\n        liqMiningEmergencyHandler.handler = liqMiningEmergencyHandler.pendingHandler;\\n        liqMiningEmergencyHandler.pendingHandler = address(0);\\n        liqMiningEmergencyHandler.timelockDeadline = uint256(-1);\\n\\n        emit LiqMiningEmergencyHandlerSet(liqMiningEmergencyHandler.handler);\\n    }\\n\\n    //// Lock permanently parts of the features\\n    function lockPausingManagerPermanently() external override onlyGovernance notPermLocked {\\n        permLocked = true;\\n        emit PausingManagerLocked();\\n    }\\n\\n    function lockForgeHandlerPermanently() external override onlyGovernance notPermLocked {\\n        permForgeHandlerLocked = true;\\n        emit ForgeHandlerLocked();\\n    }\\n\\n    function lockMarketHandlerPermanently() external override onlyGovernance notPermLocked {\\n        permMarketHandlerLocked = true;\\n        emit MarketHandlerLocked();\\n    }\\n\\n    function lockLiqMiningHandlerPermanently() external override onlyGovernance notPermLocked {\\n        permLiqMiningHandlerLocked = true;\\n        emit LiqMiningHandlerLocked();\\n    }\\n\\n    /////////////////////////\\n    //////// FORGE\\n    ////////\\n    function setForgePaused(bytes32 forgeId, bool settingToPaused)\\n        external\\n        override\\n        updateSomeStatus\\n        isAllowedToSetPaused(settingToPaused)\\n        notPermLocked\\n    {\\n        forgePaused[forgeId] = settingToPaused;\\n        emit SetForgePaused(forgeId, settingToPaused);\\n    }\\n\\n    function setForgeAssetPaused(\\n        bytes32 forgeId,\\n        address underlyingAsset,\\n        bool settingToPaused\\n    ) external override updateSomeStatus isAllowedToSetPaused(settingToPaused) notPermLocked {\\n        forgeAssetPaused[forgeId][underlyingAsset] = settingToPaused;\\n        emit SetForgeAssetPaused(forgeId, underlyingAsset, settingToPaused);\\n    }\\n\\n    function setForgeAssetExpiryPaused(\\n        bytes32 forgeId,\\n        address underlyingAsset,\\n        uint256 expiry,\\n        bool settingToPaused\\n    ) external override updateSomeStatus isAllowedToSetPaused(settingToPaused) notPermLocked {\\n        forgeAssetExpiryPaused[forgeId][underlyingAsset][expiry] = settingToPaused;\\n        emit SetForgeAssetExpiryPaused(forgeId, underlyingAsset, expiry, settingToPaused);\\n    }\\n\\n    function setForgeLocked(bytes32 forgeId)\\n        external\\n        override\\n        updateSomeStatus\\n        onlyGovernance\\n        notPermLocked\\n    {\\n        forgeLocked[forgeId] = true;\\n        emit SetForgeLocked(forgeId);\\n    }\\n\\n    function setForgeAssetLocked(bytes32 forgeId, address underlyingAsset)\\n        external\\n        override\\n        updateSomeStatus\\n        onlyGovernance\\n        notPermLocked\\n    {\\n        forgeAssetLocked[forgeId][underlyingAsset] = true;\\n        emit SetForgeAssetLocked(forgeId, underlyingAsset);\\n    }\\n\\n    function setForgeAssetExpiryLocked(\\n        bytes32 forgeId,\\n        address underlyingAsset,\\n        uint256 expiry\\n    ) external override updateSomeStatus onlyGovernance notPermLocked {\\n        forgeAssetExpiryLocked[forgeId][underlyingAsset][expiry] = true;\\n        emit SetForgeAssetExpiryLocked(forgeId, underlyingAsset, expiry);\\n    }\\n\\n    function _isYieldContractPaused(\\n        bytes32 forgeId,\\n        address underlyingAsset,\\n        uint256 expiry\\n    ) internal view returns (bool _paused) {\\n        _paused =\\n            forgePaused[forgeId] ||\\n            forgeAssetPaused[forgeId][underlyingAsset] ||\\n            forgeAssetExpiryPaused[forgeId][underlyingAsset][expiry];\\n    }\\n\\n    function _isYieldContractLocked(\\n        bytes32 forgeId,\\n        address underlyingAsset,\\n        uint256 expiry\\n    ) internal view returns (bool _locked) {\\n        _locked =\\n            forgeLocked[forgeId] ||\\n            forgeAssetLocked[forgeId][underlyingAsset] ||\\n            forgeAssetExpiryLocked[forgeId][underlyingAsset][expiry];\\n    }\\n\\n    function checkYieldContractStatus(\\n        bytes32 forgeId,\\n        address underlyingAsset,\\n        uint256 expiry\\n    ) external override returns (bool _paused, bool _locked) {\\n        CachedStatus memory status =\\n            forgeAssetExpiryCachedStatus[forgeId][underlyingAsset][expiry];\\n        if (status.timestamp > lastUpdated) {\\n            return (status.paused, status.locked);\\n        }\\n\\n        _locked = _isYieldContractLocked(forgeId, underlyingAsset, expiry);\\n        if (_locked) {\\n            _paused = true; // if a yield contract is locked, its paused by default as well\\n        } else {\\n            _paused = _isYieldContractPaused(forgeId, underlyingAsset, expiry);\\n        }\\n\\n        // update the cache\\n        CachedStatus storage statusInStorage =\\n            forgeAssetExpiryCachedStatus[forgeId][underlyingAsset][expiry];\\n        statusInStorage.timestamp = uint128(block.timestamp);\\n        statusInStorage.locked = _locked;\\n        statusInStorage.paused = _paused;\\n    }\\n\\n    /////////////////////////\\n    //////// MARKET\\n    ////////\\n    function setMarketFactoryPaused(bytes32 marketFactoryId, bool settingToPaused)\\n        external\\n        override\\n        updateSomeStatus\\n        isAllowedToSetPaused(settingToPaused)\\n        notPermLocked\\n    {\\n        marketFactoryPaused[marketFactoryId] = settingToPaused;\\n        emit SetMarketFactoryPaused(marketFactoryId, settingToPaused);\\n    }\\n\\n    function setMarketPaused(\\n        bytes32 marketFactoryId,\\n        address market,\\n        bool settingToPaused\\n    ) external override updateSomeStatus isAllowedToSetPaused(settingToPaused) notPermLocked {\\n        marketPaused[marketFactoryId][market] = settingToPaused;\\n        emit SetMarketPaused(marketFactoryId, market, settingToPaused);\\n    }\\n\\n    function setMarketFactoryLocked(bytes32 marketFactoryId)\\n        external\\n        override\\n        updateSomeStatus\\n        onlyGovernance\\n        notPermLocked\\n    {\\n        marketFactoryLocked[marketFactoryId] = true;\\n        emit SetMarketFactoryLocked(marketFactoryId);\\n    }\\n\\n    function setMarketLocked(bytes32 marketFactoryId, address market)\\n        external\\n        override\\n        updateSomeStatus\\n        onlyGovernance\\n        notPermLocked\\n    {\\n        marketLocked[marketFactoryId][market] = true;\\n        emit SetMarketLocked(marketFactoryId, market);\\n    }\\n\\n    function _isMarketPaused(bytes32 marketFactoryId, address market)\\n        internal\\n        view\\n        returns (bool _paused)\\n    {\\n        _paused = marketFactoryPaused[marketFactoryId] || marketPaused[marketFactoryId][market];\\n    }\\n\\n    function _isMarketLocked(bytes32 marketFactoryId, address market)\\n        internal\\n        view\\n        returns (bool _locked)\\n    {\\n        _locked = marketFactoryLocked[marketFactoryId] || marketLocked[marketFactoryId][market];\\n    }\\n\\n    function checkMarketStatus(bytes32 marketFactoryId, address market)\\n        external\\n        override\\n        returns (bool _paused, bool _locked)\\n    {\\n        CachedStatus memory status = marketCachedStatus[marketFactoryId][market];\\n        if (status.timestamp > lastUpdated) {\\n            return (status.paused, status.locked);\\n        }\\n\\n        _locked = _isMarketLocked(marketFactoryId, market);\\n        if (_locked) {\\n            _paused = true; // if a yield contract is locked, its paused by default as well\\n        } else {\\n            _paused = _isMarketPaused(marketFactoryId, market);\\n        }\\n\\n        // update the cache\\n        CachedStatus storage statusInStorage = marketCachedStatus[marketFactoryId][market];\\n        statusInStorage.timestamp = uint128(block.timestamp);\\n        statusInStorage.locked = _locked;\\n        statusInStorage.paused = _paused;\\n    }\\n\\n    /////////////////////////\\n    //////// Liquidity Mining\\n    ////////\\n    function setLiqMiningPaused(address liqMiningContract, bool settingToPaused)\\n        external\\n        override\\n        updateSomeStatus\\n        isAllowedToSetPaused(settingToPaused)\\n        notPermLocked\\n    {\\n        liqMiningPaused[liqMiningContract] = settingToPaused;\\n        emit SetLiqMiningPaused(liqMiningContract, settingToPaused);\\n    }\\n\\n    function setLiqMiningLocked(address liqMiningContract)\\n        external\\n        override\\n        updateSomeStatus\\n        onlyGovernance\\n        notPermLocked\\n    {\\n        liqMiningLocked[liqMiningContract] = true;\\n        emit SetLiqMiningLocked(liqMiningContract);\\n    }\\n\\n    function checkLiqMiningStatus(address liqMiningContract)\\n        external\\n        override\\n        returns (bool _paused, bool _locked)\\n    {\\n        CachedStatus memory status = liqMiningCachedStatus[liqMiningContract];\\n        if (status.timestamp > lastUpdated) {\\n            return (status.paused, status.locked);\\n        }\\n\\n        _locked = liqMiningLocked[liqMiningContract];\\n        if (_locked) {\\n            _paused = true; // if a yield contract is locked, its paused by default as well\\n        } else {\\n            _paused = liqMiningPaused[liqMiningContract];\\n        }\\n\\n        // update the cache\\n        CachedStatus storage statusInStorage = liqMiningCachedStatus[liqMiningContract];\\n        statusInStorage.timestamp = uint128(block.timestamp);\\n        statusInStorage.locked = _locked;\\n        statusInStorage.paused = _paused;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/periphery/PermissionsV2.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.7.6;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"../core/PendleGovernanceManager.sol\\\";\\nimport \\\"../interfaces/IPermissionsV2.sol\\\";\\n\\nabstract contract PermissionsV2 is IPermissionsV2 {\\n    PendleGovernanceManager public immutable override governanceManager;\\n    address internal initializer;\\n\\n    constructor(address _governanceManager) {\\n        require(_governanceManager != address(0), \\\"ZERO_ADDRESS\\\");\\n        initializer = msg.sender;\\n        governanceManager = PendleGovernanceManager(_governanceManager);\\n    }\\n\\n    modifier initialized() {\\n        require(initializer == address(0), \\\"NOT_INITIALIZED\\\");\\n        _;\\n    }\\n\\n    modifier onlyGovernance() {\\n        require(msg.sender == _governance(), \\\"ONLY_GOVERNANCE\\\");\\n        _;\\n    }\\n\\n    function _governance() internal view returns (address) {\\n        return governanceManager.governance();\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IPendlePausingManager.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n/*\\n * MIT License\\n * ===========\\n *\\n * Permission is hereby granted, free of charge, to any person obtaining a copy\\n * of this software and associated documentation files (the \\\"Software\\\"), to deal\\n * in the Software without restriction, including without limitation the rights\\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\\n * copies of the Software, and to permit persons to whom the Software is\\n * furnished to do so, subject to the following conditions:\\n *\\n * The above copyright notice and this permission notice shall be included in all\\n * copies or substantial portions of the Software.\\n *\\n * THE SOFTWARE IS PROVIDED \\\"AS IS\\\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\\n */\\npragma solidity 0.7.6;\\n\\ninterface IPendlePausingManager {\\n    event AddPausingAdmin(address admin);\\n    event RemovePausingAdmin(address admin);\\n    event PendingForgeEmergencyHandler(address _pendingForgeHandler);\\n    event PendingMarketEmergencyHandler(address _pendingMarketHandler);\\n    event PendingLiqMiningEmergencyHandler(address _pendingLiqMiningHandler);\\n    event ForgeEmergencyHandlerSet(address forgeEmergencyHandler);\\n    event MarketEmergencyHandlerSet(address marketEmergencyHandler);\\n    event LiqMiningEmergencyHandlerSet(address liqMiningEmergencyHandler);\\n\\n    event PausingManagerLocked();\\n    event ForgeHandlerLocked();\\n    event MarketHandlerLocked();\\n    event LiqMiningHandlerLocked();\\n\\n    event SetForgePaused(bytes32 forgeId, bool settingToPaused);\\n    event SetForgeAssetPaused(bytes32 forgeId, address underlyingAsset, bool settingToPaused);\\n    event SetForgeAssetExpiryPaused(\\n        bytes32 forgeId,\\n        address underlyingAsset,\\n        uint256 expiry,\\n        bool settingToPaused\\n    );\\n\\n    event SetForgeLocked(bytes32 forgeId);\\n    event SetForgeAssetLocked(bytes32 forgeId, address underlyingAsset);\\n    event SetForgeAssetExpiryLocked(bytes32 forgeId, address underlyingAsset, uint256 expiry);\\n\\n    event SetMarketFactoryPaused(bytes32 marketFactoryId, bool settingToPaused);\\n    event SetMarketPaused(bytes32 marketFactoryId, address market, bool settingToPaused);\\n\\n    event SetMarketFactoryLocked(bytes32 marketFactoryId);\\n    event SetMarketLocked(bytes32 marketFactoryId, address market);\\n\\n    event SetLiqMiningPaused(address liqMiningContract, bool settingToPaused);\\n    event SetLiqMiningLocked(address liqMiningContract);\\n\\n    function forgeEmergencyHandler()\\n        external\\n        view\\n        returns (\\n            address handler,\\n            address pendingHandler,\\n            uint256 timelockDeadline\\n        );\\n\\n    function marketEmergencyHandler()\\n        external\\n        view\\n        returns (\\n            address handler,\\n            address pendingHandler,\\n            uint256 timelockDeadline\\n        );\\n\\n    function liqMiningEmergencyHandler()\\n        external\\n        view\\n        returns (\\n            address handler,\\n            address pendingHandler,\\n            uint256 timelockDeadline\\n        );\\n\\n    function permLocked() external view returns (bool);\\n\\n    function permForgeHandlerLocked() external view returns (bool);\\n\\n    function permMarketHandlerLocked() external view returns (bool);\\n\\n    function permLiqMiningHandlerLocked() external view returns (bool);\\n\\n    function isPausingAdmin(address) external view returns (bool);\\n\\n    function setPausingAdmin(address admin, bool isAdmin) external;\\n\\n    function requestForgeHandlerChange(address _pendingForgeHandler) external;\\n\\n    function requestMarketHandlerChange(address _pendingMarketHandler) external;\\n\\n    function requestLiqMiningHandlerChange(address _pendingLiqMiningHandler) external;\\n\\n    function applyForgeHandlerChange() external;\\n\\n    function applyMarketHandlerChange() external;\\n\\n    function applyLiqMiningHandlerChange() external;\\n\\n    function lockPausingManagerPermanently() external;\\n\\n    function lockForgeHandlerPermanently() external;\\n\\n    function lockMarketHandlerPermanently() external;\\n\\n    function lockLiqMiningHandlerPermanently() external;\\n\\n    function setForgePaused(bytes32 forgeId, bool paused) external;\\n\\n    function setForgeAssetPaused(\\n        bytes32 forgeId,\\n        address underlyingAsset,\\n        bool paused\\n    ) external;\\n\\n    function setForgeAssetExpiryPaused(\\n        bytes32 forgeId,\\n        address underlyingAsset,\\n        uint256 expiry,\\n        bool paused\\n    ) external;\\n\\n    function setForgeLocked(bytes32 forgeId) external;\\n\\n    function setForgeAssetLocked(bytes32 forgeId, address underlyingAsset) external;\\n\\n    function setForgeAssetExpiryLocked(\\n        bytes32 forgeId,\\n        address underlyingAsset,\\n        uint256 expiry\\n    ) external;\\n\\n    function checkYieldContractStatus(\\n        bytes32 forgeId,\\n        address underlyingAsset,\\n        uint256 expiry\\n    ) external returns (bool _paused, bool _locked);\\n\\n    function setMarketFactoryPaused(bytes32 marketFactoryId, bool paused) external;\\n\\n    function setMarketPaused(\\n        bytes32 marketFactoryId,\\n        address market,\\n        bool paused\\n    ) external;\\n\\n    function setMarketFactoryLocked(bytes32 marketFactoryId) external;\\n\\n    function setMarketLocked(bytes32 marketFactoryId, address market) external;\\n\\n    function checkMarketStatus(bytes32 marketFactoryId, address market)\\n        external\\n        returns (bool _paused, bool _locked);\\n\\n    function setLiqMiningPaused(address liqMiningContract, bool settingToPaused) external;\\n\\n    function setLiqMiningLocked(address liqMiningContract) external;\\n\\n    function checkLiqMiningStatus(address liqMiningContract)\\n        external\\n        returns (bool _paused, bool _locked);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"contracts/core/PendleGovernanceManager.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.7.6;\\n\\ncontract PendleGovernanceManager {\\n    address public governance;\\n    address public pendingGovernance;\\n\\n    event GovernanceClaimed(address newGovernance, address previousGovernance);\\n\\n    event TransferGovernancePending(address pendingGovernance);\\n\\n    constructor(address _governance) {\\n        require(_governance != address(0), \\\"ZERO_ADDRESS\\\");\\n        governance = _governance;\\n    }\\n\\n    modifier onlyGovernance() {\\n        require(msg.sender == governance, \\\"ONLY_GOVERNANCE\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Allows the pendingGovernance address to finalize the change governance process.\\n     */\\n    function claimGovernance() external {\\n        require(pendingGovernance == msg.sender, \\\"WRONG_GOVERNANCE\\\");\\n        emit GovernanceClaimed(pendingGovernance, governance);\\n        governance = pendingGovernance;\\n        pendingGovernance = address(0);\\n    }\\n\\n    /**\\n     * @dev Allows the current governance to set the pendingGovernance address.\\n     * @param _governance The address to transfer ownership to.\\n     */\\n    function transferGovernance(address _governance) external onlyGovernance {\\n        require(_governance != address(0), \\\"ZERO_ADDRESS\\\");\\n        pendingGovernance = _governance;\\n\\n        emit TransferGovernancePending(pendingGovernance);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IPermissionsV2.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n/*\\n * MIT License\\n * ===========\\n *\\n * Permission is hereby granted, free of charge, to any person obtaining a copy\\n * of this software and associated documentation files (the \\\"Software\\\"), to deal\\n * in the Software without restriction, including without limitation the rights\\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\\n * copies of the Software, and to permit persons to whom the Software is\\n * furnished to do so, subject to the following conditions:\\n *\\n * The above copyright notice and this permission notice shall be included in all\\n * copies or substantial portions of the Software.\\n *\\n * THE SOFTWARE IS PROVIDED \\\"AS IS\\\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\\n */\\n\\npragma solidity 0.7.6;\\npragma abicoder v2;\\n\\nimport \\\"../core/PendleGovernanceManager.sol\\\";\\n\\ninterface IPermissionsV2 {\\n    function governanceManager() external returns (PendleGovernanceManager);\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_governanceManager\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"initialForgeHandler\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"initialMarketHandler\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"initialLiqMiningHandler\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"admin\",\"type\":\"address\"}],\"name\":\"AddPausingAdmin\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"forgeEmergencyHandler\",\"type\":\"address\"}],\"name\":\"ForgeEmergencyHandlerSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"ForgeHandlerLocked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"liqMiningEmergencyHandler\",\"type\":\"address\"}],\"name\":\"LiqMiningEmergencyHandlerSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"LiqMiningHandlerLocked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"marketEmergencyHandler\",\"type\":\"address\"}],\"name\":\"MarketEmergencyHandlerSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"MarketHandlerLocked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"PausingManagerLocked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_pendingForgeHandler\",\"type\":\"address\"}],\"name\":\"PendingForgeEmergencyHandler\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_pendingLiqMiningHandler\",\"type\":\"address\"}],\"name\":\"PendingLiqMiningEmergencyHandler\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_pendingMarketHandler\",\"type\":\"address\"}],\"name\":\"PendingMarketEmergencyHandler\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"admin\",\"type\":\"address\"}],\"name\":\"RemovePausingAdmin\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"forgeId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"underlyingAsset\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"expiry\",\"type\":\"uint256\"}],\"name\":\"SetForgeAssetExpiryLocked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"forgeId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"underlyingAsset\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"expiry\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"settingToPaused\",\"type\":\"bool\"}],\"name\":\"SetForgeAssetExpiryPaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"forgeId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"underlyingAsset\",\"type\":\"address\"}],\"name\":\"SetForgeAssetLocked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"forgeId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"underlyingAsset\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"settingToPaused\",\"type\":\"bool\"}],\"name\":\"SetForgeAssetPaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"forgeId\",\"type\":\"bytes32\"}],\"name\":\"SetForgeLocked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"forgeId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"settingToPaused\",\"type\":\"bool\"}],\"name\":\"SetForgePaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"liqMiningContract\",\"type\":\"address\"}],\"name\":\"SetLiqMiningLocked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"liqMiningContract\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"settingToPaused\",\"type\":\"bool\"}],\"name\":\"SetLiqMiningPaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"marketFactoryId\",\"type\":\"bytes32\"}],\"name\":\"SetMarketFactoryLocked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"marketFactoryId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"settingToPaused\",\"type\":\"bool\"}],\"name\":\"SetMarketFactoryPaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"marketFactoryId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"market\",\"type\":\"address\"}],\"name\":\"SetMarketLocked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"marketFactoryId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"market\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"settingToPaused\",\"type\":\"bool\"}],\"name\":\"SetMarketPaused\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"applyForgeHandlerChange\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"applyLiqMiningHandlerChange\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"applyMarketHandlerChange\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"liqMiningContract\",\"type\":\"address\"}],\"name\":\"checkLiqMiningStatus\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"_paused\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"_locked\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"marketFactoryId\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"market\",\"type\":\"address\"}],\"name\":\"checkMarketStatus\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"_paused\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"_locked\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"forgeId\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"underlyingAsset\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"expiry\",\"type\":\"uint256\"}],\"name\":\"checkYieldContractStatus\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"_paused\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"_locked\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"forgeAssetExpiryCachedStatus\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"timestamp\",\"type\":\"uint128\"},{\"internalType\":\"bool\",\"name\":\"paused\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"locked\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"forgeAssetExpiryLocked\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"forgeAssetExpiryPaused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"forgeAssetLocked\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"forgeAssetPaused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"forgeEmergencyHandler\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"handler\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"pendingHandler\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"timelockDeadline\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"forgeLocked\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"forgePaused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"governanceManager\",\"outputs\":[{\"internalType\":\"contract PendleGovernanceManager\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isPausingAdmin\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"liqMiningCachedStatus\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"timestamp\",\"type\":\"uint128\"},{\"internalType\":\"bool\",\"name\":\"paused\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"locked\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liqMiningEmergencyHandler\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"handler\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"pendingHandler\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"timelockDeadline\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"liqMiningLocked\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"liqMiningPaused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lockForgeHandlerPermanently\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lockLiqMiningHandlerPermanently\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lockMarketHandlerPermanently\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lockPausingManagerPermanently\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"marketCachedStatus\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"timestamp\",\"type\":\"uint128\"},{\"internalType\":\"bool\",\"name\":\"paused\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"locked\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"marketEmergencyHandler\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"handler\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"pendingHandler\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"timelockDeadline\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"marketFactoryLocked\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"marketFactoryPaused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"marketLocked\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"marketPaused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"permForgeHandlerLocked\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"permLiqMiningHandlerLocked\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"permLocked\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"permMarketHandlerLocked\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_pendingForgeHandler\",\"type\":\"address\"}],\"name\":\"requestForgeHandlerChange\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_pendingLiqMiningHandler\",\"type\":\"address\"}],\"name\":\"requestLiqMiningHandlerChange\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_pendingMarketHandler\",\"type\":\"address\"}],\"name\":\"requestMarketHandlerChange\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"forgeId\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"underlyingAsset\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"expiry\",\"type\":\"uint256\"}],\"name\":\"setForgeAssetExpiryLocked\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"forgeId\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"underlyingAsset\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"expiry\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"settingToPaused\",\"type\":\"bool\"}],\"name\":\"setForgeAssetExpiryPaused\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"forgeId\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"underlyingAsset\",\"type\":\"address\"}],\"name\":\"setForgeAssetLocked\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"forgeId\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"underlyingAsset\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"settingToPaused\",\"type\":\"bool\"}],\"name\":\"setForgeAssetPaused\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"forgeId\",\"type\":\"bytes32\"}],\"name\":\"setForgeLocked\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"forgeId\",\"type\":\"bytes32\"},{\"internalType\":\"bool\",\"name\":\"settingToPaused\",\"type\":\"bool\"}],\"name\":\"setForgePaused\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"liqMiningContract\",\"type\":\"address\"}],\"name\":\"setLiqMiningLocked\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"liqMiningContract\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"settingToPaused\",\"type\":\"bool\"}],\"name\":\"setLiqMiningPaused\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"marketFactoryId\",\"type\":\"bytes32\"}],\"name\":\"setMarketFactoryLocked\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"marketFactoryId\",\"type\":\"bytes32\"},{\"internalType\":\"bool\",\"name\":\"settingToPaused\",\"type\":\"bool\"}],\"name\":\"setMarketFactoryPaused\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"marketFactoryId\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"market\",\"type\":\"address\"}],\"name\":\"setMarketLocked\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"marketFactoryId\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"market\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"settingToPaused\",\"type\":\"bool\"}],\"name\":\"setMarketPaused\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"admin\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isAdmin\",\"type\":\"bool\"}],\"name\":\"setPausingAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"PendlePausingManager","CompilerVersion":"v0.7.6+commit.7338295f","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"0000000000000000000000009b528bf0639fc31ae6d698c48d830873227741f10000000000000000000000008119ec16f0573b7dac7c0cb94eb504fb32456ee10000000000000000000000008119ec16f0573b7dac7c0cb94eb504fb32456ee10000000000000000000000008119ec16f0573b7dac7c0cb94eb504fb32456ee1","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}