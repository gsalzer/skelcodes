{"status":"1","message":"OK","result":[{"SourceCode":"#  @version ^0.2.12\r\nfrom vyper.interfaces import ERC20\r\n\r\nPRICE: constant(uint256) = 200 # 1 ETH is worth X\r\n\r\n\r\nevent CharityChange:\r\n    charity: indexed(address)\r\n    status: bool\r\n\r\n\r\nevent AdminChange:\r\n    admin: indexed(address)\r\n\r\n\r\nevent Purchase:\r\n    buyer: indexed(address)\r\n    liquidity: uint256\r\n    value: uint256\r\n\r\n\r\ninterface IUniswapRouter:\r\n    def addLiquidityETH(\r\n        token: address,\r\n        amountTokenDesired: uint256,\r\n        amountTokenMin: uint256,\r\n        amountETHMin: uint256,\r\n        to: address,\r\n        deadline: uint256,\r\n    ) -> (uint256, uint256, uint256):\r\n        payable\r\n\r\n\r\nuniswap: public(IUniswapRouter)\r\nsaleToken: public(ERC20)\r\n\r\nadmin: public(address)\r\ncharity: public(HashMap[address, bool])\r\n\r\nexpires: public(uint256)\r\nraised: public(uint256)\r\n\r\n\r\n@external\r\ndef __init__(_uniswap: address, _saleToken: address, _admin: address, _expires: uint256):\r\n    self.uniswap = IUniswapRouter(_uniswap)\r\n    self.saleToken = ERC20(_saleToken)\r\n    self.saleToken.approve(_uniswap, MAX_UINT256)\r\n    self.admin = _admin\r\n    self.expires = _expires\r\n\r\n\r\n@internal\r\n@view\r\ndef _estimate(_value: uint256) -> (uint256, uint256, uint256, uint256):\r\n    token: uint256 = _value * PRICE # (in token)\r\n    liquidity: uint256 = token / 5 # 20% of tokens (in token)\r\n    charity: uint256 = _value / 3 # (in ETH)\r\n    founder: uint256 = _value - (charity + _value / 2) # (in ETH)\r\n    return (token, liquidity, charity, founder)\r\n\r\n\r\n@external\r\ndef updateCharity(_charity: address, status: bool):\r\n    \"\"\"\r\n    @notice\r\n        Update charity status\r\n    @param _charity\r\n        Charity to update\r\n    @param status\r\n        True if charity can be donated\r\n    \"\"\"\r\n    assert msg.sender == self.admin\r\n    self.charity[_charity] = status\r\n    log CharityChange(_charity, status)\r\n\r\n\r\n@external\r\ndef updateAdmin(_to: address):\r\n    \"\"\"\r\n    @notice\r\n        Change admin\r\n    @param _to\r\n        Address of new admin\r\n    \"\"\"\r\n    assert msg.sender == self.admin\r\n    self.admin = _to\r\n    log AdminChange(_to)\r\n\r\n\r\n@external\r\ndef recover(token: address):\r\n    assert msg.sender == self.admin\r\n    assert block.timestamp > self.expires + 86400 * 180\r\n    assert token != self.saleToken.address, \"Sale: Cannot recover sale tokens\"\r\n    ERC20(token).transfer(msg.sender, ERC20(token).balanceOf(self))\r\n\r\n\r\n@external\r\n@payable\r\ndef purchase(_min: uint256, _charity: address) -> uint256:\r\n    \"\"\"\r\n    @notice\r\n        Purchase tokens through sale\r\n    @param _min\r\n        Minimum output for saleToken\r\n    @param _charity\r\n        Address of charity to donate\r\n    @return\r\n        Amount sent in saleToken\r\n    \"\"\"\r\n    assert self.charity[_charity], \"Sale: Unknown charity\"\r\n    assert self.expires > block.timestamp, \"Sale: Sale expired\"\r\n    self.raised += msg.value\r\n    token: uint256 = 0\r\n    liquidity: uint256 = 0\r\n    charity: uint256 = 0\r\n    founder: uint256 = 0\r\n    (token, liquidity, charity, founder) = self._estimate(msg.value)\r\n    if liquidity > 0:\r\n        # Remaining from liquidity and value\r\n        # will be refunded to the contract and\r\n        # admin will receive these tokens.\r\n        self.uniswap.addLiquidityETH(\r\n            self.saleToken.address,\r\n            liquidity,\r\n            0,\r\n            0,\r\n            self,\r\n            block.timestamp,\r\n            value=msg.value/2,\r\n        )\r\n    token = min(token, self.saleToken.balanceOf(self))\r\n    assert token >= _min, \"Sale: Token amount below user set minimum\"\r\n    self.saleToken.transfer(msg.sender, token)\r\n    send(_charity, min(charity, self.balance))\r\n    send(self.admin, self.balance)\r\n    log Purchase(msg.sender, liquidity, token)\r\n    return token\r\n\r\n\r\n@external\r\ndef burn():\r\n    \"\"\"\r\n    @notice\r\n        Burn tokens\r\n    @dev\r\n        Only after sale is expired\r\n    \"\"\"\r\n    assert block.timestamp > self.expires\r\n    self.saleToken.transfer(ZERO_ADDRESS, self.saleToken.balanceOf(self))\r\n\r\n\r\n@external\r\n@view\r\ndef estimate(_value: uint256) -> (uint256, uint256, uint256, uint256):\r\n    \"\"\"\r\n    @notice\r\n        Estimate tokens to receive for specific value\r\n    @param _value\r\n        Amount in ETH to purchase tokens\r\n    @return\r\n        Amount in sale token to receive\r\n        Amount in ETH for liquidity\r\n        Amount in ETH for charity\r\n        Amount in ETH for founders\r\n    \"\"\"\r\n    return self._estimate(_value)","ABI":"[{\"name\":\"CharityChange\",\"inputs\":[{\"name\":\"charity\",\"type\":\"address\",\"indexed\":true},{\"name\":\"status\",\"type\":\"bool\",\"indexed\":false}],\"anonymous\":false,\"type\":\"event\"},{\"name\":\"AdminChange\",\"inputs\":[{\"name\":\"admin\",\"type\":\"address\",\"indexed\":true}],\"anonymous\":false,\"type\":\"event\"},{\"name\":\"Purchase\",\"inputs\":[{\"name\":\"buyer\",\"type\":\"address\",\"indexed\":true},{\"name\":\"liquidity\",\"type\":\"uint256\",\"indexed\":false},{\"name\":\"value\",\"type\":\"uint256\",\"indexed\":false}],\"anonymous\":false,\"type\":\"event\"},{\"stateMutability\":\"nonpayable\",\"type\":\"constructor\",\"inputs\":[{\"name\":\"_uniswap\",\"type\":\"address\"},{\"name\":\"_saleToken\",\"type\":\"address\"},{\"name\":\"_admin\",\"type\":\"address\"},{\"name\":\"_expires\",\"type\":\"uint256\"}],\"outputs\":[]},{\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"updateCharity\",\"inputs\":[{\"name\":\"_charity\",\"type\":\"address\"},{\"name\":\"status\",\"type\":\"bool\"}],\"outputs\":[],\"gas\":39491},{\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"updateAdmin\",\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"}],\"outputs\":[],\"gas\":38715},{\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"recover\",\"inputs\":[{\"name\":\"token\",\"type\":\"address\"}],\"outputs\":[],\"gas\":11959},{\"stateMutability\":\"payable\",\"type\":\"function\",\"name\":\"purchase\",\"inputs\":[{\"name\":\"_min\",\"type\":\"uint256\"},{\"name\":\"_charity\",\"type\":\"address\"}],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"gas\":171700},{\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"burn\",\"inputs\":[],\"outputs\":[],\"gas\":11534},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"estimate\",\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"}],\"gas\":3080},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"uniswap\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"gas\":2568},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"saleToken\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"gas\":2598},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"admin\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"gas\":2628},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"charity\",\"inputs\":[{\"name\":\"arg0\",\"type\":\"address\"}],\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"gas\":2873},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"expires\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"gas\":2688},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"raised\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"gas\":2718}]","ContractName":"Vyper_contract","CompilerVersion":"vyper:0.2.12","OptimizationUsed":"0","Runs":"0","ConstructorArguments":"0000000000000000000000007a250d5630b4cf539739df2c5dacb4c659f2488d00000000000000000000000091b61b902090f4501d8000145cefc09d4b07669e0000000000000000000000004c73febea9d371d502a84b43e92fa5e24387cf200000000000000000000000000000000000000000000000000000000060fd6088","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":""}]}