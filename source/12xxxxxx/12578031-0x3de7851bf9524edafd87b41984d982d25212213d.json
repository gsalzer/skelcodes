{"status":"1","message":"OK","result":[{"SourceCode":"// Sources flattened with hardhat v2.0.11 https://hardhat.org\r\n\r\n// File @openzeppelin/contracts/utils/Context.sol@v4.1.0\r\n\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/*\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n\r\n// File @openzeppelin/contracts/access/Ownable.sol@v4.1.0\r\n\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor () {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\n\r\n// File contracts/BalanceAggregator.sol\r\n\r\n// SPDX-License-Identifier: LGPL-3.0-only\r\npragma solidity >=0.8.0;\r\n\r\ncontract Enum {\r\n    enum Operation {\r\n        Call, DelegateCall\r\n    }\r\n}\r\n\r\ninterface IAdapter {\r\n    function getBalance(\r\n        address token,\r\n        address account\r\n    )\r\n        external\r\n        view\r\n        returns(\r\n            uint256\r\n        );\r\n}\r\n\r\ninterface IERC20 {\r\n    function balanceOf(\r\n        address _owner\r\n    )\r\n        external\r\n        view\r\n        returns(\r\n            uint256 balance\r\n        );\r\n}\r\n\r\ncontract BalanceAggregator is Ownable{\r\n\r\n    event AddedAdapter(address owner);\r\n    event RemovedAdapter(address owner);\r\n\r\n    uint256 public adapterCount;\r\n    IERC20 public token;\r\n\r\n    address internal constant SENTINEL_ADAPTERS = address(0x1);\r\n\r\n    // Mapping of adapter contracts\r\n    mapping(address => address) internal adapters;\r\n\r\n    /// @param _adapters adapters that should be enabled immediately\r\n    constructor(\r\n        address _token,\r\n        address[] memory _adapters\r\n    ){\r\n        token = IERC20(_token);\r\n        setupAdapters(_adapters);\r\n    }\r\n\r\n    /// @dev Setup function sets initial storage of contract.\r\n    /// @param _adapters List of adapters.\r\n    function setupAdapters(\r\n        address[] memory _adapters\r\n    )\r\n        internal\r\n    {\r\n        // Initializing adapters.\r\n        address currentAdapter = SENTINEL_ADAPTERS;\r\n        for (uint256 i = 0; i < _adapters.length; i++) {\r\n            address adapter = _adapters[i];\r\n            require(adapter != address(0) && adapter != SENTINEL_ADAPTERS && adapter != address(this) && currentAdapter != adapter, \"Adapter address cannot be null, the sentinel, or this contract.\");\r\n            require(adapters[adapter] == address(0), \" No duplicate adapters allowed.\");\r\n            adapters[currentAdapter] = adapter;\r\n            currentAdapter = adapter;\r\n        }\r\n        adapters[currentAdapter] = SENTINEL_ADAPTERS;\r\n        adapterCount = _adapters.length;\r\n    }\r\n\r\n    /// @dev Allows to add a new adapter.\r\n    /// @notice Adds the adapter `adapter`.\r\n    /// @param adapter New adapter address.\r\n    function addAdapter(\r\n        address adapter\r\n    )\r\n        public\r\n        onlyOwner\r\n    {\r\n        require(adapter != address(0) && adapter != SENTINEL_ADAPTERS && adapter != address(this), \"Adapter address cannot be null, the sentinel, or this contract.\");\r\n        require(adapters[adapter] == address(0), \"No duplicate adapters allowed.\");\r\n        adapters[adapter] = adapters[SENTINEL_ADAPTERS];\r\n        adapters[SENTINEL_ADAPTERS] = adapter;\r\n        adapterCount++;\r\n        emit AddedAdapter(adapter);\r\n    }\r\n\r\n    /// @dev Allows to remove an adapter.\r\n    /// @notice Removes the adapter `adapter`.\r\n    /// @param prevAdapter Adapter that pointed to the adapter to be removed in the linked list.\r\n    /// @param adapter Adapter address to be removed.\r\n    function removeAdapter(\r\n        address prevAdapter,\r\n        address adapter\r\n    )\r\n        public\r\n        onlyOwner\r\n    {\r\n        // Validate adapter address and check that it corresponds to adapter index.\r\n        require(adapter != address(0) && adapter != SENTINEL_ADAPTERS, \"Adapter address cannot be null or the sentinel.\");\r\n        require(adapters[prevAdapter] == adapter, \"prevAdapter does not point to adapter.\");\r\n        adapters[prevAdapter] = adapters[adapter];\r\n        adapters[adapter] = address(0);\r\n        adapterCount--;\r\n        emit RemovedAdapter(adapter);\r\n    }\r\n\r\n    /// @dev Returns array of adapters.\r\n    /// @return Array of adapters.\r\n    function getAdapters()\r\n        public\r\n        view\r\n        returns(\r\n            address[] memory\r\n        )\r\n    {\r\n        address[] memory array = new address[](adapterCount);\r\n\r\n        // populate return array\r\n        uint256 index = 0;\r\n        address currentAdapter = adapters[SENTINEL_ADAPTERS];\r\n        while (currentAdapter != SENTINEL_ADAPTERS) {\r\n            array[index] = currentAdapter;\r\n            currentAdapter = adapters[currentAdapter];\r\n            index++;\r\n        }\r\n        return array;\r\n    }\r\n\r\n    function balanceOf(address _owner)\r\n        external\r\n        view\r\n        returns(\r\n            uint256 balance\r\n        )\r\n    {\r\n        address[] memory _adapters = getAdapters();\r\n        uint256 _balance = token.balanceOf(_owner);\r\n\r\n        for (uint i = 0; i < _adapters.length; i++){\r\n            IAdapter adapter = IAdapter(_adapters[i]);\r\n            uint adapterBalance = adapter.getBalance(address(token), _owner);\r\n            _balance = _balance + adapterBalance;\r\n        }\r\n        return _balance;\r\n    }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"_adapters\",\"type\":\"address[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"AddedAdapter\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"RemovedAdapter\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"adapterCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"adapter\",\"type\":\"address\"}],\"name\":\"addAdapter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAdapters\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"prevAdapter\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"adapter\",\"type\":\"address\"}],\"name\":\"removeAdapter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"BalanceAggregator","CompilerVersion":"v0.8.0+commit.c7dfd78e","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"0000000000000000000000006810e776880c02933d47db1b9fc05908e5386b9600000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000000001000000000000000000000000581ae5af7afa6f8171bbf40d1981779f168a9523","EVMVersion":"Default","Library":"","LicenseType":"GNU LGPLv3","Proxy":"0","Implementation":"","SwarmSource":"ipfs://a2dfb37050e5166074d0b523d9860e9b284fd2d103775d0809ae20e570943e22"}]}