{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/airdrop/AirdropPush.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: Unlicense\\npragma solidity 0.6.11;\\nimport \\\"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ncontract AirdropPush {\\n    using SafeERC20 for IERC20;\\n\\n    function distribute(\\n        IERC20 token,\\n        address[] calldata accounts,\\n        uint256[] calldata amounts\\n    ) external {\\n        require(accounts.length == amounts.length, \\\"LENGTH_MISMATCH\\\");\\n        for (uint256 i = 0; i < accounts.length; i++) {\\n            token.safeTransferFrom(msg.sender, accounts[i], amounts[i]);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"../../math/SafeMath.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using SafeMath for uint256;\\n    using Address for address;\\n\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        // solhint-disable-next-line max-line-length\\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \\\"SafeERC20: decreased allowance below zero\\\");\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) { // Return data is optional\\n            // solhint-disable-next-line max-line-length\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/math/SafeMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        uint256 c = a + b;\\n        if (c < a) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b > a) return (false, 0);\\n        return (true, a - b);\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) return (true, 0);\\n        uint256 c = a * b;\\n        if (c / a != b) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a / b);\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a % b);\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b <= a, \\\"SafeMath: subtraction overflow\\\");\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0) return 0;\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: division by zero\\\");\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: modulo by zero\\\");\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.2 <0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/wallet/ZeroExTradeWallet.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.11;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/EnumerableSet.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@0x/contracts-zero-ex/contracts/src/features/interfaces/INativeOrdersFeature.sol\\\";\\nimport \\\"../interfaces/IWallet.sol\\\";\\n\\ncontract ZeroExTradeWallet is IWallet, Ownable {\\n    using SafeERC20 for IERC20;\\n    using Address for address;\\n    using Address for address payable;\\n    using SafeMath for uint256;\\n    using EnumerableSet for EnumerableSet.AddressSet;\\n\\n    INativeOrdersFeature public zeroExRouter;\\n    address public manager;\\n    EnumerableSet.AddressSet internal tokens;\\n\\n    modifier onlyManager() {\\n        require(msg.sender == manager, \\\"INVALID_MANAGER\\\");\\n        _;\\n    }\\n\\n    constructor(address newRouter, address newManager) public {\\n        zeroExRouter = INativeOrdersFeature(newRouter);\\n        manager = newManager;\\n    }\\n\\n    function getTokens() external view returns (address[] memory) {\\n        address[] memory returnData = new address[](tokens.length());\\n        for (uint256 i = 0; i < tokens.length(); i++) {\\n            returnData[i] = tokens.at(i);\\n        }\\n        return returnData;\\n    }\\n\\n    // solhint-disable-next-line no-empty-blocks\\n    function registerAllowedOrderSigner(address signer, bool allowed) external override onlyOwner {\\n        zeroExRouter.registerAllowedOrderSigner(signer, allowed);\\n    }\\n\\n    function deposit(address[] calldata tokensToAdd, uint256[] calldata amounts)\\n        external\\n        override\\n        onlyManager\\n    {\\n        uint256 tokensLength = tokensToAdd.length;\\n        uint256 amountsLength = amounts.length;\\n\\n        require(tokensLength > 0, \\\"EMPTY_TOKEN_LIST\\\");\\n        require(tokensLength == amountsLength, \\\"LENGTH_MISMATCH\\\");\\n\\n        for (uint256 i = 0; i < tokensLength; i++) {\\n            IERC20(tokensToAdd[i]).safeTransferFrom(msg.sender, address(this), amounts[i]);\\n            // NOTE: approval must be done after transferFrom; balance is checked in the approval\\n            _approve(IERC20(tokensToAdd[i]));\\n            tokens.add(address(tokensToAdd[i]));\\n        }\\n    }\\n\\n    function withdraw(address[] calldata tokensToWithdraw, uint256[] calldata amounts)\\n        external\\n        override\\n        onlyManager\\n    {\\n        uint256 tokensLength = tokensToWithdraw.length;\\n        uint256 amountsLength = amounts.length;\\n\\n        require(tokensLength > 0, \\\"EMPTY_TOKEN_LIST\\\");\\n        require(tokensLength == amountsLength, \\\"LENGTH_MISMATCH\\\");\\n\\n        for (uint256 i = 0; i < tokensLength; i++) {\\n            IERC20(tokensToWithdraw[i]).safeTransfer(msg.sender, amounts[i]);\\n            if (IERC20(tokensToWithdraw[i]).balanceOf(address(this)) == 0) {\\n                tokens.remove(address(tokensToWithdraw[i]));\\n            }\\n        }\\n    }\\n\\n    function _approve(IERC20 token) internal {\\n        // Approve the zeroExRouter's allowance to max if the allowance ever drops below the balance of the token held\\n        uint256 allowance = token.allowance(address(this), address(zeroExRouter));\\n        if (allowance < token.balanceOf(address(this))) {\\n            if (allowance != 0) {\\n                token.safeApprove(address(zeroExRouter), 0);\\n            }\\n            token.safeApprove(address(zeroExRouter), type(uint256).max);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/EnumerableSet.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping (bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) { // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            // When the value to delete is the last one, the swap operation is unnecessary. However, since this occurs\\n            // so rarely, we still do the swap anyway to avoid the gas cost of adding an 'if' statement.\\n\\n            bytes32 lastvalue = set._values[lastIndex];\\n\\n            // Move the last value to the index where the value to delete is\\n            set._values[toDeleteIndex] = lastvalue;\\n            // Update the index for the moved value\\n            set._indexes[lastvalue] = toDeleteIndex + 1; // All indexes are 1-based\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        require(set._values.length > index, \\\"EnumerableSet: index out of bounds\\\");\\n        return set._values[index];\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor () internal {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n}\\n\"\r\n    },\r\n    \"@0x/contracts-zero-ex/contracts/src/features/interfaces/INativeOrdersFeature.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Apache-2.0\\n/*\\n\\n  Copyright 2020 ZeroEx Intl.\\n\\n  Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n  you may not use this file except in compliance with the License.\\n  You may obtain a copy of the License at\\n\\n    http://www.apache.org/licenses/LICENSE-2.0\\n\\n  Unless required by applicable law or agreed to in writing, software\\n  distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n  See the License for the specific language governing permissions and\\n  limitations under the License.\\n\\n*/\\n\\npragma solidity ^0.6.5;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"@0x/contracts-erc20/contracts/src/v06/IERC20TokenV06.sol\\\";\\nimport \\\"../libs/LibSignature.sol\\\";\\nimport \\\"../libs/LibNativeOrder.sol\\\";\\nimport \\\"./INativeOrdersEvents.sol\\\";\\n\\n\\n/// @dev Feature for interacting with limit orders.\\ninterface INativeOrdersFeature is\\n    INativeOrdersEvents\\n{\\n\\n    /// @dev Transfers protocol fees from the `FeeCollector` pools into\\n    ///      the staking contract.\\n    /// @param poolIds Staking pool IDs\\n    function transferProtocolFeesForPools(bytes32[] calldata poolIds)\\n        external;\\n\\n    /// @dev Fill a limit order. The taker and sender will be the caller.\\n    /// @param order The limit order. ETH protocol fees can be\\n    ///      attached to this call. Any unspent ETH will be refunded to\\n    ///      the caller.\\n    /// @param signature The order signature.\\n    /// @param takerTokenFillAmount Maximum taker token amount to fill this order with.\\n    /// @return takerTokenFilledAmount How much maker token was filled.\\n    /// @return makerTokenFilledAmount How much maker token was filled.\\n    function fillLimitOrder(\\n        LibNativeOrder.LimitOrder calldata order,\\n        LibSignature.Signature calldata signature,\\n        uint128 takerTokenFillAmount\\n    )\\n        external\\n        payable\\n        returns (uint128 takerTokenFilledAmount, uint128 makerTokenFilledAmount);\\n\\n    /// @dev Fill an RFQ order for up to `takerTokenFillAmount` taker tokens.\\n    ///      The taker will be the caller.\\n    /// @param order The RFQ order.\\n    /// @param signature The order signature.\\n    /// @param takerTokenFillAmount Maximum taker token amount to fill this order with.\\n    /// @return takerTokenFilledAmount How much maker token was filled.\\n    /// @return makerTokenFilledAmount How much maker token was filled.\\n    function fillRfqOrder(\\n        LibNativeOrder.RfqOrder calldata order,\\n        LibSignature.Signature calldata signature,\\n        uint128 takerTokenFillAmount\\n    )\\n        external\\n        returns (uint128 takerTokenFilledAmount, uint128 makerTokenFilledAmount);\\n\\n    /// @dev Fill an RFQ order for exactly `takerTokenFillAmount` taker tokens.\\n    ///      The taker will be the caller. ETH protocol fees can be\\n    ///      attached to this call. Any unspent ETH will be refunded to\\n    ///      the caller.\\n    /// @param order The limit order.\\n    /// @param signature The order signature.\\n    /// @param takerTokenFillAmount How much taker token to fill this order with.\\n    /// @return makerTokenFilledAmount How much maker token was filled.\\n    function fillOrKillLimitOrder(\\n        LibNativeOrder.LimitOrder calldata order,\\n        LibSignature.Signature calldata signature,\\n        uint128 takerTokenFillAmount\\n    )\\n        external\\n        payable\\n        returns (uint128 makerTokenFilledAmount);\\n\\n    /// @dev Fill an RFQ order for exactly `takerTokenFillAmount` taker tokens.\\n    ///      The taker will be the caller.\\n    /// @param order The RFQ order.\\n    /// @param signature The order signature.\\n    /// @param takerTokenFillAmount How much taker token to fill this order with.\\n    /// @return makerTokenFilledAmount How much maker token was filled.\\n    function fillOrKillRfqOrder(\\n        LibNativeOrder.RfqOrder calldata order,\\n        LibSignature.Signature calldata signature,\\n        uint128 takerTokenFillAmount\\n    )\\n        external\\n        returns (uint128 makerTokenFilledAmount);\\n\\n    /// @dev Fill a limit order. Internal variant. ETH protocol fees can be\\n    ///      attached to this call. Any unspent ETH will be refunded to\\n    ///      `msg.sender` (not `sender`).\\n    /// @param order The limit order.\\n    /// @param signature The order signature.\\n    /// @param takerTokenFillAmount Maximum taker token to fill this order with.\\n    /// @param taker The order taker.\\n    /// @param sender The order sender.\\n    /// @return takerTokenFilledAmount How much maker token was filled.\\n    /// @return makerTokenFilledAmount How much maker token was filled.\\n    function _fillLimitOrder(\\n        LibNativeOrder.LimitOrder calldata order,\\n        LibSignature.Signature calldata signature,\\n        uint128 takerTokenFillAmount,\\n        address taker,\\n        address sender\\n    )\\n        external\\n        payable\\n        returns (uint128 takerTokenFilledAmount, uint128 makerTokenFilledAmount);\\n\\n    /// @dev Fill an RFQ order. Internal variant.\\n    /// @param order The RFQ order.\\n    /// @param signature The order signature.\\n    /// @param takerTokenFillAmount Maximum taker token to fill this order with.\\n    /// @param taker The order taker.\\n    /// @return takerTokenFilledAmount How much maker token was filled.\\n    /// @return makerTokenFilledAmount How much maker token was filled.\\n    function _fillRfqOrder(\\n        LibNativeOrder.RfqOrder calldata order,\\n        LibSignature.Signature calldata signature,\\n        uint128 takerTokenFillAmount,\\n        address taker\\n    )\\n        external\\n        returns (uint128 takerTokenFilledAmount, uint128 makerTokenFilledAmount);\\n\\n    /// @dev Cancel a single limit order. The caller must be the maker or a valid order signer.\\n    ///      Silently succeeds if the order has already been cancelled.\\n    /// @param order The limit order.\\n    function cancelLimitOrder(LibNativeOrder.LimitOrder calldata order)\\n        external;\\n\\n    /// @dev Cancel a single RFQ order. The caller must be the maker or a valid order signer.\\n    ///      Silently succeeds if the order has already been cancelled.\\n    /// @param order The RFQ order.\\n    function cancelRfqOrder(LibNativeOrder.RfqOrder calldata order)\\n        external;\\n\\n    /// @dev Mark what tx.origin addresses are allowed to fill an order that\\n    ///      specifies the message sender as its txOrigin.\\n    /// @param origins An array of origin addresses to update.\\n    /// @param allowed True to register, false to unregister.\\n    function registerAllowedRfqOrigins(address[] memory origins, bool allowed)\\n        external;\\n\\n    /// @dev Cancel multiple limit orders. The caller must be the maker or a valid order signer.\\n    ///      Silently succeeds if the order has already been cancelled.\\n    /// @param orders The limit orders.\\n    function batchCancelLimitOrders(LibNativeOrder.LimitOrder[] calldata orders)\\n        external;\\n\\n    /// @dev Cancel multiple RFQ orders. The caller must be the maker or a valid order signer.\\n    ///      Silently succeeds if the order has already been cancelled.\\n    /// @param orders The RFQ orders.\\n    function batchCancelRfqOrders(LibNativeOrder.RfqOrder[] calldata orders)\\n        external;\\n\\n    /// @dev Cancel all limit orders for a given maker and pair with a salt less\\n    ///      than the value provided. The caller must be the maker. Subsequent\\n    ///      calls to this function with the same caller and pair require the\\n    ///      new salt to be >= the old salt.\\n    /// @param makerToken The maker token.\\n    /// @param takerToken The taker token.\\n    /// @param minValidSalt The new minimum valid salt.\\n    function cancelPairLimitOrders(\\n        IERC20TokenV06 makerToken,\\n        IERC20TokenV06 takerToken,\\n        uint256 minValidSalt\\n    )\\n        external;\\n\\n    /// @dev Cancel all limit orders for a given maker and pair with a salt less\\n    ///      than the value provided. The caller must be a signer registered to the maker.\\n    ///      Subsequent calls to this function with the same maker and pair require the\\n    ///      new salt to be >= the old salt.\\n    /// @param maker The maker for which to cancel.\\n    /// @param makerToken The maker token.\\n    /// @param takerToken The taker token.\\n    /// @param minValidSalt The new minimum valid salt.\\n    function cancelPairLimitOrdersWithSigner(\\n        address maker,\\n        IERC20TokenV06 makerToken,\\n        IERC20TokenV06 takerToken,\\n        uint256 minValidSalt\\n    )\\n        external;\\n\\n    /// @dev Cancel all limit orders for a given maker and pairs with salts less\\n    ///      than the values provided. The caller must be the maker. Subsequent\\n    ///      calls to this function with the same caller and pair require the\\n    ///      new salt to be >= the old salt.\\n    /// @param makerTokens The maker tokens.\\n    /// @param takerTokens The taker tokens.\\n    /// @param minValidSalts The new minimum valid salts.\\n    function batchCancelPairLimitOrders(\\n        IERC20TokenV06[] calldata makerTokens,\\n        IERC20TokenV06[] calldata takerTokens,\\n        uint256[] calldata minValidSalts\\n    )\\n        external;\\n\\n    /// @dev Cancel all limit orders for a given maker and pairs with salts less\\n    ///      than the values provided. The caller must be a signer registered to the maker.\\n    ///      Subsequent calls to this function with the same maker and pair require the\\n    ///      new salt to be >= the old salt.\\n    /// @param maker The maker for which to cancel.\\n    /// @param makerTokens The maker tokens.\\n    /// @param takerTokens The taker tokens.\\n    /// @param minValidSalts The new minimum valid salts.\\n    function batchCancelPairLimitOrdersWithSigner(\\n        address maker,\\n        IERC20TokenV06[] memory makerTokens,\\n        IERC20TokenV06[] memory takerTokens,\\n        uint256[] memory minValidSalts\\n    )\\n        external;\\n\\n    /// @dev Cancel all RFQ orders for a given maker and pair with a salt less\\n    ///      than the value provided. The caller must be the maker. Subsequent\\n    ///      calls to this function with the same caller and pair require the\\n    ///      new salt to be >= the old salt.\\n    /// @param makerToken The maker token.\\n    /// @param takerToken The taker token.\\n    /// @param minValidSalt The new minimum valid salt.\\n    function cancelPairRfqOrders(\\n        IERC20TokenV06 makerToken,\\n        IERC20TokenV06 takerToken,\\n        uint256 minValidSalt\\n    )\\n        external;\\n\\n    /// @dev Cancel all RFQ orders for a given maker and pair with a salt less\\n    ///      than the value provided. The caller must be a signer registered to the maker.\\n    ///      Subsequent calls to this function with the same maker and pair require the\\n    ///      new salt to be >= the old salt.\\n    /// @param maker The maker for which to cancel.\\n    /// @param makerToken The maker token.\\n    /// @param takerToken The taker token.\\n    /// @param minValidSalt The new minimum valid salt.\\n    function cancelPairRfqOrdersWithSigner(\\n        address maker,\\n        IERC20TokenV06 makerToken,\\n        IERC20TokenV06 takerToken,\\n        uint256 minValidSalt\\n    )\\n        external;\\n\\n    /// @dev Cancel all RFQ orders for a given maker and pairs with salts less\\n    ///      than the values provided. The caller must be the maker. Subsequent\\n    ///      calls to this function with the same caller and pair require the\\n    ///      new salt to be >= the old salt.\\n    /// @param makerTokens The maker tokens.\\n    /// @param takerTokens The taker tokens.\\n    /// @param minValidSalts The new minimum valid salts.\\n    function batchCancelPairRfqOrders(\\n        IERC20TokenV06[] calldata makerTokens,\\n        IERC20TokenV06[] calldata takerTokens,\\n        uint256[] calldata minValidSalts\\n    )\\n        external;\\n\\n    /// @dev Cancel all RFQ orders for a given maker and pairs with salts less\\n    ///      than the values provided. The caller must be a signer registered to the maker.\\n    ///      Subsequent calls to this function with the same maker and pair require the\\n    ///      new salt to be >= the old salt.\\n    /// @param maker The maker for which to cancel.\\n    /// @param makerTokens The maker tokens.\\n    /// @param takerTokens The taker tokens.\\n    /// @param minValidSalts The new minimum valid salts.\\n    function batchCancelPairRfqOrdersWithSigner(\\n        address maker,\\n        IERC20TokenV06[] memory makerTokens,\\n        IERC20TokenV06[] memory takerTokens,\\n        uint256[] memory minValidSalts\\n    )\\n        external;\\n\\n    /// @dev Get the order info for a limit order.\\n    /// @param order The limit order.\\n    /// @return orderInfo Info about the order.\\n    function getLimitOrderInfo(LibNativeOrder.LimitOrder calldata order)\\n        external\\n        view\\n        returns (LibNativeOrder.OrderInfo memory orderInfo);\\n\\n    /// @dev Get the order info for an RFQ order.\\n    /// @param order The RFQ order.\\n    /// @return orderInfo Info about the order.\\n    function getRfqOrderInfo(LibNativeOrder.RfqOrder calldata order)\\n        external\\n        view\\n        returns (LibNativeOrder.OrderInfo memory orderInfo);\\n\\n    /// @dev Get the canonical hash of a limit order.\\n    /// @param order The limit order.\\n    /// @return orderHash The order hash.\\n    function getLimitOrderHash(LibNativeOrder.LimitOrder calldata order)\\n        external\\n        view\\n        returns (bytes32 orderHash);\\n\\n    /// @dev Get the canonical hash of an RFQ order.\\n    /// @param order The RFQ order.\\n    /// @return orderHash The order hash.\\n    function getRfqOrderHash(LibNativeOrder.RfqOrder calldata order)\\n        external\\n        view\\n        returns (bytes32 orderHash);\\n\\n    /// @dev Get the protocol fee multiplier. This should be multiplied by the\\n    ///      gas price to arrive at the required protocol fee to fill a native order.\\n    /// @return multiplier The protocol fee multiplier.\\n    function getProtocolFeeMultiplier()\\n        external\\n        view\\n        returns (uint32 multiplier);\\n\\n    /// @dev Get order info, fillable amount, and signature validity for a limit order.\\n    ///      Fillable amount is determined using balances and allowances of the maker.\\n    /// @param order The limit order.\\n    /// @param signature The order signature.\\n    /// @return orderInfo Info about the order.\\n    /// @return actualFillableTakerTokenAmount How much of the order is fillable\\n    ///         based on maker funds, in taker tokens.\\n    /// @return isSignatureValid Whether the signature is valid.\\n    function getLimitOrderRelevantState(\\n        LibNativeOrder.LimitOrder calldata order,\\n        LibSignature.Signature calldata signature\\n    )\\n        external\\n        view\\n        returns (\\n            LibNativeOrder.OrderInfo memory orderInfo,\\n            uint128 actualFillableTakerTokenAmount,\\n            bool isSignatureValid\\n        );\\n\\n    /// @dev Get order info, fillable amount, and signature validity for an RFQ order.\\n    ///      Fillable amount is determined using balances and allowances of the maker.\\n    /// @param order The RFQ order.\\n    /// @param signature The order signature.\\n    /// @return orderInfo Info about the order.\\n    /// @return actualFillableTakerTokenAmount How much of the order is fillable\\n    ///         based on maker funds, in taker tokens.\\n    /// @return isSignatureValid Whether the signature is valid.\\n    function getRfqOrderRelevantState(\\n        LibNativeOrder.RfqOrder calldata order,\\n        LibSignature.Signature calldata signature\\n    )\\n        external\\n        view\\n        returns (\\n            LibNativeOrder.OrderInfo memory orderInfo,\\n            uint128 actualFillableTakerTokenAmount,\\n            bool isSignatureValid\\n        );\\n\\n    /// @dev Batch version of `getLimitOrderRelevantState()`, without reverting.\\n    ///      Orders that would normally cause `getLimitOrderRelevantState()`\\n    ///      to revert will have empty results.\\n    /// @param orders The limit orders.\\n    /// @param signatures The order signatures.\\n    /// @return orderInfos Info about the orders.\\n    /// @return actualFillableTakerTokenAmounts How much of each order is fillable\\n    ///         based on maker funds, in taker tokens.\\n    /// @return isSignatureValids Whether each signature is valid for the order.\\n    function batchGetLimitOrderRelevantStates(\\n        LibNativeOrder.LimitOrder[] calldata orders,\\n        LibSignature.Signature[] calldata signatures\\n    )\\n        external\\n        view\\n        returns (\\n            LibNativeOrder.OrderInfo[] memory orderInfos,\\n            uint128[] memory actualFillableTakerTokenAmounts,\\n            bool[] memory isSignatureValids\\n        );\\n\\n    /// @dev Batch version of `getRfqOrderRelevantState()`, without reverting.\\n    ///      Orders that would normally cause `getRfqOrderRelevantState()`\\n    ///      to revert will have empty results.\\n    /// @param orders The RFQ orders.\\n    /// @param signatures The order signatures.\\n    /// @return orderInfos Info about the orders.\\n    /// @return actualFillableTakerTokenAmounts How much of each order is fillable\\n    ///         based on maker funds, in taker tokens.\\n    /// @return isSignatureValids Whether each signature is valid for the order.\\n    function batchGetRfqOrderRelevantStates(\\n        LibNativeOrder.RfqOrder[] calldata orders,\\n        LibSignature.Signature[] calldata signatures\\n    )\\n        external\\n        view\\n        returns (\\n            LibNativeOrder.OrderInfo[] memory orderInfos,\\n            uint128[] memory actualFillableTakerTokenAmounts,\\n            bool[] memory isSignatureValids\\n        );\\n\\n    /// @dev Register a signer who can sign on behalf of msg.sender\\n    ///      This allows one to sign on behalf of a contract that calls this function\\n    /// @param signer The address from which you plan to generate signatures\\n    /// @param allowed True to register, false to unregister.\\n    function registerAllowedOrderSigner(\\n        address signer,\\n        bool allowed\\n    )\\n        external;\\n\\n    /// @dev checks if a given address is registered to sign on behalf of a maker address\\n    /// @param maker The maker address encoded in an order (can be a contract)\\n    /// @param signer The address that is providing a signature\\n    function isValidOrderSigner(\\n        address maker,\\n        address signer\\n    )\\n        external\\n        view\\n        returns (bool isAllowed);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IWallet.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.11;\\n\\ninterface IWallet {\\n    function registerAllowedOrderSigner(address signer, bool allowed) external;\\n\\n    function deposit(address[] calldata tokens, uint256[] calldata amounts) external;\\n\\n    function withdraw(address[] calldata tokens, uint256[] calldata amounts) external;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"@0x/contracts-erc20/contracts/src/v06/IERC20TokenV06.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Apache-2.0\\n/*\\n\\n  Copyright 2020 ZeroEx Intl.\\n\\n  Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n  you may not use this file except in compliance with the License.\\n  You may obtain a copy of the License at\\n\\n    http://www.apache.org/licenses/LICENSE-2.0\\n\\n  Unless required by applicable law or agreed to in writing, software\\n  distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n  See the License for the specific language governing permissions and\\n  limitations under the License.\\n\\n*/\\n\\npragma solidity ^0.6.5;\\n\\n\\ninterface IERC20TokenV06 {\\n\\n    // solhint-disable no-simple-event-func-name\\n    event Transfer(\\n        address indexed from,\\n        address indexed to,\\n        uint256 value\\n    );\\n\\n    event Approval(\\n        address indexed owner,\\n        address indexed spender,\\n        uint256 value\\n    );\\n\\n    /// @dev send `value` token to `to` from `msg.sender`\\n    /// @param to The address of the recipient\\n    /// @param value The amount of token to be transferred\\n    /// @return True if transfer was successful\\n    function transfer(address to, uint256 value)\\n        external\\n        returns (bool);\\n\\n    /// @dev send `value` token to `to` from `from` on the condition it is approved by `from`\\n    /// @param from The address of the sender\\n    /// @param to The address of the recipient\\n    /// @param value The amount of token to be transferred\\n    /// @return True if transfer was successful\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 value\\n    )\\n        external\\n        returns (bool);\\n\\n    /// @dev `msg.sender` approves `spender` to spend `value` tokens\\n    /// @param spender The address of the account able to transfer the tokens\\n    /// @param value The amount of wei to be approved for transfer\\n    /// @return Always true if the call has enough gas to complete execution\\n    function approve(address spender, uint256 value)\\n        external\\n        returns (bool);\\n\\n    /// @dev Query total supply of token\\n    /// @return Total supply of token\\n    function totalSupply()\\n        external\\n        view\\n        returns (uint256);\\n\\n    /// @dev Get the balance of `owner`.\\n    /// @param owner The address from which the balance will be retrieved\\n    /// @return Balance of owner\\n    function balanceOf(address owner)\\n        external\\n        view\\n        returns (uint256);\\n\\n    /// @dev Get the allowance for `spender` to spend from `owner`.\\n    /// @param owner The address of the account owning tokens\\n    /// @param spender The address of the account able to transfer the tokens\\n    /// @return Amount of remaining tokens allowed to spent\\n    function allowance(address owner, address spender)\\n        external\\n        view\\n        returns (uint256);\\n\\n    /// @dev Get the number of decimals this token has.\\n    function decimals()\\n        external\\n        view\\n        returns (uint8);\\n}\\n\"\r\n    },\r\n    \"@0x/contracts-zero-ex/contracts/src/features/libs/LibSignature.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Apache-2.0\\n/*\\n\\n  Copyright 2020 ZeroEx Intl.\\n\\n  Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n  you may not use this file except in compliance with the License.\\n  You may obtain a copy of the License at\\n\\n    http://www.apache.org/licenses/LICENSE-2.0\\n\\n  Unless required by applicable law or agreed to in writing, software\\n  distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n  See the License for the specific language governing permissions and\\n  limitations under the License.\\n\\n*/\\n\\npragma solidity ^0.6.5;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"@0x/contracts-utils/contracts/src/v06/errors/LibRichErrorsV06.sol\\\";\\nimport \\\"../../errors/LibSignatureRichErrors.sol\\\";\\n\\n\\n/// @dev A library for validating signatures.\\nlibrary LibSignature {\\n    using LibRichErrorsV06 for bytes;\\n\\n    // '\\\\x19Ethereum Signed Message:\\\\n32\\\\x00\\\\x00\\\\x00\\\\x00' in a word.\\n    uint256 private constant ETH_SIGN_HASH_PREFIX =\\n        0x19457468657265756d205369676e6564204d6573736167653a0a333200000000;\\n    /// @dev Exclusive upper limit on ECDSA signatures 'R' values.\\n    ///      The valid range is given by fig (282) of the yellow paper.\\n    uint256 private constant ECDSA_SIGNATURE_R_LIMIT =\\n        uint256(0xfffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364141);\\n    /// @dev Exclusive upper limit on ECDSA signatures 'S' values.\\n    ///      The valid range is given by fig (283) of the yellow paper.\\n    uint256 private constant ECDSA_SIGNATURE_S_LIMIT = ECDSA_SIGNATURE_R_LIMIT / 2 + 1;\\n\\n    /// @dev Allowed signature types.\\n    enum SignatureType {\\n        ILLEGAL,\\n        INVALID,\\n        EIP712,\\n        ETHSIGN\\n    }\\n\\n    /// @dev Encoded EC signature.\\n    struct Signature {\\n        // How to validate the signature.\\n        SignatureType signatureType;\\n        // EC Signature data.\\n        uint8 v;\\n        // EC Signature data.\\n        bytes32 r;\\n        // EC Signature data.\\n        bytes32 s;\\n    }\\n\\n    /// @dev Retrieve the signer of a signature.\\n    ///      Throws if the signature can't be validated.\\n    /// @param hash The hash that was signed.\\n    /// @param signature The signature.\\n    /// @return recovered The recovered signer address.\\n    function getSignerOfHash(\\n        bytes32 hash,\\n        Signature memory signature\\n    )\\n        internal\\n        pure\\n        returns (address recovered)\\n    {\\n        // Ensure this is a signature type that can be validated against a hash.\\n        _validateHashCompatibleSignature(hash, signature);\\n\\n        if (signature.signatureType == SignatureType.EIP712) {\\n            // Signed using EIP712\\n            recovered = ecrecover(\\n                hash,\\n                signature.v,\\n                signature.r,\\n                signature.s\\n            );\\n        } else if (signature.signatureType == SignatureType.ETHSIGN) {\\n            // Signed using `eth_sign`\\n            // Need to hash `hash` with \\\"\\\\x19Ethereum Signed Message:\\\\n32\\\" prefix\\n            // in packed encoding.\\n            bytes32 ethSignHash;\\n            assembly {\\n                // Use scratch space\\n                mstore(0, ETH_SIGN_HASH_PREFIX) // length of 28 bytes\\n                mstore(28, hash) // length of 32 bytes\\n                ethSignHash := keccak256(0, 60)\\n            }\\n            recovered = ecrecover(\\n                ethSignHash,\\n                signature.v,\\n                signature.r,\\n                signature.s\\n            );\\n        }\\n        // `recovered` can be null if the signature values are out of range.\\n        if (recovered == address(0)) {\\n            LibSignatureRichErrors.SignatureValidationError(\\n                LibSignatureRichErrors.SignatureValidationErrorCodes.BAD_SIGNATURE_DATA,\\n                hash\\n            ).rrevert();\\n        }\\n    }\\n\\n    /// @dev Validates that a signature is compatible with a hash signee.\\n    /// @param hash The hash that was signed.\\n    /// @param signature The signature.\\n    function _validateHashCompatibleSignature(\\n        bytes32 hash,\\n        Signature memory signature\\n    )\\n        private\\n        pure\\n    {\\n        // Ensure the r and s are within malleability limits.\\n        if (uint256(signature.r) >= ECDSA_SIGNATURE_R_LIMIT ||\\n            uint256(signature.s) >= ECDSA_SIGNATURE_S_LIMIT)\\n        {\\n            LibSignatureRichErrors.SignatureValidationError(\\n                LibSignatureRichErrors.SignatureValidationErrorCodes.BAD_SIGNATURE_DATA,\\n                hash\\n            ).rrevert();\\n        }\\n\\n        // Always illegal signature.\\n        if (signature.signatureType == SignatureType.ILLEGAL) {\\n            LibSignatureRichErrors.SignatureValidationError(\\n                LibSignatureRichErrors.SignatureValidationErrorCodes.ILLEGAL,\\n                hash\\n            ).rrevert();\\n        }\\n\\n        // Always invalid.\\n        if (signature.signatureType == SignatureType.INVALID) {\\n            LibSignatureRichErrors.SignatureValidationError(\\n                LibSignatureRichErrors.SignatureValidationErrorCodes.ALWAYS_INVALID,\\n                hash\\n            ).rrevert();\\n        }\\n\\n        // Solidity should check that the signature type is within enum range for us\\n        // when abi-decoding.\\n    }\\n}\\n\"\r\n    },\r\n    \"@0x/contracts-zero-ex/contracts/src/features/libs/LibNativeOrder.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Apache-2.0\\n/*\\n\\n  Copyright 2020 ZeroEx Intl.\\n\\n  Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n  you may not use this file except in compliance with the License.\\n  You may obtain a copy of the License at\\n\\n    http://www.apache.org/licenses/LICENSE-2.0\\n\\n  Unless required by applicable law or agreed to in writing, software\\n  distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n  See the License for the specific language governing permissions and\\n  limitations under the License.\\n\\n*/\\n\\npragma solidity ^0.6.5;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"@0x/contracts-erc20/contracts/src/v06/IERC20TokenV06.sol\\\";\\nimport \\\"@0x/contracts-utils/contracts/src/v06/errors/LibRichErrorsV06.sol\\\";\\nimport \\\"@0x/contracts-utils/contracts/src/v06/LibSafeMathV06.sol\\\";\\nimport \\\"../../errors/LibNativeOrdersRichErrors.sol\\\";\\n\\n\\n/// @dev A library for common native order operations.\\nlibrary LibNativeOrder {\\n    using LibSafeMathV06 for uint256;\\n    using LibRichErrorsV06 for bytes;\\n\\n    enum OrderStatus {\\n        INVALID,\\n        FILLABLE,\\n        FILLED,\\n        CANCELLED,\\n        EXPIRED\\n    }\\n\\n    /// @dev A standard OTC or OO limit order.\\n    struct LimitOrder {\\n        IERC20TokenV06 makerToken;\\n        IERC20TokenV06 takerToken;\\n        uint128 makerAmount;\\n        uint128 takerAmount;\\n        uint128 takerTokenFeeAmount;\\n        address maker;\\n        address taker;\\n        address sender;\\n        address feeRecipient;\\n        bytes32 pool;\\n        uint64 expiry;\\n        uint256 salt;\\n    }\\n\\n    /// @dev An RFQ limit order.\\n    struct RfqOrder {\\n        IERC20TokenV06 makerToken;\\n        IERC20TokenV06 takerToken;\\n        uint128 makerAmount;\\n        uint128 takerAmount;\\n        address maker;\\n        address taker;\\n        address txOrigin;\\n        bytes32 pool;\\n        uint64 expiry;\\n        uint256 salt;\\n    }\\n\\n    /// @dev An OTC limit order.\\n    struct OtcOrder {\\n        IERC20TokenV06 makerToken;\\n        IERC20TokenV06 takerToken;\\n        uint128 makerAmount;\\n        uint128 takerAmount;\\n        address maker;\\n        address taker;\\n        address txOrigin;\\n        uint256 expiryAndNonce; // [uint64 expiry, uint64 nonceBucket, uint128 nonce]\\n    }\\n\\n    /// @dev Info on a limit or RFQ order.\\n    struct OrderInfo {\\n        bytes32 orderHash;\\n        OrderStatus status;\\n        uint128 takerTokenFilledAmount;\\n    }\\n\\n    /// @dev Info on an OTC order.\\n    struct OtcOrderInfo {\\n        bytes32 orderHash;\\n        OrderStatus status;\\n    }\\n\\n    uint256 private constant UINT_128_MASK = (1 << 128) - 1;\\n    uint256 private constant UINT_64_MASK = (1 << 64) - 1;\\n    uint256 private constant ADDRESS_MASK = (1 << 160) - 1;\\n\\n    // The type hash for limit orders, which is:\\n    // keccak256(abi.encodePacked(\\n    //     \\\"LimitOrder(\\\",\\n    //       \\\"address makerToken,\\\",\\n    //       \\\"address takerToken,\\\",\\n    //       \\\"uint128 makerAmount,\\\",\\n    //       \\\"uint128 takerAmount,\\\",\\n    //       \\\"uint128 takerTokenFeeAmount,\\\",\\n    //       \\\"address maker,\\\",\\n    //       \\\"address taker,\\\",\\n    //       \\\"address sender,\\\",\\n    //       \\\"address feeRecipient,\\\",\\n    //       \\\"bytes32 pool,\\\",\\n    //       \\\"uint64 expiry,\\\",\\n    //       \\\"uint256 salt\\\"\\n    //     \\\")\\\"\\n    // ))\\n    uint256 private constant _LIMIT_ORDER_TYPEHASH =\\n        0xce918627cb55462ddbb85e73de69a8b322f2bc88f4507c52fcad6d4c33c29d49;\\n\\n    // The type hash for RFQ orders, which is:\\n    // keccak256(abi.encodePacked(\\n    //     \\\"RfqOrder(\\\",\\n    //       \\\"address makerToken,\\\",\\n    //       \\\"address takerToken,\\\",\\n    //       \\\"uint128 makerAmount,\\\",\\n    //       \\\"uint128 takerAmount,\\\",\\n    //       \\\"address maker,\\\",\\n    //       \\\"address taker,\\\",\\n    //       \\\"address txOrigin,\\\",\\n    //       \\\"bytes32 pool,\\\",\\n    //       \\\"uint64 expiry,\\\",\\n    //       \\\"uint256 salt\\\"\\n    //     \\\")\\\"\\n    // ))\\n    uint256 private constant _RFQ_ORDER_TYPEHASH =\\n        0xe593d3fdfa8b60e5e17a1b2204662ecbe15c23f2084b9ad5bae40359540a7da9;\\n\\n    // The type hash for OTC orders, which is:\\n    // keccak256(abi.encodePacked(\\n    //     \\\"OtcOrder(\\\",\\n    //       \\\"address makerToken,\\\",\\n    //       \\\"address takerToken,\\\",\\n    //       \\\"uint128 makerAmount,\\\",\\n    //       \\\"uint128 takerAmount,\\\",\\n    //       \\\"address maker,\\\",\\n    //       \\\"address taker,\\\",\\n    //       \\\"address txOrigin,\\\",\\n    //       \\\"uint256 expiryAndNonce\\\"\\n    //     \\\")\\\"\\n    // ))\\n    uint256 private constant _OTC_ORDER_TYPEHASH =\\n        0x2f754524de756ae72459efbe1ec88c19a745639821de528ac3fb88f9e65e35c8;\\n\\n    /// @dev Get the struct hash of a limit order.\\n    /// @param order The limit order.\\n    /// @return structHash The struct hash of the order.\\n    function getLimitOrderStructHash(LimitOrder memory order)\\n        internal\\n        pure\\n        returns (bytes32 structHash)\\n    {\\n        // The struct hash is:\\n        // keccak256(abi.encode(\\n        //   TYPE_HASH,\\n        //   order.makerToken,\\n        //   order.takerToken,\\n        //   order.makerAmount,\\n        //   order.takerAmount,\\n        //   order.takerTokenFeeAmount,\\n        //   order.maker,\\n        //   order.taker,\\n        //   order.sender,\\n        //   order.feeRecipient,\\n        //   order.pool,\\n        //   order.expiry,\\n        //   order.salt,\\n        // ))\\n        assembly {\\n            let mem := mload(0x40)\\n            mstore(mem, _LIMIT_ORDER_TYPEHASH)\\n            // order.makerToken;\\n            mstore(add(mem, 0x20), and(ADDRESS_MASK, mload(order)))\\n            // order.takerToken;\\n            mstore(add(mem, 0x40), and(ADDRESS_MASK, mload(add(order, 0x20))))\\n            // order.makerAmount;\\n            mstore(add(mem, 0x60), and(UINT_128_MASK, mload(add(order, 0x40))))\\n            // order.takerAmount;\\n            mstore(add(mem, 0x80), and(UINT_128_MASK, mload(add(order, 0x60))))\\n            // order.takerTokenFeeAmount;\\n            mstore(add(mem, 0xA0), and(UINT_128_MASK, mload(add(order, 0x80))))\\n            // order.maker;\\n            mstore(add(mem, 0xC0), and(ADDRESS_MASK, mload(add(order, 0xA0))))\\n            // order.taker;\\n            mstore(add(mem, 0xE0), and(ADDRESS_MASK, mload(add(order, 0xC0))))\\n            // order.sender;\\n            mstore(add(mem, 0x100), and(ADDRESS_MASK, mload(add(order, 0xE0))))\\n            // order.feeRecipient;\\n            mstore(add(mem, 0x120), and(ADDRESS_MASK, mload(add(order, 0x100))))\\n            // order.pool;\\n            mstore(add(mem, 0x140), mload(add(order, 0x120)))\\n            // order.expiry;\\n            mstore(add(mem, 0x160), and(UINT_64_MASK, mload(add(order, 0x140))))\\n            // order.salt;\\n            mstore(add(mem, 0x180), mload(add(order, 0x160)))\\n            structHash := keccak256(mem, 0x1A0)\\n        }\\n    }\\n\\n    /// @dev Get the struct hash of a RFQ order.\\n    /// @param order The RFQ order.\\n    /// @return structHash The struct hash of the order.\\n    function getRfqOrderStructHash(RfqOrder memory order)\\n        internal\\n        pure\\n        returns (bytes32 structHash)\\n    {\\n        // The struct hash is:\\n        // keccak256(abi.encode(\\n        //   TYPE_HASH,\\n        //   order.makerToken,\\n        //   order.takerToken,\\n        //   order.makerAmount,\\n        //   order.takerAmount,\\n        //   order.maker,\\n        //   order.taker,\\n        //   order.txOrigin,\\n        //   order.pool,\\n        //   order.expiry,\\n        //   order.salt,\\n        // ))\\n        assembly {\\n            let mem := mload(0x40)\\n            mstore(mem, _RFQ_ORDER_TYPEHASH)\\n            // order.makerToken;\\n            mstore(add(mem, 0x20), and(ADDRESS_MASK, mload(order)))\\n            // order.takerToken;\\n            mstore(add(mem, 0x40), and(ADDRESS_MASK, mload(add(order, 0x20))))\\n            // order.makerAmount;\\n            mstore(add(mem, 0x60), and(UINT_128_MASK, mload(add(order, 0x40))))\\n            // order.takerAmount;\\n            mstore(add(mem, 0x80), and(UINT_128_MASK, mload(add(order, 0x60))))\\n            // order.maker;\\n            mstore(add(mem, 0xA0), and(ADDRESS_MASK, mload(add(order, 0x80))))\\n            // order.taker;\\n            mstore(add(mem, 0xC0), and(ADDRESS_MASK, mload(add(order, 0xA0))))\\n            // order.txOrigin;\\n            mstore(add(mem, 0xE0), and(ADDRESS_MASK, mload(add(order, 0xC0))))\\n            // order.pool;\\n            mstore(add(mem, 0x100), mload(add(order, 0xE0)))\\n            // order.expiry;\\n            mstore(add(mem, 0x120), and(UINT_64_MASK, mload(add(order, 0x100))))\\n            // order.salt;\\n            mstore(add(mem, 0x140), mload(add(order, 0x120)))\\n            structHash := keccak256(mem, 0x160)\\n        }\\n    }\\n\\n    /// @dev Get the struct hash of an OTC order.\\n    /// @param order The OTC order.\\n    /// @return structHash The struct hash of the order.\\n    function getOtcOrderStructHash(OtcOrder memory order)\\n        internal\\n        pure\\n        returns (bytes32 structHash)\\n    {\\n        // The struct hash is:\\n        // keccak256(abi.encode(\\n        //   TYPE_HASH,\\n        //   order.makerToken,\\n        //   order.takerToken,\\n        //   order.makerAmount,\\n        //   order.takerAmount,\\n        //   order.maker,\\n        //   order.taker,\\n        //   order.txOrigin,\\n        //   order.expiryAndNonce,\\n        // ))\\n        assembly {\\n            let mem := mload(0x40)\\n            mstore(mem, _OTC_ORDER_TYPEHASH)\\n            // order.makerToken;\\n            mstore(add(mem, 0x20), and(ADDRESS_MASK, mload(order)))\\n            // order.takerToken;\\n            mstore(add(mem, 0x40), and(ADDRESS_MASK, mload(add(order, 0x20))))\\n            // order.makerAmount;\\n            mstore(add(mem, 0x60), and(UINT_128_MASK, mload(add(order, 0x40))))\\n            // order.takerAmount;\\n            mstore(add(mem, 0x80), and(UINT_128_MASK, mload(add(order, 0x60))))\\n            // order.maker;\\n            mstore(add(mem, 0xA0), and(ADDRESS_MASK, mload(add(order, 0x80))))\\n            // order.taker;\\n            mstore(add(mem, 0xC0), and(ADDRESS_MASK, mload(add(order, 0xA0))))\\n            // order.txOrigin;\\n            mstore(add(mem, 0xE0), and(ADDRESS_MASK, mload(add(order, 0xC0))))\\n            // order.expiryAndNonce;\\n            mstore(add(mem, 0x100), mload(add(order, 0xE0)))\\n            structHash := keccak256(mem, 0x120)\\n        }\\n    }\\n\\n    /// @dev Refund any leftover protocol fees in `msg.value` to `msg.sender`.\\n    /// @param ethProtocolFeePaid How much ETH was paid in protocol fees.\\n    function refundExcessProtocolFeeToSender(uint256 ethProtocolFeePaid)\\n        internal\\n    {\\n        if (msg.value > ethProtocolFeePaid && msg.sender != address(this)) {\\n            uint256 refundAmount = msg.value.safeSub(ethProtocolFeePaid);\\n            (bool success,) = msg\\n                .sender\\n                .call{value: refundAmount}(\\\"\\\");\\n            if (!success) {\\n                LibNativeOrdersRichErrors.ProtocolFeeRefundFailed(\\n                    msg.sender,\\n                    refundAmount\\n                ).rrevert();\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@0x/contracts-zero-ex/contracts/src/features/interfaces/INativeOrdersEvents.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Apache-2.0\\n/*\\n\\n  Copyright 2021 ZeroEx Intl.\\n\\n  Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n  you may not use this file except in compliance with the License.\\n  You may obtain a copy of the License at\\n\\n    http://www.apache.org/licenses/LICENSE-2.0\\n\\n  Unless required by applicable law or agreed to in writing, software\\n  distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n  See the License for the specific language governing permissions and\\n  limitations under the License.\\n\\n*/\\n\\npragma solidity ^0.6.5;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"@0x/contracts-erc20/contracts/src/v06/IERC20TokenV06.sol\\\";\\nimport \\\"../libs/LibSignature.sol\\\";\\nimport \\\"../libs/LibNativeOrder.sol\\\";\\n\\n\\n/// @dev Events emitted by NativeOrdersFeature.\\ninterface INativeOrdersEvents {\\n\\n    /// @dev Emitted whenever a `LimitOrder` is filled.\\n    /// @param orderHash The canonical hash of the order.\\n    /// @param maker The maker of the order.\\n    /// @param taker The taker of the order.\\n    /// @param feeRecipient Fee recipient of the order.\\n    /// @param takerTokenFilledAmount How much taker token was filled.\\n    /// @param makerTokenFilledAmount How much maker token was filled.\\n    /// @param protocolFeePaid How much protocol fee was paid.\\n    /// @param pool The fee pool associated with this order.\\n    event LimitOrderFilled(\\n        bytes32 orderHash,\\n        address maker,\\n        address taker,\\n        address feeRecipient,\\n        address makerToken,\\n        address takerToken,\\n        uint128 takerTokenFilledAmount,\\n        uint128 makerTokenFilledAmount,\\n        uint128 takerTokenFeeFilledAmount,\\n        uint256 protocolFeePaid,\\n        bytes32 pool\\n    );\\n\\n    /// @dev Emitted whenever an `RfqOrder` is filled.\\n    /// @param orderHash The canonical hash of the order.\\n    /// @param maker The maker of the order.\\n    /// @param taker The taker of the order.\\n    /// @param takerTokenFilledAmount How much taker token was filled.\\n    /// @param makerTokenFilledAmount How much maker token was filled.\\n    /// @param pool The fee pool associated with this order.\\n    event RfqOrderFilled(\\n        bytes32 orderHash,\\n        address maker,\\n        address taker,\\n        address makerToken,\\n        address takerToken,\\n        uint128 takerTokenFilledAmount,\\n        uint128 makerTokenFilledAmount,\\n        bytes32 pool\\n    );\\n\\n    /// @dev Emitted whenever a limit or RFQ order is cancelled.\\n    /// @param orderHash The canonical hash of the order.\\n    /// @param maker The order maker.\\n    event OrderCancelled(\\n        bytes32 orderHash,\\n        address maker\\n    );\\n\\n    /// @dev Emitted whenever Limit orders are cancelled by pair by a maker.\\n    /// @param maker The maker of the order.\\n    /// @param makerToken The maker token in a pair for the orders cancelled.\\n    /// @param takerToken The taker token in a pair for the orders cancelled.\\n    /// @param minValidSalt The new minimum valid salt an order with this pair must\\n    ///        have.\\n    event PairCancelledLimitOrders(\\n        address maker,\\n        address makerToken,\\n        address takerToken,\\n        uint256 minValidSalt\\n    );\\n\\n    /// @dev Emitted whenever RFQ orders are cancelled by pair by a maker.\\n    /// @param maker The maker of the order.\\n    /// @param makerToken The maker token in a pair for the orders cancelled.\\n    /// @param takerToken The taker token in a pair for the orders cancelled.\\n    /// @param minValidSalt The new minimum valid salt an order with this pair must\\n    ///        have.\\n    event PairCancelledRfqOrders(\\n        address maker,\\n        address makerToken,\\n        address takerToken,\\n        uint256 minValidSalt\\n    );\\n\\n    /// @dev Emitted when new addresses are allowed or disallowed to fill\\n    ///      orders with a given txOrigin.\\n    /// @param origin The address doing the allowing.\\n    /// @param addrs The address being allowed/disallowed.\\n    /// @param allowed Indicates whether the address should be allowed.\\n    event RfqOrderOriginsAllowed(\\n        address origin,\\n        address[] addrs,\\n        bool allowed\\n    );\\n\\n    /// @dev Emitted when new order signers are registered\\n    /// @param maker The maker address that is registering a designated signer.\\n    /// @param signer The address that will sign on behalf of maker.\\n    /// @param allowed Indicates whether the address should be allowed.\\n    event OrderSignerRegistered(\\n        address maker,\\n        address signer,\\n        bool allowed\\n    );\\n}\\n\"\r\n    },\r\n    \"@0x/contracts-utils/contracts/src/v06/errors/LibRichErrorsV06.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Apache-2.0\\n/*\\n\\n  Copyright 2020 ZeroEx Intl.\\n\\n  Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n  you may not use this file except in compliance with the License.\\n  You may obtain a copy of the License at\\n\\n    http://www.apache.org/licenses/LICENSE-2.0\\n\\n  Unless required by applicable law or agreed to in writing, software\\n  distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n  See the License for the specific language governing permissions and\\n  limitations under the License.\\n\\n*/\\n\\npragma solidity ^0.6.5;\\n\\n\\nlibrary LibRichErrorsV06 {\\n\\n    // bytes4(keccak256(\\\"Error(string)\\\"))\\n    bytes4 internal constant STANDARD_ERROR_SELECTOR = 0x08c379a0;\\n\\n    // solhint-disable func-name-mixedcase\\n    /// @dev ABI encode a standard, string revert error payload.\\n    ///      This is the same payload that would be included by a `revert(string)`\\n    ///      solidity statement. It has the function signature `Error(string)`.\\n    /// @param message The error string.\\n    /// @return The ABI encoded error.\\n    function StandardError(string memory message)\\n        internal\\n        pure\\n        returns (bytes memory)\\n    {\\n        return abi.encodeWithSelector(\\n            STANDARD_ERROR_SELECTOR,\\n            bytes(message)\\n        );\\n    }\\n    // solhint-enable func-name-mixedcase\\n\\n    /// @dev Reverts an encoded rich revert reason `errorData`.\\n    /// @param errorData ABI encoded error data.\\n    function rrevert(bytes memory errorData)\\n        internal\\n        pure\\n    {\\n        assembly {\\n            revert(add(errorData, 0x20), mload(errorData))\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@0x/contracts-zero-ex/contracts/src/errors/LibSignatureRichErrors.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Apache-2.0\\n/*\\n\\n  Copyright 2020 ZeroEx Intl.\\n\\n  Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n  you may not use this file except in compliance with the License.\\n  You may obtain a copy of the License at\\n\\n    http://www.apache.org/licenses/LICENSE-2.0\\n\\n  Unless required by applicable law or agreed to in writing, software\\n  distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n  See the License for the specific language governing permissions and\\n  limitations under the License.\\n\\n*/\\n\\npragma solidity ^0.6.5;\\n\\n\\nlibrary LibSignatureRichErrors {\\n\\n    enum SignatureValidationErrorCodes {\\n        ALWAYS_INVALID,\\n        INVALID_LENGTH,\\n        UNSUPPORTED,\\n        ILLEGAL,\\n        WRONG_SIGNER,\\n        BAD_SIGNATURE_DATA\\n    }\\n\\n    // solhint-disable func-name-mixedcase\\n\\n    function SignatureValidationError(\\n        SignatureValidationErrorCodes code,\\n        bytes32 hash,\\n        address signerAddress,\\n        bytes memory signature\\n    )\\n        internal\\n        pure\\n        returns (bytes memory)\\n    {\\n        return abi.encodeWithSelector(\\n            bytes4(keccak256(\\\"SignatureValidationError(uint8,bytes32,address,bytes)\\\")),\\n            code,\\n            hash,\\n            signerAddress,\\n            signature\\n        );\\n    }\\n\\n    function SignatureValidationError(\\n        SignatureValidationErrorCodes code,\\n        bytes32 hash\\n    )\\n        internal\\n        pure\\n        returns (bytes memory)\\n    {\\n        return abi.encodeWithSelector(\\n            bytes4(keccak256(\\\"SignatureValidationError(uint8,bytes32)\\\")),\\n            code,\\n            hash\\n        );\\n    }\\n}\\n\"\r\n    },\r\n    \"@0x/contracts-utils/contracts/src/v06/LibSafeMathV06.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Apache-2.0\\n/*\\n\\n  Copyright 2020 ZeroEx Intl.\\n\\n  Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n  you may not use this file except in compliance with the License.\\n  You may obtain a copy of the License at\\n\\n    http://www.apache.org/licenses/LICENSE-2.0\\n\\n  Unless required by applicable law or agreed to in writing, software\\n  distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n  See the License for the specific language governing permissions and\\n  limitations under the License.\\n\\n*/\\n\\npragma solidity ^0.6.5;\\n\\nimport \\\"./errors/LibRichErrorsV06.sol\\\";\\nimport \\\"./errors/LibSafeMathRichErrorsV06.sol\\\";\\n\\n\\nlibrary LibSafeMathV06 {\\n\\n    function safeMul(uint256 a, uint256 b)\\n        internal\\n        pure\\n        returns (uint256)\\n    {\\n        if (a == 0) {\\n            return 0;\\n        }\\n        uint256 c = a * b;\\n        if (c / a != b) {\\n            LibRichErrorsV06.rrevert(LibSafeMathRichErrorsV06.Uint256BinOpError(\\n                LibSafeMathRichErrorsV06.BinOpErrorCodes.MULTIPLICATION_OVERFLOW,\\n                a,\\n                b\\n            ));\\n        }\\n        return c;\\n    }\\n\\n    function safeDiv(uint256 a, uint256 b)\\n        internal\\n        pure\\n        returns (uint256)\\n    {\\n        if (b == 0) {\\n            LibRichErrorsV06.rrevert(LibSafeMathRichErrorsV06.Uint256BinOpError(\\n                LibSafeMathRichErrorsV06.BinOpErrorCodes.DIVISION_BY_ZERO,\\n                a,\\n                b\\n            ));\\n        }\\n        uint256 c = a / b;\\n        return c;\\n    }\\n\\n    function safeSub(uint256 a, uint256 b)\\n        internal\\n        pure\\n        returns (uint256)\\n    {\\n        if (b > a) {\\n            LibRichErrorsV06.rrevert(LibSafeMathRichErrorsV06.Uint256BinOpError(\\n                LibSafeMathRichErrorsV06.BinOpErrorCodes.SUBTRACTION_UNDERFLOW,\\n                a,\\n                b\\n            ));\\n        }\\n        return a - b;\\n    }\\n\\n    function safeAdd(uint256 a, uint256 b)\\n        internal\\n        pure\\n        returns (uint256)\\n    {\\n        uint256 c = a + b;\\n        if (c < a) {\\n            LibRichErrorsV06.rrevert(LibSafeMathRichErrorsV06.Uint256BinOpError(\\n                LibSafeMathRichErrorsV06.BinOpErrorCodes.ADDITION_OVERFLOW,\\n                a,\\n                b\\n            ));\\n        }\\n        return c;\\n    }\\n\\n    function max256(uint256 a, uint256 b)\\n        internal\\n        pure\\n        returns (uint256)\\n    {\\n        return a >= b ? a : b;\\n    }\\n\\n    function min256(uint256 a, uint256 b)\\n        internal\\n        pure\\n        returns (uint256)\\n    {\\n        return a < b ? a : b;\\n    }\\n\\n    function safeMul128(uint128 a, uint128 b)\\n        internal\\n        pure\\n        returns (uint128)\\n    {\\n        if (a == 0) {\\n            return 0;\\n        }\\n        uint128 c = a * b;\\n        if (c / a != b) {\\n            LibRichErrorsV06.rrevert(LibSafeMathRichErrorsV06.Uint256BinOpError(\\n                LibSafeMathRichErrorsV06.BinOpErrorCodes.MULTIPLICATION_OVERFLOW,\\n                a,\\n                b\\n            ));\\n        }\\n        return c;\\n    }\\n\\n    function safeDiv128(uint128 a, uint128 b)\\n        internal\\n        pure\\n        returns (uint128)\\n    {\\n        if (b == 0) {\\n            LibRichErrorsV06.rrevert(LibSafeMathRichErrorsV06.Uint256BinOpError(\\n                LibSafeMathRichErrorsV06.BinOpErrorCodes.DIVISION_BY_ZERO,\\n                a,\\n                b\\n            ));\\n        }\\n        uint128 c = a / b;\\n        return c;\\n    }\\n\\n    function safeSub128(uint128 a, uint128 b)\\n        internal\\n        pure\\n        returns (uint128)\\n    {\\n        if (b > a) {\\n            LibRichErrorsV06.rrevert(LibSafeMathRichErrorsV06.Uint256BinOpError(\\n                LibSafeMathRichErrorsV06.BinOpErrorCodes.SUBTRACTION_UNDERFLOW,\\n                a,\\n                b\\n            ));\\n        }\\n        return a - b;\\n    }\\n\\n    function safeAdd128(uint128 a, uint128 b)\\n        internal\\n        pure\\n        returns (uint128)\\n    {\\n        uint128 c = a + b;\\n        if (c < a) {\\n            LibRichErrorsV06.rrevert(LibSafeMathRichErrorsV06.Uint256BinOpError(\\n                LibSafeMathRichErrorsV06.BinOpErrorCodes.ADDITION_OVERFLOW,\\n                a,\\n                b\\n            ));\\n        }\\n        return c;\\n    }\\n\\n    function max128(uint128 a, uint128 b)\\n        internal\\n        pure\\n        returns (uint128)\\n    {\\n        return a >= b ? a : b;\\n    }\\n\\n    function min128(uint128 a, uint128 b)\\n        internal\\n        pure\\n        returns (uint128)\\n    {\\n        return a < b ? a : b;\\n    }\\n\\n    function safeDowncastToUint128(uint256 a)\\n        internal\\n        pure\\n        returns (uint128)\\n    {\\n        if (a > type(uint128).max) {\\n            LibRichErrorsV06.rrevert(LibSafeMathRichErrorsV06.Uint256DowncastError(\\n                LibSafeMathRichErrorsV06.DowncastErrorCodes.VALUE_TOO_LARGE_TO_DOWNCAST_TO_UINT128,\\n                a\\n            ));\\n        }\\n        return uint128(a);\\n    }\\n}\\n\"\r\n    },\r\n    \"@0x/contracts-zero-ex/contracts/src/errors/LibNativeOrdersRichErrors.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Apache-2.0\\n/*\\n\\n  Copyright 2020 ZeroEx Intl.\\n\\n  Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n  you may not use this file except in compliance with the License.\\n  You may obtain a copy of the License at\\n\\n    http://www.apache.org/licenses/LICENSE-2.0\\n\\n  Unless required by applicable law or agreed to in writing, software\\n  distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n  See the License for the specific language governing permissions and\\n  limitations under the License.\\n\\n*/\\n\\npragma solidity ^0.6.5;\\n\\n\\nlibrary LibNativeOrdersRichErrors {\\n\\n    // solhint-disable func-name-mixedcase\\n\\n    function ProtocolFeeRefundFailed(\\n        address receiver,\\n        uint256 refundAmount\\n    )\\n        internal\\n        pure\\n        returns (bytes memory)\\n    {\\n        return abi.encodeWithSelector(\\n            bytes4(keccak256(\\\"ProtocolFeeRefundFailed(address,uint256)\\\")),\\n            receiver,\\n            refundAmount\\n        );\\n    }\\n\\n    function OrderNotFillableByOriginError(\\n        bytes32 orderHash,\\n        address txOrigin,\\n        address orderTxOrigin\\n    )\\n        internal\\n        pure\\n        returns (bytes memory)\\n    {\\n        return abi.encodeWithSelector(\\n            bytes4(keccak256(\\\"OrderNotFillableByOriginError(bytes32,address,address)\\\")),\\n            orderHash,\\n            txOrigin,\\n            orderTxOrigin\\n        );\\n    }\\n\\n    function OrderNotFillableError(\\n        bytes32 orderHash,\\n        uint8 orderStatus\\n    )\\n        internal\\n        pure\\n        returns (bytes memory)\\n    {\\n        return abi.encodeWithSelector(\\n            bytes4(keccak256(\\\"OrderNotFillableError(bytes32,uint8)\\\")),\\n            orderHash,\\n            orderStatus\\n        );\\n    }\\n\\n    function OrderNotSignedByMakerError(\\n        bytes32 orderHash,\\n        address signer,\\n        address maker\\n    )\\n        internal\\n        pure\\n        returns (bytes memory)\\n    {\\n        return abi.encodeWithSelector(\\n            bytes4(keccak256(\\\"OrderNotSignedByMakerError(bytes32,address,address)\\\")),\\n            orderHash,\\n            signer,\\n            maker\\n        );\\n    }\\n\\n    function OrderNotSignedByTakerError(\\n        bytes32 orderHash,\\n        address signer,\\n        address taker\\n    )\\n        internal\\n        pure\\n        returns (bytes memory)\\n    {\\n        return abi.encodeWithSelector(\\n            bytes4(keccak256(\\\"OrderNotSignedByTakerError(bytes32,address,address)\\\")),\\n            orderHash,\\n            signer,\\n            taker\\n        );\\n    }\\n\\n    function InvalidSignerError(\\n        address maker,\\n        address signer\\n    )\\n        internal\\n        pure\\n        returns (bytes memory)\\n    {\\n        return abi.encodeWithSelector(\\n            bytes4(keccak256(\\\"InvalidSignerError(address,address)\\\")),\\n            maker,\\n            signer\\n        );\\n    }\\n\\n    function OrderNotFillableBySenderError(\\n        bytes32 orderHash,\\n        address sender,\\n        address orderSender\\n    )\\n        internal\\n        pure\\n        returns (bytes memory)\\n    {\\n        return abi.encodeWithSelector(\\n            bytes4(keccak256(\\\"OrderNotFillableBySenderError(bytes32,address,address)\\\")),\\n            orderHash,\\n            sender,\\n            orderSender\\n        );\\n    }\\n\\n    function OrderNotFillableByTakerError(\\n        bytes32 orderHash,\\n        address taker,\\n        address orderTaker\\n    )\\n        internal\\n        pure\\n        returns (bytes memory)\\n    {\\n        return abi.encodeWithSelector(\\n            bytes4(keccak256(\\\"OrderNotFillableByTakerError(bytes32,address,address)\\\")),\\n            orderHash,\\n            taker,\\n            orderTaker\\n        );\\n    }\\n\\n    function CancelSaltTooLowError(\\n        uint256 minValidSalt,\\n        uint256 oldMinValidSalt\\n    )\\n        internal\\n        pure\\n        returns (bytes memory)\\n    {\\n        return abi.encodeWithSelector(\\n            bytes4(keccak256(\\\"CancelSaltTooLowError(uint256,uint256)\\\")),\\n            minValidSalt,\\n            oldMinValidSalt\\n        );\\n    }\\n\\n    function FillOrKillFailedError(\\n        bytes32 orderHash,\\n        uint256 takerTokenFilledAmount,\\n        uint256 takerTokenFillAmount\\n    )\\n        internal\\n        pure\\n        returns (bytes memory)\\n    {\\n        return abi.encodeWithSelector(\\n            bytes4(keccak256(\\\"FillOrKillFailedError(bytes32,uint256,uint256)\\\")),\\n            orderHash,\\n            takerTokenFilledAmount,\\n            takerTokenFillAmount\\n        );\\n    }\\n\\n    function OnlyOrderMakerAllowed(\\n        bytes32 orderHash,\\n        address sender,\\n        address maker\\n    )\\n        internal\\n        pure\\n        returns (bytes memory)\\n    {\\n        return abi.encodeWithSelector(\\n            bytes4(keccak256(\\\"OnlyOrderMakerAllowed(bytes32,address,address)\\\")),\\n            orderHash,\\n            sender,\\n            maker\\n        );\\n    }\\n\\n    function BatchFillIncompleteError(\\n        bytes32 orderHash,\\n        uint256 takerTokenFilledAmount,\\n        uint256 takerTokenFillAmount\\n    )\\n        internal\\n        pure\\n        returns (bytes memory)\\n    {\\n        return abi.encodeWithSelector(\\n            bytes4(keccak256(\\\"BatchFillIncompleteError(bytes32,uint256,uint256)\\\")),\\n            orderHash,\\n            takerTokenFilledAmount,\\n            takerTokenFillAmount\\n        );\\n    }\\n}\\n\"\r\n    },\r\n    \"@0x/contracts-utils/contracts/src/v06/errors/LibSafeMathRichErrorsV06.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Apache-2.0\\n/*\\n\\n  Copyright 2020 ZeroEx Intl.\\n\\n  Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n  you may not use this file except in compliance with the License.\\n  You may obtain a copy of the License at\\n\\n    http://www.apache.org/licenses/LICENSE-2.0\\n\\n  Unless required by applicable law or agreed to in writing, software\\n  distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n  See the License for the specific language governing permissions and\\n  limitations under the License.\\n\\n*/\\n\\npragma solidity ^0.6.5;\\n\\n\\nlibrary LibSafeMathRichErrorsV06 {\\n\\n    // bytes4(keccak256(\\\"Uint256BinOpError(uint8,uint256,uint256)\\\"))\\n    bytes4 internal constant UINT256_BINOP_ERROR_SELECTOR =\\n        0xe946c1bb;\\n\\n    // bytes4(keccak256(\\\"Uint256DowncastError(uint8,uint256)\\\"))\\n    bytes4 internal constant UINT256_DOWNCAST_ERROR_SELECTOR =\\n        0xc996af7b;\\n\\n    enum BinOpErrorCodes {\\n        ADDITION_OVERFLOW,\\n        MULTIPLICATION_OVERFLOW,\\n        SUBTRACTION_UNDERFLOW,\\n        DIVISION_BY_ZERO\\n    }\\n\\n    enum DowncastErrorCodes {\\n        VALUE_TOO_LARGE_TO_DOWNCAST_TO_UINT32,\\n        VALUE_TOO_LARGE_TO_DOWNCAST_TO_UINT64,\\n        VALUE_TOO_LARGE_TO_DOWNCAST_TO_UINT96,\\n        VALUE_TOO_LARGE_TO_DOWNCAST_TO_UINT128\\n    }\\n\\n    // solhint-disable func-name-mixedcase\\n    function Uint256BinOpError(\\n        BinOpErrorCodes errorCode,\\n        uint256 a,\\n        uint256 b\\n    )\\n        internal\\n        pure\\n        returns (bytes memory)\\n    {\\n        return abi.encodeWithSelector(\\n            UINT256_BINOP_ERROR_SELECTOR,\\n            errorCode,\\n            a,\\n            b\\n        );\\n    }\\n\\n    function Uint256DowncastError(\\n        DowncastErrorCodes errorCode,\\n        uint256 a\\n    )\\n        internal\\n        pure\\n        returns (bytes memory)\\n    {\\n        return abi.encodeWithSelector(\\n            UINT256_DOWNCAST_ERROR_SELECTOR,\\n            errorCode,\\n            a\\n        );\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/controllers/ZeroExController.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.11;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\nimport \\\"../interfaces/IWallet.sol\\\";\\n\\ncontract ZeroExController {\\n    using SafeERC20 for IERC20;\\n    using Address for address;\\n    using Address for address payable;\\n    using SafeMath for uint256;\\n\\n    // solhint-disable-next-line\\n    IWallet public immutable WALLET;\\n\\n    constructor(IWallet wallet) public {\\n        WALLET = wallet;\\n    }\\n\\n    function deploy(bytes calldata data) external {\\n        (address[] memory tokens, uint256[] memory amounts) =\\n            abi.decode(data, (address[], uint256[]));\\n        uint256 tokensLength = tokens.length;\\n        for (uint256 i = 0; i < tokensLength; i++) {\\n            _approve(IERC20(tokens[i]), amounts[i]);\\n        }\\n        WALLET.deposit(tokens, amounts);\\n    }\\n\\n    function withdraw(bytes calldata data) external {\\n        (address[] memory tokens, uint256[] memory amounts) =\\n            abi.decode(data, (address[], uint256[]));\\n        WALLET.withdraw(tokens, amounts);\\n    }\\n\\n    function _approve(IERC20 token, uint256 amount) internal {\\n        uint256 currentAllowance = token.allowance(address(this), address(WALLET));\\n        if (currentAllowance < amount) {\\n            token.safeIncreaseAllowance(address(WALLET), type(uint256).max.sub(currentAllowance));\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/manager/Manager.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.11;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"../interfaces/IManager.sol\\\";\\nimport \\\"../interfaces/ILiquidityPool.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/Initializable.sol\\\";\\nimport {IERC20Upgradeable as IERC20} from \\n    \\\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\\\";\\nimport {SafeERC20Upgradeable as SafeERC20} from \\n    \\\"@openzeppelin/contracts-upgradeable/token/ERC20/SafeERC20Upgradeable.sol\\\";\\nimport {EnumerableSetUpgradeable as EnumerableSet} from \\n    \\\"@openzeppelin/contracts-upgradeable/utils/EnumerableSetUpgradeable.sol\\\";\\nimport {SafeMathUpgradeable as SafeMath} from \\n    \\\"@openzeppelin/contracts-upgradeable/math/SafeMathUpgradeable.sol\\\";\\nimport {AccessControlUpgradeable as AccessControl} from \\n    \\\"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol\\\";\\n\\ncontract Manager is IManager, Initializable, AccessControl {\\n    using SafeMath for uint256;\\n    using SafeERC20 for IERC20;\\n    using Address for address;\\n    using EnumerableSet for EnumerableSet.AddressSet;\\n    using EnumerableSet for EnumerableSet.Bytes32Set;\\n\\n    bytes32 public constant ADMIN_ROLE = keccak256(\\\"ADMIN_ROLE\\\");\\n    bytes32 public constant ROLLOVER_ROLE = keccak256(\\\"ROLLOVER_ROLE\\\");\\n    bytes32 public constant MID_CYCLE_ROLE = keccak256(\\\"MID_CYCLE_ROLE\\\");\\n\\n    uint256 public currentCycle;\\n    uint256 public currentCycleIndex;\\n    uint256 public cycleDuration;\\n\\n    bool public rolloverStarted;\\n\\n    mapping(bytes32 => address) public registeredControllers;\\n    mapping(uint256 => string) public override cycleRewardsHashes;\\n    EnumerableSet.AddressSet private pools;\\n    EnumerableSet.Bytes32Set private controllerIds;\\n\\n\\n    modifier onlyAdmin() {\\n        require(hasRole(ADMIN_ROLE, _msgSender()), \\\"NOT_ADMIN_ROLE\\\");\\n        _;\\n    }\\n    \\n    modifier onlyRollover() {\\n        require(hasRole(ROLLOVER_ROLE, _msgSender()), \\\"NOT_ROLLOVER_ROLE\\\");\\n        _;\\n    }\\n\\n    modifier onlyMidCycle() {\\n        require(hasRole(MID_CYCLE_ROLE, _msgSender()), \\\"NOT_MID_CYCLE_ROLE\\\");\\n        _;\\n    }\\n\\n    function initialize(uint256 _cycleDuration) public initializer {\\n        __Context_init_unchained();\\n        __AccessControl_init_unchained();\\n\\n        cycleDuration = _cycleDuration;\\n\\n        _setupRole(DEFAULT_ADMIN_ROLE, _msgSender());\\n\\n        _setupRole(ADMIN_ROLE, _msgSender());\\n        _setupRole(ROLLOVER_ROLE, _msgSender());\\n        _setupRole(MID_CYCLE_ROLE, _msgSender());        \\n    }\\n\\n    function registerController(bytes32 id, address controller) external override onlyAdmin {\\n        require(!controllerIds.contains(id), \\\"CONTROLLER_EXISTS\\\");\\n        registeredControllers[id] = controller;\\n        controllerIds.add(id);\\n        emit ControllerRegistered(id, controller);\\n    }\\n\\n    function unRegisterController(bytes32 id) external override onlyAdmin {\\n        require(controllerIds.contains(id), \\\"INVALID_CONTROLLER\\\");\\n        emit ControllerUnregistered(id, registeredControllers[id]);\\n        delete registeredControllers[id];\\n        controllerIds.remove(id);\\n    }\\n\\n    function registerPool(address pool) external override onlyAdmin {\\n        require(!pools.contains(pool), \\\"POOL_EXISTS\\\");\\n        pools.add(pool);\\n        emit PoolRegistered(pool);\\n    }\\n\\n    function unRegisterPool(address pool) external override onlyAdmin {\\n        require(pools.contains(pool), \\\"INVALID_POOL\\\");\\n        pools.remove(pool);\\n        emit PoolUnregistered(pool);\\n    }\\n\\n    function setCycleDuration(uint256 duration) external override onlyAdmin {\\n        cycleDuration = duration;\\n        emit CycleDurationSet(duration);\\n    }\\n\\n    function getPools() external view override returns (address[] memory) {\\n        address[] memory returnData = new address[](pools.length());\\n        for (uint256 i = 0; i < pools.length(); i++) {\\n            returnData[i] = pools.at(i);\\n        }\\n        return returnData;\\n    }\\n\\n    function getControllers() external view override returns (bytes32[] memory) {\\n        bytes32[] memory returnData = new bytes32[](controllerIds.length());\\n        for (uint256 i = 0; i < controllerIds.length(); i++) {\\n            returnData[i] = controllerIds.at(i);\\n        }\\n        return returnData;\\n    }\\n\\n    function completeRollover(string calldata rewardsIpfsHash) external override onlyRollover {\\n        require(block.number > (currentCycle.add(cycleDuration)), \\\"PREMATURE_EXECUTION\\\");\\n        _completeRollover(rewardsIpfsHash);\\n    }\\n\\n    function executeMaintenance(MaintenanceExecution calldata params) external override onlyMidCycle {        \\n        for (uint256 x = 0; x < params.cycleSteps.length; x++) {\\n            _executeControllerCommand(params.cycleSteps[x]);\\n        }\\n    }\\n\\n    function executeRollover(RolloverExecution calldata params) external override onlyRollover {\\n        require(block.number > (currentCycle.add(cycleDuration)), \\\"PREMATURE_EXECUTION\\\");\\n\\n        // Transfer deployable liquidity out of the pools and into the manager\\n        for (uint256 i = 0; i < params.poolData.length; i++) {\\n            require(pools.contains(params.poolData[i].pool), \\\"INVALID_POOL\\\");\\n            ILiquidityPool pool = ILiquidityPool(params.poolData[i].pool);\\n            IERC20 underlyingToken = pool.underlyer();\\n            underlyingToken.safeTransferFrom(\\n                address(pool),\\n                address(this),\\n                params.poolData[i].amount\\n            );\\n            emit LiquidityMovedToManager(params.poolData[i].pool, params.poolData[i].amount);\\n        }\\n\\n        // Deploy or withdraw liquidity\\n        for (uint256 x = 0; x < params.cycleSteps.length; x++) {\\n            _executeControllerCommand(params.cycleSteps[x]);\\n        }\\n\\n        // Transfer recovered liquidity back into the pools; leave no funds in the manager\\n        for (uint256 y = 0; y < params.poolsForWithdraw.length; y++) {\\n            require(pools.contains(params.poolsForWithdraw[y]), \\\"INVALID_POOL\\\");\\n            ILiquidityPool pool = ILiquidityPool(params.poolsForWithdraw[y]);\\n            IERC20 underlyingToken = pool.underlyer();\\n\\n            uint256 managerBalance = underlyingToken.balanceOf(address(this));\\n\\n            // transfer funds back to the pool if there are funds\\n            if (managerBalance > 0) {\\n                underlyingToken.safeTransfer(address(pool), managerBalance);\\n            }\\n            emit LiquidityMovedToPool(params.poolsForWithdraw[y], managerBalance);\\n        }\\n\\n        if (params.complete) {\\n            _completeRollover(params.rewardsIpfsHash);\\n        }\\n    }\\n\\n    function _executeControllerCommand(ControllerTransferData calldata transfer) public {    \\n        address controllerAddress = registeredControllers[transfer.controllerId];\\n        controllerAddress.functionDelegateCall(\\n            transfer.data,\\n            \\\"CYCLE_STEP_EXECUTE_FAILED\\\"\\n        );\\n        emit DeploymentStepExecuted(\\n            transfer.controllerId,\\n            controllerAddress,\\n            transfer.data\\n        );    \\n    }\\n\\n    function startCycleRollover() external override onlyRollover {\\n        rolloverStarted = true;\\n        emit CycleRolloverStarted(block.number);\\n    }\\n\\n    function _completeRollover(string calldata rewardsIpfsHash) private {        \\n        currentCycle = block.number;\\n        cycleRewardsHashes[currentCycleIndex] = rewardsIpfsHash;\\n        currentCycleIndex = currentCycleIndex.add(1);\\n        rolloverStarted = false;\\n        emit CycleRolloverComplete(block.number);\\n    }\\n\\n    function getCurrentCycle() external view override returns (uint256) {\\n        return currentCycle;\\n    }\\n\\n    function getCycleDuration() external view override returns (uint256) {\\n        return cycleDuration;\\n    }\\n    \\n    function getCurrentCycleIndex() external view override returns (uint256) {\\n        return currentCycleIndex;\\n    } \\n\\n    function getRolloverStatus() external view override returns (bool) {\\n        return rolloverStarted;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IManager.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.11;\\npragma experimental ABIEncoderV2;\\n\\ninterface IManager {\\n\\n    // bytes can take on the form of deploying or recovering liquidity\\n    struct ControllerTransferData {\\n        bytes32 controllerId; // controller to target\\n        bytes data; // data the controller will pass\\n    }\\n\\n    struct PoolTransferData {\\n        address pool; // pool to target\\n        uint256 amount; // amount to transfer\\n    }\\n\\n    struct MaintenanceExecution {\\n         ControllerTransferData[] cycleSteps;\\n    }\\n\\n    struct RolloverExecution {\\n        PoolTransferData[] poolData;\\n        ControllerTransferData[] cycleSteps;\\n        address[] poolsForWithdraw; //Pools to target for manager -> pool transfer\\n        bool complete; //Whether to mark the rollover complete\\n        string rewardsIpfsHash;\\n    }\\n\\n    event ControllerRegistered(bytes32 id, address controller);\\n    event ControllerUnregistered(bytes32 id, address controller);\\n    event PoolRegistered(address pool);\\n    event PoolUnregistered(address pool);\\n    event CycleDurationSet(uint256 duration);\\n    event LiquidityMovedToManager(address pool, uint256 amount);\\n    event DeploymentStepExecuted(bytes32 controller, address adapaterAddress, bytes data);\\n    event LiquidityMovedToPool(address pool, uint256 amount);\\n    event CycleRolloverStarted(uint256 blockNumber);\\n    event CycleRolloverComplete(uint256 blockNumber);\\n\\n    function registerController(bytes32 id, address controller) external;\\n\\n    function registerPool(address pool) external;\\n\\n    function unRegisterController(bytes32 id) external;\\n\\n    function unRegisterPool(address pool) external;\\n\\n    function getPools() external view returns (address[] memory);\\n\\n    function getControllers() external view returns (bytes32[] memory);\\n\\n    function setCycleDuration(uint256 duration) external;\\n\\n    function startCycleRollover() external;\\n\\n    function executeMaintenance(MaintenanceExecution calldata params) external;\\n\\n    function executeRollover(RolloverExecution calldata params) external;\\n\\n    function completeRollover(string calldata rewardsIpfsHash) external;\\n\\n    function cycleRewardsHashes(uint256 index) external view returns (string memory);\\n\\n    function getCurrentCycle() external view returns (uint256);\\n\\n    function getCurrentCycleIndex() external view returns (uint256);\\n\\n    function getCycleDuration() external view returns (uint256);\\n\\n    function getRolloverStatus() external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/ILiquidityPool.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.11;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\\\";\\nimport \\\"../interfaces/IManager.sol\\\";\\n\\n/// @title Interface for Pool\\n/// @notice Allows users to deposit ERC-20 tokens to be deployed to market makers.\\n/// @notice Mints 1:1 fToken on deposit, represeting an IOU for the undelrying token that is freely transferable.\\n/// @notice Holders of fTokens earn rewards based on duration their tokens were deployed and the demand for that asset.\\n/// @notice Holders of fTokens can redeem for underlying asset after issuing requestWithdrawal and waiting for the next cycle.\\ninterface ILiquidityPool {\\n\\n    struct WithdrawalInfo {\\n        uint256 minCycle;\\n        uint256 amount;\\n    }\\n\\n    /// @notice Transfers amount of underlying token from user to this pool and mints fToken to the msg.sender.\\n    /// @notice Depositor must have previously granted transfer approval to the pool via underlying token contract.\\n    /// @notice Liquidity deposited is deployed on the next cycle - unless a withdrawal request is submitted, in which case the liquidity will be withheld.\\n    function deposit(uint256 amount) external;\\n\\n    /// @notice Transfers amount of underlying token from user to this pool and mints fToken to the account.\\n    /// @notice Depositor must have previously granted transfer approval to the pool via underlying token contract.\\n    /// @notice Liquidity deposited is deployed on the next cycle - unless a withdrawal request is submitted, in which case the liquidity will be withheld.\\n    function depositFor(address account, uint256 amount) external;\\n\\n    /// @notice Requests that the manager prepare funds for withdrawal next cycle\\n    /// @notice Invoking this function when sender already has a currently pending request will overwrite that requested amount and reset the cycle timer\\n    /// @param amount Amount of fTokens requested to be redeemed\\n    function requestWithdrawal(uint256 amount) external;\\n\\n    function approveManager(uint256 amount) external;\\n\\n    /// @notice Sender must first invoke requestWithdrawal in a previous cycle\\n    /// @notice This function will burn the fAsset and transfers underlying asset back to sender\\n    /// @notice Will execute a partial withdrawal if either available liquidity or previously requested amount is insufficient\\n    /// @param amount Amount of fTokens to redeem, value can be in excess of available tokens, operation will be reduced to maximum permissible\\n    function withdraw(uint256 amount) external;\\n\\n    /// @return Reference to the underlying ERC-20 contract\\n    function underlyer() external view returns (IERC20Upgradeable);\\n\\n    /// @return Amount of liquidity that should not be deployed for market making (this liquidity will be used for completing requested withdrawals)\\n    function withheldLiquidity() external view returns (uint256);\\n\\n    /// @notice Get withdraw requests for an account\\n    /// @param account User account to check\\n    /// @return minCycle Cycle - block number - that must be active before withdraw is allowed, amount Token amount requested\\n    function requestedWithdrawals(address account) external view returns (uint256, uint256);\\n\\n    /// @notice Pause deposits on the pool. Withdraws still allowed\\n    function pause() external;\\n\\n    /// @notice Unpause deposits on the pool.\\n    function unpause() external;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/proxy/Initializable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\n// solhint-disable-next-line compiler-version\\npragma solidity >=0.4.24 <0.8.0;\\n\\nimport \\\"../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {UpgradeableProxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n */\\nabstract contract Initializable {\\n\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        require(_initializing || _isConstructor() || !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n\\n    /// @dev Returns true if and only if the function is running in the constructor\\n    function _isConstructor() private view returns (bool) {\\n        return !AddressUpgradeable.isContract(address(this));\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20Upgradeable {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/token/ERC20/SafeERC20Upgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"./IERC20Upgradeable.sol\\\";\\nimport \\\"../../math/SafeMathUpgradeable.sol\\\";\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20Upgradeable {\\n    using SafeMathUpgradeable for uint256;\\n    using AddressUpgradeable for address;\\n\\n    function safeTransfer(IERC20Upgradeable token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(IERC20Upgradeable token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20Upgradeable token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        // solhint-disable-next-line max-line-length\\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(IERC20Upgradeable token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(IERC20Upgradeable token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \\\"SafeERC20: decreased allowance below zero\\\");\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20Upgradeable token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) { // Return data is optional\\n            // solhint-disable-next-line max-line-length\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/EnumerableSetUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n */\\nlibrary EnumerableSetUpgradeable {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping (bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) { // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            // When the value to delete is the last one, the swap operation is unnecessary. However, since this occurs\\n            // so rarely, we still do the swap anyway to avoid the gas cost of adding an 'if' statement.\\n\\n            bytes32 lastvalue = set._values[lastIndex];\\n\\n            // Move the last value to the index where the value to delete is\\n            set._values[toDeleteIndex] = lastvalue;\\n            // Update the index for the moved value\\n            set._indexes[lastvalue] = toDeleteIndex + 1; // All indexes are 1-based\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        require(set._values.length > index, \\\"EnumerableSet: index out of bounds\\\");\\n        return set._values[index];\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/math/SafeMathUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMathUpgradeable {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        uint256 c = a + b;\\n        if (c < a) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b > a) return (false, 0);\\n        return (true, a - b);\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) return (true, 0);\\n        uint256 c = a * b;\\n        if (c / a != b) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a / b);\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a % b);\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b <= a, \\\"SafeMath: subtraction overflow\\\");\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0) return 0;\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: division by zero\\\");\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: modulo by zero\\\");\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"../utils/EnumerableSetUpgradeable.sol\\\";\\nimport \\\"../utils/AddressUpgradeable.sol\\\";\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it.\\n */\\nabstract contract AccessControlUpgradeable is Initializable, ContextUpgradeable {\\n    function __AccessControl_init() internal initializer {\\n        __Context_init_unchained();\\n        __AccessControl_init_unchained();\\n    }\\n\\n    function __AccessControl_init_unchained() internal initializer {\\n    }\\n    using EnumerableSetUpgradeable for EnumerableSetUpgradeable.AddressSet;\\n    using AddressUpgradeable for address;\\n\\n    struct RoleData {\\n        EnumerableSetUpgradeable.AddressSet members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping (bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view returns (bool) {\\n        return _roles[role].members.contains(account);\\n    }\\n\\n    /**\\n     * @dev Returns the number of accounts that have `role`. Can be used\\n     * together with {getRoleMember} to enumerate all bearers of a role.\\n     */\\n    function getRoleMemberCount(bytes32 role) public view returns (uint256) {\\n        return _roles[role].members.length();\\n    }\\n\\n    /**\\n     * @dev Returns one of the accounts that have `role`. `index` must be a\\n     * value between 0 and {getRoleMemberCount}, non-inclusive.\\n     *\\n     * Role bearers are not sorted in any particular way, and their ordering may\\n     * change at any point.\\n     *\\n     * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\\n     * you perform all queries on the same block. See the following\\n     * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\\n     * for more information.\\n     */\\n    function getRoleMember(bytes32 role, uint256 index) public view returns (address) {\\n        return _roles[role].members.at(index);\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual {\\n        require(hasRole(_roles[role].adminRole, _msgSender()), \\\"AccessControl: sender must be an admin to grant\\\");\\n\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual {\\n        require(hasRole(_roles[role].adminRole, _msgSender()), \\\"AccessControl: sender must be an admin to revoke\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        emit RoleAdminChanged(role, _roles[role].adminRole, adminRole);\\n        _roles[role].adminRole = adminRole;\\n    }\\n\\n    function _grantRole(bytes32 role, address account) private {\\n        if (_roles[role].members.add(account)) {\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    function _revokeRole(bytes32 role, address account) private {\\n        if (_roles[role].members.remove(account)) {\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n    uint256[49] private __gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.2 <0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\nimport \\\"../proxy/Initializable.sol\\\";\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal initializer {\\n        __Context_init_unchained();\\n    }\\n\\n    function __Context_init_unchained() internal initializer {\\n    }\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n    uint256[50] private __gap;\\n}\\n\"\r\n    },\r\n    \"contracts/staking/Staking.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.11;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"../interfaces/IStaking.sol\\\";\\nimport \\\"../interfaces/IManager.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/Initializable.sol\\\";\\nimport {SafeMathUpgradeable as SafeMath} from \\n    \\\"@openzeppelin/contracts-upgradeable/math/SafeMathUpgradeable.sol\\\";\\nimport {MathUpgradeable as Math} from \\n    \\\"@openzeppelin/contracts-upgradeable/math/MathUpgradeable.sol\\\";\\nimport {IERC20Upgradeable as IERC20} from \\n    \\\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\\\";\\nimport {SafeERC20Upgradeable as SafeERC20} from \\n    \\\"@openzeppelin/contracts-upgradeable/token/ERC20/SafeERC20Upgradeable.sol\\\";\\nimport {OwnableUpgradeable as Ownable} from \\n    \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\nimport {EnumerableSetUpgradeable as EnumerableSet} from \\n    \\\"@openzeppelin/contracts-upgradeable/utils/EnumerableSetUpgradeable.sol\\\";\\nimport {PausableUpgradeable as Pausable} from \\n    \\\"@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol\\\";\\n\\ncontract Staking is IStaking, Initializable, Ownable, Pausable {\\n\\n    using SafeMath for uint256;\\n    using SafeERC20 for IERC20;\\n    using EnumerableSet for EnumerableSet.UintSet;\\n\\n    IERC20 public tokeToken;\\n    IManager public manager;\\n\\n    address public treasury;\\n\\n    uint256 public withheldLiquidity;\\n    //userAddress -> withdrawalInfo\\n    mapping(address => WithdrawalInfo) public requestedWithdrawals;\\n\\n    //userAddress -> -> scheduleIndex -> staking detail\\n    mapping(address => mapping(uint256 => StakingDetails)) public userStakings;\\n\\n    //userAddress -> scheduleIdx[]\\n    mapping(address => uint256[]) public userStakingSchedules;\\n\\n    //Schedule id/index counter\\n    uint256 public nextScheduleIndex;\\n    //scheduleIndex/id -> schedule\\n    mapping (uint256 => StakingSchedule) public schedules;\\n    //scheduleIndex/id[]\\n    EnumerableSet.UintSet private scheduleIdxs;\\n\\n    //Can deposit into a non-public schedule\\n    mapping (address => bool) override public permissionedDepositors;\\n\\n\\n    modifier onlyPermissionedDepositors() {\\n        require(_isAllowedPermissionedDeposit(), \\\"CALLER_NOT_PERMISSIONED\\\");\\n        _;\\n    }\\n\\n    function initialize(IERC20 _tokeToken, IManager _manager, address _treasury) public initializer {\\n        __Context_init_unchained();\\n        __Ownable_init_unchained();\\n        __Pausable_init_unchained();\\n\\n        require(address(_tokeToken) != address(0), \\\"INVALID_TOKETOKEN\\\");\\n        require(address(_manager) != address(0), \\\"INVALID_MANAGER\\\");\\n        require(_treasury != address(0), \\\"INVALID_TREASURY\\\");\\n\\n        tokeToken = _tokeToken;        \\n        manager = _manager;\\n        treasury = _treasury;\\n\\n        //We want to be sure the schedule used for LP staking is first\\n        //because the order in which withdraws happen need to start with LP stakes\\n        _addSchedule(StakingSchedule({\\n            cliff: 0,\\n            duration: 1,\\n            interval: 1,\\n            setup: true,\\n            isActive: true,\\n            hardStart: 0,\\n            isPublic: true\\n        }));\\n    }    \\n\\n    function addSchedule(StakingSchedule memory schedule) external override onlyOwner {\\n       _addSchedule(schedule);       \\n    }\\n\\n    function setPermissionedDepositor(address account, bool canDeposit) external override onlyOwner {\\n        permissionedDepositors[account] = canDeposit;\\n    }\\n\\n    function setUserSchedules(address account, uint256[] calldata userSchedulesIdxs) external override onlyOwner {\\n        userStakingSchedules[account] = userSchedulesIdxs;\\n    }\\n\\n    function getSchedules() external override view returns (StakingScheduleInfo[] memory retSchedules) {\\n        uint256 length = scheduleIdxs.length();\\n        retSchedules = new StakingScheduleInfo[](length);\\n        for(uint256 i = 0; i < length; i++) {\\n            retSchedules[i] = StakingScheduleInfo(schedules[scheduleIdxs.at(i)], scheduleIdxs.at(i));\\n        }\\n    }\\n\\n    function removeSchedule(uint256 scheduleIndex) external override onlyOwner {\\n        require(scheduleIdxs.contains(scheduleIndex), \\\"INVALID_SCHEDULE\\\");\\n        \\n        scheduleIdxs.remove(scheduleIndex);\\n        delete schedules[scheduleIndex];\\n\\n        emit ScheduleRemoved(scheduleIndex);\\n    }\\n\\n    function getStakes(address account) external override view returns(StakingDetails[] memory stakes) {\\n        stakes = _getStakes(account);\\n    }\\n\\n    function balanceOf(address account) external override view returns(uint256 value) {\\n        value = 0;\\n        uint256 scheduleCount = userStakingSchedules[account].length;\\n        for(uint256 i = 0; i < scheduleCount; i++)\\n        {\\n            uint256 remaining = userStakings[account][userStakingSchedules[account][i]].initial\\n                .sub(userStakings[account][userStakingSchedules[account][i]].withdrawn);\\n            uint256 slashed = userStakings[account][userStakingSchedules[account][i]].slashed;\\n            if (remaining > slashed)\\n            {\\n                value = value.add(remaining.sub(slashed));\\n            }\\n        } \\n    }\\n\\n    function availableForWithdrawal(address account, uint256 scheduleIndex) external override view returns (uint256) {\\n       return _availableForWithdrawal(account, scheduleIndex);\\n    }\\n    function unvested(address account, uint256 scheduleIndex) external override view returns(uint256 value) {\\n        value = 0;\\n        StakingDetails memory stake = userStakings[account][scheduleIndex];        \\n\\n        value = stake.initial.sub(_vested(account, scheduleIndex));\\n    }\\n\\n    function vested(address account, uint256 scheduleIndex) external override view returns(uint256 value) {\\n        return _vested(account, scheduleIndex);\\n    }\\n\\n    function deposit(uint256 amount, uint256 scheduleIndex) external override {\\n        _depositFor(msg.sender, amount, scheduleIndex);               \\n    }\\n\\n    function depositFor(address account, uint256 amount, uint256 scheduleIndex) external override {\\n        _depositFor(account, amount, scheduleIndex);\\n    }\\n\\n    function depositWithSchedule(address account, uint256 amount, StakingSchedule calldata schedule) external override onlyPermissionedDepositors {\\n        uint256 scheduleIx = nextScheduleIndex;\\n        _addSchedule(schedule);        \\n        _depositFor(account, amount, scheduleIx);\\n    }\\n\\n    function requestWithdrawal(uint256 amount) external override {\\n        require(amount > 0, \\\"INVALID_AMOUNT\\\");\\n        StakingDetails[] memory stakes = _getStakes(msg.sender);        \\n        uint256 length = stakes.length;        \\n        uint256 stakedAvailable = 0;\\n        for(uint256 i = 0; i < length; i++)\\n        {            \\n            stakedAvailable = stakedAvailable.add(_availableForWithdrawal(msg.sender, stakes[i].scheduleIx));            \\n        }\\n        \\n        require(stakedAvailable >= amount, \\\"INSUFFICIENT_AVAILABLE\\\");\\n\\n        withheldLiquidity = withheldLiquidity.sub(requestedWithdrawals[msg.sender].amount).add(\\n            amount\\n        );\\n        requestedWithdrawals[msg.sender].amount = amount;\\n        if (manager.getRolloverStatus()) {\\n            requestedWithdrawals[msg.sender].minCycleIndex = manager.getCurrentCycleIndex().add(2);\\n        } else {            \\n            requestedWithdrawals[msg.sender].minCycleIndex = manager.getCurrentCycleIndex().add(1);\\n        }\\n\\n        emit WithdrawalRequested(msg.sender, amount);\\n    }\\n\\n    function withdraw(uint256 amount) external override {\\n        \\n        require(\\n            amount <= requestedWithdrawals[msg.sender].amount,\\n            \\\"WITHDRAW_INSUFFICIENT_BALANCE\\\"\\n        );\\n\\n        require(amount > 0, \\\"NO_WITHDRAWAL\\\");\\n        \\n        require(\\n            requestedWithdrawals[msg.sender].minCycleIndex <= manager.getCurrentCycleIndex(),\\n            \\\"INVALID_CYCLE\\\"\\n        );\\n\\n        StakingDetails[] memory stakes = _getStakes(msg.sender);\\n        uint256 available = 0;\\n        uint256 length = stakes.length;\\n        uint256 remainingAmount = amount;\\n        uint256 stakedAvailable = 0;\\n        for(uint256 i = 0; i < length && remainingAmount > 0; i++)\\n        {\\n            stakedAvailable = _availableForWithdrawal(msg.sender, stakes[i].scheduleIx);\\n            available = available.add(stakedAvailable);\\n            if (stakedAvailable < remainingAmount) {\\n                remainingAmount = remainingAmount.sub(stakedAvailable);\\n                stakes[i].withdrawn = stakes[i].withdrawn.add(stakedAvailable);\\n            } else {\\n                stakes[i].withdrawn = stakes[i].withdrawn.add(remainingAmount);\\n                remainingAmount = 0;\\n            }   \\n            userStakings[msg.sender][stakes[i].scheduleIx] = stakes[i];\\n        }\\n\\n        require(remainingAmount == 0, \\\"INSUFFICIENT_AVAILABLE\\\"); //May not need to check this again       \\n\\n        requestedWithdrawals[msg.sender].amount = requestedWithdrawals[msg.sender].amount.sub(\\n            amount\\n        );\\n        \\n        if (requestedWithdrawals[msg.sender].amount == 0) {\\n            delete requestedWithdrawals[msg.sender];\\n        }\\n\\n        withheldLiquidity = withheldLiquidity.sub(amount);        \\n        tokeToken.safeTransfer(msg.sender, amount);\\n\\n        emit WithdrawCompleted(msg.sender, amount);\\n    }\\n\\n    function slash(address account, uint256 amount, uint256 scheduleIndex) external onlyOwner {\\n        StakingSchedule storage schedule = schedules[scheduleIndex]; \\n        require(amount > 0, \\\"INVALID_AMOUNT\\\");\\n        require(schedule.setup, \\\"INVALID_SCHEDULE\\\");\\n\\n        StakingDetails memory userStake = userStakings[account][scheduleIndex];\\n        require(userStake.initial > 0, \\\"NO_VESTING\\\");\\n\\n        uint256 availableToSlash = 0;\\n        uint256 remaining = userStake.initial.sub(userStake.withdrawn);\\n        if (remaining > userStake.slashed) \\n        {\\n            availableToSlash = remaining.sub(userStake.slashed);\\n        }\\n\\n        require(availableToSlash >= amount, \\\"INSUFFICIENT_AVAILABLE\\\");\\n\\n        userStake.slashed = userStake.slashed.add(amount);\\n        userStakings[account][scheduleIndex] = userStake;\\n\\n        tokeToken.safeTransfer(treasury, amount);        \\n\\n        emit Slashed(account, amount, scheduleIndex);\\n    }\\n\\n    function pause() external override onlyOwner {        \\n        _pause();\\n    }\\n\\n    function unpause() external override onlyOwner {        \\n        _unpause();\\n    }\\n\\n    function _availableForWithdrawal(address account, uint256 scheduleIndex) private view returns (uint256) {\\n        StakingDetails memory stake = userStakings[account][scheduleIndex];\\n        uint256 vestedWoWithdrawn = _vested(account, scheduleIndex).sub(stake.withdrawn);\\n        if (stake.slashed > vestedWoWithdrawn)\\n            return 0;\\n        \\n        return vestedWoWithdrawn.sub(stake.slashed);\\n    }\\n\\n    function _depositFor(address account, uint256 amount, uint256 scheduleIndex) private {\\n        StakingSchedule memory schedule = schedules[scheduleIndex]; \\n        require(!paused(), \\\"PAUSED\\\");\\n        require(amount > 0, \\\"INVALID_AMOUNT\\\");\\n        require(schedule.setup, \\\"INVALID_SCHEDULE\\\");\\n        require(schedule.isActive, \\\"INACTIVE_SCHEDULE\\\");\\n        require(account != address(0), \\\"INVALID_ADDRESS\\\");\\n        require(schedule.isPublic || _isAllowedPermissionedDeposit(), \\\"PERMISSIONED_SCHEDULE\\\");\\n\\n        StakingDetails memory userStake = userStakings[account][scheduleIndex];        \\n        if (userStake.initial == 0) {\\n            userStakingSchedules[account].push(scheduleIndex);\\n        }\\n        userStake.initial = userStake.initial.add(amount);        \\n        if (schedule.hardStart > 0) {\\n            userStake.started = schedule.hardStart;\\n        } else {\\n            // solhint-disable-next-line not-rely-on-time\\n            userStake.started = block.timestamp;\\n        }\\n        userStake.scheduleIx = scheduleIndex;\\n        userStakings[account][scheduleIndex] = userStake;        \\n\\n        tokeToken.safeTransferFrom(msg.sender, address(this), amount);\\n\\n        emit Deposited(account, amount, scheduleIndex);\\n    }\\n\\n    function _vested(address account, uint256 scheduleIndex) private view returns(uint256) {\\n\\n        // solhint-disable-next-line not-rely-on-time\\n        uint256 timestamp = block.timestamp;\\n        uint256 value = 0;\\n        StakingDetails memory stake = userStakings[account][scheduleIndex];\\n        StakingSchedule memory schedule = schedules[scheduleIndex];                \\n        \\n        uint256 cliffTimestamp = stake.started.add(schedule.cliff);\\n        if (cliffTimestamp <= timestamp) {                       \\n            if (cliffTimestamp.add(schedule.duration) <= timestamp) {                              \\n                value = stake.initial;\\n            } else {                \\n                uint256 secondsStaked = Math.max(timestamp.sub(cliffTimestamp), 1);                   \\n                uint256 effectiveSecondsStaked = (secondsStaked.div(schedule.interval)).mul(schedule.interval);                     \\n                value = stake.initial.mul(effectiveSecondsStaked).div(schedule.duration);               \\n            }\\n        }\\n\\n        return value;\\n    }\\n\\n    function _addSchedule(StakingSchedule memory schedule) private  {\\n        require(schedule.duration > 0, \\\"INVALID_DURATION\\\");\\n        require(schedule.interval > 0, \\\"INVALID_INTERVAL\\\");\\n\\n        schedule.setup = true;        \\n        uint256 index = nextScheduleIndex;\\n        schedules[index] = schedule;\\n        scheduleIdxs.add(index);\\n        nextScheduleIndex = nextScheduleIndex.add(1);\\n        \\n        emit ScheduleAdded(index, schedule.cliff, schedule.duration, schedule.interval, schedule.setup, schedule.isActive, schedule.hardStart);\\n    }\\n\\n    function _getStakes(address account) private view returns(StakingDetails[] memory stakes) {\\n        uint256 stakeCnt = userStakingSchedules[account].length;\\n        stakes = new StakingDetails[](stakeCnt);\\n\\n        for(uint256 i = 0; i < stakeCnt; i++)\\n        {   \\n            stakes[i] = userStakings[account][userStakingSchedules[account][i]];              \\n        }\\n    }\\n\\n    function _isAllowedPermissionedDeposit() private view returns (bool) {\\n        return permissionedDepositors[msg.sender] || msg.sender == owner();\\n    }\\n\\n}\"\r\n    },\r\n    \"contracts/interfaces/IStaking.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.11;\\npragma experimental ABIEncoderV2;\\n\\ninterface IStaking {\\n\\n    struct StakingSchedule {\\n        uint256 cliff; // Duration in seconds before staking starts\\n        uint256 duration; // Seconds it takes for entire amount to stake\\n        uint256 interval; // Seconds it takes for a chunk to stake\\n        bool setup; //Just so we know its there        \\n        bool isActive; //Whether we can setup new stakes with the schedule\\n        uint256 hardStart; //Stakings will always start at this timestamp if set    \\n        bool isPublic; //Schedule can be written to by any account    \\n    }\\n\\n    struct StakingScheduleInfo {\\n        StakingSchedule schedule;\\n        uint256 index;\\n    }\\n\\n    struct StakingDetails {\\n        uint256 initial; //Initial amount of asset when stake was created, total amount to be staked before slashing\\n        uint256 withdrawn; //Amount that was staked and subsequently withdrawn\\n        uint256 slashed; //Amount that has been slashed        \\n        uint256 started; //Timestamp at which the stake started\\n        uint256 scheduleIx;\\n    }\\n\\n    struct WithdrawalInfo {\\n        uint256 minCycleIndex;\\n        uint256 amount;\\n    }\\n\\n    event ScheduleAdded(uint256 scheduleIndex, uint256 cliff, uint256 duration, uint256 interval, bool setup, bool isActive, uint256 hardStart);    \\n    event ScheduleRemoved(uint256 scheduleIndex);    \\n    event WithdrawalRequested(address account, uint256 amount);\\n    event WithdrawCompleted(address account, uint256 amount);    \\n    event Deposited(address account, uint256 amount, uint256 scheduleIx);\\n    event Slashed(address account, uint256 amount, uint256 scheduleIx);\\n\\n    function permissionedDepositors(address account) external returns (bool);\\n\\n    function setUserSchedules(address account, uint256[] calldata userSchedulesIdxs) external;\\n\\n    function addSchedule(StakingSchedule memory schedule) external;\\n\\n    function getSchedules() external view returns (StakingScheduleInfo[] memory);\\n\\n    function setPermissionedDepositor(address account, bool canDeposit) external;\\n\\n    function removeSchedule(uint256 scheduleIndex) external;    \\n\\n    function getStakes(address account) external view returns(StakingDetails[] memory);\\n\\n    function balanceOf(address account) external view returns(uint256);\\n\\n    function availableForWithdrawal(address account, uint256 scheduleIndex) external view returns (uint256);\\n\\n    function unvested(address account, uint256 scheduleIndex) external view returns(uint256);\\n\\n    function vested(address account, uint256 scheduleIndex) external view returns(uint256);\\n\\n    function deposit(uint256 amount, uint256 scheduleIndex) external;\\n\\n    function depositFor(address account, uint256 amount, uint256 scheduleIndex) external;\\n\\n    function depositWithSchedule(address account, uint256 amount, StakingSchedule calldata schedule) external;\\n\\n    function requestWithdrawal(uint256 amount) external;\\n\\n    function withdraw(uint256 amount) external;\\n\\n    /// @notice Pause deposits on the pool. Withdraws still allowed\\n    function pause() external;\\n\\n    /// @notice Unpause deposits on the pool.\\n    function unpause() external;\\n}\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/math/MathUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary MathUpgradeable {\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a >= b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow, so we distribute\\n        return (a / 2) + (b / 2) + ((a % 2 + b % 2) / 2);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/Initializable.sol\\\";\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal initializer {\\n        __Context_init_unchained();\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal initializer {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n    uint256[49] private __gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"./ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract PausableUpgradeable is Initializable, ContextUpgradeable {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    function __Pausable_init() internal initializer {\\n        __Context_init_unchained();\\n        __Pausable_init_unchained();\\n    }\\n\\n    function __Pausable_init_unchained() internal initializer {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n    uint256[49] private __gap;\\n}\\n\"\r\n    },\r\n    \"contracts/pools/Pool.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.11;\\n\\nimport \\\"../interfaces/ILiquidityPool.sol\\\";\\nimport \\\"../interfaces/IManager.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/Initializable.sol\\\";\\nimport {SafeMathUpgradeable as SafeMath} from \\n    \\\"@openzeppelin/contracts-upgradeable/math/SafeMathUpgradeable.sol\\\";\\nimport {MathUpgradeable as Math} from \\n    \\\"@openzeppelin/contracts-upgradeable/math/MathUpgradeable.sol\\\";\\nimport {OwnableUpgradeable as Ownable} from \\n    \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\nimport {ERC20Upgradeable as ERC20} from \\n    \\\"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\\\";\\nimport {IERC20Upgradeable as IERC20} from \\n    \\\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\\\";\\nimport {SafeERC20Upgradeable as SafeERC20} from \\n    \\\"@openzeppelin/contracts-upgradeable/token/ERC20/SafeERC20Upgradeable.sol\\\";\\nimport {PausableUpgradeable as Pausable} from \\n    \\\"@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol\\\";\\n\\ncontract Pool is ILiquidityPool, Initializable, ERC20, Ownable, Pausable {\\n    using SafeMath for uint256;\\n    using SafeERC20 for IERC20;\\n\\n    IERC20 public override underlyer;\\n    IManager public manager;\\n\\n    // implied: deployableLiquidity = underlyer.balanceOf(this) - withheldLiquidity\\n    uint256 public override withheldLiquidity;\\n\\n    // fAsset holder -> WithdrawalInfo\\n    mapping(address => WithdrawalInfo) public override requestedWithdrawals;\\n\\n    function initialize(\\n        IERC20 _underlyer,\\n        IManager _manager,\\n        string memory _name,\\n        string memory _symbol\\n    ) public initializer {\\n        __Context_init_unchained();\\n        __Ownable_init_unchained();\\n        __Pausable_init_unchained();\\n        __ERC20_init_unchained(_name, _symbol);\\n        underlyer = _underlyer;\\n        manager = _manager;\\n\\n        approveManager(type(uint256).max);\\n    }\\n\\n    function deposit(uint256 amount) external override {\\n        _deposit(msg.sender, msg.sender, amount);\\n    }\\n\\n    function depositFor(address account, uint256 amount) external override {\\n        _deposit(msg.sender, account, amount);\\n    }\\n\\n    /// @dev References the WithdrawalInfo for how much the user is permitted to withdraw\\n    /// @dev No withdrawal permitted unless currentCycle >= minCycle\\n    /// @dev Decrements withheldLiquidity by the withdrawn amount\\n    /// @dev TODO Update rewardsContract with proper accounting\\n    function withdraw(uint256 requestedAmount) external override {\\n        require(\\n            requestedAmount <= requestedWithdrawals[msg.sender].amount,\\n            \\\"WITHDRAW_INSUFFICIENT_BALANCE\\\"\\n        );\\n        require(requestedAmount > 0, \\\"NO_WITHDRAWAL\\\");\\n        require(underlyer.balanceOf(address(this)) >= requestedAmount, \\\"INSUFFICIENT_POOL_BALANCE\\\");\\n\\n        require(\\n            requestedWithdrawals[msg.sender].minCycle <= manager.getCurrentCycleIndex(),\\n            \\\"INVALID_CYCLE\\\"\\n        );\\n\\n        requestedWithdrawals[msg.sender].amount = requestedWithdrawals[msg.sender].amount.sub(\\n            requestedAmount\\n        );\\n\\n        if (requestedWithdrawals[msg.sender].amount == 0) {\\n            delete requestedWithdrawals[msg.sender];\\n        }\\n\\n        withheldLiquidity = withheldLiquidity.sub(requestedAmount);\\n\\n        _burn(msg.sender, requestedAmount);\\n\\n        underlyer.safeTransfer(msg.sender, requestedAmount);\\n    }\\n\\n    /// @dev Adjusts the withheldLiquidity as necessary\\n    /// @dev Updates the WithdrawalInfo for when a user can withdraw and for what requested amount\\n    function requestWithdrawal(uint256 amount) external override {\\n        require(amount > 0, \\\"INVALID_AMOUNT\\\");\\n        require(amount <= balanceOf(msg.sender), \\\"INSUFFICIENT_BALANCE\\\");\\n        withheldLiquidity = withheldLiquidity.sub(requestedWithdrawals[msg.sender].amount).add(\\n            amount\\n        );\\n        requestedWithdrawals[msg.sender].amount = amount;\\n        if (manager.getRolloverStatus()) {\\n            requestedWithdrawals[msg.sender].minCycle = manager.getCurrentCycleIndex().add(2);\\n        } else {            \\n            requestedWithdrawals[msg.sender].minCycle = manager.getCurrentCycleIndex().add(1);\\n        }\\n    }\\n\\n    function preTransferAdjustWithheldLiquidity(address sender, uint256 amount) internal {\\n        if (requestedWithdrawals[sender].amount > 0) {\\n            uint256 newRequestedWithdrawl =\\n                requestedWithdrawals[sender].amount.sub(\\n                    Math.min(amount, requestedWithdrawals[sender].amount)\\n                );\\n\\n            withheldLiquidity = withheldLiquidity.sub(\\n                requestedWithdrawals[sender].amount.sub(newRequestedWithdrawl)\\n            );\\n\\n            requestedWithdrawals[sender].amount = newRequestedWithdrawl;\\n\\n            if (requestedWithdrawals[sender].amount == 0) {\\n                delete requestedWithdrawals[sender];\\n            }\\n        }\\n    }\\n\\n    function approveManager(uint256 amount) public override onlyOwner {\\n        uint256 currentAllowance = underlyer.allowance(address(this), address(manager));        \\n        if (currentAllowance < amount) {\\n            uint256 delta = amount.sub(currentAllowance);\\n            underlyer.safeIncreaseAllowance(address(manager), delta);\\n        } else {\\n            uint256 delta = currentAllowance.sub(amount);\\n            underlyer.safeDecreaseAllowance(address(manager), delta);\\n        }\\n    }\\n\\n    /// @dev Adjust withheldLiquidity and requestedWithdrawal if sender does not have sufficient unlocked balance for the transfer\\n    function transfer(address recipient, uint256 amount) public override returns (bool) {\\n        preTransferAdjustWithheldLiquidity(msg.sender, amount);\\n        return super.transfer(recipient, amount);\\n    }\\n\\n    /// @dev Adjust withheldLiquidity and requestedWithdrawal if sender does not have sufficient unlocked balance for the transfer\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) public override returns (bool) {\\n        preTransferAdjustWithheldLiquidity(sender, amount);\\n        return super.transferFrom(sender, recipient, amount);\\n    }\\n\\n    function pause() external override onlyOwner {        \\n        _pause();\\n    }\\n\\n    function unpause() external override onlyOwner {        \\n        _unpause();\\n    }\\n\\n    function _deposit(address fromAccount, address toAccount, uint256 amount) internal {\\n        require(amount > 0, \\\"INVALID_AMOUNT\\\");\\n        require(toAccount != address(0), \\\"INVALID_ADDRESS\\\");\\n        require(!paused(), \\\"PAUSED\\\");\\n\\n        underlyer.safeTransferFrom(fromAccount, address(this), amount);\\n\\n        _mint(toAccount, amount);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"../../utils/ContextUpgradeable.sol\\\";\\nimport \\\"./IERC20Upgradeable.sol\\\";\\nimport \\\"../../math/SafeMathUpgradeable.sol\\\";\\nimport \\\"../../proxy/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin guidelines: functions revert instead\\n * of returning `false` on failure. This behavior is nonetheless conventional\\n * and does not conflict with the expectations of ERC20 applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20Upgradeable is Initializable, ContextUpgradeable, IERC20Upgradeable {\\n    using SafeMathUpgradeable for uint256;\\n\\n    mapping (address => uint256) private _balances;\\n\\n    mapping (address => mapping (address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n    uint8 private _decimals;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}, initializes {decimals} with\\n     * a default value of 18.\\n     *\\n     * To select a different value for {decimals}, use {_setupDecimals}.\\n     *\\n     * All three of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    function __ERC20_init(string memory name_, string memory symbol_) internal initializer {\\n        __Context_init_unchained();\\n        __ERC20_init_unchained(name_, symbol_);\\n    }\\n\\n    function __ERC20_init_unchained(string memory name_, string memory symbol_) internal initializer {\\n        _name = name_;\\n        _symbol = symbol_;\\n        _decimals = 18;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is\\n     * called.\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual returns (uint8) {\\n        return _decimals;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `recipient` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(_msgSender(), recipient, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        _approve(_msgSender(), spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` and `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``sender``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(sender, recipient, amount);\\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \\\"ERC20: transfer amount exceeds allowance\\\"));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \\\"ERC20: decreased allowance below zero\\\"));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\\n     *\\n     * This is internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` cannot be the zero address.\\n     * - `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     */\\n    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\\n        require(sender != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(recipient != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(sender, recipient, amount);\\n\\n        _balances[sender] = _balances[sender].sub(amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        _balances[recipient] = _balances[recipient].add(amount);\\n        emit Transfer(sender, recipient, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply = _totalSupply.add(amount);\\n        _balances[account] = _balances[account].add(amount);\\n        emit Transfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        _balances[account] = _balances[account].sub(amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        _totalSupply = _totalSupply.sub(amount);\\n        emit Transfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Sets {decimals} to a value other than the default one of 18.\\n     *\\n     * WARNING: This function should only be called from the constructor. Most\\n     * applications that interact with token contracts will not expect\\n     * {decimals} to ever change, and may work incorrectly if it does.\\n     */\\n    function _setupDecimals(uint8 decimals_) internal virtual {\\n        _decimals = decimals_;\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be to transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual { }\\n    uint256[44] private __gap;\\n}\\n\"\r\n    },\r\n    \"contracts/pools/EthPool.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.11;\\n\\nimport \\\"../interfaces/ILiquidityEthPool.sol\\\";\\nimport \\\"../interfaces/IManager.sol\\\";\\nimport \\\"../interfaces/IWETH.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/Initializable.sol\\\";\\nimport {AddressUpgradeable as Address} from\\n    \\\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\\\";\\nimport {MathUpgradeable as Math} from \\n    \\\"@openzeppelin/contracts-upgradeable/math/MathUpgradeable.sol\\\";\\nimport {SafeMathUpgradeable as SafeMath} from \\n    \\\"@openzeppelin/contracts-upgradeable/math/SafeMathUpgradeable.sol\\\";\\nimport {OwnableUpgradeable as Ownable} from \\n    \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\nimport {ERC20Upgradeable as ERC20} from \\n    \\\"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\\\";\\nimport {IERC20Upgradeable as IERC20} from \\n    \\\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\\\";\\nimport {SafeERC20Upgradeable as SafeERC20} from \\n    \\\"@openzeppelin/contracts-upgradeable/token/ERC20/SafeERC20Upgradeable.sol\\\";\\nimport {PausableUpgradeable as Pausable} from \\n    \\\"@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol\\\";\\n\\ncontract EthPool is ILiquidityEthPool, Initializable, ERC20, Ownable, Pausable \\n{\\n    using SafeMath for uint256;\\n    using SafeERC20 for IERC20;\\n    using Address for address;\\n    using Address for address payable;\\n\\n    /// @dev TODO: Hardcode addresses, make immuatable, remove from initializer\\n    IWETH public override weth;\\n    IManager public manager;\\n\\n    // implied: deployableLiquidity = underlyer.balanceOf(this) - withheldLiquidity\\n    uint256 public override withheldLiquidity;\\n\\n    // fAsset holder -> WithdrawalInfo\\n    mapping(address => WithdrawalInfo) public override requestedWithdrawals;\\n\\n    /// @dev necessary to receive ETH\\n    // solhint-disable-next-line no-empty-blocks\\n    receive() external payable {}\\n\\n    function initialize(\\n        IWETH _weth,\\n        IManager _manager,\\n        string memory _name,\\n        string memory _symbol\\n    ) public initializer {\\n        __Context_init_unchained();\\n        __Ownable_init_unchained();\\n        __Pausable_init_unchained();\\n        __ERC20_init_unchained(_name, _symbol); \\n        weth = _weth;\\n        manager = _manager;\\n        withheldLiquidity = 0;\\n\\n        approveManager(type(uint256).max);\\n    }\\n\\n    function deposit(uint256 amount) external payable override {        \\n        _deposit(msg.sender, msg.sender, amount, msg.value);\\n    }\\n\\n    function depositFor(address account, uint256 amount) external payable override {        \\n        _deposit(msg.sender, account, amount, msg.value);\\n    }    \\n\\n    function underlyer() external override view returns (address) {\\n        return address(weth);\\n    }\\n\\n    /// @dev References the WithdrawalInfo for how much the user is permitted to withdraw\\n    /// @dev No withdrawal permitted unless currentCycle >= minCycle\\n    /// @dev Decrements withheldLiquidity by the withdrawn amount    \\n    function withdraw(uint256 requestedAmount, bool asEth) external override {\\n        require(\\n            requestedAmount <= requestedWithdrawals[msg.sender].amount,\\n            \\\"WITHDRAW_INSUFFICIENT_BALANCE\\\"\\n        );\\n        require(requestedAmount > 0, \\\"NO_WITHDRAWAL\\\");\\n        require(weth.balanceOf(address(this)) >= requestedAmount, \\\"INSUFFICIENT_POOL_BALANCE\\\");\\n\\n        require(\\n            requestedWithdrawals[msg.sender].minCycle <= manager.getCurrentCycleIndex(),\\n            \\\"INVALID_CYCLE\\\"\\n        );\\n\\n        requestedWithdrawals[msg.sender].amount = requestedWithdrawals[msg.sender].amount.sub(\\n            requestedAmount\\n        );\\n\\n        if (requestedWithdrawals[msg.sender].amount == 0) {\\n            delete requestedWithdrawals[msg.sender];\\n        }\\n\\n        withheldLiquidity = withheldLiquidity.sub(requestedAmount);\\n\\n        _burn(msg.sender, requestedAmount);\\n\\n        if (asEth) {\\n            weth.withdraw(requestedAmount);\\n            msg.sender.sendValue(requestedAmount);\\n        } else {\\n            IERC20(weth).safeTransfer(msg.sender, requestedAmount);\\n        }\\n    }\\n\\n    /// @dev Adjusts the withheldLiquidity as necessary\\n    /// @dev Updates the WithdrawalInfo for when a user can withdraw and for what requested amount\\n    function requestWithdrawal(uint256 amount) external override {\\n        require(amount > 0, \\\"INVALID_AMOUNT\\\");\\n        require(amount <= balanceOf(msg.sender), \\\"INSUFFICIENT_BALANCE\\\");\\n        withheldLiquidity = withheldLiquidity.sub(requestedWithdrawals[msg.sender].amount).add(\\n            amount\\n        );\\n        requestedWithdrawals[msg.sender].amount = amount;\\n        if (manager.getRolloverStatus()) {\\n            requestedWithdrawals[msg.sender].minCycle = manager.getCurrentCycleIndex().add(2);\\n        } else {            \\n            requestedWithdrawals[msg.sender].minCycle = manager.getCurrentCycleIndex().add(1);\\n        }\\n    }\\n\\n    function preTransferAdjustWithheldLiquidity(address sender, uint256 amount) internal {\\n        if (requestedWithdrawals[sender].amount > 0) {\\n            uint256 newRequestedWithdrawl =\\n                requestedWithdrawals[sender].amount.sub(\\n                    Math.min(amount, requestedWithdrawals[sender].amount)\\n                );\\n\\n            withheldLiquidity = withheldLiquidity.sub(\\n                requestedWithdrawals[msg.sender].amount.sub(newRequestedWithdrawl)\\n            );\\n\\n            requestedWithdrawals[msg.sender].amount = newRequestedWithdrawl;\\n\\n            if (requestedWithdrawals[msg.sender].amount == 0) {\\n                delete requestedWithdrawals[msg.sender];\\n            }\\n        }\\n    }\\n\\n    function approveManager(uint256 amount) public override onlyOwner {\\n        uint256 currentAllowance = IERC20(weth).allowance(address(this), address(manager));        \\n        if (currentAllowance < amount) {\\n            uint256 delta = amount.sub(currentAllowance);\\n            IERC20(weth).safeIncreaseAllowance(address(manager), delta);\\n        } else {\\n            uint256 delta = currentAllowance.sub(amount);\\n            IERC20(weth).safeDecreaseAllowance(address(manager), delta);\\n        }\\n    }\\n\\n    /// @dev Adjust withheldLiquidity and requestedWithdrawal if sender does not have sufficient unlocked balance for the transfer\\n    function transfer(address recipient, uint256 amount) public override returns (bool) {\\n        preTransferAdjustWithheldLiquidity(msg.sender, amount);\\n        return super.transfer(recipient, amount);\\n    }\\n\\n    /// @dev Adjust withheldLiquidity and requestedWithdrawal if sender does not have sufficient unlocked balance for the transfer\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) public override returns (bool) {\\n        preTransferAdjustWithheldLiquidity(sender, amount);\\n        return super.transferFrom(sender, recipient, amount);\\n    }\\n\\n    function pause() external override onlyOwner {        \\n        _pause();\\n    }\\n\\n    function unpause() external override onlyOwner {        \\n        _unpause();\\n    }\\n\\n    function _deposit(address fromAccount, address toAccount, uint256 amount, uint256 msgValue) internal {\\n        require(amount > 0, \\\"INVALID_AMOUNT\\\");\\n        require(toAccount != address(0), \\\"INVALID_ADDRESS\\\");\\n        require(!paused(), \\\"PAUSED\\\");\\n\\n        if (msgValue > 0) {\\n            require(msgValue == amount, \\\"AMT_VALUE_MISMATCH\\\");\\n            weth.deposit{value: amount}();\\n        } else {            \\n            IERC20(weth).safeTransferFrom(fromAccount, address(this), amount);\\n        }\\n        _mint(toAccount, amount);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/ILiquidityEthPool.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.11;\\n\\nimport \\\"../interfaces/IWETH.sol\\\";\\nimport \\\"../interfaces/IManager.sol\\\";\\n\\n/// @title Interface for Pool\\n/// @notice Allows users to deposit ERC-20 tokens to be deployed to market makers.\\n/// @notice Mints 1:1 fToken on deposit, represeting an IOU for the undelrying token that is freely transferable.\\n/// @notice Holders of fTokens earn rewards based on duration their tokens were deployed and the demand for that asset.\\n/// @notice Holders of fTokens can redeem for underlying asset after issuing requestWithdrawal and waiting for the next cycle.\\ninterface ILiquidityEthPool {\\n    struct WithdrawalInfo {\\n        uint256 minCycle;\\n        uint256 amount;\\n    }\\n\\n    /// @notice Transfers amount of underlying token from user to this pool and mints fToken to the msg.sender.\\n    /// @notice Depositor must have previously granted transfer approval to the pool via underlying token contract.\\n    /// @notice Liquidity deposited is deployed on the next cycle - unless a withdrawal request is submitted, in which case the liquidity will be withheld.\\n    function deposit(uint256 amount) external payable;\\n\\n    /// @notice Transfers amount of underlying token from user to this pool and mints fToken to the account.\\n    /// @notice Depositor must have previously granted transfer approval to the pool via underlying token contract.\\n    /// @notice Liquidity deposited is deployed on the next cycle - unless a withdrawal request is submitted, in which case the liquidity will be withheld.\\n    function depositFor(address account, uint256 amount) external payable;\\n\\n    /// @notice Requests that the manager prepare funds for withdrawal next cycle\\n    /// @notice Invoking this function when sender already has a currently pending request will overwrite that requested amount and reset the cycle timer\\n    /// @param amount Amount of fTokens requested to be redeemed\\n    function requestWithdrawal(uint256 amount) external;\\n\\n    function approveManager(uint256 amount) external;\\n\\n    /// @notice Sender must first invoke requestWithdrawal in a previous cycle\\n    /// @notice This function will burn the fAsset and transfers underlying asset back to sender\\n    /// @notice Will execute a partial withdrawal if either available liquidity or previously requested amount is insufficient\\n    /// @param amount Amount of fTokens to redeem, value can be in excess of available tokens, operation will be reduced to maximum permissible\\n    function withdraw(uint256 amount, bool asEth) external;\\n\\n    /// @return Reference to the underlying ERC-20 contract\\n    function weth() external view returns (IWETH);\\n\\n    /// @return Reference to the underlying ERC-20 contract\\n    function underlyer() external view returns (address);\\n\\n    /// @return Amount of liquidity that should not be deployed for market making (this liquidity will be used for completing requested withdrawals)\\n    function withheldLiquidity() external view returns (uint256);\\n\\n    /// @notice Get withdraw requests for an account\\n    /// @param account User account to check\\n    /// @return minCycle Cycle - block number - that must be active before withdraw is allowed, amount Token amount requested\\n    function requestedWithdrawals(address account) external view returns (uint256, uint256);\\n\\n    /// @notice Pause deposits on the pool. Withdraws still allowed\\n    function pause() external;\\n\\n    /// @notice Unpause deposits on the pool.\\n    function unpause() external;\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IWETH.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.11;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\\\";\\n\\ninterface IWETH is IERC20Upgradeable {\\n    function deposit() external payable;\\n\\n    function withdraw(uint256) external;\\n}\\n\"\r\n    },\r\n    \"contracts/defi-round/DefiRound.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.11;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"@openzeppelin/contracts/math/Math.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/SafeCast.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/EnumerableSet.sol\\\";\\nimport \\\"@chainlink/contracts/src/v0.6/interfaces/AggregatorV3Interface.sol\\\";\\nimport \\\"../interfaces/ILiquidityPool.sol\\\";\\nimport \\\"../interfaces/IDefiRound.sol\\\";\\nimport \\\"../interfaces/IWETH.sol\\\";\\nimport \\\"@openzeppelin/contracts/cryptography/MerkleProof.sol\\\";\\n\\ncontract DefiRound is IDefiRound, Ownable {\\n    using SafeMath for uint256;\\n    using SafeCast for int256;\\n    using SafeERC20 for IERC20;\\n    using Address for address;\\n    using Address for address payable;\\n    using EnumerableSet for EnumerableSet.AddressSet;\\n\\n    // solhint-disable-next-line\\n    address public immutable WETH;\\n    address public override immutable treasury;\\n    OversubscriptionRate public overSubscriptionRate;    \\n    mapping(address => uint256) public override totalSupply;\\n    // account -> accountData\\n    mapping(address => AccountData) private accountData;\\n    mapping(address => RateData) private tokenRates;\\n    \\n    //Token -> oracle, genesis\\n    mapping(address => SupportedTokenData) private tokenSettings;\\n    \\n    EnumerableSet.AddressSet private supportedTokens;\\n    EnumerableSet.AddressSet private configuredTokenRates;\\n    STAGES public override currentStage;\\n\\n    WhitelistSettings public whitelistSettings;\\n    uint256 public lastLookExpiration  = type(uint256).max;\\n    uint256 private immutable maxTotalValue;\\n    bool private stage1Locked;\\n\\n    constructor(\\n        // solhint-disable-next-line\\n        address _WETH,\\n        address _treasury,\\n        uint256 _maxTotalValue\\n    ) public {\\n        require(_WETH != address(0), \\\"INVALID_WETH\\\");\\n        require(_treasury != address(0), \\\"INVALID_TREASURY\\\");\\n        require(_maxTotalValue > 0, \\\"INVALID_MAXTOTAL\\\");\\n\\n        WETH = _WETH;\\n        treasury = _treasury;\\n        currentStage = STAGES.STAGE_1;\\n        \\n        maxTotalValue = _maxTotalValue;\\n    }\\n\\n    function deposit(TokenData calldata tokenInfo, bytes32[] memory proof) external payable override {\\n        require(currentStage == STAGES.STAGE_1, \\\"DEPOSITS_NOT_ACCEPTED\\\");\\n        require(!stage1Locked, \\\"DEPOSITS_LOCKED\\\");\\n\\n        if (whitelistSettings.enabled) {            \\n            require(verifyDepositor(msg.sender, whitelistSettings.root, proof), \\\"PROOF_INVALID\\\");\\n        }\\n\\n        TokenData memory data = tokenInfo;\\n        address token = data.token;\\n        uint256 tokenAmount = data.amount;\\n        require(supportedTokens.contains(token), \\\"UNSUPPORTED_TOKEN\\\");\\n        require(tokenAmount > 0, \\\"INVALID_AMOUNT\\\");\\n\\n        // Convert ETH to WETH if ETH is passed in, otherwise treat WETH as a regular ERC20\\n        if (token == WETH && msg.value > 0) {\\n            require(tokenAmount == msg.value, \\\"INVALID_MSG_VALUE\\\"); \\n            IWETH(WETH).deposit{value: tokenAmount}();\\n        } else {\\n            require(msg.value == 0, \\\"NO_ETH\\\");\\n        }\\n\\n        AccountData storage tokenAccountData = accountData[msg.sender];\\n    \\n        if (tokenAccountData.token == address(0)) {\\n            tokenAccountData.token = token;\\n        }\\n        \\n        require(tokenAccountData.token == token, \\\"SINGLE_ASSET_DEPOSITS\\\");\\n\\n        tokenAccountData.initialDeposit = tokenAccountData.initialDeposit.add(tokenAmount);\\n        tokenAccountData.currentBalance = tokenAccountData.currentBalance.add(tokenAmount);\\n        \\n        require(tokenAccountData.currentBalance <= tokenSettings[token].maxLimit, \\\"MAX_LIMIT_EXCEEDED\\\");       \\n\\n        // No need to transfer from msg.sender since is ETH was converted to WETH\\n        if (!(token == WETH && msg.value > 0)) {\\n            IERC20(token).safeTransferFrom(msg.sender, address(this), tokenAmount);    \\n        }\\n        \\n        if(_totalValue() > maxTotalValue) {\\n            stage1Locked = true;\\n        }\\n\\n        emit Deposited(msg.sender, tokenInfo);\\n    }\\n\\n    // solhint-disable-next-line no-empty-blocks\\n    receive() external payable \\n    { \\n        require(msg.sender == WETH);\\n    }\\n\\n    function withdraw(TokenData calldata tokenInfo, bool asETH) external override {\\n        require(currentStage == STAGES.STAGE_2, \\\"WITHDRAWS_NOT_ACCEPTED\\\");\\n        require(!_isLastLookComplete(), \\\"WITHDRAWS_EXPIRED\\\");\\n\\n        TokenData memory data = tokenInfo;\\n        address token = data.token;\\n        uint256 tokenAmount = data.amount;\\n        require(supportedTokens.contains(token), \\\"UNSUPPORTED_TOKEN\\\");\\n        require(tokenAmount > 0, \\\"INVALID_AMOUNT\\\");        \\n        AccountData storage tokenAccountData = accountData[msg.sender];\\n        require(token == tokenAccountData.token, \\\"INVALID_TOKEN\\\");\\n        tokenAccountData.currentBalance = tokenAccountData.currentBalance.sub(tokenAmount);\\n        // set the data back in the mapping, otherwise updates are not saved\\n        accountData[msg.sender] = tokenAccountData;\\n\\n        // Don't transfer WETH, WETH is converted to ETH and sent to the recipient\\n        if (token == WETH && asETH) {\\n            IWETH(WETH).withdraw(tokenAmount);\\n            msg.sender.sendValue(tokenAmount);            \\n        }  else {\\n            IERC20(token).safeTransfer(msg.sender, tokenAmount);\\n        }\\n        \\n        emit Withdrawn(msg.sender, tokenInfo, asETH);\\n    }\\n\\n    function configureWhitelist(WhitelistSettings memory settings) external override onlyOwner {\\n        whitelistSettings = settings;\\n        emit WhitelistConfigured(settings);\\n    }\\n\\n    function addSupportedTokens(SupportedTokenData[] calldata tokensToSupport)\\n        external\\n        override\\n        onlyOwner\\n    {\\n        uint256 tokensLength = tokensToSupport.length;\\n        for (uint256 i = 0; i < tokensLength; i++) {\\n            SupportedTokenData memory data = tokensToSupport[i];\\n            require(supportedTokens.add(data.token), \\\"TOKEN_EXISTS\\\");\\n            \\n            tokenSettings[data.token] = data;\\n        }\\n        emit SupportedTokensAdded(tokensToSupport);\\n    }\\n\\n    function getSupportedTokens() external view override returns (address[] memory tokens) {\\n        uint256 tokensLength = supportedTokens.length();\\n        tokens = new address[](tokensLength);\\n        for (uint256 i = 0; i < tokensLength; i++) {\\n            tokens[i] = supportedTokens.at(i);\\n        }\\n    }\\n\\n    function publishRates(RateData[] calldata ratesData, OversubscriptionRate memory oversubRate, uint256 lastLookDuration) external override onlyOwner {\\n        // check rates havent been published before\\n        require(currentStage == STAGES.STAGE_1, \\\"RATES_ALREADY_SET\\\");\\n        require(lastLookDuration > 0, \\\"INVALID_DURATION\\\");\\n        require(oversubRate.overDenominator > 0, \\\"INVALID_DENOMINATOR\\\");\\n        require(oversubRate.overNumerator > 0, \\\"INVALID_NUMERATOR\\\");        \\n        \\n        uint256 ratesLength = ratesData.length;\\n        for (uint256 i = 0; i < ratesLength; i++) {\\n            RateData memory data = ratesData[i];\\n            require(data.numerator > 0, \\\"INVALID_NUMERATOR\\\");\\n            require(data.denominator > 0, \\\"INVALID_DENOMINATOR\\\");\\n            require(tokenRates[data.token].token == address(0), \\\"RATE_ALREADY_SET\\\");\\n            require(configuredTokenRates.add(data.token), \\\"ALREADY_CONFIGURED\\\");\\n            tokenRates[data.token] = data;            \\n        }\\n\\n        require(configuredTokenRates.length() == supportedTokens.length(), \\\"MISSING_RATE\\\");\\n\\n        // Stage only moves forward when prices are published\\n        currentStage = STAGES.STAGE_2;\\n        lastLookExpiration = block.number + lastLookDuration;\\n        overSubscriptionRate = oversubRate;\\n\\n        emit RatesPublished(ratesData);\\n    }\\n\\n    function getRates(address[] calldata tokens) external view override returns (RateData[] memory rates) {\\n        uint256 tokensLength = tokens.length;\\n        rates = new RateData[](tokensLength);\\n        for (uint256 i = 0; i < tokensLength; i++) {\\n            rates[i] = tokenRates[tokens[i]];\\n        }\\n    }\\n\\n    function getTokenValue(address token, uint256 balance) internal view returns (uint256 value) {\\n        uint256 tokenDecimals = ERC20(token).decimals();\\n        (, int256 tokenRate, , , ) = AggregatorV3Interface(tokenSettings[token].oracle).latestRoundData();       \\n        uint256 rate = tokenRate.toUint256();        \\n        value = (balance.mul(rate)).div(10**tokenDecimals); //Chainlink USD prices are always to 8            \\n    }\\n\\n    function totalValue() external view override returns (uint256) {\\n        return _totalValue();\\n    }\\n\\n    function _totalValue() internal view returns (uint256 value) {\\n        uint256 tokensLength = supportedTokens.length();\\n        for (uint256 i = 0; i < tokensLength; i++) {\\n            address token = supportedTokens.at(i);\\n            uint256 tokenBalance = IERC20(token).balanceOf(address(this));\\n            value = value.add(getTokenValue(token, tokenBalance));\\n        }\\n    }\\n\\n    function accountBalance(address account) external view override returns (uint256 value) {\\n        uint256 tokenBalance = accountData[account].currentBalance;\\n        value = value.add(getTokenValue(accountData[account].token, tokenBalance));   \\n    }\\n\\n    function finalizeAssets(bool depositToGenesis) external override {\\n        require(currentStage == STAGES.STAGE_3, \\\"NOT_SYSTEM_FINAL\\\");\\n         \\n        AccountData storage data = accountData[msg.sender];\\n        address token = data.token;\\n\\n        require(token != address(0), \\\"NO_DATA\\\");\\n\\n        ( , uint256 ineffective, ) = _getRateAdjustedAmounts(data.currentBalance, token);\\n        \\n        require(ineffective > 0, \\\"NOTHING_TO_MOVE\\\");\\n\\n        // zero out balance\\n        data.currentBalance = 0;\\n        accountData[msg.sender] = data;\\n\\n        if (depositToGenesis) {  \\n            address pool = tokenSettings[token].genesis;         \\n            uint256 currentAllowance = IERC20(token).allowance(address(this), pool);\\n            if (currentAllowance < ineffective) {\\n                IERC20(token).safeIncreaseAllowance(pool, ineffective.sub(currentAllowance));    \\n            }            \\n            ILiquidityPool(pool).depositFor(msg.sender, ineffective);\\n            emit GenesisTransfer(msg.sender, ineffective);\\n        } else {\\n            // transfer ineffectiveTokenBalance back to user\\n            IERC20(token).safeTransfer(msg.sender, ineffective);\\n        }    \\n\\n        emit AssetsFinalized(msg.sender, token, ineffective);        \\n    }\\n\\n    function getGenesisPools(address[] calldata tokens)\\n        external\\n        view\\n        override\\n        returns (address[] memory genesisAddresses)\\n    {\\n        uint256 tokensLength = tokens.length;\\n        genesisAddresses = new address[](tokensLength);\\n        for (uint256 i = 0; i < tokensLength; i++) {\\n            require(supportedTokens.contains(tokens[i]), \\\"TOKEN_UNSUPPORTED\\\");\\n            genesisAddresses[i] = tokenSettings[supportedTokens.at(i)].genesis;            \\n        }\\n    }\\n\\n    function getTokenOracles(address[] calldata tokens)\\n        external\\n        view\\n        override\\n        returns (address[] memory oracleAddresses)\\n    {\\n        uint256 tokensLength = tokens.length;\\n        oracleAddresses = new address[](tokensLength);\\n        for (uint256 i = 0; i < tokensLength; i++) {\\n            require(supportedTokens.contains(tokens[i]), \\\"TOKEN_UNSUPPORTED\\\");\\n            oracleAddresses[i] = tokenSettings[tokens[i]].oracle;\\n        }\\n    }\\n\\n    function getAccountData(address account) external view override returns (AccountDataDetails[] memory data) {\\n        uint256 supportedTokensLength = supportedTokens.length();\\n        data = new AccountDataDetails[](supportedTokensLength);\\n        for (uint256 i = 0; i < supportedTokensLength; i++) {\\n            address token = supportedTokens.at(i);\\n            AccountData memory accountTokenInfo = accountData[account];\\n            if (currentStage >= STAGES.STAGE_2 && accountTokenInfo.token != address(0)) {\\n                (uint256 effective, uint256 ineffective, uint256 actual) = _getRateAdjustedAmounts(accountTokenInfo.currentBalance, token);\\n                AccountDataDetails memory details = AccountDataDetails(\\n                    token, \\n                    accountTokenInfo.initialDeposit, \\n                    accountTokenInfo.currentBalance, \\n                    effective, \\n                    ineffective, \\n                    actual\\n                );\\n                data[i] = details;\\n            } else {\\n                data[i] = AccountDataDetails(token, accountTokenInfo.initialDeposit, accountTokenInfo.currentBalance, 0, 0, 0);\\n            }          \\n        }\\n    }\\n\\n    function transferToTreasury() external override onlyOwner {\\n        require(_isLastLookComplete(), \\\"CURRENT_STAGE_INVALID\\\");\\n        require(currentStage == STAGES.STAGE_2, \\\"ONLY_TRANSFER_ONCE\\\");\\n\\n        uint256 supportedTokensLength = supportedTokens.length();\\n        TokenData[] memory tokens = new TokenData[](supportedTokensLength);\\n        for (uint256 i = 0; i < supportedTokensLength; i++) {       \\n            address token = supportedTokens.at(i);  \\n            uint256 balance = IERC20(token).balanceOf(address(this));\\n            (uint256 effective, , ) = _getRateAdjustedAmounts(balance, token);\\n            tokens[i].token = token;\\n            tokens[i].amount = effective;\\n            IERC20(token).safeTransfer(treasury, effective);\\n        }\\n\\n        currentStage = STAGES.STAGE_3;\\n\\n        emit TreasuryTransfer(tokens);\\n    }\\n    \\n   function getRateAdjustedAmounts(uint256 balance, address token) external override view returns (uint256,uint256,uint256) {\\n        return _getRateAdjustedAmounts(balance, token);\\n    }\\n\\n    function getMaxTotalValue() external view override returns (uint256) {\\n        return maxTotalValue;\\n    }\\n\\n    function _getRateAdjustedAmounts(uint256 balance, address token) internal view returns (uint256,uint256,uint256) {\\n        require(currentStage >= STAGES.STAGE_2, \\\"RATES_NOT_PUBLISHED\\\");\\n\\n        RateData memory rateInfo = tokenRates[token];\\n        uint256 effectiveTokenBalance = \\n            balance.mul(overSubscriptionRate.overNumerator).div(overSubscriptionRate.overDenominator);\\n        uint256 ineffectiveTokenBalance =\\n            balance.mul(overSubscriptionRate.overDenominator.sub(overSubscriptionRate.overNumerator))\\n            .div(overSubscriptionRate.overDenominator);\\n        \\n        uint256 actualReceived =\\n            effectiveTokenBalance.mul(rateInfo.denominator).div(rateInfo.numerator);\\n\\n        return (effectiveTokenBalance, ineffectiveTokenBalance, actualReceived);\\n    }\\n\\n    function verifyDepositor(address participant, bytes32 root, bytes32[] memory proof) internal pure returns (bool) {\\n        bytes32 leaf = keccak256((abi.encodePacked((participant))));\\n        return MerkleProof.verify(proof, root, leaf);\\n    }\\n\\n    function _isLastLookComplete() internal view returns (bool) {\\n        return block.number >= lastLookExpiration;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/math/Math.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a >= b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow, so we distribute\\n        return (a / 2) + (b / 2) + ((a % 2 + b % 2) / 2);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/SafeCast.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n\\n/**\\n * @dev Wrappers over Solidity's uintXX/intXX casting operators with added overflow\\n * checks.\\n *\\n * Downcasting from uint256/int256 in Solidity does not revert on overflow. This can\\n * easily result in undesired exploitation or bugs, since developers usually\\n * assume that overflows raise errors. `SafeCast` restores this intuition by\\n * reverting the transaction when such an operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n *\\n * Can be combined with {SafeMath} and {SignedSafeMath} to extend it to smaller types, by performing\\n * all math on `uint256` and `int256` and then downcasting.\\n */\\nlibrary SafeCast {\\n\\n    /**\\n     * @dev Returns the downcasted uint128 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint128).\\n     *\\n     * Counterpart to Solidity's `uint128` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 128 bits\\n     */\\n    function toUint128(uint256 value) internal pure returns (uint128) {\\n        require(value < 2**128, \\\"SafeCast: value doesn\\\\'t fit in 128 bits\\\");\\n        return uint128(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint64 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint64).\\n     *\\n     * Counterpart to Solidity's `uint64` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 64 bits\\n     */\\n    function toUint64(uint256 value) internal pure returns (uint64) {\\n        require(value < 2**64, \\\"SafeCast: value doesn\\\\'t fit in 64 bits\\\");\\n        return uint64(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint32 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint32).\\n     *\\n     * Counterpart to Solidity's `uint32` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 32 bits\\n     */\\n    function toUint32(uint256 value) internal pure returns (uint32) {\\n        require(value < 2**32, \\\"SafeCast: value doesn\\\\'t fit in 32 bits\\\");\\n        return uint32(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint16 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint16).\\n     *\\n     * Counterpart to Solidity's `uint16` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 16 bits\\n     */\\n    function toUint16(uint256 value) internal pure returns (uint16) {\\n        require(value < 2**16, \\\"SafeCast: value doesn\\\\'t fit in 16 bits\\\");\\n        return uint16(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint8 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint8).\\n     *\\n     * Counterpart to Solidity's `uint8` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 8 bits.\\n     */\\n    function toUint8(uint256 value) internal pure returns (uint8) {\\n        require(value < 2**8, \\\"SafeCast: value doesn\\\\'t fit in 8 bits\\\");\\n        return uint8(value);\\n    }\\n\\n    /**\\n     * @dev Converts a signed int256 into an unsigned uint256.\\n     *\\n     * Requirements:\\n     *\\n     * - input must be greater than or equal to 0.\\n     */\\n    function toUint256(int256 value) internal pure returns (uint256) {\\n        require(value >= 0, \\\"SafeCast: value must be positive\\\");\\n        return uint256(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int128 from int256, reverting on\\n     * overflow (when the input is less than smallest int128 or\\n     * greater than largest int128).\\n     *\\n     * Counterpart to Solidity's `int128` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 128 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt128(int256 value) internal pure returns (int128) {\\n        require(value >= -2**127 && value < 2**127, \\\"SafeCast: value doesn\\\\'t fit in 128 bits\\\");\\n        return int128(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int64 from int256, reverting on\\n     * overflow (when the input is less than smallest int64 or\\n     * greater than largest int64).\\n     *\\n     * Counterpart to Solidity's `int64` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 64 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt64(int256 value) internal pure returns (int64) {\\n        require(value >= -2**63 && value < 2**63, \\\"SafeCast: value doesn\\\\'t fit in 64 bits\\\");\\n        return int64(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int32 from int256, reverting on\\n     * overflow (when the input is less than smallest int32 or\\n     * greater than largest int32).\\n     *\\n     * Counterpart to Solidity's `int32` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 32 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt32(int256 value) internal pure returns (int32) {\\n        require(value >= -2**31 && value < 2**31, \\\"SafeCast: value doesn\\\\'t fit in 32 bits\\\");\\n        return int32(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int16 from int256, reverting on\\n     * overflow (when the input is less than smallest int16 or\\n     * greater than largest int16).\\n     *\\n     * Counterpart to Solidity's `int16` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 16 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt16(int256 value) internal pure returns (int16) {\\n        require(value >= -2**15 && value < 2**15, \\\"SafeCast: value doesn\\\\'t fit in 16 bits\\\");\\n        return int16(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int8 from int256, reverting on\\n     * overflow (when the input is less than smallest int8 or\\n     * greater than largest int8).\\n     *\\n     * Counterpart to Solidity's `int8` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 8 bits.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt8(int256 value) internal pure returns (int8) {\\n        require(value >= -2**7 && value < 2**7, \\\"SafeCast: value doesn\\\\'t fit in 8 bits\\\");\\n        return int8(value);\\n    }\\n\\n    /**\\n     * @dev Converts an unsigned uint256 into a signed int256.\\n     *\\n     * Requirements:\\n     *\\n     * - input must be less than or equal to maxInt256.\\n     */\\n    function toInt256(uint256 value) internal pure returns (int256) {\\n        require(value < 2**255, \\\"SafeCast: value doesn't fit in an int256\\\");\\n        return int256(value);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/ERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"../../math/SafeMath.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin guidelines: functions revert instead\\n * of returning `false` on failure. This behavior is nonetheless conventional\\n * and does not conflict with the expectations of ERC20 applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20 {\\n    using SafeMath for uint256;\\n\\n    mapping (address => uint256) private _balances;\\n\\n    mapping (address => mapping (address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n    uint8 private _decimals;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}, initializes {decimals} with\\n     * a default value of 18.\\n     *\\n     * To select a different value for {decimals}, use {_setupDecimals}.\\n     *\\n     * All three of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor (string memory name_, string memory symbol_) public {\\n        _name = name_;\\n        _symbol = symbol_;\\n        _decimals = 18;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is\\n     * called.\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual returns (uint8) {\\n        return _decimals;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `recipient` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(_msgSender(), recipient, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        _approve(_msgSender(), spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` and `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``sender``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(sender, recipient, amount);\\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \\\"ERC20: transfer amount exceeds allowance\\\"));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \\\"ERC20: decreased allowance below zero\\\"));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\\n     *\\n     * This is internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` cannot be the zero address.\\n     * - `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     */\\n    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\\n        require(sender != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(recipient != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(sender, recipient, amount);\\n\\n        _balances[sender] = _balances[sender].sub(amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        _balances[recipient] = _balances[recipient].add(amount);\\n        emit Transfer(sender, recipient, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply = _totalSupply.add(amount);\\n        _balances[account] = _balances[account].add(amount);\\n        emit Transfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        _balances[account] = _balances[account].sub(amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        _totalSupply = _totalSupply.sub(amount);\\n        emit Transfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Sets {decimals} to a value other than the default one of 18.\\n     *\\n     * WARNING: This function should only be called from the constructor. Most\\n     * applications that interact with token contracts will not expect\\n     * {decimals} to ever change, and may work incorrectly if it does.\\n     */\\n    function _setupDecimals(uint8 decimals_) internal virtual {\\n        _decimals = decimals_;\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be to transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual { }\\n}\\n\"\r\n    },\r\n    \"@chainlink/contracts/src/v0.6/interfaces/AggregatorV3Interface.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity >=0.6.0;\\n\\ninterface AggregatorV3Interface {\\n\\n  function decimals() external view returns (uint8);\\n  function description() external view returns (string memory);\\n  function version() external view returns (uint256);\\n\\n  // getRoundData and latestRoundData should both raise \\\"No data present\\\"\\n  // if they do not have data to report, instead of returning unset values\\n  // which could be misinterpreted as actual reported values.\\n  function getRoundData(uint80 _roundId)\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n  function latestRoundData()\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IDefiRound.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.11;\\npragma experimental ABIEncoderV2;\\n\\ninterface IDefiRound {\\n    enum STAGES {STAGE_1, STAGE_2, STAGE_3}\\n\\n    struct AccountData {\\n        address token; // address of the allowed token deposited\\n        uint256 initialDeposit; // initial amount deposited of the token\\n        uint256 currentBalance; // current balance of the token that can be used to claim TOKE\\n    }\\n\\n    struct AccountDataDetails {\\n        address token; // address of the allowed token deposited\\n        uint256 initialDeposit; // initial amount deposited of the token\\n        uint256 currentBalance; // current balance of the token that can be used to claim TOKE\\n        uint256 effectiveAmt; //Amount deposited that will be used towards TOKE\\n        uint256 ineffectiveAmt; //Amount deposited that will be either refunded or go to farming\\n        uint256 actualTokeReceived; //Amount of TOKE that will be received\\n    }\\n\\n    struct TokenData {\\n        address token;\\n        uint256 amount;\\n    }\\n\\n    struct SupportedTokenData {\\n        address token;\\n        address oracle;\\n        address genesis;\\n        uint256 maxLimit;\\n    }\\n\\n    struct RateData {\\n        address token;\\n        uint256 numerator;\\n        uint256 denominator;\\n    }\\n\\n    struct OversubscriptionRate {\\n        uint256 overNumerator;\\n        uint256 overDenominator;\\n    }\\n\\n    event Deposited(address depositor, TokenData tokenInfo);\\n    event Withdrawn(address withdrawer, TokenData tokenInfo, bool asETH);\\n    event SupportedTokensAdded(SupportedTokenData[] tokenData);\\n    event RatesPublished(RateData[] ratesData);\\n    event GenesisTransfer(address user, uint256 amountTransferred);\\n    event AssetsFinalized(address claimer, address token, uint256 assetsMoved);\\n    event WhitelistConfigured(WhitelistSettings settings); \\n    event TreasuryTransfer(TokenData[] tokens);\\n\\n    struct TokenValues {\\n        uint256 effectiveTokenValue;\\n        uint256 ineffectiveTokenValue;\\n    }\\n\\n    struct WhitelistSettings {\\n        bool enabled;\\n        bytes32 root;\\n    }\\n\\n    /// @notice Enable or disable the whitelist\\n    /// @param settings The root to use and whether to check the whitelist at all\\n    function configureWhitelist(WhitelistSettings calldata settings) external;\\n\\n    /// @notice returns the current stage the contract is in\\n    /// @return stage the current stage the round contract is in\\n    function currentStage() external returns (STAGES stage);\\n\\n    /// @notice deposits tokens into the round contract\\n    /// @param tokenData an array of token structs\\n    function deposit(TokenData calldata tokenData, bytes32[] memory proof) external payable;\\n\\n    /// @notice total value held in the entire contract amongst all the assets\\n    /// @return value the value of all assets held\\n    function totalValue() external view returns (uint256 value);\\n\\n    /// @notice Current Max Total Value\\n    function getMaxTotalValue() external view returns (uint256 value);\\n\\n    /// @notice returns the address of the treasury, when users claim this is where funds that are <= maxClaimableValue go\\n    /// @return treasuryAddress address of the treasury\\n    function treasury() external returns (address treasuryAddress);\\n\\n    /// @notice the total supply held for a given token\\n    /// @param token the token to get the supply for\\n    /// @return amount the total supply for a given token\\n    function totalSupply(address token) external returns (uint256 amount);\\n\\n    /// @notice withdraws tokens from the round contract. only callable when round 2 starts\\n    /// @param tokenData an array of token structs\\n    /// @param asEth flag to determine if provided WETH, that it should be withdrawn as ETH\\n    function withdraw(TokenData calldata tokenData, bool asEth) external;\\n\\n    // /// @notice adds tokens to support\\n    // /// @param tokensToSupport an array of supported token structs\\n    function addSupportedTokens(SupportedTokenData[] calldata tokensToSupport) external;\\n\\n    // /// @notice returns which tokens can be deposited\\n    // /// @return tokens tokens that are supported for deposit\\n    function getSupportedTokens() external view returns (address[] calldata tokens);\\n\\n    /// @notice the oracle that will be used to denote how much the amounts deposited are worth in USD\\n    /// @param tokens an array of tokens\\n    /// @return oracleAddresses the an array of oracles corresponding to supported tokens\\n    function getTokenOracles(address[] calldata tokens)\\n        external\\n        view\\n        returns (address[] calldata oracleAddresses);\\n\\n    /// @notice publishes rates for the tokens. Rates are always relative to 1 TOKE. Can only be called once within Stage 1\\n    // prices can be published at any time\\n    /// @param ratesData an array of rate info structs\\n    function publishRates(\\n        RateData[] calldata ratesData,\\n        OversubscriptionRate memory overSubRate,\\n        uint256 lastLookDuration\\n    ) external;\\n\\n    /// @notice return the published rates for the tokens\\n    /// @param tokens an array of tokens to get rates for\\n    /// @return rates an array of rates for the provided tokens\\n    function getRates(address[] calldata tokens) external view returns (RateData[] calldata rates);\\n\\n    /// @notice determines the account value in USD amongst all the assets the user is invovled in\\n    /// @param account the account to look up\\n    /// @return value the value of the account in USD\\n    function accountBalance(address account) external view returns (uint256 value);\\n\\n    /// @notice Moves excess assets to private farming or refunds them\\n    /// @dev uses the publishedRates, selected tokens, and amounts to determine what amount of TOKE is claimed\\n    /// @param depositToGenesis applies only if oversubscribedMultiplier < 1;\\n    /// when true oversubscribed amount will deposit to genesis, else oversubscribed amount is sent back to user\\n    function finalizeAssets(bool depositToGenesis) external;\\n\\n    //// @notice returns what gensis pool a supported token is mapped to\\n    /// @param tokens array of addresses of supported tokens\\n    /// @return genesisAddresses array of genesis pools corresponding to supported tokens\\n    function getGenesisPools(address[] calldata tokens)\\n        external\\n        view\\n        returns (address[] memory genesisAddresses);\\n\\n    /// @notice returns a list of AccountData for a provided account\\n    /// @param account the address of the account\\n    /// @return data an array of AccountData denoting what the status is for each of the tokens deposited (if any)\\n    function getAccountData(address account)\\n        external\\n        view\\n        returns (AccountDataDetails[] calldata data);\\n\\n    /// @notice Allows the owner to transfer all swapped assets to the treasury\\n    /// @dev only callable by owner and if last look period is complete\\n    function transferToTreasury() external;\\n\\n    /// @notice Given a balance, calculates how the the amount will be allocated between TOKE and Farming\\n    /// @dev Only allowed at stage 3\\n    /// @param balance balance to divy up\\n    /// @param token token to pull the rates for\\n    function getRateAdjustedAmounts(uint256 balance, address token)\\n        external\\n        view\\n        returns (\\n            uint256,\\n            uint256,\\n            uint256\\n        );\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/cryptography/MerkleProof.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev These functions deal with verification of Merkle trees (hash trees),\\n */\\nlibrary MerkleProof {\\n    /**\\n     * @dev Returns true if a `leaf` can be proved to be a part of a Merkle tree\\n     * defined by `root`. For this, a `proof` must be provided, containing\\n     * sibling hashes on the branch from the leaf to the root of the tree. Each\\n     * pair of leaves and each pair of pre-images are assumed to be sorted.\\n     */\\n    function verify(bytes32[] memory proof, bytes32 root, bytes32 leaf) internal pure returns (bool) {\\n        bytes32 computedHash = leaf;\\n\\n        for (uint256 i = 0; i < proof.length; i++) {\\n            bytes32 proofElement = proof[i];\\n\\n            if (computedHash <= proofElement) {\\n                // Hash(current computed hash + current element of the proof)\\n                computedHash = keccak256(abi.encodePacked(computedHash, proofElement));\\n            } else {\\n                // Hash(current element of the proof + current computed hash)\\n                computedHash = keccak256(abi.encodePacked(proofElement, computedHash));\\n            }\\n        }\\n\\n        // Check if the computed hash (root) is equal to the provided root\\n        return computedHash == root;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/core/CoreEvent.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.6.11;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"../interfaces/ICoreEvent.sol\\\";\\nimport \\\"../interfaces/ILiquidityPool.sol\\\";\\nimport \\\"@openzeppelin/contracts/math/Math.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/EnumerableSet.sol\\\";\\nimport \\\"@openzeppelin/contracts/cryptography/MerkleProof.sol\\\";\\n\\ncontract CoreEvent is Ownable, ICoreEvent {\\n\\n    using SafeMath for uint256;\\n    using SafeERC20 for IERC20;\\n    using Address for address;\\n    using EnumerableSet for EnumerableSet.AddressSet;\\n\\n    DurationInfo public durationInfo;\\n    \\n    address public immutable treasuryAddress;\\n\\n    EnumerableSet.AddressSet private supportedTokenAddresses;\\n\\n    // token address -> SupportedTokenData\\n    mapping(address => SupportedTokenData) public supportedTokens;\\n\\n    // user -> token -> AccountData\\n    mapping(address => mapping(address => AccountData)) public accountData;\\n    mapping(address => RateData) public tokenRates;\\n\\n    WhitelistSettings public whitelistSettings;\\n    \\n    bool public stage1Locked;\\n\\n    modifier hasEnded() {        \\n        require(_hasEnded(), \\\"TOO_EARLY\\\");\\n        _;\\n    }\\n\\n    constructor(\\n        address treasury,\\n        SupportedTokenData[] memory tokensToSupport\\n    ) public {\\n        treasuryAddress = treasury;\\n        addSupportedTokens(tokensToSupport);\\n    }\\n\\n    function configureWhitelist(WhitelistSettings memory settings) external override onlyOwner {\\n        whitelistSettings = settings;\\n        emit WhitelistConfigured(settings);\\n    }\\n\\n    function setDuration(uint256 _blockDuration) external override onlyOwner {\\n        require(durationInfo.startingBlock == 0, \\\"ALREADY_STARTED\\\");\\n\\n        durationInfo.startingBlock = block.number;\\n        durationInfo.blockDuration = _blockDuration;\\n\\n        emit DurationSet(durationInfo);\\n    }\\n\\n    function addSupportedTokens(SupportedTokenData[] memory tokensToSupport) public override onlyOwner {\\n        require (tokensToSupport.length > 0, \\\"NO_TOKENS\\\");\\n\\n        for (uint256 i = 0; i < tokensToSupport.length; i++) {\\n            require(\\n                !supportedTokenAddresses.contains(tokensToSupport[i].token),\\n                \\\"DUPLICATE_TOKEN\\\"\\n            );\\n            require(tokensToSupport[i].token != address(0), \\\"ZERO_ADDRESS\\\");\\n            require(!tokensToSupport[i].systemFinalized, \\\"FINALIZED_MUST_BE_FALSE\\\");\\n\\n            supportedTokenAddresses.add(tokensToSupport[i].token);\\n            supportedTokens[tokensToSupport[i].token] = tokensToSupport[i];\\n        }\\n        emit SupportedTokensAdded(tokensToSupport);\\n    }\\n\\n\\n    function deposit(TokenData[] calldata tokenData, bytes32[] calldata proof) external override {\\n        require(durationInfo.startingBlock > 0, \\\"NOT_STARTED\\\");\\n        require(!_hasEnded(), \\\"RATES_LOCKED\\\");\\n        require(tokenData.length > 0, \\\"NO_TOKENS\\\");\\n        \\n        if (whitelistSettings.enabled) {            \\n            require(verifyDepositor(msg.sender, whitelistSettings.root, proof), \\\"PROOF_INVALID\\\");\\n        }\\n\\n        for (uint256 i = 0; i < tokenData.length; i++) {\\n\\n            uint256 amount = tokenData[i].amount;\\n            require(amount > 0, \\\"0_BALANCE\\\");  \\n            address token = tokenData[i].token;\\n            require(supportedTokenAddresses.contains(token), \\\"NOT_SUPPORTED\\\");\\n            IERC20 erc20Token = IERC20(token);\\n\\n            AccountData storage data = accountData[msg.sender][token];        \\n\\n            require(\\n                data.depositedBalance.add(amount) <= supportedTokens[token].maxUserLimit,\\n                \\\"OVER_LIMIT\\\"\\n            );\\n\\n            data.depositedBalance = data.depositedBalance.add(amount);\\n\\n            data.token = token;\\n\\n            erc20Token.safeTransferFrom(msg.sender, address(this), amount);\\n        }\\n\\n        emit Deposited(msg.sender, tokenData);\\n    }\\n\\n    function withdraw(TokenData[] calldata tokenData) external override {\\n        require(!_hasEnded(), \\\"RATES_LOCKED\\\");\\n        require(tokenData.length > 0, \\\"NO_TOKENS\\\");\\n        \\n        for (uint256 i = 0; i < tokenData.length; i++) {  \\n\\n            uint256 amount = tokenData[i].amount;\\n            require(amount > 0, \\\"ZERO_BALANCE\\\");\\n            address token = tokenData[i].token;\\n            IERC20 erc20Token = IERC20(token);\\n\\n            AccountData storage data = accountData[msg.sender][token];\\n            \\n            require(data.token != address(0), \\\"ZERO_ADDRESS\\\");\\n            require(amount <= data.depositedBalance, \\\"INSUFFICIENT_FUNDS\\\");\\n\\n            data.depositedBalance = data.depositedBalance.sub(amount);\\n\\n            if (data.depositedBalance == 0) {\\n                delete accountData[msg.sender][token];\\n            }\\n            erc20Token.safeTransfer(msg.sender, amount);\\n        }\\n\\n        emit Withdrawn(msg.sender, tokenData);\\n    }\\n\\n    function increaseDuration(uint256 _blockDuration) external override onlyOwner {\\n        require(durationInfo.startingBlock > 0, \\\"NOT_STARTED\\\");\\n        require(_blockDuration > durationInfo.blockDuration, \\\"INCREASE_ONLY\\\");\\n        require(!stage1Locked, \\\"STAGE1_LOCKED\\\");\\n\\n        durationInfo.blockDuration = _blockDuration;\\n\\n        emit DurationIncreased(durationInfo);\\n    }\\n\\n    \\n    function setRates(RateData[] calldata rates) external override onlyOwner hasEnded {\\n        \\n        //Rates are settable multiple times, but only until they are finalized.\\n        //They are set to finalized by either performing the transferToTreasury\\n        //Or, by marking them as no-swap tokens\\n        //Users cannot begin their next set of actions before a token finalized.\\n        \\n        uint256 length = rates.length;\\n        for (uint256 i = 0; i < length; i++) {   \\n            RateData memory data = rates[i];\\n            require(supportedTokenAddresses.contains(data.token), \\\"UNSUPPORTED_ADDRESS\\\");\\n            require(!supportedTokens[data.token].systemFinalized, \\\"ALREADY_FINALIZED\\\");\\n\\n            if (data.tokeNumerator > 0) {\\n                //We are allowing an address(0) pool, it means it was a winning reactor\\n                //but there wasn't enough to enable private farming                \\n                require(data.tokeDenominator > 0, \\\"INVALID_TOKE_DENOMINATOR\\\");            \\n                require(data.overNumerator > 0, \\\"INVALID_OVER_NUMERATOR\\\");\\n                require(data.overDenominator > 0, \\\"INVALID_OVER_DENOMINATOR\\\");            \\n\\n                tokenRates[data.token] = data;\\n            } else {\\n                delete tokenRates[data.token];\\n            }\\n        }\\n\\n        stage1Locked = true;\\n\\n        emit RatesPublished(rates);\\n    }\\n\\n    function transferToTreasury(address[] calldata tokens) external override onlyOwner hasEnded {\\n        \\n        uint256 length = tokens.length;\\n        TokenData[] memory transfers = new TokenData[](length);\\n        for (uint256 i = 0; i < length; i++) {                   \\n            address token = tokens[i];            \\n            require(tokenRates[token].tokeNumerator > 0, \\\"NO_SWAP_TOKEN\\\");\\n            require(!supportedTokens[token].systemFinalized, \\\"ALREADY_FINALIZED\\\");\\n            uint256 balance = IERC20(token).balanceOf(address(this));\\n            (uint256 effective, , ) = getRateAdjustedAmounts(balance, token);            \\n            transfers[i].token = token;\\n            transfers[i].amount = effective;\\n            supportedTokens[token].systemFinalized = true;\\n\\n            IERC20(token).safeTransfer(treasuryAddress, effective);\\n        }\\n\\n        emit TreasuryTransfer(transfers);\\n    }\\n\\n    function setNoSwap(address[] calldata tokens) external override onlyOwner hasEnded {\\n        \\n        uint256 length = tokens.length;\\n\\n        for (uint256 i = 0; i < length; i++) { \\n            address token = tokens[i];\\n            require(supportedTokenAddresses.contains(token), \\\"UNSUPPORTED_ADDRESS\\\");\\n            require(tokenRates[token].tokeNumerator == 0, \\\"ALREADY_SET_TO_SWAP\\\");\\n            require(!supportedTokens[token].systemFinalized, \\\"ALREADY_FINALIZED\\\");\\n\\n            supportedTokens[token].systemFinalized = true;\\n        }\\n\\n        stage1Locked = true;\\n\\n        emit SetNoSwap(tokens);\\n    }\\n\\n    function finalize(TokenFarming[] calldata tokens) external override hasEnded {        \\n        require(tokens.length > 0, \\\"NO_TOKENS\\\");        \\n        \\n        uint256 length = tokens.length;\\n        FinalizedAccountData[] memory results = new FinalizedAccountData[](length);\\n        for(uint256 i = 0; i < length; i++) {\\n            TokenFarming calldata farm = tokens[i];\\n            AccountData storage account = accountData[msg.sender][farm.token];\\n                        \\n            require(!account.finalized, \\\"ALREADY_FINALIZED\\\");\\n            require(farm.token != address(0), \\\"ZERO_ADDRESS\\\");\\n            require(supportedTokens[farm.token].systemFinalized, \\\"NOT_SYSTEM_FINALIZED\\\");    \\n            require(account.depositedBalance > 0, \\\"INSUFFICIENT_FUNDS\\\");            \\n\\n            RateData storage rate = tokenRates[farm.token];\\n            \\n            uint256 amtToTransfer = 0;\\n            if (rate.tokeNumerator > 0) {\\n                //We have set a rate, which means its a winning reactor\\n                //which means only the ineffective amount, the amount\\n                //not spent on TOKE, can leave the contract.\\n                //Leaving to either the farm or back to the user\\n\\n                //In the event there is no farming, an oversubscription rate of 1/1 \\n                //will be provided for the token. That will ensure the ineffective\\n                //amount is 0 and caught by the below require() as only assets with \\n                //an oversubscription can be moved\\n                (, uint256 ineffectiveAmt, ) = getRateAdjustedAmounts(account.depositedBalance, farm.token);     \\n                amtToTransfer = ineffectiveAmt;\\n            } else {\\n                amtToTransfer = account.depositedBalance;                \\n            }   \\n            require(amtToTransfer > 0, \\\"NOTHING_TO_MOVE\\\");      \\n            account.finalized = true;\\n\\n            if (farm.sendToFarming) {\\n                require(rate.pool != address(0), \\\"NO_FARMING\\\");    \\n                uint256 currentAllowance = IERC20(farm.token).allowance(address(this), rate.pool);\\n                if (currentAllowance < amtToTransfer) {                    \\n                    IERC20(farm.token).safeIncreaseAllowance(rate.pool, amtToTransfer.sub(currentAllowance));                        \\n                }                \\n                ILiquidityPool(rate.pool).depositFor(msg.sender, amtToTransfer);                \\n                results[i] = FinalizedAccountData({\\n                    token: farm.token,\\n                    transferredToFarm: amtToTransfer,\\n                    refunded: 0\\n                });\\n            } else {                \\n\\n                IERC20(farm.token).safeTransfer(msg.sender, amtToTransfer);\\n                results[i] = FinalizedAccountData({\\n                    token: farm.token,\\n                    transferredToFarm: 0,\\n                    refunded: amtToTransfer\\n                });\\n            }\\n        }\\n\\n        emit AssetsFinalized(msg.sender, results);\\n    }\\n\\n    function getRateAdjustedAmounts(uint256 balance, address token) public override view returns (uint256 effectiveAmt, uint256 ineffectiveAmt, uint256 actualReceived) {\\n        \\n        RateData memory rateInfo = tokenRates[token];\\n        uint256 effectiveTokenBalance = \\n            balance.mul(rateInfo.overNumerator).div(rateInfo.overDenominator);\\n        uint256 ineffectiveTokenBalance =\\n            balance.mul(rateInfo.overDenominator.sub(rateInfo.overNumerator))\\n            .div(rateInfo.overDenominator);\\n        \\n        uint256 actual =\\n            effectiveTokenBalance.mul(rateInfo.tokeDenominator).div(rateInfo.tokeNumerator);\\n\\n        return (effectiveTokenBalance, ineffectiveTokenBalance, actual);\\n    }\\n\\n    function getRates() external override view returns (RateData[] memory rates) {\\n        uint256 length = supportedTokenAddresses.length();\\n        rates = new RateData[](length);\\n        for (uint256 i = 0; i < length; i++) {   \\n            address token = supportedTokenAddresses.at(i);\\n            rates[i] = tokenRates[token];\\n        }        \\n    }\\n\\n    function getAccountData(address account) external view override returns (AccountData[] memory data) {\\n        uint256 length = supportedTokenAddresses.length();        \\n        data = new AccountData[](length);\\n        for(uint256 i = 0; i < length; i++) {\\n            address token = supportedTokenAddresses.at(i);\\n            data[i] = accountData[account][token];\\n            data[i].token = token;\\n        }\\n    }\\n\\n    function getSupportedTokens() external view override returns (SupportedTokenData[] memory supportedTokensArray) {\\n        uint256 supportedTokensLength = supportedTokenAddresses.length();\\n        supportedTokensArray = new SupportedTokenData[](supportedTokensLength);\\n\\n        for (uint256 i = 0; i < supportedTokensLength; i++) {\\n            supportedTokensArray[i] = supportedTokens[supportedTokenAddresses.at(i)];\\n        }\\n        return supportedTokensArray;\\n    }\\n\\n    function _hasEnded() private view returns (bool) {\\n        return durationInfo.startingBlock > 0 && block.number >= durationInfo.blockDuration + durationInfo.startingBlock;\\n    }\\n\\n    function verifyDepositor(address participant, bytes32 root, bytes32[] memory proof) internal pure returns (bool) {\\n        bytes32 leaf = keccak256((abi.encodePacked((participant))));\\n        return MerkleProof.verify(proof, root, leaf);\\n    }    \\n}\"\r\n    },\r\n    \"contracts/interfaces/ICoreEvent.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.6.11;\\npragma experimental ABIEncoderV2;\\n\\ninterface ICoreEvent {\\n\\n    struct SupportedTokenData {\\n        address token;        \\n        uint256 maxUserLimit;        \\n        bool systemFinalized; // Whether or not the system is done setting rates, doing transfers, for this token\\n    }\\n\\n    struct DurationInfo {\\n        uint256 startingBlock;        \\n        uint256 blockDuration;  // Block duration of the deposit/withdraw stage\\n    }\\n\\n    struct RateData {\\n        address token;\\n        uint256 tokeNumerator;\\n        uint256 tokeDenominator;\\n        uint256 overNumerator;\\n        uint256 overDenominator;\\n        address pool; \\n    }\\n\\n    struct TokenData {\\n        address token;\\n        uint256 amount;\\n    }\\n\\n    struct AccountData {\\n        address token; // Address of the allowed token deposited        \\n        uint256 depositedBalance;\\n        bool finalized; // Has the user either taken their refund or sent to farming. Will not be set on swapped but undersubscribed tokens.\\n    }\\n\\n    struct FinalizedAccountData {\\n        address token;\\n        uint256 transferredToFarm;\\n        uint256 refunded;\\n    }\\n\\n     struct TokenFarming {\\n        address token; // address of the allowed token deposited        \\n        bool sendToFarming; // Refund is default\\n    }\\n\\n    struct WhitelistSettings {\\n        bool enabled;\\n        bytes32 root;\\n    }\\n\\n    event SupportedTokensAdded(SupportedTokenData[] tokenData);\\n    event TreasurySet(address treasury);    \\n    event DurationSet(DurationInfo duration);\\n    event DurationIncreased(DurationInfo duration);\\n    event Deposited(address depositor, TokenData[] tokenInfo);\\n    event Withdrawn(address withdrawer, TokenData[] tokenInfo);    \\n    event RatesPublished(RateData[] ratesData);    \\n    event AssetsFinalized(address user, FinalizedAccountData[] data);\\n    event TreasuryTransfer(TokenData[] tokens);\\n    event WhitelistConfigured(WhitelistSettings settings); \\n    event SetNoSwap(address[] tokens);\\n\\n    //==========================================\\n    // Initial setup operations\\n    //==========================================    \\n\\n    /// @notice Enable or disable the whitelist\\n    /// @param settings The root to use and whether to check the whitelist at all\\n    function configureWhitelist(WhitelistSettings memory settings) external;\\n\\n    /// @notice defines the length in blocks the round will run for\\n    /// @notice round is started via this call and it is only callable one time\\n    /// @param blockDuration Duration in blocks the deposit/withdraw portion will run for\\n    function setDuration(uint256 blockDuration) external;\\n\\n    /// @notice adds tokens to support\\n    /// @param tokensToSupport an array of supported token structs\\n    function addSupportedTokens(SupportedTokenData[] memory tokensToSupport) external;\\n\\n    //==========================================\\n    // Stage 1 timeframe operations\\n    //==========================================\\n\\n    /// @notice deposits tokens into the round contract\\n    /// @param tokenData an array of token structs\\n    /// @param proof Merkle proof for the user. Only required if whitelistSettings.enabled\\n    function deposit(TokenData[] calldata tokenData, bytes32[] calldata proof) external;\\n\\n    /// @notice withdraws tokens from the round contract\\n    /// @param tokenData an array of token structs\\n    function withdraw(TokenData[] calldata tokenData) external;\\n\\n    /// @notice extends the deposit/withdraw stage\\n    /// @notice Only extendable if no tokens have been finalized and no rates set\\n    /// @param blockDuration Duration in blocks the deposit/withdraw portion will run for. Must be greater than original\\n    function increaseDuration(uint256 blockDuration) external;\\n\\n    //==========================================\\n    // Stage 1 -> 2 transition operations\\n    //==========================================\\n\\n    /// @notice once the expected duration has passed, publish the Toke and over subscription rates\\n    /// @notice tokens which do not have a published rate will have their users forced to withdraw all funds    \\n    /// @dev pass a tokeNumerator of 0 to delete a set rate\\n    /// @dev Cannot be called for a token once transferToTreasury/setNoSwap has been called for that token\\n    function setRates(RateData[] calldata rates) external;\\n\\n    /// @notice Allows the owner to transfer the effective balance of a token based on the set rate to the treasury\\n    /// @dev only callable by owner and if rates have been set\\n    /// @dev is only callable one time for a token\\n    function transferToTreasury(address[] calldata tokens) external;\\n\\n    /// @notice Marks a token as finalized but not swapping\\n    /// @dev complement to transferToTreasury which is for tokens that will be swapped, this one for ones that won't\\n    function setNoSwap(address[] calldata tokens) external;\\n\\n    //==========================================    \\n    // Stage 2 operations\\n    //==========================================\\n\\n    /// @notice Once rates have been published, and the token finalized via transferToTreasury/setNoSwap, either refunds or sends to private farming\\n    /// @param tokens an array of tokens and whether to send them to private farming. False on farming will send back to user.\\n    function finalize(TokenFarming[] calldata tokens) external;\\n\\n    //==========================================\\n    // View operations\\n    //==========================================\\n\\n    /// @notice Breaks down the balance according to the published rates\\n    /// @dev only callable after rates have been set\\n    function getRateAdjustedAmounts(uint256 balance, address token) external view returns (uint256 effectiveAmt, uint256 ineffectiveAmt, uint256 actualReceived);\\n\\n    /// @notice return the published rates for the tokens    \\n    /// @return rates an array of rates for the provided tokens\\n    function getRates() external view returns (RateData[] memory rates);\\n\\n    /// @notice returns a list of AccountData for a provided account\\n    /// @param account the address of the account\\n    /// @return data an array of AccountData denoting what the status is for each of the tokens deposited (if any)\\n    function getAccountData(address account) external view returns (AccountData[] calldata data);\\n\\n    /// @notice get all tokens currently supported by the contract\\n    /// @return supportedTokensArray an array of supported token structs\\n    function getSupportedTokens() external view returns (SupportedTokenData[] memory supportedTokensArray);\\n\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/AccessControl.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"../utils/EnumerableSet.sol\\\";\\nimport \\\"../utils/Address.sol\\\";\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it.\\n */\\nabstract contract AccessControl is Context {\\n    using EnumerableSet for EnumerableSet.AddressSet;\\n    using Address for address;\\n\\n    struct RoleData {\\n        EnumerableSet.AddressSet members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping (bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view returns (bool) {\\n        return _roles[role].members.contains(account);\\n    }\\n\\n    /**\\n     * @dev Returns the number of accounts that have `role`. Can be used\\n     * together with {getRoleMember} to enumerate all bearers of a role.\\n     */\\n    function getRoleMemberCount(bytes32 role) public view returns (uint256) {\\n        return _roles[role].members.length();\\n    }\\n\\n    /**\\n     * @dev Returns one of the accounts that have `role`. `index` must be a\\n     * value between 0 and {getRoleMemberCount}, non-inclusive.\\n     *\\n     * Role bearers are not sorted in any particular way, and their ordering may\\n     * change at any point.\\n     *\\n     * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\\n     * you perform all queries on the same block. See the following\\n     * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\\n     * for more information.\\n     */\\n    function getRoleMember(bytes32 role, uint256 index) public view returns (address) {\\n        return _roles[role].members.at(index);\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual {\\n        require(hasRole(_roles[role].adminRole, _msgSender()), \\\"AccessControl: sender must be an admin to grant\\\");\\n\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual {\\n        require(hasRole(_roles[role].adminRole, _msgSender()), \\\"AccessControl: sender must be an admin to revoke\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        emit RoleAdminChanged(role, _roles[role].adminRole, adminRole);\\n        _roles[role].adminRole = adminRole;\\n    }\\n\\n    function _grantRole(bytes32 role, address account) private {\\n        if (_roles[role].members.add(account)) {\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    function _revokeRole(bytes32 role, address account) private {\\n        if (_roles[role].members.remove(account)) {\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Pausable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"./Context.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract Pausable is Context {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    constructor () internal {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/ERC20Pausable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"./ERC20.sol\\\";\\nimport \\\"../../utils/Pausable.sol\\\";\\n\\n/**\\n * @dev ERC20 token with pausable token transfers, minting and burning.\\n *\\n * Useful for scenarios such as preventing trades until the end of an evaluation\\n * period, or having an emergency switch for freezing all token transfers in the\\n * event of a large bug.\\n */\\nabstract contract ERC20Pausable is ERC20, Pausable {\\n    /**\\n     * @dev See {ERC20-_beforeTokenTransfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - the contract must not be paused.\\n     */\\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual override {\\n        super._beforeTokenTransfer(from, to, amount);\\n\\n        require(!paused(), \\\"ERC20Pausable: token transfer while paused\\\");\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/token/Toke.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.11;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20Pausable.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\ncontract Toke is ERC20Pausable, Ownable  {\\n    uint256 private constant SUPPLY = 100_000_000e18;\\n    constructor() public ERC20(\\\"Tokemak\\\", \\\"TOKE\\\")  {        \\n        _mint(msg.sender, SUPPLY); // 100M\\n    }\\n\\n    function pause() external onlyOwner {        \\n        _pause();\\n    }\\n\\n    function unpause() external onlyOwner {        \\n        _unpause();\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/rewards/Rewards.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.11;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/cryptography/ECDSA.sol\\\";\\nimport \\\"@openzeppelin/contracts/math/Math.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\\\";\\n\\ncontract Rewards is Ownable {\\n    using SafeMath for uint256;\\n    using ECDSA for bytes32;\\n    using SafeERC20 for IERC20;\\n\\n    mapping(address => uint256) public claimedAmounts;\\n    \\n    event SignerSet(address newSigner);\\n    event Claimed(uint256 cycle, address recipient, uint256 amount);\\n\\n    struct EIP712Domain {\\n        string name;\\n        string version;\\n        uint256 chainId;\\n        address verifyingContract;\\n    }\\n\\n    struct Recipient {\\n        uint256 chainId;\\n        uint256 cycle;\\n        address wallet;\\n        uint256 amount;\\n    }\\n\\n    bytes32 private constant EIP712_DOMAIN_TYPEHASH =\\n        keccak256(\\n            \\\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\\\"\\n        );\\n\\n    bytes32 private constant RECIPIENT_TYPEHASH =\\n        keccak256(\\\"Recipient(uint256 chainId,uint256 cycle,address wallet,uint256 amount)\\\");\\n\\n    bytes32 private immutable domainSeparator;\\n\\n    IERC20 public immutable tokeToken;\\n    address public rewardsSigner;\\n\\n    constructor(IERC20 token, address signerAddress) public {\\n        require(address(token) != address(0), \\\"Invalid TOKE Address\\\");\\n        require(signerAddress != address(0), \\\"Invalid Signer Address\\\");\\n        tokeToken = token;\\n        rewardsSigner = signerAddress;\\n\\n        domainSeparator = _hashDomain(\\n            EIP712Domain({\\n                name: \\\"TOKE Distribution\\\",\\n                version: \\\"1\\\",\\n                chainId: _getChainID(),\\n                verifyingContract: address(this)\\n            })\\n        );\\n    }\\n\\n    function _hashDomain(EIP712Domain memory eip712Domain) private pure returns (bytes32) {\\n        return\\n            keccak256(\\n                abi.encode(\\n                    EIP712_DOMAIN_TYPEHASH,\\n                    keccak256(bytes(eip712Domain.name)),\\n                    keccak256(bytes(eip712Domain.version)),\\n                    eip712Domain.chainId,\\n                    eip712Domain.verifyingContract\\n                )\\n            );\\n    }\\n\\n    function _hashRecipient(Recipient memory recipient) private pure returns (bytes32) {\\n        return\\n            keccak256(\\n                abi.encode(\\n                    RECIPIENT_TYPEHASH,\\n                    recipient.chainId,\\n                    recipient.cycle,\\n                    recipient.wallet,\\n                    recipient.amount\\n                )\\n            );\\n    }\\n\\n    function _hash(Recipient memory recipient) private view returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19\\\\x01\\\", domainSeparator, _hashRecipient(recipient)));\\n    }\\n\\n    function _getChainID() private pure returns (uint256) {\\n        uint256 id;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            id := chainid()\\n        }\\n        return id;\\n    }\\n\\n    function setSigner(address newSigner) external onlyOwner {\\n        require(newSigner != address(0), \\\"Invalid Signer Address\\\");\\n        rewardsSigner = newSigner;\\n    }\\n\\n    function getClaimableAmount(\\n        Recipient calldata recipient\\n    ) external view returns (uint256) {\\n        return recipient.amount.sub(claimedAmounts[recipient.wallet]);\\n    }\\n\\n    function claim(\\n        Recipient calldata recipient,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s // bytes calldata signature\\n    ) external {        \\n        address signatureSigner = _hash(recipient).recover(v, r, s);\\n        require(signatureSigner == rewardsSigner, \\\"Invalid Signature\\\");\\n        require(recipient.chainId == _getChainID(), \\\"Invalid chainId\\\");        \\n        require(recipient.wallet == msg.sender, \\\"Sender wallet Mismatch\\\");\\n\\n        uint256 claimableAmount = recipient.amount.sub(claimedAmounts[recipient.wallet]);\\n\\n        require(claimableAmount > 0, \\\"Invalid claimable amount\\\");\\n        require(tokeToken.balanceOf(address(this)) >= claimableAmount, \\\"Insufficient Funds\\\");\\n\\n        claimedAmounts[recipient.wallet] = claimedAmounts[recipient.wallet].add(claimableAmount);\\n\\n        tokeToken.safeTransfer(recipient.wallet, claimableAmount);\\n\\n        emit Claimed(recipient.cycle, recipient.wallet, claimableAmount);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/cryptography/ECDSA.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\\n *\\n * These functions can be used to verify that a message was signed by the holder\\n * of the private keys of a given address.\\n */\\nlibrary ECDSA {\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature`. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     */\\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\\n        // Check the signature length\\n        if (signature.length != 65) {\\n            revert(\\\"ECDSA: invalid signature length\\\");\\n        }\\n\\n        // Divide the signature in r, s and v variables\\n        bytes32 r;\\n        bytes32 s;\\n        uint8 v;\\n\\n        // ecrecover takes the signature parameters, and the only way to get them\\n        // currently is to use assembly.\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            r := mload(add(signature, 0x20))\\n            s := mload(add(signature, 0x40))\\n            v := byte(0, mload(add(signature, 0x60)))\\n        }\\n\\n        return recover(hash, v, r, s);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover-bytes32-bytes-} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     */\\n    function recover(bytes32 hash, uint8 v, bytes32 r, bytes32 s) internal pure returns (address) {\\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\\n        // the valid range for s in (281): 0 < s < secp256k1n ÷ 2 + 1, and for v in (282): v ∈ {27, 28}. Most\\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\\n        //\\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\\n        // these malleable signatures as well.\\n        require(uint256(s) <= 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0, \\\"ECDSA: invalid signature 's' value\\\");\\n        require(v == 27 || v == 28, \\\"ECDSA: invalid signature 'v' value\\\");\\n\\n        // If the signature is valid (and not malleable), return the signer address\\n        address signer = ecrecover(hash, v, r, s);\\n        require(signer != address(0), \\\"ECDSA: invalid signature\\\");\\n\\n        return signer;\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\\n     * replicates the behavior of the\\n     * https://github.com/ethereum/wiki/wiki/JSON-RPC#eth_sign[`eth_sign`]\\n     * JSON-RPC method.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\\n        // 32 is the length in bytes of hash,\\n        // enforced by the type signature above\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n32\\\", hash));\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/redeem/Redeem.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.11;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20Burnable.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\\\";\\nimport \\\"../interfaces/IStaking.sol\\\";\\n\\n/// @title Tokemak Redeem Contract\\n/// @notice Converts PreToke to Toke\\n/// @dev Can only be used when fromToken has been unpaused\\ncontract Redeem is Ownable {\\n    using SafeERC20 for IERC20;\\n\\n    address public immutable fromToken;\\n    address public immutable toToken;\\n    address public immutable stakingContract;\\n    uint256 public immutable expirationBlock;    \\n    uint256 public immutable stakingSchedule;\\n\\n    /// @notice Redeem Constructor\\n    /// @dev approves max uint256 on creation for the toToken against the staking contract\\n    /// @param _fromToken the token users will convert from\\n    /// @param _toToken the token users will convert to\\n    /// @param _stakingContract the staking contract\\n    /// @param _expirationBlock a block number at which the owner can withdraw the full balance of toToken\\n    constructor(\\n        address _fromToken,\\n        address _toToken,\\n        address _stakingContract,\\n        uint256 _expirationBlock,\\n        uint256 _stakingSchedule\\n    ) public {\\n        require(_fromToken != address(0), \\\"INVALID_FROMTOKEN\\\");\\n        require(_toToken != address(0), \\\"INVALID_TOTOKEN\\\");\\n        require(_stakingContract != address(0), \\\"INVALID_STAKING\\\");\\n\\n        fromToken = _fromToken;\\n        toToken = _toToken;\\n        stakingContract = _stakingContract;\\n        expirationBlock = _expirationBlock;\\n        stakingSchedule = _stakingSchedule;\\n\\n        //Approve staking contract for toToken to allow for staking within convert()\\n        IERC20(_toToken).safeApprove(_stakingContract, type(uint256).max);\\n    }\\n\\n    /// @notice Allows a holder of fromToken to convert into toToken and simultaneously stake within the stakingContract\\n    /// @dev a user must approve this contract in order for it to burnFrom()\\n    function convert() external {\\n        uint256 fromBal = IERC20(fromToken).balanceOf(msg.sender);\\n        require(fromBal > 0, \\\"INSUFFICIENT_BALANCE\\\");\\n        ERC20Burnable(fromToken).burnFrom(msg.sender, fromBal);\\n        IStaking(stakingContract).depositFor(msg.sender, fromBal, stakingSchedule);\\n    }\\n\\n    /// @notice Allows the claim on the toToken balance after the expiration has passed\\n    /// @dev callable only by owner\\n    function recoupRemaining() external onlyOwner {\\n        require(block.number >= expirationBlock, \\\"EXPIRATION_NOT_PASSED\\\");\\n        uint256 bal = IERC20(toToken).balanceOf(address(this));\\n        IERC20(toToken).safeTransfer(msg.sender, bal);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/ERC20Burnable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"./ERC20.sol\\\";\\n\\n/**\\n * @dev Extension of {ERC20} that allows token holders to destroy both their own\\n * tokens and those that they have an allowance for, in a way that can be\\n * recognized off-chain (via event analysis).\\n */\\nabstract contract ERC20Burnable is Context, ERC20 {\\n    using SafeMath for uint256;\\n\\n    /**\\n     * @dev Destroys `amount` tokens from the caller.\\n     *\\n     * See {ERC20-_burn}.\\n     */\\n    function burn(uint256 amount) public virtual {\\n        _burn(_msgSender(), amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, deducting from the caller's\\n     * allowance.\\n     *\\n     * See {ERC20-_burn} and {ERC20-allowance}.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have allowance for ``accounts``'s tokens of at least\\n     * `amount`.\\n     */\\n    function burnFrom(address account, uint256 amount) public virtual {\\n        uint256 decreasedAllowance = allowance(account, _msgSender()).sub(amount, \\\"ERC20: burn amount exceeds allowance\\\");\\n\\n        _approve(account, _msgSender(), decreasedAllowance);\\n        _burn(account, amount);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/presets/ERC20PresetMinterPauser.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"../access/AccessControl.sol\\\";\\nimport \\\"../utils/Context.sol\\\";\\nimport \\\"../token/ERC20/ERC20.sol\\\";\\nimport \\\"../token/ERC20/ERC20Burnable.sol\\\";\\nimport \\\"../token/ERC20/ERC20Pausable.sol\\\";\\n\\n/**\\n * @dev {ERC20} token, including:\\n *\\n *  - ability for holders to burn (destroy) their tokens\\n *  - a minter role that allows for token minting (creation)\\n *  - a pauser role that allows to stop all token transfers\\n *\\n * This contract uses {AccessControl} to lock permissioned functions using the\\n * different roles - head to its documentation for details.\\n *\\n * The account that deploys the contract will be granted the minter and pauser\\n * roles, as well as the default admin role, which will let it grant both minter\\n * and pauser roles to other accounts.\\n */\\ncontract ERC20PresetMinterPauser is Context, AccessControl, ERC20Burnable, ERC20Pausable {\\n    bytes32 public constant MINTER_ROLE = keccak256(\\\"MINTER_ROLE\\\");\\n    bytes32 public constant PAUSER_ROLE = keccak256(\\\"PAUSER_ROLE\\\");\\n\\n    /**\\n     * @dev Grants `DEFAULT_ADMIN_ROLE`, `MINTER_ROLE` and `PAUSER_ROLE` to the\\n     * account that deploys the contract.\\n     *\\n     * See {ERC20-constructor}.\\n     */\\n    constructor(string memory name, string memory symbol) public ERC20(name, symbol) {\\n        _setupRole(DEFAULT_ADMIN_ROLE, _msgSender());\\n\\n        _setupRole(MINTER_ROLE, _msgSender());\\n        _setupRole(PAUSER_ROLE, _msgSender());\\n    }\\n\\n    /**\\n     * @dev Creates `amount` new tokens for `to`.\\n     *\\n     * See {ERC20-_mint}.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have the `MINTER_ROLE`.\\n     */\\n    function mint(address to, uint256 amount) public virtual {\\n        require(hasRole(MINTER_ROLE, _msgSender()), \\\"ERC20PresetMinterPauser: must have minter role to mint\\\");\\n        _mint(to, amount);\\n    }\\n\\n    /**\\n     * @dev Pauses all token transfers.\\n     *\\n     * See {ERC20Pausable} and {Pausable-_pause}.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have the `PAUSER_ROLE`.\\n     */\\n    function pause() public virtual {\\n        require(hasRole(PAUSER_ROLE, _msgSender()), \\\"ERC20PresetMinterPauser: must have pauser role to pause\\\");\\n        _pause();\\n    }\\n\\n    /**\\n     * @dev Unpauses all token transfers.\\n     *\\n     * See {ERC20Pausable} and {Pausable-_unpause}.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have the `PAUSER_ROLE`.\\n     */\\n    function unpause() public virtual {\\n        require(hasRole(PAUSER_ROLE, _msgSender()), \\\"ERC20PresetMinterPauser: must have pauser role to unpause\\\");\\n        _unpause();\\n    }\\n\\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual override(ERC20, ERC20Pausable) {\\n        super._beforeTokenTransfer(from, to, amount);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/token/PreToke.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.11;\\nimport \\\"@openzeppelin/contracts/presets/ERC20PresetMinterPauser.sol\\\";\\n\\n// solhint-disable-next-line\\ncontract PreToke is ERC20PresetMinterPauser(\\\"PreToke\\\", \\\"PTOKE\\\") {\\n\\n}\\n\"\r\n    },\r\n    \"contracts/Imports.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.11;\\n\\n// We import the contract so truffle compiles it, and we have the ABI\\n// available when working from truffle console.\\nimport \\\"@gnosis.pm/mock-contract/contracts/MockContract.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/presets/ERC20PresetMinterPauser.sol\\\";\\nimport \\\"@uniswap/v2-core/contracts/interfaces/IUniswapV2Factory.sol\\\";\\nimport \\\"@uniswap/v2-core/contracts/interfaces/IUniswapV2ERC20.sol\\\";\\nimport \\\"@uniswap/v2-periphery/contracts/interfaces/IUniswapV2Router02.sol\\\";\\nimport \\\"@sushiswap/core/contracts/uniswapv2/interfaces/IUniswapV2Router02.sol\\\" as ISushiswapV2Router;\\nimport \\\"@sushiswap/core/contracts/uniswapv2/interfaces/IUniswapV2Factory.sol\\\" as ISushiswapV2Factory;\\nimport \\\"@sushiswap/core/contracts/uniswapv2/interfaces/IUniswapV2ERC20.sol\\\" as ISushiswapV2ERC20;\\n\"\r\n    },\r\n    \"@gnosis.pm/mock-contract/contracts/MockContract.sol\": {\r\n      \"content\": \"pragma solidity ^0.6.0;\\n\\ninterface MockInterface {\\n\\t/**\\n\\t * @dev After calling this method, the mock will return `response` when it is called\\n\\t * with any calldata that is not mocked more specifically below\\n\\t * (e.g. using givenMethodReturn).\\n\\t * @param response ABI encoded response that will be returned if method is invoked\\n\\t */\\n\\tfunction givenAnyReturn(bytes calldata response) external;\\n\\tfunction givenAnyReturnBool(bool response) external;\\n\\tfunction givenAnyReturnUint(uint response) external;\\n\\tfunction givenAnyReturnAddress(address response) external;\\n\\n\\tfunction givenAnyRevert() external;\\n\\tfunction givenAnyRevertWithMessage(string calldata message) external;\\n\\tfunction givenAnyRunOutOfGas() external;\\n\\n\\t/**\\n\\t * @dev After calling this method, the mock will return `response` when the given\\n\\t * methodId is called regardless of arguments. If the methodId and arguments\\n\\t * are mocked more specifically (using `givenMethodAndArguments`) the latter\\n\\t * will take precedence.\\n\\t * @param method ABI encoded methodId. It is valid to pass full calldata (including arguments). The mock will extract the methodId from it\\n\\t * @param response ABI encoded response that will be returned if method is invoked\\n\\t */\\n\\tfunction givenMethodReturn(bytes calldata method, bytes calldata response) external;\\n\\tfunction givenMethodReturnBool(bytes calldata method, bool response) external;\\n\\tfunction givenMethodReturnUint(bytes calldata method, uint response) external;\\n\\tfunction givenMethodReturnAddress(bytes calldata method, address response) external;\\n\\n\\tfunction givenMethodRevert(bytes calldata method) external;\\n\\tfunction givenMethodRevertWithMessage(bytes calldata method, string calldata message) external;\\n\\tfunction givenMethodRunOutOfGas(bytes calldata method) external;\\n\\n\\t/**\\n\\t * @dev After calling this method, the mock will return `response` when the given\\n\\t * methodId is called with matching arguments. These exact calldataMocks will take\\n\\t * precedence over all other calldataMocks.\\n\\t * @param call ABI encoded calldata (methodId and arguments)\\n\\t * @param response ABI encoded response that will be returned if contract is invoked with calldata\\n\\t */\\n\\tfunction givenCalldataReturn(bytes calldata call, bytes calldata response) external;\\n\\tfunction givenCalldataReturnBool(bytes calldata call, bool response) external;\\n\\tfunction givenCalldataReturnUint(bytes calldata call, uint response) external;\\n\\tfunction givenCalldataReturnAddress(bytes calldata call, address response) external;\\n\\n\\tfunction givenCalldataRevert(bytes calldata call) external;\\n\\tfunction givenCalldataRevertWithMessage(bytes calldata call, string calldata message) external;\\n\\tfunction givenCalldataRunOutOfGas(bytes calldata call) external;\\n\\n\\t/**\\n\\t * @dev Returns the number of times anything has been called on this mock since last reset\\n\\t */\\n\\tfunction invocationCount() external returns (uint);\\n\\n\\t/**\\n\\t * @dev Returns the number of times the given method has been called on this mock since last reset\\n\\t * @param method ABI encoded methodId. It is valid to pass full calldata (including arguments). The mock will extract the methodId from it\\n\\t */\\n\\tfunction invocationCountForMethod(bytes calldata method) external returns (uint);\\n\\n\\t/**\\n\\t * @dev Returns the number of times this mock has been called with the exact calldata since last reset.\\n\\t * @param call ABI encoded calldata (methodId and arguments)\\n\\t */\\n\\tfunction invocationCountForCalldata(bytes calldata call) external returns (uint);\\n\\n\\t/**\\n\\t * @dev Resets all mocked methods and invocation counts.\\n\\t */\\n\\t function reset() external;\\n}\\n\\n/**\\n * Implementation of the MockInterface.\\n */\\ncontract MockContract is MockInterface {\\n\\tenum MockType { Return, Revert, OutOfGas }\\n\\t\\n\\tbytes32 public constant MOCKS_LIST_START = hex\\\"01\\\";\\n\\tbytes public constant MOCKS_LIST_END = \\\"0xff\\\";\\n\\tbytes32 public constant MOCKS_LIST_END_HASH = keccak256(MOCKS_LIST_END);\\n\\tbytes4 public constant SENTINEL_ANY_MOCKS = hex\\\"01\\\";\\n\\tbytes public constant DEFAULT_FALLBACK_VALUE = abi.encode(false);\\n\\n\\t// A linked list allows easy iteration and inclusion checks\\n\\tmapping(bytes32 => bytes) calldataMocks;\\n\\tmapping(bytes => MockType) calldataMockTypes;\\n\\tmapping(bytes => bytes) calldataExpectations;\\n\\tmapping(bytes => string) calldataRevertMessage;\\n\\tmapping(bytes32 => uint) calldataInvocations;\\n\\n\\tmapping(bytes4 => bytes4) methodIdMocks;\\n\\tmapping(bytes4 => MockType) methodIdMockTypes;\\n\\tmapping(bytes4 => bytes) methodIdExpectations;\\n\\tmapping(bytes4 => string) methodIdRevertMessages;\\n\\tmapping(bytes32 => uint) methodIdInvocations;\\n\\n\\tMockType fallbackMockType;\\n\\tbytes fallbackExpectation = DEFAULT_FALLBACK_VALUE;\\n\\tstring fallbackRevertMessage;\\n\\tuint invocations;\\n\\tuint resetCount;\\n\\n\\tconstructor() public {\\n\\t\\tcalldataMocks[MOCKS_LIST_START] = MOCKS_LIST_END;\\n\\t\\tmethodIdMocks[SENTINEL_ANY_MOCKS] = SENTINEL_ANY_MOCKS;\\n\\t}\\n\\n\\tfunction trackCalldataMock(bytes memory call) private {\\n\\t\\tbytes32 callHash = keccak256(call);\\n\\t\\tif (calldataMocks[callHash].length == 0) {\\n\\t\\t\\tcalldataMocks[callHash] = calldataMocks[MOCKS_LIST_START];\\n\\t\\t\\tcalldataMocks[MOCKS_LIST_START] = call;\\n\\t\\t}\\n\\t}\\n\\n\\tfunction trackMethodIdMock(bytes4 methodId) private {\\n\\t\\tif (methodIdMocks[methodId] == 0x0) {\\n\\t\\t\\tmethodIdMocks[methodId] = methodIdMocks[SENTINEL_ANY_MOCKS];\\n\\t\\t\\tmethodIdMocks[SENTINEL_ANY_MOCKS] = methodId;\\n\\t\\t}\\n\\t}\\n\\n\\tfunction _givenAnyReturn(bytes memory response) internal {\\n\\t\\tfallbackMockType = MockType.Return;\\n\\t\\tfallbackExpectation = response;\\n\\t}\\n\\n\\tfunction givenAnyReturn(bytes calldata response) override external {\\n\\t\\t_givenAnyReturn(response);\\n\\t}\\n\\n\\tfunction givenAnyReturnBool(bool response) override external {\\n\\t\\tuint flag = response ? 1 : 0;\\n\\t\\t_givenAnyReturn(uintToBytes(flag));\\n\\t}\\n\\n\\tfunction givenAnyReturnUint(uint response) override external {\\n\\t\\t_givenAnyReturn(uintToBytes(response));\\t\\n\\t}\\n\\n\\tfunction givenAnyReturnAddress(address response) override external {\\n\\t\\t_givenAnyReturn(uintToBytes(uint(response)));\\n\\t}\\n\\n\\tfunction givenAnyRevert() override external {\\n\\t\\tfallbackMockType = MockType.Revert;\\n\\t\\tfallbackRevertMessage = \\\"\\\";\\n\\t}\\n\\n\\tfunction givenAnyRevertWithMessage(string calldata message) override external {\\n\\t\\tfallbackMockType = MockType.Revert;\\n\\t\\tfallbackRevertMessage = message;\\n\\t}\\n\\n\\tfunction givenAnyRunOutOfGas() override external {\\n\\t\\tfallbackMockType = MockType.OutOfGas;\\n\\t}\\n\\n\\tfunction _givenCalldataReturn(bytes memory call, bytes memory response) private  {\\n\\t\\tcalldataMockTypes[call] = MockType.Return;\\n\\t\\tcalldataExpectations[call] = response;\\n\\t\\ttrackCalldataMock(call);\\n\\t}\\n\\n\\tfunction givenCalldataReturn(bytes calldata call, bytes calldata response) override external  {\\n\\t\\t_givenCalldataReturn(call, response);\\n\\t}\\n\\n\\tfunction givenCalldataReturnBool(bytes calldata call, bool response) override external {\\n\\t\\tuint flag = response ? 1 : 0;\\n\\t\\t_givenCalldataReturn(call, uintToBytes(flag));\\n\\t}\\n\\n\\tfunction givenCalldataReturnUint(bytes calldata call, uint response) override external {\\n\\t\\t_givenCalldataReturn(call, uintToBytes(response));\\n\\t}\\n\\n\\tfunction givenCalldataReturnAddress(bytes calldata call, address response) override external {\\n\\t\\t_givenCalldataReturn(call, uintToBytes(uint(response)));\\n\\t}\\n\\n\\tfunction _givenMethodReturn(bytes memory call, bytes memory response) private {\\n\\t\\tbytes4 method = bytesToBytes4(call);\\n\\t\\tmethodIdMockTypes[method] = MockType.Return;\\n\\t\\tmethodIdExpectations[method] = response;\\n\\t\\ttrackMethodIdMock(method);\\t\\t\\n\\t}\\n\\n\\tfunction givenMethodReturn(bytes calldata call, bytes calldata response) override external {\\n\\t\\t_givenMethodReturn(call, response);\\n\\t}\\n\\n\\tfunction givenMethodReturnBool(bytes calldata call, bool response) override external {\\n\\t\\tuint flag = response ? 1 : 0;\\n\\t\\t_givenMethodReturn(call, uintToBytes(flag));\\n\\t}\\n\\n\\tfunction givenMethodReturnUint(bytes calldata call, uint response) override external {\\n\\t\\t_givenMethodReturn(call, uintToBytes(response));\\n\\t}\\n\\n\\tfunction givenMethodReturnAddress(bytes calldata call, address response) override external {\\n\\t\\t_givenMethodReturn(call, uintToBytes(uint(response)));\\n\\t}\\n\\n\\tfunction givenCalldataRevert(bytes calldata call) override external {\\n\\t\\tcalldataMockTypes[call] = MockType.Revert;\\n\\t\\tcalldataRevertMessage[call] = \\\"\\\";\\n\\t\\ttrackCalldataMock(call);\\n\\t}\\n\\n\\tfunction givenMethodRevert(bytes calldata call) override external {\\n\\t\\tbytes4 method = bytesToBytes4(call);\\n\\t\\tmethodIdMockTypes[method] = MockType.Revert;\\n\\t\\ttrackMethodIdMock(method);\\t\\t\\n\\t}\\n\\n\\tfunction givenCalldataRevertWithMessage(bytes calldata call, string calldata message) override external {\\n\\t\\tcalldataMockTypes[call] = MockType.Revert;\\n\\t\\tcalldataRevertMessage[call] = message;\\n\\t\\ttrackCalldataMock(call);\\n\\t}\\n\\n\\tfunction givenMethodRevertWithMessage(bytes calldata call, string calldata message) override external {\\n\\t\\tbytes4 method = bytesToBytes4(call);\\n\\t\\tmethodIdMockTypes[method] = MockType.Revert;\\n\\t\\tmethodIdRevertMessages[method] = message;\\n\\t\\ttrackMethodIdMock(method);\\t\\t\\n\\t}\\n\\n\\tfunction givenCalldataRunOutOfGas(bytes calldata call) override external {\\n\\t\\tcalldataMockTypes[call] = MockType.OutOfGas;\\n\\t\\ttrackCalldataMock(call);\\n\\t}\\n\\n\\tfunction givenMethodRunOutOfGas(bytes calldata call) override external {\\n\\t\\tbytes4 method = bytesToBytes4(call);\\n\\t\\tmethodIdMockTypes[method] = MockType.OutOfGas;\\n\\t\\ttrackMethodIdMock(method);\\t\\n\\t}\\n\\n\\tfunction invocationCount() override external returns (uint) {\\n\\t\\treturn invocations;\\n\\t}\\n\\n\\tfunction invocationCountForMethod(bytes calldata call) override external returns (uint) {\\n\\t\\tbytes4 method = bytesToBytes4(call);\\n\\t\\treturn methodIdInvocations[keccak256(abi.encodePacked(resetCount, method))];\\n\\t}\\n\\n\\tfunction invocationCountForCalldata(bytes calldata call) override external returns (uint) {\\n\\t\\treturn calldataInvocations[keccak256(abi.encodePacked(resetCount, call))];\\n\\t}\\n\\n\\tfunction reset() override external {\\n\\t\\t// Reset all exact calldataMocks\\n\\t\\tbytes memory nextMock = calldataMocks[MOCKS_LIST_START];\\n\\t\\tbytes32 mockHash = keccak256(nextMock);\\n\\t\\t// We cannot compary bytes\\n\\t\\twhile(mockHash != MOCKS_LIST_END_HASH) {\\n\\t\\t\\t// Reset all mock maps\\n\\t\\t\\tcalldataMockTypes[nextMock] = MockType.Return;\\n\\t\\t\\tcalldataExpectations[nextMock] = hex\\\"\\\";\\n\\t\\t\\tcalldataRevertMessage[nextMock] = \\\"\\\";\\n\\t\\t\\t// Set next mock to remove\\n\\t\\t\\tnextMock = calldataMocks[mockHash];\\n\\t\\t\\t// Remove from linked list\\n\\t\\t\\tcalldataMocks[mockHash] = \\\"\\\";\\n\\t\\t\\t// Update mock hash\\n\\t\\t\\tmockHash = keccak256(nextMock);\\n\\t\\t}\\n\\t\\t// Clear list\\n\\t\\tcalldataMocks[MOCKS_LIST_START] = MOCKS_LIST_END;\\n\\n\\t\\t// Reset all any calldataMocks\\n\\t\\tbytes4 nextAnyMock = methodIdMocks[SENTINEL_ANY_MOCKS];\\n\\t\\twhile(nextAnyMock != SENTINEL_ANY_MOCKS) {\\n\\t\\t\\tbytes4 currentAnyMock = nextAnyMock;\\n\\t\\t\\tmethodIdMockTypes[currentAnyMock] = MockType.Return;\\n\\t\\t\\tmethodIdExpectations[currentAnyMock] = hex\\\"\\\";\\n\\t\\t\\tmethodIdRevertMessages[currentAnyMock] = \\\"\\\";\\n\\t\\t\\tnextAnyMock = methodIdMocks[currentAnyMock];\\n\\t\\t\\t// Remove from linked list\\n\\t\\t\\tmethodIdMocks[currentAnyMock] = 0x0;\\n\\t\\t}\\n\\t\\t// Clear list\\n\\t\\tmethodIdMocks[SENTINEL_ANY_MOCKS] = SENTINEL_ANY_MOCKS;\\n\\n\\t\\tfallbackExpectation = DEFAULT_FALLBACK_VALUE;\\n\\t\\tfallbackMockType = MockType.Return;\\n\\t\\tinvocations = 0;\\n\\t\\tresetCount += 1;\\n\\t}\\n\\n\\tfunction useAllGas() private {\\n\\t\\twhile(true) {\\n\\t\\t\\tbool s;\\n\\t\\t\\tassembly {\\n\\t\\t\\t\\t//expensive call to EC multiply contract\\n\\t\\t\\t\\ts := call(sub(gas(), 2000), 6, 0, 0x0, 0xc0, 0x0, 0x60)\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\n\\tfunction bytesToBytes4(bytes memory b) private pure returns (bytes4) {\\n\\t\\tbytes4 out;\\n\\t\\tfor (uint i = 0; i < 4; i++) {\\n\\t\\t\\tout |= bytes4(b[i] & 0xFF) >> (i * 8);\\n\\t\\t}\\n\\t\\treturn out;\\n\\t}\\n\\n\\tfunction uintToBytes(uint256 x) private pure returns (bytes memory b) {\\n\\t\\tb = new bytes(32);\\n\\t\\tassembly { mstore(add(b, 32), x) }\\n\\t}\\n\\n\\tfunction updateInvocationCount(bytes4 methodId, bytes memory originalMsgData) public {\\n\\t\\trequire(msg.sender == address(this), \\\"Can only be called from the contract itself\\\");\\n\\t\\tinvocations += 1;\\n\\t\\tmethodIdInvocations[keccak256(abi.encodePacked(resetCount, methodId))] += 1;\\n\\t\\tcalldataInvocations[keccak256(abi.encodePacked(resetCount, originalMsgData))] += 1;\\n\\t}\\n\\n\\tfallback () payable external {\\n\\t\\tbytes4 methodId;\\n\\t\\tassembly {\\n\\t\\t\\tmethodId := calldataload(0)\\n\\t\\t}\\n\\n\\t\\t// First, check exact matching overrides\\n\\t\\tif (calldataMockTypes[msg.data] == MockType.Revert) {\\n\\t\\t\\trevert(calldataRevertMessage[msg.data]);\\n\\t\\t}\\n\\t\\tif (calldataMockTypes[msg.data] == MockType.OutOfGas) {\\n\\t\\t\\tuseAllGas();\\n\\t\\t}\\n\\t\\tbytes memory result = calldataExpectations[msg.data];\\n\\n\\t\\t// Then check method Id overrides\\n\\t\\tif (result.length == 0) {\\n\\t\\t\\tif (methodIdMockTypes[methodId] == MockType.Revert) {\\n\\t\\t\\t\\trevert(methodIdRevertMessages[methodId]);\\n\\t\\t\\t}\\n\\t\\t\\tif (methodIdMockTypes[methodId] == MockType.OutOfGas) {\\n\\t\\t\\t\\tuseAllGas();\\n\\t\\t\\t}\\n\\t\\t\\tresult = methodIdExpectations[methodId];\\n\\t\\t}\\n\\n\\t\\t// Last, use the fallback override\\n\\t\\tif (result.length == 0) {\\n\\t\\t\\tif (fallbackMockType == MockType.Revert) {\\n\\t\\t\\t\\trevert(fallbackRevertMessage);\\n\\t\\t\\t}\\n\\t\\t\\tif (fallbackMockType == MockType.OutOfGas) {\\n\\t\\t\\t\\tuseAllGas();\\n\\t\\t\\t}\\n\\t\\t\\tresult = fallbackExpectation;\\n\\t\\t}\\n\\n\\t\\t// Record invocation as separate call so we don't rollback in case we are called with STATICCALL\\n\\t\\t(, bytes memory r) = address(this).call{gas: 100000}(abi.encodeWithSignature(\\\"updateInvocationCount(bytes4,bytes)\\\", methodId, msg.data));\\n\\t\\tassert(r.length == 0);\\n\\t\\t\\n\\t\\tassembly {\\n\\t\\t\\treturn(add(0x20, result), mload(result))\\n\\t\\t}\\n\\t}\\n}\\n\"\r\n    },\r\n    \"@uniswap/v2-core/contracts/interfaces/IUniswapV2Factory.sol\": {\r\n      \"content\": \"pragma solidity >=0.5.0;\\n\\ninterface IUniswapV2Factory {\\n    event PairCreated(address indexed token0, address indexed token1, address pair, uint);\\n\\n    function feeTo() external view returns (address);\\n    function feeToSetter() external view returns (address);\\n\\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\\n    function allPairs(uint) external view returns (address pair);\\n    function allPairsLength() external view returns (uint);\\n\\n    function createPair(address tokenA, address tokenB) external returns (address pair);\\n\\n    function setFeeTo(address) external;\\n    function setFeeToSetter(address) external;\\n}\\n\"\r\n    },\r\n    \"@uniswap/v2-core/contracts/interfaces/IUniswapV2ERC20.sol\": {\r\n      \"content\": \"pragma solidity >=0.5.0;\\n\\ninterface IUniswapV2ERC20 {\\n    event Approval(address indexed owner, address indexed spender, uint value);\\n    event Transfer(address indexed from, address indexed to, uint value);\\n\\n    function name() external pure returns (string memory);\\n    function symbol() external pure returns (string memory);\\n    function decimals() external pure returns (uint8);\\n    function totalSupply() external view returns (uint);\\n    function balanceOf(address owner) external view returns (uint);\\n    function allowance(address owner, address spender) external view returns (uint);\\n\\n    function approve(address spender, uint value) external returns (bool);\\n    function transfer(address to, uint value) external returns (bool);\\n    function transferFrom(address from, address to, uint value) external returns (bool);\\n\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\\n    function nonces(address owner) external view returns (uint);\\n\\n    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\\n}\\n\"\r\n    },\r\n    \"@uniswap/v2-periphery/contracts/interfaces/IUniswapV2Router02.sol\": {\r\n      \"content\": \"pragma solidity >=0.6.2;\\n\\nimport './IUniswapV2Router01.sol';\\n\\ninterface IUniswapV2Router02 is IUniswapV2Router01 {\\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountETH);\\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\n    ) external returns (uint amountETH);\\n\\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external;\\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external payable;\\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external;\\n}\\n\"\r\n    },\r\n    \"@sushiswap/core/contracts/uniswapv2/interfaces/IUniswapV2Router02.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity >=0.6.2;\\n\\nimport './IUniswapV2Router01.sol';\\n\\ninterface IUniswapV2Router02 is IUniswapV2Router01 {\\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountETH);\\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\n    ) external returns (uint amountETH);\\n\\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external;\\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external payable;\\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external;\\n}\"\r\n    },\r\n    \"@sushiswap/core/contracts/uniswapv2/interfaces/IUniswapV2Factory.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity >=0.5.0;\\n\\ninterface IUniswapV2Factory {\\n    event PairCreated(address indexed token0, address indexed token1, address pair, uint);\\n\\n    function feeTo() external view returns (address);\\n    function feeToSetter() external view returns (address);\\n    function migrator() external view returns (address);\\n\\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\\n    function allPairs(uint) external view returns (address pair);\\n    function allPairsLength() external view returns (uint);\\n\\n    function createPair(address tokenA, address tokenB) external returns (address pair);\\n\\n    function setFeeTo(address) external;\\n    function setFeeToSetter(address) external;\\n    function setMigrator(address) external;\\n}\\n\"\r\n    },\r\n    \"@sushiswap/core/contracts/uniswapv2/interfaces/IUniswapV2ERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity >=0.5.0;\\n\\ninterface IUniswapV2ERC20 {\\n    event Approval(address indexed owner, address indexed spender, uint value);\\n    event Transfer(address indexed from, address indexed to, uint value);\\n\\n    function name() external pure returns (string memory);\\n    function symbol() external pure returns (string memory);\\n    function decimals() external pure returns (uint8);\\n    function totalSupply() external view returns (uint);\\n    function balanceOf(address owner) external view returns (uint);\\n    function allowance(address owner, address spender) external view returns (uint);\\n\\n    function approve(address spender, uint value) external returns (bool);\\n    function transfer(address to, uint value) external returns (bool);\\n    function transferFrom(address from, address to, uint value) external returns (bool);\\n\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\\n    function nonces(address owner) external view returns (uint);\\n\\n    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\\n}\"\r\n    },\r\n    \"@uniswap/v2-periphery/contracts/interfaces/IUniswapV2Router01.sol\": {\r\n      \"content\": \"pragma solidity >=0.6.2;\\n\\ninterface IUniswapV2Router01 {\\n    function factory() external pure returns (address);\\n    function WETH() external pure returns (address);\\n\\n    function addLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint amountADesired,\\n        uint amountBDesired,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountA, uint amountB, uint liquidity);\\n    function addLiquidityETH(\\n        address token,\\n        uint amountTokenDesired,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\\n    function removeLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint liquidity,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountA, uint amountB);\\n    function removeLiquidityETH(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountToken, uint amountETH);\\n    function removeLiquidityWithPermit(\\n        address tokenA,\\n        address tokenB,\\n        uint liquidity,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\n    ) external returns (uint amountA, uint amountB);\\n    function removeLiquidityETHWithPermit(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\n    ) external returns (uint amountToken, uint amountETH);\\n    function swapExactTokensForTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external returns (uint[] memory amounts);\\n    function swapTokensForExactTokens(\\n        uint amountOut,\\n        uint amountInMax,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external returns (uint[] memory amounts);\\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\\n        external\\n        payable\\n        returns (uint[] memory amounts);\\n    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\\n        external\\n        returns (uint[] memory amounts);\\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\\n        external\\n        returns (uint[] memory amounts);\\n    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\\n        external\\n        payable\\n        returns (uint[] memory amounts);\\n\\n    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\\n    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\\n}\\n\"\r\n    },\r\n    \"@sushiswap/core/contracts/uniswapv2/interfaces/IUniswapV2Router01.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity >=0.6.2;\\n\\ninterface IUniswapV2Router01 {\\n    function factory() external pure returns (address);\\n    function WETH() external pure returns (address);\\n\\n    function addLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint amountADesired,\\n        uint amountBDesired,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountA, uint amountB, uint liquidity);\\n    function addLiquidityETH(\\n        address token,\\n        uint amountTokenDesired,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\\n    function removeLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint liquidity,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountA, uint amountB);\\n    function removeLiquidityETH(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountToken, uint amountETH);\\n    function removeLiquidityWithPermit(\\n        address tokenA,\\n        address tokenB,\\n        uint liquidity,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\n    ) external returns (uint amountA, uint amountB);\\n    function removeLiquidityETHWithPermit(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\n    ) external returns (uint amountToken, uint amountETH);\\n    function swapExactTokensForTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external returns (uint[] memory amounts);\\n    function swapTokensForExactTokens(\\n        uint amountOut,\\n        uint amountInMax,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external returns (uint[] memory amounts);\\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\\n        external\\n        payable\\n        returns (uint[] memory amounts);\\n    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\\n        external\\n        returns (uint[] memory amounts);\\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\\n        external\\n        returns (uint[] memory amounts);\\n    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\\n        external\\n        payable\\n        returns (uint[] memory amounts);\\n\\n    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\\n    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\\n}\"\r\n    },\r\n    \"contracts/controllers/SushiswapController.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.11;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\nimport \\\"@sushiswap/core/contracts/uniswapv2/interfaces/IUniswapV2Router02.sol\\\";\\nimport \\\"@sushiswap/core/contracts/uniswapv2/interfaces/IUniswapV2Factory.sol\\\";\\n\\ncontract SushiswapController {\\n    using SafeERC20 for IERC20;\\n    using Address for address;\\n    using Address for address payable;\\n    using SafeMath for uint256;\\n\\n    // solhint-disable-next-line var-name-mixedcase\\n    IUniswapV2Router02 public immutable SUSHISWAP_ROUTER;\\n    // solhint-disable-next-line var-name-mixedcase\\n    IUniswapV2Factory public immutable SUSHISWAP_FACTORY;\\n\\n    constructor(IUniswapV2Router02 router, IUniswapV2Factory factory) public {\\n        SUSHISWAP_ROUTER = router;\\n        SUSHISWAP_FACTORY = factory;\\n    }\\n\\n    function deploy(bytes calldata data) external {\\n        (\\n            address tokenA,\\n            address tokenB,\\n            uint256 amountADesired,\\n            uint256 amountBDesired,\\n            uint256 amountAMin,\\n            uint256 amountBMin,\\n            address to,\\n            uint256 deadline\\n        ) =\\n            abi.decode(\\n                data,\\n                (address, address, uint256, uint256, uint256, uint256, address, uint256)\\n            );\\n\\n        _approve(IERC20(tokenA), amountADesired);\\n        _approve(IERC20(tokenB), amountBDesired);\\n        \\n        //(uint256 amountA, uint256 amountB, uint256 liquidity) =\\n            SUSHISWAP_ROUTER.addLiquidity(\\n                tokenA,\\n                tokenB,\\n                amountADesired,\\n                amountBDesired,\\n                amountAMin,\\n                amountBMin,\\n                to,\\n                deadline\\n            );\\n        // TODO: perform checks on amountA, amountB, liquidity\\n    }\\n\\n    function withdraw(bytes calldata data) external {\\n        (\\n            address tokenA,\\n            address tokenB,\\n            uint256 liquidity,\\n            uint256 amountAMin,\\n            uint256 amountBMin,\\n            address to,\\n            uint256 deadline\\n        ) = abi.decode(data, (address, address, uint256, uint256, uint256, address, uint256));\\n\\n        address pair = SUSHISWAP_FACTORY.getPair(tokenA, tokenB);\\n        require(pair != address(0), \\\"pair doesn't exist\\\");\\n        _approve(IERC20(pair), liquidity);\\n                \\n        //(uint256 amountA, uint256 amountB) =\\n            SUSHISWAP_ROUTER.removeLiquidity(\\n                tokenA,\\n                tokenB,\\n                liquidity,\\n                amountAMin,\\n                amountBMin,\\n                to,\\n                deadline\\n            );\\n        //TODO: perform checks on amountA and amountB\\n    }\\n\\n    function _approve(IERC20 token, uint256 amount) internal {\\n        uint256 currentAllowance = token.allowance(address(this), address(SUSHISWAP_ROUTER));\\n        if (currentAllowance < amount) {\\n            token.safeIncreaseAllowance(\\n                address(SUSHISWAP_ROUTER),\\n                type(uint256).max.sub(currentAllowance)\\n            );\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/controllers/UniswapController.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.11;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\nimport \\\"@uniswap/v2-periphery/contracts/interfaces/IUniswapV2Router02.sol\\\";\\nimport \\\"@uniswap/v2-core/contracts/interfaces/IUniswapV2Factory.sol\\\";\\n\\ncontract UniswapController {\\n    using SafeERC20 for IERC20;\\n    using Address for address;\\n    using Address for address payable;\\n    using SafeMath for uint256;\\n\\n    // solhint-disable-next-line var-name-mixedcase\\n    IUniswapV2Router02 public immutable UNISWAP_ROUTER;\\n    // solhint-disable-next-line var-name-mixedcase\\n    IUniswapV2Factory public immutable UNISWAP_FACTORY;\\n\\n    constructor(IUniswapV2Router02 router, IUniswapV2Factory factory) public {\\n        UNISWAP_ROUTER = router;\\n        UNISWAP_FACTORY = factory;\\n    }\\n\\n    function deploy(bytes calldata data) external {\\n        (\\n            address tokenA,\\n            address tokenB,\\n            uint256 amountADesired,\\n            uint256 amountBDesired,\\n            uint256 amountAMin,\\n            uint256 amountBMin,\\n            address to,\\n            uint256 deadline\\n        ) =\\n            abi.decode(\\n                data,\\n                (address, address, uint256, uint256, uint256, uint256, address, uint256)\\n            );\\n\\n        _approve(IERC20(tokenA), amountADesired);\\n        _approve(IERC20(tokenB), amountBDesired); \\n        \\n        //(uint256 amountA, uint256 amountB, uint256 liquidity) =\\n            UNISWAP_ROUTER.addLiquidity(\\n                tokenA,\\n                tokenB,\\n                amountADesired,\\n                amountBDesired,\\n                amountAMin,\\n                amountBMin,\\n                to,\\n                deadline\\n            );\\n\\n        // TODO: perform checks on amountA, amountB, liquidity\\n    }\\n\\n    function withdraw(bytes calldata data) external {\\n        (\\n            address tokenA,\\n            address tokenB,\\n            uint256 liquidity,\\n            uint256 amountAMin,\\n            uint256 amountBMin,\\n            address to,\\n            uint256 deadline\\n        ) = abi.decode(data, (address, address, uint256, uint256, uint256, address, uint256));\\n\\n        address pair = UNISWAP_FACTORY.getPair(tokenA, tokenB);\\n        require(pair != address(0), \\\"pair doesn't exist\\\");\\n        _approve(IERC20(pair), liquidity);\\n        \\n        //(uint256 amountA, uint256 amountB) =\\n            UNISWAP_ROUTER.removeLiquidity(\\n                tokenA,\\n                tokenB,\\n                liquidity,\\n                amountAMin,\\n                amountBMin,\\n                to,\\n                deadline\\n            );\\n        //TODO: perform checks on amountA and amountB\\n    }\\n\\n    function _approve(IERC20 token, uint256 amount) internal {\\n        uint256 currentAllowance = token.allowance(address(this), address(UNISWAP_ROUTER));\\n        if (currentAllowance < amount) {\\n            token.safeIncreaseAllowance(\\n                address(UNISWAP_ROUTER),\\n                type(uint256).max.sub(currentAllowance)\\n            );\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/controllers/BalancerController.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.11;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\nimport \\\"../interfaces/balancer/IBalancerPool.sol\\\";\\n\\ncontract BalancerController {\\n    using SafeERC20 for IERC20;\\n    using Address for address;\\n    using Address for address payable;\\n    using SafeMath for uint256;\\n\\n    function deploy(\\n        address poolAddress,\\n        IERC20[] calldata tokens,\\n        uint256[] calldata amounts,\\n        bytes calldata data\\n    ) external {\\n        require(tokens.length == amounts.length, \\\"TOKEN_AMOUNTS_COUNT_MISMATCH\\\");\\n        require(tokens.length > 0, \\\"TOKENS_AMOUNTS_NOT_PROVIDED\\\");\\n\\n        for (uint256 i = 0; i < tokens.length; i++) {\\n            _approve(tokens[i], poolAddress, amounts[i]);\\n        }\\n\\n        //Notes:\\n        // - If your pool is eligible for weekly BAL rewards, they will be distributed to your LPs automatically\\n        // - If you contribute significant long-term liquidity to the platform, you can apply to have smart contract deployment gas costs reimbursed from the Balancer Ecosystem fund\\n        // - The pool is the LP token, All pools in Balancer are also ERC20 tokens known as BPTs \\\\(Balancer Pool Tokens\\\\)\\n        (uint256 poolAmountOut, uint256[] memory maxAmountsIn) =\\n            abi.decode(data, (uint256, uint256[]));\\n        IBalancerPool(poolAddress).joinPool(poolAmountOut, maxAmountsIn);\\n    }\\n\\n    function withdraw(address poolAddress, bytes calldata data) external {\\n        (uint256 poolAmountIn, uint256[] memory minAmountsOut) =\\n            abi.decode(data, (uint256, uint256[]));\\n        _approve(IERC20(poolAddress), poolAddress, poolAmountIn);\\n        IBalancerPool(poolAddress).exitPool(poolAmountIn, minAmountsOut);\\n    }\\n\\n    function _approve(\\n        IERC20 token,\\n        address poolAddress,\\n        uint256 amount\\n    ) internal {\\n        uint256 currentAllowance = token.allowance(address(this), poolAddress);\\n        if (currentAllowance < amount) {\\n            token.safeIncreaseAllowance(poolAddress, type(uint256).max.sub(currentAllowance));\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/balancer/IBalancerPool.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.11;\\n\\ninterface IBalancerPool {\\n    event Approval(address indexed src, address indexed dst, uint amt);\\n    event Transfer(address indexed src, address indexed dst, uint amt);\\n\\n    function totalSupply() external view returns (uint);\\n    function balanceOf(address whom) external view returns (uint);\\n    function allowance(address src, address dst) external view returns (uint);\\n\\n    function approve(address dst, uint amt) external returns (bool);\\n    function transfer(address dst, uint amt) external returns (bool);\\n    function transferFrom(\\n        address src, address dst, uint amt\\n    ) external returns (bool);\\n        \\n    function joinPool(uint poolAmountOut, uint[] calldata maxAmountsIn) external;   \\n    function exitPool(uint poolAmountIn, uint[] calldata minAmountsOut) external;\\n\\n    function getBalance(address token) external view returns (uint);\\n\\n    function decimals() external view returns(uint8);\\n\\n    function isFinalized() external view returns (bool);\\n\\n    function getFinalTokens()\\n        external view        \\n        returns (address[] memory tokens);\\n}\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 999999\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_WETH\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_treasury\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_maxTotalValue\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"claimer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"assetsMoved\",\"type\":\"uint256\"}],\"name\":\"AssetsFinalized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"depositor\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"indexed\":false,\"internalType\":\"struct IDefiRound.TokenData\",\"name\":\"tokenInfo\",\"type\":\"tuple\"}],\"name\":\"Deposited\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountTransferred\",\"type\":\"uint256\"}],\"name\":\"GenesisTransfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"numerator\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"denominator\",\"type\":\"uint256\"}],\"indexed\":false,\"internalType\":\"struct IDefiRound.RateData[]\",\"name\":\"ratesData\",\"type\":\"tuple[]\"}],\"name\":\"RatesPublished\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"oracle\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"genesis\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"maxLimit\",\"type\":\"uint256\"}],\"indexed\":false,\"internalType\":\"struct IDefiRound.SupportedTokenData[]\",\"name\":\"tokenData\",\"type\":\"tuple[]\"}],\"name\":\"SupportedTokensAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"indexed\":false,\"internalType\":\"struct IDefiRound.TokenData[]\",\"name\":\"tokens\",\"type\":\"tuple[]\"}],\"name\":\"TreasuryTransfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"components\":[{\"internalType\":\"bool\",\"name\":\"enabled\",\"type\":\"bool\"},{\"internalType\":\"bytes32\",\"name\":\"root\",\"type\":\"bytes32\"}],\"indexed\":false,\"internalType\":\"struct IDefiRound.WhitelistSettings\",\"name\":\"settings\",\"type\":\"tuple\"}],\"name\":\"WhitelistConfigured\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"withdrawer\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"indexed\":false,\"internalType\":\"struct IDefiRound.TokenData\",\"name\":\"tokenInfo\",\"type\":\"tuple\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"asETH\",\"type\":\"bool\"}],\"name\":\"Withdrawn\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"WETH\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"accountBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"oracle\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"genesis\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"maxLimit\",\"type\":\"uint256\"}],\"internalType\":\"struct IDefiRound.SupportedTokenData[]\",\"name\":\"tokensToSupport\",\"type\":\"tuple[]\"}],\"name\":\"addSupportedTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"bool\",\"name\":\"enabled\",\"type\":\"bool\"},{\"internalType\":\"bytes32\",\"name\":\"root\",\"type\":\"bytes32\"}],\"internalType\":\"struct IDefiRound.WhitelistSettings\",\"name\":\"settings\",\"type\":\"tuple\"}],\"name\":\"configureWhitelist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currentStage\",\"outputs\":[{\"internalType\":\"enum IDefiRound.STAGES\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"internalType\":\"struct IDefiRound.TokenData\",\"name\":\"tokenInfo\",\"type\":\"tuple\"},{\"internalType\":\"bytes32[]\",\"name\":\"proof\",\"type\":\"bytes32[]\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"depositToGenesis\",\"type\":\"bool\"}],\"name\":\"finalizeAssets\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getAccountData\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"initialDeposit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"currentBalance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"effectiveAmt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"ineffectiveAmt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"actualTokeReceived\",\"type\":\"uint256\"}],\"internalType\":\"struct IDefiRound.AccountDataDetails[]\",\"name\":\"data\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"tokens\",\"type\":\"address[]\"}],\"name\":\"getGenesisPools\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"genesisAddresses\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMaxTotalValue\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"getRateAdjustedAmounts\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"tokens\",\"type\":\"address[]\"}],\"name\":\"getRates\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"numerator\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"denominator\",\"type\":\"uint256\"}],\"internalType\":\"struct IDefiRound.RateData[]\",\"name\":\"rates\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getSupportedTokens\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"tokens\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"tokens\",\"type\":\"address[]\"}],\"name\":\"getTokenOracles\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"oracleAddresses\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastLookExpiration\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"overSubscriptionRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"overNumerator\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"overDenominator\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"numerator\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"denominator\",\"type\":\"uint256\"}],\"internalType\":\"struct IDefiRound.RateData[]\",\"name\":\"ratesData\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"overNumerator\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"overDenominator\",\"type\":\"uint256\"}],\"internalType\":\"struct IDefiRound.OversubscriptionRate\",\"name\":\"oversubRate\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"lastLookDuration\",\"type\":\"uint256\"}],\"name\":\"publishRates\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalValue\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"transferToTreasury\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"treasury\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"whitelistSettings\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"enabled\",\"type\":\"bool\"},{\"internalType\":\"bytes32\",\"name\":\"root\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"internalType\":\"struct IDefiRound.TokenData\",\"name\":\"tokenInfo\",\"type\":\"tuple\"},{\"internalType\":\"bool\",\"name\":\"asETH\",\"type\":\"bool\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]","ContractName":"DefiRound","CompilerVersion":"v0.6.11+commit.5ef660b1","OptimizationUsed":"1","Runs":"999999","ConstructorArguments":"000000000000000000000000c02aaa39b223fe8d0a0e5c4f27ead9083c756cc20000000000000000000000008b4334d4812c530574bd4f2763fcd22de94a969b00000000000000000000000000000000000000000000000000110d9316ec0000","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}