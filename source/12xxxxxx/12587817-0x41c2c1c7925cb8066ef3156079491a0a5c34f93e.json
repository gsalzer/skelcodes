{"status":"1","message":"OK","result":[{"SourceCode":"// File: @openzeppelin/contracts/utils/Context.sol\r\n\r\n// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/*\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/access/Ownable.sol\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor () {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/token/ERC20/IERC20.sol\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n// File: contracts/MegaPresaleVest.sol\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n\r\ncontract MegaPresaleVest is Ownable {\r\n    address public megaToken;\r\n    address public contributionToken;\r\n    uint public contributionDeadline;\r\n    uint public vestingDeadline;\r\n\r\n    struct Contributor {\r\n        address contributor;\r\n        uint contributionAmount;\r\n        uint maxContributionAmount;\r\n        uint rate;\r\n        bool withdrawn;\r\n    }\r\n\r\n    Contributor[] public contributors;\r\n\r\n    event Registration(address contributor, uint maxContributionAmount, uint rate, uint timestamp);\r\n    event Adjustment(address contributor, uint maxContributionAmount, uint rate, uint timestamp);\r\n    event Contribution(address contributor, uint amount, uint timestamp);\r\n    event Withdrawal(address contributor, uint withdrawnAmount, uint timestamp);\r\n\r\n    constructor(address _megaToken, address _contributionToken, uint _contributionDeadline, uint _vestingDeadline) {\r\n        megaToken = _megaToken;\r\n        contributionToken = _contributionToken;\r\n        contributionDeadline = _contributionDeadline;\r\n        vestingDeadline = _vestingDeadline;\r\n    }\r\n\r\n    function getContributors() external view returns (Contributor[] memory) {\r\n        return contributors;\r\n    }\r\n\r\n    function usdcToMega(uint usdcAmt, uint rate) pure internal returns (uint) {\r\n        return (usdcAmt / rate) * 1e18;\r\n    }\r\n\r\n    function addContributor(address contributor, uint maxContributionAmount, uint rate) onlyOwner external {\r\n        require(rate > 0, \"The rate must be non-zero\");\r\n        require((maxContributionAmount % rate == 0) || (maxContributionAmount == 0), \"Contribution amount must be a multiple of the rate and non-zero\");\r\n\r\n        uint allocationTotal;\r\n        for(uint i; i < contributors.length; i++) {\r\n            require(contributors[i].contributor != contributor, \"Contributor already present\");\r\n            allocationTotal += contributors[i].maxContributionAmount;\r\n        }\r\n\r\n        uint loadedMega = IERC20(megaToken).balanceOf(address(this));\r\n        uint availableMegaForPurchase = usdcToMega(allocationTotal + maxContributionAmount, rate);\r\n        require(loadedMega >= availableMegaForPurchase, \"maxContributionAmount across all contributors exceeds available Mega balance\");\r\n        contributors.push(Contributor(contributor, 0, maxContributionAmount, rate, false));\r\n        emit Registration(contributor, maxContributionAmount, rate, block.timestamp);\r\n    }\r\n\r\n    function setContributionParams(address contributor, uint maxContributionAmount, uint rate) onlyOwner external {\r\n        require(rate > 0, \"The rate must be non-zero\");\r\n        require((maxContributionAmount % rate == 0) || (maxContributionAmount == 0), \"Contribution amount must be a multiple of the rate\");\r\n\r\n        uint allocationTotal;\r\n        bool contributorPresent;\r\n        for(uint i; i < contributors.length; i++) {\r\n            if(contributors[i].contributor == contributor) {\r\n                contributorPresent = true;\r\n                if(rate != contributors[i].rate) {\r\n                    require(contributors[i].contributionAmount == 0, \"Rate cannot be altered after initial purchase\");\r\n                }\r\n                require(contributors[i].contributionAmount <= maxContributionAmount, \"Contributor already bought more than new maxContributionAmount\");\r\n                contributors[i].maxContributionAmount = maxContributionAmount;\r\n                contributors[i].rate = rate;\r\n            }\r\n\r\n            allocationTotal += contributors[i].maxContributionAmount;\r\n        }\r\n\r\n        uint loadedMega = IERC20(megaToken).balanceOf(address(this));\r\n        uint availableMegaForPurchase = usdcToMega(allocationTotal, rate);\r\n\r\n        require(contributorPresent, \"Contributor not present\");\r\n        require(loadedMega >= availableMegaForPurchase, \"maxContributionAmount across all contributors exceeds available Mega balance\");\r\n        emit Adjustment(contributor, maxContributionAmount, rate, block.timestamp);\r\n    }\r\n\r\n    function contribute(uint contribution) external {\r\n        require(block.timestamp <= contributionDeadline, \"Contribution deadline has passed\");\r\n        require(IERC20(contributionToken).transferFrom(msg.sender, owner(), contribution), \"ERC20 transferFrom failed\");\r\n\r\n        bool contributorPresent;\r\n        for(uint i; i < contributors.length; i++) {\r\n            if(contributors[i].contributor == msg.sender) {\r\n                contributorPresent = true;\r\n                require(contribution % contributors[i].rate == 0, \"Contribution amount must be a multiple of the rate\");\r\n                require((contributors[i].contributionAmount + contribution) <= contributors[i].maxContributionAmount, \"Contribution cumulative exceeds maxContributionAmount\");\r\n                contributors[i].contributionAmount += contribution;\r\n            }\r\n        }\r\n\r\n        require(contributorPresent, \"Contributor not present\");\r\n        emit Contribution(msg.sender, contribution, block.timestamp);\r\n    }\r\n\r\n    function withdraw() external {\r\n        require(block.timestamp > vestingDeadline, \"Vesting deadline has not yet passed\");\r\n\r\n        bool contributorPresent;\r\n        uint contributionAmount;\r\n        uint rate;\r\n        for(uint i; i < contributors.length; i++) {\r\n            if(contributors[i].contributor == msg.sender) {\r\n                contributorPresent = true;\r\n                require(!contributors[i].withdrawn, \"MEGA already withdrawn\");\r\n                contributionAmount = contributors[i].contributionAmount;\r\n                rate = contributors[i].rate;\r\n                contributors[i].withdrawn = true;\r\n            }\r\n        }\r\n\r\n        uint withdrawnAmount = usdcToMega(contributionAmount, rate);\r\n        require(contributorPresent, \"Contributor not present\");\r\n        require(IERC20(megaToken).transfer(msg.sender, withdrawnAmount), \"MEGA transfer failed\");\r\n        emit Withdrawal(msg.sender, withdrawnAmount, block.timestamp);\r\n    }\r\n\r\n    function withdrawOverallocation() onlyOwner external {\r\n        require(block.timestamp > contributionDeadline, \"Contribution deadline has not yet passed\");\r\n\r\n        uint contributionAmount;\r\n        for(uint i; i < contributors.length; i++) {\r\n            contributionAmount += usdcToMega(contributors[i].contributionAmount, contributors[i].rate);\r\n        }\r\n\r\n        uint overallocation = IERC20(megaToken).balanceOf(address(this)) - contributionAmount;\r\n        require(IERC20(megaToken).transfer(owner(), overallocation), \"MEGA transfer failed\");\r\n    }\r\n\r\n    function setContributionDeadline(uint newContributionDeadline) onlyOwner external {\r\n        require(block.timestamp < contributionDeadline, 'Cannot restart the sale after the contribution deadline');\r\n        uint sixMonths = 15780000;\r\n        contributionDeadline = newContributionDeadline;\r\n        vestingDeadline = contributionDeadline + sixMonths;\r\n    }\r\n\r\n    function releaseVestLock() onlyOwner external {\r\n        require(block.timestamp < vestingDeadline, 'Vesting lock is already released');\r\n        vestingDeadline = block.timestamp;\r\n    }\r\n\r\n    function sweepErc(address erc) onlyOwner external {\r\n        uint twoWeeks = 1209600;\r\n        require((erc != megaToken) || block.timestamp > (vestingDeadline + twoWeeks), \"Mega cannot be swept prematurely and is subject to the contract agreement\");\r\n        IERC20(erc).transfer(owner(), IERC20(erc).balanceOf(address(this)));\r\n    }\r\n\r\n    function sweepEth() onlyOwner external {\r\n        payable(owner()).transfer(address(this).balance);\r\n    }\r\n\r\n    receive() external payable {}\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_megaToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_contributionToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_contributionDeadline\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_vestingDeadline\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"contributor\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"maxContributionAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"rate\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"Adjustment\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"contributor\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"Contribution\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"contributor\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"maxContributionAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"rate\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"Registration\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"contributor\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"withdrawnAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"Withdrawal\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"contributor\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"maxContributionAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rate\",\"type\":\"uint256\"}],\"name\":\"addContributor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"contribution\",\"type\":\"uint256\"}],\"name\":\"contribute\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"contributionDeadline\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"contributionToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"contributors\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"contributor\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"contributionAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxContributionAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rate\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"withdrawn\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getContributors\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"contributor\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"contributionAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxContributionAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rate\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"withdrawn\",\"type\":\"bool\"}],\"internalType\":\"struct MegaPresaleVest.Contributor[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"megaToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"releaseVestLock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newContributionDeadline\",\"type\":\"uint256\"}],\"name\":\"setContributionDeadline\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"contributor\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"maxContributionAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rate\",\"type\":\"uint256\"}],\"name\":\"setContributionParams\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"erc\",\"type\":\"address\"}],\"name\":\"sweepErc\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sweepEth\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vestingDeadline\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawOverallocation\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]","ContractName":"MegaPresaleVest","CompilerVersion":"v0.8.0+commit.c7dfd78e","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"000000000000000000000000be041e6dbed3a5c2e5e82b9498158574ceb5cf21000000000000000000000000a0b86991c6218b36c1d19d4a2e9eb0ce3606eb480000000000000000000000000000000000000000000000000000000060cfc8700000000000000000000000000000000000000000000000000000000061c11900","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://2af4d387f7dcad19c8380301a819a01227a24ebe8cc2edb58e1278803595ec70"}]}