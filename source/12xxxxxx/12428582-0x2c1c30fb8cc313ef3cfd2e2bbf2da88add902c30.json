{"status":"1","message":"OK","result":[{"SourceCode":"// SPDX-License-Identifier:  AGPL-3.0-or-later // hevm: flattened sources of contracts/library/PoolLib.sol\r\npragma solidity =0.6.11 >=0.6.0 <0.8.0 >=0.6.2 <0.8.0;\r\n\r\n////// contracts/interfaces/IBPool.sol\r\n/* pragma solidity 0.6.11; */\r\n\r\ninterface IBPool {\r\n\r\n    function transfer(address, uint256) external returns (bool);\r\n\r\n    function INIT_POOL_SUPPLY() external view returns (uint256);\r\n\r\n    function MAX_OUT_RATIO() external view returns (uint256);\r\n\r\n    function bind(address, uint256, uint256) external;\r\n\r\n    function balanceOf(address) external view returns (uint256);\r\n\r\n    function finalize() external;\r\n\r\n    function gulp(address) external;\r\n\r\n    function isFinalized() external view returns (bool);\r\n\r\n    function isBound(address) external view returns (bool);\r\n\r\n    function getNumTokens() external view returns (uint256);\r\n\r\n    function getBalance(address) external view returns (uint256);\r\n\r\n    function getNormalizedWeight(address) external view returns (uint256);\r\n\r\n    function getDenormalizedWeight(address) external view returns (uint256);\r\n\r\n    function getTotalDenormalizedWeight() external view returns (uint256);\r\n\r\n    function getSwapFee() external view returns (uint256);\r\n\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    function getFinalTokens() external view returns (address[] memory);\r\n\r\n    function calcSingleOutGivenPoolIn(\r\n        uint256 tokenBalanceOut,\r\n        uint256 tokenWeightOut,\r\n        uint256 poolSupply,\r\n        uint256 totalWeight,\r\n        uint256 poolAmountIn,\r\n        uint256 swapFee\r\n    ) external pure returns (uint256);\r\n\r\n    function calcPoolInGivenSingleOut(\r\n        uint256 tokenBalanceOut,\r\n        uint256 tokenWeightOut,\r\n        uint256 poolSupply,\r\n        uint256 totalWeight,\r\n        uint256 tokenAmountOut,\r\n        uint256 swapFee\r\n    ) external pure returns (uint256);\r\n\r\n    function exitswapExternAmountOut(\r\n        address tokenOut,\r\n        uint256 tokenAmountOut,\r\n        uint256 maxPoolAmountIn\r\n    ) external returns (uint256 poolAmountIn);\r\n\r\n}\r\n\r\n////// contracts/interfaces/IDebtLockerFactory.sol\r\n/* pragma solidity 0.6.11; */\r\n\r\ninterface IDebtLockerFactory {\r\n\r\n    function owner(address) external view returns (address);\r\n\r\n    function isLocker(address) external view returns (bool);\r\n\r\n    function factoryType() external view returns (uint8);\r\n\r\n    function newLocker(address) external returns (address);\r\n\r\n}\r\n\r\n////// lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol\r\n/* pragma solidity >=0.6.0 <0.8.0; */\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n////// contracts/interfaces/IERC20Details.sol\r\n/* pragma solidity 0.6.11; */\r\n\r\n/* import \"lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol\"; */\r\n\r\ninterface IERC20Details is IERC20 {\r\n\r\n    function name() external view returns (string memory);\r\n\r\n    function symbol() external view returns (string memory);\r\n\r\n    function decimals() external view returns (uint256);\r\n\r\n}\r\n\r\n////// contracts/interfaces/ILiquidityLocker.sol\r\n/* pragma solidity 0.6.11; */\r\n\r\ninterface ILiquidityLocker {\r\n\r\n    function pool() external view returns (address);\r\n\r\n    function liquidityAsset() external view returns (address);\r\n\r\n    function transfer(address, uint256) external;\r\n\r\n    function fundLoan(address, address, uint256) external;\r\n\r\n}\r\n\r\n////// contracts/token/interfaces/IBaseFDT.sol\r\n/* pragma solidity 0.6.11; */\r\n\r\ninterface IBaseFDT {\r\n\r\n    /**\r\n        @dev    Returns the total amount of funds a given address is able to withdraw currently.\r\n        @param  owner Address of FDT holder.\r\n        @return A uint256 representing the available funds for a given account.\r\n    */\r\n    function withdrawableFundsOf(address owner) external view returns (uint256);\r\n\r\n    /**\r\n        @dev Withdraws all available funds for a FDT holder.\r\n    */\r\n    function withdrawFunds() external;\r\n\r\n    /**\r\n        @dev   This event emits when new funds are distributed.\r\n        @param by               The address of the sender that distributed funds.\r\n        @param fundsDistributed The amount of funds received for distribution.\r\n    */\r\n    event FundsDistributed(address indexed by, uint256 fundsDistributed);\r\n\r\n    /**\r\n        @dev   This event emits when distributed funds are withdrawn by a token holder.\r\n        @param by             The address of the receiver of funds.\r\n        @param fundsWithdrawn The amount of funds that were withdrawn.\r\n        @param totalWithdrawn The total amount of funds that were withdrawn.\r\n    */\r\n    event FundsWithdrawn(address indexed by, uint256 fundsWithdrawn, uint256 totalWithdrawn);\r\n\r\n}\r\n\r\n////// contracts/token/interfaces/IBasicFDT.sol\r\n/* pragma solidity 0.6.11; */\r\n\r\n/* import \"lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol\"; */\r\n\r\n/* import \"./IBaseFDT.sol\"; */\r\n\r\ninterface IBasicFDT is IBaseFDT, IERC20 {\r\n\r\n    event PointsPerShareUpdated(uint256);\r\n\r\n    event PointsCorrectionUpdated(address indexed, int256);\r\n\r\n    function withdrawnFundsOf(address) external view returns (uint256);\r\n\r\n    function accumulativeFundsOf(address) external view returns (uint256);\r\n\r\n    function updateFundsReceived() external;\r\n\r\n}\r\n\r\n////// contracts/token/interfaces/ILoanFDT.sol\r\n/* pragma solidity 0.6.11; */\r\n\r\n/* import \"./IBasicFDT.sol\"; */\r\n\r\ninterface ILoanFDT is IBasicFDT {\r\n\r\n    function fundsToken() external view returns (address);\r\n\r\n    function fundsTokenBalance() external view returns (uint256);\r\n\r\n}\r\n\r\n////// contracts/interfaces/ILoan.sol\r\n/* pragma solidity 0.6.11; */\r\n\r\n/* import \"../token/interfaces/ILoanFDT.sol\"; */\r\n\r\ninterface ILoan is ILoanFDT {\r\n    \r\n    // State Variables\r\n    function liquidityAsset() external view returns (address);\r\n    \r\n    function collateralAsset() external view returns (address);\r\n    \r\n    function fundingLocker() external view returns (address);\r\n    \r\n    function flFactory() external view returns (address);\r\n    \r\n    function collateralLocker() external view returns (address);\r\n    \r\n    function clFactory() external view returns (address);\r\n    \r\n    function borrower() external view returns (address);\r\n    \r\n    function repaymentCalc() external view returns (address);\r\n    \r\n    function lateFeeCalc() external view returns (address);\r\n    \r\n    function premiumCalc() external view returns (address);\r\n    \r\n    function loanState() external view returns (uint256);\r\n    \r\n    function collateralRequiredForDrawdown(uint256) external view returns (uint256);\r\n    \r\n\r\n    // Loan Specifications\r\n    function apr() external view returns (uint256);\r\n    \r\n    function paymentsRemaining() external view returns (uint256);\r\n    \r\n    function paymentIntervalSeconds() external view returns (uint256);\r\n    \r\n    function requestAmount() external view returns (uint256);\r\n    \r\n    function collateralRatio() external view returns (uint256);\r\n    \r\n    function fundingPeriod() external view returns (uint256);\r\n\r\n    function defaultGracePeriod() external view returns (uint256);\r\n    \r\n    function createdAt() external view returns (uint256);\r\n    \r\n    function principalOwed() external view returns (uint256);\r\n    \r\n    function principalPaid() external view returns (uint256);\r\n    \r\n    function interestPaid() external view returns (uint256);\r\n    \r\n    function feePaid() external view returns (uint256);\r\n    \r\n    function excessReturned() external view returns (uint256);\r\n    \r\n    function getNextPayment() external view returns (uint256, uint256, uint256, uint256);\r\n    \r\n    function superFactory() external view returns (address);\r\n    \r\n    function termDays() external view returns (uint256);\r\n    \r\n    function nextPaymentDue() external view returns (uint256);\r\n\r\n    function getFullPayment() external view returns (uint256, uint256, uint256);\r\n    \r\n\r\n    // Liquidations\r\n    function amountLiquidated() external view returns (uint256);\r\n\r\n    function defaultSuffered() external view returns (uint256);\r\n    \r\n    function amountRecovered() external view returns (uint256);\r\n    \r\n    function getExpectedAmountRecovered() external view returns (uint256);\r\n\r\n    function liquidationExcess() external view returns (uint256);\r\n    \r\n\r\n    // Functions\r\n    function fundLoan(address, uint256) external;\r\n    \r\n    function makePayment() external;\r\n    \r\n    function drawdown(uint256) external;\r\n    \r\n    function makeFullPayment() external;\r\n    \r\n    function triggerDefault() external;\r\n    \r\n    function unwind() external;\r\n    \r\n\r\n    // Security \r\n    function pause() external;\r\n\r\n    function unpause() external;\r\n\r\n    function loanAdmins(address) external view returns (address);\r\n\r\n    function setLoanAdmin(address, bool) external;\r\n\r\n\r\n    // Misc\r\n    function reclaimERC20(address) external;\r\n\r\n}\r\n\r\n////// contracts/interfaces/ILoanFactory.sol\r\n/* pragma solidity 0.6.11; */\r\n\r\ninterface ILoanFactory {\r\n\r\n    function CL_FACTORY() external view returns (uint8);\r\n\r\n    function FL_FACTORY() external view returns (uint8);\r\n\r\n    function INTEREST_CALC_TYPE() external view returns (uint8);\r\n\r\n    function LATEFEE_CALC_TYPE() external view returns (uint8);\r\n\r\n    function PREMIUM_CALC_TYPE() external view returns (uint8);\r\n\r\n    function globals() external view returns (address);\r\n\r\n    function loansCreated() external view returns (uint256);\r\n\r\n    function loans(uint256) external view returns (address);\r\n\r\n    function isLoan(address) external view returns (bool);\r\n\r\n    function loanFactoryAdmins(address) external view returns (bool);\r\n\r\n    function setGlobals(address) external;\r\n    \r\n    function createLoan(address, address, address, address, uint256[5] memory, address[3] memory) external returns (address);\r\n\r\n    function setLoanFactoryAdmin(address, bool) external;\r\n\r\n    function pause() external;\r\n\r\n    function unpause() external;\r\n\r\n}\r\n\r\n////// contracts/interfaces/IMapleGlobals.sol\r\n/* pragma solidity 0.6.11; */\r\n\r\ninterface IMapleGlobals {\r\n\r\n    function pendingGovernor() external view returns (address);\r\n\r\n    function governor() external view returns (address);\r\n\r\n    function globalAdmin() external view returns (address);\r\n\r\n    function mpl() external view returns (address);\r\n\r\n    function mapleTreasury() external view returns (address);\r\n\r\n    function isValidBalancerPool(address) external view returns (bool);\r\n\r\n    function treasuryFee() external view returns (uint256);\r\n\r\n    function investorFee() external view returns (uint256);\r\n\r\n    function defaultGracePeriod() external view returns (uint256);\r\n\r\n    function fundingPeriod() external view returns (uint256);\r\n\r\n    function swapOutRequired() external view returns (uint256);\r\n\r\n    function isValidLiquidityAsset(address) external view returns (bool);\r\n\r\n    function isValidCollateralAsset(address) external view returns (bool);\r\n\r\n    function isValidPoolDelegate(address) external view returns (bool);\r\n\r\n    function validCalcs(address) external view returns (bool);\r\n\r\n    function isValidCalc(address, uint8) external view returns (bool);\r\n\r\n    function getLpCooldownParams() external view returns (uint256, uint256);\r\n\r\n    function isValidLoanFactory(address) external view returns (bool);\r\n\r\n    function isValidSubFactory(address, address, uint8) external view returns (bool);\r\n\r\n    function isValidPoolFactory(address) external view returns (bool);\r\n    \r\n    function getLatestPrice(address) external view returns (uint256);\r\n    \r\n    function defaultUniswapPath(address, address) external view returns (address);\r\n\r\n    function minLoanEquity() external view returns (uint256);\r\n    \r\n    function maxSwapSlippage() external view returns (uint256);\r\n\r\n    function protocolPaused() external view returns (bool);\r\n\r\n    function stakerCooldownPeriod() external view returns (uint256);\r\n\r\n    function lpCooldownPeriod() external view returns (uint256);\r\n\r\n    function stakerUnstakeWindow() external view returns (uint256);\r\n\r\n    function lpWithdrawWindow() external view returns (uint256);\r\n\r\n    function oracleFor(address) external view returns (address);\r\n\r\n    function validSubFactories(address, address) external view returns (bool);\r\n\r\n    function setStakerCooldownPeriod(uint256) external;\r\n\r\n    function setLpCooldownPeriod(uint256) external;\r\n\r\n    function setStakerUnstakeWindow(uint256) external;\r\n\r\n    function setLpWithdrawWindow(uint256) external;\r\n\r\n    function setMaxSwapSlippage(uint256) external;\r\n\r\n    function setGlobalAdmin(address) external;\r\n\r\n    function setValidBalancerPool(address, bool) external;\r\n\r\n    function setProtocolPause(bool) external;\r\n\r\n    function setValidPoolFactory(address, bool) external;\r\n\r\n    function setValidLoanFactory(address, bool) external;\r\n\r\n    function setValidSubFactory(address, address, bool) external;\r\n\r\n    function setDefaultUniswapPath(address, address, address) external;\r\n\r\n    function setPoolDelegateAllowlist(address, bool) external;\r\n\r\n    function setCollateralAsset(address, bool) external;\r\n\r\n    function setLiquidityAsset(address, bool) external;\r\n\r\n    function setCalc(address, bool) external;\r\n\r\n    function setInvestorFee(uint256) external;\r\n\r\n    function setTreasuryFee(uint256) external;\r\n\r\n    function setMapleTreasury(address) external;\r\n\r\n    function setDefaultGracePeriod(uint256) external;\r\n\r\n    function setMinLoanEquity(uint256) external;\r\n\r\n    function setFundingPeriod(uint256) external;\r\n\r\n    function setSwapOutRequired(uint256) external;\r\n\r\n    function setPriceOracle(address, address) external;\r\n\r\n    function setPendingGovernor(address) external;\r\n\r\n    function acceptGovernor() external;\r\n\r\n}\r\n\r\n////// contracts/token/interfaces/IExtendedFDT.sol\r\n/* pragma solidity 0.6.11; */\r\n\r\n/* import \"./IBasicFDT.sol\"; */\r\n\r\ninterface IExtendedFDT is IBasicFDT {\r\n\r\n    event LossesPerShareUpdated(uint256);\r\n\r\n    event LossesCorrectionUpdated(address indexed, int256);\r\n\r\n    event LossesDistributed(address indexed, uint256);\r\n\r\n    event LossesRecognized(address indexed, uint256, uint256);\r\n\r\n    function lossesPerShare() external view returns (uint256);\r\n\r\n    function recognizableLossesOf(address) external view returns (uint256);\r\n\r\n    function recognizedLossesOf(address) external view returns (uint256);\r\n\r\n    function accumulativeLossesOf(address) external view returns (uint256);\r\n\r\n    function updateLossesReceived() external;\r\n\r\n}\r\n\r\n////// contracts/token/interfaces/IStakeLockerFDT.sol\r\n/* pragma solidity 0.6.11; */\r\n\r\n/* import \"./IExtendedFDT.sol\"; */\r\n\r\ninterface IStakeLockerFDT is IExtendedFDT {\r\n\r\n    function fundsToken() external view returns (address);\r\n\r\n    function fundsTokenBalance() external view returns (uint256);\r\n\r\n    function bptLosses() external view returns (uint256);\r\n\r\n    function lossesBalance() external view returns (uint256);\r\n\r\n}\r\n\r\n////// contracts/interfaces/IStakeLocker.sol\r\n/* pragma solidity 0.6.11; */\r\n\r\n/* import \"../token/interfaces/IStakeLockerFDT.sol\"; */\r\n\r\ninterface IStakeLocker is IStakeLockerFDT {\r\n\r\n    function stakeDate(address) external returns (uint256);\r\n\r\n    function stake(uint256) external;\r\n\r\n    function unstake(uint256) external;\r\n\r\n    function pull(address, uint256) external;\r\n\r\n    function setAllowlist(address, bool) external;\r\n\r\n    function openStakeLockerToPublic() external;\r\n\r\n    function openToPublic() external view returns (bool);\r\n\r\n    function allowed(address) external view returns (bool);\r\n\r\n    function updateLosses(uint256) external;\r\n\r\n    function intendToUnstake() external;\r\n\r\n    function unstakeCooldown(address) external view returns (uint256);\r\n\r\n    function lockupPeriod() external view returns (uint256);\r\n\r\n    function stakeAsset() external view returns (address);\r\n\r\n    function liquidityAsset() external view returns (address);\r\n\r\n    function pool() external view returns (address);\r\n\r\n    function setLockupPeriod(uint256) external;\r\n\r\n    function cancelUnstake() external;\r\n\r\n    function increaseCustodyAllowance(address, uint256) external;\r\n\r\n    function transferByCustodian(address, address, uint256) external;\r\n\r\n    function pause() external;\r\n\r\n    function unpause() external;\r\n\r\n    function isUnstakeAllowed(address) external view returns (bool);\r\n\r\n    function isReceiveAllowed(uint256) external view returns (bool);\r\n\r\n}\r\n\r\n////// lib/openzeppelin-contracts/contracts/math/SafeMath.sol\r\n/* pragma solidity >=0.6.0 <0.8.0; */\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts with custom message when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n////// lib/openzeppelin-contracts/contracts/utils/Address.sol\r\n/* pragma solidity >=0.6.2 <0.8.0; */\r\n\r\n/**\r\n * @dev Collection of functions related to the address type\r\n */\r\nlibrary Address {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     *\r\n     * Among others, `isContract` will return false for the following\r\n     * types of addresses:\r\n     *\r\n     *  - an externally-owned account\r\n     *  - a contract in construction\r\n     *  - an address where a contract will be created\r\n     *  - an address where a contract lived, but was destroyed\r\n     * ====\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // This method relies on extcodesize, which returns 0 for contracts in\r\n        // construction, since the code is only stored at the end of the\r\n        // constructor execution.\r\n\r\n        uint256 size;\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly { size := extcodesize(account) }\r\n        return size > 0;\r\n    }\r\n\r\n    /**\r\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * IMPORTANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     */\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\r\n        (bool success, ) = recipient.call{ value: amount }(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n\r\n    /**\r\n     * @dev Performs a Solidity function call using a low level `call`. A\r\n     * plain`call` is an unsafe replacement for a function call: use this\r\n     * function instead.\r\n     *\r\n     * If `target` reverts with a revert reason, it is bubbled up by this\r\n     * function (like regular Solidity function calls).\r\n     *\r\n     * Returns the raw returned data. To convert to the expected return value,\r\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `target` must be a contract.\r\n     * - calling `target` with `data` must not revert.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n      return functionCall(target, data, \"Address: low-level call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\r\n     * `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but also transferring `value` wei to `target`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the calling contract must have an ETH balance of at least `value`.\r\n     * - the called Solidity function must be `payable`.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\r\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\r\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\r\n        require(isContract(target), \"Address: call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\r\n        return _verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\r\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\r\n        require(isContract(target), \"Address: static call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.staticcall(data);\r\n        return _verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            // Look for revert reason and bubble it up if present\r\n            if (returndata.length > 0) {\r\n                // The easiest way to bubble the revert reason is using memory via assembly\r\n\r\n                // solhint-disable-next-line no-inline-assembly\r\n                assembly {\r\n                    let returndata_size := mload(returndata)\r\n                    revert(add(32, returndata), returndata_size)\r\n                }\r\n            } else {\r\n                revert(errorMessage);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n////// lib/openzeppelin-contracts/contracts/token/ERC20/SafeERC20.sol\r\n/* pragma solidity >=0.6.0 <0.8.0; */\r\n\r\n/* import \"./IERC20.sol\"; */\r\n/* import \"../../math/SafeMath.sol\"; */\r\n/* import \"../../utils/Address.sol\"; */\r\n\r\n/**\r\n * @title SafeERC20\r\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\r\n * contract returns false). Tokens that return no value (and instead revert or\r\n * throw on failure) are also supported, non-reverting calls are assumed to be\r\n * successful.\r\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\r\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\r\n */\r\nlibrary SafeERC20 {\r\n    using SafeMath for uint256;\r\n    using Address for address;\r\n\r\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\r\n    }\r\n\r\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\r\n    }\r\n\r\n    /**\r\n     * @dev Deprecated. This function has issues similar to the ones found in\r\n     * {IERC20-approve}, and its usage is discouraged.\r\n     *\r\n     * Whenever possible, use {safeIncreaseAllowance} and\r\n     * {safeDecreaseAllowance} instead.\r\n     */\r\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\r\n        // safeApprove should only be called when setting an initial allowance,\r\n        // or when resetting it to zero. To increase and decrease it, use\r\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\r\n        // solhint-disable-next-line max-line-length\r\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\r\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\r\n        );\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\r\n    }\r\n\r\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \"SafeERC20: decreased allowance below zero\");\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    /**\r\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\r\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\r\n     * @param token The token targeted by the call.\r\n     * @param data The call data (encoded using abi.encode or one of its variants).\r\n     */\r\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\r\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\r\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\r\n        // the target address contains contract code and also asserts for success in the low-level call.\r\n\r\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\r\n        if (returndata.length > 0) { // Return data is optional\r\n            // solhint-disable-next-line max-line-length\r\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\r\n        }\r\n    }\r\n}\r\n\r\n////// contracts/library/PoolLib.sol\r\n/* pragma solidity 0.6.11; */\r\n\r\n/* import \"lib/openzeppelin-contracts/contracts/math/SafeMath.sol\"; */\r\n/* import \"lib/openzeppelin-contracts/contracts/token/ERC20/SafeERC20.sol\"; */\r\n/* import \"../interfaces/ILoan.sol\"; */\r\n/* import \"../interfaces/IBPool.sol\"; */\r\n/* import \"../interfaces/IMapleGlobals.sol\"; */\r\n/* import \"../interfaces/ILiquidityLocker.sol\"; */\r\n/* import \"../interfaces/IERC20Details.sol\"; */\r\n/* import \"../interfaces/ILoanFactory.sol\"; */\r\n/* import \"../interfaces/IStakeLocker.sol\"; */\r\n/* import \"../interfaces/IDebtLockerFactory.sol\"; */\r\n\r\n/// @title PoolLib is a library of utility functions used by Pool.\r\nlibrary PoolLib {\r\n\r\n    using SafeMath for uint256;\r\n    using SafeERC20 for IERC20;\r\n\r\n    uint256 public constant MAX_UINT256 = uint256(-1);\r\n    uint256 public constant WAD         = 10 ** 18;\r\n    uint8   public constant DL_FACTORY  = 1;         // Factory type of DebtLockerFactory\r\n\r\n    event         LoanFunded(address indexed loan, address debtLocker, uint256 amountFunded);\r\n    event DepositDateUpdated(address indexed liquidityProvider, uint256 depositDate);\r\n\r\n    /***************************************/\r\n    /*** Pool Delegate Utility Functions ***/\r\n    /***************************************/\r\n\r\n    /** \r\n        @dev   Conducts sanity checks for Pools in the constructor.\r\n        @param globals        Instance of a MapleGlobals.\r\n        @param liquidityAsset Asset used by Pool for liquidity to fund loans.\r\n        @param stakeAsset     Asset escrowed in StakeLocker.\r\n        @param stakingFee     Fee that the Stakers earn on interest, in basis points.\r\n        @param delegateFee    Fee that the Pool Delegate earns on interest, in basis points.\r\n    */\r\n    function poolSanityChecks(\r\n        IMapleGlobals globals, \r\n        address liquidityAsset, \r\n        address stakeAsset, \r\n        uint256 stakingFee, \r\n        uint256 delegateFee\r\n    ) external view {\r\n        IBPool bPool = IBPool(stakeAsset);\r\n\r\n        require(globals.isValidLiquidityAsset(liquidityAsset), \"P:INVALID_LIQ_ASSET\");\r\n        require(stakingFee.add(delegateFee) <= 10_000,         \"P:INVALID_FEES\");\r\n        require(\r\n            globals.isValidBalancerPool(address(stakeAsset)) &&\r\n            bPool.isBound(globals.mpl())                     && \r\n            bPool.isBound(liquidityAsset)                    &&\r\n            bPool.isFinalized(), \r\n            \"P:INVALID_BALANCER_POOL\"\r\n        );\r\n    }\r\n\r\n    /**\r\n        @dev   Funds a Loan for an amount, utilizing the supplied DebtLockerFactory for DebtLockers.\r\n        @dev   It emits a `LoanFunded` event.\r\n        @param debtLockers     Mapping contains the DebtLocker contract address corresponding to the DebtLockerFactory and Loan.\r\n        @param superFactory    Address of the PoolFactory.\r\n        @param liquidityLocker Address of the LiquidityLocker contract attached with this Pool.\r\n        @param loan            Address of the Loan to fund.\r\n        @param dlFactory       The DebtLockerFactory to utilize.\r\n        @param amt             Amount to fund the Loan.\r\n    */\r\n    function fundLoan(\r\n        mapping(address => mapping(address => address)) storage debtLockers,\r\n        address superFactory,\r\n        address liquidityLocker,\r\n        address loan,\r\n        address dlFactory,\r\n        uint256 amt\r\n    ) external {\r\n        IMapleGlobals globals = IMapleGlobals(ILoanFactory(superFactory).globals());\r\n        address loanFactory   = ILoan(loan).superFactory();\r\n\r\n        // Auth checks.\r\n        require(globals.isValidLoanFactory(loanFactory),                        \"P:INVALID_LF\");\r\n        require(ILoanFactory(loanFactory).isLoan(loan),                         \"P:INVALID_L\");\r\n        require(globals.isValidSubFactory(superFactory, dlFactory, DL_FACTORY), \"P:INVALID_DLF\");\r\n\r\n        address debtLocker = debtLockers[loan][dlFactory];\r\n\r\n        // Instantiate DebtLocker if it doesn't exist withing this factory\r\n        if (debtLocker == address(0)) {\r\n            debtLocker = IDebtLockerFactory(dlFactory).newLocker(loan);\r\n            debtLockers[loan][dlFactory] = debtLocker;\r\n        }\r\n    \r\n        // Fund the Loan.\r\n        ILiquidityLocker(liquidityLocker).fundLoan(loan, debtLocker, amt);\r\n        \r\n        emit LoanFunded(loan, debtLocker, amt);\r\n    }\r\n\r\n    /**\r\n        @dev    Helper function used by Pool `claim` function, for when if a default has occurred.\r\n        @param  liquidityAsset                  IERC20 of Liquidity Asset.\r\n        @param  stakeLocker                     Address of StakeLocker.\r\n        @param  stakeAsset                      Address of BPTs.\r\n        @param  defaultSuffered                 Amount of shortfall in defaulted Loan after liquidation.\r\n        @return bptsBurned                      Amount of BPTs burned to cover shortfall.\r\n        @return postBurnBptBal                  Amount of BPTs returned to StakeLocker after burn.\r\n        @return liquidityAssetRecoveredFromBurn Amount of Liquidity Asset recovered from burn.\r\n    */\r\n    function handleDefault(\r\n        IERC20  liquidityAsset,\r\n        address stakeLocker,\r\n        address stakeAsset,\r\n        uint256 defaultSuffered\r\n    ) \r\n        external\r\n        returns (\r\n            uint256 bptsBurned,\r\n            uint256 postBurnBptBal,\r\n            uint256 liquidityAssetRecoveredFromBurn\r\n        ) \r\n    {\r\n\r\n        IBPool bPool = IBPool(stakeAsset);  // stakeAsset = Balancer Pool Tokens\r\n\r\n        // Check amount of Liquidity Asset coverage that exists in the StakeLocker.\r\n        uint256 availableSwapOut = getSwapOutValueLocker(stakeAsset, address(liquidityAsset), stakeLocker);\r\n\r\n        // Pull BPTs from StakeLocker.\r\n        IStakeLocker(stakeLocker).pull(address(this), bPool.balanceOf(stakeLocker));\r\n\r\n        // To maintain accounting, account for direct transfers into Pool.\r\n        uint256 preBurnLiquidityAssetBal = liquidityAsset.balanceOf(address(this));\r\n        uint256 preBurnBptBal            = bPool.balanceOf(address(this));\r\n\r\n        // Burn enough BPTs for Liquidity Asset to cover default suffered.\r\n        bPool.exitswapExternAmountOut(\r\n            address(liquidityAsset), \r\n            availableSwapOut >= defaultSuffered ? defaultSuffered : availableSwapOut,  // Burn BPTs up to defaultSuffered amount\r\n            preBurnBptBal\r\n        );\r\n\r\n        // Return remaining BPTs to StakeLocker.\r\n        postBurnBptBal = bPool.balanceOf(address(this));\r\n        bptsBurned     = preBurnBptBal.sub(postBurnBptBal);\r\n        bPool.transfer(stakeLocker, postBurnBptBal);\r\n        liquidityAssetRecoveredFromBurn = liquidityAsset.balanceOf(address(this)).sub(preBurnLiquidityAssetBal);\r\n        IStakeLocker(stakeLocker).updateLosses(bptsBurned);  // Update StakeLockerFDT loss accounting for BPTs\r\n    }\r\n\r\n    /**\r\n        @dev    Calculates portions of claim from DebtLocker to be used by Pool `claim` function.\r\n        @param  claimInfo           [0] = Total Claimed\r\n                                    [1] = Interest Claimed\r\n                                    [2] = Principal Claimed\r\n                                    [3] = Fee Claimed\r\n                                    [4] = Excess Returned Claimed\r\n                                    [5] = Amount Recovered (from Liquidation)\r\n                                    [6] = Default Suffered\r\n        @param  delegateFee         Portion of interest (basis points) that goes to the Pool Delegate.\r\n        @param  stakingFee          Portion of interest (basis points) that goes to the StakeLocker.\r\n        @return poolDelegatePortion Total funds to send to the Pool Delegate.\r\n        @return stakeLockerPortion  Total funds to send to the StakeLocker.\r\n        @return principalClaim      Total principal claim.\r\n        @return interestClaim       Total interest claim.\r\n    */\r\n    function calculateClaimAndPortions(\r\n        uint256[7] calldata claimInfo,\r\n        uint256 delegateFee,\r\n        uint256 stakingFee\r\n    ) \r\n        external\r\n        pure\r\n        returns (\r\n            uint256 poolDelegatePortion,\r\n            uint256 stakeLockerPortion,\r\n            uint256 principalClaim,\r\n            uint256 interestClaim\r\n        ) \r\n    { \r\n        poolDelegatePortion = claimInfo[1].mul(delegateFee).div(10_000).add(claimInfo[3]);  // Pool Delegate portion of interest plus fee.\r\n        stakeLockerPortion  = claimInfo[1].mul(stakingFee).div(10_000);                     // StakeLocker portion of interest.\r\n\r\n        principalClaim = claimInfo[2].add(claimInfo[4]).add(claimInfo[5]);                                     // principal + excess + amountRecovered\r\n        interestClaim  = claimInfo[1].sub(claimInfo[1].mul(delegateFee).div(10_000)).sub(stakeLockerPortion);  // leftover interest\r\n    }\r\n\r\n    /**\r\n        @dev   Checks that the deactivation is allowed.\r\n        @param globals        Instance of a MapleGlobals.\r\n        @param principalOut   Amount of funds that are already funded to Loans.\r\n        @param liquidityAsset Liquidity Asset of the Pool.\r\n    */\r\n    function validateDeactivation(IMapleGlobals globals, uint256 principalOut, address liquidityAsset) external view {\r\n        require(principalOut <= _convertFromUsd(globals, liquidityAsset, 100), \"P:PRINCIPAL_OUTSTANDING\");\r\n    }\r\n\r\n    /********************************************/\r\n    /*** Liquidity Provider Utility Functions ***/\r\n    /********************************************/\r\n\r\n    /**\r\n        @dev   Updates the effective deposit date based on how much new capital has been added.\r\n               If more capital is added, the deposit date moves closer to the current timestamp.\r\n        @dev   It emits a `DepositDateUpdated` event.\r\n        @param amt     Total deposit amount.\r\n        @param account Address of account depositing.\r\n    */\r\n    function updateDepositDate(mapping(address => uint256) storage depositDate, uint256 balance, uint256 amt, address account) internal {\r\n        uint256 prevDate = depositDate[account];\r\n\r\n        // prevDate + (now - prevDate) * (amt / (balance + amt))\r\n        // NOTE: prevDate = 0 implies balance = 0, and equation reduces to now\r\n        uint256 newDate = (balance + amt) > 0\r\n            ? prevDate.add(block.timestamp.sub(prevDate).mul(amt).div(balance + amt))\r\n            : prevDate;\r\n\r\n        depositDate[account] = newDate;\r\n        emit DepositDateUpdated(account, newDate);\r\n    }\r\n\r\n    /**\r\n        @dev Performs all necessary checks for a `transferByCustodian` call.\r\n        @dev From and to must always be equal.\r\n    */\r\n    function transferByCustodianChecks(address from, address to, uint256 amount) external pure {\r\n        require(to == from,                 \"P:INVALID_RECEIVER\");\r\n        require(amount != uint256(0),       \"P:INVALID_AMT\");\r\n    }\r\n\r\n    /**\r\n        @dev Performs all necessary checks for an `increaseCustodyAllowance` call.\r\n    */\r\n    function increaseCustodyAllowanceChecks(address custodian, uint256 amount, uint256 newTotalAllowance, uint256 fdtBal) external pure {\r\n        require(custodian != address(0),     \"P:INVALID_CUSTODIAN\");\r\n        require(amount    != uint256(0),     \"P:INVALID_AMT\");\r\n        require(newTotalAllowance <= fdtBal, \"P:INSUF_BALANCE\");\r\n    }\r\n\r\n    /**********************************/\r\n    /*** Governor Utility Functions ***/\r\n    /**********************************/\r\n\r\n    /**\r\n        @dev   Transfers any locked funds to the Governor. Only the Governor can call this function.\r\n        @param token          Address of the token to be reclaimed.\r\n        @param liquidityAsset Address of Liquidity Asset that is supported by the Pool.\r\n        @param globals        Instance of a MapleGlobals.\r\n    */\r\n    function reclaimERC20(address token, address liquidityAsset, IMapleGlobals globals) external {\r\n        require(msg.sender == globals.governor(), \"P:NOT_GOV\");\r\n        require(token != liquidityAsset && token != address(0), \"P:INVALID_TOKEN\");\r\n        IERC20(token).safeTransfer(msg.sender, IERC20(token).balanceOf(address(this)));\r\n    }\r\n\r\n    /************************/\r\n    /*** Getter Functions ***/\r\n    /************************/\r\n\r\n    /**\r\n        @dev Official Balancer pool bdiv() function. Does synthetic float with 10^-18 precision.\r\n    */\r\n    function _bdiv(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b != 0, \"P:DIV_ZERO\");\r\n        uint256 c0 = a * WAD;\r\n        require(a == 0 || c0 / a == WAD, \"P:DIV_INTERNAL\");  // bmul overflow\r\n        uint256 c1 = c0 + (b / 2);\r\n        require(c1 >= c0, \"P:DIV_INTERNAL\");  //  badd require\r\n        return c1 / b;\r\n    }\r\n\r\n    /**\r\n        @dev    Calculates the value of BPT in units of Liquidity Asset.\r\n        @dev    Vulnerable to flash-loan attacks where the attacker can artificially inflate the BPT price by swapping a large amount\r\n                of Liquidity Asset into the Pool and swapping back after this function is called.\r\n        @param  _bPool         Address of Balancer pool.\r\n        @param  liquidityAsset Asset used by Pool for liquidity to fund Loans.\r\n        @param  staker         Address that deposited BPTs to StakeLocker.\r\n        @param  stakeLocker    Escrows BPTs deposited by Staker.\r\n        @return USDC value of Staker BPTs.\r\n    */\r\n    function BPTVal(\r\n        address _bPool,\r\n        address liquidityAsset,\r\n        address staker,\r\n        address stakeLocker\r\n    ) external view returns (uint256) {\r\n        IBPool bPool = IBPool(_bPool);\r\n\r\n        // StakeLockerFDTs are minted 1:1 (in wei) in the StakeLocker when staking BPTs, thus representing stake amount.\r\n        // These are burned when withdrawing staked BPTs, thus representing the current stake amount.\r\n        uint256 amountStakedBPT       = IERC20(stakeLocker).balanceOf(staker);\r\n        uint256 totalSupplyBPT        = IERC20(_bPool).totalSupply();\r\n        uint256 liquidityAssetBalance = bPool.getBalance(liquidityAsset);\r\n        uint256 liquidityAssetWeight  = bPool.getNormalizedWeight(liquidityAsset);\r\n\r\n        // liquidityAsset value = (amountStaked/totalSupply) * (liquidityAssetBalance/liquidityAssetWeight)\r\n        return _bdiv(amountStakedBPT, totalSupplyBPT).mul(_bdiv(liquidityAssetBalance, liquidityAssetWeight)).div(WAD);\r\n    }\r\n\r\n    /** \r\n        @dev    Calculates Liquidity Asset swap out value of staker BPT balance escrowed in StakeLocker.\r\n        @param  _bPool         Balancer pool that issues the BPTs.\r\n        @param  liquidityAsset Swap out asset (e.g. USDC) to receive when burning BPTs.\r\n        @param  staker         Address that deposited BPTs to StakeLocker.\r\n        @param  stakeLocker    Escrows BPTs deposited by Staker.\r\n        @return liquidityAsset Swap out value of staker BPTs.\r\n    */\r\n    function getSwapOutValue(\r\n        address _bPool,\r\n        address liquidityAsset,\r\n        address staker,\r\n        address stakeLocker\r\n    ) public view returns (uint256) {\r\n        return _getSwapOutValue(_bPool, liquidityAsset, IERC20(stakeLocker).balanceOf(staker));\r\n    }\r\n\r\n    /** \r\n        @dev    Calculates Liquidity Asset swap out value of entire BPT balance escrowed in StakeLocker.\r\n        @param  _bPool         Balancer pool that issues the BPTs.\r\n        @param  liquidityAsset Swap out asset (e.g. USDC) to receive when burning BPTs.\r\n        @param  stakeLocker    Escrows BPTs deposited by Staker.\r\n        @return liquidityAsset Swap out value of StakeLocker BPTs.\r\n    */\r\n    function getSwapOutValueLocker(\r\n        address _bPool,\r\n        address liquidityAsset,\r\n        address stakeLocker\r\n    ) public view returns (uint256) {\r\n        return _getSwapOutValue(_bPool, liquidityAsset, IBPool(_bPool).balanceOf(stakeLocker));\r\n    }\r\n\r\n    function _getSwapOutValue(\r\n        address _bPool,\r\n        address liquidityAsset,\r\n        uint256 poolAmountIn\r\n    ) internal view returns (uint256) {\r\n        // Fetch Balancer pool token information\r\n        IBPool bPool            = IBPool(_bPool);\r\n        uint256 tokenBalanceOut = bPool.getBalance(liquidityAsset);\r\n        uint256 tokenWeightOut  = bPool.getDenormalizedWeight(liquidityAsset);\r\n        uint256 poolSupply      = bPool.totalSupply();\r\n        uint256 totalWeight     = bPool.getTotalDenormalizedWeight();\r\n        uint256 swapFee         = bPool.getSwapFee();\r\n\r\n        // Returns the amount of liquidityAsset that can be recovered from BPT burning\r\n        uint256 tokenAmountOut = bPool.calcSingleOutGivenPoolIn(\r\n            tokenBalanceOut,\r\n            tokenWeightOut,\r\n            poolSupply,\r\n            totalWeight,\r\n            poolAmountIn,\r\n            swapFee\r\n        );\r\n\r\n        // Max amount that can be swapped based on amount of liquidityAsset in the Balancer Pool\r\n        uint256 maxSwapOut = tokenBalanceOut.mul(bPool.MAX_OUT_RATIO()).div(WAD);  \r\n\r\n        return tokenAmountOut <= maxSwapOut ? tokenAmountOut : maxSwapOut;\r\n    }\r\n\r\n    /**\r\n        @dev    Calculates BPTs required if burning BPTs for liquidityAsset, given supplied tokenAmountOutRequired.\r\n        @dev    Vulnerable to flash-loan attacks where the attacker can artificially inflate the BPT price by swapping a large amount\r\n                of liquidityAsset into the pool and swapping back after this function is called.\r\n        @param  _bPool                       Balancer pool that issues the BPTs.\r\n        @param  liquidityAsset               Swap out asset (e.g. USDC) to receive when burning BPTs.\r\n        @param  staker                       Address that deposited BPTs to stakeLocker.\r\n        @param  stakeLocker                  Escrows BPTs deposited by staker.\r\n        @param  liquidityAssetAmountRequired Amount of liquidityAsset required to recover.\r\n        @return poolAmountInRequired         poolAmountIn required.\r\n        @return stakerBalance                poolAmountIn currently staked.\r\n    */\r\n    function getPoolSharesRequired(\r\n        address _bPool,\r\n        address liquidityAsset,\r\n        address staker,\r\n        address stakeLocker,\r\n        uint256 liquidityAssetAmountRequired\r\n    ) public view returns (uint256 poolAmountInRequired, uint256 stakerBalance) {\r\n        // Fetch Balancer pool token information.\r\n        IBPool bPool = IBPool(_bPool);\r\n\r\n        uint256 tokenBalanceOut = bPool.getBalance(liquidityAsset);\r\n        uint256 tokenWeightOut  = bPool.getDenormalizedWeight(liquidityAsset);\r\n        uint256 poolSupply      = bPool.totalSupply();\r\n        uint256 totalWeight     = bPool.getTotalDenormalizedWeight();\r\n        uint256 swapFee         = bPool.getSwapFee();\r\n\r\n        // Fetch amount of BPTs required to burn to receive Liquidity Asset amount required.\r\n        poolAmountInRequired = bPool.calcPoolInGivenSingleOut(\r\n            tokenBalanceOut,\r\n            tokenWeightOut,\r\n            poolSupply,\r\n            totalWeight,\r\n            liquidityAssetAmountRequired,\r\n            swapFee\r\n        );\r\n\r\n        // Fetch amount staked in StakeLocker by Staker.\r\n        stakerBalance = IERC20(stakeLocker).balanceOf(staker);\r\n    }\r\n\r\n    /**\r\n        @dev    Returns information on the stake requirements.\r\n        @param  globals                    Instance of a MapleGlobals.\r\n        @param  balancerPool               Address of Balancer pool.\r\n        @param  liquidityAsset             Address of Liquidity Asset, to be returned from swap out.\r\n        @param  poolDelegate               Address of Pool Delegate.\r\n        @param  stakeLocker                Address of StakeLocker.\r\n        @return swapOutAmountRequired      Min amount of Liquidity Asset coverage from staking required (in Liquidity Asset units).\r\n        @return currentPoolDelegateCover   Present amount of Liquidity Asset coverage from Pool Delegate stake (in Liquidity Asset units).\r\n        @return enoughStakeForFinalization If enough stake is present from Pool Delegate for Pool finalization.\r\n        @return poolAmountInRequired       BPTs required for minimum Liquidity Asset coverage.\r\n        @return poolAmountPresent          Current staked BPTs.\r\n    */\r\n    function getInitialStakeRequirements(IMapleGlobals globals, address balancerPool, address liquidityAsset, address poolDelegate, address stakeLocker) external view returns (\r\n        uint256 swapOutAmountRequired,\r\n        uint256 currentPoolDelegateCover,\r\n        bool    enoughStakeForFinalization,\r\n        uint256 poolAmountInRequired,\r\n        uint256 poolAmountPresent\r\n    ) {\r\n        swapOutAmountRequired = _convertFromUsd(globals, liquidityAsset, globals.swapOutRequired());\r\n        (\r\n            poolAmountInRequired,\r\n            poolAmountPresent\r\n        ) = getPoolSharesRequired(balancerPool, liquidityAsset, poolDelegate, stakeLocker, swapOutAmountRequired);\r\n\r\n        currentPoolDelegateCover   = getSwapOutValue(balancerPool, liquidityAsset, poolDelegate, stakeLocker);\r\n        enoughStakeForFinalization = poolAmountPresent >= poolAmountInRequired;\r\n    }\r\n\r\n    /************************/\r\n    /*** Helper Functions ***/\r\n    /************************/\r\n\r\n    /**\r\n        @dev   Converts from WAD precision to Liquidity Asset precision.\r\n        @param amt                    Amount to convert.\r\n        @param liquidityAssetDecimals Liquidity Asset decimal.\r\n    */\r\n    function fromWad(uint256 amt, uint256 liquidityAssetDecimals) external pure returns (uint256) {\r\n        return amt.mul(10 ** liquidityAssetDecimals).div(WAD);\r\n    }\r\n\r\n    /** \r\n        @dev    Returns Liquidity Asset in Liquidity Asset units when given integer USD (E.g., $100 = 100).\r\n        @param  globals        Instance of a MapleGlobals.\r\n        @param  liquidityAsset Liquidity Asset of the pool.\r\n        @param  usdAmount      USD amount to convert, in integer units (e.g., $100 = 100).\r\n        @return usdAmount worth of Liquidity Asset, in Liquidity Asset units.\r\n    */\r\n    function _convertFromUsd(IMapleGlobals globals, address liquidityAsset, uint256 usdAmount) internal view returns (uint256) {\r\n        return usdAmount\r\n            .mul(10 ** 8)                                         // Cancel out 10 ** 8 decimals from oracle.\r\n            .mul(10 ** IERC20Details(liquidityAsset).decimals())  // Convert to Liquidity Asset precision.\r\n            .div(globals.getLatestPrice(liquidityAsset));         // Convert to Liquidity Asset value.\r\n    }\r\n}","ABI":"[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"liquidityProvider\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"depositDate\",\"type\":\"uint256\"}],\"name\":\"DepositDateUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"loan\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"debtLocker\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountFunded\",\"type\":\"uint256\"}],\"name\":\"LoanFunded\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_bPool\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"liquidityAsset\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"stakeLocker\",\"type\":\"address\"}],\"name\":\"BPTVal\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DL_FACTORY\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_UINT256\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"WAD\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[7]\",\"name\":\"claimInfo\",\"type\":\"uint256[7]\"},{\"internalType\":\"uint256\",\"name\":\"delegateFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stakingFee\",\"type\":\"uint256\"}],\"name\":\"calculateClaimAndPortions\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"poolDelegatePortion\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stakeLockerPortion\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"principalClaim\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"interestClaim\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"liquidityAssetDecimals\",\"type\":\"uint256\"}],\"name\":\"fromWad\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IMapleGlobals\",\"name\":\"globals\",\"type\":\"IMapleGlobals\"},{\"internalType\":\"address\",\"name\":\"balancerPool\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"liquidityAsset\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"poolDelegate\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"stakeLocker\",\"type\":\"address\"}],\"name\":\"getInitialStakeRequirements\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"swapOutAmountRequired\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"currentPoolDelegateCover\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"enoughStakeForFinalization\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"poolAmountInRequired\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"poolAmountPresent\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_bPool\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"liquidityAsset\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"stakeLocker\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"liquidityAssetAmountRequired\",\"type\":\"uint256\"}],\"name\":\"getPoolSharesRequired\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"poolAmountInRequired\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stakerBalance\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_bPool\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"liquidityAsset\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"stakeLocker\",\"type\":\"address\"}],\"name\":\"getSwapOutValue\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_bPool\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"liquidityAsset\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"stakeLocker\",\"type\":\"address\"}],\"name\":\"getSwapOutValueLocker\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"custodian\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"newTotalAllowance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"fdtBal\",\"type\":\"uint256\"}],\"name\":\"increaseCustodyAllowanceChecks\",\"outputs\":[],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IMapleGlobals\",\"name\":\"globals\",\"type\":\"IMapleGlobals\"},{\"internalType\":\"address\",\"name\":\"liquidityAsset\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"stakeAsset\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"stakingFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"delegateFee\",\"type\":\"uint256\"}],\"name\":\"poolSanityChecks\",\"outputs\":[],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferByCustodianChecks\",\"outputs\":[],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IMapleGlobals\",\"name\":\"globals\",\"type\":\"IMapleGlobals\"},{\"internalType\":\"uint256\",\"name\":\"principalOut\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"liquidityAsset\",\"type\":\"address\"}],\"name\":\"validateDeactivation\",\"outputs\":[],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"PoolLib","CompilerVersion":"v0.6.11+commit.5ef660b1","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"Unknown","Proxy":"0","Implementation":"","SwarmSource":"ipfs://51c59efe3b0a3153d31727cb7524039a24406e12d3356998d4c3f519255cefee"}]}