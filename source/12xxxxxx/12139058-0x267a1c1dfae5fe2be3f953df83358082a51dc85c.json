{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity >=0.7.5;\r\n\r\n// SPDX-License-Identifier: BSD-3-Clause\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a * b;\r\n        assert(a == 0 || c / a == b);\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        assert(b <= a);\r\n        return a - b;\r\n    }\r\n\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        assert(c >= a);\r\n        return c;\r\n    }\r\n}\r\n\r\n/**\r\n * @dev Library for managing\r\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\r\n * types.\r\n *\r\n * Sets have the following properties:\r\n *\r\n * - Elements are added, removed, and checked for existence in constant time\r\n * (O(1)).\r\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\r\n *\r\n * ```\r\n * contract Example {\r\n *     // Add the library methods\r\n *     using EnumerableSet for EnumerableSet.AddressSet;\r\n *\r\n *     // Declare a set state variable\r\n *     EnumerableSet.AddressSet private mySet;\r\n * }\r\n * ```\r\n *\r\n * As of v3.0.0, only sets of type `address` (`AddressSet`) and `uint256`\r\n * (`UintSet`) are supported.\r\n */\r\nlibrary EnumerableSet {\r\n    // To implement this library for multiple types with as little code\r\n    // repetition as possible, we write it in terms of a generic Set type with\r\n    // bytes32 values.\r\n    // The Set implementation uses private functions, and user-facing\r\n    // implementations (such as AddressSet) are just wrappers around the\r\n    // underlying Set.\r\n    // This means that we can only create new EnumerableSets for types that fit\r\n    // in bytes32.\r\n\r\n    struct Set {\r\n        // Storage of set values\r\n        bytes32[] _values;\r\n        // Position of the value in the `values` array, plus 1 because index 0\r\n        // means a value is not in the set.\r\n        mapping(bytes32 => uint256) _indexes;\r\n    }\r\n\r\n    /**\r\n     * @dev Add a value to a set. O(1).\r\n     *\r\n     * Returns true if the value was added to the set, that is if it was not\r\n     * already present.\r\n     */\r\n    function _add(Set storage set, bytes32 value) private returns (bool) {\r\n        if (!_contains(set, value)) {\r\n            set._values.push(value);\r\n            // The value is stored at length-1, but we add 1 to all indexes\r\n            // and use 0 as a sentinel value\r\n            set._indexes[value] = set._values.length;\r\n            return true;\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Removes a value from a set. O(1).\r\n     *\r\n     * Returns true if the value was removed from the set, that is if it was\r\n     * present.\r\n     */\r\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\r\n        // We read and store the value's index to prevent multiple reads from the same storage slot\r\n        uint256 valueIndex = set._indexes[value];\r\n\r\n        if (valueIndex != 0) {\r\n            // Equivalent to contains(set, value)\r\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\r\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\r\n            // This modifies the order of the array, as noted in {at}.\r\n\r\n            uint256 toDeleteIndex = valueIndex - 1;\r\n            uint256 lastIndex = set._values.length - 1;\r\n\r\n            // When the value to delete is the last one, the swap operation is unnecessary. However, since this occurs\r\n            // so rarely, we still do the swap anyway to avoid the gas cost of adding an 'if' statement.\r\n\r\n            bytes32 lastvalue = set._values[lastIndex];\r\n\r\n            // Move the last value to the index where the value to delete is\r\n            set._values[toDeleteIndex] = lastvalue;\r\n            // Update the index for the moved value\r\n            set._indexes[lastvalue] = toDeleteIndex + 1; // All indexes are 1-based\r\n\r\n            // Delete the slot where the moved value was stored\r\n            set._values.pop();\r\n\r\n            // Delete the index for the deleted slot\r\n            delete set._indexes[value];\r\n\r\n            return true;\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the value is in the set. O(1).\r\n     */\r\n    function _contains(Set storage set, bytes32 value)\r\n        private\r\n        view\r\n        returns (bool)\r\n    {\r\n        return set._indexes[value] != 0;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of values on the set. O(1).\r\n     */\r\n    function _length(Set storage set) private view returns (uint256) {\r\n        return set._values.length;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the value stored at position `index` in the set. O(1).\r\n     *\r\n     * Note that there are no guarantees on the ordering of values inside the\r\n     * array, and it may change when more values are added or removed.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `index` must be strictly less than {length}.\r\n     */\r\n    function _at(Set storage set, uint256 index)\r\n        private\r\n        view\r\n        returns (bytes32)\r\n    {\r\n        require(\r\n            set._values.length > index,\r\n            \"EnumerableSet: index out of bounds\"\r\n        );\r\n        return set._values[index];\r\n    }\r\n\r\n    // AddressSet\r\n\r\n    struct AddressSet {\r\n        Set _inner;\r\n    }\r\n\r\n    /**\r\n     * @dev Add a value to a set. O(1).\r\n     *\r\n     * Returns true if the value was added to the set, that is if it was not\r\n     * already present.\r\n     */\r\n    function add(AddressSet storage set, address value)\r\n        internal\r\n        returns (bool)\r\n    {\r\n        return _add(set._inner, bytes32(uint256(value)));\r\n    }\r\n\r\n    /**\r\n     * @dev Removes a value from a set. O(1).\r\n     *\r\n     * Returns true if the value was removed from the set, that is if it was\r\n     * present.\r\n     */\r\n    function remove(AddressSet storage set, address value)\r\n        internal\r\n        returns (bool)\r\n    {\r\n        return _remove(set._inner, bytes32(uint256(value)));\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the value is in the set. O(1).\r\n     */\r\n    function contains(AddressSet storage set, address value)\r\n        internal\r\n        view\r\n        returns (bool)\r\n    {\r\n        return _contains(set._inner, bytes32(uint256(value)));\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of values in the set. O(1).\r\n     */\r\n    function length(AddressSet storage set) internal view returns (uint256) {\r\n        return _length(set._inner);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the value stored at position `index` in the set. O(1).\r\n     *\r\n     * Note that there are no guarantees on the ordering of values inside the\r\n     * array, and it may change when more values are added or removed.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `index` must be strictly less than {length}.\r\n     */\r\n    function at(AddressSet storage set, uint256 index)\r\n        internal\r\n        view\r\n        returns (address)\r\n    {\r\n        return address(uint256(_at(set._inner, index)));\r\n    }\r\n\r\n    // UintSet\r\n\r\n    struct UintSet {\r\n        Set _inner;\r\n    }\r\n\r\n    /**\r\n     * @dev Add a value to a set. O(1).\r\n     *\r\n     * Returns true if the value was added to the set, that is if it was not\r\n     * already present.\r\n     */\r\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\r\n        return _add(set._inner, bytes32(value));\r\n    }\r\n\r\n    /**\r\n     * @dev Removes a value from a set. O(1).\r\n     *\r\n     * Returns true if the value was removed from the set, that is if it was\r\n     * present.\r\n     */\r\n    function remove(UintSet storage set, uint256 value)\r\n        internal\r\n        returns (bool)\r\n    {\r\n        return _remove(set._inner, bytes32(value));\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the value is in the set. O(1).\r\n     */\r\n    function contains(UintSet storage set, uint256 value)\r\n        internal\r\n        view\r\n        returns (bool)\r\n    {\r\n        return _contains(set._inner, bytes32(value));\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of values on the set. O(1).\r\n     */\r\n    function length(UintSet storage set) internal view returns (uint256) {\r\n        return _length(set._inner);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the value stored at position `index` in the set. O(1).\r\n     *\r\n     * Note that there are no guarantees on the ordering of values inside the\r\n     * array, and it may change when more values are added or removed.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `index` must be strictly less than {length}.\r\n     */\r\n    function at(UintSet storage set, uint256 index)\r\n        internal\r\n        view\r\n        returns (uint256)\r\n    {\r\n        return uint256(_at(set._inner, index));\r\n    }\r\n}\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n    address public owner;\r\n\r\n    event OwnershipTransferred(\r\n        address indexed previousOwner,\r\n        address indexed newOwner\r\n    );\r\n\r\n    /**\r\n     * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n     * account.\r\n     */\r\n    constructor() {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n     * @param newOwner The address to transfer ownership to.\r\n     */\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        require(newOwner != address(0));\r\n        emit OwnershipTransferred(owner, newOwner);\r\n        owner = newOwner;\r\n    }\r\n}\r\n\r\ninterface Token {\r\n    function transferFrom(\r\n        address,\r\n        address,\r\n        uint256\r\n    ) external returns (bool);\r\n\r\n    function transfer(address, uint256) external returns (bool);\r\n}\r\n\r\ncontract YFTEFarming_TetherswapLP is Ownable {\r\n    using SafeMath for uint256;\r\n    using EnumerableSet for EnumerableSet.AddressSet;\r\n\r\n    event RewardsTransferred(address holder, uint256 amount);\r\n    event RewardsDisbursed(uint256 amount);\r\n\r\n    // Tetherswap ETH/YFTE LP token contract address\r\n    address public immutable LPtokenAddress;\r\n    //YFTether token address\r\n    address public immutable tokenAddress;\r\n    uint256 public immutable withdrawFeePercentX100;\r\n\r\n    uint256 public disburseAmount = 20e18;\r\n    uint256 public disburseDuration = 30 days;\r\n\r\n    uint256 public disbursePercentX100 = 10000;\r\n\r\n    uint256 public lastDisburseTime;\r\n\r\n    constructor(\r\n        address _lpTokenAddress,\r\n        address _tokenAddress,\r\n        uint256 _feePercentX100\r\n    ) {\r\n        LPtokenAddress = _lpTokenAddress;\r\n        tokenAddress = _tokenAddress;\r\n        withdrawFeePercentX100 = _feePercentX100;\r\n        lastDisburseTime = block.timestamp;\r\n    }\r\n\r\n    uint256 public totalClaimedRewards = 0;\r\n\r\n    EnumerableSet.AddressSet private holders;\r\n\r\n    mapping(address => uint256) public depositedTokens;\r\n    mapping(address => uint256) public depositTime;\r\n    mapping(address => uint256) public lastClaimedTime;\r\n    mapping(address => uint256) public totalEarnedTokens;\r\n    mapping(address => uint256) public lastDivPoints;\r\n\r\n    uint256 public totalTokensDisbursed = 0;\r\n    uint256 public contractBalance = 0;\r\n\r\n    uint256 public totalDivPoints = 0;\r\n    uint256 public totalTokens = 0;\r\n\r\n    uint256 internal pointMultiplier = 1e18;\r\n\r\n    function addContractBalance(uint256 amount) public onlyOwner {\r\n        require(\r\n            Token(tokenAddress).transferFrom(msg.sender, address(this), amount),\r\n            \"Cannot add balance!\"\r\n        );\r\n        contractBalance = contractBalance.add(amount);\r\n    }\r\n\r\n    function updateAccount(address account) private {\r\n        uint256 pendingDivs = getPendingDivs(account);\r\n        if (pendingDivs > 0) {\r\n            require(\r\n                Token(tokenAddress).transfer(account, pendingDivs),\r\n                \"Could not transfer tokens.\"\r\n            );\r\n            totalEarnedTokens[account] = totalEarnedTokens[account].add(\r\n                pendingDivs\r\n            );\r\n            totalClaimedRewards = totalClaimedRewards.add(pendingDivs);\r\n            emit RewardsTransferred(account, pendingDivs);\r\n        }\r\n        lastClaimedTime[account] = block.timestamp;\r\n        lastDivPoints[account] = totalDivPoints;\r\n    }\r\n\r\n    function getPendingDivs(address _holder) public view returns (uint256) {\r\n        if (!holders.contains(_holder)) return 0;\r\n        if (depositedTokens[_holder] == 0) return 0;\r\n\r\n        uint256 newDivPoints = totalDivPoints.sub(lastDivPoints[_holder]);\r\n\r\n        uint256 depositedAmount = depositedTokens[_holder];\r\n\r\n        uint256 pendingDivs =\r\n            depositedAmount.mul(newDivPoints).div(pointMultiplier);\r\n\r\n        return pendingDivs;\r\n    }\r\n\r\n    function getNumberOfHolders() public view returns (uint256) {\r\n        return holders.length();\r\n    }\r\n\r\n    function deposit(uint256 amountToDeposit) public {\r\n        require(amountToDeposit > 0, \"Cannot deposit 0 Tokens\");\r\n\r\n        updateAccount(msg.sender);\r\n\r\n        require(\r\n            Token(LPtokenAddress).transferFrom(\r\n                msg.sender,\r\n                address(this),\r\n                amountToDeposit\r\n            ),\r\n            \"Insufficient Token Allowance\"\r\n        );\r\n\r\n        depositedTokens[msg.sender] = depositedTokens[msg.sender].add(\r\n            amountToDeposit\r\n        );\r\n        totalTokens = totalTokens.add(amountToDeposit);\r\n\r\n        if (!holders.contains(msg.sender)) {\r\n            holders.add(msg.sender);\r\n            depositTime[msg.sender] = block.timestamp;\r\n        }\r\n    }\r\n\r\n    function withdraw(uint256 amountToWithdraw) public {\r\n        require(\r\n            depositedTokens[msg.sender] >= amountToWithdraw,\r\n            \"Invalid amount to withdraw\"\r\n        );\r\n\r\n        updateAccount(msg.sender);\r\n\r\n        uint256 fee = amountToWithdraw.mul(withdrawFeePercentX100).div(1e4);\r\n        uint256 amountAfterFee = amountToWithdraw.sub(fee);\r\n\r\n        require(\r\n            Token(LPtokenAddress).transfer(owner, fee),\r\n            \"Could not transfer fee!\"\r\n        );\r\n\r\n        require(\r\n            Token(LPtokenAddress).transfer(msg.sender, amountAfterFee),\r\n            \"Could not transfer tokens.\"\r\n        );\r\n\r\n        depositedTokens[msg.sender] = depositedTokens[msg.sender].sub(\r\n            amountToWithdraw\r\n        );\r\n        totalTokens = totalTokens.sub(amountToWithdraw);\r\n\r\n        if (holders.contains(msg.sender) && depositedTokens[msg.sender] == 0) {\r\n            holders.remove(msg.sender);\r\n        }\r\n    }\r\n\r\n    function emergencyWithdraw(uint256 amountToWithdraw) public {\r\n        require(\r\n            depositedTokens[msg.sender] >= amountToWithdraw,\r\n            \"Invalid amount to withdraw\"\r\n        );\r\n\r\n        lastClaimedTime[msg.sender] = block.timestamp;\r\n        lastDivPoints[msg.sender] = totalDivPoints;\r\n\r\n        uint256 fee = amountToWithdraw.mul(withdrawFeePercentX100).div(1e4);\r\n        uint256 amountAfterFee = amountToWithdraw.sub(fee);\r\n\r\n        require(\r\n            Token(LPtokenAddress).transfer(owner, fee),\r\n            \"Could not transfer fee!\"\r\n        );\r\n\r\n        require(\r\n            Token(LPtokenAddress).transfer(msg.sender, amountAfterFee),\r\n            \"Could not transfer tokens.\"\r\n        );\r\n\r\n        depositedTokens[msg.sender] = depositedTokens[msg.sender].sub(\r\n            amountToWithdraw\r\n        );\r\n        totalTokens = totalTokens.sub(amountToWithdraw);\r\n\r\n        if (holders.contains(msg.sender) && depositedTokens[msg.sender] == 0) {\r\n            holders.remove(msg.sender);\r\n        }\r\n    }\r\n\r\n    function claim() public {\r\n        updateAccount(msg.sender);\r\n    }\r\n\r\n    function distributeDivs(uint256 amount) private {\r\n        if (totalTokens == 0) return;\r\n        totalDivPoints = totalDivPoints.add(\r\n            amount.mul(pointMultiplier).div(totalTokens)\r\n        );\r\n        emit RewardsDisbursed(amount);\r\n    }\r\n\r\n    function disburseTokens() public onlyOwner {\r\n        uint256 amount = getPendingDisbursement();\r\n\r\n        // uint contractBalance = Token(tokenAddress).balanceOf(address(this));\r\n\r\n        if (contractBalance < amount) {\r\n            amount = contractBalance;\r\n        }\r\n        if (amount == 0) return;\r\n        distributeDivs(amount);\r\n        contractBalance = contractBalance.sub(amount);\r\n        lastDisburseTime = block.timestamp;\r\n    }\r\n\r\n    function getPendingDisbursement() public view returns (uint256) {\r\n        uint256 timeDiff = block.timestamp.sub(lastDisburseTime);\r\n        uint256 pendingDisburse =\r\n            disburseAmount\r\n                .mul(disbursePercentX100)\r\n                .mul(timeDiff)\r\n                .div(disburseDuration)\r\n                .div(10000);\r\n        return pendingDisburse;\r\n    }\r\n\r\n    function getDepositorsList(uint256 startIndex, uint256 endIndex)\r\n        public\r\n        view\r\n        returns (\r\n            address[] memory stakers,\r\n            uint256[] memory stakingTimestamps,\r\n            uint256[] memory lastClaimedTimeStamps,\r\n            uint256[] memory stakedTokens\r\n        )\r\n    {\r\n        require(startIndex < endIndex);\r\n\r\n        uint256 length = endIndex.sub(startIndex);\r\n        address[] memory _stakers = new address[](length);\r\n        uint256[] memory _stakingTimestamps = new uint256[](length);\r\n        uint256[] memory _lastClaimedTimeStamps = new uint256[](length);\r\n        uint256[] memory _stakedTokens = new uint256[](length);\r\n\r\n        for (uint256 i = startIndex; i < endIndex; i = i.add(1)) {\r\n            address staker = holders.at(i);\r\n            uint256 listIndex = i.sub(startIndex);\r\n            _stakers[listIndex] = staker;\r\n            _stakingTimestamps[listIndex] = depositTime[staker];\r\n            _lastClaimedTimeStamps[listIndex] = lastClaimedTime[staker];\r\n            _stakedTokens[listIndex] = depositedTokens[staker];\r\n        }\r\n\r\n        return (\r\n            _stakers,\r\n            _stakingTimestamps,\r\n            _lastClaimedTimeStamps,\r\n            _stakedTokens\r\n        );\r\n    }\r\n\r\n    /* function to allow owner to claim *other* ERC20 tokens sent to this contract.\r\n        Owner cannot recover unclaimed tokens (they are burnt)\r\n    */\r\n    function transferAnyERC20Tokens(\r\n        address _tokenAddr,\r\n        address _to,\r\n        uint256 _amount\r\n    ) public onlyOwner {\r\n        // require(_tokenAddr != tokenAddress && _tokenAddr != LPtokenAddress, \"Cannot send out reward tokens or LP tokens!\");\r\n\r\n        require(\r\n            _tokenAddr != LPtokenAddress,\r\n            \"Admin cannot transfer out LP tokens from this vault!\"\r\n        );\r\n        require(\r\n            _tokenAddr != tokenAddress,\r\n            \"Admin cannot Transfer out Reward Tokens from this vault!\"\r\n        );\r\n\r\n        Token(_tokenAddr).transfer(_to, _amount);\r\n    }\r\n\r\n    function setDisburse(uint256 _disburseAmount, uint256 _disburseDuration)\r\n        external\r\n        onlyOwner\r\n    {\r\n        require(_disburseAmount > 0, \"Invalid disburse amount\");\r\n        require(_disburseDuration > 0, \"Invalid disburse period\");\r\n        disburseAmount = _disburseAmount;\r\n        disburseDuration = _disburseDuration;\r\n    }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_lpTokenAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_feePercentX100\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"RewardsDisbursed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"holder\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"RewardsTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"LPtokenAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"addContractBalance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"contractBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountToDeposit\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"depositTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"depositedTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"disburseAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"disburseDuration\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"disbursePercentX100\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"disburseTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountToWithdraw\",\"type\":\"uint256\"}],\"name\":\"emergencyWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"startIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endIndex\",\"type\":\"uint256\"}],\"name\":\"getDepositorsList\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"stakers\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"stakingTimestamps\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"lastClaimedTimeStamps\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"stakedTokens\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getNumberOfHolders\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPendingDisbursement\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_holder\",\"type\":\"address\"}],\"name\":\"getPendingDivs\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"lastClaimedTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastDisburseTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"lastDivPoints\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_disburseAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_disburseDuration\",\"type\":\"uint256\"}],\"name\":\"setDisburse\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalClaimedRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalDivPoints\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"totalEarnedTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalTokensDisbursed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenAddr\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"transferAnyERC20Tokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountToWithdraw\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawFeePercentX100\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"YFTEFarming_TetherswapLP","CompilerVersion":"v0.7.5+commit.eb77ed08","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"00000000000000000000000031b71356290289806ccba638b0a6c79121a965e900000000000000000000000094f31ac896c9823d81cf9c2c93feceed4923218f0000000000000000000000000000000000000000000000000000000000000032","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"ipfs://6ebb57693834d5a996e1b424076d504631f6c5cd2e168dfd331aaf1fb32e5508"}]}