{"status":"1","message":"OK","result":[{"SourceCode":"/**\r\n *Submitted for verification at Etherscan.io on 2021-04-14\r\n*/\r\n\r\n// File: @daostack/infra/contracts/votingMachines/GenesisProtocolInterface.sol\r\n\r\npragma solidity 0.5.17;\r\n\r\n\r\ncontract GenesisProtocolInterface {\r\n    function setParameters(\r\n        uint[11] calldata _params, //use array here due to stack too deep issue.\r\n        address _voteOnBehalf\r\n    )\r\n    external\r\n    returns(bytes32);\r\n}\r\n\r\n// File: @daostack/infra/contracts/votingMachines/IntVoteInterface.sol\r\n\r\npragma solidity 0.5.17;\r\n\r\ninterface IntVoteInterface {\r\n    //When implementing this interface please do not only override function and modifier,\r\n    //but also to keep the modifiers on the overridden functions.\r\n    modifier votable(bytes32 _proposalId) {revert(\"proposal is not votable\"); _;}\r\n\r\n    event NewProposal(\r\n        bytes32 indexed _proposalId,\r\n        address indexed _organization,\r\n        uint256 _numOfChoices,\r\n        address _proposer,\r\n        bytes32 _paramsHash\r\n    );\r\n\r\n    event ExecuteProposal(bytes32 indexed _proposalId,\r\n        address indexed _organization,\r\n        uint256 _decision,\r\n        uint256 _totalReputation\r\n    );\r\n\r\n    event VoteProposal(\r\n        bytes32 indexed _proposalId,\r\n        address indexed _organization,\r\n        address indexed _voter,\r\n        uint256 _vote,\r\n        uint256 _reputation\r\n    );\r\n\r\n    event CancelProposal(bytes32 indexed _proposalId, address indexed _organization );\r\n    event CancelVoting(bytes32 indexed _proposalId, address indexed _organization, address indexed _voter);\r\n\r\n    /**\r\n     * @dev register a new proposal with the given parameters. Every proposal has a unique ID which is being\r\n     * generated by calculating keccak256 of a incremented counter.\r\n     * @param _numOfChoices number of voting choices\r\n     * @param _proposalParameters defines the parameters of the voting machine used for this proposal\r\n     * @param _proposer address\r\n     * @param _organization address - if this address is zero the msg.sender will be used as the organization address.\r\n     * @return proposal's id.\r\n     */\r\n    function propose(\r\n        uint256 _numOfChoices,\r\n        bytes32 _proposalParameters,\r\n        address _proposer,\r\n        address _organization\r\n        ) external returns(bytes32);\r\n\r\n    function vote(\r\n        bytes32 _proposalId,\r\n        uint256 _vote,\r\n        uint256 _rep,\r\n        address _voter\r\n    )\r\n    external\r\n    returns(bool);\r\n\r\n    function cancelVote(bytes32 _proposalId) external;\r\n\r\n    function getNumberOfChoices(bytes32 _proposalId) external view returns(uint256);\r\n\r\n    function isVotable(bytes32 _proposalId) external view returns(bool);\r\n\r\n    /**\r\n     * @dev voteStatus returns the reputation voted for a proposal for a specific voting choice.\r\n     * @param _proposalId the ID of the proposal\r\n     * @param _choice the index in the\r\n     * @return voted reputation for the given choice\r\n     */\r\n    function voteStatus(bytes32 _proposalId, uint256 _choice) external view returns(uint256);\r\n\r\n    /**\r\n     * @dev isAbstainAllow returns if the voting machine allow abstain (0)\r\n     * @return bool true or false\r\n     */\r\n    function isAbstainAllow() external pure returns(bool);\r\n\r\n    /**\r\n     * @dev getAllowedRangeOfChoices returns the allowed range of choices for a voting machine.\r\n     * @return min - minimum number of choices\r\n               max - maximum number of choices\r\n     */\r\n    function getAllowedRangeOfChoices() external pure returns(uint256 min, uint256 max);\r\n}\r\n\r\n// File: @daostack/infra/contracts/votingMachines/ProposalExecuteInterface.sol\r\n\r\npragma solidity 0.5.17;\r\n\r\ninterface ProposalExecuteInterface {\r\n    function executeProposal(bytes32 _proposalId, int _decision) external returns(bool);\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/GSN/Context.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n/*\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with GSN meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\ncontract Context {\r\n    // Empty internal constructor, to prevent people from mistakenly deploying\r\n    // an instance of this contract, which should be used via inheritance.\r\n    constructor () internal { }\r\n    // solhint-disable-previous-line no-empty-blocks\r\n\r\n    function _msgSender() internal view returns (address payable) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view returns (bytes memory) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/ownership/Ownable.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\ncontract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor () internal {\r\n        _owner = _msgSender();\r\n        emit OwnershipTransferred(address(0), _owner);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(isOwner(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the caller is the current owner.\r\n     */\r\n    function isOwner() public view returns (bool) {\r\n        return _msgSender() == _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     */\r\n    function _transferOwnership(address newOwner) internal {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\n// File: @daostack/infra/contracts/Reputation.sol\r\n\r\npragma solidity 0.5.17;\r\n\r\n\r\n\r\n/**\r\n * @title Reputation system\r\n * @dev A DAO has Reputation System which allows peers to rate other peers in order to build trust .\r\n * A reputation is use to assign influence measure to a DAO'S peers.\r\n * Reputation is similar to regular tokens but with one crucial difference: It is non-transferable.\r\n * The Reputation contract maintain a map of address to reputation value.\r\n * It provides an onlyOwner functions to mint and burn reputation _to (or _from) a specific address.\r\n */\r\ncontract Reputation is Ownable {\r\n\r\n    uint8 public decimals = 18;             //Number of decimals of the smallest unit\r\n    // Event indicating minting of reputation to an address.\r\n    event Mint(address indexed _to, uint256 _amount);\r\n    // Event indicating burning of reputation for an address.\r\n    event Burn(address indexed _from, uint256 _amount);\r\n\r\n      /// @dev `Checkpoint` is the structure that attaches a block number to a\r\n      ///  given value, the block number attached is the one that last changed the\r\n      ///  value\r\n    struct Checkpoint {\r\n\r\n    // `fromBlock` is the block number that the value was generated from\r\n        uint128 fromBlock;\r\n\r\n          // `value` is the amount of reputation at a specific block number\r\n        uint128 value;\r\n    }\r\n\r\n      // `balances` is the map that tracks the balance of each address, in this\r\n      //  contract when the balance changes the block number that the change\r\n      //  occurred is also included in the map\r\n    mapping (address => Checkpoint[]) private balances;\r\n\r\n      // Tracks the history of the `totalSupply` of the reputation\r\n    Checkpoint[] private totalSupplyHistory;\r\n\r\n      /// @notice Generates `_amount` reputation that are assigned to `_owner`\r\n      /// @param _user The address that will be assigned the new reputation\r\n      /// @param _amount The quantity of reputation generated\r\n      /// @return True if the reputation are generated correctly\r\n    function mint(address _user, uint256 _amount) public onlyOwner returns (bool) {\r\n        uint256 curTotalSupply = totalSupply();\r\n        require(curTotalSupply + _amount >= curTotalSupply, \"total supply overflow\"); // Check for overflow\r\n        uint256 previousBalanceTo = balanceOf(_user);\r\n        require(previousBalanceTo + _amount >= previousBalanceTo, \"balace overflow\"); // Check for overflow\r\n        updateValueAtNow(totalSupplyHistory, curTotalSupply + _amount);\r\n        updateValueAtNow(balances[_user], previousBalanceTo + _amount);\r\n        emit Mint(_user, _amount);\r\n        return true;\r\n    }\r\n\r\n      /// @notice Burns `_amount` reputation from `_owner`\r\n      /// @param _user The address that will lose the reputation\r\n      /// @param _amount The quantity of reputation to burn\r\n      /// @return True if the reputation are burned correctly\r\n    function burn(address _user, uint256 _amount) public onlyOwner returns (bool) {\r\n        uint256 curTotalSupply = totalSupply();\r\n        uint256 amountBurned = _amount;\r\n        uint256 previousBalanceFrom = balanceOf(_user);\r\n        if (previousBalanceFrom < amountBurned) {\r\n            amountBurned = previousBalanceFrom;\r\n        }\r\n        updateValueAtNow(totalSupplyHistory, curTotalSupply - amountBurned);\r\n        updateValueAtNow(balances[_user], previousBalanceFrom - amountBurned);\r\n        emit Burn(_user, amountBurned);\r\n        return true;\r\n    }\r\n\r\n    /// @dev This function makes it easy to get the total number of reputation\r\n    /// @return The total number of reputation\r\n    function totalSupply() public view returns (uint256) {\r\n        return totalSupplyAt(block.number);\r\n    }\r\n\r\n    ////////////////\r\n    // Query balance and totalSupply in History\r\n    ////////////////\r\n    /**\r\n    * @dev return the reputation amount of a given owner\r\n    * @param _owner an address of the owner which we want to get his reputation\r\n    */\r\n    function balanceOf(address _owner) public view returns (uint256 balance) {\r\n        return balanceOfAt(_owner, block.number);\r\n    }\r\n\r\n    /// @notice Total amount of reputation at a specific `_blockNumber`.\r\n    /// @param _blockNumber The block number when the totalSupply is queried\r\n    /// @return The total amount of reputation at `_blockNumber`\r\n    function totalSupplyAt(uint256 _blockNumber) public view returns(uint256) {\r\n        if ((totalSupplyHistory.length == 0) || (totalSupplyHistory[0].fromBlock > _blockNumber)) {\r\n            return 0;\r\n          // This will return the expected totalSupply during normal situations\r\n        } else {\r\n            return getValueAt(totalSupplyHistory, _blockNumber);\r\n        }\r\n    }\r\n\r\n  /// @dev Queries the balance of `_owner` at a specific `_blockNumber`\r\n  /// @param _owner The address from which the balance will be retrieved\r\n  /// @param _blockNumber The block number when the balance is queried\r\n  /// @return The balance at `_blockNumber`\r\n    function balanceOfAt(address _owner, uint256 _blockNumber)\r\n    public view returns (uint256)\r\n    {\r\n        if ((balances[_owner].length == 0) || (balances[_owner][0].fromBlock > _blockNumber)) {\r\n            return 0;\r\n        // This will return the expected balance during normal situations\r\n        } else {\r\n            return getValueAt(balances[_owner], _blockNumber);\r\n        }\r\n    }\r\n  ////////////////\r\n  // Internal helper functions to query and set a value in a snapshot array\r\n  ////////////////\r\n\r\n      /// @dev `getValueAt` retrieves the number of reputation at a given block number\r\n      /// @param checkpoints The history of values being queried\r\n      /// @param _block The block number to retrieve the value at\r\n      /// @return The number of reputation being queried\r\n    function getValueAt(Checkpoint[] storage checkpoints, uint256 _block) internal view returns (uint256) {\r\n        if (checkpoints.length == 0) {\r\n            return 0;\r\n        }\r\n\r\n          // Shortcut for the actual value\r\n        if (_block >= checkpoints[checkpoints.length-1].fromBlock) {\r\n            return checkpoints[checkpoints.length-1].value;\r\n        }\r\n        if (_block < checkpoints[0].fromBlock) {\r\n            return 0;\r\n        }\r\n\r\n          // Binary search of the value in the array\r\n        uint256 min = 0;\r\n        uint256 max = checkpoints.length-1;\r\n        while (max > min) {\r\n            uint256 mid = (max + min + 1) / 2;\r\n            if (checkpoints[mid].fromBlock <= _block) {\r\n                min = mid;\r\n            } else {\r\n                max = mid-1;\r\n            }\r\n        }\r\n        return checkpoints[min].value;\r\n    }\r\n\r\n      /// @dev `updateValueAtNow` used to update the `balances` map and the\r\n      ///  `totalSupplyHistory`\r\n      /// @param checkpoints The history of data being updated\r\n      /// @param _value The new number of reputation\r\n    function updateValueAtNow(Checkpoint[] storage checkpoints, uint256 _value) internal {\r\n        require(uint128(_value) == _value, \"reputation overflow\"); //check value is in the 128 bits bounderies\r\n        if ((checkpoints.length == 0) || (checkpoints[checkpoints.length - 1].fromBlock < block.number)) {\r\n            Checkpoint storage newCheckPoint = checkpoints[checkpoints.length++];\r\n            newCheckPoint.fromBlock = uint128(block.number);\r\n            newCheckPoint.value = uint128(_value);\r\n        } else {\r\n            Checkpoint storage oldCheckPoint = checkpoints[checkpoints.length-1];\r\n            oldCheckPoint.value = uint128(_value);\r\n        }\r\n    }\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/token/ERC20/IERC20.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP. Does not include\r\n * the optional functions; to access them see {ERC20Detailed}.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/math/SafeMath.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     * - Subtraction cannot overflow.\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        // Solidity only automatically asserts when dividing by 0\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts with custom message when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/token/ERC20/ERC20.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n\r\n\r\n\r\n/**\r\n * @dev Implementation of the {IERC20} interface.\r\n *\r\n * This implementation is agnostic to the way tokens are created. This means\r\n * that a supply mechanism has to be added in a derived contract using {_mint}.\r\n * For a generic mechanism see {ERC20Mintable}.\r\n *\r\n * TIP: For a detailed writeup see our guide\r\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\r\n * to implement supply mechanisms].\r\n *\r\n * We have followed general OpenZeppelin guidelines: functions revert instead\r\n * of returning `false` on failure. This behavior is nonetheless conventional\r\n * and does not conflict with the expectations of ERC20 applications.\r\n *\r\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\r\n * This allows applications to reconstruct the allowance for all accounts just\r\n * by listening to said events. Other implementations of the EIP may not emit\r\n * these events, as it isn't required by the specification.\r\n *\r\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\r\n * functions have been added to mitigate the well-known issues around setting\r\n * allowances. See {IERC20-approve}.\r\n */\r\ncontract ERC20 is Context, IERC20 {\r\n    using SafeMath for uint256;\r\n\r\n    mapping (address => uint256) private _balances;\r\n\r\n    mapping (address => mapping (address => uint256)) private _allowances;\r\n\r\n    uint256 private _totalSupply;\r\n\r\n    /**\r\n     * @dev See {IERC20-totalSupply}.\r\n     */\r\n    function totalSupply() public view returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-balanceOf}.\r\n     */\r\n    function balanceOf(address account) public view returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-transfer}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `recipient` cannot be the zero address.\r\n     * - the caller must have a balance of at least `amount`.\r\n     */\r\n    function transfer(address recipient, uint256 amount) public returns (bool) {\r\n        _transfer(_msgSender(), recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-allowance}.\r\n     */\r\n    function allowance(address owner, address spender) public view returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-approve}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function approve(address spender, uint256 amount) public returns (bool) {\r\n        _approve(_msgSender(), spender, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-transferFrom}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance. This is not\r\n     * required by the EIP. See the note at the beginning of {ERC20};\r\n     *\r\n     * Requirements:\r\n     * - `sender` and `recipient` cannot be the zero address.\r\n     * - `sender` must have a balance of at least `amount`.\r\n     * - the caller must have allowance for `sender`'s tokens of at least\r\n     * `amount`.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) public returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \"ERC20: transfer amount exceeds allowance\"));\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\r\n     *\r\n     * This is an alternative to {approve} that can be used as a mitigation for\r\n     * problems described in {IERC20-approve}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function increaseAllowance(address spender, uint256 addedValue) public returns (bool) {\r\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\r\n     *\r\n     * This is an alternative to {approve} that can be used as a mitigation for\r\n     * problems described in {IERC20-approve}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     * - `spender` must have allowance for the caller of at least\r\n     * `subtractedValue`.\r\n     */\r\n    function decreaseAllowance(address spender, uint256 subtractedValue) public returns (bool) {\r\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \"ERC20: decreased allowance below zero\"));\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\r\n     *\r\n     * This is internal function is equivalent to {transfer}, and can be used to\r\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `sender` cannot be the zero address.\r\n     * - `recipient` cannot be the zero address.\r\n     * - `sender` must have a balance of at least `amount`.\r\n     */\r\n    function _transfer(address sender, address recipient, uint256 amount) internal {\r\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\r\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\r\n\r\n        _balances[sender] = _balances[sender].sub(amount, \"ERC20: transfer amount exceeds balance\");\r\n        _balances[recipient] = _balances[recipient].add(amount);\r\n        emit Transfer(sender, recipient, amount);\r\n    }\r\n\r\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\r\n     * the total supply.\r\n     *\r\n     * Emits a {Transfer} event with `from` set to the zero address.\r\n     *\r\n     * Requirements\r\n     *\r\n     * - `to` cannot be the zero address.\r\n     */\r\n    function _mint(address account, uint256 amount) internal {\r\n        require(account != address(0), \"ERC20: mint to the zero address\");\r\n\r\n        _totalSupply = _totalSupply.add(amount);\r\n        _balances[account] = _balances[account].add(amount);\r\n        emit Transfer(address(0), account, amount);\r\n    }\r\n\r\n     /**\r\n     * @dev Destroys `amount` tokens from `account`, reducing the\r\n     * total supply.\r\n     *\r\n     * Emits a {Transfer} event with `to` set to the zero address.\r\n     *\r\n     * Requirements\r\n     *\r\n     * - `account` cannot be the zero address.\r\n     * - `account` must have at least `amount` tokens.\r\n     */\r\n    function _burn(address account, uint256 amount) internal {\r\n        require(account != address(0), \"ERC20: burn from the zero address\");\r\n\r\n        _balances[account] = _balances[account].sub(amount, \"ERC20: burn amount exceeds balance\");\r\n        _totalSupply = _totalSupply.sub(amount);\r\n        emit Transfer(account, address(0), amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the `owner`s tokens.\r\n     *\r\n     * This is internal function is equivalent to `approve`, and can be used to\r\n     * e.g. set automatic allowances for certain subsystems, etc.\r\n     *\r\n     * Emits an {Approval} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `owner` cannot be the zero address.\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function _approve(address owner, address spender, uint256 amount) internal {\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Destroys `amount` tokens from `account`.`amount` is then deducted\r\n     * from the caller's allowance.\r\n     *\r\n     * See {_burn} and {_approve}.\r\n     */\r\n    function _burnFrom(address account, uint256 amount) internal {\r\n        _burn(account, amount);\r\n        _approve(account, _msgSender(), _allowances[account][_msgSender()].sub(amount, \"ERC20: burn amount exceeds allowance\"));\r\n    }\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/token/ERC20/ERC20Burnable.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n\r\n\r\n/**\r\n * @dev Extension of {ERC20} that allows token holders to destroy both their own\r\n * tokens and those that they have an allowance for, in a way that can be\r\n * recognized off-chain (via event analysis).\r\n */\r\ncontract ERC20Burnable is Context, ERC20 {\r\n    /**\r\n     * @dev Destroys `amount` tokens from the caller.\r\n     *\r\n     * See {ERC20-_burn}.\r\n     */\r\n    function burn(uint256 amount) public {\r\n        _burn(_msgSender(), amount);\r\n    }\r\n\r\n    /**\r\n     * @dev See {ERC20-_burnFrom}.\r\n     */\r\n    function burnFrom(address account, uint256 amount) public {\r\n        _burnFrom(account, amount);\r\n    }\r\n}\r\n\r\n// File: contracts/controller/DAOToken.sol\r\n\r\npragma solidity 0.5.17;\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n * @title DAOToken, base on zeppelin contract.\r\n * @dev ERC20 compatible token. It is a mintable, burnable token.\r\n */\r\n\r\ncontract DAOToken is ERC20, ERC20Burnable, Ownable {\r\n\r\n    string public name;\r\n    string public symbol;\r\n    // solhint-disable-next-line const-name-snakecase\r\n    uint8 public constant decimals = 18;\r\n    uint256 public cap;\r\n\r\n    /**\r\n    * @dev Constructor\r\n    * @param _name - token name\r\n    * @param _symbol - token symbol\r\n    * @param _cap - token cap - 0 value means no cap\r\n    */\r\n    constructor(string memory _name, string memory _symbol, uint256 _cap)\r\n    public {\r\n        name = _name;\r\n        symbol = _symbol;\r\n        cap = _cap;\r\n    }\r\n\r\n    /**\r\n     * @dev Function to mint tokens\r\n     * @param _to The address that will receive the minted tokens.\r\n     * @param _amount The amount of tokens to mint.\r\n     */\r\n    function mint(address _to, uint256 _amount) public onlyOwner returns (bool) {\r\n        if (cap > 0)\r\n            require(totalSupply().add(_amount) <= cap);\r\n        _mint(_to, _amount);\r\n        return true;\r\n    }\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/utils/Address.sol\r\n\r\npragma solidity ^0.5.5;\r\n\r\n/**\r\n * @dev Collection of functions related to the address type\r\n */\r\nlibrary Address {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * This test is non-exhaustive, and there may be false-negatives: during the\r\n     * execution of a contract's constructor, its address will be reported as\r\n     * not containing a contract.\r\n     *\r\n     * IMPORTANT: It is unsafe to assume that an address for which this\r\n     * function returns false is an externally-owned account (EOA) and not a\r\n     * contract.\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // This method relies in extcodesize, which returns 0 for contracts in\r\n        // construction, since the code is only stored at the end of the\r\n        // constructor execution.\r\n\r\n        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\r\n        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\r\n        // for accounts without code, i.e. `keccak256('')`\r\n        bytes32 codehash;\r\n        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly { codehash := extcodehash(account) }\r\n        return (codehash != 0x0 && codehash != accountHash);\r\n    }\r\n\r\n    /**\r\n     * @dev Converts an `address` into `address payable`. Note that this is\r\n     * simply a type cast: the actual underlying value is not changed.\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function toPayable(address account) internal pure returns (address payable) {\r\n        return address(uint160(account));\r\n    }\r\n\r\n    /**\r\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * IMPORTANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        // solhint-disable-next-line avoid-call-value\r\n        (bool success, ) = recipient.call.value(amount)(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n}\r\n\r\n// File: contracts/libs/SafeERC20.sol\r\n\r\n/*\r\n\r\nSafeERC20 by daostack.\r\nThe code is based on a fix by SECBIT Team.\r\n\r\nUSE WITH CAUTION & NO WARRANTY\r\n\r\nREFERENCE & RELATED READING\r\n- https://github.com/ethereum/solidity/issues/4116\r\n- https://medium.com/@chris_77367/explaining-unexpected-reverts-starting-with-solidity-0-4-22-3ada6e82308c\r\n- https://medium.com/coinmonks/missing-return-value-bug-at-least-130-tokens-affected-d67bf08521ca\r\n- https://gist.github.com/BrendanChou/88a2eeb80947ff00bcf58ffdafeaeb61\r\n\r\n*/\r\npragma solidity 0.5.17;\r\n\r\n\r\n\r\nlibrary SafeERC20 {\r\n    using Address for address;\r\n\r\n    bytes4 constant private TRANSFER_SELECTOR = bytes4(keccak256(bytes(\"transfer(address,uint256)\")));\r\n    bytes4 constant private TRANSFERFROM_SELECTOR = bytes4(keccak256(bytes(\"transferFrom(address,address,uint256)\")));\r\n    bytes4 constant private APPROVE_SELECTOR = bytes4(keccak256(bytes(\"approve(address,uint256)\")));\r\n\r\n    function safeTransfer(address _erc20Addr, address _to, uint256 _value) internal {\r\n\r\n        // Must be a contract addr first!\r\n        require(_erc20Addr.isContract());\r\n\r\n        (bool success, bytes memory returnValue) =\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        _erc20Addr.call(abi.encodeWithSelector(TRANSFER_SELECTOR, _to, _value));\r\n        // call return false when something wrong\r\n        require(success);\r\n        //check return value\r\n        require(returnValue.length == 0 || (returnValue.length == 32 && (returnValue[31] != 0)));\r\n    }\r\n\r\n    function safeTransferFrom(address _erc20Addr, address _from, address _to, uint256 _value) internal {\r\n\r\n        // Must be a contract addr first!\r\n        require(_erc20Addr.isContract());\r\n\r\n        (bool success, bytes memory returnValue) =\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        _erc20Addr.call(abi.encodeWithSelector(TRANSFERFROM_SELECTOR, _from, _to, _value));\r\n        // call return false when something wrong\r\n        require(success);\r\n        //check return value\r\n        require(returnValue.length == 0 || (returnValue.length == 32 && (returnValue[31] != 0)));\r\n    }\r\n\r\n    function safeApprove(address _erc20Addr, address _spender, uint256 _value) internal {\r\n\r\n        // Must be a contract addr first!\r\n        require(_erc20Addr.isContract());\r\n\r\n        // safeApprove should only be called when setting an initial allowance,\r\n        // or when resetting it to zero.\r\n        require((_value == 0) || (IERC20(_erc20Addr).allowance(address(this), _spender) == 0));\r\n\r\n        (bool success, bytes memory returnValue) =\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        _erc20Addr.call(abi.encodeWithSelector(APPROVE_SELECTOR, _spender, _value));\r\n        // call return false when something wrong\r\n        require(success);\r\n        //check return value\r\n        require(returnValue.length == 0 || (returnValue.length == 32 && (returnValue[31] != 0)));\r\n    }\r\n}\r\n\r\n// File: contracts/controller/Avatar.sol\r\n\r\npragma solidity 0.5.17;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n * @title An Avatar holds tokens, reputation and ether for a controller\r\n */\r\ncontract Avatar is Ownable {\r\n    using SafeERC20 for address;\r\n\r\n    string public orgName;\r\n    DAOToken public nativeToken;\r\n    Reputation public nativeReputation;\r\n\r\n    event GenericCall(address indexed _contract, bytes _data, uint _value, bool _success);\r\n    event SendEther(uint256 _amountInWei, address indexed _to);\r\n    event ExternalTokenTransfer(address indexed _externalToken, address indexed _to, uint256 _value);\r\n    event ExternalTokenTransferFrom(address indexed _externalToken, address _from, address _to, uint256 _value);\r\n    event ExternalTokenApproval(address indexed _externalToken, address _spender, uint256 _value);\r\n    event ReceiveEther(address indexed _sender, uint256 _value);\r\n    event MetaData(string _metaData);\r\n\r\n    /**\r\n    * @dev the constructor takes organization name, native token and reputation system\r\n    and creates an avatar for a controller\r\n    */\r\n    constructor(string memory _orgName, DAOToken _nativeToken, Reputation _nativeReputation) public {\r\n        orgName = _orgName;\r\n        nativeToken = _nativeToken;\r\n        nativeReputation = _nativeReputation;\r\n    }\r\n\r\n    /**\r\n    * @dev enables an avatar to receive ethers\r\n    */\r\n    function() external payable {\r\n        emit ReceiveEther(msg.sender, msg.value);\r\n    }\r\n\r\n    /**\r\n    * @dev perform a generic call to an arbitrary contract\r\n    * @param _contract  the contract's address to call\r\n    * @param _data ABI-encoded contract call to call `_contract` address.\r\n    * @param _value value (ETH) to transfer with the transaction\r\n    * @return bool    success or fail\r\n    *         bytes - the return bytes of the called contract's function.\r\n    */\r\n    function genericCall(address _contract, bytes memory _data, uint256 _value)\r\n    public\r\n    onlyOwner\r\n    returns(bool success, bytes memory returnValue) {\r\n      // solhint-disable-next-line avoid-call-value\r\n        (success, returnValue) = _contract.call.value(_value)(_data);\r\n        emit GenericCall(_contract, _data, _value, success);\r\n    }\r\n\r\n    /**\r\n    * @dev send ethers from the avatar's wallet\r\n    * @param _amountInWei amount to send in Wei units\r\n    * @param _to send the ethers to this address\r\n    * @return bool which represents success\r\n    */\r\n    function sendEther(uint256 _amountInWei, address payable _to) public onlyOwner returns(bool) {\r\n        _to.transfer(_amountInWei);\r\n        emit SendEther(_amountInWei, _to);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n    * @dev external token transfer\r\n    * @param _externalToken the token contract\r\n    * @param _to the destination address\r\n    * @param _value the amount of tokens to transfer\r\n    * @return bool which represents success\r\n    */\r\n    function externalTokenTransfer(IERC20 _externalToken, address _to, uint256 _value)\r\n    public onlyOwner returns(bool)\r\n    {\r\n        address(_externalToken).safeTransfer(_to, _value);\r\n        emit ExternalTokenTransfer(address(_externalToken), _to, _value);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n    * @dev external token transfer from a specific account\r\n    * @param _externalToken the token contract\r\n    * @param _from the account to spend token from\r\n    * @param _to the destination address\r\n    * @param _value the amount of tokens to transfer\r\n    * @return bool which represents success\r\n    */\r\n    function externalTokenTransferFrom(\r\n        IERC20 _externalToken,\r\n        address _from,\r\n        address _to,\r\n        uint256 _value\r\n    )\r\n    public onlyOwner returns(bool)\r\n    {\r\n        address(_externalToken).safeTransferFrom(_from, _to, _value);\r\n        emit ExternalTokenTransferFrom(address(_externalToken), _from, _to, _value);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n    * @dev externalTokenApproval approve the spender address to spend a specified amount of tokens\r\n    *      on behalf of msg.sender.\r\n    * @param _externalToken the address of the Token Contract\r\n    * @param _spender address\r\n    * @param _value the amount of ether (in Wei) which the approval is referring to.\r\n    * @return bool which represents a success\r\n    */\r\n    function externalTokenApproval(IERC20 _externalToken, address _spender, uint256 _value)\r\n    public onlyOwner returns(bool)\r\n    {\r\n        address(_externalToken).safeApprove(_spender, _value);\r\n        emit ExternalTokenApproval(address(_externalToken), _spender, _value);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n    * @dev metaData emits an event with a string, should contain the hash of some meta data.\r\n    * @param _metaData a string representing a hash of the meta data\r\n    * @return bool which represents a success\r\n    */\r\n    function metaData(string memory _metaData) public onlyOwner returns(bool) {\r\n        emit MetaData(_metaData);\r\n        return true;\r\n    }\r\n\r\n\r\n}\r\n\r\n// File: contracts/universalSchemes/UniversalSchemeInterface.sol\r\n\r\npragma solidity 0.5.17;\r\n\r\n\r\ncontract UniversalSchemeInterface {\r\n\r\n    function getParametersFromController(Avatar _avatar) internal view returns(bytes32);\r\n    \r\n}\r\n\r\n// File: contracts/globalConstraints/GlobalConstraintInterface.sol\r\n\r\npragma solidity 0.5.17;\r\n\r\n\r\ncontract GlobalConstraintInterface {\r\n\r\n    enum CallPhase { Pre, Post, PreAndPost }\r\n\r\n    function pre( address _scheme, bytes32 _params, bytes32 _method ) public returns(bool);\r\n    function post( address _scheme, bytes32 _params, bytes32 _method ) public returns(bool);\r\n    /**\r\n     * @dev when return if this globalConstraints is pre, post or both.\r\n     * @return CallPhase enum indication  Pre, Post or PreAndPost.\r\n     */\r\n    function when() public returns(CallPhase);\r\n}\r\n\r\n// File: contracts/controller/Controller.sol\r\n\r\npragma solidity 0.5.17;\r\n\r\n\r\n\r\n/**\r\n * @title Controller contract\r\n * @dev A controller controls the organizations tokens, reputation and avatar.\r\n * It is subject to a set of schemes and constraints that determine its behavior.\r\n * Each scheme has it own parameters and operation permissions.\r\n */\r\ncontract Controller {\r\n\r\n    struct Scheme {\r\n        bytes32 paramsHash;  // a hash \"configuration\" of the scheme\r\n        bytes4  permissions; // A bitwise flags of permissions,\r\n                             // All 0: Not registered,\r\n                             // 1st bit: Flag if the scheme is registered,\r\n                             // 2nd bit: Scheme can register other schemes\r\n                             // 3rd bit: Scheme can add/remove global constraints\r\n                             // 4th bit: Scheme can upgrade the controller\r\n                             // 5th bit: Scheme can call genericCall on behalf of\r\n                             //          the organization avatar\r\n    }\r\n\r\n    struct GlobalConstraint {\r\n        address gcAddress;\r\n        bytes32 params;\r\n    }\r\n\r\n    struct GlobalConstraintRegister {\r\n        bool isRegistered; //is registered\r\n        uint256 index;    //index at globalConstraints\r\n    }\r\n\r\n    mapping(address=>Scheme) public schemes;\r\n\r\n    Avatar public avatar;\r\n    DAOToken public nativeToken;\r\n    Reputation public nativeReputation;\r\n  // newController will point to the new controller after the present controller is upgraded\r\n    address public newController;\r\n  // globalConstraintsPre that determine pre conditions for all actions on the controller\r\n\r\n    GlobalConstraint[] public globalConstraintsPre;\r\n  // globalConstraintsPost that determine post conditions for all actions on the controller\r\n    GlobalConstraint[] public globalConstraintsPost;\r\n  // globalConstraintsRegisterPre indicate if a globalConstraints is registered as a pre global constraint\r\n    mapping(address=>GlobalConstraintRegister) public globalConstraintsRegisterPre;\r\n  // globalConstraintsRegisterPost indicate if a globalConstraints is registered as a post global constraint\r\n    mapping(address=>GlobalConstraintRegister) public globalConstraintsRegisterPost;\r\n\r\n    event MintReputation (address indexed _sender, address indexed _to, uint256 _amount);\r\n    event BurnReputation (address indexed _sender, address indexed _from, uint256 _amount);\r\n    event MintTokens (address indexed _sender, address indexed _beneficiary, uint256 _amount);\r\n    event RegisterScheme (address indexed _sender, address indexed _scheme);\r\n    event UnregisterScheme (address indexed _sender, address indexed _scheme);\r\n    event UpgradeController(address indexed _oldController, address _newController);\r\n\r\n    event AddGlobalConstraint(\r\n        address indexed _globalConstraint,\r\n        bytes32 _params,\r\n        GlobalConstraintInterface.CallPhase _when);\r\n\r\n    event RemoveGlobalConstraint(address indexed _globalConstraint, uint256 _index, bool _isPre);\r\n\r\n    constructor( Avatar _avatar) public {\r\n        avatar = _avatar;\r\n        nativeToken = avatar.nativeToken();\r\n        nativeReputation = avatar.nativeReputation();\r\n        schemes[msg.sender] = Scheme({paramsHash: bytes32(0), permissions: bytes4(0x0000001F)});\r\n        emit RegisterScheme (msg.sender, msg.sender);\r\n    }\r\n\r\n  // Do not allow mistaken calls:\r\n   // solhint-disable-next-line payable-fallback\r\n    function() external {\r\n        revert();\r\n    }\r\n\r\n  // Modifiers:\r\n    modifier onlyRegisteredScheme() {\r\n        require(schemes[msg.sender].permissions&bytes4(0x00000001) == bytes4(0x00000001));\r\n        _;\r\n    }\r\n\r\n    modifier onlyRegisteringSchemes() {\r\n        require(schemes[msg.sender].permissions&bytes4(0x00000002) == bytes4(0x00000002));\r\n        _;\r\n    }\r\n\r\n    modifier onlyGlobalConstraintsScheme() {\r\n        require(schemes[msg.sender].permissions&bytes4(0x00000004) == bytes4(0x00000004));\r\n        _;\r\n    }\r\n\r\n    modifier onlyUpgradingScheme() {\r\n        require(schemes[msg.sender].permissions&bytes4(0x00000008) == bytes4(0x00000008));\r\n        _;\r\n    }\r\n\r\n    modifier onlyGenericCallScheme() {\r\n        require(schemes[msg.sender].permissions&bytes4(0x00000010) == bytes4(0x00000010));\r\n        _;\r\n    }\r\n\r\n    modifier onlyMetaDataScheme() {\r\n        require(schemes[msg.sender].permissions&bytes4(0x00000010) == bytes4(0x00000010));\r\n        _;\r\n    }\r\n\r\n    modifier onlySubjectToConstraint(bytes32 func) {\r\n        uint256 idx;\r\n        for (idx = 0; idx < globalConstraintsPre.length; idx++) {\r\n            require(\r\n            (GlobalConstraintInterface(globalConstraintsPre[idx].gcAddress))\r\n            .pre(msg.sender, globalConstraintsPre[idx].params, func));\r\n        }\r\n        _;\r\n        for (idx = 0; idx < globalConstraintsPost.length; idx++) {\r\n            require(\r\n            (GlobalConstraintInterface(globalConstraintsPost[idx].gcAddress))\r\n            .post(msg.sender, globalConstraintsPost[idx].params, func));\r\n        }\r\n    }\r\n\r\n    modifier isAvatarValid(address _avatar) {\r\n        require(_avatar == address(avatar));\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Mint `_amount` of reputation that are assigned to `_to` .\r\n     * @param  _amount amount of reputation to mint\r\n     * @param _to beneficiary address\r\n     * @return bool which represents a success\r\n     */\r\n    function mintReputation(uint256 _amount, address _to, address _avatar)\r\n    external\r\n    onlyRegisteredScheme\r\n    onlySubjectToConstraint(\"mintReputation\")\r\n    isAvatarValid(_avatar)\r\n    returns(bool)\r\n    {\r\n        emit MintReputation(msg.sender, _to, _amount);\r\n        return nativeReputation.mint(_to, _amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Burns `_amount` of reputation from `_from`\r\n     * @param _amount amount of reputation to burn\r\n     * @param _from The address that will lose the reputation\r\n     * @return bool which represents a success\r\n     */\r\n    function burnReputation(uint256 _amount, address _from, address _avatar)\r\n    external\r\n    onlyRegisteredScheme\r\n    onlySubjectToConstraint(\"burnReputation\")\r\n    isAvatarValid(_avatar)\r\n    returns(bool)\r\n    {\r\n        emit BurnReputation(msg.sender, _from, _amount);\r\n        return nativeReputation.burn(_from, _amount);\r\n    }\r\n\r\n    /**\r\n     * @dev mint tokens .\r\n     * @param  _amount amount of token to mint\r\n     * @param _beneficiary beneficiary address\r\n     * @return bool which represents a success\r\n     */\r\n    function mintTokens(uint256 _amount, address _beneficiary, address _avatar)\r\n    external\r\n    onlyRegisteredScheme\r\n    onlySubjectToConstraint(\"mintTokens\")\r\n    isAvatarValid(_avatar)\r\n    returns(bool)\r\n    {\r\n        emit MintTokens(msg.sender, _beneficiary, _amount);\r\n        return nativeToken.mint(_beneficiary, _amount);\r\n    }\r\n\r\n  /**\r\n   * @dev register a scheme\r\n   * @param _scheme the address of the scheme\r\n   * @param _paramsHash a hashed configuration of the usage of the scheme\r\n   * @param _permissions the permissions the new scheme will have\r\n   * @return bool which represents a success\r\n   */\r\n    function registerScheme(address _scheme, bytes32 _paramsHash, bytes4 _permissions, address _avatar)\r\n    external\r\n    onlyRegisteringSchemes\r\n    onlySubjectToConstraint(\"registerScheme\")\r\n    isAvatarValid(_avatar)\r\n    returns(bool)\r\n    {\r\n\r\n        Scheme memory scheme = schemes[_scheme];\r\n\r\n    // Check scheme has at least the permissions it is changing, and at least the current permissions:\r\n    // Implementation is a bit messy. One must recall logic-circuits ^^\r\n\r\n    // produces non-zero if sender does not have all of the perms that are changing between old and new\r\n        require(bytes4(0x0000001f)&(_permissions^scheme.permissions)&(~schemes[msg.sender].permissions) == bytes4(0));\r\n\r\n    // produces non-zero if sender does not have all of the perms in the old scheme\r\n        require(bytes4(0x0000001f)&(scheme.permissions&(~schemes[msg.sender].permissions)) == bytes4(0));\r\n\r\n    // Add or change the scheme:\r\n        schemes[_scheme].paramsHash = _paramsHash;\r\n        schemes[_scheme].permissions = _permissions|bytes4(0x00000001);\r\n        emit RegisterScheme(msg.sender, _scheme);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev unregister a scheme\r\n     * @param _scheme the address of the scheme\r\n     * @return bool which represents a success\r\n     */\r\n    function unregisterScheme( address _scheme, address _avatar)\r\n    external\r\n    onlyRegisteringSchemes\r\n    onlySubjectToConstraint(\"unregisterScheme\")\r\n    isAvatarValid(_avatar)\r\n    returns(bool)\r\n    {\r\n    //check if the scheme is registered\r\n        if (_isSchemeRegistered(_scheme) == false) {\r\n            return false;\r\n        }\r\n    // Check the unregistering scheme has enough permissions:\r\n        require(bytes4(0x0000001f)&(schemes[_scheme].permissions&(~schemes[msg.sender].permissions)) == bytes4(0));\r\n\r\n    // Unregister:\r\n        emit UnregisterScheme(msg.sender, _scheme);\r\n        delete schemes[_scheme];\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev unregister the caller's scheme\r\n     * @return bool which represents a success\r\n     */\r\n    function unregisterSelf(address _avatar) external isAvatarValid(_avatar) returns(bool) {\r\n        if (_isSchemeRegistered(msg.sender) == false) {\r\n            return false;\r\n        }\r\n        delete schemes[msg.sender];\r\n        emit UnregisterScheme(msg.sender, msg.sender);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev add or update Global Constraint\r\n     * @param _globalConstraint the address of the global constraint to be added.\r\n     * @param _params the constraint parameters hash.\r\n     * @return bool which represents a success\r\n     */\r\n    function addGlobalConstraint(address _globalConstraint, bytes32 _params, address _avatar)\r\n    external\r\n    onlyGlobalConstraintsScheme\r\n    isAvatarValid(_avatar)\r\n    returns(bool)\r\n    {\r\n        GlobalConstraintInterface.CallPhase when = GlobalConstraintInterface(_globalConstraint).when();\r\n        if ((when == GlobalConstraintInterface.CallPhase.Pre)||\r\n            (when == GlobalConstraintInterface.CallPhase.PreAndPost)) {\r\n            if (!globalConstraintsRegisterPre[_globalConstraint].isRegistered) {\r\n                globalConstraintsPre.push(GlobalConstraint(_globalConstraint, _params));\r\n                globalConstraintsRegisterPre[_globalConstraint] =\r\n                GlobalConstraintRegister(true, globalConstraintsPre.length-1);\r\n            }else {\r\n                globalConstraintsPre[globalConstraintsRegisterPre[_globalConstraint].index].params = _params;\r\n            }\r\n        }\r\n        if ((when == GlobalConstraintInterface.CallPhase.Post)||\r\n            (when == GlobalConstraintInterface.CallPhase.PreAndPost)) {\r\n            if (!globalConstraintsRegisterPost[_globalConstraint].isRegistered) {\r\n                globalConstraintsPost.push(GlobalConstraint(_globalConstraint, _params));\r\n                globalConstraintsRegisterPost[_globalConstraint] =\r\n                GlobalConstraintRegister(true, globalConstraintsPost.length-1);\r\n            }else {\r\n                globalConstraintsPost[globalConstraintsRegisterPost[_globalConstraint].index].params = _params;\r\n            }\r\n        }\r\n        emit AddGlobalConstraint(_globalConstraint, _params, when);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev remove Global Constraint\r\n     * @param _globalConstraint the address of the global constraint to be remove.\r\n     * @return bool which represents a success\r\n     */\r\n     // solhint-disable-next-line code-complexity\r\n    function removeGlobalConstraint (address _globalConstraint, address _avatar)\r\n    external\r\n    onlyGlobalConstraintsScheme\r\n    isAvatarValid(_avatar)\r\n    returns(bool)\r\n    {\r\n        GlobalConstraintRegister memory globalConstraintRegister;\r\n        GlobalConstraint memory globalConstraint;\r\n        GlobalConstraintInterface.CallPhase when = GlobalConstraintInterface(_globalConstraint).when();\r\n        bool retVal = false;\r\n\r\n        if ((when == GlobalConstraintInterface.CallPhase.Pre)||\r\n            (when == GlobalConstraintInterface.CallPhase.PreAndPost)) {\r\n            globalConstraintRegister = globalConstraintsRegisterPre[_globalConstraint];\r\n            if (globalConstraintRegister.isRegistered) {\r\n                if (globalConstraintRegister.index < globalConstraintsPre.length-1) {\r\n                    globalConstraint = globalConstraintsPre[globalConstraintsPre.length-1];\r\n                    globalConstraintsPre[globalConstraintRegister.index] = globalConstraint;\r\n                    globalConstraintsRegisterPre[globalConstraint.gcAddress].index = globalConstraintRegister.index;\r\n                }\r\n                globalConstraintsPre.length--;\r\n                delete globalConstraintsRegisterPre[_globalConstraint];\r\n                retVal = true;\r\n            }\r\n        }\r\n        if ((when == GlobalConstraintInterface.CallPhase.Post)||\r\n            (when == GlobalConstraintInterface.CallPhase.PreAndPost)) {\r\n            globalConstraintRegister = globalConstraintsRegisterPost[_globalConstraint];\r\n            if (globalConstraintRegister.isRegistered) {\r\n                if (globalConstraintRegister.index < globalConstraintsPost.length-1) {\r\n                    globalConstraint = globalConstraintsPost[globalConstraintsPost.length-1];\r\n                    globalConstraintsPost[globalConstraintRegister.index] = globalConstraint;\r\n                    globalConstraintsRegisterPost[globalConstraint.gcAddress].index = globalConstraintRegister.index;\r\n                }\r\n                globalConstraintsPost.length--;\r\n                delete globalConstraintsRegisterPost[_globalConstraint];\r\n                retVal = true;\r\n            }\r\n        }\r\n        if (retVal) {\r\n            emit RemoveGlobalConstraint(\r\n            _globalConstraint,\r\n            globalConstraintRegister.index,\r\n            when == GlobalConstraintInterface.CallPhase.Pre\r\n            );\r\n        }\r\n        return retVal;\r\n    }\r\n\r\n  /**\r\n    * @dev upgrade the Controller\r\n    *      The function will trigger an event 'UpgradeController'.\r\n    * @param  _newController the address of the new controller.\r\n    * @return bool which represents a success\r\n    */\r\n    function upgradeController(address _newController, Avatar _avatar)\r\n    external\r\n    onlyUpgradingScheme\r\n    isAvatarValid(address(_avatar))\r\n    returns(bool)\r\n    {\r\n        require(newController == address(0));   // so the upgrade could be done once for a contract.\r\n        require(_newController != address(0));\r\n        newController = _newController;\r\n        avatar.transferOwnership(_newController);\r\n        require(avatar.owner() == _newController);\r\n        if (nativeToken.owner() == address(this)) {\r\n            nativeToken.transferOwnership(_newController);\r\n            require(nativeToken.owner() == _newController);\r\n        }\r\n        if (nativeReputation.owner() == address(this)) {\r\n            nativeReputation.transferOwnership(_newController);\r\n            require(nativeReputation.owner() == _newController);\r\n        }\r\n        emit UpgradeController(address(this), newController);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n    * @dev perform a generic call to an arbitrary contract\r\n    * @param _contract  the contract's address to call\r\n    * @param _data ABI-encoded contract call to call `_contract` address.\r\n    * @param _avatar the controller's avatar address\r\n    * @param _value value (ETH) to transfer with the transaction\r\n    * @return bool -success\r\n    *         bytes  - the return value of the called _contract's function.\r\n    */\r\n    function genericCall(address _contract, bytes calldata _data, Avatar _avatar, uint256 _value)\r\n    external\r\n    onlyGenericCallScheme\r\n    onlySubjectToConstraint(\"genericCall\")\r\n    isAvatarValid(address(_avatar))\r\n    returns (bool, bytes memory)\r\n    {\r\n        return avatar.genericCall(_contract, _data, _value);\r\n    }\r\n\r\n  /**\r\n   * @dev send some ether\r\n   * @param _amountInWei the amount of ether (in Wei) to send\r\n   * @param _to address of the beneficiary\r\n   * @return bool which represents a success\r\n   */\r\n    function sendEther(uint256 _amountInWei, address payable _to, Avatar _avatar)\r\n    external\r\n    onlyRegisteredScheme\r\n    onlySubjectToConstraint(\"sendEther\")\r\n    isAvatarValid(address(_avatar))\r\n    returns(bool)\r\n    {\r\n        return avatar.sendEther(_amountInWei, _to);\r\n    }\r\n\r\n    /**\r\n    * @dev send some amount of arbitrary ERC20 Tokens\r\n    * @param _externalToken the address of the Token Contract\r\n    * @param _to address of the beneficiary\r\n    * @param _value the amount of ether (in Wei) to send\r\n    * @return bool which represents a success\r\n    */\r\n    function externalTokenTransfer(IERC20 _externalToken, address _to, uint256 _value, Avatar _avatar)\r\n    external\r\n    onlyRegisteredScheme\r\n    onlySubjectToConstraint(\"externalTokenTransfer\")\r\n    isAvatarValid(address(_avatar))\r\n    returns(bool)\r\n    {\r\n        return avatar.externalTokenTransfer(_externalToken, _to, _value);\r\n    }\r\n\r\n    /**\r\n    * @dev transfer token \"from\" address \"to\" address\r\n    *      One must to approve the amount of tokens which can be spend from the\r\n    *      \"from\" account.This can be done using externalTokenApprove.\r\n    * @param _externalToken the address of the Token Contract\r\n    * @param _from address of the account to send from\r\n    * @param _to address of the beneficiary\r\n    * @param _value the amount of ether (in Wei) to send\r\n    * @return bool which represents a success\r\n    */\r\n    function externalTokenTransferFrom(\r\n    IERC20 _externalToken,\r\n    address _from,\r\n    address _to,\r\n    uint256 _value,\r\n    Avatar _avatar)\r\n    external\r\n    onlyRegisteredScheme\r\n    onlySubjectToConstraint(\"externalTokenTransferFrom\")\r\n    isAvatarValid(address(_avatar))\r\n    returns(bool)\r\n    {\r\n        return avatar.externalTokenTransferFrom(_externalToken, _from, _to, _value);\r\n    }\r\n\r\n    /**\r\n    * @dev externalTokenApproval approve the spender address to spend a specified amount of tokens\r\n    *      on behalf of msg.sender.\r\n    * @param _externalToken the address of the Token Contract\r\n    * @param _spender address\r\n    * @param _value the amount of ether (in Wei) which the approval is referring to.\r\n    * @return bool which represents a success\r\n    */\r\n    function externalTokenApproval(IERC20 _externalToken, address _spender, uint256 _value, Avatar _avatar)\r\n    external\r\n    onlyRegisteredScheme\r\n    onlySubjectToConstraint(\"externalTokenIncreaseApproval\")\r\n    isAvatarValid(address(_avatar))\r\n    returns(bool)\r\n    {\r\n        return avatar.externalTokenApproval(_externalToken, _spender, _value);\r\n    }\r\n\r\n    /**\r\n    * @dev metaData emits an event with a string, should contain the hash of some meta data.\r\n    * @param _metaData a string representing a hash of the meta data\r\n    * @param _avatar Avatar\r\n    * @return bool which represents a success\r\n    */\r\n    function metaData(string calldata _metaData, Avatar _avatar)\r\n        external\r\n        onlyMetaDataScheme\r\n        isAvatarValid(address(_avatar))\r\n        returns(bool)\r\n        {\r\n        return avatar.metaData(_metaData);\r\n    }\r\n\r\n    /**\r\n     * @dev getNativeReputation\r\n     * @param _avatar the organization avatar.\r\n     * @return organization native reputation\r\n     */\r\n    function getNativeReputation(address _avatar) external isAvatarValid(_avatar) view returns(address) {\r\n        return address(nativeReputation);\r\n    }\r\n\r\n    function isSchemeRegistered(address _scheme, address _avatar) external isAvatarValid(_avatar) view returns(bool) {\r\n        return _isSchemeRegistered(_scheme);\r\n    }\r\n\r\n    function getSchemeParameters(address _scheme, address _avatar)\r\n    external\r\n    isAvatarValid(_avatar)\r\n    view\r\n    returns(bytes32)\r\n    {\r\n        return schemes[_scheme].paramsHash;\r\n    }\r\n\r\n    function getSchemePermissions(address _scheme, address _avatar)\r\n    external\r\n    isAvatarValid(_avatar)\r\n    view\r\n    returns(bytes4)\r\n    {\r\n        return schemes[_scheme].permissions;\r\n    }\r\n\r\n    function getGlobalConstraintParameters(address _globalConstraint, address) external view returns(bytes32) {\r\n\r\n        GlobalConstraintRegister memory register = globalConstraintsRegisterPre[_globalConstraint];\r\n\r\n        if (register.isRegistered) {\r\n            return globalConstraintsPre[register.index].params;\r\n        }\r\n\r\n        register = globalConstraintsRegisterPost[_globalConstraint];\r\n\r\n        if (register.isRegistered) {\r\n            return globalConstraintsPost[register.index].params;\r\n        }\r\n    }\r\n\r\n   /**\r\n    * @dev globalConstraintsCount return the global constraint pre and post count\r\n    * @return uint256 globalConstraintsPre count.\r\n    * @return uint256 globalConstraintsPost count.\r\n    */\r\n    function globalConstraintsCount(address _avatar)\r\n        external\r\n        isAvatarValid(_avatar)\r\n        view\r\n        returns(uint, uint)\r\n        {\r\n        return (globalConstraintsPre.length, globalConstraintsPost.length);\r\n    }\r\n\r\n    function isGlobalConstraintRegistered(address _globalConstraint, address _avatar)\r\n        external\r\n        isAvatarValid(_avatar)\r\n        view\r\n        returns(bool)\r\n        {\r\n        return (globalConstraintsRegisterPre[_globalConstraint].isRegistered ||\r\n                globalConstraintsRegisterPost[_globalConstraint].isRegistered);\r\n    }\r\n\r\n    function _isSchemeRegistered(address _scheme) private view returns(bool) {\r\n        return (schemes[_scheme].permissions&bytes4(0x00000001) != bytes4(0));\r\n    }\r\n}\r\n\r\n// File: contracts/universalSchemes/UniversalScheme.sol\r\n\r\npragma solidity 0.5.17;\r\n\r\n\r\n\r\n\r\n\r\ncontract UniversalScheme is UniversalSchemeInterface {\r\n    /**\r\n    *  @dev get the parameters for the current scheme from the controller\r\n    */\r\n    function getParametersFromController(Avatar _avatar) internal view returns(bytes32) {\r\n        require(Controller(_avatar.owner()).isSchemeRegistered(address(this), address(_avatar)),\r\n        \"scheme is not registered\");\r\n        return Controller(_avatar.owner()).getSchemeParameters(address(this), address(_avatar));\r\n    }\r\n}\r\n\r\n// File: @daostack/infra/contracts/votingMachines/VotingMachineCallbacksInterface.sol\r\n\r\npragma solidity 0.5.17;\r\n\r\n\r\ninterface VotingMachineCallbacksInterface {\r\n    function mintReputation(uint256 _amount, address _beneficiary, bytes32 _proposalId) external returns(bool);\r\n    function burnReputation(uint256 _amount, address _owner, bytes32 _proposalId) external returns(bool);\r\n\r\n    function stakingTokenTransfer(IERC20 _stakingToken, address _beneficiary, uint256 _amount, bytes32 _proposalId)\r\n    external\r\n    returns(bool);\r\n\r\n    function getTotalReputationSupply(bytes32 _proposalId) external view returns(uint256);\r\n    function reputationOf(address _owner, bytes32 _proposalId) external view returns(uint256);\r\n    function balanceOfStakingToken(IERC20 _stakingToken, bytes32 _proposalId) external view returns(uint256);\r\n}\r\n\r\n// File: contracts/votingMachines/VotingMachineCallbacks.sol\r\n\r\npragma solidity 0.5.17;\r\n\r\n\r\n\r\n\r\n\r\ncontract VotingMachineCallbacks is VotingMachineCallbacksInterface {\r\n\r\n    struct ProposalInfo {\r\n        uint256 blockNumber; // the proposal's block number\r\n        Avatar avatar; // the proposal's avatar\r\n    }\r\n\r\n    modifier onlyVotingMachine(bytes32 _proposalId) {\r\n        require(proposalsInfo[msg.sender][_proposalId].avatar != Avatar(address(0)), \"only VotingMachine\");\r\n        _;\r\n    }\r\n\r\n    modifier onlyRegisteredScheme(bytes32 _proposalId) {\r\n        Avatar avatar = proposalsInfo[msg.sender][_proposalId].avatar;\r\n        require(Controller(avatar.owner()).isSchemeRegistered(address(this), address(avatar)),\r\n            \"scheme is not registered\"\r\n        );\r\n        _;\r\n    }\r\n\r\n    // VotingMaching  ->  proposalId  ->  ProposalInfo\r\n    mapping(address => mapping(bytes32 => ProposalInfo)) public proposalsInfo;\r\n\r\n    function mintReputation(uint256 _amount, address _beneficiary, bytes32 _proposalId)\r\n    external\r\n    onlyVotingMachine(_proposalId)\r\n    returns(bool)\r\n    {\r\n        Avatar avatar = proposalsInfo[msg.sender][_proposalId].avatar;\r\n        if (avatar == Avatar(0)) {\r\n            return false;\r\n        }\r\n        return Controller(avatar.owner()).mintReputation(_amount, _beneficiary, address(avatar));\r\n    }\r\n\r\n    function burnReputation(uint256 _amount, address _beneficiary, bytes32 _proposalId)\r\n    external\r\n    onlyVotingMachine(_proposalId)\r\n    returns(bool)\r\n    {\r\n        Avatar avatar = proposalsInfo[msg.sender][_proposalId].avatar;\r\n        if (avatar == Avatar(0)) {\r\n            return false;\r\n        }\r\n        return Controller(avatar.owner()).burnReputation(_amount, _beneficiary, address(avatar));\r\n    }\r\n\r\n    function stakingTokenTransfer(\r\n        IERC20 _stakingToken,\r\n        address _beneficiary,\r\n        uint256 _amount,\r\n        bytes32 _proposalId)\r\n    external\r\n    onlyVotingMachine(_proposalId)\r\n    returns(bool)\r\n    {\r\n        Avatar avatar = proposalsInfo[msg.sender][_proposalId].avatar;\r\n        if (avatar == Avatar(0)) {\r\n            return false;\r\n        }\r\n        return Controller(avatar.owner()).externalTokenTransfer(_stakingToken, _beneficiary, _amount, avatar);\r\n    }\r\n\r\n    function balanceOfStakingToken(IERC20 _stakingToken, bytes32 _proposalId) external view returns(uint256) {\r\n        Avatar avatar = proposalsInfo[msg.sender][_proposalId].avatar;\r\n        if (proposalsInfo[msg.sender][_proposalId].avatar == Avatar(0)) {\r\n            return 0;\r\n        }\r\n        return _stakingToken.balanceOf(address(avatar));\r\n    }\r\n\r\n    function getTotalReputationSupply(bytes32 _proposalId)\r\n    external\r\n    view\r\n    onlyRegisteredScheme(_proposalId)\r\n    returns(uint256) {\r\n        ProposalInfo memory proposal = proposalsInfo[msg.sender][_proposalId];\r\n        if (proposal.avatar == Avatar(0)) {\r\n            return 0;\r\n        }\r\n        return proposal.avatar.nativeReputation().totalSupplyAt(proposal.blockNumber);\r\n    }\r\n\r\n    function reputationOf(address _owner, bytes32 _proposalId)\r\n    external\r\n    view\r\n    onlyRegisteredScheme(_proposalId)\r\n    returns(uint256) {\r\n        ProposalInfo memory proposal = proposalsInfo[msg.sender][_proposalId];\r\n        if (proposal.avatar == Avatar(0)) {\r\n            return 0;\r\n        }\r\n        return proposal.avatar.nativeReputation().balanceOfAt(_owner, proposal.blockNumber);\r\n    }\r\n}\r\n\r\n// File: contracts/schemes/SchemeConstraints.sol\r\n\r\npragma solidity 0.5.17;\r\npragma experimental ABIEncoderV2;\r\n\r\n\r\n\r\ncontract SchemeConstraints {\r\n\r\n    address[] public contractsWhiteList;\r\n    //descriptionHash can be used to add detalis description of the constraints.\r\n    //e.g it can be ipfs hash of the contractsWhiteList abis +names.\r\n    string public descriptionHash;\r\n\r\n   /*\r\n    * @dev isAllowedToCall should be called upon a proposal execution.\r\n    * @param _contractsToCall the contracts to be called\r\n    * @param _callsData - The abi encode data for the calls\r\n    * @param _values value(ETH) to transfer with the calls\r\n    * @param _avatar avatar\r\n    * @return bool value true-allowed false not allowed\r\n    */\r\n    function isAllowedToCall(\r\n        address[] calldata _contractsToCall,\r\n        bytes[] calldata _callsData,\r\n        uint256[] calldata _values,\r\n        Avatar _avatar)\r\n    external returns(bool);\r\n\r\n    /*\r\n     * @dev isAllowedToPropose should be called upon a proposal submition.\r\n     * @param _contractsToCall the contracts to be called\r\n     * @param _callsData - The abi encode data for the calls\r\n     * @param _values value(ETH) to transfer with the calls\r\n     * @param _avatar avatar\r\n     * @return bool value true-allowed false not allowed\r\n     */\r\n    function isAllowedToPropose(\r\n        address[] calldata _contractsToCall,\r\n        bytes[] calldata _callsData,\r\n        uint256[] calldata _values,\r\n        Avatar _avatar)\r\n    external returns(bool);\r\n\r\n    function getContractsWhiteList() external view returns(address[] memory) {\r\n        return contractsWhiteList;\r\n    }\r\n\r\n}\r\n\r\n// File: contracts/schemes/GenericSchemeMultiCall.sol\r\n\r\npragma solidity 0.5.17;\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n * @title GenericSchemeMultiCall.\r\n * @dev  A scheme for proposing and executing calls to multiple arbitrary function\r\n * on one or multiple contracts on behalf of the organization avatar.\r\n */\r\ncontract GenericSchemeMultiCall is VotingMachineCallbacks, ProposalExecuteInterface {\r\n    using SafeMath for uint256;\r\n\r\n    // Details of a voting proposal:\r\n    struct MultiCallProposal {\r\n        address[] contractsToCall;\r\n        bytes[] callsData;\r\n        uint256[] values;\r\n        bool exist;\r\n        bool passed;\r\n    }\r\n\r\n    mapping(bytes32=>MultiCallProposal) public proposals;\r\n    IntVoteInterface public votingMachine;\r\n    bytes32 public voteParams;\r\n    Avatar public avatar;\r\n    SchemeConstraints public schemeConstraints;\r\n\r\n    event NewMultiCallProposal(\r\n        address indexed _avatar,\r\n        bytes32 indexed _proposalId,\r\n        bytes[]   _callsData,\r\n        uint256[] _values,\r\n        string  _descriptionHash,\r\n        address[] _contractsToCall\r\n    );\r\n\r\n    event ProposalExecuted(\r\n        address indexed _avatar,\r\n        bytes32 indexed _proposalId\r\n    );\r\n\r\n    event ProposalCallExecuted(\r\n        address indexed _avatar,\r\n        bytes32 indexed _proposalId,\r\n        address _contractToCall,\r\n        bytes _callData,\r\n        bytes _callDataReturnValue\r\n    );\r\n\r\n    event ProposalExecutedByVotingMachine(\r\n        address indexed _avatar,\r\n        bytes32 indexed _proposalId,\r\n        int256 _param\r\n    );\r\n\r\n    event ProposalDeleted(address indexed _avatar, bytes32 indexed _proposalId);\r\n\r\n    /* @dev initialize\r\n     * @param _avatar the avatar to mint reputation from\r\n     * @param _votingMachine the voting machines address to\r\n     * @param _voteParams voting machine parameters.\r\n     * @param _schemeConstraints the schemeConstraints contracts.\r\n     */\r\n    function initialize(\r\n        Avatar _avatar,\r\n        IntVoteInterface _votingMachine,\r\n        bytes32 _voteParams,\r\n        SchemeConstraints _schemeConstraints\r\n    )\r\n    external\r\n    {\r\n        require(avatar == Avatar(0), \"can be called only one time\");\r\n        require(_avatar != Avatar(0), \"avatar cannot be zero\");\r\n        avatar = _avatar;\r\n        votingMachine = _votingMachine;\r\n        voteParams = _voteParams;\r\n        schemeConstraints = _schemeConstraints;\r\n    }\r\n\r\n    /**\r\n    * @dev execution of proposals, can only be called by the voting machine in which the vote is held.\r\n    * @param _proposalId the ID of the voting in the voting machine\r\n    * @param _decision a parameter of the voting result, 1 yes and 2 is no.\r\n    * @return bool success\r\n    */\r\n    function executeProposal(bytes32 _proposalId, int256 _decision)\r\n    external\r\n    onlyVotingMachine(_proposalId)\r\n    returns(bool) {\r\n        MultiCallProposal storage proposal = proposals[_proposalId];\r\n        require(proposal.exist, \"must be a live proposal\");\r\n        require(!proposal.passed, \"cannot execute twice\");\r\n\r\n        if (_decision == 1) {\r\n            proposal.passed = true;\r\n        } else {\r\n            delete proposals[_proposalId];\r\n            emit ProposalDeleted(address(avatar), _proposalId);\r\n        }\r\n\r\n        emit ProposalExecutedByVotingMachine(address(avatar), _proposalId, _decision);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n    * @dev execution of proposals after it has been decided by the voting machine\r\n    * @param _proposalId the ID of the voting in the voting machine\r\n    */\r\n    function execute(bytes32 _proposalId) external {\r\n        MultiCallProposal storage proposal = proposals[_proposalId];\r\n        require(proposal.exist, \"must be a live proposal\");\r\n        require(proposal.passed, \"proposal must passed by voting machine\");\r\n        if (schemeConstraints != SchemeConstraints(0)) {\r\n            require(\r\n            schemeConstraints.isAllowedToCall(\r\n            proposal.contractsToCall,\r\n            proposal.callsData,\r\n            proposal.values,\r\n            avatar),\r\n            \"call is not allowed\");\r\n        }\r\n        proposal.exist = false;\r\n        bytes memory genericCallReturnValue;\r\n        bool success;\r\n        Controller controller = Controller(avatar.owner());\r\n        for (uint i = 0; i < proposal.contractsToCall.length; i++) {\r\n            bytes memory callData = proposal.callsData[i];\r\n            (success, genericCallReturnValue) =\r\n            controller.genericCall(proposal.contractsToCall[i], callData, avatar, proposal.values[i]);\r\n            /* Whole transaction will be reverted if at least one call fails*/\r\n            require(success, \"Proposal call failed\");\r\n            emit ProposalCallExecuted(\r\n                address(avatar),\r\n                _proposalId,\r\n                proposal.contractsToCall[i],\r\n                callData,\r\n                genericCallReturnValue\r\n            );\r\n        }\r\n\r\n        delete proposals[_proposalId];\r\n        emit ProposalDeleted(address(avatar), _proposalId);\r\n        emit ProposalExecuted(address(avatar), _proposalId);\r\n    }\r\n\r\n    /**\r\n    * @dev propose to call one or multiple contracts on behalf of the _avatar\r\n    *      The function trigger NewMultiCallProposal event\r\n    * @param _contractsToCall the contracts to be called\r\n    * @param _callsData - The abi encode data for the calls\r\n    * @param _values value(ETH) to transfer with the calls\r\n    * @param _descriptionHash proposal description hash\r\n    * @return an id which represents the proposal\r\n    * Note: The reasone this function is public(and not 'external') is due to\r\n    *       known compiler issue handling calldata bytes[] still not solved in 0.5.17\r\n    *       see : https://github.com/ethereum/solidity/issues/6835#issuecomment-549895381\r\n    */\r\n    function proposeCalls(\r\n        address[] memory _contractsToCall,\r\n        bytes[] memory _callsData,\r\n        uint256[] memory _values,\r\n        string memory _descriptionHash\r\n    )\r\n    public\r\n    returns(bytes32 proposalId)\r\n    {\r\n        require(\r\n            (_contractsToCall.length == _callsData.length) && (_contractsToCall.length == _values.length),\r\n            \"Wrong length of _contractsToCall, _callsDataLens or _values arrays\"\r\n        );\r\n        if (schemeConstraints != SchemeConstraints(0)) {\r\n            require(\r\n            schemeConstraints.isAllowedToPropose(\r\n            _contractsToCall,\r\n            _callsData,\r\n            _values,\r\n            avatar),\r\n            \"propose is not allowed\");\r\n        }\r\n\r\n        proposalId = votingMachine.propose(2, voteParams, msg.sender, address(avatar));\r\n\r\n        proposals[proposalId] = MultiCallProposal({\r\n            contractsToCall: _contractsToCall,\r\n            callsData: _callsData,\r\n            values: _values,\r\n            exist: true,\r\n            passed: false\r\n        });\r\n        proposalsInfo[address(votingMachine)][proposalId] = ProposalInfo({\r\n            blockNumber:block.number,\r\n            avatar:avatar\r\n        });\r\n\r\n        emit NewMultiCallProposal(address(avatar), proposalId, _callsData, _values, _descriptionHash, _contractsToCall);\r\n    }\r\n}\r\n\r\n// File: contracts/schemes/SimpleSchemeConstraints.sol\r\n\r\npragma solidity 0.5.17;\r\n\r\n//a simple genericSchemeMultiCall constraint which put constraints only on white listed contracts to call.\r\n\r\ncontract SimpleSchemeConstraints is SchemeConstraints {\r\n\r\n    mapping(address=>bool) public contractsWhiteListMap;\r\n    bool public initialized;\r\n    bool public enableWhitelisting;\r\n    bool public enableSendEth;\r\n\r\n    /* @dev initialize\r\n     * @param _contractsWhiteList the contracts the scheme is allowed to interact with\r\n     * @param _descriptionHash can be used to add detalis description of the constraints.\r\n     */\r\n    function initialize(\r\n        address[] calldata _contractsWhiteList,\r\n        string calldata _descriptionHash,\r\n        bool _enableSendEth\r\n    )\r\n    external {\r\n        require(!initialized, \"cannot initialize twice\");\r\n        initialized = true;\r\n        for (uint i = 0; i < _contractsWhiteList.length; i++) {\r\n            contractsWhiteListMap[_contractsWhiteList[i]] = true;\r\n        }\r\n        contractsWhiteList = _contractsWhiteList;\r\n        descriptionHash = _descriptionHash;\r\n        enableSendEth = _enableSendEth;\r\n        enableWhitelisting = _contractsWhiteList.length > 0;\r\n    }\r\n\r\n    /*\r\n     * @dev isAllowedToCall should be called upon a proposal execution.\r\n     * @param _contractsToCall the contracts to be called\r\n     * @param _values value(ETH) to transfer with the calls\r\n     * @return bool value true-allowed false not allowed\r\n     */\r\n    function isAllowedToCall(\r\n        address[] calldata _contractsToCall,\r\n        bytes[] calldata,\r\n        uint256[] calldata  _values,\r\n        Avatar\r\n    )\r\n    external\r\n    returns(bool)\r\n    {\r\n        for (uint i = 0; i < _contractsToCall.length; i++) {\r\n            require(!enableWhitelisting || contractsWhiteListMap[_contractsToCall[i]], \"contract not whitelisted\");\r\n            if (!enableSendEth) {\r\n                require(_values[i] == 0, \"sending eth is not allowed\");\r\n            }\r\n        }\r\n        return true;\r\n    }\r\n\r\n    /*\r\n     * @dev isAllowedToPropose should be called upon a proposal submition.\r\n     * @param _contractsToCall the contracts to be called\r\n     * @param _values value(ETH) to transfer with the calls\r\n     * @return bool value true-allowed false not allowed\r\n     */\r\n    function isAllowedToPropose(\r\n        address[] calldata _contractsToCall,\r\n        bytes[] calldata,\r\n        uint256[] calldata _values,\r\n        Avatar)\r\n    external\r\n    returns(bool)\r\n    {\r\n        for (uint i = 0; i < _contractsToCall.length; i++) {\r\n            require(!enableWhitelisting || contractsWhiteListMap[_contractsToCall[i]], \"contract not whitelisted\");\r\n            if (!enableSendEth) {\r\n                require(_values[i] == 0, \"sending eth is not allowed\");\r\n            }\r\n        }\r\n        return true;\r\n    }\r\n}\r\n\r\n// File: contracts/utils/GenericSchemeMultiCallFactory.sol\r\n\r\npragma solidity 0.5.17;\r\n\r\n\r\n\r\n\r\n/**\r\n * @title GenericSchemeMultiCallFactory\r\n */\r\ncontract GenericSchemeMultiCallFactory {\r\n    uint8 public constant CUSTOM = 0;\r\n    uint8 public constant FAST = 1;\r\n    uint8 public constant NORMAL = 2;\r\n    uint8 public constant SLOW = 3;\r\n\r\n    event NewGenericSchemeMultiCall(address genericSchemeMultiCall);\r\n\r\n    function createGenericSchemeMultiCallSimple(\r\n        Avatar _avatar,\r\n        IntVoteInterface _votingMachine,\r\n        uint8 _voteParamsType,\r\n        uint256[11] memory _votingParams,\r\n        address _voteOnBehalf,\r\n        address[] memory _contractsWhiteList,\r\n        bool _enableSendEth,\r\n        string memory _descriptionHash\r\n    ) public returns(address) {\r\n        require(_voteParamsType < 4, \"Vote params type specified does not exist\");\r\n        GenericSchemeMultiCall genericSchemeMultiCall = new GenericSchemeMultiCall();\r\n        address simpleSchemeConstraints;\r\n        if (_contractsWhiteList.length > 0 || !_enableSendEth) {\r\n            simpleSchemeConstraints = address(new SimpleSchemeConstraints());\r\n            SimpleSchemeConstraints(simpleSchemeConstraints)\r\n            .initialize(_contractsWhiteList, _descriptionHash, _enableSendEth);\r\n        }\r\n        uint256[11] memory voteParams;\r\n        if (_voteParamsType == CUSTOM) {\r\n           // Custom params hash\r\n            voteParams = _votingParams;\r\n        } else {\r\n            voteParams = getDefaultVoteParams(_voteParamsType);\r\n        }\r\n\r\n        bytes32 voteParamsHash = GenesisProtocolInterface(address(_votingMachine))\r\n                                    .setParameters(voteParams, _voteOnBehalf);\r\n\r\n        genericSchemeMultiCall.initialize(\r\n            _avatar, _votingMachine, voteParamsHash, SchemeConstraints(simpleSchemeConstraints)\r\n        );\r\n\r\n        emit NewGenericSchemeMultiCall(address(genericSchemeMultiCall));\r\n        return address(genericSchemeMultiCall);\r\n    }\r\n\r\n    function getDefaultVoteParams(uint8 _voteParamsType) private pure returns(uint256[11] memory voteParams) {\r\n        if (_voteParamsType == FAST) {\r\n            // Fast params hash\r\n            voteParams = [\r\n                uint256(50),\r\n                uint256(604800),\r\n                uint256(129600),\r\n                uint256(43200),\r\n                uint256(1200),\r\n                uint256(86400),\r\n                uint256(10000000000000000000),\r\n                uint256(1),\r\n                uint256(50000000000000000000),\r\n                uint256(10),\r\n                uint256(0)\r\n            ];\r\n        } else if (_voteParamsType == NORMAL) {\r\n            // Normal params hash\r\n            voteParams = [\r\n                uint256(50),\r\n                uint256(2592000),\r\n                uint256(345600),\r\n                uint256(86400),\r\n                uint256(1200),\r\n                uint256(172800),\r\n                uint256(50000000000000000000),\r\n                uint256(4),\r\n                uint256(150000000000000000000),\r\n                uint256(10),\r\n                uint256(0)\r\n            ];\r\n        } else if (_voteParamsType == SLOW) {\r\n            // Slow params hash\r\n            voteParams = [\r\n                uint256(50),\r\n                uint256(5184000),\r\n                uint256(691200),\r\n                uint256(172800),\r\n                uint256(1500),\r\n                uint256(345600),\r\n                uint256(200000000000000000000),\r\n                uint256(4),\r\n                uint256(500000000000000000000),\r\n                uint256(10),\r\n                uint256(0)\r\n            ];\r\n        }\r\n    }\r\n}","ABI":"[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"genericSchemeMultiCall\",\"type\":\"address\"}],\"name\":\"NewGenericSchemeMultiCall\",\"type\":\"event\"},{\"constant\":true,\"inputs\":[],\"name\":\"CUSTOM\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"FAST\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"NORMAL\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"SLOW\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"contract Avatar\",\"name\":\"_avatar\",\"type\":\"address\"},{\"internalType\":\"contract IntVoteInterface\",\"name\":\"_votingMachine\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"_voteParamsType\",\"type\":\"uint8\"},{\"internalType\":\"uint256[11]\",\"name\":\"_votingParams\",\"type\":\"uint256[11]\"},{\"internalType\":\"address\",\"name\":\"_voteOnBehalf\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"_contractsWhiteList\",\"type\":\"address[]\"},{\"internalType\":\"bool\",\"name\":\"_enableSendEth\",\"type\":\"bool\"},{\"internalType\":\"string\",\"name\":\"_descriptionHash\",\"type\":\"string\"}],\"name\":\"createGenericSchemeMultiCallSimple\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"GenericSchemeMultiCallFactory","CompilerVersion":"v0.5.17+commit.d19bba13","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"bzzr://28f0ef5019113aa96a425f052521852045e6dc02660686991dfca23d26af19e4"}]}