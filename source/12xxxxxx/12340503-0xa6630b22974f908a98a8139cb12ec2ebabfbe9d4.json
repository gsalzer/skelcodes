{"status":"1","message":"OK","result":[{"SourceCode":"// SPDX-License-Identifier: MIT\r\npragma solidity ^0.7.6;\r\n\r\n//*****************************************************************************//\r\n//                        Coin Name : ILUS                                    //\r\n//                           Symbol : ILUS                                    //\r\n//                     Total Supply : 100,000,000                             //\r\n//                         Decimals : 18                                      //\r\n//                    Functionality : Buy, Swap, Stake, Governance            //\r\n//****************************************************************************//\r\n\r\n /**\r\n * @title SafeMath\r\n * @dev   Unsigned math operations with safety checks that revert on error\r\n */\r\nlibrary SafeMath {\r\n  /**\r\n  * @dev Multiplies two unsigned integers, reverts on overflow.\r\n  */\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256){\r\n    if (a == 0){\r\n      return 0;\r\n    }\r\n    uint256 c = a * b;\r\n    require(c / a == b,\"Calculation error\");\r\n    return c;\r\n  }\r\n\r\n  /**\r\n   * @dev Integer division of two unsigned integers truncating the quotient, reverts on division by zero.\r\n   */\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256){\r\n    // Solidity only automatically asserts when dividing by 0\r\n    require(b > 0,\"Calculation error\");\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  /**\r\n   * @dev Subtracts two unsigned integers, reverts on overflow (i.e. if subtrahend is greater than minuend).\r\n   */\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256){\r\n    require(b <= a,\"Calculation error\");\r\n    uint256 c = a - b;\r\n    return c;\r\n  }\r\n\r\n  /**\r\n   * @dev Adds two unsigned integers, reverts on overflow.\r\n   */\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256){\r\n    uint256 c = a + b;\r\n    require(c >= a,\"Calculation error\");\r\n    return c;\r\n  }\r\n\r\n  /**\r\n   * @dev Divides two unsigned integers and returns the remainder (unsigned integer modulo),\r\n   * reverts when dividing by zero.\r\n   */\r\n  function mod(uint256 a, uint256 b) internal pure returns (uint256){\r\n    require(b != 0,\"Calculation error\");\r\n    return a % b;\r\n  }\r\n}\r\n\r\n/**\r\n * @title ERC20 interface\r\n * @dev see https://eips.ethereum.org/EIPS/eip-20\r\n */\r\ninterface IERC20 {\r\n  function transfer(address to, uint256 value) external returns (bool);\r\n  function approve(address spender, uint256 value) external returns (bool);\r\n  function transferFrom(address from, address to, uint256 value) external returns (bool);\r\n  function totalSupply() external view returns (uint256);\r\n  function balanceOf(address who) external view returns (uint256);\r\n  function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n  event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n/**\r\n* @title ILUS Contract For ERC20 Tokens\r\n* @dev ILUS tokens as per ERC20 Standards\r\n*/\r\ncontract StandardToken is IERC20 {\r\n\r\n  using SafeMath for uint256;\r\n\r\n  address private _owner;                                                       // Owner of the Contract.\r\n  string  private _name;                                                        // Name of the token.\r\n  string  private _symbol;                                                      // symbol of the token.\r\n  uint8   private _decimal;                                                     // variable to maintain decimal precision of the token.\r\n  uint256 private _totalSupply = 100000000000000000000000000;                   // total supply of token.\r\n  bool    private _stopped = false;                                             // state variable to check fail-safe for contract.\r\n   uint256 public airdropcount = 0;                                              // Variable to keep track on number of airdrop\r\n  address private _tokenPoolAddress;                                            // Pool Address to manage Staking user's Token.\r\n  address public _crowdsaleAddress;                                             // crowdsale Address  \r\n  bool crowdSaleStarted = true;                                                 // Variable to know the crowdsalestatus\r\n  uint256 airdropcountOfMMM = 0;                                                // Variable to keep track on number of airdrop\r\n  uint256 tokensForMMM = 25150000000000000000000000;                            // airdrop tokens for MMM\r\n   \r\n  mapping (address => uint256) private _balances;\r\n  mapping (address => mapping (address => uint256)) private _allowed;\r\n \r\n  constructor (string memory Name, string memory Symbol, uint8 Decimal, address Owner, address tokenPoolAddress) {\r\n    _name = Name;\r\n    _symbol = Symbol;\r\n    _decimal = Decimal;\r\n    _balances[Owner] = _totalSupply;\r\n    _owner = Owner;\r\n    _tokenPoolAddress = tokenPoolAddress;\r\n  }\r\n \r\n  /*\r\n  * ----------------------------------------------------------------------------------------------------------------------------------------------\r\n  * Functions for owner\r\n  * ----------------------------------------------------------------------------------------------------------------------------------------------\r\n  */\r\n\r\n  /**\r\n   * @dev get address of smart contract owner\r\n   * @return address of owner\r\n   */\r\n  function getowner() public view returns (address) {\r\n    return _owner;\r\n  }\r\n\r\n  /**\r\n   * @dev modifier to check if the message sender is owner\r\n   */\r\n  modifier onlyOwner() {\r\n    require(isOwner(),\"You are not authenticate to make this transfer\");\r\n    _;\r\n  }\r\n  \r\n    /**\r\n   * @dev modifier to check if the message sender is crowdSale\r\n   */\r\n  modifier onlyCrowdsale() {\r\n    require(_crowdsaleAddress == msg.sender,\"You are not authenticate to burn tokens\");\r\n    _;\r\n  }\r\n  \r\n  modifier validatorForSettingCrowdsaleStatus() {\r\n      require(msg.sender == _crowdsaleAddress || msg.sender == _owner, \"You are not authenticate to set status\");\r\n      _;\r\n  }\r\n\r\n  /**\r\n   * @dev Internal function for modifier\r\n   */\r\n  function isOwner() internal view returns (bool) {\r\n      return msg.sender == _owner;\r\n  }\r\n\r\n  /** \r\n   * @dev Transfer ownership of the smart contract. For owner only\r\n   * @return request status\r\n   */\r\n  function transferOwnership(address newOwner) public onlyOwner returns (bool){\r\n    _owner = newOwner;\r\n    return true;\r\n  }\r\n\r\n        \r\n  /** \r\n   * ----------------------------------------------------------------------------------------------------------------------------------------------\r\n   * View only functions\r\n   * ----------------------------------------------------------------------------------------------------------------------------------------------\r\n   */\r\n  \r\n  /**\r\n   * @return the name of the token.\r\n   */\r\n  function name() public view returns (string memory) {\r\n    return _name;\r\n  }\r\n\r\n  /** \r\n   * @return the symbol of the token.\r\n   */\r\n  function symbol() public view returns (string memory) {\r\n    return _symbol;\r\n  }\r\n\r\n  /** \r\n   * @return the number of decimal of the token.\r\n   */\r\n  function decimals() public view returns (uint8) {\r\n    return _decimal;\r\n  }\r\n\r\n  /** \r\n   * @dev Total number of tokens in existence.\r\n   */\r\n  function totalSupply() external override view returns (uint256) {\r\n    return _totalSupply;\r\n  }\r\n\r\n  /** \r\n   * @dev Gets the balance of the specified address.\r\n   * @param owner The address to query the balance of.\r\n   * @return A uint256 representing the amount owned by the passed address.\r\n   */\r\n  function balanceOf(address owner) public view override returns (uint256) {\r\n    return _balances[owner];\r\n  }\r\n\r\n  /** \r\n   * @dev Function to check the amount of tokens that an owner allowed to a spender.\r\n   * @param owner address The address which owns the funds.\r\n   * @param spender address The address which will spend the funds.\r\n   * @return A uint256 specifying the amount of tokens still available for the spender.\r\n   */\r\n  function allowance(address owner, address spender) public view override returns (uint256) {\r\n    return _allowed[owner][spender];\r\n  }\r\n\r\n  /** \r\n   * ----------------------------------------------------------------------------------------------------------------------------------------------\r\n   * Transfer, allow and burn functions\r\n   * ----------------------------------------------------------------------------------------------------------------------------------------------\r\n   */\r\n\r\n  /**\r\n   * @dev Transfer token to a specified address.\r\n   * @param to The address to transfer to.\r\n   * @param value The amount to be transferred.\r\n   */\r\n  function transfer(address to, uint256 value) public override returns (bool) {\r\n    _transfer(msg.sender, to, value);\r\n    return true;\r\n  }\r\n\r\n  /** \r\n   * @dev Transfer tokens from one address to another.\r\n   * @param from address The address which you want to send tokens from\r\n   * @param to address The address which you want to transfer to\r\n   * @param value uint256 the amount of tokens to be transferred\r\n   */\r\n  function transferFrom(address from, address to, uint256 value) public override returns (bool) {\r\n    _transfer(from, to, value);\r\n    _approve(from, msg.sender, _allowed[from][msg.sender].sub(value));\r\n    return true;\r\n  }\r\n\r\n  /** \r\n   * @dev Transfer token for a specified addresses.\r\n   * @param from The address to transfer from.\r\n   * @param to The address to transfer to.\r\n   * @param value The amount to be transferred.\r\n   */\r\n   function _transfer(address from, address to, uint256 value) internal {\r\n    require(from != address(0),\"Invalid from Address\");\r\n    require(to != address(0),\"Invalid to Address\");\r\n    require(value > 0, \"Invalid Amount\");\r\n    _balances[from] = _balances[from].sub(value);\r\n    _balances[to] = _balances[to].add(value);\r\n    emit Transfer(from, to, value);\r\n  }\r\n\r\n  /** \r\n   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\r\n   * @param spender The address which will spend the funds.\r\n   * @param value The amount of tokens to be spent.\r\n   */\r\n  function approve(address spender, uint256 value) public override returns (bool) {\r\n    _approve(msg.sender, spender, value);\r\n    return true;\r\n  }\r\n\r\n  /** \r\n   * @dev Approve an address to spend another addresses' tokens.\r\n   * @param owner The address that owns the tokens.\r\n   * @param spender The address that will spend the tokens.\r\n   * @param value The number of tokens that can be spent.\r\n   */\r\n  function _approve(address owner, address spender, uint256 value) internal {\r\n    require(spender != address(0),\"Invalid address\");\r\n    require(owner != address(0),\"Invalid address\");\r\n    require(value > 0, \"Invalid Amount\");\r\n    _allowed[owner][spender] = value;\r\n    emit Approval(owner, spender, value);\r\n  }\r\n\r\n  /** \r\n   * @dev Increase the amount of tokens that an owner allowed to a spender.\r\n   * @param spender The address which will spend the funds.\r\n   * @param addedValue The amount of tokens to increase the allowance by.\r\n   */\r\n  function increaseAllowance(address spender, uint256 addedValue) public returns (bool) {\r\n    _approve(msg.sender, spender, _allowed[msg.sender][spender].add(addedValue));\r\n    return true;\r\n  }\r\n\r\n  /** \r\n   * @dev Decrease the amount of tokens that an owner allowed to a spender.\r\n   * @param spender The address which will spend the funds.\r\n   * @param subtractedValue The amount of tokens to decrease the allowance by.\r\n   */\r\n  function decreaseAllowance(address spender, uint256 subtractedValue) public returns (bool) {\r\n    _approve(msg.sender, spender, _allowed[msg.sender][spender].sub(subtractedValue));\r\n    return true;\r\n  }\r\n    \r\n  /** \r\n   * @dev Airdrop function to airdrop tokens. Best works upto 50 addresses in one time. Maximum limit is 200 addresses in one time.\r\n   * @param _addresses array of address in serial order\r\n   * @param _amount amount in serial order with respect to address array\r\n   */\r\n  function airdropByOwner(address[] memory _addresses, uint256[] memory _amount) public onlyOwner returns (bool){\r\n    require(_addresses.length == _amount.length,\"Invalid Array\");\r\n    uint256 count = _addresses.length;\r\n    for (uint256 i = 0; i < count; i++){\r\n      _transfer(msg.sender, _addresses[i], _amount[i]);\r\n      airdropcount = airdropcount + 1;\r\n      }\r\n    return true;\r\n   }\r\n\r\n   /** \r\n   * @dev Airdrop function to airdrop tokens. Best works upto 50 addresses in one time. Maximum limit is 200 addresses in one time.\r\n   * @param _addresses array of address in serial order\r\n   * @param _amount amount in serial order with respect to address array\r\n   */\r\n  function airdropByOwnerForMMM(address[] memory _addresses, uint256[] memory _amount) public onlyOwner returns (bool){\r\n    require(_addresses.length == _amount.length,\"Invalid Array\");\r\n    require(tokensForMMM > 0, \"Tokens are zero\");\r\n    uint256 count = _addresses.length;\r\n    for (uint256 i = 0; i < count; i++){\r\n      _transfer(msg.sender, _addresses[i], _amount[i]);\r\n      uint256 remainingTokens = tokensForMMM - _amount[i];\r\n      tokensForMMM = remainingTokens;\r\n      airdropcountOfMMM = airdropcountOfMMM + 1;\r\n      }\r\n    return true;\r\n   }\r\n\r\n  /** \r\n   * @dev Internal function that burns an amount of the token of a given account.\r\n   * @param account The account whose tokens will be burnt.\r\n   * @param value The amount that will be burnt.\r\n   */\r\n  function _burn(address account, uint256 value) internal {\r\n    require(account != address(0),\"Invalid account\");\r\n    require(value > 0, \"Invalid Amount\");\r\n    _totalSupply = _totalSupply.sub(value);\r\n    _balances[account] = _balances[account].sub(value);\r\n    emit Transfer(account, address(0), value);\r\n  }\r\n\r\n  /** \r\n   * @dev Burns a specific amount of tokens.\r\n   * @param _value The amount of token to be burned.\r\n   */\r\n  function burn(uint256 _value) public onlyOwner {\r\n    _burn(msg.sender, _value);\r\n  }\r\n  \r\n  /** \r\n   * @dev Internal function that burns an amount of the token of a given account.\r\n   * @param value The amount that will be burnt.\r\n   */\r\n  function _burnForCrowdsale(uint256 value) internal {\r\n    require(value > 0, \"Invalid Amount\");\r\n    _totalSupply = _totalSupply.sub(value);\r\n    _balances[_owner] = _balances[_owner].sub(value);\r\n    emit Transfer(_owner, address(0), value);\r\n  }\r\n  \r\n  /** \r\n   * @dev Burns a specific amount of tokens.\r\n   * @param _value The amount of token to be burned.\r\n   */\r\n  function burnForCrowdsale(uint256 _value) public onlyCrowdsale {\r\n    _burnForCrowdsale(_value);\r\n  }\r\n\r\n  /** \r\n   * @dev Set crowsales status.\r\n   * @param status status of crowdsale.\r\n   */ \r\n\r\n   function setCrowdSalesStatus(bool status) public validatorForSettingCrowdsaleStatus{\r\n     crowdSaleStarted = status;\r\n  }\r\n\r\n  \r\n  // Mapping for users with id => address Staked Address\r\n  mapping (uint256 => address) private _stakerAddress;\r\n\r\n  // Mapping for users with id => Tokens \r\n  mapping (uint256 => uint256) private _usersTokens;\r\n  \r\n  // Mapping for users with id => Staking Time\r\n  mapping (uint256 => uint256) private _stakingStartTime;\r\n\r\n  // Mapping for users with id => Status\r\n  mapping (uint256 => bool) private _TokenTransactionstatus;  \r\n \r\n  // Mapping to keep track of final withdraw value of staked token\r\n  mapping(uint256=>uint256) private _finalWithdrawlStake;\r\n  \r\n  // Reward Percentage\r\n  uint256 private _rewardPercentage= 15; \r\n  \r\n  // Count of no of staking\r\n  uint256 private _stakingCount = 0;\r\n\r\n  // Withdraw Time limit\r\n  uint256 _withdrawLimit = 2592000;\r\n\r\n\r\n   /** \r\n   * To check for the payable amount for purchasing the tokens\r\n   */\r\n  modifier payableCheck(){\r\n    require(msg.value > 0 ,\r\n      \"Can not buy tokens,\");\r\n    _;\r\n  }\r\n\r\n  /** \r\n   * @dev modifier to check the failsafe\r\n   */\r\n  modifier failSafe(){\r\n    require(_stopped == false, \"Fail Safe check failed\");\r\n    _;\r\n  }\r\n\r\n /*\r\n  * ------------------------------------------------------------------------------------\r\n  * Owner functions of get value, set value, blacklist and withdraw ETH Functionality\r\n  * ------------------------------------------------------------------------------------\r\n  */\r\n\r\n  /**\r\n   * @dev Function to secure contract from fail by toggling _stopped variable\r\n   */\r\n  function toggleContractActive() public onlyOwner{\r\n    _stopped = !_stopped;\r\n  }\r\n\r\n\r\n  /**\r\n   * @dev Function to set token pool address\r\n   * @param add Address for token pool that manages supplies for stakes.\r\n   */\r\n  function setTokenPoolAddress(address add) public onlyOwner returns(bool){\r\n    require(add != address(0),\"Invalid Address\");\r\n    _tokenPoolAddress = add;\r\n    return true;\r\n  }\r\n  \r\n  /**\r\n   * @dev Function to set crowdsale address\r\n   * @param add Address for crowdsale smart contract.\r\n   */\r\n  function setCrowdsaleAddress(address add) public onlyOwner returns(bool){\r\n    require(add != address(0),\"Invalid Address\");\r\n    _crowdsaleAddress = add;\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Function to get Token Pool addresss\r\n   */\r\n  function getTokenpoolAddress() public view returns(address){\r\n    return _tokenPoolAddress;\r\n  }\r\n\r\n\r\n  /**\r\n   * @dev Function for setting rewards percentage by owner\r\n   * @param rewardsPercentage Reward percentage\r\n   */\r\n  function setRewardPercentage(uint256 rewardsPercentage) public onlyOwner returns(bool){\r\n    require(rewardsPercentage > 0, \"Invalid Percentage\");\r\n    _rewardPercentage = rewardsPercentage;\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Function for getting rewards percentage by owner\r\n   */\r\n  function getRewardPercentage() public view returns(uint256){\r\n    return _rewardPercentage;\r\n  }\r\n\r\n  \r\n  /**\r\n   * @dev Function to blacklist any stake\r\n   * @param status true/false\r\n   * @param stakingId stake id for that particular stake\r\n   */\r\n  function blacklistStake(bool status,uint256 stakingId) external onlyOwner{\r\n    _TokenTransactionstatus[stakingId] = status;\r\n  }\r\n\r\n  /**\r\n   * @dev function to get total ethers in contract\r\n   */\r\n    function getContractETHBalance() public view returns(uint256){\r\n    return(address(this).balance);\r\n    }\r\n\r\n  /** \r\n   * @dev function to withdraw total ethers from contract\r\n   */\r\n    function withdrawETH() external onlyOwner returns(bool){\r\n    msg.sender.transfer(address(this).balance);\r\n    return true;\r\n    }\r\n\r\n \r\n/*\r\n   * -------------------------------------------------------------------------------------\r\n   * Functions for Staking Functionlaity\r\n   * -------------------------------------------------------------------------------------\r\n   */\r\n\r\n  /**\r\n   * @dev Function to get Final Withdraw Staked value\r\n   * @param id stake id for the stake\r\n   */\r\n  function getFinalWithdrawlStake(uint256 id) public view returns(uint256){\r\n    return _finalWithdrawlStake[id];\r\n  }\r\n\r\n  /**\r\n   * @dev Function to get Staking address by id\r\n   * @param id stake id for the stake\r\n   */\r\n  function getStakingAddressById(uint256 id) public view returns (address){\r\n    require(id <= _stakingCount,\"Unable to reterive data on specified id, Please try again!!\");\r\n    return _stakerAddress[id];\r\n  }\r\n  \r\n  /**\r\n   * @dev Function to get Staking Starting time by id\r\n   * @param id stake id for the stake\r\n   */\r\n  function getStakingStartTimeById(uint256 id)public view returns(uint256){\r\n    require(id <= _stakingCount,\"Unable to reterive data on specified id, Please try again!!\");\r\n    return _stakingStartTime[id];\r\n  }\r\n  \r\n  /**\r\n   * @dev Function to get Staking tokens by id\r\n   * @param id stake id for the stake\r\n   */\r\n  function getStakingTokenById(uint256 id)public view returns(uint256){\r\n    require(id <= _stakingCount,\"Unable to reterive data on specified id, Please try again!!\");\r\n    return _usersTokens[id];\r\n  }\r\n  \r\n /**\r\n   * @dev Function to get active Staking tokens by id\r\n   * @param id stake id for the stake\r\n   */\r\n  function getActiveStakesById(uint256 id)public view returns(address){\r\n    return _stakerAddress[id];\r\n  }\r\n\r\n  /**\r\n   * @dev Function to get Token lockstatus by id\r\n   * @param id stake id for the stake\r\n   */\r\n  function getTokenLockstatus(uint256 id)public view returns(bool){\r\n    return _TokenTransactionstatus[id];\r\n  }\r\n\r\n  /**\r\n   * @dev Function to get staking count\r\n   */\r\n  function getStakingCount() public view returns(uint256){\r\n      return _stakingCount;\r\n  }\r\n\r\n  /**\r\n   * @dev Function to get Rewards on the stake\r\n   * @param id stake id for the stake\r\n   */\r\n  function getRewardsDetailsOfUserById(uint256 id) public view returns(uint256){\r\n      return (_usersTokens[id].mul(_rewardPercentage).mul((block.timestamp - _stakingStartTime[id])/86400)).div(36500);\r\n  }\r\n\r\n  /**\r\n   * @dev Function for setting withdraw time limit by owner\r\n   * @param withdrawLimit Withdraw Limit\r\n   */\r\n  function setWithdrawLimit(uint256 withdrawLimit) public onlyOwner returns(bool){\r\n    require(withdrawLimit > 0, \"Invalid Time\");\r\n    _withdrawLimit = withdrawLimit;\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Function for getting withdraw limit by owner\r\n   */\r\n  function getWithdrawLimit() public view returns(uint256){\r\n    return _withdrawLimit;\r\n  }\r\n\r\n  /**\r\n   * @dev Function to performs staking for user tokens for a specific period of time\r\n   * @param tokens number of tokens\r\n   */\r\n  function performStaking(uint256 tokens) public failSafe returns(bool){\r\n    require(tokens > 0, \"tokens cannot be zero\");  \r\n    require(crowdSaleStarted == false, \"Crowdsale not ended\");\r\n    _stakingCount = _stakingCount +1 ;\r\n    _stakerAddress[_stakingCount] = msg.sender;\r\n    _stakingStartTime[_stakingCount] = block.timestamp;\r\n    _usersTokens[_stakingCount] = tokens;\r\n    _TokenTransactionstatus[_stakingCount] = false;\r\n    _transfer(msg.sender, _tokenPoolAddress, tokens);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Function for withdrawing staked tokens\r\n   * @param stakingId stake id for the stake\r\n   */\r\n  function withdrawStakedTokens(uint256 stakingId) public failSafe returns(bool){\r\n    require(_stakerAddress[stakingId] == msg.sender,\"No staked token found on this address and ID\");\r\n    require(_TokenTransactionstatus[stakingId] != true,\"Either tokens are already withdrawn or blocked by admin\");\r\n    require(balanceOf(_tokenPoolAddress) >= _usersTokens[stakingId], \"Pool is dry, can not perform transaction\");\r\n    _TokenTransactionstatus[stakingId] = true;\r\n        if (block.timestamp > _stakingStartTime[_stakingCount].add(_withdrawLimit)){\r\n          _finalWithdrawlStake[stakingId] = _usersTokens[stakingId] +getRewardsDetailsOfUserById(stakingId);\r\n        _transfer(_tokenPoolAddress, msg.sender, _usersTokens[stakingId]);\r\n        _transfer(_owner, msg.sender, getRewardsDetailsOfUserById(stakingId));\r\n        }\r\n        else {\r\n         _transfer(_tokenPoolAddress, msg.sender, _usersTokens[stakingId]); \r\n        }\r\n    return true;\r\n  }\r\n\r\n/*\r\n * -------------------------------------------------------------------------------------\r\n * Functions for Governance Functionality\r\n * -------------------------------------------------------------------------------------\r\n */\r\n\r\n  // Map a proposal ID to a specific proposal\r\n  mapping(uint256 => Proposal) public proposals;\r\n  // Map a proposal ID to a voter's address and their vote\r\n  mapping(uint256 => mapping(address => bool)) public voted;\r\n  // Determine if the user is blocked from voting\r\n  mapping (address => uint256) public blocked;\r\n  mapping (address => bool) public isBlocked;\r\n  mapping (uint256 => mapping (address => bool)) public votes;\r\n  \r\n  uint256 public proposalIDcount = 0;\r\n  struct Proposal {\r\n    address submitter;\r\n    uint256 votingDeadline;\r\n    uint256 inFavour;\r\n    uint256 inAgainst;\r\n  }\r\n\r\nevent VotesSubmitted (uint256 _proposalID);\r\nevent ProposalSubmitted(uint256 proposalId);\r\n\r\n/** \r\n * @dev Modifier to check if a user account is blocked\r\n */\r\n    modifier whenNotBlocked(address _account) {\r\n      require(!isBlocked[_account]);\r\n      _;\r\n    }\r\n\r\n/** \r\n * @dev Function to blacklist any address\r\n * @param status true/false\r\n * @param _account _account address for that particular user\r\n */\r\n  function blacklistAddresses(bool status, address _account) external onlyOwner {\r\n    isBlocked[_account] = status;\r\n  }\r\n\r\n/**\r\n * @dev Allows a token holder to submit a proposal to vote on\r\n * @param voteLength time limit for the voting\r\n */\r\n  function submitProposal(uint256 voteLength) public onlyOwner returns (uint256) {\r\n    _transfer(msg.sender, _owner, 10**_decimal);\r\n    uint256 proposalID = addProposal(msg.sender, voteLength);\r\n    emit ProposalSubmitted(proposalID);\r\n    return proposalID;\r\n  }\r\n\r\n\r\n/**\r\n * @dev Adds a new proposal to the proposal mapping\r\n * @param Submitter address of the submitter who is submitting the proposal\r\n * @param voteLength time limit for the voting\r\n */\r\n  function addProposal(address Submitter, uint256 voteLength) internal returns (uint256) {\r\n   \r\n    uint256 ID = proposalIDcount;\r\n    proposals[ID] = Proposal({\r\n    inFavour: 0,\r\n    inAgainst: 0,\r\n    submitter: Submitter,\r\n    votingDeadline: block.timestamp + voteLength\r\n     });\r\n    proposalIDcount = proposalIDcount.add(1);\r\n    return ID;\r\n  }\r\n\r\n/**\r\n * @dev Allows token holders to submit their votes in favor of a specific proposalID\r\n * @param _proposalID The proposal ID the token holder is voting on\r\n */  \r\n  function submitVote(uint256 _proposalID, bool vote) whenNotBlocked(msg.sender) public returns (bool){\r\n    require(voted[_proposalID][msg.sender] == false, \"Already voted\");\r\n    Proposal memory p = proposals[_proposalID];\r\n    require(p.votingDeadline > block.timestamp, \"Voting time over\");\r\n    if (blocked[msg.sender] == 0) {\r\n      blocked[msg.sender] = _proposalID;\r\n    } else if (p.votingDeadline >   proposals[blocked[msg.sender]].votingDeadline) \r\n    {       \r\n      blocked[msg.sender] = _proposalID;\r\n    }\r\n  \r\n    _transfer(msg.sender, _owner, 10**_decimal);\r\n    \r\n    _burn(_owner, 10**_decimal);\r\n\r\n    voted[_proposalID][msg.sender] = true;\r\n\r\n    if (vote == true){\r\n       proposals[_proposalID].inFavour++;\r\n       votes[_proposalID][msg.sender] = true;   \r\n    }\r\n    else {\r\n    proposals[_proposalID].inAgainst ++;\r\n    votes[_proposalID][msg.sender] = false;\r\n    }\r\n\r\n     emit VotesSubmitted(\r\n        _proposalID); \r\n\r\n    return true;\r\n  }\r\n\r\n/**\r\n * @dev Allows to get status of a proposal for a specific proposalID\r\n * @param _proposalID The proposal ID the proposal\r\n */  \r\nfunction getProposalStatus(uint256 _proposalID) public view returns(bool){\r\nrequire(proposals[_proposalID].votingDeadline < block.timestamp, \"Voting time is not over\");   \r\n if (proposals[_proposalID].inFavour > proposals[_proposalID].inAgainst){\r\nreturn true;\r\n}\r\n    else{\r\nreturn false;\r\n        }\r\n    }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"Name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"Symbol\",\"type\":\"string\"},{\"internalType\":\"uint8\",\"name\":\"Decimal\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"Owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenPoolAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"proposalId\",\"type\":\"uint256\"}],\"name\":\"ProposalSubmitted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_proposalID\",\"type\":\"uint256\"}],\"name\":\"VotesSubmitted\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"_crowdsaleAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_addresses\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_amount\",\"type\":\"uint256[]\"}],\"name\":\"airdropByOwner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_addresses\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_amount\",\"type\":\"uint256[]\"}],\"name\":\"airdropByOwnerForMMM\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"airdropcount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"status\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"blacklistAddresses\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"status\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"stakingId\",\"type\":\"uint256\"}],\"name\":\"blacklistStake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"blocked\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"burnForCrowdsale\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"getActiveStakesById\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getContractETHBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"getFinalWithdrawlStake\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_proposalID\",\"type\":\"uint256\"}],\"name\":\"getProposalStatus\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRewardPercentage\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"getRewardsDetailsOfUserById\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"getStakingAddressById\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getStakingCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"getStakingStartTimeById\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"getStakingTokenById\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"getTokenLockstatus\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTokenpoolAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getWithdrawLimit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getowner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isBlocked\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"performStaking\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"proposalIDcount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"proposals\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"submitter\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"votingDeadline\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"inFavour\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"inAgainst\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"status\",\"type\":\"bool\"}],\"name\":\"setCrowdSalesStatus\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"add\",\"type\":\"address\"}],\"name\":\"setCrowdsaleAddress\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"rewardsPercentage\",\"type\":\"uint256\"}],\"name\":\"setRewardPercentage\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"add\",\"type\":\"address\"}],\"name\":\"setTokenPoolAddress\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"withdrawLimit\",\"type\":\"uint256\"}],\"name\":\"setWithdrawLimit\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"voteLength\",\"type\":\"uint256\"}],\"name\":\"submitProposal\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_proposalID\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"vote\",\"type\":\"bool\"}],\"name\":\"submitVote\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"toggleContractActive\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"voted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"votes\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawETH\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"stakingId\",\"type\":\"uint256\"}],\"name\":\"withdrawStakedTokens\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"StandardToken","CompilerVersion":"v0.7.6+commit.7338295f","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"00000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000000e00000000000000000000000000000000000000000000000000000000000000012000000000000000000000000d09ecd04f035a0a07a2f16cf442d9fc37692cdb8000000000000000000000000d09ecd04f035a0a07a2f16cf442d9fc37692cdb80000000000000000000000000000000000000000000000000000000000000004494c5553000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000004494c555300000000000000000000000000000000000000000000000000000000","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://91d2f99c946bb1acf4d24c3c2db0b46ae6335054a4cd4aa7e4334ebbb66d6fcc"}]}