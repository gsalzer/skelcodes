{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/v076/Team/TeamShareTimelock.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma experimental ABIEncoderV2;\\npragma solidity ^0.7.6;\\n\\nimport \\\"../../common/OVLTokenTypes.sol\\\";\\nimport \\\"../libs/SafeMath.sol\\\";\\n\\nimport \\\"../../interfaces/IDeltaToken.sol\\\";\\n\\ncontract TeamShareTimelock {\\n    using SafeMath for uint256;\\n    \\n    IDeltaToken immutable public DELTA_TOKEN;\\n\\n    uint256 constant private TOTAL_EXPECTED_AMOUNT = 225_000 ether;\\n\\n    /// @dev first month is paid out at the start\\n    uint256 constant private INITIAL_CLAIM = 18_750 ether;\\n    uint256 constant private VESTING_AMOUNT = TOTAL_EXPECTED_AMOUNT - INITIAL_CLAIM;\\n\\n    /// @dev 11 months since we advance the first month so it starts\\n    /// vesting after 30 days for 11 months.\\n    uint256 constant public TOTAL_VESTING_TIME = 330 days;\\n    address immutable public TO;\\n\\n    uint256 public vestingStartTimestamp;\\n    uint256 public vestingEndTimestamp;\\n    uint256 public totalClaimed;\\n\\n    constructor(address _deltaToken, address _to) {\\n        DELTA_TOKEN = IDeltaToken(_deltaToken);\\n        TO = _to;\\n    }\\n\\n    function initialize() public {\\n        require(vestingStartTimestamp == 0, 'ALREADY_INITIALIZED');\\n\\n        DELTA_TOKEN.transferFrom(msg.sender, address(this), TOTAL_EXPECTED_AMOUNT);\\n        require(DELTA_TOKEN.balanceOf(address(this)) == TOTAL_EXPECTED_AMOUNT, 'INSUFFICIENT_AMOUNT');\\n\\n        // Verify whitelistings\\n        UserInformation memory accountInfo = DELTA_TOKEN.userInformation(address(this));\\n        require(accountInfo.noVestingWhitelisted == true, 'NOT_NOVESTING_WHITELISTED');\\n        require(accountInfo.fullSenderWhitelisted == true, 'NOT_FULLSENDER_WHITELISTED');\\n\\n        // Start vesting after 1 month since we advanced the complete first month\\n        vestingStartTimestamp = block.timestamp + 30 days;\\n\\n        // Vesting ends in 11 months after that\\n        vestingEndTimestamp = vestingStartTimestamp + TOTAL_VESTING_TIME;\\n\\n        // send out the first month right away\\n        DELTA_TOKEN.transfer(TO, INITIAL_CLAIM);\\n    }\\n\\n    function claim() public {\\n        require(msg.sender == TO, 'INVALID_SENDER');\\n\\n        // It should never be possible to transfer more\\n        // than VESTING_AMOUNT (206250 DELTA tokens) from this contract.\\n        require(totalClaimed < VESTING_AMOUNT, 'ALL_CLAIMED');\\n\\n        uint256 claimed = claimable();\\n        DELTA_TOKEN.transfer(TO, claimed);\\n\\n        totalClaimed = totalClaimed.add(claimed);\\n    }\\n\\n    function claimable() public view returns (uint256) {\\n        // Nothing claimable prior to the first month since we send an advance the first\\n        // one and don't report any claimable when it's all claimed already.\\n        // This, to ensure the contract is not used to fullSend arbitrary delta tokens.\\n        if(block.timestamp < vestingStartTimestamp || totalClaimed >= VESTING_AMOUNT) {\\n            return 0;\\n        }\\n        \\n        // Vesting has ended, send-out all the balance\\n        if (block.timestamp >= vestingEndTimestamp) {\\n            return DELTA_TOKEN.balanceOf(address(this));\\n        }\\n\\n        uint256 secondsSinceVestingStarted = block.timestamp - vestingStartTimestamp;\\n        return VESTING_AMOUNT.mul(secondsSinceVestingStarted).div(TOTAL_VESTING_TIME).sub(totalClaimed);\\n    }\\n\\n    receive() external payable {\\n        revert();\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/common/OVLTokenTypes.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\n// DELTA-BUG-BOUNTY\\n\\npragma solidity ^0.7.6;\\n\\nstruct VestingTransaction {\\n    uint256 amount;\\n    uint256 fullVestingTimestamp;\\n}\\n\\nstruct WalletTotals {\\n    uint256 mature;\\n    uint256 immature;\\n    uint256 total;\\n}\\n\\nstruct UserInformation {\\n    // This is going to be read from only [0]\\n    uint256 mostMatureTxIndex;\\n    uint256 lastInTxIndex;\\n    uint256 maturedBalance;\\n    uint256 maxBalance;\\n    bool fullSenderWhitelisted;\\n    // Note that recieving immature balances doesnt mean they recieve them fully vested just that senders can do it\\n    bool immatureReceiverWhitelisted;\\n    bool noVestingWhitelisted;\\n}\\n\\nstruct UserInformationLite {\\n    uint256 maturedBalance;\\n    uint256 maxBalance;\\n    uint256 mostMatureTxIndex;\\n    uint256 lastInTxIndex;\\n}\\n\\nstruct VestingTransactionDetailed {\\n    uint256 amount;\\n    uint256 fullVestingTimestamp;\\n    // uint256 percentVestedE4;\\n    uint256 mature;\\n    uint256 immature;\\n}\\n\\n\\nuint256 constant QTY_EPOCHS = 7;\\n\\nuint256 constant SECONDS_PER_EPOCH = 172800; // About 2days\\n\\nuint256 constant FULL_EPOCH_TIME = SECONDS_PER_EPOCH * QTY_EPOCHS;\\n\\n// Precision Multiplier -- this many zeros (23) seems to get all the precision needed for all 18 decimals to be only off by a max of 1 unit\\nuint256 constant PM = 1e23;\\n\"\r\n    },\r\n    \"contracts/v076/libs/SafeMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        uint256 c = a + b;\\n        if (c < a) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b > a) return (false, 0);\\n        return (true, a - b);\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) return (true, 0);\\n        uint256 c = a * b;\\n        if (c / a != b) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a / b);\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a % b);\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b <= a, \\\"SafeMath: subtraction overflow\\\");\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0) return 0;\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: division by zero\\\");\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: modulo by zero\\\");\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IDeltaToken.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma experimental ABIEncoderV2;\\npragma solidity ^0.7.6;\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\"; \\n\\nimport \\\"../common/OVLTokenTypes.sol\\\";\\n\\ninterface IDeltaToken is IERC20 {\\n    function vestingTransactions(address, uint256) external view returns (VestingTransaction memory);\\n    function getUserInfo(address) external view returns (UserInformationLite memory);\\n    function getMatureBalance(address, uint256) external view returns (uint256);\\n    function liquidityRebasingPermitted() external view returns (bool);\\n    function lpTokensInPair() external view returns (uint256);\\n    function governance() external view returns (address);\\n    function performLiquidityRebasing() external;\\n    function distributor() external view returns (address);\\n    function totalsForWallet(address ) external view returns (WalletTotals memory totals);\\n    function adjustBalanceOfNoVestingAccount(address, uint256,bool) external;\\n    function userInformation(address user) external view returns (UserInformation memory);\\n\\n}\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_deltaToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"DELTA_TOKEN\",\"outputs\":[{\"internalType\":\"contract IDeltaToken\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"TO\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"TOTAL_VESTING_TIME\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimable\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalClaimed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vestingEndTimestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vestingStartTimestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]","ContractName":"TeamShareTimelock","CompilerVersion":"v0.7.6+commit.7338295f","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"0000000000000000000000009ea3b5b4ec044b70375236a281986106457b20ef0000000000000000000000003943f78dcc1b07fbd429b3a27b141176350eeb26","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}