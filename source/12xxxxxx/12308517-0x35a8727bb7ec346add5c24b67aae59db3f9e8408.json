{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"/Users/nahuel/nftstudios/0xPay-Contract/contracts/IERC20Token.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.1;\\n\\ninterface ERC20Token {\\n    function transferFrom(\\n        address _from,\\n        address _to,\\n        uint256 _value\\n    ) external returns (bool success);\\n\\n    function transfer(address _to, uint256 _value)\\n        external\\n        returns (bool success);\\n\\n    function balanceOf(address _owner) external returns (uint256 balance);\\n}\\n\"\r\n    },\r\n    \"/Users/nahuel/nftstudios/0xPay-Contract/contracts/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.1;\\n\\nabstract contract Ownable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor () {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(_owner == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n}\\n\"\r\n    },\r\n    \"/Users/nahuel/nftstudios/0xPay-Contract/contracts/PaymentGateway.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.1;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"./Ownable.sol\\\";\\nimport \\\"./IERC20Token.sol\\\";\\n\\ncontract PaymentGateway is Ownable {\\n    // if ERC20 is the 0 address it means that the payment\\n    // was done with ether\\n    event Transaction(\\n        string indexed itxid,\\n        address indexed recipient,\\n        address indexed sender,\\n        string txid,\\n        Amount[] payments,\\n        uint256 date\\n    );\\n\\n    struct Amount {\\n        uint256 value;\\n        address tokenAddress;\\n    }\\n\\n    // 10000ths, instead of 100ths to handle decimal percentage values.\\n    uint16 basisPoints = 10000;\\n\\n    uint256 defaultFee = 50; // This would be 0.005\\n\\n    // Set to 10000 for 0% fee.\\n    mapping(address => uint256) customFee;\\n\\n    function pay(\\n        string memory _txid,\\n        address _recipient,\\n        Amount[] memory _amounts\\n    ) external payable {\\n        require(_amounts.length > 0 || msg.value > 0, \\\"Nothing to pay :shrug:\\\");\\n\\n        uint256 fee = defaultFee;\\n\\n        if (customFee[_recipient] == basisPoints) {\\n            // Since solidity's default value for an unset map of uint256 is 0,\\n            // we use a 100% fee as no fee.\\n            fee = 0;\\n        } else if (customFee[_recipient] != 0) {\\n            fee = customFee[_recipient];\\n        }\\n\\n        uint256 length = msg.value > 0 ? _amounts.length + 1 : _amounts.length;\\n        Amount[] memory payments = new Amount[](length);\\n        for (uint256 i = 0; i < _amounts.length; i++) {\\n            uint256 feeAmount;\\n            if (fee > 0) {\\n                feeAmount = mulScale(_amounts[i].value, fee, basisPoints);\\n            }\\n\\n            ERC20Token token = ERC20Token(_amounts[i].tokenAddress);\\n            require(\\n                token.transferFrom(\\n                    msg.sender,\\n                    _recipient,\\n                    _amounts[i].value - feeAmount\\n                ),\\n                \\\"transferFrom failed\\\"\\n            );\\n\\n            payments[i] = Amount(_amounts[i].value, _amounts[i].tokenAddress);\\n            if (feeAmount > 0) {\\n                require(\\n                    token.transferFrom(msg.sender, address(this), feeAmount),\\n                    \\\"transferFrom failed\\\"\\n                );\\n            }\\n        }\\n\\n        if (msg.value > 0) {\\n            uint256 feeAmount;\\n            if (fee > 0) {\\n                feeAmount = mulScale(msg.value, fee, basisPoints);\\n            }\\n\\n            payable(_recipient).transfer(msg.value - feeAmount);\\n            payments[payments.length - 1] = Amount(msg.value, address(0));\\n        }\\n\\n        emit Transaction(\\n            _txid,\\n            _recipient,\\n            msg.sender,\\n            _txid,\\n            payments,\\n            block.timestamp\\n        );\\n    }\\n\\n    function withdraw() external onlyOwner {\\n        payable(msg.sender).transfer(address(this).balance);\\n    }\\n\\n    function withdrawERC20(address[] memory _tokenAddress) external onlyOwner {\\n        for (uint256 i = 0; i < _tokenAddress.length; i++) {\\n            ERC20Token token = ERC20Token(_tokenAddress[i]);\\n            uint256 balance = token.balanceOf(address(this));\\n            if (balance > 0) {\\n                require(token.transfer(msg.sender, balance), \\\"transfer failed\\\");\\n            }\\n        }\\n    }\\n\\n    function getDefaultFee() external view returns (uint256) {\\n        return defaultFee;\\n    }\\n\\n    function setDefaultFee(uint256 _defaultFee) external onlyOwner {\\n        defaultFee = _defaultFee;\\n    }\\n\\n    function getCustomFee(address _address) external view returns (uint256) {\\n        return customFee[_address];\\n    }\\n\\n    function setCustomFee(address _address, uint256 _customFee)\\n        external\\n        onlyOwner\\n    {\\n        customFee[_address] = _customFee;\\n    }\\n\\n    function mulScale(\\n        uint256 x,\\n        uint256 y,\\n        uint128 scale\\n    ) internal pure returns (uint256) {\\n        uint256 a = x / scale;\\n        uint256 b = x % scale;\\n        uint256 c = y / scale;\\n        uint256 d = y % scale;\\n\\n        return a * c * scale + a * d + b * c + (b * d) / scale;\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"remappings\": [],\r\n    \"optimizer\": {\r\n      \"enabled\": false,\r\n      \"runs\": 200\r\n    },\r\n    \"evmVersion\": \"istanbul\",\r\n    \"libraries\": {},\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}","ABI":"[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"string\",\"name\":\"itxid\",\"type\":\"string\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"txid\",\"type\":\"string\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"}],\"indexed\":false,\"internalType\":\"struct PaymentGateway.Amount[]\",\"name\":\"payments\",\"type\":\"tuple[]\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"date\",\"type\":\"uint256\"}],\"name\":\"Transaction\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"getCustomFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getDefaultFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_txid\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"_recipient\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"}],\"internalType\":\"struct PaymentGateway.Amount[]\",\"name\":\"_amounts\",\"type\":\"tuple[]\"}],\"name\":\"pay\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_customFee\",\"type\":\"uint256\"}],\"name\":\"setCustomFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_defaultFee\",\"type\":\"uint256\"}],\"name\":\"setDefaultFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_tokenAddress\",\"type\":\"address[]\"}],\"name\":\"withdrawERC20\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"PaymentGateway","CompilerVersion":"v0.8.1+commit.df193b15","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}