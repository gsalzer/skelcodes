{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"/private/var/www/nft/contracts/Artwork.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"./ERC755.sol\\\";\\nimport \\\"./Structs.sol\\\";\\nimport \\\"./Constants.sol\\\";\\nimport \\\"./PaymentSplitter.sol\\\";\\n\\ncontract Artwork is ERC755 {\\n    address private _owner;\\n\\n    mapping(uint256 => PaymentSplitter) private _paymentSplittersByTokenId;\\n\\n    string[] private _supportedActions;\\n    mapping(string => string) private _actionGroup;\\n    mapping(string => bool) _supportedRolesMap;\\n    string[] private _supportedRoles;\\n    uint256 private _supportedActionsNum;\\n\\n    mapping(string => uint256) private _paymentsReceived;\\n\\n    mapping(uint256 => bool) private _signedTimestamp;\\n\\n    mapping(address => bool) private _canMint;\\n\\n    mapping(uint256 => string) private _tokenCertificate;\\n\\n    function initialize(\\n        Structs.SupportedAction[] memory supportedActionsList,\\n        string[] memory supportedRolesList\\n    ) external initializer {\\n        __ERC755_init(\\\"LiveArt\\\", \\\"LIVEART\\\");\\n\\n        _owner = _msgSender();\\n        _canMint[_owner] = true;\\n\\n        _updateSupportedRoles(supportedRolesList);\\n        _updateSupportedActions(supportedActionsList);\\n    }\\n\\n    function updateSupportedActions(\\n        Structs.SupportedAction[] memory supportedActionsList,\\n        bytes32 sigR,\\n        bytes32 sigS,\\n        uint8 sigV,\\n        uint256 timestamp\\n    ) public onlyOwner {\\n        _requireMessageSigned(sigR, sigS, sigV, timestamp);\\n        _updateSupportedActions(supportedActionsList);\\n    }\\n\\n    function _updateSupportedActions(\\n        Structs.SupportedAction[] memory supportedActionsList\\n    ) private {\\n        require(\\n            supportedActionsList.length > 0,\\n            \\\"no supported actions\\\"\\n        );\\n        for (uint256 i = 0; i < _supportedActions.length; i++) {\\n            delete _actionGroup[_supportedActions[i]];\\n        }\\n        delete _supportedActions;\\n\\n        for (uint256 i = 0; i < supportedActionsList.length; i++) {\\n            _actionGroup[supportedActionsList[i].action] =\\n            supportedActionsList[i].group;\\n            _supportedActions.push(supportedActionsList[i].action);\\n        }\\n        _supportedActionsNum = supportedActionsList.length;\\n    }\\n\\n    function updateSupportedRoles(\\n        string[] memory supportedRolesList,\\n        bytes32 sigR,\\n        bytes32 sigS,\\n        uint8 sigV,\\n        uint256 timestamp\\n    ) public onlyOwner {\\n        _requireMessageSigned(sigR, sigS, sigV, timestamp);\\n        _updateSupportedRoles(supportedRolesList);\\n    }\\n\\n    function _updateSupportedRoles(\\n        string[] memory supportedRolesList\\n    ) private {\\n        require(\\n            supportedRolesList.length > 0,\\n            \\\"no supported roles\\\"\\n        );\\n\\n        for (uint256 i = 0; i < _supportedRoles.length; i++) {\\n            delete _supportedRolesMap[_supportedRoles[i]];\\n        }\\n        delete _supportedRoles;\\n\\n        bool ownerIsSupported = false;\\n        bool creatorIsSupported = false;\\n        for (uint256 i = 0; i < supportedRolesList.length; i++) {\\n            _supportedRolesMap[supportedRolesList[i]] = true;\\n            if (keccak256(bytes(supportedRolesList[i])) == Constants.ROLE_OWNER) {\\n                ownerIsSupported = true;\\n            }\\n            if (keccak256(bytes(supportedRolesList[i])) == Constants.ROLE_CREATOR) {\\n                creatorIsSupported = true;\\n            }\\n        }\\n        _supportedRoles = supportedRolesList;\\n        require(ownerIsSupported, \\\"owner role should be supported\\\");\\n        require(ownerIsSupported, \\\"creator role should be supported\\\");\\n    }\\n\\n    modifier onlyOwner() {\\n        require(_owner == _msgSender(), \\\"caller is not the owner\\\");\\n        _;\\n    }\\n\\n    function _requireMessageSigned(\\n        bytes32 r,\\n        bytes32 s,\\n        uint8 v,\\n        uint256 timestamp\\n    ) private {\\n        require(\\n            !_signedTimestamp[timestamp],\\n            \\\"timestamp already signed\\\"\\n        );\\n        require(\\n            _msgSender() == ecrecover(\\n                keccak256(abi.encodePacked(\\n                    \\\"\\\\x19\\\\x01\\\",\\n                    Constants._DOMAIN_SEPARATOR,\\n                    keccak256(abi.encode(\\n                        keccak256(\\\"BasicOperation(uint256 timestamp)\\\"),\\n                        timestamp\\n                    ))\\n                )),\\n                v,\\n                r,\\n                s\\n            ),\\n            \\\"invalid sig\\\"\\n        );\\n\\n        _signedTimestamp[timestamp] = true;\\n    }\\n\\n    function _requireCanMint() private view {\\n        require(\\n            _canMint[_msgSender()],\\n            \\\"can't mint\\\"\\n        );\\n    }\\n\\n    function _actionSupported(string memory action) private view returns (bool) {\\n        return bytes(_actionGroup[action]).length > 0;\\n    }\\n\\n    function supportedActions() external view override returns (string[] memory) {\\n        return _supportedActions;\\n    }\\n\\n    function supportedRoles() external view returns (string[] memory) {\\n        return _supportedRoles;\\n    }\\n\\n    function createArtwork(\\n        Structs.RoyaltyReceiver[] memory royaltyReceivers,\\n        Structs.Policy[] memory creationRights,\\n        string memory metadataURI,\\n        uint256 editionOf,\\n        uint256 maxTokenSupply,\\n        bytes32 sigR,\\n        bytes32 sigS,\\n        uint8 sigV,\\n        uint256 timestamp\\n    ) external returns(uint256) {\\n        _requireMessageSigned(sigR, sigS, sigV, timestamp);\\n        _requireCanMint();\\n        require(\\n            creationRights.length >= _supportedActionsNum,\\n            \\\"all rights should be set\\\"\\n        );\\n        if (editionOf > 0) {\\n            require(\\n                maxTokenSupply == 1,\\n                \\\"invalid token supply for edition\\\"\\n            );\\n        }\\n\\n        _tokenId++;\\n\\n        uint256 newItemId = _tokenId;\\n\\n        if (maxTokenSupply > 0) {\\n            _tokenSupply[newItemId] = maxTokenSupply;\\n            _tokenEditions[newItemId].push(newItemId);\\n        }\\n        if (editionOf > 0) {\\n            require(\\n                _exists(editionOf),\\n                \\\"original token does not exist\\\"\\n            );\\n            _tokenEditions[editionOf].push(newItemId);\\n            require(\\n                _tokenSupply[editionOf] >= _tokenEditions[editionOf].length,\\n                \\\"editions limit reached\\\"\\n            );\\n        }\\n\\n        Structs.Policy[] storage tokenRights = _rightsByToken[newItemId];\\n        for (uint256 i = 0; i < creationRights.length; i++) {\\n            creationRights[i].target = newItemId;\\n            require(\\n                _actionSupported(creationRights[i].action),\\n                \\\"unsupported action\\\"\\n            );\\n            require(\\n                _supportedRolesMap[creationRights[i].permission.role],\\n                \\\"unsupported role\\\"\\n            );\\n            tokenRights.push(creationRights[i]);\\n        }\\n\\n        PaymentSplitter paymentSplitterAddress = new PaymentSplitter(\\n            royaltyReceivers,\\n            newItemId\\n        );\\n        _paymentSplittersByTokenId[newItemId] = paymentSplitterAddress;\\n        _setTokenURI(newItemId, metadataURI);\\n\\n        for (uint256 i = 0; i < creationRights.length; i++) {\\n            if (\\n                keccak256(bytes(creationRights[i].permission.role)) ==\\n                Constants.ROLE_CREATOR\\n            ) {\\n                if (\\n                    !isApprovedForAll(\\n                        creationRights[i].permission.wallet,\\n                        _msgSender()\\n                    )\\n                ) {\\n                    _setApprovalForAll(\\n                        creationRights[i].permission.wallet,\\n                        _msgSender(),\\n                        true\\n                    );\\n                }\\n            }\\n        }\\n\\n        emit ArtworkCreated(\\n            newItemId,\\n            creationRights,\\n            metadataURI,\\n            editionOf,\\n            maxTokenSupply,\\n            block.timestamp\\n        );\\n\\n        return newItemId;\\n    }\\n\\n    function _generatePaymentReceivedKey(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        Structs.Policy[] memory policies\\n    ) private pure returns (string memory) {\\n        string memory actions;\\n\\n        for (uint256 i = 0; i < policies.length; i++) {\\n            actions = string(abi.encodePacked(actions, policies[i].action));\\n        }\\n\\n        return string(abi.encodePacked(from, to, tokenId, actions));\\n    }\\n\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        Structs.Policy[] memory policies\\n    ) internal view override {\\n        if (_paymentSplittersByTokenId[tokenId].hasRoyaltyReceivers()) {\\n            require(\\n                _paymentsReceived[\\n                    _generatePaymentReceivedKey(from, to, tokenId, policies)\\n                ] > 0,\\n                \\\"payment not received\\\"\\n            );\\n        }\\n    }\\n\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        Structs.Policy[] memory policies\\n    ) internal override {\\n        delete _paymentsReceived[\\n            _generatePaymentReceivedKey(from, to, tokenId, policies)\\n        ];\\n    }\\n\\n    function payForTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        Structs.Policy[] memory policies\\n    ) external override payable {\\n        require(\\n            _exists(tokenId),\\n            \\\"no token to pay for\\\"\\n        );\\n        require(\\n            msg.value > 0,\\n            \\\"no payment received\\\"\\n        );\\n\\n        for (uint256 i = 0; i < policies.length; i++) {\\n            policies[i].target = tokenId;\\n        }\\n        emit PaymentReceived(\\n            from,\\n            to,\\n            tokenId,\\n            msg.value,\\n            policies,\\n            block.timestamp\\n        );\\n\\n        _paymentsReceived[\\n            _generatePaymentReceivedKey(from, to, tokenId, policies)\\n        ] = msg.value;\\n\\n        AddressUpgradeable.sendValue(\\n            payable(address(_paymentSplittersByTokenId[tokenId])),\\n            msg.value\\n        );\\n        _paymentSplittersByTokenId[tokenId].releasePayment(\\n            msg.value,\\n            payable(from)\\n        );\\n    }\\n\\n    function paymentSplitter(uint256 tokenId) external view returns (address) {\\n        require(_exists(tokenId));\\n        return address(_paymentSplittersByTokenId[tokenId]);\\n    }\\n\\n    function version() external virtual pure returns (uint256) {\\n        return 1;\\n    }\\n\\n    function rightsOwned(\\n        address owner,\\n        Structs.Policy[] memory policies,\\n        uint256 tokenId\\n    ) external override view returns (bool) {\\n        require(_exists(tokenId), \\\"token does not exist\\\");\\n\\n        for (uint256 i = 0; i < policies.length; i++) {\\n            if (policies[i].permission.wallet != owner) {\\n                return false;\\n            }\\n\\n            bool foundTokenRight = false;\\n            for (uint256 j = 0; j < _rightsByToken[tokenId].length; j++) {\\n                if (\\n                    compareStrings(_rightsByToken[tokenId][j].action, policies[i].action) &&\\n                    _rightsByToken[tokenId][j].permission.wallet == owner\\n                ) {\\n                    foundTokenRight = true;\\n                }\\n            }\\n            if (!foundTokenRight) {\\n                return false;\\n            }\\n        }\\n\\n        return true;\\n    }\\n\\n    function approveByOperator(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external {\\n        require(\\n            isApprovedForAll(\\n                from,\\n                _msgSender()\\n            ),\\n            \\\"not operator for a token\\\"\\n        );\\n\\n        _approve(\\n            from,\\n            to,\\n            tokenId\\n        );\\n    }\\n\\n    function addMinter(\\n        address minter,\\n        bytes32 r,\\n        bytes32 s,\\n        uint8 v,\\n        uint256 timestamp\\n    ) external onlyOwner {\\n        _requireMessageSigned(r, s, v, timestamp);\\n\\n        _canMint[minter] = true;\\n    }\\n\\n    function removeMinter(\\n        address minter,\\n        bytes32 r,\\n        bytes32 s,\\n        uint8 v,\\n        uint256 timestamp\\n    ) external onlyOwner {\\n        _requireMessageSigned(r, s, v, timestamp);\\n        require(minter != _owner, \\\"can't remove owner\\\");\\n\\n        delete _canMint[minter];\\n    }\\n\\n    function setTokenCertificate(\\n        uint256 tokenId,\\n        string memory certificateURI\\n    ) external {\\n        _requireCanMint();\\n        require(\\n            bytes(_tokenCertificate[tokenId]).length == 0,\\n            \\\"can't change certificate\\\"\\n        );\\n\\n        _tokenCertificate[tokenId] = certificateURI;\\n    }\\n\\n    function getTokenCertificate(\\n        uint256 tokenId\\n    ) external view returns (string memory) {\\n        return _tokenCertificate[tokenId];\\n    }\\n}\"\r\n    },\r\n    \"/private/var/www/nft/contracts/Constants.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nlibrary Constants {\\n    bytes32 constant ROLE_OWNER = keccak256(bytes(\\\"ROLE_OWNER\\\"));\\n    bytes32 constant ROLE_CREATOR = keccak256(bytes(\\\"ROLE_CREATOR\\\"));\\n    bytes32 constant _DOMAIN_SEPARATOR = keccak256(abi.encode(\\n        keccak256(\\\"EIP712Domain(string name,string version)\\\"),\\n        keccak256(\\\"LiveArt\\\"),\\n        keccak256(\\\"1\\\")\\n    ));\\n}\"\r\n    },\r\n    \"/private/var/www/nft/contracts/ERC755.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\\\";\\nimport \\\"./IERC755.sol\\\";\\nimport \\\"./IERC755Receiver.sol\\\";\\n\\nabstract contract ERC755 is IERC755, Context, Initializable {\\n    using AddressUpgradeable for address;\\n\\n    uint256 internal _tokenId;\\n\\n    string private _name;\\n    string private _symbol;\\n    mapping (uint256 => string) private _tokenURIs;\\n\\n    mapping (address => mapping(uint256 => address)) private _tokenApprovals;\\n    mapping (address => mapping(address => bool)) private _operatorApprovals;\\n\\n    mapping (uint256 => uint256[]) internal _tokenEditions;\\n    mapping (uint256 => uint256) internal _tokenSupply;\\n\\n    mapping (uint256 => Structs.Policy[]) internal _rightsByToken;\\n\\n    function __ERC755_init(string memory tokenName, string memory tokenSymbol) internal {\\n        _name = tokenName;\\n        _symbol = tokenSymbol;\\n    }\\n\\n    function name() external view override returns (string memory) {\\n        return _name;\\n    }\\n\\n    function symbol() external view override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    function supportsInterface(bytes4 interfaceId) external pure override returns (bool) {\\n        return interfaceId == type(IERC755).interfaceId;\\n    }\\n\\n    function tokenURI(uint256 tokenId) external view override returns (string memory) {\\n        require(_exists(tokenId));\\n\\n        return _tokenURIs[tokenId];\\n    }\\n\\n    function _setTokenURI(uint256 tokenId, string memory _tokenURI) internal virtual {\\n        require(_exists(tokenId));\\n        _tokenURIs[tokenId] = _tokenURI;\\n    }\\n\\n    function _haveTokenRights(address owner, uint256 tokenId) internal view returns (bool) {\\n        for (uint256 i = 0; i < _rightsByToken[tokenId].length; i++) {\\n            if (_rightsByToken[tokenId][i].permission.wallet == owner) {\\n                return true;\\n            }\\n        }\\n        return false;\\n    }\\n\\n    function approve(\\n        address to,\\n        uint256 tokenId\\n    ) external override payable {\\n        require(\\n            _exists(tokenId),\\n            \\\"no token to approve\\\"\\n        );\\n        require(\\n            _haveTokenRights(_msgSender(), tokenId),\\n            \\\"no rights to approve\\\"\\n        );\\n\\n        _approve(_msgSender(), to, tokenId);\\n    }\\n\\n    function _approve(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal {\\n        _tokenApprovals[from][tokenId] = to;\\n        emit Approval(from, to, tokenId);\\n    }\\n\\n    function getApproved(\\n        address from,\\n        uint256 tokenId\\n    ) public view override returns (address operator) {\\n        require(_exists(tokenId), \\\"token does not exist\\\");\\n\\n        return _tokenApprovals[from][tokenId];\\n    }\\n\\n    function setApprovalForAll(address operator, bool approved) external override {\\n        _setApprovalForAll(_msgSender(), operator, approved);\\n        emit ApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    function _setApprovalForAll(address owner, address operator, bool approved) internal {\\n        _operatorApprovals[owner][operator] = approved;\\n    }\\n\\n    function isApprovedForAll(\\n        address owner,\\n        address operator\\n    ) public view virtual override returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    function _exists(uint256 tokenId) internal view returns (bool) {\\n        return tokenId > 0 && tokenId <= _tokenId;\\n    }\\n\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        Structs.Policy[] memory policies\\n    ) internal virtual {}\\n\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        Structs.Policy[] memory policies,\\n        bytes memory data\\n    ) external override payable {\\n        require(_exists(tokenId), \\\"token does not exist\\\");\\n        require(policies.length > 0, \\\"no rights to transfer\\\");\\n        require(\\n            _haveTokenRights(from, tokenId),\\n            \\\"from has no rights to transfer\\\"\\n        );\\n        require(\\n            from != to,\\n            \\\"can't transfer to self\\\"\\n        );\\n        if (_msgSender() != from) {\\n            require(\\n                getApproved(from, tokenId) == _msgSender() ||\\n                isApprovedForAll(from, _msgSender()),\\n                \\\"msg sender is not approved nor operator\\\"\\n            );\\n        }\\n\\n        _beforeTokenTransfer(from, to, tokenId, policies);\\n\\n        for (uint256 i = 0; i < policies.length; i++) {\\n            require(\\n                policies[i].permission.wallet == from,\\n                \\\"right is not owned\\\"\\n            );\\n\\n            bool foundTransferRight = false;\\n            for (uint256 j = 0; j < _rightsByToken[tokenId].length; j++) {\\n                if (\\n                    compareStrings(_rightsByToken[tokenId][j].action, policies[i].action) &&\\n                    _rightsByToken[tokenId][j].permission.wallet == from\\n                ) {\\n                    policies[i].target = tokenId;\\n                    policies[i].permission.role = \\\"ROLE_OWNER\\\";\\n                    policies[i].permission.wallet = to;\\n                    _rightsByToken[tokenId][j] = policies[i];\\n                    foundTransferRight = true;\\n                }\\n            }\\n            require(foundTransferRight, \\\"transfer right is not owned\\\");\\n        }\\n\\n        emit Transfer(\\n            from,\\n            to,\\n            tokenId,\\n            policies,\\n            block.timestamp\\n        );\\n        _afterTokenTransfer(from, to, tokenId, policies);\\n\\n        if (!_haveTokenRights(from, tokenId)) {\\n            _tokenApprovals[from][tokenId] = address(0);\\n        }\\n\\n        _checkOnERC755Received(from, to, tokenId, policies, data);\\n    }\\n\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        Structs.Policy[] memory policies\\n    ) internal virtual {}\\n\\n    function editions(uint256 tokenId) external override view returns (uint256[] memory) {\\n        require(_exists(tokenId), \\\"token does not exist\\\");\\n\\n        return _tokenEditions[tokenId];\\n    }\\n\\n    function totalSupply() external override view returns (uint256) {\\n        return _tokenId;\\n    }\\n\\n    function tokenSupply(uint256 tokenId) external override view returns (uint256) {\\n        require(_exists(tokenId), \\\"token does not exist\\\");\\n\\n        return _tokenSupply[tokenId];\\n    }\\n\\n    function rights(uint256 tokenId) external override view returns (Structs.Policy[] memory) {\\n        require(_exists(tokenId), \\\"token does not exist\\\");\\n\\n        return _rightsByToken[tokenId];\\n    }\\n\\n    function _checkOnERC755Received(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        Structs.Policy[] memory policies,\\n        bytes memory _data\\n    ) private {\\n        if (to.isContract()) {\\n            require(\\n                IERC755Receiver(to).onERC755Received(\\n                    _msgSender(),\\n                    from,\\n                    tokenId,\\n                    policies,\\n                    _data\\n                ) == IERC755Receiver(to).onERC755Received.selector,\\n                    \\\"receiver is not a IERC755Receiver\\\"\\n            );\\n        }\\n    }\\n\\n    function compareStrings(string memory a, string memory b) internal pure returns (bool) {\\n        return keccak256(bytes(a)) == keccak256(bytes(b));\\n    }\\n}\"\r\n    },\r\n    \"/private/var/www/nft/contracts/IERC755.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/utils/introspection/IERC165.sol\\\";\\nimport \\\"./Structs.sol\\\";\\n\\ninterface IERC755 is IERC165 {\\n    event PaymentReceived(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        uint256 amount,\\n        Structs.Policy[] transferRights,\\n        uint256 timestamp\\n    );\\n    event ArtworkCreated(\\n        uint256 tokenId,\\n        Structs.Policy[] creationRights,\\n        string tokenURI,\\n        uint256 editionOf,\\n        uint256 maxTokenSupply,\\n        uint256 timestamp\\n    );\\n    event Transfer(\\n        address indexed from,\\n        address indexed to,\\n        uint256 indexed tokenId,\\n        Structs.Policy[] rights,\\n        uint256 timestamp\\n    );\\n\\n    event Approval(\\n        address indexed approver,\\n        address indexed approved,\\n        uint256 indexed tokenId\\n    );\\n    event ApprovalForAll(\\n        address indexed approver,\\n        address indexed operator,\\n        bool approved\\n    );\\n\\n    function name() external view returns (string memory);\\n\\n    function symbol() external view returns (string memory);\\n\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        Structs.Policy[] memory policies,\\n        bytes calldata data\\n    ) external payable;\\n\\n    function payForTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        Structs.Policy[] memory policies\\n    ) external payable;\\n\\n    function approve(\\n        address to,\\n        uint256 tokenId\\n    ) external payable;\\n\\n    function getApproved(\\n        address from,\\n        uint256 tokenId\\n    ) external view returns (address);\\n\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    function editions(uint256 tokenId) external view returns (uint256[] memory);\\n\\n    function totalSupply() external view returns (uint256);\\n\\n    function tokenSupply(uint256 tokenId) external view returns (uint256);\\n\\n    function rights(uint256 tokenId) external view returns (Structs.Policy[] memory);\\n\\n    function supportedActions() external view returns (string[] memory);\\n\\n    function rightsOwned(\\n        address owner,\\n        Structs.Policy[] memory policies,\\n        uint256 tokenId\\n    ) external view returns (bool);\\n}\"\r\n    },\r\n    \"/private/var/www/nft/contracts/IERC755Receiver.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"./Structs.sol\\\";\\n\\ninterface IERC755Receiver {\\n    function onERC755Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        Structs.Policy[] memory rights,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\"\r\n    },\r\n    \"/private/var/www/nft/contracts/PaymentSplitter.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\\\";\\nimport \\\"./Structs.sol\\\";\\n\\ncontract PaymentSplitter is Context {\\n    using AddressUpgradeable for address;\\n\\n    address private _owner;\\n\\n    event PayeeAdded(address account, string role);\\n\\n    event PaymentReleased(address to, uint256 amount);\\n    event PaymentReceived(uint256 amount, uint256 tokenId);\\n\\n    Structs.RoyaltyReceiver[] private _royaltyReceivers;\\n    uint256 private _tokenId;\\n\\n    uint256 private highestPrice;\\n\\n    constructor(\\n        Structs.RoyaltyReceiver[] memory royaltyReceivers,\\n        uint256 tokenId\\n    ) payable {\\n        for (uint256 i = 0; i < royaltyReceivers.length; i++) {\\n            require(\\n                bytes(royaltyReceivers[i].role).length > 0,\\n                \\\"role is empty\\\"\\n            );\\n            require(\\n                royaltyReceivers[i].percentage > 0 ||\\n                royaltyReceivers[i].fixedCut > 0,\\n                \\\"no royalties\\\"\\n            );\\n            _royaltyReceivers.push(\\n                royaltyReceivers[i]\\n            );\\n        }\\n        _tokenId = tokenId;\\n\\n        _owner = _msgSender();\\n    }\\n\\n    modifier onlyOwner() {\\n        require(_owner == _msgSender(), \\\"PS: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    function hasRoyaltyReceivers() external view onlyOwner returns (bool) {\\n        return _royaltyReceivers.length > 0;\\n    }\\n\\n    function addPayee(\\n        Structs.RoyaltyReceiver memory royaltyReceiver\\n    ) external onlyOwner {\\n        require(royaltyReceiver.wallet != address(0),\\n            \\\"addPayee: wallet is the zero address\\\"\\n        );\\n        require(\\n            royaltyReceiver.percentage > 0 || royaltyReceiver.fixedCut > 0,\\n            \\\"addPayee: shares are 0\\\"\\n        );\\n\\n        _royaltyReceivers.push(\\n            royaltyReceiver\\n        );\\n\\n        emit PayeeAdded(royaltyReceiver.wallet, royaltyReceiver.role);\\n    }\\n\\n    function _removeRoyaltyReceiver(\\n        address payee\\n    ) private {\\n        for (uint256 i = 0; i < _royaltyReceivers.length; i++) {\\n            if (_royaltyReceivers[i].wallet == payee) {\\n                if (i == _royaltyReceivers.length - 1) {\\n                    _royaltyReceivers.pop();\\n                } else {\\n                    for (uint256 j = i; j < _royaltyReceivers.length - 1; j++) {\\n                        _royaltyReceivers[j] = _royaltyReceivers[j + 1];\\n                    }\\n                    _royaltyReceivers.pop();\\n                }\\n            }\\n        }\\n    }\\n\\n    receive() external payable {\\n        emit PaymentReceived(msg.value, _tokenId);\\n    }\\n\\n    function _calculatePercentage(\\n        uint256 number,\\n        uint256 percentage\\n    ) private pure returns (uint256) {\\n        // https://ethereum.stackexchange.com/a/55702\\n        // https://www.investopedia.com/terms/b/basispoint.asp\\n        return number * percentage / 10000;\\n    }\\n\\n    function calculatePayment(\\n        uint256 totalReceived,\\n        uint256 percentage,\\n        uint256 fixedCut,\\n        uint256 CAPPS\\n    ) private pure returns (uint256) {\\n        require(totalReceived > 0, \\\"release amount == 0\\\");\\n        require(\\n            percentage > 0 || fixedCut > 0 || CAPPS > 0,\\n            \\\"no royalties to send\\\"\\n        );\\n\\n        return _calculatePercentage(totalReceived, percentage) + fixedCut + CAPPS;\\n    }\\n\\n    function releasePayment(\\n        uint256 currentPaymentFunds,\\n        address payable paymentReceiver\\n    ) external onlyOwner {\\n        uint256 released = 0;\\n\\n        if (_royaltyReceivers.length > 0) {\\n            uint256 CAPPS = 0;\\n            if (currentPaymentFunds > highestPrice && highestPrice > 0) {\\n                CAPPS = currentPaymentFunds - highestPrice;\\n            }\\n\\n            for (uint256 i = 0; i < _royaltyReceivers.length; i++) {\\n                uint256 CAPPSShare = 0;\\n                if (CAPPS > 0) {\\n                    CAPPSShare = _calculatePercentage(\\n                        CAPPS,\\n                        _royaltyReceivers[i].CAPPS\\n                    );\\n                }\\n\\n                Structs.RoyaltyReceiver memory currentRoyaltyReceiver = _royaltyReceivers[i];\\n\\n                if (\\n                    _royaltyReceivers[i].percentage !=\\n                    _royaltyReceivers[i].resalePercentage\\n                ) {\\n                    _royaltyReceivers[i].percentage =\\n                        _royaltyReceivers[i].resalePercentage;\\n                    if (\\n                        _royaltyReceivers[i].percentage == 0 &&\\n                        _royaltyReceivers[i].fixedCut == 0 &&\\n                        _royaltyReceivers[i].CAPPS == 0\\n                    ) {\\n                        _removeRoyaltyReceiver(_royaltyReceivers[i].wallet);\\n                    }\\n                }\\n\\n                if (\\n                    currentRoyaltyReceiver.percentage > 0 ||\\n                    currentRoyaltyReceiver.fixedCut > 0 ||\\n                    CAPPSShare > 0\\n                ) {\\n                    uint256 payment = calculatePayment(\\n                        currentPaymentFunds,\\n                        currentRoyaltyReceiver.percentage,\\n                        currentRoyaltyReceiver.fixedCut,\\n                        CAPPSShare\\n                    );\\n                    released += payment;\\n\\n                    emit PaymentReleased(currentRoyaltyReceiver.wallet, payment);\\n                    AddressUpgradeable.sendValue(currentRoyaltyReceiver.wallet, payment);\\n                }\\n            }\\n\\n            if (currentPaymentFunds > highestPrice) {\\n                highestPrice = currentPaymentFunds;\\n            }\\n        }\\n\\n        if (currentPaymentFunds - released > 0) {\\n            emit PaymentReleased(paymentReceiver, currentPaymentFunds - released);\\n            AddressUpgradeable.sendValue(paymentReceiver, currentPaymentFunds - released);\\n        }\\n    }\\n}\"\r\n    },\r\n    \"/private/var/www/nft/contracts/Structs.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nlibrary Structs {\\n    struct RoyaltyReceiver {\\n        address payable wallet;\\n        string role;\\n        uint256 percentage;\\n        uint256 resalePercentage;\\n        uint256 CAPPS;\\n        uint256 fixedCut;\\n    }\\n\\n    struct Party {\\n        string role;\\n        address wallet;\\n    }\\n\\n    struct Policy {\\n        string action;\\n        uint256 target;\\n        Party permission;\\n    }\\n\\n    struct SupportedAction {\\n        string action;\\n        string group;\\n    }\\n\\n    struct BasicOperation {\\n        string operation;\\n    }\\n}\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\n// solhint-disable-next-line compiler-version\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n */\\nabstract contract Initializable {\\n\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        require(_initializing || !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/introspection/IERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"remappings\": [],\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"evmVersion\": \"istanbul\",\r\n    \"libraries\": {},\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}","ABI":"[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approver\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approver\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"string\",\"name\":\"action\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"target\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"string\",\"name\":\"role\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"}],\"internalType\":\"struct Structs.Party\",\"name\":\"permission\",\"type\":\"tuple\"}],\"indexed\":false,\"internalType\":\"struct Structs.Policy[]\",\"name\":\"creationRights\",\"type\":\"tuple[]\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"tokenURI\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"editionOf\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"maxTokenSupply\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"ArtworkCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"string\",\"name\":\"action\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"target\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"string\",\"name\":\"role\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"}],\"internalType\":\"struct Structs.Party\",\"name\":\"permission\",\"type\":\"tuple\"}],\"indexed\":false,\"internalType\":\"struct Structs.Policy[]\",\"name\":\"transferRights\",\"type\":\"tuple[]\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"PaymentReceived\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"string\",\"name\":\"action\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"target\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"string\",\"name\":\"role\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"}],\"internalType\":\"struct Structs.Party\",\"name\":\"permission\",\"type\":\"tuple\"}],\"indexed\":false,\"internalType\":\"struct Structs.Policy[]\",\"name\":\"rights\",\"type\":\"tuple[]\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"minter\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"addMinter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approveByOperator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address payable\",\"name\":\"wallet\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"role\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"percentage\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"resalePercentage\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"CAPPS\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"fixedCut\",\"type\":\"uint256\"}],\"internalType\":\"struct Structs.RoyaltyReceiver[]\",\"name\":\"royaltyReceivers\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"string\",\"name\":\"action\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"target\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"string\",\"name\":\"role\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"}],\"internalType\":\"struct Structs.Party\",\"name\":\"permission\",\"type\":\"tuple\"}],\"internalType\":\"struct Structs.Policy[]\",\"name\":\"creationRights\",\"type\":\"tuple[]\"},{\"internalType\":\"string\",\"name\":\"metadataURI\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"editionOf\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxTokenSupply\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"sigR\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"sigS\",\"type\":\"bytes32\"},{\"internalType\":\"uint8\",\"name\":\"sigV\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"createArtwork\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"editions\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getTokenCertificate\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"action\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"group\",\"type\":\"string\"}],\"internalType\":\"struct Structs.SupportedAction[]\",\"name\":\"supportedActionsList\",\"type\":\"tuple[]\"},{\"internalType\":\"string[]\",\"name\":\"supportedRolesList\",\"type\":\"string[]\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"string\",\"name\":\"action\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"target\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"string\",\"name\":\"role\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"}],\"internalType\":\"struct Structs.Party\",\"name\":\"permission\",\"type\":\"tuple\"}],\"internalType\":\"struct Structs.Policy[]\",\"name\":\"policies\",\"type\":\"tuple[]\"}],\"name\":\"payForTransfer\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"paymentSplitter\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"minter\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"removeMinter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"rights\",\"outputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"action\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"target\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"string\",\"name\":\"role\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"}],\"internalType\":\"struct Structs.Party\",\"name\":\"permission\",\"type\":\"tuple\"}],\"internalType\":\"struct Structs.Policy[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"string\",\"name\":\"action\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"target\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"string\",\"name\":\"role\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"}],\"internalType\":\"struct Structs.Party\",\"name\":\"permission\",\"type\":\"tuple\"}],\"internalType\":\"struct Structs.Policy[]\",\"name\":\"policies\",\"type\":\"tuple[]\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"rightsOwned\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"string\",\"name\":\"action\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"target\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"string\",\"name\":\"role\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"}],\"internalType\":\"struct Structs.Party\",\"name\":\"permission\",\"type\":\"tuple\"}],\"internalType\":\"struct Structs.Policy[]\",\"name\":\"policies\",\"type\":\"tuple[]\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"certificateURI\",\"type\":\"string\"}],\"name\":\"setTokenCertificate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"supportedActions\",\"outputs\":[{\"internalType\":\"string[]\",\"name\":\"\",\"type\":\"string[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"supportedRoles\",\"outputs\":[{\"internalType\":\"string[]\",\"name\":\"\",\"type\":\"string[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"action\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"group\",\"type\":\"string\"}],\"internalType\":\"struct Structs.SupportedAction[]\",\"name\":\"supportedActionsList\",\"type\":\"tuple[]\"},{\"internalType\":\"bytes32\",\"name\":\"sigR\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"sigS\",\"type\":\"bytes32\"},{\"internalType\":\"uint8\",\"name\":\"sigV\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"updateSupportedActions\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string[]\",\"name\":\"supportedRolesList\",\"type\":\"string[]\"},{\"internalType\":\"bytes32\",\"name\":\"sigR\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"sigS\",\"type\":\"bytes32\"},{\"internalType\":\"uint8\",\"name\":\"sigV\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"updateSupportedRoles\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"}]","ContractName":"Artwork","CompilerVersion":"v0.8.0+commit.c7dfd78e","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}