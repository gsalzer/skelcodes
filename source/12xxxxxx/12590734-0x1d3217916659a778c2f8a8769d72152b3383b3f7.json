{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.18;\r\n/**\r\n * @title ERC20Basic\r\n * @dev Simpler version of ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/179\r\n */\r\n\r\n /**\r\n  * @title SafeMath\r\n  * @dev Math operations with safety checks that throw on error\r\n  */\r\n library SafeMath {\r\n   function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n     if (a == 0) {\r\n       return 0;\r\n     }\r\n     uint256 c = a * b;\r\n     assert(c / a == b);\r\n     return c;\r\n   }\r\n\r\n   function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n     // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n     uint256 c = a / b;\r\n     // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n     return c;\r\n   }\r\n\r\n   function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n     assert(b <= a);\r\n     return a - b;\r\n   }\r\n\r\n   function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n     uint256 c = a + b;\r\n     assert(c >= a);\r\n     return c;\r\n   }\r\n }\r\n\r\n library SafeERC20 {\r\n   function safeTransfer(ERC20Basic token, address to, uint256 value) internal {\r\n     assert(token.transfer(to, value));\r\n   }\r\n\r\n   function safeTransferFrom(ERC20 token, address from, address to, uint256 value) internal {\r\n     assert(token.transferFrom(from, to, value));\r\n   }\r\n\r\n   function safeApprove(ERC20 token, address spender, uint256 value) internal {\r\n     assert(token.approve(spender, value));\r\n   }\r\n }\r\n\r\ncontract ERC20Basic {\r\n  uint256 public totalSupply;\r\n  function balanceOf(address who) public view returns (uint256);\r\n  function transfer(address to, uint256 value) public returns (bool);\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n\r\ncontract ERC20 is ERC20Basic {\r\n  function allowance(address owner, address spender) public view returns (uint256);\r\n  function transferFrom(address from, address to, uint256 value) public returns (bool);\r\n  function approve(address spender, uint256 value) public returns (bool);\r\n  event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n/**\r\n * @title Basic token\r\n * @dev Basic version of StandardToken, with no allowances.\r\n */\r\ncontract BasicToken is ERC20Basic {\r\n  using SafeMath for uint256;\r\n\r\n  mapping(address => uint256) public balances;\r\n\r\n  mapping(address => address) internal addresses;\r\n  address[] internal addressArray;\r\n\r\n  function getAddressCount() constant public returns (uint256 length) {\r\n    return addressArray.length;\r\n  }\r\n\r\n  function getAddressById(uint256 id) constant public returns (address length) {\r\n    return addressArray[id];\r\n  }\r\n\r\n  /**\r\n  * @dev transfer token for a specified address\r\n  * @param _to The address to transfer to.\r\n  * @param _value The amount to be transferred.\r\n  */\r\n  function transfer(address _to, uint256 _value) public returns (bool) {\r\n    require(_to != address(0));\r\n    require(_value <= balances[msg.sender]);\r\n\r\n    // SafeMath.sub will throw if there is not enough balance.\r\n    balances[msg.sender] = balances[msg.sender].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n    emit Transfer(msg.sender, _to, _value);\r\n    //our code\r\n    if (addresses[_to] != _to) {\r\n      addresses[_to] = _to;\r\n      addressArray.push(_to);\r\n    }\r\n    return true;\r\n  }\r\n\r\n  /**\r\n  * @dev Gets the balance of the specified address.\r\n  * @param _owner The address to query the the balance of.\r\n  * @return An uint256 representing the amount owned by the passed address.\r\n  */\r\n  function balanceOf(address _owner) public view returns (uint256 balance) {\r\n    return balances[_owner];\r\n  }\r\n\r\n}\r\n\r\n\r\n/**\r\n * @title Standard ERC20 token\r\n *\r\n * @dev Implementation of the basic standard token.\r\n * @dev https://github.com/ethereum/EIPs/issues/20\r\n * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\r\n */\r\ncontract StandardToken is ERC20, BasicToken {\r\n\r\n  mapping (address => mapping (address => uint256)) internal allowed;\r\n\r\n\r\n  /**\r\n   * @dev Transfer tokens from one address to another\r\n   * @param _from address The address which you want to send tokens from\r\n   * @param _to address The address which you want to transfer to\r\n   * @param _value uint256 the amount of tokens to be transferred\r\n   */\r\n  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\r\n    require(_to != address(0));\r\n    require(_value <= balances[_from]);\r\n    require(_value <= allowed[_from][msg.sender]);\r\n\r\n    balances[_from] = balances[_from].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\r\n    emit Transfer(_from, _to, _value);\r\n    \r\n    if (addresses[_to] != _to) {\r\n      addresses[_to] = _to;\r\n      addressArray.push(_to);\r\n    }\r\n\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\r\n   *\r\n   * Beware that changing an allowance with this method brings the risk that someone may use both the old\r\n   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\r\n   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\r\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _value The amount of tokens to be spent.\r\n   */\r\n  function approve(address _spender, uint256 _value) public returns (bool) {\r\n    allowed[msg.sender][_spender] = _value;\r\n    emit Approval(msg.sender, _spender, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Function to check the amount of tokens that an owner allowed to a spender.\r\n   * @param _owner address The address which owns the funds.\r\n   * @param _spender address The address which will spend the funds.\r\n   * @return A uint256 specifying the amount of tokens still available for the spender.\r\n   */\r\n  function allowance(address _owner, address _spender) public view returns (uint256) {\r\n    return allowed[_owner][_spender];\r\n  }\r\n\r\n  /**\r\n   * @dev Increase the amount of tokens that an owner allowed to a spender.\r\n   *\r\n   * approve should be called when allowed[_spender] == 0. To increment\r\n   * allowed value is better to use this function to avoid 2 calls (and wait until\r\n   * the first transaction is mined)\r\n   * From MonolithDAO Token.sol\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _addedValue The amount of tokens to increase the allowance by.\r\n   */\r\n  function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\r\n    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\r\n    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Decrease the amount of tokens that an owner allowed to a spender.\r\n   *\r\n   * approve should be called when allowed[_spender] == 0. To decrement\r\n   * allowed value is better to use this function to avoid 2 calls (and wait until\r\n   * the first transaction is mined)\r\n   * From MonolithDAO Token.sol\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _subtractedValue The amount of tokens to decrease the allowance by.\r\n   */\r\n  function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\r\n    uint oldValue = allowed[msg.sender][_spender];\r\n    if (_subtractedValue > oldValue) {\r\n      allowed[msg.sender][_spender] = 0;\r\n    } else {\r\n      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\r\n    }\r\n    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n    return true;\r\n  }\r\n\r\n}\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n\r\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  function Ownable() public {\r\n    owner = msg.sender;\r\n  }\r\n\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address newOwner) public onlyOwner {\r\n    require(newOwner != address(0));\r\n    emit OwnershipTransferred(owner, newOwner);\r\n    owner = newOwner;\r\n  }\r\n\r\n}\r\n\r\n/**\r\n * @title Mintable token\r\n * @dev Simple ERC20 Token example, with mintable token creation\r\n * @dev Issue: * https://github.com/OpenZeppelin/zeppelin-solidity/issues/120\r\n * Based on code by TokenMarketNet: https://github.com/TokenMarketNet/ico/blob/master/contracts/MintableToken.sol\r\n */\r\n\r\ncontract MintableToken is StandardToken, Ownable {\r\n  using SafeERC20 for ERC20;\r\n  event Mint(address indexed to, uint256 amount);\r\n  event MintFinished();\r\n\r\n  bool public mintingFinished = false;\r\n\r\n\r\n  modifier canMint() {\r\n    require(!mintingFinished);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Function to mint tokens\r\n   * @param _to The address that will receive the minted tokens.\r\n   * @param _amount The amount of tokens to mint.\r\n   * @return A boolean that indicates if the operation was successful.\r\n   */\r\n  function mint(address _to, uint256 _amount) onlyOwner canMint public returns (bool) {\r\n    totalSupply = totalSupply.add(_amount);\r\n    balances[_to] = balances[_to].add(_amount);\r\n    emit Mint(_to, _amount);\r\n    emit Transfer(address(0), _to, _amount);\r\n    \r\n    if (addresses[_to] != _to) {\r\n      addresses[_to] = _to;\r\n      addressArray.push(_to);\r\n    }\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Function to stop minting new tokens.\r\n   * @return True if the operation was successful.\r\n   */\r\n  function finishMinting() onlyOwner canMint public returns (bool) {\r\n    mintingFinished = true;\r\n    emit MintFinished();\r\n    return true;\r\n  }\r\n}\r\n\r\n/**\r\n * @title Crowdsale\r\n * @dev Crowdsale is a base contract for managing a token crowdsale.\r\n * Crowdsales have a start and end timestamps, where investors can make\r\n * token purchases and the crowdsale will assign them tokens based\r\n * on a token per ETH rate. Funds collected are forwarded to a wallet\r\n * as they arrive.\r\n */\r\ncontract Crowdsale {\r\n  using SafeMath for uint256;\r\n\r\n  // The token being sold\r\n  MintableToken public token;\r\n\r\n  // start and end timestamps where investments are allowed (both inclusive)\r\n  uint256 public startTime;\r\n  uint256 public startTimeStage2;\r\n  uint256 public startTimeStage3;\r\n  uint256 public startTimeStage4;\r\n  uint256 public startTimeStage5;\r\n  uint256 public endTime;\r\n\r\n  // address where funds are collected\r\n  address public wallet;\r\n\r\n  // contract address\r\n  address public contractAddress;\r\n\r\n  // how many token units a buyer gets per wei\r\n  uint256 public rate;\r\n\r\n  // amount of raised money in wei\r\n  uint256 public weiRaised;\r\n\r\n  // tokens for team, advicers etc.\r\n  uint256 public rewardRate;\r\n\r\n  /**\r\n   * event for token purchase logging\r\n   * @param purchaser who paid for the tokens\r\n   * @param beneficiary who got the tokens\r\n   * @param value weis paid for purchase\r\n   * @param amount amount of tokens purchased\r\n   */\r\n  event TokenPurchase(address indexed purchaser, address indexed beneficiary, uint256 value, uint256 amount);\r\n\r\n\r\n  function Crowdsale(uint256 _startTime, uint256 _startTimeStage2, uint256 _startTimeStage3,\r\n    uint256 _startTimeStage4, uint256 _startTimeStage5, uint256 _endTime, uint256 _rate,\r\n    uint256 _rewardRate, address _wallet, address _contractAddress) public {\r\n    require(_startTime >= now);\r\n    require(_startTimeStage2 >= _startTime);\r\n    require(_startTimeStage3 >= _startTimeStage2);\r\n    require(_startTimeStage4 >= _startTimeStage3);\r\n    require(_startTimeStage5 >= _startTimeStage4);\r\n    require(_endTime >= _startTimeStage5);\r\n    require(_rate > 0);\r\n    require(_rewardRate > 0);\r\n    require(_wallet != address(0));\r\n\r\n    token = createTokenContract();\r\n    startTime = _startTime;\r\n    startTimeStage2 = _startTimeStage2;\r\n    startTimeStage3 = _startTimeStage3;\r\n    startTimeStage4 = _startTimeStage4;\r\n    startTimeStage5 = _startTimeStage5;\r\n    endTime = _endTime;\r\n    rate = _rate;\r\n    rewardRate = _rewardRate;\r\n    wallet = _wallet;\r\n    contractAddress = _contractAddress;\r\n  }\r\n\r\n  function calculateTokenCount(uint256 count, uint256 rateBonus) private view returns (uint256) {\r\n    uint256 result = count.mul(rateBonus);\r\n    if (now >= startTime && now <= startTimeStage2) {\r\n      result = result.mul(13).div(10); // 30%\r\n    } else if (now >= startTimeStage2 && now <= startTimeStage3) {\r\n      result = result.mul(115).div(100); // 15%\r\n    } else if (now >= startTimeStage3 && now <= startTimeStage4) {\r\n      result = result.mul(11).div(10); // 10%\r\n    } else if (now >= startTimeStage4 && now <= startTimeStage5) {\r\n      result = result.mul(105).div(100); // 5%\r\n    }\r\n    return result;\r\n  }\r\n\r\n  // creates the token to be sold.\r\n  // override this method to have crowdsale of a specific mintable token.\r\n  function createTokenContract() internal returns (MintableToken) {\r\n    return new MintableToken();\r\n  }\r\n\r\n\r\n  // fallback function can be used to buy tokens\r\n  function () external payable {\r\n    if (now >= endTime) {\r\n     contractAddress.transfer(msg.value);\r\n    } else {\r\n        buyTokens(msg.sender);\r\n    }\r\n  }\r\n\r\n  // low level token purchase function\r\n  function buyTokens(address beneficiary) public payable {\r\n    require(beneficiary != address(0));\r\n    require(validPurchase());\r\n\r\n    uint256 weiAmount = msg.value;\r\n\r\n    // calculate token amount to be created\r\n    uint256 tokens = calculateTokenCount(weiAmount, rate);\r\n    // tokens for team, advicers etc.\r\n    uint256 tokensReward = calculateTokenCount(weiAmount, rewardRate);\r\n    // update state\r\n    weiRaised = weiRaised.add(weiAmount);\r\n\r\n    token.mint(beneficiary, tokens);\r\n    token.mint(wallet, tokensReward);\r\n    uint256 tokensTotal = tokens.add(tokensReward);\r\n    emit TokenPurchase(msg.sender, beneficiary, weiAmount, tokensTotal);\r\n\r\n    forwardFunds();\r\n  }\r\n\r\n  // send ether to the fund collection wallet\r\n  // override to create custom fund forwarding mechanisms\r\n  function forwardFunds() internal {\r\n    wallet.transfer(msg.value);\r\n  }\r\n\r\n  // @return true if the transaction can buy tokens\r\n  function validPurchase() internal view returns (bool) {\r\n    bool withinPeriod = now >= startTime && now <= endTime;\r\n    bool nonZeroPurchase = msg.value != 0;\r\n    return withinPeriod && nonZeroPurchase;\r\n  }\r\n\r\n  // @return true if crowdsale event has ended\r\n  function hasEnded() public view returns (bool) {\r\n    return now > endTime;\r\n  }\r\n\r\n\r\n}\r\n\r\ncontract SplitPayment {\r\n  using SafeMath for uint256;\r\n\r\n  uint256 public totalShares = 0;\r\n  uint256 public totalReleased = 0;\r\n\r\n  mapping(address => uint256) public shares;\r\n  mapping(address => uint256) public released;\r\n  address[] public payees;\r\n\r\n  /**\r\n   * @dev Constructor\r\n   */\r\n  function SplitPayment(address[] _payees, uint256[] _shares) public payable {\r\n    require(_payees.length == _shares.length);\r\n\r\n    for (uint256 i = 0; i < _payees.length; i++) {\r\n      addPayee(_payees[i], _shares[i]);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @dev Add a new payee to the contract.\r\n   * @param _payee The address of the payee to add.\r\n   * @param _shares The number of shares owned by the payee.\r\n   */\r\n  function addPayee(address _payee, uint256 _shares) internal {\r\n    require(_payee != address(0));\r\n    require(_shares > 0);\r\n    require(shares[_payee] == 0);\r\n\r\n    payees.push(_payee);\r\n    shares[_payee] = _shares;\r\n    totalShares = totalShares.add(_shares);\r\n  }\r\n\r\n  /**\r\n   * @dev Claim your share of the balance.\r\n   */\r\n  function claim(address payee, address ginexIcoContract) public returns (uint256 paymentDiv) {\r\n\r\n    require(shares[payee] > 0);\r\n\r\n    uint256 totalReceived = ginexIcoContract.balance.add(totalReleased);\r\n    uint256 payment = totalReceived.mul(shares[payee]).div(totalShares).sub(released[payee]);\r\n\r\n    require(payment != 0);\r\n    require(ginexIcoContract.balance >= payment);\r\n\r\n    released[payee] = released[payee].add(payment);\r\n    totalReleased = totalReleased.add(payment);\r\n\r\n    return payment;\r\n  }\r\n\r\n  /**\r\n   * @dev payable fallback\r\n   */\r\n  function () external payable {}\r\n}\r\n\r\ncontract GinexToken is MintableToken {\r\n  string public constant name = \"Aiko Inu\";\r\n  string public constant symbol = \"AIKO\";\r\n  uint256 public constant decimals = 18;\r\n  uint256 public constant _totalSupply = 0;\r\n\r\n/** Constructor GINEXToken */\r\n  function GinexToken() public {\r\n    totalSupply = _totalSupply;\r\n  }\r\n}\r\n\r\ncontract GinexICO is Crowdsale, Ownable{\r\n  address myAddress = this;\r\n  uint256 _startTime = 1623114000; // 07.06.18 00:00:00 GMT\r\n  uint256 _startTimeStage2 = 1623124800; // 08.06.18 00:00:00 GMT\r\n  uint256 _startTimeStage3 = 1623135600; // 08.07.18 00:00:00 GMT\r\n  uint256 _startTimeStage4 = 1623146400; // 08.08.18 00:00:00 GMT\r\n  uint256 _startTimeStage5 = 1623157200; // 08.09.18 00:00:00 GMT\r\n  uint256 _endTime = 1623168000; // 08.10.18 00:00:00 GMT\r\n  uint256 _rate = 800;\r\n  uint256 _rewardRate = 200;\r\n  address _wallet = 0x93930aa40f83a7d2307258A9dB1E898400aA29b3;\r\n\r\n  address[] _payees;\r\n  uint256[] _shares;\r\n\r\n  SplitPayment public splitPayment;\r\n\r\n\r\n\r\n  function GinexICO() public\r\n  Crowdsale(_startTime, _startTimeStage2, _startTimeStage3, _startTimeStage4,\r\n    _startTimeStage5, _endTime, _rate, _rewardRate, _wallet, myAddress)\r\n  {\r\n  }\r\n\r\nfunction createTokenContract() internal returns (MintableToken) {\r\n  return new GinexToken();\r\n}\r\n\r\nfunction getBalance() view public returns (uint256) {\r\n  return myAddress.balance;\r\n}\r\n\r\nfunction createSplitPayment() public payable onlyOwner {\r\n    require(now > _endTime);\r\n\r\n    uint256 addrCount = token.getAddressCount();\r\n    if (_payees.length < addrCount) {\r\n        for (uint256 j = _payees.length; j < addrCount; j++) {\r\n        _payees.push(address(0));\r\n        _shares.push(0);\r\n        }\r\n    }\r\n\r\n     for (uint256 i = 0; i < addrCount; i++) {\r\n       if (token.balanceOf(token.getAddressById(i)) > 0) {\r\n         _payees[i] = token.getAddressById(i);\r\n         _shares[i] = token.balanceOf(token.getAddressById(i));\r\n       }\r\n       else {\r\n         _payees[i] = token.getAddressById(i);\r\n         _shares[i] = 0;\r\n       }\r\n\r\n    }\r\n    splitPayment = new SplitPayment(_payees, _shares);\r\n  }\r\n\r\n  function getDividend() public payable {\r\n    require(now > _endTime);\r\n    uint256 payment = splitPayment.claim(msg.sender, myAddress);\r\n    msg.sender.transfer(payment);\r\n  }\r\n\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"balances\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"getAddressById\",\"outputs\":[{\"name\":\"length\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getAddressCount\",\"outputs\":[{\"name\":\"length\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"}]","ContractName":"BasicToken","CompilerVersion":"v0.4.26+commit.4563c3fc","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"bzzr://e698413f35aecf6277f7d80baf498f892fd8411ebff63a667722ef4b585458ba"}]}