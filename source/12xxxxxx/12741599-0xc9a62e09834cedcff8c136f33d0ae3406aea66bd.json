{"status":"1","message":"OK","result":[{"SourceCode":"// SPDX-License-Identifier: AGPL-3.0\r\n\r\npragma solidity 0.6.12;\r\npragma experimental ABIEncoderV2;\r\n\r\n// Global Enums and Structs\r\n\r\n\r\nlibrary VestingEntries {\r\n    struct VestingEntry {\r\n        uint64 endTime;\r\n        uint256 escrowAmount;\r\n    }\r\n    struct VestingEntryWithID {\r\n        uint64 endTime;\r\n        uint256 escrowAmount;\r\n        uint256 entryID;\r\n    }\r\n}\r\n\r\nstruct StrategyParams {\r\n    uint256 performanceFee;\r\n    uint256 activation;\r\n    uint256 debtRatio;\r\n    uint256 minDebtPerHarvest;\r\n    uint256 maxDebtPerHarvest;\r\n    uint256 lastReport;\r\n    uint256 totalDebt;\r\n    uint256 totalGain;\r\n    uint256 totalLoss;\r\n}\r\n\r\n// Part: IAddressResolver\r\n\r\ninterface IAddressResolver {\r\n    function getAddress(bytes32 name) external view returns (address);\r\n\r\n    function getSynth(bytes32 key) external view returns (address);\r\n\r\n    function requireAndGetAddress(bytes32 name, string calldata reason)\r\n        external\r\n        view\r\n        returns (address);\r\n}\r\n\r\n// Part: IExchangeRates\r\n\r\ninterface IExchangeRates {\r\n    // Structs\r\n    struct RateAndUpdatedTime {\r\n        uint216 rate;\r\n        uint40 time;\r\n    }\r\n\r\n    struct InversePricing {\r\n        uint256 entryPoint;\r\n        uint256 upperLimit;\r\n        uint256 lowerLimit;\r\n        bool frozenAtUpperLimit;\r\n        bool frozenAtLowerLimit;\r\n    }\r\n\r\n    function owner() external view returns (address);\r\n\r\n    function setOracle(address _oracle) external;\r\n\r\n    function removeAggregator(bytes32 currencyKey) external;\r\n\r\n    // Views\r\n    function aggregators(bytes32 currencyKey) external view returns (address);\r\n\r\n    function aggregatorWarningFlags() external view returns (address);\r\n\r\n    function anyRateIsInvalid(bytes32[] calldata currencyKeys)\r\n        external\r\n        view\r\n        returns (bool);\r\n\r\n    function canFreezeRate(bytes32 currencyKey) external view returns (bool);\r\n\r\n    function currentRoundForRate(bytes32 currencyKey)\r\n        external\r\n        view\r\n        returns (uint256);\r\n\r\n    function currenciesUsingAggregator(address aggregator)\r\n        external\r\n        view\r\n        returns (bytes32[] memory);\r\n\r\n    function effectiveValue(\r\n        bytes32 sourceCurrencyKey,\r\n        uint256 sourceAmount,\r\n        bytes32 destinationCurrencyKey\r\n    ) external view returns (uint256 value);\r\n\r\n    function effectiveValueAndRates(\r\n        bytes32 sourceCurrencyKey,\r\n        uint256 sourceAmount,\r\n        bytes32 destinationCurrencyKey\r\n    )\r\n        external\r\n        view\r\n        returns (\r\n            uint256 value,\r\n            uint256 sourceRate,\r\n            uint256 destinationRate\r\n        );\r\n\r\n    function effectiveValueAtRound(\r\n        bytes32 sourceCurrencyKey,\r\n        uint256 sourceAmount,\r\n        bytes32 destinationCurrencyKey,\r\n        uint256 roundIdForSrc,\r\n        uint256 roundIdForDest\r\n    ) external view returns (uint256 value);\r\n\r\n    function getCurrentRoundId(bytes32 currencyKey)\r\n        external\r\n        view\r\n        returns (uint256);\r\n\r\n    function getLastRoundIdBeforeElapsedSecs(\r\n        bytes32 currencyKey,\r\n        uint256 startingRoundId,\r\n        uint256 startingTimestamp,\r\n        uint256 timediff\r\n    ) external view returns (uint256);\r\n\r\n    function inversePricing(bytes32 currencyKey)\r\n        external\r\n        view\r\n        returns (\r\n            uint256 entryPoint,\r\n            uint256 upperLimit,\r\n            uint256 lowerLimit,\r\n            bool frozenAtUpperLimit,\r\n            bool frozenAtLowerLimit\r\n        );\r\n\r\n    function lastRateUpdateTimes(bytes32 currencyKey)\r\n        external\r\n        view\r\n        returns (uint256);\r\n\r\n    function oracle() external view returns (address);\r\n\r\n    function rateAndTimestampAtRound(bytes32 currencyKey, uint256 roundId)\r\n        external\r\n        view\r\n        returns (uint256 rate, uint256 time);\r\n\r\n    function rateAndUpdatedTime(bytes32 currencyKey)\r\n        external\r\n        view\r\n        returns (uint256 rate, uint256 time);\r\n\r\n    function rateAndInvalid(bytes32 currencyKey)\r\n        external\r\n        view\r\n        returns (uint256 rate, bool isInvalid);\r\n\r\n    function rateForCurrency(bytes32 currencyKey)\r\n        external\r\n        view\r\n        returns (uint256);\r\n\r\n    function rateIsFlagged(bytes32 currencyKey) external view returns (bool);\r\n\r\n    function rateIsFrozen(bytes32 currencyKey) external view returns (bool);\r\n\r\n    function rateIsInvalid(bytes32 currencyKey) external view returns (bool);\r\n\r\n    function rateIsStale(bytes32 currencyKey) external view returns (bool);\r\n\r\n    function rateStalePeriod() external view returns (uint256);\r\n\r\n    function ratesAndUpdatedTimeForCurrencyLastNRounds(\r\n        bytes32 currencyKey,\r\n        uint256 numRounds\r\n    ) external view returns (uint256[] memory rates, uint256[] memory times);\r\n\r\n    function ratesAndInvalidForCurrencies(bytes32[] calldata currencyKeys)\r\n        external\r\n        view\r\n        returns (uint256[] memory rates, bool anyRateInvalid);\r\n\r\n    function ratesForCurrencies(bytes32[] calldata currencyKeys)\r\n        external\r\n        view\r\n        returns (uint256[] memory);\r\n\r\n    // Mutative functions\r\n    function freezeRate(bytes32 currencyKey) external;\r\n}\r\n\r\n// Part: IFeePool\r\n\r\ninterface IFeePool {\r\n    // Views\r\n\r\n    function FEE_ADDRESS() external view returns (address);\r\n\r\n    function feesAvailable(address account)\r\n        external\r\n        view\r\n        returns (uint256, uint256);\r\n\r\n    function feePeriodDuration() external view returns (uint256);\r\n\r\n    function isFeesClaimable(address account) external view returns (bool);\r\n\r\n    function targetThreshold() external view returns (uint256);\r\n\r\n    function totalFeesAvailable() external view returns (uint256);\r\n\r\n    function totalRewardsAvailable() external view returns (uint256);\r\n\r\n    // Mutative Functions\r\n    function claimFees() external returns (bool);\r\n\r\n    function claimOnBehalf(address claimingForAddress) external returns (bool);\r\n\r\n    function closeCurrentFeePeriod() external;\r\n}\r\n\r\n// Part: IIssuer\r\n\r\ninterface IIssuer {\r\n    // Views\r\n    function anySynthOrSNXRateIsInvalid()\r\n        external\r\n        view\r\n        returns (bool anyRateInvalid);\r\n\r\n    function availableCurrencyKeys() external view returns (bytes32[] memory);\r\n\r\n    function availableSynthCount() external view returns (uint256);\r\n\r\n    function canBurnSynths(address account) external view returns (bool);\r\n\r\n    function collateral(address account) external view returns (uint256);\r\n\r\n    function collateralisationRatio(address issuer)\r\n        external\r\n        view\r\n        returns (uint256);\r\n\r\n    function collateralisationRatioAndAnyRatesInvalid(address _issuer)\r\n        external\r\n        view\r\n        returns (uint256 cratio, bool anyRateIsInvalid);\r\n\r\n    function debtBalanceOf(address issuer, bytes32 currencyKey)\r\n        external\r\n        view\r\n        returns (uint256 debtBalance);\r\n\r\n    function issuanceRatio() external view returns (uint256);\r\n\r\n    function lastIssueEvent(address account) external view returns (uint256);\r\n\r\n    function maxIssuableSynths(address issuer)\r\n        external\r\n        view\r\n        returns (uint256 maxIssuable);\r\n\r\n    function minimumStakeTime() external view returns (uint256);\r\n\r\n    function remainingIssuableSynths(address issuer)\r\n        external\r\n        view\r\n        returns (\r\n            uint256 maxIssuable,\r\n            uint256 alreadyIssued,\r\n            uint256 totalSystemDebt\r\n        );\r\n\r\n    function synthsByAddress(address synthAddress)\r\n        external\r\n        view\r\n        returns (bytes32);\r\n\r\n    function totalIssuedSynths(bytes32 currencyKey, bool excludeEtherCollateral)\r\n        external\r\n        view\r\n        returns (uint256);\r\n\r\n    function transferableSynthetixAndAnyRateIsInvalid(\r\n        address account,\r\n        uint256 balance\r\n    ) external view returns (uint256 transferable, bool anyRateIsInvalid);\r\n\r\n    // Restricted: used internally to Synthetix\r\n    function issueSynths(address from, uint256 amount) external;\r\n\r\n    function issueSynthsOnBehalf(\r\n        address issueFor,\r\n        address from,\r\n        uint256 amount\r\n    ) external;\r\n\r\n    function issueMaxSynths(address from) external;\r\n\r\n    function issueMaxSynthsOnBehalf(address issueFor, address from) external;\r\n\r\n    function burnSynths(address from, uint256 amount) external;\r\n\r\n    function burnSynthsOnBehalf(\r\n        address burnForAddress,\r\n        address from,\r\n        uint256 amount\r\n    ) external;\r\n\r\n    function burnSynthsToTarget(address from) external;\r\n\r\n    function burnSynthsToTargetOnBehalf(address burnForAddress, address from)\r\n        external;\r\n}\r\n\r\n// Part: IReadProxy\r\n\r\ninterface IReadProxy {\r\n    function target() external view returns (address);\r\n}\r\n\r\n// Part: IRewardEscrowV2\r\n\r\ninterface IRewardEscrowV2 {\r\n    // Views\r\n    function nextEntryId() external view returns (uint256);\r\n\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    function numVestingEntries(address account) external view returns (uint256);\r\n\r\n    function totalEscrowedAccountBalance(address account)\r\n        external\r\n        view\r\n        returns (uint256);\r\n\r\n    function totalVestedAccountBalance(address account)\r\n        external\r\n        view\r\n        returns (uint256);\r\n\r\n    function getVestingQuantity(address account, uint256[] calldata entryIDs)\r\n        external\r\n        view\r\n        returns (uint256);\r\n\r\n    function getVestingSchedules(\r\n        address account,\r\n        uint256 index,\r\n        uint256 pageSize\r\n    ) external view returns (VestingEntries.VestingEntryWithID[] memory);\r\n\r\n    function getAccountVestingEntryIDs(\r\n        address account,\r\n        uint256 index,\r\n        uint256 pageSize\r\n    ) external view returns (uint256[] memory);\r\n\r\n    function getVestingEntryClaimable(address account, uint256 entryID)\r\n        external\r\n        view\r\n        returns (uint256);\r\n\r\n    function getVestingEntry(address account, uint256 entryID)\r\n        external\r\n        view\r\n        returns (uint64, uint256);\r\n\r\n    // Mutative functions\r\n    function vest(uint256[] calldata entryIDs) external;\r\n\r\n    function createEscrowEntry(\r\n        address beneficiary,\r\n        uint256 deposit,\r\n        uint256 duration\r\n    ) external;\r\n\r\n    function appendVestingEntry(\r\n        address account,\r\n        uint256 quantity,\r\n        uint256 duration\r\n    ) external;\r\n\r\n    function migrateVestingSchedule(address _addressToMigrate) external;\r\n\r\n    function migrateAccountEscrowBalances(\r\n        address[] calldata accounts,\r\n        uint256[] calldata escrowBalances,\r\n        uint256[] calldata vestedBalances\r\n    ) external;\r\n\r\n    // Account Merging\r\n    function startMergingWindow() external;\r\n\r\n    function mergeAccount(address accountToMerge, uint256[] calldata entryIDs)\r\n        external;\r\n\r\n    function nominateAccountToMerge(address account) external;\r\n\r\n    function accountMergingIsOpen() external view returns (bool);\r\n\r\n    // L2 Migration\r\n    function importVestingEntries(\r\n        address account,\r\n        uint256 escrowedAmount,\r\n        VestingEntries.VestingEntry[] calldata vestingEntries\r\n    ) external;\r\n\r\n    // Return amount of SNX transfered to SynthetixBridgeToOptimism deposit contract\r\n    function burnForMigration(address account, uint256[] calldata entryIDs)\r\n        external\r\n        returns (\r\n            uint256 escrowedAccountBalance,\r\n            VestingEntries.VestingEntry[] memory vestingEntries\r\n        );\r\n}\r\n\r\n// Part: ISushiRouter\r\n\r\ninterface ISushiRouter {\r\n    function swapExactTokensForTokens(\r\n        uint256,\r\n        uint256,\r\n        address[] calldata,\r\n        address,\r\n        uint256\r\n    ) external returns (uint256[] memory amounts);\r\n\r\n    function swapTokensForExactTokens(\r\n        uint256,\r\n        uint256,\r\n        address[] calldata,\r\n        address,\r\n        uint256\r\n    ) external returns (uint256[] memory amounts);\r\n\r\n    function getAmountsOut(uint256 amountIn, address[] memory path)\r\n        external\r\n        view\r\n        returns (uint256[] memory amounts);\r\n}\r\n\r\n// Part: ISynthetix\r\n\r\ninterface ISynthetix {\r\n        function anySynthOrSNXRateIsInvalid()\r\n        external\r\n        view\r\n        returns (bool anyRateInvalid);\r\n\r\n    function availableCurrencyKeys() external view returns (bytes32[] memory);\r\n\r\n    function availableSynthCount() external view returns (uint256);\r\n\r\n    function collateral(address account) external view returns (uint256);\r\n\r\n    function collateralisationRatio(address issuer)\r\n        external\r\n        view\r\n        returns (uint256);\r\n\r\n    function debtBalanceOf(address issuer, bytes32 currencyKey)\r\n        external\r\n        view\r\n        returns (uint256);\r\n\r\n    function isWaitingPeriod(bytes32 currencyKey) external view returns (bool);\r\n\r\n    function maxIssuableSynths(address issuer)\r\n        external\r\n        view\r\n        returns (uint256 maxIssuable);\r\n\r\n    function remainingIssuableSynths(address issuer)\r\n        external\r\n        view\r\n        returns (\r\n            uint256 maxIssuable,\r\n            uint256 alreadyIssued,\r\n            uint256 totalSystemDebt\r\n        );\r\n\r\n    function synthsByAddress(address synthAddress)\r\n        external\r\n        view\r\n        returns (bytes32);\r\n\r\n    function totalIssuedSynths(bytes32 currencyKey)\r\n        external\r\n        view\r\n        returns (uint256);\r\n\r\n    function totalIssuedSynthsExcludeEtherCollateral(bytes32 currencyKey)\r\n        external\r\n        view\r\n        returns (uint256);\r\n\r\n    function transferableSynthetix(address account)\r\n        external\r\n        view\r\n        returns (uint256 transferable);\r\n\r\n    // Mutative Functions\r\n    function burnSynths(uint256 amount) external;\r\n\r\n    function burnSynthsOnBehalf(address burnForAddress, uint256 amount)\r\n        external;\r\n\r\n    function burnSynthsToTarget() external;\r\n\r\n    function burnSynthsToTargetOnBehalf(address burnForAddress) external;\r\n\r\n    function exchange(\r\n        bytes32 sourceCurrencyKey,\r\n        uint256 sourceAmount,\r\n        bytes32 destinationCurrencyKey\r\n    ) external returns (uint256 amountReceived);\r\n\r\n    function exchangeOnBehalf(\r\n        address exchangeForAddress,\r\n        bytes32 sourceCurrencyKey,\r\n        uint256 sourceAmount,\r\n        bytes32 destinationCurrencyKey\r\n    ) external returns (uint256 amountReceived);\r\n\r\n    function exchangeWithTracking(\r\n        bytes32 sourceCurrencyKey,\r\n        uint256 sourceAmount,\r\n        bytes32 destinationCurrencyKey,\r\n        address originator,\r\n        bytes32 trackingCode\r\n    ) external returns (uint256 amountReceived);\r\n\r\n    function exchangeOnBehalfWithTracking(\r\n        address exchangeForAddress,\r\n        bytes32 sourceCurrencyKey,\r\n        uint256 sourceAmount,\r\n        bytes32 destinationCurrencyKey,\r\n        address originator,\r\n        bytes32 trackingCode\r\n    ) external returns (uint256 amountReceived);\r\n\r\n    function issueMaxSynths() external;\r\n\r\n    function issueMaxSynthsOnBehalf(address issueForAddress) external;\r\n\r\n    function issueSynths(uint256 amount) external;\r\n\r\n    function issueSynthsOnBehalf(address issueForAddress, uint256 amount)\r\n        external;\r\n\r\n    function mint() external returns (bool);\r\n\r\n    function settle(bytes32 currencyKey)\r\n        external\r\n        returns (\r\n            uint256 reclaimed,\r\n            uint256 refunded,\r\n            uint256 numEntries\r\n        );\r\n\r\n    // Liquidations\r\n    function liquidateDelinquentAccount(address account, uint256 susdAmount)\r\n        external\r\n        returns (bool);\r\n\r\n    // Restricted Functions\r\n\r\n    function mintSecondary(address account, uint256 amount) external;\r\n\r\n    function mintSecondaryRewards(uint256 amount) external;\r\n\r\n    function burnSecondary(address account, uint256 amount) external;\r\n\r\n}\r\n\r\n// Part: OpenZeppelin/openzeppelin-contracts@3.1.0/Address\r\n\r\n/**\r\n * @dev Collection of functions related to the address type\r\n */\r\nlibrary Address {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     *\r\n     * Among others, `isContract` will return false for the following\r\n     * types of addresses:\r\n     *\r\n     *  - an externally-owned account\r\n     *  - a contract in construction\r\n     *  - an address where a contract will be created\r\n     *  - an address where a contract lived, but was destroyed\r\n     * ====\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\r\n        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\r\n        // for accounts without code, i.e. `keccak256('')`\r\n        bytes32 codehash;\r\n        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly { codehash := extcodehash(account) }\r\n        return (codehash != accountHash && codehash != 0x0);\r\n    }\r\n\r\n    /**\r\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * IMPORTANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     */\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\r\n        (bool success, ) = recipient.call{ value: amount }(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n\r\n    /**\r\n     * @dev Performs a Solidity function call using a low level `call`. A\r\n     * plain`call` is an unsafe replacement for a function call: use this\r\n     * function instead.\r\n     *\r\n     * If `target` reverts with a revert reason, it is bubbled up by this\r\n     * function (like regular Solidity function calls).\r\n     *\r\n     * Returns the raw returned data. To convert to the expected return value,\r\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `target` must be a contract.\r\n     * - calling `target` with `data` must not revert.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n      return functionCall(target, data, \"Address: low-level call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\r\n     * `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\r\n        return _functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but also transferring `value` wei to `target`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the calling contract must have an ETH balance of at least `value`.\r\n     * - the called Solidity function must be `payable`.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\r\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\r\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\r\n        return _functionCallWithValue(target, data, value, errorMessage);\r\n    }\r\n\r\n    function _functionCallWithValue(address target, bytes memory data, uint256 weiValue, string memory errorMessage) private returns (bytes memory) {\r\n        require(isContract(target), \"Address: call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.call{ value: weiValue }(data);\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            // Look for revert reason and bubble it up if present\r\n            if (returndata.length > 0) {\r\n                // The easiest way to bubble the revert reason is using memory via assembly\r\n\r\n                // solhint-disable-next-line no-inline-assembly\r\n                assembly {\r\n                    let returndata_size := mload(returndata)\r\n                    revert(add(32, returndata), returndata_size)\r\n                }\r\n            } else {\r\n                revert(errorMessage);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n// Part: OpenZeppelin/openzeppelin-contracts@3.1.0/IERC20\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n// Part: OpenZeppelin/openzeppelin-contracts@3.1.0/Math\r\n\r\n/**\r\n * @dev Standard math utilities missing in the Solidity language.\r\n */\r\nlibrary Math {\r\n    /**\r\n     * @dev Returns the largest of two numbers.\r\n     */\r\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a >= b ? a : b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the smallest of two numbers.\r\n     */\r\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a < b ? a : b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the average of two numbers. The result is rounded towards\r\n     * zero.\r\n     */\r\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // (a + b) / 2 can overflow, so we distribute\r\n        return (a / 2) + (b / 2) + ((a % 2 + b % 2) / 2);\r\n    }\r\n}\r\n\r\n// Part: OpenZeppelin/openzeppelin-contracts@3.1.0/SafeMath\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts with custom message when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n// Part: iearn-finance/yearn-vaults@0.4.2-1/HealthCheck\r\n\r\ninterface HealthCheck {\r\n    function check(\r\n        uint256 profit,\r\n        uint256 loss,\r\n        uint256 debtPayment,\r\n        uint256 debtOutstanding,\r\n        uint256 totalDebt\r\n    ) external view returns (bool);\r\n}\r\n\r\n// Part: IVault\r\n\r\ninterface IVault is IERC20 {\r\n    function deposit() external;\r\n\r\n    function pricePerShare() external view returns (uint256);\r\n\r\n    function withdraw() external;\r\n\r\n    function withdraw(uint256 amount) external;\r\n\r\n    function withdraw(\r\n        uint256 amount,\r\n        address account,\r\n        uint256 maxLoss\r\n    ) external;\r\n\r\n    function availableDepositLimit() external view returns (uint256);\r\n}\r\n\r\n// Part: OpenZeppelin/openzeppelin-contracts@3.1.0/SafeERC20\r\n\r\n/**\r\n * @title SafeERC20\r\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\r\n * contract returns false). Tokens that return no value (and instead revert or\r\n * throw on failure) are also supported, non-reverting calls are assumed to be\r\n * successful.\r\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\r\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\r\n */\r\nlibrary SafeERC20 {\r\n    using SafeMath for uint256;\r\n    using Address for address;\r\n\r\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\r\n    }\r\n\r\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\r\n    }\r\n\r\n    /**\r\n     * @dev Deprecated. This function has issues similar to the ones found in\r\n     * {IERC20-approve}, and its usage is discouraged.\r\n     *\r\n     * Whenever possible, use {safeIncreaseAllowance} and\r\n     * {safeDecreaseAllowance} instead.\r\n     */\r\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\r\n        // safeApprove should only be called when setting an initial allowance,\r\n        // or when resetting it to zero. To increase and decrease it, use\r\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\r\n        // solhint-disable-next-line max-line-length\r\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\r\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\r\n        );\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\r\n    }\r\n\r\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \"SafeERC20: decreased allowance below zero\");\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    /**\r\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\r\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\r\n     * @param token The token targeted by the call.\r\n     * @param data The call data (encoded using abi.encode or one of its variants).\r\n     */\r\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\r\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\r\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\r\n        // the target address contains contract code and also asserts for success in the low-level call.\r\n\r\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\r\n        if (returndata.length > 0) { // Return data is optional\r\n            // solhint-disable-next-line max-line-length\r\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\r\n        }\r\n    }\r\n}\r\n\r\n// Part: iearn-finance/yearn-vaults@0.4.2-1/VaultAPI\r\n\r\ninterface VaultAPI is IERC20 {\r\n    function name() external view returns (string calldata);\r\n\r\n    function symbol() external view returns (string calldata);\r\n\r\n    function decimals() external view returns (uint256);\r\n\r\n    function apiVersion() external pure returns (string memory);\r\n\r\n    function permit(\r\n        address owner,\r\n        address spender,\r\n        uint256 amount,\r\n        uint256 expiry,\r\n        bytes calldata signature\r\n    ) external returns (bool);\r\n\r\n    // NOTE: Vyper produces multiple signatures for a given function with \"default\" args\r\n    function deposit() external returns (uint256);\r\n\r\n    function deposit(uint256 amount) external returns (uint256);\r\n\r\n    function deposit(uint256 amount, address recipient) external returns (uint256);\r\n\r\n    // NOTE: Vyper produces multiple signatures for a given function with \"default\" args\r\n    function withdraw() external returns (uint256);\r\n\r\n    function withdraw(uint256 maxShares) external returns (uint256);\r\n\r\n    function withdraw(uint256 maxShares, address recipient) external returns (uint256);\r\n\r\n    function token() external view returns (address);\r\n\r\n    function strategies(address _strategy) external view returns (StrategyParams memory);\r\n\r\n    function pricePerShare() external view returns (uint256);\r\n\r\n    function totalAssets() external view returns (uint256);\r\n\r\n    function depositLimit() external view returns (uint256);\r\n\r\n    function maxAvailableShares() external view returns (uint256);\r\n\r\n    /**\r\n     * View how much the Vault would increase this Strategy's borrow limit,\r\n     * based on its present performance (since its last report). Can be used to\r\n     * determine expectedReturn in your Strategy.\r\n     */\r\n    function creditAvailable() external view returns (uint256);\r\n\r\n    /**\r\n     * View how much the Vault would like to pull back from the Strategy,\r\n     * based on its present performance (since its last report). Can be used to\r\n     * determine expectedReturn in your Strategy.\r\n     */\r\n    function debtOutstanding() external view returns (uint256);\r\n\r\n    /**\r\n     * View how much the Vault expect this Strategy to return at the current\r\n     * block, based on its present performance (since its last report). Can be\r\n     * used to determine expectedReturn in your Strategy.\r\n     */\r\n    function expectedReturn() external view returns (uint256);\r\n\r\n    /**\r\n     * This is the main contact point where the Strategy interacts with the\r\n     * Vault. It is critical that this call is handled as intended by the\r\n     * Strategy. Therefore, this function will be called by BaseStrategy to\r\n     * make sure the integration is correct.\r\n     */\r\n    function report(\r\n        uint256 _gain,\r\n        uint256 _loss,\r\n        uint256 _debtPayment\r\n    ) external returns (uint256);\r\n\r\n    /**\r\n     * This function should only be used in the scenario where the Strategy is\r\n     * being retired but no migration of the positions are possible, or in the\r\n     * extreme scenario that the Strategy needs to be put into \"Emergency Exit\"\r\n     * mode in order for it to exit as quickly as possible. The latter scenario\r\n     * could be for any reason that is considered \"critical\" that the Strategy\r\n     * exits its position as fast as possible, such as a sudden change in\r\n     * market conditions leading to losses, or an imminent failure in an\r\n     * external dependency.\r\n     */\r\n    function revokeStrategy() external;\r\n\r\n    /**\r\n     * View the governance address of the Vault to assert privileged functions\r\n     * can only be called by governance. The Strategy serves the Vault, so it\r\n     * is subject to governance defined by the Vault.\r\n     */\r\n    function governance() external view returns (address);\r\n\r\n    /**\r\n     * View the management address of the Vault to assert privileged functions\r\n     * can only be called by management. The Strategy serves the Vault, so it\r\n     * is subject to management defined by the Vault.\r\n     */\r\n    function management() external view returns (address);\r\n\r\n    /**\r\n     * View the guardian address of the Vault to assert privileged functions\r\n     * can only be called by guardian. The Strategy serves the Vault, so it\r\n     * is subject to guardian defined by the Vault.\r\n     */\r\n    function guardian() external view returns (address);\r\n}\r\n\r\n// Part: iearn-finance/yearn-vaults@0.4.2-1/BaseStrategy\r\n\r\n/**\r\n * @title Yearn Base Strategy\r\n * @author yearn.finance\r\n * @notice\r\n *  BaseStrategy implements all of the required functionality to interoperate\r\n *  closely with the Vault contract. This contract should be inherited and the\r\n *  abstract methods implemented to adapt the Strategy to the particular needs\r\n *  it has to create a return.\r\n *\r\n *  Of special interest is the relationship between `harvest()` and\r\n *  `vault.report()'. `harvest()` may be called simply because enough time has\r\n *  elapsed since the last report, and not because any funds need to be moved\r\n *  or positions adjusted. This is critical so that the Vault may maintain an\r\n *  accurate picture of the Strategy's performance. See  `vault.report()`,\r\n *  `harvest()`, and `harvestTrigger()` for further details.\r\n */\r\n\r\nabstract contract BaseStrategy {\r\n    using SafeMath for uint256;\r\n    using SafeERC20 for IERC20;\r\n    string public metadataURI;\r\n\r\n    // health checks\r\n    bool public doHealthCheck;\r\n    address public healthCheck;\r\n\r\n    /**\r\n     * @notice\r\n     *  Used to track which version of `StrategyAPI` this Strategy\r\n     *  implements.\r\n     * @dev The Strategy's version must match the Vault's `API_VERSION`.\r\n     * @return A string which holds the current API version of this contract.\r\n     */\r\n    function apiVersion() public pure returns (string memory) {\r\n        return \"0.4.2\";\r\n    }\r\n\r\n    /**\r\n     * @notice This Strategy's name.\r\n     * @dev\r\n     *  You can use this field to manage the \"version\" of this Strategy, e.g.\r\n     *  `StrategySomethingOrOtherV1`. However, \"API Version\" is managed by\r\n     *  `apiVersion()` function above.\r\n     * @return This Strategy's name.\r\n     */\r\n    function name() external view virtual returns (string memory);\r\n\r\n    /**\r\n     * @notice\r\n     *  The amount (priced in want) of the total assets managed by this strategy should not count\r\n     *  towards Yearn's TVL calculations.\r\n     * @dev\r\n     *  You can override this field to set it to a non-zero value if some of the assets of this\r\n     *  Strategy is somehow delegated inside another part of of Yearn's ecosystem e.g. another Vault.\r\n     *  Note that this value must be strictly less than or equal to the amount provided by\r\n     *  `estimatedTotalAssets()` below, as the TVL calc will be total assets minus delegated assets.\r\n     *  Also note that this value is used to determine the total assets under management by this\r\n     *  strategy, for the purposes of computing the management fee in `Vault`\r\n     * @return\r\n     *  The amount of assets this strategy manages that should not be included in Yearn's Total Value\r\n     *  Locked (TVL) calculation across it's ecosystem.\r\n     */\r\n    function delegatedAssets() external view virtual returns (uint256) {\r\n        return 0;\r\n    }\r\n\r\n    VaultAPI public vault;\r\n    address public strategist;\r\n    address public rewards;\r\n    address public keeper;\r\n\r\n    IERC20 public want;\r\n\r\n    // So indexers can keep track of this\r\n    event Harvested(uint256 profit, uint256 loss, uint256 debtPayment, uint256 debtOutstanding);\r\n\r\n    event UpdatedStrategist(address newStrategist);\r\n\r\n    event UpdatedKeeper(address newKeeper);\r\n\r\n    event UpdatedRewards(address rewards);\r\n\r\n    event UpdatedMinReportDelay(uint256 delay);\r\n\r\n    event UpdatedMaxReportDelay(uint256 delay);\r\n\r\n    event UpdatedProfitFactor(uint256 profitFactor);\r\n\r\n    event UpdatedDebtThreshold(uint256 debtThreshold);\r\n\r\n    event EmergencyExitEnabled();\r\n\r\n    event UpdatedMetadataURI(string metadataURI);\r\n\r\n    // The minimum number of seconds between harvest calls. See\r\n    // `setMinReportDelay()` for more details.\r\n    uint256 public minReportDelay;\r\n\r\n    // The maximum number of seconds between harvest calls. See\r\n    // `setMaxReportDelay()` for more details.\r\n    uint256 public maxReportDelay;\r\n\r\n    // The minimum multiple that `callCost` must be above the credit/profit to\r\n    // be \"justifiable\". See `setProfitFactor()` for more details.\r\n    uint256 public profitFactor;\r\n\r\n    // Use this to adjust the threshold at which running a debt causes a\r\n    // harvest trigger. See `setDebtThreshold()` for more details.\r\n    uint256 public debtThreshold;\r\n\r\n    // See note on `setEmergencyExit()`.\r\n    bool public emergencyExit;\r\n\r\n    // modifiers\r\n    modifier onlyAuthorized() {\r\n        require(msg.sender == strategist || msg.sender == governance(), \"!authorized\");\r\n        _;\r\n    }\r\n\r\n    modifier onlyEmergencyAuthorized() {\r\n        require(\r\n            msg.sender == strategist || msg.sender == governance() || msg.sender == vault.guardian() || msg.sender == vault.management(),\r\n            \"!authorized\"\r\n        );\r\n        _;\r\n    }\r\n\r\n    modifier onlyStrategist() {\r\n        require(msg.sender == strategist, \"!strategist\");\r\n        _;\r\n    }\r\n\r\n    modifier onlyGovernance() {\r\n        require(msg.sender == governance(), \"!authorized\");\r\n        _;\r\n    }\r\n\r\n    modifier onlyKeepers() {\r\n        require(\r\n            msg.sender == keeper ||\r\n                msg.sender == strategist ||\r\n                msg.sender == governance() ||\r\n                msg.sender == vault.guardian() ||\r\n                msg.sender == vault.management(),\r\n            \"!authorized\"\r\n        );\r\n        _;\r\n    }\r\n\r\n    modifier onlyVaultManagers() {\r\n        require(msg.sender == vault.management() || msg.sender == governance(), \"!authorized\");\r\n        _;\r\n    }\r\n\r\n    constructor(address _vault) public {\r\n        _initialize(_vault, msg.sender, msg.sender, msg.sender);\r\n    }\r\n\r\n    /**\r\n     * @notice\r\n     *  Initializes the Strategy, this is called only once, when the\r\n     *  contract is deployed.\r\n     * @dev `_vault` should implement `VaultAPI`.\r\n     * @param _vault The address of the Vault responsible for this Strategy.\r\n     * @param _strategist The address to assign as `strategist`.\r\n     * The strategist is able to change the reward address\r\n     * @param _rewards  The address to use for pulling rewards.\r\n     * @param _keeper The adddress of the _keeper. _keeper\r\n     * can harvest and tend a strategy.\r\n     */\r\n    function _initialize(\r\n        address _vault,\r\n        address _strategist,\r\n        address _rewards,\r\n        address _keeper\r\n    ) internal {\r\n        require(address(want) == address(0), \"Strategy already initialized\");\r\n\r\n        vault = VaultAPI(_vault);\r\n        want = IERC20(vault.token());\r\n        want.safeApprove(_vault, uint256(-1)); // Give Vault unlimited access (might save gas)\r\n        strategist = _strategist;\r\n        rewards = _rewards;\r\n        keeper = _keeper;\r\n\r\n        // initialize variables\r\n        minReportDelay = 0;\r\n        maxReportDelay = 86400;\r\n        profitFactor = 100;\r\n        debtThreshold = 0;\r\n\r\n        vault.approve(rewards, uint256(-1)); // Allow rewards to be pulled\r\n    }\r\n\r\n    function setHealthCheck(address _healthCheck) external onlyVaultManagers {\r\n        healthCheck = _healthCheck;\r\n    }\r\n\r\n    function setDoHealthCheck(bool _doHealthCheck) external onlyVaultManagers {\r\n        doHealthCheck = _doHealthCheck;\r\n    }\r\n\r\n    /**\r\n     * @notice\r\n     *  Used to change `strategist`.\r\n     *\r\n     *  This may only be called by governance or the existing strategist.\r\n     * @param _strategist The new address to assign as `strategist`.\r\n     */\r\n    function setStrategist(address _strategist) external onlyAuthorized {\r\n        require(_strategist != address(0));\r\n        strategist = _strategist;\r\n        emit UpdatedStrategist(_strategist);\r\n    }\r\n\r\n    /**\r\n     * @notice\r\n     *  Used to change `keeper`.\r\n     *\r\n     *  `keeper` is the only address that may call `tend()` or `harvest()`,\r\n     *  other than `governance()` or `strategist`. However, unlike\r\n     *  `governance()` or `strategist`, `keeper` may *only* call `tend()`\r\n     *  and `harvest()`, and no other authorized functions, following the\r\n     *  principle of least privilege.\r\n     *\r\n     *  This may only be called by governance or the strategist.\r\n     * @param _keeper The new address to assign as `keeper`.\r\n     */\r\n    function setKeeper(address _keeper) external onlyAuthorized {\r\n        require(_keeper != address(0));\r\n        keeper = _keeper;\r\n        emit UpdatedKeeper(_keeper);\r\n    }\r\n\r\n    /**\r\n     * @notice\r\n     *  Used to change `rewards`. EOA or smart contract which has the permission\r\n     *  to pull rewards from the vault.\r\n     *\r\n     *  This may only be called by the strategist.\r\n     * @param _rewards The address to use for pulling rewards.\r\n     */\r\n    function setRewards(address _rewards) external onlyStrategist {\r\n        require(_rewards != address(0));\r\n        vault.approve(rewards, 0);\r\n        rewards = _rewards;\r\n        vault.approve(rewards, uint256(-1));\r\n        emit UpdatedRewards(_rewards);\r\n    }\r\n\r\n    /**\r\n     * @notice\r\n     *  Used to change `minReportDelay`. `minReportDelay` is the minimum number\r\n     *  of blocks that should pass for `harvest()` to be called.\r\n     *\r\n     *  For external keepers (such as the Keep3r network), this is the minimum\r\n     *  time between jobs to wait. (see `harvestTrigger()`\r\n     *  for more details.)\r\n     *\r\n     *  This may only be called by governance or the strategist.\r\n     * @param _delay The minimum number of seconds to wait between harvests.\r\n     */\r\n    function setMinReportDelay(uint256 _delay) external onlyAuthorized {\r\n        minReportDelay = _delay;\r\n        emit UpdatedMinReportDelay(_delay);\r\n    }\r\n\r\n    /**\r\n     * @notice\r\n     *  Used to change `maxReportDelay`. `maxReportDelay` is the maximum number\r\n     *  of blocks that should pass for `harvest()` to be called.\r\n     *\r\n     *  For external keepers (such as the Keep3r network), this is the maximum\r\n     *  time between jobs to wait. (see `harvestTrigger()`\r\n     *  for more details.)\r\n     *\r\n     *  This may only be called by governance or the strategist.\r\n     * @param _delay The maximum number of seconds to wait between harvests.\r\n     */\r\n    function setMaxReportDelay(uint256 _delay) external onlyAuthorized {\r\n        maxReportDelay = _delay;\r\n        emit UpdatedMaxReportDelay(_delay);\r\n    }\r\n\r\n    /**\r\n     * @notice\r\n     *  Used to change `profitFactor`. `profitFactor` is used to determine\r\n     *  if it's worthwhile to harvest, given gas costs. (See `harvestTrigger()`\r\n     *  for more details.)\r\n     *\r\n     *  This may only be called by governance or the strategist.\r\n     * @param _profitFactor A ratio to multiply anticipated\r\n     * `harvest()` gas cost against.\r\n     */\r\n    function setProfitFactor(uint256 _profitFactor) external onlyAuthorized {\r\n        profitFactor = _profitFactor;\r\n        emit UpdatedProfitFactor(_profitFactor);\r\n    }\r\n\r\n    /**\r\n     * @notice\r\n     *  Sets how far the Strategy can go into loss without a harvest and report\r\n     *  being required.\r\n     *\r\n     *  By default this is 0, meaning any losses would cause a harvest which\r\n     *  will subsequently report the loss to the Vault for tracking. (See\r\n     *  `harvestTrigger()` for more details.)\r\n     *\r\n     *  This may only be called by governance or the strategist.\r\n     * @param _debtThreshold How big of a loss this Strategy may carry without\r\n     * being required to report to the Vault.\r\n     */\r\n    function setDebtThreshold(uint256 _debtThreshold) external onlyAuthorized {\r\n        debtThreshold = _debtThreshold;\r\n        emit UpdatedDebtThreshold(_debtThreshold);\r\n    }\r\n\r\n    /**\r\n     * @notice\r\n     *  Used to change `metadataURI`. `metadataURI` is used to store the URI\r\n     * of the file describing the strategy.\r\n     *\r\n     *  This may only be called by governance or the strategist.\r\n     * @param _metadataURI The URI that describe the strategy.\r\n     */\r\n    function setMetadataURI(string calldata _metadataURI) external onlyAuthorized {\r\n        metadataURI = _metadataURI;\r\n        emit UpdatedMetadataURI(_metadataURI);\r\n    }\r\n\r\n    /**\r\n     * Resolve governance address from Vault contract, used to make assertions\r\n     * on protected functions in the Strategy.\r\n     */\r\n    function governance() internal view returns (address) {\r\n        return vault.governance();\r\n    }\r\n\r\n    /**\r\n     * @notice\r\n     *  Provide an accurate conversion from `_amtInWei` (denominated in wei)\r\n     *  to `want` (using the native decimal characteristics of `want`).\r\n     * @dev\r\n     *  Care must be taken when working with decimals to assure that the conversion\r\n     *  is compatible. As an example:\r\n     *\r\n     *      given 1e17 wei (0.1 ETH) as input, and want is USDC (6 decimals),\r\n     *      with USDC/ETH = 1800, this should give back 1800000000 (180 USDC)\r\n     *\r\n     * @param _amtInWei The amount (in wei/1e-18 ETH) to convert to `want`\r\n     * @return The amount in `want` of `_amtInEth` converted to `want`\r\n     **/\r\n    function ethToWant(uint256 _amtInWei) public view virtual returns (uint256);\r\n\r\n    /**\r\n     * @notice\r\n     *  Provide an accurate estimate for the total amount of assets\r\n     *  (principle + return) that this Strategy is currently managing,\r\n     *  denominated in terms of `want` tokens.\r\n     *\r\n     *  This total should be \"realizable\" e.g. the total value that could\r\n     *  *actually* be obtained from this Strategy if it were to divest its\r\n     *  entire position based on current on-chain conditions.\r\n     * @dev\r\n     *  Care must be taken in using this function, since it relies on external\r\n     *  systems, which could be manipulated by the attacker to give an inflated\r\n     *  (or reduced) value produced by this function, based on current on-chain\r\n     *  conditions (e.g. this function is possible to influence through\r\n     *  flashloan attacks, oracle manipulations, or other DeFi attack\r\n     *  mechanisms).\r\n     *\r\n     *  It is up to governance to use this function to correctly order this\r\n     *  Strategy relative to its peers in the withdrawal queue to minimize\r\n     *  losses for the Vault based on sudden withdrawals. This value should be\r\n     *  higher than the total debt of the Strategy and higher than its expected\r\n     *  value to be \"safe\".\r\n     * @return The estimated total assets in this Strategy.\r\n     */\r\n    function estimatedTotalAssets() public view virtual returns (uint256);\r\n\r\n    /*\r\n     * @notice\r\n     *  Provide an indication of whether this strategy is currently \"active\"\r\n     *  in that it is managing an active position, or will manage a position in\r\n     *  the future. This should correlate to `harvest()` activity, so that Harvest\r\n     *  events can be tracked externally by indexing agents.\r\n     * @return True if the strategy is actively managing a position.\r\n     */\r\n    function isActive() public view returns (bool) {\r\n        return vault.strategies(address(this)).debtRatio > 0 || estimatedTotalAssets() > 0;\r\n    }\r\n\r\n    /**\r\n     * Perform any Strategy unwinding or other calls necessary to capture the\r\n     * \"free return\" this Strategy has generated since the last time its core\r\n     * position(s) were adjusted. Examples include unwrapping extra rewards.\r\n     * This call is only used during \"normal operation\" of a Strategy, and\r\n     * should be optimized to minimize losses as much as possible.\r\n     *\r\n     * This method returns any realized profits and/or realized losses\r\n     * incurred, and should return the total amounts of profits/losses/debt\r\n     * payments (in `want` tokens) for the Vault's accounting (e.g.\r\n     * `want.balanceOf(this) >= _debtPayment + _profit`).\r\n     *\r\n     * `_debtOutstanding` will be 0 if the Strategy is not past the configured\r\n     * debt limit, otherwise its value will be how far past the debt limit\r\n     * the Strategy is. The Strategy's debt limit is configured in the Vault.\r\n     *\r\n     * NOTE: `_debtPayment` should be less than or equal to `_debtOutstanding`.\r\n     *       It is okay for it to be less than `_debtOutstanding`, as that\r\n     *       should only used as a guide for how much is left to pay back.\r\n     *       Payments should be made to minimize loss from slippage, debt,\r\n     *       withdrawal fees, etc.\r\n     *\r\n     * See `vault.debtOutstanding()`.\r\n     */\r\n    function prepareReturn(uint256 _debtOutstanding)\r\n        internal\r\n        virtual\r\n        returns (\r\n            uint256 _profit,\r\n            uint256 _loss,\r\n            uint256 _debtPayment\r\n        );\r\n\r\n    /**\r\n     * Perform any adjustments to the core position(s) of this Strategy given\r\n     * what change the Vault made in the \"investable capital\" available to the\r\n     * Strategy. Note that all \"free capital\" in the Strategy after the report\r\n     * was made is available for reinvestment. Also note that this number\r\n     * could be 0, and you should handle that scenario accordingly.\r\n     *\r\n     * See comments regarding `_debtOutstanding` on `prepareReturn()`.\r\n     */\r\n    function adjustPosition(uint256 _debtOutstanding) internal virtual;\r\n\r\n    /**\r\n     * Liquidate up to `_amountNeeded` of `want` of this strategy's positions,\r\n     * irregardless of slippage. Any excess will be re-invested with `adjustPosition()`.\r\n     * This function should return the amount of `want` tokens made available by the\r\n     * liquidation. If there is a difference between them, `_loss` indicates whether the\r\n     * difference is due to a realized loss, or if there is some other sitution at play\r\n     * (e.g. locked funds) where the amount made available is less than what is needed.\r\n     *\r\n     * NOTE: The invariant `_liquidatedAmount + _loss <= _amountNeeded` should always be maintained\r\n     */\r\n    function liquidatePosition(uint256 _amountNeeded) internal virtual returns (uint256 _liquidatedAmount, uint256 _loss);\r\n\r\n    /**\r\n     * Liquidate everything and returns the amount that got freed.\r\n     * This function is used during emergency exit instead of `prepareReturn()` to\r\n     * liquidate all of the Strategy's positions back to the Vault.\r\n     */\r\n\r\n    function liquidateAllPositions() internal virtual returns (uint256 _amountFreed);\r\n\r\n    /**\r\n     * @notice\r\n     *  Provide a signal to the keeper that `tend()` should be called. The\r\n     *  keeper will provide the estimated gas cost that they would pay to call\r\n     *  `tend()`, and this function should use that estimate to make a\r\n     *  determination if calling it is \"worth it\" for the keeper. This is not\r\n     *  the only consideration into issuing this trigger, for example if the\r\n     *  position would be negatively affected if `tend()` is not called\r\n     *  shortly, then this can return `true` even if the keeper might be\r\n     *  \"at a loss\" (keepers are always reimbursed by Yearn).\r\n     * @dev\r\n     *  `callCostInWei` must be priced in terms of `wei` (1e-18 ETH).\r\n     *\r\n     *  This call and `harvestTrigger()` should never return `true` at the same\r\n     *  time.\r\n     * @param callCostInWei The keeper's estimated gas cost to call `tend()` (in wei).\r\n     * @return `true` if `tend()` should be called, `false` otherwise.\r\n     */\r\n    function tendTrigger(uint256 callCostInWei) public view virtual returns (bool) {\r\n        // We usually don't need tend, but if there are positions that need\r\n        // active maintainence, overriding this function is how you would\r\n        // signal for that.\r\n        uint256 callCost = ethToWant(callCostInWei);\r\n        return false;\r\n    }\r\n\r\n    /**\r\n     * @notice\r\n     *  Adjust the Strategy's position. The purpose of tending isn't to\r\n     *  realize gains, but to maximize yield by reinvesting any returns.\r\n     *\r\n     *  See comments on `adjustPosition()`.\r\n     *\r\n     *  This may only be called by governance, the strategist, or the keeper.\r\n     */\r\n    function tend() external onlyKeepers {\r\n        // Don't take profits with this call, but adjust for better gains\r\n        adjustPosition(vault.debtOutstanding());\r\n    }\r\n\r\n    /**\r\n     * @notice\r\n     *  Provide a signal to the keeper that `harvest()` should be called. The\r\n     *  keeper will provide the estimated gas cost that they would pay to call\r\n     *  `harvest()`, and this function should use that estimate to make a\r\n     *  determination if calling it is \"worth it\" for the keeper. This is not\r\n     *  the only consideration into issuing this trigger, for example if the\r\n     *  position would be negatively affected if `harvest()` is not called\r\n     *  shortly, then this can return `true` even if the keeper might be \"at a\r\n     *  loss\" (keepers are always reimbursed by Yearn).\r\n     * @dev\r\n     *  `callCostInWei` must be priced in terms of `wei` (1e-18 ETH).\r\n     *\r\n     *  This call and `tendTrigger` should never return `true` at the\r\n     *  same time.\r\n     *\r\n     *  See `min/maxReportDelay`, `profitFactor`, `debtThreshold` to adjust the\r\n     *  strategist-controlled parameters that will influence whether this call\r\n     *  returns `true` or not. These parameters will be used in conjunction\r\n     *  with the parameters reported to the Vault (see `params`) to determine\r\n     *  if calling `harvest()` is merited.\r\n     *\r\n     *  It is expected that an external system will check `harvestTrigger()`.\r\n     *  This could be a script run off a desktop or cloud bot (e.g.\r\n     *  https://github.com/iearn-finance/yearn-vaults/blob/master/scripts/keep.py),\r\n     *  or via an integration with the Keep3r network (e.g.\r\n     *  https://github.com/Macarse/GenericKeep3rV2/blob/master/contracts/keep3r/GenericKeep3rV2.sol).\r\n     * @param callCostInWei The keeper's estimated gas cost to call `harvest()` (in wei).\r\n     * @return `true` if `harvest()` should be called, `false` otherwise.\r\n     */\r\n    function harvestTrigger(uint256 callCostInWei) public view virtual returns (bool) {\r\n        uint256 callCost = ethToWant(callCostInWei);\r\n        StrategyParams memory params = vault.strategies(address(this));\r\n\r\n        // Should not trigger if Strategy is not activated\r\n        if (params.activation == 0) return false;\r\n\r\n        // Should not trigger if we haven't waited long enough since previous harvest\r\n        if (block.timestamp.sub(params.lastReport) < minReportDelay) return false;\r\n\r\n        // Should trigger if hasn't been called in a while\r\n        if (block.timestamp.sub(params.lastReport) >= maxReportDelay) return true;\r\n\r\n        // If some amount is owed, pay it back\r\n        // NOTE: Since debt is based on deposits, it makes sense to guard against large\r\n        //       changes to the value from triggering a harvest directly through user\r\n        //       behavior. This should ensure reasonable resistance to manipulation\r\n        //       from user-initiated withdrawals as the outstanding debt fluctuates.\r\n        uint256 outstanding = vault.debtOutstanding();\r\n        if (outstanding > debtThreshold) return true;\r\n\r\n        // Check for profits and losses\r\n        uint256 total = estimatedTotalAssets();\r\n        // Trigger if we have a loss to report\r\n        if (total.add(debtThreshold) < params.totalDebt) return true;\r\n\r\n        uint256 profit = 0;\r\n        if (total > params.totalDebt) profit = total.sub(params.totalDebt); // We've earned a profit!\r\n\r\n        // Otherwise, only trigger if it \"makes sense\" economically (gas cost\r\n        // is <N% of value moved)\r\n        uint256 credit = vault.creditAvailable();\r\n        return (profitFactor.mul(callCost) < credit.add(profit));\r\n    }\r\n\r\n    /**\r\n     * @notice\r\n     *  Harvests the Strategy, recognizing any profits or losses and adjusting\r\n     *  the Strategy's position.\r\n     *\r\n     *  In the rare case the Strategy is in emergency shutdown, this will exit\r\n     *  the Strategy's position.\r\n     *\r\n     *  This may only be called by governance, the strategist, or the keeper.\r\n     * @dev\r\n     *  When `harvest()` is called, the Strategy reports to the Vault (via\r\n     *  `vault.report()`), so in some cases `harvest()` must be called in order\r\n     *  to take in profits, to borrow newly available funds from the Vault, or\r\n     *  otherwise adjust its position. In other cases `harvest()` must be\r\n     *  called to report to the Vault on the Strategy's position, especially if\r\n     *  any losses have occurred.\r\n     */\r\n    function harvest() external onlyKeepers {\r\n        uint256 profit = 0;\r\n        uint256 loss = 0;\r\n        uint256 debtOutstanding = vault.debtOutstanding();\r\n        uint256 debtPayment = 0;\r\n        if (emergencyExit) {\r\n            // Free up as much capital as possible\r\n            uint256 amountFreed = liquidateAllPositions();\r\n            if (amountFreed < debtOutstanding) {\r\n                loss = debtOutstanding.sub(amountFreed);\r\n            } else if (amountFreed > debtOutstanding) {\r\n                profit = amountFreed.sub(debtOutstanding);\r\n            }\r\n            debtPayment = debtOutstanding.sub(loss);\r\n        } else {\r\n            // Free up returns for Vault to pull\r\n            (profit, loss, debtPayment) = prepareReturn(debtOutstanding);\r\n        }\r\n\r\n        // Allow Vault to take up to the \"harvested\" balance of this contract,\r\n        // which is the amount it has earned since the last time it reported to\r\n        // the Vault.\r\n        uint256 totalDebt = vault.strategies(address(this)).totalDebt;\r\n        debtOutstanding = vault.report(profit, loss, debtPayment);\r\n\r\n        // Check if free returns are left, and re-invest them\r\n        adjustPosition(debtOutstanding);\r\n\r\n        // call healthCheck contract\r\n        if (doHealthCheck && healthCheck != address(0)) {\r\n            require(HealthCheck(healthCheck).check(profit, loss, debtPayment, debtOutstanding, totalDebt), \"!healthcheck\");\r\n        } else {\r\n            doHealthCheck = true;\r\n        }\r\n\r\n        emit Harvested(profit, loss, debtPayment, debtOutstanding);\r\n    }\r\n\r\n    /**\r\n     * @notice\r\n     *  Withdraws `_amountNeeded` to `vault`.\r\n     *\r\n     *  This may only be called by the Vault.\r\n     * @param _amountNeeded How much `want` to withdraw.\r\n     * @return _loss Any realized losses\r\n     */\r\n    function withdraw(uint256 _amountNeeded) external returns (uint256 _loss) {\r\n        require(msg.sender == address(vault), \"!vault\");\r\n        // Liquidate as much as possible to `want`, up to `_amountNeeded`\r\n        uint256 amountFreed;\r\n        (amountFreed, _loss) = liquidatePosition(_amountNeeded);\r\n        // Send it directly back (NOTE: Using `msg.sender` saves some gas here)\r\n        want.safeTransfer(msg.sender, amountFreed);\r\n        // NOTE: Reinvest anything leftover on next `tend`/`harvest`\r\n    }\r\n\r\n    /**\r\n     * Do anything necessary to prepare this Strategy for migration, such as\r\n     * transferring any reserve or LP tokens, CDPs, or other tokens or stores of\r\n     * value.\r\n     */\r\n    function prepareMigration(address _newStrategy) internal virtual;\r\n\r\n    /**\r\n     * @notice\r\n     *  Transfers all `want` from this Strategy to `_newStrategy`.\r\n     *\r\n     *  This may only be called by the Vault.\r\n     * @dev\r\n     * The new Strategy's Vault must be the same as this Strategy's Vault.\r\n     *  The migration process should be carefully performed to make sure all\r\n     * the assets are migrated to the new address, which should have never\r\n     * interacted with the vault before.\r\n     * @param _newStrategy The Strategy to migrate to.\r\n     */\r\n    function migrate(address _newStrategy) external {\r\n        require(msg.sender == address(vault));\r\n        require(BaseStrategy(_newStrategy).vault() == vault);\r\n        prepareMigration(_newStrategy);\r\n        want.safeTransfer(_newStrategy, want.balanceOf(address(this)));\r\n    }\r\n\r\n    /**\r\n     * @notice\r\n     *  Activates emergency exit. Once activated, the Strategy will exit its\r\n     *  position upon the next harvest, depositing all funds into the Vault as\r\n     *  quickly as is reasonable given on-chain conditions.\r\n     *\r\n     *  This may only be called by governance or the strategist.\r\n     * @dev\r\n     *  See `vault.setEmergencyShutdown()` and `harvest()` for further details.\r\n     */\r\n    function setEmergencyExit() external onlyEmergencyAuthorized {\r\n        emergencyExit = true;\r\n        vault.revokeStrategy();\r\n\r\n        emit EmergencyExitEnabled();\r\n    }\r\n\r\n    /**\r\n     * Override this to add all tokens/tokenized positions this contract\r\n     * manages on a *persistent* basis (e.g. not just for swapping back to\r\n     * want ephemerally).\r\n     *\r\n     * NOTE: Do *not* include `want`, already included in `sweep` below.\r\n     *\r\n     * Example:\r\n     * ```\r\n     *    function protectedTokens() internal override view returns (address[] memory) {\r\n     *      address[] memory protected = new address[](3);\r\n     *      protected[0] = tokenA;\r\n     *      protected[1] = tokenB;\r\n     *      protected[2] = tokenC;\r\n     *      return protected;\r\n     *    }\r\n     * ```\r\n     */\r\n    function protectedTokens() internal view virtual returns (address[] memory);\r\n\r\n    /**\r\n     * @notice\r\n     *  Removes tokens from this Strategy that are not the type of tokens\r\n     *  managed by this Strategy. This may be used in case of accidentally\r\n     *  sending the wrong kind of token to this Strategy.\r\n     *\r\n     *  Tokens will be sent to `governance()`.\r\n     *\r\n     *  This will fail if an attempt is made to sweep `want`, or any tokens\r\n     *  that are protected by this Strategy.\r\n     *\r\n     *  This may only be called by governance.\r\n     * @dev\r\n     *  Implement `protectedTokens()` to specify any additional tokens that\r\n     *  should be protected from sweeping in addition to `want`.\r\n     * @param _token The token to transfer out of this vault.\r\n     */\r\n    function sweep(address _token) external onlyGovernance {\r\n        require(_token != address(want), \"!want\");\r\n        require(_token != address(vault), \"!shares\");\r\n\r\n        address[] memory _protectedTokens = protectedTokens();\r\n        for (uint256 i; i < _protectedTokens.length; i++) require(_token != _protectedTokens[i], \"!protected\");\r\n\r\n        IERC20(_token).safeTransfer(governance(), IERC20(_token).balanceOf(address(this)));\r\n    }\r\n}\r\n\r\n// File: Strategy.sol\r\n\r\ncontract Strategy is BaseStrategy {\r\n    using SafeERC20 for IERC20;\r\n    using Address for address;\r\n    using SafeMath for uint256;\r\n\r\n    uint256 public constant MIN_ISSUE = 50 * 1e18;\r\n    uint256 public ratioThreshold = 1e15;\r\n    uint256 public constant MAX_RATIO = type(uint256).max;\r\n    uint256 public constant MAX_BPS = 10_000;\r\n    uint256 public maxLoss = 1;\r\n    address public constant susd =\r\n        address(0x57Ab1ec28D129707052df4dF418D58a2D46d5f51);\r\n    IReadProxy public constant readProxy =\r\n        IReadProxy(address(0x4E3b31eB0E5CB73641EE1E65E7dCEFe520bA3ef2));\r\n    address public constant WETH =\r\n        address(0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2);\r\n\r\n    ISushiRouter public constant sushiswap =\r\n        ISushiRouter(address(0xd9e1cE17f2641f24aE83637ab66a2cca9C378B9F));\r\n    ISushiRouter public constant uniswap =\r\n        ISushiRouter(address(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D));\r\n    ISushiRouter public router =\r\n        ISushiRouter(address(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D));\r\n\r\n    uint256 public targetRatioMultiplier = 12_500;\r\n    IVault public susdVault;\r\n\r\n    // to keep track of next entry to vest\r\n    uint256 public entryIDIndex = 0;\r\n    // entryIDs of escrow rewards claimed and to be claimed by the Strategy\r\n    uint256[] public entryIDs;\r\n\r\n    bytes32 private constant CONTRACT_SYNTHETIX = \"Synthetix\";\r\n    bytes32 private constant CONTRACT_EXRATES = \"ExchangeRates\";\r\n    bytes32 private constant CONTRACT_REWARDESCROW_V2 = \"RewardEscrowV2\";\r\n    bytes32 private constant CONTRACT_ISSUER = \"Issuer\";\r\n    bytes32 private constant CONTRACT_FEEPOOL = \"FeePool\";\r\n\r\n    // ********************** EVENTS **********************\r\n\r\n    event RepayDebt(uint256 repaidAmount, uint256 debtAfterRepayment);\r\n\r\n    // ********************** CONSTRUCTOR **********************\r\n\r\n    constructor(address _vault, address _susdVault)\r\n        public\r\n        BaseStrategy(_vault)\r\n    {\r\n        susdVault = IVault(_susdVault);\r\n\r\n        // max time between harvest to collect rewards from each epoch\r\n        maxReportDelay = 7 * 24 * 3600;\r\n\r\n        // To deposit sUSD in the sUSD vault\r\n        IERC20(susd).safeApprove(address(_susdVault), type(uint256).max);\r\n        // To exchange sUSD for SNX\r\n        IERC20(susd).safeApprove(address(uniswap), type(uint256).max);\r\n        IERC20(susd).safeApprove(address(sushiswap), type(uint256).max);\r\n        // To exchange SNX for sUSD\r\n        IERC20(want).safeApprove(address(uniswap), type(uint256).max);\r\n        IERC20(want).safeApprove(address(sushiswap), type(uint256).max);\r\n\r\n        // healthcheck\r\n        healthCheck = 0xDDCea799fF1699e98EDF118e0629A974Df7DF012;\r\n        doHealthCheck = true;\r\n    }\r\n\r\n    // ********************** SETTERS **********************\r\n    function setRouter(uint256 _isSushi) external onlyAuthorized {\r\n        if (_isSushi == uint256(1)) {\r\n            router = sushiswap;\r\n        } else if (_isSushi == uint256(0)) {\r\n            router = uniswap;\r\n        } else {\r\n            revert(\"!invalid-arg. Use 1 for sushi. 0 for uni\");\r\n        }\r\n    }\r\n\r\n    function setTargetRatioMultiplier(uint256 _targetRatioMultiplier) external {\r\n        require(\r\n            msg.sender == governance() ||\r\n                msg.sender == VaultAPI(address(vault)).management()\r\n        );\r\n        targetRatioMultiplier = _targetRatioMultiplier;\r\n    }\r\n\r\n    function setMaxLoss(uint256 _maxLoss) external {\r\n        require(\r\n            msg.sender == governance() ||\r\n                msg.sender == VaultAPI(address(vault)).management()\r\n        );\r\n        maxLoss = _maxLoss;\r\n    }\r\n\r\n    function setRatioThreshold(uint256 _ratioThreshold) external {\r\n        require(\r\n            msg.sender == governance() ||\r\n                msg.sender == VaultAPI(address(vault)).management()\r\n        );\r\n        ratioThreshold = _ratioThreshold;\r\n    }\r\n\r\n    // This method is used to migrate the vault where we deposit the sUSD for yield. It should be rarely used\r\n    function migrateSusdVault(IVault newSusdVault, uint256 _maxLoss)\r\n        external\r\n        onlyGovernance\r\n    {\r\n        // we tolerate losses to avoid being locked in the vault if things don't work out\r\n        // governance must take this into account before migrating\r\n        susdVault.withdraw(\r\n            susdVault.balanceOf(address(this)),\r\n            address(this),\r\n            _maxLoss\r\n        );\r\n        IERC20(susd).safeApprove(address(susdVault), 0);\r\n\r\n        susdVault = newSusdVault;\r\n        IERC20(susd).safeApprove(address(newSusdVault), type(uint256).max);\r\n        newSusdVault.deposit();\r\n    }\r\n\r\n    // ********************** MANUAL **********************\r\n\r\n    function manuallyRepayDebt(uint256 amount) external onlyAuthorized {\r\n        // To be used in case of emergencies, to operate the vault manually\r\n        repayDebt(amount);\r\n    }\r\n\r\n    // ********************** YEARN STRATEGY **********************\r\n\r\n    function name() external view override returns (string memory) {\r\n        return \"StrategySynthetixSusdMinter\";\r\n    }\r\n\r\n    function estimatedTotalAssets() public view override returns (uint256) {\r\n        uint256 totalAssets =\r\n            balanceOfWant().add(\r\n                sUSDToWant(balanceOfSusdInVault().add(balanceOfSusd()))\r\n            );\r\n        uint256 totalLiabilities = sUSDToWant(balanceOfDebt());\r\n        // NOTE: the ternary operator is required because debt can be higher than assets\r\n        // due to i) increase in debt or ii) losses in invested assets\r\n        return\r\n            totalAssets > totalLiabilities\r\n                ? totalAssets.sub(totalLiabilities)\r\n                : 0;\r\n    }\r\n\r\n    function delegatedAssets() external view override returns (uint256) {\r\n        return sUSDToWant(balanceOfSusdInVault());\r\n    }\r\n\r\n    function prepareReturn(uint256 _debtOutstanding)\r\n        internal\r\n        override\r\n        returns (\r\n            uint256 _profit,\r\n            uint256 _loss,\r\n            uint256 _debtPayment\r\n        )\r\n    {\r\n        uint256 totalDebt = vault.strategies(address(this)).totalDebt;\r\n\r\n        claimProfits();\r\n        vestNextRewardsEntry();\r\n\r\n        uint256 totalAssetsAfterProfit = estimatedTotalAssets();\r\n\r\n        _profit = totalAssetsAfterProfit > totalDebt\r\n            ? totalAssetsAfterProfit.sub(totalDebt)\r\n            : 0;\r\n\r\n        // if the vault is claiming repayment of debt\r\n        if (_debtOutstanding > 0) {\r\n            uint256 _amountFreed = 0;\r\n            (_amountFreed, _loss) = liquidatePosition(_debtOutstanding);\r\n            _debtPayment = Math.min(_debtOutstanding, _amountFreed);\r\n\r\n            if (_loss > 0) {\r\n                _profit = 0;\r\n            }\r\n        }\r\n    }\r\n\r\n    function adjustPosition(uint256 _debtOutstanding) internal override {\r\n        if (emergencyExit) {\r\n            return;\r\n        }\r\n\r\n        if (_debtOutstanding >= balanceOfWant()) {\r\n            return;\r\n        }\r\n\r\n        // compare current ratio with target ratio\r\n        uint256 _currentRatio = getCurrentRatio();\r\n        // NOTE: target debt ratio is over 20% to maximize APY\r\n        uint256 _targetRatio = getTargetRatio();\r\n        uint256 _issuanceRatio = getIssuanceRatio();\r\n        // burn debt (sUSD) if the ratio is too high\r\n        // collateralisation_ratio = debt / collat\r\n\r\n        if (\r\n            _currentRatio > _targetRatio &&\r\n            _currentRatio.sub(_targetRatio) >= ratioThreshold\r\n        ) {\r\n            // NOTE: min threshold to act on differences = 1e16 (ratioThreshold)\r\n            // current debt ratio might be unhealthy\r\n            // we need to repay some debt to get back to the optimal range\r\n            uint256 _debtToRepay =\r\n                balanceOfDebt().sub(getTargetDebt(_collateral()));\r\n            repayDebt(_debtToRepay);\r\n        } else if (\r\n            _issuanceRatio > _currentRatio &&\r\n            _issuanceRatio.sub(_currentRatio) >= ratioThreshold\r\n        ) {\r\n            // NOTE: min threshold to act on differences = 1e16 (ratioThreshold)\r\n            // if there is enough collateral to issue Synth, issue it\r\n            // this should put the c-ratio around 500% (i.e. debt ratio around 20%)\r\n            uint256 _maxSynths = _synthetix().maxIssuableSynths(address(this));\r\n            uint256 _debtBalance = balanceOfDebt();\r\n            // only issue new debt if it is going to be used\r\n            if (\r\n                _maxSynths > _debtBalance &&\r\n                _maxSynths.sub(_debtBalance) >= MIN_ISSUE\r\n            ) {\r\n                _synthetix().issueMaxSynths();\r\n            }\r\n        }\r\n\r\n        // If there is susd in the strategy, send it to the susd vault\r\n        // We do MIN_ISSUE instead of 0 since it might be dust\r\n        if (balanceOfSusd() >= MIN_ISSUE) {\r\n            susdVault.deposit();\r\n        }\r\n    }\r\n\r\n    function liquidatePosition(uint256 _amountNeeded)\r\n        internal\r\n        override\r\n        returns (uint256 _liquidatedAmount, uint256 _loss)\r\n    {\r\n        // if unlocked collateral balance is not enough, repay debt to unlock\r\n        // enough `want` to repay debt.\r\n        // unlocked collateral includes profit just claimed in `prepareReturn`\r\n        uint256 unlockedWant = _unlockedWant();\r\n        if (unlockedWant < _amountNeeded) {\r\n            // NOTE: we use _unlockedWant because `want` balance is the total amount of staked + unstaked want (SNX)\r\n            reduceLockedCollateral(_amountNeeded.sub(unlockedWant));\r\n        }\r\n\r\n        // Fetch the unlocked collateral for a second time\r\n        // to update after repaying debt\r\n        unlockedWant = _unlockedWant();\r\n        // if not enough want in balance, it means the strategy lost `want`\r\n        if (_amountNeeded > unlockedWant) {\r\n            _liquidatedAmount = unlockedWant;\r\n            _loss = _amountNeeded.sub(unlockedWant);\r\n        } else {\r\n            _liquidatedAmount = _amountNeeded;\r\n        }\r\n    }\r\n\r\n    function prepareMigration(address _newStrategy) internal override {\r\n        // totalDebt is 0 at this point\r\n        liquidatePosition(balanceOfWant());\r\n    }\r\n\r\n    // ********************** OPERATIONS FUNCTIONS **********************\r\n\r\n    function reduceLockedCollateral(uint256 amountToFree) internal {\r\n        // amountToFree cannot be higher than the amount that is unlockable\r\n        amountToFree = Math.min(amountToFree, _unlockableWant());\r\n\r\n        if (amountToFree == 0) {\r\n            return;\r\n        }\r\n        uint256 _currentDebt = balanceOfDebt();\r\n        uint256 _newCollateral = balanceOfWant().sub(amountToFree); // in want (SNX)\r\n        uint256 _targetDebt =\r\n            wantToSUSD(_newCollateral).mul(getIssuanceRatio()).div(1e18); // in sUSD\r\n\r\n        // NOTE: _newCollateral will always be < _lockedCollateral() so _targetDebt will always be < _currentDebt\r\n        uint256 _amountToRepay = _currentDebt.sub(_targetDebt);\r\n\r\n        repayDebt(_amountToRepay);\r\n    }\r\n\r\n    function repayDebt(uint256 amountToRepay) internal {\r\n        // debt can grow over the amount of sUSD minted (see Synthetix docs)\r\n        // if that happens, we might not have enough sUSD to repay debt\r\n        // if we withdraw in this situation, we need to sell `want` to repay debt and would have losses\r\n        // this can only be done if c-Ratio is over 272% (otherwise there is not enough unlocked)\r\n        if (amountToRepay == 0) {\r\n            return;\r\n        }\r\n        uint256 repaidAmount = 0;\r\n        uint256 _debtBalance = balanceOfDebt();\r\n        // max amount to be repaid is the total balanceOfDebt\r\n        amountToRepay = Math.min(_debtBalance, amountToRepay);\r\n\r\n        // in case the strategy is going to repay almost all debt, it should repay the total amount of debt\r\n        if (\r\n            _debtBalance > amountToRepay &&\r\n            _debtBalance.sub(amountToRepay) <= MIN_ISSUE\r\n        ) {\r\n            amountToRepay = _debtBalance;\r\n        }\r\n\r\n        uint256 currentSusdBalance = balanceOfSusd();\r\n        if (amountToRepay > currentSusdBalance) {\r\n            // there is not enough balance in strategy to repay debt\r\n\r\n            // we withdraw from susdvault\r\n            uint256 _withdrawAmount = amountToRepay.sub(currentSusdBalance);\r\n            withdrawFromSUSDVault(_withdrawAmount);\r\n            // we fetch sUSD balance for a second time and check if now there is enough\r\n            currentSusdBalance = balanceOfSusd();\r\n            if (amountToRepay > currentSusdBalance) {\r\n                // there was not enough balance in strategy and sUSDvault to repay debt\r\n\r\n                // debt is too high to be repaid using current funds, the strategy should:\r\n                // 1. repay max amount of debt\r\n                // 2. sell unlocked want to buy required sUSD to pay remaining debt\r\n                // 3. repay debt\r\n\r\n                if (currentSusdBalance > 0) {\r\n                    // we burn the full sUSD balance to unlock `want` (SNX) in order to sell\r\n                    if (burnSusd(currentSusdBalance)) {\r\n                        // subject to minimumStakePeriod\r\n                        // if successful burnt, update remaining amountToRepay\r\n                        // repaidAmount is previous debt minus current debt\r\n                        repaidAmount = _debtBalance.sub(balanceOfDebt());\r\n                    }\r\n                }\r\n                // buy enough sUSD to repay outstanding debt, selling `want` (SNX)\r\n                // or maximum sUSD with `want` available\r\n                uint256 amountToBuy =\r\n                    Math.min(\r\n                        _getSusdForWant(_unlockedWant()),\r\n                        amountToRepay.sub(repaidAmount)\r\n                    );\r\n                if (amountToBuy > 0) {\r\n                    buySusdWithWant(amountToBuy);\r\n                }\r\n                // amountToRepay should equal balanceOfSusd() (we just bought `amountToRepay` sUSD)\r\n            }\r\n        }\r\n\r\n        // repay sUSD debt by burning the synth\r\n        if (amountToRepay > repaidAmount) {\r\n            if (burnSusd(amountToRepay.sub(repaidAmount))) {\r\n                // this method is subject to minimumStakePeriod (see Synthetix docs)\r\n                repaidAmount = amountToRepay;\r\n            }\r\n        }\r\n        emit RepayDebt(repaidAmount, balanceOfDebt());\r\n    }\r\n\r\n    // two profit sources: Synthetix protocol and Yearn sUSD Vault\r\n    function claimProfits() internal returns (bool) {\r\n        uint256 feesAvailable;\r\n        uint256 rewardsAvailable;\r\n        (feesAvailable, rewardsAvailable) = _getFeesAvailable();\r\n\r\n        if (feesAvailable > 0 || rewardsAvailable > 0) {\r\n            // claim fees from Synthetix\r\n            // claim fees (in sUSD) and rewards (in want (SNX))\r\n            // Synthetix protocol requires issuers to have a c-ratio above 500%\r\n            // to be able to claim fees so we need to burn some sUSD\r\n\r\n            // NOTE: we use issuanceRatio because that is what will put us on 500% c-ratio (i.e. 20% debt ratio)\r\n            uint256 _targetDebt =\r\n                getIssuanceRatio().mul(wantToSUSD(_collateral())).div(1e18);\r\n            uint256 _balanceOfDebt = balanceOfDebt();\r\n            bool claim = true;\r\n\r\n            if (_balanceOfDebt > _targetDebt) {\r\n                uint256 _requiredPayment = _balanceOfDebt.sub(_targetDebt);\r\n                uint256 _maxCash =\r\n                    balanceOfSusd().add(balanceOfSusdInVault()).mul(50).div(\r\n                        100\r\n                    );\r\n                // only claim rewards if the required payment to burn debt up to c-ratio 500%\r\n                // is less than 50% of available cash (both in strategy and in sUSD vault)\r\n                claim = _requiredPayment <= _maxCash;\r\n            }\r\n\r\n            if (claim) {\r\n                // we need to burn sUSD to target\r\n                burnSusdToTarget();\r\n\r\n                // if a vesting entry is going to be created,\r\n                // we save its ID to keep track of its vesting\r\n                if (rewardsAvailable > 0) {\r\n                    entryIDs.push(_rewardEscrowV2().nextEntryId());\r\n                }\r\n                // claimFees() will claim both sUSD fees and put SNX rewards in the escrow (in the prev. saved entry)\r\n                _feePool().claimFees();\r\n            }\r\n        }\r\n\r\n        // claim profits from Yearn sUSD Vault\r\n        if (balanceOfDebt() < balanceOfSusdInVault()) {\r\n            // balance\r\n            uint256 _valueToWithdraw =\r\n                balanceOfSusdInVault().sub(balanceOfDebt());\r\n            withdrawFromSUSDVault(_valueToWithdraw);\r\n        }\r\n\r\n        // sell profits in sUSD for want (SNX) using router\r\n        uint256 _balance = balanceOfSusd();\r\n        if (_balance > 0) {\r\n            buyWantWithSusd(_balance);\r\n        }\r\n    }\r\n\r\n    function vestNextRewardsEntry() internal {\r\n        // Synthetix protocol sends SNX staking rewards to a escrow contract that keeps them 52 weeks, until they vest\r\n        // each time we claim the SNX rewards, a VestingEntry is created in the escrow contract for the amount that was owed\r\n        // we need to keep track of those VestingEntries to know when they vest and claim them\r\n        // after they vest and we claim them, we will receive them in our balance (strategy's balance)\r\n        if (entryIDs.length == 0) {\r\n            return;\r\n        }\r\n\r\n        // The strategy keeps track of the next VestingEntry expected to vest and only when it has vested, it checks the next one\r\n        // this works because the VestingEntries record has been saved in chronological order and they will vest in chronological order too\r\n        IRewardEscrowV2 re = _rewardEscrowV2();\r\n        uint256 nextEntryID = entryIDs[entryIDIndex];\r\n        uint256 _claimable =\r\n            re.getVestingEntryClaimable(address(this), nextEntryID);\r\n        // check if we need to vest\r\n        if (_claimable == 0) {\r\n            return;\r\n        }\r\n\r\n        // vest entryID\r\n        uint256[] memory params = new uint256[](1);\r\n        params[0] = nextEntryID;\r\n        re.vest(params);\r\n\r\n        // we update the nextEntryID to point to the next VestingEntry\r\n        entryIDIndex++;\r\n    }\r\n\r\n    function tendTrigger(uint256 callCost) public view override returns (bool) {\r\n        uint256 _currentRatio = getCurrentRatio(); // debt / collateral\r\n        uint256 _targetRatio = getTargetRatio(); // max debt ratio. over this number, we consider debt unhealthy\r\n        uint256 _issuanceRatio = getIssuanceRatio(); // preferred debt ratio by Synthetix (See protocol docs)\r\n\r\n        if (_currentRatio < _issuanceRatio) {\r\n            // strategy needs to take more debt\r\n            // only return true if the difference is greater than a threshold\r\n            return _issuanceRatio.sub(_currentRatio) >= ratioThreshold;\r\n        } else if (_currentRatio <= _targetRatio) {\r\n            // strategy is in optimal range (a bit undercollateralised)\r\n            return false;\r\n        } else if (_currentRatio > _targetRatio) {\r\n            // the strategy needs to repay debt to exit the danger zone\r\n            // only return true if the difference is greater than a threshold\r\n            return _currentRatio.sub(_targetRatio) >= ratioThreshold;\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    function protectedTokens()\r\n        internal\r\n        view\r\n        override\r\n        returns (address[] memory)\r\n    {}\r\n\r\n    // ********************** SUPPORT FUNCTIONS  **********************\r\n\r\n    function burnSusd(uint256 _amount) internal returns (bool) {\r\n        // returns false if unsuccessful\r\n        if (_issuer().canBurnSynths(address(this))) {\r\n            _synthetix().burnSynths(_amount);\r\n            return true;\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    function burnSusdToTarget() internal returns (uint256) {\r\n        // we use this method to be able to avoid the waiting period\r\n        // (see Synthetix Protocol)\r\n        // it burns enough Synths to get back to 500% c-ratio\r\n        // we need to have enough sUSD to burn to target\r\n        uint256 _debtBalance = balanceOfDebt();\r\n        // NOTE: amount of synths at 500% c-ratio (with current collateral)\r\n        uint256 _maxSynths = _synthetix().maxIssuableSynths(address(this));\r\n        if (_debtBalance <= _maxSynths) {\r\n            // we are over the 500% c-ratio (i.e. below 20% debt ratio), we don't need to burn sUSD\r\n            return 0;\r\n        }\r\n        uint256 _amountToBurn = _debtBalance.sub(_maxSynths);\r\n        uint256 _balance = balanceOfSusd();\r\n        if (_balance < _amountToBurn) {\r\n            // if we do not have enough in balance, we withdraw funds from sUSD vault\r\n            withdrawFromSUSDVault(_amountToBurn.sub(_balance));\r\n        }\r\n\r\n        if (_amountToBurn > 0) _synthetix().burnSynthsToTarget();\r\n        return _amountToBurn;\r\n    }\r\n\r\n    function withdrawFromSUSDVault(uint256 _amount) internal {\r\n        // Don't leave less than MIN_ISSUE sUSD in the vault\r\n        if (\r\n            _amount > balanceOfSusdInVault() ||\r\n            balanceOfSusdInVault().sub(_amount) <= MIN_ISSUE\r\n        ) {\r\n            // NOTE: maxLoss can be set to a higher value to be able to withdraw from lossy vault\r\n            susdVault.withdraw(\r\n                susdVault.balanceOf(address(this)),\r\n                address(this),\r\n                maxLoss\r\n            );\r\n        } else {\r\n            // NOTE: maxLoss can be set to a higher value to be able to withdraw from lossy vault\r\n            uint256 _sharesToWithdraw =\r\n                _amount.mul(1e18).div(susdVault.pricePerShare());\r\n            susdVault.withdraw(_sharesToWithdraw, address(this), maxLoss);\r\n        }\r\n    }\r\n\r\n    function buyWantWithSusd(uint256 _amount) internal {\r\n        if (_amount == 0) {\r\n            return;\r\n        }\r\n\r\n        address[] memory path = new address[](3);\r\n        path[0] = address(susd);\r\n        path[1] = address(WETH);\r\n        path[2] = address(want);\r\n\r\n        router.swapExactTokensForTokens(_amount, 0, path, address(this), now);\r\n    }\r\n\r\n    function buySusdWithWant(uint256 _amount) internal {\r\n        if (_amount == 0) {\r\n            return;\r\n        }\r\n\r\n        address[] memory path = new address[](3);\r\n        path[0] = address(want);\r\n        path[1] = address(WETH);\r\n        path[2] = address(susd);\r\n\r\n        // we use swapTokensForExactTokens because we need an exact sUSD amount\r\n        router.swapTokensForExactTokens(\r\n            _amount,\r\n            type(uint256).max,\r\n            path,\r\n            address(this),\r\n            now\r\n        );\r\n    }\r\n\r\n    // ********************** CALCS **********************\r\n    function ethToWant(uint256 _amtInWei)\r\n        public\r\n        view\r\n        override\r\n        returns (uint256)\r\n    {\r\n        if (_amtInWei == 0) {\r\n            return 0;\r\n        }\r\n        address[] memory path = new address[](2);\r\n        path[0] = address(want);\r\n        path[1] = address(WETH);\r\n\r\n        uint256[] memory amounts = router.getAmountsOut(_amtInWei, path);\r\n        return amounts[amounts.length - 1];\r\n    }\r\n\r\n    function liquidateAllPositions()\r\n        internal\r\n        override\r\n        returns (uint256 _amountFreed)\r\n    {\r\n        // NOTE: we try to unlock all of the collateral in the strategy (which should be == totalDebt)\r\n        (_amountFreed, ) = liquidatePosition(vault.debtOutstanding());\r\n    }\r\n\r\n    function estimatedProfit() public view returns (uint256) {\r\n        uint256 availableFees; // in sUSD\r\n\r\n        (availableFees, ) = _getFeesAvailable();\r\n\r\n        return sUSDToWant(availableFees);\r\n    }\r\n\r\n    function getTargetDebt(uint256 _targetCollateral)\r\n        internal\r\n        view\r\n        returns (uint256)\r\n    {\r\n        uint256 _targetRatio = getTargetRatio();\r\n        uint256 _collateralInSUSD = wantToSUSD(_targetCollateral);\r\n        return _targetRatio.mul(_collateralInSUSD).div(1e18);\r\n    }\r\n\r\n    function sUSDToWant(uint256 _amount) internal view returns (uint256) {\r\n        if (_amount == 0) {\r\n            return 0;\r\n        }\r\n\r\n        return _amount.mul(1e18).div(_exchangeRates().rateForCurrency(\"SNX\"));\r\n    }\r\n\r\n    function wantToSUSD(uint256 _amount) internal view returns (uint256) {\r\n        if (_amount == 0) {\r\n            return 0;\r\n        }\r\n\r\n        return _amount.mul(_exchangeRates().rateForCurrency(\"SNX\")).div(1e18);\r\n    }\r\n\r\n    function _getSusdForWant(uint256 _wantAmount)\r\n        internal\r\n        view\r\n        returns (uint256)\r\n    {\r\n        if (_wantAmount == 0) {\r\n            return 0;\r\n        }\r\n        address[] memory path = new address[](3);\r\n        path[0] = address(want);\r\n        path[1] = address(WETH);\r\n        path[2] = address(susd);\r\n\r\n        uint256[] memory amounts = router.getAmountsOut(_wantAmount, path);\r\n        return amounts[amounts.length - 1];\r\n    }\r\n\r\n    // ********************** BALANCES & RATIOS **********************\r\n    function _lockedCollateral() internal view returns (uint256) {\r\n        // collateral includes `want` balance (both locked and unlocked) AND escrowed balance\r\n        uint256 _collateral = _synthetix().collateral(address(this));\r\n\r\n        return _collateral.sub(_unlockedWant());\r\n    }\r\n\r\n    // amount of `want` (SNX) that can be transferred, sold, ...\r\n    function _unlockedWant() internal view returns (uint256) {\r\n        return _synthetix().transferableSynthetix(address(this));\r\n    }\r\n\r\n    function _unlockableWant() internal view returns (uint256) {\r\n        // collateral includes escrowed SNX, we may not be able to unlock the full\r\n        // we can only unlock this by repaying debt\r\n        return balanceOfWant().sub(_unlockedWant());\r\n    }\r\n\r\n    function _collateral() internal view returns (uint256) {\r\n        return _synthetix().collateral(address(this));\r\n    }\r\n\r\n    // returns fees and rewards\r\n    function _getFeesAvailable() internal view returns (uint256, uint256) {\r\n        // fees in sUSD\r\n        // rewards in `want` (SNX)\r\n        return _feePool().feesAvailable(address(this));\r\n    }\r\n\r\n    function getCurrentRatio() public view returns (uint256) {\r\n        // ratio = debt / collateral\r\n        // i.e. ratio is 0 if debt is 0\r\n        // NOTE: collateral includes SNX in account + escrowed balance\r\n        return _issuer().collateralisationRatio(address(this));\r\n    }\r\n\r\n    function getIssuanceRatio() public view returns (uint256) {\r\n        return _issuer().issuanceRatio();\r\n    }\r\n\r\n    function getTargetRatio() public view returns (uint256) {\r\n        return getIssuanceRatio().mul(targetRatioMultiplier).div(MAX_BPS);\r\n    }\r\n\r\n    function balanceOfEscrowedWant() public view returns (uint256) {\r\n        return _rewardEscrowV2().balanceOf(address(this));\r\n    }\r\n\r\n    function balanceOfWant() public view returns (uint256) {\r\n        return IERC20(want).balanceOf(address(this));\r\n    }\r\n\r\n    function balanceOfSusd() public view returns (uint256) {\r\n        return IERC20(susd).balanceOf(address(this));\r\n    }\r\n\r\n    function balanceOfDebt() public view returns (uint256) {\r\n        return _synthetix().debtBalanceOf(address(this), \"sUSD\");\r\n    }\r\n\r\n    function balanceOfSusdInVault() public view returns (uint256) {\r\n        return\r\n            susdVault\r\n                .balanceOf(address(this))\r\n                .mul(susdVault.pricePerShare())\r\n                .div(1e18);\r\n    }\r\n\r\n    // ********************** ADDRESS RESOLVER SHORTCUTS **********************\r\n\r\n    function resolver() public view returns (IAddressResolver) {\r\n        return IAddressResolver(readProxy.target());\r\n    }\r\n\r\n    function _synthetix() internal view returns (ISynthetix) {\r\n        return ISynthetix(resolver().getAddress(CONTRACT_SYNTHETIX));\r\n    }\r\n\r\n    function _feePool() internal view returns (IFeePool) {\r\n        return IFeePool(resolver().getAddress(CONTRACT_FEEPOOL));\r\n    }\r\n\r\n    function _issuer() internal view returns (IIssuer) {\r\n        return IIssuer(resolver().getAddress(CONTRACT_ISSUER));\r\n    }\r\n\r\n    function _exchangeRates() internal view returns (IExchangeRates) {\r\n        return IExchangeRates(resolver().getAddress(CONTRACT_EXRATES));\r\n    }\r\n\r\n    function _rewardEscrowV2() internal view returns (IRewardEscrowV2) {\r\n        return IRewardEscrowV2(resolver().getAddress(CONTRACT_REWARDESCROW_V2));\r\n    }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_vault\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_susdVault\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"EmergencyExitEnabled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"profit\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"loss\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"debtPayment\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"debtOutstanding\",\"type\":\"uint256\"}],\"name\":\"Harvested\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"repaidAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"debtAfterRepayment\",\"type\":\"uint256\"}],\"name\":\"RepayDebt\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"debtThreshold\",\"type\":\"uint256\"}],\"name\":\"UpdatedDebtThreshold\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newKeeper\",\"type\":\"address\"}],\"name\":\"UpdatedKeeper\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"delay\",\"type\":\"uint256\"}],\"name\":\"UpdatedMaxReportDelay\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"metadataURI\",\"type\":\"string\"}],\"name\":\"UpdatedMetadataURI\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"delay\",\"type\":\"uint256\"}],\"name\":\"UpdatedMinReportDelay\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"profitFactor\",\"type\":\"uint256\"}],\"name\":\"UpdatedProfitFactor\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"rewards\",\"type\":\"address\"}],\"name\":\"UpdatedRewards\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newStrategist\",\"type\":\"address\"}],\"name\":\"UpdatedStrategist\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"MAX_BPS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_RATIO\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MIN_ISSUE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"WETH\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"apiVersion\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"balanceOfDebt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"balanceOfEscrowedWant\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"balanceOfSusd\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"balanceOfSusdInVault\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"balanceOfWant\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"debtThreshold\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"delegatedAssets\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"doHealthCheck\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"emergencyExit\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"entryIDIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"entryIDs\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"estimatedProfit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"estimatedTotalAssets\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amtInWei\",\"type\":\"uint256\"}],\"name\":\"ethToWant\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCurrentRatio\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getIssuanceRatio\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTargetRatio\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"harvest\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"callCostInWei\",\"type\":\"uint256\"}],\"name\":\"harvestTrigger\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"healthCheck\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isActive\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"keeper\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"manuallyRepayDebt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxLoss\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxReportDelay\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"metadataURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newStrategy\",\"type\":\"address\"}],\"name\":\"migrate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IVault\",\"name\":\"newSusdVault\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_maxLoss\",\"type\":\"uint256\"}],\"name\":\"migrateSusdVault\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minReportDelay\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"profitFactor\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ratioThreshold\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"readProxy\",\"outputs\":[{\"internalType\":\"contract IReadProxy\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"resolver\",\"outputs\":[{\"internalType\":\"contract IAddressResolver\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewards\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"router\",\"outputs\":[{\"internalType\":\"contract ISushiRouter\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_debtThreshold\",\"type\":\"uint256\"}],\"name\":\"setDebtThreshold\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_doHealthCheck\",\"type\":\"bool\"}],\"name\":\"setDoHealthCheck\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"setEmergencyExit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_healthCheck\",\"type\":\"address\"}],\"name\":\"setHealthCheck\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_keeper\",\"type\":\"address\"}],\"name\":\"setKeeper\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_maxLoss\",\"type\":\"uint256\"}],\"name\":\"setMaxLoss\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_delay\",\"type\":\"uint256\"}],\"name\":\"setMaxReportDelay\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_metadataURI\",\"type\":\"string\"}],\"name\":\"setMetadataURI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_delay\",\"type\":\"uint256\"}],\"name\":\"setMinReportDelay\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_profitFactor\",\"type\":\"uint256\"}],\"name\":\"setProfitFactor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_ratioThreshold\",\"type\":\"uint256\"}],\"name\":\"setRatioThreshold\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_rewards\",\"type\":\"address\"}],\"name\":\"setRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_isSushi\",\"type\":\"uint256\"}],\"name\":\"setRouter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_strategist\",\"type\":\"address\"}],\"name\":\"setStrategist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_targetRatioMultiplier\",\"type\":\"uint256\"}],\"name\":\"setTargetRatioMultiplier\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"strategist\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"susd\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"susdVault\",\"outputs\":[{\"internalType\":\"contract IVault\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sushiswap\",\"outputs\":[{\"internalType\":\"contract ISushiRouter\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"sweep\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"targetRatioMultiplier\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tend\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"callCost\",\"type\":\"uint256\"}],\"name\":\"tendTrigger\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswap\",\"outputs\":[{\"internalType\":\"contract ISushiRouter\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vault\",\"outputs\":[{\"internalType\":\"contract VaultAPI\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"want\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amountNeeded\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_loss\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"Strategy","CompilerVersion":"v0.6.12+commit.27d51765","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000f29ae508698bdef169b89834f76704c3b205aedf000000000000000000000000ce0f1ef5aaab82547acc699d3ab93c069bb6e547","EVMVersion":"Default","Library":"","LicenseType":"Unknown","Proxy":"0","Implementation":"","SwarmSource":"ipfs://3b9aaefbb9d279059e80f39053c7dd78812a06dfff61447da05f0c9f2191476a"}]}