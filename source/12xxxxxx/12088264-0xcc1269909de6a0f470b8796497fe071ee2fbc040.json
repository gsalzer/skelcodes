{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/treasury/EmissionManager.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: MIT\\npragma solidity =0.6.6;\\n\\nimport \\\"@openzeppelin/contracts/math/Math.sol\\\";\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\\\";\\nimport \\\"../access/Operatable.sol\\\";\\nimport \\\"../time/Debouncable.sol\\\";\\nimport \\\"../time/Timeboundable.sol\\\";\\nimport \\\"../SyntheticToken.sol\\\";\\nimport \\\"../interfaces/IEmissionManager.sol\\\";\\nimport \\\"../interfaces/ITokenManager.sol\\\";\\nimport \\\"../interfaces/IBondManager.sol\\\";\\nimport \\\"../interfaces/IBoardroom.sol\\\";\\n\\n/// Emission manager expands supply when the price goes up\\ncontract EmissionManager is\\n    IEmissionManager,\\n    ReentrancyGuard,\\n    Operatable,\\n    Debouncable,\\n    Timeboundable\\n{\\n    using SafeMath for uint256;\\n\\n    /// Stable fund address\\n    address public stableFund;\\n    /// Development fund address\\n    address public devFund;\\n    /// LiquidBoardroom contract\\n    IBoardroom public liquidBoardroom;\\n    /// VeBoardroom contract\\n    IBoardroom public veBoardroom;\\n    /// UniswapBoardroom contract\\n    IBoardroom public uniswapBoardroom;\\n\\n    /// TokenManager contract\\n    ITokenManager public tokenManager;\\n    /// BondManager contract\\n    IBondManager public bondManager;\\n\\n    /// Threshold for positive rebase\\n    uint256 public threshold = 105;\\n    /// Threshold for positive rebase\\n    uint256 public maxRebase = 200;\\n    /// Development fund allocation rate (in percentage points)\\n    uint256 public devFundRate = 2;\\n    /// Stable fund allocation rate (in percentage points)\\n    uint256 public stableFundRate = 69;\\n    /// LiquidBoardroom allocation rate (in percentage points)\\n    uint256 public liquidBoardroomRate = 75;\\n    /// VeBoardroom allocation rate (in percentage points)\\n    uint256 public veBoardroomRate = 0;\\n\\n    /// Pauses positive rebases\\n    bool public pausePositiveRebase;\\n\\n    /// Create new Emission manager\\n    /// @param startTime Start of the operations\\n    /// @param period The period between positive rebases\\n    constructor(uint256 startTime, uint256 period)\\n        public\\n        Debouncable(period)\\n        Timeboundable(startTime, 0)\\n    {}\\n\\n    // --------- Modifiers ---------\\n\\n    /// Checks if contract was initialized properly and ready for use\\n    modifier initialized() {\\n        require(isInitialized(), \\\"EmissionManager: not initialized\\\");\\n        _;\\n    }\\n\\n    // --------- View ---------\\n\\n    function uniswapBoardroomRate() public view returns (uint256) {\\n        return uint256(100).sub(veBoardroomRate).sub(liquidBoardroomRate);\\n    }\\n\\n    /// Checks if contract was initialized properly and ready for use\\n    function isInitialized() public view returns (bool) {\\n        return\\n            (address(tokenManager) != address(0)) &&\\n            (address(bondManager) != address(0)) &&\\n            (address(stableFund) != address(0)) &&\\n            (address(devFund) != address(0)) &&\\n            (address(uniswapBoardroom) != address(0)) &&\\n            (address(liquidBoardroom) != address(0)) &&\\n            (stableFundRate > 0) &&\\n            (devFundRate > 0) &&\\n            (threshold > 100) &&\\n            (maxRebase > 100);\\n    }\\n\\n    /// The amount for positive rebase of the synthetic token\\n    /// @param syntheticTokenAddress The address of the synthetic token\\n    function positiveRebaseAmount(address syntheticTokenAddress)\\n        public\\n        view\\n        initialized\\n        returns (uint256)\\n    {\\n        uint256 oneSyntheticUnit =\\n            tokenManager.oneSyntheticUnit(syntheticTokenAddress);\\n        uint256 oneUnderlyingUnit =\\n            tokenManager.oneUnderlyingUnit(syntheticTokenAddress);\\n\\n        uint256 rebasePriceUndPerUnitSyn =\\n            tokenManager.averagePrice(syntheticTokenAddress, oneSyntheticUnit);\\n        uint256 thresholdUndPerUnitSyn =\\n            threshold.mul(oneUnderlyingUnit).div(100);\\n        if (rebasePriceUndPerUnitSyn < thresholdUndPerUnitSyn) {\\n            return 0;\\n        }\\n        uint256 maxRebaseAmountUndPerUnitSyn =\\n            maxRebase.mul(oneUnderlyingUnit).div(100);\\n        rebasePriceUndPerUnitSyn = Math.min(\\n            rebasePriceUndPerUnitSyn,\\n            maxRebaseAmountUndPerUnitSyn\\n        );\\n        SyntheticToken syntheticToken = SyntheticToken(syntheticTokenAddress);\\n        uint256 supply =\\n            syntheticToken.totalSupply().sub(\\n                syntheticToken.balanceOf(address(bondManager))\\n            );\\n        return\\n            supply.mul(rebasePriceUndPerUnitSyn.sub(oneUnderlyingUnit)).div(\\n                oneUnderlyingUnit\\n            );\\n    }\\n\\n    // --------- Public ---------\\n\\n    /// Makes positive rebases for all eligible tokens\\n    function makePositiveRebase()\\n        public\\n        nonReentrant\\n        initialized\\n        debounce\\n        inTimeBounds\\n    {\\n        require(!pausePositiveRebase, \\\"EmissionManager: Rebases are paused\\\");\\n        address[] memory tokens = tokenManager.allTokens();\\n        for (uint32 i = 0; i < tokens.length; i++) {\\n            if (tokens[i] != address(0)) {\\n                _makeOnePositiveRebase(tokens[i]);\\n            }\\n        }\\n    }\\n\\n    // --------- Owner (Timelocked) ---------\\n\\n    /// Set new dev fund\\n    /// @param _devFund New dev fund address\\n    function setDevFund(address _devFund) public onlyOwner {\\n        devFund = _devFund;\\n        emit DevFundChanged(msg.sender, _devFund);\\n    }\\n\\n    /// Set new stable fund\\n    /// @param _stableFund New stable fund address\\n    function setStableFund(address _stableFund) public onlyOwner {\\n        stableFund = _stableFund;\\n        emit StableFundChanged(msg.sender, _stableFund);\\n    }\\n\\n    /// Set new boardroom\\n    /// @param _boardroom New boardroom address\\n    function setLiquidBoardroom(address _boardroom) public onlyOwner {\\n        liquidBoardroom = IBoardroom(_boardroom);\\n        emit LiquidBoardroomChanged(msg.sender, _boardroom);\\n    }\\n\\n    /// Set new boardroom\\n    /// @param _boardroom New boardroom address\\n    function setVeBoardroom(address _boardroom) public onlyOwner {\\n        veBoardroom = IBoardroom(_boardroom);\\n        emit VeBoardroomChanged(msg.sender, _boardroom);\\n    }\\n\\n    /// Set new boardroom\\n    /// @param _boardroom New boardroom address\\n    function setUniswapBoardroom(address _boardroom) public onlyOwner {\\n        uniswapBoardroom = IBoardroom(_boardroom);\\n        emit UniswapBoardroomChanged(msg.sender, _boardroom);\\n    }\\n\\n    /// Set new TokenManager\\n    /// @param _tokenManager New TokenManager address\\n    function setTokenManager(address _tokenManager) public onlyOwner {\\n        tokenManager = ITokenManager(_tokenManager);\\n        emit TokenManagerChanged(msg.sender, _tokenManager);\\n    }\\n\\n    /// Set new BondManager\\n    /// @param _bondManager New BondManager address\\n    function setBondManager(address _bondManager) public onlyOwner {\\n        bondManager = IBondManager(_bondManager);\\n        emit BondManagerChanged(msg.sender, _bondManager);\\n    }\\n\\n    /// Set new dev fund rate\\n    /// @param _devFundRate New dev fund rate\\n    function setDevFundRate(uint256 _devFundRate) public onlyOwner {\\n        devFundRate = _devFundRate;\\n        emit DevFundRateChanged(msg.sender, _devFundRate);\\n    }\\n\\n    /// Set new stable fund rate\\n    /// @param _stableFundRate New stable fund rate\\n    function setStableFundRate(uint256 _stableFundRate) public onlyOwner {\\n        stableFundRate = _stableFundRate;\\n        emit StableFundRateChanged(msg.sender, _stableFundRate);\\n    }\\n\\n    /// Set new stable fund rate\\n    /// @param _veBoardroomRate New stable fund rate\\n    function setVeBoardroomRate(uint256 _veBoardroomRate) public onlyOwner {\\n        veBoardroomRate = _veBoardroomRate;\\n        emit VeBoardroomRateChanged(msg.sender, _veBoardroomRate);\\n    }\\n\\n    /// Set new stable fund rate\\n    /// @param _liquidBoardroomRate New stable fund rate\\n    function setLiquidBoardroomRate(uint256 _liquidBoardroomRate)\\n        public\\n        onlyOwner\\n    {\\n        liquidBoardroomRate = _liquidBoardroomRate;\\n        emit LiquidBoardroomRateChanged(msg.sender, _liquidBoardroomRate);\\n    }\\n\\n    /// Set new threshold\\n    /// @param _threshold New threshold\\n    function setThreshold(uint256 _threshold) public onlyOwner {\\n        threshold = _threshold;\\n        emit ThresholdChanged(msg.sender, _threshold);\\n    }\\n\\n    /// Set new maxRebase\\n    /// @param _maxRebase New maxRebase\\n    function setMaxRebase(uint256 _maxRebase) public onlyOwner {\\n        maxRebase = _maxRebase;\\n        emit MaxRebaseChanged(msg.sender, _maxRebase);\\n    }\\n\\n    // --------- Operator (immediate) ---------\\n\\n    /// Pauses / unpauses positive rebases\\n    /// @param pause Sets the pause / unpause\\n    function setPausePositiveRebase(bool pause) public onlyOperator {\\n        pausePositiveRebase = pause;\\n        emit PositiveRebasePaused(msg.sender, pause);\\n    }\\n\\n    /// Make positive rebase for one token\\n    /// @param syntheticTokenAddress The address of the synthetic token\\n    /// @dev The caller must ensure `managedToken` and `initialized` properties\\n    function _makeOnePositiveRebase(address syntheticTokenAddress) internal {\\n        tokenManager.updateOracle(syntheticTokenAddress);\\n        SyntheticToken syntheticToken = SyntheticToken(syntheticTokenAddress);\\n        uint256 amount = positiveRebaseAmount(syntheticTokenAddress);\\n        if (amount == 0) {\\n            return;\\n        }\\n        emit PositiveRebaseTotal(syntheticTokenAddress, amount);\\n\\n        uint256 devFundAmount = amount.mul(devFundRate).div(100);\\n        tokenManager.mintSynthetic(\\n            syntheticTokenAddress,\\n            devFund,\\n            devFundAmount\\n        );\\n        emit DevFundFunded(syntheticTokenAddress, devFundAmount);\\n        amount = amount.sub(devFundAmount);\\n\\n        uint256 stableFundAmount = amount.mul(stableFundRate).div(100);\\n        tokenManager.mintSynthetic(\\n            syntheticTokenAddress,\\n            stableFund,\\n            stableFundAmount\\n        );\\n        emit StableFundFunded(syntheticTokenAddress, stableFundAmount);\\n        amount = amount.sub(stableFundAmount);\\n\\n        SyntheticToken bondToken =\\n            SyntheticToken(bondManager.bondIndex(syntheticTokenAddress));\\n        uint256 bondSupply = bondToken.totalSupply();\\n        uint256 bondPoolBalance = syntheticToken.balanceOf(address(this));\\n        uint256 bondShortage =\\n            Math.max(bondSupply, bondPoolBalance).sub(bondPoolBalance);\\n        uint256 bondAmount = Math.min(amount, bondShortage);\\n        if (bondAmount > 0) {\\n            tokenManager.mintSynthetic(\\n                syntheticTokenAddress,\\n                address(bondManager),\\n                bondAmount\\n            );\\n            emit BondDistributionFunded(syntheticTokenAddress, bondAmount);\\n        }\\n        amount = amount.sub(bondAmount);\\n        if (amount == 0) {\\n            return;\\n        }\\n\\n        uint256 veBoardroomAmount = 0;\\n        if (veBoardroomRate > 0) {\\n            veBoardroomAmount = amount.mul(veBoardroomRate).div(100);\\n            tokenManager.mintSynthetic(\\n                syntheticTokenAddress,\\n                address(veBoardroom),\\n                veBoardroomAmount\\n            );\\n            veBoardroom.notifyTransfer(\\n                syntheticTokenAddress,\\n                veBoardroomAmount\\n            );\\n            emit VeBoardroomFunded(syntheticTokenAddress, veBoardroomAmount);\\n        }\\n\\n        uint256 liquidBoardroomAmount = 0;\\n        if (liquidBoardroomRate > 0) {\\n            liquidBoardroomAmount = amount.mul(liquidBoardroomRate).div(100);\\n            tokenManager.mintSynthetic(\\n                syntheticTokenAddress,\\n                address(liquidBoardroom),\\n                liquidBoardroomAmount\\n            );\\n            liquidBoardroom.notifyTransfer(\\n                syntheticTokenAddress,\\n                liquidBoardroomAmount\\n            );\\n            emit LiquidBoardroomFunded(\\n                syntheticTokenAddress,\\n                liquidBoardroomAmount\\n            );\\n        }\\n\\n        if (uniswapBoardroomRate() > 0) {\\n            uint256 uniswapBoardroomAmount =\\n                amount.sub(veBoardroomAmount).sub(liquidBoardroomAmount);\\n            tokenManager.mintSynthetic(\\n                syntheticTokenAddress,\\n                address(uniswapBoardroom),\\n                uniswapBoardroomAmount\\n            );\\n            uniswapBoardroom.notifyTransfer(\\n                syntheticTokenAddress,\\n                uniswapBoardroomAmount\\n            );\\n            emit UniswapBoardroomFunded(\\n                syntheticTokenAddress,\\n                uniswapBoardroomAmount\\n            );\\n        }\\n    }\\n\\n    event DevFundChanged(address indexed operator, address newFund);\\n    event StableFundChanged(address indexed operator, address newFund);\\n    event LiquidBoardroomChanged(address indexed operator, address newBoadroom);\\n    event VeBoardroomChanged(address indexed operator, address newBoadroom);\\n    event UniswapBoardroomChanged(\\n        address indexed operator,\\n        address newBoadroom\\n    );\\n    event TokenManagerChanged(\\n        address indexed operator,\\n        address newTokenManager\\n    );\\n    event BondManagerChanged(address indexed operator, address newBondManager);\\n    event PositiveRebasePaused(address indexed operator, bool pause);\\n\\n    event DevFundRateChanged(address indexed operator, uint256 newRate);\\n    event StableFundRateChanged(address indexed operator, uint256 newRate);\\n    event VeBoardroomRateChanged(address indexed operator, uint256 newRate);\\n    event LiquidBoardroomRateChanged(address indexed operator, uint256 newRate);\\n    event ThresholdChanged(address indexed operator, uint256 newThreshold);\\n    event MaxRebaseChanged(address indexed operator, uint256 newThreshold);\\n    event PositiveRebaseTotal(\\n        address indexed syntheticTokenAddress,\\n        uint256 amount\\n    );\\n    event BondDistributionFunded(\\n        address indexed syntheticTokenAddress,\\n        uint256 amount\\n    );\\n    event LiquidBoardroomFunded(\\n        address indexed syntheticTokenAddress,\\n        uint256 amount\\n    );\\n    event VeBoardroomFunded(\\n        address indexed syntheticTokenAddress,\\n        uint256 amount\\n    );\\n    event UniswapBoardroomFunded(\\n        address indexed syntheticTokenAddress,\\n        uint256 amount\\n    );\\n    event DevFundFunded(address indexed syntheticTokenAddress, uint256 amount);\\n    event StableFundFunded(\\n        address indexed syntheticTokenAddress,\\n        uint256 amount\\n    );\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/math/Math.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a >= b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow, so we distribute\\n        return (a / 2) + (b / 2) + ((a % 2 + b % 2) / 2);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/math/SafeMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return sub(a, b, \\\"SafeMath: subtraction overflow\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        uint256 c = a - b;\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        uint256 c = a / b;\\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return mod(a, b, \\\"SafeMath: modulo by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts with custom message when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b != 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/ReentrancyGuard.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor () internal {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and make it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/access/Operatable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity =0.6.6;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\n/// Introduces `Operator` role that can be changed only by Owner.\\nabstract contract Operatable is Ownable {\\n    address public operator;\\n\\n    constructor() internal {\\n        operator = msg.sender;\\n    }\\n\\n    modifier onlyOperator() {\\n        require(msg.sender == operator, \\\"Only operator can call this method\\\");\\n        _;\\n    }\\n\\n    /// Set new operator\\n    /// @param newOperator New operator to be set\\n    /// @dev Only owner is allowed to call this method.\\n    function transferOperator(address newOperator) public onlyOwner {\\n        emit OperatorTransferred(operator, newOperator);\\n        operator = newOperator;\\n    }\\n\\n    event OperatorTransferred(\\n        address indexed previousOperator,\\n        address indexed newOperator\\n    );\\n}\\n\"\r\n    },\r\n    \"contracts/time/Debouncable.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: MIT\\npragma solidity =0.6.6;\\n\\n/// Provides modifier for debouncing call to methods,\\n/// i.e. method cannot be called more earlier than debouncePeriod\\n/// since the last call\\nabstract contract Debouncable {\\n    /// Debounce period in secs\\n    uint256 public immutable debouncePeriod;\\n    /// Last time method successfully called (block timestamp)\\n    uint256 public lastCalled;\\n\\n    /// @param _debouncePeriod Debounce period in secs\\n    constructor(uint256 _debouncePeriod) internal {\\n        debouncePeriod = _debouncePeriod;\\n    }\\n\\n    /// Throws if the method was called earlier than debouncePeriod last time.\\n    modifier debounce() {\\n        uint256 timeElapsed = block.timestamp - lastCalled;\\n        require(\\n            timeElapsed >= debouncePeriod,\\n            \\\"Debouncable: already called in this time slot\\\"\\n        );\\n        _;\\n        lastCalled = block.timestamp;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/time/Timeboundable.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: MIT\\npragma solidity =0.6.6;\\n\\n/// Checks time bounds for contract\\nabstract contract Timeboundable {\\n    uint256 public immutable start;\\n    uint256 public immutable finish;\\n\\n    /// @param _start The block timestamp to start from (in secs). Use 0 for unbounded start.\\n    /// @param _finish The block timestamp to finish in (in secs). Use 0 for unbounded finish.\\n    constructor(uint256 _start, uint256 _finish) internal {\\n        require(\\n            (_start != 0) || (_finish != 0),\\n            \\\"Timebound: either start or finish must be nonzero\\\"\\n        );\\n        require(\\n            (_finish == 0) || (_finish > _start),\\n            \\\"Timebound: finish must be zero or greater than start\\\"\\n        );\\n        uint256 s = _start;\\n        if (s == 0) {\\n            s = block.timestamp;\\n        }\\n        uint256 f = _finish;\\n        if (f == 0) {\\n            f = uint256(-1);\\n        }\\n        start = s;\\n        finish = f;\\n    }\\n\\n    /// Checks if timebounds are satisfied\\n    modifier inTimeBounds() {\\n        require(block.timestamp >= start, \\\"Timeboundable: Not started yet\\\");\\n        require(block.timestamp <= finish, \\\"Timeboundable: Already finished\\\");\\n        _;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/SyntheticToken.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: MIT\\npragma solidity =0.6.6;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20Burnable.sol\\\";\\nimport \\\"./access/Operatable.sol\\\";\\n\\n/// @title Synthetic token for the Klondike platform\\ncontract SyntheticToken is ERC20Burnable, Operatable {\\n    /// Creates a new synthetic token\\n    /// @param _name Name of the token\\n    /// @param _symbol Ticker for the token\\n    /// @param _decimals Number of decimals\\n    constructor(\\n        string memory _name,\\n        string memory _symbol,\\n        uint8 _decimals\\n    ) public ERC20(_name, _symbol) {\\n        _setupDecimals(_decimals);\\n    }\\n\\n    ///  Mints tokens to the recepient\\n    ///  @param recipient The address of recipient\\n    ///  @param amount The amount of tokens to mint\\n    function mint(address recipient, uint256 amount)\\n        public\\n        onlyOperator\\n        returns (bool)\\n    {\\n        _mint(recipient, amount);\\n    }\\n\\n    ///  Burns token from the caller\\n    ///  @param amount The amount of tokens to burn\\n    function burn(uint256 amount) public override onlyOperator {\\n        super.burn(amount);\\n    }\\n\\n    ///  Burns token from address\\n    ///  @param account The account to burn from\\n    ///  @param amount The amount of tokens to burn\\n    ///  @dev The allowance for sender in address account must be\\n    ///  strictly >= amount. Otherwise the function call will fail.\\n    function burnFrom(address account, uint256 amount)\\n        public\\n        override\\n        onlyOperator\\n    {\\n        super.burnFrom(account, amount);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IEmissionManager.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: MIT\\npragma solidity =0.6.6;\\n\\n/// Emission manager as seen by other managers\\ninterface IEmissionManager {\\n\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/ITokenManager.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: MIT\\npragma solidity =0.6.6;\\n\\nimport \\\"./ISmelter.sol\\\";\\n\\n/// Token manager as seen by other managers\\ninterface ITokenManager is ISmelter {\\n    /// A set of synthetic tokens under management\\n    /// @dev Deleted tokens are still present in the array but with address(0)\\n    function allTokens() external view returns (address[] memory);\\n\\n    /// Checks if the token is managed by Token Manager\\n    /// @param syntheticTokenAddress The address of the synthetic token\\n    /// @return True if token is managed\\n    function isManagedToken(address syntheticTokenAddress)\\n        external\\n        view\\n        returns (bool);\\n\\n    /// Address of the underlying token\\n    /// @param syntheticTokenAddress The address of the synthetic token\\n    function underlyingToken(address syntheticTokenAddress)\\n        external\\n        view\\n        returns (address);\\n\\n    /// Average price of the synthetic token according to price oracle\\n    /// @param syntheticTokenAddress The address of the synthetic token\\n    /// @param syntheticTokenAmount The amount to be priced\\n    /// @return The equivalent amount of the underlying token required to buy syntheticTokenAmount (average)\\n    /// @dev Fails if the token is not managed\\n    function averagePrice(\\n        address syntheticTokenAddress,\\n        uint256 syntheticTokenAmount\\n    ) external view returns (uint256);\\n\\n    /// Current price of the synthetic token according to Uniswap\\n    /// @param syntheticTokenAddress The address of the synthetic token\\n    /// @param syntheticTokenAmount The amount to be priced\\n    /// @return The equivalent amount of the underlying token required to buy syntheticTokenAmount\\n    /// @dev Fails if the token is not managed\\n    function currentPrice(\\n        address syntheticTokenAddress,\\n        uint256 syntheticTokenAmount\\n    ) external view returns (uint256);\\n\\n    /// Updates Oracle for the synthetic asset\\n    /// @param syntheticTokenAddress The address of the synthetic token\\n    function updateOracle(address syntheticTokenAddress) external;\\n\\n    /// Get one synthetic unit\\n    /// @param syntheticTokenAddress The address of the synthetic token\\n    /// @return one unit of the synthetic asset\\n    function oneSyntheticUnit(address syntheticTokenAddress)\\n        external\\n        view\\n        returns (uint256);\\n\\n    /// Get one underlying unit\\n    /// @param syntheticTokenAddress The address of the synthetic token\\n    /// @return one unit of the underlying asset\\n    function oneUnderlyingUnit(address syntheticTokenAddress)\\n        external\\n        view\\n        returns (uint256);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IBondManager.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: MIT\\npragma solidity =0.6.6;\\n\\nimport \\\"@uniswap/v2-core/contracts/interfaces/IUniswapV2Pair.sol\\\";\\n\\n/// Bond manager as seen by other managers\\ninterface IBondManager {\\n    /// Called when new token is added in TokenManager\\n    /// @param syntheticTokenAddress The address of the synthetic token\\n    /// @param bondTokenAddress The address of the bond token\\n    function addBondToken(\\n        address syntheticTokenAddress,\\n        address bondTokenAddress\\n    ) external;\\n\\n    /// Called when token is deleted in TokenManager\\n    /// @param syntheticTokenAddress The address of the synthetic token\\n    /// @param newOperator New operator for the bond token\\n    function deleteBondToken(address syntheticTokenAddress, address newOperator)\\n        external;\\n\\n    function bondIndex(address syntheticTokenAddress)\\n        external\\n        returns (address);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IBoardroom.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: MIT\\npragma solidity =0.6.6;\\n\\n/// Boardroom as seen by others\\ninterface IBoardroom {\\n    /// Notify Boardroom about new incoming reward for token\\n    /// @param token Rewards denominated in this token\\n    /// @param amount The amount of rewards\\n    function notifyTransfer(address token, uint256 amount) external;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"../GSN/Context.sol\\\";\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor () internal {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(_owner == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/GSN/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/ERC20Burnable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"../../GSN/Context.sol\\\";\\nimport \\\"./ERC20.sol\\\";\\n\\n/**\\n * @dev Extension of {ERC20} that allows token holders to destroy both their own\\n * tokens and those that they have an allowance for, in a way that can be\\n * recognized off-chain (via event analysis).\\n */\\nabstract contract ERC20Burnable is Context, ERC20 {\\n    using SafeMath for uint256;\\n\\n    /**\\n     * @dev Destroys `amount` tokens from the caller.\\n     *\\n     * See {ERC20-_burn}.\\n     */\\n    function burn(uint256 amount) public virtual {\\n        _burn(_msgSender(), amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, deducting from the caller's\\n     * allowance.\\n     *\\n     * See {ERC20-_burn} and {ERC20-allowance}.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have allowance for ``accounts``'s tokens of at least\\n     * `amount`.\\n     */\\n    function burnFrom(address account, uint256 amount) public virtual {\\n        uint256 decreasedAllowance = allowance(account, _msgSender()).sub(amount, \\\"ERC20: burn amount exceeds allowance\\\");\\n\\n        _approve(account, _msgSender(), decreasedAllowance);\\n        _burn(account, amount);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/ERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"../../GSN/Context.sol\\\";\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"../../math/SafeMath.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin guidelines: functions revert instead\\n * of returning `false` on failure. This behavior is nonetheless conventional\\n * and does not conflict with the expectations of ERC20 applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20 {\\n    using SafeMath for uint256;\\n\\n    mapping (address => uint256) private _balances;\\n\\n    mapping (address => mapping (address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n    uint8 private _decimals;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}, initializes {decimals} with\\n     * a default value of 18.\\n     *\\n     * To select a different value for {decimals}, use {_setupDecimals}.\\n     *\\n     * All three of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor (string memory name_, string memory symbol_) public {\\n        _name = name_;\\n        _symbol = symbol_;\\n        _decimals = 18;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is\\n     * called.\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view returns (uint8) {\\n        return _decimals;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `recipient` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(_msgSender(), recipient, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        _approve(_msgSender(), spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` and `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``sender``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(sender, recipient, amount);\\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \\\"ERC20: transfer amount exceeds allowance\\\"));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \\\"ERC20: decreased allowance below zero\\\"));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\\n     *\\n     * This is internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` cannot be the zero address.\\n     * - `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     */\\n    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\\n        require(sender != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(recipient != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(sender, recipient, amount);\\n\\n        _balances[sender] = _balances[sender].sub(amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        _balances[recipient] = _balances[recipient].add(amount);\\n        emit Transfer(sender, recipient, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply = _totalSupply.add(amount);\\n        _balances[account] = _balances[account].add(amount);\\n        emit Transfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        _balances[account] = _balances[account].sub(amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        _totalSupply = _totalSupply.sub(amount);\\n        emit Transfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Sets {decimals} to a value other than the default one of 18.\\n     *\\n     * WARNING: This function should only be called from the constructor. Most\\n     * applications that interact with token contracts will not expect\\n     * {decimals} to ever change, and may work incorrectly if it does.\\n     */\\n    function _setupDecimals(uint8 decimals_) internal {\\n        _decimals = decimals_;\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be to transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual { }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/ISmelter.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: MIT\\npragma solidity =0.6.6;\\n\\n/// Smelter can mint and burn tokens\\ninterface ISmelter {\\n    /// Burn SyntheticToken\\n    /// @param syntheticTokenAddress The address of the synthetic token\\n    /// @param owner Owner of the tokens to burn\\n    /// @param amount Amount to burn\\n    function burnSyntheticFrom(\\n        address syntheticTokenAddress,\\n        address owner,\\n        uint256 amount\\n    ) external;\\n\\n    /// Mints synthetic token\\n    /// @param syntheticTokenAddress The address of the synthetic token\\n    /// @param receiver Address to receive minted token\\n    /// @param amount Amount to mint\\n    function mintSynthetic(\\n        address syntheticTokenAddress,\\n        address receiver,\\n        uint256 amount\\n    ) external;\\n\\n    /// Check if address is token admin\\n    /// @param admin - address to check\\n    function isTokenAdmin(address admin) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"@uniswap/v2-core/contracts/interfaces/IUniswapV2Pair.sol\": {\r\n      \"content\": \"pragma solidity >=0.5.0;\\n\\ninterface IUniswapV2Pair {\\n    event Approval(address indexed owner, address indexed spender, uint value);\\n    event Transfer(address indexed from, address indexed to, uint value);\\n\\n    function name() external pure returns (string memory);\\n    function symbol() external pure returns (string memory);\\n    function decimals() external pure returns (uint8);\\n    function totalSupply() external view returns (uint);\\n    function balanceOf(address owner) external view returns (uint);\\n    function allowance(address owner, address spender) external view returns (uint);\\n\\n    function approve(address spender, uint value) external returns (bool);\\n    function transfer(address to, uint value) external returns (bool);\\n    function transferFrom(address from, address to, uint value) external returns (bool);\\n\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\\n    function nonces(address owner) external view returns (uint);\\n\\n    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\\n\\n    event Mint(address indexed sender, uint amount0, uint amount1);\\n    event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);\\n    event Swap(\\n        address indexed sender,\\n        uint amount0In,\\n        uint amount1In,\\n        uint amount0Out,\\n        uint amount1Out,\\n        address indexed to\\n    );\\n    event Sync(uint112 reserve0, uint112 reserve1);\\n\\n    function MINIMUM_LIQUIDITY() external pure returns (uint);\\n    function factory() external view returns (address);\\n    function token0() external view returns (address);\\n    function token1() external view returns (address);\\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\\n    function price0CumulativeLast() external view returns (uint);\\n    function price1CumulativeLast() external view returns (uint);\\n    function kLast() external view returns (uint);\\n\\n    function mint(address to) external returns (uint liquidity);\\n    function burn(address to) external returns (uint amount0, uint amount1);\\n    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\\n    function skim(address to) external;\\n    function sync() external;\\n\\n    function initialize(address, address) external;\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 999999\r\n    },\r\n    \"evmVersion\": \"istanbul\",\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}","ABI":"[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"startTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"period\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"syntheticTokenAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"BondDistributionFunded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newBondManager\",\"type\":\"address\"}],\"name\":\"BondManagerChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newFund\",\"type\":\"address\"}],\"name\":\"DevFundChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"syntheticTokenAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"DevFundFunded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newRate\",\"type\":\"uint256\"}],\"name\":\"DevFundRateChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newBoadroom\",\"type\":\"address\"}],\"name\":\"LiquidBoardroomChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"syntheticTokenAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"LiquidBoardroomFunded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newRate\",\"type\":\"uint256\"}],\"name\":\"LiquidBoardroomRateChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newThreshold\",\"type\":\"uint256\"}],\"name\":\"MaxRebaseChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOperator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOperator\",\"type\":\"address\"}],\"name\":\"OperatorTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"pause\",\"type\":\"bool\"}],\"name\":\"PositiveRebasePaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"syntheticTokenAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"PositiveRebaseTotal\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newFund\",\"type\":\"address\"}],\"name\":\"StableFundChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"syntheticTokenAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"StableFundFunded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newRate\",\"type\":\"uint256\"}],\"name\":\"StableFundRateChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newThreshold\",\"type\":\"uint256\"}],\"name\":\"ThresholdChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newTokenManager\",\"type\":\"address\"}],\"name\":\"TokenManagerChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newBoadroom\",\"type\":\"address\"}],\"name\":\"UniswapBoardroomChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"syntheticTokenAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"UniswapBoardroomFunded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newBoadroom\",\"type\":\"address\"}],\"name\":\"VeBoardroomChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"syntheticTokenAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"VeBoardroomFunded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newRate\",\"type\":\"uint256\"}],\"name\":\"VeBoardroomRateChanged\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"bondManager\",\"outputs\":[{\"internalType\":\"contract IBondManager\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"debouncePeriod\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"devFund\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"devFundRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"finish\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isInitialized\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastCalled\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liquidBoardroom\",\"outputs\":[{\"internalType\":\"contract IBoardroom\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liquidBoardroomRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"makePositiveRebase\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxRebase\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"operator\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pausePositiveRebase\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"syntheticTokenAddress\",\"type\":\"address\"}],\"name\":\"positiveRebaseAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_bondManager\",\"type\":\"address\"}],\"name\":\"setBondManager\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_devFund\",\"type\":\"address\"}],\"name\":\"setDevFund\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_devFundRate\",\"type\":\"uint256\"}],\"name\":\"setDevFundRate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_boardroom\",\"type\":\"address\"}],\"name\":\"setLiquidBoardroom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_liquidBoardroomRate\",\"type\":\"uint256\"}],\"name\":\"setLiquidBoardroomRate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_maxRebase\",\"type\":\"uint256\"}],\"name\":\"setMaxRebase\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"pause\",\"type\":\"bool\"}],\"name\":\"setPausePositiveRebase\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_stableFund\",\"type\":\"address\"}],\"name\":\"setStableFund\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_stableFundRate\",\"type\":\"uint256\"}],\"name\":\"setStableFundRate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_threshold\",\"type\":\"uint256\"}],\"name\":\"setThreshold\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenManager\",\"type\":\"address\"}],\"name\":\"setTokenManager\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_boardroom\",\"type\":\"address\"}],\"name\":\"setUniswapBoardroom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_boardroom\",\"type\":\"address\"}],\"name\":\"setVeBoardroom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_veBoardroomRate\",\"type\":\"uint256\"}],\"name\":\"setVeBoardroomRate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stableFund\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stableFundRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"start\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"threshold\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenManager\",\"outputs\":[{\"internalType\":\"contract ITokenManager\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOperator\",\"type\":\"address\"}],\"name\":\"transferOperator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapBoardroom\",\"outputs\":[{\"internalType\":\"contract IBoardroom\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapBoardroomRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"veBoardroom\",\"outputs\":[{\"internalType\":\"contract IBoardroom\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"veBoardroomRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"EmissionManager","CompilerVersion":"v0.6.6+commit.6c089d02","OptimizationUsed":"1","Runs":"999999","ConstructorArguments":"00000000000000000000000000000000000000000000000000000000605ccfa00000000000000000000000000000000000000000000000000000000000015180","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}