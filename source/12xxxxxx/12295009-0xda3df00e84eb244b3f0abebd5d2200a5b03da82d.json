{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"settings\": {\r\n    \"evmVersion\": \"istanbul\",\r\n    \"libraries\": {},\r\n    \"metadata\": {\r\n      \"bytecodeHash\": \"ipfs\",\r\n      \"useLiteralContent\": true\r\n    },\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"remappings\": [],\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  },\r\n  \"sources\": {\r\n    \"@openzeppelin/contracts-upgradeable/proxy/Initializable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\n// solhint-disable-next-line compiler-version\\npragma solidity >=0.4.24 <0.8.0;\\n\\nimport \\\"../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {UpgradeableProxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n */\\nabstract contract Initializable {\\n\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        require(_initializing || _isConstructor() || !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n\\n    /// @dev Returns true if and only if the function is running in the constructor\\n    function _isConstructor() private view returns (bool) {\\n        return !AddressUpgradeable.isContract(address(this));\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.2 <0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/Solver.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.7.6;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/Initializable.sol\\\";\\nimport \\\"./interface/ISolver.sol\\\";\\n\\ncontract Solver is ISolver, Initializable {\\n    address public admin;\\n    address public pendingAdmin;\\n\\n    mapping(address => bool) public transferGuardianPaused;\\n    mapping(address => bool) public depositGuardianPaused;\\n    mapping(address => bool) public withdrawGuardianPaused;\\n\\n    mapping(address => bool) public convertUnsafeTransferContracts;\\n    mapping(address => bool) public rejectUnsafeTransferContracts;\\n\\n    modifier onlyAdmin {\\n        require(msg.sender == admin, \\\"only admin\\\");\\n        _;\\n    }\\n\\n    function initialize() public initializer {\\n        admin = msg.sender;\\n    }\\n\\n    function isSolver() external pure override returns (bool) {\\n        return true;\\n    }\\n\\n    function _setTransferGuuardianPause(address product, bool enable)\\n        public\\n        onlyAdmin\\n    {\\n        transferGuardianPaused[product] = enable;\\n    }\\n\\n    function _setDepositGuuardianPause(address product, bool enable)\\n        public\\n        onlyAdmin\\n    {\\n        depositGuardianPaused[product] = enable;\\n    }\\n\\n    function _setWithdrawGuuardianPause(address product, bool enable)\\n        public\\n        onlyAdmin\\n    {\\n        withdrawGuardianPaused[product] = enable;\\n    }\\n\\n    function _setConvertUnsafeTransferContracts(address product, bool enable)\\n        public\\n        onlyAdmin\\n    {\\n        convertUnsafeTransferContracts[product] = enable;\\n    }\\n\\n    function _setRejectUnsafeTransferContracts(address product, bool enable)\\n        public\\n        onlyAdmin\\n    {\\n        rejectUnsafeTransferContracts[product] = enable;\\n    }\\n\\n    function depositAllowed(\\n        address product,\\n        address depositor,\\n        uint64 term,\\n        uint256 depositAmount,\\n        uint64[] calldata maturities\\n    ) external override returns (uint256) {\\n        //reserve vars\\n        product;\\n        depositor;\\n        term;\\n        depositAmount;\\n        maturities;\\n\\n        require(!depositGuardianPaused[product], \\\"deposit is paused\\\");\\n\\n        return 0;\\n    }\\n\\n    function depositVerify(\\n        address product,\\n        address depositor,\\n        uint256 depositAmount,\\n        uint256 tokenId,\\n        uint64 term,\\n        uint64[] calldata maturities\\n    ) external override returns (uint256) {\\n        product;\\n        depositor;\\n        depositAmount;\\n        tokenId;\\n        term;\\n        maturities;\\n\\n        return 0;\\n    }\\n\\n    function withdrawAllowed(\\n        address product,\\n        address payee,\\n        uint256 withdrawAmount,\\n        uint256 tokenId,\\n        uint64 term,\\n        uint64 maturity\\n    ) external override returns (uint256) {\\n        //reserve\\n        product;\\n        payee;\\n        withdrawAmount;\\n        tokenId;\\n        term;\\n        maturity;\\n\\n        require(!withdrawGuardianPaused[product], \\\"withdraw is paused\\\");\\n\\n        return 0;\\n    }\\n\\n    function withdrawVerify(\\n        address product,\\n        address payee,\\n        uint256 withdrawAmount,\\n        uint256 tokenId,\\n        uint64 term,\\n        uint64 maturity\\n    ) external override returns (uint256) {\\n        //reserve\\n        product;\\n        payee;\\n        withdrawAmount;\\n        tokenId;\\n        term;\\n        maturity;\\n\\n        return 0;\\n    }\\n\\n    function transferFromAllowed(\\n        address product,\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        uint256 targetTokenId,\\n        uint256 amount\\n    ) external override returns (uint256) {\\n        //reserve vars\\n        product;\\n        from;\\n        to;\\n        tokenId;\\n        amount;\\n        targetTokenId;\\n\\n        require(!transferGuardianPaused[product], \\\"transfer is paused\\\");\\n        return 0;\\n    }\\n\\n    function transferFromVerify(\\n        address product,\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        uint256 targetTokenId,\\n        uint256 amount\\n    ) external override returns (uint256) {\\n        //reserve vars\\n        product;\\n        from;\\n        to;\\n        tokenId;\\n        targetTokenId;\\n        amount;\\n\\n        return 0;\\n    }\\n\\n    function mergeAllowed(\\n        address product,\\n        address owner,\\n        uint256 tokenId,\\n        uint256 targetTokenId,\\n        uint256 amount\\n    ) external override returns (uint256) {\\n        //reserve vars\\n        product;\\n        owner;\\n        tokenId;\\n        targetTokenId;\\n        amount;\\n        return 0;\\n    }\\n\\n    function mergeVerify(\\n        address product,\\n        address owner,\\n        uint256 tokenId,\\n        uint256 targetTokenId,\\n        uint256 amount\\n    ) external override returns (uint256) {\\n        //reserve vars\\n        product;\\n        owner;\\n        tokenId;\\n        targetTokenId;\\n        amount;\\n        return 0;\\n    }\\n\\n    function splitAllowed(\\n        address product,\\n        address owner,\\n        uint256 tokenId,\\n        uint256 newTokenId,\\n        uint256 amount\\n    ) external override returns (uint256) {\\n        //reserve vars\\n        product;\\n        owner;\\n        tokenId;\\n        newTokenId;\\n        amount;\\n        return 0;\\n    }\\n\\n    function splitVerify(\\n        address product,\\n        address owner,\\n        uint256 tokenId,\\n        uint256 newTokenId,\\n        uint256 amount\\n    ) external override returns (uint256) {\\n        //reserve vars\\n        product;\\n        owner;\\n        tokenId;\\n        newTokenId;\\n        amount;\\n        return 0;\\n    }\\n\\n    function publishFixedPriceAllowed(\\n        address icToken,\\n        uint256 tokenId,\\n        address seller,\\n        address currency,\\n        uint256 min,\\n        uint256 max,\\n        uint256 startTime,\\n        bool useAllowList,\\n        uint256 price\\n    ) external override returns (uint256) {\\n        //reserve vars\\n        icToken;\\n        tokenId;\\n        seller;\\n        currency;\\n        min;\\n        max;\\n        startTime;\\n        useAllowList;\\n        price;\\n\\n        return 0;\\n    }\\n\\n    function publishDecliningPriceAllowed(\\n        address icToken,\\n        uint256 tokenId,\\n        address seller,\\n        address currency,\\n        uint256 min,\\n        uint256 max,\\n        uint256 startTime,\\n        bool useAllowList,\\n        uint256 highest,\\n        uint256 lowest,\\n        uint256 duration,\\n        uint256 interval\\n    ) external override returns (uint256) {\\n        //reserve vars\\n        icToken;\\n        tokenId;\\n        seller;\\n        currency;\\n        min;\\n        max;\\n        startTime;\\n        useAllowList;\\n        highest;\\n        lowest;\\n        duration;\\n        interval;\\n\\n        return 0;\\n    }\\n\\n    function publishVerify(\\n        address icToken,\\n        uint256 tokenId,\\n        address seller,\\n        address currency,\\n        uint256 saleId,\\n        uint256 units\\n    ) external override {\\n        //reserve vars\\n        icToken;\\n        tokenId;\\n        seller;\\n        currency;\\n        saleId;\\n        units;\\n    }\\n\\n    function buyAllowed(\\n        address icToken,\\n        uint256 tokenId,\\n        uint256 saleId,\\n        address buyer,\\n        address currency,\\n        uint256 buyAmount,\\n        uint256 buyUnits,\\n        uint256 price\\n    ) external override returns (uint256) {\\n        //reserve vars\\n        icToken;\\n        tokenId;\\n        saleId;\\n        buyer;\\n        currency;\\n        buyAmount;\\n        buyUnits;\\n        price;\\n\\n        return 0;\\n    }\\n\\n    function buyVerify(\\n        address icToken,\\n        uint256 tokenId,\\n        uint256 saleId,\\n        address buyer,\\n        address seller,\\n        uint256 amount,\\n        uint256 units,\\n        uint256 price,\\n        uint256 fee\\n    ) external override {\\n        //reserve\\n        icToken;\\n        tokenId;\\n        saleId;\\n        buyer;\\n        seller;\\n        amount;\\n        units;\\n        price;\\n        fee;\\n    }\\n\\n    function removeAllow(\\n        address icToken,\\n        uint256 tokenId,\\n        uint256 saleId,\\n        address seller\\n    ) external override returns (uint256) {\\n        //reserve vars\\n        icToken;\\n        tokenId;\\n        saleId;\\n        seller;\\n\\n        return 0;\\n    }\\n\\n    function needConvertUnsafeTransfer(\\n        address product,\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        uint256 units\\n    ) public view override returns (bool) {\\n        //reserve vars\\n        product;\\n        from;\\n        tokenId;\\n        units;\\n        return convertUnsafeTransferContracts[to];\\n    }\\n\\n    function needRejectUnsafeTransfer(\\n        address product,\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        uint256 units\\n    ) public view override returns (bool) {\\n        //reserve vars\\n        product;\\n        from;\\n        tokenId;\\n        units;\\n        return rejectUnsafeTransferContracts[to];\\n    }\\n\\n    function _setPendingAdmin(address newPendingAdmin) public {\\n        require(msg.sender == admin, \\\"only admin\\\");\\n\\n        // Save current value, if any, for inclusion in log\\n        address oldPendingAdmin = pendingAdmin;\\n\\n        // Store pendingAdmin with value newPendingAdmin\\n        pendingAdmin = newPendingAdmin;\\n\\n        // Emit NewPendingAdmin(oldPendingAdmin, newPendingAdmin)\\n        emit NewPendingAdmin(oldPendingAdmin, newPendingAdmin);\\n    }\\n\\n    function _acceptAdmin() public {\\n        require(\\n            msg.sender == pendingAdmin && msg.sender != address(0),\\n            \\\"only pending admin\\\"\\n        );\\n\\n        // Save current values for inclusion in log\\n        address oldAdmin = admin;\\n        address oldPendingAdmin = pendingAdmin;\\n\\n        // Store admin with value pendingAdmin\\n        admin = pendingAdmin;\\n\\n        // Clear the pending value\\n        pendingAdmin = address(0);\\n\\n        emit NewAdmin(oldAdmin, admin);\\n        emit NewPendingAdmin(oldPendingAdmin, pendingAdmin);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/interface/ISolver.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.7.6;\\n\\ninterface ISolver {\\n    event NewAdmin(address oldAdmin, address newAdmin);\\n    event NewPendingAdmin(address oldPendingAdmin, address newPendingAdmin);\\n\\n    function isSolver() external returns (bool);\\n\\n    function depositAllowed(\\n        address product,\\n        address depositor,\\n        uint64 term,\\n        uint256 depositAmount,\\n        uint64[] calldata maturities\\n    ) external returns (uint256);\\n\\n    function depositVerify(\\n        address product,\\n        address depositor,\\n        uint256 depositAmount,\\n        uint256 tokenId,\\n        uint64 term,\\n        uint64[] calldata maturities\\n    ) external returns (uint256);\\n\\n    function withdrawAllowed(\\n        address product,\\n        address payee,\\n        uint256 withdrawAmount,\\n        uint256 tokenId,\\n        uint64 term,\\n        uint64 maturity\\n    ) external returns (uint256);\\n\\n    function withdrawVerify(\\n        address product,\\n        address payee,\\n        uint256 withdrawAmount,\\n        uint256 tokenId,\\n        uint64 term,\\n        uint64 maturity\\n    ) external returns (uint256);\\n\\n    function transferFromAllowed(\\n        address product,\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        uint256 targetTokenId,\\n        uint256 amount\\n    ) external returns (uint256);\\n\\n    function transferFromVerify(\\n        address product,\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        uint256 targetTokenId,\\n        uint256 amount\\n    ) external returns (uint256);\\n\\n    function mergeAllowed(\\n        address product,\\n        address owner,\\n        uint256 tokenId,\\n        uint256 targetTokenId,\\n        uint256 amount\\n    ) external returns (uint256);\\n\\n    function mergeVerify(\\n        address product,\\n        address owner,\\n        uint256 tokenId,\\n        uint256 targetTokenId,\\n        uint256 amount\\n    ) external returns (uint256);\\n\\n    function splitAllowed(\\n        address product,\\n        address owner,\\n        uint256 tokenId,\\n        uint256 newTokenId,\\n        uint256 amount\\n    ) external returns (uint256);\\n\\n    function splitVerify(\\n        address product,\\n        address owner,\\n        uint256 tokenId,\\n        uint256 newTokenId,\\n        uint256 amount\\n    ) external returns (uint256);\\n\\n    function needConvertUnsafeTransfer(\\n        address product,\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        uint256 units\\n    ) external view returns (bool);\\n\\n    function needRejectUnsafeTransfer(\\n        address product,\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        uint256 units\\n    ) external view returns (bool);\\n\\n    function publishFixedPriceAllowed(\\n        address icToken,\\n        uint256 tokenId,\\n        address seller,\\n        address currency,\\n        uint256 min,\\n        uint256 max,\\n        uint256 startTime,\\n        bool useAllowList,\\n        uint256 price\\n    ) external returns (uint256);\\n\\n    function publishDecliningPriceAllowed(\\n        address icToken,\\n        uint256 tokenId,\\n        address seller,\\n        address currency,\\n        uint256 min,\\n        uint256 max,\\n        uint256 startTime,\\n        bool useAllowList,\\n        uint256 highest,\\n        uint256 lowest,\\n        uint256 duration,\\n        uint256 interval\\n    ) external returns (uint256);\\n\\n    function publishVerify(\\n        address icToken,\\n        uint256 tokenId,\\n        address seller,\\n        address currency,\\n        uint256 saleId,\\n        uint256 units\\n    ) external;\\n\\n    function buyAllowed(\\n        address icToken,\\n        uint256 tokenId,\\n        uint256 saleId,\\n        address buyer,\\n        address currency,\\n        uint256 buyAmount,\\n        uint256 buyUnits,\\n        uint256 price\\n    ) external returns (uint256);\\n\\n    function buyVerify(\\n        address icToken,\\n        uint256 tokenId,\\n        uint256 saleId,\\n        address buyer,\\n        address seller,\\n        uint256 amount,\\n        uint256 units,\\n        uint256 price,\\n        uint256 fee\\n    ) external;\\n\\n    function removeAllow(\\n        address icToken,\\n        uint256 tokenId,\\n        uint256 saleId,\\n        address seller\\n    ) external returns (uint256);\\n}\\n\"\r\n    }\r\n  }\r\n}}","ABI":"[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldAdmin\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"NewAdmin\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldPendingAdmin\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newPendingAdmin\",\"type\":\"address\"}],\"name\":\"NewPendingAdmin\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"_acceptAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"product\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"enable\",\"type\":\"bool\"}],\"name\":\"_setConvertUnsafeTransferContracts\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"product\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"enable\",\"type\":\"bool\"}],\"name\":\"_setDepositGuuardianPause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newPendingAdmin\",\"type\":\"address\"}],\"name\":\"_setPendingAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"product\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"enable\",\"type\":\"bool\"}],\"name\":\"_setRejectUnsafeTransferContracts\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"product\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"enable\",\"type\":\"bool\"}],\"name\":\"_setTransferGuuardianPause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"product\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"enable\",\"type\":\"bool\"}],\"name\":\"_setWithdrawGuuardianPause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"admin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"icToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"saleId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"currency\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"buyAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"buyUnits\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"buyAllowed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"icToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"saleId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"units\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"}],\"name\":\"buyVerify\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"convertUnsafeTransferContracts\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"product\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"depositor\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"term\",\"type\":\"uint64\"},{\"internalType\":\"uint256\",\"name\":\"depositAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint64[]\",\"name\":\"maturities\",\"type\":\"uint64[]\"}],\"name\":\"depositAllowed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"depositGuardianPaused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"product\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"depositor\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"depositAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint64\",\"name\":\"term\",\"type\":\"uint64\"},{\"internalType\":\"uint64[]\",\"name\":\"maturities\",\"type\":\"uint64[]\"}],\"name\":\"depositVerify\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isSolver\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"product\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"targetTokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"mergeAllowed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"product\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"targetTokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"mergeVerify\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"product\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"units\",\"type\":\"uint256\"}],\"name\":\"needConvertUnsafeTransfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"product\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"units\",\"type\":\"uint256\"}],\"name\":\"needRejectUnsafeTransfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pendingAdmin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"icToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"currency\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"min\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"max\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"startTime\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"useAllowList\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"highest\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lowest\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"interval\",\"type\":\"uint256\"}],\"name\":\"publishDecliningPriceAllowed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"icToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"currency\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"min\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"max\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"startTime\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"useAllowList\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"publishFixedPriceAllowed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"icToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"currency\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"saleId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"units\",\"type\":\"uint256\"}],\"name\":\"publishVerify\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"rejectUnsafeTransferContracts\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"icToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"saleId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"}],\"name\":\"removeAllow\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"product\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"newTokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"splitAllowed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"product\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"newTokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"splitVerify\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"product\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"targetTokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFromAllowed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"product\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"targetTokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFromVerify\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"transferGuardianPaused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"product\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"payee\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"withdrawAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint64\",\"name\":\"term\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"maturity\",\"type\":\"uint64\"}],\"name\":\"withdrawAllowed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"withdrawGuardianPaused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"product\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"payee\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"withdrawAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint64\",\"name\":\"term\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"maturity\",\"type\":\"uint64\"}],\"name\":\"withdrawVerify\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"Solver","CompilerVersion":"v0.7.6+commit.7338295f","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":""}]}