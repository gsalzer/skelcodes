{"status":"1","message":"OK","result":[{"SourceCode":"/// SPDX-License-Identifier: MIT\r\n/// Presented by LexDAO LLC\r\n/// @notice Minimal Certification NFT.\r\npragma solidity 0.8.4;\r\n\r\ncontract Certification {\r\n    address public governance;\r\n    uint256 public totalSupply;\r\n    string  public baseURI;\r\n    string  public details;\r\n    string  public name;\r\n    string  public symbol;\r\n    \r\n    mapping(address => uint256) public balanceOf;\r\n    mapping(uint256 => address) public ownerOf;\r\n    mapping(uint256 => string) public tokenURI;\r\n    mapping(bytes4 => bool) public supportsInterface; // ERC-165 \r\n    \r\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\r\n    event GovTokenURI(uint256 indexed tokenId, string tokenURI);\r\n    event TransferGovernance(address indexed governance);\r\n    event UpdateBaseURI(string baseURI);\r\n    \r\n    constructor(\r\n        address _governance,\r\n        string memory _baseURI, \r\n        string memory _details, \r\n        string memory _name, \r\n        string memory _symbol\r\n    ) {\r\n        governance = _governance;\r\n        baseURI = _baseURI;\r\n        details = _details; \r\n        name = _name; \r\n        symbol = _symbol;  \r\n        supportsInterface[0x80ac58cd] = true; // ERC-721 \r\n        supportsInterface[0x5b5e139f] = true; // METADATA\r\n    }\r\n\r\n    modifier onlyGovernance {\r\n        require(msg.sender == governance, '!governance');\r\n        _;\r\n    }\r\n    \r\n    function burn(address from, uint256 tokenId) external {\r\n        require(from == ownerOf[tokenId] || from == governance, '!owner||!governance');\r\n        balanceOf[from]--; \r\n        ownerOf[tokenId] = address(0);\r\n        tokenURI[tokenId] = \"\";\r\n        emit Transfer(from, address(0), tokenId); \r\n    }\r\n    \r\n    function mint(address to, string calldata customURI) external onlyGovernance { \r\n        string memory _tokenURI; \r\n        bytes(customURI).length > 0 ? _tokenURI = customURI : _tokenURI = baseURI;\r\n        totalSupply++;\r\n        uint256 tokenId = totalSupply;\r\n        balanceOf[to]++;\r\n        ownerOf[tokenId] = to;\r\n        tokenURI[tokenId] = _tokenURI;\r\n        emit Transfer(address(0), to, tokenId);\r\n    }\r\n\r\n    function govTokenURI(uint256 tokenId, string calldata _tokenURI) external onlyGovernance {\r\n        require(tokenId <= totalSupply, '!exist');\r\n        tokenURI[tokenId] = _tokenURI;\r\n        emit GovTokenURI(tokenId, _tokenURI);\r\n    }\r\n    \r\n    function govTransferFrom(address from, address to, uint256 tokenId) external onlyGovernance {\r\n        require(from == ownerOf[tokenId], 'from!=owner');\r\n        balanceOf[from]--; \r\n        balanceOf[to]++; \r\n        ownerOf[tokenId] = to;\r\n        emit Transfer(from, to, tokenId); \r\n    }\r\n\r\n    function transferGovernance(address _governance) external onlyGovernance {\r\n        governance = _governance;\r\n        emit TransferGovernance(_governance);\r\n    }\r\n    \r\n    function updateBaseURI(string calldata _baseURI) external onlyGovernance {\r\n        baseURI = _baseURI;\r\n        emit UpdateBaseURI(_baseURI);\r\n    }\r\n}\r\n\r\ncontract CertificationFactory {\r\n    event DeployCertification(Certification indexed certification, address indexed governance);\r\n    \r\n    function deployCertification(\r\n        address _governance, \r\n        string calldata _baseURI, \r\n        string calldata _details, \r\n        string calldata _name, \r\n        string calldata _symbol\r\n    ) external returns (Certification certification) {\r\n        certification = new Certification(\r\n            _governance, \r\n            _baseURI, \r\n            _details, \r\n            _name, \r\n            _symbol);\r\n        emit DeployCertification(certification, _governance);\r\n    }\r\n}","ABI":"[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"contract Certification\",\"name\":\"certification\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"governance\",\"type\":\"address\"}],\"name\":\"DeployCertification\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_governance\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"_baseURI\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_details\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_symbol\",\"type\":\"string\"}],\"name\":\"deployCertification\",\"outputs\":[{\"internalType\":\"contract Certification\",\"name\":\"certification\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"CertificationFactory","CompilerVersion":"v0.8.4+commit.c7e474f2","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://b8ca1182852abded58482d1cfc39be5e15288981951c00ae1f28bc54095e52a1"}]}