{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"/Users/fayexue/if-x-github/digital-reserve/contracts/DigitalReserve.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0-or-later\\n\\npragma solidity =0.6.12;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\\\";\\n\\nimport \\\"./interfaces/Uniswap/IUniswapV2Factory.sol\\\";\\nimport \\\"./interfaces/Uniswap/IUniswapV2Pair.sol\\\";\\nimport \\\"./interfaces/Uniswap/IUniswapV2Router02.sol\\\";\\nimport \\\"./interfaces/IDigitalReserve.sol\\\";\\n\\n/**\\n * @dev Implementation of Digital Reserve contract.\\n * Digital Reserve contract converts user's DRC into a set of SoV assets using the Uniswap router,\\n * and hold these assets for it's users.\\n * When users initiate a withdrawal action, the contract converts a share of the vault,\\n * that the user is requesting, to DRC and sends it back to their wallet.\\n */\\ncontract DigitalReserve is IDigitalReserve, ERC20, Ownable {\\n    using SafeMath for uint256;\\n\\n    struct StategyToken {\\n        address tokenAddress;\\n        uint8 tokenPercentage;\\n    }\\n\\n    /**\\n     * @dev Set Uniswap router address, DRC token address, DR name.\\n     */\\n    constructor(\\n        address _router,\\n        address _drcAddress,\\n        string memory _name,\\n        string memory _symbol\\n    ) public ERC20(_name, _symbol) {\\n        drcAddress = _drcAddress;\\n        uniswapRouter = IUniswapV2Router02(_router);\\n    }\\n\\n    StategyToken[] private _strategyTokens;\\n    uint8 private _feeFraction = 1;\\n    uint8 private _feeBase = 100;\\n    uint8 private constant _priceDecimals = 18;\\n\\n    address private drcAddress;\\n\\n    bool private depositEnabled = false;\\n\\n    IUniswapV2Router02 private immutable uniswapRouter;\\n\\n    /**\\n     * @dev See {IDigitalReserve-strategyTokenCount}.\\n     */\\n    function strategyTokenCount() public view override returns (uint256) {\\n        return _strategyTokens.length;\\n    }\\n\\n    /**\\n     * @dev See {IDigitalReserve-strategyTokens}.\\n     */\\n    function strategyTokens(uint8 index) external view override returns (address, uint8) {\\n        return (_strategyTokens[index].tokenAddress, _strategyTokens[index].tokenPercentage);\\n    }\\n\\n    /**\\n     * @dev See {IDigitalReserve-withdrawalFee}.\\n     */\\n    function withdrawalFee() external view override returns (uint8, uint8) {\\n        return (_feeFraction, _feeBase);\\n    }\\n\\n    /**\\n     * @dev See {IDigitalReserve-priceDecimals}.\\n     */\\n    function priceDecimals() external view override returns (uint8) {\\n        return _priceDecimals;\\n    }\\n\\n    /**\\n     * @dev See {IDigitalReserve-totalTokenStored}.\\n     */\\n    function totalTokenStored() public view override returns (uint256[] memory) {\\n        uint256[] memory amounts = new uint256[](strategyTokenCount());\\n        for (uint8 i = 0; i < strategyTokenCount(); i++) {\\n            amounts[i] = IERC20(_strategyTokens[i].tokenAddress).balanceOf(address(this));\\n        }\\n        return amounts;\\n    }\\n\\n    /**\\n     * @dev See {IDigitalReserve-getUserVaultInDrc}.\\n     */\\n    function getUserVaultInDrc(\\n        address user, \\n        uint8 percentage\\n    ) public view override returns (uint256, uint256, uint256) {\\n        uint256[] memory userStrategyTokens = _getStrategyTokensByPodAmount(balanceOf(user).mul(percentage).div(100));\\n        uint256 userVaultWorthInEth = _getEthAmountByStrategyTokensAmount(userStrategyTokens, true);\\n        uint256 userVaultWorthInEthAfterSwap = _getEthAmountByStrategyTokensAmount(userStrategyTokens, false);\\n\\n        uint256 drcAmountBeforeFees = _getTokenAmountByEthAmount(userVaultWorthInEth, drcAddress, true);\\n\\n        uint256 fees = userVaultWorthInEthAfterSwap.mul(_feeFraction).div(_feeBase + _feeFraction);\\n        uint256 drcAmountAfterFees = _getTokenAmountByEthAmount(userVaultWorthInEthAfterSwap.sub(fees), drcAddress, false);\\n\\n        return (drcAmountBeforeFees, drcAmountAfterFees, fees);\\n    }\\n\\n    /**\\n     * @dev See {IDigitalReserve-getProofOfDepositPrice}.\\n     */\\n    function getProofOfDepositPrice() public view override returns (uint256) {\\n        uint256 proofOfDepositPrice = 0;\\n        if (totalSupply() > 0) {\\n            proofOfDepositPrice = _getEthAmountByStrategyTokensAmount(totalTokenStored(), true).mul(1e18).div(totalSupply());\\n        }\\n        return proofOfDepositPrice;\\n    }\\n\\n    /**\\n     * @dev See {IDigitalReserve-depositPriceImpact}.\\n     */\\n    function depositPriceImpact(uint256 drcAmount) public view override returns (uint256) {\\n        uint256 ethWorth = _getEthAmountByTokenAmount(drcAmount, drcAddress, false);\\n        return _getEthToStrategyTokensPriceImpact(ethWorth);\\n    }\\n\\n    /**\\n     * @dev See {IDigitalReserve-depositDrc}.\\n     */\\n    function depositDrc(uint256 drcAmount, uint32 deadline) external override {\\n        require(strategyTokenCount() >= 1, \\\"Strategy hasn't been set.\\\");\\n        require(depositEnabled, \\\"Deposit is disabled.\\\");\\n        require(IERC20(drcAddress).allowance(msg.sender, address(this)) >= drcAmount, \\\"Contract is not allowed to spend user's DRC.\\\");\\n        require(IERC20(drcAddress).balanceOf(msg.sender) >= drcAmount, \\\"Attempted to deposit more than balance.\\\");\\n\\n        uint256 swapPriceImpact = depositPriceImpact(drcAmount);\\n        uint256 feeImpact = (_feeFraction * 10000) / (_feeBase + _feeFraction);\\n        require(swapPriceImpact <= 100 + feeImpact, \\\"Price impact on this swap is larger than 1% plus fee percentage.\\\");\\n\\n        SafeERC20.safeTransferFrom(IERC20(drcAddress), msg.sender, address(this), drcAmount);\\n\\n        // Get current unit price before adding tokens to vault\\n        uint256 currentPodUnitPrice = getProofOfDepositPrice();\\n\\n        uint256 ethConverted = _convertTokenToEth(drcAmount, drcAddress, deadline);\\n        _convertEthToStrategyTokens(ethConverted, deadline);\\n\\n        uint256 podToMint = 0;\\n        if (totalSupply() == 0) {\\n            podToMint = drcAmount.mul(1e15);\\n        } else {\\n            uint256 vaultTotalInEth = _getEthAmountByStrategyTokensAmount(totalTokenStored(), true);\\n            uint256 newPodTotal = vaultTotalInEth.mul(1e18).div(currentPodUnitPrice);\\n            podToMint = newPodTotal.sub(totalSupply());\\n        }\\n\\n        _mint(msg.sender, podToMint);\\n\\n        emit Deposit(msg.sender, drcAmount, podToMint, totalSupply(), totalTokenStored());\\n    }\\n\\n    /**\\n     * @dev See {IDigitalReserve-withdrawDrc}.\\n     */\\n    function withdrawDrc(uint256 drcAmount, uint32 deadline) external override {\\n        require(balanceOf(msg.sender) > 0, \\\"Vault balance is 0\\\");\\n        \\n        address[] memory path = new address[](2);\\n        path[0] = uniswapRouter.WETH();\\n        path[1] = drcAddress;\\n\\n        uint256 ethNeeded = uniswapRouter.getAmountsIn(drcAmount, path)[0];\\n        uint256 ethNeededPlusFee = ethNeeded.mul(_feeBase + _feeFraction).div(_feeBase);\\n\\n        uint256[] memory userStrategyTokens = _getStrategyTokensByPodAmount(balanceOf(msg.sender));\\n        uint256 userVaultWorth = _getEthAmountByStrategyTokensAmount(userStrategyTokens, false);\\n\\n        require(userVaultWorth >= ethNeededPlusFee, \\\"Attempt to withdraw more than user's holding.\\\");\\n\\n        uint256 amountFraction = ethNeededPlusFee.mul(1e10).div(userVaultWorth);\\n        uint256 podToBurn = balanceOf(msg.sender).mul(amountFraction).div(1e10);\\n\\n        _withdrawProofOfDeposit(podToBurn, deadline);\\n    }\\n\\n    /**\\n     * @dev See {IDigitalReserve-withdrawPercentage}.\\n     */\\n    function withdrawPercentage(uint8 percentage, uint32 deadline) external override {\\n        require(balanceOf(msg.sender) > 0, \\\"Vault balance is 0\\\");\\n        require(percentage <= 100, \\\"Attempt to withdraw more than 100% of the asset\\\");\\n\\n        uint256 podToBurn = balanceOf(msg.sender).mul(percentage).div(100);\\n        _withdrawProofOfDeposit(podToBurn, deadline);\\n    }\\n\\n    /**\\n     * @dev Enable or disable deposit.\\n     * @param status Deposit allowed or not\\n     * Disable deposit if it is to protect users' fund if there's any security issue or assist DR upgrade.\\n     */\\n    function changeDepositStatus(bool status) external onlyOwner {\\n        depositEnabled = status;\\n    }\\n\\n    /**\\n     * @dev Change withdrawal fee percentage.\\n     * If 1%, then input (1,100)\\n     * If 0.5%, then input (5,1000)\\n     * @param withdrawalFeeFraction_ Fraction of withdrawal fee based on withdrawalFeeBase_\\n     * @param withdrawalFeeBase_ Fraction of withdrawal fee base\\n     */\\n    function changeFee(uint8 withdrawalFeeFraction_, uint8 withdrawalFeeBase_) external onlyOwner {\\n        require(withdrawalFeeFraction_ <= withdrawalFeeBase_, \\\"Fee fraction exceeded base.\\\");\\n        uint8 percentage = (withdrawalFeeFraction_ * 100) / withdrawalFeeBase_;\\n        require(percentage <= 2, \\\"Attempt to set percentage higher than 2%.\\\"); // Requested by community\\n\\n        _feeFraction = withdrawalFeeFraction_;\\n        _feeBase = withdrawalFeeBase_;\\n    }\\n\\n    /**\\n     * @dev Set or change DR strategy tokens and allocations.\\n     * @param strategyTokens_ Array of strategy tokens.\\n     * @param tokenPercentage_ Array of strategy tokens' percentage allocations.\\n     * @param deadline Unix timestamp after which the transaction will revert.\\n     */\\n    function changeStrategy(\\n        address[] calldata strategyTokens_,\\n        uint8[] calldata tokenPercentage_,\\n        uint32 deadline\\n    ) external onlyOwner {\\n        require(strategyTokens_.length >= 1, \\\"Setting strategy to 0 tokens.\\\");\\n        require(strategyTokens_.length <= 5, \\\"Setting strategy to more than 5 tokens.\\\");\\n        require(strategyTokens_.length == tokenPercentage_.length, \\\"Strategy tokens length doesn't match token percentage length.\\\");\\n\\n        uint256 totalPercentage = 0;\\n        for (uint8 i = 0; i < tokenPercentage_.length; i++) {\\n            totalPercentage = totalPercentage.add(tokenPercentage_[i]);\\n        }\\n        require(totalPercentage == 100, \\\"Total token percentage is not 100%.\\\");\\n\\n        address[] memory oldTokens = new address[](strategyTokenCount());\\n        uint8[] memory oldPercentage = new uint8[](strategyTokenCount());\\n        for (uint8 i = 0; i < strategyTokenCount(); i++) {\\n            oldTokens[i] = _strategyTokens[i].tokenAddress;\\n            oldPercentage[i] = _strategyTokens[i].tokenPercentage;\\n        }\\n\\n        // Before mutate strategyTokens, convert current strategy tokens to ETH\\n        uint256 ethConverted = _convertStrategyTokensToEth(totalTokenStored(), deadline);\\n\\n        delete _strategyTokens;\\n        \\n        for (uint8 i = 0; i < strategyTokens_.length; i++) {\\n            _strategyTokens.push(StategyToken(strategyTokens_[i], tokenPercentage_[i]));\\n        }\\n\\n        _convertEthToStrategyTokens(ethConverted, deadline);\\n\\n        emit StrategyChange(oldTokens, oldPercentage, strategyTokens_, tokenPercentage_, totalTokenStored());\\n    }\\n\\n    /**\\n     * @dev Realigning the weighting of a portfolio of assets to the strategy allocation that is defined.\\n     * Only convert the amount that's necessory to convert to not be charged 0.3% uniswap fee for everything.\\n     * This in total saves 0.6% fee for majority of the assets.\\n     * @param deadline Unix timestamp after which the transaction will revert.\\n     */\\n    function rebalance(uint32 deadline) external onlyOwner {\\n        require(strategyTokenCount() > 0, \\\"Strategy hasn't been set\\\");\\n\\n        // Get each tokens worth and the total worth in ETH\\n        uint256 totalWorthInEth = 0;\\n        uint256[] memory tokensWorthInEth = new uint256[](strategyTokenCount());\\n\\n        for (uint8 i = 0; i < strategyTokenCount(); i++) {\\n            address currentToken = _strategyTokens[i].tokenAddress;\\n            uint256 tokenWorth = _getEthAmountByTokenAmount(IERC20(currentToken).balanceOf(address(this)), currentToken, true);\\n            totalWorthInEth = totalWorthInEth.add(tokenWorth);\\n            tokensWorthInEth[i] = tokenWorth;\\n        }\\n\\n        address[] memory strategyTokensArray = new address[](strategyTokenCount()); // Get percentages for event param\\n        uint8[] memory percentageArray = new uint8[](strategyTokenCount()); // Get percentages for event param\\n        uint256 totalInEthToConvert = 0; // Get total token worth in ETH needed to be converted\\n        uint256 totalEthConverted = 0; // Get total token worth in ETH needed to be converted\\n        uint256[] memory tokenInEthNeeded = new uint256[](strategyTokenCount()); // Get token worth need to be filled\\n\\n        for (uint8 i = 0; i < strategyTokenCount(); i++) {\\n            strategyTokensArray[i] =  _strategyTokens[i].tokenAddress;\\n            percentageArray[i] = _strategyTokens[i].tokenPercentage;\\n\\n            uint256 tokenShouldWorth = totalWorthInEth.mul(_strategyTokens[i].tokenPercentage).div(100);\\n\\n            if (tokensWorthInEth[i] <= tokenShouldWorth) {\\n                // If token worth less than should be, calculate the diff and store as needed\\n                tokenInEthNeeded[i] = tokenShouldWorth.sub(tokensWorthInEth[i]);\\n                totalInEthToConvert = totalInEthToConvert.add(tokenInEthNeeded[i]);\\n            } else {\\n                tokenInEthNeeded[i] = 0;\\n\\n                // If token worth more than should be, convert the overflowed amount to ETH\\n                uint256 tokenInEthOverflowed = tokensWorthInEth[i].sub(tokenShouldWorth);\\n                uint256 tokensToConvert = _getTokenAmountByEthAmount(tokenInEthOverflowed, _strategyTokens[i].tokenAddress, true);\\n                uint256 ethConverted = _convertTokenToEth(tokensToConvert, _strategyTokens[i].tokenAddress, deadline);\\n                totalEthConverted = totalEthConverted.add(ethConverted);\\n            }\\n            // Need the total value to help calculate how to distributed the converted ETH\\n        }\\n\\n        // Distribute newly converted ETH by portion of each token to be converted to, and convert to that token needed.\\n        // Note: totalEthConverted would be a bit smaller than totalInEthToConvert due to Uniswap fee.\\n        // Converting everything is another way of rebalancing, but Uniswap would take 0.6% fee on everything.\\n        // In this method we reach the closest number with the lowest possible swapping fee.\\n        if(totalInEthToConvert > 0) {\\n            for (uint8 i = 0; i < strategyTokenCount(); i++) {\\n                uint256 ethToConvert = totalEthConverted.mul(tokenInEthNeeded[i]).div(totalInEthToConvert);\\n                _convertEthToToken(ethToConvert, _strategyTokens[i].tokenAddress, deadline);\\n            }\\n        }\\n        emit Rebalance(strategyTokensArray, percentageArray, totalTokenStored());\\n    }\\n\\n    /**\\n     * @dev Withdraw DRC by DR-POD amount to burn.\\n     * @param podToBurn Amount of DR-POD to burn in exchange for DRC.\\n     * @param deadline Unix timestamp after which the transaction will revert.\\n     */\\n    function _withdrawProofOfDeposit(uint256 podToBurn, uint32 deadline) private {\\n        uint256[] memory strategyTokensToWithdraw = _getStrategyTokensByPodAmount(podToBurn);\\n\\n        _burn(msg.sender, podToBurn);\\n\\n        uint256 ethConverted = _convertStrategyTokensToEth(strategyTokensToWithdraw, deadline);\\n        uint256 fees = ethConverted.mul(_feeFraction).div(_feeBase + _feeFraction);\\n\\n        uint256 drcAmount = _convertEthToToken(ethConverted.sub(fees), drcAddress, deadline);\\n\\n        SafeERC20.safeTransfer(IERC20(drcAddress), msg.sender, drcAmount);\\n        SafeERC20.safeTransfer(IERC20(uniswapRouter.WETH()), owner(), fees);\\n\\n        emit Withdraw(msg.sender, drcAmount, fees, podToBurn, totalSupply(), totalTokenStored());\\n    }\\n\\n    /**\\n     * @dev Get ETH worth of a certain amount of a token.\\n     * @param _amount Amount of token to convert.\\n     * @param _fromAddress Address of token to convert from.\\n     * @param _toAddress Address of token to convert to.\\n     * @param excludeFees If uniswap fees is considered.\\n     */\\n    function _getAAmountByBAmount(\\n        uint256 _amount,\\n        address _fromAddress,\\n        address _toAddress,\\n        bool excludeFees\\n    ) private view returns (uint256) {\\n        address[] memory path = new address[](2);\\n        path[0] = _fromAddress;\\n        path[1] = _toAddress;\\n\\n        if (path[0] == path[1] || _amount == 0) {\\n            return _amount;\\n        }\\n\\n        uint256 amountOut = uniswapRouter.getAmountsOut(_amount, path)[1];\\n\\n        if (excludeFees) {\\n            return amountOut.mul(1000).div(997);\\n        } else {\\n            return amountOut;\\n        }\\n    }\\n\\n    /**\\n     * @dev Get the worth in a token of a certain amount of ETH.\\n     * @param _amount Amount of ETH to convert.\\n     * @param _tokenAddress Address of the token to convert to.\\n     * @param excludeFees If uniswap fees is considered.\\n     */\\n    function _getTokenAmountByEthAmount(\\n        uint256 _amount,\\n        address _tokenAddress,\\n        bool excludeFees\\n    ) private view returns (uint256) {\\n        return _getAAmountByBAmount(_amount, uniswapRouter.WETH(), _tokenAddress, excludeFees);\\n    }\\n\\n    /**\\n     * @dev Get ETH worth of a certain amount of a token.\\n     * @param _amount Amount of token to convert.\\n     * @param _tokenAddress Address of token to convert from.\\n     * @param excludeFees If uniswap fees is considered.\\n     */\\n    function _getEthAmountByTokenAmount(\\n        uint256 _amount,\\n        address _tokenAddress,\\n        bool excludeFees\\n    ) private view returns (uint256) {\\n        return _getAAmountByBAmount(_amount, _tokenAddress, uniswapRouter.WETH(), excludeFees);\\n    }\\n\\n    /**\\n     * @dev Get ETH worth of an array of strategy tokens.\\n     * @param strategyTokensBalance_ Array amounts of strategy tokens to convert.\\n     * @param excludeFees If uniswap fees is considered.\\n     */\\n    function _getEthAmountByStrategyTokensAmount(\\n        uint256[] memory strategyTokensBalance_, \\n        bool excludeFees\\n    ) private view returns (uint256) {\\n        uint256 amountOut = 0;\\n        address[] memory path = new address[](2);\\n        path[1] = uniswapRouter.WETH();\\n\\n        for (uint8 i = 0; i < strategyTokenCount(); i++) {\\n            address tokenAddress = _strategyTokens[i].tokenAddress;\\n            path[0] = tokenAddress;\\n            uint256 tokenAmount = strategyTokensBalance_[i];\\n            uint256 tokenAmountInEth = _getEthAmountByTokenAmount(tokenAmount, tokenAddress, excludeFees);\\n\\n            amountOut = amountOut.add(tokenAmountInEth);\\n        }\\n        return amountOut;\\n    }\\n\\n    /**\\n     * @dev Get DR-POD worth in an array of strategy tokens.\\n     * @param _amount Amount of DR-POD to convert.\\n     */\\n    function _getStrategyTokensByPodAmount(uint256 _amount) private view returns (uint256[] memory) {\\n        uint256[] memory strategyTokenAmount = new uint256[](strategyTokenCount());\\n\\n        uint256 podFraction = 0;\\n        if(totalSupply() > 0){\\n            podFraction = _amount.mul(1e10).div(totalSupply());\\n        }\\n        for (uint8 i = 0; i < strategyTokenCount(); i++) {\\n            strategyTokenAmount[i] = IERC20(_strategyTokens[i].tokenAddress).balanceOf(address(this)).mul(podFraction).div(1e10);\\n        }\\n        return strategyTokenAmount;\\n    }\\n\\n    /**\\n     * @dev Get price impact when swap ETH to a token via the Uniswap router.\\n     * @param _amount Amount of eth to swap.\\n     * @param _tokenAddress Address of token to swap to.\\n     */\\n    function _getEthToTokenPriceImpact(uint256 _amount, address _tokenAddress) private view returns (uint256) {\\n        if(_tokenAddress == uniswapRouter.WETH() || _amount == 0) {\\n            return 0;\\n        }\\n        address factory = uniswapRouter.factory();\\n        address pair = IUniswapV2Factory(factory).getPair(uniswapRouter.WETH(), _tokenAddress);\\n        (uint256 reserve0, uint256 reserve1, ) = IUniswapV2Pair(pair).getReserves();\\n        uint256 reserveEth = 0;\\n        if(IUniswapV2Pair(pair).token0() == uniswapRouter.WETH()) {\\n            reserveEth = reserve0;\\n        } else {\\n            reserveEth = reserve1;\\n        }\\n        return 10000 - reserveEth.mul(10000).div(reserveEth.add(_amount));\\n    }\\n\\n    /**\\n     * @dev Get price impact when swap ETH to strategy tokens via the Uniswap router.\\n     * @param _amount Amount of eth to swap.\\n     */\\n    function _getEthToStrategyTokensPriceImpact(uint256 _amount) private view returns (uint256) {\\n        uint256 priceImpact = 0;\\n        for (uint8 i = 0; i < strategyTokenCount(); i++) {\\n            uint8 tokenPercentage = _strategyTokens[i].tokenPercentage;\\n            uint256 amountToConvert = _amount.mul(tokenPercentage).div(100);\\n            uint256 tokenSwapPriceImpact = _getEthToTokenPriceImpact(amountToConvert, _strategyTokens[i].tokenAddress);\\n            priceImpact = priceImpact.add(tokenSwapPriceImpact.mul(tokenPercentage).div(100));\\n        }\\n        return priceImpact;\\n    }\\n\\n    /**\\n     * @dev Convert a token to WETH via the Uniswap router.\\n     * @param _amount Amount of tokens to swap.\\n     * @param _tokenAddress Address of token to swap.\\n     * @param deadline Unix timestamp after which the transaction will revert.\\n     */\\n    function _convertTokenToEth(\\n        uint256 _amount,\\n        address _tokenAddress,\\n        uint32 deadline\\n    ) private returns (uint256) {\\n        if (_tokenAddress == uniswapRouter.WETH() || _amount == 0) {\\n            return _amount;\\n        }\\n        address[] memory path = new address[](2);\\n        path[0] = _tokenAddress;\\n        path[1] = uniswapRouter.WETH();\\n\\n        SafeERC20.safeApprove(IERC20(path[0]), address(uniswapRouter), _amount);\\n        \\n        uint256 amountOut = uniswapRouter.getAmountsOut(_amount, path)[1];\\n        uint256 amountOutWithFeeTolerance = amountOut.mul(999).div(1000);\\n        uint256 ethBeforeSwap = IERC20(path[1]).balanceOf(address(this));\\n        uniswapRouter.swapExactTokensForTokensSupportingFeeOnTransferTokens(_amount, amountOutWithFeeTolerance, path, address(this), deadline);\\n        uint256 ethAfterSwap = IERC20(path[1]).balanceOf(address(this));\\n        return ethAfterSwap - ethBeforeSwap;\\n    }\\n\\n    /**\\n     * @dev Convert ETH to another token via the Uniswap router.\\n     * @param _amount Amount of WETH to swap.\\n     * @param _tokenAddress Address of token to swap to.\\n     * @param deadline Unix timestamp after which the transaction will revert.\\n     */\\n    function _convertEthToToken(\\n        uint256 _amount,\\n        address _tokenAddress,\\n        uint32 deadline\\n    ) private returns (uint256) {\\n        if (_tokenAddress == uniswapRouter.WETH() || _amount == 0) {\\n            return _amount;\\n        }\\n        address[] memory path = new address[](2);\\n        path[0] = uniswapRouter.WETH();\\n        path[1] = _tokenAddress;\\n        SafeERC20.safeApprove(IERC20(path[0]), address(uniswapRouter), _amount);\\n        uint256 amountOut = uniswapRouter.getAmountsOut(_amount, path)[1];\\n        uniswapRouter.swapExactTokensForTokens(_amount, amountOut, path, address(this), deadline);\\n        return amountOut;\\n    }\\n\\n    /**\\n     * @dev Convert ETH to strategy tokens of DR in their allocation percentage.\\n     * @param amount Amount of WETH to swap.\\n     * @param deadline Unix timestamp after which the transaction will revert.\\n     */\\n    function _convertEthToStrategyTokens(\\n        uint256 amount, \\n        uint32 deadline\\n    ) private returns (uint256[] memory) {\\n        for (uint8 i = 0; i < strategyTokenCount(); i++) {\\n            uint256 amountToConvert = amount.mul(_strategyTokens[i].tokenPercentage).div(100);\\n            _convertEthToToken(amountToConvert, _strategyTokens[i].tokenAddress, deadline);\\n        }\\n    }\\n\\n    /**\\n     * @dev Convert strategy tokens to WETH.\\n     * @param amountToConvert Array of the amounts of strategy tokens to swap.\\n     * @param deadline Unix timestamp after which the transaction will revert.\\n     */\\n    function _convertStrategyTokensToEth(\\n        uint256[] memory amountToConvert, \\n        uint32 deadline\\n    ) private returns (uint256) {\\n        uint256 ethConverted = 0;\\n        for (uint8 i = 0; i < strategyTokenCount(); i++) {\\n            uint256 amountConverted = _convertTokenToEth(amountToConvert[i], _strategyTokens[i].tokenAddress, deadline);\\n            ethConverted = ethConverted.add(amountConverted);\\n        }\\n        return ethConverted;\\n    }\\n}\\n\"\r\n    },\r\n    \"/Users/fayexue/if-x-github/digital-reserve/contracts/interfaces/IDigitalReserve.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0-or-later\\n\\npragma solidity =0.6.12;\\n\\n/**\\n* @dev Interface of Digital Reserve contract.\\n*/\\ninterface IDigitalReserve {\\n    /**\\n     * @dev Returns length of the portfolio asset tokens. \\n     * Can be used to get token addresses and percentage allocations.\\n     */\\n    function strategyTokenCount() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns a strategy token address. \\n     * @param index The index of a strategy token\\n     */\\n    function strategyTokens(uint8 index) external view returns (address, uint8);\\n\\n    /**\\n     * @dev Returns withdrawal withdrawal fee.\\n     * @return The first value is fraction, the second one is fraction base\\n     */\\n    function withdrawalFee() external view returns (uint8, uint8);\\n\\n    /**\\n     * @dev Returns Proof of Deposit price decimal.\\n     * Price should be displayed as `price / (10 ** priceDecimals)`.\\n     */\\n    function priceDecimals() external view returns (uint8);\\n\\n    /**\\n     * @dev Returns total strategy tokens stored in an array.\\n     * The output amount sequence is the strategyTokens() array sequence.\\n     */\\n    function totalTokenStored() external view returns (uint256[] memory);\\n\\n    /**\\n     * @dev Returns how much user's vault share in DRC amount.\\n     * @param user Address of a DR user\\n     * @param percentage Percentage of user holding\\n     * @return The first output is total worth in DRC, \\n     * second one is total DRC could withdraw (exclude fees), \\n     * and last output is fees in wei.\\n     */\\n    function getUserVaultInDrc(address user, uint8 percentage) external view returns (uint256, uint256, uint256);\\n\\n    /**\\n     * @dev Get deposit price impact\\n     * @param drcAmount DRC amount user want to deposit.\\n     * @return The price impact on the base of 10000, \\n     */\\n    function depositPriceImpact(uint256 drcAmount) external view returns (uint256);\\n\\n    /**\\n     * @dev Proof of Deposit net unit worth.\\n     */\\n    function getProofOfDepositPrice() external view returns (uint256);\\n\\n    /**\\n     * @dev Deposit DRC to DR.\\n     * @param drcAmount DRC amount user want to deposit.\\n     * @param deadline Unix timestamp after which the transaction will revert.\\n     */\\n    function depositDrc(uint256 drcAmount, uint32 deadline) external;\\n\\n    /**\\n     * @dev Withdraw DRC from DR.\\n     * @param drcAmount DRC amount user want to withdraw.\\n     * @param deadline Unix timestamp after which the transaction will revert.\\n     */\\n    function withdrawDrc(uint256 drcAmount, uint32 deadline) external;\\n\\n    /**\\n     * @dev Withdraw a percentage of holding from DR.\\n     * @param percentage Percentage of holding user want to withdraw.\\n     * @param deadline Unix timestamp after which the transaction will revert.\\n     */\\n    function withdrawPercentage(uint8 percentage, uint32 deadline) external;\\n\\n    /**\\n     * @dev Emit when strategy set or change function is called by owner.\\n     * @param oldTokens Pervious strategy's token addresses.\\n     * @param oldPercentage Pervious strategy's token allocation percentages.\\n     * @param newTokens New strategy's token addresses.\\n     * @param newPercentage New strategy's token allocation percentages.\\n     * @param tokensStored How much each token is stored.\\n     */\\n    event StrategyChange(\\n        address[] oldTokens, \\n        uint8[] oldPercentage, \\n        address[] newTokens, \\n        uint8[] newPercentage, \\n        uint256[] tokensStored\\n    );\\n    \\n    /**\\n     * @dev Emit each time a rebalance function is called by owner.\\n     * @param strategyTokens Strategy token addresses.\\n     * @param tokenPercentage Strategy token allocation percentages.\\n     * @param tokensStored How much each token is stored.\\n     */\\n    event Rebalance(\\n        address[] strategyTokens, \\n        uint8[] tokenPercentage, \\n        uint256[] tokensStored\\n    );\\n    \\n    /**\\n     * @dev Emit each time a deposit action happened.\\n     * @param user Address made the deposit.\\n     * @param amount DRC amount deposited.\\n     * @param podMinted New DR-POD minted.\\n     * @param podTotalSupply New DR-POD total supply.\\n     * @param tokensStored How much each token is stored.\\n     */\\n    event Deposit(\\n        address indexed user, \\n        uint256 amount, \\n        uint256 podMinted, \\n        uint256 podTotalSupply, \\n        uint256[] tokensStored\\n    );\\n    \\n    /**\\n     * @dev Emit each time a withdraw action happened.\\n     * @param user Address made the withdrawal.\\n     * @param amount DRC amount withdrawn.\\n     * @param fees Withdrawal fees charged in wei.\\n     * @param podBurned DR-POD burned.\\n     * @param podTotalSupply New DR-POD total supply.\\n     * @param tokensStored How much each token is stored.\\n     */\\n    event Withdraw(\\n        address indexed user, \\n        uint256 amount, \\n        uint256 fees, \\n        uint256 podBurned, \\n        uint256 podTotalSupply, \\n        uint256[] tokensStored\\n    );\\n}\\n\"\r\n    },\r\n    \"/Users/fayexue/if-x-github/digital-reserve/contracts/interfaces/Uniswap/IUniswapV2Factory.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0-or-later\\n\\npragma solidity =0.6.12;\\n\\ninterface IUniswapV2Factory {\\n    event PairCreated(address indexed token0, address indexed token1, address pair, uint);\\n\\n    function feeTo() external view returns (address);\\n    function feeToSetter() external view returns (address);\\n\\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\\n    function allPairs(uint) external view returns (address pair);\\n    function allPairsLength() external view returns (uint);\\n\\n    function createPair(address tokenA, address tokenB) external returns (address pair);\\n\\n    function setFeeTo(address) external;\\n    function setFeeToSetter(address) external;\\n}\\n\"\r\n    },\r\n    \"/Users/fayexue/if-x-github/digital-reserve/contracts/interfaces/Uniswap/IUniswapV2Pair.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0-or-later\\n\\npragma solidity =0.6.12;\\n\\ninterface IUniswapV2Pair {\\n    event Approval(address indexed owner, address indexed spender, uint value);\\n    event Transfer(address indexed from, address indexed to, uint value);\\n\\n    function name() external pure returns (string memory);\\n    function symbol() external pure returns (string memory);\\n    function decimals() external pure returns (uint8);\\n    function totalSupply() external view returns (uint);\\n    function balanceOf(address owner) external view returns (uint);\\n    function allowance(address owner, address spender) external view returns (uint);\\n\\n    function approve(address spender, uint value) external returns (bool);\\n    function transfer(address to, uint value) external returns (bool);\\n    function transferFrom(address from, address to, uint value) external returns (bool);\\n\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\\n    function nonces(address owner) external view returns (uint);\\n\\n    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\\n\\n    event Mint(address indexed sender, uint amount0, uint amount1);\\n    event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);\\n    event Swap(\\n        address indexed sender,\\n        uint amount0In,\\n        uint amount1In,\\n        uint amount0Out,\\n        uint amount1Out,\\n        address indexed to\\n    );\\n    event Sync(uint112 reserve0, uint112 reserve1);\\n\\n    function MINIMUM_LIQUIDITY() external pure returns (uint);\\n    function factory() external view returns (address);\\n    function token0() external view returns (address);\\n    function token1() external view returns (address);\\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\\n    function price0CumulativeLast() external view returns (uint);\\n    function price1CumulativeLast() external view returns (uint);\\n    function kLast() external view returns (uint);\\n\\n    function mint(address to) external returns (uint liquidity);\\n    function burn(address to) external returns (uint amount0, uint amount1);\\n    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\\n    function skim(address to) external;\\n    function sync() external;\\n\\n    function initialize(address, address) external;\\n}\\n\"\r\n    },\r\n    \"/Users/fayexue/if-x-github/digital-reserve/contracts/interfaces/Uniswap/IUniswapV2Router01.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0-or-later\\n\\npragma solidity =0.6.12;\\n\\ninterface IUniswapV2Router01 {\\n    function factory() external pure returns (address);\\n    function WETH() external pure returns (address);\\n\\n    function addLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint amountADesired,\\n        uint amountBDesired,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountA, uint amountB, uint liquidity);\\n    function addLiquidityETH(\\n        address token,\\n        uint amountTokenDesired,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\\n    function removeLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint liquidity,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountA, uint amountB);\\n    function removeLiquidityETH(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountToken, uint amountETH);\\n    function removeLiquidityWithPermit(\\n        address tokenA,\\n        address tokenB,\\n        uint liquidity,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\n    ) external returns (uint amountA, uint amountB);\\n    function removeLiquidityETHWithPermit(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\n    ) external returns (uint amountToken, uint amountETH);\\n    function swapExactTokensForTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external returns (uint[] memory amounts);\\n    function swapTokensForExactTokens(\\n        uint amountOut,\\n        uint amountInMax,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external returns (uint[] memory amounts);\\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\\n        external\\n        payable\\n        returns (uint[] memory amounts);\\n    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\\n        external\\n        returns (uint[] memory amounts);\\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\\n        external\\n        returns (uint[] memory amounts);\\n    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\\n        external\\n        payable\\n        returns (uint[] memory amounts);\\n\\n    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\\n    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\\n}\\n\"\r\n    },\r\n    \"/Users/fayexue/if-x-github/digital-reserve/contracts/interfaces/Uniswap/IUniswapV2Router02.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0-or-later\\n\\npragma solidity =0.6.12;\\n\\nimport './IUniswapV2Router01.sol';\\n\\ninterface IUniswapV2Router02 is IUniswapV2Router01 {\\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountETH);\\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\n    ) external returns (uint amountETH);\\n\\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external;\\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external payable;\\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor () internal {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/math/SafeMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        uint256 c = a + b;\\n        if (c < a) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b > a) return (false, 0);\\n        return (true, a - b);\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) return (true, 0);\\n        uint256 c = a * b;\\n        if (c / a != b) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a / b);\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a % b);\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b <= a, \\\"SafeMath: subtraction overflow\\\");\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0) return 0;\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: division by zero\\\");\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: modulo by zero\\\");\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/ERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"../../math/SafeMath.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin guidelines: functions revert instead\\n * of returning `false` on failure. This behavior is nonetheless conventional\\n * and does not conflict with the expectations of ERC20 applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20 {\\n    using SafeMath for uint256;\\n\\n    mapping (address => uint256) private _balances;\\n\\n    mapping (address => mapping (address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n    uint8 private _decimals;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}, initializes {decimals} with\\n     * a default value of 18.\\n     *\\n     * To select a different value for {decimals}, use {_setupDecimals}.\\n     *\\n     * All three of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor (string memory name_, string memory symbol_) public {\\n        _name = name_;\\n        _symbol = symbol_;\\n        _decimals = 18;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is\\n     * called.\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual returns (uint8) {\\n        return _decimals;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `recipient` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(_msgSender(), recipient, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        _approve(_msgSender(), spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` and `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``sender``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(sender, recipient, amount);\\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \\\"ERC20: transfer amount exceeds allowance\\\"));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \\\"ERC20: decreased allowance below zero\\\"));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\\n     *\\n     * This is internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` cannot be the zero address.\\n     * - `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     */\\n    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\\n        require(sender != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(recipient != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(sender, recipient, amount);\\n\\n        _balances[sender] = _balances[sender].sub(amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        _balances[recipient] = _balances[recipient].add(amount);\\n        emit Transfer(sender, recipient, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply = _totalSupply.add(amount);\\n        _balances[account] = _balances[account].add(amount);\\n        emit Transfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        _balances[account] = _balances[account].sub(amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        _totalSupply = _totalSupply.sub(amount);\\n        emit Transfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Sets {decimals} to a value other than the default one of 18.\\n     *\\n     * WARNING: This function should only be called from the constructor. Most\\n     * applications that interact with token contracts will not expect\\n     * {decimals} to ever change, and may work incorrectly if it does.\\n     */\\n    function _setupDecimals(uint8 decimals_) internal virtual {\\n        _decimals = decimals_;\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be to transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual { }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"../../math/SafeMath.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using SafeMath for uint256;\\n    using Address for address;\\n\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        // solhint-disable-next-line max-line-length\\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \\\"SafeERC20: decreased allowance below zero\\\");\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) { // Return data is optional\\n            // solhint-disable-next-line max-line-length\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.2 <0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/ReentrancyGuard.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor () internal {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and make it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"remappings\": [],\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 999999\r\n    },\r\n    \"evmVersion\": \"istanbul\",\r\n    \"libraries\": {},\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_router\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_drcAddress\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_symbol\",\"type\":\"string\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"podMinted\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"podTotalSupply\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"tokensStored\",\"type\":\"uint256[]\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"strategyTokens\",\"type\":\"address[]\"},{\"indexed\":false,\"internalType\":\"uint8[]\",\"name\":\"tokenPercentage\",\"type\":\"uint8[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"tokensStored\",\"type\":\"uint256[]\"}],\"name\":\"Rebalance\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"oldTokens\",\"type\":\"address[]\"},{\"indexed\":false,\"internalType\":\"uint8[]\",\"name\":\"oldPercentage\",\"type\":\"uint8[]\"},{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"newTokens\",\"type\":\"address[]\"},{\"indexed\":false,\"internalType\":\"uint8[]\",\"name\":\"newPercentage\",\"type\":\"uint8[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"tokensStored\",\"type\":\"uint256[]\"}],\"name\":\"StrategyChange\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"fees\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"podBurned\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"podTotalSupply\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"tokensStored\",\"type\":\"uint256[]\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"status\",\"type\":\"bool\"}],\"name\":\"changeDepositStatus\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"withdrawalFeeFraction_\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"withdrawalFeeBase_\",\"type\":\"uint8\"}],\"name\":\"changeFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"strategyTokens_\",\"type\":\"address[]\"},{\"internalType\":\"uint8[]\",\"name\":\"tokenPercentage_\",\"type\":\"uint8[]\"},{\"internalType\":\"uint32\",\"name\":\"deadline\",\"type\":\"uint32\"}],\"name\":\"changeStrategy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"drcAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"deadline\",\"type\":\"uint32\"}],\"name\":\"depositDrc\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"drcAmount\",\"type\":\"uint256\"}],\"name\":\"depositPriceImpact\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getProofOfDepositPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"percentage\",\"type\":\"uint8\"}],\"name\":\"getUserVaultInDrc\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"priceDecimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"deadline\",\"type\":\"uint32\"}],\"name\":\"rebalance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"strategyTokenCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"index\",\"type\":\"uint8\"}],\"name\":\"strategyTokens\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalTokenStored\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"drcAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"deadline\",\"type\":\"uint32\"}],\"name\":\"withdrawDrc\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"percentage\",\"type\":\"uint8\"},{\"internalType\":\"uint32\",\"name\":\"deadline\",\"type\":\"uint32\"}],\"name\":\"withdrawPercentage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawalFee\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"DigitalReserve","CompilerVersion":"v0.6.12+commit.27d51765","OptimizationUsed":"1","Runs":"999999","ConstructorArguments":"0000000000000000000000007a250d5630b4cf539739df2c5dacb4c659f2488d000000000000000000000000a150db9b1fa65b44799d4dd949d922c0a33ee606000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000c0000000000000000000000000000000000000000000000000000000000000000f4469676974616c20526573657276650000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000944522d504f442d53330000000000000000000000000000000000000000000000","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}