{"status":"1","message":"OK","result":[{"SourceCode":"{\"IERC1155.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity 0.7.4;\\n\\n\\ninterface IERC1155 {\\n\\n  /****************************************|\\n  |                 Events                 |\\n  |_______________________________________*/\\n\\n  /**\\n   * @dev Either TransferSingle or TransferBatch MUST emit when tokens are transferred, including zero amount transfers as well as minting or burning\\n   *   Operator MUST be msg.sender\\n   *   When minting/creating tokens, the `_from` field MUST be set to `0x0`\\n   *   When burning/destroying tokens, the `_to` field MUST be set to `0x0`\\n   *   The total amount transferred from address 0x0 minus the total amount transferred to 0x0 may be used by clients and exchanges to be added to the \\\"circulating supply\\\" for a given token ID\\n   *   To broadcast the existence of a token ID with no initial balance, the contract SHOULD emit the TransferSingle event from `0x0` to `0x0`, with the token creator as `_operator`, and a `_amount` of 0\\n   */\\n  event TransferSingle(address indexed _operator, address indexed _from, address indexed _to, uint256 _id, uint256 _amount);\\n\\n  /**\\n   * @dev Either TransferSingle or TransferBatch MUST emit when tokens are transferred, including zero amount transfers as well as minting or burning\\n   *   Operator MUST be msg.sender\\n   *   When minting/creating tokens, the `_from` field MUST be set to `0x0`\\n   *   When burning/destroying tokens, the `_to` field MUST be set to `0x0`\\n   *   The total amount transferred from address 0x0 minus the total amount transferred to 0x0 may be used by clients and exchanges to be added to the \\\"circulating supply\\\" for a given token ID\\n   *   To broadcast the existence of multiple token IDs with no initial balance, this SHOULD emit the TransferBatch event from `0x0` to `0x0`, with the token creator as `_operator`, and a `_amount` of 0\\n   */\\n  event TransferBatch(address indexed _operator, address indexed _from, address indexed _to, uint256[] _ids, uint256[] _amounts);\\n\\n  /**\\n   * @dev MUST emit when an approval is updated\\n   */\\n  event ApprovalForAll(address indexed _owner, address indexed _operator, bool _approved);\\n\\n\\n  /****************************************|\\n  |                Functions               |\\n  |_______________________________________*/\\n\\n  /**\\n    * @notice Transfers amount of an _id from the _from address to the _to address specified\\n    * @dev MUST emit TransferSingle event on success\\n    * Caller must be approved to manage the _from account\\u0027s tokens (see isApprovedForAll)\\n    * MUST throw if `_to` is the zero address\\n    * MUST throw if balance of sender for token `_id` is lower than the `_amount` sent\\n    * MUST throw on any other error\\n    * When transfer is complete, this function MUST check if `_to` is a smart contract (code size \\u003e 0). If so, it MUST call `onERC1155Received` on `_to` and revert if the return amount is not `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))`\\n    * @param _from    Source address\\n    * @param _to      Target address\\n    * @param _id      ID of the token type\\n    * @param _amount  Transfered amount\\n    * @param _data    Additional data with no specified format, sent in call to `_to`\\n    */\\n  function safeTransferFrom(address _from, address _to, uint256 _id, uint256 _amount, bytes calldata _data) external;\\n\\n  /**\\n    * @notice Send multiple types of Tokens from the _from address to the _to address (with safety call)\\n    * @dev MUST emit TransferBatch event on success\\n    * Caller must be approved to manage the _from account\\u0027s tokens (see isApprovedForAll)\\n    * MUST throw if `_to` is the zero address\\n    * MUST throw if length of `_ids` is not the same as length of `_amounts`\\n    * MUST throw if any of the balance of sender for token `_ids` is lower than the respective `_amounts` sent\\n    * MUST throw on any other error\\n    * When transfer is complete, this function MUST check if `_to` is a smart contract (code size \\u003e 0). If so, it MUST call `onERC1155BatchReceived` on `_to` and revert if the return amount is not `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))`\\n    * Transfers and events MUST occur in the array order they were submitted (_ids[0] before _ids[1], etc)\\n    * @param _from     Source addresses\\n    * @param _to       Target addresses\\n    * @param _ids      IDs of each token type\\n    * @param _amounts  Transfer amounts per token type\\n    * @param _data     Additional data with no specified format, sent in call to `_to`\\n  */\\n  function safeBatchTransferFrom(address _from, address _to, uint256[] calldata _ids, uint256[] calldata _amounts, bytes calldata _data) external;\\n\\n  /**\\n   * @notice Get the balance of an account\\u0027s Tokens\\n   * @param _owner  The address of the token holder\\n   * @param _id     ID of the Token\\n   * @return        The _owner\\u0027s balance of the Token type requested\\n   */\\n  function balanceOf(address _owner, uint256 _id) external view returns (uint256);\\n\\n  /**\\n   * @notice Get the balance of multiple account/token pairs\\n   * @param _owners The addresses of the token holders\\n   * @param _ids    ID of the Tokens\\n   * @return        The _owner\\u0027s balance of the Token types requested (i.e. balance for each (owner, id) pair)\\n   */\\n  function balanceOfBatch(address[] calldata _owners, uint256[] calldata _ids) external view returns (uint256[] memory);\\n\\n  /**\\n   * @notice Enable or disable approval for a third party (\\\"operator\\\") to manage all of caller\\u0027s tokens\\n   * @dev MUST emit the ApprovalForAll event on success\\n   * @param _operator  Address to add to the set of authorized operators\\n   * @param _approved  True if the operator is approved, false to revoke approval\\n   */\\n  function setApprovalForAll(address _operator, bool _approved) external;\\n\\n  /**\\n   * @notice Queries the approval status of an operator for a given owner\\n   * @param _owner     The owner of the Tokens\\n   * @param _operator  Address of authorized operator\\n   * @return isOperator True if the operator is approved, false if not\\n   */\\n  function isApprovedForAll(address _owner, address _operator) external view returns (bool isOperator);\\n}\\n\"},\"IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity \\u003e=0.6.0 \\u003c0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"},\"IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity \\u003e=0.6.0 \\u003c0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller\\u0027s account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller\\u0027s tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender\\u0027s allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller\\u0027s\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"},\"IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity \\u003e=0.6.2 \\u003c0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``\\u0027s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    /**\\n      * @dev Safely transfers `tokenId` token from `from` to `to`.\\n      *\\n      * Requirements:\\n      *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n      * - `tokenId` token must exist and be owned by `from`.\\n      * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n      * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n      *\\n      * Emits a {Transfer} event.\\n      */\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\\n}\\n\"},\"PortionExchange.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.7.4;\\n\\nimport \\\"./IERC721.sol\\\";\\nimport \\\"./IERC20.sol\\\";\\nimport \\u0027./IERC1155.sol\\u0027;\\n\\ncontract PortionExchange {\\n\\n\\tstring name = \\\"PortionExchange\\\";\\n\\taddress signer;\\n\\tIERC721 public artTokensContract;\\n\\tIERC1155 public artTokens1155Contract;\\n\\tIERC20 public potionTokensContract;\\n\\tuint nonceCounter = 0;\\n\\n\\tmapping(uint =\\u003e uint) public prices;\\n\\n\\tstruct Erc1155Offer {\\n\\t\\tuint tokenId;\\n\\t\\tuint quantity;\\n\\t\\tuint pricePerToken;\\n\\t\\taddress seller;\\n\\t}\\n\\tErc1155Offer[] public erc1155Offers;\\n\\n\\tevent TokenListed (uint indexed _tokenId, uint indexed _price, address indexed _owner);\\n\\tevent TokenSold (uint indexed _tokenId, uint indexed _price, string indexed _currency);\\n\\tevent TokenDeleted (uint indexed _tokenId, address indexed _previousOwner, uint indexed _previousPrice);\\n\\tevent TokenOwned (uint indexed _tokenId, address indexed _previousOwner, address indexed _newOwner);\\n\\n\\tevent Token1155Listed (uint _erc1155OfferId, uint _tokenId, uint _quantity, uint _price, address _owner);\\n\\tevent Token1155Deleted (\\n\\t\\tuint _erc1155OfferId,\\n\\t\\tuint _tokenId,\\n\\t\\tuint _previousQuantity,\\n\\t\\tuint _previousPrice,\\n\\t\\taddress _previousOwner\\n\\t);\\n\\tevent Token1155Sold(\\n\\t\\tuint _erc1155OfferId,\\n\\t\\tuint _tokenId,\\n\\t\\tuint _quantity,\\n\\t\\tuint _price,\\n\\t\\tstring _currency,\\n\\t\\taddress _previousOwner,\\n\\t\\taddress _newOwner\\n\\t);\\n\\tconstructor (address _artTokensAddress, address _artToken1155Address, address _portionTokensAddress) public {\\n\\t\\tsigner = msg.sender;\\n\\t\\tartTokensContract = IERC721(_artTokensAddress);\\n\\t\\tartTokens1155Contract = IERC1155(_artToken1155Address);\\n\\t\\tpotionTokensContract = IERC20(_portionTokensAddress);\\n\\t\\trequire (_artTokensAddress != address(0), \\\"_artTokensAddress is null\\\");\\n\\t\\trequire (_artToken1155Address != address(0), \\\"_artToken1155Address is null\\\");\\n\\t\\trequire (_portionTokensAddress != address(0), \\\"_portionTokensAddress is null\\\");\\n\\t}\\n\\n\\tfunction listToken(uint _tokenId, uint _price) external {\\n\\t\\taddress owner = artTokensContract.ownerOf(_tokenId);\\n\\t\\trequire(owner == msg.sender, \\u0027message sender is not the owner\\u0027);\\n\\t\\tprices[_tokenId] = _price;\\n\\t\\temit TokenListed(_tokenId, _price, msg.sender);\\n\\t}\\n\\n\\tfunction listToken1155(uint _tokenId, uint _quantity, uint _price) external returns (uint) {\\n\\t\\trequire(artTokens1155Contract.balanceOf(msg.sender, _tokenId) \\u003e= _quantity, \\u0027Not enough balance\\u0027);\\n\\t\\tuint tokenListed = 0;\\n\\t\\tfor (uint i = 0; i \\u003c erc1155Offers.length; i++) {\\n\\t\\t\\tif (erc1155Offers[i].seller == msg.sender \\u0026\\u0026 erc1155Offers[i].tokenId == _tokenId) {\\n\\t\\t\\t\\ttokenListed += erc1155Offers[i].quantity;\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\trequire(artTokens1155Contract.balanceOf(msg.sender, _tokenId) \\u003e= _quantity + tokenListed, \\u0027Not enough balance\\u0027);\\n\\n\\t\\terc1155Offers.push(Erc1155Offer({\\n\\t\\t\\ttokenId: _tokenId,\\n\\t\\t\\tquantity: _quantity,\\n\\t\\t\\tpricePerToken: _price,\\n\\t\\t\\tseller: msg.sender\\n\\t\\t}));\\n\\t\\tuint offerId = erc1155Offers.length - 1;\\n\\n\\t\\temit Token1155Listed(offerId, _tokenId, _quantity, _price, msg.sender);\\n\\n\\t\\treturn offerId;\\n\\t}\\n\\n\\tfunction removeListToken(uint _tokenId) external {\\n\\t\\taddress owner = artTokensContract.ownerOf(_tokenId);\\n\\t\\trequire(owner == msg.sender, \\u0027message sender is not the owner\\u0027);\\n\\t\\tdeleteToken(_tokenId, owner);\\n\\t}\\n\\n\\tfunction removeListToken1155(uint _offerId) external {\\n\\t\\trequire(erc1155Offers[_offerId].seller == msg.sender, \\u0027message sender is not the owner\\u0027);\\n\\t\\tdeleteToken1155(_offerId);\\n\\t}\\n\\n\\tfunction isValidBuyOrder(uint _tokenId, uint _askPrice) private view returns (bool) {\\n\\t\\trequire(prices[_tokenId] \\u003e 0, \\\"invalid price, token is not for sale\\\");\\n\\t\\treturn (_askPrice \\u003e= prices[_tokenId]);\\n\\t}\\n\\n\\tfunction isValidBuyOrder1155(uint _offerId, uint _amount, uint _askPrice) private view returns (bool) {\\n\\t\\trequire(erc1155Offers[_offerId].pricePerToken \\u003e 0, \\\"invalid price, token is not for sale\\\");\\n\\t\\treturn (_askPrice \\u003e= _amount * erc1155Offers[_offerId].pricePerToken);\\n\\t}\\n\\n\\tfunction deleteToken(uint _tokenId, address owner) private {\\n\\t\\temit TokenDeleted(_tokenId, owner, prices[_tokenId]);\\n\\t\\tdelete prices[_tokenId];\\n\\t}\\n\\n\\tfunction deleteToken1155(uint _offerId) private {\\n\\t\\temit Token1155Deleted(_offerId, erc1155Offers[_offerId].tokenId, erc1155Offers[_offerId].quantity, erc1155Offers[_offerId].pricePerToken, erc1155Offers[_offerId].seller);\\n\\t\\tdelete erc1155Offers[_offerId];\\n\\t}\\n\\n\\tfunction listingPrice(uint _tokenId) external view returns (uint) {\\n\\t\\treturn prices[_tokenId];\\n\\t}\\n\\n\\tfunction listing1155Price(uint _offerId) external view returns (uint) {\\n\\t\\treturn erc1155Offers[_offerId].pricePerToken;\\n\\t}\\n\\n\\tfunction buyToken(uint _tokenId, uint _nonce) external payable {\\n\\t\\tnonceCounter++;\\n\\t\\trequire(nonceCounter == _nonce, \\\"invalid nonce\\\");\\n\\n\\t\\trequire(isValidBuyOrder(_tokenId, msg.value), \\\"invalid price\\\");\\n\\n\\t\\taddress owner = artTokensContract.ownerOf(_tokenId);\\n\\t\\taddress payable payableOwner = address(uint160(owner));\\n\\t\\tpayableOwner.transfer(msg.value);\\n\\t\\tartTokensContract.safeTransferFrom(owner, msg.sender, _tokenId);\\n\\t\\temit TokenSold(_tokenId, msg.value, \\\"ETH\\\");\\n\\t\\temit TokenOwned(_tokenId, owner, msg.sender);\\n\\t\\tdeleteToken(_tokenId, owner);\\n\\t}\\n\\n\\tfunction buyToken1155(uint _offerId, uint _quantity, uint _nonce) external payable {\\n\\t\\tnonceCounter++;\\n\\t\\trequire(nonceCounter == _nonce, \\\"invalid nonce\\\");\\n\\t\\trequire(_quantity \\u003c= erc1155Offers[_offerId].quantity, \\\"invalid quantity\\\");\\n\\n\\t\\trequire(isValidBuyOrder1155(_offerId, _quantity, msg.value), \\\"invalid price\\\");\\n\\n\\t\\taddress owner = erc1155Offers[_offerId].seller;\\n\\t\\taddress payable payableOwner = address(uint160(owner));\\n\\t\\tpayableOwner.transfer(msg.value);\\n\\t\\tartTokens1155Contract.safeTransferFrom(owner, msg.sender, erc1155Offers[_offerId].tokenId, _quantity, \\\"\\\");\\n\\t\\temit Token1155Sold(_offerId,\\n\\t\\t\\terc1155Offers[_offerId].tokenId,\\n\\t\\t\\t_quantity,\\n\\t\\t\\terc1155Offers[_offerId].pricePerToken,\\n\\t\\t\\t\\\"ETH\\\",\\n\\t\\t\\towner,\\n\\t\\t\\tmsg.sender\\n\\t\\t);\\n\\t\\tif (erc1155Offers[_offerId].quantity == _quantity) {\\n\\t\\t\\tdeleteToken1155(_offerId);\\n\\t\\t} else {\\n\\t\\t\\terc1155Offers[_offerId].quantity -= _quantity;\\n\\t\\t}\\n\\t}\\n\\n\\tfunction buyTokenForPRT(uint _tokenId, uint256 _amountOfPRT, uint256 _nonce, bytes calldata _signature) external {\\n\\t\\tnonceCounter++;\\n\\t\\trequire(nonceCounter == _nonce, \\\"invalid nonce\\\");\\n\\n\\t\\tbytes32 hash = keccak256(abi.encodePacked(_tokenId, _amountOfPRT, _nonce));\\n\\t\\tbytes32 ethSignedMessageHash = keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n32\\\", hash));\\n\\t\\taddress recoveredSignerAddress = recoverSignerAddress(ethSignedMessageHash, _signature);\\n\\t\\trequire(recoveredSignerAddress == signer, \\\"invalid secret signer\\\"); // to be sure that the price in PRT is correct\\n\\n\\t\\trequire(prices[_tokenId] \\u003e 0, \\\"invalid price, token is not for sale\\\");\\n\\n\\t\\taddress owner = artTokensContract.ownerOf(_tokenId);\\n\\t\\tpotionTokensContract.transferFrom(msg.sender, owner, _amountOfPRT);\\n\\t\\tartTokensContract.safeTransferFrom(owner, msg.sender, _tokenId);\\n\\t\\temit TokenSold(_tokenId, _amountOfPRT, \\\"PRT\\\");\\n\\t\\temit TokenOwned(_tokenId, owner, msg.sender);\\n\\t\\tdeleteToken(_tokenId, owner);\\n\\t}\\n\\n\\tfunction buyArtwork1155ForPRT(uint256 _offerId, uint256 _quantity, uint256 _amountOfPRT, uint256 _nonce, bytes calldata _signature) external {\\n\\t\\tnonceCounter++;\\n\\t\\trequire(nonceCounter == _nonce, \\\"invalid nonce\\\");\\n\\n\\t\\tbytes32 hash = keccak256(abi.encodePacked(_offerId, _quantity, _amountOfPRT, _nonce));\\n\\t\\tbytes32 ethSignedMessageHash = keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n32\\\", hash));\\n\\t\\taddress recoveredSignerAddress = recoverSignerAddress(ethSignedMessageHash, _signature);\\n\\t\\trequire(recoveredSignerAddress == signer, \\\"invalid secret signer\\\"); // to be sure that the price in PRT is correct\\n\\n\\t\\trequire(erc1155Offers[_offerId].pricePerToken \\u003e 0, \\\"invalid price, token is not for sale\\\");\\n\\n\\t\\taddress owner = erc1155Offers[_offerId].seller;\\n\\t\\tpotionTokensContract.transferFrom(msg.sender, owner, _amountOfPRT * _quantity);\\n\\t\\tartTokens1155Contract.safeTransferFrom(owner, msg.sender, erc1155Offers[_offerId].tokenId, _quantity, \\\"\\\");\\n\\t\\temit Token1155Sold(_offerId,\\n\\t\\t\\terc1155Offers[_offerId].tokenId,\\n\\t\\t\\t_quantity,\\n\\t\\t\\t_amountOfPRT,\\n\\t\\t\\t\\\"PRT\\\",\\n\\t\\t\\towner,\\n\\t\\t\\tmsg.sender\\n\\t\\t);\\n\\t\\tif (erc1155Offers[_offerId].quantity == _quantity) {\\n\\t\\t\\tdeleteToken1155(_offerId);\\n\\t\\t} else {\\n\\t\\t\\terc1155Offers[_offerId].quantity -= _quantity;\\n\\t\\t}\\n\\t}\\n\\n\\tfunction recoverSignerAddress(bytes32 _hash, bytes memory _signature) public pure returns (address) {\\n\\t\\trequire(_signature.length == 65, \\\"invalid signature length\\\");\\n\\n\\t\\tbytes32 r;\\n\\t\\tbytes32 s;\\n\\t\\tuint8 v;\\n\\n\\t\\tassembly {\\n\\t\\t\\tr := mload(add(_signature, 32))\\n\\t\\t\\ts := mload(add(_signature, 64))\\n\\t\\t\\tv := and(mload(add(_signature, 65)), 255)\\n\\t\\t}\\n\\n\\t\\tif (v \\u003c 27) {\\n\\t\\t\\tv += 27;\\n\\t\\t}\\n\\n\\t\\tif (v != 27 \\u0026\\u0026 v != 28) {\\n\\t\\t\\treturn address(0);\\n\\t\\t}\\n\\n\\t\\treturn ecrecover(_hash, v, r, s);\\n\\t}\\n\\n\\tfunction getName() external view returns (string memory) {\\n\\t\\treturn name;\\n\\t}\\n\\n\\tfunction getSigner() external view returns (address) {\\n\\t\\treturn signer;\\n\\t}\\n\\n\\tfunction setSigner(address _newSigner) external {\\n\\t\\trequire(msg.sender == signer, \\\"not enough permissions to change the signer\\\");\\n\\t\\tsigner = _newSigner;\\n\\t}\\n\\n\\tfunction getNextNonce() external view returns (uint) {\\n\\t\\treturn nonceCounter + 1;\\n\\t}\\n\\n\\tfunction getArtwork1155Owner(uint _offerId) external view returns (address) {\\n\\t\\treturn erc1155Offers[_offerId].seller;\\n\\t}\\n}\\n\"}}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_artTokensAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_artToken1155Address\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_portionTokensAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_erc1155OfferId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_previousQuantity\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_previousPrice\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_previousOwner\",\"type\":\"address\"}],\"name\":\"Token1155Deleted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_erc1155OfferId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_quantity\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_price\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"Token1155Listed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_erc1155OfferId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_quantity\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_price\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"_currency\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_previousOwner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"Token1155Sold\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_previousPrice\",\"type\":\"uint256\"}],\"name\":\"TokenDeleted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_price\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"TokenListed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"TokenOwned\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_price\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"string\",\"name\":\"_currency\",\"type\":\"string\"}],\"name\":\"TokenSold\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"artTokens1155Contract\",\"outputs\":[{\"internalType\":\"contract IERC1155\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"artTokensContract\",\"outputs\":[{\"internalType\":\"contract IERC721\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_offerId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_quantity\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amountOfPRT\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_nonce\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_signature\",\"type\":\"bytes\"}],\"name\":\"buyArtwork1155ForPRT\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_nonce\",\"type\":\"uint256\"}],\"name\":\"buyToken\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_offerId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_quantity\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_nonce\",\"type\":\"uint256\"}],\"name\":\"buyToken1155\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amountOfPRT\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_nonce\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_signature\",\"type\":\"bytes\"}],\"name\":\"buyTokenForPRT\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"erc1155Offers\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"quantity\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"pricePerToken\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_offerId\",\"type\":\"uint256\"}],\"name\":\"getArtwork1155Owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getName\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getNextNonce\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getSigner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_price\",\"type\":\"uint256\"}],\"name\":\"listToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_quantity\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_price\",\"type\":\"uint256\"}],\"name\":\"listToken1155\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_offerId\",\"type\":\"uint256\"}],\"name\":\"listing1155Price\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"listingPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"potionTokensContract\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"prices\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_hash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"_signature\",\"type\":\"bytes\"}],\"name\":\"recoverSignerAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"removeListToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_offerId\",\"type\":\"uint256\"}],\"name\":\"removeListToken1155\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newSigner\",\"type\":\"address\"}],\"name\":\"setSigner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"PortionExchange","CompilerVersion":"v0.7.4+commit.3f05b770","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000da98f59e1edecb2545d7b07b794e704ed6cf1f7a0000000000000000000000000adf0bc748296bcba9f394d783a5f5e9406d68740000000000000000000000006d0f5149c502faf215c89ab306ec3e50b15e2892","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://e7630e84b0f9700037496ed4cc1b3824964ca8d5a16ad6665cef02225f8af4d7"}]}