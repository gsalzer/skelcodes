{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.8.4;\r\n\r\ncontract CoFiXUpdate {\r\n    // COFI Token地址\r\n    address constant COFI_TOKEN_ADDRESS = 0x1a23a6BfBAdB59fa563008c0fB7cf96dfCF34Ea1;\r\n    // USDT Token地址\r\n    address constant USDT_TOKEN_ADDRESS = 0xdAC17F958D2ee523a2206206994597C13D831ec7;\r\n    // HBTC Token地址\r\n    address constant HBTC_TOKEN_ADDRESS = 0x0316EB71485b0Ab14103307bf65a021042c6d380;\r\n\r\n    // 1.0合约地址\r\n    // 工厂合约地址\r\n    address constant COFIXV1FACTORY_ADDRESS = 0x66C64ecC3A6014733325a8f2EBEE46B4CA3ED550;\r\n    // lp挖矿合约地址\r\n    address constant COFIXV1VAULTFORLP_ADDRESS = 0x6903b1C17A5A0A9484c7346E5c0956027A713fCF;\r\n    // cn挖矿合约地址\r\n    address constant COFIXV1VAULTFORCNODE_ADDRESS = 0x7eDa8251aC08E7898E986DbeC4Ba97B421d545DD;\r\n    // 交易挖矿合约地址\r\n    address constant COFIXV1VAULTFORTRADER_ADDRESS = 0xE6183d3094a9e360B123Ec1330afAE76A74d1cbF;\r\n    // 分红合约地址\r\n    address constant COFISTAKINGREWARDS_ADDRESS = 0x0061c52768378b84306b2665f098c3e0b2C03308;\r\n    // 对接nest3.6的controller\r\n    address constant COFIXV1NEWCONTROLLER_ADDRESS = 0xB99DB9674e03A2cB07c3D7d92406aE1a3BBB9f56;\r\n\r\n    // 2.0地址\r\n    // 2.0lp挖矿合约地址\r\n    address constant COFIXV2VAULTFORLP_ADDRESS = 0x618B7b93b07Bf78D04B2e8FB2B1C3B48049F8ED5;\r\n    // 2.0cn挖矿合约地址\r\n    address constant COFIXV2VAULTFORCNODE_ADDRESS = 0x3881292cE52AeD0EdAFF1AC7A40DA12AB2453B84;\r\n    // 2.0交易挖矿合约地址\r\n    address constant COFIXV2VAULTFORTRADER_ADDRESS = 0xb29A8d980E1408E487B9968f5E4f7fD7a9B0CaC5;\r\n    // 2.0DAO合约地址\r\n    address constant COFIXV2DAO_ADDRESS = 0x278f5d08bEa1989BEfcC09A20ad60fB39702D556;\r\n\r\n    // 1.0多签合约地址\r\n    address governance = 0xF51d8FdF98286e1EA846c79f1526ECC95b93AbB8;\r\n    // 操作合约的管理员\r\n    address _owner;\r\n    \r\n    constructor() public {\r\n        _owner = msg.sender;\r\n    }\r\n\r\n    function doit() public onlyOwner {\r\n        // 1.设置1.0USDT和HBTCLP不挖矿，手续费转到LP池\r\n        setMiningZero();\r\n        // 2.设置cofix1.0挖矿效率为0\r\n        setVaultMiningNum();\r\n        // 3.删除COFI Token可挖矿权限-1.0挖矿合约\r\n        removeCofiMinter();\r\n        // 4.添加COFI Token可挖矿权限-2.0挖矿合约\r\n        addCofiMinter();\r\n        // 5.转移DAO资产\r\n        turnOutETH();\r\n        // 6.重置管理员地址\r\n        resetGovernance();\r\n    }\r\n\r\n    // Cofix1.0设置新的controller\r\n    function setCofixV1Controller() public onlyOwner {\r\n        ICoFiXFactory cofixFactory = ICoFiXFactory(COFIXV1FACTORY_ADDRESS);\r\n        // Cofix1.0设置新的controller\r\n        cofixFactory.setController(COFIXV1NEWCONTROLLER_ADDRESS);\r\n        require(cofixFactory.controller() == COFIXV1NEWCONTROLLER_ADDRESS, \"setCofixV1Controller:!COFIXV1NEWCONTROLLER_ADDRESS\");\r\n    }\r\n    \r\n    // 设置1.0USDT和HBTCLP不挖矿，手续费转到LP池\r\n    function setMiningZero() public onlyOwner {\r\n        ICoFiXFactory cofixFactory = ICoFiXFactory(COFIXV1FACTORY_ADDRESS);\r\n        // USDT和HBTCLP不挖矿，手续费转到LP池\r\n        cofixFactory.setTradeMiningStatus(USDT_TOKEN_ADDRESS, false);\r\n        cofixFactory.setTradeMiningStatus(HBTC_TOKEN_ADDRESS, false);\r\n        cofixFactory.setFeeVaultForLP(USDT_TOKEN_ADDRESS, address(0x0));\r\n        cofixFactory.setFeeVaultForLP(HBTC_TOKEN_ADDRESS, address(0x0));\r\n        require(cofixFactory.getTradeMiningStatus(USDT_TOKEN_ADDRESS) == false, \"getTradeMiningStatus:!USDT_TOKEN_ADDRESS\");\r\n        require(cofixFactory.getTradeMiningStatus(HBTC_TOKEN_ADDRESS) == false, \"getTradeMiningStatus:!HBTC_TOKEN_ADDRESS\");\r\n        require(cofixFactory.getFeeVaultForLP(USDT_TOKEN_ADDRESS) == address(0x0), \"getFeeVaultForLP:!USDT_PAIR_ADDRESS\");\r\n        require(cofixFactory.getFeeVaultForLP(HBTC_TOKEN_ADDRESS) == address(0x0), \"getFeeVaultForLP:!HBTC_PAIR_ADDRESS\");\r\n    }\r\n    \r\n    // 添加COFI Token可挖矿权限-2.0挖矿合约\r\n    function addCofiMinter() public onlyOwner {\r\n        ICoFiToken cofiToken = ICoFiToken(COFI_TOKEN_ADDRESS);\r\n\r\n        // 添加权限\r\n        cofiToken.addMinter(COFIXV2VAULTFORLP_ADDRESS);\r\n        cofiToken.addMinter(COFIXV2VAULTFORCNODE_ADDRESS);\r\n        cofiToken.addMinter(COFIXV2VAULTFORTRADER_ADDRESS);\r\n\r\n        // 验证\r\n        require(cofiToken.minters(COFIXV2VAULTFORLP_ADDRESS), \"addCofiMinter:COFIXV2VAULTFORLP_ADDRESS\");\r\n        require(cofiToken.minters(COFIXV2VAULTFORCNODE_ADDRESS), \"addCofiMinter:COFIXV2VAULTFORCNODE_ADDRESS\");\r\n        require(cofiToken.minters(COFIXV2VAULTFORTRADER_ADDRESS), \"addCofiMinter:COFIXV2VAULTFORTRADER_ADDRESS\");\r\n    }\r\n\r\n    // 删除COFI Token可挖矿权限-1.0挖矿合约\r\n    function removeCofiMinter() public onlyOwner {\r\n        ICoFiToken cofiToken = ICoFiToken(COFI_TOKEN_ADDRESS);\r\n\r\n        // 删除权限\r\n        cofiToken.removeMinter(COFIXV1VAULTFORLP_ADDRESS);\r\n        cofiToken.removeMinter(COFIXV1VAULTFORCNODE_ADDRESS);\r\n        cofiToken.removeMinter(COFIXV1VAULTFORTRADER_ADDRESS);\r\n\r\n        // 验证\r\n        require(cofiToken.minters(COFIXV1VAULTFORLP_ADDRESS) == false, \"removeCofiMinter:COFIXV1VAULTFORLP_ADDRESS\");\r\n        require(cofiToken.minters(COFIXV1VAULTFORCNODE_ADDRESS) == false, \"removeCofiMinter:COFIXV1VAULTFORCNODE_ADDRESS\");\r\n        require(cofiToken.minters(COFIXV1VAULTFORTRADER_ADDRESS) == false, \"removeCofiMinter:COFIXV1VAULTFORTRADER_ADDRESS\");\r\n    }\r\n\r\n    // 设置cofix1.0挖矿效率为0\r\n    function setVaultMiningNum() public onlyOwner {\r\n        // 设置CN挖矿效率为0\r\n        ICoFiXVaultForCNode cofixVaultForCNode = ICoFiXVaultForCNode(COFIXV1VAULTFORCNODE_ADDRESS);\r\n        cofixVaultForCNode.setInitCoFiRate(0);\r\n        require(cofixVaultForCNode.initCoFiRate() == 0, \"setVaultMiningNum:cofixVaultForCNode!=0\");\r\n\r\n        // 设置lp挖矿效率为0\r\n        ICoFiXVaultForLP cofixVaultForLP = ICoFiXVaultForLP(COFIXV1VAULTFORLP_ADDRESS);\r\n        cofixVaultForLP.setInitCoFiRate(0);\r\n        require(cofixVaultForLP.initCoFiRate() == 0, \"setVaultMiningNum:cofixVaultForLP!=0\");\r\n\r\n        // 设置交易挖矿效率为0\r\n        ICoFiXVaultForTrader cofixVaultForTrader = ICoFiXVaultForTrader(COFIXV1VAULTFORTRADER_ADDRESS);\r\n        cofixVaultForTrader.setTheta(0);\r\n        require(cofixVaultForTrader.THETA() == 0, \"setVaultMiningNum:cofixVaultForTrader!=0\");\r\n    }\r\n\r\n    // 转移DAO资产\r\n    function turnOutETH() public onlyOwner {\r\n        // 转移ETH到升级合约\r\n        ICoFiStakingRewards cofiStakingRewards = ICoFiStakingRewards(COFISTAKINGREWARDS_ADDRESS);\r\n        uint256 ETHAmount = cofiStakingRewards.pendingSavingAmount();\r\n        cofiStakingRewards.withdrawSavingByGov(address(this), ETHAmount);\r\n        require(address(this).balance >= ETHAmount, \"turnOutETH:!thisBalance\");\r\n        // 转移ETH到DAO合约\r\n        TransferHelper.safeTransferETH(COFIXV2DAO_ADDRESS, ETHAmount);\r\n        require(address(COFIXV2DAO_ADDRESS).balance >= ETHAmount, \"turnOutETH:!COFIXV2DAO_ADDRESS\");\r\n    }\r\n\r\n    // 重置管理员地址\r\n    function resetGovernance() public onlyOwner {\r\n        resetGovernance_COFI_TOKEN();\r\n        resetGovernance_COFIXV1FACTORY();\r\n        resetGovernance_COFIXV1VAULTFORCNODE();\r\n        resetGovernance_COFIXV1VAULTFORLP();\r\n        resetGovernance_COFIXV1VAULTFORTRADER();\r\n        resetGovernance_COFISTAKINGREWARDS();\r\n    }\r\n    \r\n    function resetGovernance_COFI_TOKEN() public onlyOwner {\r\n        ICoFiToken(COFI_TOKEN_ADDRESS).setGovernance(governance);\r\n    }\r\n    \r\n    function resetGovernance_COFIXV1FACTORY() public onlyOwner {\r\n        ICoFiXFactory(COFIXV1FACTORY_ADDRESS).setGovernance(governance);\r\n    }\r\n    \r\n    function resetGovernance_COFIXV1VAULTFORCNODE() public onlyOwner {\r\n        ICoFiXVaultForCNode(COFIXV1VAULTFORCNODE_ADDRESS).setGovernance(governance);\r\n    }\r\n    \r\n    function resetGovernance_COFIXV1VAULTFORLP() public onlyOwner {\r\n        ICoFiXVaultForLP(COFIXV1VAULTFORLP_ADDRESS).setGovernance(governance);\r\n    }\r\n    \r\n    function resetGovernance_COFIXV1VAULTFORTRADER() public onlyOwner {\r\n        ICoFiXVaultForTrader(COFIXV1VAULTFORTRADER_ADDRESS).setGovernance(governance);\r\n    }\r\n    \r\n    function resetGovernance_COFISTAKINGREWARDS() public onlyOwner {\r\n        ICoFiStakingRewards(COFISTAKINGREWARDS_ADDRESS).setGovernance(governance);\r\n    }\r\n    \r\n    function resetGovernance_CUS(address add) public onlyOwner {\r\n        require(add != address(0x0), \"resetGovernance_CUS:0x0\");\r\n        ICoFiToken(COFI_TOKEN_ADDRESS).setGovernance(add);\r\n        ICoFiXFactory(COFIXV1FACTORY_ADDRESS).setGovernance(add);\r\n        ICoFiXVaultForCNode(COFIXV1VAULTFORCNODE_ADDRESS).setGovernance(add);\r\n        ICoFiXVaultForLP(COFIXV1VAULTFORLP_ADDRESS).setGovernance(add);\r\n        ICoFiXVaultForTrader(COFIXV1VAULTFORTRADER_ADDRESS).setGovernance(add);\r\n        ICoFiStakingRewards(COFISTAKINGREWARDS_ADDRESS).setGovernance(add);\r\n    }\r\n\r\n    modifier onlyOwner {\r\n        require(msg.sender == _owner);\r\n        _;\r\n    }\r\n\r\n    receive() external payable{}\r\n    \r\n}\r\n\r\ninterface ICoFiToken {\r\n    function setGovernance(address _new) external;\r\n    function addMinter(address _minter) external;\r\n    function removeMinter(address _minter) external;\r\n    function minters(address add) external view returns(bool);\r\n}\r\n\r\ninterface ICoFiXFactory {\r\n    function setGovernance(address _new) external;\r\n    function setController(address _new) external;\r\n    function controller() external view returns(address);\r\n    function setTradeMiningStatus(address token, bool status) external;\r\n    function setFeeVaultForLP(address token, address feeVault) external;\r\n    function getTradeMiningStatus(address add) external view returns(bool);\r\n    function getFeeVaultForLP(address add) external view returns(address);\r\n}\r\n\r\ninterface ICoFiXVaultForCNode {\r\n    function setGovernance(address _new) external;\r\n    function setInitCoFiRate(uint256 _new) external;\r\n    function initCoFiRate() external view returns(uint256);\r\n}\r\n\r\ninterface ICoFiXVaultForLP {\r\n    function setGovernance(address _new) external;\r\n    function setInitCoFiRate(uint256 _new) external;\r\n    function initCoFiRate() external view returns(uint256);\r\n}\r\n\r\ninterface ICoFiXVaultForTrader {\r\n    function setGovernance(address _new) external;\r\n    function setTheta(uint256 theta) external;\r\n    function THETA() external view returns(uint256);\r\n}\r\n\r\ninterface ICoFiStakingRewards {\r\n    function setGovernance(address _new) external;\r\n    function withdrawSavingByGov(address _to, uint256 _amount) external;\r\n    function pendingSavingAmount() external view returns(uint256);\r\n}\r\n\r\nlibrary TransferHelper {\r\n    function safeApprove(address token, address to, uint value) internal {\r\n        // bytes4(keccak256(bytes('approve(address,uint256)')));\r\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x095ea7b3, to, value));\r\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'TransferHelper: APPROVE_FAILED');\r\n    }\r\n\r\n    function safeTransfer(address token, address to, uint value) internal {\r\n        // bytes4(keccak256(bytes('transfer(address,uint256)')));\r\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0xa9059cbb, to, value));\r\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'TransferHelper: TRANSFER_FAILED');\r\n    }\r\n\r\n    function safeTransferFrom(address token, address from, address to, uint value) internal {\r\n        // bytes4(keccak256(bytes('transferFrom(address,address,uint256)')));\r\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x23b872dd, from, to, value));\r\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'TransferHelper: TRANSFER_FROM_FAILED');\r\n    }\r\n\r\n    function safeTransferETH(address to, uint value) internal {\r\n        (bool success,) = to.call{value:value}(new bytes(0));\r\n        require(success, 'TransferHelper: ETH_TRANSFER_FAILED');\r\n    }\r\n}","ABI":"[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"addCofiMinter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"doit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"removeCofiMinter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"resetGovernance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"resetGovernance_COFISTAKINGREWARDS\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"resetGovernance_COFIXV1FACTORY\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"resetGovernance_COFIXV1VAULTFORCNODE\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"resetGovernance_COFIXV1VAULTFORLP\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"resetGovernance_COFIXV1VAULTFORTRADER\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"resetGovernance_COFI_TOKEN\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"add\",\"type\":\"address\"}],\"name\":\"resetGovernance_CUS\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"setCofixV1Controller\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"setMiningZero\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"setVaultMiningNum\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"turnOutETH\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]","ContractName":"CoFiXUpdate","CompilerVersion":"v0.8.4+commit.c7e474f2","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"GNU GPLv3","Proxy":"0","Implementation":"","SwarmSource":"ipfs://8175e9f0131c554b20fe277df2268c55732cd3f010197ef22b2210071d9dc1b8"}]}