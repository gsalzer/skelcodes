{"status":"1","message":"OK","result":[{"SourceCode":"// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/*\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor () {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\n// CAUTION\r\n// This version of SafeMath should only be used with Solidity 0.8 or later,\r\n// because it relies on the compiler's built in overflow checks.\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations.\r\n *\r\n * NOTE: `SafeMath` is no longer needed starting with Solidity 0.8. The compiler\r\n * now has built in overflow checking.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            uint256 c = a + b;\r\n            if (c < a) return (false, 0);\r\n            return (true, c);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            if (b > a) return (false, 0);\r\n            return (true, a - b);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n            // benefit is lost if 'b' is also tested.\r\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n            if (a == 0) return (true, 0);\r\n            uint256 c = a * b;\r\n            if (c / a != b) return (false, 0);\r\n            return (true, c);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            if (b == 0) return (false, 0);\r\n            return (true, a / b);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            if (b == 0) return (false, 0);\r\n            return (true, a % b);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a + b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a - b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a * b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers, reverting on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a / b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * reverting when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a % b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\r\n     * message unnecessarily. For custom revert reasons use {trySub}.\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        unchecked {\r\n            require(b <= a, errorMessage);\r\n            return a - b;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        unchecked {\r\n            require(b > 0, errorMessage);\r\n            return a / b;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * reverting with custom message when dividing by zero.\r\n     *\r\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\r\n     * message unnecessarily. For custom revert reasons use {tryMod}.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        unchecked {\r\n            require(b > 0, errorMessage);\r\n            return a % b;\r\n        }\r\n    }\r\n}\r\n\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n/**\r\n * @title Interface for other's contracts use\r\n * @dev This functions will be called by other's contracts\r\n */\r\ninterface IERAC {\r\n    /**\r\n     * @dev Query the TokenId(ERAC) list for the specified account.\r\n     *\r\n     */\r\n    function getTokenIds(address owner) external view returns (uint256[] memory);\r\n}\r\n\r\n\r\n/**\r\n * @title Interface for other's contracts use\r\n * @dev This functions will be called by other's contracts\r\n */\r\ninterface INERA {\r\n    /**\r\n     * @dev Mining for NERA tokens.\r\n     *\r\n     */\r\n    function mint(address to, uint256 amount) external returns (bool);\r\n}\r\n\r\n\r\ncontract ERACMiner is Ownable {\r\n    \r\n    // the NERA contract address(Special note: need to wait for the NERA contract deployment, get the address and replace, then compile and deploy this contract)\r\n    address private constant _NERA_CONTRACT_ADDRESS = address(0x6b1218D1a79b06a811dc54E745C51d8cDF666c1d);\r\n    \r\n    // the ERAC contract address(Special note: need to wait for the ERAC contract deployment, get the address and replace, then compile and deploy this contract)\r\n    address private constant _ERAC_CONTRACT_ADDRESS = address(0x30E4812AC46992F3A53A9e7D3CF37cDAdc1f4145);\r\n\r\n    using SafeMath for uint256;\r\n    // Produce time control\r\n    // The timestamp (counting the total seconds elapsed since 1970-01-01 00:00:00[UTC zero zone] )\r\n    // now start timestamp is 2021-04-16 00:00:00[UTC zero zone] or 2021-04-16 08:00:00(Beijing Time)\r\n    uint256 private constant _startTimestamp = 1618531200;\r\n    uint256 private constant _mintPeriod     = 70956000; //821.25d * 24h * 3600s;\r\n    uint256 private constant _endTimestamp   = _startTimestamp + _mintPeriod;\r\n\r\n    // Mapping from tokenId to total amount of this tokenId that withdrawed\r\n    mapping(uint256 => uint256) private _withdrawalAmount;\r\n\r\n    /**\r\n     * @dev Throws if called by an invalid ERAC token id.\r\n     */\r\n    modifier isValidTokenId(uint256 tokenId) \r\n    {\r\n        require(tokenId >= 1 && tokenId <= 10000, \"ERACMiner: operator an invalid ERAC tokenId\");\r\n        _;\r\n    }\r\n\r\n\r\n    /**\r\n     * @dev Give any valid ERAC's token id return level(1-9)\r\n     */\r\n    function _getLevel(uint256 id) \r\n        private\r\n        pure\r\n        isValidTokenId(id) \r\n        returns (uint256) \r\n    {\r\n        return id>6000 ? 1 : (id>4000 ? 2 : (id>3000 ? 3 : (id>2000 ? 4 : (id>1000 ? 5 : (id>300 ? 6 : (id>100 ? 7 : (id>10 ? 8 : 9)))))));\r\n    }    \r\n\r\n\r\n    /**\r\n     * @dev Query the balanceOf NERAs remaining for an ERAC (wei)\r\n     */\r\n    function balanceOfERAC(uint256 tokenId) \r\n        public\r\n        view\r\n        isValidTokenId(tokenId)\r\n        returns (uint256)\r\n    {\r\n        uint256 nSeconds = block.timestamp - _startTimestamp;\r\n        if(nSeconds <= 0) return 0;\r\n        // Produce speed of levels\r\n        uint16[10] memory levelEveryDayMiningNum = [0, 3, 7, 13, 18, 22, 38, 175, 390, 4384];\r\n        return nSeconds * (10 ** 18) * levelEveryDayMiningNum[_getLevel(tokenId)] / 86400 - _withdrawalAmount[tokenId];\r\n    }\r\n\r\n    /**\r\n     * @dev Query the balanceOf NERAs remaining for an account (wei)\r\n     */\r\n    function balanceOfAccount(address owner)\r\n        public\r\n        view\r\n        returns (uint256)\r\n    {\r\n        uint256[] memory tokenIds = IERAC(_ERAC_CONTRACT_ADDRESS).getTokenIds(owner);\r\n        if(tokenIds.length == 0) return 0;\r\n        uint256 totalBalance = 0;\r\n        for(uint i = 0; i < tokenIds.length; ++i) {\r\n            totalBalance = totalBalance.add(balanceOfERAC(tokenIds[i]));\r\n        }   \r\n        return totalBalance;\r\n    }\r\n\r\n\r\n    /**\r\n     * @dev withdraw\r\n     */\r\n    function withdraw() \r\n        public\r\n        returns (bool)\r\n    {\r\n        //Reference of ERAC contract call\r\n        uint256[] memory tokenIds = IERAC(_ERAC_CONTRACT_ADDRESS).getTokenIds(msg.sender); \r\n        require(tokenIds.length > 0, \"ERACMiner: message sender has no ERAC token\");\r\n\r\n        uint256 withdrawBalance = 0;\r\n        for(uint i = 0; i < tokenIds.length; ++i) {\r\n            uint256 tokenId = tokenIds[i];\r\n            uint256 balanceOfThis = balanceOfERAC(tokenId);\r\n            if (balanceOfThis > 0) { \r\n                _withdrawalAmount[tokenId] = _withdrawalAmount[tokenId].add(balanceOfThis);\r\n                withdrawBalance = withdrawBalance.add(balanceOfThis);\r\n            }\r\n        }\r\n\r\n        require(withdrawBalance > 0, \"ERACMiner: since last withdraw has no new NERA produce\");\r\n        //Reference of NERA contract call\r\n        require(INERA(_NERA_CONTRACT_ADDRESS).mint(msg.sender, withdrawBalance), \"ERACMiner: mint failed.\");\r\n\r\n        return true;\r\n    }\r\n}","ABI":"[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOfAccount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"balanceOfERAC\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"ERACMiner","CompilerVersion":"v0.8.0+commit.c7dfd78e","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"ipfs://0d432df3ca319d04b4c75f46fba2af6453029158c0f1a8a81760f62d8c27724b"}]}