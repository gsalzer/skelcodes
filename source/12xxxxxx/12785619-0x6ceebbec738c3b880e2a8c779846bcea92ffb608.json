{"status":"1","message":"OK","result":[{"SourceCode":"// Dependency file: contracts/libraries/Upgradable.sol\r\n\r\n//SPDX-License-Identifier: MIT\r\n// pragma solidity >=0.6.5 <0.8.0;\r\n\r\ncontract UpgradableProduct {\r\n    address public impl;\r\n\r\n    event ImplChanged(address indexed _oldImpl, address indexed _newImpl);\r\n\r\n    constructor() public {\r\n        impl = msg.sender;\r\n    }\r\n\r\n    modifier requireImpl() {\r\n        require(msg.sender == impl, \"FORBIDDEN\");\r\n        _;\r\n    }\r\n\r\n    function upgradeImpl(address _newImpl) public requireImpl {\r\n        require(_newImpl != address(0), \"INVALID_ADDRESS\");\r\n        require(_newImpl != impl, \"NO_CHANGE\");\r\n        address lastImpl = impl;\r\n        impl = _newImpl;\r\n        emit ImplChanged(lastImpl, _newImpl);\r\n    }\r\n}\r\n\r\ncontract UpgradableGovernance {\r\n    address public governor;\r\n\r\n    event GovernorChanged(\r\n        address indexed _oldGovernor,\r\n        address indexed _newGovernor\r\n    );\r\n\r\n    constructor() public {\r\n        governor = msg.sender;\r\n    }\r\n\r\n    modifier requireGovernor() {\r\n        require(msg.sender == governor, \"FORBIDDEN\");\r\n        _;\r\n    }\r\n\r\n    function upgradeGovernance(address _newGovernor) public requireGovernor {\r\n        require(_newGovernor != address(0), \"INVALID_ADDRESS\");\r\n        require(_newGovernor != governor, \"NO_CHANGE\");\r\n        address lastGovernor = governor;\r\n        governor = _newGovernor;\r\n        emit GovernorChanged(lastGovernor, _newGovernor);\r\n    }\r\n}\r\n\r\n\r\n// Dependency file: contracts/libraries/ConfigNames.sol\r\n\r\n// pragma solidity >=0.6.5 <0.8.0;\r\n\r\nlibrary ConfigNames {\r\n    bytes32 public constant FRYER_LTV = bytes32(\"FRYER_LTV\");\r\n    bytes32 public constant FRYER_HARVEST_FEE = bytes32(\"FRYER_HARVEST_FEE\");\r\n    bytes32 public constant FRYER_VAULT_PERCENTAGE =\r\n        bytes32(\"FRYER_VAULT_PERCENTAGE\");\r\n\r\n    bytes32 public constant FRYER_FLASH_FEE_PROPORTION =\r\n        bytes32(\"FRYER_FLASH_FEE_PROPORTION\");\r\n\r\n    bytes32 public constant PRIVATE = bytes32(\"PRIVATE\");\r\n    bytes32 public constant STAKE = bytes32(\"STAKE\");\r\n}\r\n\r\n\r\n// Root file: contracts/FryerConfig.sol\r\n\r\npragma solidity >=0.6.5 <0.8.0;\r\n\r\n// import \"contracts/libraries/Upgradable.sol\";\r\n// import \"contracts/libraries/ConfigNames.sol\";\r\n\r\ncontract FryerConfig is UpgradableProduct, UpgradableGovernance {\r\n    uint256 public version = 1;\r\n    event ConfigValueChanged(bytes32 _name, uint256 _old, uint256 _value);\r\n\r\n    struct Config {\r\n        uint256 minValue;\r\n        uint256 maxValue;\r\n        uint256 maxSpan;\r\n        uint256 value;\r\n        uint256 enable; // 0:disable, 1: enable\r\n    }\r\n\r\n    mapping(bytes32 => Config) public configs;\r\n    uint256 public constant PERCENT_DENOMINATOR = 10000;\r\n    address public constant ZERO_ADDRESS = address(0);\r\n\r\n    constructor() public {\r\n        // 50%\r\n        _initConfig(ConfigNames.FRYER_LTV, 5000, 8000, 100, 5000);\r\n\r\n        // 80%\r\n        _initConfig(ConfigNames.FRYER_VAULT_PERCENTAGE, 2000, 9000, 500, 8000);\r\n\r\n        // 5%\r\n        _initConfig(ConfigNames.FRYER_HARVEST_FEE, 0, 1000, 100, 500);\r\n\r\n        // 5%\r\n        _initConfig(ConfigNames.FRYER_FLASH_FEE_PROPORTION, 0, 1000, 100, 6);\r\n    }\r\n\r\n    function _initConfig(\r\n        bytes32 _name,\r\n        uint256 _minValue,\r\n        uint256 _maxValue,\r\n        uint256 _maxSpan,\r\n        uint256 _value\r\n    ) internal {\r\n        Config storage config = configs[_name];\r\n        config.minValue = _minValue;\r\n        config.maxValue = _maxValue;\r\n        config.maxSpan = _maxSpan;\r\n        config.value = _value;\r\n        config.enable = 1;\r\n    }\r\n\r\n    function getConfig(bytes32 _name)\r\n        external\r\n        view\r\n        returns (\r\n            uint256 minValue,\r\n            uint256 maxValue,\r\n            uint256 maxSpan,\r\n            uint256 value,\r\n            uint256 enable\r\n        )\r\n    {\r\n        Config memory config = configs[_name];\r\n        minValue = config.minValue;\r\n        maxValue = config.maxValue;\r\n        maxSpan = config.maxSpan;\r\n        value = config.value;\r\n        enable = config.enable;\r\n    }\r\n\r\n    function getConfigValue(bytes32 _name) public view returns (uint256) {\r\n        return configs[_name].value;\r\n    }\r\n\r\n    function changeConfig(\r\n        bytes32 _name,\r\n        uint256 _minValue,\r\n        uint256 _maxValue,\r\n        uint256 _maxSpan,\r\n        uint256 _value\r\n    ) external requireImpl returns (bool) {\r\n        _initConfig(_name, _minValue, _maxValue, _maxSpan, _value);\r\n        return true;\r\n    }\r\n\r\n    function changeConfigValue(bytes32 _name, uint256 _value)\r\n        external\r\n        requireGovernor\r\n        returns (bool)\r\n    {\r\n        Config storage config = configs[_name];\r\n        require(config.enable == 1, \"DISABLE\");\r\n        require(\r\n            _value <= config.maxValue && _value >= config.minValue,\r\n            \"OVERFLOW\"\r\n        );\r\n        uint256 old = config.value;\r\n        uint256 span = _value >= old ? (_value - old) : (old - _value);\r\n        require(span <= config.maxSpan, \"EXCEED MAX ADJUST SPAN\");\r\n        config.value = _value;\r\n        emit ConfigValueChanged(_name, old, _value);\r\n        return true;\r\n    }\r\n\r\n \r\n}","ABI":"[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"_name\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_old\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"ConfigValueChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_oldGovernor\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_newGovernor\",\"type\":\"address\"}],\"name\":\"GovernorChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_oldImpl\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_newImpl\",\"type\":\"address\"}],\"name\":\"ImplChanged\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"PERCENT_DENOMINATOR\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ZERO_ADDRESS\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_name\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"_minValue\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_maxValue\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_maxSpan\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"changeConfig\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_name\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"changeConfigValue\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"configs\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"minValue\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxValue\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxSpan\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"enable\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_name\",\"type\":\"bytes32\"}],\"name\":\"getConfig\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"minValue\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxValue\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxSpan\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"enable\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_name\",\"type\":\"bytes32\"}],\"name\":\"getConfigValue\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"governor\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"impl\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newGovernor\",\"type\":\"address\"}],\"name\":\"upgradeGovernance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newImpl\",\"type\":\"address\"}],\"name\":\"upgradeImpl\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"FryerConfig","CompilerVersion":"v0.6.12+commit.27d51765","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"ipfs://25a07376765d58d2665d94974eb789c79daa7b06e4208243e0e2e77553a23775"}]}