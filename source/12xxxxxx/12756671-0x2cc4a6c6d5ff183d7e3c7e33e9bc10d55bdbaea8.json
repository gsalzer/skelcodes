{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.6.0;// SPDX-License-Identifier: MIT\r\n\r\n\r\n\r\n/*\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with GSN meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address payable) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes memory) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        uint256 c = a + b;\r\n        if (c < a) return (false, 0);\r\n        return (true, c);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        if (b > a) return (false, 0);\r\n        return (true, a - b);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) return (true, 0);\r\n        uint256 c = a * b;\r\n        if (c / a != b) return (false, 0);\r\n        return (true, c);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        if (b == 0) return (false, 0);\r\n        return (true, a / b);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        if (b == 0) return (false, 0);\r\n        return (true, a % b);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b <= a, \"SafeMath: subtraction overflow\");\r\n        return a - b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) return 0;\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers, reverting on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b > 0, \"SafeMath: division by zero\");\r\n        return a / b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * reverting when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b > 0, \"SafeMath: modulo by zero\");\r\n        return a % b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\r\n     * message unnecessarily. For custom revert reasons use {trySub}.\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        return a - b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\r\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        return a / b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * reverting with custom message when dividing by zero.\r\n     *\r\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\r\n     * message unnecessarily. For custom revert reasons use {tryMod}.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n * @dev Implementation of the {IERC20} interface.\r\n *\r\n * This implementation is agnostic to the way tokens are created. This means\r\n * that a supply mechanism has to be added in a derived contract using {_mint}.\r\n * For a generic mechanism see {ERC20PresetMinterPauser}.\r\n *\r\n * TIP: For a detailed writeup see our guide\r\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\r\n * to implement supply mechanisms].\r\n *\r\n * We have followed general OpenZeppelin guidelines: functions revert instead\r\n * of returning `false` on failure. This behavior is nonetheless conventional\r\n * and does not conflict with the expectations of ERC20 applications.\r\n *\r\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\r\n * This allows applications to reconstruct the allowance for all accounts just\r\n * by listening to said events. Other implementations of the EIP may not emit\r\n * these events, as it isn't required by the specification.\r\n *\r\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\r\n * functions have been added to mitigate the well-known issues around setting\r\n * allowances. See {IERC20-approve}.\r\n */\r\ncontract ERC20 is Context, IERC20 {\r\n    using SafeMath for uint256;\r\n\r\n    mapping (address => uint256) private _balances;\r\n\r\n    mapping (address => mapping (address => uint256)) private _allowances;\r\n\r\n    uint256 private _totalSupply;\r\n\r\n    string private _name;\r\n    string private _symbol;\r\n    uint8 private _decimals;\r\n\r\n    /**\r\n     * @dev Sets the values for {name} and {symbol}, initializes {decimals} with\r\n     * a default value of 18.\r\n     *\r\n     * To select a different value for {decimals}, use {_setupDecimals}.\r\n     *\r\n     * All three of these values are immutable: they can only be set once during\r\n     * construction.\r\n     */\r\n    constructor (string memory name_, string memory symbol_) public {\r\n        _name = name_;\r\n        _symbol = symbol_;\r\n        _decimals = 18;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the name of the token.\r\n     */\r\n    function name() public view virtual returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the symbol of the token, usually a shorter version of the\r\n     * name.\r\n     */\r\n    function symbol() public view virtual returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of decimals used to get its user representation.\r\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\r\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\r\n     *\r\n     * Tokens usually opt for a value of 18, imitating the relationship between\r\n     * Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is\r\n     * called.\r\n     *\r\n     * NOTE: This information is only used for _display_ purposes: it in\r\n     * no way affects any of the arithmetic of the contract, including\r\n     * {IERC20-balanceOf} and {IERC20-transfer}.\r\n     */\r\n    function decimals() public view virtual returns (uint8) {\r\n        return _decimals;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-totalSupply}.\r\n     */\r\n    function totalSupply() public view virtual override returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-balanceOf}.\r\n     */\r\n    function balanceOf(address account) public view virtual override returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-transfer}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `recipient` cannot be the zero address.\r\n     * - the caller must have a balance of at least `amount`.\r\n     */\r\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\r\n        _transfer(_msgSender(), recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-allowance}.\r\n     */\r\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-approve}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\r\n        _approve(_msgSender(), spender, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-transferFrom}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance. This is not\r\n     * required by the EIP. See the note at the beginning of {ERC20}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `sender` and `recipient` cannot be the zero address.\r\n     * - `sender` must have a balance of at least `amount`.\r\n     * - the caller must have allowance for ``sender``'s tokens of at least\r\n     * `amount`.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \"ERC20: transfer amount exceeds allowance\"));\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\r\n     *\r\n     * This is an alternative to {approve} that can be used as a mitigation for\r\n     * problems described in {IERC20-approve}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\r\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\r\n     *\r\n     * This is an alternative to {approve} that can be used as a mitigation for\r\n     * problems described in {IERC20-approve}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     * - `spender` must have allowance for the caller of at least\r\n     * `subtractedValue`.\r\n     */\r\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\r\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \"ERC20: decreased allowance below zero\"));\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\r\n     *\r\n     * This is internal function is equivalent to {transfer}, and can be used to\r\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `sender` cannot be the zero address.\r\n     * - `recipient` cannot be the zero address.\r\n     * - `sender` must have a balance of at least `amount`.\r\n     */\r\n    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\r\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\r\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\r\n\r\n        _beforeTokenTransfer(sender, recipient, amount);\r\n\r\n        _balances[sender] = _balances[sender].sub(amount, \"ERC20: transfer amount exceeds balance\");\r\n        _balances[recipient] = _balances[recipient].add(amount);\r\n        emit Transfer(sender, recipient, amount);\r\n    }\r\n\r\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\r\n     * the total supply.\r\n     *\r\n     * Emits a {Transfer} event with `from` set to the zero address.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `to` cannot be the zero address.\r\n     */\r\n    function _mint(address account, uint256 amount) internal virtual {\r\n        require(account != address(0), \"ERC20: mint to the zero address\");\r\n\r\n        _beforeTokenTransfer(address(0), account, amount);\r\n\r\n        _totalSupply = _totalSupply.add(amount);\r\n        _balances[account] = _balances[account].add(amount);\r\n        emit Transfer(address(0), account, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Destroys `amount` tokens from `account`, reducing the\r\n     * total supply.\r\n     *\r\n     * Emits a {Transfer} event with `to` set to the zero address.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `account` cannot be the zero address.\r\n     * - `account` must have at least `amount` tokens.\r\n     */\r\n    function _burn(address account, uint256 amount) internal virtual {\r\n        require(account != address(0), \"ERC20: burn from the zero address\");\r\n\r\n        _beforeTokenTransfer(account, address(0), amount);\r\n\r\n        _balances[account] = _balances[account].sub(amount, \"ERC20: burn amount exceeds balance\");\r\n        _totalSupply = _totalSupply.sub(amount);\r\n        emit Transfer(account, address(0), amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\r\n     *\r\n     * This internal function is equivalent to `approve`, and can be used to\r\n     * e.g. set automatic allowances for certain subsystems, etc.\r\n     *\r\n     * Emits an {Approval} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `owner` cannot be the zero address.\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Sets {decimals} to a value other than the default one of 18.\r\n     *\r\n     * WARNING: This function should only be called from the constructor. Most\r\n     * applications that interact with token contracts will not expect\r\n     * {decimals} to ever change, and may work incorrectly if it does.\r\n     */\r\n    function _setupDecimals(uint8 decimals_) internal virtual {\r\n        _decimals = decimals_;\r\n    }\r\n\r\n    /**\r\n     * @dev Hook that is called before any transfer of tokens. This includes\r\n     * minting and burning.\r\n     *\r\n     * Calling conditions:\r\n     *\r\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\r\n     * will be to transferred to `to`.\r\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\r\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\r\n     * - `from` and `to` are never both zero.\r\n     *\r\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\r\n     */\r\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual { }\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\ncontract ERC20Helper  {\r\n    event TransferOut(uint256 Amount, address To, address Token);\r\n    event TransferIn(uint256 Amount, address From, address Token);\r\n    modifier TestAllownce(\r\n        address _token,\r\n        address _owner,\r\n        uint256 _amount\r\n    ) {\r\n        require(\r\n            ERC20(_token).allowance(_owner, address(this)) >= _amount,\r\n            \"no allowance\"\r\n        );\r\n        _;\r\n    }\r\n\r\n    function TransferToken(\r\n        address _Token,\r\n        address _Reciver,\r\n        uint256 _Amount\r\n    ) internal {\r\n        uint256 OldBalance = CheckBalance(_Token, address(this));\r\n        emit TransferOut(_Amount, _Reciver, _Token);\r\n        ERC20(_Token).transfer(_Reciver, _Amount);\r\n        require(\r\n            (SafeMath.add(CheckBalance(_Token, address(this)), _Amount)) == OldBalance\r\n                ,\r\n            \"recive wrong amount of tokens\"\r\n        );\r\n    }\r\n\r\n    function CheckBalance(address _Token, address _Subject)\r\n        internal\r\n        view\r\n        returns (uint256)\r\n    {\r\n        return ERC20(_Token).balanceOf(_Subject);\r\n    }\r\n\r\n    function TransferInToken(\r\n        address _Token,\r\n        address _Subject,\r\n        uint256 _Amount\r\n    ) internal TestAllownce(_Token, _Subject, _Amount) {\r\n        require(_Amount > 0);\r\n        uint256 OldBalance = CheckBalance(_Token, address(this));\r\n        ERC20(_Token).transferFrom(_Subject, address(this), _Amount);\r\n        emit TransferIn(_Amount, _Subject, _Token);\r\n        require(\r\n            (SafeMath.add(OldBalance, _Amount)) ==\r\n                CheckBalance(_Token, address(this)),\r\n            \"recive wrong amount of tokens\"\r\n        );\r\n    }\r\n\r\n    function ApproveAllowanceERC20(\r\n        address _Token,\r\n        address _Subject,\r\n        uint256 _Amount\r\n    ) internal {\r\n        require(_Amount > 0);\r\n        ERC20(_Token).approve(_Subject, _Amount);\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor () internal {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\n\r\ncontract GovManager is Ownable {\r\n    address public GovernerContract;\r\n\r\n    modifier onlyOwnerOrGov() {\r\n        require(msg.sender == owner() || msg.sender == GovernerContract, \"Authorization Error\");\r\n        _;\r\n    }\r\n\r\n    function setGovernerContract(address _address) external onlyOwnerOrGov{\r\n        GovernerContract = _address;\r\n    }\r\n\r\n    constructor() public {\r\n        GovernerContract = address(0);\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\n\r\ncontract PozBenefit is GovManager {\r\n    constructor() public {\r\n        PozFee = 15; // *10000\r\n        PozTimer = 1000; // *10000\r\n    \r\n       // POZ_Address = address(0x0);\r\n       // POZBenefit_Address = address(0x0);\r\n    }\r\n\r\n    uint256 public PozFee; // the fee for the first part of the pool\r\n    uint256 public PozTimer; //the timer for the first part fo the pool\r\n    \r\n    modifier PercentCheckOk(uint256 _percent) {\r\n        if (_percent < 10000) _;\r\n        else revert(\"Not in range\");\r\n    }\r\n    modifier LeftIsBigger(uint256 _left, uint256 _right) {\r\n        if (_left > _right) _;\r\n        else revert(\"Not bigger\");\r\n    }\r\n\r\n    function SetPozTimer(uint256 _pozTimer)\r\n        public\r\n        onlyOwnerOrGov\r\n        PercentCheckOk(_pozTimer)\r\n    {\r\n        PozTimer = _pozTimer;\r\n    }\r\n\r\n    \r\n}\r\n\r\n\r\n\r\n\r\n\r\ncontract ETHHelper is Ownable {\r\n    constructor() public {\r\n        IsPayble = false;\r\n    }\r\n\r\n    modifier ReceivETH(uint256 msgValue, address msgSender, uint256 _MinETHInvest) {\r\n        require(msgValue >= _MinETHInvest, \"Send ETH to invest\");\r\n        emit TransferInETH(msgValue, msgSender);\r\n        _;\r\n    }\r\n\r\n    //@dev not/allow contract to receive funds\r\n    receive() external payable {\r\n        if (!IsPayble) revert();\r\n    }\r\n\r\n    event TransferOutETH(uint256 Amount, address To);\r\n    event TransferInETH(uint256 Amount, address From);\r\n\r\n    bool public IsPayble;\r\n \r\n    function SwitchIsPayble() public onlyOwner {\r\n        IsPayble = !IsPayble;\r\n    }\r\n\r\n    function TransferETH(address payable _Reciver, uint256 _ammount) internal {\r\n        emit TransferOutETH(_ammount, _Reciver);\r\n        uint256 beforeBalance = address(_Reciver).balance;\r\n        _Reciver.transfer(_ammount);\r\n        require(\r\n            SafeMath.add(beforeBalance, _ammount) == address(_Reciver).balance,\r\n            \"The transfer did not complite\"\r\n        );\r\n    }\r\n \r\n}\r\n\r\n\r\n\r\n//For whitelist, \r\ninterface IWhiteList {\r\n    function Check(address _Subject, uint256 _Id) external view returns(uint);\r\n    function Register(address _Subject,uint256 _Id,uint256 _Amount) external;\r\n    function IsNeedRegister(uint256 _Id) external view returns(bool);\r\n    function LastRoundRegister(address _Subject,uint256 _Id) external;\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\ncontract Manageable is ETHHelper, ERC20Helper, PozBenefit {\r\n    constructor() public {\r\n        Fee = 20; // *10000\r\n        MinDuration = 0; //need to set\r\n        maxTransactionLimit = 400;\r\n    }\r\n    mapping (address => uint256) FeeMap;\r\n    //@dev for percent use uint16\r\n    uint16 internal Fee; //the fee for the pool\r\n    uint16 internal MinDuration; //the minimum duration of a pool, in seconds\r\n\r\n    address public WhiteList_Address;\r\n    bool public isTokenFilterOn;\r\n    uint public WhiteListId;\r\n    uint256 public maxTransactionLimit;\r\n    \r\n    function setWhiteListAddress(address _address) external onlyOwner{\r\n        WhiteList_Address = _address;\r\n    }\r\n\r\n    function setWhiteListId(uint256 _id) external onlyOwner{\r\n        WhiteListId= _id;\r\n    }\r\n\r\n    function swapTokenFilter() external onlyOwner{\r\n        isTokenFilterOn = !isTokenFilterOn;\r\n    }\r\n\r\n    function isTokenWhiteListed(address _tokenAddress) public view returns(bool) {\r\n        return !isTokenFilterOn || IWhiteList(WhiteList_Address).Check(_tokenAddress, WhiteListId) > 0;\r\n    }\r\n\r\n    function setMaxTransactionLimit(uint256 _newLimit) external onlyOwner{\r\n        maxTransactionLimit = _newLimit;\r\n    }\r\n\r\n    function GetMinDuration() public view returns (uint16) {\r\n        return MinDuration;\r\n    }\r\n\r\n    function SetMinDuration(uint16 _minDuration) public onlyOwner {\r\n        MinDuration = _minDuration;\r\n    }\r\n\r\n    function GetFee() public view returns (uint16) {\r\n        return Fee;\r\n    }\r\n\r\n    function SetFee(uint16 _fee) public onlyOwner\r\n        PercentCheckOk(_fee)\r\n        LeftIsBigger( _fee, PozFee) {\r\n        Fee = _fee;\r\n    }\r\n\r\n    function SetPOZFee(uint16 _fee)\r\n        public\r\n        onlyOwner\r\n        PercentCheckOk(_fee)\r\n        LeftIsBigger( Fee,_fee)\r\n    {\r\n        PozFee = _fee;\r\n    }\r\n\r\n    function WithdrawETHFee(address payable _to) public onlyOwner {\r\n        _to.transfer(address(this).balance); // keeps only fee eth on contract //To Do need to take 16% to burn!!!\r\n    }\r\n\r\n    function WithdrawERC20Fee(address _Token, address _to) public onlyOwner {    \r\n        ERC20(_Token).transfer(_to, FeeMap[_Token]);\r\n        FeeMap[_Token] = 0 ;\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\n\r\ncontract LockedPoolz is Manageable {\r\n    constructor() public {\r\n        Index = 0;\r\n    }\r\n    \r\n    // add contract name\r\n    string public name;\r\n\r\n    event NewPoolCreated(uint256 PoolId, address Token, uint64 FinishTime, uint256 StartAmount, address Owner);\r\n    event PoolOwnershipTransfered(uint256 PoolId, address NewOwner, address OldOwner);\r\n    event PoolApproval(uint256 PoolId, address Spender, uint256 Amount);\r\n\r\n    struct Pool {\r\n        uint64 UnlockTime;\r\n        uint256 Amount;\r\n        address Owner;\r\n        address Token;\r\n        mapping(address => uint) Allowance;\r\n    }\r\n    // transfer ownership\r\n    // allowance\r\n    // split amount\r\n\r\n    mapping(uint256 => Pool) AllPoolz;\r\n    mapping(address => uint256[]) MyPoolz;\r\n    uint256 internal Index;\r\n\r\n    modifier isTokenValid(address _Token){\r\n        require(isTokenWhiteListed(_Token), \"Need Valid ERC20 Token\"); //check if _Token is ERC20\r\n        _;\r\n    }\r\n\r\n    modifier isPoolValid(uint256 _PoolId){\r\n        require(_PoolId < Index, \"Pool does not exist\");\r\n        _;\r\n    }\r\n\r\n    modifier isPoolOwner(uint256 _PoolId){\r\n        require(AllPoolz[_PoolId].Owner == msg.sender, \"You are not Pool Owner\");\r\n        _;\r\n    }\r\n\r\n    modifier isAllowed(uint256 _PoolId, uint256 _amount){\r\n        require(_amount <= AllPoolz[_PoolId].Allowance[msg.sender], \"Not enough Allowance\");\r\n        _;\r\n    }\r\n\r\n    modifier isLocked(uint256 _PoolId){\r\n        require(AllPoolz[_PoolId].UnlockTime > now, \"Pool is Unlocked\");\r\n        _;\r\n    }\r\n\r\n    modifier notZeroAddress(address _address){\r\n        require(_address != address(0x0), \"Zero Address is not allowed\");\r\n        _;\r\n    }\r\n\r\n    modifier isGreaterThanZero(uint256 _num){\r\n        require(_num > 0, \"Array length should be greater than zero\");\r\n        _;\r\n    }\r\n\r\n    modifier isBelowLimit(uint256 _num){\r\n        require(_num <= maxTransactionLimit, \"Max array length limit exceeded\");\r\n        _;\r\n    }\r\n\r\n    function SplitPool(uint256 _PoolId, uint256 _NewAmount , address _NewOwner) internal returns(uint256) {\r\n        Pool storage pool = AllPoolz[_PoolId];\r\n        require(pool.Amount >= _NewAmount, \"Not Enough Amount Balance\");\r\n        uint256 poolAmount = SafeMath.sub(pool.Amount, _NewAmount);\r\n        pool.Amount = poolAmount;\r\n        uint256 poolId = CreatePool(pool.Token, pool.UnlockTime, _NewAmount, _NewOwner);\r\n        return poolId;\r\n    }\r\n\r\n    //create a new pool\r\n    function CreatePool(\r\n        address _Token, //token to lock address\r\n        uint64 _FinishTime, //Until what time the pool will work\r\n        uint256 _StartAmount, //Total amount of the tokens to sell in the pool\r\n        address _Owner // Who the tokens belong to\r\n    ) internal returns(uint256){\r\n        //register the pool\r\n        AllPoolz[Index] = Pool(_FinishTime, _StartAmount, _Owner, _Token);\r\n        MyPoolz[_Owner].push(Index);\r\n        emit NewPoolCreated(Index, _Token, _FinishTime, _StartAmount, _Owner);\r\n        uint256 poolId = Index;\r\n        Index = SafeMath.add(Index, 1); //joke - overflowfrom 0 on int256 = 1.16E77\r\n        return poolId;\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\ncontract LockedControl is LockedPoolz{\r\n\r\n    function TransferPoolOwnership(\r\n        uint256 _PoolId,\r\n        address _NewOwner\r\n    ) external isPoolValid(_PoolId) isPoolOwner(_PoolId) isLocked(_PoolId) notZeroAddress(_NewOwner) {\r\n        Pool storage pool = AllPoolz[_PoolId];\r\n        pool.Owner = _NewOwner;\r\n        emit PoolOwnershipTransfered(_PoolId, _NewOwner, msg.sender);\r\n    }\r\n\r\n    function SplitPoolAmount(\r\n        uint256 _PoolId,\r\n        uint256 _NewAmount,\r\n        address _NewOwner\r\n    ) external isPoolValid(_PoolId) isPoolOwner(_PoolId) isLocked(_PoolId) returns(uint256) {\r\n        uint256 poolId = SplitPool(_PoolId, _NewAmount, _NewOwner);\r\n        return poolId;\r\n    }\r\n\r\n    function ApproveAllowance(\r\n        uint256 _PoolId,\r\n        uint256 _Amount,\r\n        address _Spender\r\n    ) external isPoolValid(_PoolId) isPoolOwner(_PoolId) isLocked(_PoolId) notZeroAddress(_Spender) {\r\n        Pool storage pool = AllPoolz[_PoolId];\r\n        pool.Allowance[_Spender] = _Amount;\r\n        emit PoolApproval(_PoolId, _Spender, _Amount);\r\n    }\r\n\r\n    function GetPoolAllowance(uint256 _PoolId, address _Address) public view isPoolValid(_PoolId) returns(uint256){\r\n        return AllPoolz[_PoolId].Allowance[_Address];\r\n    }\r\n\r\n    function SplitPoolAmountFrom(\r\n        uint256 _PoolId,\r\n        uint256 _Amount,\r\n        address _Address\r\n    ) external isPoolValid(_PoolId) isAllowed(_PoolId, _Amount) isLocked(_PoolId) returns(uint256) {\r\n        uint256 poolId = SplitPool(_PoolId, _Amount, _Address);\r\n        Pool storage pool = AllPoolz[_PoolId];\r\n        uint256 _NewAmount = SafeMath.sub(pool.Allowance[msg.sender], _Amount);\r\n        pool.Allowance[_Address]  = _NewAmount;\r\n        return poolId;\r\n    }\r\n\r\n    function CreateNewPool(\r\n        address _Token, //token to lock address\r\n        uint64 _FinishTime, //Until what time the pool will work\r\n        uint256 _StartAmount, //Total amount of the tokens to sell in the pool\r\n        address _Owner // Who the tokens belong to\r\n    ) public isTokenValid(_Token) notZeroAddress(_Owner) returns(uint256) {\r\n        TransferInToken(_Token, msg.sender, _StartAmount);\r\n        uint256 poolId = CreatePool(_Token, _FinishTime, _StartAmount, _Owner);\r\n        return poolId;\r\n    }\r\n\r\n    function CreateMassPools(\r\n        address _Token,\r\n        uint64[] calldata _FinishTime,\r\n        uint256[] calldata _StartAmount,\r\n        address[] calldata _Owner\r\n    ) external isGreaterThanZero(_Owner.length) isBelowLimit(_Owner.length) returns(uint256, uint256) {\r\n        require(_Owner.length == _FinishTime.length, \"Date Array Invalid\");\r\n        require(_Owner.length == _StartAmount.length, \"Amount Array Invalid\");\r\n        TransferInToken(_Token, msg.sender, getArraySum(_StartAmount));\r\n        uint256 firstPoolId = Index;\r\n        for(uint i=0 ; i < _Owner.length; i++){\r\n            CreatePool(_Token, _FinishTime[i], _StartAmount[i], _Owner[i]);\r\n        }\r\n        uint256 lastPoolId = SafeMath.sub(Index, 1);\r\n        return (firstPoolId, lastPoolId);\r\n    }\r\n\r\n    // create pools with respect to finish time\r\n    function CreatePoolsWrtTime(\r\n        address _Token,\r\n        uint64[] calldata _FinishTime,\r\n        uint256[] calldata _StartAmount,\r\n        address[] calldata _Owner\r\n    )   external \r\n        isGreaterThanZero(_Owner.length)\r\n        isGreaterThanZero(_FinishTime.length)\r\n        isBelowLimit(_Owner.length * _FinishTime.length)\r\n        returns(uint256, uint256)\r\n    {\r\n        require(_Owner.length == _StartAmount.length, \"Amount Array Invalid\");\r\n        TransferInToken(_Token, msg.sender, getArraySum(_StartAmount) * _FinishTime.length);\r\n        uint256 firstPoolId = Index;\r\n        for(uint i=0 ; i < _FinishTime.length ; i++){\r\n            for(uint j=0 ; j < _Owner.length ; j++){\r\n                CreatePool(_Token, _FinishTime[i], _StartAmount[j], _Owner[j]);\r\n            }\r\n        }\r\n        uint256 lastPoolId = SafeMath.sub(Index, 1);\r\n        return (firstPoolId, lastPoolId);\r\n    }\r\n\r\n    function getArraySum(uint256[] calldata _array) internal pure returns(uint256) {\r\n        uint256 sum = 0;\r\n        for(uint i=0 ; i<_array.length ; i++){\r\n            sum = sum + _array[i];\r\n        }\r\n        return sum;\r\n    }\r\n\r\n}\r\n\r\n\r\n\r\n\r\ncontract LockedPoolzData is LockedControl {\r\n    function GetMyPoolsId() public view returns (uint256[] memory) {\r\n        return MyPoolz[msg.sender];\r\n    }\r\n\r\n    function GetPoolData(uint256 _id)\r\n        public\r\n        view\r\n        isPoolValid(_id)\r\n        returns (\r\n            uint64,\r\n            uint256,\r\n            address,\r\n            address\r\n        )\r\n    {\r\n        Pool storage pool = AllPoolz[_id];\r\n        require(pool.Owner == msg.sender || pool.Allowance[msg.sender] > 0, \"Private Information\");\r\n        return (\r\n            AllPoolz[_id].UnlockTime,\r\n            AllPoolz[_id].Amount,\r\n            AllPoolz[_id].Owner,\r\n            AllPoolz[_id].Token\r\n        );\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\ncontract LockedDeal is LockedPoolzData {\r\n    constructor() public {\r\n        StartIndex = 0;\r\n    }\r\n\r\n    uint256 internal StartIndex;\r\n\r\n    //@dev no use of revert to make sure the loop will work\r\n    function WithdrawToken(uint256 _PoolId) public returns (bool) {\r\n        //pool is finished + got left overs + did not took them\r\n        if (\r\n            _PoolId < Index &&\r\n            AllPoolz[_PoolId].UnlockTime <= now &&\r\n            AllPoolz[_PoolId].Amount > 0\r\n        ) {\r\n            TransferToken(\r\n                AllPoolz[_PoolId].Token,\r\n                AllPoolz[_PoolId].Owner,\r\n                AllPoolz[_PoolId].Amount\r\n            );\r\n            AllPoolz[_PoolId].Amount = 0;\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n}","ABI":"[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"PoolId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"Token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"FinishTime\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"StartAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"Owner\",\"type\":\"address\"}],\"name\":\"NewPoolCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"PoolId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"Spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"Amount\",\"type\":\"uint256\"}],\"name\":\"PoolApproval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"PoolId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"NewOwner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"OldOwner\",\"type\":\"address\"}],\"name\":\"PoolOwnershipTransfered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"Amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"From\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"Token\",\"type\":\"address\"}],\"name\":\"TransferIn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"Amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"From\",\"type\":\"address\"}],\"name\":\"TransferInETH\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"Amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"To\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"Token\",\"type\":\"address\"}],\"name\":\"TransferOut\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"Amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"To\",\"type\":\"address\"}],\"name\":\"TransferOutETH\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_PoolId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_Amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_Spender\",\"type\":\"address\"}],\"name\":\"ApproveAllowance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_Token\",\"type\":\"address\"},{\"internalType\":\"uint64[]\",\"name\":\"_FinishTime\",\"type\":\"uint64[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_StartAmount\",\"type\":\"uint256[]\"},{\"internalType\":\"address[]\",\"name\":\"_Owner\",\"type\":\"address[]\"}],\"name\":\"CreateMassPools\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_Token\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"_FinishTime\",\"type\":\"uint64\"},{\"internalType\":\"uint256\",\"name\":\"_StartAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_Owner\",\"type\":\"address\"}],\"name\":\"CreateNewPool\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_Token\",\"type\":\"address\"},{\"internalType\":\"uint64[]\",\"name\":\"_FinishTime\",\"type\":\"uint64[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_StartAmount\",\"type\":\"uint256[]\"},{\"internalType\":\"address[]\",\"name\":\"_Owner\",\"type\":\"address[]\"}],\"name\":\"CreatePoolsWrtTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"GetFee\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"GetMinDuration\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"GetMyPoolsId\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_PoolId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_Address\",\"type\":\"address\"}],\"name\":\"GetPoolAllowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"GetPoolData\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"GovernerContract\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"IsPayble\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PozFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PozTimer\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_fee\",\"type\":\"uint16\"}],\"name\":\"SetFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_minDuration\",\"type\":\"uint16\"}],\"name\":\"SetMinDuration\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_fee\",\"type\":\"uint16\"}],\"name\":\"SetPOZFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pozTimer\",\"type\":\"uint256\"}],\"name\":\"SetPozTimer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_PoolId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_NewAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_NewOwner\",\"type\":\"address\"}],\"name\":\"SplitPoolAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_PoolId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_Amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_Address\",\"type\":\"address\"}],\"name\":\"SplitPoolAmountFrom\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"SwitchIsPayble\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_PoolId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_NewOwner\",\"type\":\"address\"}],\"name\":\"TransferPoolOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"WhiteListId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"WhiteList_Address\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_Token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"WithdrawERC20Fee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"WithdrawETHFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_PoolId\",\"type\":\"uint256\"}],\"name\":\"WithdrawToken\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isTokenFilterOn\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"}],\"name\":\"isTokenWhiteListed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxTransactionLimit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"setGovernerContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newLimit\",\"type\":\"uint256\"}],\"name\":\"setMaxTransactionLimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"setWhiteListAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"setWhiteListId\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapTokenFilter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]","ContractName":"LockedDeal","CompilerVersion":"v0.6.12+commit.27d51765","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://fa9381174d531ae8d7bfb4328c55ae65a9fce8d323e4aee38fb92706e5f01503"}]}