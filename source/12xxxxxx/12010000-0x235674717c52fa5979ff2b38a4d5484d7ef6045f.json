{"status":"1","message":"OK","result":[{"SourceCode":"// Created By BitDNS.vip\r\n// contact : StakeDnsRewardDnsPool\r\n// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.5.8;\r\n\r\n// File: @openzeppelin/contracts/math/SafeMath.sol\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     * - Subtraction cannot overflow.\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        // Solidity only automatically asserts when dividing by 0\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/token/ERC20/IERC20.sol\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP. Does not include\r\n * the optional functions; to access them see {ERC20Detailed}.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n// File: @openzeppelin/contracts/utils/Address.sol\r\n/**\r\n * @dev Collection of functions related to the address type\r\n */\r\nlibrary Address {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * This test is non-exhaustive, and there may be false-negatives: during the\r\n     * execution of a contract's constructor, its address will be reported as\r\n     * not containing a contract.\r\n     *\r\n     * IMPORTANT: It is unsafe to assume that an address for which this\r\n     * function returns false is an externally-owned account (EOA) and not a\r\n     * contract.\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // This method relies in extcodesize, which returns 0 for contracts in\r\n        // construction, since the code is only stored at the end of the\r\n        // constructor execution.\r\n\r\n        uint256 size;\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly { size := extcodesize(account) }\r\n        return size > 0;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/token/ERC20/SafeERC20.sol\r\n/**\r\n * @title SafeERC20\r\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\r\n * contract returns false). Tokens that return no value (and instead revert or\r\n * throw on failure) are also supported, non-reverting calls are assumed to be\r\n * successful.\r\n * To use this library you can add a `using SafeERC20 for ERC20;` statement to your contract,\r\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\r\n */\r\nlibrary SafeERC20 {\r\n    using SafeMath for uint256;\r\n    using Address for address;\r\n\r\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\r\n    }\r\n\r\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\r\n    }\r\n\r\n    /**\r\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\r\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\r\n     * @param token The token targeted by the call.\r\n     * @param data The call data (encoded using abi.encode or one of its variants).\r\n     */\r\n    function callOptionalReturn(IERC20 token, bytes memory data) private {\r\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\r\n        // we're implementing it ourselves.\r\n\r\n        // A Solidity high level call has three parts:\r\n        //  1. The target address is checked to verify it contains contract code\r\n        //  2. The call itself is made, and success asserted\r\n        //  3. The return value is decoded, which in turn checks the size of the returned data.\r\n        // solhint-disable-next-line max-line-length\r\n        require(address(token).isContract(), \"SafeERC20: call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = address(token).call(data);\r\n      \r\n        require(success, \"SafeERC20: low-level call failed\");\r\n\r\n        if (returndata.length > 0) { // Return data is optional\r\n            // solhint-disable-next-line max-line-length\r\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\r\n        }\r\n    }\r\n}\r\n\r\ncontract IMinableERC20 is IERC20 {\r\n    function mint(address account, uint amount) public;\r\n}\r\n\r\ncontract IFdcRewardDnsPool {\r\n    uint256 public totalSupply;\r\n    mapping(address => uint256) public rewards;\r\n    mapping(address => uint256) public balanceOf;\r\n    mapping(address => uint256) public stakeStartOf;\r\n    mapping(address => uint256) public stakeCount;\r\n    mapping(address => mapping(uint256 => uint256)) public stakeAmount;\r\n    mapping(address => mapping(uint256 => uint256)) public stakeTime;\r\n}\r\n\r\ncontract StakeFdcRewardDnsPool {\r\n    using SafeMath for uint256;\r\n    using Address for address;\r\n    using SafeERC20 for IERC20;\r\n    using SafeERC20 for IMinableERC20;\r\n\r\n    IERC20 public stakeToken;\r\n    IERC20 public rewardToken;\r\n    \r\n    bool public started;\r\n    uint256 public _totalSupply;\r\n    uint256 public rewardFinishTime = 0;\r\n    uint256 public rewardRate = 0;\r\n    mapping(address => uint256) public rewards;\r\n    mapping(address => uint256) public rewardedOf;\r\n    mapping(address => uint256) public _balanceOf;\r\n    mapping(address => uint256) public _stakeStartOf;\r\n    mapping(address => uint256) public _stakeCount;\r\n    mapping(address => mapping(uint256 => uint256)) public _stakeAmount;\r\n    mapping(address => mapping(uint256 => uint256)) public _stakeTime;\r\n    address private governance;\r\n    IFdcRewardDnsPool private pool;\r\n\r\n    event Staked(address indexed user, uint256 amount, uint256 beforeT, uint256 afterT);\r\n    event Withdrawn(address indexed user, uint256 amount, uint256 beforeT, uint256 afterT);\r\n    event RewardPaid(address indexed user, uint256 reward, uint256 beforeT, uint256 afterT);\r\n    event StakeItem(address indexed user, uint256 idx, uint256 time, uint256 amount);\r\n    event UnstakeItem(address indexed user, uint256 idx, uint256 time, uint256 beforeT, uint256 afterT);\r\n\r\n    modifier onlyOwner() {\r\n        require(msg.sender == governance, \"!governance\");\r\n        _;\r\n    }\r\n\r\n    constructor () public {\r\n        governance = msg.sender;\r\n    }\r\n\r\n    function start(address stake_token, address reward_token, address pool_addr) public onlyOwner {\r\n        require(!started, \"already started\");\r\n        require(stake_token != address(0) && stake_token.isContract(), \"stake token is non-contract\");\r\n        require(reward_token != address(0) && reward_token.isContract(), \"reward token is non-contract\");\r\n\r\n        started = true;\r\n        stakeToken = IERC20(stake_token);\r\n        rewardToken = IERC20(reward_token);\r\n        pool = IFdcRewardDnsPool(pool_addr);\r\n        rewardFinishTime = block.timestamp.add(10 * 365.25 days);\r\n    }\r\n\r\n    function lastTimeRewardApplicable() internal view returns (uint256) {\r\n        return block.timestamp < rewardFinishTime ? block.timestamp : rewardFinishTime;\r\n    }\r\n\r\n    function earned(address account) public view returns (uint256) {\r\n        uint256 r = 0;\r\n        uint256 stakeIndex = stakeCount(account);\r\n        for (uint256 i = 0; i < stakeIndex; i++) {\r\n            if (stakeAmount(account, i) > 0) {\r\n                r = r.add(calcReward(stakeAmount(account, i), stakeTime(account, i), lastTimeRewardApplicable()));\r\n            }\r\n        }\r\n        return r.add(rewards[account]).sub(rewardedOf[account]);\r\n    }\r\n\r\n    function stake(uint256 amount) public {\r\n        require(started, \"Not start yet\");\r\n        require(amount > 0, \"Cannot stake 0\");\r\n        require(stakeToken.balanceOf(msg.sender) >= amount, \"insufficient balance to stake\");\r\n        uint256 beforeT = stakeToken.balanceOf(address(this));\r\n        \r\n        stakeToken.safeTransferFrom(msg.sender, address(this), amount);\r\n        _totalSupply = _totalSupply.add(amount);\r\n        _balanceOf[msg.sender] = _balanceOf[msg.sender].add(amount);\r\n        \r\n        uint256 afterT = stakeToken.balanceOf(address(this));\r\n        emit Staked(msg.sender, amount, beforeT, afterT);\r\n\r\n        if (_stakeStartOf[msg.sender] == 0) {\r\n            _stakeStartOf[msg.sender] = block.timestamp;\r\n        }\r\n        uint256 stakeIndex = _stakeCount[msg.sender];\r\n        _stakeAmount[msg.sender][stakeIndex] = amount;\r\n        _stakeTime[msg.sender][stakeIndex] = block.timestamp;\r\n        _stakeCount[msg.sender] = _stakeCount[msg.sender].add(1);\r\n        rewardRate = totalSupply().mul(100).div(160 days);\r\n        emit StakeItem(msg.sender, stakeIndex, block.timestamp, amount);\r\n    }\r\n\r\n    function calcReward(uint256 amount, uint256 startTime, uint256 endTime) public pure returns (uint256) {\r\n        uint256 day = endTime.sub(startTime).div(1 days);\r\n        return amount.mul(25 * (day > 160 ? 160 : day));\r\n    }\r\n\r\n    function _unstake(address account, uint256 amount) private returns (uint256) {\r\n        uint256 unstakeAmount = 0;\r\n        uint256 stakeIndex = _stakeCount[msg.sender];\r\n        for (uint256 i = 0; i < stakeIndex; i++) {\r\n            uint256 itemAmount = _stakeAmount[msg.sender][i];\r\n            if (itemAmount == 0) {\r\n                continue;\r\n            }\r\n            if (unstakeAmount.add(itemAmount) > amount) {\r\n                itemAmount = amount.sub(unstakeAmount);\r\n            }\r\n            unstakeAmount = unstakeAmount.add(itemAmount);\r\n            _stakeAmount[msg.sender][i] = _stakeAmount[msg.sender][i].sub(itemAmount);\r\n            rewards[msg.sender] = rewards[msg.sender].add(calcReward(itemAmount, _stakeTime[msg.sender][i], lastTimeRewardApplicable()));\r\n            emit UnstakeItem(account, i, block.timestamp, _stakeAmount[msg.sender][i].add(itemAmount), _stakeAmount[msg.sender][i]);\r\n        }\r\n        return unstakeAmount;\r\n    }\r\n\r\n    function withdraw(uint256 amount) public {\r\n        require(started, \"Not start yet\");\r\n        require(amount > 0, \"Cannot withdraw 0\");\r\n        require(_balanceOf[msg.sender] >= amount, \"Insufficient balance to withdraw\");\r\n\r\n        // Add Lock Time Begin:\r\n        require(canWithdraw(msg.sender), \"Must be locked for 30 days or Mining ended\");\r\n        uint256 unstakeAmount = _unstake(msg.sender, amount);\r\n        // Add Lock Time End!!!\r\n\r\n        uint256 beforeT = stakeToken.balanceOf(address(this));\r\n        \r\n        _totalSupply = _totalSupply.sub(unstakeAmount);\r\n        _balanceOf[msg.sender] = _balanceOf[msg.sender].sub(unstakeAmount);\r\n        stakeToken.safeTransfer(msg.sender, unstakeAmount);\r\n\r\n        uint256 afterT = stakeToken.balanceOf(address(this));\r\n        rewardRate = totalSupply().mul(100).div(160 days);\r\n        emit Withdrawn(msg.sender, unstakeAmount, beforeT, afterT);\r\n    }\r\n\r\n    function exit() external {\r\n        require(started, \"Not start yet\");\r\n        withdraw(_balanceOf[msg.sender]);\r\n        getReward();\r\n    }\r\n\r\n    function getReward() public {\r\n        require(started, \"Not start yet\");\r\n        \r\n        uint256 reward = earned(msg.sender);\r\n        if (reward > 0) {\r\n            rewardedOf[msg.sender] = rewardedOf[msg.sender].add(reward);\r\n            uint256 beforeT = rewardToken.balanceOf(address(this));\r\n            //rewardToken.mint(msg.sender, reward);\r\n            rewardToken.safeTransfer(msg.sender, reward);\r\n            uint256 afterT = rewardToken.balanceOf(address(this));\r\n            emit RewardPaid(msg.sender, reward, beforeT, afterT);\r\n        }\r\n    }\r\n\r\n    function refoudStakeToken(address account, uint256 amount) public onlyOwner {\r\n        stakeToken.safeTransfer(account, amount);\r\n    }\r\n\r\n    function refoudRewardToken(address account, uint256 amount) public onlyOwner {\r\n        rewardToken.safeTransfer(account, amount);\r\n    }\r\n    \r\n    function canHarvest(address account) public view returns (bool) {\r\n        return earned(account) > 0;\r\n    }\r\n\r\n    // Add Lock Time Begin:\r\n    function canWithdraw(address account) public view returns (bool) {\r\n        return started && (_balanceOf[account] > 0) && false;\r\n    }\r\n    // Add Lock Time End!!!\r\n\r\n    function totalSupply_() public view returns (uint256) {\r\n        return pool.totalSupply();\r\n    }\r\n    \r\n    function rewards_(address account) public view returns (uint256) {\r\n        return pool.rewards(account);\r\n    }\r\n\r\n    function balanceOf_(address account) public view returns (uint256) {\r\n        return pool.balanceOf(account);\r\n    }\r\n\r\n    function stakeStartOf_(address account) public view returns (uint256) {\r\n        return pool.stakeStartOf(account);\r\n    }\r\n\r\n    function stakeCount_(address account) public view returns (uint256) {\r\n        return pool.stakeCount(account);\r\n    }\r\n\r\n    function stakeAmount_(address account, uint256 idx) public view returns (uint256) {\r\n        return pool.stakeAmount(account, idx);\r\n    }\r\n\r\n    function stakeTime_(address account, uint256 idx) public view returns (uint256) {\r\n        return pool.stakeTime(account, idx);\r\n    }\r\n\r\n    function totalSupply() public view returns (uint256) {\r\n        return pool.totalSupply().add(_totalSupply);\r\n    }\r\n\r\n    function balanceOf(address account) public view returns (uint256) {\r\n        return pool.balanceOf(account).add(_balanceOf[account]);\r\n    }\r\n\r\n    function stakeStartOf(address account) public view returns (uint256) {\r\n        return pool.stakeStartOf(account) > 0 && _stakeStartOf[account] > 0\r\n            ? (_stakeStartOf[account] < pool.stakeStartOf(account) ? _stakeStartOf[account] : pool.stakeStartOf(account))\r\n            : (_stakeStartOf[account] > 0 ? _stakeStartOf[account] : pool.stakeStartOf(account));\r\n    }\r\n\r\n    function stakeCount(address account) public view returns (uint256) {\r\n        return pool.stakeCount(account).add(_stakeCount[account]);\r\n    }\r\n\r\n    function stakeAmount(address account, uint256 idx) public view returns (uint256) {\r\n        uint256 count = pool.stakeCount(account);\r\n        return idx < count ? pool.stakeAmount(account, idx) \r\n            : ((idx < count.add(_stakeCount[account])) ? _stakeAmount[account][idx.sub(count)] : 0);\r\n    }\r\n\r\n    function stakeTime(address account, uint256 idx) public view returns (uint256) {\r\n        uint256 count = pool.stakeCount(account);\r\n        return idx < count ? pool.stakeTime(account, idx) \r\n            : ((idx < count.add(_stakeCount[account])) ? _stakeTime[account][idx.sub(count)] : 0);\r\n    }\r\n}","ABI":"[{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"beforeT\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"afterT\",\"type\":\"uint256\"}],\"name\":\"RewardPaid\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"idx\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"StakeItem\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"beforeT\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"afterT\",\"type\":\"uint256\"}],\"name\":\"Staked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"idx\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"beforeT\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"afterT\",\"type\":\"uint256\"}],\"name\":\"UnstakeItem\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"beforeT\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"afterT\",\"type\":\"uint256\"}],\"name\":\"Withdrawn\",\"type\":\"event\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"_stakeAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_stakeCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_stakeStartOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"_stakeTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"_totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf_\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"startTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endTime\",\"type\":\"uint256\"}],\"name\":\"calcReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"canHarvest\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"canWithdraw\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"earned\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"exit\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"getReward\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"refoudRewardToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"refoudStakeToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"rewardFinishTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"rewardRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"rewardToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"rewardedOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"rewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"rewards_\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"stake\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"idx\",\"type\":\"uint256\"}],\"name\":\"stakeAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"idx\",\"type\":\"uint256\"}],\"name\":\"stakeAmount_\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"stakeCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"stakeCount_\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"stakeStartOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"stakeStartOf_\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"idx\",\"type\":\"uint256\"}],\"name\":\"stakeTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"idx\",\"type\":\"uint256\"}],\"name\":\"stakeTime_\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"stakeToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"stake_token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"reward_token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"pool_addr\",\"type\":\"address\"}],\"name\":\"start\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"started\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply_\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"StakeFdcRewardDnsPool","CompilerVersion":"v0.5.17+commit.d19bba13","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"bzzr://8b18690b7c5a3ad8f8fadcffe9e23c2a1d2a0c437e1bba3d29760672ebff948f"}]}