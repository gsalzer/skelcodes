{"status":"1","message":"OK","result":[{"SourceCode":"{\"cryptocartToken.sol\":{\"content\":\"/**\\n *Submitted for verification at Etherscan.io on 2021-03-27\\n*/\\n\\n// SPDX-License-Identifier: UNLICENSED\\n\\npragma solidity ^0.7.0;\\n\\nabstract contract Context {\\n    \\n    function _msgSender() internal view virtual returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this;\\n        return msg.data;\\n    }\\n}\\n\\ninterface IERC20 {\\n  \\n    function totalSupply() external view returns (uint256);\\n\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\\nlibrary SafeMath {\\n  \\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c \\u003e= a, \\\"SafeMath: addition overflow\\\");\\n        return c;\\n    }\\n\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return sub(a, b, \\\"SafeMath: subtraction overflow\\\");\\n    }\\n\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b \\u003c= a, errorMessage);\\n        uint256 c = a - b;\\n        return c;\\n    }\\n\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n        return c;\\n    }\\n\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\n    }\\n\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b \\u003e 0, errorMessage);\\n        uint256 c = a / b;\\n        return c;\\n    }\\n\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return mod(a, b, \\\"SafeMath: modulo by zero\\\");\\n    }\\n\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b != 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\\ncontract ERC20 is Context, IERC20 {\\n    \\n    using SafeMath for uint256;\\n\\n    mapping (address =\\u003e uint256) private _balances;\\n\\n    mapping (address =\\u003e mapping (address =\\u003e uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n    string private _name;\\n    string private _symbol;\\n    uint8 private _decimals;\\n\\n    constructor (string memory name_, string memory symbol_, uint8 decimals_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n        _decimals = decimals_;\\n    }\\n\\n    function name() public view returns (string memory) {\\n        return _name;\\n    }\\n\\n    function symbol() public view returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    function decimals() public view returns (uint8) {\\n        return _decimals;\\n    }\\n\\n    function totalSupply() public view override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    function balanceOf(address account) public view override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(_msgSender(), recipient, amount);\\n        return true;\\n    }\\n\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        _approve(_msgSender(), spender, amount);\\n        return true;\\n    }\\n\\n    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(sender, recipient, amount);\\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \\\"ERC20: transfer amount exceeds allowance\\\"));\\n        return true;\\n    }\\n\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\\n        return true;\\n    }\\n\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \\\"ERC20: decreased allowance below zero\\\"));\\n        return true;\\n    }\\n\\n    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\\n        require(sender != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(recipient != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(sender, recipient, amount);\\n\\n        _balances[sender] = _balances[sender].sub(amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        _balances[recipient] = _balances[recipient].add(amount);\\n        emit Transfer(sender, recipient, amount);\\n    }\\n\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply = _totalSupply.add(amount);\\n        _balances[account] = _balances[account].add(amount);\\n        emit Transfer(address(0), account, amount);\\n    }\\n\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        _balances[account] = _balances[account].sub(amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        _totalSupply = _totalSupply.sub(amount);\\n        emit Transfer(account, address(0), amount);\\n    }\\n\\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    function _setupDecimals(uint8 decimals_) internal virtual {\\n        _decimals = decimals_;\\n    }\\n\\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual { }\\n}\\n\\ncontract CryptoCart is ERC20 {\\n    \\n    using SafeMath for uint256;\\n    \\n    uint8 public constant _decimals = 18;\\n    uint256 private _totalSupply = 1000000 * (10 ** uint256(_decimals));\\n    address private _cryptoCartDeployer;\\n\\n    constructor(address _deployer) ERC20(\\\"CryptoCart\\\", \\\"CC\\\", _decimals) {\\n        _cryptoCartDeployer = _deployer;\\n        _mint(_cryptoCartDeployer, _totalSupply);\\n    }\\n\\n    function burn(uint256 amount) public {\\n        _burn(msg.sender, amount);\\n    }\\n}\"},\"ethBridge.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.7.6;\\n\\nimport \\\"./multiOwnable.sol\\\";\\nimport \\\"./cryptocartToken.sol\\\";\\n\\ncontract ethBridge is Multiownable {\\n    CryptoCart private token;\\n\\n    mapping(address =\\u003e uint256) public tokensSent;\\n    mapping(address =\\u003e uint256) public tokensRecieved;\\n    mapping(address =\\u003e uint256) public tokensRecievedButNotSent;\\n \\n    address public tokenAddress; \\n    \\n    constructor (address _token) {\\n        tokenAddress = _token;\\n        token = CryptoCart(_token);\\n    }\\n \\n    bool transferStatus;\\n    \\n    bool avoidReentrancy = false;\\n \\n    function sendTokens(uint256 amount) public {\\n        require(msg.sender != address(0), \\\"Zero account\\\");\\n        require(amount \\u003e 0,\\\"Amount of tokens should be more then 0\\\");\\n        require(token.balanceOf(msg.sender) \\u003e= amount,\\\"Not enough balance\\\");\\n        \\n        transferStatus = token.transferFrom(msg.sender, address(this), amount);\\n        if (transferStatus == true) {\\n            tokensRecieved[msg.sender] += amount;\\n        }\\n    }\\n \\n    function writeTransaction(address user, uint256 amount) public onlyAllOwners {\\n        require(user != address(0), \\\"Zero account\\\");\\n        require(amount \\u003e 0,\\\"Amount of tokens should be more then 0\\\");\\n        require(!avoidReentrancy);\\n        \\n        avoidReentrancy = true;\\n        tokensRecievedButNotSent[user] += amount;\\n        avoidReentrancy = false;\\n    }\\n\\n    function recieveTokens(uint256[] memory commissions) public payable {\\n        if (tokensRecievedButNotSent[msg.sender] != 0) {\\n            require(commissions.length == owners.length, \\\"The number of commissions and owners does not match\\\");\\n            uint256 sum;\\n            for(uint i = 0; i \\u003c commissions.length; i++) {\\n                sum += commissions[i];\\n            }\\n            require(msg.value \\u003e= sum, \\\"Not enough BNB (The amount of BNB is less than the amount of commissions.)\\\");\\n            require(msg.value \\u003e= owners.length * 150000 * 10**9, \\\"Not enough BNB (The amount of BNB is less than the internal commission.)\\\");\\n        \\n            for (uint i = 0; i \\u003c owners.length; i++) {\\n                address payable owner = payable(owners[i]);\\n                uint256 commission = commissions[i];\\n                owner.transfer(commission);\\n            }\\n            \\n            uint256 amountToSent;\\n            \\n            amountToSent = tokensRecievedButNotSent[msg.sender] - tokensSent[msg.sender];\\n            transferStatus = token.transfer(msg.sender, amountToSent);\\n            if (transferStatus == true) {\\n                tokensSent[msg.sender] += amountToSent;\\n            }\\n        }\\n    }\\n \\n    function withdrawTokens(uint256 amount, address reciever) public onlyAllOwners {\\n        require(amount \\u003e 0,\\\"Amount of tokens should be more then 0\\\");\\n        require(reciever != address(0), \\\"Zero account\\\");\\n        require(token.balanceOf(address(this)) \\u003e= amount,\\\"Not enough balance\\\");\\n        \\n        token.transfer(reciever, amount);\\n    }\\n    \\n    function withdrawEther(uint256 amount, address payable reciever) public onlyAllOwners {\\n        require(amount \\u003e 0,\\\"Amount of tokens should be more then 0\\\");\\n        require(reciever != address(0), \\\"Zero account\\\");\\n        require(address(this).balance \\u003e= amount,\\\"Not enough balance\\\");\\n\\n        reciever.transfer(amount);\\n    }\\n}\"},\"multiOwnable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.7.6;\\n\\ncontract Multiownable {\\n\\n    // VARIABLES\\n\\n    uint256 public ownersGeneration;\\n    uint256 public howManyOwnersDecide;\\n    address[] public owners;\\n    bytes32[] public allOperations;\\n    address internal insideCallSender;\\n    uint256 internal insideCallCount;\\n\\n    // Reverse lookup tables for owners and allOperations\\n    mapping(address =\\u003e uint) public ownersIndices; // Starts from 1\\n    mapping(bytes32 =\\u003e uint) public allOperationsIndicies;\\n\\n    // Owners voting mask per operations\\n    mapping(bytes32 =\\u003e uint256) public votesMaskByOperation;\\n    mapping(bytes32 =\\u003e uint256) public votesCountByOperation;\\n\\n    // EVENTS\\n\\n    event OwnershipTransferred(address[] previousOwners, uint howManyOwnersDecide, address[] newOwners, uint newHowManyOwnersDecide);\\n    event OperationCreated(bytes32 operation, uint howMany, uint ownersCount, address proposer);\\n    event OperationUpvoted(bytes32 operation, uint votes, uint howMany, uint ownersCount, address upvoter);\\n    event OperationPerformed(bytes32 operation, uint howMany, uint ownersCount, address performer);\\n    event OperationDownvoted(bytes32 operation, uint votes, uint ownersCount,  address downvoter);\\n    event OperationCancelled(bytes32 operation, address lastCanceller);\\n    \\n    // ACCESSORS\\n\\n    function isOwner(address wallet) public view returns(bool) {\\n        return ownersIndices[wallet] \\u003e 0;\\n    }\\n\\n    function ownersCount() public view returns(uint) {\\n        return owners.length;\\n    }\\n\\n    function allOperationsCount() public view returns(uint) {\\n        return allOperations.length;\\n    }\\n\\n    // MODIFIERS\\n\\n    /**\\n    * @dev Allows to perform method by any of the owners\\n    */\\n    modifier onlyAnyOwner {\\n        if (checkHowManyOwners(1)) {\\n            bool update = (insideCallSender == address(0));\\n            if (update) {\\n                insideCallSender = msg.sender;\\n                insideCallCount = 1;\\n            }\\n            _;\\n            if (update) {\\n                insideCallSender = address(0);\\n                insideCallCount = 0;\\n            }\\n        }\\n    }\\n\\n    /**\\n    * @dev Allows to perform method only after many owners call it with the same arguments\\n    */\\n    modifier onlyManyOwners {\\n        if (checkHowManyOwners(howManyOwnersDecide)) {\\n            bool update = (insideCallSender == address(0));\\n            if (update) {\\n                insideCallSender = msg.sender;\\n                insideCallCount = howManyOwnersDecide;\\n            }\\n            _;\\n            if (update) {\\n                insideCallSender = address(0);\\n                insideCallCount = 0;\\n            }\\n        }\\n    }\\n\\n    /**\\n    * @dev Allows to perform method only after all owners call it with the same arguments\\n    */\\n    modifier onlyAllOwners {\\n        if (checkHowManyOwners(owners.length)) {\\n            bool update = (insideCallSender == address(0));\\n            if (update) {\\n                insideCallSender = msg.sender;\\n                insideCallCount = owners.length;\\n            }\\n            _;\\n            if (update) {\\n                insideCallSender = address(0);\\n                insideCallCount = 0;\\n            }\\n        }\\n    }\\n\\n    /**\\n    * @dev Allows to perform method only after some owners call it with the same arguments\\n    */\\n    modifier onlySomeOwners(uint howMany) {\\n        require(howMany \\u003e 0, \\\"onlySomeOwners: howMany argument is zero\\\");\\n        require(howMany \\u003c= owners.length, \\\"onlySomeOwners: howMany argument exceeds the number of owners\\\");\\n        \\n        if (checkHowManyOwners(howMany)) {\\n            bool update = (insideCallSender == address(0));\\n            if (update) {\\n                insideCallSender = msg.sender;\\n                insideCallCount = howMany;\\n            }\\n            _;\\n            if (update) {\\n                insideCallSender = address(0);\\n                insideCallCount = 0;\\n            }\\n        }\\n    }\\n\\n    // CONSTRUCTOR\\n\\n    constructor() {\\n        owners.push(msg.sender);\\n        ownersIndices[msg.sender] = 1;\\n        howManyOwnersDecide = 1;\\n    }\\n\\n    // INTERNAL METHODS\\n\\n    /**\\n     * @dev onlyManyOwners modifier helper\\n     */\\n    function checkHowManyOwners(uint howMany) internal returns(bool) {\\n        if (insideCallSender == msg.sender) {\\n            require(howMany \\u003c= insideCallCount, \\\"checkHowManyOwners: nested owners modifier check require more owners\\\");\\n            return true;\\n        }\\n\\n        uint ownerIndex = ownersIndices[msg.sender] - 1;\\n        require(ownerIndex \\u003c owners.length, \\\"checkHowManyOwners: msg.sender is not an owner\\\");\\n        bytes32 operation = keccak256(abi.encodePacked(msg.data, ownersGeneration));\\n\\n        require((votesMaskByOperation[operation] \\u0026 (2 ** ownerIndex)) == 0, \\\"checkHowManyOwners: owner already voted for the operation\\\");\\n        votesMaskByOperation[operation] |= (2 ** ownerIndex);\\n        uint operationVotesCount = votesCountByOperation[operation] + 1;\\n        votesCountByOperation[operation] = operationVotesCount;\\n        if (operationVotesCount == 1) {\\n            allOperationsIndicies[operation] = allOperations.length;\\n            allOperations.push(operation);\\n            emit OperationCreated(operation, howMany, owners.length, msg.sender);\\n        }\\n        emit OperationUpvoted(operation, operationVotesCount, howMany, owners.length, msg.sender);\\n\\n        // If enough owners confirmed the same operation\\n        if (votesCountByOperation[operation] == howMany) {\\n            deleteOperation(operation);\\n            emit OperationPerformed(operation, howMany, owners.length, msg.sender);\\n            return true;\\n        }\\n\\n        return false;\\n    }\\n\\n    /**\\n    * @dev Used to delete cancelled or performed operation\\n    * @param operation defines which operation to delete\\n    */\\n    function deleteOperation(bytes32 operation) internal {\\n        uint index = allOperationsIndicies[operation];\\n        if (index \\u003c allOperations.length - 1) { // Not last\\n            allOperations[index] = allOperations[allOperations.length - 1];\\n            allOperationsIndicies[allOperations[index]] = index;\\n        }\\n        //allOperations.length-1\\n        allOperations.pop();\\n\\n        delete votesMaskByOperation[operation];\\n        delete votesCountByOperation[operation];\\n        delete allOperationsIndicies[operation];\\n    }\\n\\n    // PUBLIC METHODS\\n\\n    /**\\n    * @dev Allows owners to change their mind by cacnelling votesMaskByOperation operations\\n    * @param operation defines which operation to delete\\n    */\\n    function cancelPending(bytes32 operation) public onlyAnyOwner {\\n        uint ownerIndex = ownersIndices[msg.sender] - 1;\\n        require((votesMaskByOperation[operation] \\u0026 (2 ** ownerIndex)) != 0, \\\"cancelPending: operation not found for this user\\\");\\n        votesMaskByOperation[operation] \\u0026= ~(2 ** ownerIndex);\\n        uint operationVotesCount = votesCountByOperation[operation] - 1;\\n        votesCountByOperation[operation] = operationVotesCount;\\n        emit OperationDownvoted(operation, operationVotesCount, owners.length, msg.sender);\\n        if (operationVotesCount == 0) {\\n            deleteOperation(operation);\\n            emit OperationCancelled(operation, msg.sender);\\n        }\\n    }\\n\\n    /**\\n    * @dev Allows owners to change ownership\\n    * @param newOwners defines array of addresses of new owners\\n    */\\n    function transferOwnership(address[] memory newOwners) public {\\n        transferOwnershipWithHowMany(newOwners, newOwners.length);\\n    }\\n\\n    /**\\n    * @dev Allows owners to change ownership\\n    * @param newOwners defines array of addresses of new owners\\n    * @param newHowManyOwnersDecide defines how many owners can decide\\n    */\\n    function transferOwnershipWithHowMany(address[] memory newOwners, uint256 newHowManyOwnersDecide) public onlyManyOwners {\\n        require(newOwners.length \\u003e 0, \\\"transferOwnershipWithHowMany: owners array is empty\\\");\\n        require(newOwners.length \\u003c= 256, \\\"transferOwnershipWithHowMany: owners count is greater then 256\\\");\\n        require(newHowManyOwnersDecide \\u003e 0, \\\"transferOwnershipWithHowMany: newHowManyOwnersDecide equal to 0\\\");\\n        require(newHowManyOwnersDecide \\u003c= newOwners.length, \\\"transferOwnershipWithHowMany: newHowManyOwnersDecide exceeds the number of owners\\\");\\n\\n        // Reset owners reverse lookup table\\n        for (uint j = 0; j \\u003c owners.length; j++) {\\n            delete ownersIndices[owners[j]];\\n        }\\n        for (uint i = 0; i \\u003c newOwners.length; i++) {\\n            require(newOwners[i] != address(0), \\\"transferOwnershipWithHowMany: owners array contains zero\\\");\\n            require(ownersIndices[newOwners[i]] == 0, \\\"transferOwnershipWithHowMany: owners array contains duplicates\\\");\\n            ownersIndices[newOwners[i]] = i + 1;\\n        }\\n        \\n        emit OwnershipTransferred(owners, howManyOwnersDecide, newOwners, newHowManyOwnersDecide);\\n        owners = newOwners;\\n        howManyOwnersDecide = newHowManyOwnersDecide;\\n        // allOperations.length = 0;\\n        allOperations.push();\\n        ownersGeneration++;\\n    }\\n\\n}\"}}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"operation\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"lastCanceller\",\"type\":\"address\"}],\"name\":\"OperationCancelled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"operation\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"howMany\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"ownersCount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"proposer\",\"type\":\"address\"}],\"name\":\"OperationCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"operation\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"votes\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"ownersCount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"downvoter\",\"type\":\"address\"}],\"name\":\"OperationDownvoted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"operation\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"howMany\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"ownersCount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"performer\",\"type\":\"address\"}],\"name\":\"OperationPerformed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"operation\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"votes\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"howMany\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"ownersCount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"upvoter\",\"type\":\"address\"}],\"name\":\"OperationUpvoted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"previousOwners\",\"type\":\"address[]\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"howManyOwnersDecide\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"newOwners\",\"type\":\"address[]\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newHowManyOwnersDecide\",\"type\":\"uint256\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"allOperations\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"allOperationsCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"allOperationsIndicies\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"operation\",\"type\":\"bytes32\"}],\"name\":\"cancelPending\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"howManyOwnersDecide\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"}],\"name\":\"isOwner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"owners\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ownersCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ownersGeneration\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"ownersIndices\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"commissions\",\"type\":\"uint256[]\"}],\"name\":\"recieveTokens\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"sendTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"tokensRecieved\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"tokensRecievedButNotSent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"tokensSent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"newOwners\",\"type\":\"address[]\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"newOwners\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"newHowManyOwnersDecide\",\"type\":\"uint256\"}],\"name\":\"transferOwnershipWithHowMany\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"votesCountByOperation\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"votesMaskByOperation\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address payable\",\"name\":\"reciever\",\"type\":\"address\"}],\"name\":\"withdrawEther\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"reciever\",\"type\":\"address\"}],\"name\":\"withdrawTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"writeTransaction\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"ethBridge","CompilerVersion":"v0.7.6+commit.7338295f","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"0000000000000000000000009e547061a345015869d26c7b6ee4ab5b63424441","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"ipfs://07b731342edcebd702d18eb15aeb143fb8620e320cd73066d767b9d0147b1840"}]}