{"status":"1","message":"OK","result":[{"SourceCode":"/**\r\n *Submitted for verification at hecoinfo.com on 2021-06-21\r\n*/\r\n\r\n// File: localhost/interface/IERC20.sol\r\n\r\n//SPDX-License-Identifier: SimPL-2.0\r\npragma solidity ^0.6.0;\r\n\r\ninterface IERC20 {\r\n\r\n    function name() external view returns (string memory);\r\n\r\n    function symbol() external view returns (string memory);\r\n\r\n    function decimals() external view returns (uint8);\r\n\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `amount` tokens are moved from one account (`sender`) to\r\n     * another (`recipient`).\r\n     *\r\n     * Note that `amount` may be zero.\r\n     */\r\n    event Transfer(address indexed sender, address indexed recipient, uint256 amount);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `amount` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 amount);\r\n}\r\n// File: localhost/base/Rootable.sol\r\n\r\n//SPDX-License-Identifier: SimPL-2.0\r\npragma solidity ^0.6.0;\r\n\r\ncontract Rootable {\r\n\r\n    address internal _ROOT_;\r\n    bool internal _INIT_;\r\n\r\n    event RootTransferred(address indexed previousRoot, address indexed newRoot);\r\n\r\n    modifier notInit() {\r\n        require(!_INIT_, \"INITIALIZED\");\r\n        _;\r\n    }\r\n\r\n    function initRoot(address newRoot) internal notInit {\r\n        _INIT_ = true;\r\n        _ROOT_ = newRoot;\r\n\r\n        emit RootTransferred(address(0), newRoot);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current root.\r\n     */\r\n    function root() public view returns (address) {\r\n        return _ROOT_;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the root.\r\n     */\r\n    modifier onlyRoot() {\r\n        require(_ROOT_ == msg.sender, \"YouSwap: CALLER_IS_NOT_THE_ROOT\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without root. It will not be possible to call\r\n     * `onlyRoot` functions anymore. Can only be called by the current root.\r\n     *\r\n     * NOTE: Renouncing root will leave the contract without an root,\r\n     * thereby removing any functionality that is only available to the root.\r\n     */\r\n    function renounceRoot() public onlyRoot {\r\n        emit RootTransferred(_ROOT_, address(0));\r\n        _ROOT_ = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers root of the contract to a new account (`newRoot`).\r\n     * Can only be called by the current root.\r\n     */\r\n    function transferRoot(address newRoot) public onlyRoot {\r\n        require(newRoot != address(0), \"NEW_ROOT_IS_THE_ZERO_ADDRESS\");\r\n        emit RootTransferred(_ROOT_, newRoot);\r\n        _ROOT_ = newRoot;\r\n    }\r\n}\r\n// File: localhost/interface/IPoolFactory.sol\r\n\r\n//SPDX-License-Identifier: SimPL-2.0\r\npragma solidity ^0.6.0;\r\n\r\ninterface IPoolFactory {\r\n\r\n    function createPriPool(\r\n        string calldata _proName,\r\n        uint256 _startTime,\r\n        uint256 _endTime,\r\n        address _tokenIn,\r\n        address _tokenOut,\r\n        uint256 _tokenOutSupply,\r\n        uint256 _upperLimitOfTokenIn,\r\n        uint256 _tokenOutPrice\r\n    ) external returns (address newPool);\r\n\r\n    function createPubPool(\r\n        string calldata _proName,\r\n        uint256 _startTime,\r\n        uint256 _endTime,\r\n        address _tokenIn,\r\n        address _tokenOut,\r\n        uint256 _targetAmountOfTokenIn,\r\n        uint256 _targetAmountOfTokenOut,\r\n        uint256 _bottomLimitOfTokenIn\r\n    ) external returns (address newPool);\r\n\r\n    function addTokenInToWhiteList(address tokenIn) external;\r\n\r\n    function removeTokenInFromWhiteList(address tokenIn) external;\r\n\r\n    function tokenInWhiteList(address tokenIn) external view returns (bool);\r\n\r\n    function getPools() external view returns (address[] memory pools);\r\n\r\n    function getPoolsByCreator(address creator) external view returns (address[] memory pools);\r\n\r\n    function getPoolsByParticipant(address creator) external view returns (address[] memory pools);\r\n\r\n    function enroll(address participant, address pool) external returns (bool);\r\n\r\n    function getPoolInfo(address poolAddr) external view returns (\r\n        string memory proName,\r\n        uint256 tokenOutPrice,\r\n        string memory tokenInSymbol,\r\n        string memory tokenOutSymbol,\r\n        uint8 poolType,\r\n        uint8 state,\r\n        bool homePageShow,\r\n        string memory proLink\r\n    );\r\n}\r\n\r\n// File: localhost/interface/IPool.sol\r\n\r\n//SPDX-License-Identifier: SimPL-2.0\r\npragma solidity ^0.6.0;\r\n\r\ninterface IPool {\r\n\r\n    struct Participation {\r\n        uint256 timeStamp;\r\n        uint256 amountOfTokenIn;\r\n        uint256 availableAmountOfTokenIn;\r\n        uint256 amountOfTokenOut;\r\n        bool claimed;\r\n    }\r\n\r\n    function getParticipation(address participant) external view returns (\r\n        uint256 timeStamp,\r\n        uint256 amountOfTokenIn,\r\n        uint256 availableAmountOfTokenIn,\r\n        uint256 amountOfTokenOut,\r\n        bool claimed\r\n    );\r\n\r\n    function proName() external view returns (string memory);\r\n\r\n    function proLink() external view returns (string memory);\r\n\r\n    function homePageShow() external view returns (bool);\r\n\r\n    function poolType() external view returns (uint8);\r\n\r\n    function startTime() external view returns (uint256);\r\n\r\n    function endTime() external view returns (uint256);\r\n\r\n    function tokenOutPrice() external view returns (uint256);\r\n\r\n    function nameOfTokenOut() external view returns (string memory);\r\n\r\n    function symbolOfTokenOut() external view returns (string memory);\r\n\r\n    function symbolOfTokenIn() external view returns (string memory);\r\n\r\n    function decimalsOfTokenOut() external view returns (uint8);\r\n\r\n    function isOver() external view returns (bool);\r\n\r\n    function canClaim(address participant) external view returns (bool);\r\n\r\n    function state() external view returns (uint8);\r\n\r\n    function setStartTime(uint256 time) external returns (bool);\r\n\r\n    function setEndTime(uint256 time) external returns (bool);\r\n\r\n    function setVault(address newVault) external returns (bool);\r\n\r\n    function activate(bool bActivated, bool bHomePageShow, string calldata prolink, uint256 feeRate) external returns (bool);\r\n\r\n    function swap(uint256 amountOfTokenIn) external returns (bool);\r\n\r\n    function claim() external returns (bool);\r\n\r\n    function withdraw() external returns (bool);\r\n\r\n    function claimTime() external view returns (uint256);\r\n\r\n    function setClaimTime(uint256 time) external returns (bool);\r\n\r\n    function getFeeRate() external view returns (uint256);\r\n\r\n    function getFeeTo() external view returns (address);\r\n\r\n    function setFeeTo(address account) external returns (bool);\r\n}\r\n// File: localhost/lib/Address.sol\r\n\r\n//SPDX-License-Identifier: SimPL-2.0\r\npragma solidity ^0.6.0;\r\n\r\n/**\r\n * @dev Collection of functions related to the address type\r\n */\r\nlibrary Address {\r\n\r\n    function isNotZero(address account) internal pure returns (bool) {\r\n        return account != address(0);\r\n    }\r\n\r\n    function isContract(address account) internal view returns (bool) {\r\n        uint256 size;\r\n        assembly {size := extcodesize(account)}\r\n        return size > 0;\r\n    }\r\n\r\n    /**\r\n     * @dev Converts an `address` into `address payable`. Note that this is\r\n     * simply a type cast: the actual underlying value is not changed.\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function toPayable(address account) internal pure returns (address payable) {\r\n        return address(uint160(account));\r\n    }\r\n\r\n    /**\r\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * IMPORTANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     */\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\r\n        (bool success,) = recipient.call{value : amount}(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n\r\n    /**\r\n     * @dev Performs a Solidity function call using a low level `call`. A\r\n     * plain`call` is an unsafe replacement for a function call: use this\r\n     * function instead.\r\n     *\r\n     * If `target` reverts with a revert reason, it is bubbled up by this\r\n     * function (like regular Solidity function calls).\r\n     *\r\n     * Returns the raw returned data. To convert to the expected return value,\r\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `target` must be a contract.\r\n     * - calling `target` with `data` must not revert.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionCall(target, data, \"Address: low-level call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\r\n     * `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\r\n        return _functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but also transferring `value` wei to `target`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the calling contract must have an ETH balance of at least `value`.\r\n     * - the called Solidity function must be `payable`.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\r\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\r\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\r\n        return _functionCallWithValue(target, data, value, errorMessage);\r\n    }\r\n\r\n    function _functionCallWithValue(address target, bytes memory data, uint256 weiValue, string memory errorMessage) private returns (bytes memory) {\r\n        require(isContract(target), \"Address: call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.call{value : weiValue}(data);\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            // Look for revert reason and bubble it up if present\r\n            if (returndata.length > 0) {\r\n                // The easiest way to bubble the revert reason is using memory via assembly\r\n\r\n                // solhint-disable-next-line no-inline-assembly\r\n                assembly {\r\n                    let returndata_size := mload(returndata)\r\n                    revert(add(32, returndata), returndata_size)\r\n                }\r\n            } else {\r\n                revert(errorMessage);\r\n            }\r\n        }\r\n    }\r\n}\r\n// File: localhost/base/InitializableOwnable.sol\r\n\r\n//SPDX-License-Identifier: SimPL-2.0\r\npragma solidity ^0.6.0;\r\n\r\ncontract InitializableOwnable {\r\n    address public _OWNER_;\r\n    address public _NEW_OWNER_;\r\n    bool internal _INITIALIZED_;\r\n\r\n    event OwnershipTransferPrepared(address indexed previousOwner, address indexed newOwner);\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    modifier notInitialized() {\r\n        require(!_INITIALIZED_, \"INITIALIZED\");\r\n        _;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(msg.sender == _OWNER_, \"NOT_OWNER\");\r\n        _;\r\n    }\r\n\r\n    function initOwner(address newOwner) public notInitialized {\r\n        _INITIALIZED_ = true;\r\n        _OWNER_ = newOwner;\r\n    }\r\n\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        emit OwnershipTransferPrepared(_OWNER_, newOwner);\r\n        _NEW_OWNER_ = newOwner;\r\n    }\r\n\r\n    function claimOwnership() public {\r\n        require(msg.sender == _NEW_OWNER_, \"INVALID_CLAIM\");\r\n        emit OwnershipTransferred(_OWNER_, _NEW_OWNER_);\r\n        _OWNER_ = _NEW_OWNER_;\r\n        _NEW_OWNER_ = address(0);\r\n    }\r\n}\r\n// File: localhost/lib/SafeMath.sol\r\n\r\n//SPDX-License-Identifier: SimPL-2.0\r\npragma solidity ^0.6.0;\r\n\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts with custom message when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n\r\n    function sqrt(uint256 x) internal pure returns (uint256 y) {\r\n        uint256 z = x / 2 + 1;\r\n        y = x;\r\n        while (z < y) {\r\n            y = z;\r\n            z = (x / z + z) / 2;\r\n        }\r\n    }\r\n}\r\n// File: localhost/token/IDO/PriIPoolTemplate.sol\r\n\r\n//SPDX-License-Identifier: SimPL-2.0\r\npragma solidity ^0.6.0;\r\n\r\ncontract PriIPoolTemplate is IPool, InitializableOwnable, Rootable {\r\n    using SafeMath for uint256;\r\n\r\n    mapping(address => uint256) private _orders;\r\n    mapping(address => Participation) private _participations;\r\n    uint256 private _startTime;\r\n    uint256 private _endTime;\r\n    uint256 private _claimTime;\r\n    uint256 private _tokenOutSupply;\r\n    uint256 private _tokenOutReserved;\r\n    uint256 private _totalAmountOfTokenIn;\r\n    uint256 private _upperLimitOfTokenIn;\r\n    bool private _isOver = false;\r\n    string private _proName;\r\n    string private _proLink;\r\n\r\n    IPoolFactory public _FACTORY_;\r\n\r\n    event PrivateOffering(address indexed participant, uint256 amountOfTokenIn, uint256 amountOfTokenOut);\r\n    event PrivateOfferingClaimed(address indexed participant, uint256 amountOfTokenOut);\r\n\r\n    uint256 private _tokenOutPrice;// TOKENOUT/TOKENIN * FACTOR\r\n    uint256 public constant _FACTOR_ = 10000;\r\n\r\n    mapping(address => uint8) private _whiteList;\r\n\r\n    IERC20  public _TOKEN_IN_;\r\n    IERC20  public _TOKEN_OUT_;\r\n\r\n    bool private _withdrawn = false;\r\n    uint8 private unlocked = 1;\r\n    modifier lock() {\r\n        require(unlocked == 1, 'LOCKED');\r\n        unlocked = 0;\r\n        _;\r\n        unlocked = 1;\r\n    }\r\n    bool private _activated = false;\r\n    modifier activated() {\r\n        require(_activated, \"NOT_ACTIVATED\");\r\n        _;\r\n    }\r\n    modifier whenNotActivated() {\r\n        require(!_activated, \"ACTIVATED\");\r\n        _;\r\n    }\r\n\r\n    uint256 private _feeRate = 10;//10% as default\r\n    address private _feeTo;\r\n\r\n    address private _vault;\r\n    bool private _homePageShow;\r\n    bool public initialized;\r\n\r\n    function init(\r\n        address __factory,\r\n        address __root,\r\n        address __creator,\r\n        string calldata __proName,\r\n        uint256 __startTime,\r\n        uint256 __endTime,\r\n        address __tokenIn,\r\n        address __tokenOut,\r\n        uint256 __tokenOutSupply,\r\n        uint256 __upperLimitOfTokenIn,\r\n        uint256 __tokenOutPrice\r\n    ) external {\r\n        require(!initialized, \"INITIALIZED\");\r\n        initOwner(__creator);\r\n        initRoot(__root);\r\n        _feeTo = __root;\r\n        _vault = __creator;\r\n        _FACTORY_ = IPoolFactory(__factory);\r\n        _proName = __proName;\r\n        _startTime = __startTime;\r\n        _endTime = __endTime;\r\n        _TOKEN_IN_ = IERC20(__tokenIn);\r\n        _TOKEN_OUT_ = IERC20(__tokenOut);\r\n        _tokenOutSupply = __tokenOutSupply;\r\n        _upperLimitOfTokenIn = __upperLimitOfTokenIn;\r\n        _tokenOutPrice = __tokenOutPrice;\r\n        _totalAmountOfTokenIn = 0;\r\n        initialized = true;\r\n        unlocked = 1;\r\n    }\r\n\r\n    function setTokenOutPrice(uint256 newPrice) external whenNotActivated onlyOwner {\r\n        _tokenOutPrice = newPrice;\r\n    }\r\n\r\n    function inWhiteList(address account) external view returns (bool) {\r\n        return _whiteList[account] == 1;\r\n    }\r\n\r\n    function addToWhiteList(address account) external onlyOwner {\r\n        _whiteList[account] = 1;\r\n    }\r\n\r\n    function addBatchToWhiteList(address[] calldata accounts) external onlyOwner {\r\n        for (uint i = 0; i < accounts.length; i++) {\r\n            _whiteList[accounts[i]] = 1;\r\n        }\r\n    }\r\n\r\n    function removeFromWhiteList(address account) external onlyOwner {\r\n        _whiteList[account] = 0;\r\n    }\r\n\r\n    function tokenOutSupply() external view returns (uint256) {\r\n        return _tokenOutSupply;\r\n    }\r\n\r\n    function tokenOutReserved() external view returns (uint256) {\r\n        return _tokenOutReserved;\r\n    }\r\n\r\n    function totalAmountOfTokenIn() external view returns (uint256) {\r\n        return _totalAmountOfTokenIn;\r\n    }\r\n\r\n    function setTokenOutSupply(uint256 newSupply) external whenNotActivated onlyOwner {\r\n        _tokenOutSupply = newSupply;\r\n    }\r\n\r\n    function setUpperLimitOfTokenIn(uint256 newVal) external whenNotActivated onlyOwner {\r\n        _upperLimitOfTokenIn = newVal;\r\n    }\r\n\r\n    function upperLimitOfTokenIn() external view returns (uint256) {\r\n        return _upperLimitOfTokenIn;\r\n    }\r\n\r\n    //IPool\r\n    function getParticipation(address participant) external override view returns (\r\n        uint256 timeStamp,\r\n        uint256 amountOfTokenIn,\r\n        uint256 availableAmountOfTokenIn,\r\n        uint256 amountOfTokenOut,\r\n        bool claimed\r\n    ){\r\n        Participation memory p = _participations[participant];\r\n        return (p.timeStamp, p.amountOfTokenIn, p.availableAmountOfTokenIn, p.amountOfTokenOut, p.claimed);\r\n    }\r\n\r\n    function proName() external override view returns (string memory){\r\n        return _proName;\r\n    }\r\n\r\n    function proLink() external override view returns (string memory){\r\n        return _proLink;\r\n    }\r\n\r\n    function homePageShow() external override view returns (bool){\r\n        return _homePageShow;\r\n    }\r\n\r\n    function poolType() external view override returns (uint8){\r\n        return 1;\r\n    }\r\n\r\n    function startTime() external view override returns (uint256){\r\n        return _startTime;\r\n    }\r\n\r\n    function endTime() external override view returns (uint256){\r\n        return _endTime;\r\n    }\r\n\r\n    function tokenOutPrice() external override view returns (uint256){\r\n        return _tokenOutPrice;\r\n    }\r\n\r\n    function nameOfTokenOut() external override view returns (string memory) {\r\n        return _TOKEN_OUT_.name();\r\n    }\r\n\r\n    function symbolOfTokenOut() external override view returns (string memory) {\r\n        return _TOKEN_OUT_.symbol();\r\n    }\r\n\r\n    function symbolOfTokenIn() external override view returns (string memory) {\r\n        return _TOKEN_IN_.symbol();\r\n    }\r\n\r\n    function decimalsOfTokenOut() external override view returns (uint8) {\r\n        return _TOKEN_OUT_.decimals();\r\n    }\r\n\r\n    function isOver() public override view returns (bool) {\r\n        return block.timestamp > _endTime || _isOver;\r\n    }\r\n\r\n    function canClaim(address participant) public override view returns (bool){\r\n        return isOver() && _orders[participant] > 0 && block.timestamp >= _claimTime;\r\n    }\r\n\r\n    function state() external override view returns (uint8){\r\n        if (_activated) {\r\n            if (block.timestamp < _startTime) {//NOT STARTED\r\n                return 1;\r\n            }\r\n            else if (!_isOver && block.timestamp >= _startTime && block.timestamp <= _endTime) {//IN PROGRESS\r\n                return 2;\r\n            }\r\n            else {//IS OVER\r\n                return 3;\r\n            }\r\n        }\r\n        else {//NOT ACTIVATED\r\n            return 0;\r\n        }\r\n    }\r\n\r\n    function setStartTime(uint256 time) onlyOwner external override whenNotActivated returns (bool){\r\n        require(time > block.timestamp.add(300), \"INVALID_START_TIME\");\r\n        _startTime = time;\r\n        return true;\r\n    }\r\n\r\n    function setEndTime(uint256 time) onlyOwner external override whenNotActivated returns (bool){\r\n        require(time > block.timestamp.add(600), \"INVALID_END_TIME\");\r\n        _endTime = time;\r\n        return true;\r\n    }\r\n\r\n    function setVault(address newVault) onlyOwner external override whenNotActivated returns (bool){\r\n        require(Address.isNotZero(newVault), 'ZERO_ADDRESS_NOT_ALLOWED');\r\n        _vault = newVault;\r\n        return true;\r\n    }\r\n\r\n    function activate(bool bActivated, bool bHomePageShow, string calldata sProlink, uint256 feeRate) onlyRoot external override returns (bool){\r\n        require(_startTime > block.timestamp.add(300), \"INVALID_START_TIME\");\r\n        require(_endTime >= _startTime.add(300), \"INVALID_END_TIME\");\r\n        require(Address.isContract(address(_TOKEN_IN_)), \"INVALID_TOKEN_IN\");\r\n        require(Address.isContract(address(_TOKEN_OUT_)), \"INVALID_TOKEN_OUT\");\r\n        require(feeRate <= 100, \"INVALID_FEE_RATE\");\r\n\r\n        if (_claimTime < _endTime) {\r\n            _claimTime = _endTime;\r\n        }\r\n\r\n        _activated = bActivated;\r\n        _homePageShow = bHomePageShow;\r\n        _proLink = sProlink;\r\n        _feeRate = feeRate;\r\n\r\n        return true;\r\n    }\r\n\r\n    function swap(uint256 amountOfTokenIn) activated lock external override returns (bool)  {\r\n        require(_whiteList[msg.sender] == 1, \"NOT_IN_WHITE_LIST\");\r\n        require(block.timestamp >= _startTime, 'NOT_STARTED');\r\n        require(!isOver(), 'PRIVATE_OFFERING_IS_OVER');\r\n        require(_orders[msg.sender] == 0, 'ENROLLED_ALREADY');\r\n        require(amountOfTokenIn <= _upperLimitOfTokenIn, 'EXCEEDS_THE_UPPER_LIMIT');\r\n        require(amountOfTokenIn > 0, \"INVALID_AMOUNT\");\r\n        require(_tokenOutReserved < _tokenOutSupply, 'INSUFFICIENT_TOKEN_OUT');\r\n\r\n        uint256 tokenOutDeci = uint256(10) ** _TOKEN_OUT_.decimals();\r\n        uint256 tokenInDeci = uint256(10) ** _TOKEN_IN_.decimals();\r\n\r\n        uint256 amountOfTokenOut = amountOfTokenIn.mul(tokenOutDeci).mul(_tokenOutPrice).div(_FACTOR_).div(tokenInDeci);\r\n\r\n        if (_tokenOutReserved.add(amountOfTokenOut) >= _tokenOutSupply) {\r\n            amountOfTokenOut = _tokenOutSupply.sub(_tokenOutReserved);\r\n            amountOfTokenIn = amountOfTokenOut.mul(_FACTOR_).mul(tokenInDeci).div(tokenOutDeci).div(_tokenOutPrice);\r\n            _isOver = true;\r\n        }\r\n\r\n        _transferFrom(address(_TOKEN_IN_), msg.sender, address(this), amountOfTokenIn);\r\n        _orders[msg.sender] = amountOfTokenOut;\r\n        _tokenOutReserved = _tokenOutReserved.add(amountOfTokenOut);\r\n        _totalAmountOfTokenIn = _totalAmountOfTokenIn.add(amountOfTokenIn);\r\n        emit PrivateOffering(msg.sender, amountOfTokenIn, amountOfTokenOut);\r\n\r\n        _FACTORY_.enroll(msg.sender, address(this));\r\n        Participation storage p = _participations[msg.sender];\r\n        p.timeStamp = block.timestamp;\r\n        p.amountOfTokenIn = amountOfTokenIn;\r\n        p.availableAmountOfTokenIn = amountOfTokenIn;\r\n        p.amountOfTokenOut = amountOfTokenOut;\r\n\r\n        return true;\r\n    }\r\n\r\n    function claim() lock external override returns (bool){\r\n        require(canClaim(msg.sender), 'FORBIDDEN');\r\n\r\n        uint256 reserved = _orders[msg.sender];\r\n        _transfer(address(_TOKEN_OUT_), msg.sender, reserved);\r\n        _orders[msg.sender] = 0;\r\n        emit PrivateOfferingClaimed(msg.sender, reserved);\r\n\r\n        Participation storage p = _participations[msg.sender];\r\n        p.claimed = true;\r\n\r\n        return true;\r\n    }\r\n\r\n    function withdraw() onlyRoot external override returns (bool){\r\n        require(isOver(), 'IS_NOT_OVER');\r\n        require(!_withdrawn, 'WITHDRAWN');\r\n\r\n        uint256 fee = _totalAmountOfTokenIn.mul(_feeRate).div(100);\r\n        if (fee > 0) {\r\n            _transfer(address(_TOKEN_IN_), _feeTo, fee);\r\n        }\r\n\r\n        uint256 reserve = _totalAmountOfTokenIn.sub(fee);\r\n        if (reserve > 0) {\r\n            _transfer(address(_TOKEN_IN_), _vault, reserve);\r\n        }\r\n\r\n        _withdrawn = true;\r\n        return true;\r\n    }\r\n\r\n    function claimTime() external override view returns (uint256){\r\n        return _claimTime;\r\n    }\r\n\r\n    function setClaimTime(uint256 time) onlyRoot external override returns (bool){\r\n        require(time > _endTime, 'FORBIDDEN');\r\n        _claimTime = time;\r\n        return true;\r\n    }\r\n\r\n    function getFeeRate() external override view returns (uint256){\r\n        return _feeRate;\r\n    }\r\n\r\n    function getFeeTo() external override view returns (address){\r\n        return _feeTo;\r\n    }\r\n\r\n    function setFeeTo(address account) onlyRoot override external returns (bool){\r\n        _feeTo = account;\r\n    }\r\n\r\n    //Only can call  this function 7 days later when PRI OFFERING was over, in case of emergency\r\n    function emergencyWithdraw(address token, address recipient, uint256 amount) onlyRoot external {\r\n        require(block.timestamp > _claimTime.add(7 days), 'FORBIDDEN');\r\n\r\n        bytes4 methodId = bytes4(keccak256(bytes('transfer(address,uint256)')));\r\n\r\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(methodId, recipient, amount));\r\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'TRANSFER_FAILED');\r\n    }\r\n\r\n    function _transfer(address token, address recipient, uint256 amount) private {\r\n        bytes4 methodId = bytes4(keccak256(bytes('transfer(address,uint256)')));\r\n\r\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(methodId, recipient, amount));\r\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'TRANSFER_FAILED');\r\n    }\r\n\r\n    function _transferFrom(address token, address sender, address recipient, uint256 amount) private {\r\n        bytes4 methodId = bytes4(keccak256(bytes('transferFrom(address,address,uint256)')));\r\n\r\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(methodId, sender, recipient, amount));\r\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'TRANSFER_FROM_FAILED');\r\n    }\r\n}\r\n// File: localhost/token/IDO/PubPoolTemplate.sol\r\n\r\n//SPDX-License-Identifier: SimPL-2.0\r\npragma solidity ^0.6.0;\r\n\r\ncontract PubPoolTemplate is IPool, InitializableOwnable, Rootable {\r\n    using SafeMath for uint256;\r\n\r\n    string private _proName;\r\n    string private _proLink;\r\n    mapping(address => uint256) private _orders;\r\n    mapping(address => Participation) private _participations;\r\n    uint256 private _targetAmountOfTokenIn;\r\n    uint256 private _targetAmountOfTokenOut;\r\n    uint256 private _totalAmountOfTokenIn;\r\n    uint256 private _startTime;\r\n    uint256 private _endTime;\r\n    uint256 private _claimTime;\r\n\r\n    uint256 private _bottomLimitOfTokenIn;\r\n    IPoolFactory public _FACTORY_;\r\n\r\n    uint256 private _tokenOutPrice;\r\n    uint256 public constant FACTOR = 10000;\r\n\r\n    event PublicOffering(address indexed participant, uint256 amountOfTokenIn);\r\n    event PublicOfferingClaimed(address indexed participant, uint256 amountOfTokenOut);\r\n    event PublicOfferingRefund(address indexed participant, uint256 amountOfTokenIn);\r\n\r\n    IERC20  public _TOKEN_OUT_;\r\n    IERC20  public _TOKEN_IN_;\r\n\r\n    address private _vault;\r\n    bool private _withdrawn = false;\r\n    uint private unlocked = 1;\r\n    modifier lock() {\r\n        require(unlocked == 1, 'LOCKED');\r\n        unlocked = 0;\r\n        _;\r\n        unlocked = 1;\r\n    }\r\n    bool private _activated = false;\r\n    modifier activated() {\r\n        require(_activated, \"NOT_ACTIVATED\");\r\n        _;\r\n    }\r\n    modifier whenNotActivated() {\r\n        require(!_activated, \"ACTIVATED\");\r\n        _;\r\n    }\r\n\r\n    uint256 private _feeRate = 10;//10% as default\r\n    address private _feeTo;\r\n\r\n    bool private _homePageShow;\r\n    bool public initialized;\r\n\r\n    function init(\r\n        address __factory,\r\n        address __root,\r\n        address __creator,\r\n        string calldata __proName,\r\n        uint256 __startTime,\r\n        uint256 __endTime,\r\n        address __tokenIn,\r\n        address __tokenOut,\r\n        uint256 __targetAmountOfTokenIn,\r\n        uint256 __targetAmountOfTokenOut,\r\n        uint256 __bottomLimitOfTokenIn\r\n    ) external {\r\n        require(!initialized, \"INITIALIZED\");\r\n        initOwner(__creator);\r\n        initRoot(__root);\r\n        _feeTo = __root;\r\n        _vault = __creator;\r\n        _FACTORY_ = IPoolFactory(__factory);\r\n        _proName = __proName;\r\n        _startTime = __startTime;\r\n        _endTime = __endTime;\r\n        _TOKEN_IN_ = IERC20(__tokenIn);\r\n        _TOKEN_OUT_ = IERC20(__tokenOut);\r\n        _targetAmountOfTokenIn = __targetAmountOfTokenIn;\r\n        _targetAmountOfTokenOut = __targetAmountOfTokenOut;\r\n        _bottomLimitOfTokenIn = __bottomLimitOfTokenIn;\r\n        updateTokenOutPrice();\r\n        initialized = true;\r\n        unlocked = 1;\r\n    }\r\n\r\n    function updateTokenOutPrice() private {\r\n        uint256 tokenOutDeci = uint256(10) ** _TOKEN_OUT_.decimals();\r\n        uint256 tokenInDeci = uint256(10) ** _TOKEN_IN_.decimals();\r\n\r\n        _tokenOutPrice = _targetAmountOfTokenOut.mul(tokenInDeci).mul(FACTOR).div(tokenOutDeci).div(_targetAmountOfTokenIn);\r\n    }\r\n\r\n    function setTargetAmountOfTokenIn(uint256 newVal) external whenNotActivated onlyOwner {\r\n        _targetAmountOfTokenIn = newVal;\r\n        updateTokenOutPrice();\r\n    }\r\n\r\n    function setTargetAmountOfTokenOut(uint256 newVal) external whenNotActivated onlyOwner {\r\n        _targetAmountOfTokenOut = newVal;\r\n        updateTokenOutPrice();\r\n    }\r\n\r\n    function setBottomLimitOfTokenIn(uint256 newVal) external whenNotActivated onlyOwner {\r\n        _bottomLimitOfTokenIn = newVal;\r\n    }\r\n\r\n    function targetAmountOfTokenIn() external view returns (uint256){\r\n        return _targetAmountOfTokenIn;\r\n    }\r\n\r\n    function targetAmountOfTokenOut() external view returns (uint256){\r\n        return _targetAmountOfTokenOut;\r\n    }\r\n\r\n    function totalAmountOfTokenIn() external view returns (uint256) {\r\n        return _totalAmountOfTokenIn;\r\n    }\r\n\r\n    function bottomLimitOfTokenIn() external view returns (uint256){\r\n        return _bottomLimitOfTokenIn;\r\n    }\r\n\r\n    //IPool\r\n    function getParticipation(address participant) external override view returns (\r\n        uint256 timeStamp,\r\n        uint256 amountOfTokenIn,\r\n        uint256 availableAmountOfTokenIn,\r\n        uint256 amountOfTokenOut,\r\n        bool claimed\r\n    ){\r\n        Participation memory p = _participations[participant];\r\n        return (p.timeStamp, p.amountOfTokenIn, p.availableAmountOfTokenIn, p.amountOfTokenOut, p.claimed);\r\n    }\r\n\r\n    function proName() external override view returns (string memory){\r\n        return _proName;\r\n    }\r\n\r\n    function proLink() external override view returns (string memory){\r\n        return _proLink;\r\n    }\r\n\r\n    function homePageShow() external override view returns (bool){\r\n        return _homePageShow;\r\n    }\r\n\r\n    function poolType() external override view returns (uint8){\r\n        return 2;\r\n    }\r\n\r\n    function startTime() external override view returns (uint256){\r\n        return _startTime;\r\n    }\r\n\r\n    function endTime() external override view returns (uint256){\r\n        return _endTime;\r\n    }\r\n\r\n    function tokenOutPrice() external override view returns (uint256){\r\n        return _tokenOutPrice;\r\n    }\r\n\r\n    function nameOfTokenOut() external override view returns (string memory) {\r\n        return _TOKEN_OUT_.name();\r\n    }\r\n\r\n    function symbolOfTokenOut() external override view returns (string memory) {\r\n        return _TOKEN_OUT_.symbol();\r\n    }\r\n\r\n    function symbolOfTokenIn() external override view returns (string memory) {\r\n        return _TOKEN_IN_.symbol();\r\n    }\r\n\r\n    function decimalsOfTokenOut() external override view returns (uint8) {\r\n        return _TOKEN_OUT_.decimals();\r\n    }\r\n\r\n    function isOver() public override view returns (bool) {\r\n        return block.timestamp > _endTime;\r\n    }\r\n\r\n    function canClaim(address participant) public override view returns (bool){\r\n        return isOver() && _orders[participant] > 0 && block.timestamp >= _claimTime;\r\n    }\r\n\r\n    function state() external override view returns (uint8){\r\n        if (_activated) {\r\n            if (block.timestamp < _startTime) {//NOT STARTED\r\n                return 1;\r\n            }\r\n            else if (block.timestamp >= _startTime && block.timestamp <= _endTime) {//IN PROGRESS\r\n                return 2;\r\n            }\r\n            else {//IS OVER\r\n                return 3;\r\n            }\r\n        }\r\n        else {//NOT ACTIVATED\r\n            return 0;\r\n        }\r\n    }\r\n\r\n    function setStartTime(uint256 time) onlyOwner external override whenNotActivated returns (bool){\r\n        require(time > block.timestamp.add(300), \"INVALID_START_TIME\");\r\n        _startTime = time;\r\n        return true;\r\n    }\r\n\r\n    function setEndTime(uint256 time) onlyOwner external override whenNotActivated returns (bool){\r\n        require(time > block.timestamp.add(600), \"INVALID_END_TIME\");\r\n        _endTime = time;\r\n        return true;\r\n    }\r\n\r\n    function setVault(address newVault) onlyOwner external override whenNotActivated returns (bool){\r\n        require(Address.isNotZero(newVault), 'ZERO_ADDRESS_NOT_ALLOWED');\r\n        _vault = newVault;\r\n\r\n        return true;\r\n    }\r\n\r\n    function activate(bool bActivated, bool bHomePageShow, string calldata sProlink, uint256 feeRate) onlyRoot external override returns (bool){\r\n        require(_startTime > block.timestamp.add(300), \"INVALID_START_TIME\");\r\n        require(_endTime >= _startTime.add(300), \"INVALID_END_TIME\");\r\n        require(Address.isContract(address(_TOKEN_IN_)), \"INVALID_TOKEN_IN\");\r\n        require(Address.isContract(address(_TOKEN_OUT_)), \"INVALID_TOKEN_OUT\");\r\n        require(feeRate <= 100, \"INVALID_FEE_RATE\");\r\n        if (_claimTime < _endTime) {\r\n            _claimTime = _endTime;\r\n        }\r\n\r\n        _activated = bActivated;\r\n        _homePageShow = bHomePageShow;\r\n        _proLink = sProlink;\r\n        _feeRate = feeRate;\r\n\r\n        return true;\r\n    }\r\n\r\n    function swap(uint256 amountOfTokenIn) activated lock external override returns (bool)  {\r\n        require(block.timestamp >= _startTime, 'NOT_STARTED');\r\n        require(!isOver(), 'IS_OVER');\r\n        require(amountOfTokenIn >= _bottomLimitOfTokenIn, 'AMOUNT_TOO_LOW');\r\n\r\n        _transferFrom(address(_TOKEN_IN_), msg.sender, address(this), amountOfTokenIn);\r\n        _orders[msg.sender] = _orders[msg.sender].add(amountOfTokenIn);\r\n        _totalAmountOfTokenIn = _totalAmountOfTokenIn.add(amountOfTokenIn);\r\n        emit PublicOffering(msg.sender, amountOfTokenIn);\r\n\r\n        _FACTORY_.enroll(msg.sender, address(this));\r\n        Participation storage p = _participations[msg.sender];\r\n        p.timeStamp = block.timestamp;\r\n        p.amountOfTokenIn = p.amountOfTokenIn.add(amountOfTokenIn);\r\n\r\n        return true;\r\n    }\r\n\r\n    function claim() lock external override returns (bool)  {\r\n        require(canClaim(msg.sender), 'FORBIDDEN');\r\n\r\n        uint256 tokenOutDeci = uint256(10) ** _TOKEN_OUT_.decimals();\r\n        uint256 tokenInDeci = uint256(10) ** _TOKEN_IN_.decimals();\r\n\r\n        uint256 amountOfTokenInPayed = _orders[msg.sender];\r\n\r\n        uint256 reservedTokenOut = 0;\r\n        uint256 availableAmountOfTokenIn = amountOfTokenInPayed;\r\n        if (_totalAmountOfTokenIn > _targetAmountOfTokenIn) {\r\n            availableAmountOfTokenIn = amountOfTokenInPayed.mul(_targetAmountOfTokenIn).div(_totalAmountOfTokenIn);\r\n            reservedTokenOut = availableAmountOfTokenIn.mul(tokenOutDeci).mul(_tokenOutPrice).div(tokenInDeci).div(FACTOR);\r\n            uint256 amountOfTokenInToRefund = amountOfTokenInPayed.sub(availableAmountOfTokenIn).sub(10);\r\n\r\n            if (amountOfTokenInToRefund > 0) {\r\n                _transfer(address(_TOKEN_IN_), msg.sender, amountOfTokenInToRefund);\r\n                emit PublicOfferingRefund(msg.sender, amountOfTokenInToRefund);\r\n            }\r\n        }\r\n        else {\r\n            reservedTokenOut = amountOfTokenInPayed.mul(tokenOutDeci).mul(_tokenOutPrice).div(tokenInDeci).div(FACTOR);\r\n        }\r\n\r\n        _transfer(address(_TOKEN_OUT_), msg.sender, reservedTokenOut);\r\n        _orders[msg.sender] = 0;\r\n        emit PublicOfferingClaimed(msg.sender, reservedTokenOut);\r\n\r\n        Participation storage p = _participations[msg.sender];\r\n        p.availableAmountOfTokenIn = availableAmountOfTokenIn;\r\n        p.amountOfTokenOut = reservedTokenOut;\r\n        p.claimed = true;\r\n\r\n        return true;\r\n    }\r\n\r\n    function withdraw() onlyRoot external override returns (bool)  {\r\n        require(isOver(), 'NOT_OVER');\r\n        require(!_withdrawn, 'WITHDRAWN');\r\n\r\n        uint256 amountOfTokenInToWithdraw = _totalAmountOfTokenIn;\r\n        if (_totalAmountOfTokenIn > _targetAmountOfTokenIn) {\r\n            amountOfTokenInToWithdraw = _targetAmountOfTokenIn;\r\n        }\r\n\r\n        uint256 fee = amountOfTokenInToWithdraw.mul(_feeRate).div(100);\r\n        if (fee > 0) {\r\n            _transfer(address(_TOKEN_IN_), _feeTo, fee);\r\n        }\r\n\r\n        uint256 reserve = amountOfTokenInToWithdraw.sub(fee);\r\n        if (reserve > 0) {\r\n            _transfer(address(_TOKEN_IN_), _vault, reserve);\r\n        }\r\n\r\n        _withdrawn = true;\r\n\r\n        return true;\r\n    }\r\n\r\n    function claimTime() external override view returns (uint256){\r\n        return _claimTime;\r\n    }\r\n\r\n    function setClaimTime(uint256 time) onlyRoot external override returns (bool){\r\n        require(time > _endTime, 'FORBIDDEN');\r\n        _claimTime = time;\r\n        return true;\r\n    }\r\n\r\n    function getFeeRate() external override view returns (uint256){\r\n        return _feeRate;\r\n    }\r\n\r\n    function getFeeTo() external override view returns (address){\r\n        return _feeTo;\r\n    }\r\n\r\n    function setFeeTo(address account) onlyRoot override external returns (bool){\r\n        _feeTo = account;\r\n    }\r\n\r\n    //Only can call  this function 7 days later when PUB OFFERING was over, in case of emergency\r\n    function emergencyWithdraw(address token, address recipient, uint256 amount) onlyRoot external {\r\n        require(block.timestamp > _claimTime.add(7 days), 'FORBIDDEN');\r\n\r\n        bytes4 methodId = bytes4(keccak256(bytes('transfer(address,uint256)')));\r\n\r\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(methodId, recipient, amount));\r\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'TRANSFER_FAILED');\r\n    }\r\n\r\n    function _transfer(address token, address recipient, uint256 amount) private {\r\n        bytes4 methodId = bytes4(keccak256(bytes('transfer(address,uint256)')));\r\n\r\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(methodId, recipient, amount));\r\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'TRANSFER_FAILED');\r\n    }\r\n\r\n    function _transferFrom(address token, address sender, address recipient, uint256 amount) private {\r\n        bytes4 methodId = bytes4(keccak256(bytes('transferFrom(address,address,uint256)')));\r\n\r\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(methodId, sender, recipient, amount));\r\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'TRANSFER_FROM_FAILED');\r\n    }\r\n}\r\n// File: localhost/interface/ICloneFactory.sol\r\n\r\n//SPDX-License-Identifier: SimPL-2.0\r\npragma solidity ^0.6.0;\r\n\r\ninterface ICloneFactory {\r\n    function clone(address prototype) external returns (address proxy);\r\n}\r\n// File: localhost/base/Context.sol\r\n\r\n//SPDX-License-Identifier: SimPL-2.0\r\npragma solidity ^0.6.0;\r\n\r\n/*\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with GSN meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\ncontract Context {\r\n    // Empty internal constructor, to prevent people from mistakenly deploying\r\n    // an instance of this contract, which should be used via inheritance.\r\n    constructor () internal { }\r\n    // solhint-disable-previous-line no-empty-blocks\r\n\r\n    function _msgSender() internal view returns (address payable) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view returns (bytes memory) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n// File: localhost/base/Ownable.sol\r\n\r\n//SPDX-License-Identifier: SimPL-2.0\r\npragma solidity ^0.6.0;\r\n\r\n\r\ncontract Ownable is Context{\r\n\r\n    address internal _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor () internal {\r\n        _owner = _msgSender();\r\n        emit OwnershipTransferred(address(0), msg.sender);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(_owner == _msgSender(), \"CALLER_IS_NOT_THE_OWNER\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        require(newOwner != address(0), \"NEW_OWNER_IS_THE_ZERO_ADDRESS\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n// File: localhost/token/IDO/PoolFactory.sol\r\n\r\n//SPDX-License-Identifier: SimPL-2.0\r\npragma solidity ^0.6.0;\r\n\r\n\r\n\r\n\r\n\r\ncontract PoolFactory is Ownable, IPoolFactory {\r\n    address public _CLONE_FACTORY_;\r\n    address public _PRI_POOL_TEMPLATE_;\r\n    address public _PUB_POOL_TEMPLATE_;\r\n    address public _ROOT_;\r\n    mapping(address => uint8) private _tokenInWhitelist;\r\n\r\n    event NewPool(address poolAddress, uint8 poolType, address creator);\r\n\r\n    // ============ Registry ============\r\n    // creator -> pool address list\r\n    mapping(address => address[]) public _USER_REGISTRY_;\r\n\r\n    // participant -> pool address list\r\n    mapping(address => address[]) public _USER_ENROLL_;\r\n\r\n    address[] private _pools;\r\n\r\n    mapping(address => uint8) private _poolsMap;\r\n\r\n    constructor(\r\n        address cloneFactory,\r\n        address priPoolTemplate,\r\n        address pubPoolTemplate\r\n    ) public {\r\n        _CLONE_FACTORY_ = cloneFactory;\r\n        _PRI_POOL_TEMPLATE_ = priPoolTemplate;\r\n        _PUB_POOL_TEMPLATE_ = pubPoolTemplate;\r\n        _ROOT_ = 0xbF87D4a808AAdE437348B61e80704433B0bbBe7e;\r\n        _owner = 0xbF87D4a808AAdE437348B61e80704433B0bbBe7e;\r\n\r\n        // ETH\r\n        _tokenInWhitelist[0x1d32916CFA6534D261AD53E2498AB95505bd2510] = 1;//YOU\r\n        _tokenInWhitelist[0xdAC17F958D2ee523a2206206994597C13D831ec7] = 1;//USDT\r\n        _tokenInWhitelist[0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2] = 1;//WETH\r\n        _tokenInWhitelist[0x12A132927A47E8ea1535f491061bC6Cbe460C46B] = 1;//YOU/USDT LP\r\n        \r\n        //HECO\r\n        // _tokenInWhitelist[0x9364e119AD76e0346126aFcbDF5C9f0189500Cc5] = 1;//YOU\r\n        // _tokenInWhitelist[0xa71EdC38d189767582C38A3145b5873052c3e47a] = 1;//USDT\r\n        // _tokenInWhitelist[0x0298c2b32eaE4da002a15f36fdf7615BEa3DA047] = 1;//HUSD\r\n        // _tokenInWhitelist[0x5545153CCFcA01fbd7Dd11C0b23ba694D9509A6F] = 1;//WHT\r\n        // _tokenInWhitelist[0x7A24E1aA124C53E20a35Ec44AD86a16B66458087] = 1;//YOU/USDT LP\r\n\r\n        //BSC\r\n        // _tokenInWhitelist[0x181801F00df1BD997D38Dd579dBd44bf9b5a6d2D] = 1;//YOU\r\n        // _tokenInWhitelist[0x55d398326f99059fF775485246999027B3197955] = 1;//USDT\r\n        // _tokenInWhitelist[0xe9e7CEA3DedcA5984780Bafc599bD69ADd087D56] = 1;//BUSD\r\n        // _tokenInWhitelist[0xbb4CdB9CBd36B01bD1cBaEBF2De08d9173bc095c] = 1;//WBNB\r\n        // _tokenInWhitelist[0x090DeBA6FeF9422d5f9AA944034EB37234FFba45] = 1;//YOU/USDT LP\r\n    }\r\n\r\n    function createPriPool(\r\n        string calldata _proName,\r\n        uint256 _startTime,\r\n        uint256 _endTime,\r\n        address _tokenIn,\r\n        address _tokenOut,\r\n        uint256 _tokenOutSupply,\r\n        uint256 _upperLimitOfTokenIn,\r\n        uint256 _tokenOutPrice\r\n    ) external override returns (address newPool) {\r\n        require(tokenInWhiteList(_tokenIn), \"UNSUPPORTED_TOKEN_IN\");\r\n        require(_tokenIn != _tokenOut, \"TOKEN_OUT_SAME_WITH_TOKEN_IN\");\r\n        newPool = ICloneFactory(_CLONE_FACTORY_).clone(_PRI_POOL_TEMPLATE_);\r\n        PriIPoolTemplate(newPool).init(\r\n            address(this),\r\n            _ROOT_,\r\n            msg.sender,\r\n            _proName,\r\n            _startTime,\r\n            _endTime,\r\n            _tokenIn,\r\n            _tokenOut,\r\n            _tokenOutSupply,\r\n            _upperLimitOfTokenIn,\r\n            _tokenOutPrice\r\n        );\r\n        _USER_REGISTRY_[msg.sender].push(newPool);\r\n        _poolsMap[newPool] = 1;\r\n        _pools.push(newPool);\r\n        emit NewPool(newPool, 1, msg.sender);\r\n    }\r\n\r\n    function createPubPool(\r\n        string calldata _proName,\r\n        uint256 _startTime,\r\n        uint256 _endTime,\r\n        address _tokenIn,\r\n        address _tokenOut,\r\n        uint256 _targetAmountOfTokenIn,\r\n        uint256 _targetAmountOfTokenOut,\r\n        uint256 _bottomLimitOfTokenIn\r\n    ) external override returns (address newPool) {\r\n        require(tokenInWhiteList(_tokenIn), \"UNSUPPORTED_TOKEN_IN\");\r\n        require(_tokenIn != _tokenOut, \"TOKEN_OUT_SAME_WITH_TOKEN_IN\");\r\n        newPool = ICloneFactory(_CLONE_FACTORY_).clone(_PUB_POOL_TEMPLATE_);\r\n        PubPoolTemplate(newPool).init(\r\n            address(this),\r\n            _ROOT_,\r\n            msg.sender,\r\n            _proName,\r\n            _startTime,\r\n            _endTime,\r\n            _tokenIn,\r\n            _tokenOut,\r\n            _targetAmountOfTokenIn,\r\n            _targetAmountOfTokenOut,\r\n            _bottomLimitOfTokenIn\r\n        );\r\n        _USER_REGISTRY_[msg.sender].push(newPool);\r\n        _poolsMap[newPool] = 1;\r\n        _pools.push(newPool);\r\n        emit NewPool(newPool, 2, msg.sender);\r\n    }\r\n\r\n    modifier isPool() {\r\n        require(_poolsMap[msg.sender] == 1, \"THE_CALLER_IS_NOT_A_POOL\");\r\n        _;\r\n    }\r\n\r\n    function addTokenInToWhiteList(address tokenIn) external override onlyOwner {\r\n        _tokenInWhitelist[tokenIn] = 1;\r\n    }\r\n\r\n    function removeTokenInFromWhiteList(address tokenIn) external override onlyOwner {\r\n        _tokenInWhitelist[tokenIn] = 0;\r\n    }\r\n\r\n    function tokenInWhiteList(address tokenIn) public override view returns (bool) {\r\n        return _tokenInWhitelist[tokenIn] == 1;\r\n    }\r\n\r\n    function getPools() external override view returns (address[] memory pools){\r\n        return _pools;\r\n    }\r\n\r\n    function getPoolsByCreator(address creator) external override view returns (address[] memory pools){\r\n        return _USER_REGISTRY_[creator];\r\n    }\r\n\r\n    function getPoolsByParticipant(address participant) external override view returns (address[] memory pools){\r\n        return _USER_ENROLL_[participant];\r\n    }\r\n\r\n    function enroll(address participant, address pool) external override isPool returns (bool){\r\n        if (_USER_ENROLL_[participant].length > 0) {\r\n            for (uint256 i = 0; i < _USER_ENROLL_[participant].length; i++) {\r\n                if (_USER_ENROLL_[participant][i] == pool) return false;\r\n            }\r\n        }\r\n        _USER_ENROLL_[participant].push(pool);\r\n        return true;\r\n    }\r\n\r\n    function getPoolInfo(address poolAddr) external override view returns (\r\n        string memory proName,\r\n        uint256 tokenOutPrice,\r\n        string memory tokenInSymbol,\r\n        string memory tokenOutSymbol,\r\n        uint8 poolType,\r\n        uint8 state,\r\n        bool homePageShow,\r\n        string memory proLink\r\n    )\r\n    {\r\n        IPool pool = IPool(poolAddr);\r\n        return\r\n        (\r\n        pool.proName(),\r\n        pool.tokenOutPrice(),\r\n        pool.symbolOfTokenIn(),\r\n        pool.symbolOfTokenOut(),\r\n        pool.poolType(),\r\n        pool.state(),\r\n        pool.homePageShow(),\r\n        pool.proLink()\r\n        );\r\n    }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"cloneFactory\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"priPoolTemplate\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"pubPoolTemplate\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"poolAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"poolType\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"}],\"name\":\"NewPool\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"_CLONE_FACTORY_\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_PRI_POOL_TEMPLATE_\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_PUB_POOL_TEMPLATE_\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_ROOT_\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"_USER_ENROLL_\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"_USER_REGISTRY_\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenIn\",\"type\":\"address\"}],\"name\":\"addTokenInToWhiteList\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_proName\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"_startTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_endTime\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_tokenIn\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_tokenOut\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenOutSupply\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_upperLimitOfTokenIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_tokenOutPrice\",\"type\":\"uint256\"}],\"name\":\"createPriPool\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"newPool\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_proName\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"_startTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_endTime\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_tokenIn\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_tokenOut\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_targetAmountOfTokenIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_targetAmountOfTokenOut\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_bottomLimitOfTokenIn\",\"type\":\"uint256\"}],\"name\":\"createPubPool\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"newPool\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"participant\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"}],\"name\":\"enroll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"poolAddr\",\"type\":\"address\"}],\"name\":\"getPoolInfo\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"proName\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"tokenOutPrice\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"tokenInSymbol\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"tokenOutSymbol\",\"type\":\"string\"},{\"internalType\":\"uint8\",\"name\":\"poolType\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"state\",\"type\":\"uint8\"},{\"internalType\":\"bool\",\"name\":\"homePageShow\",\"type\":\"bool\"},{\"internalType\":\"string\",\"name\":\"proLink\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPools\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"pools\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"}],\"name\":\"getPoolsByCreator\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"pools\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"participant\",\"type\":\"address\"}],\"name\":\"getPoolsByParticipant\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"pools\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenIn\",\"type\":\"address\"}],\"name\":\"removeTokenInFromWhiteList\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenIn\",\"type\":\"address\"}],\"name\":\"tokenInWhiteList\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"PoolFactory","CompilerVersion":"v0.6.6+commit.6c089d02","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000ec10eed52f5bc4399fb78dd01813d9cd0456300f0000000000000000000000002365a656e01125e0b0b809a53b7809de3f5e40f300000000000000000000000020141847c36a9b8fcea384b089cc8a738660f51f","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://1bf997a9ef9a62d62eaa2ca71816e23e4ccf83dc2f5a9d1dacd4f15c21267fbc"}]}