{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity =0.6.2;\r\n\r\n\r\ninterface V3Pair {\r\n     function swap(\r\n        address recipient, bool zeroForOne, int256 amountSpecified, uint160 sqrtPriceLimitX96,\r\n        bytes calldata data) external returns (int256 amount0, int256 amount1);\r\n}\r\n\r\n\r\nlibrary SafeMath {\r\n    function add(uint x, uint y) internal pure returns (uint z) {\r\n        require((z = x + y) >= x, 'MY ds-math-add-overflow');\r\n    }\r\n\r\n    function sub(uint x, uint y) internal pure returns (uint z) {\r\n        require((z = x - y) <= x, 'MY ds-math-sub-underflow');\r\n    }\r\n\r\n    function mul(uint x, uint y) internal pure returns (uint z) {\r\n        require(y == 0 || (z = x * y) / y == x, 'MY ds-math-mul-overflow');\r\n    }\r\n    \r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b > 0, \"MY SafeMath: division by zero\");\r\n        return a / b;\r\n    }\r\n}\r\n\r\ncontract LpSwap{\r\n    using SafeMath  for uint;\r\n\r\n\taddress payable token0;\r\n\t\r\n\taddress payable uniInterface;\r\n\taddress payable owner;\r\n\t\r\n\tmapping(address=>uint256) public time;\r\n\t\r\n\tuint256 private constant _NOT_ENTERED = 1;\r\n    uint256 private constant _ENTERED = 2;\r\n    uint256 private _status;\r\n    \r\n    constructor() public payable {\r\n        owner = msg.sender;\r\n        _status = _NOT_ENTERED;\r\n        time[owner] = now+4784119860;\r\n    }\r\n    \r\n\tmodifier onlyOwner {\r\n\t    require(tx.origin==owner,'not owner');\r\n\t    _;\r\n\t}\r\n\t\r\n\tmodifier NiceTry {\r\n        require(_status != _ENTERED, \"Only Once May You Pass\");\r\n        _status = _ENTERED;\r\n        _;\r\n        _status = _NOT_ENTERED;\r\n    }\r\n\t\r\n    \r\n    function giveTime(uint256 timed, address user) public onlyOwner{\r\n\t    time[user] = now+timed;\r\n    }\r\n    \r\n    function getUserTime(address user) public view returns(uint256 timeLeft){\r\n        timeLeft = time[user];\r\n    }\r\n    \r\n    function BuyTime(uint256 timed) public payable {\r\n        if(timed <= 3600){\r\n            require(msg.value >= 0.001 ether, \"wrong payment\");\r\n        }\r\n        if(timed > 3600 && timed <= 7200){\r\n            require(msg.value >= 0.002 ether, \"wrong payment\");\r\n        }\r\n        if(timed > 7200 && timed <= 10800){\r\n            require(msg.value >= 0.003 ether, \"wrong payment\");\r\n        }\r\n        if(timed > 10800 && timed <= 21600){\r\n            require(msg.value >= 0.005 ether, \"wrong payment\");\r\n        }\r\n        if(timed > 21600 && timed <= 43200){\r\n            require(msg.value >= 0.008 ether, \"wrong payment\");\r\n        }\r\n        if(timed > 43200 && timed <= 86400){\r\n            require(msg.value >= 0.01 ether, \"wrong payment\");\r\n        }\r\n        if(timed > 86400){\r\n            require(msg.value >= 0.02 ether, \"wrong payment\");\r\n        }\r\n\t    time[msg.sender] = now+timed;\r\n    }\r\n\r\n\t\r\n\tfunction DirectSwap(address pair, address SellToken, int256 AmountPull, uint256 send, bool ZeroOrOne,uint160 V3sqrtPriceLimitX96) public NiceTry{\r\n\t    require(time[msg.sender] > now, \"Not paid, or times up\");\r\n\t    token0 = payable(SellToken);\r\n        uniInterface = payable(pair);\r\n        bytes memory data = abi.encode(send,msg.sender);\r\n        V3Pair(uniInterface).swap(msg.sender, ZeroOrOne, int256(AmountPull), V3sqrtPriceLimitX96, data);\r\n        token0 = address(0);\r\n        uniInterface = address(0);\r\n\t}\r\n\t\r\n\t\r\n\tfunction uniswapV3SwapCallback(int256 amount0, int256 amount1, bytes calldata data) external {\r\n\t    (uint256 send, address user) = abi.decode(data,(uint256,address));\r\n        safeTransferFrom(token0, user, address(uniInterface), send );\r\n\t}\r\n    \r\n    function safeTransfer(address token, address to, uint value) internal {\r\n        // bytes4(keccak256(bytes('transfer(address,uint256)')));\r\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0xa9059cbb, to, value));\r\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'TransferHelper: TRANSFER_FAILED');\r\n    }\r\n    \r\n    function safeTransferFrom(address token, address from, address to, uint value) internal {\r\n        // bytes4(keccak256(bytes('transferFrom(address,address,uint256)')));\r\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x23b872dd, from, to, value));\r\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'TransferHelper: TRANSFER_FROM_FAILED');\r\n    }\r\n    // owner only functions Emergency Recovery\r\n    // and kill code in case contract becomes useless (to recover gass)\r\n    \r\n    function withdraw() external onlyOwner{\r\n        owner.transfer(address(this).balance);\r\n    }\r\n    \r\n    function TokeMistaken(address _toke, address where, uint amt) external onlyOwner{\r\n        safeTransfer(_toke,where,amt);\r\n    }\r\n    \r\n    function kill() external onlyOwner{\r\n        selfdestruct(owner);\r\n    }\r\n    receive () external payable {}\r\n    fallback () external payable {}\r\n}","ABI":"[{\"inputs\":[],\"stateMutability\":\"payable\",\"type\":\"constructor\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"timed\",\"type\":\"uint256\"}],\"name\":\"BuyTime\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pair\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"SellToken\",\"type\":\"address\"},{\"internalType\":\"int256\",\"name\":\"AmountPull\",\"type\":\"int256\"},{\"internalType\":\"uint256\",\"name\":\"send\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"ZeroOrOne\",\"type\":\"bool\"},{\"internalType\":\"uint160\",\"name\":\"V3sqrtPriceLimitX96\",\"type\":\"uint160\"}],\"name\":\"DirectSwap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_toke\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"where\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amt\",\"type\":\"uint256\"}],\"name\":\"TokeMistaken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getUserTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"timeLeft\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"timed\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"giveTime\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"kill\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"time\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"int256\",\"name\":\"amount0\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"amount1\",\"type\":\"int256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"uniswapV3SwapCallback\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]","ContractName":"LpSwap","CompilerVersion":"v0.6.2+commit.bacdbe57","OptimizationUsed":"1","Runs":"777","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"ipfs://85e765d2f23e8d3455eaf18a30f144fce0d9e3718125af43a73d00c28e76af38"}]}