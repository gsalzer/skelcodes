{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"/home/nailkhaf/github/san-rewards/contracts/gsn/RelayRecipientUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/metatx/ERC2771ContextUpgradeable.sol\\\";\\n\\nabstract contract RelayRecipientUpgradeable is\\n    Initializable,\\n    ERC2771ContextUpgradeable\\n{\\n    function __RelayRecipientUpgradeable_init() internal initializer {\\n        __RelayRecipientUpgradeable_init_unchained();\\n    }\\n\\n    function __RelayRecipientUpgradeable_init_unchained()\\n        internal\\n        initializer\\n    {}\\n\\n    event TrustedForwarderChanged(address previous, address current);\\n\\n    function _setTrustedForwarder(address trustedForwarder_) internal {\\n        address previousForwarder = _trustedForwarder;\\n        _trustedForwarder = trustedForwarder_;\\n        emit TrustedForwarderChanged(previousForwarder, trustedForwarder_);\\n    }\\n}\\n\"\r\n    },\r\n    \"/home/nailkhaf/github/san-rewards/contracts/hunters/WalletHunters.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/CountersUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/structs/EnumerableSetUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/math/MathUpgradeable.sol\\\";\\n\\nimport \\\"../interfaces/IWalletHunters.sol\\\";\\nimport \\\"../utils/AccountingTokenUpgradeable.sol\\\";\\nimport \\\"../gsn/RelayRecipientUpgradeable.sol\\\";\\n\\ncontract WalletHunters is\\n    IWalletHunters,\\n    AccountingTokenUpgradeable,\\n    RelayRecipientUpgradeable,\\n    AccessControlUpgradeable\\n{\\n    using CountersUpgradeable for CountersUpgradeable.Counter;\\n    using SafeERC20Upgradeable for IERC20Upgradeable;\\n    using EnumerableSetUpgradeable for EnumerableSetUpgradeable.UintSet;\\n    using EnumerableSetUpgradeable for EnumerableSetUpgradeable.AddressSet;\\n    using AddressUpgradeable for address;\\n\\n    struct Request {\\n        address hunter;\\n        uint256 reward;\\n        uint256 creationTime;\\n        uint256 configurationIndex;\\n        bool discarded;\\n    }\\n\\n    struct RequestVoting {\\n        uint256 votesFor;\\n        uint256 votesAgainst;\\n        EnumerableSetUpgradeable.AddressSet voters;\\n        mapping(address => SheriffVote) votes;\\n    }\\n\\n    struct SheriffVote {\\n        uint256 amount;\\n        bool voteFor;\\n    }\\n\\n    struct Configuration {\\n        uint256 votingDuration;\\n        uint256 sheriffsRewardShare;\\n        uint256 fixedSheriffReward;\\n        uint256 minimalVotesForRequest;\\n        uint256 minimalDepositForSheriff;\\n        uint256 requestReward;\\n    }\\n\\n    uint256 public constant MAX_PERCENT = 10000; // 100%\\n    uint256 public constant SUPER_MAJORITY = 6700; // 67%\\n\\n    bytes32 public constant MAYOR_ROLE = keccak256(\\\"MAYOR_ROLE\\\");\\n    string private constant ERC20_NAME = \\\"Wallet Hunters, Sheriff Token\\\";\\n    string private constant ERC20_SYMBOL = \\\"WHST\\\";\\n\\n    IERC20Upgradeable public stakingToken;\\n\\n    uint256 public rewardsPool;\\n    CountersUpgradeable.Counter private _requestCounter;\\n    mapping(uint256 => Request) private _requests;\\n    mapping(uint256 => RequestVoting) private _requestVotings;\\n    mapping(address => EnumerableSetUpgradeable.UintSet)\\n        private _activeRequests;\\n    Configuration[] private _configurations;\\n\\n    modifier onlyRole(bytes32 role) {\\n        require(hasRole(role, _msgSender()), \\\"Must have appropriate role\\\");\\n        _;\\n    }\\n\\n    function initialize(\\n        address admin_,\\n        address trustedForwarder_,\\n        address stakingToken_,\\n        uint256 votingDuration_,\\n        uint256 sheriffsRewardShare_,\\n        uint256 fixedSheriffReward_,\\n        uint256 minimalVotesForRequest_,\\n        uint256 minimalDepositForSheriff_,\\n        uint256 requestReward_\\n    ) external initializer {\\n        __WalletHunters_init(\\n            admin_,\\n            trustedForwarder_,\\n            stakingToken_,\\n            votingDuration_,\\n            sheriffsRewardShare_,\\n            fixedSheriffReward_,\\n            minimalVotesForRequest_,\\n            minimalDepositForSheriff_,\\n            requestReward_\\n        );\\n    }\\n\\n    function __WalletHunters_init(\\n        address admin_,\\n        address trustedForwarder_,\\n        address stakingToken_,\\n        uint256 votingDuration_,\\n        uint256 sheriffsRewardShare_,\\n        uint256 fixedSheriffReward_,\\n        uint256 minimalVotesForRequest_,\\n        uint256 minimalDepositForSheriff_,\\n        uint256 requestReward_\\n    ) internal initializer {\\n        __AccountingToken_init(ERC20_NAME, ERC20_SYMBOL);\\n        __RelayRecipientUpgradeable_init();\\n        __AccessControl_init();\\n\\n        __WalletHunters_init_unchained(\\n            admin_,\\n            trustedForwarder_,\\n            stakingToken_,\\n            votingDuration_,\\n            sheriffsRewardShare_,\\n            fixedSheriffReward_,\\n            minimalVotesForRequest_,\\n            minimalDepositForSheriff_,\\n            requestReward_\\n        );\\n    }\\n\\n    function __WalletHunters_init_unchained(\\n        address admin,\\n        address trustedForwarder_,\\n        address stakingToken_,\\n        uint256 votingDuration_,\\n        uint256 sheriffsRewardShare_,\\n        uint256 fixedSheriffReward_,\\n        uint256 minimalVotesForRequest_,\\n        uint256 minimalDepositForSheriff_,\\n        uint256 requestReward_\\n    ) internal initializer {\\n        require(stakingToken_.isContract(), \\\"StakingToken must be contract\\\");\\n        require(\\n            trustedForwarder_.isContract(),\\n            \\\"StakingToken must be contract\\\"\\n        );\\n\\n        _setupRole(DEFAULT_ADMIN_ROLE, admin);\\n        _setupRole(MAYOR_ROLE, admin);\\n\\n        stakingToken = IERC20Upgradeable(stakingToken_);\\n\\n        super._setTrustedForwarder(trustedForwarder_);\\n\\n        _updateConfiguration(\\n            votingDuration_,\\n            sheriffsRewardShare_,\\n            fixedSheriffReward_,\\n            minimalVotesForRequest_,\\n            minimalDepositForSheriff_,\\n            requestReward_\\n        );\\n    }\\n\\n    function submitRequest(address hunter) external override returns (uint256) {\\n        require(_msgSender() == hunter, \\\"Sender must be hunter\\\");\\n\\n        uint256 id = _requestCounter.current();\\n        _requestCounter.increment();\\n\\n        Request storage _request = _requests[id];\\n\\n        uint256 configurationIndex = _currentConfigurationIndex();\\n\\n        _request.hunter = hunter;\\n        _request.reward = _configurations[configurationIndex].requestReward;\\n        _request.configurationIndex = configurationIndex;\\n        _request.discarded = false;\\n        // solhint-disable-next-line not-rely-on-time\\n        _request.creationTime = block.timestamp;\\n\\n        // ignore return\\n        _activeRequests[hunter].add(id);\\n\\n        emit NewWalletRequest(id, hunter, _request.reward);\\n\\n        return id;\\n    }\\n\\n    function stake(address sheriff, uint256 amount) external override {\\n        require(sheriff == _msgSender(), \\\"Sender must be sheriff\\\");\\n        require(amount > 0, \\\"Cannot deposit 0\\\");\\n        _mint(sheriff, amount);\\n        stakingToken.safeTransferFrom(sheriff, address(this), amount);\\n        emit Staked(sheriff, amount);\\n    }\\n\\n    function vote(\\n        address sheriff,\\n        uint256 requestId,\\n        bool voteFor\\n    ) external override {\\n        require(sheriff == _msgSender(), \\\"Sender must be sheriff\\\");\\n        require(isSheriff(sheriff), \\\"Sender is not sheriff\\\");\\n        require(_votingState(requestId), \\\"Voting is finished\\\");\\n        require(\\n            _requests[requestId].hunter != sheriff,\\n            \\\"Sheriff can't be hunter\\\"\\n        );\\n\\n        uint256 amount = balanceOf(sheriff);\\n\\n        require(\\n            _activeRequests[sheriff].add(requestId),\\n            \\\"User is already participated\\\"\\n        );\\n        require(\\n            _requestVotings[requestId].voters.add(sheriff),\\n            \\\"Sheriff is already participated\\\"\\n        );\\n        _requestVotings[requestId].votes[sheriff].amount = amount;\\n\\n        if (voteFor) {\\n            _requestVotings[requestId].votes[sheriff].voteFor = true;\\n            _requestVotings[requestId].votesFor =\\n                _requestVotings[requestId].votesFor +\\n                amount;\\n        } else {\\n            _requestVotings[requestId].votes[sheriff].voteFor = false;\\n            _requestVotings[requestId].votesAgainst =\\n                _requestVotings[requestId].votesAgainst +\\n                amount;\\n        }\\n\\n        emit Voted(requestId, sheriff, amount, voteFor);\\n    }\\n\\n    function discardRequest(uint256 requestId)\\n        external\\n        override\\n        onlyRole(MAYOR_ROLE)\\n    {\\n        require(_votingState(requestId), \\\"Voting is finished\\\");\\n\\n        _requests[requestId].discarded = true;\\n\\n        emit RequestDiscarded(requestId);\\n    }\\n\\n    function withdraw(address sheriff, uint256 amount) public override {\\n        require(sheriff == _msgSender(), \\\"Sender must be sheriff\\\");\\n        require(amount > 0, \\\"Cannot withdraw 0\\\");\\n        uint256 available = balanceOf(sheriff) - lockedBalance(sheriff);\\n        require(amount <= available, \\\"Withdraw exceeds balance\\\");\\n        _burn(sheriff, amount);\\n        stakingToken.safeTransfer(sheriff, amount);\\n        emit Withdrawn(sheriff, amount);\\n    }\\n\\n    function exit(address sheriff, uint256[] calldata requestIds)\\n        external\\n        override\\n    {\\n        claimRewards(sheriff, requestIds);\\n        withdraw(sheriff, balanceOf(sheriff));\\n    }\\n\\n    function replenishRewardPool(address from, uint256 amount)\\n        external\\n        override\\n        onlyRole(DEFAULT_ADMIN_ROLE)\\n    {\\n        require(from == _msgSender(), \\\"Sender must be from address\\\");\\n        rewardsPool += amount;\\n\\n        stakingToken.safeTransferFrom(from, address(this), amount);\\n\\n        emit ReplenishedRewardPool(from, amount);\\n    }\\n\\n    function claimRewards(address user, uint256[] calldata requestIds)\\n        public\\n        override\\n    {\\n        require(user == _msgSender(), \\\"Sender must be user\\\");\\n        uint256 totalReward = 0;\\n\\n        for (uint256 i = 0; i < requestIds.length; i++) {\\n            uint256 requestId = requestIds[i];\\n\\n            uint256 reward = userReward(user, requestId);\\n\\n            _activeRequests[user].remove(requestId);\\n\\n            totalReward = totalReward + reward;\\n        }\\n\\n        if (totalReward > 0) {\\n            _transferReward(user, totalReward);\\n        }\\n\\n        emit UserRewardPaid(user, requestIds, totalReward);\\n    }\\n\\n    function claimHunterReward(address hunter, uint256[] calldata requestIds)\\n        external\\n        override\\n    {\\n        require(hunter == _msgSender(), \\\"Sender must be hunter\\\");\\n        uint256 totalReward = 0;\\n\\n        for (uint256 i = 0; i < requestIds.length; i++) {\\n            uint256 requestId = requestIds[i];\\n\\n            uint256 reward = hunterReward(hunter, requestId);\\n            _activeRequests[hunter].remove(requestId);\\n\\n            totalReward = totalReward + reward;\\n        }\\n\\n        if (totalReward > 0) {\\n            _transferReward(hunter, totalReward);\\n        }\\n\\n        emit HunterRewardPaid(hunter, requestIds, totalReward);\\n    }\\n\\n    function claimSheriffRewards(address sheriff, uint256[] calldata requestIds)\\n        external\\n        override\\n    {\\n        require(sheriff == _msgSender(), \\\"Sender must be sheriff\\\");\\n        uint256 totalReward = 0;\\n\\n        for (uint256 i = 0; i < requestIds.length; i++) {\\n            uint256 requestId = requestIds[i];\\n\\n            uint256 reward = sheriffReward(sheriff, requestId);\\n            _activeRequests[sheriff].remove(requestId);\\n\\n            totalReward = totalReward + reward;\\n        }\\n\\n        if (totalReward > 0) {\\n            _transferReward(sheriff, totalReward);\\n        }\\n\\n        emit SheriffRewardPaid(sheriff, requestIds, totalReward);\\n    }\\n\\n    function updateConfiguration(\\n        uint256 _votingDuration,\\n        uint256 _sheriffsRewardShare,\\n        uint256 _fixedSheriffReward,\\n        uint256 _minimalVotesForRequest,\\n        uint256 _minimalDepositForSheriff,\\n        uint256 _requestReward\\n    ) external override onlyRole(DEFAULT_ADMIN_ROLE) {\\n        _updateConfiguration(\\n            _votingDuration,\\n            _sheriffsRewardShare,\\n            _fixedSheriffReward,\\n            _minimalVotesForRequest,\\n            _minimalDepositForSheriff,\\n            _requestReward\\n        );\\n    }\\n\\n    function configuration()\\n        external\\n        view\\n        override\\n        returns (\\n            uint256 votingDuration,\\n            uint256 sheriffsRewardShare,\\n            uint256 fixedSheriffReward,\\n            uint256 minimalVotesForRequest,\\n            uint256 minimalDepositForSheriff,\\n            uint256 requestReward\\n        )\\n    {\\n        Configuration storage _configuration =\\n            _configurations[_currentConfigurationIndex()];\\n\\n        votingDuration = _configuration.votingDuration;\\n        sheriffsRewardShare = _configuration.sheriffsRewardShare;\\n        fixedSheriffReward = _configuration.fixedSheriffReward;\\n        minimalVotesForRequest = _configuration.minimalVotesForRequest;\\n        minimalDepositForSheriff = _configuration.minimalDepositForSheriff;\\n        requestReward = _configuration.requestReward;\\n    }\\n\\n    function configurationAt(uint256 index)\\n        external\\n        view\\n        returns (\\n            uint256 votingDuration,\\n            uint256 sheriffsRewardShare,\\n            uint256 fixedSheriffReward,\\n            uint256 minimalVotesForRequest,\\n            uint256 minimalDepositForSheriff,\\n            uint256 requestReward\\n        )\\n    {\\n        require(\\n            index <= _currentConfigurationIndex(),\\n            \\\"Configuration doesn't exist\\\"\\n        );\\n        Configuration storage _configuration = _configurations[index];\\n\\n        votingDuration = _configuration.votingDuration;\\n        sheriffsRewardShare = _configuration.sheriffsRewardShare;\\n        fixedSheriffReward = _configuration.fixedSheriffReward;\\n        minimalVotesForRequest = _configuration.minimalVotesForRequest;\\n        minimalDepositForSheriff = _configuration.minimalDepositForSheriff;\\n        requestReward = _configuration.requestReward;\\n    }\\n\\n    function _currentConfigurationIndex() internal view returns (uint256) {\\n        return _configurations.length - 1;\\n    }\\n\\n    function _updateConfiguration(\\n        uint256 _votingDuration,\\n        uint256 _sheriffsRewardShare,\\n        uint256 _fixedSheriffReward,\\n        uint256 _minimalVotesForRequest,\\n        uint256 _minimalDepositForSheriff,\\n        uint256 _requestReward\\n    ) internal {\\n        require(\\n            _votingDuration >= 10 minutes && _votingDuration <= 1 weeks,\\n            \\\"Voting duration too long\\\"\\n        );\\n        require(\\n            _sheriffsRewardShare > 0 && _sheriffsRewardShare < MAX_PERCENT,\\n            \\\"Sheriff share too much\\\"\\n        );\\n\\n        _configurations.push(\\n            Configuration({\\n                votingDuration: _votingDuration,\\n                sheriffsRewardShare: _sheriffsRewardShare,\\n                fixedSheriffReward: _fixedSheriffReward,\\n                minimalVotesForRequest: _minimalVotesForRequest,\\n                minimalDepositForSheriff: _minimalDepositForSheriff,\\n                requestReward: _requestReward\\n            })\\n        );\\n\\n        emit ConfigurationChanged(\\n            _votingDuration,\\n            _sheriffsRewardShare,\\n            _fixedSheriffReward,\\n            _minimalVotesForRequest,\\n            _minimalDepositForSheriff,\\n            _requestReward\\n        );\\n    }\\n\\n    function walletProposalsLength() external view override returns (uint256) {\\n        return _requestCounter.current();\\n    }\\n\\n    function walletProposals(uint256 startRequestId, uint256 pageSize)\\n        external\\n        view\\n        override\\n        returns (WalletProposal[] memory)\\n    {\\n        require(\\n            startRequestId + pageSize <= _requestCounter.current(),\\n            \\\"Read index out of bounds\\\"\\n        );\\n\\n        WalletProposal[] memory result = new WalletProposal[](pageSize);\\n\\n        for (uint256 i = 0; i < pageSize; i++) {\\n            _walletProposal(startRequestId + i, result[i]);\\n        }\\n\\n        return result;\\n    }\\n\\n    function walletProposal(uint256 requestId)\\n        public\\n        view\\n        override\\n        returns (WalletProposal memory)\\n    {\\n        require(requestId < _requestCounter.current(), \\\"Request doesn't exist\\\");\\n        WalletProposal memory proposal;\\n\\n        _walletProposal(requestId, proposal);\\n\\n        return proposal;\\n    }\\n\\n    function _walletProposal(uint256 requestId, WalletProposal memory proposal)\\n        internal\\n        view\\n    {\\n        proposal.requestId = requestId;\\n\\n        proposal.hunter = _requests[requestId].hunter;\\n        proposal.reward = _requests[requestId].reward;\\n        proposal.creationTime = _requests[requestId].creationTime;\\n\\n        uint256 configurationIndex = _requests[requestId].configurationIndex;\\n\\n        proposal.finishTime =\\n            _requests[requestId].creationTime +\\n            _configurations[configurationIndex].votingDuration;\\n\\n        proposal.sheriffsRewardShare = _configurations[configurationIndex]\\n            .sheriffsRewardShare;\\n        proposal.fixedSheriffReward = _configurations[configurationIndex]\\n            .fixedSheriffReward;\\n\\n        proposal.votesFor = _requestVotings[requestId].votesFor;\\n        proposal.votesAgainst = _requestVotings[requestId].votesAgainst;\\n\\n        proposal.claimedReward = !_activeRequests[_requests[requestId].hunter]\\n            .contains(requestId);\\n        proposal.state = _walletState(requestId);\\n    }\\n\\n    function getVotesLength(uint256 requestId)\\n        external\\n        view\\n        override\\n        returns (uint256)\\n    {\\n        return _requestVotings[requestId].voters.length();\\n    }\\n\\n    function getVotes(\\n        uint256 requestId,\\n        uint256 startIndex,\\n        uint256 pageSize\\n    ) external view override returns (WalletVote[] memory) {\\n        require(\\n            startIndex + pageSize <= _requestVotings[requestId].voters.length(),\\n            \\\"Read index out of bounds\\\"\\n        );\\n\\n        WalletVote[] memory result = new WalletVote[](pageSize);\\n\\n        for (uint256 i = 0; i < pageSize; i++) {\\n            address voter =\\n                _requestVotings[requestId].voters.at(startIndex + i);\\n            _getVote(requestId, voter, result[i]);\\n        }\\n\\n        return result;\\n    }\\n\\n    function getVote(uint256 requestId, address sheriff)\\n        external\\n        view\\n        override\\n        returns (WalletVote memory)\\n    {\\n        WalletVote memory _vote;\\n\\n        _getVote(requestId, sheriff, _vote);\\n\\n        return _vote;\\n    }\\n\\n    function _transferReward(address destination, uint256 amount) internal {\\n        require(amount <= rewardsPool, \\\"Don't enough tokens in reward pool\\\");\\n\\n        rewardsPool -= amount;\\n\\n        stakingToken.safeTransfer(destination, amount);\\n    }\\n\\n    function _getVote(\\n        uint256 requestId,\\n        address sheriff,\\n        WalletVote memory _vote\\n    ) internal view {\\n        require(requestId < _requestCounter.current(), \\\"Request doesn't exist\\\");\\n\\n        _vote.requestId = requestId;\\n        _vote.sheriff = sheriff;\\n\\n        _vote.amount = _requestVotings[requestId].votes[sheriff].amount;\\n        _vote.voteFor = _requestVotings[requestId].votes[sheriff].voteFor;\\n    }\\n\\n    function userRewards(address user)\\n        external\\n        view\\n        override\\n        returns (uint256)\\n    {\\n        uint256 totalReward = 0;\\n\\n        for (uint256 i = 0; i < _activeRequests[user].length(); i++) {\\n            uint256 requestId = _activeRequests[user].at(i);\\n\\n            if (_votingState(requestId)) {\\n                // voting is not finished\\n                continue;\\n            }\\n\\n            uint256 reward = userReward(user, requestId);\\n\\n            totalReward = totalReward + reward;\\n        }\\n\\n        return totalReward;\\n    }\\n\\n    function userReward(address user, uint256 requestId)\\n        public\\n        view\\n        override\\n        returns (uint256)\\n    {\\n        uint256 reward;\\n        if (_requests[requestId].hunter == user) {\\n            reward = hunterReward(user, requestId);\\n        } else {\\n            reward = sheriffReward(user, requestId);\\n        }\\n\\n        return reward;\\n    }\\n\\n    function hunterReward(address hunter, uint256 requestId)\\n        public\\n        view\\n        override\\n        returns (uint256)\\n    {\\n        require(!_votingState(requestId), \\\"Voting is not finished\\\");\\n        require(\\n            hunter == _requests[requestId].hunter,\\n            \\\"Hunter isn't valid for request\\\"\\n        );\\n        require(\\n            _activeRequests[hunter].contains(requestId),\\n            \\\"Already rewarded\\\"\\n        );\\n\\n        if (!_isEnoughVotes(requestId) || _requests[requestId].discarded) {\\n            return 0;\\n        }\\n\\n        if (_walletApproved(requestId)) {\\n            uint256 sheriffsRewardShare =\\n                _configurations[_requests[requestId].configurationIndex]\\n                    .sheriffsRewardShare;\\n\\n            return\\n                (_requests[requestId].reward *\\n                    (MAX_PERCENT - sheriffsRewardShare)) / MAX_PERCENT;\\n        } else {\\n            return 0;\\n        }\\n    }\\n\\n    function sheriffReward(address sheriff, uint256 requestId)\\n        public\\n        view\\n        override\\n        returns (uint256)\\n    {\\n        require(!_votingState(requestId), \\\"Voting is not finished\\\");\\n        require(\\n            _requestVotings[requestId].votes[sheriff].amount > 0,\\n            \\\"Sheriff doesn't vote\\\"\\n        );\\n        require(\\n            _activeRequests[sheriff].contains(requestId),\\n            \\\"Already rewarded\\\"\\n        );\\n\\n        if (!_isEnoughVotes(requestId) || _requests[requestId].discarded) {\\n            return 0;\\n        }\\n\\n        bool walletApproved = _walletApproved(requestId);\\n\\n        if (\\n            walletApproved &&\\n            _requestVotings[requestId].votes[sheriff].voteFor\\n        ) {\\n            uint256 reward = _requests[requestId].reward;\\n            uint256 votes = _requestVotings[requestId].votes[sheriff].amount;\\n            uint256 totalVotes = _requestVotings[requestId].votesFor;\\n            uint256 sheriffsRewardShare =\\n                _configurations[_requests[requestId].configurationIndex]\\n                    .sheriffsRewardShare;\\n            uint256 fixedSheriffReward =\\n                _configurations[_requests[requestId].configurationIndex]\\n                    .fixedSheriffReward;\\n\\n            uint256 actualReward =\\n                (((reward * votes) / totalVotes) * sheriffsRewardShare) /\\n                    MAX_PERCENT;\\n\\n            return MathUpgradeable.max(actualReward, fixedSheriffReward);\\n        } else if (\\n            !walletApproved &&\\n            !_requestVotings[requestId].votes[sheriff].voteFor\\n        ) {\\n            return\\n                _configurations[_requests[requestId].configurationIndex]\\n                    .fixedSheriffReward;\\n        } else {\\n            return 0;\\n        }\\n    }\\n\\n    function setTrustedForwarder(address trustedForwarder)\\n        external\\n        onlyRole(DEFAULT_ADMIN_ROLE)\\n    {\\n        super._setTrustedForwarder(trustedForwarder);\\n    }\\n\\n    function activeRequests(\\n        address user,\\n        uint256 startIndex,\\n        uint256 pageSize\\n    ) external view override returns (uint256[] memory) {\\n        require(\\n            startIndex + pageSize <= _activeRequests[user].length(),\\n            \\\"Read index out of bounds\\\"\\n        );\\n\\n        uint256[] memory result = new uint256[](pageSize);\\n\\n        for (uint256 i = 0; i < pageSize; i++) {\\n            result[i] = _activeRequests[user].at(startIndex + i);\\n        }\\n\\n        return result;\\n    }\\n\\n    function activeRequest(address user, uint256 index)\\n        external\\n        view\\n        override\\n        returns (uint256)\\n    {\\n        return _activeRequests[user].at(index);\\n    }\\n\\n    function activeRequestsLength(address user)\\n        external\\n        view\\n        override\\n        returns (uint256)\\n    {\\n        return _activeRequests[user].length();\\n    }\\n\\n    function isSheriff(address sheriff) public view override returns (bool) {\\n        return\\n            balanceOf(sheriff) >=\\n            _configurations[_currentConfigurationIndex()]\\n                .minimalDepositForSheriff;\\n    }\\n\\n    function lockedBalance(address user)\\n        public\\n        view\\n        override\\n        returns (uint256 locked)\\n    {\\n        locked = 0;\\n\\n        for (uint256 i = 0; i < _activeRequests[user].length(); i++) {\\n            uint256 requestId = _activeRequests[user].at(i);\\n            if (!_votingState(requestId)) {\\n                // voting finished\\n                continue;\\n            }\\n\\n            uint256 votes = _requestVotings[requestId].votes[user].amount;\\n            if (votes > locked) {\\n                locked = votes;\\n            }\\n        }\\n    }\\n\\n    function _walletState(uint256 requestId) internal view returns (State) {\\n        if (_requests[requestId].discarded) {\\n            return State.DISCARDED;\\n        }\\n\\n        if (_votingState(requestId)) {\\n            return State.ACTIVE;\\n        }\\n\\n        if (_isEnoughVotes(requestId) && _walletApproved(requestId)) {\\n            return State.APPROVED;\\n        } else {\\n            return State.DECLINED;\\n        }\\n    }\\n\\n    function _isEnoughVotes(uint256 requestId) internal view returns (bool) {\\n        uint256 totalVotes =\\n            _requestVotings[requestId].votesFor +\\n                _requestVotings[requestId].votesAgainst;\\n\\n        uint256 minimalVotesForRequest =\\n            _configurations[_requests[requestId].configurationIndex]\\n                .minimalVotesForRequest;\\n\\n        return totalVotes >= minimalVotesForRequest;\\n    }\\n\\n    function _walletApproved(uint256 requestId) internal view returns (bool) {\\n        uint256 totalVotes =\\n            _requestVotings[requestId].votesFor +\\n                _requestVotings[requestId].votesAgainst;\\n\\n        return\\n            (_requestVotings[requestId].votesFor * MAX_PERCENT) / totalVotes >\\n            SUPER_MAJORITY;\\n    }\\n\\n    function _votingState(uint256 requestId) internal view returns (bool) {\\n        require(requestId < _requestCounter.current(), \\\"Request doesn't exist\\\");\\n\\n        // solhint-disable-next-line not-rely-on-time\\n        uint256 votingDuration =\\n            _configurations[_requests[requestId].configurationIndex]\\n                .votingDuration;\\n\\n        return\\n            block.timestamp <\\n            _requests[requestId].creationTime + votingDuration &&\\n            !_requests[requestId].discarded;\\n    }\\n\\n    function _msgSender()\\n        internal\\n        view\\n        override(ContextUpgradeable, ERC2771ContextUpgradeable)\\n        returns (address)\\n    {\\n        return super._msgSender();\\n    }\\n\\n    function _msgData()\\n        internal\\n        view\\n        override(ContextUpgradeable, ERC2771ContextUpgradeable)\\n        returns (bytes calldata)\\n    {\\n        return super._msgData();\\n    }\\n}\\n\"\r\n    },\r\n    \"/home/nailkhaf/github/san-rewards/contracts/interfaces/IWalletHunters.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface IWalletHunters {\\n    enum State {ACTIVE, APPROVED, DECLINED, DISCARDED}\\n\\n    struct WalletProposal {\\n        uint256 requestId;\\n        address hunter;\\n        uint256 reward;\\n        State state;\\n        bool claimedReward;\\n        uint256 creationTime;\\n        uint256 finishTime;\\n        uint256 votesFor;\\n        uint256 votesAgainst;\\n        uint256 sheriffsRewardShare;\\n        uint256 fixedSheriffReward;\\n    }\\n\\n    struct WalletVote {\\n        uint256 requestId;\\n        address sheriff;\\n        uint256 amount;\\n        bool voteFor;\\n    }\\n\\n    event NewWalletRequest(\\n        uint256 indexed requestId,\\n        address indexed hunter,\\n        uint256 reward\\n    );\\n\\n    event Staked(address indexed sheriff, uint256 amount);\\n\\n    event Withdrawn(address indexed sheriff, uint256 amount);\\n\\n    event Voted(\\n        uint256 indexed requestId,\\n        address indexed sheriff,\\n        uint256 amount,\\n        bool voteFor\\n    );\\n\\n    event HunterRewardPaid(\\n        address indexed hunter,\\n        uint256[] requestIds,\\n        uint256 totalReward\\n    );\\n\\n    event SheriffRewardPaid(\\n        address indexed sheriff,\\n        uint256[] requestIds,\\n        uint256 totalReward\\n    );\\n\\n    event UserRewardPaid(\\n        address indexed user,\\n        uint256[] requestIds,\\n        uint256 totalReward\\n    );\\n\\n    event RequestDiscarded(uint256 indexed requestId);\\n\\n    event ConfigurationChanged(\\n        uint256 votingDuration,\\n        uint256 sheriffsRewardShare,\\n        uint256 fixedSheriffReward,\\n        uint256 minimalVotesForRequest,\\n        uint256 minimalDepositForSheriff,\\n        uint256 requestReward\\n    );\\n\\n    event ReplenishedRewardPool(address from, uint256 amount);\\n\\n    /**\\n     * @dev        Submit a new wallet request. Increment request id and return it. Counter starts\\n     * from 0. Request automatically moved in active state, see enum #State. Caller must be hunter.\\n     * Emit #NewWalletRequest.\\n     * @param      hunter  The hunter address, which will get reward.\\n     * for sheriffs reward in approve case.\\n     * @return     request id for submitted request.\\n     */\\n    function submitRequest(address hunter) external returns (uint256);\\n\\n    /**\\n     * @dev        Discard wallet request and move request at discarded state, see enum #State.\\n     * Every who participated gets 0 reward. Caller must have access role. Emit #RequestDiscarded.\\n     * @param      requestId The reqiest id, request must be in active state.\\n     */\\n    function discardRequest(uint256 requestId) external;\\n\\n    /**\\n     * @dev        Deposit san tokens to have ability to vote for request. Before user\\n     * should approve tokens using ERC20#approve. Mint internall tokens that represents\\n     * amount of staked tokens 1:1. Emit #Staked.\\n     * @param      sheriff  The sheriff address\\n     * @param      amount   The amount of san tokens\\n     */\\n    function stake(address sheriff, uint256 amount) external;\\n\\n    /**\\n     * @dev        Vote for wallet request with amount of staked tokens. Sheriff can vote only once.\\n     * Lock user stake for period of voting. Wallet request must be in active state, see\\n     * enum #State. Emit #Voted.\\n     * @param      sheriff    The sheriff address\\n     * @param      requestId  The request identifier\\n     * @param      voteFor    The vote for\\n     */\\n    function vote(\\n        address sheriff,\\n        uint256 requestId,\\n        bool voteFor\\n    ) external;\\n\\n    /**\\n     * @dev        Withdraw san tokens. Burn internall tokens 1:1. Tokens must not be in locked\\n     * state. Emit #Withdrawn\\n     * @param      sheriff  The sheriff\\n     * @param      amount   The amount\\n     */\\n    function withdraw(address sheriff, uint256 amount) external;\\n\\n    /**\\n     * @dev        Combine two invokes #claimRewards and #withdraw.\\n     * @param      sheriff     The sheriff address\\n     * @param      requestIds  The request ids\\n     */\\n    function exit(address sheriff, uint256[] calldata requestIds) external;\\n\\n    /**\\n     * @dev        Return wallet requests that user participates at this time as sheriff or hunter.\\n     * Request can be in voting or finished state.\\n     * @param      user         The user address\\n     * @param      startIndex  The start index. Can be 0\\n     * @param      pageSize     The page size. Can be #activeRequestsLength\\n     * @return     array of request ids\\n     */\\n    function activeRequests(\\n        address user,\\n        uint256 startIndex,\\n        uint256 pageSize\\n    ) external view returns (uint256[] memory);\\n\\n    /**\\n     * @dev        Get request id at index at array.\\n     * @param      user   The user address\\n     * @param      index  The index\\n     * @return     request id\\n     */\\n    function activeRequest(address user, uint256 index)\\n        external\\n        view\\n        returns (uint256);\\n\\n    /**\\n     * @dev        Return amount of requests that user participates at this time as sheriff or\\n     * hunter. Should be used for iterating over requests using #activeRequest.\\n     * @param      user  The user address\\n     * @return     length of user requests array\\n     */\\n    function activeRequestsLength(address user) external view returns (uint256);\\n\\n    /**\\n     * @dev        Replinish reward pool in staking tokens.\\n     * @param      from    The address from whom tokens will be transfered\\n     * @param      amount  The amount of tokens\\n     */\\n    function replenishRewardPool(address from, uint256 amount) external;\\n\\n    /**\\n     * @dev        Claim hunter and sheriff rewards. Mint reward tokens. Should be used all\\n     * available request ids in not active state for user, even if #hunterReward equal 0 for\\n     * specific request id. Emit #UserRewardPaid. Remove requestIds from #activeRequests set.\\n     * @param      user        The user address\\n     * @param      requestIds  The request ids\\n     */\\n    function claimRewards(address user, uint256[] calldata requestIds) external;\\n\\n    /**\\n     * @dev        Claim hunter reward. Mint reward tokens. Should be used all available request\\n     * ids in finished state for hunter, even if #hunterReward equal 0 for specific request id.\\n     * Emit #HunterRewardPaid. Remove requestIds from #activeRequests set.\\n     * @param      hunter      The hunter address\\n     * @param      requestIds  The request ids\\n     */\\n    function claimHunterReward(address hunter, uint256[] calldata requestIds)\\n        external;\\n\\n    /**\\n     * @dev        Claim sheriff reward. Mint reward tokens. Should be used all available request\\n     * ids in finished state for sheriff, even if #hunterReward equal 0 for specific request id.\\n     * Emit #SheriffRewardPaid. Remove requestIds from #activeRequests set.\\n     * @param      sheriff      The sheriff address.\\n     * @param      requestIds  The request ids.\\n     */\\n    function claimSheriffRewards(address sheriff, uint256[] calldata requestIds)\\n        external;\\n\\n    /**\\n     * @dev        Get wallet request data.\\n     * @param      startRequestId  The start request id. Can be 0\\n     * @param      pageSize        The page size. Can be #walletProposalsLength\\n     */\\n    function walletProposals(uint256 startRequestId, uint256 pageSize)\\n        external\\n        view\\n        returns (WalletProposal[] memory);\\n\\n    /**\\n     * @dev        Get wallet request data.\\n     * @param      requestId  The request id\\n     */\\n    function walletProposal(uint256 requestId)\\n        external\\n        view\\n        returns (WalletProposal memory);\\n\\n    /**\\n     * @dev        Get amount of all proposals\\n     * @return     Amount of all proposals\\n     */\\n    function walletProposalsLength() external view returns (uint256);\\n\\n    /**\\n     * @dev        Wallet hunters configuration.\\n     */\\n    function configuration()\\n        external\\n        view\\n        returns (\\n            uint256 votingDuration,\\n            uint256 sheriffsRewardShare,\\n            uint256 fixedSheriffReward,\\n            uint256 minimalVotesForRequest,\\n            uint256 minimalDepositForSheriff,\\n            uint256 requestReward\\n        );\\n\\n    /**\\n     * @dev        Update wallet hunters configuration. Must have access role. Emit\\n     * #ConfigurationChanged.\\n     * @param      votingDuration            The voting duration for next request.\\n     * @param      sheriffsRewardShare       The sheriffs reward share for next request.\\n     * @param      fixedSheriffReward        The fixed sheriff reward in case of disapprove request\\n     * for next request.\\n     * @param      minimalVotesForRequest    The minimal votes for request to be approved.\\n     * @param      minimalDepositForSheriff  The minimal deposit to become sheriff.\\n     * @param      requestReward             The reward for next request;\\n     */\\n    function updateConfiguration(\\n        uint256 votingDuration,\\n        uint256 sheriffsRewardShare,\\n        uint256 fixedSheriffReward,\\n        uint256 minimalVotesForRequest,\\n        uint256 minimalDepositForSheriff,\\n        uint256 requestReward\\n    ) external;\\n\\n    /**\\n     * @dev        Get amount of reward tokens that user can claim for request as hunter or sheriff.\\n     * Request must have not active state, see enum #State.\\n     * @param      user       The user address\\n     * @param      requestId  The request id\\n     * @return     amount of reward tokens. Return 0 if request was discarded\\n     */\\n    function userReward(address user, uint256 requestId)\\n        external\\n        view\\n        returns (uint256);\\n\\n    /**\\n     * @dev        Sum up amount of reward tokens that user can claim for request as hunter or\\n     * sheriff. Will be used only requests that has not active state.\\n     * @param      user  The user address\\n     * @return     amount of reward tokens\\n     */\\n    function userRewards(address user) external view returns (uint256);\\n\\n    /**\\n     * @dev        Get amount of reward tokens that hunter can claim for request. Request must have\\n     * not active state, see enum #State.\\n     * @param      hunter     The hunter address\\n     * @param      requestId  The request id\\n     * @return     amount of reward tokens. Return 0 if request was discarded\\n     */\\n    function hunterReward(address hunter, uint256 requestId)\\n        external\\n        view\\n        returns (uint256);\\n\\n    /**\\n     * @dev        Get amount of reward tokens that sheriff can claim for request. Request must have\\n     * not active state, see enum #State.\\n     * @param      sheriff    The sheriff address\\n     * @param      requestId  The request id\\n     * @return     amount of reward tokens. Return 0 if request was discarded or user voted wrong\\n     */\\n    function sheriffReward(address sheriff, uint256 requestId)\\n        external\\n        view\\n        returns (uint256);\\n\\n    /**\\n     * @dev        Get sheriff vote information for wallet request.\\n     * @param      requestId  The request id\\n     * @param      sheriff    The sheriff address\\n     */\\n    function getVote(uint256 requestId, address sheriff)\\n        external\\n        view\\n        returns (WalletVote memory);\\n\\n    /**\\n     * @dev        Get amount of votes for request.\\n     * @param      requestId  The request id\\n     */\\n    function getVotesLength(uint256 requestId) external view returns (uint256);\\n\\n    /**\\n     * @dev        Get list of votes for request.\\n     * @param      requestId   The request id\\n     * @param      startIndex  The start index. Can be 0\\n     * @param      pageSize    The page size. Can be #getVotesLength\\n     */\\n    function getVotes(\\n        uint256 requestId,\\n        uint256 startIndex,\\n        uint256 pageSize\\n    ) external view returns (WalletVote[] memory);\\n\\n    /**\\n     * @dev        Get amount of locked balance for user, see #vote.\\n     * @param      sheriff  The sheriff address\\n     * @return     amount of locked tokens\\n     */\\n    function lockedBalance(address sheriff) external view returns (uint256);\\n\\n    /**\\n     * @dev        Check sheriff status for user. User must stake enough tokens to be sheriff, see\\n     * #configuration.\\n     * @param      sheriff  The user address\\n     */\\n    function isSheriff(address sheriff) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"/home/nailkhaf/github/san-rewards/contracts/utils/AccountingTokenUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\\\";\\n\\n/**\\n * @dev This contract is version of ERC20 token, but with limitations: holder can't transfer these tokens.\\n */\\ncontract AccountingTokenUpgradeable is ERC20Upgradeable {\\n    function __AccountingToken_init(string memory name_, string memory symbol_)\\n        internal\\n        initializer\\n    {\\n        __ERC20_init(name_, symbol_);\\n\\n        __AccountingToken_init_unchained();\\n    }\\n\\n    function __AccountingToken_init_unchained() internal initializer {}\\n\\n    // Do not need transfer of this token\\n    function _transfer(\\n        address,\\n        address,\\n        uint256\\n    ) internal pure override {\\n        revert(\\\"Forbidden\\\");\\n    }\\n\\n    // Do not need allowance of this token\\n    function _approve(\\n        address,\\n        address,\\n        uint256\\n    ) internal pure override {\\n        revert(\\\"Forbidden\\\");\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../utils/introspection/ERC165Upgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControlUpgradeable {\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n    function grantRole(bytes32 role, address account) external;\\n    function revokeRole(bytes32 role, address account) external;\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it.\\n */\\nabstract contract AccessControlUpgradeable is Initializable, ContextUpgradeable, IAccessControlUpgradeable, ERC165Upgradeable {\\n    function __AccessControl_init() internal initializer {\\n        __Context_init_unchained();\\n        __ERC165_init_unchained();\\n        __AccessControl_init_unchained();\\n    }\\n\\n    function __AccessControl_init_unchained() internal initializer {\\n    }\\n    struct RoleData {\\n        mapping (address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping (bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControlUpgradeable).interfaceId\\n            || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override {\\n        require(hasRole(getRoleAdmin(role), _msgSender()), \\\"AccessControl: sender must be an admin to grant\\\");\\n\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override {\\n        require(hasRole(getRoleAdmin(role), _msgSender()), \\\"AccessControl: sender must be an admin to revoke\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        emit RoleAdminChanged(role, getRoleAdmin(role), adminRole);\\n        _roles[role].adminRole = adminRole;\\n    }\\n\\n    function _grantRole(bytes32 role, address account) private {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    function _revokeRole(bytes32 role, address account) private {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n    uint256[49] private __gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/metatx/ERC2771ContextUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/*\\n * @dev Context variant with ERC2771 support.\\n */\\nabstract contract ERC2771ContextUpgradeable is Initializable, ContextUpgradeable {\\n    address _trustedForwarder;\\n\\n    function __ERC2771Context_init(address trustedForwarder) internal initializer {\\n        __Context_init_unchained();\\n        __ERC2771Context_init_unchained(trustedForwarder);\\n    }\\n\\n    function __ERC2771Context_init_unchained(address trustedForwarder) internal initializer {\\n        _trustedForwarder = trustedForwarder;\\n    }\\n\\n    function isTrustedForwarder(address forwarder) public view virtual returns(bool) {\\n        return forwarder == _trustedForwarder;\\n    }\\n\\n    function _msgSender() internal view virtual override returns (address sender) {\\n        if (isTrustedForwarder(msg.sender)) {\\n            // The assembly code is more direct than the Solidity version using `abi.decode`.\\n            assembly { sender := shr(96, calldataload(sub(calldatasize(), 20))) }\\n        } else {\\n            return super._msgSender();\\n        }\\n    }\\n\\n    function _msgData() internal view virtual override returns (bytes calldata) {\\n        if (isTrustedForwarder(msg.sender)) {\\n            return msg.data[:msg.data.length-20];\\n        } else {\\n            return super._msgData();\\n        }\\n    }\\n    uint256[50] private __gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\n// solhint-disable-next-line compiler-version\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {UpgradeableProxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n */\\nabstract contract Initializable {\\n\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        require(_initializing || !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20Upgradeable.sol\\\";\\nimport \\\"../../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin guidelines: functions revert instead\\n * of returning `false` on failure. This behavior is nonetheless conventional\\n * and does not conflict with the expectations of ERC20 applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20Upgradeable is Initializable, ContextUpgradeable, IERC20Upgradeable {\\n    mapping (address => uint256) private _balances;\\n\\n    mapping (address => mapping (address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * The defaut value of {decimals} is 18. To select a different value for\\n     * {decimals} you should overload it.\\n     *\\n     * All three of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    function __ERC20_init(string memory name_, string memory symbol_) internal initializer {\\n        __Context_init_unchained();\\n        __ERC20_init_unchained(name_, symbol_);\\n    }\\n\\n    function __ERC20_init_unchained(string memory name_, string memory symbol_) internal initializer {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n     * overloaded;\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `recipient` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(_msgSender(), recipient, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        _approve(_msgSender(), spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` and `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``sender``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(sender, recipient, amount);\\n\\n        uint256 currentAllowance = _allowances[sender][_msgSender()];\\n        require(currentAllowance >= amount, \\\"ERC20: transfer amount exceeds allowance\\\");\\n        _approve(sender, _msgSender(), currentAllowance - amount);\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender] + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        uint256 currentAllowance = _allowances[_msgSender()][spender];\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        _approve(_msgSender(), spender, currentAllowance - subtractedValue);\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\\n     *\\n     * This is internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` cannot be the zero address.\\n     * - `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     */\\n    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\\n        require(sender != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(recipient != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(sender, recipient, amount);\\n\\n        uint256 senderBalance = _balances[sender];\\n        require(senderBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        _balances[sender] = senderBalance - amount;\\n        _balances[recipient] += amount;\\n\\n        emit Transfer(sender, recipient, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        _balances[account] += amount;\\n        emit Transfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        _balances[account] = accountBalance - amount;\\n        _totalSupply -= amount;\\n\\n        emit Transfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be to transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual { }\\n    uint256[45] private __gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20Upgradeable {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20Upgradeable.sol\\\";\\nimport \\\"../../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20Upgradeable {\\n    using AddressUpgradeable for address;\\n\\n    function safeTransfer(IERC20Upgradeable token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(IERC20Upgradeable token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20Upgradeable token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        // solhint-disable-next-line max-line-length\\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(IERC20Upgradeable token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(IERC20Upgradeable token, address spender, uint256 value) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20Upgradeable token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) { // Return data is optional\\n            // solhint-disable-next-line max-line-length\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal initializer {\\n        __Context_init_unchained();\\n    }\\n\\n    function __Context_init_unchained() internal initializer {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n    uint256[50] private __gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/CountersUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Counters\\n * @author Matt Condon (@shrugs)\\n * @dev Provides counters that can only be incremented or decremented by one. This can be used e.g. to track the number\\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\\n *\\n * Include with `using Counters for Counters.Counter;`\\n */\\nlibrary CountersUpgradeable {\\n    struct Counter {\\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\\n        uint256 _value; // default: 0\\n    }\\n\\n    function current(Counter storage counter) internal view returns (uint256) {\\n        return counter._value;\\n    }\\n\\n    function increment(Counter storage counter) internal {\\n        unchecked {\\n            counter._value += 1;\\n        }\\n    }\\n\\n    function decrement(Counter storage counter) internal {\\n        uint256 value = counter._value;\\n        require(value > 0, \\\"Counter: decrement overflow\\\");\\n        unchecked {\\n            counter._value = value - 1;\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165Upgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165Upgradeable is Initializable, IERC165Upgradeable {\\n    function __ERC165_init() internal initializer {\\n        __ERC165_init_unchained();\\n    }\\n\\n    function __ERC165_init_unchained() internal initializer {\\n    }\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165Upgradeable).interfaceId;\\n    }\\n    uint256[50] private __gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165Upgradeable {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/math/MathUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary MathUpgradeable {\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a >= b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow, so we distribute\\n        return (a / 2) + (b / 2) + ((a % 2 + b % 2) / 2);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/structs/EnumerableSetUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n */\\nlibrary EnumerableSetUpgradeable {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping (bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) { // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            // When the value to delete is the last one, the swap operation is unnecessary. However, since this occurs\\n            // so rarely, we still do the swap anyway to avoid the gas cost of adding an 'if' statement.\\n\\n            bytes32 lastvalue = set._values[lastIndex];\\n\\n            // Move the last value to the index where the value to delete is\\n            set._values[toDeleteIndex] = lastvalue;\\n            // Update the index for the moved value\\n            set._indexes[lastvalue] = toDeleteIndex + 1; // All indexes are 1-based\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        require(set._values.length > index, \\\"EnumerableSet: index out of bounds\\\");\\n        return set._values[index];\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"remappings\": [],\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"evmVersion\": \"istanbul\",\r\n    \"libraries\": {},\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}","ABI":"[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"votingDuration\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"sheriffsRewardShare\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"fixedSheriffReward\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"minimalVotesForRequest\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"minimalDepositForSheriff\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"requestReward\",\"type\":\"uint256\"}],\"name\":\"ConfigurationChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"hunter\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"requestIds\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalReward\",\"type\":\"uint256\"}],\"name\":\"HunterRewardPaid\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"hunter\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"}],\"name\":\"NewWalletRequest\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"ReplenishedRewardPool\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"}],\"name\":\"RequestDiscarded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sheriff\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"requestIds\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalReward\",\"type\":\"uint256\"}],\"name\":\"SheriffRewardPaid\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sheriff\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Staked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"previous\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"current\",\"type\":\"address\"}],\"name\":\"TrustedForwarderChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"requestIds\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalReward\",\"type\":\"uint256\"}],\"name\":\"UserRewardPaid\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sheriff\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"voteFor\",\"type\":\"bool\"}],\"name\":\"Voted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sheriff\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Withdrawn\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_PERCENT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAYOR_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"SUPER_MAJORITY\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"activeRequest\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"startIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"pageSize\",\"type\":\"uint256\"}],\"name\":\"activeRequests\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"activeRequestsLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"hunter\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"requestIds\",\"type\":\"uint256[]\"}],\"name\":\"claimHunterReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"requestIds\",\"type\":\"uint256[]\"}],\"name\":\"claimRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sheriff\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"requestIds\",\"type\":\"uint256[]\"}],\"name\":\"claimSheriffRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"configuration\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"votingDuration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"sheriffsRewardShare\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"fixedSheriffReward\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minimalVotesForRequest\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minimalDepositForSheriff\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"requestReward\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"configurationAt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"votingDuration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"sheriffsRewardShare\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"fixedSheriffReward\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minimalVotesForRequest\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minimalDepositForSheriff\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"requestReward\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"}],\"name\":\"discardRequest\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sheriff\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"requestIds\",\"type\":\"uint256[]\"}],\"name\":\"exit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"sheriff\",\"type\":\"address\"}],\"name\":\"getVote\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"sheriff\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"voteFor\",\"type\":\"bool\"}],\"internalType\":\"struct IWalletHunters.WalletVote\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"startIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"pageSize\",\"type\":\"uint256\"}],\"name\":\"getVotes\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"sheriff\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"voteFor\",\"type\":\"bool\"}],\"internalType\":\"struct IWalletHunters.WalletVote[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"}],\"name\":\"getVotesLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"hunter\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"}],\"name\":\"hunterReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"admin_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"trustedForwarder_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"stakingToken_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"votingDuration_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"sheriffsRewardShare_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"fixedSheriffReward_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minimalVotesForRequest_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minimalDepositForSheriff_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"requestReward_\",\"type\":\"uint256\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sheriff\",\"type\":\"address\"}],\"name\":\"isSheriff\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"forwarder\",\"type\":\"address\"}],\"name\":\"isTrustedForwarder\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"lockedBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"locked\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"replenishRewardPool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardsPool\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"trustedForwarder\",\"type\":\"address\"}],\"name\":\"setTrustedForwarder\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sheriff\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"}],\"name\":\"sheriffReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sheriff\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"stake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakingToken\",\"outputs\":[{\"internalType\":\"contract IERC20Upgradeable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"hunter\",\"type\":\"address\"}],\"name\":\"submitRequest\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_votingDuration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_sheriffsRewardShare\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_fixedSheriffReward\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_minimalVotesForRequest\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_minimalDepositForSheriff\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_requestReward\",\"type\":\"uint256\"}],\"name\":\"updateConfiguration\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"}],\"name\":\"userReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"userRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sheriff\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"voteFor\",\"type\":\"bool\"}],\"name\":\"vote\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"}],\"name\":\"walletProposal\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"hunter\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"},{\"internalType\":\"enum IWalletHunters.State\",\"name\":\"state\",\"type\":\"uint8\"},{\"internalType\":\"bool\",\"name\":\"claimedReward\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"creationTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"finishTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"votesFor\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"votesAgainst\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"sheriffsRewardShare\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"fixedSheriffReward\",\"type\":\"uint256\"}],\"internalType\":\"struct IWalletHunters.WalletProposal\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"startRequestId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"pageSize\",\"type\":\"uint256\"}],\"name\":\"walletProposals\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"hunter\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"},{\"internalType\":\"enum IWalletHunters.State\",\"name\":\"state\",\"type\":\"uint8\"},{\"internalType\":\"bool\",\"name\":\"claimedReward\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"creationTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"finishTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"votesFor\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"votesAgainst\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"sheriffsRewardShare\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"fixedSheriffReward\",\"type\":\"uint256\"}],\"internalType\":\"struct IWalletHunters.WalletProposal[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"walletProposalsLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sheriff\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"WalletHunters","CompilerVersion":"v0.8.3+commit.8d00100c","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}