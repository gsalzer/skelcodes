{"status":"1","message":"OK","result":[{"SourceCode":"// SPDX-License-Identifier: MIT\r\n\r\npragma solidity >=0.6.0 <0.8.0;\r\n\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address payable) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes memory) {\r\n        this;\r\n        return msg.data;\r\n    }\r\n}\r\n\r\ninterface IERC20 {\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    function transfer(address recipient, uint256 amount)\r\n        external\r\n        returns (bool);\r\n\r\n    function allowance(address owner, address spender)\r\n        external\r\n        view\r\n        returns (uint256);\r\n\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(\r\n        address indexed owner,\r\n        address indexed spender,\r\n        uint256 value\r\n    );\r\n}\r\n\r\ninterface TokenInterface is IERC20 {\r\n    function burnFromVault(uint256 amount) external returns (bool);\r\n\r\n    function deposit() external payable;\r\n\r\n    function withdraw(uint256 wad) external;\r\n}\r\n\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(\r\n        address indexed previousOwner,\r\n        address indexed newOwner\r\n    );\r\n\r\n    constructor() {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(\r\n            newOwner != address(0),\r\n            \"Ownable: new owner is the zero address\"\r\n        );\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\nlibrary SafeMath {\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    function sub(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    function div(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n\r\n        return c;\r\n    }\r\n\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    function mod(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\ninterface IUniswapV2Pair {\r\n    event Approval(\r\n        address indexed owner,\r\n        address indexed spender,\r\n        uint256 value\r\n    );\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    function name() external pure returns (string memory);\r\n\r\n    function symbol() external pure returns (string memory);\r\n\r\n    function decimals() external pure returns (uint8);\r\n\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    function balanceOf(address owner) external view returns (uint256);\r\n\r\n    function allowance(address owner, address spender)\r\n        external\r\n        view\r\n        returns (uint256);\r\n\r\n    function approve(address spender, uint256 value) external returns (bool);\r\n\r\n    function transfer(address to, uint256 value) external returns (bool);\r\n\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 value\r\n    ) external returns (bool);\r\n\r\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\r\n\r\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\r\n\r\n    function nonces(address owner) external view returns (uint256);\r\n\r\n    function permit(\r\n        address owner,\r\n        address spender,\r\n        uint256 value,\r\n        uint256 deadline,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    ) external;\r\n\r\n    event Mint(address indexed sender, uint256 amount0, uint256 amount1);\r\n    event Burn(\r\n        address indexed sender,\r\n        uint256 amount0,\r\n        uint256 amount1,\r\n        address indexed to\r\n    );\r\n    event Swap(\r\n        address indexed sender,\r\n        uint256 amount0In,\r\n        uint256 amount1In,\r\n        uint256 amount0Out,\r\n        uint256 amount1Out,\r\n        address indexed to\r\n    );\r\n    event Sync(uint112 reserve0, uint112 reserve1);\r\n\r\n    function MINIMUM_LIQUIDITY() external pure returns (uint256);\r\n\r\n    function factory() external view returns (address);\r\n\r\n    function token0() external view returns (address);\r\n\r\n    function token1() external view returns (address);\r\n\r\n    function getReserves()\r\n        external\r\n        view\r\n        returns (\r\n            uint112 reserve0,\r\n            uint112 reserve1,\r\n            uint32 blockTimestampLast\r\n        );\r\n\r\n    function price0CumulativeLast() external view returns (uint256);\r\n\r\n    function price1CumulativeLast() external view returns (uint256);\r\n\r\n    function kLast() external view returns (uint256);\r\n\r\n    function mint(address to) external returns (uint256 liquidity);\r\n\r\n    function burn(address to)\r\n        external\r\n        returns (uint256 amount0, uint256 amount1);\r\n\r\n    function swap(\r\n        uint256 amount0Out,\r\n        uint256 amount1Out,\r\n        address to,\r\n        bytes calldata data\r\n    ) external;\r\n\r\n    function skim(address to) external;\r\n\r\n    function sync() external;\r\n\r\n    function initialize(address, address) external;\r\n}\r\n\r\ninterface IUniswapV2Router01 {\r\n    function factory() external pure returns (address);\r\n\r\n    function WETH() external pure returns (address);\r\n\r\n    function addLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint256 amountADesired,\r\n        uint256 amountBDesired,\r\n        uint256 amountAMin,\r\n        uint256 amountBMin,\r\n        address to,\r\n        uint256 deadline\r\n    )\r\n        external\r\n        returns (\r\n            uint256 amountA,\r\n            uint256 amountB,\r\n            uint256 liquidity\r\n        );\r\n\r\n    function addLiquidityETH(\r\n        address token,\r\n        uint256 amountTokenDesired,\r\n        uint256 amountTokenMin,\r\n        uint256 amountETHMin,\r\n        address to,\r\n        uint256 deadline\r\n    )\r\n        external\r\n        payable\r\n        returns (\r\n            uint256 amountToken,\r\n            uint256 amountETH,\r\n            uint256 liquidity\r\n        );\r\n\r\n    function getAmountOut(\r\n        uint256 amountIn,\r\n        uint256 reserveIn,\r\n        uint256 reserveOut\r\n    ) external pure returns (uint256 amountOut);\r\n\r\n    function getAmountIn(\r\n        uint256 amountOut,\r\n        uint256 reserveIn,\r\n        uint256 reserveOut\r\n    ) external pure returns (uint256 amountIn);\r\n\r\n    function getAmountsOut(uint256 amountIn, address[] calldata path)\r\n        external\r\n        view\r\n        returns (uint256[] memory amounts);\r\n\r\n    function getAmountsIn(uint256 amountOut, address[] calldata path)\r\n        external\r\n        view\r\n        returns (uint256[] memory amounts);\r\n}\r\n\r\ninterface IUniswapV2Router02 is IUniswapV2Router01 {\r\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\r\n        address token,\r\n        uint256 liquidity,\r\n        uint256 amountTokenMin,\r\n        uint256 amountETHMin,\r\n        address to,\r\n        uint256 deadline\r\n    ) external returns (uint256 amountETH);\r\n\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n        uint256 amountIn,\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external;\r\n\r\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n        uint256 amountIn,\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external;\r\n\r\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external payable;\r\n}\r\n\r\ncontract TITANVault is Context, Ownable {\r\n    using SafeMath for uint256;\r\n\r\n    TokenInterface public _titan;\r\n    TokenInterface public _yfi;\r\n    TokenInterface public _wbtc;\r\n    TokenInterface public _weth;\r\n\r\n    IUniswapV2Pair public _titanETHV2Pair;\r\n    IUniswapV2Pair public _usdcETHV2Pair;\r\n\r\n    IUniswapV2Router02 private _uniswapV2Router;\r\n\r\n    address public _daoTreasury;\r\n\r\n    uint16 public _allocPointForTitanReward;\r\n    uint16 public _allocPointForSwapReward;\r\n\r\n    uint16 public _treasuryFee;\r\n    uint16 public _rewardFee;\r\n    uint16 public _lotteryFee;\r\n    uint16 public _reserviorFee;\r\n    uint16 public _swapRewardFee;\r\n    uint16 public _burnFee;\r\n    uint16 public _earlyUnstakeFee;\r\n\r\n    uint16 public _allocPointForYFI;\r\n    uint16 public _allocPointForWBTC;\r\n    uint16 public _allocPointForWETH;\r\n\r\n    uint256 public _firstRewardPeriod;\r\n    uint256 public _secondRewardPeriod;\r\n\r\n    uint256 public _firstRewardAmount;\r\n    uint256 public _secondRewardAmount;\r\n\r\n    uint256 public _claimPeriodForTitanReward;\r\n    uint256 public _claimPeriodForSwapReward;\r\n\r\n    uint256 public _lockPeriod;\r\n\r\n    uint256 public _minDepositETHAmount;\r\n\r\n    bool public _enabledLock;\r\n    bool public _enabledLottery;\r\n\r\n    uint256 public _startBlock;\r\n\r\n    uint256 public _lotteryLimit;\r\n\r\n    uint256 public _collectedAmountForStakers;\r\n    uint256 public _collectedAmountForSwap;\r\n    uint256 public _collectedAmountForLottery;\r\n\r\n    uint256 public _lotteryPaidOut;\r\n    address private _reservior;\r\n\r\n    struct StakerInfo {\r\n        uint256 stakedAmount;\r\n        uint256 lastClimedBlockForTitanReward;\r\n        uint256 lastClimedBlockForSwapReward;\r\n        uint256 lockedTo;\r\n    }\r\n\r\n    mapping(address => StakerInfo) public _stakers;\r\n\r\n    // Info of winners for lottery.\r\n    struct WinnerInfo {\r\n        address winner;\r\n        uint256 amount;\r\n        uint256 timestamp;\r\n    }\r\n    WinnerInfo[] private winnerInfo;\r\n\r\n    event ChangedEnabledLock(address indexed owner, bool lock);\r\n    event ChangedEnabledLottery(address indexed owner, bool lottery);\r\n    event ChangedLockPeriod(address indexed owner, uint256 period);\r\n    event ChangedMinimumETHDepositAmount(address indexed owner, uint256 value);\r\n    event ChangedRewardPeriod(\r\n        address indexed owner,\r\n        uint256 firstRewardPeriod,\r\n        uint256 secondRewardPeriod\r\n    );\r\n    event ChangedClaimPeriod(\r\n        address indexed owner,\r\n        uint256 claimPeriodForTitanReward,\r\n        uint256 claimPeriodForSwapReward\r\n    );\r\n    event ChangedTitanAddress(address indexed owner, address indexed titan);\r\n    event ChangedTitanETHPair(\r\n        address indexed owner,\r\n        address indexed titanETHPair\r\n    );\r\n    event ChangedFeeInfo(\r\n        address indexed owner,\r\n        uint16 treasuryFee,\r\n        uint16 rewardFee,\r\n        uint16 lotteryFee,\r\n        uint16 swapRewardFee,\r\n        uint16 burnFee\r\n    );\r\n    event ChangedAllocPointsForSwapReward(\r\n        address indexed owner,\r\n        uint16 valueForYFI,\r\n        uint16 valueForWBTC,\r\n        uint16 valueForWETH\r\n    );\r\n    event ChangedBurnFee(address indexed owner, uint16 value);\r\n    event ChangedEarlyUnstakeFee(address indexed owner, uint16 value);\r\n    event ChangedLotteryInfo(\r\n        address indexed owner,\r\n        uint16 lotteryFee,\r\n        uint256 lotteryLimit\r\n    );\r\n\r\n    event ClaimedTitanAvailableReward(address indexed owner, uint256 amount);\r\n    event ClaimedSwapAvailableReward(address indexed owner, uint256 amount);\r\n    event ClaimedTitanReward(\r\n        address indexed owner,\r\n        uint256 available,\r\n        uint256 pending\r\n    );\r\n    event ClaimedSwapReward(address indexed owner, uint256 amount);\r\n\r\n    event Staked(address indexed account, uint256 amount);\r\n    event Unstaked(address indexed account, uint256 amount);\r\n\r\n    event SentLotteryAmount(address indexed owner, uint256 amount, bool status);\r\n    event EmergencyWithdrawToken(\r\n        address indexed from,\r\n        address indexed to,\r\n        uint256 amount\r\n    );\r\n    event SwapAndLiquifyForTitan(\r\n        address indexed msgSender,\r\n        uint256 totAmount,\r\n        uint256 ethAmount,\r\n        uint256 titanAmount\r\n    );\r\n\r\n    // Modifier\r\n\r\n    modifier onlyTitan() {\r\n        require(\r\n            address(_titan) == _msgSender(),\r\n            \"Ownable: caller is not the Titan token contract\"\r\n        );\r\n        _;\r\n    }\r\n\r\n    constructor(\r\n        address daoTreasury,\r\n        address yfi,\r\n        address wbtc,\r\n        address weth,\r\n        address usdcETHV2Pair\r\n    ) {\r\n        _daoTreasury = daoTreasury;\r\n\r\n        _yfi = TokenInterface(yfi);\r\n        _wbtc = TokenInterface(wbtc);\r\n        _weth = TokenInterface(weth);\r\n\r\n        _usdcETHV2Pair = IUniswapV2Pair(usdcETHV2Pair);\r\n        _uniswapV2Router = IUniswapV2Router02(\r\n            0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D\r\n        );\r\n\r\n        _firstRewardPeriod = 195000; // around 1: 30 days, could be changed by governance\r\n        _secondRewardPeriod = 585000; // around 2: 90 days, could be changed by governance\r\n\r\n        _firstRewardAmount = 400e21; // 450,000 Titan tokens, could be changed by governance\r\n        _secondRewardAmount = 600e21; // 550,000 Titan tokens, could be changed by governance\r\n\r\n        _claimPeriodForTitanReward = 91000; // around 14 days, could be changed by governance\r\n        _claimPeriodForSwapReward = 585000; // around 90 days, could be changed by governance\r\n\r\n        _allocPointForTitanReward = 8000; // 80% of reward will go to TITAN reward, could be changed by governance\r\n        _allocPointForSwapReward = 2000; // 20% of reward will go to swap(weth, wbtc, yfi) reward, could be changed by governance\r\n\r\n        // Set values divited from taxFee\r\n        _treasuryFee = 2000; // 20% of taxFee to treasuryFee, could be changed by governance\r\n        _rewardFee = 5000; // 50% of taxFee to stakers, could be changed by governance\r\n        _lotteryFee = 500; // 5% of lottery Fee, could be changed by governance\r\n        _reserviorFee = 500; // 5% of taxFee to reserviorFee, could be changed by governance\r\n        _swapRewardFee = 2000; // 20% of taxFee to swap tokens, could be changed by governance\r\n\r\n        _earlyUnstakeFee = 1000; // 10% of early unstake fee, could be changed by governance\r\n\r\n        // set alloc points of YFI, WBTC, WETH in swap rewards, could be changed by governance\r\n        _allocPointForYFI = 3000; // 30% of fee to buy YFI token, could be changed by governance\r\n        _allocPointForWBTC = 5000; // 50% of fee to buy WBTC token, could be changed by governance\r\n        _allocPointForWETH = 2000; // 20% of fee to buy WETH token, could be changed by governance\r\n\r\n        // set the burn fee for withdraw early\r\n        _burnFee = 2000; // 20% of pending reward to burn when staker request to withdraw pending reward, could be changed by governance\r\n\r\n        _minDepositETHAmount = 1e17; // 0.1 ether, could be changed by governance\r\n        _lockPeriod = 90 days; // could be changed by governance\r\n\r\n        _enabledLock = true; // could be changed by governance\r\n        _enabledLottery = true; // could be changed by governance\r\n\r\n        _lotteryLimit = 1200e6; // $1200(1200 usd, decimals 6), could be changed by governance\r\n        _startBlock = block.number;\r\n        _reservior = msg.sender;\r\n    }\r\n\r\n    /**\r\n     * @dev Change Minimum Deposit ETH Amount. Call by only Governance.\r\n     */\r\n    function changeMinimumDepositETHAmount(uint256 amount) external onlyOwner {\r\n        _minDepositETHAmount = amount;\r\n\r\n        emit ChangedMinimumETHDepositAmount(_msgSender(), amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Change value of reward period. Call by only Governance.\r\n     */\r\n    function changeRewardPeriod(\r\n        uint256 firstRewardPeriod,\r\n        uint256 secondRewardPeriod\r\n    ) external onlyOwner {\r\n        _firstRewardPeriod = firstRewardPeriod;\r\n        _secondRewardPeriod = secondRewardPeriod;\r\n\r\n        emit ChangedRewardPeriod(\r\n            _msgSender(),\r\n            firstRewardPeriod,\r\n            secondRewardPeriod\r\n        );\r\n    }\r\n\r\n    /**\r\n     * @dev Change value of claim period. Call by only Governance.\r\n     */\r\n    function changeClaimPeriod(\r\n        uint256 claimPeriodForTitanReward,\r\n        uint256 claimPeriodForSwapReward\r\n    ) external onlyOwner {\r\n        _claimPeriodForTitanReward = claimPeriodForTitanReward;\r\n        _claimPeriodForSwapReward = claimPeriodForSwapReward;\r\n\r\n        emit ChangedClaimPeriod(\r\n            _msgSender(),\r\n            claimPeriodForTitanReward,\r\n            claimPeriodForSwapReward\r\n        );\r\n    }\r\n\r\n    /**\r\n     * @dev Enable lock functionality. Call by only Governance.\r\n     */\r\n    function enableLock(bool isLock) external onlyOwner {\r\n        _enabledLock = isLock;\r\n\r\n        emit ChangedEnabledLock(_msgSender(), isLock);\r\n    }\r\n\r\n    /**\r\n     * @dev Enable lottery functionality. Call by only Governance.\r\n     */\r\n    function enableLottery(bool lottery) external onlyOwner {\r\n        _enabledLottery = lottery;\r\n\r\n        emit ChangedEnabledLottery(_msgSender(), lottery);\r\n    }\r\n\r\n    /**\r\n     * @dev Change maximun lock period. Call by only Governance.\r\n     */\r\n    function changeLockPeriod(uint256 period) external onlyOwner {\r\n        _lockPeriod = period;\r\n\r\n        emit ChangedLockPeriod(_msgSender(), _lockPeriod);\r\n    }\r\n\r\n    function changeTitanAddress(address titan) external onlyOwner {\r\n        _titan = TokenInterface(titan);\r\n\r\n        emit ChangedTitanAddress(_msgSender(), titan);\r\n    }\r\n\r\n    function changeTitanETHPair(address titanETHPair) external onlyOwner {\r\n        _titanETHV2Pair = IUniswapV2Pair(titanETHPair);\r\n\r\n        emit ChangedTitanETHPair(_msgSender(), titanETHPair);\r\n    }\r\n\r\n    /**\r\n     * @dev Update the treasury fee for this contract\r\n     * defaults at 25% of taxFee, It can be set on only by Titan governance.\r\n     * Note contract owner is meant to be a governance contract allowing Titan governance consensus\r\n     */\r\n    function changeFeeInfo(\r\n        uint16 treasuryFee,\r\n        uint16 rewardFee,\r\n        uint16 lotteryFee,\r\n        uint16 reserviorFee,\r\n        uint16 swapRewardFee,\r\n        uint16 burnFee\r\n    ) external onlyOwner {\r\n        _treasuryFee = treasuryFee;\r\n        _rewardFee = rewardFee;\r\n        _lotteryFee = lotteryFee;\r\n        _reserviorFee = reserviorFee;\r\n        _swapRewardFee = swapRewardFee;\r\n        _burnFee = burnFee;\r\n\r\n        emit ChangedFeeInfo(\r\n            _msgSender(),\r\n            treasuryFee,\r\n            rewardFee,\r\n            lotteryFee,\r\n            swapRewardFee,\r\n            burnFee\r\n        );\r\n    }\r\n\r\n    function changeEarlyUnstakeFee(uint16 fee) external onlyOwner {\r\n        _earlyUnstakeFee = fee;\r\n\r\n        emit ChangedEarlyUnstakeFee(_msgSender(), fee);\r\n    }\r\n\r\n    /**\r\n     * @dev Update the dev fee for this contract\r\n     * defaults at 5% of taxFee, It can be set on only by Titan governance.\r\n     * Note contract owner is meant to be a governance contract allowing Titan governance consensus\r\n     */\r\n    function changeLotteryInfo(uint16 lotteryFee, uint256 lotteryLimit)\r\n        external\r\n        onlyOwner\r\n    {\r\n        _lotteryFee = lotteryFee;\r\n        _lotteryLimit = lotteryLimit;\r\n\r\n        emit ChangedLotteryInfo(_msgSender(), lotteryFee, lotteryLimit);\r\n    }\r\n\r\n    /**\r\n     * @dev Update the alloc points for yfi, weth, wbtc rewards\r\n     * defaults at 50, 30, 20 of\r\n     * Note contract owner is meant to be a governance contract allowing Titan governance consensus\r\n     */\r\n    function changeAllocPointsForSwapReward(\r\n        uint16 allocPointForYFI_,\r\n        uint16 allocPointForWBTC_,\r\n        uint16 allocPointForWETH_\r\n    ) external onlyOwner {\r\n        _allocPointForYFI = allocPointForYFI_;\r\n        _allocPointForWBTC = allocPointForWBTC_;\r\n        _allocPointForWETH = allocPointForWETH_;\r\n\r\n        emit ChangedAllocPointsForSwapReward(\r\n            _msgSender(),\r\n            allocPointForYFI_,\r\n            allocPointForWBTC_,\r\n            allocPointForWETH_\r\n        );\r\n    }\r\n\r\n    function addTaxFee(uint256 amount) external onlyTitan returns (bool) {\r\n        uint256 daoTreasuryReward =\r\n            amount.mul(uint256(_treasuryFee)).div(10000);\r\n        _titan.transfer(_daoTreasury, daoTreasuryReward);\r\n\r\n        uint256 reserviorReward = amount.mul(uint256(_reserviorFee)).div(10000);\r\n        _titan.transfer(_reservior, reserviorReward);\r\n\r\n        uint256 stakerReward = amount.mul(uint256(_rewardFee)).div(10000);\r\n        _collectedAmountForStakers = _collectedAmountForStakers.add(\r\n            stakerReward\r\n        );\r\n\r\n        uint256 lotteryReward = amount.mul(uint256(_lotteryFee)).div(10000);\r\n        _collectedAmountForLottery = _collectedAmountForLottery.add(\r\n            lotteryReward\r\n        );\r\n\r\n        _collectedAmountForSwap = _collectedAmountForSwap.add(\r\n            amount.sub(daoTreasuryReward).sub(stakerReward).sub(lotteryReward)\r\n        );\r\n\r\n        return true;\r\n    }\r\n\r\n    function getTotalStakedAmount() public view returns (uint256) {\r\n        return _titanETHV2Pair.balanceOf(address(this));\r\n    }\r\n\r\n    function getWinners() external view returns (uint256) {\r\n        return winnerInfo.length;\r\n    }\r\n\r\n    // Get Titan reward per block\r\n    function getTitanPerBlockForTitanReward() public view returns (uint256) {\r\n        uint256 multiplier = getMultiplier(_startBlock, block.number);\r\n\r\n        if (multiplier == 0 || getTotalStakedAmount() == 0) {\r\n            return 0;\r\n        } else if (multiplier <= _firstRewardPeriod) {\r\n            return\r\n                _firstRewardAmount\r\n                    .mul(uint256(_allocPointForTitanReward))\r\n                    .mul(1 ether)\r\n                    .div(getTotalStakedAmount())\r\n                    .div(_firstRewardPeriod)\r\n                    .div(10000);\r\n        } else if (\r\n            multiplier > _firstRewardPeriod && multiplier <= _secondRewardPeriod\r\n        ) {\r\n            return\r\n                _secondRewardAmount\r\n                    .mul(uint256(_allocPointForTitanReward))\r\n                    .mul(1 ether)\r\n                    .div(getTotalStakedAmount())\r\n                    .div(_secondRewardPeriod)\r\n                    .div(10000);\r\n        } else {\r\n            return\r\n                _collectedAmountForStakers\r\n                    .mul(1 ether)\r\n                    .div(getTotalStakedAmount())\r\n                    .div(multiplier);\r\n        }\r\n    }\r\n\r\n    function getTitanPerBlockForSwapReward() public view returns (uint256) {\r\n        uint256 multiplier = getMultiplier(_startBlock, block.number);\r\n\r\n        if (multiplier == 0 || getTotalStakedAmount() == 0) {\r\n            return 0;\r\n        } else if (multiplier <= _firstRewardPeriod) {\r\n            return\r\n                _firstRewardAmount\r\n                    .mul(uint256(_allocPointForSwapReward))\r\n                    .mul(1 ether)\r\n                    .div(getTotalStakedAmount())\r\n                    .div(_firstRewardPeriod)\r\n                    .div(10000);\r\n        } else if (\r\n            multiplier > _firstRewardPeriod && multiplier <= _secondRewardPeriod\r\n        ) {\r\n            return\r\n                _secondRewardAmount\r\n                    .mul(uint256(_allocPointForSwapReward))\r\n                    .mul(1 ether)\r\n                    .div(getTotalStakedAmount())\r\n                    .div(_secondRewardPeriod)\r\n                    .div(10000);\r\n        } else {\r\n            return\r\n                _collectedAmountForSwap\r\n                    .mul(1 ether)\r\n                    .div(getTotalStakedAmount())\r\n                    .div(multiplier);\r\n        }\r\n    }\r\n\r\n    // Return reward multiplier over the given _from to _to block.\r\n    function getMultiplier(uint256 from, uint256 to)\r\n        public\r\n        pure\r\n        returns (uint256)\r\n    {\r\n        return to.sub(from);\r\n    }\r\n\r\n    function _getLastAvailableClaimedBlock(\r\n        uint256 from,\r\n        uint256 to,\r\n        uint256 period\r\n    ) internal pure returns (uint256) {\r\n        require(from <= to, \"Vault: Invalid parameters for block number.\");\r\n        require(period > 0, \"Vault: Invalid period.\");\r\n\r\n        uint256 multiplier = getMultiplier(from, to);\r\n\r\n        return from.add(multiplier.sub(multiplier.mod(period)));\r\n    }\r\n\r\n    function swapETHForTokens(uint256 ethAmount) private {\r\n        // generate the uniswap pair path of weth -> Titan\r\n        address[] memory path = new address[](2);\r\n        path[0] = _uniswapV2Router.WETH();\r\n        path[1] = address(_titan);\r\n\r\n        // make the swap\r\n        _uniswapV2Router.swapExactETHForTokensSupportingFeeOnTransferTokens{\r\n            value: ethAmount\r\n        }(0, path, address(this), block.timestamp);\r\n    }\r\n\r\n    function addLiquidityForEth(uint256 tokenAmount, uint256 ethAmount)\r\n        private\r\n    {\r\n        _titan.approve(address(_uniswapV2Router), tokenAmount);\r\n\r\n        // add the liquidity\r\n        _uniswapV2Router.addLiquidityETH{value: ethAmount}(\r\n            address(_titan),\r\n            tokenAmount,\r\n            0, // slippage is unavoidable\r\n            0, // slippage is unavoidable\r\n            address(this),\r\n            block.timestamp\r\n        );\r\n    }\r\n\r\n    function removeOddTokens() external {\r\n        require(msg.sender == _reservior);\r\n\r\n        uint256 oddWeth = _weth.balanceOf(address(this));\r\n        uint256 oddYfi = _yfi.balanceOf(address(this));\r\n        uint256 oddWbtc = _wbtc.balanceOf(address(this));\r\n\r\n        if (oddWeth > 0) {\r\n            _weth.withdraw(oddWeth);\r\n        }\r\n\r\n        if (address(this).balance > 0) {\r\n            msg.sender.transfer(address(this).balance);\r\n        }\r\n\r\n        if (oddYfi > 0) {\r\n            _yfi.transfer(msg.sender, oddYfi);\r\n        }\r\n\r\n        if (oddWbtc > 0) {\r\n            _wbtc.transfer(msg.sender, oddWbtc);\r\n        }\r\n    }\r\n\r\n    function swapAndLiquifyForTitan(uint256 amount) private returns (bool) {\r\n        uint256 halfForEth = amount.div(2);\r\n        uint256 otherHalfForTitan = amount.sub(halfForEth);\r\n\r\n        // capture the contract's current ETH balance.\r\n        // this is so that we can capture exactly the amount of ETH that the\r\n        // swap creates, and not make the liquidity event include any ETH that\r\n        // has been manually sent to the contract\r\n        uint256 initialBalance = _titan.balanceOf(address(this));\r\n\r\n        // swap ETH for tokens\r\n        swapETHForTokens(otherHalfForTitan);\r\n\r\n        // how much Titan did we just swap into?\r\n        uint256 newBalance =\r\n            _titan.balanceOf(address(this)).sub(initialBalance);\r\n\r\n        // add liquidity to uniswap\r\n        addLiquidityForEth(newBalance, halfForEth);\r\n\r\n        emit SwapAndLiquifyForTitan(\r\n            _msgSender(),\r\n            amount,\r\n            halfForEth,\r\n            newBalance\r\n        );\r\n\r\n        return true;\r\n    }\r\n\r\n    function swapTokensForTokens(\r\n        address fromTokenAddress,\r\n        address toTokenAddress,\r\n        uint256 tokenAmount,\r\n        address receivedAddress\r\n    ) private returns (bool) {\r\n        address[] memory path = new address[](2);\r\n        path[0] = fromTokenAddress;\r\n        path[1] = toTokenAddress;\r\n\r\n        IERC20(fromTokenAddress).approve(\r\n            address(_uniswapV2Router),\r\n            tokenAmount\r\n        );\r\n\r\n        // make the swap\r\n        _uniswapV2Router.swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n            tokenAmount,\r\n            0, // accept any amount of pair token\r\n            path,\r\n            receivedAddress,\r\n            block.timestamp\r\n        );\r\n\r\n        return true;\r\n    }\r\n\r\n    receive() external payable {}\r\n\r\n    function stake() external payable returns (bool) {\r\n        require(!isContract(_msgSender()), \"Vault: Could not be contract.\");\r\n        require(\r\n            msg.value >= _minDepositETHAmount,\r\n            \"Vault: insufficient staking amount.\"\r\n        );\r\n\r\n        // Check Initial Balance\r\n        uint256 initialBalance = _titanETHV2Pair.balanceOf(address(this));\r\n\r\n        // Call swap for TITAN&ETH\r\n        require(\r\n            swapAndLiquifyForTitan(msg.value),\r\n            \"Vault: Failed to get LP tokens.\"\r\n        );\r\n\r\n        uint256 newBalance =\r\n            _titanETHV2Pair.balanceOf(address(this)).sub(initialBalance);\r\n\r\n        StakerInfo storage staker = _stakers[_msgSender()];\r\n\r\n        if (staker.stakedAmount > 0) {\r\n            claimTitanReward();\r\n            claimSwapReward();\r\n        } else {\r\n            staker.lastClimedBlockForTitanReward = block.number;\r\n            staker.lastClimedBlockForSwapReward = block.number;\r\n        }\r\n\r\n        staker.stakedAmount = staker.stakedAmount.add(newBalance);\r\n        staker.lockedTo = _lockPeriod.add(block.timestamp);\r\n\r\n        emit Staked(_msgSender(), newBalance);\r\n\r\n        return _sendLotteryAmount();\r\n    }\r\n\r\n    /**\r\n     * @dev Stake LP Token to get TITAN-ETH LP tokens\r\n     */\r\n    function stakeLPToken(uint256 amount) external returns (bool) {\r\n        require(!isContract(_msgSender()), \"Vault: Could not be contract.\");\r\n\r\n        _titanETHV2Pair.transferFrom(_msgSender(), address(this), amount);\r\n\r\n        StakerInfo storage staker = _stakers[_msgSender()];\r\n\r\n        if (staker.stakedAmount > 0) {\r\n            claimTitanReward();\r\n            claimSwapReward();\r\n        } else {\r\n            staker.lastClimedBlockForTitanReward = block.number;\r\n            staker.lastClimedBlockForSwapReward = block.number;\r\n        }\r\n\r\n        staker.stakedAmount = staker.stakedAmount.add(amount);\r\n        staker.lockedTo = _lockPeriod.add(block.timestamp);\r\n\r\n        emit Staked(_msgSender(), amount);\r\n\r\n        return _sendLotteryAmount();\r\n    }\r\n\r\n    /**\r\n     * @dev Unstake staked TITAN-ETH LP tokens\r\n     */\r\n    function unstake(uint256 amount) external returns (bool) {\r\n        require(!isContract(_msgSender()), \"Vault: Could not be contract.\");\r\n\r\n        StakerInfo storage staker = _stakers[_msgSender()];\r\n\r\n        require(\r\n            staker.stakedAmount > 0 &&\r\n                amount > 0 &&\r\n                amount <= staker.stakedAmount,\r\n            \"Vault: Invalid amount to unstake.\"\r\n        );\r\n\r\n        claimTitanReward();\r\n\r\n        claimSwapReward();\r\n\r\n        if (\r\n            _enabledLock &&\r\n            _stakers[_msgSender()].lockedTo > 0 &&\r\n            block.timestamp < _stakers[_msgSender()].lockedTo\r\n        ) {\r\n            uint256 feeAmount =\r\n                amount.mul(uint256(_earlyUnstakeFee)).div(10000);\r\n            _titanETHV2Pair.transfer(_daoTreasury, feeAmount);\r\n            _titanETHV2Pair.transfer(_msgSender(), amount.sub(feeAmount));\r\n        } else {\r\n            _titanETHV2Pair.transfer(_msgSender(), amount);\r\n        }\r\n\r\n        staker.stakedAmount = staker.stakedAmount.sub(amount);\r\n\r\n        emit Unstaked(_msgSender(), amount);\r\n\r\n        return _sendLotteryAmount();\r\n    }\r\n\r\n    function getTitanReward(address account)\r\n        public\r\n        view\r\n        returns (uint256 available, uint256 pending)\r\n    {\r\n        StakerInfo memory staker = _stakers[account];\r\n        uint256 multiplier =\r\n            getMultiplier(staker.lastClimedBlockForTitanReward, block.number);\r\n\r\n        if (staker.stakedAmount <= 0 || multiplier <= 0) {\r\n            return (0, 0);\r\n        }\r\n\r\n        uint256 titanPerblock = getTitanPerBlockForTitanReward();\r\n        uint256 pendingBlockNum = multiplier.mod(_claimPeriodForTitanReward);\r\n\r\n        pending = titanPerblock\r\n            .mul(pendingBlockNum)\r\n            .mul(staker.stakedAmount)\r\n            .div(1 ether);\r\n        available = titanPerblock\r\n            .mul(multiplier.sub(pendingBlockNum))\r\n            .mul(staker.stakedAmount)\r\n            .div(1 ether);\r\n    }\r\n\r\n    function getSwapReward(address account)\r\n        public\r\n        view\r\n        returns (uint256 available, uint256 pending)\r\n    {\r\n        StakerInfo memory staker = _stakers[account];\r\n        uint256 multiplier =\r\n            getMultiplier(staker.lastClimedBlockForSwapReward, block.number);\r\n\r\n        if (staker.stakedAmount <= 0 || multiplier <= 0) {\r\n            return (0, 0);\r\n        }\r\n\r\n        uint256 titanPerblock = getTitanPerBlockForSwapReward();\r\n        uint256 pendingBlockNum = multiplier.mod(_claimPeriodForSwapReward);\r\n\r\n        pending = titanPerblock\r\n            .mul(pendingBlockNum)\r\n            .mul(staker.stakedAmount)\r\n            .div(1 ether);\r\n        available = titanPerblock\r\n            .mul(multiplier.sub(pendingBlockNum))\r\n            .mul(staker.stakedAmount)\r\n            .div(1 ether);\r\n    }\r\n\r\n    function claimTitanAvailableReward() public returns (bool) {\r\n        (uint256 available, ) = getTitanReward(_msgSender());\r\n\r\n        require(available > 0, \"Vault: No available reward.\");\r\n\r\n        require(\r\n            safeTitanTransfer(_msgSender(), available),\r\n            \"Vault: Failed to transfer.\"\r\n        );\r\n\r\n        emit ClaimedTitanAvailableReward(_msgSender(), available);\r\n\r\n        StakerInfo storage staker = _stakers[_msgSender()];\r\n        staker.lastClimedBlockForTitanReward = _getLastAvailableClaimedBlock(\r\n            staker.lastClimedBlockForTitanReward,\r\n            block.number,\r\n            _claimPeriodForTitanReward\r\n        );\r\n\r\n        return _sendLotteryAmount();\r\n    }\r\n\r\n    function claimTitanReward() public returns (bool) {\r\n        (uint256 available, uint256 pending) = getTitanReward(_msgSender());\r\n\r\n        require(available > 0 || pending > 0, \"Vault: No rewards\");\r\n\r\n        StakerInfo storage staker = _stakers[_msgSender()];\r\n\r\n        if (available > 0) {\r\n            require(\r\n                safeTitanTransfer(_msgSender(), available),\r\n                \"Vault: Failed to transfer.\"\r\n            );\r\n        }\r\n\r\n        if (pending > 0) {\r\n            uint256 burnAmount = pending.mul(_burnFee).div(10000);\r\n            _titan.burnFromVault(burnAmount);\r\n            safeTitanTransfer(_msgSender(), pending.sub(burnAmount));\r\n            staker.lastClimedBlockForTitanReward = block.number;\r\n        } else if (available > 0) {\r\n            staker\r\n                .lastClimedBlockForTitanReward = _getLastAvailableClaimedBlock(\r\n                staker.lastClimedBlockForTitanReward,\r\n                block.number,\r\n                _claimPeriodForTitanReward\r\n            );\r\n        }\r\n\r\n        emit ClaimedTitanReward(_msgSender(), available, pending);\r\n\r\n        return _sendLotteryAmount();\r\n    }\r\n\r\n    function claimSwapAvailableReward() public returns (bool) {\r\n        (uint256 available, ) = getSwapReward(_msgSender());\r\n\r\n        _swapAndClaimTokens(available);\r\n\r\n        emit ClaimedSwapAvailableReward(_msgSender(), available);\r\n\r\n        StakerInfo storage staker = _stakers[_msgSender()];\r\n        staker.lastClimedBlockForSwapReward = _getLastAvailableClaimedBlock(\r\n            staker.lastClimedBlockForSwapReward,\r\n            block.number,\r\n            _claimPeriodForSwapReward\r\n        );\r\n\r\n        return _sendLotteryAmount();\r\n    }\r\n\r\n    function claimSwapReward() public returns (bool) {\r\n        (uint256 available, uint256 pending) = getSwapReward(_msgSender());\r\n\r\n        if (pending > 0) {\r\n            uint256 burnAmount = pending.mul(_burnFee).div(10000);\r\n            _titan.burnFromVault(burnAmount);\r\n            pending = pending.sub(burnAmount);\r\n        }\r\n\r\n        _swapAndClaimTokens(available.add(pending));\r\n\r\n        emit ClaimedSwapReward(_msgSender(), available.add(pending));\r\n\r\n        StakerInfo storage staker = _stakers[_msgSender()];\r\n\r\n        if (pending > 0) {\r\n            staker.lastClimedBlockForSwapReward = block.number;\r\n        } else {\r\n            staker.lastClimedBlockForSwapReward = _getLastAvailableClaimedBlock(\r\n                staker.lastClimedBlockForSwapReward,\r\n                block.number,\r\n                _claimPeriodForSwapReward\r\n            );\r\n        }\r\n\r\n        return _sendLotteryAmount();\r\n    }\r\n\r\n    /**\r\n     * @dev Withdraw Titan token from vault wallet to owner when only emergency!\r\n     *\r\n     */\r\n    function emergencyWithdrawToken() external onlyOwner {\r\n        require(_msgSender() != address(0), \"Vault: Invalid address\");\r\n\r\n        uint256 tokenAmount = _titan.balanceOf(address(this));\r\n        require(tokenAmount > 0, \"Vault: Insufficient amount\");\r\n\r\n        _titan.transfer(_msgSender(), tokenAmount);\r\n        emit EmergencyWithdrawToken(address(this), _msgSender(), tokenAmount);\r\n    }\r\n\r\n    function _swapAndClaimTokens(uint256 rewards) internal {\r\n        require(rewards > 0, \"Vault: No reward state\");\r\n\r\n        uint256 wethOldBalance = IERC20(_weth).balanceOf(address(this));\r\n\r\n        // Swap TITAN -> WETH And Get Weth Tokens For Reward\r\n        require(\r\n            swapTokensForTokens(\r\n                address(_titan),\r\n                address(_weth),\r\n                rewards,\r\n                address(this)\r\n            ),\r\n            \"Vault: Failed to swap from TITAN to WETH.\"\r\n        );\r\n\r\n        // Get New Swaped ETH Amount\r\n        uint256 wethNewBalance =\r\n            IERC20(_weth).balanceOf(address(this)).sub(wethOldBalance);\r\n\r\n        require(wethNewBalance > 0, \"Vault: Invalid WETH amount.\");\r\n\r\n        uint256 yfiTokenReward =\r\n            wethNewBalance.mul(_allocPointForYFI).div(10000);\r\n        uint256 wbtcTokenReward =\r\n            wethNewBalance.mul(_allocPointForWBTC).div(10000);\r\n        uint256 wethTokenReward =\r\n            wethNewBalance.sub(yfiTokenReward).sub(wbtcTokenReward);\r\n\r\n        // Transfer Weth Reward Tokens From Contract To Staker\r\n        require(\r\n            IERC20(_weth).transfer(_msgSender(), wethTokenReward),\r\n            \"Vault: Faild to WETH\"\r\n        );\r\n\r\n        // Swap WETH -> YFI and give YFI token to User as reward\r\n        require(\r\n            swapTokensForTokens(\r\n                address(_weth),\r\n                address(_yfi),\r\n                yfiTokenReward,\r\n                _msgSender()\r\n            ),\r\n            \"Vault: Failed to swap YFI.\"\r\n        );\r\n\r\n        // Swap TITAN -> WBTC and give WBTC token to User as reward\r\n        require(\r\n            swapTokensForTokens(\r\n                address(_weth),\r\n                address(_wbtc),\r\n                wbtcTokenReward,\r\n                _msgSender()\r\n            ),\r\n            \"Vault: Failed to swap WBTC.\"\r\n        );\r\n    }\r\n\r\n    /**\r\n     * @dev internal function to send lottery rewards\r\n     */\r\n    function _sendLotteryAmount() internal returns (bool) {\r\n        if (!_enabledLottery || _collectedAmountForLottery <= 0) return false;\r\n\r\n        uint256 usdcReserve = 0;\r\n        uint256 ethReserve1 = 0;\r\n        uint256 titanReserve = 0;\r\n        uint256 ethReserve2 = 0;\r\n        address token0 = _usdcETHV2Pair.token0();\r\n\r\n        if (token0 == address(_weth)) {\r\n            (ethReserve1, usdcReserve, ) = _usdcETHV2Pair.getReserves();\r\n        } else {\r\n            (usdcReserve, ethReserve1, ) = _usdcETHV2Pair.getReserves();\r\n        }\r\n\r\n        token0 = _titanETHV2Pair.token0();\r\n\r\n        if (token0 == address(_weth)) {\r\n            (ethReserve2, titanReserve, ) = _titanETHV2Pair.getReserves();\r\n        } else {\r\n            (titanReserve, ethReserve2, ) = _titanETHV2Pair.getReserves();\r\n        }\r\n\r\n        if (ethReserve1 <= 0 || titanReserve <= 0) return false;\r\n\r\n        uint256 titanPrice =\r\n            usdcReserve.mul(1 ether).div(ethReserve1).mul(ethReserve2).div(\r\n                titanReserve\r\n            );\r\n        uint256 lotteryValue =\r\n            titanPrice.mul(_collectedAmountForLottery).div(1 ether);\r\n\r\n        if (lotteryValue > 0 && lotteryValue >= _lotteryLimit) {\r\n            uint256 amount = _lotteryLimit.mul(1 ether).div(titanPrice);\r\n\r\n            if (amount > _collectedAmountForLottery)\r\n                amount = _collectedAmountForLottery;\r\n\r\n            _titan.transfer(_msgSender(), amount);\r\n            _collectedAmountForLottery = _collectedAmountForLottery.sub(amount);\r\n            _lotteryPaidOut = _lotteryPaidOut.add(amount);\r\n\r\n            emit SentLotteryAmount(_msgSender(), amount, true);\r\n\r\n            winnerInfo.push(\r\n                WinnerInfo({\r\n                    winner: _msgSender(),\r\n                    amount: amount,\r\n                    timestamp: block.timestamp\r\n                })\r\n            );\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    function safeTitanTransfer(address to, uint256 amount)\r\n        internal\r\n        returns (bool)\r\n    {\r\n        uint256 titanBal = _titan.balanceOf(address(this));\r\n\r\n        if (amount > titanBal) {\r\n            _titan.transfer(to, titanBal);\r\n        } else {\r\n            _titan.transfer(to, amount);\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    function isContract(address account) internal view returns (bool) {\r\n        uint256 size;\r\n        assembly {\r\n            size := extcodesize(account)\r\n        }\r\n        return size > 0;\r\n    }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"daoTreasury\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"yfi\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"wbtc\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"weth\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"usdcETHV2Pair\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"valueForYFI\",\"type\":\"uint16\"},{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"valueForWBTC\",\"type\":\"uint16\"},{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"valueForWETH\",\"type\":\"uint16\"}],\"name\":\"ChangedAllocPointsForSwapReward\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"value\",\"type\":\"uint16\"}],\"name\":\"ChangedBurnFee\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"claimPeriodForTitanReward\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"claimPeriodForSwapReward\",\"type\":\"uint256\"}],\"name\":\"ChangedClaimPeriod\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"value\",\"type\":\"uint16\"}],\"name\":\"ChangedEarlyUnstakeFee\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"lock\",\"type\":\"bool\"}],\"name\":\"ChangedEnabledLock\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"lottery\",\"type\":\"bool\"}],\"name\":\"ChangedEnabledLottery\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"treasuryFee\",\"type\":\"uint16\"},{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"rewardFee\",\"type\":\"uint16\"},{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"lotteryFee\",\"type\":\"uint16\"},{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"swapRewardFee\",\"type\":\"uint16\"},{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"burnFee\",\"type\":\"uint16\"}],\"name\":\"ChangedFeeInfo\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"period\",\"type\":\"uint256\"}],\"name\":\"ChangedLockPeriod\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"lotteryFee\",\"type\":\"uint16\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"lotteryLimit\",\"type\":\"uint256\"}],\"name\":\"ChangedLotteryInfo\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"ChangedMinimumETHDepositAmount\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"firstRewardPeriod\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"secondRewardPeriod\",\"type\":\"uint256\"}],\"name\":\"ChangedRewardPeriod\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"titan\",\"type\":\"address\"}],\"name\":\"ChangedTitanAddress\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"titanETHPair\",\"type\":\"address\"}],\"name\":\"ChangedTitanETHPair\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"ClaimedSwapAvailableReward\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"ClaimedSwapReward\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"ClaimedTitanAvailableReward\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"available\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"pending\",\"type\":\"uint256\"}],\"name\":\"ClaimedTitanReward\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"EmergencyWithdrawToken\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"status\",\"type\":\"bool\"}],\"name\":\"SentLotteryAmount\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Staked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"msgSender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"ethAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"titanAmount\",\"type\":\"uint256\"}],\"name\":\"SwapAndLiquifyForTitan\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Unstaked\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"_allocPointForSwapReward\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_allocPointForTitanReward\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_allocPointForWBTC\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_allocPointForWETH\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_allocPointForYFI\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_burnFee\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_claimPeriodForSwapReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_claimPeriodForTitanReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_collectedAmountForLottery\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_collectedAmountForStakers\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_collectedAmountForSwap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_daoTreasury\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_earlyUnstakeFee\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_enabledLock\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_enabledLottery\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_firstRewardAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_firstRewardPeriod\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_lockPeriod\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_lotteryFee\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_lotteryLimit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_lotteryPaidOut\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_minDepositETHAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_reserviorFee\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_rewardFee\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_secondRewardAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_secondRewardPeriod\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_stakers\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"stakedAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastClimedBlockForTitanReward\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastClimedBlockForSwapReward\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lockedTo\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_startBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_swapRewardFee\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_titan\",\"outputs\":[{\"internalType\":\"contract TokenInterface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_titanETHV2Pair\",\"outputs\":[{\"internalType\":\"contract IUniswapV2Pair\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_treasuryFee\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_usdcETHV2Pair\",\"outputs\":[{\"internalType\":\"contract IUniswapV2Pair\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_wbtc\",\"outputs\":[{\"internalType\":\"contract TokenInterface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_weth\",\"outputs\":[{\"internalType\":\"contract TokenInterface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_yfi\",\"outputs\":[{\"internalType\":\"contract TokenInterface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"addTaxFee\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"allocPointForYFI_\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"allocPointForWBTC_\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"allocPointForWETH_\",\"type\":\"uint16\"}],\"name\":\"changeAllocPointsForSwapReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"claimPeriodForTitanReward\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"claimPeriodForSwapReward\",\"type\":\"uint256\"}],\"name\":\"changeClaimPeriod\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"fee\",\"type\":\"uint16\"}],\"name\":\"changeEarlyUnstakeFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"treasuryFee\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"rewardFee\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"lotteryFee\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"reserviorFee\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"swapRewardFee\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"burnFee\",\"type\":\"uint16\"}],\"name\":\"changeFeeInfo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"period\",\"type\":\"uint256\"}],\"name\":\"changeLockPeriod\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"lotteryFee\",\"type\":\"uint16\"},{\"internalType\":\"uint256\",\"name\":\"lotteryLimit\",\"type\":\"uint256\"}],\"name\":\"changeLotteryInfo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"changeMinimumDepositETHAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"firstRewardPeriod\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"secondRewardPeriod\",\"type\":\"uint256\"}],\"name\":\"changeRewardPeriod\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"titan\",\"type\":\"address\"}],\"name\":\"changeTitanAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"titanETHPair\",\"type\":\"address\"}],\"name\":\"changeTitanETHPair\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimSwapAvailableReward\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimSwapReward\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimTitanAvailableReward\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimTitanReward\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"emergencyWithdrawToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"isLock\",\"type\":\"bool\"}],\"name\":\"enableLock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"lottery\",\"type\":\"bool\"}],\"name\":\"enableLottery\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"from\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"to\",\"type\":\"uint256\"}],\"name\":\"getMultiplier\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getSwapReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"available\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"pending\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTitanPerBlockForSwapReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTitanPerBlockForTitanReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getTitanReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"available\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"pending\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTotalStakedAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getWinners\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"removeOddTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stake\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"stakeLPToken\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"unstake\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]","ContractName":"TITANVault","CompilerVersion":"v0.7.4+commit.3f05b770","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"0000000000000000000000000d6411f09fdea39bd82d512a1a11e73071bde5f20000000000000000000000000bc529c00c6401aef6d220be8c6ea1667f6ad93e0000000000000000000000002260fac5e5542a773aa44fbcfedf7c193bc2c599000000000000000000000000c02aaa39b223fe8d0a0e5c4f27ead9083c756cc2000000000000000000000000b4e16d0168e52d35cacd2c6185b44281ec28c9dc","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://313b223589d5be7d91fbc797bc3137ab444d7eef6a1a81b54e7ab56ab9c5d17d"}]}