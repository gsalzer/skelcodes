{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/TOKENBridge.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.7.3;\\n\\nimport \\\"./lib/SafeMath.sol\\\";\\nimport \\\"./lib/IERC20.sol\\\";\\nimport \\\"./lib/Context.sol\\\";\\nimport \\\"./lib/ReentrancyGuard.sol\\\";\\nimport \\\"./lib/Ownable.sol\\\";\\n\\ncontract TOKENBridge is ReentrancyGuard, Context, Ownable {\\n  using SafeMath for uint256;\\n\\n  mapping (address => bool) private validators;\\n\\n  address payable private feeAddress;\\n  uint256 private feeRate = 0;\\n  bool private isFrozen = false;\\n  uint256 private maxTransactionWSG = 30000000000000000000;  // 30\\n  uint256 private maxTransactionGASPAY = 75000000000000000000;  // 75\\n  uint256 private maxTransactionGASG = 150000000000000000000;  // 150\\n\\n  IERC20 private WSG_TOKEN;\\n  IERC20 private GASPAY_TOKEN;\\n  IERC20 private GASG_TOKEN;\\n\\n  constructor(address _WSGToken, address _GASPAYToken, address _GASGToken) {\\n    WSG_TOKEN = IERC20(_WSGToken);\\n    GASPAY_TOKEN = IERC20(_GASPAYToken);\\n    GASG_TOKEN = IERC20(_GASGToken);\\n  }\\n\\n  event Exchange(address indexed user, uint256 amount, uint256 fee, string project);\\n  // event ExchangeWSG(address indexed user, uint256 amount, uint256 fee);\\n  // event ExchangeGASPAY(address indexed user, uint256 amount, uint256 fee);\\n  // event ExchangeGASG(address indexed user, uint256 amount, uint256 fee);\\n\\n  function isValidator(address _addr) external view returns (bool) {\\n      return validators[_addr];\\n  }\\n\\n  function addValidator(address _addr) external onlyOwner nonReentrant {\\n      validators[_addr] = true;        \\n  }\\n\\n  function removeValidator(address _addr) external onlyOwner nonReentrant {\\n      if (validators[_addr]) {\\n          delete validators[_addr];\\n      }\\n  }\\n\\n  function getFeeAddress() external view returns (address) {\\n    return feeAddress;\\n  }\\n\\n  function setFeeAddress(address payable _feeAddress) external onlyOwner nonReentrant {\\n    require(_feeAddress != address(0), \\\"Bad address\\\");\\n    feeAddress = _feeAddress;\\n  }\\n\\n  function getFeeRate() external view returns (uint256) {\\n    return feeRate;\\n  }\\n\\n  function setFeeRate(uint256 _feeRate) external onlyOwner nonReentrant {\\n    feeRate = _feeRate;\\n  }\\n\\n  function getMaxTransaction() external view returns (uint256 wsg, uint256 gaspay, uint256 gasg) {\\n    wsg = maxTransactionWSG;\\n    gaspay = maxTransactionGASPAY;\\n    gasg = maxTransactionGASG;\\n  }\\n\\n  function setMaxTransactionWSG(uint256 _maxTransaction) external onlyOwner nonReentrant {\\n    require(_maxTransaction > 0, \\\"Max transaction must be greater than 0\\\");\\n    maxTransactionWSG = _maxTransaction;\\n  }\\n\\n  function setMaxTransactionGASPAY(uint256 _maxTransaction) external onlyOwner nonReentrant {\\n    require(_maxTransaction > 0, \\\"Max transaction must be greater than 0\\\");\\n    maxTransactionGASPAY = _maxTransaction;\\n  }\\n\\n  function setMaxTransactionGASG(uint256 _maxTransaction) external onlyOwner nonReentrant {\\n    require(_maxTransaction > 0, \\\"Max transaction must be greater than 0\\\");\\n    maxTransactionGASG = _maxTransaction;\\n  }\\n\\n  function getFrozen() external view returns (bool) {\\n    return isFrozen;\\n  }\\n\\n  function setFrozen(bool _isFrozen) external onlyOwner nonReentrant {\\n    isFrozen = _isFrozen;\\n  }\\n\\n  function getTokenBalance() external view returns (uint256 wsg, uint256 gaspay, uint256 gasg) {\\n    wsg = WSG_TOKEN.balanceOf(address(this));\\n    gaspay = GASPAY_TOKEN.balanceOf(address(this));\\n    gasg = GASG_TOKEN.balanceOf(address(this));\\n  }\\n\\n  function sweepWSGTokenBalance() external payable onlyOwner {\\n    uint256 amount2Pay = WSG_TOKEN.balanceOf(address(this));\\n    require(WSG_TOKEN.transfer(msg.sender, amount2Pay), \\\"Unable to transfer funds\\\");\\n  }\\n\\n  function sweepGASPAYTokenBalance() external payable onlyOwner {\\n    uint256 amount2Pay = GASPAY_TOKEN.balanceOf(address(this));\\n    require(GASPAY_TOKEN.transfer(msg.sender, amount2Pay), \\\"Unable to transfer funds\\\");\\n  }\\n\\n  function sweepGASGTokenBalance() external payable onlyOwner {\\n    uint256 amount2Pay = GASG_TOKEN.balanceOf(address(this));\\n    require(GASG_TOKEN.transfer(msg.sender, amount2Pay), \\\"Unable to transfer funds\\\");\\n  }\\n\\n  function exchangeWSGToken(uint256 _amt) external payable nonReentrant {\\n    require(!isFrozen, \\\"Contract is frozen\\\");\\n    require(msg.value >= feeRate, \\\"Fee not met\\\");\\n    require(_amt > 0, \\\"Amount must be greater than 0\\\");\\n    require(WSG_TOKEN.allowance(msg.sender, address(this)) >= _amt, \\\"Not enough allowance\\\");\\n    feeAddress.transfer(msg.value);\\n    if(_amt > maxTransactionWSG) {\\n      require(WSG_TOKEN.transferFrom(msg.sender, address(this), maxTransactionWSG), \\\"Unable to transfer funds\\\");\\n      // emit ExchangeWSG(msg.sender, maxTransactionWSG, msg.value);\\n      emit Exchange(msg.sender, maxTransactionWSG, msg.value, 'WSG');\\n    } else {\\n      require(WSG_TOKEN.transferFrom(msg.sender, address(this), _amt), \\\"Unable to transfer funds\\\");\\n      // emit ExchangeWSG(msg.sender, _amt, msg.value);\\n      emit Exchange(msg.sender, _amt, msg.value, 'WSG');\\n    }\\n  }\\n\\n  function exchangeGASPAYToken(uint256 _amt) external payable nonReentrant {\\n    require(!isFrozen, \\\"Contract is frozen\\\");\\n    require(msg.value >= feeRate, \\\"Fee not met\\\");\\n    require(_amt > 0, \\\"Amount must be greater than 0\\\");\\n    require(GASPAY_TOKEN.allowance(msg.sender, address(this)) >= _amt, \\\"Not enough allowance\\\");\\n    feeAddress.transfer(msg.value);\\n    if(_amt > maxTransactionGASPAY) {\\n      require(GASPAY_TOKEN.transferFrom(msg.sender, address(this), maxTransactionGASPAY), \\\"Unable to transfer funds\\\");\\n      // emit ExchangeGASPAY(msg.sender, maxTransactionGASPAY, msg.value);\\n      emit Exchange(msg.sender, maxTransactionGASPAY, msg.value, 'GASPAY');\\n    } else {\\n      require(GASPAY_TOKEN.transferFrom(msg.sender, address(this), _amt), \\\"Unable to transfer funds\\\");\\n      // emit ExchangeGASPAY(msg.sender, _amt, msg.value);\\n      emit Exchange(msg.sender, _amt, msg.value, 'GASPAY');\\n    }\\n  }\\n\\n  function exchangeGASGToken(uint256 _amt) external payable nonReentrant {\\n    require(!isFrozen, \\\"Contract is frozen\\\");\\n    require(msg.value >= feeRate, \\\"Fee not met\\\");\\n    require(_amt > 0, \\\"Amount must be greater than 0\\\");\\n    require(GASG_TOKEN.allowance(msg.sender, address(this)) >= _amt, \\\"Not enough allowance\\\");\\n    feeAddress.transfer(msg.value);\\n    if(_amt > maxTransactionGASG) {\\n      require(GASG_TOKEN.transferFrom(msg.sender, address(this), maxTransactionGASG), \\\"Unable to transfer funds\\\");\\n      // emit ExchangeGASG(msg.sender, maxTransactionGASG, msg.value);\\n      emit Exchange(msg.sender, maxTransactionGASG, msg.value, 'GASG');\\n    } else {\\n      require(GASG_TOKEN.transferFrom(msg.sender, address(this), _amt), \\\"Unable to transfer funds\\\");\\n      // emit ExchangeGASG(msg.sender, _amt, msg.value);\\n      emit Exchange(msg.sender, _amt, msg.value, 'GASG');\\n    }\\n  }\\n\\n}\\n\"\r\n    },\r\n    \"contracts/lib/SafeMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.7.3;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return sub(a, b, \\\"SafeMath: subtraction overflow\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        uint256 c = a - b;\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        uint256 c = a / b;\\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return mod(a, b, \\\"SafeMath: modulo by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts with custom message when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b != 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/lib/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"contracts/lib/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.7.3;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/lib/ReentrancyGuard.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.7.3;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor () {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and make it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/lib/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.7.3;\\n\\nimport \\\"./Context.sol\\\";\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor () {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(_owner == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": false,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_WSGToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_GASPAYToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_GASGToken\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"project\",\"type\":\"string\"}],\"name\":\"Exchange\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"addValidator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amt\",\"type\":\"uint256\"}],\"name\":\"exchangeGASGToken\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amt\",\"type\":\"uint256\"}],\"name\":\"exchangeGASPAYToken\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amt\",\"type\":\"uint256\"}],\"name\":\"exchangeWSGToken\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getFeeAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getFeeRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getFrozen\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMaxTransaction\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"wsg\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"gaspay\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"gasg\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTokenBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"wsg\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"gaspay\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"gasg\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"isValidator\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"removeValidator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_feeAddress\",\"type\":\"address\"}],\"name\":\"setFeeAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_feeRate\",\"type\":\"uint256\"}],\"name\":\"setFeeRate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_isFrozen\",\"type\":\"bool\"}],\"name\":\"setFrozen\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_maxTransaction\",\"type\":\"uint256\"}],\"name\":\"setMaxTransactionGASG\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_maxTransaction\",\"type\":\"uint256\"}],\"name\":\"setMaxTransactionGASPAY\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_maxTransaction\",\"type\":\"uint256\"}],\"name\":\"setMaxTransactionWSG\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sweepGASGTokenBalance\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sweepGASPAYTokenBalance\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sweepWSGTokenBalance\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"TOKENBridge","CompilerVersion":"v0.7.3+commit.9bfce1f6","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"000000000000000000000000a8076c9a80d11079e6ee67b791c6a13f2aaff9de0000000000000000000000004a01c8775319244bf0680ed61a61ab4f6ec38a39000000000000000000000000c58467b855401ef3ff8fda9216f236e29f0d6277","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}