{"status":"1","message":"OK","result":[{"SourceCode":"// SPDX-License-Identifier: MIT\n\npragma solidity 0.6.12;\npragma experimental ABIEncoderV2;\n\n\n\n// Part: IBank\n\ninterface IBank {\n  /// The governor adds a new bank gets added to the system.\n  event AddBank(address token, address cToken);\n  /// The governor sets the address of the oracle smart contract.\n  event SetOracle(address oracle);\n  /// The governor sets the basis point fee of the bank.\n  event SetFeeBps(uint feeBps);\n  /// The governor withdraw tokens from the reserve of a bank.\n  event WithdrawReserve(address user, address token, uint amount);\n  /// Someone borrows tokens from a bank via a spell caller.\n  event Borrow(uint positionId, address caller, address token, uint amount, uint share);\n  /// Someone repays tokens to a bank via a spell caller.\n  event Repay(uint positionId, address caller, address token, uint amount, uint share);\n  /// Someone puts tokens as collateral via a spell caller.\n  event PutCollateral(uint positionId, address caller, address token, uint id, uint amount);\n  /// Someone takes tokens from collateral via a spell caller.\n  event TakeCollateral(uint positionId, address caller, address token, uint id, uint amount);\n  /// Someone calls liquidatation on a position, paying debt and taking collateral tokens.\n  event Liquidate(\n    uint positionId,\n    address liquidator,\n    address debtToken,\n    uint amount,\n    uint share,\n    uint bounty\n  );\n\n  /// @dev Return the current position while under execution.\n  function POSITION_ID() external view returns (uint);\n\n  /// @dev Return the current target while under execution.\n  function SPELL() external view returns (address);\n\n  /// @dev Return the current executor (the owner of the current position).\n  function EXECUTOR() external view returns (address);\n\n  /// @dev Return bank information for the given token.\n  function getBankInfo(address token)\n    external\n    view\n    returns (\n      bool isListed,\n      address cToken,\n      uint reserve,\n      uint totalDebt,\n      uint totalShare\n    );\n\n  /// @dev Return position information for the given position id.\n  function getPositionInfo(uint positionId)\n    external\n    view\n    returns (\n      address owner,\n      address collToken,\n      uint collId,\n      uint collateralSize\n    );\n\n  /// @dev Return the borrow balance for given positon and token without trigger interest accrual.\n  function borrowBalanceStored(uint positionId, address token) external view returns (uint);\n\n  /// @dev Trigger interest accrual and return the current borrow balance.\n  function borrowBalanceCurrent(uint positionId, address token) external returns (uint);\n\n  /// @dev Borrow tokens from the bank.\n  function borrow(address token, uint amount) external;\n\n  /// @dev Repays tokens to the bank.\n  function repay(address token, uint amountCall) external;\n\n  /// @dev Transmit user assets to the spell.\n  function transmit(address token, uint amount) external;\n\n  /// @dev Put more collateral for users.\n  function putCollateral(\n    address collToken,\n    uint collId,\n    uint amountCall\n  ) external;\n\n  /// @dev Take some collateral back.\n  function takeCollateral(\n    address collToken,\n    uint collId,\n    uint amount\n  ) external;\n\n  /// @dev Liquidate a position.\n  function liquidate(\n    uint positionId,\n    address debtToken,\n    uint amountCall\n  ) external;\n\n  function getBorrowETHValue(uint positionId) external view returns (uint);\n\n  function accrue(address token) external;\n\n  function nextPositionId() external view returns (uint);\n\n  /// @dev Return current position information.\n  function getCurrentPositionInfo()\n    external\n    view\n    returns (\n      address owner,\n      address collToken,\n      uint collId,\n      uint collateralSize\n    );\n\n  function support(address token) external view returns (bool);\n\n}\n\n// Part: IERC20Wrapper\n\ninterface IERC20Wrapper {\n  /// @dev Return the underlying ERC-20 for the given ERC-1155 token id.\n  function getUnderlyingToken(uint id) external view returns (address);\n\n  /// @dev Return the conversion rate from ERC-1155 to ERC-20, multiplied by 2**112.\n  function getUnderlyingRate(uint id) external view returns (uint);\n}\n\n// Part: IUniswapV2Factory\n\n// https://github.com/Uniswap/uniswap-v2-core/blob/master/contracts/interfaces/IUniswapV2Factory.sol\n\ninterface IUniswapV2Factory {\n  event PairCreated(address indexed token0, address indexed token1, address pair, uint);\n\n  function feeTo() external view returns (address);\n\n  function feeToSetter() external view returns (address);\n\n  function getPair(address tokenA, address tokenB) external view returns (address pair);\n\n  function allPairs(uint) external view returns (address pair);\n\n  function allPairsLength() external view returns (uint);\n\n  function createPair(address tokenA, address tokenB) external returns (address pair);\n\n  function setFeeTo(address) external;\n\n  function setFeeToSetter(address) external;\n}\n\n// Part: IUniswapV2Pair\n\n// https://github.com/Uniswap/uniswap-v2-core/blob/master/contracts/interfaces/IUniswapV2Pair.sol\n\ninterface IUniswapV2Pair {\n  event Approval(address indexed owner, address indexed spender, uint value);\n  event Transfer(address indexed from, address indexed to, uint value);\n\n  function name() external pure returns (string memory);\n\n  function symbol() external pure returns (string memory);\n\n  function decimals() external pure returns (uint8);\n\n  function totalSupply() external view returns (uint);\n\n  function balanceOf(address owner) external view returns (uint);\n\n  function allowance(address owner, address spender) external view returns (uint);\n\n  function approve(address spender, uint value) external returns (bool);\n\n  function transfer(address to, uint value) external returns (bool);\n\n  function transferFrom(\n    address from,\n    address to,\n    uint value\n  ) external returns (bool);\n\n  function DOMAIN_SEPARATOR() external view returns (bytes32);\n\n  function PERMIT_TYPEHASH() external pure returns (bytes32);\n\n  function nonces(address owner) external view returns (uint);\n\n  function permit(\n    address owner,\n    address spender,\n    uint value,\n    uint deadline,\n    uint8 v,\n    bytes32 r,\n    bytes32 s\n  ) external;\n\n  event Mint(address indexed sender, uint amount0, uint amount1);\n  event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);\n  event Swap(\n    address indexed sender,\n    uint amount0In,\n    uint amount1In,\n    uint amount0Out,\n    uint amount1Out,\n    address indexed to\n  );\n  event Sync(uint112 reserve0, uint112 reserve1);\n\n  function MINIMUM_LIQUIDITY() external pure returns (uint);\n\n  function factory() external view returns (address);\n\n  function token0() external view returns (address);\n\n  function token1() external view returns (address);\n\n  function getReserves()\n    external\n    view\n    returns (\n      uint112 reserve0,\n      uint112 reserve1,\n      uint32 blockTimestampLast\n    );\n\n  function price0CumulativeLast() external view returns (uint);\n\n  function price1CumulativeLast() external view returns (uint);\n\n  function kLast() external view returns (uint);\n\n  function mint(address to) external returns (uint liquidity);\n\n  function burn(address to) external returns (uint amount0, uint amount1);\n\n  function swap(\n    uint amount0Out,\n    uint amount1Out,\n    address to,\n    bytes calldata data\n  ) external;\n\n  function skim(address to) external;\n\n  function sync() external;\n\n  function initialize(address, address) external;\n}\n\n// Part: IUniswapV2Router01\n\n// https://github.com/Uniswap/uniswap-v2-periphery/blob/master/contracts/interfaces/IUniswapV2Router01.sol\n\ninterface IUniswapV2Router01 {\n  function factory() external pure returns (address);\n\n  function WETH() external pure returns (address);\n\n  function addLiquidity(\n    address tokenA,\n    address tokenB,\n    uint amountADesired,\n    uint amountBDesired,\n    uint amountAMin,\n    uint amountBMin,\n    address to,\n    uint deadline\n  )\n    external\n    returns (\n      uint amountA,\n      uint amountB,\n      uint liquidity\n    );\n\n  function addLiquidityETH(\n    address token,\n    uint amountTokenDesired,\n    uint amountTokenMin,\n    uint amountETHMin,\n    address to,\n    uint deadline\n  )\n    external\n    payable\n    returns (\n      uint amountToken,\n      uint amountETH,\n      uint liquidity\n    );\n\n  function removeLiquidity(\n    address tokenA,\n    address tokenB,\n    uint liquidity,\n    uint amountAMin,\n    uint amountBMin,\n    address to,\n    uint deadline\n  ) external returns (uint amountA, uint amountB);\n\n  function removeLiquidityETH(\n    address token,\n    uint liquidity,\n    uint amountTokenMin,\n    uint amountETHMin,\n    address to,\n    uint deadline\n  ) external returns (uint amountToken, uint amountETH);\n\n  function removeLiquidityWithPermit(\n    address tokenA,\n    address tokenB,\n    uint liquidity,\n    uint amountAMin,\n    uint amountBMin,\n    address to,\n    uint deadline,\n    bool approveMax,\n    uint8 v,\n    bytes32 r,\n    bytes32 s\n  ) external returns (uint amountA, uint amountB);\n\n  function removeLiquidityETHWithPermit(\n    address token,\n    uint liquidity,\n    uint amountTokenMin,\n    uint amountETHMin,\n    address to,\n    uint deadline,\n    bool approveMax,\n    uint8 v,\n    bytes32 r,\n    bytes32 s\n  ) external returns (uint amountToken, uint amountETH);\n\n  function swapExactTokensForTokens(\n    uint amountIn,\n    uint amountOutMin,\n    address[] calldata path,\n    address to,\n    uint deadline\n  ) external returns (uint[] memory amounts);\n\n  function swapTokensForExactTokens(\n    uint amountOut,\n    uint amountInMax,\n    address[] calldata path,\n    address to,\n    uint deadline\n  ) external returns (uint[] memory amounts);\n\n  function swapExactETHForTokens(\n    uint amountOutMin,\n    address[] calldata path,\n    address to,\n    uint deadline\n  ) external payable returns (uint[] memory amounts);\n\n  function swapTokensForExactETH(\n    uint amountOut,\n    uint amountInMax,\n    address[] calldata path,\n    address to,\n    uint deadline\n  ) external returns (uint[] memory amounts);\n\n  function swapExactTokensForETH(\n    uint amountIn,\n    uint amountOutMin,\n    address[] calldata path,\n    address to,\n    uint deadline\n  ) external returns (uint[] memory amounts);\n\n  function swapETHForExactTokens(\n    uint amountOut,\n    address[] calldata path,\n    address to,\n    uint deadline\n  ) external payable returns (uint[] memory amounts);\n\n  function quote(\n    uint amountA,\n    uint reserveA,\n    uint reserveB\n  ) external pure returns (uint amountB);\n\n  function getAmountOut(\n    uint amountIn,\n    uint reserveIn,\n    uint reserveOut\n  ) external pure returns (uint amountOut);\n\n  function getAmountIn(\n    uint amountOut,\n    uint reserveIn,\n    uint reserveOut\n  ) external pure returns (uint amountIn);\n\n  function getAmountsOut(uint amountIn, address[] calldata path)\n    external\n    view\n    returns (uint[] memory amounts);\n\n  function getAmountsIn(uint amountOut, address[] calldata path)\n    external\n    view\n    returns (uint[] memory amounts);\n}\n\n// Part: IUniswapV2Router02\n\ninterface IUniswapV2Router02 is IUniswapV2Router01 {\n  function removeLiquidityETHSupportingFeeOnTransferTokens(\n    address token,\n    uint liquidity,\n    uint amountTokenMin,\n    uint amountETHMin,\n    address to,\n    uint deadline\n  ) external returns (uint amountETH);\n\n  function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\n    address token,\n    uint liquidity,\n    uint amountTokenMin,\n    uint amountETHMin,\n    address to,\n    uint deadline,\n    bool approveMax,\n    uint8 v,\n    bytes32 r,\n    bytes32 s\n  ) external returns (uint amountETH);\n\n  function swapExactTokensForTokensSupportingFeeOnTransferTokens(\n    uint amountIn,\n    uint amountOutMin,\n    address[] calldata path,\n    address to,\n    uint deadline\n  ) external;\n\n  function swapExactETHForTokensSupportingFeeOnTransferTokens(\n    uint amountOutMin,\n    address[] calldata path,\n    address to,\n    uint deadline\n  ) external payable;\n\n  function swapExactTokensForETHSupportingFeeOnTransferTokens(\n    uint amountIn,\n    uint amountOutMin,\n    address[] calldata path,\n    address to,\n    uint deadline\n  ) external;\n}\n\n// Part: IWETH\n\ninterface IWETH {\n  function balanceOf(address user) external returns (uint);\n\n  function approve(address to, uint value) external returns (bool);\n\n  function transfer(address to, uint value) external returns (bool);\n\n  function deposit() external payable;\n\n  function withdraw(uint) external;\n}\n\n// Part: OpenZeppelin/openzeppelin-contracts@3.4.0/Address\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize, which returns 0 for contracts in\n        // construction, since the code is only stored at the end of the\n        // constructor execution.\n\n        uint256 size;\n        // solhint-disable-next-line no-inline-assembly\n        assembly { size := extcodesize(account) }\n        return size > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\n        (bool success, ) = recipient.call{ value: amount }(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain`call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n      return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        require(isContract(target), \"Address: call to non-contract\");\n\n        // solhint-disable-next-line avoid-low-level-calls\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\n        return _verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        // solhint-disable-next-line avoid-low-level-calls\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return _verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\n        require(isContract(target), \"Address: delegate call to non-contract\");\n\n        // solhint-disable-next-line avoid-low-level-calls\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return _verifyCallResult(success, returndata, errorMessage);\n    }\n\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length > 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n\n                // solhint-disable-next-line no-inline-assembly\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n\n// Part: OpenZeppelin/openzeppelin-contracts@3.4.0/IERC165\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n\n// Part: OpenZeppelin/openzeppelin-contracts@3.4.0/IERC20\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n\n// Part: OpenZeppelin/openzeppelin-contracts@3.4.0/SafeMath\n\n/**\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\n * checks.\n *\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\n * in bugs, because programmers usually assume that an overflow raises an\n * error, which is the standard behavior in high level programming languages.\n * `SafeMath` restores this intuition by reverting the transaction when an\n * operation overflows.\n *\n * Using this library instead of the unchecked operations eliminates an entire\n * class of bugs, so it's recommended to use it always.\n */\nlibrary SafeMath {\n    /**\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        uint256 c = a + b;\n        if (c < a) return (false, 0);\n        return (true, c);\n    }\n\n    /**\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        if (b > a) return (false, 0);\n        return (true, a - b);\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n        // benefit is lost if 'b' is also tested.\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n        if (a == 0) return (true, 0);\n        uint256 c = a * b;\n        if (c / a != b) return (false, 0);\n        return (true, c);\n    }\n\n    /**\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        if (b == 0) return (false, 0);\n        return (true, a / b);\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        if (b == 0) return (false, 0);\n        return (true, a % b);\n    }\n\n    /**\n     * @dev Returns the addition of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `+` operator.\n     *\n     * Requirements:\n     *\n     * - Addition cannot overflow.\n     */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a, \"SafeMath: addition overflow\");\n        return c;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b <= a, \"SafeMath: subtraction overflow\");\n        return a - b;\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `*` operator.\n     *\n     * Requirements:\n     *\n     * - Multiplication cannot overflow.\n     */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        if (a == 0) return 0;\n        uint256 c = a * b;\n        require(c / a == b, \"SafeMath: multiplication overflow\");\n        return c;\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers, reverting on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b > 0, \"SafeMath: division by zero\");\n        return a / b;\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * reverting when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b > 0, \"SafeMath: modulo by zero\");\n        return a % b;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n     * overflow (when the result is negative).\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {trySub}.\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b <= a, errorMessage);\n        return a - b;\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\n     * division by zero. The result is rounded towards zero.\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b > 0, errorMessage);\n        return a / b;\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * reverting with custom message when dividing by zero.\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {tryMod}.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b > 0, errorMessage);\n        return a % b;\n    }\n}\n\n// Part: HomoraMath\n\nlibrary HomoraMath {\n  using SafeMath for uint;\n\n  function divCeil(uint lhs, uint rhs) internal pure returns (uint) {\n    return lhs.add(rhs).sub(1) / rhs;\n  }\n\n  function fmul(uint lhs, uint rhs) internal pure returns (uint) {\n    return lhs.mul(rhs) / (2**112);\n  }\n\n  function fdiv(uint lhs, uint rhs) internal pure returns (uint) {\n    return lhs.mul(2**112) / rhs;\n  }\n\n  // implementation from https://github.com/Uniswap/uniswap-lib/commit/99f3f28770640ba1bb1ff460ac7c5292fb8291a0\n  // original implementation: https://github.com/abdk-consulting/abdk-libraries-solidity/blob/master/ABDKMath64x64.sol#L687\n  function sqrt(uint x) internal pure returns (uint) {\n    if (x == 0) return 0;\n    uint xx = x;\n    uint r = 1;\n\n    if (xx >= 0x100000000000000000000000000000000) {\n      xx >>= 128;\n      r <<= 64;\n    }\n\n    if (xx >= 0x10000000000000000) {\n      xx >>= 64;\n      r <<= 32;\n    }\n    if (xx >= 0x100000000) {\n      xx >>= 32;\n      r <<= 16;\n    }\n    if (xx >= 0x10000) {\n      xx >>= 16;\n      r <<= 8;\n    }\n    if (xx >= 0x100) {\n      xx >>= 8;\n      r <<= 4;\n    }\n    if (xx >= 0x10) {\n      xx >>= 4;\n      r <<= 2;\n    }\n    if (xx >= 0x8) {\n      r <<= 1;\n    }\n\n    r = (r + x / r) >> 1;\n    r = (r + x / r) >> 1;\n    r = (r + x / r) >> 1;\n    r = (r + x / r) >> 1;\n    r = (r + x / r) >> 1;\n    r = (r + x / r) >> 1;\n    r = (r + x / r) >> 1; // Seven iterations should be enough\n    uint r1 = x / r;\n    return (r < r1 ? r : r1);\n  }\n}\n\n// Part: OpenZeppelin/openzeppelin-contracts@3.4.0/ERC165\n\n/**\n * @dev Implementation of the {IERC165} interface.\n *\n * Contracts may inherit from this and call {_registerInterface} to declare\n * their support of an interface.\n */\nabstract contract ERC165 is IERC165 {\n    /*\n     * bytes4(keccak256('supportsInterface(bytes4)')) == 0x01ffc9a7\n     */\n    bytes4 private constant _INTERFACE_ID_ERC165 = 0x01ffc9a7;\n\n    /**\n     * @dev Mapping of interface ids to whether or not it's supported.\n     */\n    mapping(bytes4 => bool) private _supportedInterfaces;\n\n    constructor () internal {\n        // Derived contracts need only register support for their own interfaces,\n        // we register support for ERC165 itself here\n        _registerInterface(_INTERFACE_ID_ERC165);\n    }\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     *\n     * Time complexity O(1), guaranteed to always use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return _supportedInterfaces[interfaceId];\n    }\n\n    /**\n     * @dev Registers the contract as an implementer of the interface defined by\n     * `interfaceId`. Support of the actual ERC165 interface is automatic and\n     * registering its interface id is not required.\n     *\n     * See {IERC165-supportsInterface}.\n     *\n     * Requirements:\n     *\n     * - `interfaceId` cannot be the ERC165 invalid interface (`0xffffffff`).\n     */\n    function _registerInterface(bytes4 interfaceId) internal virtual {\n        require(interfaceId != 0xffffffff, \"ERC165: invalid interface id\");\n        _supportedInterfaces[interfaceId] = true;\n    }\n}\n\n// Part: OpenZeppelin/openzeppelin-contracts@3.4.0/IERC1155\n\n/**\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\n *\n * _Available since v3.1._\n */\ninterface IERC1155 is IERC165 {\n    /**\n     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\n     */\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\n\n    /**\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\n     * transfers.\n     */\n    event TransferBatch(address indexed operator, address indexed from, address indexed to, uint256[] ids, uint256[] values);\n\n    /**\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\n     * `approved`.\n     */\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\n\n    /**\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\n     *\n     * If an {URI} event was emitted for `id`, the standard\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\n     * returned by {IERC1155MetadataURI-uri}.\n     */\n    event URI(string value, uint256 indexed id);\n\n    /**\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     */\n    function balanceOf(address account, uint256 id) external view returns (uint256);\n\n    /**\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\n     *\n     * Requirements:\n     *\n     * - `accounts` and `ids` must have the same length.\n     */\n    function balanceOfBatch(address[] calldata accounts, uint256[] calldata ids) external view returns (uint256[] memory);\n\n    /**\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\n     *\n     * Emits an {ApprovalForAll} event.\n     *\n     * Requirements:\n     *\n     * - `operator` cannot be the caller.\n     */\n    function setApprovalForAll(address operator, bool approved) external;\n\n    /**\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\n     *\n     * See {setApprovalForAll}.\n     */\n    function isApprovedForAll(address account, address operator) external view returns (bool);\n\n    /**\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\n     *\n     * Emits a {TransferSingle} event.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - If the caller is not `from`, it must be have been approved to spend ``from``'s tokens via {setApprovalForAll}.\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\n     * acceptance magic value.\n     */\n    function safeTransferFrom(address from, address to, uint256 id, uint256 amount, bytes calldata data) external;\n\n    /**\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\n     *\n     * Emits a {TransferBatch} event.\n     *\n     * Requirements:\n     *\n     * - `ids` and `amounts` must have the same length.\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\n     * acceptance magic value.\n     */\n    function safeBatchTransferFrom(address from, address to, uint256[] calldata ids, uint256[] calldata amounts, bytes calldata data) external;\n}\n\n// Part: OpenZeppelin/openzeppelin-contracts@3.4.0/IERC1155Receiver\n\n/**\n * _Available since v3.1._\n */\ninterface IERC1155Receiver is IERC165 {\n\n    /**\n        @dev Handles the receipt of a single ERC1155 token type. This function is\n        called at the end of a `safeTransferFrom` after the balance has been updated.\n        To accept the transfer, this must return\n        `bytes4(keccak256(\"onERC1155Received(address,address,uint256,uint256,bytes)\"))`\n        (i.e. 0xf23a6e61, or its own function selector).\n        @param operator The address which initiated the transfer (i.e. msg.sender)\n        @param from The address which previously owned the token\n        @param id The ID of the token being transferred\n        @param value The amount of tokens being transferred\n        @param data Additional data with no specified format\n        @return `bytes4(keccak256(\"onERC1155Received(address,address,uint256,uint256,bytes)\"))` if transfer is allowed\n    */\n    function onERC1155Received(\n        address operator,\n        address from,\n        uint256 id,\n        uint256 value,\n        bytes calldata data\n    )\n        external\n        returns(bytes4);\n\n    /**\n        @dev Handles the receipt of a multiple ERC1155 token types. This function\n        is called at the end of a `safeBatchTransferFrom` after the balances have\n        been updated. To accept the transfer(s), this must return\n        `bytes4(keccak256(\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\"))`\n        (i.e. 0xbc197c81, or its own function selector).\n        @param operator The address which initiated the batch transfer (i.e. msg.sender)\n        @param from The address which previously owned the token\n        @param ids An array containing ids of each token being transferred (order and length must match values array)\n        @param values An array containing amounts of each token being transferred (order and length must match ids array)\n        @param data Additional data with no specified format\n        @return `bytes4(keccak256(\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\"))` if transfer is allowed\n    */\n    function onERC1155BatchReceived(\n        address operator,\n        address from,\n        uint256[] calldata ids,\n        uint256[] calldata values,\n        bytes calldata data\n    )\n        external\n        returns(bytes4);\n}\n\n// Part: OpenZeppelin/openzeppelin-contracts@3.4.0/Initializable\n\n/**\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\n *\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\n * possible by providing the encoded function call as the `_data` argument to {UpgradeableProxy-constructor}.\n *\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\n */\nabstract contract Initializable {\n\n    /**\n     * @dev Indicates that the contract has been initialized.\n     */\n    bool private _initialized;\n\n    /**\n     * @dev Indicates that the contract is in the process of being initialized.\n     */\n    bool private _initializing;\n\n    /**\n     * @dev Modifier to protect an initializer function from being invoked twice.\n     */\n    modifier initializer() {\n        require(_initializing || _isConstructor() || !_initialized, \"Initializable: contract is already initialized\");\n\n        bool isTopLevelCall = !_initializing;\n        if (isTopLevelCall) {\n            _initializing = true;\n            _initialized = true;\n        }\n\n        _;\n\n        if (isTopLevelCall) {\n            _initializing = false;\n        }\n    }\n\n    /// @dev Returns true if and only if the function is running in the constructor\n    function _isConstructor() private view returns (bool) {\n        return !Address.isContract(address(this));\n    }\n}\n\n// Part: OpenZeppelin/openzeppelin-contracts@3.4.0/SafeERC20\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\n * contract returns false). Tokens that return no value (and instead revert or\n * throw on failure) are also supported, non-reverting calls are assumed to be\n * successful.\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20 {\n    using SafeMath for uint256;\n    using Address for address;\n\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n    }\n\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n    }\n\n    /**\n     * @dev Deprecated. This function has issues similar to the ones found in\n     * {IERC20-approve}, and its usage is discouraged.\n     *\n     * Whenever possible, use {safeIncreaseAllowance} and\n     * {safeDecreaseAllowance} instead.\n     */\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\n        // safeApprove should only be called when setting an initial allowance,\n        // or when resetting it to zero. To increase and decrease it, use\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n        // solhint-disable-next-line max-line-length\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\n        );\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n    }\n\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n    }\n\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \"SafeERC20: decreased allowance below zero\");\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     */\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\n        // the target address contains contract code and also asserts for success in the low-level call.\n\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\n        if (returndata.length > 0) { // Return data is optional\n            // solhint-disable-next-line max-line-length\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\n        }\n    }\n}\n\n// Part: Governable\n\ncontract Governable is Initializable {\n  event SetGovernor(address governor);\n  event SetPendingGovernor(address pendingGovernor);\n  event AcceptGovernor(address governor);\n\n  address public governor; // The current governor.\n  address public pendingGovernor; // The address pending to become the governor once accepted.\n\n  bytes32[64] _gap; // reserve space for upgrade\n\n  modifier onlyGov() {\n    require(msg.sender == governor, 'not the governor');\n    _;\n  }\n\n  /// @dev Initialize using msg.sender as the first governor.\n  function __Governable__init() internal initializer {\n    governor = msg.sender;\n    pendingGovernor = address(0);\n    emit SetGovernor(msg.sender);\n  }\n\n  /// @dev Set the pending governor, which will be the governor once accepted.\n  /// @param _pendingGovernor The address to become the pending governor.\n  function setPendingGovernor(address _pendingGovernor) external onlyGov {\n    pendingGovernor = _pendingGovernor;\n    emit SetPendingGovernor(_pendingGovernor);\n  }\n\n  /// @dev Accept to become the new governor. Must be called by the pending governor.\n  function acceptGovernor() external {\n    require(msg.sender == pendingGovernor, 'not the pending governor');\n    pendingGovernor = address(0);\n    governor = msg.sender;\n    emit AcceptGovernor(msg.sender);\n  }\n}\n\n// Part: IWERC20\n\ninterface IWERC20 is IERC1155, IERC20Wrapper {\n  /// @dev Return the underlying ERC20 balance for the user.\n  function balanceOfERC20(address token, address user) external view returns (uint);\n\n  /// @dev Mint ERC1155 token for the given ERC20 token.\n  function mint(address token, uint amount) external;\n\n  /// @dev Burn ERC1155 token to redeem ERC20 token back.\n  function burn(address token, uint amount) external;\n}\n\n// Part: IWStakingRewards\n\ninterface IWStakingRewards is IERC1155, IERC20Wrapper {\n  /// @dev Mint ERC1155 token for the given ERC20 token.\n  function mint(uint amount) external returns (uint id);\n\n  /// @dev Burn ERC1155 token to redeem ERC20 token back.\n  function burn(uint id, uint amount) external returns (uint);\n\n  function reward() external returns (address);\n}\n\n// Part: OpenZeppelin/openzeppelin-contracts@3.4.0/ERC1155Receiver\n\n/**\n * @dev _Available since v3.1._\n */\nabstract contract ERC1155Receiver is ERC165, IERC1155Receiver {\n    constructor() internal {\n        _registerInterface(\n            ERC1155Receiver(address(0)).onERC1155Received.selector ^\n            ERC1155Receiver(address(0)).onERC1155BatchReceived.selector\n        );\n    }\n}\n\n// Part: ERC1155NaiveReceiver\n\ncontract ERC1155NaiveReceiver is ERC1155Receiver {\n  bytes32[64] __gap; // reserve space for upgrade\n\n  function onERC1155Received(\n    address, /* operator */\n    address, /* from */\n    uint, /* id */\n    uint, /* value */\n    bytes calldata /* data */\n  ) external override returns (bytes4) {\n    return this.onERC1155Received.selector;\n  }\n\n  function onERC1155BatchReceived(\n    address, /* operator */\n    address, /* from */\n    uint[] calldata, /* ids */\n    uint[] calldata, /* values */\n    bytes calldata /* data */\n  ) external override returns (bytes4) {\n    return this.onERC1155BatchReceived.selector;\n  }\n}\n\n// Part: BasicSpell\n\nabstract contract BasicSpell is ERC1155NaiveReceiver {\n  using SafeERC20 for IERC20;\n\n  IBank public immutable bank;\n  IWERC20 public immutable werc20;\n  address public immutable weth;\n\n  mapping(address => mapping(address => bool)) public approved; // Mapping from token to (mapping from spender to approve status)\n\n  constructor(\n    IBank _bank,\n    address _werc20,\n    address _weth\n  ) public {\n    bank = _bank;\n    werc20 = IWERC20(_werc20);\n    weth = _weth;\n    ensureApprove(_weth, address(_bank));\n    IWERC20(_werc20).setApprovalForAll(address(_bank), true);\n  }\n\n  /// @dev Ensure that the spell has approved the given spender to spend all of its tokens.\n  /// @param token The token to approve.\n  /// @param spender The spender to allow spending.\n  /// NOTE: This is safe because spell is never built to hold fund custody.\n  function ensureApprove(address token, address spender) internal {\n    if (!approved[token][spender]) {\n      IERC20(token).safeApprove(spender, uint(-1));\n      approved[token][spender] = true;\n    }\n  }\n\n  /// @dev Internal call to convert msg.value ETH to WETH inside the contract.\n  function doTransmitETH() internal {\n    if (msg.value > 0) {\n      IWETH(weth).deposit{value: msg.value}();\n    }\n  }\n\n  /// @dev Internal call to transmit tokens from the bank if amount is positive.\n  /// @param token The token to perform the transmit action.\n  /// @param amount The amount to transmit.\n  /// @notice Do not use `amount` input argument to handle the received amount.\n  function doTransmit(address token, uint amount) internal {\n    if (amount > 0) {\n      bank.transmit(token, amount);\n    }\n  }\n\n  /// @dev Internal call to refund tokens to the current bank executor.\n  /// @param token The token to perform the refund action.\n  function doRefund(address token) internal {\n    uint balance = IERC20(token).balanceOf(address(this));\n    if (balance > 0) {\n      IERC20(token).safeTransfer(bank.EXECUTOR(), balance);\n    }\n  }\n\n  /// @dev Internal call to refund all WETH to the current executor as native ETH.\n  function doRefundETH() internal {\n    uint balance = IWETH(weth).balanceOf(address(this));\n    if (balance > 0) {\n      IWETH(weth).withdraw(balance);\n      (bool success, ) = bank.EXECUTOR().call{value: balance}(new bytes(0));\n      require(success, 'refund ETH failed');\n    }\n  }\n\n  /// @dev Internal call to borrow tokens from the bank on behalf of the current executor.\n  /// @param token The token to borrow from the bank.\n  /// @param amount The amount to borrow.\n  /// @notice Do not use `amount` input argument to handle the received amount.\n  function doBorrow(address token, uint amount) internal {\n    if (amount > 0) {\n      bank.borrow(token, amount);\n    }\n  }\n\n  /// @dev Internal call to repay tokens to the bank on behalf of the current executor.\n  /// @param token The token to repay to the bank.\n  /// @param amount The amount to repay.\n  function doRepay(address token, uint amount) internal {\n    if (amount > 0) {\n      ensureApprove(token, address(bank));\n      bank.repay(token, amount);\n    }\n  }\n\n  /// @dev Internal call to put collateral tokens in the bank.\n  /// @param token The token to put in the bank.\n  /// @param amount The amount to put in the bank.\n  function doPutCollateral(address token, uint amount) internal {\n    if (amount > 0) {\n      ensureApprove(token, address(werc20));\n      werc20.mint(token, amount);\n      bank.putCollateral(address(werc20), uint(token), amount);\n    }\n  }\n\n  /// @dev Internal call to take collateral tokens from the bank.\n  /// @param token The token to take back.\n  /// @param amount The amount to take back.\n  function doTakeCollateral(address token, uint amount) internal {\n    if (amount > 0) {\n      if (amount == uint(-1)) {\n        (, , , amount) = bank.getCurrentPositionInfo();\n      }\n      bank.takeCollateral(address(werc20), uint(token), amount);\n      werc20.burn(token, amount);\n    }\n  }\n\n  /// @dev Fallback function. Can only receive ETH from WETH contract.\n  receive() external payable {\n    require(msg.sender == weth, 'ETH must come from WETH');\n  }\n}\n\n// Part: WhitelistSpell\n\ncontract WhitelistSpell is BasicSpell, Governable {\n  mapping(address => bool) public whitelistedLpTokens; // mapping from lp token to whitelist status\n\n  constructor(\n    IBank _bank,\n    address _werc20,\n    address _weth\n  ) public BasicSpell(_bank, _werc20, _weth) {\n    __Governable__init();\n  }\n\n  /// @dev Set whitelist LP token statuses for spell\n  /// @param lpTokens LP tokens to set whitelist statuses\n  /// @param statuses Whitelist statuses\n  function setWhitelistLPTokens(address[] calldata lpTokens, bool[] calldata statuses)\n    external\n    onlyGov\n  {\n    require(lpTokens.length == statuses.length, 'lpTokens & statuses length mismatched');\n    for (uint idx = 0; idx < lpTokens.length; idx++) {\n      if (statuses[idx]) {\n        require(bank.support(lpTokens[idx]), 'oracle not support lp token');\n      }\n      whitelistedLpTokens[lpTokens[idx]] = statuses[idx];\n    }\n  }\n}\n\n// File: UniswapV2SpellV1.sol\n\ncontract UniswapV2SpellV1 is WhitelistSpell {\n  using SafeMath for uint;\n  using HomoraMath for uint;\n\n  IUniswapV2Factory public immutable factory; // Uniswap factory\n  IUniswapV2Router02 public immutable router; // Uniswap router\n\n  mapping(address => mapping(address => address)) public pairs; // Mapping from tokenA to (mapping from tokenB to LP token)\n\n  constructor(\n    IBank _bank,\n    address _werc20,\n    IUniswapV2Router02 _router\n  ) public WhitelistSpell(_bank, _werc20, _router.WETH()) {\n    router = _router;\n    factory = IUniswapV2Factory(_router.factory());\n  }\n\n  /// @dev Return the LP token for the token pairs (can be in any order)\n  /// @param tokenA Token A to get LP token\n  /// @param tokenB Token B to get LP token\n  function getAndApprovePair(address tokenA, address tokenB) public returns (address) {\n    address lp = pairs[tokenA][tokenB];\n    if (lp == address(0)) {\n      lp = factory.getPair(tokenA, tokenB);\n      require(lp != address(0), 'no lp token');\n      ensureApprove(tokenA, address(router));\n      ensureApprove(tokenB, address(router));\n      ensureApprove(lp, address(router));\n      pairs[tokenA][tokenB] = lp;\n      pairs[tokenB][tokenA] = lp;\n    }\n    return lp;\n  }\n\n  /// @dev Compute optimal deposit amount\n  /// @param amtA amount of token A desired to deposit\n  /// @param amtB amount of token B desired to deposit\n  /// @param resA amount of token A in reserve\n  /// @param resB amount of token B in reserve\n  function optimalDeposit(\n    uint amtA,\n    uint amtB,\n    uint resA,\n    uint resB\n  ) internal pure returns (uint swapAmt, bool isReversed) {\n    if (amtA.mul(resB) >= amtB.mul(resA)) {\n      swapAmt = _optimalDepositA(amtA, amtB, resA, resB);\n      isReversed = false;\n    } else {\n      swapAmt = _optimalDepositA(amtB, amtA, resB, resA);\n      isReversed = true;\n    }\n  }\n\n  /// @dev Compute optimal deposit amount helper.\n  /// @param amtA amount of token A desired to deposit\n  /// @param amtB amount of token B desired to deposit\n  /// @param resA amount of token A in reserve\n  /// @param resB amount of token B in reserve\n  /// Formula: https://blog.alphafinance.io/byot/\n  function _optimalDepositA(\n    uint amtA,\n    uint amtB,\n    uint resA,\n    uint resB\n  ) internal pure returns (uint) {\n    require(amtA.mul(resB) >= amtB.mul(resA), 'Reversed');\n    uint a = 997;\n    uint b = uint(1997).mul(resA);\n    uint _c = (amtA.mul(resB)).sub(amtB.mul(resA));\n    uint c = _c.mul(1000).div(amtB.add(resB)).mul(resA);\n    uint d = a.mul(c).mul(4);\n    uint e = HomoraMath.sqrt(b.mul(b).add(d));\n    uint numerator = e.sub(b);\n    uint denominator = a.mul(2);\n    return numerator.div(denominator);\n  }\n\n  struct Amounts {\n    uint amtAUser; // Supplied tokenA amount\n    uint amtBUser; // Supplied tokenB amount\n    uint amtLPUser; // Supplied LP token amount\n    uint amtABorrow; // Borrow tokenA amount\n    uint amtBBorrow; // Borrow tokenB amount\n    uint amtLPBorrow; // Borrow LP token amount\n    uint amtAMin; // Desired tokenA amount (slippage control)\n    uint amtBMin; // Desired tokenB amount (slippage control)\n  }\n\n  /// @dev Add liquidity to Uniswap pool\n  /// @param tokenA Token A for the pair\n  /// @param tokenB Token B for the pair\n  /// @param amt Amounts of tokens to supply, borrow, and get.\n  function addLiquidityInternal(\n    address tokenA,\n    address tokenB,\n    Amounts calldata amt,\n    address lp\n  ) internal {\n    require(whitelistedLpTokens[lp], 'lp token not whitelisted');\n\n    // 1. Get user input amounts\n    doTransmitETH();\n    doTransmit(tokenA, amt.amtAUser);\n    doTransmit(tokenB, amt.amtBUser);\n    doTransmit(lp, amt.amtLPUser);\n\n    // 2. Borrow specified amounts\n    doBorrow(tokenA, amt.amtABorrow);\n    doBorrow(tokenB, amt.amtBBorrow);\n    doBorrow(lp, amt.amtLPBorrow);\n\n    // 3. Calculate optimal swap amount\n    uint swapAmt;\n    bool isReversed;\n    {\n      uint amtA = IERC20(tokenA).balanceOf(address(this));\n      uint amtB = IERC20(tokenB).balanceOf(address(this));\n      uint resA;\n      uint resB;\n      if (IUniswapV2Pair(lp).token0() == tokenA) {\n        (resA, resB, ) = IUniswapV2Pair(lp).getReserves();\n      } else {\n        (resB, resA, ) = IUniswapV2Pair(lp).getReserves();\n      }\n      (swapAmt, isReversed) = optimalDeposit(amtA, amtB, resA, resB);\n    }\n\n    // 4. Swap optimal amount\n    if (swapAmt > 0) {\n      address[] memory path = new address[](2);\n      (path[0], path[1]) = isReversed ? (tokenB, tokenA) : (tokenA, tokenB);\n      router.swapExactTokensForTokens(swapAmt, 0, path, address(this), block.timestamp);\n    }\n\n    // 5. Add liquidity\n    uint balA = IERC20(tokenA).balanceOf(address(this));\n    uint balB = IERC20(tokenB).balanceOf(address(this));\n    if (balA > 0 || balB > 0) {\n      router.addLiquidity(\n        tokenA,\n        tokenB,\n        balA,\n        balB,\n        amt.amtAMin,\n        amt.amtBMin,\n        address(this),\n        block.timestamp\n      );\n    }\n  }\n\n  /// @dev Add liquidity to Uniswap pool, with no staking rewards (use WERC20 wrapper)\n  /// @param tokenA Token A for the pair\n  /// @param tokenB Token B for the pair\n  /// @param amt Amounts of tokens to supply, borrow, and get.\n  function addLiquidityWERC20(\n    address tokenA,\n    address tokenB,\n    Amounts calldata amt\n  ) external payable {\n    address lp = getAndApprovePair(tokenA, tokenB);\n    // 1-5. add liquidity\n    addLiquidityInternal(tokenA, tokenB, amt, lp);\n\n    // 6. Put collateral\n    doPutCollateral(lp, IERC20(lp).balanceOf(address(this)));\n\n    // 7. Refund leftovers to users\n    doRefundETH();\n    doRefund(tokenA);\n    doRefund(tokenB);\n  }\n\n  /// @dev Add liquidity to Uniswap pool, with staking rewards\n  /// @param tokenA Token A for the pair\n  /// @param tokenB Token B for the pair\n  /// @param amt Amounts of tokens to supply, borrow, and get.\n  /// @param wstaking Wrapped staking rewards address\n  function addLiquidityWStakingRewards(\n    address tokenA,\n    address tokenB,\n    Amounts calldata amt,\n    address wstaking\n  ) external payable {\n    address lp = getAndApprovePair(tokenA, tokenB);\n    address reward = IWStakingRewards(wstaking).reward();\n\n    // 1-5. add liquidity\n    addLiquidityInternal(tokenA, tokenB, amt, lp);\n\n    // 6. Take out collateral\n    (, address collToken, uint collId, uint collSize) = bank.getCurrentPositionInfo();\n    if (collSize > 0) {\n      require(IWStakingRewards(collToken).getUnderlyingToken(collId) == lp, 'incorrect underlying');\n      require(collToken == wstaking, 'collateral token & wstaking mismatched');\n      bank.takeCollateral(wstaking, collId, collSize);\n      IWStakingRewards(wstaking).burn(collId, collSize);\n    }\n\n    // 7. Put collateral\n    ensureApprove(lp, wstaking);\n    uint amount = IERC20(lp).balanceOf(address(this));\n    uint id = IWStakingRewards(wstaking).mint(amount);\n    if (!IWStakingRewards(wstaking).isApprovedForAll(address(this), address(bank))) {\n      IWStakingRewards(wstaking).setApprovalForAll(address(bank), true);\n    }\n    bank.putCollateral(address(wstaking), id, amount);\n\n    // 8. Refund leftovers to users\n    doRefundETH();\n    doRefund(tokenA);\n    doRefund(tokenB);\n\n    // 9. Refund reward\n    doRefund(reward);\n  }\n\n  struct RepayAmounts {\n    uint amtLPTake; // Take out LP token amount (from Homora)\n    uint amtLPWithdraw; // Withdraw LP token amount (back to caller)\n    uint amtARepay; // Repay tokenA amount\n    uint amtBRepay; // Repay tokenB amount\n    uint amtLPRepay; // Repay LP token amount\n    uint amtAMin; // Desired tokenA amount\n    uint amtBMin; // Desired tokenB amount\n  }\n\n  /// @dev Remove liquidity from Uniswap pool\n  /// @param tokenA Token A for the pair\n  /// @param tokenB Token B for the pair\n  /// @param amt Amounts of tokens to take out, withdraw, repay, and get.\n  function removeLiquidityInternal(\n    address tokenA,\n    address tokenB,\n    RepayAmounts calldata amt,\n    address lp\n  ) internal {\n    require(whitelistedLpTokens[lp], 'lp token not whitelisted');\n    uint positionId = bank.POSITION_ID();\n\n    uint amtARepay = amt.amtARepay;\n    uint amtBRepay = amt.amtBRepay;\n    uint amtLPRepay = amt.amtLPRepay;\n\n    // 2. Compute repay amount if MAX_INT is supplied (max debt)\n    if (amtARepay == uint(-1)) {\n      amtARepay = bank.borrowBalanceCurrent(positionId, tokenA);\n    }\n    if (amtBRepay == uint(-1)) {\n      amtBRepay = bank.borrowBalanceCurrent(positionId, tokenB);\n    }\n    if (amtLPRepay == uint(-1)) {\n      amtLPRepay = bank.borrowBalanceCurrent(positionId, lp);\n    }\n\n    // 3. Compute amount to actually remove\n    uint amtLPToRemove = IERC20(lp).balanceOf(address(this)).sub(amt.amtLPWithdraw);\n\n    // 4. Remove liquidity\n    uint amtA;\n    uint amtB;\n    if (amtLPToRemove > 0) {\n      (amtA, amtB) = router.removeLiquidity(\n        tokenA,\n        tokenB,\n        amtLPToRemove,\n        0,\n        0,\n        address(this),\n        block.timestamp\n      );\n    }\n\n    // 5. MinimizeTrading\n    uint amtADesired = amtARepay.add(amt.amtAMin);\n    uint amtBDesired = amtBRepay.add(amt.amtBMin);\n\n    if (amtA < amtADesired && amtB > amtBDesired) {\n      address[] memory path = new address[](2);\n      (path[0], path[1]) = (tokenB, tokenA);\n      router.swapTokensForExactTokens(\n        amtADesired.sub(amtA),\n        amtB.sub(amtBDesired),\n        path,\n        address(this),\n        block.timestamp\n      );\n    } else if (amtA > amtADesired && amtB < amtBDesired) {\n      address[] memory path = new address[](2);\n      (path[0], path[1]) = (tokenA, tokenB);\n      router.swapTokensForExactTokens(\n        amtBDesired.sub(amtB),\n        amtA.sub(amtADesired),\n        path,\n        address(this),\n        block.timestamp\n      );\n    }\n\n    // 6. Repay\n    doRepay(tokenA, amtARepay);\n    doRepay(tokenB, amtBRepay);\n    doRepay(lp, amtLPRepay);\n\n    // 7. Slippage control\n    require(IERC20(tokenA).balanceOf(address(this)) >= amt.amtAMin);\n    require(IERC20(tokenB).balanceOf(address(this)) >= amt.amtBMin);\n    require(IERC20(lp).balanceOf(address(this)) >= amt.amtLPWithdraw);\n\n    // 8. Refund leftover\n    doRefundETH();\n    doRefund(tokenA);\n    doRefund(tokenB);\n    doRefund(lp);\n  }\n\n  /// @dev Remove liquidity from Uniswap pool, with no staking rewards (use WERC20 wrapper)\n  /// @param tokenA Token A for the pair\n  /// @param tokenB Token B for the pair\n  /// @param amt Amounts of tokens to take out, withdraw, repay, and get.\n  function removeLiquidityWERC20(\n    address tokenA,\n    address tokenB,\n    RepayAmounts calldata amt\n  ) external {\n    address lp = getAndApprovePair(tokenA, tokenB);\n\n    // 1. Take out collateral\n    doTakeCollateral(lp, amt.amtLPTake);\n\n    // 2-8. remove liquidity\n    removeLiquidityInternal(tokenA, tokenB, amt, lp);\n  }\n\n  /// @dev Remove liquidity from Uniswap pool, from staking rewards\n  /// @param tokenA Token A for the pair\n  /// @param tokenB Token B for the pair\n  /// @param amt Amounts of tokens to take out, withdraw, repay, and get.\n  function removeLiquidityWStakingRewards(\n    address tokenA,\n    address tokenB,\n    RepayAmounts calldata amt,\n    address wstaking\n  ) external {\n    address lp = getAndApprovePair(tokenA, tokenB);\n    (, address collToken, uint collId, ) = bank.getCurrentPositionInfo();\n    address reward = IWStakingRewards(wstaking).reward();\n\n    // 1. Take out collateral\n    require(IWStakingRewards(collToken).getUnderlyingToken(collId) == lp, 'incorrect underlying');\n    require(collToken == wstaking, 'collateral token & wstaking mismatched');\n    bank.takeCollateral(wstaking, collId, amt.amtLPTake);\n    IWStakingRewards(wstaking).burn(collId, amt.amtLPTake);\n\n    // 2-8. remove liquidity\n    removeLiquidityInternal(tokenA, tokenB, amt, lp);\n\n    // 9. Refund reward\n    doRefund(reward);\n  }\n\n  /// @dev Harvest staking reward tokens to in-exec position's owner\n  /// @param wstaking Wrapped staking rewards address\n  function harvestWStakingRewards(address wstaking) external {\n    address reward = IWStakingRewards(wstaking).reward();\n    (, address collToken, uint collId, ) = bank.getCurrentPositionInfo();\n    address lp = IWStakingRewards(wstaking).getUnderlyingToken(collId);\n    require(whitelistedLpTokens[lp], 'lp token not whitelisted');\n    require(collToken == wstaking, 'collateral token & wstaking mismatched');\n\n    // 1. Take out collateral\n    bank.takeCollateral(wstaking, collId, uint(-1));\n    IWStakingRewards(wstaking).burn(collId, uint(-1));\n\n    // 2. put collateral\n    uint amount = IERC20(lp).balanceOf(address(this));\n    ensureApprove(lp, wstaking);\n    uint id = IWStakingRewards(wstaking).mint(amount);\n    bank.putCollateral(wstaking, id, amount);\n\n    // 3. Refund reward\n    doRefund(reward);\n  }\n}\n","ABI":"[{\"inputs\":[{\"internalType\":\"contract IBank\",\"name\":\"_bank\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_werc20\",\"type\":\"address\"},{\"internalType\":\"contract IUniswapV2Router02\",\"name\":\"_router\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"governor\",\"type\":\"address\"}],\"name\":\"AcceptGovernor\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"governor\",\"type\":\"address\"}],\"name\":\"SetGovernor\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"pendingGovernor\",\"type\":\"address\"}],\"name\":\"SetPendingGovernor\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"acceptGovernor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenA\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenB\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"amtAUser\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amtBUser\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amtLPUser\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amtABorrow\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amtBBorrow\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amtLPBorrow\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amtAMin\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amtBMin\",\"type\":\"uint256\"}],\"internalType\":\"struct UniswapV2SpellV1.Amounts\",\"name\":\"amt\",\"type\":\"tuple\"}],\"name\":\"addLiquidityWERC20\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenA\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenB\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"amtAUser\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amtBUser\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amtLPUser\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amtABorrow\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amtBBorrow\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amtLPBorrow\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amtAMin\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amtBMin\",\"type\":\"uint256\"}],\"internalType\":\"struct UniswapV2SpellV1.Amounts\",\"name\":\"amt\",\"type\":\"tuple\"},{\"internalType\":\"address\",\"name\":\"wstaking\",\"type\":\"address\"}],\"name\":\"addLiquidityWStakingRewards\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"approved\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"bank\",\"outputs\":[{\"internalType\":\"contract IBank\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"factory\",\"outputs\":[{\"internalType\":\"contract IUniswapV2Factory\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenA\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenB\",\"type\":\"address\"}],\"name\":\"getAndApprovePair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"governor\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"wstaking\",\"type\":\"address\"}],\"name\":\"harvestWStakingRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC1155BatchReceived\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC1155Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"pairs\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pendingGovernor\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenA\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenB\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"amtLPTake\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amtLPWithdraw\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amtARepay\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amtBRepay\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amtLPRepay\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amtAMin\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amtBMin\",\"type\":\"uint256\"}],\"internalType\":\"struct UniswapV2SpellV1.RepayAmounts\",\"name\":\"amt\",\"type\":\"tuple\"}],\"name\":\"removeLiquidityWERC20\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenA\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenB\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"amtLPTake\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amtLPWithdraw\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amtARepay\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amtBRepay\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amtLPRepay\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amtAMin\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amtBMin\",\"type\":\"uint256\"}],\"internalType\":\"struct UniswapV2SpellV1.RepayAmounts\",\"name\":\"amt\",\"type\":\"tuple\"},{\"internalType\":\"address\",\"name\":\"wstaking\",\"type\":\"address\"}],\"name\":\"removeLiquidityWStakingRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"router\",\"outputs\":[{\"internalType\":\"contract IUniswapV2Router02\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_pendingGovernor\",\"type\":\"address\"}],\"name\":\"setPendingGovernor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"lpTokens\",\"type\":\"address[]\"},{\"internalType\":\"bool[]\",\"name\":\"statuses\",\"type\":\"bool[]\"}],\"name\":\"setWhitelistLPTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"werc20\",\"outputs\":[{\"internalType\":\"contract IWERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"weth\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"whitelistedLpTokens\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]","ContractName":"UniswapV2SpellV1","CompilerVersion":"v0.6.12+commit.27d51765","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000ba5ebaf3fc1fcca67147050bf80462393814e54b00000000000000000000000006799a1e4792001aa9114f0012b9650ca28059a30000000000000000000000007a250d5630b4cf539739df2c5dacb4c659f2488d","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":""}]}