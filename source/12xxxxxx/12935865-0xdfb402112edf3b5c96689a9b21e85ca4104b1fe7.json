{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"settings\": {\r\n    \"evmVersion\": \"berlin\",\r\n    \"libraries\": {},\r\n    \"metadata\": {\r\n      \"bytecodeHash\": \"ipfs\",\r\n      \"useLiteralContent\": true\r\n    },\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 1000\r\n    },\r\n    \"remappings\": [],\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  },\r\n  \"sources\": {\r\n    \"contracts/src/cfolio/SFTEvaluator.sol\": {\r\n      \"content\": \"/*\\n * Copyright (C) 2021 The Wolfpack\\n * This file is part of wolves.finance - https://github.com/wolvesofwallstreet/wolves.finance\\n *\\n * SPDX-License-Identifier: Apache-2.0\\n * See the file LICENSES/README.md for more information.\\n */\\n\\npragma solidity >=0.7.0 <0.8.0;\\n\\nimport './interfaces/ISFTEvaluator.sol';\\nimport './interfaces/ICFolioItemHandler.sol';\\n\\nimport '../token/interfaces/IWOWSCryptofolio.sol';\\nimport '../token/interfaces/IWOWSERC1155.sol';\\nimport '../utils/AddressBook.sol';\\nimport '../utils/interfaces/IAddressRegistry.sol';\\nimport '../utils/TokenIds.sol';\\n\\ncontract SFTEvaluator is ISFTEvaluator {\\n  using TokenIds for uint256;\\n\\n  //////////////////////////////////////////////////////////////////////////////\\n  // State\\n  //////////////////////////////////////////////////////////////////////////////\\n\\n  // Attention: Proxy implementation: Only add new state at the end\\n\\n  // Admin\\n  address public immutable admin;\\n\\n  // The SFT contract we need for level\\n  IWOWSERC1155 private immutable _sftHolder;\\n\\n  // The main tradefloor contract\\n  address private immutable _tradeFloor;\\n\\n  // The SFT Minter\\n  address private immutable _sftMinter;\\n\\n  // Current reward weight of a baseCard\\n  mapping(uint256 => uint256) private _rewardRates;\\n\\n  // cfolioType of cfolioItem\\n  mapping(uint256 => uint256) private _cfolioItemTypes;\\n\\n  //////////////////////////////////////////////////////////////////////////////\\n  // Events\\n  //////////////////////////////////////////////////////////////////////////////\\n\\n  event RewardRate(uint256 indexed tokenId, uint32 rate);\\n\\n  event UpdatedCFolioType(uint256 indexed tokenId, uint256 cfolioItemType);\\n\\n  //////////////////////////////////////////////////////////////////////////////\\n  // Initialization\\n  //////////////////////////////////////////////////////////////////////////////\\n\\n  constructor(IAddressRegistry addressRegistry) {\\n    // The SFT holder\\n    _sftHolder = IWOWSERC1155(\\n      addressRegistry.getRegistryEntry(AddressBook.SFT_HOLDER)\\n    );\\n\\n    // Admin\\n    admin = addressRegistry.getRegistryEntry(AddressBook.MARKETING_WALLET);\\n\\n    // TradeFloor\\n    _tradeFloor = addressRegistry.getRegistryEntry(\\n      AddressBook.TRADE_FLOOR_PROXY\\n    );\\n\\n    _sftMinter = addressRegistry.getRegistryEntry(AddressBook.SFT_MINTER);\\n  }\\n\\n  //////////////////////////////////////////////////////////////////////////////\\n  // Implementation of {ISFTEvaluator}\\n  //////////////////////////////////////////////////////////////////////////////\\n\\n  /**\\n   * @dev See {ISFTEvaluator-rewardRate}.\\n   */\\n  function rewardRate(uint256 tokenId) external view override returns (uint32) {\\n    // Validate parameters\\n    require(tokenId.isBaseCard(), 'Invalid tokenId');\\n\\n    uint256 sftTokenId = tokenId.toSftTokenId();\\n\\n    // Load state\\n    return\\n      _rewardRates[sftTokenId] == 0\\n        ? _baseRate(sftTokenId)\\n        : uint32(_rewardRates[sftTokenId]);\\n  }\\n\\n  /**\\n   * @dev See {ISFTEvaluator-getCFolioItemType}.\\n   */\\n  function getCFolioItemType(uint256 tokenId)\\n    external\\n    view\\n    override\\n    returns (uint256)\\n  {\\n    // Validate parameters\\n    require(tokenId.isCFolioCard(), 'Invalid tokenId');\\n\\n    // Load state\\n    return _cfolioItemTypes[tokenId.toSftTokenId()];\\n  }\\n\\n  /**\\n   * @dev See {ISFTEvaluator-setRewardRate}.\\n   */\\n  function setRewardRate(uint256 tokenId, bool revertUnchanged)\\n    external\\n    override\\n  {\\n    // Validate parameters\\n    require(tokenId.isBaseCard(), 'Invalid tokenId');\\n\\n    // We allow upgrades of locked and unlocked SFTs\\n    uint256 sftTokenId = tokenId.toSftTokenId();\\n\\n    // Load state\\n    (\\n      uint32 untimed,\\n      uint32 timed // solhint-disable-next-line not-rely-on-time\\n    ) = _baseRates(sftTokenId, uint64(block.timestamp - 60 days));\\n\\n    // First implementation, check timed auto upgrade only\\n    if (untimed != timed) {\\n      // Update state\\n      _rewardRates[sftTokenId] = timed;\\n\\n      IWOWSCryptofolio cFolio =\\n        IWOWSCryptofolio(_sftHolder.tokenIdToAddress(sftTokenId));\\n      require(address(cFolio) != address(0), 'SFTE: invalid tokenId');\\n\\n      // Run through all cfolioItems of main tradefloor\\n      (uint256[] memory cFolioItems, uint256 length) =\\n        cFolio.getCryptofolio(_tradeFloor);\\n      if (length > 0) {\\n        // Bound loop to 100 c-folio items to fit in sensible gas limits\\n        require(length <= 100, 'SFTE: Too many items');\\n\\n        address[] memory calledHandlers = new address[](length);\\n        uint256 numCalledHandlers = 0;\\n\\n        for (uint256 i = 0; i < length; ++i) {\\n          // Secondary c-folio items have one tradefloor which is the handler\\n          address handler =\\n            IWOWSCryptofolio(\\n              _sftHolder.tokenIdToAddress(cFolioItems[i].toSftTokenId())\\n            )\\n              ._tradefloors(0);\\n          require(\\n            address(handler) != address(0),\\n            'SFTE: invalid cfolioItemHandler'\\n          );\\n\\n          // Check if we have called this handler already\\n          uint256 j = numCalledHandlers;\\n          while (j > 0 && calledHandlers[j - 1] != handler) --j;\\n          if (j == 0) {\\n            ICFolioItemHandler(handler).sftUpgrade(sftTokenId, timed);\\n            calledHandlers[numCalledHandlers++] = handler;\\n          }\\n        }\\n      }\\n\\n      // Fire an event\\n      emit RewardRate(tokenId, timed);\\n    } else {\\n      // Revert if requested\\n      require(!revertUnchanged, 'Rate unchanged');\\n    }\\n  }\\n\\n  /**\\n   * @dev See {ISFTEvaluator-setCFolioType}.\\n   */\\n  function setCFolioItemType(uint256 tokenId, uint256 cfolioItemType)\\n    external\\n    override\\n  {\\n    require(tokenId.isCFolioCard(), 'Invalid tokenId');\\n    require(msg.sender == _sftMinter, 'SFTE: Minter only');\\n\\n    _cfolioItemTypes[tokenId] = cfolioItemType;\\n\\n    // Dispatch event\\n    emit UpdatedCFolioType(tokenId, cfolioItemType);\\n  }\\n\\n  //////////////////////////////////////////////////////////////////////////////\\n  // Implementation details\\n  //////////////////////////////////////////////////////////////////////////////\\n\\n  function _baseRate(uint256 sftTokenId) private view returns (uint32) {\\n    (uint32 untimed, ) = _baseRates(sftTokenId, 0);\\n    return untimed;\\n  }\\n\\n  function _baseRates(uint256 tokenId, uint64 upgradeTime)\\n    private\\n    view\\n    returns (uint32 untimed, uint32 timed)\\n  {\\n    uint32[4] memory rates =\\n      [uint32(25e4), uint32(50e4), uint32(75e4), uint32(1e6)];\\n\\n    // Load state\\n    (uint64 time, uint8 level) =\\n      _sftHolder.getTokenData(tokenId.toSftTokenId());\\n\\n    uint32 update = (level & 3) <= 1 && time <= upgradeTime ? 125e3 : 0;\\n\\n    return (rates[(level & 3)], rates[(level & 3)] + update);\\n  }\\n}\\n\"\r\n    },\r\n    \"contracts/src/cfolio/interfaces/ICFolioItemHandler.sol\": {\r\n      \"content\": \"/*\\n * Copyright (C) 2021 The Wolfpack\\n * This file is part of wolves.finance - https://github.com/wolvesofwallstreet/wolves.finance\\n *\\n * SPDX-License-Identifier: Apache-2.0\\n * See LICENSE.txt for more information.\\n */\\n\\npragma solidity >=0.7.0 <0.8.0;\\n\\nimport '../../token/interfaces/ICFolioItemCallback.sol';\\n\\n/**\\n * @dev Interface to C-folio item contracts\\n */\\ninterface ICFolioItemHandler is ICFolioItemCallback {\\n  /**\\n   * @dev Called when a SFT tokens grade needs re-evaluation\\n   *\\n   * @param tokenId The ERC-1155 token ID. Rate is in 1E6 convention: 1E6 = 100%\\n   * @param newRate The new value rate\\n   */\\n  function sftUpgrade(uint256 tokenId, uint32 newRate) external;\\n\\n  /**\\n   * @dev Called from SFTMinter after an Investment SFT is minted\\n   *\\n   * @param payer The approved address to get investment from\\n   * @param sftTokenId The sftTokenId whose c-folio is the owner of investment\\n   * @param amounts The amounts of invested assets\\n   */\\n  function setupCFolio(\\n    address payer,\\n    uint256 sftTokenId,\\n    uint256[] calldata amounts\\n  ) external;\\n\\n  //////////////////////////////////////////////////////////////////////////////\\n  // Asset access\\n  //////////////////////////////////////////////////////////////////////////////\\n\\n  /**\\n   * @dev Adds investments into a cFolioItem SFT\\n   *\\n   * Transfers amounts of assets from users wallet to the contract. In general,\\n   * an Approval call is required before the function is called.\\n   *\\n   * @param baseTokenId cFolio tokenId, must be unlocked, or -1\\n   * @param tokenId cFolioItem tokenId, must be unlocked if not in unlocked cFolio\\n   * @param amounts Investment amounts, implementation specific\\n   */\\n  function deposit(\\n    uint256 baseTokenId,\\n    uint256 tokenId,\\n    uint256[] calldata amounts\\n  ) external;\\n\\n  /**\\n   * @dev Removes investments from a cFolioItem SFT\\n   *\\n   * Withdrawn token are transfered back to msg.sender.\\n   *\\n   * @param baseTokenId cFolio tokenId, must be unlocked, or -1\\n   * @param tokenId cFolioItem tokenId, must be unlocked if not in unlocked cFolio\\n   * @param amounts Investment amounts, implementation specific\\n   */\\n  function withdraw(\\n    uint256 baseTokenId,\\n    uint256 tokenId,\\n    uint256[] calldata amounts\\n  ) external;\\n\\n  /**\\n   * @dev Get the rewards collected by an SFT base card\\n   *\\n   * @param recipient Recipient of the rewards (- fees)\\n   * @param tokenId SFT base card tokenId, must be unlocked\\n   */\\n  function getRewards(address recipient, uint256 tokenId) external;\\n\\n  /**\\n   * @dev Get amounts (handler specific) for a cfolioItem\\n   *\\n   * @param cfolioItem address of CFolioItem contract\\n   */\\n  function getAmounts(address cfolioItem)\\n    external\\n    view\\n    returns (uint256[] memory);\\n\\n  /**\\n   * @dev Get information obout the rewardFarm\\n   *\\n   * @param tokenIds List of basecard tokenIds\\n   * @return bytes of uint256[]: total, rewardDur, rewardRateForDur, [share, earned]\\n   */\\n  function getRewardInfo(uint256[] calldata tokenIds)\\n    external\\n    view\\n    returns (bytes memory);\\n}\\n\"\r\n    },\r\n    \"contracts/src/cfolio/interfaces/ISFTEvaluator.sol\": {\r\n      \"content\": \"/*\\n * Copyright (C) 2021 The Wolfpack\\n * This file is part of wolves.finance - https://github.com/wolvesofwallstreet/wolves.finance\\n *\\n * SPDX-License-Identifier: Apache-2.0\\n * See LICENSE.txt for more information.\\n */\\n\\npragma solidity >=0.7.0 <0.8.0;\\n\\n// BOIS feature bitmask\\nuint256 constant LEVEL2BOIS = 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0000000000000000000000000000000F;\\nuint256 constant LEVEL2WOLF = 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF000000000000000000000000000000F0;\\n\\ninterface ISFTEvaluator {\\n  /**\\n   * @dev Returns the reward in 1e6 factor notation (1e6 = 100%)\\n   */\\n  function rewardRate(uint256 sftTokenId) external view returns (uint32);\\n\\n  /**\\n   * @dev Returns the cFolioItemType of a given cFolioItem tokenId\\n   */\\n  function getCFolioItemType(uint256 tokenId) external view returns (uint256);\\n\\n  /**\\n   * @dev Calculate the current reward rate, and notify TFC in case of change\\n   *\\n   * Optional revert on unchange to save gas on external calls.\\n   */\\n  function setRewardRate(uint256 tokenId, bool revertUnchanged) external;\\n\\n  /**\\n   * @dev Sets the cfolioItemType of a cfolioItem tokenId, not yet used\\n   * sftHolder tokenId expected (without hash)\\n   */\\n  function setCFolioItemType(uint256 tokenId, uint256 cfolioItemType_) external;\\n}\\n\"\r\n    },\r\n    \"contracts/src/token/interfaces/ICFolioItemCallback.sol\": {\r\n      \"content\": \"/*\\n * Copyright (C) 2021 The Wolfpack\\n * This file is part of wolves.finance - https://github.com/wolvesofwallstreet/wolves.finance\\n *\\n * SPDX-License-Identifier: Apache-2.0\\n * See LICENSE.txt for more information.\\n */\\n\\npragma solidity >=0.7.0 <0.8.0;\\n\\n/**\\n * @dev Interface to receive callbacks when minted tokens are burnt\\n */\\ninterface ICFolioItemCallback {\\n  /**\\n   * @dev Called when a TradeFloor CFolioItem is transfered\\n   *\\n   * In case of mint `from` is address(0).\\n   * In case of burn `to` is address(0).\\n   *\\n   * cfolioHandlers are passed to let each cfolioHandler filter for its own\\n   * token. This eliminates the need for creating separate lists.\\n   *\\n   * @param from The account sending the token\\n   * @param to The account receiving the token\\n   * @param tokenIds The ERC-1155 token IDs\\n   * @param cfolioHandlers cFolioItem handlers\\n   */\\n  function onCFolioItemsTransferedFrom(\\n    address from,\\n    address to,\\n    uint256[] calldata tokenIds,\\n    address[] calldata cfolioHandlers\\n  ) external;\\n\\n  /**\\n   * @dev Append data we use later for hashing\\n   *\\n   * @param cfolioItem The token ID of the c-folio item\\n   * @param current The current data being hashes\\n   *\\n   * @return The current data, with internal data appended\\n   */\\n  function appendHash(address cfolioItem, bytes calldata current)\\n    external\\n    view\\n    returns (bytes memory);\\n\\n  /**\\n   * @dev get custom uri for tokenId\\n   */\\n  function uri(uint256 tokenId) external view returns (string memory);\\n}\\n\"\r\n    },\r\n    \"contracts/src/token/interfaces/IWOWSCryptofolio.sol\": {\r\n      \"content\": \"/*\\n * Copyright (C) 2021 The Wolfpack\\n * This file is part of wolves.finance - https://github.com/wolvesofwallstreet/wolves.finance\\n *\\n * SPDX-License-Identifier: Apache-2.0\\n * See the file LICENSES/README.md for more information.\\n */\\n\\npragma solidity >=0.7.0 <0.8.0;\\n\\n/**\\n * @notice Cryptofolio interface\\n */\\ninterface IWOWSCryptofolio {\\n  //////////////////////////////////////////////////////////////////////////////\\n  // Initialization\\n  //////////////////////////////////////////////////////////////////////////////\\n\\n  /**\\n   * @dev Initialize the deployed contract after creation\\n   *\\n   * This is a one time call which sets _deployer to msg.sender.\\n   * Subsequent calls reverts.\\n   */\\n  function initialize() external;\\n\\n  //////////////////////////////////////////////////////////////////////////////\\n  // Getters\\n  //////////////////////////////////////////////////////////////////////////////\\n\\n  /**\\n   * @dev Return tradefloor at given index\\n   *\\n   * @param index The 0-based index in the tradefloor array\\n   *\\n   * @return The address of the tradefloor and position index\\n   */\\n  function _tradefloors(uint256 index) external view returns (address);\\n\\n  /**\\n   * @dev Return array of cryptofolio item token IDs\\n   *\\n   * The token IDs belong to the contract TradeFloor.\\n   *\\n   * @param tradefloor The TradeFloor that items belong to\\n   *\\n   * @return tokenIds The token IDs in scope of operator\\n   * @return idsLength The number of valid token IDs\\n   */\\n  function getCryptofolio(address tradefloor)\\n    external\\n    view\\n    returns (uint256[] memory tokenIds, uint256 idsLength);\\n\\n  //////////////////////////////////////////////////////////////////////////////\\n  // State modifiers\\n  //////////////////////////////////////////////////////////////////////////////\\n\\n  /**\\n   * @dev Set the owner of the underlying NFT\\n   *\\n   * This function is called if ownership of the parent NFT has changed.\\n   *\\n   * The new owner gets allowance to transfer cryptofolio items. The new owner\\n   * is allowed to transfer / burn cryptofolio items. Make sure that allowance\\n   * is removed from previous owner.\\n   *\\n   * @param owner The new owner of the underlying NFT, or address(0) if the\\n   * underlying NFT is being burned\\n   */\\n  function setOwner(address owner) external;\\n\\n  /**\\n   * @dev Allow owner (of parent NFT) to approve external operators to transfer\\n   * our cryptofolio items\\n   *\\n   * The NFT owner is allowed to approve operator to handle cryptofolios.\\n   *\\n   * @param operator The operator\\n   * @param allow True to approve for all NFTs, false to revoke approval\\n   */\\n  function setApprovalForAll(address operator, bool allow) external;\\n\\n  /**\\n   * @dev Burn all cryptofolio items\\n   *\\n   * In case an underlying NFT is burned, we also burn the cryptofolio.\\n   */\\n  function burn() external;\\n}\\n\"\r\n    },\r\n    \"contracts/src/token/interfaces/IWOWSERC1155.sol\": {\r\n      \"content\": \"/*\\n * Copyright (C) 2021 The Wolfpack\\n * This file is part of wolves.finance - https://github.com/wolvesofwallstreet/wolves.finance\\n *\\n * SPDX-License-Identifier: Apache-2.0\\n * See the file LICENSES/README.md for more information.\\n */\\n\\npragma solidity >=0.7.0 <0.8.0;\\n\\n/**\\n * @notice Cryptofolio interface\\n */\\ninterface IWOWSERC1155 {\\n  //////////////////////////////////////////////////////////////////////////////\\n  // Getters\\n  //////////////////////////////////////////////////////////////////////////////\\n\\n  /**\\n   * @dev Check if the specified address is a known tradefloor\\n   *\\n   * @param account The address to check\\n   *\\n   * @return True if the address is a known tradefloor, false otherwise\\n   */\\n  function isTradeFloor(address account) external view returns (bool);\\n\\n  /**\\n   * @dev Get the token ID of a given address\\n   *\\n   * A cross check is required because token ID 0 is valid.\\n   *\\n   * @param tokenAddress The address to convert to a token ID\\n   *\\n   * @return The token ID on success, or uint256(-1) if `tokenAddress` does not\\n   * belong to a token ID\\n   */\\n  function addressToTokenId(address tokenAddress)\\n    external\\n    view\\n    returns (uint256);\\n\\n  /**\\n   * @dev Get the address for a given token ID\\n   *\\n   * @param tokenId The token ID to convert\\n   *\\n   * @return The address, or address(0) in case the token ID does not belong\\n   * to an NFT\\n   */\\n  function tokenIdToAddress(uint256 tokenId) external view returns (address);\\n\\n  /**\\n   * @dev Get the next mintable token ID for the specified card\\n   *\\n   * @param level The level of the card\\n   * @param cardId The ID of the card\\n   *\\n   * @return bool True if a free token ID was found, false otherwise\\n   * @return uint256 The first free token ID if one was found, or invalid otherwise\\n   */\\n  function getNextMintableTokenId(uint8 level, uint8 cardId)\\n    external\\n    view\\n    returns (bool, uint256);\\n\\n  /**\\n   * @dev Return the next mintable custom token ID\\n   */\\n  function getNextMintableCustomToken() external view returns (uint256);\\n\\n  /**\\n   * @dev Return the level and the mint timestamp of tokenId\\n   *\\n   * @param tokenId The tokenId to query\\n   *\\n   * @return mintTimestamp The timestamp token was minted\\n   * @return level The level token belongs to\\n   */\\n  function getTokenData(uint256 tokenId)\\n    external\\n    view\\n    returns (uint64 mintTimestamp, uint8 level);\\n\\n  /**\\n   * @dev Return all tokenIds owned by account\\n   */\\n  function getTokenIds(address account)\\n    external\\n    view\\n    returns (uint256[] memory);\\n\\n  //////////////////////////////////////////////////////////////////////////////\\n  // State modifiers\\n  //////////////////////////////////////////////////////////////////////////////\\n\\n  /**\\n   * @dev Set the base URI for either predefined cards or custom cards\\n   * which don't have it's own URI.\\n   *\\n   * The resulting uri is baseUri+[hex(tokenId)] + '.json'. where\\n   * tokenId will be reduces to upper 16 bit (>> 16) before building the hex string.\\n   *\\n   */\\n  function setBaseMetadataURI(string memory baseContractMetadata) external;\\n\\n  /**\\n   * @dev Set the contracts metadata URI\\n   *\\n   * @param contractMetadataURI The URI which point to the contract metadata file.\\n   */\\n  function setContractMetadataURI(string memory contractMetadataURI) external;\\n\\n  /**\\n   * @dev Set the URI for a custom card\\n   *\\n   * @param tokenId The token ID whose URI is being set.\\n   * @param customURI The URI which point to an unique metadata file.\\n   */\\n  function setCustomURI(uint256 tokenId, string memory customURI) external;\\n\\n  /**\\n   * @dev Each custom card has its own level. Level will be used when\\n   * calculating rewards and raiding power.\\n   *\\n   * @param tokenId The ID of the token whose level is being set\\n   * @param cardLevel The new level of the specified token\\n   */\\n  function setCustomCardLevel(uint256 tokenId, uint8 cardLevel) external;\\n}\\n\"\r\n    },\r\n    \"contracts/src/utils/AddressBook.sol\": {\r\n      \"content\": \"/*\\n * Copyright (C) 2020-2021 The Wolfpack\\n * This file is part of wolves.finance - https://github.com/wolvesofwallstreet/wolves.finance\\n *\\n * SPDX-License-Identifier: Apache-2.0\\n * See the file LICENSES/README.md for more information.\\n */\\n\\npragma solidity >=0.7.0 <0.8.0;\\n\\nlibrary AddressBook {\\n  bytes32 public constant DEPLOYER = 'DEPLOYER';\\n  bytes32 public constant TEAM_WALLET = 'TEAM_WALLET';\\n  bytes32 public constant MARKETING_WALLET = 'MARKETING_WALLET';\\n  bytes32 public constant UNISWAP_V2_ROUTER02 = 'UNISWAP_V2_ROUTER02';\\n  bytes32 public constant WETH_WOWS_STAKE_FARM = 'WETH_WOWS_STAKE_FARM';\\n  bytes32 public constant WOWS_TOKEN = 'WOWS_TOKEN';\\n  bytes32 public constant UNISWAP_V2_PAIR = 'UNISWAP_V2_PAIR';\\n  bytes32 public constant WOWS_BOOSTER = 'WOWS_BOOSTER';\\n  bytes32 public constant REWARD_HANDLER = 'REWARD_HANDLER';\\n  bytes32 public constant SFT_MINTER = 'SFT_MINTER';\\n  bytes32 public constant SFT_HOLDER = 'SFT_HOLDER';\\n  bytes32 public constant BOIS_REWARDS = 'BOIS_REWARDS';\\n  bytes32 public constant WOLVES_REWARDS = 'WOLVES_REWARDS';\\n  bytes32 public constant SFT_EVALUATOR_PROXY = 'SFT_EVALUATOR_PROXY';\\n  bytes32 public constant TRADE_FLOOR_PROXY = 'TRADE_FLOOR_PROXY';\\n  bytes32 public constant CURVE_Y_TOKEN = 'CURVE_Y_TOKEN';\\n  bytes32 public constant CURVE_Y_DEPOSIT = 'CURVE_Y_DEPOSIT';\\n}\\n\"\r\n    },\r\n    \"contracts/src/utils/TokenIds.sol\": {\r\n      \"content\": \"/*\\n * Copyright (C) 2021 The Wolfpack\\n * This file is part of wolves.finance - https://github.com/wolvesofwallstreet/wolves.finance\\n *\\n * SPDX-License-Identifier: Apache-2.0\\n * See LICENSE.txt for more information.\\n */\\n\\npragma solidity >=0.7.0 <0.8.0;\\n\\nlibrary TokenIds {\\n  // 128 bit underlying hash\\n  uint256 public constant HASH_MASK = (1 << 128) - 1;\\n\\n  function isBaseCard(uint256 tokenId) internal pure returns (bool) {\\n    return (tokenId & HASH_MASK) < (1 << 64);\\n  }\\n\\n  function isStockCard(uint256 tokenId) internal pure returns (bool) {\\n    return (tokenId & HASH_MASK) < (1 << 32);\\n  }\\n\\n  function isCFolioCard(uint256 tokenId) internal pure returns (bool) {\\n    return\\n      (tokenId & HASH_MASK) >= (1 << 64) && (tokenId & HASH_MASK) < (1 << 128);\\n  }\\n\\n  function toSftTokenId(uint256 tokenId) internal pure returns (uint256) {\\n    return tokenId & HASH_MASK;\\n  }\\n\\n  function maskHash(uint256 tokenId) internal pure returns (uint256) {\\n    return tokenId & ~HASH_MASK;\\n  }\\n}\\n\"\r\n    },\r\n    \"contracts/src/utils/interfaces/IAddressRegistry.sol\": {\r\n      \"content\": \"/*\\n * Copyright (C) 2021 The Wolfpack\\n * This file is part of wolves.finance - https://github.com/wolvesofwallstreet/wolves.finance\\n *\\n * SPDX-License-Identifier: Apache-2.0\\n * See the file LICENSES/README.md for more information.\\n */\\n\\npragma solidity >=0.7.0 <0.8.0;\\n\\ninterface IAddressRegistry {\\n  /**\\n   * @dev Set an abitrary key / address pair into the registry\\n   */\\n  function setRegistryEntry(bytes32 _key, address _location) external;\\n\\n  /**\\n   * @dev Get a registry enty with by key, returns 0 address if not existing\\n   */\\n  function getRegistryEntry(bytes32 _key) external view returns (address);\\n}\\n\"\r\n    }\r\n  }\r\n}}","ABI":"[{\"inputs\":[{\"internalType\":\"contract IAddressRegistry\",\"name\":\"addressRegistry\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"rate\",\"type\":\"uint32\"}],\"name\":\"RewardRate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"cfolioItemType\",\"type\":\"uint256\"}],\"name\":\"UpdatedCFolioType\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"admin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getCFolioItemType\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"rewardRate\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"cfolioItemType\",\"type\":\"uint256\"}],\"name\":\"setCFolioItemType\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"revertUnchanged\",\"type\":\"bool\"}],\"name\":\"setRewardRate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"SFTEvaluator","CompilerVersion":"v0.7.4+commit.3f05b770","OptimizationUsed":"1","Runs":"1000","ConstructorArguments":"000000000000000000000000945466656995c9309ff66e05b4c268558bec964e","EVMVersion":"Default","Library":"","LicenseType":"Apache-2.0","Proxy":"0","Implementation":"","SwarmSource":""}]}