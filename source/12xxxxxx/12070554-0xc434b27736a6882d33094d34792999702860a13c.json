{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"/C/prj/Savix/contracts/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity 0.6.12;\\r\\n\\r\\n/**\\r\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\r\\n */\\r\\ninterface IERC20 {\\r\\n    /**\\r\\n     * @dev Returns the amount of tokens in existence.\\r\\n     */\\r\\n    function totalSupply() external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the amount of tokens owned by `account`.\\r\\n     */\\r\\n    function balanceOf(address account) external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\r\\n     *\\r\\n     * Returns a boolean value indicating whether the operation succeeded.\\r\\n     *\\r\\n     * Emits a {Transfer} event.\\r\\n     */\\r\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the remaining number of tokens that `spender` will be\\r\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\r\\n     * zero by default.\\r\\n     *\\r\\n     * This value changes when {approve} or {transferFrom} are called.\\r\\n     */\\r\\n    function allowance(address owner, address spender) external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\r\\n     *\\r\\n     * Returns a boolean value indicating whether the operation succeeded.\\r\\n     *\\r\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\r\\n     * that someone may use both the old and the new allowance by unfortunate\\r\\n     * transaction ordering. One possible solution to mitigate this race\\r\\n     * condition is to first reduce the spender's allowance to 0 and set the\\r\\n     * desired value afterwards:\\r\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\r\\n     *\\r\\n     * Emits an {Approval} event.\\r\\n     */\\r\\n    function approve(address spender, uint256 amount) external returns (bool);\\r\\n\\r\\n    /**\\r\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\r\\n     * allowance mechanism. `amount` is then deducted from the caller's\\r\\n     * allowance.\\r\\n     *\\r\\n     * Returns a boolean value indicating whether the operation succeeded.\\r\\n     *\\r\\n     * Emits a {Transfer} event.\\r\\n     */\\r\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\r\\n\\r\\n    /**\\r\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\r\\n     * another (`to`).\\r\\n     *\\r\\n     * Note that `value` may be zero.\\r\\n     */\\r\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\r\\n\\r\\n    /**\\r\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\r\\n     * a call to {approve}. `value` is the new allowance.\\r\\n     */\\r\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\r\\n}\\r\\n\"\r\n    },\r\n    \"/C/prj/Savix/contracts/SafeMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity 0.6.12;\\r\\n\\r\\n/**\\r\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\r\\n * checks.\\r\\n *\\r\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\r\\n * in bugs, because programmers usually assume that an overflow raises an\\r\\n * error, which is the standard behavior in high level programming languages.\\r\\n * `SafeMath` restores this intuition by reverting the transaction when an\\r\\n * operation overflows.\\r\\n *\\r\\n * Using this library instead of the unchecked operations eliminates an entire\\r\\n * class of bugs, so it's recommended to use it always.\\r\\n */\\r\\nlibrary SafeMath {\\r\\n    /**\\r\\n     * @dev Returns the addition of two unsigned integers, reverting on\\r\\n     * overflow.\\r\\n     *\\r\\n     * Counterpart to Solidity's `+` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     * - Addition cannot overflow.\\r\\n     */\\r\\n    function add(uint256 a, uint256 b) public pure returns (uint256) {\\r\\n        uint256 c = a + b;\\r\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\r\\n\\r\\n        return c;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\r\\n     * overflow (when the result is negative).\\r\\n     *\\r\\n     * Counterpart to Solidity's `-` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     * - Subtraction cannot overflow.\\r\\n     */\\r\\n    function sub(uint256 a, uint256 b) public pure returns (uint256) {\\r\\n        return sub(a, b, \\\"SafeMath: subtraction overflow\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\r\\n     * overflow (when the result is negative).\\r\\n     *\\r\\n     * Counterpart to Solidity's `-` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     * - Subtraction cannot overflow.\\r\\n     */\\r\\n    function sub(uint256 a, uint256 b, string memory errorMessage) public pure returns (uint256) {\\r\\n        require(b <= a, errorMessage);\\r\\n        uint256 c = a - b;\\r\\n\\r\\n        return c;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\r\\n     * overflow.\\r\\n     *\\r\\n     * Counterpart to Solidity's `*` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     * - Multiplication cannot overflow.\\r\\n     */\\r\\n    function mul(uint256 a, uint256 b) public pure returns (uint256) {\\r\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\r\\n        // benefit is lost if 'b' is also tested.\\r\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\r\\n        if (a == 0) {\\r\\n            return 0;\\r\\n        }\\r\\n\\r\\n        uint256 c = a * b;\\r\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\r\\n\\r\\n        return c;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the integer division of two unsigned integers. Reverts on\\r\\n     * division by zero. The result is rounded towards zero.\\r\\n     *\\r\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\r\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\r\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\r\\n     *\\r\\n     * Requirements:\\r\\n     * - The divisor cannot be zero.\\r\\n     */\\r\\n    function div(uint256 a, uint256 b) public pure returns (uint256) {\\r\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\\r\\n     * division by zero. The result is rounded towards zero.\\r\\n     *\\r\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\r\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\r\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\r\\n     *\\r\\n     * Requirements:\\r\\n     * - The divisor cannot be zero.\\r\\n     */\\r\\n    function div(uint256 a, uint256 b, string memory errorMessage) public pure returns (uint256) {\\r\\n        // Solidity only automatically asserts when dividing by 0\\r\\n        require(b > 0, errorMessage);\\r\\n        uint256 c = a / b;\\r\\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\r\\n\\r\\n        return c;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\r\\n     * Reverts when dividing by zero.\\r\\n     *\\r\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\r\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\r\\n     * invalid opcode to revert (consuming all remaining gas).\\r\\n     *\\r\\n     * Requirements:\\r\\n     * - The divisor cannot be zero.\\r\\n     */\\r\\n    function mod(uint256 a, uint256 b) public pure returns (uint256) {\\r\\n        return mod(a, b, \\\"SafeMath: modulo by zero\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\r\\n     * Reverts with custom message when dividing by zero.\\r\\n     *\\r\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\r\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\r\\n     * invalid opcode to revert (consuming all remaining gas).\\r\\n     *\\r\\n     * Requirements:\\r\\n     * - The divisor cannot be zero.\\r\\n     */\\r\\n    function mod(uint256 a, uint256 b, string memory errorMessage) public pure returns (uint256) {\\r\\n        require(b != 0, errorMessage);\\r\\n        return a % b;\\r\\n    }\\r\\n}\\r\\n\"\r\n    },\r\n    \"/C/prj/Savix/contracts/Savix.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity 0.6.12;\\r\\nimport \\\"./IERC20.sol\\\";\\r\\nimport \\\"./SafeMath.sol\\\";\\r\\nimport \\\"./SavixSupply.sol\\\";\\r\\n\\r\\ncontract Savix is IERC20\\r\\n{\\r\\n    using SafeMath for uint256;\\r\\n\\r\\n    address private _owner;\\r\\n    string private constant NAME = \\\"Savix\\\";\\r\\n    string private constant SYMBOL = \\\"SVX\\\";\\r\\n    uint private constant DECIMALS = 9;\\r\\n    uint private _constGradient = 0;\\r\\n    address private constant BURNADDR = 0x000000000000000000000000000000000000dEaD; // global burn address\\r\\n\\r\\n    bool private _stakingActive = false;\\r\\n    uint256 private _stakingSince = 0;\\r\\n\\r\\n    uint256 private constant MAX_UINT256 = 2**256 - 1;\\r\\n    uint256 private constant INITIAL_TOKEN_SUPPLY = 10**5 * 10**DECIMALS;\\r\\n\\r\\n    // TOTAL_FRAGMENTS is a multiple of INITIAL_TOKEN_SUPPLY so that _fragmentsPerToken is an integer.\\r\\n    // Use the highest value that fits in a uint256 for max granularity.\\r\\n    uint256 private constant TOTAL_FRAGMENTS = MAX_UINT256 - (MAX_UINT256 % INITIAL_TOKEN_SUPPLY);\\r\\n\\r\\n    uint256 private _totalSupply = INITIAL_TOKEN_SUPPLY;\\r\\n    uint256 private _lastTotalSupply = INITIAL_TOKEN_SUPPLY;\\r\\n    // ** added: new variable _adjustTime\\r\\n    uint256 private _adjustTime = 0;\\r\\n    uint256 private _lastAdjustTime = 0;\\r\\n\\r\\n    mapping (address => uint256) private _balances;\\r\\n    mapping (address => mapping (address => uint256)) private _allowances;\\r\\n    uint256 private _burnAmount;\\r\\n    uint256[2][] private _supplyMap;\\r\\n\\r\\n    constructor() public\\r\\n    {\\r\\n        _owner = msg.sender;\\r\\n        \\r\\n         _totalSupply = INITIAL_TOKEN_SUPPLY;\\r\\n        _balances[_owner] = TOTAL_FRAGMENTS;\\r\\n\\r\\n        _supplyMap.push([0, 100000 * 10**DECIMALS]);\\r\\n        _supplyMap.push([7 * SavixSupply.SECPERDAY, 115000 * 10**DECIMALS]);\\r\\n        _supplyMap.push([30 * SavixSupply.SECPERDAY, 130000 * 10**DECIMALS]);\\r\\n        _supplyMap.push([6 * 30 * SavixSupply.SECPERDAY, 160000 * 10**DECIMALS]);\\r\\n        _supplyMap.push([12 * 30 * SavixSupply.SECPERDAY, 185000 * 10**DECIMALS]);\\r\\n        _supplyMap.push([18 * 30 * SavixSupply.SECPERDAY, 215000 * 10**DECIMALS]);\\r\\n        _supplyMap.push([24 * 30 * SavixSupply.SECPERDAY, 240000 * 10**DECIMALS]);\\r\\n        _supplyMap.push([48 * 30 * SavixSupply.SECPERDAY, 300000 * 10**DECIMALS]);\\r\\n        // ** changed: gradient changed for slightly higher interest in far future \\r\\n        // _constGradient = SafeMath.div(INITIAL_TOKEN_SUPPLY * CONSTINTEREST, 360 * SavixSupply.SECPERDAY * 100); ** old version\\r\\n        _constGradient = 8 * 10**(DECIMALS - 4);\\r\\n    }\\r\\n    \\r\\n    modifier validRecipient(address to)\\r\\n    {\\r\\n        require(to != address(0) && to != address(this), \\\"Invalid Recipient\\\");\\r\\n        _;\\r\\n    }\\r\\n    \\r\\n    modifier onlyOwner \\r\\n    {\\r\\n        require(msg.sender == _owner, \\\"Only owner can call this function.\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    function supplyMap() external view returns (uint256[2][] memory) \\r\\n    {\\r\\n        return _supplyMap;\\r\\n    }\\r\\n\\r\\n    function initialSupply() external pure returns (uint256) \\r\\n    {\\r\\n        return INITIAL_TOKEN_SUPPLY;\\r\\n    }\\r\\n\\r\\n    function finalGradient() external view returns (uint) \\r\\n    {\\r\\n        return _constGradient;\\r\\n    }\\r\\n\\r\\n    function lastAdjustTime() external view returns (uint) \\r\\n    {\\r\\n        return _lastAdjustTime;\\r\\n    }\\r\\n\\r\\n    function lastTotalSupply() external view returns (uint) \\r\\n    {\\r\\n        return _lastTotalSupply;\\r\\n    }\\r\\n\\r\\n    function startStaking() \\r\\n      external \\r\\n      onlyOwner\\r\\n    {\\r\\n        _stakingActive = true;\\r\\n        _stakingSince = block.timestamp;\\r\\n        _totalSupply = _supplyMap[0][1];\\r\\n        _lastTotalSupply = _totalSupply;\\r\\n        _lastAdjustTime = 0;\\r\\n        // ** added: new variable _adjustTime\\r\\n        _adjustTime = 0;\\r\\n    }\\r\\n\\r\\n    function name() external pure returns (string memory) \\r\\n    {\\r\\n        return NAME;\\r\\n    }\\r\\n\\r\\n    function symbol() external pure returns (string memory)\\r\\n    {\\r\\n        return SYMBOL;\\r\\n    }\\r\\n\\r\\n    function decimals() external pure returns (uint8)\\r\\n    {\\r\\n        return uint8(DECIMALS);\\r\\n    }\\r\\n\\r\\n    function stakingActive() external view returns (bool)\\r\\n    {\\r\\n        return _stakingActive;\\r\\n    }\\r\\n\\r\\n    function stakingSince() external view returns (uint256)\\r\\n    {\\r\\n        return _stakingSince;\\r\\n    }\\r\\n\\r\\n    function stakingFrequence() external pure returns (uint)\\r\\n    {\\r\\n        return SavixSupply.MINTIMEWIN;\\r\\n    }\\r\\n\\r\\n    \\r\\n    function totalSupply() override external view returns (uint256)\\r\\n    {\\r\\n        // since we cannot directly decrease total supply without affecting all balances, we\\r\\n        // track burned tokens and substract them here\\r\\n        // we also substact burned tokens from the global burn address\\r\\n        return _totalSupply - _burnAmount.div(TOTAL_FRAGMENTS.div(_totalSupply)) - balanceOf(BURNADDR);\\r\\n    }\\r\\n\\r\\n    // dailyInterest rate is given in percent with 2 decimals => result has to be divede by 10**9 to get correct number with precision 2\\r\\n    function dailyInterest() external view returns (uint)\\r\\n    {\\r\\n            return SavixSupply.getDailyInterest(block.timestamp - _stakingSince, _lastAdjustTime, _totalSupply, _lastTotalSupply); \\r\\n    }\\r\\n\\r\\n    // ** new method\\r\\n    // yearlyInterest rate is given in percent with 2 decimals => result has to be divede by 10**9 to get correct number with precision 2\\r\\n    function yearlyInterest() external view returns (uint)\\r\\n    {\\r\\n            return SavixSupply.getYearlyInterest(block.timestamp - _stakingSince, _lastAdjustTime, _totalSupply, _lastTotalSupply); \\r\\n    }\\r\\n\\r\\n    function balanceOf(address account) override public view returns (uint256)\\r\\n    {\\r\\n        return _balances[account].div(TOTAL_FRAGMENTS.div(_totalSupply));\\r\\n    }\\r\\n\\r\\n    function _calculateFragments(uint256 value) internal returns (uint256)\\r\\n    {\\r\\n        if(_stakingActive && (block.timestamp - _stakingSince) - _lastAdjustTime >= SavixSupply.MINTIMEWIN)\\r\\n        {\\r\\n            uint256 newSupply = SavixSupply.getAdjustedSupply(_supplyMap, (block.timestamp - _stakingSince), _constGradient);\\r\\n            if (_totalSupply != newSupply)\\r\\n            {\\r\\n              // ** changed: assignment order\\r\\n              // ** added: new variable _adjustTime\\r\\n              _lastAdjustTime = _adjustTime;\\r\\n              _adjustTime = block.timestamp - _stakingSince;\\r\\n              _lastTotalSupply = _totalSupply;\\r\\n              _totalSupply = newSupply;\\r\\n            }\\r\\n        }\\r\\n        // return value.mul(TOTAL_FRAGMENTS.div(_totalSupply));  ** old version\\r\\n        // return TOTAL_FRAGMENTS.mul(value).div(_totalSupply);  ** this would be appropriate in order to multiply before division\\r\\n        // But => leads to multiplication overflow due to extremly high numbers in which supply fragments are held \\r\\n        return TOTAL_FRAGMENTS.div(_totalSupply).mul(value);\\r\\n    }\\r\\n\\r\\n    function burn(uint256 value)\\r\\n      external\\r\\n      returns (bool)\\r\\n    {\\r\\n        uint256 rAmount = _calculateFragments(value);\\r\\n        _balances[msg.sender] = _balances[msg.sender].sub(rAmount,\\\"burn amount exceeds balance\\\");\\r\\n        // cannot modify totalsupply directly, otherwise all balances would decrease\\r\\n        // we keep track of the burn amount and use it in the totalSupply() function to correctly\\r\\n        // compute the totalsupply\\r\\n        // also, burned tokens have to be stored as fragments (percentage) of the total supply\\r\\n        // This means they gets affected by staking: the burned amount will automatically increase accordingly\\r\\n        _burnAmount += rAmount;\\r\\n        emit Transfer(msg.sender, address(0), value);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    function getBurnAmount() external view returns (uint256)\\r\\n    {\\r\\n        return _burnAmount.div(TOTAL_FRAGMENTS.div(_totalSupply)) + balanceOf(BURNADDR);\\r\\n    }\\r\\n\\r\\n    function transfer(address to, uint256 value) override\\r\\n        external\\r\\n        validRecipient(to)\\r\\n        returns (bool)\\r\\n    {\\r\\n        uint256 rAmount = _calculateFragments(value);\\r\\n        _balances[msg.sender] = _balances[msg.sender].sub(rAmount,\\\"ERC20: transfer amount exceeds balance\\\");\\r\\n        _balances[to] = _balances[to].add(rAmount);\\r\\n        emit Transfer(msg.sender, to, value);       \\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     *\\r\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\r\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `sender` and `recipient` cannot be the zero address.\\r\\n     * - `sender` must have a balance of at least `amount`.\\r\\n     * - the caller must have allowance for ``sender``'s tokens of at least\\r\\n     * `amount`.\\r\\n     */\\r\\n    function transferFrom(address sender, address recipient, uint256 value) \\r\\n        override\\r\\n        external\\r\\n        returns (bool)\\r\\n    {\\r\\n        _allowances[sender][msg.sender] = _allowances[sender][msg.sender].sub(value,\\\"ERC20: transfer amount exceeds allowance\\\");\\r\\n        uint256 rAmount = _calculateFragments(value);\\r\\n\\r\\n        _balances[sender] = _balances[sender].sub(rAmount, \\\"ERC20: transfer amount exceeds balance\\\");\\r\\n        _balances[recipient] = _balances[recipient].add(rAmount);\\r\\n        emit Transfer(sender, recipient, value);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    function allowance(address owner, address spender) override external view returns (uint256)\\r\\n    {\\r\\n        return _allowances[owner][spender];\\r\\n    }\\r\\n\\r\\n    \\r\\n    function increaseAllowance(address spender, uint256 addedValue) external returns (bool)\\r\\n    {\\r\\n        uint256 newValue = _allowances[msg.sender][spender].add(addedValue);\\r\\n        _allowances[msg.sender][spender] = 0;\\r\\n        _approve(msg.sender, spender, newValue);\\r\\n        return true;\\r\\n    }\\r\\n    \\r\\n    function decreaseAllowance(address spender, uint256 subtractedValue) external returns (bool)\\r\\n    {\\r\\n        uint256 newValue = _allowances[msg.sender][spender].sub(subtractedValue,\\\"ERC20: decreased allowance below zero\\\");\\r\\n        _allowances[msg.sender][spender] = 0;\\r\\n        _approve(msg.sender, spender, newValue);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    \\r\\n    function approve(address spender, uint256 value) override external returns (bool) \\r\\n    {\\r\\n        _allowances[msg.sender][spender] = 0;\\r\\n        _approve(msg.sender, spender, value);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    function _approve(address owner, address spender, uint256 value) internal \\r\\n    {\\r\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\r\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\r\\n\\r\\n        // In order to exclude front-running attacks:\\r\\n        // To change the approve amount you first have to reduce the addresses`\\r\\n        // allowance to zero by calling `approve(_spender, 0)` if it is not\\r\\n        // already 0 to mitigate the race condition described here:\\r\\n        // https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\r\\n        require((value == 0 || _allowances[owner][spender] == 0), \\\"possible front-running attack\\\");\\r\\n\\r\\n        _allowances[owner][spender] = value;\\r\\n        emit Approval(owner, spender, value);\\r\\n    }\\r\\n\\r\\n    // use same logic to adjust balances as in function transfer\\r\\n    // only distribute from owner wallet (ecosystem fund)\\r\\n    // gas friendly way to do airdrops or giveaways\\r\\n    function distributeTokens(address[] memory addresses, uint256 value)\\r\\n        external\\r\\n        onlyOwner\\r\\n    {\\r\\n        uint256 rAmount = _calculateFragments(value);\\r\\n        _balances[_owner] = _balances[_owner].sub(rAmount * addresses.length,\\\"ERC20: distribution total amount exceeds balance\\\");\\r\\n        \\r\\n        uint256 addressesLength = addresses.length;\\r\\n        for (uint i = 0; i < addressesLength; i++)\\r\\n        {\\r\\n            _balances[addresses[i]] = _balances[addresses[i]].add(rAmount);\\r\\n            emit Transfer(_owner, addresses[i], value);       \\r\\n        }\\r\\n    }\\r\\n\\r\\n    // use same logic to adjust balances as in function transfer\\r\\n    // only distribute from owner wallet (ecosystem fund)\\r\\n    // gas friendly way to do airdrops or giveaways\\r\\n    function distributeTokensFlexSum(address[] memory addresses, uint256[] memory values)\\r\\n        external\\r\\n        onlyOwner\\r\\n    {\\r\\n        // there has to be exacly 1 value per address\\r\\n        require(addresses.length == values.length, \\\"there has to be exacly 1 value per address\\\"); // Overflow check\\r\\n\\r\\n        uint256 valuesum = 0;\\r\\n        uint256 valueLength = values.length;\\r\\n        for (uint i = 0; i < valueLength; i++)\\r\\n            valuesum += values[i];\\r\\n\\r\\n        _balances[_owner] = _balances[_owner].sub( _calculateFragments(valuesum),\\\"ERC20: distribution total amount exceeds balance\\\");\\r\\n\\r\\n        uint256 addressesLength = addresses.length;\\r\\n        for (uint i = 0; i < addressesLength; i++)\\r\\n        {\\r\\n            _balances[addresses[i]] = _balances[addresses[i]].add(_calculateFragments(values[i]));\\r\\n            emit Transfer(_owner, addresses[i], values[i]);       \\r\\n        }\\r\\n    }\\r\\n    \\r\\n    function getOwner() \\r\\n      external\\r\\n      view \\r\\n    returns(address)\\r\\n    {\\r\\n        return _owner;\\r\\n    }\\r\\n}\\r\\n\"\r\n    },\r\n    \"/C/prj/Savix/contracts/SavixSupply.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity 0.6.12;\\r\\nimport \\\"./SafeMath.sol\\\";\\r\\n\\r\\n/**\\r\\n * @dev savix interest and supply calculations.\\r\\n *\\r\\n*/\\r\\n library SavixSupply {\\r\\n     \\r\\n    uint256 public constant MAX_UINT256 = 2**256 - 1;\\r\\n    uint256 public constant MAX_UINT128 = 2**128 - 1;\\r\\n    uint public constant MINTIMEWIN = 7200; // 2 hours\\r\\n    uint public constant SECPERDAY = 3600 * 24;\\r\\n    uint public constant DECIMALS = 9;\\r\\n\\r\\n    struct SupplyWinBoundary \\r\\n    {\\r\\n        uint256 x1;\\r\\n        uint256 x2;\\r\\n        uint256 y1;\\r\\n        uint256 y2;\\r\\n    }\\r\\n\\r\\n    function getSupplyWindow(uint256[2][] memory map, uint256 calcTime) internal pure returns (SupplyWinBoundary memory)\\r\\n    {\\r\\n        SupplyWinBoundary memory winBound;\\r\\n        \\r\\n        winBound.x1 = 0;\\r\\n        winBound.x2 = 0;\\r\\n\\r\\n        winBound.y1 = map[0][1];\\r\\n        winBound.y2 = 0;\\r\\n\\r\\n        for (uint i=0; i < map.length; i++)\\r\\n        {\\r\\n            if (map[i][0] == 0) \\r\\n              continue;\\r\\n\\r\\n            if (calcTime < map[i][0])\\r\\n            {\\r\\n                winBound.x2 = map[i][0];\\r\\n                winBound.y2 = map[i][1];\\r\\n                break;\\r\\n            }\\r\\n            else\\r\\n            {\\r\\n                winBound.x1 = map[i][0];\\r\\n                winBound.y1 = map[i][1];\\r\\n            }\\r\\n        }\\r\\n        if (winBound.x2 == 0) winBound.x2 = MAX_UINT128;\\r\\n        if (winBound.y2 == 0) winBound.y2 = MAX_UINT128;\\r\\n        return winBound;\\r\\n    }\\r\\n\\r\\n    // function to calculate new Supply with SafeMath for divisions only, shortest (cheapest) form\\r\\n    function getAdjustedSupply(uint256[2][] memory map, uint256 transactionTime, uint constGradient) internal pure returns (uint256)\\r\\n    {\\r\\n        if (transactionTime >= map[map.length-1][0])\\r\\n        {\\r\\n            // return (map[map.length-1][1] + constGradient * (SafeMath.sub(transactionTime, map[map.length-1][0])));  ** old version\\r\\n            return (map[map.length-1][1] + SafeMath.mul(constGradient, SafeMath.sub(transactionTime, map[map.length-1][0])));\\r\\n        }\\r\\n        \\r\\n        SupplyWinBoundary memory winBound = getSupplyWindow(map, transactionTime);\\r\\n        // return (winBound.y1 + SafeMath.div(winBound.y2 - winBound.y1, winBound.x2 - winBound.x1) * (transactionTime - winBound.x1));  ** old version\\r\\n        return (winBound.y1 + SafeMath.div(SafeMath.mul(SafeMath.sub(winBound.y2, winBound.y1), SafeMath.sub(transactionTime, winBound.x1)), SafeMath.sub(winBound.x2, winBound.x1)));\\r\\n    }\\r\\n\\r\\n    function getDailyInterest(uint256 currentTime, uint256 lastAdjustTime, uint256 currentSupply, uint256 lastSupply) internal pure returns (uint)\\r\\n    {\\r\\n        if (currentTime <= lastAdjustTime)\\r\\n        {\\r\\n           return uint128(0);\\r\\n        }\\r\\n\\r\\n        // ** old version                \\r\\n        // uint256 InterestSinceLastAdjust = SafeMath.div((currentSupply - lastSupply) * 100, lastSupply);\\r\\n        // return (SafeMath.div(InterestSinceLastAdjust * SECPERDAY, currentTime - lastAdjustTime));\\r\\n        return (SafeMath.div(SafeMath.sub(currentSupply, lastSupply) * 100 * 10**DECIMALS * SECPERDAY, SafeMath.mul(SafeMath.sub(currentTime, lastAdjustTime), lastSupply)));\\r\\n    }\\r\\n \\r\\n    // ** new method\\r\\n    // yearlyInterest rate is given in percent with 2 decimals => result has to be divede by 10**9 to get correct number with precision 2\\r\\n    function getYearlyInterest(uint256 currentTime, uint256 lastAdjustTime, uint256 currentSupply, uint256 lastSupply) internal pure returns (uint)\\r\\n    {\\r\\n        if (currentTime <= lastAdjustTime)\\r\\n        {\\r\\n           return uint128(0);\\r\\n        }\\r\\n        return (SafeMath.div(SafeMath.sub(currentSupply, lastSupply) * 100 * 10**DECIMALS * SECPERDAY * 360, SafeMath.mul(SafeMath.sub(currentTime, lastAdjustTime), lastSupply)));\\r\\n    }\\r\\n}\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"remappings\": [],\r\n    \"optimizer\": {\r\n      \"enabled\": false,\r\n      \"runs\": 200\r\n    },\r\n    \"evmVersion\": \"petersburg\",\r\n    \"libraries\": {\r\n      \"/C/prj/Savix/contracts/SafeMath.sol\": {\r\n        \"SafeMath\": \"0x2BF254D95FC0f968ACcC0B12E6E7a91384619c7A\"\r\n      }\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}","ABI":"[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dailyInterest\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"addresses\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"distributeTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"addresses\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"}],\"name\":\"distributeTokensFlexSum\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"finalGradient\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBurnAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initialSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastAdjustTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastTotalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakingActive\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakingFrequence\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakingSince\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startStaking\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"supplyMap\",\"outputs\":[{\"internalType\":\"uint256[2][]\",\"name\":\"\",\"type\":\"uint256[2][]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"yearlyInterest\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"Savix","CompilerVersion":"v0.6.12+commit.27d51765","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","EVMVersion":"petersburg","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}