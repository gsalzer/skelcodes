{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/SmtVesting.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: GPL-3.0-only\\npragma solidity ^0.7.0;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ncontract SmtVesting is Ownable {\\n    using SafeMath for uint256;\\n\\n    /// @dev ERC20 basic token contract being held\\n    IERC20 public token;\\n\\n    /// @dev Block number where the contract is deployed\\n    uint256 public immutable initialBlock;\\n\\n    uint256 private constant ONE = 10**18;\\n    uint256 private constant DAY = 5760; // 24*60*60/15\\n    uint256 private constant WEEK = 40320; // 7*24*60*60/15\\n    uint256 private constant YEAR = 2102400; // 365*24*60*60/15\\n    uint256 private constant WEEKS_IN_YEAR = 52;\\n    uint256 private constant INITAL_ANUAL_DIST = 62500000 * ONE;\\n    uint256 private constant WEEK_BATCH_DIV = 45890222137623526749; //(0.995^0 + 0.995^1 ... + 0.995^51) = 45,894396603\\n\\n    /// @dev First year comunity batch has been claimed\\n    bool public firstYCBClaimed;\\n\\n    /// @dev Block number where last claim was executed\\n    uint256 public lastClaimedBlock;\\n\\n    /// @dev Emitted when `owner` claims.\\n    event Claim(address indexed owner, uint256 amount);\\n\\n    /**\\n     * @dev Sets the value for {initialBloc}.\\n     *\\n     * Sets ownership to the given `_owner`.\\n     *\\n     */\\n    constructor() {\\n        initialBlock = block.number;\\n        lastClaimedBlock = block.number;\\n    }\\n\\n    /**\\n     * @dev Sets the value for `token`.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be the owner.\\n     * - `_token` can't be zero address\\n     * - `token` should not be already set\\n     *\\n     */\\n    function setToken(address _token) external onlyOwner {\\n        require(_token != address(0), \\\"token is the zero address\\\");\\n        require(address(token) == address(0), \\\"token is already set\\\");\\n        token = IERC20(_token);\\n    }\\n\\n    /**\\n     * @dev Claims next token batch.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be the owner.\\n     *\\n     */\\n    function claim() external onlyOwner {\\n        uint256 amount = claimableAmount();\\n        lastClaimedBlock = block.number;\\n        firstYCBClaimed = true;\\n        emit Claim(owner(), amount);\\n        token.transfer(_msgSender(), amount);\\n    }\\n\\n    /**\\n     * @dev Gets the next token batch to be claimed since the last claim until current block.\\n     *\\n     */\\n    function claimableAmount() public view returns (uint256) {\\n        return _claimableAmount(firstYCBClaimed, block.number, lastClaimedBlock);\\n    }\\n\\n    /**\\n     * @dev Gets the next token batch to be claimed since the last claim until current block.\\n     *\\n     */\\n    function _claimableAmount(\\n        bool isFirstYCBClaimed,\\n        uint256 blockNumber,\\n        uint256 lCBlock\\n    ) internal view returns (uint256) {\\n        uint256 total = 0;\\n        uint256 lastClaimedBlockYear = blockYear(lCBlock);\\n        uint256 currentYear = blockYear(blockNumber);\\n\\n        total += accumulateAnualComBatch(isFirstYCBClaimed, blockNumber, lCBlock);\\n\\n        if (lastClaimedBlockYear < currentYear) {\\n            total += accumulateFromPastYears(blockNumber, lCBlock);\\n        } else {\\n            total += accumulateCurrentYear(blockNumber, lCBlock);\\n        }\\n\\n        return total;\\n    }\\n\\n    /**\\n     * @dev Accumulates non claimed Anual Comunity Batches.\\n     *\\n     */\\n    function accumulateAnualComBatch(\\n        bool isFirstYCBClaimed,\\n        uint256 blockNumber,\\n        uint256 lCBlock\\n    ) public view returns (uint256) {\\n        uint256 acc = 0;\\n        uint256 currentYear = blockYear(blockNumber);\\n        uint256 lastClaimedBlockYear = blockYear(lCBlock);\\n        if (!isFirstYCBClaimed || lastClaimedBlockYear < currentYear) {\\n            uint256 from = isFirstYCBClaimed ? lastClaimedBlockYear + 1 : 0;\\n            for (uint256 y = from; y <= currentYear; y++) {\\n                acc += yearAnualCommunityBatch(y);\\n            }\\n        }\\n\\n        return acc;\\n    }\\n\\n    /**\\n     * @dev Accumulates non claimed Weekly Release Batches from a week in a previous year.\\n     *\\n     */\\n    function accumulateFromPastYears(uint256 blockNumber, uint256 lCBlock) public view returns (uint256) {\\n        uint256 acc = 0;\\n        uint256 lastClaimedBlockYear = blockYear(lCBlock);\\n        uint256 lastClaimedBlockWeek = blockWeek(lCBlock);\\n        uint256 currentYear = blockYear(blockNumber);\\n        uint256 currentWeek = blockWeek(blockNumber);\\n\\n        // add what remains to claim from the claimed week\\n        acc += getWeekPortionFromBlock(lCBlock);\\n\\n        {\\n            uint256 ww;\\n            uint256 yy;\\n            for (ww = lastClaimedBlockWeek + 1; ww < WEEKS_IN_YEAR; ww++) {\\n                acc += yearWeekRelaseBatch(lastClaimedBlockYear, ww);\\n            }\\n\\n            // add complete weeks years until current year\\n            for (yy = lastClaimedBlockYear + 1; yy < currentYear; yy++) {\\n                for (ww = 0; ww < WEEKS_IN_YEAR; ww++) {\\n                    acc += yearWeekRelaseBatch(yy, ww);\\n                }\\n            }\\n\\n            // current year until current week\\n            for (ww = 0; ww < currentWeek; ww++) {\\n                acc += yearWeekRelaseBatch(currentYear, ww);\\n            }\\n        }\\n\\n        // portion of current week\\n        acc += getWeekPortionUntilBlock(blockNumber);\\n\\n        return acc;\\n    }\\n\\n    /**\\n     * @dev Accumulates non claimed Weekly Release Batches from a week in the current year.\\n     *\\n     */\\n    function accumulateCurrentYear(uint256 blockNumber, uint256 lCBlock) public view returns (uint256) {\\n        uint256 acc = 0;\\n        uint256 lastClaimedBlockWeek = blockWeek(lCBlock);\\n        uint256 currentYear = blockYear(blockNumber);\\n        uint256 currentWeek = blockWeek(blockNumber);\\n\\n        if (lastClaimedBlockWeek < currentWeek) {\\n            // add what remains to claim from the claimed week\\n            acc += getWeekPortionFromBlock(lCBlock);\\n\\n            {\\n                uint256 ww;\\n                // add remaining weeks until current\\n                for (ww = lastClaimedBlockWeek + 1; ww < currentWeek; ww++) {\\n                    acc += yearWeekRelaseBatch(currentYear, ww);\\n                }\\n            }\\n        }\\n\\n        // portion of current week\\n        acc += getWeekPortionUntilBlock(blockNumber);\\n\\n        return acc;\\n    }\\n\\n    // Utility Functions\\n\\n    /**\\n     * @dev Calculates the portion of Weekly Release Batch from a block to the end of that block's week.\\n     *\\n     */\\n    function getWeekPortionFromBlock(uint256 blockNumber) internal view returns (uint256) {\\n        uint256 blockNumberYear = blockYear(blockNumber);\\n        uint256 blockNumberWeek = blockWeek(blockNumber);\\n\\n        uint256 blockNumberWeekBatch = yearWeekRelaseBatch(blockNumberYear, blockNumberWeek);\\n        uint256 weekLastBlock = yearWeekLastBlock(blockNumberYear, blockNumberWeek);\\n        return blockNumberWeekBatch.mul(weekLastBlock.sub(blockNumber)).div(WEEK);\\n    }\\n\\n    /**\\n     * @dev Calculates the portion of Weekly Release Batch from the start of a block's week the block.\\n     *\\n     */\\n    function getWeekPortionUntilBlock(uint256 blockNumber) internal view returns (uint256) {\\n        uint256 blockNumberYear = blockYear(blockNumber);\\n        uint256 blockNumberWeek = blockWeek(blockNumber);\\n\\n        uint256 blockNumberWeekBatch = yearWeekRelaseBatch(blockNumberYear, blockNumberWeek);\\n        uint256 weekFirsBlock = yearWeekFirstBlock(blockNumberYear, blockNumberWeek);\\n        return blockNumberWeekBatch.mul(blockNumber.sub(weekFirsBlock)).div(WEEK);\\n    }\\n\\n    /**\\n     * @dev Calculates the Total Anual Distribution for a given year.\\n     *\\n     * TAD = (62500000) * (1 - 0.25)^y\\n     *\\n     * @param year Year zero based.\\n     */\\n    function yearAnualDistribution(uint256 year) public pure returns (uint256) {\\n        // 25% of year reduction => (1-0.25) = 0.75 = 3/4\\n        uint256 reductionN = 3**year;\\n        uint256 reductionD = 4**year;\\n        return INITAL_ANUAL_DIST.mul(reductionN).div(reductionD);\\n    }\\n\\n    /**\\n     * @dev Calculates the Anual Comunity Batch for a given year.\\n     *\\n     * 20% * yearAnualDistribution\\n     *\\n     * @param year Year zero based.\\n     */\\n    function yearAnualCommunityBatch(uint256 year) public pure returns (uint256) {\\n        uint256 totalAnnualDistribution = yearAnualDistribution(year);\\n        return totalAnnualDistribution.mul(200).div(1000);\\n    }\\n\\n    /**\\n     * @dev Calculates the Anual Weekly Batch for a given year.\\n     *\\n     * 80% * yearAnualDistribution\\n     *\\n     * @param year Year zero based.\\n     */\\n    function yearAnualWeeklyBatch(uint256 year) public pure returns (uint256) {\\n        uint256 yearAC = yearAnualCommunityBatch(year);\\n        return yearAnualDistribution(year).sub(yearAC);\\n    }\\n\\n    /**\\n     * @dev Calculates weekly reduction percentage for a given week.\\n     *\\n     * WRP = (1 - 0.5)^w\\n     *\\n     * @param week Week zero based.\\n     */\\n    function weeklyRedPerc(uint256 week) internal pure returns (uint256) {\\n        uint256 reductionPerc = ONE;\\n        uint256 nineNineFive = ONE - 5000000000000000; // 1 - 0.5\\n        for (uint256 i = 0; i < week; i++) {\\n            reductionPerc = nineNineFive.mul(reductionPerc).div(ONE);\\n        }\\n\\n        return reductionPerc;\\n    }\\n\\n    /**\\n     * @dev Calculates W1 weekly release batch amount for a given year.\\n     *\\n     * yearAnualWeeklyBatch / (0.995^0 + 0.995^1 ... + 0.995^51)\\n     *\\n     * @param year Year zero based.\\n     */\\n    function yearFrontWeightedWRB(uint256 year) internal pure returns (uint256) {\\n        uint256 totalWeeklyAnualBatch = yearAnualWeeklyBatch(year);\\n\\n        return totalWeeklyAnualBatch.mul(ONE).div(WEEK_BATCH_DIV);\\n    }\\n\\n    /**\\n     * @dev Calculates the Weekly Release Batch amount for the given year and week.\\n     *\\n     * @param year Year zero based.\\n     * @param week Week zero based.\\n     */\\n    function yearWeekRelaseBatch(uint256 year, uint256 week) public pure returns (uint256) {\\n        uint256 yearW1 = yearFrontWeightedWRB(year);\\n        uint256 weeklyRedPercentage = weeklyRedPerc(week);\\n\\n        return yearW1.mul(weeklyRedPercentage).div(ONE);\\n    }\\n\\n    /**\\n     * @dev Gets first block of the given year.\\n     *\\n     * @param year Year zero based.\\n     */\\n    function yearFirstBlock(uint256 year) internal view returns (uint256) {\\n        return initialBlock.add(YEAR.mul(year));\\n    }\\n\\n    /**\\n     * @dev Gets first block of the given year and week.\\n     *\\n     * @param year Year zero based.\\n     * @param week Week zero based.\\n     */\\n    function yearWeekFirstBlock(uint256 year, uint256 week) internal view returns (uint256) {\\n        uint256 yFB = yearFirstBlock(year);\\n        return yFB.add(WEEK.mul(week));\\n    }\\n\\n    /**\\n     * @dev Gets last block of the given year and week.\\n     *\\n     * @param year Year zero based.\\n     * @param week Week zero based.\\n     */\\n    function yearWeekLastBlock(uint256 year, uint256 week) internal view returns (uint256) {\\n        return yearWeekFirstBlock(year, week + 1);\\n    }\\n\\n    /**\\n     * @dev Gets the year of a given block.\\n     *\\n     * @param blockNumber Block number.\\n     */\\n    function blockYear(uint256 blockNumber) internal view returns (uint256) {\\n        return (blockNumber.sub(initialBlock)).div(YEAR);\\n    }\\n\\n    /**\\n     * @dev Gets the week of a given block within the block year.\\n     *\\n     * @param blockNumber Block number.\\n     */\\n    function blockWeek(uint256 blockNumber) internal view returns (uint256) {\\n        return (blockNumber.sub(yearFirstBlock(blockYear(blockNumber)))).div(WEEK);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor () {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/math/SafeMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        uint256 c = a + b;\\n        if (c < a) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b > a) return (false, 0);\\n        return (true, a - b);\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) return (true, 0);\\n        uint256 c = a * b;\\n        if (c / a != b) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a / b);\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a % b);\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b <= a, \\\"SafeMath: subtraction overflow\\\");\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0) return 0;\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: division by zero\\\");\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: modulo by zero\\\");\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}","ABI":"[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Claim\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"isFirstYCBClaimed\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"blockNumber\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lCBlock\",\"type\":\"uint256\"}],\"name\":\"accumulateAnualComBatch\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"blockNumber\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lCBlock\",\"type\":\"uint256\"}],\"name\":\"accumulateCurrentYear\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"blockNumber\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lCBlock\",\"type\":\"uint256\"}],\"name\":\"accumulateFromPastYears\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimableAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"firstYCBClaimed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initialBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastClaimedBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"setToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"year\",\"type\":\"uint256\"}],\"name\":\"yearAnualCommunityBatch\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"year\",\"type\":\"uint256\"}],\"name\":\"yearAnualDistribution\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"year\",\"type\":\"uint256\"}],\"name\":\"yearAnualWeeklyBatch\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"year\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"week\",\"type\":\"uint256\"}],\"name\":\"yearWeekRelaseBatch\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"}]","ContractName":"SmtVesting","CompilerVersion":"v0.7.6+commit.7338295f","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}