{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/v076/Token/Handlers/pre_first_rebasing/OVLLPRebasingBalanceHandler.sol\": {\r\n      \"content\": \"// DELTA-BUG-BOUNTY\\npragma abicoder v2;\\npragma solidity ^0.7.6;\\n\\nimport \\\"../../../../interfaces/IDeltaToken.sol\\\";\\nimport \\\"../../../../interfaces/IOVLBalanceHandler.sol\\\";\\nimport \\\"../../../../common/OVLTokenTypes.sol\\\";\\n\\ncontract OVLLPRebasingBalanceHandler is IOVLBalanceHandler {\\n    IDeltaToken private immutable DELTA_TOKEN;\\n\\n    constructor() {\\n        DELTA_TOKEN = IDeltaToken(msg.sender);\\n    }\\n\\n    function handleBalanceCalculations(address account, address) external view override returns (uint256) {\\n        UserInformationLite memory ui = DELTA_TOKEN.getUserInfo(account);\\n        return ui.maxBalance;\\n    }\\n}\"\r\n    },\r\n    \"contracts/interfaces/IDeltaToken.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma experimental ABIEncoderV2;\\npragma solidity ^0.7.6;\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\"; \\n\\nimport \\\"../common/OVLTokenTypes.sol\\\";\\n\\ninterface IDeltaToken is IERC20 {\\n    function vestingTransactions(address, uint256) external view returns (VestingTransaction memory);\\n    function getUserInfo(address) external view returns (UserInformationLite memory);\\n    function getMatureBalance(address, uint256) external view returns (uint256);\\n    function liquidityRebasingPermitted() external view returns (bool);\\n    function lpTokensInPair() external view returns (uint256);\\n    function governance() external view returns (address);\\n    function performLiquidityRebasing() external;\\n    function distributor() external view returns (address);\\n    function totalsForWallet(address ) external view returns (WalletTotals memory totals);\\n    function adjustBalanceOfNoVestingAccount(address, uint256,bool) external;\\n    function userInformation(address user) external view returns (UserInformation memory);\\n\\n}\"\r\n    },\r\n    \"contracts/interfaces/IOVLBalanceHandler.sol\": {\r\n      \"content\": \"pragma experimental ABIEncoderV2;\\npragma solidity ^0.7.6;\\n\\ninterface IOVLBalanceHandler {\\n    function handleBalanceCalculations(address, address) external view returns (uint256);\\n}\"\r\n    },\r\n    \"contracts/common/OVLTokenTypes.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\n// DELTA-BUG-BOUNTY\\n\\npragma solidity ^0.7.6;\\n\\nstruct VestingTransaction {\\n    uint256 amount;\\n    uint256 fullVestingTimestamp;\\n}\\n\\nstruct WalletTotals {\\n    uint256 mature;\\n    uint256 immature;\\n    uint256 total;\\n}\\n\\nstruct UserInformation {\\n    // This is going to be read from only [0]\\n    uint256 mostMatureTxIndex;\\n    uint256 lastInTxIndex;\\n    uint256 maturedBalance;\\n    uint256 maxBalance;\\n    bool fullSenderWhitelisted;\\n    // Note that recieving immature balances doesnt mean they recieve them fully vested just that senders can do it\\n    bool immatureReceiverWhitelisted;\\n    bool noVestingWhitelisted;\\n}\\n\\nstruct UserInformationLite {\\n    uint256 maturedBalance;\\n    uint256 maxBalance;\\n    uint256 mostMatureTxIndex;\\n    uint256 lastInTxIndex;\\n}\\n\\nstruct VestingTransactionDetailed {\\n    uint256 amount;\\n    uint256 fullVestingTimestamp;\\n    // uint256 percentVestedE4;\\n    uint256 mature;\\n    uint256 immature;\\n}\\n\\n\\nuint256 constant QTY_EPOCHS = 7;\\n\\nuint256 constant SECONDS_PER_EPOCH = 172800; // About 2days\\n\\nuint256 constant FULL_EPOCH_TIME = SECONDS_PER_EPOCH * QTY_EPOCHS;\\n\\n// Precision Multiplier -- this many zeros (23) seems to get all the precision needed for all 18 decimals to be only off by a max of 1 unit\\nuint256 constant PM = 1e23;\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}","ABI":"[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"handleBalanceCalculations\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"OVLLPRebasingBalanceHandler","CompilerVersion":"v0.7.6+commit.7338295f","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}