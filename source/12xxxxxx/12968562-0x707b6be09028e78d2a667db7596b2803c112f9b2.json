{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/Vesting.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-only\\npragma solidity 0.8.4;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\n/**\\n * Tracer Standard Vesting Contract\\n */\\ncontract Vesting is Ownable {\\n    struct Schedule {\\n        uint256 totalAmount;\\n        uint256 claimedAmount;\\n        uint256 startTime;\\n        uint256 cliffTime;\\n        uint256 endTime;\\n        bool isFixed;\\n        address asset;\\n    }\\n\\n    // user => scheduleId => schedule\\n    mapping(address => mapping(uint256 => Schedule)) public schedules;\\n    mapping(address => uint256) public numberOfSchedules;\\n\\n    mapping(address => uint256) public locked;\\n\\n    event Claim(address indexed claimer, uint256 amount);\\n    event Vest(address indexed to, uint256 amount);\\n    event Cancelled(address account);\\n\\n    constructor() {}\\n\\n    /**\\n     * @notice Sets up a vesting schedule for a set user.\\n     * @dev adds a new Schedule to the schedules mapping.\\n     * @param account the account that a vesting schedule is being set up for. Will be able to claim tokens after\\n     *                the cliff period.\\n     * @param amount the amount of tokens being vested for the user.\\n     * @param asset the asset that the user is being vested\\n     * @param isFixed a flag for if the vesting schedule is fixed or not. Fixed vesting schedules can't be cancelled.\\n     * @param cliffWeeks the number of weeks that the cliff will be present at.\\n     * @param vestingWeeks the number of weeks the tokens will vest over (linearly)\\n     * @param startTime the timestamp for when this vesting should have started\\n     */\\n    function vest(\\n        address account,\\n        uint256 amount,\\n        address asset,\\n        bool isFixed,\\n        uint256 cliffWeeks,\\n        uint256 vestingWeeks,\\n        uint256 startTime\\n    ) public onlyOwner {\\n        // ensure cliff is shorter than vesting\\n        require(\\n            vestingWeeks > 0 && \\n            vestingWeeks >= cliffWeeks &&\\n            amount > 0,\\n            \\\"Vesting: invalid vesting params\\\"\\n        );\\n\\n        uint256 currentLocked = locked[asset];\\n\\n        // require the token is present\\n        require(\\n            IERC20(asset).balanceOf(address(this)) >= currentLocked + amount,\\n            \\\"Vesting: Not enough tokens\\\"\\n        );\\n\\n        // create the schedule\\n        uint256 currentNumSchedules = numberOfSchedules[account];\\n        schedules[account][currentNumSchedules] = Schedule(\\n            amount,\\n            0,\\n            startTime,\\n            startTime + (cliffWeeks * 1 weeks),\\n            startTime + (vestingWeeks * 1 weeks),\\n            isFixed,\\n            asset\\n        );\\n        numberOfSchedules[account] = currentNumSchedules + 1;\\n        locked[asset] = currentLocked + amount;\\n        emit Vest(account, amount);\\n    }\\n\\n    /**\\n     * @notice Sets up vesting schedules for multiple users within 1 transaction.\\n     * @dev adds a new Schedule to the schedules mapping.\\n     * @param accounts an array of the accounts that the vesting schedules are being set up for.\\n     *                 Will be able to claim tokens after the cliff period.\\n     * @param amount an array of the amount of tokens being vested for each user.\\n     * @param asset the asset that the user is being vested\\n     * @param isFixed bool setting if these vesting schedules can be rugged or not.\\n     * @param cliffWeeks the number of weeks that the cliff will be present at.\\n     * @param vestingWeeks the number of weeks the tokens will vest over (linearly)\\n     * @param startTime the timestamp for when this vesting should have started\\n     */\\n    function multiVest(\\n        address[] calldata accounts,\\n        uint256[] calldata amount,\\n        address asset,\\n        bool isFixed,\\n        uint256 cliffWeeks,\\n        uint256 vestingWeeks,\\n        uint256 startTime\\n    ) external onlyOwner {\\n        uint256 numberOfAccounts = accounts.length;\\n        require(\\n            amount.length == numberOfAccounts,\\n            \\\"Vesting: Array lengths differ\\\"\\n        );\\n        for (uint256 i = 0; i < numberOfAccounts; i++) {\\n            vest(\\n                accounts[i],\\n                amount[i],\\n                asset,\\n                isFixed,\\n                cliffWeeks,\\n                vestingWeeks,\\n                startTime\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @notice allows users to claim vested tokens if the cliff time has passed.\\n     * @param scheduleNumber which schedule the user is claiming against\\n     */\\n    function claim(uint256 scheduleNumber) external {\\n        Schedule storage schedule = schedules[msg.sender][scheduleNumber];\\n        require(\\n            schedule.cliffTime <= block.timestamp,\\n            \\\"Vesting: cliff not reached\\\"\\n        );\\n        require(schedule.totalAmount > 0, \\\"Vesting: not claimable\\\");\\n\\n        // Get the amount to be distributed\\n        uint256 amount = calcDistribution(\\n            schedule.totalAmount,\\n            block.timestamp,\\n            schedule.startTime,\\n            schedule.endTime\\n        );\\n\\n        // Cap the amount at the total amount\\n        amount = amount > schedule.totalAmount ? schedule.totalAmount : amount;\\n        uint256 amountToTransfer = amount - schedule.claimedAmount;\\n        schedule.claimedAmount = amount; // set new claimed amount based off the curve\\n        locked[schedule.asset] = locked[schedule.asset] - amountToTransfer;\\n        require(IERC20(schedule.asset).transfer(msg.sender, amountToTransfer), \\\"Vesting: transfer failed\\\");\\n        emit Claim(msg.sender, amount);\\n    }\\n\\n    /**\\n     * @notice Allows a vesting schedule to be cancelled.\\n     * @dev Any outstanding tokens are returned to the system.\\n     * @param account the account of the user whos vesting schedule is being cancelled.\\n     */\\n    function rug(address account, uint256 scheduleId) external onlyOwner {\\n        Schedule storage schedule = schedules[account][scheduleId];\\n        require(!schedule.isFixed, \\\"Vesting: Account is fixed\\\");\\n        uint256 outstandingAmount = schedule.totalAmount -\\n            schedule.claimedAmount;\\n        require(outstandingAmount != 0, \\\"Vesting: no outstanding tokens\\\");\\n        schedule.totalAmount = 0;\\n        locked[schedule.asset] = locked[schedule.asset] - outstandingAmount;\\n        require(IERC20(schedule.asset).transfer(owner(), outstandingAmount), \\\"Vesting: transfer failed\\\");\\n        emit Cancelled(account);\\n    }\\n\\n    /**\\n     * @return calculates the amount of tokens to distribute to an account at any instance in time, based off some\\n     *         total claimable amount.\\n     * @param amount the total outstanding amount to be claimed for this vesting schedule.\\n     * @param currentTime the current timestamp.\\n     * @param startTime the timestamp this vesting schedule started.\\n     * @param endTime the timestamp this vesting schedule ends.\\n     */\\n    function calcDistribution(\\n        uint256 amount,\\n        uint256 currentTime,\\n        uint256 startTime,\\n        uint256 endTime\\n    ) public pure returns (uint256) {\\n        // avoid uint underflow\\n        if (currentTime < startTime) {\\n            return 0;\\n        }\\n\\n        // if endTime < startTime, this will throw. Since endTime should never be\\n        // less than startTime in safe operation, this is fine.\\n        return (amount * (currentTime - startTime)) / (endTime - startTime);\\n    }\\n\\n    /**\\n     * @notice Withdraws TCR tokens from the contract.\\n     * @dev blocks withdrawing locked tokens.\\n     */\\n    function withdraw(uint256 amount, address asset) external onlyOwner {\\n        IERC20 token = IERC20(asset);\\n        require(\\n            token.balanceOf(address(this)) - locked[asset] >= amount,\\n            \\\"Vesting: Can't withdraw\\\"\\n        );\\n        require(token.transfer(owner(), amount), \\\"Vesting: withdraw failed\\\");\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _setOwner(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _setOwner(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _setOwner(newOwner);\\n    }\\n\\n    function _setOwner(address newOwner) private {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": false,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"metadata\": {\r\n      \"useLiteralContent\": true\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}","ABI":"[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Cancelled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"claimer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Claim\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Vest\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"currentTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"startTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endTime\",\"type\":\"uint256\"}],\"name\":\"calcDistribution\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"scheduleNumber\",\"type\":\"uint256\"}],\"name\":\"claim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"locked\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"accounts\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amount\",\"type\":\"uint256[]\"},{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isFixed\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"cliffWeeks\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"vestingWeeks\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"startTime\",\"type\":\"uint256\"}],\"name\":\"multiVest\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"numberOfSchedules\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"scheduleId\",\"type\":\"uint256\"}],\"name\":\"rug\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"schedules\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"totalAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"claimedAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"startTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"cliffTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endTime\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isFixed\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isFixed\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"cliffWeeks\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"vestingWeeks\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"startTime\",\"type\":\"uint256\"}],\"name\":\"vest\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"Vesting","CompilerVersion":"v0.8.4+commit.c7e474f2","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}