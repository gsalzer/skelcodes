{"status":"1","message":"OK","result":[{"SourceCode":"// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.5.15;\r\n\r\ninterface IERC20 {\r\n    function totalSupply() external view returns (uint256);\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n    function decimals() external view returns (uint);\r\n    function name() external view returns (string memory);\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\nlibrary SafeMath {\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        // Solidity only automatically asserts when dividing by 0\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n\r\n        return c;\r\n    }\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\nlibrary Address {\r\n    function isContract(address account) internal view returns (bool) {\r\n        bytes32 codehash;\r\n        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly { codehash := extcodehash(account) }\r\n        return (codehash != 0x0 && codehash != accountHash);\r\n    }\r\n    function toPayable(address account) internal pure returns (address payable) {\r\n        return address(uint160(account));\r\n    }\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        // solhint-disable-next-line avoid-call-value\r\n        (bool success, ) = recipient.call.value(amount)(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n}\r\n\r\nlibrary SafeERC20 {\r\n    using SafeMath for uint256;\r\n    using Address for address;\r\n\r\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\r\n    }\r\n\r\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\r\n    }\r\n\r\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\r\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\r\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\r\n        );\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\r\n    }\r\n    function callOptionalReturn(IERC20 token, bytes memory data) private {\r\n        require(address(token).isContract(), \"SafeERC20: call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = address(token).call(data);\r\n        require(success, \"SafeERC20: low-level call failed\");\r\n\r\n        if (returndata.length > 0) { // Return data is optional\r\n            // solhint-disable-next-line max-line-length\r\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\r\n        }\r\n    }\r\n}\r\n\r\ninterface Controller {\r\n    function vaults(address) external view returns (address);\r\n    function rewards() external view returns (address);\r\n}\r\n\r\ninterface VWBTC{\r\n    function deposit(uint256) external;\r\n    function withdraw(uint256 shares) external;\r\n    function getPricePerShare() external view returns (uint256);\r\n}\r\n\r\ninterface PoolRewards{\r\n    function claimReward(address account) external;\r\n    function claimable(address account) external view returns (uint256);\r\n}\r\n\r\n\r\ninterface UniswapRouter {\r\n     function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\r\n        external\r\n        payable\r\n        returns (uint[] memory amounts);\r\n    function swapExactTokensForTokens(\r\n      uint amountIn,\r\n      uint amountOutMin,\r\n      address[] calldata path,\r\n      address to,\r\n      uint deadline\r\n    ) external returns (uint[] memory amounts);\r\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\r\n}\r\n\r\ninterface WETH {\r\n    function withdraw(uint wad) external;\r\n}\r\n\r\ncontract StrategyWBTCVSP {\r\n    using SafeERC20 for IERC20;\r\n    using Address for address;\r\n    using SafeMath for uint256;\r\n\r\n    address constant public unirouter = address(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D);\r\n    address constant public weth = address(0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2);\r\n\taddress constant public bt = address(0x76c5449F4950f6338A393F53CdA8b53B0cd3Ca3a);\r\n\r\n    address constant public want = address(0x2260FAC5E5542a773Aa44fBCfeDf7C193bc2C599);  //WBTC\r\n\r\n    address constant public vWBTC = address(0x4B2e76EbBc9f2923d83F5FBDe695D8733db1a17B);     //vWBTC\r\n\r\n    address constant public poolRewards = address(0x479A8666Ad530af3054209Db74F3C74eCd295f8D);      //poolRewards\r\n    address constant public VSP = address(0x1b40183EFB4Dd766f11bDa7A7c3AD8982e998421);        //VSP\r\n\r\n    address public governance;\r\n    address public controller;\r\n\r\n    uint256 public redeliverynum = 100 * 1e18;\r\n\r\n\taddress[] public swap2BTRouting;\r\n    address[] public swap2TokenRouting;\r\n\r\n    modifier onlyController {\r\n        require(msg.sender == controller, \"!controller\");\r\n        _;\r\n    }\r\n\r\n\tmodifier isAuthorized() {\r\n        require(msg.sender == governance || msg.sender == controller || msg.sender == address(this), \"!authorized\");\r\n        _;\r\n    }\r\n\r\n    constructor() public {\r\n        governance = tx.origin;\r\n        controller = 0x5C6d3Cb5612b551452B3E9b48c920559634510D4;\r\n        doApprove();\r\n\t\tswap2BTRouting = [VSP,weth,bt];\r\n        swap2TokenRouting = [VSP,weth,want];\r\n    }\r\n\r\n\tfunction doApprove () internal{\r\n        IERC20(VSP).approve(unirouter, uint(-1));\r\n    }\r\n\r\n    function deposit() public isAuthorized{\r\n\t\tuint256 _wantAmount = IERC20(want).balanceOf(address(this));\r\n\t\tif (_wantAmount > 0) {\r\n            IERC20(want).safeApprove(vWBTC, 0);\r\n            IERC20(want).safeApprove(vWBTC, _wantAmount);\r\n\r\n            VWBTC(vWBTC).deposit(_wantAmount);\r\n        }\r\n    }\r\n\r\n\r\n    // Withdraw partial funds, normally used with a vault withdrawal\r\n\tfunction withdraw(uint _amount) external onlyController\r\n\t{\r\n\t\tuint amount = _withdraw(_amount);\r\n\t\taddress _vault = Controller(controller).vaults(address(want));\r\n        require(_vault != address(0), \"!vault\");\r\n        IERC20(want).safeTransfer(_vault, amount);\r\n\t}\r\n\r\n\r\n    function _withdraw(uint _amount) internal returns(uint) {\r\n\t\tuint amount = IERC20(want).balanceOf(address(this));\r\n\t\tif (amount < _amount) {\r\n            amount = _amount.sub(amount);\r\n            uint256 shares = amount.mul(1e18).div(VWBTC(vWBTC).getPricePerShare());\r\n            uint256 allShares = IERC20(vWBTC).balanceOf(address(this));\r\n            if(shares > allShares){\r\n                shares = allShares;\r\n            }\r\n            VWBTC(vWBTC).withdraw(shares);\r\n\t\t\tamount = IERC20(want).balanceOf(address(this));\r\n            if (amount < _amount){\r\n                return amount;\r\n            }\r\n        }\r\n\t\treturn _amount;\r\n    }\r\n\r\n\tfunction withdrawAll() external onlyController returns (uint balance){\r\n\t\tbalance = _withdraw(balanceOf());\r\n\r\n\t\taddress _vault = Controller(controller).vaults(address(want));\r\n        require(_vault != address(0), \"!vault\");\r\n        IERC20(want).safeTransfer(_vault, balance);\r\n\t}\r\n\r\n    // Governance only function for creating additional rewards from dust\r\n    function withdrawAsset(address _asset,address _to) external returns(uint256 balance){\r\n        require(msg.sender == governance, \"!governance\");\r\n        require(_to != address(0x0) && _asset != address(0x0) ,\"Invalid address\");\r\n        require(want != _asset && vWBTC != _asset, \"want\");\r\n        balance = IERC20(_asset).balanceOf(address(this));\r\n        IERC20(_asset).safeTransfer(_to, balance);\r\n    }\r\n\r\n    function balanceOfwant() public view returns (uint256) {\r\n\t\treturn IERC20(want).balanceOf(address(this));\r\n\t}\r\n\r\n\tfunction balanceOfVWBTC() public view returns (uint256) {\r\n\t\treturn IERC20(vWBTC).balanceOf(address(this));\r\n\t}\r\n\r\n    function balanceOf() public view returns (uint256) {\r\n        return balanceOfwant().add(balanceOfVWBTC().mul(VWBTC(vWBTC).getPricePerShare()).div(1e18));\r\n    }\r\n\r\n    function getVSPToken()public view returns(uint256) {\r\n        return IERC20(VSP).balanceOf(address(this));\r\n    }\r\n\r\n    function getPending()public view returns(uint256){\r\n        return PoolRewards(poolRewards).claimable(address(this));\r\n    }\r\n\r\n    function harvest() public\r\n    {\r\n        PoolRewards(poolRewards).claimReward(address(this));\r\n        redelivery();\r\n    }\r\n\r\n    function redelivery() internal {\r\n        uint256 reward = IERC20(VSP).balanceOf(address(this));\r\n        if(reward > redeliverynum){\r\n            uint256 _2token = reward.mul(80).div(100); //80%\r\n\t\t    uint256 _2bt = reward.sub(_2token);  //20%\r\n\t\t    UniswapRouter(unirouter).swapExactTokensForTokens(_2token, 0, swap2TokenRouting, address(this), now.add(1800));\r\n\t\t    UniswapRouter(unirouter).swapExactTokensForTokens(_2bt, 0, swap2BTRouting, Controller(controller).rewards(), now.add(1800));\r\n        }\r\n        deposit();\r\n    }\r\n\r\n    function setredeliverynum(uint256 value) public {\r\n        require(msg.sender == governance, \"!governance\");\r\n        redeliverynum = value;\r\n    }\r\n\r\n    function setGovernance(address _governance) public {\r\n        require(msg.sender == governance, \"!governance\");\r\n        governance = _governance;\r\n    }\r\n\r\n    function setController(address _controller) external {\r\n        require(msg.sender == governance, \"!governance\");\r\n        controller = _controller;\r\n    }\r\n}","ABI":"[{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"constant\":true,\"inputs\":[],\"name\":\"VSP\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"balanceOfVWBTC\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"balanceOfwant\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"bt\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"controller\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"deposit\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getPending\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getVSPToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"governance\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"harvest\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"poolRewards\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"redeliverynum\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_controller\",\"type\":\"address\"}],\"name\":\"setController\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_governance\",\"type\":\"address\"}],\"name\":\"setGovernance\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"setredeliverynum\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"swap2BTRouting\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"swap2TokenRouting\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"unirouter\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"vWBTC\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"want\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"weth\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdrawAll\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_asset\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"withdrawAsset\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"StrategyWBTCVSP","CompilerVersion":"v0.5.17+commit.d19bba13","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"bzzr://45f0f74e4e11cc05bbb0ea14fa99e89c46b30c68bae6b39be4e2a33688c435b2"}]}