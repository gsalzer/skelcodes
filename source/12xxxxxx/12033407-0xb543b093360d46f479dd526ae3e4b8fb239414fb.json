{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.5.0;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP. Does not include\r\n * the optional functions; to access them see {ERC20Detailed}.\r\n */\r\ninterface IERC20 {\r\n /**\r\n * @dev Returns the amount of tokens in existence.\r\n */\r\n function totalSupply() external view returns (uint256);\r\n\r\n /**\r\n * @dev Returns the amount of tokens owned by `account`.\r\n */\r\n function balanceOf(address account) external view returns (uint256);\r\n\r\n /**\r\n * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n *\r\n * Returns a boolean value indicating whether the operation succeeded.\r\n *\r\n * Emits a {Transfer} event.\r\n */\r\n function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n /**\r\n * @dev Returns the remaining number of tokens that `spender` will be\r\n * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n * zero by default.\r\n *\r\n * This value changes when {approve} or {transferFrom} are called.\r\n */\r\n function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n /**\r\n * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n *\r\n * Returns a boolean value indicating whether the operation succeeded.\r\n *\r\n * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n * that someone may use both the old and the new allowance by unfortunate\r\n * transaction ordering. One possible solution to mitigate this race\r\n * condition is to first reduce the spender's allowance to 0 and set the\r\n * desired value afterwards:\r\n * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n *\r\n * Emits an {Approval} event.\r\n */\r\n function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n /**\r\n * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n * allowance mechanism. `amount` is then deducted from the caller's\r\n * allowance.\r\n *\r\n * Returns a boolean value indicating whether the operation succeeded.\r\n *\r\n * Emits a {Transfer} event.\r\n */\r\n function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n /**\r\n * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n * another (`to`).\r\n *\r\n * Note that `value` may be zero.\r\n */\r\n event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n /**\r\n * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n * a call to {approve}. `value` is the new allowance.\r\n */\r\n event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n * @dev Optional functions from the ERC20 standard.\r\n */\r\ncontract ERC20Detailed is IERC20 {\r\n string private _name;\r\n string private _symbol;\r\n uint8 private _decimals;\r\n\r\n /**\r\n * @dev Sets the values for `name`, `symbol`, and `decimals`. All three of\r\n * these values are immutable: they can only be set once during\r\n * construction.\r\n */\r\n constructor (string memory name, string memory symbol, uint8 decimals) public {\r\n _name = name;\r\n _symbol = symbol;\r\n _decimals = decimals;\r\n }\r\n\r\n /**\r\n * @dev Returns the name of the token.\r\n */\r\n function name() public view returns (string memory) {\r\n return _name;\r\n }\r\n\r\n /**\r\n * @dev Returns the symbol of the token, usually a shorter version of the\r\n * name.\r\n */\r\n function symbol() public view returns (string memory) {\r\n return _symbol;\r\n }\r\n\r\n /**\r\n * @dev Returns the number of decimals used to get its user representation.\r\n * For example, if `decimals` equals `2`, a balance of `505` tokens should\r\n * be displayed to a user as `5,05` (`505 / 10 ** 2`).\r\n *\r\n * Tokens usually opt for a value of 18, imitating the relationship between\r\n * Ether and Wei.\r\n *\r\n * NOTE: This information is only used for _display_ purposes: it in\r\n * no way affects any of the arithmetic of the contract, including\r\n * {IERC20-balanceOf} and {IERC20-transfer}.\r\n */\r\n function decimals() public view returns (uint8) {\r\n return _decimals;\r\n }\r\n}\r\n\r\n\r\n\r\n\r\n\r\n/*\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with GSN meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\ncontract Context {\r\n // Empty internal constructor, to prevent people from mistakenly deploying\r\n // an instance of this contract, which should be used via inheritance.\r\n constructor () internal { }\r\n // solhint-disable-previous-line no-empty-blocks\r\n\r\n function _msgSender() internal view returns (address payable) {\r\n return msg.sender;\r\n }\r\n\r\n function _msgData() internal view returns (bytes memory) {\r\n this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n return msg.data;\r\n }\r\n}\r\n\r\n\r\n\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n /**\r\n * @dev Returns the addition of two unsigned integers, reverting on\r\n * overflow.\r\n *\r\n * Counterpart to Solidity's `+` operator.\r\n *\r\n * Requirements:\r\n * - Addition cannot overflow.\r\n */\r\n function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n uint256 c = a + b;\r\n require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n return c;\r\n }\r\n\r\n /**\r\n * @dev Returns the subtraction of two unsigned integers, reverting on\r\n * overflow (when the result is negative).\r\n *\r\n * Counterpart to Solidity's `-` operator.\r\n *\r\n * Requirements:\r\n * - Subtraction cannot overflow.\r\n */\r\n function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n return sub(a, b, \"SafeMath: subtraction overflow\");\r\n }\r\n\r\n /**\r\n * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n * overflow (when the result is negative).\r\n *\r\n * Counterpart to Solidity's `-` operator.\r\n *\r\n * Requirements:\r\n * - Subtraction cannot overflow.\r\n *\r\n * _Available since v2.4.0._\r\n */\r\n function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n require(b <= a, errorMessage);\r\n uint256 c = a - b;\r\n\r\n return c;\r\n }\r\n\r\n /**\r\n * @dev Returns the multiplication of two unsigned integers, reverting on\r\n * overflow.\r\n *\r\n * Counterpart to Solidity's `*` operator.\r\n *\r\n * Requirements:\r\n * - Multiplication cannot overflow.\r\n */\r\n function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n // benefit is lost if 'b' is also tested.\r\n // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n if (a == 0) {\r\n return 0;\r\n }\r\n\r\n uint256 c = a * b;\r\n require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n return c;\r\n }\r\n\r\n /**\r\n * @dev Returns the integer division of two unsigned integers. Reverts on\r\n * division by zero. The result is rounded towards zero.\r\n *\r\n * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n * uses an invalid opcode to revert (consuming all remaining gas).\r\n *\r\n * Requirements:\r\n * - The divisor cannot be zero.\r\n */\r\n function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n return div(a, b, \"SafeMath: division by zero\");\r\n }\r\n\r\n /**\r\n * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n * division by zero. The result is rounded towards zero.\r\n *\r\n * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n * uses an invalid opcode to revert (consuming all remaining gas).\r\n *\r\n * Requirements:\r\n * - The divisor cannot be zero.\r\n *\r\n * _Available since v2.4.0._\r\n */\r\n function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n // Solidity only automatically asserts when dividing by 0\r\n require(b > 0, errorMessage);\r\n uint256 c = a / b;\r\n // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n return c;\r\n }\r\n\r\n /**\r\n * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n * Reverts when dividing by zero.\r\n *\r\n * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n * invalid opcode to revert (consuming all remaining gas).\r\n *\r\n * Requirements:\r\n * - The divisor cannot be zero.\r\n */\r\n function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n return mod(a, b, \"SafeMath: modulo by zero\");\r\n }\r\n\r\n /**\r\n * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n * Reverts with custom message when dividing by zero.\r\n *\r\n * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n * invalid opcode to revert (consuming all remaining gas).\r\n *\r\n * Requirements:\r\n * - The divisor cannot be zero.\r\n *\r\n * _Available since v2.4.0._\r\n */\r\n function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n require(b != 0, errorMessage);\r\n return a % b;\r\n }\r\n}\r\n\r\n\r\n/**\r\n * @dev Implementation of the {IERC20} interface.\r\n *\r\n * This implementation is agnostic to the way tokens are created. This means\r\n * that a supply mechanism has to be added in a derived contract using {_mint}.\r\n * For a generic mechanism see {ERC20Mintable}.\r\n *\r\n * TIP: For a detailed writeup see our guide\r\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\r\n * to implement supply mechanisms].\r\n *\r\n * We have followed general OpenZeppelin guidelines: functions revert instead\r\n * of returning `false` on failure. This behavior is nonetheless conventional\r\n * and does not conflict with the expectations of ERC20 applications.\r\n *\r\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\r\n * This allows applications to reconstruct the allowance for all accounts just\r\n * by listening to said events. Other implementations of the EIP may not emit\r\n * these events, as it isn't required by the specification.\r\n *\r\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\r\n * functions have been added to mitigate the well-known issues around setting\r\n * allowances. See {IERC20-approve}.\r\n */\r\ncontract ERC20 is Context, IERC20 {\r\n using SafeMath for uint256;\r\n\r\n mapping (address => uint256) private _balances;\r\n\r\n mapping (address => mapping (address => uint256)) private _allowances;\r\n\r\n uint256 private _totalSupply;\r\n\r\n /**\r\n * @dev See {IERC20-totalSupply}.\r\n */\r\n function totalSupply() public view returns (uint256) {\r\n return _totalSupply;\r\n }\r\n\r\n /**\r\n * @dev See {IERC20-balanceOf}.\r\n */\r\n function balanceOf(address account) public view returns (uint256) {\r\n return _balances[account];\r\n }\r\n\r\n /**\r\n * @dev See {IERC20-transfer}.\r\n *\r\n * Requirements:\r\n *\r\n * - `recipient` cannot be the zero address.\r\n * - the caller must have a balance of at least `amount`.\r\n */\r\n function transfer(address recipient, uint256 amount) public returns (bool) {\r\n _transfer(_msgSender(), recipient, amount);\r\n return true;\r\n }\r\n\r\n /**\r\n * @dev See {IERC20-allowance}.\r\n */\r\n function allowance(address owner, address spender) public view returns (uint256) {\r\n return _allowances[owner][spender];\r\n }\r\n\r\n /**\r\n * @dev See {IERC20-approve}.\r\n *\r\n * Requirements:\r\n *\r\n * - `spender` cannot be the zero address.\r\n */\r\n function approve(address spender, uint256 amount) public returns (bool) {\r\n _approve(_msgSender(), spender, amount);\r\n return true;\r\n }\r\n\r\n /**\r\n * @dev See {IERC20-transferFrom}.\r\n *\r\n * Emits an {Approval} event indicating the updated allowance. This is not\r\n * required by the EIP. See the note at the beginning of {ERC20};\r\n *\r\n * Requirements:\r\n * - `sender` and `recipient` cannot be the zero address.\r\n * - `sender` must have a balance of at least `amount`.\r\n * - the caller must have allowance for `sender`'s tokens of at least\r\n * `amount`.\r\n */\r\n function transferFrom(address sender, address recipient, uint256 amount) public returns (bool) {\r\n _transfer(sender, recipient, amount);\r\n _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \"ERC20: transfer amount exceeds allowance\"));\r\n return true;\r\n }\r\n\r\n /**\r\n * @dev Atomically increases the allowance granted to `spender` by the caller.\r\n *\r\n * This is an alternative to {approve} that can be used as a mitigation for\r\n * problems described in {IERC20-approve}.\r\n *\r\n * Emits an {Approval} event indicating the updated allowance.\r\n *\r\n * Requirements:\r\n *\r\n * - `spender` cannot be the zero address.\r\n */\r\n function increaseAllowance(address spender, uint256 addedValue) public returns (bool) {\r\n _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\r\n return true;\r\n }\r\n\r\n /**\r\n * @dev Atomically decreases the allowance granted to `spender` by the caller.\r\n *\r\n * This is an alternative to {approve} that can be used as a mitigation for\r\n * problems described in {IERC20-approve}.\r\n *\r\n * Emits an {Approval} event indicating the updated allowance.\r\n *\r\n * Requirements:\r\n *\r\n * - `spender` cannot be the zero address.\r\n * - `spender` must have allowance for the caller of at least\r\n * `subtractedValue`.\r\n */\r\n function decreaseAllowance(address spender, uint256 subtractedValue) public returns (bool) {\r\n _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \"ERC20: decreased allowance below zero\"));\r\n return true;\r\n }\r\n\r\n /**\r\n * @dev Moves tokens `amount` from `sender` to `recipient`.\r\n *\r\n * This is internal function is equivalent to {transfer}, and can be used to\r\n * e.g. implement automatic token fees, slashing mechanisms, etc.\r\n *\r\n * Emits a {Transfer} event.\r\n *\r\n * Requirements:\r\n *\r\n * - `sender` cannot be the zero address.\r\n * - `recipient` cannot be the zero address.\r\n * - `sender` must have a balance of at least `amount`.\r\n */\r\n function _transfer(address sender, address recipient, uint256 amount) internal {\r\n require(sender != address(0), \"ERC20: transfer from the zero address\");\r\n require(recipient != address(0), \"ERC20: transfer to the zero address\");\r\n\r\n _balances[sender] = _balances[sender].sub(amount, \"ERC20: transfer amount exceeds balance\");\r\n _balances[recipient] = _balances[recipient].add(amount);\r\n emit Transfer(sender, recipient, amount);\r\n }\r\n\r\n /** @dev Creates `amount` tokens and assigns them to `account`, increasing\r\n * the total supply.\r\n *\r\n * Emits a {Transfer} event with `from` set to the zero address.\r\n *\r\n * Requirements\r\n *\r\n * - `to` cannot be the zero address.\r\n */\r\n function _mint(address account, uint256 amount) internal {\r\n require(account != address(0), \"ERC20: mint to the zero address\");\r\n\r\n _totalSupply = _totalSupply.add(amount);\r\n _balances[account] = _balances[account].add(amount);\r\n emit Transfer(address(0), account, amount);\r\n }\r\n\r\n /**\r\n * @dev Destroys `amount` tokens from `account`, reducing the\r\n * total supply.\r\n *\r\n * Emits a {Transfer} event with `to` set to the zero address.\r\n *\r\n * Requirements\r\n *\r\n * - `account` cannot be the zero address.\r\n * - `account` must have at least `amount` tokens.\r\n */\r\n function _burn(address account, uint256 amount) internal {\r\n require(account != address(0), \"ERC20: burn from the zero address\");\r\n\r\n _balances[account] = _balances[account].sub(amount, \"ERC20: burn amount exceeds balance\");\r\n _totalSupply = _totalSupply.sub(amount);\r\n emit Transfer(account, address(0), amount);\r\n }\r\n\r\n /**\r\n * @dev Sets `amount` as the allowance of `spender` over the `owner`s tokens.\r\n *\r\n * This is internal function is equivalent to `approve`, and can be used to\r\n * e.g. set automatic allowances for certain subsystems, etc.\r\n *\r\n * Emits an {Approval} event.\r\n *\r\n * Requirements:\r\n *\r\n * - `owner` cannot be the zero address.\r\n * - `spender` cannot be the zero address.\r\n */\r\n function _approve(address owner, address spender, uint256 amount) internal {\r\n require(owner != address(0), \"ERC20: approve from the zero address\");\r\n require(spender != address(0), \"ERC20: approve to the zero address\");\r\n\r\n _allowances[owner][spender] = amount;\r\n emit Approval(owner, spender, amount);\r\n }\r\n\r\n /**\r\n * @dev Destroys `amount` tokens from `account`.`amount` is then deducted\r\n * from the caller's allowance.\r\n *\r\n * See {_burn} and {_approve}.\r\n */\r\n function _burnFrom(address account, uint256 amount) internal {\r\n _burn(account, amount);\r\n _approve(account, _msgSender(), _allowances[account][_msgSender()].sub(amount, \"ERC20: burn amount exceeds allowance\"));\r\n }\r\n}\r\n\r\n\r\n\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\ncontract Ownable is Context {\r\n address private _owner;\r\n\r\n event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n /**\r\n * @dev Initializes the contract setting the deployer as the initial owner.\r\n */\r\n constructor () internal {\r\n address msgSender = _msgSender();\r\n _owner = msgSender;\r\n emit OwnershipTransferred(address(0), msgSender);\r\n }\r\n\r\n /**\r\n * @dev Returns the address of the current owner.\r\n */\r\n function owner() public view returns (address) {\r\n return _owner;\r\n }\r\n\r\n /**\r\n * @dev Throws if called by any account other than the owner.\r\n */\r\n modifier onlyOwner() {\r\n require(isOwner(), \"Ownable: caller is not the owner\");\r\n _;\r\n }\r\n\r\n /**\r\n * @dev Returns true if the caller is the current owner.\r\n */\r\n function isOwner() public view returns (bool) {\r\n return _msgSender() == _owner;\r\n }\r\n\r\n /**\r\n * @dev Leaves the contract without owner. It will not be possible to call\r\n * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n *\r\n * NOTE: Renouncing ownership will leave the contract without an owner,\r\n * thereby removing any functionality that is only available to the owner.\r\n */\r\n function renounceOwnership() public onlyOwner {\r\n emit OwnershipTransferred(_owner, address(0));\r\n _owner = address(0);\r\n }\r\n\r\n /**\r\n * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n * Can only be called by the current owner.\r\n */\r\n function transferOwnership(address newOwner) public onlyOwner {\r\n _transferOwnership(newOwner);\r\n }\r\n\r\n /**\r\n * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n */\r\n function _transferOwnership(address newOwner) internal {\r\n require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n emit OwnershipTransferred(_owner, newOwner);\r\n _owner = newOwner;\r\n }\r\n}\r\n\r\n\r\ncontract KiiAToken is ERC20, ERC20Detailed, Ownable {\r\n\r\n //Token percentages\r\n uint256 private tokenSaleRatio = 50;\r\n uint256 private foundersRatio = 10;\r\n uint256 private marketingRatio = 40;\r\n uint256 private foundersplit = 20; \r\n\r\n //Constructor\r\n constructor(\r\n string memory _name, \r\n string memory _symbol, \r\n uint8 _decimals,\r\n address _founder1,\r\n address _founder2,\r\n address _founder3,\r\n address _founder4,\r\n address _founder5,\r\n address _marketing,\r\n address _publicsale,\r\n uint256 _initialSupply\r\n )\r\n ERC20Detailed(_name, _symbol, _decimals)\r\n public\r\n {\r\n uint256 tempInitialSupply = _initialSupply * (10 ** uint256(_decimals));\r\n\r\n uint256 publicSupply = tempInitialSupply.mul(tokenSaleRatio).div(100);\r\n uint256 marketingSupply = tempInitialSupply.mul(marketingRatio).div(100);\r\n uint256 tempfounderSupply = tempInitialSupply.mul(foundersRatio).div(100);\r\n uint256 founderSupply = tempfounderSupply.mul(foundersplit).div(100);\r\n\r\n _mint(_publicsale, publicSupply);\r\n _mint(_marketing, marketingSupply);\r\n _mint(_founder1, founderSupply);\r\n _mint(_founder2, founderSupply);\r\n _mint(_founder3, founderSupply);\r\n _mint(_founder4, founderSupply);\r\n _mint(_founder5, founderSupply);\r\n\r\n }\r\n\r\n}\r\n\r\n\r\n// ----------------------------------------------------------------------------\r\n// BokkyPooBah's DateTime Library v1.00\r\n//\r\n// A gas-efficient Solidity date and time library\r\n//\r\n// https://github.com/bokkypoobah/BokkyPooBahsDateTimeLibrary\r\n//\r\n// Tested date range 1970/01/01 to 2345/12/31\r\n//\r\n// Conventions:\r\n// Unit | Range | Notes\r\n// :-------- |:-------------:|:-----\r\n// timestamp | >= 0 | Unix timestamp, number of seconds since 1970/01/01 00:00:00 UTC\r\n// year | 1970 ... 2345 |\r\n// month | 1 ... 12 |\r\n// day | 1 ... 31 |\r\n// hour | 0 ... 23 |\r\n// minute | 0 ... 59 |\r\n// second | 0 ... 59 |\r\n// dayOfWeek | 1 ... 7 | 1 = Monday, ..., 7 = Sunday\r\n//\r\n//\r\n// Enjoy. (c) BokkyPooBah / Bok Consulting Pty Ltd 2018.\r\n//\r\n// GNU Lesser General Public License 3.0\r\n// https://www.gnu.org/licenses/lgpl-3.0.en.html\r\n// ----------------------------------------------------------------------------\r\n\r\nlibrary BokkyPooBahsDateTimeLibrary {\r\n\r\n uint constant SECONDS_PER_DAY = 24 * 60 * 60;\r\n uint constant SECONDS_PER_HOUR = 60 * 60;\r\n uint constant SECONDS_PER_MINUTE = 60;\r\n int constant OFFSET19700101 = 2440588;\r\n\r\n uint constant DOW_MON = 1;\r\n uint constant DOW_TUE = 2;\r\n uint constant DOW_WED = 3;\r\n uint constant DOW_THU = 4;\r\n uint constant DOW_FRI = 5;\r\n uint constant DOW_SAT = 6;\r\n uint constant DOW_SUN = 7;\r\n\r\n // ------------------------------------------------------------------------\r\n // Calculate the number of days from 1970/01/01 to year/month/day using\r\n // the date conversion algorithm from\r\n // http://aa.usno.navy.mil/faq/docs/JD_Formula.php\r\n // and subtracting the offset 2440588 so that 1970/01/01 is day 0\r\n //\r\n // days = day\r\n // - 32075\r\n // + 1461 * (year + 4800 + (month - 14) / 12) / 4\r\n // + 367 * (month - 2 - (month - 14) / 12 * 12) / 12\r\n // - 3 * ((year + 4900 + (month - 14) / 12) / 100) / 4\r\n // - offset\r\n // ------------------------------------------------------------------------\r\n function _daysFromDate(uint year, uint month, uint day) internal pure returns (uint _days) {\r\n require(year >= 1970);\r\n int _year = int(year);\r\n int _month = int(month);\r\n int _day = int(day);\r\n\r\n int __days = _day\r\n - 32075\r\n + 1461 * (_year + 4800 + (_month - 14) / 12) / 4\r\n + 367 * (_month - 2 - (_month - 14) / 12 * 12) / 12\r\n - 3 * ((_year + 4900 + (_month - 14) / 12) / 100) / 4\r\n - OFFSET19700101;\r\n\r\n _days = uint(__days);\r\n }\r\n\r\n // ------------------------------------------------------------------------\r\n // Calculate year/month/day from the number of days since 1970/01/01 using\r\n // the date conversion algorithm from\r\n // http://aa.usno.navy.mil/faq/docs/JD_Formula.php\r\n // and adding the offset 2440588 so that 1970/01/01 is day 0\r\n //\r\n // int L = days + 68569 + offset\r\n // int N = 4 * L / 146097\r\n // L = L - (146097 * N + 3) / 4\r\n // year = 4000 * (L + 1) / 1461001\r\n // L = L - 1461 * year / 4 + 31\r\n // month = 80 * L / 2447\r\n // dd = L - 2447 * month / 80\r\n // L = month / 11\r\n // month = month + 2 - 12 * L\r\n // year = 100 * (N - 49) + year + L\r\n // ------------------------------------------------------------------------\r\n function _daysToDate(uint _days) internal pure returns (uint year, uint month, uint day) {\r\n int __days = int(_days);\r\n\r\n int L = __days + 68569 + OFFSET19700101;\r\n int N = 4 * L / 146097;\r\n L = L - (146097 * N + 3) / 4;\r\n int _year = 4000 * (L + 1) / 1461001;\r\n L = L - 1461 * _year / 4 + 31;\r\n int _month = 80 * L / 2447;\r\n int _day = L - 2447 * _month / 80;\r\n L = _month / 11;\r\n _month = _month + 2 - 12 * L;\r\n _year = 100 * (N - 49) + _year + L;\r\n\r\n year = uint(_year);\r\n month = uint(_month);\r\n day = uint(_day);\r\n }\r\n\r\n function timestampFromDate(uint year, uint month, uint day) internal pure returns (uint timestamp) {\r\n timestamp = _daysFromDate(year, month, day) * SECONDS_PER_DAY;\r\n }\r\n function timestampFromDateTime(uint year, uint month, uint day, uint hour, uint minute, uint second) internal pure returns (uint timestamp) {\r\n timestamp = _daysFromDate(year, month, day) * SECONDS_PER_DAY + hour * SECONDS_PER_HOUR + minute * SECONDS_PER_MINUTE + second;\r\n }\r\n function timestampToDate(uint timestamp) internal pure returns (uint year, uint month, uint day) {\r\n (year, month, day) = _daysToDate(timestamp / SECONDS_PER_DAY);\r\n }\r\n function timestampToDateTime(uint timestamp) internal pure returns (uint year, uint month, uint day, uint hour, uint minute, uint second) {\r\n (year, month, day) = _daysToDate(timestamp / SECONDS_PER_DAY);\r\n uint secs = timestamp % SECONDS_PER_DAY;\r\n hour = secs / SECONDS_PER_HOUR;\r\n secs = secs % SECONDS_PER_HOUR;\r\n minute = secs / SECONDS_PER_MINUTE;\r\n second = secs % SECONDS_PER_MINUTE;\r\n }\r\n\r\n function isValidDate(uint year, uint month, uint day) internal pure returns (bool valid) {\r\n if (year >= 1970 && month > 0 && month <= 12) {\r\n uint daysInMonth = _getDaysInMonth(year, month);\r\n if (day > 0 && day <= daysInMonth) {\r\n valid = true;\r\n }\r\n }\r\n }\r\n function isValidDateTime(uint year, uint month, uint day, uint hour, uint minute, uint second) internal pure returns (bool valid) {\r\n if (isValidDate(year, month, day)) {\r\n if (hour < 24 && minute < 60 && second < 60) {\r\n valid = true;\r\n }\r\n }\r\n }\r\n function isLeapYear(uint timestamp) internal pure returns (bool leapYear) {\r\n uint year;\r\n uint month;\r\n uint day;\r\n (year, month, day) = _daysToDate(timestamp / SECONDS_PER_DAY);\r\n leapYear = _isLeapYear(year);\r\n }\r\n function _isLeapYear(uint year) internal pure returns (bool leapYear) {\r\n leapYear = ((year % 4 == 0) && (year % 100 != 0)) || (year % 400 == 0);\r\n }\r\n function isWeekDay(uint timestamp) internal pure returns (bool weekDay) {\r\n weekDay = getDayOfWeek(timestamp) <= DOW_FRI;\r\n }\r\n function isWeekEnd(uint timestamp) internal pure returns (bool weekEnd) {\r\n weekEnd = getDayOfWeek(timestamp) >= DOW_SAT;\r\n }\r\n function getDaysInMonth(uint timestamp) internal pure returns (uint daysInMonth) {\r\n uint year;\r\n uint month;\r\n uint day;\r\n (year, month, day) = _daysToDate(timestamp / SECONDS_PER_DAY);\r\n daysInMonth = _getDaysInMonth(year, month);\r\n }\r\n function _getDaysInMonth(uint year, uint month) internal pure returns (uint daysInMonth) {\r\n if (month == 1 || month == 3 || month == 5 || month == 7 || month == 8 || month == 10 || month == 12) {\r\n daysInMonth = 31;\r\n } else if (month != 2) {\r\n daysInMonth = 30;\r\n } else {\r\n daysInMonth = _isLeapYear(year) ? 29 : 28;\r\n }\r\n }\r\n // 1 = Monday, 7 = Sunday\r\n function getDayOfWeek(uint timestamp) internal pure returns (uint dayOfWeek) {\r\n uint _days = timestamp / SECONDS_PER_DAY;\r\n dayOfWeek = (_days + 3) % 7 + 1;\r\n }\r\n\r\n function getYear(uint timestamp) internal pure returns (uint year) {\r\n uint month;\r\n uint day;\r\n (year, month, day) = _daysToDate(timestamp / SECONDS_PER_DAY);\r\n }\r\n function getMonth(uint timestamp) internal pure returns (uint month) {\r\n uint year;\r\n uint day;\r\n (year, month, day) = _daysToDate(timestamp / SECONDS_PER_DAY);\r\n }\r\n function getDay(uint timestamp) internal pure returns (uint day) {\r\n uint year;\r\n uint month;\r\n (year, month, day) = _daysToDate(timestamp / SECONDS_PER_DAY);\r\n }\r\n function getHour(uint timestamp) internal pure returns (uint hour) {\r\n uint secs = timestamp % SECONDS_PER_DAY;\r\n hour = secs / SECONDS_PER_HOUR;\r\n }\r\n function getMinute(uint timestamp) internal pure returns (uint minute) {\r\n uint secs = timestamp % SECONDS_PER_HOUR;\r\n minute = secs / SECONDS_PER_MINUTE;\r\n }\r\n function getSecond(uint timestamp) internal pure returns (uint second) {\r\n second = timestamp % SECONDS_PER_MINUTE;\r\n }\r\n\r\n function addYears(uint timestamp, uint _years) internal pure returns (uint newTimestamp) {\r\n uint year;\r\n uint month;\r\n uint day;\r\n (year, month, day) = _daysToDate(timestamp / SECONDS_PER_DAY);\r\n year += _years;\r\n uint daysInMonth = _getDaysInMonth(year, month);\r\n if (day > daysInMonth) {\r\n day = daysInMonth;\r\n }\r\n newTimestamp = _daysFromDate(year, month, day) * SECONDS_PER_DAY + timestamp % SECONDS_PER_DAY;\r\n require(newTimestamp >= timestamp);\r\n }\r\n function addMonths(uint timestamp, uint _months) internal pure returns (uint newTimestamp) {\r\n uint year;\r\n uint month;\r\n uint day;\r\n (year, month, day) = _daysToDate(timestamp / SECONDS_PER_DAY);\r\n month += _months;\r\n year += (month - 1) / 12;\r\n month = (month - 1) % 12 + 1;\r\n uint daysInMonth = _getDaysInMonth(year, month);\r\n if (day > daysInMonth) {\r\n day = daysInMonth;\r\n }\r\n newTimestamp = _daysFromDate(year, month, day) * SECONDS_PER_DAY + timestamp % SECONDS_PER_DAY;\r\n require(newTimestamp >= timestamp);\r\n }\r\n function addDays(uint timestamp, uint _days) internal pure returns (uint newTimestamp) {\r\n newTimestamp = timestamp + _days * SECONDS_PER_DAY;\r\n require(newTimestamp >= timestamp);\r\n }\r\n function addHours(uint timestamp, uint _hours) internal pure returns (uint newTimestamp) {\r\n newTimestamp = timestamp + _hours * SECONDS_PER_HOUR;\r\n require(newTimestamp >= timestamp);\r\n }\r\n function addMinutes(uint timestamp, uint _minutes) internal pure returns (uint newTimestamp) {\r\n newTimestamp = timestamp + _minutes * SECONDS_PER_MINUTE;\r\n require(newTimestamp >= timestamp);\r\n }\r\n function addSeconds(uint timestamp, uint _seconds) internal pure returns (uint newTimestamp) {\r\n newTimestamp = timestamp + _seconds;\r\n require(newTimestamp >= timestamp);\r\n }\r\n\r\n function subYears(uint timestamp, uint _years) internal pure returns (uint newTimestamp) {\r\n uint year;\r\n uint month;\r\n uint day;\r\n (year, month, day) = _daysToDate(timestamp / SECONDS_PER_DAY);\r\n year -= _years;\r\n uint daysInMonth = _getDaysInMonth(year, month);\r\n if (day > daysInMonth) {\r\n day = daysInMonth;\r\n }\r\n newTimestamp = _daysFromDate(year, month, day) * SECONDS_PER_DAY + timestamp % SECONDS_PER_DAY;\r\n require(newTimestamp <= timestamp);\r\n }\r\n function subMonths(uint timestamp, uint _months) internal pure returns (uint newTimestamp) {\r\n uint year;\r\n uint month;\r\n uint day;\r\n (year, month, day) = _daysToDate(timestamp / SECONDS_PER_DAY);\r\n uint yearMonth = year * 12 + (month - 1) - _months;\r\n year = yearMonth / 12;\r\n month = yearMonth % 12 + 1;\r\n uint daysInMonth = _getDaysInMonth(year, month);\r\n if (day > daysInMonth) {\r\n day = daysInMonth;\r\n }\r\n newTimestamp = _daysFromDate(year, month, day) * SECONDS_PER_DAY + timestamp % SECONDS_PER_DAY;\r\n require(newTimestamp <= timestamp);\r\n }\r\n function subDays(uint timestamp, uint _days) internal pure returns (uint newTimestamp) {\r\n newTimestamp = timestamp - _days * SECONDS_PER_DAY;\r\n require(newTimestamp <= timestamp);\r\n }\r\n function subHours(uint timestamp, uint _hours) internal pure returns (uint newTimestamp) {\r\n newTimestamp = timestamp - _hours * SECONDS_PER_HOUR;\r\n require(newTimestamp <= timestamp);\r\n }\r\n function subMinutes(uint timestamp, uint _minutes) internal pure returns (uint newTimestamp) {\r\n newTimestamp = timestamp - _minutes * SECONDS_PER_MINUTE;\r\n require(newTimestamp <= timestamp);\r\n }\r\n function subSeconds(uint timestamp, uint _seconds) internal pure returns (uint newTimestamp) {\r\n newTimestamp = timestamp - _seconds;\r\n require(newTimestamp <= timestamp);\r\n }\r\n\r\n function diffYears(uint fromTimestamp, uint toTimestamp) internal pure returns (uint _years) {\r\n require(fromTimestamp <= toTimestamp);\r\n uint fromYear;\r\n uint fromMonth;\r\n uint fromDay;\r\n uint toYear;\r\n uint toMonth;\r\n uint toDay;\r\n (fromYear, fromMonth, fromDay) = _daysToDate(fromTimestamp / SECONDS_PER_DAY);\r\n (toYear, toMonth, toDay) = _daysToDate(toTimestamp / SECONDS_PER_DAY);\r\n _years = toYear - fromYear;\r\n }\r\n function diffMonths(uint fromTimestamp, uint toTimestamp) internal pure returns (uint _months) {\r\n require(fromTimestamp <= toTimestamp);\r\n uint fromYear;\r\n uint fromMonth;\r\n uint fromDay;\r\n uint toYear;\r\n uint toMonth;\r\n uint toDay;\r\n (fromYear, fromMonth, fromDay) = _daysToDate(fromTimestamp / SECONDS_PER_DAY);\r\n (toYear, toMonth, toDay) = _daysToDate(toTimestamp / SECONDS_PER_DAY);\r\n _months = toYear * 12 + toMonth - fromYear * 12 - fromMonth;\r\n }\r\n function diffDays(uint fromTimestamp, uint toTimestamp) internal pure returns (uint _days) {\r\n require(fromTimestamp <= toTimestamp);\r\n _days = (toTimestamp - fromTimestamp) / SECONDS_PER_DAY;\r\n }\r\n function diffHours(uint fromTimestamp, uint toTimestamp) internal pure returns (uint _hours) {\r\n require(fromTimestamp <= toTimestamp);\r\n _hours = (toTimestamp - fromTimestamp) / SECONDS_PER_HOUR;\r\n }\r\n function diffMinutes(uint fromTimestamp, uint toTimestamp) internal pure returns (uint _minutes) {\r\n require(fromTimestamp <= toTimestamp);\r\n _minutes = (toTimestamp - fromTimestamp) / SECONDS_PER_MINUTE;\r\n }\r\n function diffSeconds(uint fromTimestamp, uint toTimestamp) internal pure returns (uint _seconds) {\r\n require(fromTimestamp <= toTimestamp);\r\n _seconds = toTimestamp - fromTimestamp;\r\n }\r\n}\r\n\r\n\r\ncontract KiiADefi{\r\n\r\n string public name = \"KiiA Token Farm\";\r\n address public onlyOwner;\r\n KiiAToken public kiiaToken;\r\n using SafeMath for uint256;\r\n\r\n using BokkyPooBahsDateTimeLibrary for uint;\r\n \r\n function _diffDays(uint fromTimestamp, uint toTimestamp) public pure returns (uint _days) {\r\n _days = BokkyPooBahsDateTimeLibrary.diffDays(fromTimestamp, toTimestamp);\r\n }\r\n\r\n function _getTotalDays(uint _months) public view returns(uint){\r\n uint fromday = now;\r\n uint today = fromday.addMonths(_months);\r\n uint pendindays = _diffDays(fromday,today);\r\n return (pendindays);\r\n }\r\n\r\n //Deposit structure to hold all the variables\r\n struct Deposits {\r\n uint deposit_id;\r\n address investorAddress;\r\n uint planid;\r\n uint plantype;\r\n uint month;\r\n uint interest;\r\n uint256 invested;\r\n uint256 totalBonusToReceive;\r\n uint256 principalPmt;\r\n uint256 dailyEarnings;\r\n uint nthDay;\r\n uint daysToClose;\r\n bool isUnlocked;\r\n bool withdrawn;\r\n }\r\n \r\n //PlanDetails structure\r\n struct PlanDetails {\r\n uint planid;\r\n uint month;\r\n uint interest;\r\n uint plantype;\r\n bool isActive;\r\n }\r\n \r\n //Events to capture deposit event\r\n event addDepositEvent(\r\n uint depositId,\r\n address investorAddress\r\n );\r\n \r\n //Events to capture add plan\r\n event addPlanEvent(\r\n uint index,\r\n uint planid\r\n );\r\n \r\n //Events to capture update/edit plan\r\n event updateorEditPlanEvent(\r\n uint planid\r\n );\r\n \r\n event dummyEvent(\r\n address text1, \r\n bytes32 text2\r\n );\r\n \r\n event dummyEventint(\r\n uint text1, \r\n bool text2,\r\n uint text3\r\n );\r\n \r\n //Events to capture whitelist event\r\n event whiteListEvent(\r\n address owner,\r\n address investor\r\n );\r\n \r\n //Event to capture calculate bonus\r\n event calculateBonusEvent(\r\n uint depositid,\r\n address investorAddress\r\n );\r\n \r\n //Events to capture unlock event\r\n event addUnlockEvent(\r\n uint indexed _id,\r\n address _investorAddress,\r\n uint _planid\r\n ); \r\n \r\n //Events to capture lock event\r\n event addlockEvent(\r\n uint indexed _id,\r\n address _investorAddress,\r\n uint _planid\r\n ); \r\n \r\n //Events to capture Withdraw event \r\n event addWithdrawEvent(\r\n uint indexed _id,\r\n address _investorAddress,\r\n uint _planid\r\n ); \r\n \r\n uint public depositCounter;\r\n uint public planCounter;\r\n \r\n Deposits[] public allDeposits;\r\n PlanDetails[] public allPlanDetails;\r\n \r\n //to view deposit information\r\n mapping(address=>Deposits[]) public depositDetails;\r\n mapping(address=>mapping(uint=>Deposits[])) public viewDeposit;\r\n\r\n mapping(address => bool) public whitelistAddresses;\r\n address[] public whiteListed;\r\n address[] public stakers;\r\n mapping(address => bool) public hasStaked;\r\n \r\n //address -> plan -> staking or not\r\n mapping(address => mapping(uint => bool)) public isStaking;\r\n \r\n //plan active state\r\n mapping(uint =>bool) public isPlanActive;\r\n\r\n constructor(KiiAToken _kiiaToken, address _owneraddr) public payable {\r\n kiiaToken = _kiiaToken;\r\n onlyOwner = _owneraddr;\r\n }\r\n \r\n function addEth() public payable {\r\n //function to accept ether \r\n }\r\n \r\n //Function to whitelist address\r\n function whiteListIt(address _beneficiary) public returns(uint) {\r\n // Only owner can call this function\r\n require(msg.sender == onlyOwner, \"caller must be the owner\");\r\n require(whitelistAddresses[_beneficiary]==false, \"Already whitelisted\");\r\n whitelistAddresses[_beneficiary] = true;\r\n whiteListed.push(_beneficiary);\r\n emit whiteListEvent(msg.sender,_beneficiary);\r\n return 0;\r\n }\r\n \r\n //Function to whitelist address in bulk fashion\r\n function bulkwhiteListIt(address[] memory _beneficiary) public returns(uint) {\r\n // Only owner can call this function\r\n require(msg.sender == onlyOwner, \"caller must be the owner\");\r\n uint tot = _beneficiary.length;\r\n if(tot<=255){\r\n for(uint i=0;i<tot; i++){\r\n if(!whitelistAddresses[_beneficiary[i]]){\r\n whitelistAddresses[_beneficiary[i]] = true;\r\n whiteListed.push(_beneficiary[i]);\r\n emit whiteListEvent(msg.sender,_beneficiary[i]);\r\n }\r\n }\r\n return 0; \r\n }\r\n }\r\n \r\n //Function to bulk remove from bulkremoveFromwhiteListIt\r\n function bulkremoveFromwhiteListIt(address[] memory _beneficiary) public returns(uint) {\r\n // Only owner can call this function\r\n require(msg.sender == onlyOwner, \"caller must be the owner\");\r\n uint tot = _beneficiary.length;\r\n if(tot<=255){\r\n for(uint i=0;i<tot; i++){\r\n if(!whitelistAddresses[_beneficiary[i]]){\r\n whitelistAddresses[_beneficiary[i]] = false;\r\n whiteListed.push(_beneficiary[i]);\r\n emit whiteListEvent(msg.sender,_beneficiary[i]);\r\n }\r\n }\r\n return 0; \r\n }\r\n }\r\n \r\n //remove from whiteList\r\n function removefromWhiteList(address _beneficiary) public returns(uint) {\r\n // Only owner can call this function\r\n require(msg.sender == onlyOwner, \"caller must be the owner\");\r\n require(whitelistAddresses[_beneficiary]==true, \"Already in graylist\");\r\n whitelistAddresses[_beneficiary] = false;\r\n emit whiteListEvent(msg.sender,_beneficiary);\r\n return 0;\r\n }\r\n \r\n //Getter Function for getplan by id\r\n function getPlanById(uint _planid) public view returns(uint plan_id,uint month,uint interest,uint plantype,bool isActive){\r\n uint tot = allPlanDetails.length;\r\n for(uint i=0;i<tot;i++){\r\n if(allPlanDetails[i].planid==_planid){\r\n return(allPlanDetails[i].planid,allPlanDetails[i].month,allPlanDetails[i].interest,allPlanDetails[i].plantype,allPlanDetails[i].isActive);\r\n }\r\n }\r\n }\r\n \r\n //Getter Function for getplan by id\r\n function getPlanDetails(uint _planid) internal view returns(uint month,uint interest,uint plantype){\r\n uint tot = allPlanDetails.length;\r\n for(uint i=0;i<tot;i++){\r\n if(allPlanDetails[i].planid==_planid){\r\n return(allPlanDetails[i].month,allPlanDetails[i].interest,allPlanDetails[i].plantype);\r\n }\r\n }\r\n\r\n }\r\n \r\n //this function is to avoid stack too deep error\r\n function _deposits(uint _month, uint _amount, uint256 _interest) internal view returns (uint _nthdayv2,uint _pendingDaysv2,uint256 _totalBonusToReceivev2,uint256 _dailyEarningsv2,uint _principalPmtDailyv2) {\r\n uint256 _pendingDaysv1 = _getTotalDays(_month);\r\n uint256 _interesttoDivide = _interest.mul(1000000).div(100) ;\r\n uint256 _totalBonusToReceivev1 = _amount.mul(_interesttoDivide).div(1000000);\r\n uint _nthdayv1 = 0;\r\n uint _principalPmtDaily = 0;\r\n uint _dailyEarningsv1 = 0;\r\n return (_nthdayv1,_pendingDaysv1,_totalBonusToReceivev1,_dailyEarningsv1,_principalPmtDaily);\r\n } \r\n \r\n function depositTokens(uint _plan,uint256 _plandate, uint _amount) public{\r\n // check if user is whitelisted\r\n require(whitelistAddresses[msg.sender]==true,\"Only whitelisted user is allowed to deposit tokens\");\r\n require(_amount > 0, \"amount cannot be 0\");\r\n require(isPlanActive[_plan]==true,\"Plan is not active\"); // To check if plan is active \r\n \r\n (uint _month,uint _interest,uint _plantype) = getPlanDetails(_plan);\r\n \r\n require(_interest > 0, \"interest rate cannot be 0\");\r\n require(_month > 0,\"_months cannot be 0\");\r\n \r\n // Trasnfer kiiA tokens to this contract for staking\r\n kiiaToken.transferFrom(msg.sender, address(this), _amount);\r\n \r\n //scope to remove the error Stack too deep\r\n (uint _nthday,uint _daystoclose,uint _totalBonusToReceive,uint _dailyEarnings,uint _principalPmtDaily) = _deposits(_month,_amount,_interest);\r\n \r\n uint _localid = allDeposits.length++;\r\n //deposit token in defi\r\n allDeposits[allDeposits.length-1] = Deposits(_plandate, \r\n msg.sender,\r\n _plan,\r\n _plantype,\r\n _month,\r\n _interest,\r\n _amount,\r\n _totalBonusToReceive,\r\n _principalPmtDaily,\r\n _dailyEarnings,\r\n _nthday,\r\n _daystoclose,\r\n false,\r\n false\r\n );\r\n \r\n //Add Deposit details\r\n depositDetails[msg.sender].push(allDeposits[allDeposits.length-1]);\r\n \r\n //is Staking in this plan \r\n isStaking[msg.sender][_plandate] = true;\r\n\r\n // Add user to stakers array *only* if they haven't staked already\r\n if(!hasStaked[msg.sender]) {\r\n stakers.push(msg.sender);\r\n } \r\n hasStaked[msg.sender] = true;\r\n \r\n emit addDepositEvent(_localid, msg.sender);\r\n \r\n }\r\n \r\n //Setter function for plan\r\n function registerPlan(uint _planid, uint _month,uint _interest,uint _plantype) public returns(uint){\r\n require(msg.sender == onlyOwner, \"caller must be the owner\");\r\n require(_planid > 0, \"Plan Id cannot be 0\");\r\n require(_month > 0, \"Month cannot be 0\");\r\n require(_interest > 0, \"Interest cannot be 0\");\r\n require(_plantype >= 0, \"Plantype can be either 0 or 1\");\r\n require(_plantype <= 1, \"Plantype can be either 0 or 1\");\r\n require(isPlanActive[_planid]==false,\"Plan already exists in active status\"); \r\n\r\n planCounter = planCounter + 1;\r\n uint _localid = allPlanDetails.length++;\r\n allPlanDetails[allPlanDetails.length-1] = PlanDetails(_planid,\r\n _month,\r\n _interest,\r\n _plantype,\r\n true\r\n ); \r\n isPlanActive[_planid] = true;\r\n emit addPlanEvent(_localid,_planid);\r\n return 0;\r\n }\r\n \r\n //Setter function for plan\r\n function updatePlan(uint _planid, uint _month,uint _interest,uint _plantype) public returns(uint){\r\n require(msg.sender == onlyOwner, \"caller must be the owner\");\r\n require(_planid > 0, \"Plan Id cannot be 0\");\r\n require(_month > 0, \"Month cannot be 0\");\r\n require(_interest > 0, \"Interest cannot be 0\");\r\n\r\n uint tot = allPlanDetails.length;\r\n for(uint i=0;i<tot;i++){\r\n if(allPlanDetails[i].planid==_planid){\r\n allPlanDetails[i].month = _month;\r\n allPlanDetails[i].interest = _interest;\r\n allPlanDetails[i].plantype = _plantype;\r\n }\r\n }\r\n emit updateorEditPlanEvent(_planid);\r\n return 0;\r\n }\r\n \r\n //Deactivate plan\r\n function deactivatePlan(uint _planid) public returns(uint){\r\n require(msg.sender == onlyOwner, \"caller must be the owner\");\r\n require(isPlanActive[_planid]==true, \"Plan already deactivated\");\r\n isPlanActive[_planid]= false;\r\n emit updateorEditPlanEvent(_planid);\r\n return 0;\r\n }\r\n \r\n //Reactivate plan\r\n function reactivatePlan(uint _planid) public returns(uint){\r\n require(msg.sender == onlyOwner, \"caller must be the owner\");\r\n require(isPlanActive[_planid]==false, \"Plan already activated\");\r\n isPlanActive[_planid]= true;\r\n emit updateorEditPlanEvent(_planid);\r\n return 0;\r\n }\r\n \r\n //To calculate bonus - this function should be called once per day by owner\r\n function calcBonus() public returns(uint){\r\n require(msg.sender == onlyOwner, \"caller must be the owner\");\r\n uint totDep = allDeposits.length;\r\n for(uint i=0; i<totDep;i++){\r\n uint _plantype = allDeposits[i].plantype;\r\n uint _nthDay = allDeposits[i].nthDay;\r\n uint _invested = allDeposits[i].invested;\r\n uint _daysToClose= allDeposits[i].daysToClose;\r\n uint _principalPmt = _invested.div(_daysToClose);\r\n\r\n //check if already withdrawn, if yes, then dont calculate\r\n bool _withdrawn = allDeposits[i].withdrawn;\r\n emit dummyEventint(_plantype,_withdrawn,0);\r\n if(_plantype==0){\r\n if(_nthDay<_daysToClose){\r\n allDeposits[i].nthDay = _nthDay.add(1);\r\n allDeposits[i].principalPmt = allDeposits[i].principalPmt + _principalPmt;\r\n //emit event\r\n emit calculateBonusEvent(allDeposits[i].deposit_id,allDeposits[i].investorAddress);\r\n } \r\n }\r\n if(_plantype==1){\r\n if(_nthDay<_daysToClose){\r\n allDeposits[i].nthDay = _nthDay.add(1);\r\n allDeposits[i].principalPmt = allDeposits[i].principalPmt + _principalPmt;\r\n //emit event\r\n emit calculateBonusEvent(allDeposits[i].deposit_id,allDeposits[i].investorAddress);\r\n }\r\n }\r\n }\r\n\r\n }\r\n \r\n //Get deposit by address\r\n uint[] depNewArray;\r\n function getDepositidByAddress(address _beneficiary) public returns(uint[] memory){\r\n uint tot = allDeposits.length;\r\n uint[] memory tmparray;\r\n depNewArray = tmparray;\r\n for(uint i =0; i< tot; i++){\r\n if(allDeposits[i].investorAddress==_beneficiary){\r\n depNewArray.push(allDeposits[i].deposit_id);\r\n }\r\n }\r\n return depNewArray;\r\n }\r\n \r\n \r\n function getDepositByAddress(address _beneficiary,uint _deposit_id) public view returns(uint256,uint,uint,uint,uint,uint256,uint256,uint,uint,uint,bool){\r\n uint tot = allDeposits.length;\r\n for(uint i=0;i<tot;i++){\r\n if(_beneficiary==allDeposits[i].investorAddress){\r\n if(allDeposits[i].deposit_id==_deposit_id){\r\n return(allDeposits[i].invested,\r\n allDeposits[i].planid,\r\n allDeposits[i].plantype,\r\n allDeposits[i].month,\r\n allDeposits[i].interest,\r\n allDeposits[i].totalBonusToReceive,\r\n allDeposits[i].dailyEarnings,\r\n allDeposits[i].principalPmt,\r\n allDeposits[i].daysToClose,\r\n allDeposits[i].nthDay,\r\n allDeposits[i].isUnlocked\r\n );\r\n }\r\n }\r\n }\r\n }\r\n \r\n // Unlock address\r\n function setLock(address _beneficiary,uint _deposit_id) public returns(uint) {\r\n // Only owner can call this function\r\n require(msg.sender == onlyOwner, \"caller must be the owner\");\r\n // set lock\r\n uint totDep = allDeposits.length;\r\n for(uint i=0;i<totDep; i++){\r\n if(allDeposits[i].investorAddress==_beneficiary){\r\n if (allDeposits[i].deposit_id==_deposit_id){\r\n allDeposits[i].isUnlocked = false;\r\n emit addlockEvent(allDeposits[i].deposit_id,allDeposits[i].investorAddress,allDeposits[i].planid);\r\n }\r\n }\r\n }\r\n return 0;\r\n }\r\n \r\n // Unlock address\r\n function unlock(address _beneficiary,uint _deposit_id) public returns(uint) {\r\n // Only owner can call this function\r\n require(msg.sender == onlyOwner, \"caller must be the owner\");\r\n // Unlock\r\n uint totDep = allDeposits.length;\r\n for(uint i=0;i<totDep; i++){\r\n if(allDeposits[i].investorAddress==_beneficiary){\r\n if (allDeposits[i].deposit_id==_deposit_id){\r\n allDeposits[i].isUnlocked = true;\r\n emit addUnlockEvent(allDeposits[i].deposit_id,allDeposits[i].investorAddress,allDeposits[i].planid);\r\n }\r\n }\r\n }\r\n return 0;\r\n }\r\n\r\n // Bulk Unlock address\r\n function bulkunlock(address[] memory _beneficiary, uint256[] memory _deposit_id) public returns(uint) {\r\n // Only owner can call this function\r\n require(msg.sender == onlyOwner, \"caller must be the owner\");\r\n require(_beneficiary.length == _deposit_id.length,\"Array length must be equal\");\r\n // Unlock\r\n uint totDep = allDeposits.length;\r\n for (uint j = 0; j < _beneficiary.length; j++) {\r\n for(uint i=0;i<totDep; i++){\r\n if(allDeposits[i].investorAddress==_beneficiary[j]){\r\n if (allDeposits[i].deposit_id==_deposit_id[j]){\r\n allDeposits[i].isUnlocked = true;\r\n }\r\n }\r\n }\r\n }\r\n return 0;\r\n }\r\n\r\n // Bring staker list Getter function\r\n function stakerlist() public view returns(address[] memory){\r\n return stakers;\r\n }\r\n \r\n // Bring whitelisted addresss list \r\n address[] whiteArray;\r\n function whiteListedAddress() public returns(address[] memory){\r\n uint tot = whiteListed.length;\r\n address[] memory tmparray;\r\n whiteArray = tmparray;\r\n for(uint i=0;i<tot; i++){\r\n whiteArray.push(whiteListed[i]);\r\n emit dummyEvent(whiteListed[i],\"testing\");\r\n }\r\n return whiteArray;\r\n }\r\n \r\n // Bring bloacklisted addresss list \r\n address[] blackArray;\r\n function blackListedAddress() public returns(address[] memory){\r\n uint tot = whiteListed.length;\r\n address[] memory tmparray;\r\n blackArray = tmparray;\r\n for(uint i=0;i<tot; i++){\r\n if(whitelistAddresses[whiteListed[i]]==false){\r\n blackArray.push(whiteListed[i]);\r\n }\r\n }\r\n return blackArray;\r\n }\r\n \r\n // Unstaking Tokens (Withdraw)\r\n function withDrawTokens(uint _deposit_id, uint _plantype) public returns(uint) {\r\n uint totDep = allDeposits.length;\r\n for(uint i=0;i<totDep; i++){\r\n if(allDeposits[i].investorAddress==msg.sender){\r\n if (allDeposits[i].deposit_id==_deposit_id){\r\n require(allDeposits[i].invested > 0, \"Staking balance cannot be 0\");\r\n require(allDeposits[i].withdrawn==false, \"Plan is already withdrawn by user\");\r\n require(allDeposits[i].isUnlocked==true, \"User account must be unlocked by owner to withdraw\");\r\n require(isStaking[msg.sender][_deposit_id]==true,\"User is not staking any amount in this plan\");\r\n uint balance = allDeposits[i].invested;\r\n \r\n //Regular Plan withdrawal\r\n if(_plantype==0){\r\n uint _principalPmt = allDeposits[i].principalPmt;\r\n uint _toTransfer1 = balance.sub(_principalPmt);\r\n // Transfer back KiiA tokens to this address\r\n kiiaToken.transfer(msg.sender, _toTransfer1);\r\n allDeposits[i].principalPmt = _principalPmt.add(_toTransfer1);\r\n allDeposits[i].totalBonusToReceive = 0;\r\n allDeposits[i].withdrawn = true;\r\n isStaking[msg.sender][_deposit_id]=false;\r\n emit addWithdrawEvent(allDeposits[i].deposit_id,allDeposits[i].investorAddress,allDeposits[i].planid);\r\n return 0;\r\n }\r\n \r\n //Fixed Plan withdrawal\r\n if(_plantype==1){\r\n uint nthDay = allDeposits[i].nthDay;\r\n uint dailyEarnings = allDeposits[i].dailyEarnings;\r\n uint256 _interestAccumulated = nthDay.mul(dailyEarnings);\r\n uint256 _toTransfer2 = balance.add(_interestAccumulated);\r\n // Transfer back KiiA tokens to this address\r\n kiiaToken.transfer(msg.sender, _toTransfer2);\r\n allDeposits[i].totalBonusToReceive = 0;\r\n allDeposits[i].withdrawn = true;\r\n isStaking[msg.sender][_deposit_id]=false;\r\n emit addWithdrawEvent(allDeposits[i].deposit_id,allDeposits[i].investorAddress,allDeposits[i].planid);\r\n return 0;\r\n }\r\n }\r\n }\r\n }\r\n }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"_beneficiary\",\"type\":\"address\"}],\"name\":\"removefromWhiteList\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_planid\",\"type\":\"uint256\"}],\"name\":\"getPlanById\",\"outputs\":[{\"name\":\"plan_id\",\"type\":\"uint256\"},{\"name\":\"month\",\"type\":\"uint256\"},{\"name\":\"interest\",\"type\":\"uint256\"},{\"name\":\"plantype\",\"type\":\"uint256\"},{\"name\":\"isActive\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_beneficiary\",\"type\":\"address\"},{\"name\":\"_deposit_id\",\"type\":\"uint256\"}],\"name\":\"getDepositByAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"onlyOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"kiiaToken\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"isStaking\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"stakerlist\",\"outputs\":[{\"name\":\"\",\"type\":\"address[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"blackListedAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address[]\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_deposit_id\",\"type\":\"uint256\"},{\"name\":\"_plantype\",\"type\":\"uint256\"}],\"name\":\"withDrawTokens\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"whiteListedAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address[]\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_beneficiary\",\"type\":\"address[]\"},{\"name\":\"_deposit_id\",\"type\":\"uint256[]\"}],\"name\":\"bulkunlock\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_planid\",\"type\":\"uint256\"}],\"name\":\"deactivatePlan\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_beneficiary\",\"type\":\"address[]\"}],\"name\":\"bulkremoveFromwhiteListIt\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"fromTimestamp\",\"type\":\"uint256\"},{\"name\":\"toTimestamp\",\"type\":\"uint256\"}],\"name\":\"_diffDays\",\"outputs\":[{\"name\":\"_days\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"whitelistAddresses\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_planid\",\"type\":\"uint256\"},{\"name\":\"_month\",\"type\":\"uint256\"},{\"name\":\"_interest\",\"type\":\"uint256\"},{\"name\":\"_plantype\",\"type\":\"uint256\"}],\"name\":\"updatePlan\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_plan\",\"type\":\"uint256\"},{\"name\":\"_plandate\",\"type\":\"uint256\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"depositTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_beneficiary\",\"type\":\"address\"}],\"name\":\"getDepositidByAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_beneficiary\",\"type\":\"address\"},{\"name\":\"_deposit_id\",\"type\":\"uint256\"}],\"name\":\"unlock\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_planid\",\"type\":\"uint256\"},{\"name\":\"_month\",\"type\":\"uint256\"},{\"name\":\"_interest\",\"type\":\"uint256\"},{\"name\":\"_plantype\",\"type\":\"uint256\"}],\"name\":\"registerPlan\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"viewDeposit\",\"outputs\":[{\"name\":\"deposit_id\",\"type\":\"uint256\"},{\"name\":\"investorAddress\",\"type\":\"address\"},{\"name\":\"planid\",\"type\":\"uint256\"},{\"name\":\"plantype\",\"type\":\"uint256\"},{\"name\":\"month\",\"type\":\"uint256\"},{\"name\":\"interest\",\"type\":\"uint256\"},{\"name\":\"invested\",\"type\":\"uint256\"},{\"name\":\"totalBonusToReceive\",\"type\":\"uint256\"},{\"name\":\"principalPmt\",\"type\":\"uint256\"},{\"name\":\"dailyEarnings\",\"type\":\"uint256\"},{\"name\":\"nthDay\",\"type\":\"uint256\"},{\"name\":\"daysToClose\",\"type\":\"uint256\"},{\"name\":\"isUnlocked\",\"type\":\"bool\"},{\"name\":\"withdrawn\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_beneficiary\",\"type\":\"address\"}],\"name\":\"whiteListIt\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"depositDetails\",\"outputs\":[{\"name\":\"deposit_id\",\"type\":\"uint256\"},{\"name\":\"investorAddress\",\"type\":\"address\"},{\"name\":\"planid\",\"type\":\"uint256\"},{\"name\":\"plantype\",\"type\":\"uint256\"},{\"name\":\"month\",\"type\":\"uint256\"},{\"name\":\"interest\",\"type\":\"uint256\"},{\"name\":\"invested\",\"type\":\"uint256\"},{\"name\":\"totalBonusToReceive\",\"type\":\"uint256\"},{\"name\":\"principalPmt\",\"type\":\"uint256\"},{\"name\":\"dailyEarnings\",\"type\":\"uint256\"},{\"name\":\"nthDay\",\"type\":\"uint256\"},{\"name\":\"daysToClose\",\"type\":\"uint256\"},{\"name\":\"isUnlocked\",\"type\":\"bool\"},{\"name\":\"withdrawn\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_months\",\"type\":\"uint256\"}],\"name\":\"_getTotalDays\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_planid\",\"type\":\"uint256\"}],\"name\":\"reactivatePlan\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"planCounter\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"isPlanActive\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_beneficiary\",\"type\":\"address\"},{\"name\":\"_deposit_id\",\"type\":\"uint256\"}],\"name\":\"setLock\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"calcBonus\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"addEth\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"hasStaked\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"allPlanDetails\",\"outputs\":[{\"name\":\"planid\",\"type\":\"uint256\"},{\"name\":\"month\",\"type\":\"uint256\"},{\"name\":\"interest\",\"type\":\"uint256\"},{\"name\":\"plantype\",\"type\":\"uint256\"},{\"name\":\"isActive\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_beneficiary\",\"type\":\"address[]\"}],\"name\":\"bulkwhiteListIt\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"whiteListed\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"allDeposits\",\"outputs\":[{\"name\":\"deposit_id\",\"type\":\"uint256\"},{\"name\":\"investorAddress\",\"type\":\"address\"},{\"name\":\"planid\",\"type\":\"uint256\"},{\"name\":\"plantype\",\"type\":\"uint256\"},{\"name\":\"month\",\"type\":\"uint256\"},{\"name\":\"interest\",\"type\":\"uint256\"},{\"name\":\"invested\",\"type\":\"uint256\"},{\"name\":\"totalBonusToReceive\",\"type\":\"uint256\"},{\"name\":\"principalPmt\",\"type\":\"uint256\"},{\"name\":\"dailyEarnings\",\"type\":\"uint256\"},{\"name\":\"nthDay\",\"type\":\"uint256\"},{\"name\":\"daysToClose\",\"type\":\"uint256\"},{\"name\":\"isUnlocked\",\"type\":\"bool\"},{\"name\":\"withdrawn\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"depositCounter\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"stakers\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_kiiaToken\",\"type\":\"address\"},{\"name\":\"_owneraddr\",\"type\":\"address\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"depositId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"investorAddress\",\"type\":\"address\"}],\"name\":\"addDepositEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"index\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"planid\",\"type\":\"uint256\"}],\"name\":\"addPlanEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"planid\",\"type\":\"uint256\"}],\"name\":\"updateorEditPlanEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"text1\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"text2\",\"type\":\"bytes32\"}],\"name\":\"dummyEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"text1\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"text2\",\"type\":\"bool\"},{\"indexed\":false,\"name\":\"text3\",\"type\":\"uint256\"}],\"name\":\"dummyEventint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"investor\",\"type\":\"address\"}],\"name\":\"whiteListEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"depositid\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"investorAddress\",\"type\":\"address\"}],\"name\":\"calculateBonusEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_id\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_investorAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_planid\",\"type\":\"uint256\"}],\"name\":\"addUnlockEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_id\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_investorAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_planid\",\"type\":\"uint256\"}],\"name\":\"addlockEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_id\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_investorAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_planid\",\"type\":\"uint256\"}],\"name\":\"addWithdrawEvent\",\"type\":\"event\"}]","ContractName":"KiiADefi","CompilerVersion":"v0.5.5+commit.47a71e8f","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"00000000000000000000000061ea1ce7d30171bda7a09be15c8ea93964ec7d850000000000000000000000005f3a80d38ab3baa88ca401cce73b4703685162fa","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"bzzr://8f7f2ab7e06ff2f6c4e46d159bfa6ddbb65577558c992df18e0d91bbe5af4e11"}]}