{"status":"1","message":"OK","result":[{"SourceCode":"/**\r\n *   ::::::::::::::::::::::::::::::::::::::::::::\r\n * ::::::::::::::::::::::::::::::::::::::::::::::::\r\n * ::::::::::::::::::::::::::::::::::::::::::::::::\r\n * ::::::::::::NNNNNNNNN:::::::NNNNNNNN::::::::::::\r\n * ::::::::::::NNNNNNNNNN::::::NNNNNNNN::::::::::::\r\n * ::::::::::::NNNNNNNNNNN:::::NNNNNNNN::::::::::::\r\n * ::::::::::::NNNNNNNNNNNN::::NNNNNNNN::::::::::::\r\n * ::::::::::::NNNNNNNNNNNNN:::NNNNNNNN::::::::::::\r\n * ::::::::::::NNNNNNNNNNNNNN::NNNNNNNN::::::::::::\r\n * ::::::::::::NNNNNNNN:NNNNNN:NNNNNNNN::::::::::::\r\n * ::::::::::::NNNNNNNN::NNNNNNNNNNNNNN::::::::::::\r\n * ::::::::::::NNNNNNNN:::NNNNNNNNNNNNN::::::::::::\r\n * ::::::::::::NNNNNNNN::::NNNNNNNNNNNN::::::::::::\r\n * ::::::::::::NNNNNNNN:::::NNNNNNNNNNN::::::::::::\r\n * ::::::::::::NNNNNNNN::::::NNNNNNNNNN::::::::::::\r\n * ::::::::::::NNNNNNNN:::::::NNNNNNNNN::::::::::::\r\n * ::::::::::::::::::::::::::::::::::::::::::::::::\r\n * ::::::::::::::::::::::::::::::::::::::::::::::::\r\n *   ::::::::::::::::::::::::::::::::::::::::::::\r\n *\r\n * @title IERC165\r\n * @dev https://github.com/ethereum/EIPs/blob/master/EIPS/eip-165.md\r\n */\r\ninterface IERC165 {\r\n\r\n  /**\r\n   * @notice Query if a contract implements an interface\r\n   * @param interfaceId The interface identifier, as specified in ERC-165\r\n   * @dev Interface identification is specified in ERC-165. This function\r\n   * uses less than 30,000 gas.\r\n   */\r\n  function supportsInterface(bytes4 interfaceId)\r\n    external\r\n    view\r\n    returns (bool);\r\n}\r\n\r\n// File: contracts/interface/IERC721.sol\r\n\r\n/**\r\n * @dev Required interface of an ERC721 compliant contract.\r\n */\r\ninterface IERC721 is IERC165 {\r\n    /**\r\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\r\n\r\n    /**\r\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\r\n     */\r\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\r\n\r\n    /**\r\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\r\n     */\r\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\r\n\r\n    /**\r\n     * @dev Returns the number of tokens in ``owner``'s account.\r\n     */\r\n    function balanceOf(address owner) external view returns (uint256 balance);\r\n\r\n    /**\r\n     * @dev Returns the owner of the `tokenId` token.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `tokenId` must exist.\r\n     */\r\n    function ownerOf(uint256 tokenId) external view returns (address owner);\r\n\r\n    /**\r\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\r\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `from` cannot be the zero address.\r\n     * - `to` cannot be the zero address.\r\n     * - `tokenId` token must exist and be owned by `from`.\r\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\r\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\r\n\r\n    /**\r\n     * @dev Transfers `tokenId` token from `from` to `to`.\r\n     *\r\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `from` cannot be the zero address.\r\n     * - `to` cannot be the zero address.\r\n     * - `tokenId` token must be owned by `from`.\r\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address from, address to, uint256 tokenId) external;\r\n\r\n    /**\r\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\r\n     * The approval is cleared when the token is transferred.\r\n     *\r\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The caller must own the token or be an approved operator.\r\n     * - `tokenId` must exist.\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address to, uint256 tokenId) external;\r\n\r\n    /**\r\n     * @dev Returns the account approved for `tokenId` token.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `tokenId` must exist.\r\n     */\r\n    function getApproved(uint256 tokenId) external view returns (address operator);\r\n\r\n    /**\r\n     * @dev Approve or remove `operator` as an operator for the caller.\r\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The `operator` cannot be the caller.\r\n     *\r\n     * Emits an {ApprovalForAll} event.\r\n     */\r\n    function setApprovalForAll(address operator, bool _approved) external;\r\n\r\n    /**\r\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\r\n     *\r\n     * See {setApprovalForAll}\r\n     */\r\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\r\n\r\n    /**\r\n      * @dev Safely transfers `tokenId` token from `from` to `to`.\r\n      *\r\n      * Requirements:\r\n      *\r\n      * - `from` cannot be the zero address.\r\n      * - `to` cannot be the zero address.\r\n      * - `tokenId` token must exist and be owned by `from`.\r\n      * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\r\n      * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\r\n      *\r\n      * Emits a {Transfer} event.\r\n      */\r\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\r\n}\r\n\r\n// File: contracts/interface/IERC721Receiver.sol\r\n\r\n/**\r\n * @title ERC721 token receiver interface\r\n * @dev Interface for any contract that wants to support safeTransfers\r\n * from ERC721 asset contracts.\r\n */\r\ninterface IERC721Receiver {\r\n    /**\r\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\r\n     * by `operator` from `from`, this function is called.\r\n     *\r\n     * It must return its Solidity selector to confirm the token transfer.\r\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\r\n     *\r\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\r\n     */\r\n    function onERC721Received(address operator, address from, uint256 tokenId, bytes calldata data) external returns (bytes4);\r\n}\r\n\r\n// File: contracts/interface/IERC721Metadata.sol\r\n\r\n/**\r\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\r\n * @dev See https://eips.ethereum.org/EIPS/eip-721\r\n */\r\ninterface IERC721Metadata is IERC721 {\r\n\r\n    /**\r\n     * @dev Returns the token collection name.\r\n     */\r\n    function name() external view returns (string memory);\r\n\r\n    /**\r\n     * @dev Returns the token collection symbol.\r\n     */\r\n    function symbol() external view returns (string memory);\r\n\r\n    /**\r\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\r\n     */\r\n    function tokenURI(uint256 tokenId) external view returns (string memory);\r\n}\r\n\r\n// File: contracts/util/Context.sol\r\n\r\n/*\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n}\r\n\r\n// File: contracts/util/Strings.sol\r\n\r\n/**\r\n * @dev String operations.\r\n */\r\nlibrary Strings {\r\n    bytes16 private constant alphabet = \"0123456789abcdef\";\r\n\r\n    /**\r\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\r\n     */\r\n    function toString(uint256 value) internal pure returns (string memory) {\r\n        // Inspired by OraclizeAPI's implementation - MIT licence\r\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\r\n\r\n        if (value == 0) {\r\n            return \"0\";\r\n        }\r\n        uint256 temp = value;\r\n        uint256 digits;\r\n        while (temp != 0) {\r\n            digits++;\r\n            temp /= 10;\r\n        }\r\n        bytes memory buffer = new bytes(digits);\r\n        while (value != 0) {\r\n            digits -= 1;\r\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\r\n            value /= 10;\r\n        }\r\n        return string(buffer);\r\n    }\r\n\r\n}\r\n\r\n// File: contracts/standard/ERC165.sol\r\n\r\n/**\r\n * @dev Implementation of the {IERC165} interface.\r\n *\r\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\r\n * for the additional interface id that will be supported. For example:\r\n *\r\n * ```solidity\r\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\r\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\r\n * }\r\n * ```\r\n *\r\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\r\n */\r\nabstract contract ERC165 is IERC165 {\r\n    /**\r\n     * @dev See {IERC165-supportsInterface}.\r\n     */\r\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\r\n        return interfaceId == type(IERC165).interfaceId;\r\n    }\r\n}\r\n\r\n// File: contracts/core/NiftyEntity.sol\r\n\r\n/**\r\n * @dev Authenticator of state mutating operations for Nifty Gateway contracts. \r\n *\r\n * addresses for stateful operations. \r\n *\r\n * Rinkeby: 0xCefBf44ff649B6E0Bc63785699c6F1690b8cF73b\r\n * Mainnet: 0x6e53130dDfF21E3BC963Ee902005223b9A202106\r\n */\r\ncontract NiftyEntity {\r\n   \r\n   // Address of {NiftyRegistry} contract. \r\n   address internal immutable niftyRegistryContract = 0x6e53130dDfF21E3BC963Ee902005223b9A202106; //Mainnet\r\n   \r\n   /**\r\n    * @dev Determines whether accounts are allowed to invoke state mutating operations on child contracts.\r\n    */\r\n    modifier onlyValidSender() {\r\n        NiftyRegistry niftyRegistry = NiftyRegistry(niftyRegistryContract);\r\n        bool isValid = niftyRegistry.isValidNiftySender(msg.sender);\r\n        require(isValid, \"NiftyEntity: Invalid msg.sender\");\r\n        _;\r\n    }\r\n    \r\n   /**\r\n    * @dev Points to the repository of authenticated addresses.\r\n    */\r\n    constructor() {}\r\n}\r\n\r\n/**\r\n * @dev Defined to mediate interaction with externally deployed {NiftyRegistry} dependency. \r\n */\r\ninterface NiftyRegistry {\r\n   function isValidNiftySender(address sending_key) external view returns (bool);\r\n}\r\n\r\n// File: contracts/core/ERC721.sol\r\n\r\n/**\r\n * @dev Nifty Gateway implementation of Non-Fungible Token Standard.\r\n */\r\ncontract ERC721 is NiftyEntity, Context, ERC165, IERC721, IERC721Metadata {\r\n\r\n    // Tracked individual instance spawned by {BuilderShop} contract. \r\n    uint immutable public _id;\r\n\r\n    // Number of distinct NFTs housed in this contract. \r\n    uint immutable public _typeCount;\r\n\r\n    // Intial receiver of all newly minted NFTs.\r\n    address immutable public _defaultOwner;\r\n\r\n    // Component(s) of 'tokenId' calculation. \r\n    uint immutable internal topLevelMultiplier;\r\n    uint immutable internal midLevelMultiplier;\r\n\r\n    // Token name.\r\n    string private _name;\r\n\r\n    // Token symbol.\r\n    string private _symbol;\r\n\r\n    // Token artifact location.\r\n    string private _baseURI;\r\n\r\n    // Mapping from Nifty type to name of token.\r\n    mapping(uint256 => string) private _niftyTypeName;\r\n\r\n    // Mapping from Nifty type to IPFS hash of canonical artifcat file.\r\n    mapping(uint256 => string) private _niftyTypeIPFSHashes;\r\n\r\n    // Mapping from token ID to owner address.\r\n    mapping (uint256 => address) internal _owners;\r\n\r\n    // Mapping owner address to token count, by aggregating all _typeCount NFTs in the contact.\r\n    mapping (address => uint256) internal _balances;\r\n\r\n    // Mapping from token ID to approved address.\r\n    mapping (uint256 => address) private _tokenApprovals;\r\n\r\n    // Mapping from owner to operator approvals.\r\n    mapping (address => mapping (address => bool)) private _operatorApprovals;\r\n\r\n    /**\r\n     * @dev Initializes the token collection.\r\n     */\r\n    constructor() NiftyEntity() {\r\n        _id = 2;\r\n        _typeCount = 3;\r\n        _symbol = \"ARSHAM\";\r\n        _name = \"Eroding and Reforming Digital Sculptures\";\r\n        _baseURI = \"https://api.niftygateway.com/arsham/\"; \r\n        \r\n        _defaultOwner = 0xE052113bd7D7700d623414a0a4585BCaE754E9d5;\r\n\r\n        midLevelMultiplier = 10000;\r\n        topLevelMultiplier = 200000000;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC165-supportsInterface}.\r\n     */\r\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\r\n        return interfaceId == type(IERC721).interfaceId\r\n            || interfaceId == type(IERC721Metadata).interfaceId\r\n            || super.supportsInterface(interfaceId);\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721-balanceOf}.\r\n     */\r\n    function balanceOf(address owner) public view virtual override returns (uint256) {\r\n        require(owner != address(0), \"ERC721: balance query for the zero address\");\r\n        return _balances[owner];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721-ownerOf}.\r\n     */\r\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\r\n        address owner = _owners[tokenId];\r\n        require(owner != address(0), \"ERC721: owner query for nonexistent token\");\r\n        return owner;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721Metadata-name}.\r\n     */\r\n    function name() public view virtual override returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721Metadata-symbol}.\r\n     */\r\n    function symbol() public view virtual override returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the link to artificat location for a given token by 'tokenId'.\r\n     * Throws if the token ID does not exist. May return an empty string.\r\n     * @param tokenId uint256 ID of the token to query.\r\n     * @return The location where the artifact assets are stored.\r\n     */\r\n    function tokenURI(uint256 tokenId) external view override returns (string memory) {\r\n        require(_exists(tokenId), \"ERC721Metadata: URI query for nonexistent token\");\r\n        string memory tokenIdStr = Strings.toString(tokenId);\r\n        return string(abi.encodePacked(_baseURI, tokenIdStr));\r\n    }\r\n    \r\n    /**\r\n     * @dev Determine which NFT in the contract (_typeCount) is associated \r\n     * with this 'tokenId'.\r\n     */\r\n    function _getNiftyTypeId(uint256 tokenId) internal view returns (uint256) {\r\n        return (tokenId - topLevelMultiplier) / midLevelMultiplier;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the Name for a given token ID.\r\n     * Throws if the token ID does not exist. May return an empty string.\r\n     * @param tokenId uint256 ID of the token to query\r\n     */\r\n    function tokenName(uint256 tokenId) external view returns (string memory) {\r\n        require(_exists(tokenId), \"ERC721Metadata: Name query for nonexistent token\");\r\n        uint256 niftyType = _getNiftyTypeId(tokenId);\r\n        return _niftyTypeName[niftyType];\r\n    }\r\n   \r\n    /**\r\n     * @dev Internal function to set the token IPFS hash for a nifty type.\r\n     * @param niftyType uint256 ID component of the token to set its IPFS hash\r\n     * @param ipfs_hash string IPFS link to assign\r\n     */\r\n    function _setTokenIPFSHashNiftyType(uint256 niftyType, string memory ipfs_hash) internal {\r\n        require(bytes(_niftyTypeIPFSHashes[niftyType]).length == 0, \"ERC721Metadata: IPFS hash already set\");\r\n        _niftyTypeIPFSHashes[niftyType] = ipfs_hash;\r\n    }\r\n\r\n    /**\r\n     * @dev Internal function to set the name for a nifty type.\r\n     * @param niftyType uint256 of nifty type name to be set\r\n     * @param nifty_type_name name of nifty type\r\n     */\r\n    function _setNiftyTypeName(uint256 niftyType, string memory nifty_type_name) internal {\r\n        _niftyTypeName[niftyType] = nifty_type_name;\r\n    }\r\n\r\n    /**\r\n     * @dev Base URI for computing {tokenURI}.\r\n     */\r\n    function _setBaseURI(string memory baseURI_) internal {\r\n        _baseURI = baseURI_;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721-approve}.\r\n     */\r\n    function approve(address to, uint256 tokenId) public virtual override {\r\n        address owner = ERC721.ownerOf(tokenId);\r\n        require(to != owner, \"ERC721: approval to current owner\");\r\n\r\n        require(_msgSender() == owner || isApprovedForAll(owner, _msgSender()),\r\n            \"ERC721: approve caller is not owner nor approved for all\"\r\n        );\r\n\r\n        _approve(to, tokenId);\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721-getApproved}.\r\n     */\r\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\r\n        require(_exists(tokenId), \"ERC721: approved query for nonexistent token\");\r\n        return _tokenApprovals[tokenId];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721-setApprovalForAll}.\r\n     */\r\n    function setApprovalForAll(address operator, bool approved) public virtual override {\r\n        require(operator != _msgSender(), \"ERC721: approve to caller\");\r\n        _operatorApprovals[_msgSender()][operator] = approved;\r\n        emit ApprovalForAll(_msgSender(), operator, approved);\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721-isApprovedForAll}.\r\n     */\r\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\r\n        return _operatorApprovals[owner][operator];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721-transferFrom}.\r\n     */\r\n    function transferFrom(address from, address to, uint256 tokenId) public virtual override {\r\n        //solhint-disable-next-line max-line-length\r\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \"ERC721: transfer caller is not owner nor approved\");\r\n        _transfer(from, to, tokenId);\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721-safeTransferFrom}.\r\n     */\r\n    function safeTransferFrom(address from, address to, uint256 tokenId) public virtual override {\r\n        safeTransferFrom(from, to, tokenId, \"\");\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721-safeTransferFrom}.\r\n     */\r\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes memory _data) public virtual override {\r\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \"ERC721: transfer caller is not owner nor approved\");\r\n        _safeTransfer(from, to, tokenId, _data);\r\n    }\r\n\r\n    /**\r\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\r\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\r\n     *\r\n     * `_data` is additional data, it has no specified format and it is sent in call to `to`.\r\n     *\r\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\r\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `from` cannot be the zero address.\r\n     * - `to` cannot be the zero address.\r\n     * - `tokenId` token must exist and be owned by `from`.\r\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function _safeTransfer(address from, address to, uint256 tokenId, bytes memory _data) internal virtual {\r\n        _transfer(from, to, tokenId);\r\n        require(_checkOnERC721Received(from, to, tokenId, _data), \"ERC721: transfer to non ERC721Receiver implementer\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns whether `tokenId` exists.\r\n     *\r\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\r\n     *\r\n     * Tokens start existing when they are minted (`_mint`),\r\n     * and stop existing when they are burned (`_burn`).\r\n     */\r\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\r\n        return _owners[tokenId] != address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `tokenId` must exist.\r\n     */\r\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\r\n        require(_exists(tokenId), \"ERC721: operator query for nonexistent token\");\r\n        address owner = ERC721.ownerOf(tokenId);\r\n        return (spender == owner || getApproved(tokenId) == spender || isApprovedForAll(owner, spender));\r\n    }\r\n\r\n    /**\r\n     * @dev Destroys `tokenId`.\r\n     * The approval is cleared when the token is burned.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `tokenId` must exist.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function _burn(uint256 tokenId) internal virtual {\r\n        address owner = ERC721.ownerOf(tokenId);\r\n\r\n        // Clear approvals\r\n        _approve(address(0), tokenId);\r\n\r\n        _balances[owner] -= 1;\r\n        delete _owners[tokenId];\r\n\r\n        emit Transfer(owner, address(0), tokenId);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers `tokenId` from `from` to `to`.\r\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `to` cannot be the zero address.\r\n     * - `tokenId` token must be owned by `from`.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function _transfer(address from, address to, uint256 tokenId) internal virtual {\r\n        require(ERC721.ownerOf(tokenId) == from, \"ERC721: transfer of token that is not own\");\r\n        require(to != address(0), \"ERC721: transfer to the zero address\");\r\n\r\n        // Clear approvals from the previous owner\r\n        _approve(address(0), tokenId);\r\n\r\n        _balances[from] -= 1;\r\n        _balances[to] += 1;\r\n        _owners[tokenId] = to;\r\n\r\n        emit Transfer(from, to, tokenId);\r\n    }\r\n\r\n    /**\r\n     * @dev Approve `to` to operate on `tokenId`\r\n     *\r\n     * Emits a {Approval} event.\r\n     */\r\n    function _approve(address to, uint256 tokenId) internal virtual {\r\n        _tokenApprovals[tokenId] = to;\r\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\r\n    }\r\n\r\n    /**\r\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\r\n     * The call is not executed if the target address is not a contract.\r\n     *\r\n     * @param from address representing the previous owner of the given token ID\r\n     * @param to target address that will receive the tokens\r\n     * @param tokenId uint256 ID of the token to be transferred\r\n     * @param _data bytes optional data to send along with the call\r\n     * @return bool whether the call correctly returned the expected magic value\r\n     */\r\n    function _checkOnERC721Received(address from, address to, uint256 tokenId, bytes memory _data)\r\n        private returns (bool)\r\n    {\r\n        if (isContract(to)) {\r\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, _data) returns (bytes4 retval) {\r\n                return retval == IERC721Receiver(to).onERC721Received.selector;\r\n            } catch (bytes memory reason) {\r\n                if (reason.length == 0) {\r\n                    revert(\"ERC721: transfer to non ERC721Receiver implementer\");\r\n                } else {\r\n                    // solhint-disable-next-line no-inline-assembly\r\n                    assembly {\r\n                        revert(add(32, reason), mload(reason))\r\n                    }\r\n                }\r\n            }\r\n        } else {\r\n            return true;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     *\r\n     * Among others, `isContract` will return false for the following\r\n     * types of addresses:\r\n     *\r\n     *  - an externally-owned account\r\n     *  - a contract in construction\r\n     *  - an address where a contract will be created\r\n     *  - an address where a contract lived, but was destroyed\r\n     * ====\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // This method relies on extcodesize, which returns 0 for contracts in\r\n        // construction, since the code is only stored at the end of the\r\n        // constructor execution.\r\n\r\n        uint256 size;\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly { size := extcodesize(account) }\r\n        return size > 0;\r\n    }\r\n}\r\n\r\n// File: contracts/standard/ERC721Burnable.sol\r\n\r\n/**\r\n * @title ERC721 Burnable Token\r\n * @dev ERC721 Token that can be irreversibly burned (destroyed).\r\n */\r\nabstract contract ERC721Burnable is Context, ERC721 {\r\n    /**\r\n     * @dev Burns `tokenId`. See {ERC721-_burn}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The caller must own `tokenId` or be an approved operator.\r\n     */\r\n    function burn(uint256 tokenId) public virtual {\r\n        //solhint-disable-next-line max-line-length\r\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \"ERC721Burnable: caller is not owner nor approved\");\r\n        _burn(tokenId);\r\n    }\r\n}\r\n\r\n// File: contracts/interface/IDateTime.sol\r\n\r\n/**\r\n *\r\n */\r\ninterface IDateTime {\r\n\r\n    function getYear(uint timestamp) external view virtual returns (uint16);\r\n    \r\n    function getHour(uint timestamp) external view virtual returns (uint8);\r\n\r\n    function getWeekday(uint timestamp) external view virtual returns (uint8);\r\n\r\n}\r\n\r\n// File: contracts/core/NiftyBuilderInstance.sol\r\n\r\n/** \r\n * XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\r\n * XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX  .***   XXXXXXXXXXXXXXXXXX\r\n * XXXXXXXXXXXXXXXXXXXXXXXXXXXXXX  ,*********  XXXXXXXXXXXXXXXX\r\n * XXXXXXXXXXXXXXXXXXXXXXXXXXXX  ***************  XXXXXXXXXXXXX\r\n * XXXXXXXXXXXXXXXXXXXXXXXXX  .*******************  XXXXXXXXXXX\r\n * XXXXXXXXXXXXXXXXXXXXXXX  ***********    **********  XXXXXXXX\r\n * XXXXXXXXXXXXXXXXXXXX   ***********       ***********  XXXXXX\r\n * XXXXXXXXXXXXXXXXXX  ***********         ***************  XXX\r\n * XXXXXXXXXXXXXXXX  ***********           ****    ********* XX\r\n * XXXXXXXXXXXXXXXX *********      ***    ***      *********  X\r\n * XXXXXXXXXXXXXXXX  **********  *****          *********** XXX\r\n * XXXXXXXXXXXX   /////.*************         ***********  XXXX\r\n * XXXXXXXXX  /////////...***********      ************  XXXXXX\r\n * XXXXXXX/ ///////////..... /////////   ///////////   XXXXXXXX\r\n * XXXXXX  /    //////.........///////////////////   XXXXXXXXXX\r\n * XXXXXXXXXX .///////...........//////////////   XXXXXXXXXXXXX\r\n * XXXXXXXXX .///////.....//..////  /////////  XXXXXXXXXXXXXXXX\r\n * XXXXXXX# /////////////////////  XXXXXXXXXXXXXXXXXXXXXXXXXXXX\r\n * XXXXX   ////////////////////   XXXXXXXXXXXXXXXXXXXXXXXXXXXXX\r\n * XX   ////////////// //////   XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\r\n * XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\r\n *\r\n * @dev Nifty Gateway extension of customized NFT contract, encapsulates\r\n * logic for minting new tokens, and concluding the minting process. \r\n */\r\ncontract NiftyBuilderInstance is ERC721, ERC721Burnable {\r\n\r\n    // Engine(s) of nifty type dynamism.\r\n    address public _dateTimeContract00;\r\n    address public _dateTimeContract01;\r\n\r\n    /**\r\n     * @dev Eroding and Reforming Bust of Zeus (Earth Day)\r\n     *\r\n     * @return uint256 index of asset\r\n     */\r\n    function _bustOfZeus(IDateTime dateTime) internal view returns (uint256) {\r\n        uint8 hour = dateTime.getHour(block.timestamp);\r\n        uint8 threshold = 17;\r\n        if (hour > threshold) {\r\n            return uint256(3);\r\n        }\r\n        threshold = 11;\r\n        if (hour > threshold) {\r\n            return uint256(2);\r\n        }\r\n        threshold = 5;\r\n        if (hour > threshold) {\r\n            return uint256(1);\r\n        } \r\n        return uint256(0);\r\n    }\r\n\r\n    string[4] artifact01 = [\"QmNWr9r6pEEnyh9aejue8upHSjYN24pWrAzpYmjRgseExr\", //State 01\r\n                            \"QmZuaZ2RphWvnaxMxz9Pd95c4E5DPhE5BtSw4auztiMC1u\", //State 02\r\n                            \"QmaB29NhdweR75hAWEehvcXCwXBwN8KBpny6uzdsUHNogv\", //State 03\r\n                            \"QmfFCHSMAnjCqyPgTJDCQQuJJCpfqoupcihevgPxk7jHBF\"];//State 04\r\n\r\n    /**\r\n     * @dev Eroding and Reforming Venus of Arles (72.6 Years)\r\n     *\r\n     * @return uint256 index of asset\r\n     */\r\n    function _venusOfArles(IDateTime dateTime) internal view returns (uint256) {\r\n        uint16 offset = 2021;\r\n        uint16 value = dateTime.getYear(block.timestamp) - offset;\r\n        uint16 criterion = 73;\r\n        uint16 result = value % criterion;\r\n        return uint256(result);\r\n    }\r\n\r\n    string[73] artifact02 = [\"QmR81UuQPkhfGE4K4cbbnBLj9Z5EZcEocu8YY18UM7NUM1\", //State 01\r\n                             \"QmR4bA1ifjixhtkTYnz4VmHKWMpafZv4mFehmeGqcDQdvA\", //State 02\r\n                             \"QmRzsgPoMsoYwiVKWYkFDeRjB3C2SiSKXVmTkDHGqy8SRq\", //State 03\r\n                             \"QmRa4cdAHdnbfLX3s65rih6FYvwMfTePqSw46cDPR9gkX7\", //State 04\r\n                             \"QmRMR9yLVFmLCGZyrSmuSPwh6KxkyScXVZ2akY3N4h7Hf5\", //State 05\r\n                             \"QmRgrgEoac8hxMv4zJQmRhxVfUEAthxHQyV4vYUirXXo3W\", //State 06\r\n                             \"QmcHYcrKNGs1NN8jnyJUnAzneK6DbaKtmLVwcZVp28Fuji\", //State 07\r\n                             \"QmTjWk2p8eJcW6FR2y1t8mLcEAHs9QKt2tcPCcsXTXA5NA\", //State 08\r\n                             \"QmNsf7GZUw2Bz4DSek2fcaXEvxSH6GdEUjmzUiprj9i2Ta\", //State 09\r\n                             \"QmbEmMK7hLzCe9YWqhqXV3HQedEgorxtc642CkkCogVVho\", //State 10\r\n                             \"QmbR2s2uPcywASUudpsujWmhxoFqy5hzxF9DM5ohRNQfWZ\", //State 11\r\n                             \"QmWc3r6VknYB6vAu5astS8PzPjGwq3gQAexxt6g6H169gU\", //State 12\r\n                             \"QmZrbFSuHf6zdM66RFgj2vCQatbAVYfyCBhHPsSzPzEz2M\", //State 13\r\n                             \"QmeVyHYGP9QK3pSGpYPcMCrTrf8PWMppdq9cSxB8TjunRs\", //State 14\r\n                             \"QmY9SvuK8rTSoZsAWxgaXS6fPeQSYhqsmWgqxAYbfuDM4y\", //State 15\r\n                             \"QmawC7bUXhqwHeoAagd7UV2HhcGxpZ4PZHkU1rxM6ywgKV\", //State 16\r\n                             \"QmSiysm4VWLJ19JF81U7enxcfjkb2mVyrzhJkZ6qCK42xS\", //State 17\r\n                             \"QmYZHBoNxD9hAZASAThC93yRrGcfV5nCgi86wQNVgZkemV\", //State 18\r\n                             \"QmRZ1B27Y1YuDoq6W32p8sFKUaj6hQwfaMJuCzWkA4wmKB\", //State 19\r\n                             \"Qmb9b2QkBzSdkPooewAAQRcQULFYP49i8qdgRkZ7z5sijh\", //State 20\r\n                             \"QmNNa8zqTZFpjo2ex2kd4x9vLZjK93WWmAp444VWS7NdVD\", //State 21\r\n                             \"QmQaKQDstMwrEKZW5W2mbDywuNN6kxuE6MiB5UZZZ7umfJ\", //State 22\r\n                             \"QmVcYsG9T3Ng5CJmVAQk7vHR5YzRaTfBkXFbYArqTsaEsA\", //State 23\r\n                             \"Qma27xgagQLKhT89DDRvUTfmn5CacCXdn778bWQDUR6NG2\", //State 24\r\n                             \"QmZbWLsVVRNgFyjjGWfkCAxisMEEGVJPrpbSiuYRS8unPc\", //State 25\r\n                             \"QmNQ2aVkkaKV2eKQMPYVqCFBvaRsKtabAVg9LxCwibueBf\", //State 26\r\n                             \"QmVMKPbTNU2fzDmwGTEPVxYsR8TF49yaVF8Vk1tT5uYGEY\", //State 27\r\n                             \"QmaqrMBptBkdJcPyrKfrh8axTpD9a38qfodcoXsRNdnibp\", //State 28\r\n                             \"QmYbvARyHSJqrp6PTeyvQj16EGrG7rLssoDfxr61JBVchX\", //State 29\r\n                             \"QmSSrCyXCHeiKxxrr9V5gxZ4U4j3yt1mxvhGbrQKxRqiB8\", //State 30\r\n                             \"QmWJov2kfhHPg7QLZkkbzC8WmKwD81wdATKE94hASfeiMM\", //State 31\r\n                             \"Qmabw8dNheYekvDbCez1GDdC6tUdrgCLq8SgUsRFYcMRU8\", //State 32\r\n                             \"QmWxi9VLRyMwXy11pSJbcG8XBgf25PXK3QbSZCc7V7aXoe\", //State 33\r\n                             \"QmVGS6oXHtPh3jeYnqP7Y28Ti8a8UqJDwNbN6H7bPo9aMk\", //State 34\r\n                             \"QmQ5tkbbYieCTvdVPL85PMZzij3MqB9TDsMiWh1UzR8CeN\", //State 35\r\n                             \"QmbJkDacA74hcUQiATdSJfCkfxbKpj7CbZKJSfvGw7TZ3D\", //State 36\r\n                             \"QmSAihqMxEqYPGaVf9ApFh416NF18soLcnpPM2iR77J7jB\", //State 37\r\n                             \"QmZfwfjhjdRzQUBF98TSbZPUiWJod9GDiDWB7piK344b7a\", //State 38\r\n                             \"QmUDn7VKVT5gAeNZ36kNA27f4cxS32SQSwsQujFFmebtJK\", //State 39\r\n                             \"QmaR98jw8oiJyZRb39FcYuzf885GoXHGTK7uewvCN28FGG\", //State 40\r\n                             \"QmTG9yZ4sTdWXPQNwYkRzdzHCjWDMk8qhBY8JCvZdvJksp\", //State 41\r\n                             \"QmfRrs388cZqvGc5kctm5hrTNwhX6LeK4Eexk8adBxuYLj\", //State 42\r\n                             \"QmdrxzuEecPEL6L7YVixucehiRY2aBWEbZAEeYQ8VkDNes\", //State 43\r\n                             \"QmRrWxhqQfvgXV7nuGc58CQfXnE2QKq9WXYd2HaVQNxUJ9\", //State 44\r\n                             \"QmXDPxvzeb1gpkchDY3qQai6RYBhALVWqo79HhPYDmbbiQ\", //State 45\r\n                             \"QmYa3zGVn33SsGXD6pSXxARHvc9JHBDvRkPCeD8t9RadpH\", //State 46\r\n                             \"QmfSkwPEQYbazMKwLrVaZmrFu7Rk6KVTqxVggr7F6zvwfF\", //State 47\r\n                             \"QmaU1Hejt2kLTVpcnXfEpWcDT7MC8fb8uWjcBW5SCEgcBn\", //State 48\r\n                             \"QmehTRiyb8MVxMJZccHnJk24QtuZdoXRoYc1qZJFWNM2DS\", //State 49\r\n                             \"QmPzBPEMjaov2EdZF6mE5Sg4cki35MnnYGCp855MjBdQCS\", //State 50\r\n                             \"QmXYgaCZFitc3PWMiNoNvesLPxq18Z2UXcGKQQrbmZsfCg\", //State 51\r\n                             \"QmSqRdFM2rWX6igiBvfXbuMCbN9hx13DwrVTtQHi8GNvTE\", //State 52\r\n                             \"QmWawbhnLFBC1J71QT55YC6htPwX6WDoLmwoj33aR75muC\", //State 53\r\n                             \"QmYLiBGhwfuBWGNi3NmFQgVWj55b2Vxur2HvjVn7tMoD9Y\", //State 54\r\n                             \"QmWW1YjGiVBjgSeaQqtNLyp1gKbyVdboqT7DUChXw3NgQt\", //State 55\r\n                             \"QmecGhERiccBCXa7BHwASMZGVZRBQPBdnyDAuuzLctPRvB\", //State 56\r\n                             \"QmPJNXZ1bXJU3FxCBgb4pUNHGBDQhuwVVYUUGWyuwp4vLX\", //State 57\r\n                             \"QmPXsbSRwkWs5xAEqpt9hCbjNDmHsZvvJZkNH3b419FMDm\", //State 58\r\n                             \"QmWaLpKgkQk2xrwyPp1kdmsB5xYcrAtiaT1U9tt7BfyxbU\", //State 59\r\n                             \"QmU7LR8jiQcjAwTxxrXiGc3j7Ust7Ggjeb5Ysog4T5iW7N\", //State 60\r\n                             \"QmcTxChkC259PTqzVgUtCaGstS6d5d3EtMcbnCX2bsZBNj\", //State 61\r\n                             \"QmP8eGwqDLtmHD89Nofr54FsAcHvdL2mEMnCjssS9sEcwP\", //State 62\r\n                             \"QmSVZPVDsZThK1spkL9Cy4SrxLTsNebXuRn2wCtAf3fXFm\", //State 63\r\n                             \"QmUXfmP9k8SsUMNzC89y9F4NWRXkadBV5t6QBQkTTChRZP\", //State 64\r\n                             \"QmXHLwFwwa5xiH3xXWPzvPLHRYoEQdKo9ZcMDs1dSfvERD\", //State 65\r\n                             \"QmfTHh3E3JM5cZc3erTHJvkXeKh7i5SjAeXwBrQPwwTDTc\", //State 66\r\n                             \"QmT6iHKZN9HvwWyS2d3XqBbhqPLXcBf1FXHHNNk7TcbAFu\", //State 67\r\n                             \"QmfQpywZY2W2giE929VmqJ6m2NUwWKqeZT663yK661WB4L\", //State 68\r\n                             \"QmRtiHoEE5kYrrnFjP51qTECMHBsdMH6PkJSt9uEEzkXXi\", //State 69\r\n                             \"QmRiUTY6e8AtEdfvVSc3suRw7sEtRPdZeXkKwyVaM8bvcX\", //State 70\r\n                             \"QmVQJD4g4jxJPi6XoCecXwWv7ULkWG5sU75UCFeM5XGPL5\", //State 71\r\n                             \"QmZ2SjXuVdVGdR9viCpNhU8ZSRtsnEEErmjLq6LvMgDn4v\", //State 72\r\n                             \"QmSx78hghW4cpWq3tinRYmKoHm665LEsDPPXmK1zmg8UpY\"];//State 73\r\n\r\n    /**\r\n     * @dev Eroding and Reforming Bust of Melpomene (Martian Day)\r\n     *\r\n     * @return uint256 index of asset\r\n     */\r\n    function _bustOfMelpomene(IDateTime dateTime) internal view returns (uint256) {\r\n        uint8 hour = dateTime.getHour(block.timestamp);\r\n        uint8 weekday = dateTime.getWeekday(block.timestamp);\r\n\r\n        uint8 criterion = 2;\r\n        uint8 result = weekday - uint8(weekday / criterion);\r\n        \r\n        uint8 condition = 0;\r\n        if (result == condition) {\r\n            uint8 offset = 23;\r\n            uint8 result = offset - hour;\r\n            return uint256(result);\r\n        } \r\n        return uint256(hour);\r\n    }\r\n\r\n    string[24] artifact03 = [\"Qma5iW6ch6kGE3GB1FkCvUt5LruJ3nZN7CjJQNZwifxSQH\", //State 01\r\n                             \"QmNrSBLVJUNFHBqkT6r5utrNVELLGUPvnyYmXpFQMyw8Bs\", //State 02\r\n                             \"QmZ1f4ku6MNt6XnoPTQReYva4AApL2JjBzydwfxPaRoEgk\", //State 03\r\n                             \"QmZATZUY14RhFvqfGu8CX1ajUy4Qfx9KDNLYpJjAeiL2a3\", //State 04\r\n                             \"QmRn6ncB9VVNNY8U6jpLawaQ5ogoRpKGon8XAcAXmHobeL\", //State 05\r\n                             \"QmNLmKCa9EFRvYa8RbdiJjUjtmd6PF99VCaQLtkbfe5U42\", //State 06\r\n                             \"Qmd4UgHyTFuSe3PTRJiUvmAqc3adSApzsoLFQeCbtidwpW\", //State 07\r\n                             \"QmSxt7BUfePqABdwci7x9By3LgFUvbCM44WRsLoEFC3MYT\", //State 08\r\n                             \"QmWetvFhJLuuJBSMhSPwt5xyCv3uW179FhF8MbmnbKUehW\", //State 09\r\n                             \"QmXRShHWTLoKWVQZmbEQ1jDenwuV2BPHqNSYpNWnYoJ1K3\", //State 10\r\n                             \"QmYkYqMX9FXY7MP5E9edr1ZeNEFBGqz1BNKCdcvkN7eFaN\", //State 11\r\n                             \"QmYQqsn1FsMRm79hw8cXTkGPKH3pa3ouTGiTLveGJqm65A\", //State 12\r\n                             \"QmYBNZ9AYGtGFQU4HUi2iAWCuhHt7nQ57dv7fuEeGfshTN\", //State 13\r\n                             \"QmRsmx1ayeYaArsXRHVan1AQqqW8eBQKURguGfG5xjtpsN\", //State 14\r\n                             \"QmZNtn3vk2SoJ4QJf6u2USnUvq5QNMrMqcTKC8s2fAghKY\", //State 15\r\n                             \"QmYGN52qdpBoAJs5ye3RuyxgVfw1kAxv6Sjy4fRugb5eES\", //State 16\r\n                             \"QmVuxM6foMHArx2qSmiuqhUWCVWid5r1Hhyq8w7aPHiecq\", //State 17\r\n                             \"QmZe4njp7a3o9DyRbHFn1RDtGCiyXXoFHJZoxkmEjrFgwT\", //State 18\r\n                             \"Qmeqk9eH3sTiucLTbpPAYq28Dj6icc9oAPJtiPej5e5ssC\", //State 19\r\n                             \"QmekyAay43mjWax1byL5Erny5KyhN8pZgVhLE7Tg8waDR2\", //State 20\r\n                             \"QmcjSYZuCHGS7zox5jyw5bE3NjHNghydjwkqiUMEj3hyPg\", //State 21\r\n                             \"QmTigpNi4Y3iZQngxDUbKGcw2D7RrvACCiTVGxFmbRujKV\", //State 22\r\n                             \"QmTJsYU9zaJR3pUQCLkLGYNan5N8a96sDoR3HgEwQz6Pzw\", //State 23\r\n                             \"QmUH2WtFbawmshSo9PayGwnz4seZSS8NkGyGbuVYkod6Sh\"];//State 24\r\n\r\n    // The artist associated with the collection.\r\n    string private _creator;\r\n\r\n    // Number of NFTs minted for a given 'typeCount'. \r\n    mapping (uint256 => uint256) public _mintCount;\r\n\r\n    /**\r\n     * @dev Serves as a gas cost optimized boolean flag \r\n     * to indicate whether the minting process has been \r\n     * concluded for a given 'typeCount', correspinds \r\n     * to the {_getFinalized} and {setFinalized}.\r\n     */\r\n    mapping (uint256 => bytes32) private _finalized;\r\n\r\n    /**\r\n     * @dev Emitted when tokens are created.\r\n     */\r\n    event ConsecutiveTransfer(uint256 indexed fromTokenId, uint256 toTokenId, address indexed fromAddress, address indexed toAddress);\r\n\r\n    /**\r\n     * @dev Ultimate instantiation of a Nifty Gateway NFT collection. \r\n     */\r\n    constructor() ERC721() {\r\n        _creator = \"Daniel Arsham\";\r\n        _dateTimeContract00 = 0x740a637ADD6492e5FaA907AF0fe708770B737058;\r\n        _dateTimeContract01 = 0x740a637ADD6492e5FaA907AF0fe708770B737058;\r\n        _setNiftyTypeName(1, \"Eroding and Reforming Bust of Zeus (Earth Day)\");\r\n        _setNiftyTypeName(2, \"Eroding and Reforming Venus of Arles (72.6 Years)\");\r\n        _setNiftyTypeName(3, \"Eroding and Reforming Bust of Melpomene (Martian Day)\");\r\n    }\r\n\r\n    /**\r\n     * Configurable address for DateTime.\r\n     */ \r\n    function setDateTimeContract00(address dateTimeContract_) onlyValidSender public {\r\n        _dateTimeContract00 = dateTimeContract_;\r\n    }\r\n\r\n    /**\r\n     * Configurable address for DateTime.\r\n     */ \r\n    function setDateTimeContract01(address dateTimeContract_) onlyValidSender public {\r\n        _dateTimeContract01 = dateTimeContract_;\r\n    }\r\n\r\n    /**\r\n     * @dev Generate canonical Nifty Gateway token representation. \r\n     * Nifty contracts have a data model called a 'niftyType' (typeCount) \r\n     * The 'niftyType' refers to a specific nifty in our contract, note \r\n     * that it gives no information about the edition size. In a given \r\n     * contract, 'niftyType' 1 could be an edition of 10, while 'niftyType' \r\n     * 2 is a 1/1, etc.\r\n     * The token IDs are encoded as follows: {id}{niftyType}{edition #}\r\n     * 'niftyType' has 4 digits, and edition number does as well, to allow \r\n     * for 9999 possible 'niftyType' and 9999 of each edition in each contract.\r\n     * Example token id: [500010270]\r\n     * This is from contract #5, it is 'niftyType' 1 in the contract, and it is \r\n     * edition #270 of 'niftyType' 1.\r\n     */\r\n    function _encodeTokenId(uint256 niftyType, uint256 tokenNumber) private view returns (uint256) {\r\n        return (topLevelMultiplier + (niftyType * midLevelMultiplier) + tokenNumber);\r\n    }\r\n\r\n    /**\r\n     * @dev Determine whether it is possible to mint additional NFTs for this 'niftyType'.\r\n     */\r\n    function _getFinalized(uint256 niftyType) public view returns (bool) {\r\n        bytes32 chunk = _finalized[niftyType / 256];\r\n        return (chunk & bytes32(1 << (niftyType % 256))) != 0x0;\r\n    }\r\n\r\n    /**\r\n     * @dev Prevent the minting of additional NFTs of this 'niftyType'.\r\n     */\r\n    function setFinalized(uint256 niftyType) public onlyValidSender {\r\n        uint256 quotient = niftyType / 256;\r\n        bytes32 chunk = _finalized[quotient];\r\n        _finalized[quotient] = chunk | bytes32(1 << (niftyType % 256));\r\n    }\r\n\r\n    /**\r\n     * @dev The artist of this collection.\r\n     */\r\n    function creator() public view virtual returns (string memory) {\r\n        return _creator;\r\n    }\r\n\r\n    /**\r\n     * @dev Assign the root location where the artifact assets are stored.\r\n     */\r\n    function setBaseURI(string memory baseURI) public onlyValidSender {\r\n        _setBaseURI(baseURI);\r\n    }\r\n\r\n    /**\r\n     * @dev Allow owner to change nifty name, by 'niftyType'.\r\n     */\r\n    function setNiftyName(uint256 niftyType, string memory niftyName) public onlyValidSender {\r\n        _setNiftyTypeName(niftyType, niftyName);\r\n    }\r\n\r\n    /**\r\n     * @dev Assign the IPFS hash of canonical artifcat file, by 'niftyType'.\r\n     */   \r\n    function setNiftyIPFSHash(uint256 niftyType, string memory hashIPFS) public onlyValidSender {\r\n        _setTokenIPFSHashNiftyType(niftyType, hashIPFS);\r\n    }\r\n\r\n    /**\r\n     * @dev Create specified number of nifties en masse.\r\n     * Once an NFT collection is spawned by the factory contract, we make calls to set the IPFS\r\n     * hash (above) for each Nifty type in the collection. \r\n     * Subsequently calls are issued to this function to mint the appropriate number of tokens \r\n     * for the project.\r\n     */\r\n    function mintNifty(uint256 niftyType, uint256 count) public onlyValidSender {\r\n        require(!_getFinalized(niftyType), \"NiftyBuilderInstance: minting concluded for nifty type\");\r\n            \r\n        uint256 tokenNumber = _mintCount[niftyType] + 1;\r\n        uint256 tokenId00 = _encodeTokenId(niftyType, tokenNumber);\r\n        uint256 tokenId01 = tokenId00 + count - 1;\r\n        \r\n        for (uint256 tokenId = tokenId00; tokenId <= tokenId01; tokenId++) {\r\n            _owners[tokenId] = _defaultOwner;\r\n        }\r\n        _mintCount[niftyType] += count;\r\n        _balances[_defaultOwner] += count;\r\n\r\n        emit ConsecutiveTransfer(tokenId00, tokenId01, address(0), _defaultOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns an IPFS hash for a given token ID.\r\n     * Throws if the token ID does not exist. May return an empty string.\r\n     * @param tokenId uint256 ID of the token to query.\r\n     * @return IPFS hash for this (_typeCount) NFT. \r\n     */\r\n    function tokenIPFSHash(uint256 tokenId) external view returns (string memory) {\r\n        require(_exists(tokenId), \"ERC721Metadata: IPFS hash query for nonexistent token\");\r\n\r\n        IDateTime dateTime00 = IDateTime(_dateTimeContract00);\r\n    \r\n        uint256 niftyType = _getNiftyTypeId(tokenId);\r\n       \r\n        if (niftyType == 2) {\r\n            uint256 value = _venusOfArles(dateTime00);\r\n            return artifact02[value];\r\n        } \r\n        else if (niftyType == 1) {\r\n            uint256 value = _bustOfZeus(dateTime00);\r\n            return artifact01[value];\r\n        } \r\n        IDateTime dateTime01 = IDateTime(_dateTimeContract01);\r\n        uint256 value = _bustOfMelpomene(dateTime01);\r\n        return artifact03[value];\r\n    }\r\n\r\n}","ABI":"[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"fromTokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"toTokenId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"fromAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"toAddress\",\"type\":\"address\"}],\"name\":\"ConsecutiveTransfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"_dateTimeContract00\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_dateTimeContract01\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_defaultOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"niftyType\",\"type\":\"uint256\"}],\"name\":\"_getFinalized\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_id\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"_mintCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_typeCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"creator\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"niftyType\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"count\",\"type\":\"uint256\"}],\"name\":\"mintNifty\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"baseURI\",\"type\":\"string\"}],\"name\":\"setBaseURI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"dateTimeContract_\",\"type\":\"address\"}],\"name\":\"setDateTimeContract00\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"dateTimeContract_\",\"type\":\"address\"}],\"name\":\"setDateTimeContract01\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"niftyType\",\"type\":\"uint256\"}],\"name\":\"setFinalized\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"niftyType\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"hashIPFS\",\"type\":\"string\"}],\"name\":\"setNiftyIPFSHash\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"niftyType\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"niftyName\",\"type\":\"string\"}],\"name\":\"setNiftyName\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenIPFSHash\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenName\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"NiftyBuilderInstance","CompilerVersion":"v0.8.6+commit.11564f7e","OptimizationUsed":"1","Runs":"1500","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://047193fa1921e99dcfc0131928e7bdd16357e24b76af0eaa7b5d33488e34cccd"}]}