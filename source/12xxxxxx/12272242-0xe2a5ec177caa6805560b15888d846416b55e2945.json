{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"settings\": {\r\n    \"evmVersion\": \"istanbul\",\r\n    \"libraries\": {},\r\n    \"metadata\": {\r\n      \"bytecodeHash\": \"ipfs\",\r\n      \"useLiteralContent\": true\r\n    },\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 800\r\n    },\r\n    \"remappings\": [],\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  },\r\n  \"sources\": {\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor () internal {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/cryptography/ECDSA.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\\n *\\n * These functions can be used to verify that a message was signed by the holder\\n * of the private keys of a given address.\\n */\\nlibrary ECDSA {\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature`. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     */\\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\\n        // Check the signature length\\n        if (signature.length != 65) {\\n            revert(\\\"ECDSA: invalid signature length\\\");\\n        }\\n\\n        // Divide the signature in r, s and v variables\\n        bytes32 r;\\n        bytes32 s;\\n        uint8 v;\\n\\n        // ecrecover takes the signature parameters, and the only way to get them\\n        // currently is to use assembly.\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            r := mload(add(signature, 0x20))\\n            s := mload(add(signature, 0x40))\\n            v := byte(0, mload(add(signature, 0x60)))\\n        }\\n\\n        return recover(hash, v, r, s);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover-bytes32-bytes-} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     */\\n    function recover(bytes32 hash, uint8 v, bytes32 r, bytes32 s) internal pure returns (address) {\\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\\n        // the valid range for s in (281): 0 < s < secp256k1n ÷ 2 + 1, and for v in (282): v ∈ {27, 28}. Most\\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\\n        //\\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\\n        // these malleable signatures as well.\\n        require(uint256(s) <= 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0, \\\"ECDSA: invalid signature 's' value\\\");\\n        require(v == 27 || v == 28, \\\"ECDSA: invalid signature 'v' value\\\");\\n\\n        // If the signature is valid (and not malleable), return the signer address\\n        address signer = ecrecover(hash, v, r, s);\\n        require(signer != address(0), \\\"ECDSA: invalid signature\\\");\\n\\n        return signer;\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\\n     * replicates the behavior of the\\n     * https://github.com/ethereum/wiki/wiki/JSON-RPC#eth_sign[`eth_sign`]\\n     * JSON-RPC method.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\\n        // 32 is the length in bytes of hash,\\n        // enforced by the type signature above\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n32\\\", hash));\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/math/SafeMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        uint256 c = a + b;\\n        if (c < a) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b > a) return (false, 0);\\n        return (true, a - b);\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) return (true, 0);\\n        uint256 c = a * b;\\n        if (c / a != b) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a / b);\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a % b);\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b <= a, \\\"SafeMath: subtraction overflow\\\");\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0) return 0;\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: division by zero\\\");\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: modulo by zero\\\");\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/Registry.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\ncontract Registry is Ownable {\\n    // Map asset addresses to indexes.\\n    mapping(address => uint32) public assetAddressToIndex;\\n    mapping(uint32 => address) public assetIndexToAddress;\\n    uint32 numAssets = 0;\\n\\n    // Valid strategies.\\n    mapping(address => uint32) public strategyAddressToIndex;\\n    mapping(uint32 => address) public strategyIndexToAddress;\\n    uint32 numStrategies = 0;\\n\\n    event AssetRegistered(address asset, uint32 assetId);\\n    event StrategyRegistered(address strategy, uint32 strategyId);\\n\\n    /**\\n     * @notice Register a asset\\n     * @param _asset The asset token address;\\n     */\\n    function registerAsset(address _asset) external onlyOwner {\\n        require(assetAddressToIndex[_asset] == 0, \\\"Asset already registered\\\");\\n\\n        // Register asset with an index >= 1 (zero is reserved).\\n        numAssets++;\\n        assetAddressToIndex[_asset] = numAssets;\\n        assetIndexToAddress[numAssets] = _asset;\\n\\n        emit AssetRegistered(_asset, numAssets);\\n    }\\n\\n    /**\\n     * @notice Register a strategy\\n     * @param _strategy The strategy contract address;\\n     */\\n    function registerStrategy(address _strategy) external onlyOwner {\\n        require(strategyAddressToIndex[_strategy] == 0, \\\"Strategy already registered\\\");\\n\\n        // Register strategy with an index >= 1 (zero is reserved).\\n        numStrategies++;\\n        strategyAddressToIndex[_strategy] = numStrategies;\\n        strategyIndexToAddress[numStrategies] = _strategy;\\n\\n        emit StrategyRegistered(_strategy, numStrategies);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/TransitionEvaluator.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\nimport \\\"@openzeppelin/contracts/cryptography/ECDSA.sol\\\";\\n\\n/* Internal Imports */\\nimport \\\"./libraries/DataTypes.sol\\\";\\nimport \\\"./libraries/Transitions.sol\\\";\\nimport \\\"./Registry.sol\\\";\\nimport \\\"./strategies/interfaces/IStrategy.sol\\\";\\n\\ncontract TransitionEvaluator {\\n    using SafeMath for uint256;\\n\\n    /**********************\\n     * External Functions *\\n     **********************/\\n\\n    /**\\n     * @notice Evaluate a transition.\\n     *\\n     * @param _transition The disputed transition.\\n     * @param _accountInfo The involved account from the previous transition.\\n     * @param _strategyInfo The involved strategy from the previous transition.\\n     * @param _registry The address of the Registry contract.\\n     * @return hashes of account and strategy after applying the transition.\\n     */\\n    function evaluateTransition(\\n        bytes calldata _transition,\\n        DataTypes.AccountInfo calldata _accountInfo,\\n        DataTypes.StrategyInfo calldata _strategyInfo,\\n        Registry _registry\\n    ) external view returns (bytes32[2] memory) {\\n        // Extract the transition type\\n        uint8 transitionType = Transitions.extractTransitionType(_transition);\\n        bytes32[2] memory outputs;\\n        DataTypes.AccountInfo memory updatedAccountInfo;\\n        DataTypes.StrategyInfo memory updatedStrategyInfo;\\n        // Apply the transition and record the resulting storage slots\\n        if (transitionType == Transitions.TRANSITION_TYPE_DEPOSIT) {\\n            DataTypes.DepositTransition memory deposit = Transitions.decodeDepositTransition(_transition);\\n            updatedAccountInfo = _applyDepositTransition(deposit, _accountInfo);\\n            outputs[0] = _getAccountInfoHash(updatedAccountInfo);\\n        } else if (transitionType == Transitions.TRANSITION_TYPE_WITHDRAW) {\\n            DataTypes.WithdrawTransition memory withdraw = Transitions.decodeWithdrawTransition(_transition);\\n            updatedAccountInfo = _applyWithdrawTransition(withdraw, _accountInfo);\\n            outputs[0] = _getAccountInfoHash(updatedAccountInfo);\\n        } else if (transitionType == Transitions.TRANSITION_TYPE_COMMIT) {\\n            DataTypes.CommitTransition memory commit = Transitions.decodeCommitTransition(_transition);\\n            (updatedAccountInfo, updatedStrategyInfo) = _applyCommitTransition(\\n                commit,\\n                _accountInfo,\\n                _strategyInfo,\\n                _registry\\n            );\\n            outputs[0] = _getAccountInfoHash(updatedAccountInfo);\\n            outputs[1] = _getStrategyInfoHash(updatedStrategyInfo);\\n        } else if (transitionType == Transitions.TRANSITION_TYPE_UNCOMMIT) {\\n            DataTypes.UncommitTransition memory uncommit = Transitions.decodeUncommitTransition(_transition);\\n            (updatedAccountInfo, updatedStrategyInfo) = _applyUncommitTransition(uncommit, _accountInfo, _strategyInfo);\\n            outputs[0] = _getAccountInfoHash(updatedAccountInfo);\\n            outputs[1] = _getStrategyInfoHash(updatedStrategyInfo);\\n        } else if (transitionType == Transitions.TRANSITION_TYPE_SYNC_COMMITMENT) {\\n            DataTypes.CommitmentSyncTransition memory commitmentSync =\\n                Transitions.decodeCommitmentSyncTransition(_transition);\\n            updatedStrategyInfo = _applyCommitmentSyncTransition(commitmentSync, _strategyInfo);\\n            outputs[1] = _getStrategyInfoHash(updatedStrategyInfo);\\n        } else if (transitionType == Transitions.TRANSITION_TYPE_SYNC_BALANCE) {\\n            DataTypes.BalanceSyncTransition memory balanceSync = Transitions.decodeBalanceSyncTransition(_transition);\\n            updatedStrategyInfo = _applyBalanceSyncTransition(balanceSync, _strategyInfo);\\n            outputs[1] = _getStrategyInfoHash(updatedStrategyInfo);\\n        } else {\\n            revert(\\\"Transition type not recognized\\\");\\n        }\\n        return outputs;\\n    }\\n\\n    /**\\n     * @notice Return the (stateRoot, accountId, strategyId) for this transition.\\n     */\\n    function getTransitionStateRootAndAccessIds(bytes calldata _rawTransition)\\n        external\\n        pure\\n        returns (\\n            bytes32,\\n            uint32,\\n            uint32\\n        )\\n    {\\n        // Initialize memory rawTransition\\n        bytes memory rawTransition = _rawTransition;\\n        // Initialize stateRoot and account and strategy IDs.\\n        bytes32 stateRoot;\\n        uint32 accountId;\\n        uint32 strategyId;\\n        uint8 transitionType = Transitions.extractTransitionType(rawTransition);\\n        if (transitionType == Transitions.TRANSITION_TYPE_DEPOSIT) {\\n            DataTypes.DepositTransition memory transition = Transitions.decodeDepositTransition(rawTransition);\\n            stateRoot = transition.stateRoot;\\n            accountId = transition.accountId;\\n        } else if (transitionType == Transitions.TRANSITION_TYPE_WITHDRAW) {\\n            DataTypes.WithdrawTransition memory transition = Transitions.decodeWithdrawTransition(rawTransition);\\n            stateRoot = transition.stateRoot;\\n            accountId = transition.accountId;\\n        } else if (transitionType == Transitions.TRANSITION_TYPE_COMMIT) {\\n            DataTypes.CommitTransition memory transition = Transitions.decodeCommitTransition(rawTransition);\\n            stateRoot = transition.stateRoot;\\n            accountId = transition.accountId;\\n            strategyId = transition.strategyId;\\n        } else if (transitionType == Transitions.TRANSITION_TYPE_UNCOMMIT) {\\n            DataTypes.UncommitTransition memory transition = Transitions.decodeUncommitTransition(rawTransition);\\n            stateRoot = transition.stateRoot;\\n            accountId = transition.accountId;\\n            strategyId = transition.strategyId;\\n        } else if (transitionType == Transitions.TRANSITION_TYPE_SYNC_COMMITMENT) {\\n            DataTypes.CommitmentSyncTransition memory transition =\\n                Transitions.decodeCommitmentSyncTransition(rawTransition);\\n            stateRoot = transition.stateRoot;\\n            strategyId = transition.strategyId;\\n        } else if (transitionType == Transitions.TRANSITION_TYPE_SYNC_BALANCE) {\\n            DataTypes.BalanceSyncTransition memory transition = Transitions.decodeBalanceSyncTransition(rawTransition);\\n            stateRoot = transition.stateRoot;\\n            strategyId = transition.strategyId;\\n        } else if (transitionType == Transitions.TRANSITION_TYPE_INIT) {\\n            DataTypes.InitTransition memory transition = Transitions.decodeInitTransition(rawTransition);\\n            stateRoot = transition.stateRoot;\\n        } else {\\n            revert(\\\"Transition type not recognized\\\");\\n        }\\n        return (stateRoot, accountId, strategyId);\\n    }\\n\\n    /*********************\\n     * Private Functions *\\n     *********************/\\n\\n    /**\\n     * @notice Apply a DepositTransition.\\n     *\\n     * @param _transition The disputed transition.\\n     * @param _accountInfo The involved account from the previous transition.\\n     * @return new account info after apply the disputed transition\\n     */\\n    function _applyDepositTransition(\\n        DataTypes.DepositTransition memory _transition,\\n        DataTypes.AccountInfo memory _accountInfo\\n    ) private pure returns (DataTypes.AccountInfo memory) {\\n        if (_accountInfo.account == address(0)) {\\n            // first time deposit of this account\\n            require(_accountInfo.accountId == 0, \\\"empty account id must be zero\\\");\\n            require(_accountInfo.idleAssets.length == 0, \\\"empty account idleAssets must be empty\\\");\\n            require(_accountInfo.stTokens.length == 0, \\\"empty account stTokens must be empty\\\");\\n            require(_accountInfo.timestamp == 0, \\\"empty account timestamp must be zero\\\");\\n            _accountInfo.account = _transition.account;\\n            _accountInfo.accountId = _transition.accountId;\\n        } else {\\n            require(_accountInfo.account == _transition.account, \\\"account address not match\\\");\\n            require(_accountInfo.accountId == _transition.accountId, \\\"account id not match\\\");\\n        }\\n        if (_transition.assetId >= _accountInfo.idleAssets.length) {\\n            uint256[] memory idleAssets = new uint256[](_transition.assetId + 1);\\n            for (uint256 i = 0; i < _accountInfo.idleAssets.length; i++) {\\n                idleAssets[i] = _accountInfo.idleAssets[i];\\n            }\\n            _accountInfo.idleAssets = idleAssets;\\n        }\\n        _accountInfo.idleAssets[_transition.assetId] = _accountInfo.idleAssets[_transition.assetId].add(\\n            _transition.amount\\n        );\\n\\n        return _accountInfo;\\n    }\\n\\n    /**\\n     * @notice Apply a WithdrawTransition.\\n     *\\n     * @param _transition The disputed transition.\\n     * @param _accountInfo The involved account from the previous transition.\\n     * @return new account info after apply the disputed transition\\n     */\\n    function _applyWithdrawTransition(\\n        DataTypes.WithdrawTransition memory _transition,\\n        DataTypes.AccountInfo memory _accountInfo\\n    ) private pure returns (DataTypes.AccountInfo memory) {\\n        bytes32 txHash =\\n            keccak256(\\n                abi.encodePacked(\\n                    _transition.transitionType,\\n                    _transition.account,\\n                    _transition.assetId,\\n                    _transition.amount,\\n                    _transition.timestamp\\n                )\\n            );\\n        bytes32 prefixedHash = ECDSA.toEthSignedMessageHash(txHash);\\n        require(\\n            ECDSA.recover(prefixedHash, _transition.signature) == _accountInfo.account,\\n            \\\"Withdraw signature is invalid\\\"\\n        );\\n\\n        require(_accountInfo.accountId == _transition.accountId, \\\"account id not match\\\");\\n        require(_accountInfo.timestamp < _transition.timestamp, \\\"timestamp should monotonically increasing\\\");\\n        _accountInfo.timestamp = _transition.timestamp;\\n\\n        _accountInfo.idleAssets[_transition.assetId] = _accountInfo.idleAssets[_transition.assetId].sub(\\n            _transition.amount\\n        );\\n\\n        return _accountInfo;\\n    }\\n\\n    /**\\n     * @notice Apply a CommitTransition.\\n     *\\n     * @param _transition The disputed transition.\\n     * @param _accountInfo The involved account from the previous transition.\\n     * @param _strategyInfo The involved strategy from the previous transition.\\n     * @return new account and strategy info after apply the disputed transition\\n     */\\n    function _applyCommitTransition(\\n        DataTypes.CommitTransition memory _transition,\\n        DataTypes.AccountInfo memory _accountInfo,\\n        DataTypes.StrategyInfo memory _strategyInfo,\\n        Registry _registry\\n    ) private view returns (DataTypes.AccountInfo memory, DataTypes.StrategyInfo memory) {\\n        bytes32 txHash =\\n            keccak256(\\n                abi.encodePacked(\\n                    _transition.transitionType,\\n                    _transition.strategyId,\\n                    _transition.assetAmount,\\n                    _transition.timestamp\\n                )\\n            );\\n        bytes32 prefixedHash = ECDSA.toEthSignedMessageHash(txHash);\\n        require(\\n            ECDSA.recover(prefixedHash, _transition.signature) == _accountInfo.account,\\n            \\\"Commit signature is invalid\\\"\\n        );\\n\\n        uint256 newStToken;\\n        if (_strategyInfo.assetBalance == 0 || _strategyInfo.stTokenSupply == 0) {\\n            require(_strategyInfo.stTokenSupply == 0, \\\"empty strategy stTokenSupply must be zero\\\");\\n            require(_strategyInfo.pendingCommitAmount == 0, \\\"empty strategy pendingCommitAmount must be zero\\\");\\n            if (_strategyInfo.assetId == 0) {\\n                // first time commit of new strategy\\n                require(_strategyInfo.pendingUncommitAmount == 0, \\\"new strategy pendingUncommitAmount must be zero\\\");\\n                address strategyAddr = _registry.strategyIndexToAddress(_transition.strategyId);\\n                address assetAddr = IStrategy(strategyAddr).getAssetAddress();\\n                _strategyInfo.assetId = _registry.assetAddressToIndex(assetAddr);\\n            }\\n            newStToken = _transition.assetAmount;\\n        } else {\\n            newStToken = _transition.assetAmount.mul(_strategyInfo.stTokenSupply).div(_strategyInfo.assetBalance);\\n        }\\n\\n        _accountInfo.idleAssets[_strategyInfo.assetId] = _accountInfo.idleAssets[_strategyInfo.assetId].sub(\\n            _transition.assetAmount\\n        );\\n\\n        if (_transition.strategyId >= _accountInfo.stTokens.length) {\\n            uint256[] memory stTokens = new uint256[](_transition.strategyId + 1);\\n            for (uint256 i = 0; i < _accountInfo.stTokens.length; i++) {\\n                stTokens[i] = _accountInfo.stTokens[i];\\n            }\\n            _accountInfo.stTokens = stTokens;\\n        }\\n        _accountInfo.stTokens[_transition.strategyId] = _accountInfo.stTokens[_transition.strategyId].add(newStToken);\\n        require(_accountInfo.accountId == _transition.accountId, \\\"account id not match\\\");\\n        require(_accountInfo.timestamp < _transition.timestamp, \\\"timestamp should monotonically increasing\\\");\\n        _accountInfo.timestamp = _transition.timestamp;\\n\\n        _strategyInfo.stTokenSupply = _strategyInfo.stTokenSupply.add(newStToken);\\n        _strategyInfo.assetBalance = _strategyInfo.assetBalance.add(_transition.assetAmount);\\n        _strategyInfo.pendingCommitAmount = _strategyInfo.pendingCommitAmount.add(_transition.assetAmount);\\n\\n        return (_accountInfo, _strategyInfo);\\n    }\\n\\n    /**\\n     * @notice Apply a UncommitTransition.\\n     *\\n     * @param _transition The disputed transition.\\n     * @param _accountInfo The involved account from the previous transition.\\n     * @param _strategyInfo The involved strategy from the previous transition.\\n     * @return new account and strategy info after apply the disputed transition\\n     */\\n    function _applyUncommitTransition(\\n        DataTypes.UncommitTransition memory _transition,\\n        DataTypes.AccountInfo memory _accountInfo,\\n        DataTypes.StrategyInfo memory _strategyInfo\\n    ) private pure returns (DataTypes.AccountInfo memory, DataTypes.StrategyInfo memory) {\\n        bytes32 txHash =\\n            keccak256(\\n                abi.encodePacked(\\n                    _transition.transitionType,\\n                    _transition.strategyId,\\n                    _transition.stTokenAmount,\\n                    _transition.timestamp\\n                )\\n            );\\n        bytes32 prefixedHash = ECDSA.toEthSignedMessageHash(txHash);\\n        require(\\n            ECDSA.recover(prefixedHash, _transition.signature) == _accountInfo.account,\\n            \\\"Uncommit signature is invalid\\\"\\n        );\\n\\n        uint256 newIdleAsset =\\n            _transition.stTokenAmount.mul(_strategyInfo.assetBalance).div(_strategyInfo.stTokenSupply);\\n\\n        _accountInfo.idleAssets[_strategyInfo.assetId] = _accountInfo.idleAssets[_strategyInfo.assetId].add(\\n            newIdleAsset\\n        );\\n        _accountInfo.stTokens[_transition.strategyId] = _accountInfo.stTokens[_transition.strategyId].sub(\\n            _transition.stTokenAmount\\n        );\\n        require(_accountInfo.accountId == _transition.accountId, \\\"account id not match\\\");\\n        require(_accountInfo.timestamp < _transition.timestamp, \\\"timestamp should monotonically increasing\\\");\\n        _accountInfo.timestamp = _transition.timestamp;\\n\\n        _strategyInfo.stTokenSupply = _strategyInfo.stTokenSupply.sub(_transition.stTokenAmount);\\n        _strategyInfo.assetBalance = _strategyInfo.assetBalance.sub(newIdleAsset);\\n        _strategyInfo.pendingUncommitAmount = _strategyInfo.pendingUncommitAmount.add(newIdleAsset);\\n\\n        return (_accountInfo, _strategyInfo);\\n    }\\n\\n    /**\\n     * @notice Apply a CommitmentSyncTransition.\\n     *\\n     * @param _transition The disputed transition.\\n     * @param _strategyInfo The involved strategy from the previous transition.\\n     * @return new strategy info after apply the disputed transition\\n     */\\n    function _applyCommitmentSyncTransition(\\n        DataTypes.CommitmentSyncTransition memory _transition,\\n        DataTypes.StrategyInfo memory _strategyInfo\\n    ) private pure returns (DataTypes.StrategyInfo memory) {\\n        require(\\n            _transition.pendingCommitAmount == _strategyInfo.pendingCommitAmount,\\n            \\\"pending commitment amount not match\\\"\\n        );\\n        require(\\n            _transition.pendingUncommitAmount == _strategyInfo.pendingUncommitAmount,\\n            \\\"pending uncommitment amount not match\\\"\\n        );\\n        _strategyInfo.pendingCommitAmount = 0;\\n        _strategyInfo.pendingUncommitAmount = 0;\\n\\n        return _strategyInfo;\\n    }\\n\\n    /**\\n     * @notice Apply a BalanceSyncTransition.\\n     *\\n     * @param _transition The disputed transition.\\n     * @param _strategyInfo The involved strategy from the previous transition.\\n     * @return new strategy info after apply the disputed transition\\n     */\\n    function _applyBalanceSyncTransition(\\n        DataTypes.BalanceSyncTransition memory _transition,\\n        DataTypes.StrategyInfo memory _strategyInfo\\n    ) private pure returns (DataTypes.StrategyInfo memory) {\\n        if (_transition.newAssetDelta >= 0) {\\n            uint256 delta = uint256(_transition.newAssetDelta);\\n            _strategyInfo.assetBalance = _strategyInfo.assetBalance.add(delta);\\n        } else {\\n            uint256 delta = uint256(-_transition.newAssetDelta);\\n            _strategyInfo.assetBalance = _strategyInfo.assetBalance.sub(delta);\\n        }\\n        return _strategyInfo;\\n    }\\n\\n    /**\\n     * @notice Get the hash of the AccountInfo.\\n     * @param _accountInfo Account info\\n     */\\n    function _getAccountInfoHash(DataTypes.AccountInfo memory _accountInfo) private pure returns (bytes32) {\\n        // Here we don't use `abi.encode([struct])` because it's not clear\\n        // how to generate that encoding client-side.\\n        return\\n            keccak256(\\n                abi.encode(\\n                    _accountInfo.account,\\n                    _accountInfo.accountId,\\n                    _accountInfo.idleAssets,\\n                    _accountInfo.stTokens,\\n                    _accountInfo.timestamp\\n                )\\n            );\\n    }\\n\\n    /**\\n     * Get the hash of the StrategyInfo.\\n     */\\n    /**\\n     * @notice Get the hash of the StrategyInfo.\\n     * @param _strategyInfo Strategy info\\n     */\\n    function _getStrategyInfoHash(DataTypes.StrategyInfo memory _strategyInfo) private pure returns (bytes32) {\\n        // Here we don't use `abi.encode([struct])` because it's not clear\\n        // how to generate that encoding client-side.\\n        return\\n            keccak256(\\n                abi.encode(\\n                    _strategyInfo.assetId,\\n                    _strategyInfo.assetBalance,\\n                    _strategyInfo.stTokenSupply,\\n                    _strategyInfo.pendingCommitAmount,\\n                    _strategyInfo.pendingUncommitAmount\\n                )\\n            );\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/libraries/DataTypes.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nlibrary DataTypes {\\n    struct Block {\\n        bytes32 rootHash;\\n        bytes32 intentHash; // hash of L2-to-L1 commitment sync transitions\\n        uint128 blockTime; // blockNum when this rollup block is committed\\n        uint128 blockSize; // number of transitions in the block\\n    }\\n\\n    struct InitTransition {\\n        uint8 transitionType;\\n        bytes32 stateRoot;\\n    }\\n\\n    struct DepositTransition {\\n        uint8 transitionType;\\n        bytes32 stateRoot;\\n        address account; // must provide L1 address for \\\"pending deposit\\\" handling\\n        uint32 accountId; // needed for transition evaluation in case of dispute\\n        uint32 assetId;\\n        uint256 amount;\\n    }\\n\\n    struct WithdrawTransition {\\n        uint8 transitionType;\\n        bytes32 stateRoot;\\n        address account; // must provide L1 target address for \\\"pending withdraw\\\" handling\\n        uint32 accountId;\\n        uint32 assetId;\\n        uint256 amount;\\n        uint64 timestamp; // Unix epoch (msec, UTC)\\n        bytes signature;\\n    }\\n\\n    struct CommitTransition {\\n        uint8 transitionType;\\n        bytes32 stateRoot;\\n        uint32 accountId;\\n        uint32 strategyId;\\n        uint256 assetAmount;\\n        uint64 timestamp; // Unix epoch (msec, UTC)\\n        bytes signature;\\n    }\\n\\n    struct UncommitTransition {\\n        uint8 transitionType;\\n        bytes32 stateRoot;\\n        uint32 accountId;\\n        uint32 strategyId;\\n        uint256 stTokenAmount;\\n        uint64 timestamp; // Unix epoch (msec, UTC)\\n        bytes signature;\\n    }\\n\\n    struct BalanceSyncTransition {\\n        uint8 transitionType;\\n        bytes32 stateRoot;\\n        uint32 strategyId;\\n        int256 newAssetDelta;\\n    }\\n\\n    struct CommitmentSyncTransition {\\n        uint8 transitionType;\\n        bytes32 stateRoot;\\n        uint32 strategyId;\\n        uint256 pendingCommitAmount;\\n        uint256 pendingUncommitAmount;\\n    }\\n\\n    struct AccountInfo {\\n        address account;\\n        uint32 accountId; // mapping only on L2 must be part of stateRoot\\n        uint256[] idleAssets; // indexed by assetId\\n        uint256[] stTokens; // indexed by strategyId\\n        uint64 timestamp; // Unix epoch (msec, UTC)\\n    }\\n\\n    struct StrategyInfo {\\n        uint32 assetId;\\n        uint256 assetBalance;\\n        uint256 stTokenSupply;\\n        uint256 pendingCommitAmount;\\n        uint256 pendingUncommitAmount;\\n    }\\n\\n    struct TransitionProof {\\n        bytes transition;\\n        uint256 blockId;\\n        uint32 index;\\n        bytes32[] siblings;\\n    }\\n\\n    // Even when the disputed transition only affects an account without not a strategy\\n    // (e.g. deposit), or only affects a strategy without an account (e.g. syncBalance),\\n    // both AccountProof and StrategyProof must be sent to at least give the root hashes\\n    // of the two separate Merkle trees (account and strategy).\\n    // Each transition stateRoot = hash(accountStateRoot, strategyStateRoot).\\n    struct AccountProof {\\n        bytes32 stateRoot; // for the account Merkle tree\\n        AccountInfo value;\\n        uint32 index;\\n        bytes32[] siblings;\\n    }\\n\\n    struct StrategyProof {\\n        bytes32 stateRoot; // for the strategy Merkle tree\\n        StrategyInfo value;\\n        uint32 index;\\n        bytes32[] siblings;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/libraries/Transitions.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"../libraries/DataTypes.sol\\\";\\n\\nlibrary Transitions {\\n    // Transition Types\\n    uint8 public constant TRANSITION_TYPE_INVALID = 0;\\n    uint8 public constant TRANSITION_TYPE_DEPOSIT = 1;\\n    uint8 public constant TRANSITION_TYPE_WITHDRAW = 2;\\n    uint8 public constant TRANSITION_TYPE_COMMIT = 3;\\n    uint8 public constant TRANSITION_TYPE_UNCOMMIT = 4;\\n    uint8 public constant TRANSITION_TYPE_SYNC_COMMITMENT = 5;\\n    uint8 public constant TRANSITION_TYPE_SYNC_BALANCE = 6;\\n    uint8 public constant TRANSITION_TYPE_INIT = 7;\\n\\n    function extractTransitionType(bytes memory _bytes) internal pure returns (uint8) {\\n        uint8 transitionType;\\n        assembly {\\n            transitionType := mload(add(_bytes, 0x20))\\n        }\\n        return transitionType;\\n    }\\n\\n    function decodeDepositTransition(bytes memory _rawBytes)\\n        internal\\n        pure\\n        returns (DataTypes.DepositTransition memory)\\n    {\\n        (uint8 transitionType, bytes32 stateRoot, address account, uint32 accountId, uint32 assetId, uint256 amount) =\\n            abi.decode((_rawBytes), (uint8, bytes32, address, uint32, uint32, uint256));\\n        DataTypes.DepositTransition memory transition =\\n            DataTypes.DepositTransition(transitionType, stateRoot, account, accountId, assetId, amount);\\n        return transition;\\n    }\\n\\n    function decodeWithdrawTransition(bytes memory _rawBytes)\\n        internal\\n        pure\\n        returns (DataTypes.WithdrawTransition memory)\\n    {\\n        (\\n            uint8 transitionType,\\n            bytes32 stateRoot,\\n            address account,\\n            uint32 accountId,\\n            uint32 assetId,\\n            uint256 amount,\\n            uint64 timestamp,\\n            bytes memory signature\\n        ) = abi.decode((_rawBytes), (uint8, bytes32, address, uint32, uint32, uint256, uint64, bytes));\\n        DataTypes.WithdrawTransition memory transition =\\n            DataTypes.WithdrawTransition(\\n                transitionType,\\n                stateRoot,\\n                account,\\n                accountId,\\n                assetId,\\n                amount,\\n                timestamp,\\n                signature\\n            );\\n        return transition;\\n    }\\n\\n    function decodeCommitTransition(bytes memory _rawBytes) internal pure returns (DataTypes.CommitTransition memory) {\\n        (\\n            uint8 transitionType,\\n            bytes32 stateRoot,\\n            uint32 accountId,\\n            uint32 strategyId,\\n            uint256 assetAmount,\\n            uint64 timestamp,\\n            bytes memory signature\\n        ) = abi.decode((_rawBytes), (uint8, bytes32, uint32, uint32, uint256, uint64, bytes));\\n        DataTypes.CommitTransition memory transition =\\n            DataTypes.CommitTransition(\\n                transitionType,\\n                stateRoot,\\n                accountId,\\n                strategyId,\\n                assetAmount,\\n                timestamp,\\n                signature\\n            );\\n        return transition;\\n    }\\n\\n    function decodeUncommitTransition(bytes memory _rawBytes)\\n        internal\\n        pure\\n        returns (DataTypes.UncommitTransition memory)\\n    {\\n        (\\n            uint8 transitionType,\\n            bytes32 stateRoot,\\n            uint32 accountId,\\n            uint32 strategyId,\\n            uint256 stTokenAmount,\\n            uint64 timestamp,\\n            bytes memory signature\\n        ) = abi.decode((_rawBytes), (uint8, bytes32, uint32, uint32, uint256, uint64, bytes));\\n        DataTypes.UncommitTransition memory transition =\\n            DataTypes.UncommitTransition(\\n                transitionType,\\n                stateRoot,\\n                accountId,\\n                strategyId,\\n                stTokenAmount,\\n                timestamp,\\n                signature\\n            );\\n        return transition;\\n    }\\n\\n    function decodeCommitmentSyncTransition(bytes memory _rawBytes)\\n        internal\\n        pure\\n        returns (DataTypes.CommitmentSyncTransition memory)\\n    {\\n        (\\n            uint8 transitionType,\\n            bytes32 stateRoot,\\n            uint32 strategyId,\\n            uint256 pendingCommitAmount,\\n            uint256 pendingUncommitAmount\\n        ) = abi.decode((_rawBytes), (uint8, bytes32, uint32, uint256, uint256));\\n        DataTypes.CommitmentSyncTransition memory transition =\\n            DataTypes.CommitmentSyncTransition(\\n                transitionType,\\n                stateRoot,\\n                strategyId,\\n                pendingCommitAmount,\\n                pendingUncommitAmount\\n            );\\n        return transition;\\n    }\\n\\n    function decodeBalanceSyncTransition(bytes memory _rawBytes)\\n        internal\\n        pure\\n        returns (DataTypes.BalanceSyncTransition memory)\\n    {\\n        (uint8 transitionType, bytes32 stateRoot, uint32 strategyId, int256 newAssetDelta) =\\n            abi.decode((_rawBytes), (uint8, bytes32, uint32, int256));\\n        DataTypes.BalanceSyncTransition memory transition =\\n            DataTypes.BalanceSyncTransition(transitionType, stateRoot, strategyId, newAssetDelta);\\n        return transition;\\n    }\\n\\n    function decodeInitTransition(bytes memory _rawBytes) internal pure returns (DataTypes.InitTransition memory) {\\n        (uint8 transitionType, bytes32 stateRoot) = abi.decode((_rawBytes), (uint8, bytes32));\\n        DataTypes.InitTransition memory transition = DataTypes.InitTransition(transitionType, stateRoot);\\n        return transition;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/strategies/interfaces/IStrategy.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @title Interface for DeFi strategies\\n *\\n * @notice Strategy provides abstraction for a DeFi strategy. A single type of asset token can be committed to or\\n * uncommitted from a strategy per instructions from L2. Periodically, the yield is reflected in the asset balance and\\n * synced back to L2.\\n */\\ninterface IStrategy {\\n    event Committed(uint256 commitAmount);\\n\\n    event UnCommitted(uint256 uncommitAmount);\\n\\n    event ControllerChanged(address previousController, address newController);\\n\\n    /**\\n     * @dev Returns the address of the asset token.\\n     */\\n    function getAssetAddress() external view returns (address);\\n\\n    /**\\n     * @dev Harvests protocol tokens and update the asset balance.\\n     */\\n    function harvest() external;\\n\\n    /**\\n     * @dev Returns the asset balance. May sync with the protocol to update the balance.\\n     */\\n    function syncBalance() external returns (uint256);\\n\\n    /**\\n     * @dev Commits to strategy per instructions from L2.\\n     *\\n     * @param commitAmount The aggregated asset amount to commit.\\n     */\\n    function aggregateCommit(uint256 commitAmount) external;\\n\\n    /**\\n     * @dev Uncommits from strategy per instructions from L2.\\n     *\\n     * @param uncommitAmount The aggregated asset amount to uncommit.\\n     */\\n    function aggregateUncommit(uint256 uncommitAmount) external;\\n}\\n\"\r\n    }\r\n  }\r\n}}","ABI":"[{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"_transition\",\"type\":\"bytes\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"accountId\",\"type\":\"uint32\"},{\"internalType\":\"uint256[]\",\"name\":\"idleAssets\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"stTokens\",\"type\":\"uint256[]\"},{\"internalType\":\"uint64\",\"name\":\"timestamp\",\"type\":\"uint64\"}],\"internalType\":\"struct DataTypes.AccountInfo\",\"name\":\"_accountInfo\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint32\",\"name\":\"assetId\",\"type\":\"uint32\"},{\"internalType\":\"uint256\",\"name\":\"assetBalance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stTokenSupply\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"pendingCommitAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"pendingUncommitAmount\",\"type\":\"uint256\"}],\"internalType\":\"struct DataTypes.StrategyInfo\",\"name\":\"_strategyInfo\",\"type\":\"tuple\"},{\"internalType\":\"contract Registry\",\"name\":\"_registry\",\"type\":\"address\"}],\"name\":\"evaluateTransition\",\"outputs\":[{\"internalType\":\"bytes32[2]\",\"name\":\"\",\"type\":\"bytes32[2]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"_rawTransition\",\"type\":\"bytes\"}],\"name\":\"getTransitionStateRootAndAccessIds\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"},{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"}]","ContractName":"TransitionEvaluator","CompilerVersion":"v0.7.6+commit.7338295f","OptimizationUsed":"1","Runs":"800","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":""}]}