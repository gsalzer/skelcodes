{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"/C/Users/david/Downloads/fuse-contracts-1.0.0/contracts/FusePoolDirectory.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.6.12;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/Initializable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\n\\nimport \\\"./external/compound/Comptroller.sol\\\";\\nimport \\\"./external/compound/Unitroller.sol\\\";\\nimport \\\"./external/compound/PriceOracle.sol\\\";\\n\\n/**\\n * @title FusePoolDirectory\\n * @author David Lucid <david@rari.capital> (https://github.com/davidlucid)\\n * @notice FusePoolDirectory is a directory for Fuse interest rate pools.\\n */\\ncontract FusePoolDirectory is OwnableUpgradeable {\\n    /**\\n     * @dev Initializes a deployer whitelist if desired.\\n     * @param _enforceDeployerWhitelist Boolean indicating if the deployer whitelist is to be enforced.\\n     * @param _deployerWhitelist Array of Ethereum accounts to be whitelisted.\\n     */\\n    function initialize(bool _enforceDeployerWhitelist, address[] memory _deployerWhitelist) public initializer {\\n        __Ownable_init();\\n        enforceDeployerWhitelist = _enforceDeployerWhitelist;\\n        for (uint256 i = 0; i < _deployerWhitelist.length; i++) deployerWhitelist[_deployerWhitelist[i]] = true;\\n    }\\n\\n    /**\\n     * @dev Struct for a Fuse interest rate pool.\\n     */\\n    struct FusePool {\\n        string name;\\n        address creator;\\n        address comptroller;\\n        uint256 blockPosted;\\n        uint256 timestampPosted;\\n    }\\n\\n    /**\\n     * @dev Array of Fuse interest rate pools.\\n     */\\n    FusePool[] public pools;\\n\\n    /**\\n     * @dev Maps Ethereum accounts to arrays of Fuse pool indexes.\\n     */\\n    mapping(address => uint256[]) private _poolsByAccount;\\n\\n    /**\\n     * @dev Maps Fuse pool Comptroller addresses to bools indicating if they have been posted to the directory.\\n     */\\n    mapping(address => bool) public poolExists;\\n\\n    /**\\n     * @dev Emitted when a new Fuse pool is added to the directory.\\n     */\\n    event PoolRegistered(uint256 index, FusePool pool);\\n\\n    /**\\n     * @dev Booleans indicating if the deployer whitelist is enforced.\\n     */\\n    bool public enforceDeployerWhitelist;\\n\\n    /**\\n     * @dev Maps Ethereum accounts to booleans indicating if they are allowed to deploy pools.\\n     */\\n    mapping(address => bool) public deployerWhitelist;\\n\\n    /**\\n     * @dev Controls if the deployer whitelist is to be enforced.\\n     * @param _enforceDeployerWhitelist Boolean indicating if the deployer whitelist is to be enforced.\\n     */\\n    function _setDeployerWhitelistEnforcement(bool _enforceDeployerWhitelist) external onlyOwner {\\n        enforceDeployerWhitelist = _enforceDeployerWhitelist;\\n    }\\n\\n    /**\\n     * @dev Adds Ethereum accounts to the deployer whitelist.\\n     * @param deployers Array of Ethereum accounts to be whitelisted.\\n     */\\n    function _whitelistDeployers(address[] memory deployers) external onlyOwner {\\n        require(deployers.length > 0, \\\"No deployers supplied.\\\");\\n        for (uint256 i = 0; i < deployers.length; i++) deployerWhitelist[deployers[i]] = true;\\n    }\\n\\n    /**\\n     * @dev Adds a new Fuse pool to the directory.\\n     * @param name The name of the pool.\\n     * @param comptroller The pool's Comptroller proxy contract address.\\n     * @return The index of the registered Fuse pool.\\n     */\\n    function registerPool(string memory name, address comptroller) external returns (uint256) {\\n        require(msg.sender == Comptroller(comptroller).admin(), \\\"Pool admin is not the sender.\\\");\\n        return _registerPool(name, comptroller);\\n    }\\n\\n    /**\\n     * @dev Adds a new Fuse pool to the directory (without checking msg.sender).\\n     * @param name The name of the pool.\\n     * @param comptroller The pool's Comptroller proxy contract address.\\n     * @return The index of the registered Fuse pool.\\n     */\\n    function _registerPool(string memory name, address comptroller) internal returns (uint256) {\\n        require(!poolExists[comptroller], \\\"Pool already exists in the directory.\\\");\\n        require(!enforceDeployerWhitelist || deployerWhitelist[msg.sender], \\\"Sender is not on deployer whitelist.\\\");\\n        FusePool memory pool = FusePool(name, msg.sender, comptroller, block.number, block.timestamp);\\n        pools.push(pool);\\n        _poolsByAccount[msg.sender].push(pools.length - 1);\\n        poolExists[comptroller] = true;\\n        emit PoolRegistered(pools.length - 1, pool);\\n        return pools.length - 1;\\n    }\\n\\n    /**\\n     * @dev Deploys a new Fuse pool and adds to the directory.\\n     * @param name The name of the pool.\\n     * @param implementation The Comptroller implementation contract address.\\n     * @param enforceWhitelist Boolean indicating if the pool's supplier/borrower whitelist is to be enforced.\\n     * @param closeFactor The pool's close factor (scaled by 1e18).\\n     * @param maxAssets Maximum number of assets in the pool.\\n     * @param liquidationIncentive The pool's liquidation incentive (scaled by 1e18).\\n     * @param priceOracle The pool's PriceOracle contract address.\\n     * @return The index of the registered Fuse pool and the Unitroller proxy address.\\n     */\\n    function deployPool(string memory name, address implementation, bool enforceWhitelist, uint256 closeFactor, uint256 maxAssets, uint256 liquidationIncentive, address priceOracle) external returns (uint256, address) {\\n        // Input validation\\n        require(implementation != address(0), \\\"No Comptroller implementation contract address specified.\\\");\\n        require(priceOracle != address(0), \\\"No PriceOracle contract address specified.\\\");\\n\\n        // Deploy Unitroller using msg.sender, name, and block.number as a salt\\n        bytes memory unitrollerCreationCode = hex\\\"60806040526001805460ff60a81b1960ff60a01b19909116600160a01b1716600160a81b17905534801561003257600080fd5b50600080546001600160a01b031916331790556107c6806100546000396000f3fe6080604052600436106100a75760003560e01c8063c1e8033411610064578063c1e8033414610208578063dcfbc0c71461021d578063e16d2c3214610232578063e992a04114610247578063e9c714f21461027a578063f851a4401461028f576100a7565b80630a755ec21461012a57806326782247146101535780632f1069ba14610184578063b71d1a0c14610199578063bb82aa5e146101de578063bf0f1d7b146101f3575b6002546040516000916001600160a01b031690829036908083838082843760405192019450600093509091505080830381855af49150503d806000811461010a576040519150601f19603f3d011682016040523d82523d6000602084013e61010f565b606091505b505090506040513d6000823e818015610126573d82f35b3d82fd5b34801561013657600080fd5b5061013f6102a4565b604080519115158252519081900360200190f35b34801561015f57600080fd5b506101686102b4565b604080516001600160a01b039092168252519081900360200190f35b34801561019057600080fd5b5061013f6102c3565b3480156101a557600080fd5b506101cc600480360360208110156101bc57600080fd5b50356001600160a01b03166102d3565b60408051918252519081900360200190f35b3480156101ea57600080fd5b5061016861035f565b3480156101ff57600080fd5b506101cc61036e565b34801561021457600080fd5b506101cc6103e6565b34801561022957600080fd5b506101686104d9565b34801561023e57600080fd5b506101cc6104e8565b34801561025357600080fd5b506101cc6004803603602081101561026a57600080fd5b50356001600160a01b0316610557565b34801561028657600080fd5b506101cc6105d6565b34801561029b57600080fd5b506101686106bc565b600154600160a81b900460ff1681565b6001546001600160a01b031681565b600154600160a01b900460ff1681565b60006102dd6106cb565b6102f4576102ed6001600e610724565b905061035a565b600180546001600160a01b038481166001600160a01b0319831681179093556040805191909216808252602082019390935281517fca4f2f25d0898edd99413412fb94012f9e54ec8142f9b093e7720646a95b16a9929181900390910190a160005b9150505b919050565b6002546001600160a01b031681565b60006103786106cb565b61038f5761038860016004610724565b90506103e3565b600154600160a81b900460ff166103a7576000610388565b6001805460ff60a81b191690556040517fc8ed31b431dd871a74f7e15bc645f3dbdd94636e59d7633a4407b044524eb45990600090a160005b90505b90565b6003546000906001600160a01b03163314158061040c57506003546001600160a01b0316155b1561041c57610388600180610724565b60028054600380546001600160a01b038082166001600160a01b031980861682179687905590921690925560408051938316808552949092166020840152815190927fd604de94d45953f9138079ec1b82d533cb2160c906d1076d1f7ed54befbca97a92908290030190a1600354604080516001600160a01b038085168252909216602083015280517fe945ccee5d701fc83f9b8aa8ca94ea4219ec1fcbd4f4cab4f0ea57c5c3e1d8159281900390910190a160005b9250505090565b6003546001600160a01b031681565b60006104f26106cb565b6105025761038860016004610724565b600154600160a01b900460ff1661051a576000610388565b6001805460ff60a01b191690556040517f9f60987413d3c28e8232c3eec2559453cc8c6805ff81501e344a133944113e3590600090a160006103e0565b60006105616106cb565b610571576102ed6001600f610724565b600380546001600160a01b038481166001600160a01b0319831617928390556040805192821680845293909116602083015280517fe945ccee5d701fc83f9b8aa8ca94ea4219ec1fcbd4f4cab4f0ea57c5c3e1d8159281900390910190a16000610356565b6001546000906001600160a01b0316331415806105f1575033155b156106025761038860016000610724565b60008054600180546001600160a01b038082166001600160a01b031980861682179687905590921690925560408051938316808552949092166020840152815190927ff9ffabca9c8276e99321725bcb43fb076a6c66a54b7f21c4e8146d8519b417dc92908290030190a1600154604080516001600160a01b038085168252909216602083015280517fca4f2f25d0898edd99413412fb94012f9e54ec8142f9b093e7720646a95b16a99281900390910190a160006104d2565b6000546001600160a01b031681565b600080546001600160a01b0316331480156106ef5750600154600160a81b900460ff165b806103e057503373a731585ab05fc9f83555cf9bff8f58ee94e18f851480156103e0575050600154600160a01b900460ff1690565b60007f45b96fe442630264581b197e84bbada861235052c5a1aadfff9ea4e40a969aa083601481111561075357fe5b83601581111561075f57fe5b604080519283526020830191909152600082820152519081900360600190a182601481111561078a57fe5b939250505056fea265627a7a723158201722092063f5443fefa34106ef6ffc478ecda488ff039bdba53a48a8b868b8a064736f6c63430005110032\\\";\\n        bytes32 salt = keccak256(abi.encodePacked(msg.sender, name, block.number));\\n        address proxy;\\n\\n        assembly {\\n            proxy := create2(0, add(unitrollerCreationCode, 32), mload(unitrollerCreationCode), salt)\\n        }\\n\\n        // Setup Unitroller\\n        Unitroller unitroller = Unitroller(proxy);\\n        unitroller._setPendingImplementation(implementation);\\n        Comptroller comptrollerImplementation = Comptroller(implementation);\\n        comptrollerImplementation._become(unitroller);\\n        Comptroller comptrollerProxy = Comptroller(proxy);\\n\\n        // Set pool parameters\\n        comptrollerProxy._setCloseFactor(closeFactor);\\n        comptrollerProxy._setMaxAssets(maxAssets);\\n        comptrollerProxy._setLiquidationIncentive(liquidationIncentive);\\n        comptrollerProxy._setPriceOracle(PriceOracle(priceOracle));\\n\\n        // Whitelist\\n        if (enforceWhitelist) require(comptrollerProxy._setWhitelistEnforcement(true) == 0, \\\"Failed to enforce supplier/borrower whitelist.\\\");\\n\\n        // Make msg.sender the admin\\n        unitroller._setPendingAdmin(msg.sender);\\n\\n        // Register the pool with this FusePoolDirectory\\n        return (_registerPool(name, proxy), proxy);\\n    }\\n\\n    /**\\n     * @notice Returns arrays of all Fuse pools' data.\\n     * @dev This function is not designed to be called in a transaction: it is too gas-intensive.\\n     */\\n    function getAllPools() external view returns (FusePool[] memory) {\\n        return pools;\\n    }\\n\\n    /**\\n     * @notice Returns arrays of all public Fuse pool indexes and data.\\n     * @dev This function is not designed to be called in a transaction: it is too gas-intensive.\\n     */\\n    function getPublicPools() external view returns (uint256[] memory, FusePool[] memory) {\\n        uint256 arrayLength = 0;\\n\\n        for (uint256 i = 0; i < pools.length; i++) {\\n            try Comptroller(pools[i].comptroller).enforceWhitelist() returns (bool enforceWhitelist) {\\n                if (enforceWhitelist) continue;\\n            } catch { }\\n\\n            arrayLength++;\\n        }\\n\\n        uint256[] memory indexes = new uint256[](arrayLength);\\n        FusePool[] memory publicPools = new FusePool[](arrayLength);\\n        uint256 index = 0;\\n\\n        for (uint256 i = 0; i < pools.length; i++) {\\n            try Comptroller(pools[i].comptroller).enforceWhitelist() returns (bool enforceWhitelist) {\\n                if (enforceWhitelist) continue;\\n            } catch { }\\n\\n            indexes[index] = i;\\n            publicPools[index] = pools[i];\\n            index++;\\n        }\\n\\n        return (indexes, publicPools);\\n    }\\n\\n    /**\\n     * @notice Returns arrays of Fuse pool indexes and data created by `account`.\\n     */\\n    function getPoolsByAccount(address account) external view returns (uint256[] memory, FusePool[] memory) {\\n        uint256[] memory indexes = new uint256[](_poolsByAccount[account].length);\\n        FusePool[] memory accountPools = new FusePool[](_poolsByAccount[account].length);\\n\\n        for (uint256 i = 0; i < _poolsByAccount[account].length; i++) {\\n            indexes[i] = _poolsByAccount[account][i];\\n            accountPools[i] = pools[_poolsByAccount[account][i]];\\n        }\\n\\n        return (indexes, accountPools);\\n    }\\n\\n    /**\\n     * @dev Maps Ethereum accounts to arrays of Fuse pool Comptroller proxy contract addresses.\\n     */\\n    mapping(address => address[]) private _bookmarks;\\n\\n    /**\\n     * @notice Returns arrays of Fuse pool Unitroller (Comptroller proxy) contract addresses bookmarked by `account`.\\n     */\\n    function getBookmarks(address account) external view returns (address[] memory) {\\n        return _bookmarks[account];\\n    }\\n\\n    /**\\n     * @notice Bookmarks a Fuse pool Unitroller (Comptroller proxy) contract addresses.\\n     */\\n    function bookmarkPool(address comptroller) external {\\n        _bookmarks[msg.sender].push(comptroller);\\n    }\\n}\\n\"\r\n    },\r\n    \"/C/Users/david/Downloads/fuse-contracts-1.0.0/contracts/external/compound/CToken.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BSD-3-Clause\\npragma solidity 0.6.12;\\n\\n/**\\n * @title Compound's CToken Contract\\n * @notice Abstract base for CTokens\\n * @author Compound\\n */\\ninterface CToken {\\n    function admin() external view returns (address);\\n    function adminHasRights() external view returns (bool);\\n    function fuseAdminHasRights() external view returns (bool);\\n    function symbol() external view returns (string memory);\\n    function comptroller() external view returns (address);\\n    function adminFeeMantissa() external view returns (uint256);\\n    function fuseFeeMantissa() external view returns (uint256);\\n    function reserveFactorMantissa() external view returns (uint256);\\n    function totalReserves() external view returns (uint);\\n    function totalAdminFees() external view returns (uint);\\n    function totalFuseFees() external view returns (uint);\\n\\n    function isCToken() external view returns (bool);\\n    function isCEther() external view returns (bool);\\n\\n    function balanceOf(address owner) external view returns (uint);\\n    function balanceOfUnderlying(address owner) external returns (uint);\\n    function borrowRatePerBlock() external view returns (uint);\\n    function supplyRatePerBlock() external view returns (uint);\\n    function totalBorrowsCurrent() external returns (uint);\\n    function borrowBalanceStored(address account) external view returns (uint);\\n    function exchangeRateStored() external view returns (uint);\\n    function getCash() external view returns (uint);\\n\\n    function redeem(uint redeemTokens) external returns (uint);\\n    function redeemUnderlying(uint redeemAmount) external returns (uint);\\n}\\n\"\r\n    },\r\n    \"/C/Users/david/Downloads/fuse-contracts-1.0.0/contracts/external/compound/Comptroller.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BSD-3-Clause\\npragma solidity 0.6.12;\\n\\nimport \\\"./PriceOracle.sol\\\";\\nimport \\\"./CToken.sol\\\";\\nimport \\\"./Unitroller.sol\\\";\\n\\n/**\\n * @title Compound's Comptroller Contract\\n * @author Compound\\n */\\ninterface Comptroller {\\n    function admin() external view returns (address);\\n    function adminHasRights() external view returns (bool);\\n    function fuseAdminHasRights() external view returns (bool);\\n\\n    function oracle() external view returns (PriceOracle);\\n    function closeFactorMantissa() external view returns (uint);\\n    function liquidationIncentiveMantissa() external view returns (uint);\\n\\n    function markets(address cToken) external view returns (bool, uint);\\n\\n    function getAssetsIn(address account) external view returns (CToken[] memory);\\n    function checkMembership(address account, CToken cToken) external view returns (bool);\\n    \\n    function _setPriceOracle(PriceOracle newOracle) external returns (uint);\\n    function _setCloseFactor(uint newCloseFactorMantissa) external returns (uint256);\\n    function _setMaxAssets(uint newMaxAssets) external returns (uint);\\n    function _setLiquidationIncentive(uint newLiquidationIncentiveMantissa) external returns (uint);\\n    function _become(Unitroller unitroller) external;\\n\\n    function getAllMarkets() external view returns (CToken[] memory);\\n    function getAllBorrowers() external view returns (address[] memory);\\n    function suppliers(address account) external view returns (bool);\\n    function enforceWhitelist() external view returns (bool);\\n    function whitelist(address account) external view returns (bool);\\n\\n    function _setWhitelistEnforcement(bool enforce) external returns (uint);\\n    function _setWhitelistStatuses(address[] calldata _suppliers, bool[] calldata statuses) external returns (uint);\\n}\\n\"\r\n    },\r\n    \"/C/Users/david/Downloads/fuse-contracts-1.0.0/contracts/external/compound/PriceOracle.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BSD-3-Clause\\npragma solidity 0.6.12;\\n\\nimport \\\"./CToken.sol\\\";\\n\\ninterface PriceOracle {\\n    /**\\n      * @notice Get the underlying price of a cToken asset\\n      * @param cToken The cToken to get the underlying price of\\n      * @return The underlying asset price mantissa (scaled by 1e18).\\n      *  Zero means the price is unavailable.\\n      */\\n    function getUnderlyingPrice(CToken cToken) external view returns (uint);\\n}\\n\"\r\n    },\r\n    \"/C/Users/david/Downloads/fuse-contracts-1.0.0/contracts/external/compound/Unitroller.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BSD-3-Clause\\npragma solidity 0.6.12;\\n\\n/**\\n * @title ComptrollerCore\\n * @dev Storage for the comptroller is at this address, while execution is delegated to the `comptrollerImplementation`.\\n * CTokens should reference this contract as their comptroller.\\n */\\ninterface Unitroller {\\n    function _setPendingImplementation(address newPendingImplementation) external returns (uint);\\n    function _setPendingAdmin(address newPendingAdmin) external returns (uint);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/GSN/ContextUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\nimport \\\"../proxy/Initializable.sol\\\";\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal initializer {\\n        __Context_init_unchained();\\n    }\\n\\n    function __Context_init_unchained() internal initializer {\\n    }\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n    uint256[50] private __gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"../GSN/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/Initializable.sol\\\";\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal initializer {\\n        __Context_init_unchained();\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal initializer {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(_owner == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n    uint256[49] private __gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/proxy/Initializable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\n// solhint-disable-next-line compiler-version\\npragma solidity >=0.4.24 <0.8.0;\\n\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n * \\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {UpgradeableProxy-constructor}.\\n * \\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n */\\nabstract contract Initializable {\\n\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        require(_initializing || _isConstructor() || !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n\\n    /// @dev Returns true if and only if the function is running in the constructor\\n    function _isConstructor() private view returns (bool) {\\n        // extcodesize checks the size of the code stored in an address, and\\n        // address returns the current address. Since the code is still not\\n        // deployed when running a constructor, any checks on its code size will\\n        // yield zero, making it an effective way to detect if a contract is\\n        // under construction or not.\\n        address self = address(this);\\n        uint256 cs;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { cs := extcodesize(self) }\\n        return cs == 0;\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"remappings\": [],\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"evmVersion\": \"istanbul\",\r\n    \"libraries\": {},\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}","ABI":"[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"comptroller\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"blockPosted\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timestampPosted\",\"type\":\"uint256\"}],\"indexed\":false,\"internalType\":\"struct FusePoolDirectory.FusePool\",\"name\":\"pool\",\"type\":\"tuple\"}],\"name\":\"PoolRegistered\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_enforceDeployerWhitelist\",\"type\":\"bool\"}],\"name\":\"_setDeployerWhitelistEnforcement\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"deployers\",\"type\":\"address[]\"}],\"name\":\"_whitelistDeployers\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"comptroller\",\"type\":\"address\"}],\"name\":\"bookmarkPool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"enforceWhitelist\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"closeFactor\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxAssets\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"liquidationIncentive\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"priceOracle\",\"type\":\"address\"}],\"name\":\"deployPool\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"deployerWhitelist\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"enforceDeployerWhitelist\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAllPools\",\"outputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"comptroller\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"blockPosted\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timestampPosted\",\"type\":\"uint256\"}],\"internalType\":\"struct FusePoolDirectory.FusePool[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getBookmarks\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getPoolsByAccount\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"},{\"components\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"comptroller\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"blockPosted\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timestampPosted\",\"type\":\"uint256\"}],\"internalType\":\"struct FusePoolDirectory.FusePool[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPublicPools\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"},{\"components\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"comptroller\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"blockPosted\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timestampPosted\",\"type\":\"uint256\"}],\"internalType\":\"struct FusePoolDirectory.FusePool[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_enforceDeployerWhitelist\",\"type\":\"bool\"},{\"internalType\":\"address[]\",\"name\":\"_deployerWhitelist\",\"type\":\"address[]\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"poolExists\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"pools\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"comptroller\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"blockPosted\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timestampPosted\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"comptroller\",\"type\":\"address\"}],\"name\":\"registerPool\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"FusePoolDirectory","CompilerVersion":"v0.6.12+commit.27d51765","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}