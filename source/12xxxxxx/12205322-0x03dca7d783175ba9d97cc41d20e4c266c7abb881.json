{"status":"1","message":"OK","result":[{"SourceCode":"// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.0;\n\n\n\n// Part: ICryptoPunks\n\ninterface ICryptoPunks {\n\n    struct Offer {\n        bool isForSale;\n        uint punkIndex;\n        address seller;\n        uint minValue;          // in ether\n        address onlySellTo;     // specify to sell only to a specific person\n    }\n\n    function buyPunk(uint punkIndex) external payable;\n\n    function punksOfferedForSale(uint punkIndex) external view returns(Offer memory offer);\n\n    // Transfer ownership of a punk to another user without requiring payment\n    function transferPunk(address to, uint punkIndex) external;\n}\n\n// File: CryptoPunksMarket.sol\n\nlibrary CryptoPunksMarket {\n\n\n    address public constant CRYPTOPUNKS = 0xb47e3cd837dDF8e4c57F05d70Ab865de6e193BBB;\n\n    function buyAssetsForEth(bytes memory data, address recipient) public {\n        uint256[] memory punkIndexes;\n        (punkIndexes) = abi.decode(\n            data,\n            (uint256[])\n        );\n        for (uint256 i = 0; i < punkIndexes.length; i++) {\n            _buyAssetForEth(punkIndexes[i], estimateAssetPriceInEth(punkIndexes[i]), recipient);\n        }\n    }\n\n    function estimateAssetPriceInEth(uint256 punkIndex) public view returns(uint256) {\n        return ICryptoPunks(CRYPTOPUNKS).punksOfferedForSale(punkIndex).minValue;\n    }\n\n    function estimateBatchAssetPriceInEth(bytes memory data) public view returns(uint256 totalCost) {\n        uint256[] memory punkIndexes;\n        (punkIndexes) = abi.decode(\n            data,\n            (uint256[])\n        );\n        ICryptoPunks.Offer memory offer;\n        for (uint256 i = 0; i < punkIndexes.length; i++) {\n            offer = ICryptoPunks(CRYPTOPUNKS).punksOfferedForSale(punkIndexes[i]);\n            if(offer.isForSale) {\n                totalCost += offer.minValue;\n            }\n        }\n    }\n\n    function _buyAssetForEth(uint256 _index, uint256 _price, address _recipient) internal {\n        bytes memory _data = abi.encodeWithSelector(ICryptoPunks(CRYPTOPUNKS).buyPunk.selector, _index);\n\n        (bool success, ) = CRYPTOPUNKS.call{value:_price}(_data);\n        require(success, \"_buyAssetForEth: cryptopunk buy failed.\");\n\n        ICryptoPunks(CRYPTOPUNKS).transferPunk(_recipient, _index);\n    }\n}\n","ABI":"[{\"inputs\":[],\"name\":\"CRYPTOPUNKS\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"punkIndex\",\"type\":\"uint256\"}],\"name\":\"estimateAssetPriceInEth\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"estimateBatchAssetPriceInEth\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"totalCost\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"CryptoPunksMarket","CompilerVersion":"v0.8.0+commit.c7dfd78e","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":""}]}