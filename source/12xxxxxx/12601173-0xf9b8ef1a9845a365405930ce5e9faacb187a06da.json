{"status":"1","message":"OK","result":[{"SourceCode":"{\"Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity \\u003e=0.6.2 \\u003c0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size \\u003e 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity\\u0027s `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance \\u003e= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance \\u003e= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length \\u003e 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"},\"Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity \\u003e=0.6.0 \\u003c0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\"},\"IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity \\u003e=0.6.0 \\u003c0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller\\u0027s account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller\\u0027s tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender\\u0027s allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller\\u0027s\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"},\"Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity \\u003e=0.6.0 \\u003c0.8.0;\\n\\nimport \\\"./Context.sol\\\";\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor () internal {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n}\\n\"},\"SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity \\u003e=0.6.0 \\u003c0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./SafeMath.sol\\\";\\nimport \\\"./Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using SafeMath for uint256;\\n    using Address for address;\\n\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // \\u0027safeIncreaseAllowance\\u0027 and \\u0027safeDecreaseAllowance\\u0027\\n        // solhint-disable-next-line max-line-length\\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \\\"SafeERC20: decreased allowance below zero\\\");\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity\\u0027s return data size checking mechanism, since\\n        // we\\u0027re implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length \\u003e 0) { // Return data is optional\\n            // solhint-disable-next-line max-line-length\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\"},\"SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity \\u003e=0.6.0 \\u003c0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity\\u0027s arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it\\u0027s recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        uint256 c = a + b;\\n        if (c \\u003c a) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b \\u003e a) return (false, 0);\\n        return (true, a - b);\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        // Gas optimization: this is cheaper than requiring \\u0027a\\u0027 not being zero, but the\\n        // benefit is lost if \\u0027b\\u0027 is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) return (true, 0);\\n        uint256 c = a * b;\\n        if (c / a != b) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a / b);\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a % b);\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity\\u0027s `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c \\u003e= a, \\\"SafeMath: addition overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity\\u0027s `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b \\u003c= a, \\\"SafeMath: subtraction overflow\\\");\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity\\u0027s `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0) return 0;\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity\\u0027s `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b \\u003e 0, \\\"SafeMath: division by zero\\\");\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity\\u0027s `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b \\u003e 0, \\\"SafeMath: modulo by zero\\\");\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity\\u0027s `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b \\u003c= a, errorMessage);\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\\n     *\\n     * Counterpart to Solidity\\u0027s `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b \\u003e 0, errorMessage);\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity\\u0027s `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b \\u003e 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\"},\"XEDStaking.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.7.6;\\r\\npragma abicoder v2;\\r\\n\\r\\nimport \\\"./IERC20.sol\\\";\\r\\nimport \\\"./SafeERC20.sol\\\";\\r\\nimport \\\"./SafeMath.sol\\\";\\r\\nimport \\\"./Ownable.sol\\\";\\r\\n\\r\\ncontract XEDStaking is Ownable {\\r\\n    using SafeMath for uint256;\\r\\n    using SafeMath for uint64;\\r\\n    using SafeERC20 for IERC20;\\r\\n\\r\\n    bool public active;\\r\\n\\r\\n    // set with beginStaking()\\r\\n    uint256 public startTime;\\r\\n\\r\\n    // users will have 10 days before staking gets closed for depositing\\r\\n    uint256 public cutoffTime;\\r\\n    IERC20 internal immutable stakingToken;\\r\\n\\r\\n    // used for whitelisting users for staking by signing a message\\r\\n    address private bouncer;\\r\\n\\r\\n    enum poolNames {BRONZE, SILVER, GOLD}\\r\\n\\r\\n    struct pool {\\r\\n        uint256 maturityAPY;\\r\\n        uint64 daysToMaturity;\\r\\n        uint64 earlyWithdrawalAPY;\\r\\n        uint64 daysToEarlyWithdrawal;\\r\\n        uint256 maxPoolCapacity; // maximum of funds staked in total\\r\\n        uint256 rewardSupply; // reward supply available for the pool\\r\\n        uint256 stakingFunds; // staking rewards not withdrawn yet\\r\\n        uint256 userFunds; // gets decreased with withdrawals\\r\\n        uint256 totalDeposited; // doesn\\u0027t get decreased with withdrawals\\r\\n    }\\r\\n\\r\\n    mapping(poolNames =\\u003e pool) public pools;\\r\\n\\r\\n    struct userDeposit {\\r\\n        uint256 amount;\\r\\n        uint256 depositTime;\\r\\n    }\\r\\n\\r\\n    mapping(address =\\u003e mapping(poolNames =\\u003e userDeposit)) private userDeposits;\\r\\n\\r\\n    // Sum of the rewardSupply of all pools rounded up -\\u003e (821918 + 5753425 + 12328768) / 100\\r\\n    uint256 public constant TOTAL_REWARD_SUPPLY = (18904111 * 1 ether) / 100;\\r\\n    uint256 public constant MIN_STAKING_AMOUNT = 2000 * 1 ether;\\r\\n\\r\\n    constructor(IERC20 tokenContract) {\\r\\n        stakingToken = tokenContract;\\r\\n        bouncer = msg.sender;\\r\\n\\r\\n        pools[poolNames.BRONZE] = pool({\\r\\n            maturityAPY: 20,\\r\\n            daysToMaturity: 60,\\r\\n            earlyWithdrawalAPY: 8,\\r\\n            daysToEarlyWithdrawal: 30,\\r\\n            maxPoolCapacity: 250000 * 1 ether,\\r\\n            rewardSupply: (821918 * 1 ether) / 100, // 250000*20*60 / (100*365)\\r\\n            stakingFunds: 0,\\r\\n            userFunds: 0,\\r\\n            totalDeposited: 0\\r\\n        });\\r\\n\\r\\n        pools[poolNames.SILVER] = pool({\\r\\n            maturityAPY: 35,\\r\\n            daysToMaturity: 120,\\r\\n            earlyWithdrawalAPY: 14,\\r\\n            daysToEarlyWithdrawal: 60,\\r\\n            maxPoolCapacity: 500000 * 1 ether,\\r\\n            rewardSupply: (5753425 * 1 ether) / 100, // 500000*35*120 / (100*365)\\r\\n            stakingFunds: 0,\\r\\n            userFunds: 0,\\r\\n            totalDeposited: 0\\r\\n        });\\r\\n\\r\\n        pools[poolNames.GOLD] = pool({\\r\\n            maturityAPY: 50,\\r\\n            daysToMaturity: 180,\\r\\n            earlyWithdrawalAPY: 20,\\r\\n            daysToEarlyWithdrawal: 100,\\r\\n            maxPoolCapacity: 500000 * 1 ether,\\r\\n            rewardSupply: (12328768 * 1 ether) / 100, // 500000*50*180 / (100*365)\\r\\n            stakingFunds: 0,\\r\\n            userFunds: 0,\\r\\n            totalDeposited: 0\\r\\n        });\\r\\n    }\\r\\n\\r\\n    // Bouncer will be a hot wallet in our backend without any critical access (e.g: access to funds)\\r\\n    // If the hot wallet gets compromised, the owner can just change the bouncer without any critical issues.\\r\\n    function setBouncer(address _bouncer) external onlyOwner {\\r\\n        bouncer = _bouncer;\\r\\n    }\\r\\n\\r\\n    // Our backend will send to allowed users a signed message (signed by the bouncer)\\r\\n    // with this contract address and user address\\r\\n    modifier onlyAllowedUser(\\r\\n        uint8 _v,\\r\\n        bytes32 _r,\\r\\n        bytes32 _s\\r\\n    ) {\\r\\n        require(\\r\\n            isAllowedUser(msg.sender, _v, _r, _s),\\r\\n            \\\"User isn\\u0027t authorized to perform this operation.\\\"\\r\\n        );\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    // Function that checks if a given address is allowed by checking the signature\\r\\n    // of the message sent by the backend.\\r\\n    // To whitelist all addresses, the bouncer can be set to address(0).\\r\\n    function isAllowedUser(\\r\\n        address user,\\r\\n        uint8 _v,\\r\\n        bytes32 _r,\\r\\n        bytes32 _s\\r\\n    ) public view returns (bool) {\\r\\n        bytes32 hash = keccak256(abi.encodePacked(address(this), user));\\r\\n        return\\r\\n            bouncer ==\\r\\n            ecrecover(\\r\\n                keccak256(\\r\\n                    abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n32\\\", hash)\\r\\n                ),\\r\\n                _v,\\r\\n                _r,\\r\\n                _s\\r\\n            );\\r\\n    }\\r\\n\\r\\n    // Collect any funds that are in the contract, including those that are sent\\r\\n    // accidentally to it.\\r\\n    function collect(poolNames _pool) external onlyOwner {\\r\\n        require(block.timestamp \\u003e cutoffTime, \\\"Can only collect excess reward tokens after deposits are locked\\\");\\r\\n        uint256 excessRewards = getExcessRewards(_pool);\\r\\n        pools[_pool].stakingFunds = pools[_pool].stakingFunds.sub(excessRewards);\\r\\n        stakingToken.safeTransfer(owner(), excessRewards);\\r\\n    }\\r\\n\\r\\n    event Deposit(\\r\\n        poolNames indexed pool,\\r\\n        address indexed userAddress,\\r\\n        uint256 depositAmount\\r\\n    );\\r\\n\\r\\n    function deposit(\\r\\n        uint256 _depositAmount,\\r\\n        poolNames _pool,\\r\\n        uint8 _v,\\r\\n        bytes32 _r,\\r\\n        bytes32 _s\\r\\n    ) external onlyAllowedUser(_v, _r, _s) {\\r\\n        require(active, \\\"Staking is not active yet\\\");\\r\\n        require(block.timestamp \\u003c cutoffTime, \\\"Deposit time period over\\\");\\r\\n        require(_depositAmount \\u003e= MIN_STAKING_AMOUNT, \\\"Deposit amount too low\\\");\\r\\n\\r\\n        uint256 newUserFunds = pools[_pool].userFunds.add(_depositAmount);\\r\\n        require(\\r\\n            newUserFunds \\u003c= pools[_pool].maxPoolCapacity,\\r\\n            \\\"Staking capacity exceeded\\\"\\r\\n        );\\r\\n\\r\\n        pools[_pool].totalDeposited = pools[_pool].totalDeposited.add(\\r\\n            _depositAmount\\r\\n        );\\r\\n        pools[_pool].userFunds = newUserFunds;\\r\\n\\r\\n        userDeposits[msg.sender][_pool].amount = userDeposits[msg.sender][_pool]\\r\\n            .amount\\r\\n            .add(_depositAmount);\\r\\n        userDeposits[msg.sender][_pool].depositTime = block.timestamp;\\r\\n\\r\\n        stakingToken.safeTransferFrom(\\r\\n            msg.sender,\\r\\n            address(this),\\r\\n            _depositAmount\\r\\n        );\\r\\n        emit Deposit(_pool, msg.sender, _depositAmount);\\r\\n    }\\r\\n\\r\\n    event Withdraw(\\r\\n        poolNames indexed pool,\\r\\n        address indexed userAddress,\\r\\n        uint256 principal,\\r\\n        uint256 yield\\r\\n    );\\r\\n\\r\\n    // if withdrawn before early withdrawal period user gets 0% APY (only gets his/her funds back)\\r\\n    function withdraw(poolNames _pool) external {\\r\\n        uint256 withdrawalAmount = userDeposits[msg.sender][_pool].amount;\\r\\n        require(withdrawalAmount \\u003e 0, \\\"nothing to withdraw\\\");\\r\\n\\r\\n        uint256 userYield = getUserYield(msg.sender, _pool);\\r\\n        pools[_pool].userFunds = pools[_pool].userFunds.sub(withdrawalAmount);\\r\\n        pools[_pool].stakingFunds = pools[_pool].stakingFunds.sub(userYield);\\r\\n\\r\\n        delete userDeposits[msg.sender][_pool];\\r\\n\\r\\n        uint256 totalToTransfer = withdrawalAmount.add(userYield);\\r\\n\\r\\n        stakingToken.safeTransfer(msg.sender, totalToTransfer);\\r\\n        emit Withdraw(_pool, msg.sender, withdrawalAmount, userYield);\\r\\n    }\\r\\n\\r\\n    event StakingBegins(uint256 timestamp, uint256 stakingFunds);\\r\\n\\r\\n    function beginStaking() external onlyOwner {\\r\\n        require(\\r\\n            stakingToken.balanceOf(address(this)) \\u003e= TOTAL_REWARD_SUPPLY,\\r\\n            \\\"Not enough staking rewards\\\"\\r\\n        );\\r\\n        require(!active, \\\"Can only begin staking once\\\");\\r\\n        active = true;\\r\\n        startTime = block.timestamp;\\r\\n        cutoffTime = startTime.add(10 days);\\r\\n        pools[poolNames.BRONZE].stakingFunds = pools[poolNames.BRONZE]\\r\\n            .rewardSupply;\\r\\n        pools[poolNames.SILVER].stakingFunds = pools[poolNames.SILVER]\\r\\n            .rewardSupply;\\r\\n        pools[poolNames.GOLD].stakingFunds = pools[poolNames.GOLD].rewardSupply;\\r\\n        emit StakingBegins(startTime, TOTAL_REWARD_SUPPLY);\\r\\n    }\\r\\n\\r\\n    function getYieldMultiplier(uint256 daysStaked, poolNames _pool)\\r\\n        public\\r\\n        view\\r\\n        returns (uint256)\\r\\n    {\\r\\n        if (daysStaked \\u003e= pools[_pool].daysToMaturity)\\r\\n            return pools[_pool].maturityAPY;\\r\\n        if (daysStaked \\u003e= pools[_pool].daysToEarlyWithdrawal)\\r\\n            return pools[_pool].earlyWithdrawalAPY;\\r\\n        return 0;\\r\\n    }\\r\\n\\r\\n    function getUserYield(address _userAddress, poolNames _pool)\\r\\n        public\\r\\n        view\\r\\n        returns (uint256)\\r\\n    {\\r\\n        uint256 depositTime = userDeposits[_userAddress][_pool].depositTime;\\r\\n        uint256 amount = userDeposits[_userAddress][_pool].amount;\\r\\n\\r\\n        uint256 daysStaked = (block.timestamp - depositTime) / 1 days;\\r\\n\\r\\n        uint256 yieldMultiplier = getYieldMultiplier(daysStaked, _pool);\\r\\n        uint256 daysMultiplier = getNDays(daysStaked, _pool);\\r\\n\\r\\n        return (amount * yieldMultiplier * daysMultiplier) / (100 * 365);\\r\\n    }\\r\\n\\r\\n    function getExcessRewards(poolNames _pool)\\r\\n        public\\r\\n        view\\r\\n        returns (uint256)\\r\\n    {\\r\\n        uint256 pendingUsersRewards = \\r\\n        (pools[_pool].userFunds \\r\\n        * pools[_pool].daysToMaturity \\r\\n        * pools[_pool].maturityAPY) / (100 * 365);\\r\\n\\r\\n        return pools[_pool].stakingFunds.sub(pendingUsersRewards);     \\r\\n    }\\r\\n\\r\\n    function getNDays(uint256 daysStaked, poolNames _pool)\\r\\n        public\\r\\n        view\\r\\n        returns (uint64)\\r\\n    {\\r\\n        if (daysStaked \\u003e= pools[_pool].daysToMaturity)\\r\\n            return pools[_pool].daysToMaturity;\\r\\n        if (daysStaked \\u003e= pools[_pool].daysToEarlyWithdrawal)\\r\\n            return pools[_pool].daysToEarlyWithdrawal;\\r\\n        return 0;\\r\\n    }\\r\\n\\r\\n    function getUserDeposit(address _userAddress, poolNames _pool)\\r\\n        external\\r\\n        view\\r\\n        returns (userDeposit memory)\\r\\n    {\\r\\n        return userDeposits[_userAddress][_pool];\\r\\n    }\\r\\n\\r\\n    function getStakingPool(poolNames _pool)\\r\\n        external\\r\\n        view\\r\\n        returns (pool memory)\\r\\n    {\\r\\n        return pools[_pool];\\r\\n    }\\r\\n}\\r\\n\"}}","ABI":"[{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"tokenContract\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"enum XEDStaking.poolNames\",\"name\":\"pool\",\"type\":\"uint8\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"depositAmount\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"stakingFunds\",\"type\":\"uint256\"}],\"name\":\"StakingBegins\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"enum XEDStaking.poolNames\",\"name\":\"pool\",\"type\":\"uint8\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"principal\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"yield\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"MIN_STAKING_AMOUNT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"TOTAL_REWARD_SUPPLY\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"active\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"beginStaking\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum XEDStaking.poolNames\",\"name\":\"_pool\",\"type\":\"uint8\"}],\"name\":\"collect\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cutoffTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_depositAmount\",\"type\":\"uint256\"},{\"internalType\":\"enum XEDStaking.poolNames\",\"name\":\"_pool\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"_v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"_r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"_s\",\"type\":\"bytes32\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum XEDStaking.poolNames\",\"name\":\"_pool\",\"type\":\"uint8\"}],\"name\":\"getExcessRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"daysStaked\",\"type\":\"uint256\"},{\"internalType\":\"enum XEDStaking.poolNames\",\"name\":\"_pool\",\"type\":\"uint8\"}],\"name\":\"getNDays\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum XEDStaking.poolNames\",\"name\":\"_pool\",\"type\":\"uint8\"}],\"name\":\"getStakingPool\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"maturityAPY\",\"type\":\"uint256\"},{\"internalType\":\"uint64\",\"name\":\"daysToMaturity\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"earlyWithdrawalAPY\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"daysToEarlyWithdrawal\",\"type\":\"uint64\"},{\"internalType\":\"uint256\",\"name\":\"maxPoolCapacity\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewardSupply\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stakingFunds\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"userFunds\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalDeposited\",\"type\":\"uint256\"}],\"internalType\":\"struct XEDStaking.pool\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_userAddress\",\"type\":\"address\"},{\"internalType\":\"enum XEDStaking.poolNames\",\"name\":\"_pool\",\"type\":\"uint8\"}],\"name\":\"getUserDeposit\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"depositTime\",\"type\":\"uint256\"}],\"internalType\":\"struct XEDStaking.userDeposit\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_userAddress\",\"type\":\"address\"},{\"internalType\":\"enum XEDStaking.poolNames\",\"name\":\"_pool\",\"type\":\"uint8\"}],\"name\":\"getUserYield\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"daysStaked\",\"type\":\"uint256\"},{\"internalType\":\"enum XEDStaking.poolNames\",\"name\":\"_pool\",\"type\":\"uint8\"}],\"name\":\"getYieldMultiplier\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"_v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"_r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"_s\",\"type\":\"bytes32\"}],\"name\":\"isAllowedUser\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum XEDStaking.poolNames\",\"name\":\"\",\"type\":\"uint8\"}],\"name\":\"pools\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"maturityAPY\",\"type\":\"uint256\"},{\"internalType\":\"uint64\",\"name\":\"daysToMaturity\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"earlyWithdrawalAPY\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"daysToEarlyWithdrawal\",\"type\":\"uint64\"},{\"internalType\":\"uint256\",\"name\":\"maxPoolCapacity\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewardSupply\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stakingFunds\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"userFunds\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalDeposited\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_bouncer\",\"type\":\"address\"}],\"name\":\"setBouncer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum XEDStaking.poolNames\",\"name\":\"_pool\",\"type\":\"uint8\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"XEDStaking","CompilerVersion":"v0.7.6+commit.7338295f","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"000000000000000000000000ee573a945b01b788b9287ce062a0cfc15be9fd86","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://2aeb5f5bbe470963f609b85fc56194dc67b3004b5abde772a26ef5ea634939db"}]}