{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/FirstDibsCreatorRegistry.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: BSD 3-Clause\\npragma solidity 0.6.12;\\n\\nimport '@openzeppelin/contracts/access/Ownable.sol';\\nimport './IERC721TokenCreator.sol';\\nimport './IERC721Creator.sol';\\n\\n/**\\n * @dev Registry token creators and tokens that implement iERC721Creator\\n * @notice Thanks SuperRare! There is no afflication between SuperRare and 1stDibs\\n */\\ncontract FirstDibsCreatorRegistry is Ownable, IERC721TokenCreator {\\n    /**\\n     * @dev contract address => token ID mapping to payable creator address\\n     */\\n    mapping(address => mapping(uint256 => address payable)) private tokenCreators;\\n\\n    /**\\n     * @dev Mapping of addresses that implement IERC721Creator.\\n     */\\n    mapping(address => bool) public iERC721Creators;\\n\\n    /**\\n     * @dev Initializes the contract setting the iERC721Creators with the provided addresses.\\n     * @param _iERC721CreatorContracts address[] to set as iERC721Creators.\\n     */\\n    constructor(address[] memory _iERC721CreatorContracts) public {\\n        require(\\n            _iERC721CreatorContracts.length < 1000,\\n            'constructor: Cannot mark more than 1000 addresses as IERC721Creator'\\n        );\\n        for (uint8 i = 0; i < _iERC721CreatorContracts.length; i++) {\\n            require(\\n                _iERC721CreatorContracts[i] != address(0),\\n                'constructor: Cannot set the null address as an IERC721Creator'\\n            );\\n            iERC721Creators[_iERC721CreatorContracts[i]] = true;\\n        }\\n    }\\n\\n    /**\\n     * @dev Gets the creator of the _tokenId on _nftAddress\\n     * @param _nftAddress address of the ERC721 contract\\n     * @param _tokenId uint256 ID of the token\\n     * @return payble address of the creator\\n     */\\n    function tokenCreator(address _nftAddress, uint256 _tokenId)\\n        external\\n        view\\n        override\\n        returns (address payable)\\n    {\\n        if (tokenCreators[_nftAddress][_tokenId] != address(0)) {\\n            return tokenCreators[_nftAddress][_tokenId];\\n        }\\n\\n        if (iERC721Creators[_nftAddress]) {\\n            return IERC721Creator(_nftAddress).tokenCreator(_tokenId);\\n        }\\n\\n        return address(0);\\n    }\\n\\n    /**\\n     * @dev Sets _creator of the _tokenId on _nftAddress\\n     * @param _nftAddress address of the token contract\\n     * @param _creator payble address of the creator\\n     * @param _tokenId uint256 ID of the token\\n     */\\n    function setTokenCreator(\\n        address _nftAddress,\\n        address payable _creator,\\n        uint256 _tokenId\\n    ) external onlyOwner {\\n        require(\\n            _nftAddress != address(0),\\n            'FirstDibsCreatorRegistry: token address cannot be null'\\n        );\\n        require(_creator != address(0), 'FirstDibsCreatorRegistry: creator address cannot be null');\\n        tokenCreators[_nftAddress][_tokenId] = _creator;\\n    }\\n\\n    /**\\n     * @dev Set an address as an IERC721Creator\\n     * @param _nftAddress address of the IERC721Creator contract\\n     */\\n    function setIERC721Creator(address _nftAddress) external onlyOwner {\\n        require(\\n            _nftAddress != address(0),\\n            'FirstDibsCreatorRegistry: token address cannot be null'\\n        );\\n        iERC721Creators[_nftAddress] = true;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor () internal {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/IERC721TokenCreator.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: BSD 3-Clause\\npragma solidity 0.6.12;\\n\\n/**\\n * @title IERC721 Non-Fungible Token Creator basic interface\\n * @dev Interop with other systems supporting this interface\\n * @notice Original license and source here: https://github.com/Pixura/pixura-contracts\\n */\\ninterface IERC721TokenCreator {\\n    /**\\n     * @dev Gets the creator of the _tokenId on _nftAddress\\n     * @param _nftAddress address of the ERC721 contract\\n     * @param _tokenId uint256 ID of the token\\n     * @return address of the creator\\n     */\\n    function tokenCreator(address _nftAddress, uint256 _tokenId)\\n        external\\n        view\\n        returns (address payable);\\n}\\n\"\r\n    },\r\n    \"contracts/IERC721Creator.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: BSD 3-Clause\\npragma solidity 0.6.12;\\n\\n/**\\n * @title IERC721 Non-Fungible Token Creator basic interface\\n * @dev Interop with other systems supporting this interface\\n * @notice Original license and source here: https://github.com/Pixura/pixura-contracts\\n */\\ninterface IERC721Creator {\\n    /**\\n     * @dev Gets the creator of the _tokenId\\n     * @param _tokenId uint256 ID of the token\\n     * @return address of the creator of _tokenId\\n     */\\n    function tokenCreator(uint256 _tokenId) external view returns (address payable);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 1348\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}","ABI":"[{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_iERC721CreatorContracts\",\"type\":\"address[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"iERC721Creators\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_nftAddress\",\"type\":\"address\"}],\"name\":\"setIERC721Creator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_nftAddress\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"_creator\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"setTokenCreator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_nftAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenCreator\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"FirstDibsCreatorRegistry","CompilerVersion":"v0.6.12+commit.27d51765","OptimizationUsed":"1","Runs":"1348","ConstructorArguments":"00000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000001000000000000000000000000c2d9c9206b049d98db57f1967f7ab49897615bbc","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}