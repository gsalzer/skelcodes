{"status":"1","message":"OK","result":[{"SourceCode":"/// NoRebalanceStabilityFeeTreasury.sol\r\n\r\n// Copyright (C) 2018 Rain <rainbreak@riseup.net>, 2020 Reflexer Labs, INC\r\n\r\n// This program is free software: you can redistribute it and/or modify\r\n// it under the terms of the GNU General Public License as published by\r\n// the Free Software Foundation, either version 3 of the License, or\r\n// (at your option) any later version.\r\n\r\n// This program is distributed in the hope that it will be useful,\r\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n// GNU General Public License for more details.\r\n\r\n// You should have received a copy of the GNU General Public License\r\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\r\n\r\npragma solidity 0.6.7;\r\n\r\nabstract contract SAFEEngineLike {\r\n    function approveSAFEModification(address) virtual external;\r\n    function denySAFEModification(address) virtual external;\r\n    function transferInternalCoins(address,address,uint256) virtual external;\r\n    function settleDebt(uint256) virtual external;\r\n    function coinBalance(address) virtual public view returns (uint256);\r\n    function debtBalance(address) virtual public view returns (uint256);\r\n}\r\nabstract contract SystemCoinLike {\r\n    function balanceOf(address) virtual public view returns (uint256);\r\n    function approve(address, uint256) virtual public returns (uint256);\r\n    function transfer(address,uint256) virtual public returns (bool);\r\n    function transferFrom(address,address,uint256) virtual public returns (bool);\r\n}\r\nabstract contract CoinJoinLike {\r\n    function systemCoin() virtual public view returns (address);\r\n    function join(address, uint256) virtual external;\r\n}\r\n\r\ncontract NoRebalanceStabilityFeeTreasury {\r\n    // --- Auth ---\r\n    mapping (address => uint256) public authorizedAccounts;\r\n    /**\r\n     * @notice Add auth to an account\r\n     * @param account Account to add auth to\r\n     */\r\n    function addAuthorization(address account) external isAuthorized {\r\n        authorizedAccounts[account] = 1;\r\n        emit AddAuthorization(account);\r\n    }\r\n    /**\r\n     * @notice Remove auth from an account\r\n     * @param account Account to remove auth from\r\n     */\r\n    function removeAuthorization(address account) external isAuthorized {\r\n        authorizedAccounts[account] = 0;\r\n        emit RemoveAuthorization(account);\r\n    }\r\n    /**\r\n    * @notice Checks whether msg.sender can call an authed function\r\n    **/\r\n    modifier isAuthorized {\r\n        require(authorizedAccounts[msg.sender] == 1, \"NoRebalanceStabilityFeeTreasury/account-not-authorized\");\r\n        _;\r\n    }\r\n\r\n    // --- Events ---\r\n    event AddAuthorization(address account);\r\n    event RemoveAuthorization(address account);\r\n    event SetTotalAllowance(address indexed account, uint256 rad);\r\n    event SetPerBlockAllowance(address indexed account, uint256 rad);\r\n    event GiveFunds(address indexed account, uint256 rad);\r\n    event TakeFunds(address indexed account, uint256 rad);\r\n    event PullFunds(address indexed sender, address indexed dstAccount, address token, uint256 rad);\r\n\r\n    // --- Structs ---\r\n    struct Allowance {\r\n        uint256 total;\r\n        uint256 perBlock;\r\n    }\r\n\r\n    mapping(address => Allowance)                   private allowance;\r\n    mapping(address => mapping(uint256 => uint256)) public pulledPerBlock;\r\n\r\n    SAFEEngineLike  public safeEngine;\r\n    SystemCoinLike  public systemCoin;\r\n    CoinJoinLike    public coinJoin;\r\n\r\n    uint256 public pullFundsMinThreshold;      // minimum funds that must be in the treasury so that someone can pullFunds [rad]\r\n    uint256 public latestSurplusTransferTime;  // latest timestamp when transferSurplusFunds was called                    [seconds]\r\n    uint256 public contractEnabled;\r\n\r\n    modifier accountNotTreasury(address account) {\r\n        require(account != address(this), \"NoRebalanceStabilityFeeTreasury/account-cannot-be-treasury\");\r\n        _;\r\n    }\r\n\r\n    constructor(\r\n        address safeEngine_,\r\n        address coinJoin_\r\n    ) public {\r\n        require(address(CoinJoinLike(coinJoin_).systemCoin()) != address(0), \"NoRebalanceStabilityFeeTreasury/null-system-coin\");\r\n  \r\n        authorizedAccounts[msg.sender] = 1;\r\n        safeEngine                = SAFEEngineLike(safeEngine_);\r\n        coinJoin                  = CoinJoinLike(coinJoin_);\r\n        systemCoin                = SystemCoinLike(coinJoin.systemCoin());\r\n\r\n        systemCoin.approve(address(coinJoin), uint256(-1));\r\n\r\n        emit AddAuthorization(msg.sender);\r\n    }\r\n\r\n    // --- Math ---\r\n    uint256 constant HUNDRED = 10 ** 2;\r\n    uint256 constant RAY     = 10 ** 27;\r\n\r\n    function addition(uint256 x, uint256 y) internal pure returns (uint256 z) {\r\n        z = x + y;\r\n        require(z >= x, \"NoRebalanceStabilityFeeTreasury/add-uint-uint-overflow\");\r\n    }\r\n    function addition(int256 x, int256 y) internal pure returns (int256 z) {\r\n        z = x + y;\r\n        if (y <= 0) require(z <= x, \"NoRebalanceStabilityFeeTreasury/add-int-int-underflow\");\r\n        if (y  > 0) require(z > x, \"NoRebalanceStabilityFeeTreasury/add-int-int-overflow\");\r\n    }\r\n    function subtract(uint256 x, uint256 y) internal pure returns (uint256 z) {\r\n        require((z = x - y) <= x, \"NoRebalanceStabilityFeeTreasury/sub-uint-uint-underflow\");\r\n    }\r\n    function subtract(int256 x, int256 y) internal pure returns (int256 z) {\r\n        z = x - y;\r\n        require(y <= 0 || z <= x, \"NoRebalanceStabilityFeeTreasury/sub-int-int-underflow\");\r\n        require(y >= 0 || z >= x, \"NoRebalanceStabilityFeeTreasury/sub-int-int-overflow\");\r\n    }\r\n    function multiply(uint256 x, uint256 y) internal pure returns (uint256 z) {\r\n        require(y == 0 || (z = x * y) / y == x, \"NoRebalanceStabilityFeeTreasury/mul-uint-uint-overflow\");\r\n    }\r\n    function divide(uint256 x, uint256 y) internal pure returns (uint256 z) {\r\n        require(y > 0, \"NoRebalanceStabilityFeeTreasury/div-y-null\");\r\n        z = x / y;\r\n        require(z <= x, \"NoRebalanceStabilityFeeTreasury/div-invalid\");\r\n    }\r\n    function minimum(uint256 x, uint256 y) internal view returns (uint256 z) {\r\n        z = (x <= y) ? x : y;\r\n    }\r\n\r\n    // --- Utils ---\r\n    function either(bool x, bool y) internal pure returns (bool z) {\r\n        assembly{ z := or(x, y)}\r\n    }\r\n    function both(bool x, bool y) internal pure returns (bool z) {\r\n        assembly{ z := and(x, y)}\r\n    }\r\n    /**\r\n     * @notice Join all ERC20 system coins that the treasury has inside SAFEEngine\r\n     */\r\n    function joinAllCoins() internal {\r\n        if (systemCoin.balanceOf(address(this)) > 0) {\r\n          coinJoin.join(address(this), systemCoin.balanceOf(address(this)));\r\n        }\r\n    }\r\n    function settleDebt() public {\r\n        uint256 coinBalanceSelf = safeEngine.coinBalance(address(this));\r\n        uint256 debtBalanceSelf = safeEngine.debtBalance(address(this));\r\n\r\n        if (debtBalanceSelf > 0) {\r\n          safeEngine.settleDebt(minimum(coinBalanceSelf, debtBalanceSelf));\r\n        }\r\n    }\r\n\r\n    // --- Getters ---\r\n    function getAllowance(address account) public view returns (uint256, uint256) {\r\n        return (allowance[account].total, allowance[account].perBlock);\r\n    }\r\n\r\n    // --- SF Transfer Allowance ---\r\n    /**\r\n     * @notice Modify an address' total allowance in order to withdraw SF from the treasury\r\n     * @param account The approved address\r\n     * @param rad The total approved amount of SF to withdraw (number with 45 decimals)\r\n     */\r\n    function setTotalAllowance(address account, uint256 rad) external isAuthorized accountNotTreasury(account) {\r\n        require(account != address(0), \"NoRebalanceStabilityFeeTreasury/null-account\");\r\n        allowance[account].total = rad;\r\n        emit SetTotalAllowance(account, rad);\r\n    }\r\n    /**\r\n     * @notice Modify an address' per block allowance in order to withdraw SF from the treasury\r\n     * @param account The approved address\r\n     * @param rad The per block approved amount of SF to withdraw (number with 45 decimals)\r\n     */\r\n    function setPerBlockAllowance(address account, uint256 rad) external isAuthorized accountNotTreasury(account) {\r\n        require(account != address(0), \"NoRebalanceStabilityFeeTreasury/null-account\");\r\n        allowance[account].perBlock = rad;\r\n        emit SetPerBlockAllowance(account, rad);\r\n    }\r\n\r\n    // --- Stability Fee Transfer (Governance) ---\r\n    /**\r\n     * @notice Governance transfers SF to an address\r\n     * @param account Address to transfer SF to\r\n     * @param rad Amount of internal system coins to transfer (a number with 45 decimals)\r\n     */\r\n    function giveFunds(address account, uint256 rad) external isAuthorized accountNotTreasury(account) {\r\n        require(account != address(0), \"NoRebalanceStabilityFeeTreasury/null-account\");\r\n\r\n        joinAllCoins();\r\n        settleDebt();\r\n\r\n        require(safeEngine.debtBalance(address(this)) == 0, \"NoRebalanceStabilityFeeTreasury/outstanding-bad-debt\");\r\n        require(safeEngine.coinBalance(address(this)) >= rad, \"NoRebalanceStabilityFeeTreasury/not-enough-funds\");\r\n\r\n        safeEngine.transferInternalCoins(address(this), account, rad);\r\n        emit GiveFunds(account, rad);\r\n    }\r\n    /**\r\n     * @notice Governance takes funds from an address\r\n     * @param account Address to take system coins from\r\n     * @param rad Amount of internal system coins to take from the account (a number with 45 decimals)\r\n     */\r\n    function takeFunds(address account, uint256 rad) external isAuthorized accountNotTreasury(account) {\r\n        safeEngine.transferInternalCoins(account, address(this), rad);\r\n        emit TakeFunds(account, rad);\r\n    }\r\n\r\n    // --- Stability Fee Transfer (Approved Accounts) ---\r\n    /**\r\n     * @notice Pull stability fees from the treasury (if your allowance permits)\r\n     * @param dstAccount Address to transfer funds to\r\n     * @param token Address of the token to transfer (in this case it must be the address of the ERC20 system coin).\r\n     *              Used only to adhere to a standard for automated, on-chain treasuries\r\n     * @param wad Amount of system coins (SF) to transfer (expressed as an 18 decimal number but the contract will transfer\r\n              internal system coins that have 45 decimals)\r\n     */\r\n    function pullFunds(address dstAccount, address token, uint256 wad) external {\r\n        if (dstAccount == address(this)) return;\r\n        require(allowance[msg.sender].total >= multiply(wad, RAY), \"NoRebalanceStabilityFeeTreasury/not-allowed\");\r\n        require(dstAccount != address(0), \"NoRebalanceStabilityFeeTreasury/null-dst\");\r\n        require(wad > 0, \"NoRebalanceStabilityFeeTreasury/null-transfer-amount\");\r\n        require(token == address(systemCoin), \"NoRebalanceStabilityFeeTreasury/token-unavailable\");\r\n        if (allowance[msg.sender].perBlock > 0) {\r\n          require(addition(pulledPerBlock[msg.sender][block.number], multiply(wad, RAY)) <= allowance[msg.sender].perBlock, \"NoRebalanceStabilityFeeTreasury/per-block-limit-exceeded\");\r\n        }\r\n\r\n        pulledPerBlock[msg.sender][block.number] = addition(pulledPerBlock[msg.sender][block.number], multiply(wad, RAY));\r\n\r\n        joinAllCoins();\r\n        settleDebt();\r\n\r\n        require(safeEngine.debtBalance(address(this)) == 0, \"NoRebalanceStabilityFeeTreasury/outstanding-bad-debt\");\r\n        require(safeEngine.coinBalance(address(this)) >= multiply(wad, RAY), \"NoRebalanceStabilityFeeTreasury/not-enough-funds\");\r\n\r\n        // Update allowance\r\n        allowance[msg.sender].total = subtract(allowance[msg.sender].total, multiply(wad, RAY));\r\n\r\n        // Transfer money\r\n        safeEngine.transferInternalCoins(address(this), dstAccount, multiply(wad, RAY));\r\n\r\n        emit PullFunds(msg.sender, dstAccount, token, multiply(wad, RAY));\r\n    }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"safeEngine_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"coinJoin_\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"AddAuthorization\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"rad\",\"type\":\"uint256\"}],\"name\":\"GiveFunds\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"dstAccount\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"rad\",\"type\":\"uint256\"}],\"name\":\"PullFunds\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"RemoveAuthorization\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"rad\",\"type\":\"uint256\"}],\"name\":\"SetPerBlockAllowance\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"rad\",\"type\":\"uint256\"}],\"name\":\"SetTotalAllowance\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"rad\",\"type\":\"uint256\"}],\"name\":\"TakeFunds\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"addAuthorization\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"authorizedAccounts\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"coinJoin\",\"outputs\":[{\"internalType\":\"contract CoinJoinLike\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"contractEnabled\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getAllowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"rad\",\"type\":\"uint256\"}],\"name\":\"giveFunds\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"latestSurplusTransferTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"dstAccount\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"wad\",\"type\":\"uint256\"}],\"name\":\"pullFunds\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pullFundsMinThreshold\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"pulledPerBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"removeAuthorization\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"safeEngine\",\"outputs\":[{\"internalType\":\"contract SAFEEngineLike\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"rad\",\"type\":\"uint256\"}],\"name\":\"setPerBlockAllowance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"rad\",\"type\":\"uint256\"}],\"name\":\"setTotalAllowance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"settleDebt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"systemCoin\",\"outputs\":[{\"internalType\":\"contract SystemCoinLike\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"rad\",\"type\":\"uint256\"}],\"name\":\"takeFunds\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"NoRebalanceStabilityFeeTreasury","CompilerVersion":"v0.6.7+commit.b8d736ae","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000cc88a9d330da1133df3a7bd823b95e52511a69620000000000000000000000000a5653cca4db1b6e265f47caf6969e64f1cfdc45","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"ipfs://44f16f8d70221c9685a146d81e517d3a83c0491a9dacbd938a25ff957725253a"}]}