{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"/D/Data/4. Coding/Solidity/Nakamoto/polkastrategies/contracts/interfaces/IHarvest.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity 0.8.4;\\r\\n\\r\\ninterface IHarvest {\\r\\n    function setHarvestRewardVault(address _harvestRewardVault) external;\\r\\n\\r\\n    function setHarvestRewardPool(address _harvestRewardPool) external;\\r\\n\\r\\n    function setHarvestPoolToken(address _harvestfToken) external;\\r\\n\\r\\n    function setFarmToken(address _farmToken) external;\\r\\n\\r\\n    function updateReward() external;\\r\\n}\\r\\n\"\r\n    },\r\n    \"/D/Data/4. Coding/Solidity/Nakamoto/polkastrategies/contracts/interfaces/IHarvestVault.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity 0.8.4;\\r\\n\\r\\ninterface IHarvestVault {\\r\\n    function deposit(uint256 amount) external;\\r\\n\\r\\n    function withdraw(uint256 numberOfShares) external;\\r\\n}\\r\\n\"\r\n    },\r\n    \"/D/Data/4. Coding/Solidity/Nakamoto/polkastrategies/contracts/interfaces/IMintNoRewardPool.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity 0.8.4;\\r\\n\\r\\ninterface IMintNoRewardPool {\\r\\n    function stake(uint256 amount) external;\\r\\n\\r\\n    function withdraw(uint256 amount) external;\\r\\n\\r\\n    function earned(address account) external view returns (uint256);\\r\\n\\r\\n    function lastTimeRewardApplicable() external view returns (uint256);\\r\\n\\r\\n    function rewardPerToken() external view returns (uint256);\\r\\n\\r\\n    function rewards(address account) external view returns (uint256);\\r\\n\\r\\n    function userRewardPerTokenPaid(address account)\\r\\n        external\\r\\n        view\\r\\n        returns (uint256);\\r\\n\\r\\n    function lastUpdateTime() external view returns (uint256);\\r\\n\\r\\n    function rewardRate() external view returns (uint256);\\r\\n\\r\\n    function totalSupply() external view returns (uint256);\\r\\n\\r\\n    function rewardPerTokenStored() external view returns (uint256);\\r\\n\\r\\n    function periodFinish() external view returns (uint256);\\r\\n\\r\\n    function balanceOf(address account) external view returns (uint256);\\r\\n    function getReward() external;\\r\\n}\\r\\n\"\r\n    },\r\n    \"/D/Data/4. Coding/Solidity/Nakamoto/polkastrategies/contracts/interfaces/IStrategy.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity 0.8.4;\\r\\n\\r\\ninterface IStrategy {\\r\\n    function setTreasury(address payable _feeAddress) external;\\r\\n\\r\\n    function setCap(uint256 _cap) external;\\r\\n\\r\\n    function setLockTime(uint256 _lockTime) external;\\r\\n\\r\\n    function setFeeAddress(address payable _feeAddress) external;\\r\\n\\r\\n    function setFee(uint256 _fee) external;\\r\\n\\r\\n    function rescueDust() external;\\r\\n\\r\\n    function rescueAirdroppedTokens(address _token, address to) external;\\r\\n\\r\\n    function setSushiswapRouter(address _sushiswapRouter) external;\\r\\n}\\r\\n\"\r\n    },\r\n    \"/D/Data/4. Coding/Solidity/Nakamoto/polkastrategies/contracts/interfaces/IUniswapRouter.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\r\\npragma solidity 0.8.4;\\r\\n\\r\\n// Interface declarations\\r\\n\\r\\n/* solhint-disable func-order */\\r\\n\\r\\ninterface IUniswapRouter {\\r\\n    function addLiquidity(\\r\\n        address tokenA,\\r\\n        address tokenB,\\r\\n        uint256 amountADesired,\\r\\n        uint256 amountBDesired,\\r\\n        uint256 amountAMin,\\r\\n        uint256 amountBMin,\\r\\n        address to,\\r\\n        uint256 deadline\\r\\n    )\\r\\n        external\\r\\n        returns (\\r\\n            uint256 amountA,\\r\\n            uint256 amountB,\\r\\n            uint256 liquidity\\r\\n        );\\r\\n\\r\\n    function addLiquidityETH(\\r\\n        address token,\\r\\n        uint256 amountTokenDesired,\\r\\n        uint256 amountTokenMin,\\r\\n        uint256 amountETHMin,\\r\\n        address to,\\r\\n        uint256 deadline\\r\\n    )\\r\\n        external\\r\\n        payable\\r\\n        returns (\\r\\n            uint256 amountToken,\\r\\n            uint256 amountETH,\\r\\n            uint256 liquidity\\r\\n        );\\r\\n\\r\\n    function removeLiquidityETH(\\r\\n        address token,\\r\\n        uint256 liquidity,\\r\\n        uint256 amountTokenMin,\\r\\n        uint256 amountETHMin,\\r\\n        address to,\\r\\n        uint256 deadline\\r\\n    ) external returns (uint256 amountToken, uint256 amountETH);\\r\\n\\r\\n    function removeLiquidity(\\r\\n        address tokenA,\\r\\n        address tokenB,\\r\\n        uint256 liquidity,\\r\\n        uint256 amountAMin,\\r\\n        uint256 amountBMin,\\r\\n        address to,\\r\\n        uint256 deadline\\r\\n    ) external returns (uint256 amountA, uint256 amountB);\\r\\n\\r\\n    function getAmountsOut(uint256 amountIn, address[] calldata path)\\r\\n        external\\r\\n        view\\r\\n        returns (uint256[] memory amounts);\\r\\n\\r\\n    function swapExactETHForTokens(\\r\\n        uint256 amountOutMin,\\r\\n        address[] calldata path,\\r\\n        address to,\\r\\n        uint256 deadline\\r\\n    ) external payable returns (uint256[] memory amounts);\\r\\n\\r\\n    function swapExactTokensForETH(\\r\\n        uint256 amountIn,\\r\\n        uint256 amountOutMin,\\r\\n        address[] calldata path,\\r\\n        address to,\\r\\n        uint256 deadline\\r\\n    ) external returns (uint256[] memory amounts);\\r\\n\\r\\n    function swapExactTokensForTokens(\\r\\n        uint256 amountIn,\\r\\n        uint256 amountOutMin,\\r\\n        address[] calldata path,\\r\\n        address to,\\r\\n        uint256 deadline\\r\\n    ) external returns (uint256[] memory amounts);\\r\\n}\\r\\n\"\r\n    },\r\n    \"/D/Data/4. Coding/Solidity/Nakamoto/polkastrategies/contracts/strategies/Harvest/HarvestSC.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity 0.8.4;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\r\\n\\r\\nimport \\\"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\\\";\\r\\n\\r\\nimport \\\"./base/HarvestSCBase.sol\\\";\\r\\nimport \\\"../base/StrategyBase.sol\\\";\\r\\n\\r\\n/*\\r\\n  |Strategy Flow| \\r\\n      - User shows up with Token and we deposit it in Havest's Vault. \\r\\n      - After this we have fToken that we add in Harvest's Reward Pool which gives FARM as rewards\\r\\n\\r\\n    - Withdrawal flow does same thing, but backwards\\r\\n        - User can obtain extra Token when withdrawing. 50% of them goes to the user, 50% goes to the treasury in ETH\\r\\n        - User can obtain FARM tokens when withdrawing. 50% of them goes to the user in Token, 50% goes to the treasury in ETH \\r\\n*/\\r\\ncontract HarvestSC is StrategyBase, HarvestSCBase, ReentrancyGuardUpgradeable {\\r\\n    using SafeMath for uint256;\\r\\n    using SafeERC20 for IERC20;\\r\\n\\r\\n    /**\\r\\n     * @notice Create a new HarvestDAI contract\\r\\n     * @param _harvestRewardVault VaultDAI  address\\r\\n     * @param _harvestRewardPool NoMintRewardPool address\\r\\n     * @param _sushiswapRouter Sushiswap Router address\\r\\n     * @param _harvestfToken Pool's underlying token address\\r\\n     * @param _farmToken Farm address\\r\\n     * @param _token Token address\\r\\n     * @param _weth WETH address\\r\\n     * @param _treasuryAddress treasury address\\r\\n     * @param _feeAddress fee address\\r\\n     */\\r\\n    function initialize(\\r\\n        address _harvestRewardVault,\\r\\n        address _harvestRewardPool,\\r\\n        address _sushiswapRouter,\\r\\n        address _harvestfToken,\\r\\n        address _farmToken,\\r\\n        address _token,\\r\\n        address _weth,\\r\\n        address payable _treasuryAddress,\\r\\n        address payable _feeAddress\\r\\n    ) external initializer {\\r\\n        __ReentrancyGuard_init();\\r\\n        __HarvestBase_init(\\r\\n            _harvestRewardVault,\\r\\n            _harvestRewardPool,\\r\\n            _sushiswapRouter,\\r\\n            _harvestfToken,\\r\\n            _farmToken,\\r\\n            _token,\\r\\n            _weth,\\r\\n            _treasuryAddress,\\r\\n            _feeAddress,\\r\\n            5000000 * (10**18)\\r\\n        );\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Deposit to this strategy for rewards\\r\\n     * @param tokenAmount Amount of Token investment\\r\\n     * @param deadline Number of blocks until transaction expires\\r\\n     * @return Amount of fToken\\r\\n     */\\r\\n    function deposit(\\r\\n        uint256 tokenAmount,\\r\\n        uint256 deadline,\\r\\n        uint256 slippage\\r\\n    ) public nonReentrant returns (uint256) {\\r\\n        // -----\\r\\n        // validate\\r\\n        // -----\\r\\n        _validateDeposit(deadline, tokenAmount, totalToken, slippage);\\r\\n\\r\\n        _updateRewards(msg.sender);\\r\\n\\r\\n        IERC20(token).safeTransferFrom(msg.sender, address(this), tokenAmount);\\r\\n\\r\\n        DepositData memory results;\\r\\n        UserInfo storage user = userInfo[msg.sender];\\r\\n\\r\\n        user.timestamp = block.timestamp;\\r\\n\\r\\n        totalToken = totalToken.add(tokenAmount);\\r\\n        user.amountToken = user.amountToken.add(tokenAmount);\\r\\n        results.obtainedToken = tokenAmount;\\r\\n\\r\\n        // -----\\r\\n        // deposit Token into harvest and get fToken\\r\\n        // -----\\r\\n        results.obtainedfToken = _depositTokenToHarvestVault(\\r\\n            results.obtainedToken\\r\\n        );\\r\\n\\r\\n        // -----\\r\\n        // stake fToken into the NoMintRewardPool\\r\\n        // -----\\r\\n        _stakefTokenToHarvestPool(results.obtainedfToken);\\r\\n        user.amountfToken = user.amountfToken.add(results.obtainedfToken);\\r\\n\\r\\n        // -----\\r\\n        // mint parachain tokens\\r\\n        // -----\\r\\n        _mintParachainAuctionTokens(results.obtainedfToken);\\r\\n\\r\\n        emit Deposit(\\r\\n            msg.sender,\\r\\n            tx.origin,\\r\\n            results.obtainedToken,\\r\\n            results.obtainedfToken\\r\\n        );\\r\\n\\r\\n        user.underlyingRatio = _getRatio(\\r\\n            user.amountfToken,\\r\\n            user.amountToken,\\r\\n            18\\r\\n        );\\r\\n\\r\\n        return results.obtainedfToken;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Withdraw tokens and claim rewards\\r\\n     * @param deadline Number of blocks until transaction expires\\r\\n     * @return Amount of ETH obtained\\r\\n     */\\r\\n    function withdraw(\\r\\n        uint256 amount,\\r\\n        uint256 deadline,\\r\\n        uint256 slippage,\\r\\n        uint256 ethPerToken,\\r\\n        uint256 ethPerFarm,\\r\\n        uint256 tokensPerEth //no of tokens per 1 eth\\r\\n    ) public nonReentrant returns (uint256) {\\r\\n        // -----\\r\\n        // validation\\r\\n        // -----\\r\\n        UserInfo storage user = userInfo[msg.sender];\\r\\n        uint256 receiptBalance = receiptToken.balanceOf(msg.sender);\\r\\n\\r\\n        _validateWithdraw(\\r\\n            deadline,\\r\\n            amount,\\r\\n            user.amountfToken,\\r\\n            receiptBalance,\\r\\n            user.timestamp,\\r\\n            slippage\\r\\n        );\\r\\n\\r\\n        _updateRewards(msg.sender);\\r\\n\\r\\n        WithdrawData memory results;\\r\\n        results.initialAmountfToken = user.amountfToken;\\r\\n        results.prevDustEthBalance = address(this).balance;\\r\\n\\r\\n        // -----\\r\\n        // withdraw from HarvestRewardPool (get fToken back)\\r\\n        // -----\\r\\n        results.obtainedfToken = _unstakefTokenFromHarvestPool(amount);\\r\\n\\r\\n        // -----\\r\\n        // get rewards\\r\\n        // -----\\r\\n        harvestRewardPool.getReward(); //transfers FARM to this contract\\r\\n\\r\\n        // -----\\r\\n        // calculate rewards and do the accounting for fTokens\\r\\n        // -----\\r\\n        uint256 transferableRewards =\\r\\n            _calculateRewards(msg.sender, amount, results.initialAmountfToken);\\r\\n\\r\\n        (user.amountfToken, results.burnAmount) = _calculatefTokenRemainings(\\r\\n            amount,\\r\\n            results.initialAmountfToken\\r\\n        );\\r\\n        _burnParachainAuctionTokens(results.burnAmount);\\r\\n\\r\\n        // -----\\r\\n        // withdraw from HarvestRewardVault (return fToken and get Token back)\\r\\n        // -----\\r\\n        results.obtainedToken = _withdrawTokenFromHarvestVault(\\r\\n            results.obtainedfToken\\r\\n        );\\r\\n        emit ObtainedInfo(\\r\\n            msg.sender,\\r\\n            results.obtainedToken,\\r\\n            results.obtainedfToken\\r\\n        );\\r\\n\\r\\n        // -----\\r\\n        // calculate feeable tokens (extra Token obtained by returning fToken)\\r\\n        //              - feeableToken/2 (goes to the treasury in ETH)\\r\\n        //              - results.totalToken = obtainedToken + 1/2*feeableToken (goes to the user)\\r\\n        // -----\\r\\n        results.auctionedToken = 0;\\r\\n        (results.feeableToken, results.earnedTokens) = _calculateFeeableTokens(\\r\\n            results.initialAmountfToken,\\r\\n            results.obtainedToken,\\r\\n            user.amountToken,\\r\\n            results.obtainedfToken,\\r\\n            user.underlyingRatio\\r\\n        );\\r\\n        user.earnedTokens = user.earnedTokens.add(results.earnedTokens);\\r\\n\\r\\n        results.calculatedTokenAmount = (amount.mul(10**18)).div(\\r\\n            user.underlyingRatio\\r\\n        );\\r\\n        if (user.amountfToken == 0) {\\r\\n            user.amountToken = 0;\\r\\n        } else {\\r\\n            if (results.calculatedTokenAmount <= user.amountToken) {\\r\\n                user.amountToken = user.amountToken.sub(\\r\\n                    results.calculatedTokenAmount\\r\\n                );\\r\\n            } else {\\r\\n                user.amountToken = 0;\\r\\n            }\\r\\n        }\\r\\n        results.obtainedToken = results.obtainedToken.sub(results.feeableToken);\\r\\n\\r\\n        if (results.feeableToken > 0) {\\r\\n            //min\\r\\n            results.auctionedToken = results.feeableToken.div(2);\\r\\n            results.feeableToken = results.feeableToken.sub(\\r\\n                results.auctionedToken\\r\\n            );\\r\\n        }\\r\\n        results.totalToken = results.obtainedToken.add(results.feeableToken);\\r\\n        // -----\\r\\n        // swap auctioned Token to ETH\\r\\n        // -----\\r\\n        address[] memory swapPath = new address[](2);\\r\\n        swapPath[0] = token;\\r\\n        swapPath[1] = weth;\\r\\n\\r\\n        if (results.auctionedToken > 0) {\\r\\n            uint256 swapAuctionedTokenResult =\\r\\n                _swapTokenToEth(\\r\\n                    swapPath,\\r\\n                    results.auctionedToken,\\r\\n                    deadline,\\r\\n                    slippage,\\r\\n                    ethPerToken\\r\\n                );\\r\\n            results.auctionedEth = results.auctionedEth.add(\\r\\n                swapAuctionedTokenResult\\r\\n            );\\r\\n\\r\\n            emit ExtraTokensExchanged(\\r\\n                msg.sender,\\r\\n                results.auctionedToken,\\r\\n                swapAuctionedTokenResult\\r\\n            );\\r\\n        }\\r\\n\\r\\n        // -----\\r\\n        // check & swap FARM rewards with ETH (50% for treasury) and with Token by going through ETH first (the other 50% for user)\\r\\n        // -----\\r\\n\\r\\n        if (transferableRewards > 0) {\\r\\n            emit RewardsEarned(msg.sender, transferableRewards);\\r\\n            user.earnedRewards = user.earnedRewards.add(transferableRewards);\\r\\n\\r\\n            swapPath[0] = farmToken;\\r\\n\\r\\n            results.rewardsInEth = _swapTokenToEth(\\r\\n                swapPath,\\r\\n                transferableRewards,\\r\\n                deadline,\\r\\n                slippage,\\r\\n                ethPerFarm\\r\\n            );\\r\\n            results.auctionedRewardsInEth = results.rewardsInEth.div(2);\\r\\n            //50% goes to treasury in ETH\\r\\n            results.userRewardsInEth = results.rewardsInEth.sub(\\r\\n                results.auctionedRewardsInEth\\r\\n            );\\r\\n            //50% goes to user in Token (swapped below)\\r\\n\\r\\n            results.auctionedEth = results.auctionedEth.add(\\r\\n                results.auctionedRewardsInEth\\r\\n            );\\r\\n            emit RewardsExchanged(\\r\\n                msg.sender,\\r\\n                \\\"ETH\\\",\\r\\n                transferableRewards,\\r\\n                results.rewardsInEth\\r\\n            );\\r\\n        }\\r\\n        if (results.userRewardsInEth > 0) {\\r\\n            swapPath[0] = weth;\\r\\n            swapPath[1] = token;\\r\\n\\r\\n            uint256 userRewardsEthToTokenResult =\\r\\n                _swapEthToToken(\\r\\n                    swapPath,\\r\\n                    results.userRewardsInEth,\\r\\n                    deadline,\\r\\n                    slippage,\\r\\n                    tokensPerEth\\r\\n                );\\r\\n            results.totalToken = results.totalToken.add(\\r\\n                userRewardsEthToTokenResult\\r\\n            );\\r\\n\\r\\n            emit RewardsExchanged(\\r\\n                msg.sender,\\r\\n                \\\"Token\\\",\\r\\n                transferableRewards.div(2),\\r\\n                userRewardsEthToTokenResult\\r\\n            );\\r\\n        }\\r\\n        user.rewards = user.rewards.sub(transferableRewards);\\r\\n\\r\\n        // -----\\r\\n        // final accounting\\r\\n        // -----\\r\\n        if (results.calculatedTokenAmount <= totalToken) {\\r\\n            totalToken = totalToken.sub(results.calculatedTokenAmount);\\r\\n        } else {\\r\\n            totalToken = 0;\\r\\n        }\\r\\n\\r\\n        user.underlyingRatio = _getRatio(\\r\\n            user.amountfToken,\\r\\n            user.amountToken,\\r\\n            18\\r\\n        );\\r\\n\\r\\n        // -----\\r\\n        // transfer Token to user, ETH to fee address and ETH to the treasury address\\r\\n        // -----\\r\\n        if (fee > 0) {\\r\\n            uint256 feeToken = _calculateFee(results.totalToken);\\r\\n            results.totalToken = results.totalToken.sub(feeToken);\\r\\n\\r\\n            swapPath[0] = token;\\r\\n            swapPath[1] = weth;\\r\\n\\r\\n            uint256 feeTokenInEth =\\r\\n                _swapTokenToEth(\\r\\n                    swapPath,\\r\\n                    feeToken,\\r\\n                    deadline,\\r\\n                    slippage,\\r\\n                    ethPerToken\\r\\n                );\\r\\n\\r\\n            safeTransferETH(feeAddress, feeTokenInEth);\\r\\n            user.userCollectedFees = user.userCollectedFees.add(feeTokenInEth);\\r\\n        }\\r\\n\\r\\n        IERC20(token).safeTransfer(msg.sender, results.totalToken);\\r\\n\\r\\n        safeTransferETH(treasuryAddress, results.auctionedEth);\\r\\n        user.userTreasuryEth = user.userTreasuryEth.add(results.auctionedEth);\\r\\n\\r\\n        emit Withdraw(\\r\\n            msg.sender,\\r\\n            tx.origin,\\r\\n            results.obtainedToken,\\r\\n            results.obtainedfToken,\\r\\n            results.auctionedEth\\r\\n        );\\r\\n\\r\\n        // -----\\r\\n        // dust check\\r\\n        // -----\\r\\n        if (address(this).balance > results.prevDustEthBalance) {\\r\\n            ethDust = ethDust.add(\\r\\n                address(this).balance.sub(results.prevDustEthBalance)\\r\\n            );\\r\\n        }\\r\\n\\r\\n        return results.totalToken;\\r\\n    }\\r\\n}\\r\\n\"\r\n    },\r\n    \"/D/Data/4. Coding/Solidity/Nakamoto/polkastrategies/contracts/strategies/Harvest/base/HarvestBase.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity 0.8.4;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\r\\n\\r\\nimport \\\"../../../interfaces/IUniswapRouter.sol\\\";\\r\\nimport \\\"../../../interfaces/IHarvestVault.sol\\\";\\r\\nimport \\\"../../../interfaces/IMintNoRewardPool.sol\\\";\\r\\n\\r\\nimport \\\"../../../interfaces/IHarvest.sol\\\";\\r\\nimport \\\"../../../interfaces/IStrategy.sol\\\";\\r\\n\\r\\nimport \\\"../../base/StrategyBase.sol\\\";\\r\\nimport \\\"./HarvestStorage.sol\\\";\\r\\n\\r\\ncontract HarvestBase is\\r\\n    HarvestStorage,\\r\\n    OwnableUpgradeable,\\r\\n    StrategyBase,\\r\\n    IHarvest,\\r\\n    IStrategy\\r\\n{\\r\\n    using SafeMath for uint256;\\r\\n\\r\\n    struct UserDeposits {\\r\\n        uint256 timestamp;\\r\\n        uint256 amountfToken;\\r\\n    }\\r\\n    /// @notice Used internally for avoiding \\\"stack-too-deep\\\" error when depositing\\r\\n    struct DepositData {\\r\\n        address[] swapPath;\\r\\n        uint256[] swapAmounts;\\r\\n        uint256 obtainedToken;\\r\\n        uint256 obtainedfToken;\\r\\n        uint256 prevfTokenBalance;\\r\\n    }\\r\\n\\r\\n    /// @notice Used internally for avoiding \\\"stack-too-deep\\\" error when withdrawing\\r\\n    struct WithdrawData {\\r\\n        uint256 prevDustEthBalance;\\r\\n        uint256 prevfTokenBalance;\\r\\n        uint256 prevTokenBalance;\\r\\n        uint256 obtainedfToken;\\r\\n        uint256 obtainedToken;\\r\\n        uint256 feeableToken;\\r\\n        uint256 feeableEth;\\r\\n        uint256 totalEth;\\r\\n        uint256 totalToken;\\r\\n        uint256 auctionedEth;\\r\\n        uint256 auctionedToken;\\r\\n        uint256 rewards;\\r\\n        uint256 farmBalance;\\r\\n        uint256 burnAmount;\\r\\n        uint256 earnedTokens;\\r\\n        uint256 rewardsInEth;\\r\\n        uint256 auctionedRewardsInEth;\\r\\n        uint256 userRewardsInEth;\\r\\n        uint256 initialAmountfToken;\\r\\n        uint256 calculatedTokenAmount;\\r\\n    }\\r\\n\\r\\n    //-----------------------------------------------------------------------------------------------------------------//\\r\\n    //------------------------------------ Events -------------------------------------------------//\\r\\n    //-----------------------------------------------------------------------------------------------------------------//\\r\\n    event ExtraTokensExchanged(\\r\\n        address indexed user,\\r\\n        uint256 tokensAmount,\\r\\n        uint256 obtainedEth\\r\\n    );\\r\\n    event ObtainedInfo(\\r\\n        address indexed user,\\r\\n        uint256 underlying,\\r\\n        uint256 underlyingReceipt\\r\\n    );\\r\\n\\r\\n    event RewardsEarned(address indexed user, uint256 amount);\\r\\n    event ExtraTokens(address indexed user, uint256 amount);\\r\\n\\r\\n    /// @notice Event emitted when owner makes a rescue dust request\\r\\n    event RescuedDust(string indexed dustType, uint256 amount);\\r\\n\\r\\n    /// @notice Event emitted when owner changes any contract address\\r\\n    event ChangedAddress(\\r\\n        string indexed addressType,\\r\\n        address indexed oldAddress,\\r\\n        address indexed newAddress\\r\\n    );\\r\\n\\r\\n    /// @notice Event emitted when owner changes any contract address\\r\\n    event ChangedValue(\\r\\n        string indexed valueType,\\r\\n        uint256 indexed oldValue,\\r\\n        uint256 indexed newValue\\r\\n    );\\r\\n\\r\\n    /**\\r\\n     * @notice Create a new HarvestDAI contract\\r\\n     * @param _harvestRewardVault VaultToken  address\\r\\n     * @param _harvestRewardPool NoMintRewardPool address\\r\\n     * @param _sushiswapRouter Sushiswap Router address\\r\\n     * @param _harvestfToken Pool's underlying token address\\r\\n     * @param _farmToken Farm address\\r\\n     * @param _token Token address\\r\\n     * @param _weth WETH address\\r\\n     * @param _treasuryAddress treasury address\\r\\n     * @param _feeAddress fee address\\r\\n     */\\r\\n    function __HarvestBase_init(\\r\\n        address _harvestRewardVault,\\r\\n        address _harvestRewardPool,\\r\\n        address _sushiswapRouter,\\r\\n        address _harvestfToken,\\r\\n        address _farmToken,\\r\\n        address _token,\\r\\n        address _weth,\\r\\n        address payable _treasuryAddress,\\r\\n        address payable _feeAddress,\\r\\n        uint256 _cap\\r\\n    ) internal initializer {\\r\\n        require(_harvestRewardVault != address(0), \\\"VAULT_0x0\\\");\\r\\n        require(_harvestRewardPool != address(0), \\\"POOL_0x0\\\");\\r\\n        require(_harvestfToken != address(0), \\\"fTOKEN_0x0\\\");\\r\\n        require(_farmToken != address(0), \\\"FARM_0x0\\\");\\r\\n\\r\\n        __Ownable_init();\\r\\n\\r\\n        __StrategyBase_init(\\r\\n            _sushiswapRouter,\\r\\n            _token,\\r\\n            _weth,\\r\\n            _treasuryAddress,\\r\\n            _feeAddress,\\r\\n            _cap\\r\\n        );\\r\\n        harvestRewardVault = IHarvestVault(_harvestRewardVault);\\r\\n        harvestRewardPool = IMintNoRewardPool(_harvestRewardPool);\\r\\n        harvestfToken = _harvestfToken;\\r\\n        farmToken = _farmToken;\\r\\n        receiptToken = new ReceiptToken(token, address(this));\\r\\n    }\\r\\n\\r\\n    //-----------------------------------------------------------------------------------------------------------------//\\r\\n    //------------------------------------ Setters -------------------------------------------------//\\r\\n    //-----------------------------------------------------------------------------------------------------------------//\\r\\n    /**\\r\\n     * @notice Update the address of VaultDAI\\r\\n     * @dev Can only be called by the owner\\r\\n     * @param _harvestRewardVault Address of VaultDAI\\r\\n     */\\r\\n    function setHarvestRewardVault(address _harvestRewardVault)\\r\\n        external\\r\\n        override\\r\\n        onlyOwner\\r\\n    {\\r\\n        require(_harvestRewardVault != address(0), \\\"VAULT_0x0\\\");\\r\\n        emit ChangedAddress(\\r\\n            \\\"VAULT\\\",\\r\\n            address(harvestRewardVault),\\r\\n            _harvestRewardVault\\r\\n        );\\r\\n        harvestRewardVault = IHarvestVault(_harvestRewardVault);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Update the address of NoMintRewardPool\\r\\n     * @dev Can only be called by the owner\\r\\n     * @param _harvestRewardPool Address of NoMintRewardPool\\r\\n     */\\r\\n    function setHarvestRewardPool(address _harvestRewardPool)\\r\\n        external\\r\\n        override\\r\\n        onlyOwner\\r\\n    {\\r\\n        require(_harvestRewardPool != address(0), \\\"POOL_0x0\\\");\\r\\n        emit ChangedAddress(\\r\\n            \\\"POOL\\\",\\r\\n            address(harvestRewardPool),\\r\\n            _harvestRewardPool\\r\\n        );\\r\\n        harvestRewardPool = IMintNoRewardPool(_harvestRewardPool);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Update the address of Sushiswap Router\\r\\n     * @dev Can only be called by the owner\\r\\n     * @param _sushiswapRouter Address of Sushiswap Router\\r\\n     */\\r\\n    function setSushiswapRouter(address _sushiswapRouter)\\r\\n        external\\r\\n        override\\r\\n        onlyOwner\\r\\n    {\\r\\n        require(_sushiswapRouter != address(0), \\\"0x0\\\");\\r\\n        emit ChangedAddress(\\r\\n            \\\"SUSHISWAP_ROUTER\\\",\\r\\n            address(sushiswapRouter),\\r\\n            _sushiswapRouter\\r\\n        );\\r\\n        sushiswapRouter = IUniswapRouter(_sushiswapRouter);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Update the address of Pool's underlying token\\r\\n     * @dev Can only be called by the owner\\r\\n     * @param _harvestfToken Address of Pool's underlying token\\r\\n     */\\r\\n    function setHarvestPoolToken(address _harvestfToken)\\r\\n        external\\r\\n        override\\r\\n        onlyOwner\\r\\n    {\\r\\n        require(_harvestfToken != address(0), \\\"TOKEN_0x0\\\");\\r\\n        emit ChangedAddress(\\\"TOKEN\\\", harvestfToken, _harvestfToken);\\r\\n        harvestfToken = _harvestfToken;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Update the address of FARM\\r\\n     * @dev Can only be called by the owner\\r\\n     * @param _farmToken Address of FARM\\r\\n     */\\r\\n    function setFarmToken(address _farmToken) external override onlyOwner {\\r\\n        require(_farmToken != address(0), \\\"FARM_0x0\\\");\\r\\n        emit ChangedAddress(\\\"FARM\\\", farmToken, _farmToken);\\r\\n        farmToken = _farmToken;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Update the address for fees\\r\\n     * @dev Can only be called by the owner\\r\\n     * @param _feeAddress Fee's address\\r\\n     */\\r\\n    function setTreasury(address payable _feeAddress)\\r\\n        external\\r\\n        override\\r\\n        onlyOwner\\r\\n    {\\r\\n        require(_feeAddress != address(0), \\\"0x0\\\");\\r\\n        emit ChangedAddress(\\r\\n            \\\"TREASURY\\\",\\r\\n            address(treasuryAddress),\\r\\n            address(_feeAddress)\\r\\n        );\\r\\n        treasuryAddress = _feeAddress;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Set max ETH cap for this strategy\\r\\n     * @dev Can only be called by the owner\\r\\n     * @param _cap ETH amount\\r\\n     */\\r\\n    function setCap(uint256 _cap) external override onlyOwner {\\r\\n        emit ChangedValue(\\\"CAP\\\", cap, _cap);\\r\\n        cap = _cap;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Set lock time\\r\\n     * @dev Can only be called by the owner\\r\\n     * @param _lockTime lock time in seconds\\r\\n     */\\r\\n    function setLockTime(uint256 _lockTime) external override onlyOwner {\\r\\n        require(_lockTime > 0, \\\"TIME_0\\\");\\r\\n        emit ChangedValue(\\\"LOCKTIME\\\", lockTime, _lockTime);\\r\\n        lockTime = _lockTime;\\r\\n    }\\r\\n\\r\\n    function setFeeAddress(address payable _feeAddress)\\r\\n        external\\r\\n        override\\r\\n        onlyOwner\\r\\n    {\\r\\n        emit ChangedAddress(\\\"FEE\\\", address(feeAddress), address(_feeAddress));\\r\\n        feeAddress = _feeAddress;\\r\\n    }\\r\\n\\r\\n    function setFee(uint256 _fee) external override onlyOwner {\\r\\n        require(_fee <= uint256(9000), \\\"FEE_TOO_HIGH\\\");\\r\\n        emit ChangedValue(\\\"FEE\\\", fee, _fee);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Rescue dust resulted from swaps/liquidity\\r\\n     * @dev Can only be called by the owner\\r\\n     */\\r\\n    function rescueDust() external override onlyOwner {\\r\\n        if (ethDust > 0) {\\r\\n            safeTransferETH(treasuryAddress, ethDust);\\r\\n            treasueryEthDust = treasueryEthDust.add(ethDust);\\r\\n            emit RescuedDust(\\\"ETH\\\", ethDust);\\r\\n            ethDust = 0;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Rescue any non-reward token that was airdropped to this contract\\r\\n     * @dev Can only be called by the owner\\r\\n     */\\r\\n    function rescueAirdroppedTokens(address _token, address to)\\r\\n        external\\r\\n        override\\r\\n        onlyOwner\\r\\n    {\\r\\n        require(_token != farmToken, \\\"rescue_reward_error\\\");\\r\\n\\r\\n        uint256 balanceOfToken = IERC20(_token).balanceOf(address(this));\\r\\n        require(balanceOfToken > 0, \\\"balance_0\\\");\\r\\n\\r\\n        require(IERC20(_token).transfer(to, balanceOfToken), \\\"rescue_failed\\\");\\r\\n    }\\r\\n\\r\\n    /// @notice Transfer rewards to this strategy\\r\\n    function updateReward() external override onlyOwner {\\r\\n        harvestRewardPool.getReward();\\r\\n    }\\r\\n\\r\\n    //-----------------------------------------------------------------------------------------------------------------//\\r\\n    //------------------------------------ View methods -------------------------------------------------//\\r\\n    //-----------------------------------------------------------------------------------------------------------------//\\r\\n    /**\\r\\n     * @notice Check if user can withdraw based on current lock time\\r\\n     * @param user Address of the user\\r\\n     * @return true or false\\r\\n     */\\r\\n    function isWithdrawalAvailable(address user) public view returns (bool) {\\r\\n        if (lockTime > 0) {\\r\\n            return userInfo[user].timestamp.add(lockTime) <= block.timestamp;\\r\\n        }\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice View function to see pending rewards for account.\\r\\n     * @param account user account to check\\r\\n     * @return pending rewards\\r\\n     */\\r\\n    function getPendingRewards(address account) public view returns (uint256) {\\r\\n        if (account != address(0)) {\\r\\n            if (userInfo[account].amountfToken == 0) {\\r\\n                return 0;\\r\\n            }\\r\\n            return\\r\\n                _earned(\\r\\n                    userInfo[account].amountfToken,\\r\\n                    userInfo[account].userRewardPerTokenPaid,\\r\\n                    userInfo[account].rewards\\r\\n                );\\r\\n        }\\r\\n        return 0;\\r\\n    }\\r\\n\\r\\n    //-----------------------------------------------------------------------------------------------------------------//\\r\\n    //------------------------------------ Internal methods -------------------------------------------------//\\r\\n    //-----------------------------------------------------------------------------------------------------------------//\\r\\n    function _calculateRewards(\\r\\n        address account,\\r\\n        uint256 amount,\\r\\n        uint256 amountfToken\\r\\n    ) internal view returns (uint256) {\\r\\n        uint256 rewards = userInfo[account].rewards;\\r\\n        uint256 farmBalance = IERC20(farmToken).balanceOf(address(this));\\r\\n\\r\\n        if (amount == 0) {\\r\\n            if (rewards < farmBalance) {\\r\\n                return rewards;\\r\\n            }\\r\\n            return farmBalance;\\r\\n        }\\r\\n\\r\\n        return (amount.mul(rewards)).div(amountfToken);\\r\\n    }\\r\\n\\r\\n    function _updateRewards(address account) internal {\\r\\n        if (account != address(0)) {\\r\\n            UserInfo storage user = userInfo[account];\\r\\n\\r\\n            uint256 _stored = harvestRewardPool.rewardPerToken();\\r\\n\\r\\n            user.rewards = _earned(\\r\\n                user.amountfToken,\\r\\n                user.userRewardPerTokenPaid,\\r\\n                user.rewards\\r\\n            );\\r\\n            user.userRewardPerTokenPaid = _stored;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function _earned(\\r\\n        uint256 _amountfToken,\\r\\n        uint256 _userRewardPerTokenPaid,\\r\\n        uint256 _rewards\\r\\n    ) internal view returns (uint256) {\\r\\n        return\\r\\n            _amountfToken\\r\\n                .mul(\\r\\n                harvestRewardPool.rewardPerToken().sub(_userRewardPerTokenPaid)\\r\\n            )\\r\\n                .div(1e18)\\r\\n                .add(_rewards);\\r\\n    }\\r\\n\\r\\n    function _validateWithdraw(\\r\\n        uint256 deadline,\\r\\n        uint256 amount,\\r\\n        uint256 amountfToken,\\r\\n        uint256 receiptBalance,\\r\\n        uint256 timestamp,\\r\\n        uint256 slippage\\r\\n    ) internal view {\\r\\n        _validateCommon(deadline, amount, slippage);\\r\\n\\r\\n        require(amountfToken >= amount, \\\"AMOUNT_GREATER_THAN_BALANCE\\\");\\r\\n\\r\\n        require(receiptBalance >= amountfToken, \\\"RECEIPT_AMOUNT\\\");\\r\\n\\r\\n        if (lockTime > 0) {\\r\\n            require(timestamp.add(lockTime) <= block.timestamp, \\\"LOCK_TIME\\\");\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function _depositTokenToHarvestVault(uint256 amount)\\r\\n        internal\\r\\n        returns (uint256)\\r\\n    {\\r\\n        _increaseAllowance(token, address(harvestRewardVault), amount);\\r\\n\\r\\n        uint256 prevfTokenBalance = _getBalance(harvestfToken);\\r\\n        harvestRewardVault.deposit(amount);\\r\\n        uint256 currentfTokenBalance = _getBalance(harvestfToken);\\r\\n\\r\\n        require(\\r\\n            currentfTokenBalance > prevfTokenBalance,\\r\\n            \\\"DEPOSIT_VAULT_ERROR\\\"\\r\\n        );\\r\\n\\r\\n        return currentfTokenBalance.sub(prevfTokenBalance);\\r\\n    }\\r\\n\\r\\n    function _withdrawTokenFromHarvestVault(uint256 amount)\\r\\n        internal\\r\\n        returns (uint256)\\r\\n    {\\r\\n        _increaseAllowance(harvestfToken, address(harvestRewardVault), amount);\\r\\n\\r\\n        uint256 prevTokenBalance = _getBalance(token);\\r\\n        harvestRewardVault.withdraw(amount);\\r\\n        uint256 currentTokenBalance = _getBalance(token);\\r\\n\\r\\n        require(currentTokenBalance > prevTokenBalance, \\\"WITHDRAW_VAULT_ERROR\\\");\\r\\n\\r\\n        return currentTokenBalance.sub(prevTokenBalance);\\r\\n    }\\r\\n\\r\\n    function _stakefTokenToHarvestPool(uint256 amount) internal {\\r\\n        _increaseAllowance(harvestfToken, address(harvestRewardPool), amount);\\r\\n        harvestRewardPool.stake(amount);\\r\\n    }\\r\\n\\r\\n    function _unstakefTokenFromHarvestPool(uint256 amount)\\r\\n        internal\\r\\n        returns (uint256)\\r\\n    {\\r\\n        _increaseAllowance(harvestfToken, address(harvestRewardPool), amount);\\r\\n\\r\\n        uint256 prevfTokenBalance = _getBalance(harvestfToken);\\r\\n        harvestRewardPool.withdraw(amount);\\r\\n        uint256 currentfTokenBalance = _getBalance(harvestfToken);\\r\\n\\r\\n        require(\\r\\n            currentfTokenBalance > prevfTokenBalance,\\r\\n            \\\"WITHDRAW_POOL_ERROR\\\"\\r\\n        );\\r\\n\\r\\n        return currentfTokenBalance.sub(prevfTokenBalance);\\r\\n    }\\r\\n\\r\\n    function _calculatefTokenRemainings(uint256 amount, uint256 amountfToken)\\r\\n        internal\\r\\n        pure\\r\\n        returns (uint256, uint256)\\r\\n    {\\r\\n        uint256 burnAmount = amount;\\r\\n        if (amount < amountfToken) {\\r\\n            amountfToken = amountfToken.sub(amount);\\r\\n        } else {\\r\\n            burnAmount = amountfToken;\\r\\n            amountfToken = 0;\\r\\n        }\\r\\n\\r\\n        return (amountfToken, burnAmount);\\r\\n    }\\r\\n\\r\\n    function _calculateFeeableTokens(\\r\\n        uint256 amountfToken,\\r\\n        uint256 obtainedToken,\\r\\n        uint256 amountToken,\\r\\n        uint256 obtainedfToken,\\r\\n        uint256 underlyingRatio\\r\\n    ) internal returns (uint256 feeableToken, uint256 earnedTokens) {\\r\\n        if (obtainedfToken == amountfToken) {\\r\\n            //there is no point to do the ratio math as we can just get the difference between current obtained tokens and initial obtained tokens\\r\\n            if (obtainedToken > amountToken) {\\r\\n                feeableToken = obtainedToken.sub(amountToken);\\r\\n            }\\r\\n        } else {\\r\\n            uint256 currentRatio = _getRatio(obtainedfToken, obtainedToken, 18);\\r\\n\\r\\n            if (currentRatio < underlyingRatio) {\\r\\n                uint256 noOfOriginalTokensForCurrentAmount =\\r\\n                    (obtainedfToken.mul(10**18)).div(underlyingRatio);\\r\\n                if (noOfOriginalTokensForCurrentAmount < obtainedToken) {\\r\\n                    feeableToken = obtainedToken.sub(\\r\\n                        noOfOriginalTokensForCurrentAmount\\r\\n                    );\\r\\n                }\\r\\n            }\\r\\n        }\\r\\n\\r\\n        if (feeableToken > 0) {\\r\\n            uint256 extraTokensFee = _calculateFee(feeableToken);\\r\\n            emit ExtraTokens(msg.sender, feeableToken.sub(extraTokensFee));\\r\\n            earnedTokens = feeableToken.sub(extraTokensFee);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    receive() external payable {}\\r\\n}\\r\\n\"\r\n    },\r\n    \"/D/Data/4. Coding/Solidity/Nakamoto/polkastrategies/contracts/strategies/Harvest/base/HarvestSCBase.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity 0.8.4;\\r\\n\\r\\nimport \\\"./HarvestBase.sol\\\";\\r\\n\\r\\ncontract HarvestSCBase is StrategyBase, HarvestBase {\\r\\n\\r\\n    //-----------------------------------------------------------------------------------------------------------------//\\r\\n    //------------------------------------ Events -------------------------------------------------//\\r\\n    //-----------------------------------------------------------------------------------------------------------------//\\r\\n    /// @notice Event emitted when rewards are exchanged to ETH or to a specific Token\\r\\n    event RewardsExchanged(\\r\\n        address indexed user,\\r\\n        string exchangeType, //ETH or Token\\r\\n        uint256 rewardsAmount,\\r\\n        uint256 obtainedAmount\\r\\n    );\\r\\n\\r\\n    /// @notice Event emitted when user makes a deposit\\r\\n    event Deposit(\\r\\n        address indexed user,\\r\\n        address indexed origin,\\r\\n        uint256 amountToken,\\r\\n        uint256 amountfToken\\r\\n    );\\r\\n\\r\\n    /// @notice Event emitted when user withdraws\\r\\n    event Withdraw(\\r\\n        address indexed user,\\r\\n        address indexed origin,\\r\\n        uint256 amountToken,\\r\\n        uint256 amountfToken,\\r\\n        uint256 treasuryAmountEth\\r\\n    );\\r\\n}\\r\\n\"\r\n    },\r\n    \"/D/Data/4. Coding/Solidity/Nakamoto/polkastrategies/contracts/strategies/Harvest/base/HarvestStorage.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity 0.8.4;\\r\\nimport \\\"../../../interfaces/IMintNoRewardPool.sol\\\";\\r\\nimport \\\"../../../interfaces/IHarvestVault.sol\\\";\\r\\n\\r\\ncontract HarvestStorage {\\r\\n    /// @notice Info of each user.\\r\\n    struct UserInfo {\\r\\n        uint256 amountEth; //how much ETH the user entered with; should be 0 for HarvestSC\\r\\n        uint256 amountToken; //how much Token was obtained by swapping user's ETH\\r\\n        uint256 amountfToken; //how much fToken was obtained after deposit to vault\\r\\n        uint256 underlyingRatio; //ratio between obtained fToken and token\\r\\n        uint256 userTreasuryEth; //how much eth the user sent to treasury\\r\\n        uint256 userCollectedFees; //how much eth the user sent to fee address\\r\\n        uint256 timestamp; //first deposit timestamp; used for withdrawal lock time check\\r\\n        uint256 earnedTokens;\\r\\n        uint256 earnedRewards; //before fees\\r\\n        //----\\r\\n        uint256 rewards;\\r\\n        uint256 userRewardPerTokenPaid;\\r\\n    }\\r\\n\\r\\n    uint256 public totalToken;\\r\\n    address public farmToken;\\r\\n    address public harvestfToken;\\r\\n    uint256 public ethDust;\\r\\n    uint256 public treasueryEthDust;\\r\\n    IMintNoRewardPool public harvestRewardPool;\\r\\n    IHarvestVault public harvestRewardVault;\\r\\n    mapping(address => UserInfo) public userInfo;\\r\\n}\\r\\n\"\r\n    },\r\n    \"/D/Data/4. Coding/Solidity/Nakamoto/polkastrategies/contracts/strategies/base/Storage.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity 0.8.4;\\r\\n\\r\\nimport \\\"../../tokens/ReceiptToken.sol\\\";\\r\\nimport \\\"../../interfaces/IUniswapRouter.sol\\\";\\r\\n\\r\\ncontract Storage{\\r\\n    address public weth;\\r\\n    address payable public treasuryAddress;\\r\\n    address payable public feeAddress;\\r\\n    address public token;\\r\\n    IUniswapRouter public sushiswapRouter;\\r\\n    ReceiptToken public receiptToken;\\r\\n\\r\\n    uint256 internal _minSlippage;\\r\\n    uint256 public lockTime;\\r\\n    uint256 public fee;\\r\\n    uint256 constant feeFactor = uint256(10000);\\r\\n    uint256 public cap;\\r\\n\\r\\n}\\r\\n\"\r\n    },\r\n    \"/D/Data/4. Coding/Solidity/Nakamoto/polkastrategies/contracts/strategies/base/StrategyBase.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity 0.8.4;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\r\\n\\r\\nimport \\\"../../tokens/ReceiptToken.sol\\\";\\r\\nimport \\\"../../interfaces/IUniswapRouter.sol\\\";\\r\\nimport \\\"./Storage.sol\\\";\\r\\n\\r\\ncontract StrategyBase is Storage, Initializable, UUPSUpgradeable, OwnableUpgradeable{\\r\\n    using SafeMath for uint256;\\r\\n    using SafeERC20 for IERC20;\\r\\n\\r\\n\\r\\n    /// @notice Event emitted when user makes a deposit and receipt token is minted\\r\\n    event ReceiptMinted(address indexed user, uint256 amount);\\r\\n    /// @notice Event emitted when user withdraws and receipt token is burned\\r\\n    event ReceiptBurned(address indexed user, uint256 amount);\\r\\n\\r\\n    /**\\r\\n     * @notice Create a new strategy contract\\r\\n     * @param _sushiswapRouter Sushiswap Router address\\r\\n     * @param _token Token address\\r\\n     * @param _weth WETH address\\r\\n     * @param _treasuryAddress treasury address\\r\\n     * @param _feeAddress fee address\\r\\n     */\\r\\n    function __StrategyBase_init(\\r\\n      address _sushiswapRouter, address _token,\\r\\n      address _weth,\\r\\n      address payable _treasuryAddress,\\r\\n      address payable _feeAddress,\\r\\n      uint256 _cap) internal initializer {\\r\\n        require(_sushiswapRouter != address(0), \\\"ROUTER_0x0\\\");\\r\\n        require(_token != address(0), \\\"TOKEN_0x0\\\");\\r\\n        require(_weth != address(0), \\\"WETH_0x0\\\");\\r\\n        require(_treasuryAddress != address(0), \\\"TREASURY_0x0\\\");\\r\\n        require(_feeAddress != address(0), \\\"FEE_0x0\\\");\\r\\n        sushiswapRouter = IUniswapRouter(_sushiswapRouter);\\r\\n        token = _token;\\r\\n        weth = _weth;\\r\\n        treasuryAddress = _treasuryAddress;\\r\\n        feeAddress = _feeAddress;\\r\\n        cap = _cap;\\r\\n        _minSlippage = 10; //0.1%\\r\\n        lockTime = 1;\\r\\n        fee = uint256(100);\\r\\n        __Ownable_init();\\r\\n    }\\r\\n\\r\\n    function _authorizeUpgrade(address) internal override onlyOwner {\\r\\n\\r\\n    }\\r\\n\\r\\n\\r\\n    function _validateCommon(\\r\\n        uint256 deadline,\\r\\n        uint256 amount,\\r\\n        uint256 _slippage\\r\\n    ) internal view {\\r\\n        require(deadline >= block.timestamp, \\\"DEADLINE_ERROR\\\");\\r\\n        require(amount > 0, \\\"AMOUNT_0\\\");\\r\\n        require(_slippage >= _minSlippage, \\\"SLIPPAGE_ERROR\\\");\\r\\n        require(_slippage <= feeFactor, \\\"MAX_SLIPPAGE_ERROR\\\");\\r\\n    }\\r\\n\\r\\n    function _validateDeposit(\\r\\n        uint256 deadline,\\r\\n        uint256 amount,\\r\\n        uint256 total,\\r\\n        uint256 slippage\\r\\n    ) internal view {\\r\\n        _validateCommon(deadline, amount, slippage);\\r\\n\\r\\n        require(total.add(amount) <= cap, \\\"CAP_REACHED\\\");\\r\\n    }\\r\\n\\r\\n    function _mintParachainAuctionTokens(uint256 _amount) internal {\\r\\n        receiptToken.mint(msg.sender, _amount);\\r\\n        emit ReceiptMinted(msg.sender, _amount);\\r\\n    }\\r\\n\\r\\n    function _burnParachainAuctionTokens(uint256 _amount) internal {\\r\\n        receiptToken.burn(msg.sender, _amount);\\r\\n        emit ReceiptBurned(msg.sender, _amount);\\r\\n    }\\r\\n\\r\\n    function _calculateFee(uint256 _amount) internal view returns (uint256) {\\r\\n        return _calculatePortion(_amount, fee);\\r\\n    }\\r\\n\\r\\n    function _getBalance(address _token) internal view returns (uint256) {\\r\\n        return IERC20(_token).balanceOf(address(this));\\r\\n    }\\r\\n\\r\\n    function _increaseAllowance(\\r\\n        address _token,\\r\\n        address _contract,\\r\\n        uint256 _amount\\r\\n    ) internal {\\r\\n        IERC20(_token).safeIncreaseAllowance(address(_contract), _amount);\\r\\n    }\\r\\n\\r\\n    function _getRatio(\\r\\n        uint256 numerator,\\r\\n        uint256 denominator,\\r\\n        uint256 precision\\r\\n    ) internal pure returns (uint256) {\\r\\n        if (numerator == 0 || denominator == 0) {\\r\\n            return 0;\\r\\n        }\\r\\n        uint256 _numerator = numerator * 10**(precision + 1);\\r\\n        uint256 _quotient = ((_numerator / denominator) + 5) / 10;\\r\\n        return (_quotient);\\r\\n    }\\r\\n\\r\\n    function _swapTokenToEth(\\r\\n        address[] memory swapPath,\\r\\n        uint256 exchangeAmount,\\r\\n        uint256 deadline,\\r\\n        uint256 slippage,\\r\\n        uint256 ethPerToken\\r\\n    ) internal returns (uint256) {\\r\\n        uint256[] memory amounts =\\r\\n            sushiswapRouter.getAmountsOut(exchangeAmount, swapPath);\\r\\n        uint256 sushiAmount = amounts[amounts.length - 1]; //amount of ETH\\r\\n        uint256 portion = _calculatePortion(sushiAmount, slippage);\\r\\n        uint256 calculatedPrice = (exchangeAmount.mul(ethPerToken)).div(10**18);\\r\\n        uint256 decimals = ERC20(swapPath[0]).decimals();\\r\\n        if (decimals < 18) {\\r\\n            calculatedPrice = calculatedPrice.mul(10**(18 - decimals));\\r\\n        }\\r\\n        if (sushiAmount > calculatedPrice) {\\r\\n            require(\\r\\n                sushiAmount.sub(calculatedPrice) <= portion,\\r\\n                \\\"PRICE_ERROR_1\\\"\\r\\n            );\\r\\n        } else {\\r\\n            require(\\r\\n                calculatedPrice.sub(sushiAmount) <= portion,\\r\\n                \\\"PRICE_ERROR_2\\\"\\r\\n            );\\r\\n        }\\r\\n\\r\\n        _increaseAllowance(\\r\\n            swapPath[0],\\r\\n            address(sushiswapRouter),\\r\\n            exchangeAmount\\r\\n        );\\r\\n        uint256[] memory tokenSwapAmounts =\\r\\n            sushiswapRouter.swapExactTokensForETH(\\r\\n                exchangeAmount,\\r\\n                _getMinAmount(sushiAmount, slippage),\\r\\n                swapPath,\\r\\n                address(this),\\r\\n                deadline\\r\\n            );\\r\\n        return tokenSwapAmounts[tokenSwapAmounts.length - 1];\\r\\n    }\\r\\n\\r\\n    function _swapEthToToken(\\r\\n        address[] memory swapPath,\\r\\n        uint256 exchangeAmount,\\r\\n        uint256 deadline,\\r\\n        uint256 slippage,\\r\\n        uint256 tokensPerEth\\r\\n    ) internal returns (uint256) {\\r\\n        uint256[] memory amounts =\\r\\n            sushiswapRouter.getAmountsOut(exchangeAmount, swapPath);\\r\\n        uint256 sushiAmount = amounts[amounts.length - 1];\\r\\n        uint256 portion = _calculatePortion(sushiAmount, slippage);\\r\\n        uint256 calculatedPrice =\\r\\n            (exchangeAmount.mul(tokensPerEth)).div(10**18);\\r\\n        uint256 decimals = ERC20(swapPath[0]).decimals();\\r\\n        if (decimals < 18) {\\r\\n            calculatedPrice = calculatedPrice.mul(10**(18 - decimals));\\r\\n        }\\r\\n        if (sushiAmount > calculatedPrice) {\\r\\n            require(\\r\\n                sushiAmount.sub(calculatedPrice) <= portion,\\r\\n                \\\"PRICE_ERROR_1\\\"\\r\\n            );\\r\\n        } else {\\r\\n            require(\\r\\n                calculatedPrice.sub(sushiAmount) <= portion,\\r\\n                \\\"PRICE_ERROR_2\\\"\\r\\n            );\\r\\n        }\\r\\n\\r\\n        uint256[] memory swapResult =\\r\\n            sushiswapRouter.swapExactETHForTokens{value: exchangeAmount}(\\r\\n                _getMinAmount(sushiAmount, slippage),\\r\\n                swapPath,\\r\\n                address(this),\\r\\n                deadline\\r\\n            );\\r\\n\\r\\n        return swapResult[swapResult.length - 1];\\r\\n    }\\r\\n\\r\\n    function _getMinAmount(uint256 amount, uint256 slippage)\\r\\n        private\\r\\n        pure\\r\\n        returns (uint256)\\r\\n    {\\r\\n        uint256 portion = _calculatePortion(amount, slippage);\\r\\n        return amount.sub(portion);\\r\\n    }\\r\\n\\r\\n    function _calculatePortion(uint256 _amount, uint256 _fee)\\r\\n        private\\r\\n        pure\\r\\n        returns (uint256)\\r\\n    {\\r\\n        return (_amount.mul(_fee)).div(feeFactor);\\r\\n    }\\r\\n\\r\\n    function safeTransferETH(address to, uint256 value) internal {\\r\\n        (bool success, ) = to.call{value: value}(new bytes(0));\\r\\n        require(success, \\\"TransferHelper: ETH_TRANSFER_FAILED\\\");\\r\\n    }\\r\\n}\\r\\n\"\r\n    },\r\n    \"/D/Data/4. Coding/Solidity/Nakamoto/polkastrategies/contracts/tokens/ReceiptToken.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\r\\n\\r\\n// This contract is used for printing receipt tokens\\r\\n// Whenever someone joins a pool, a receipt token will be printed for that person\\r\\ncontract ReceiptToken is ERC20, Ownable {\\r\\n    ERC20 public underlyingToken;\\r\\n    address public underlyingStrategy;\\r\\n\\r\\n    constructor(address underlyingAddress, address strategy)\\r\\n        ERC20(\\r\\n            string(abi.encodePacked(\\\"pAT-\\\", ERC20(underlyingAddress).name())),\\r\\n            string(abi.encodePacked(\\\"pAT-\\\", ERC20(underlyingAddress).symbol()))\\r\\n        )\\r\\n    {\\r\\n        underlyingToken = ERC20(underlyingAddress);\\r\\n        underlyingStrategy = strategy;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Mint new receipt tokens to some user\\r\\n     * @param to Address of the user that gets the receipt tokens\\r\\n     * @param amount Amount of receipt tokens that will get minted\\r\\n     */\\r\\n    function mint(address to, uint256 amount) public onlyOwner {\\r\\n        _mint(to, amount);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Burn receipt tokens from some user\\r\\n     * @param from Address of the user that gets the receipt tokens burne\\r\\n     * @param amount Amount of receipt tokens that will get burned\\r\\n     */\\r\\n    function burn(address from, uint256 amount) public onlyOwner {\\r\\n        _burn(from, amount);\\r\\n    }\\r\\n}\\r\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal initializer {\\n        __Context_init_unchained();\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal initializer {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n    uint256[49] private __gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../beacon/IBeaconUpgradeable.sol\\\";\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\nimport \\\"../../utils/StorageSlotUpgradeable.sol\\\";\\nimport \\\"../utils/Initializable.sol\\\";\\n\\n/**\\n * @dev This abstract contract provides getters and event emitting update functions for\\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967] slots.\\n *\\n * _Available since v4.1._\\n *\\n * @custom:oz-upgrades-unsafe-allow delegatecall\\n */\\nabstract contract ERC1967UpgradeUpgradeable is Initializable {\\n    function __ERC1967Upgrade_init() internal initializer {\\n        __ERC1967Upgrade_init_unchained();\\n    }\\n\\n    function __ERC1967Upgrade_init_unchained() internal initializer {\\n    }\\n    // This is the keccak-256 hash of \\\"eip1967.proxy.rollback\\\" subtracted by 1\\n    bytes32 private constant _ROLLBACK_SLOT = 0x4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd9143;\\n\\n    /**\\n     * @dev Storage slot with the address of the current implementation.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.implementation\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n\\n    /**\\n     * @dev Emitted when the implementation is upgraded.\\n     */\\n    event Upgraded(address indexed implementation);\\n\\n    /**\\n     * @dev Returns the current implementation address.\\n     */\\n    function _getImplementation() internal view returns (address) {\\n        return StorageSlotUpgradeable.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 implementation slot.\\n     */\\n    function _setImplementation(address newImplementation) private {\\n        require(AddressUpgradeable.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n        StorageSlotUpgradeable.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeTo(address newImplementation) internal {\\n        _setImplementation(newImplementation);\\n        emit Upgraded(newImplementation);\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCall(address newImplementation, bytes memory data, bool forceCall) internal {\\n        _setImplementation(newImplementation);\\n        emit Upgraded(newImplementation);\\n        if (data.length > 0 || forceCall) {\\n            _functionDelegateCall(newImplementation, data);\\n        }\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with security checks for UUPS proxies, and additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCallSecure(address newImplementation, bytes memory data, bool forceCall) internal {\\n        address oldImplementation = _getImplementation();\\n\\n        // Initial upgrade and setup call\\n        _setImplementation(newImplementation);\\n        if (data.length > 0 || forceCall) {\\n            _functionDelegateCall(newImplementation, data);\\n        }\\n\\n        // Perform rollback test if not already in progress\\n        StorageSlotUpgradeable.BooleanSlot storage rollbackTesting = StorageSlotUpgradeable.getBooleanSlot(_ROLLBACK_SLOT);\\n        if (!rollbackTesting.value) {\\n            // Trigger rollback using upgradeTo from the new implementation\\n            rollbackTesting.value = true;\\n            _functionDelegateCall(\\n                newImplementation,\\n                abi.encodeWithSignature(\\n                    \\\"upgradeTo(address)\\\",\\n                    oldImplementation\\n                )\\n            );\\n            rollbackTesting.value = false;\\n            // Check rollback was effective\\n            require(oldImplementation == _getImplementation(), \\\"ERC1967Upgrade: upgrade breaks further upgrades\\\");\\n            // Finally reset to the new implementation and log the upgrade\\n            _setImplementation(newImplementation);\\n            emit Upgraded(newImplementation);\\n        }\\n    }\\n\\n    /**\\n     * @dev Perform beacon upgrade with additional setup call. Note: This upgrades the address of the beacon, it does\\n     * not upgrade the implementation contained in the beacon (see {UpgradeableBeacon-_setImplementation} for that).\\n     *\\n     * Emits a {BeaconUpgraded} event.\\n     */\\n    function _upgradeBeaconToAndCall(address newBeacon, bytes memory data, bool forceCall) internal {\\n        _setBeacon(newBeacon);\\n        emit BeaconUpgraded(newBeacon);\\n        if (data.length > 0 || forceCall) {\\n            _functionDelegateCall(IBeaconUpgradeable(newBeacon).implementation(), data);\\n        }\\n    }\\n\\n    /**\\n     * @dev Storage slot with the admin of the contract.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.admin\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\\n\\n    /**\\n     * @dev Emitted when the admin account has changed.\\n     */\\n    event AdminChanged(address previousAdmin, address newAdmin);\\n\\n    /**\\n     * @dev Returns the current admin.\\n     */\\n    function _getAdmin() internal view returns (address) {\\n        return StorageSlotUpgradeable.getAddressSlot(_ADMIN_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 admin slot.\\n     */\\n    function _setAdmin(address newAdmin) private {\\n        require(newAdmin != address(0), \\\"ERC1967: new admin is the zero address\\\");\\n        StorageSlotUpgradeable.getAddressSlot(_ADMIN_SLOT).value = newAdmin;\\n    }\\n\\n    /**\\n     * @dev Changes the admin of the proxy.\\n     *\\n     * Emits an {AdminChanged} event.\\n     */\\n    function _changeAdmin(address newAdmin) internal {\\n        emit AdminChanged(_getAdmin(), newAdmin);\\n        _setAdmin(newAdmin);\\n    }\\n\\n    /**\\n     * @dev The storage slot of the UpgradeableBeacon contract which defines the implementation for this proxy.\\n     * This is bytes32(uint256(keccak256('eip1967.proxy.beacon')) - 1)) and is validated in the constructor.\\n     */\\n    bytes32 internal constant _BEACON_SLOT = 0xa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50;\\n\\n    /**\\n     * @dev Emitted when the beacon is upgraded.\\n     */\\n    event BeaconUpgraded(address indexed beacon);\\n\\n    /**\\n     * @dev Returns the current beacon.\\n     */\\n    function _getBeacon() internal view returns (address) {\\n        return StorageSlotUpgradeable.getAddressSlot(_BEACON_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new beacon in the EIP1967 beacon slot.\\n     */\\n    function _setBeacon(address newBeacon) private {\\n        require(\\n            AddressUpgradeable.isContract(newBeacon),\\n            \\\"ERC1967: new beacon is not a contract\\\"\\n        );\\n        require(\\n            AddressUpgradeable.isContract(IBeaconUpgradeable(newBeacon).implementation()),\\n            \\\"ERC1967: beacon implementation is not a contract\\\"\\n        );\\n        StorageSlotUpgradeable.getAddressSlot(_BEACON_SLOT).value = newBeacon;\\n    }\\n\\n    /*\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function _functionDelegateCall(address target, bytes memory data) private returns (bytes memory) {\\n        require(AddressUpgradeable.isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n    uint256[50] private __gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/proxy/beacon/IBeaconUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is the interface that {BeaconProxy} expects of its beacon.\\n */\\ninterface IBeaconUpgradeable {\\n    /**\\n     * @dev Must return an address that can be used as a delegate call target.\\n     *\\n     * {BeaconProxy} will check that this address is a contract.\\n     */\\n    function implementation() external view returns (address);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\n// solhint-disable-next-line compiler-version\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n */\\nabstract contract Initializable {\\n\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        require(_initializing || !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC1967/ERC1967UpgradeUpgradeable.sol\\\";\\nimport \\\"./Initializable.sol\\\";\\n\\n/**\\n * @dev Base contract for building openzeppelin-upgrades compatible implementations for the {ERC1967Proxy}. It includes\\n * publicly available upgrade functions that are called by the plugin and by the secure upgrade mechanism to verify\\n * continuation of the upgradability.\\n *\\n * The {_authorizeUpgrade} function MUST be overridden to include access restriction to the upgrade mechanism.\\n *\\n * _Available since v4.1._\\n */\\nabstract contract UUPSUpgradeable is Initializable, ERC1967UpgradeUpgradeable {\\n    function __UUPSUpgradeable_init() internal initializer {\\n        __ERC1967Upgrade_init_unchained();\\n        __UUPSUpgradeable_init_unchained();\\n    }\\n\\n    function __UUPSUpgradeable_init_unchained() internal initializer {\\n    }\\n    function upgradeTo(address newImplementation) external virtual {\\n        _authorizeUpgrade(newImplementation);\\n        _upgradeToAndCallSecure(newImplementation, bytes(\\\"\\\"), false);\\n    }\\n\\n    function upgradeToAndCall(address newImplementation, bytes memory data) external payable virtual {\\n        _authorizeUpgrade(newImplementation);\\n        _upgradeToAndCallSecure(newImplementation, data, true);\\n    }\\n\\n    function _authorizeUpgrade(address newImplementation) internal virtual;\\n    uint256[50] private __gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuardUpgradeable is Initializable {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    function __ReentrancyGuard_init() internal initializer {\\n        __ReentrancyGuard_init_unchained();\\n    }\\n\\n    function __ReentrancyGuard_init_unchained() internal initializer {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and make it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n    uint256[49] private __gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal initializer {\\n        __Context_init_unchained();\\n    }\\n\\n    function __Context_init_unchained() internal initializer {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n    uint256[50] private __gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/StorageSlotUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * _Available since v4.1 for `address`, `bool`, `bytes32`, and `uint256`._\\n */\\nlibrary StorageSlotUpgradeable {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor () {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/ERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./extensions/IERC20Metadata.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin guidelines: functions revert instead\\n * of returning `false` on failure. This behavior is nonetheless conventional\\n * and does not conflict with the expectations of ERC20 applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\n    mapping (address => uint256) private _balances;\\n\\n    mapping (address => mapping (address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * The defaut value of {decimals} is 18. To select a different value for\\n     * {decimals} you should overload it.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor (string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n     * overridden;\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `recipient` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(_msgSender(), recipient, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        _approve(_msgSender(), spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` and `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``sender``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(sender, recipient, amount);\\n\\n        uint256 currentAllowance = _allowances[sender][_msgSender()];\\n        require(currentAllowance >= amount, \\\"ERC20: transfer amount exceeds allowance\\\");\\n        _approve(sender, _msgSender(), currentAllowance - amount);\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender] + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        uint256 currentAllowance = _allowances[_msgSender()][spender];\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        _approve(_msgSender(), spender, currentAllowance - subtractedValue);\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\\n     *\\n     * This is internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` cannot be the zero address.\\n     * - `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     */\\n    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\\n        require(sender != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(recipient != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(sender, recipient, amount);\\n\\n        uint256 senderBalance = _balances[sender];\\n        require(senderBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        _balances[sender] = senderBalance - amount;\\n        _balances[recipient] += amount;\\n\\n        emit Transfer(sender, recipient, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        _balances[account] += amount;\\n        emit Transfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        _balances[account] = accountBalance - amount;\\n        _totalSupply -= amount;\\n\\n        emit Transfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be to transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual { }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        // solhint-disable-next-line max-line-length\\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) { // Return data is optional\\n            // solhint-disable-next-line max-line-length\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/math/SafeMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is no longer needed starting with Solidity 0.8. The compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"remappings\": [],\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"evmVersion\": \"istanbul\",\r\n    \"libraries\": {},\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}","ABI":"[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"previousAdmin\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"AdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"beacon\",\"type\":\"address\"}],\"name\":\"BeaconUpgraded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"string\",\"name\":\"addressType\",\"type\":\"string\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newAddress\",\"type\":\"address\"}],\"name\":\"ChangedAddress\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"string\",\"name\":\"valueType\",\"type\":\"string\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"oldValue\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"newValue\",\"type\":\"uint256\"}],\"name\":\"ChangedValue\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"origin\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountToken\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountfToken\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"ExtraTokens\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokensAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"obtainedEth\",\"type\":\"uint256\"}],\"name\":\"ExtraTokensExchanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"underlying\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"underlyingReceipt\",\"type\":\"uint256\"}],\"name\":\"ObtainedInfo\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"ReceiptBurned\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"ReceiptMinted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"string\",\"name\":\"dustType\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"RescuedDust\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"RewardsEarned\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"exchangeType\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"rewardsAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"obtainedAmount\",\"type\":\"uint256\"}],\"name\":\"RewardsExchanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"}],\"name\":\"Upgraded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"origin\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountToken\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountfToken\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"treasuryAmountEth\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"cap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"slippage\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ethDust\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"farmToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeAddress\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getPendingRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"harvestRewardPool\",\"outputs\":[{\"internalType\":\"contract IMintNoRewardPool\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"harvestRewardVault\",\"outputs\":[{\"internalType\":\"contract IHarvestVault\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"harvestfToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_harvestRewardVault\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_harvestRewardPool\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_sushiswapRouter\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_harvestfToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_farmToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_weth\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"_treasuryAddress\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"_feeAddress\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"isWithdrawalAvailable\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lockTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"receiptToken\",\"outputs\":[{\"internalType\":\"contract ReceiptToken\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"rescueAirdroppedTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rescueDust\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_cap\",\"type\":\"uint256\"}],\"name\":\"setCap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_farmToken\",\"type\":\"address\"}],\"name\":\"setFarmToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_fee\",\"type\":\"uint256\"}],\"name\":\"setFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_feeAddress\",\"type\":\"address\"}],\"name\":\"setFeeAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_harvestfToken\",\"type\":\"address\"}],\"name\":\"setHarvestPoolToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_harvestRewardPool\",\"type\":\"address\"}],\"name\":\"setHarvestRewardPool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_harvestRewardVault\",\"type\":\"address\"}],\"name\":\"setHarvestRewardVault\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_lockTime\",\"type\":\"uint256\"}],\"name\":\"setLockTime\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_sushiswapRouter\",\"type\":\"address\"}],\"name\":\"setSushiswapRouter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_feeAddress\",\"type\":\"address\"}],\"name\":\"setTreasury\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sushiswapRouter\",\"outputs\":[{\"internalType\":\"contract IUniswapRouter\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"treasueryEthDust\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"treasuryAddress\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"updateReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"}],\"name\":\"upgradeTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"upgradeToAndCall\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountEth\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountToken\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountfToken\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"underlyingRatio\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"userTreasuryEth\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"userCollectedFees\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"earnedTokens\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"earnedRewards\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewards\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"userRewardPerTokenPaid\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"weth\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"slippage\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"ethPerToken\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"ethPerFarm\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokensPerEth\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]","ContractName":"HarvestSC","CompilerVersion":"v0.8.4+commit.c7e474f2","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}