{"status":"1","message":"OK","result":[{"SourceCode":"{\"ABDKMath64x64.sol\":{\"content\":\"// SPDX-License-Identifier: BSD-4-Clause\\n/*\\n * ABDK Math 64.64 Smart Contract Library.  Copyright Â© 2019 by ABDK Consulting.\\n * Author: Mikhail Vladimirov \\u003cmikhail.vladimirov@gmail.com\\u003e\\n */\\npragma solidity ^0.7.0;\\n\\n/**\\n * Smart contract library of mathematical functions operating with signed\\n * 64.64-bit fixed point numbers.  Signed 64.64-bit fixed point number is\\n * basically a simple fraction whose numerator is signed 128-bit integer and\\n * denominator is 2^64.  As long as denominator is always the same, there is no\\n * need to store it, thus in Solidity signed 64.64-bit fixed point numbers are\\n * represented by int128 type holding only the numerator.\\n */\\nlibrary ABDKMath64x64 {\\n  /*\\n   * Minimum value signed 64.64-bit fixed point number may have. \\n   */\\n  int128 private constant MIN_64x64 = -0x80000000000000000000000000000000;\\n\\n  /*\\n   * Maximum value signed 64.64-bit fixed point number may have. \\n   */\\n  int128 private constant MAX_64x64 = 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\\n\\n  /**\\n   * Convert signed 256-bit integer number into signed 64.64-bit fixed point\\n   * number.  Revert on overflow.\\n   *\\n   * @param x signed 256-bit integer number\\n   * @return signed 64.64-bit fixed point number\\n   */\\n  function fromInt (int256 x) internal pure returns (int128) {\\n    require (x \\u003e= -0x8000000000000000 \\u0026\\u0026 x \\u003c= 0x7FFFFFFFFFFFFFFF);\\n    return int128 (x \\u003c\\u003c 64);\\n  }\\n\\n  /**\\n   * Convert signed 64.64 fixed point number into signed 64-bit integer number\\n   * rounding down.\\n   *\\n   * @param x signed 64.64-bit fixed point number\\n   * @return signed 64-bit integer number\\n   */\\n  function toInt (int128 x) internal pure returns (int64) {\\n    return int64 (x \\u003e\\u003e 64);\\n  }\\n\\n  /**\\n   * Convert unsigned 256-bit integer number into signed 64.64-bit fixed point\\n   * number.  Revert on overflow.\\n   *\\n   * @param x unsigned 256-bit integer number\\n   * @return signed 64.64-bit fixed point number\\n   */\\n  function fromUInt (uint256 x) internal pure returns (int128) {\\n    require (x \\u003c= 0x7FFFFFFFFFFFFFFF);\\n    return int128 (x \\u003c\\u003c 64);\\n  }\\n\\n  /**\\n   * Convert signed 64.64 fixed point number into unsigned 64-bit integer\\n   * number rounding down.  Revert on underflow.\\n   *\\n   * @param x signed 64.64-bit fixed point number\\n   * @return unsigned 64-bit integer number\\n   */\\n  function toUInt (int128 x) internal pure returns (uint64) {\\n    require (x \\u003e= 0);\\n    return uint64 (x \\u003e\\u003e 64);\\n  }\\n\\n  /**\\n   * Convert signed 128.128 fixed point number into signed 64.64-bit fixed point\\n   * number rounding down.  Revert on overflow.\\n   *\\n   * @param x signed 128.128-bin fixed point number\\n   * @return signed 64.64-bit fixed point number\\n   */\\n  function from128x128 (int256 x) internal pure returns (int128) {\\n    int256 result = x \\u003e\\u003e 64;\\n    require (result \\u003e= MIN_64x64 \\u0026\\u0026 result \\u003c= MAX_64x64);\\n    return int128 (result);\\n  }\\n\\n  /**\\n   * Convert signed 64.64 fixed point number into signed 128.128 fixed point\\n   * number.\\n   *\\n   * @param x signed 64.64-bit fixed point number\\n   * @return signed 128.128 fixed point number\\n   */\\n  function to128x128 (int128 x) internal pure returns (int256) {\\n    return int256 (x) \\u003c\\u003c 64;\\n  }\\n\\n  /**\\n   * Calculate x + y.  Revert on overflow.\\n   *\\n   * @param x signed 64.64-bit fixed point number\\n   * @param y signed 64.64-bit fixed point number\\n   * @return signed 64.64-bit fixed point number\\n   */\\n  function add (int128 x, int128 y) internal pure returns (int128) {\\n    int256 result = int256(x) + y;\\n    require (result \\u003e= MIN_64x64 \\u0026\\u0026 result \\u003c= MAX_64x64);\\n    return int128 (result);\\n  }\\n\\n  /**\\n   * Calculate x - y.  Revert on overflow.\\n   *\\n   * @param x signed 64.64-bit fixed point number\\n   * @param y signed 64.64-bit fixed point number\\n   * @return signed 64.64-bit fixed point number\\n   */\\n  function sub (int128 x, int128 y) internal pure returns (int128) {\\n    int256 result = int256(x) - y;\\n    require (result \\u003e= MIN_64x64 \\u0026\\u0026 result \\u003c= MAX_64x64);\\n    return int128 (result);\\n  }\\n\\n  /**\\n   * Calculate x * y rounding down.  Revert on overflow.\\n   *\\n   * @param x signed 64.64-bit fixed point number\\n   * @param y signed 64.64-bit fixed point number\\n   * @return signed 64.64-bit fixed point number\\n   */\\n  function mul (int128 x, int128 y) internal pure returns (int128) {\\n    int256 result = int256(x) * y \\u003e\\u003e 64;\\n    require (result \\u003e= MIN_64x64 \\u0026\\u0026 result \\u003c= MAX_64x64);\\n    return int128 (result);\\n  }\\n\\n  /**\\n   * Calculate x * y rounding towards zero, where x is signed 64.64 fixed point\\n   * number and y is signed 256-bit integer number.  Revert on overflow.\\n   *\\n   * @param x signed 64.64 fixed point number\\n   * @param y signed 256-bit integer number\\n   * @return signed 256-bit integer number\\n   */\\n  function muli (int128 x, int256 y) internal pure returns (int256) {\\n    if (x == MIN_64x64) {\\n      require (y \\u003e= -0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF \\u0026\\u0026\\n        y \\u003c= 0x1000000000000000000000000000000000000000000000000);\\n      return -y \\u003c\\u003c 63;\\n    } else {\\n      bool negativeResult = false;\\n      if (x \\u003c 0) {\\n        x = -x;\\n        negativeResult = true;\\n      }\\n      if (y \\u003c 0) {\\n        y = -y; // We rely on overflow behavior here\\n        negativeResult = !negativeResult;\\n      }\\n      uint256 absoluteResult = mulu (x, uint256 (y));\\n      if (negativeResult) {\\n        require (absoluteResult \\u003c=\\n          0x8000000000000000000000000000000000000000000000000000000000000000);\\n        return -int256 (absoluteResult); // We rely on overflow behavior here\\n      } else {\\n        require (absoluteResult \\u003c=\\n          0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF);\\n        return int256 (absoluteResult);\\n      }\\n    }\\n  }\\n\\n  /**\\n   * Calculate x * y rounding down, where x is signed 64.64 fixed point number\\n   * and y is unsigned 256-bit integer number.  Revert on overflow.\\n   *\\n   * @param x signed 64.64 fixed point number\\n   * @param y unsigned 256-bit integer number\\n   * @return unsigned 256-bit integer number\\n   */\\n  function mulu (int128 x, uint256 y) internal pure returns (uint256) {\\n    if (y == 0) return 0;\\n\\n    require (x \\u003e= 0);\\n\\n    uint256 lo = (uint256 (x) * (y \\u0026 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF)) \\u003e\\u003e 64;\\n    uint256 hi = uint256 (x) * (y \\u003e\\u003e 128);\\n\\n    require (hi \\u003c= 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF);\\n    hi \\u003c\\u003c= 64;\\n\\n    require (hi \\u003c=\\n      0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF - lo);\\n    return hi + lo;\\n  }\\n\\n  /**\\n   * Calculate x / y rounding towards zero.  Revert on overflow or when y is\\n   * zero.\\n   *\\n   * @param x signed 64.64-bit fixed point number\\n   * @param y signed 64.64-bit fixed point number\\n   * @return signed 64.64-bit fixed point number\\n   */\\n  function div (int128 x, int128 y) internal pure returns (int128) {\\n    require (y != 0);\\n    int256 result = (int256 (x) \\u003c\\u003c 64) / y;\\n    require (result \\u003e= MIN_64x64 \\u0026\\u0026 result \\u003c= MAX_64x64);\\n    return int128 (result);\\n  }\\n\\n  /**\\n   * Calculate x / y rounding towards zero, where x and y are signed 256-bit\\n   * integer numbers.  Revert on overflow or when y is zero.\\n   *\\n   * @param x signed 256-bit integer number\\n   * @param y signed 256-bit integer number\\n   * @return signed 64.64-bit fixed point number\\n   */\\n  function divi (int256 x, int256 y) internal pure returns (int128) {\\n    require (y != 0);\\n\\n    bool negativeResult = false;\\n    if (x \\u003c 0) {\\n      x = -x; // We rely on overflow behavior here\\n      negativeResult = true;\\n    }\\n    if (y \\u003c 0) {\\n      y = -y; // We rely on overflow behavior here\\n      negativeResult = !negativeResult;\\n    }\\n    uint128 absoluteResult = divuu (uint256 (x), uint256 (y));\\n    if (negativeResult) {\\n      require (absoluteResult \\u003c= 0x80000000000000000000000000000000);\\n      return -int128 (absoluteResult); // We rely on overflow behavior here\\n    } else {\\n      require (absoluteResult \\u003c= 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF);\\n      return int128 (absoluteResult); // We rely on overflow behavior here\\n    }\\n  }\\n\\n  /**\\n   * Calculate x / y rounding towards zero, where x and y are unsigned 256-bit\\n   * integer numbers.  Revert on overflow or when y is zero.\\n   *\\n   * @param x unsigned 256-bit integer number\\n   * @param y unsigned 256-bit integer number\\n   * @return signed 64.64-bit fixed point number\\n   */\\n  function divu (uint256 x, uint256 y) internal pure returns (int128) {\\n    require (y != 0);\\n    uint128 result = divuu (x, y);\\n    require (result \\u003c= uint128 (MAX_64x64));\\n    return int128 (result);\\n  }\\n\\n  /**\\n   * Calculate -x.  Revert on overflow.\\n   *\\n   * @param x signed 64.64-bit fixed point number\\n   * @return signed 64.64-bit fixed point number\\n   */\\n  function neg (int128 x) internal pure returns (int128) {\\n    require (x != MIN_64x64);\\n    return -x;\\n  }\\n\\n  /**\\n   * Calculate |x|.  Revert on overflow.\\n   *\\n   * @param x signed 64.64-bit fixed point number\\n   * @return signed 64.64-bit fixed point number\\n   */\\n  function abs (int128 x) internal pure returns (int128) {\\n    require (x != MIN_64x64);\\n    return x \\u003c 0 ? -x : x;\\n  }\\n\\n  /**\\n   * Calculate 1 / x rounding towards zero.  Revert on overflow or when x is\\n   * zero.\\n   *\\n   * @param x signed 64.64-bit fixed point number\\n   * @return signed 64.64-bit fixed point number\\n   */\\n  function inv (int128 x) internal pure returns (int128) {\\n    require (x != 0);\\n    int256 result = int256 (0x100000000000000000000000000000000) / x;\\n    require (result \\u003e= MIN_64x64 \\u0026\\u0026 result \\u003c= MAX_64x64);\\n    return int128 (result);\\n  }\\n\\n  /**\\n   * Calculate arithmetics average of x and y, i.e. (x + y) / 2 rounding down.\\n   *\\n   * @param x signed 64.64-bit fixed point number\\n   * @param y signed 64.64-bit fixed point number\\n   * @return signed 64.64-bit fixed point number\\n   */\\n  function avg (int128 x, int128 y) internal pure returns (int128) {\\n    return int128 ((int256 (x) + int256 (y)) \\u003e\\u003e 1);\\n  }\\n\\n  /**\\n   * Calculate geometric average of x and y, i.e. sqrt (x * y) rounding down.\\n   * Revert on overflow or in case x * y is negative.\\n   *\\n   * @param x signed 64.64-bit fixed point number\\n   * @param y signed 64.64-bit fixed point number\\n   * @return signed 64.64-bit fixed point number\\n   */\\n  function gavg (int128 x, int128 y) internal pure returns (int128) {\\n    int256 m = int256 (x) * int256 (y);\\n    require (m \\u003e= 0);\\n    require (m \\u003c\\n        0x4000000000000000000000000000000000000000000000000000000000000000);\\n    return int128 (sqrtu (uint256 (m)));\\n  }\\n\\n  /**\\n   * Calculate x^y assuming 0^0 is 1, where x is signed 64.64 fixed point number\\n   * and y is unsigned 256-bit integer number.  Revert on overflow.\\n   *\\n   * @param x signed 64.64-bit fixed point number\\n   * @param y uint256 value\\n   * @return signed 64.64-bit fixed point number\\n   */\\n  function pow (int128 x, uint256 y) internal pure returns (int128) {\\n    uint256 absoluteResult;\\n    bool negativeResult = false;\\n    if (x \\u003e= 0) {\\n      absoluteResult = powu (uint256 (x) \\u003c\\u003c 63, y);\\n    } else {\\n      // We rely on overflow behavior here\\n      absoluteResult = powu (uint256 (uint128 (-x)) \\u003c\\u003c 63, y);\\n      negativeResult = y \\u0026 1 \\u003e 0;\\n    }\\n\\n    absoluteResult \\u003e\\u003e= 63;\\n\\n    if (negativeResult) {\\n      require (absoluteResult \\u003c= 0x80000000000000000000000000000000);\\n      return -int128 (absoluteResult); // We rely on overflow behavior here\\n    } else {\\n      require (absoluteResult \\u003c= 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF);\\n      return int128 (absoluteResult); // We rely on overflow behavior here\\n    }\\n  }\\n\\n  /**\\n   * Calculate sqrt (x) rounding down.  Revert if x \\u003c 0.\\n   *\\n   * @param x signed 64.64-bit fixed point number\\n   * @return signed 64.64-bit fixed point number\\n   */\\n  function sqrt (int128 x) internal pure returns (int128) {\\n    require (x \\u003e= 0);\\n    return int128 (sqrtu (uint256 (x) \\u003c\\u003c 64));\\n  }\\n\\n  /**\\n   * Calculate binary logarithm of x.  Revert if x \\u003c= 0.\\n   *\\n   * @param x signed 64.64-bit fixed point number\\n   * @return signed 64.64-bit fixed point number\\n   */\\n  function log_2 (int128 x) internal pure returns (int128) {\\n    require (x \\u003e 0);\\n\\n    int256 msb = 0;\\n    int256 xc = x;\\n    if (xc \\u003e= 0x10000000000000000) { xc \\u003e\\u003e= 64; msb += 64; }\\n    if (xc \\u003e= 0x100000000) { xc \\u003e\\u003e= 32; msb += 32; }\\n    if (xc \\u003e= 0x10000) { xc \\u003e\\u003e= 16; msb += 16; }\\n    if (xc \\u003e= 0x100) { xc \\u003e\\u003e= 8; msb += 8; }\\n    if (xc \\u003e= 0x10) { xc \\u003e\\u003e= 4; msb += 4; }\\n    if (xc \\u003e= 0x4) { xc \\u003e\\u003e= 2; msb += 2; }\\n    if (xc \\u003e= 0x2) msb += 1;  // No need to shift xc anymore\\n\\n    int256 result = msb - 64 \\u003c\\u003c 64;\\n    uint256 ux = uint256 (x) \\u003c\\u003c uint256 (127 - msb);\\n    for (int256 bit = 0x8000000000000000; bit \\u003e 0; bit \\u003e\\u003e= 1) {\\n      ux *= ux;\\n      uint256 b = ux \\u003e\\u003e 255;\\n      ux \\u003e\\u003e= 127 + b;\\n      result += bit * int256 (b);\\n    }\\n\\n    return int128 (result);\\n  }\\n\\n  /**\\n   * Calculate natural logarithm of x.  Revert if x \\u003c= 0.\\n   *\\n   * @param x signed 64.64-bit fixed point number\\n   * @return signed 64.64-bit fixed point number\\n   */\\n  function ln (int128 x) internal pure returns (int128) {\\n    require (x \\u003e 0);\\n\\n    return int128 (\\n        uint256 (log_2 (x)) * 0xB17217F7D1CF79ABC9E3B39803F2F6AF \\u003e\\u003e 128);\\n  }\\n\\n  /**\\n   * Calculate binary exponent of x.  Revert on overflow.\\n   *\\n   * @param x signed 64.64-bit fixed point number\\n   * @return signed 64.64-bit fixed point number\\n   */\\n  function exp_2 (int128 x) internal pure returns (int128) {\\n    require (x \\u003c 0x400000000000000000); // Overflow\\n\\n    if (x \\u003c -0x400000000000000000) return 0; // Underflow\\n\\n    uint256 result = 0x80000000000000000000000000000000;\\n\\n    if (x \\u0026 0x8000000000000000 \\u003e 0)\\n      result = result * 0x16A09E667F3BCC908B2FB1366EA957D3E \\u003e\\u003e 128;\\n    if (x \\u0026 0x4000000000000000 \\u003e 0)\\n      result = result * 0x1306FE0A31B7152DE8D5A46305C85EDEC \\u003e\\u003e 128;\\n    if (x \\u0026 0x2000000000000000 \\u003e 0)\\n      result = result * 0x1172B83C7D517ADCDF7C8C50EB14A791F \\u003e\\u003e 128;\\n    if (x \\u0026 0x1000000000000000 \\u003e 0)\\n      result = result * 0x10B5586CF9890F6298B92B71842A98363 \\u003e\\u003e 128;\\n    if (x \\u0026 0x800000000000000 \\u003e 0)\\n      result = result * 0x1059B0D31585743AE7C548EB68CA417FD \\u003e\\u003e 128;\\n    if (x \\u0026 0x400000000000000 \\u003e 0)\\n      result = result * 0x102C9A3E778060EE6F7CACA4F7A29BDE8 \\u003e\\u003e 128;\\n    if (x \\u0026 0x200000000000000 \\u003e 0)\\n      result = result * 0x10163DA9FB33356D84A66AE336DCDFA3F \\u003e\\u003e 128;\\n    if (x \\u0026 0x100000000000000 \\u003e 0)\\n      result = result * 0x100B1AFA5ABCBED6129AB13EC11DC9543 \\u003e\\u003e 128;\\n    if (x \\u0026 0x80000000000000 \\u003e 0)\\n      result = result * 0x10058C86DA1C09EA1FF19D294CF2F679B \\u003e\\u003e 128;\\n    if (x \\u0026 0x40000000000000 \\u003e 0)\\n      result = result * 0x1002C605E2E8CEC506D21BFC89A23A00F \\u003e\\u003e 128;\\n    if (x \\u0026 0x20000000000000 \\u003e 0)\\n      result = result * 0x100162F3904051FA128BCA9C55C31E5DF \\u003e\\u003e 128;\\n    if (x \\u0026 0x10000000000000 \\u003e 0)\\n      result = result * 0x1000B175EFFDC76BA38E31671CA939725 \\u003e\\u003e 128;\\n    if (x \\u0026 0x8000000000000 \\u003e 0)\\n      result = result * 0x100058BA01FB9F96D6CACD4B180917C3D \\u003e\\u003e 128;\\n    if (x \\u0026 0x4000000000000 \\u003e 0)\\n      result = result * 0x10002C5CC37DA9491D0985C348C68E7B3 \\u003e\\u003e 128;\\n    if (x \\u0026 0x2000000000000 \\u003e 0)\\n      result = result * 0x1000162E525EE054754457D5995292026 \\u003e\\u003e 128;\\n    if (x \\u0026 0x1000000000000 \\u003e 0)\\n      result = result * 0x10000B17255775C040618BF4A4ADE83FC \\u003e\\u003e 128;\\n    if (x \\u0026 0x800000000000 \\u003e 0)\\n      result = result * 0x1000058B91B5BC9AE2EED81E9B7D4CFAB \\u003e\\u003e 128;\\n    if (x \\u0026 0x400000000000 \\u003e 0)\\n      result = result * 0x100002C5C89D5EC6CA4D7C8ACC017B7C9 \\u003e\\u003e 128;\\n    if (x \\u0026 0x200000000000 \\u003e 0)\\n      result = result * 0x10000162E43F4F831060E02D839A9D16D \\u003e\\u003e 128;\\n    if (x \\u0026 0x100000000000 \\u003e 0)\\n      result = result * 0x100000B1721BCFC99D9F890EA06911763 \\u003e\\u003e 128;\\n    if (x \\u0026 0x80000000000 \\u003e 0)\\n      result = result * 0x10000058B90CF1E6D97F9CA14DBCC1628 \\u003e\\u003e 128;\\n    if (x \\u0026 0x40000000000 \\u003e 0)\\n      result = result * 0x1000002C5C863B73F016468F6BAC5CA2B \\u003e\\u003e 128;\\n    if (x \\u0026 0x20000000000 \\u003e 0)\\n      result = result * 0x100000162E430E5A18F6119E3C02282A5 \\u003e\\u003e 128;\\n    if (x \\u0026 0x10000000000 \\u003e 0)\\n      result = result * 0x1000000B1721835514B86E6D96EFD1BFE \\u003e\\u003e 128;\\n    if (x \\u0026 0x8000000000 \\u003e 0)\\n      result = result * 0x100000058B90C0B48C6BE5DF846C5B2EF \\u003e\\u003e 128;\\n    if (x \\u0026 0x4000000000 \\u003e 0)\\n      result = result * 0x10000002C5C8601CC6B9E94213C72737A \\u003e\\u003e 128;\\n    if (x \\u0026 0x2000000000 \\u003e 0)\\n      result = result * 0x1000000162E42FFF037DF38AA2B219F06 \\u003e\\u003e 128;\\n    if (x \\u0026 0x1000000000 \\u003e 0)\\n      result = result * 0x10000000B17217FBA9C739AA5819F44F9 \\u003e\\u003e 128;\\n    if (x \\u0026 0x800000000 \\u003e 0)\\n      result = result * 0x1000000058B90BFCDEE5ACD3C1CEDC823 \\u003e\\u003e 128;\\n    if (x \\u0026 0x400000000 \\u003e 0)\\n      result = result * 0x100000002C5C85FE31F35A6A30DA1BE50 \\u003e\\u003e 128;\\n    if (x \\u0026 0x200000000 \\u003e 0)\\n      result = result * 0x10000000162E42FF0999CE3541B9FFFCF \\u003e\\u003e 128;\\n    if (x \\u0026 0x100000000 \\u003e 0)\\n      result = result * 0x100000000B17217F80F4EF5AADDA45554 \\u003e\\u003e 128;\\n    if (x \\u0026 0x80000000 \\u003e 0)\\n      result = result * 0x10000000058B90BFBF8479BD5A81B51AD \\u003e\\u003e 128;\\n    if (x \\u0026 0x40000000 \\u003e 0)\\n      result = result * 0x1000000002C5C85FDF84BD62AE30A74CC \\u003e\\u003e 128;\\n    if (x \\u0026 0x20000000 \\u003e 0)\\n      result = result * 0x100000000162E42FEFB2FED257559BDAA \\u003e\\u003e 128;\\n    if (x \\u0026 0x10000000 \\u003e 0)\\n      result = result * 0x1000000000B17217F7D5A7716BBA4A9AE \\u003e\\u003e 128;\\n    if (x \\u0026 0x8000000 \\u003e 0)\\n      result = result * 0x100000000058B90BFBE9DDBAC5E109CCE \\u003e\\u003e 128;\\n    if (x \\u0026 0x4000000 \\u003e 0)\\n      result = result * 0x10000000002C5C85FDF4B15DE6F17EB0D \\u003e\\u003e 128;\\n    if (x \\u0026 0x2000000 \\u003e 0)\\n      result = result * 0x1000000000162E42FEFA494F1478FDE05 \\u003e\\u003e 128;\\n    if (x \\u0026 0x1000000 \\u003e 0)\\n      result = result * 0x10000000000B17217F7D20CF927C8E94C \\u003e\\u003e 128;\\n    if (x \\u0026 0x800000 \\u003e 0)\\n      result = result * 0x1000000000058B90BFBE8F71CB4E4B33D \\u003e\\u003e 128;\\n    if (x \\u0026 0x400000 \\u003e 0)\\n      result = result * 0x100000000002C5C85FDF477B662B26945 \\u003e\\u003e 128;\\n    if (x \\u0026 0x200000 \\u003e 0)\\n      result = result * 0x10000000000162E42FEFA3AE53369388C \\u003e\\u003e 128;\\n    if (x \\u0026 0x100000 \\u003e 0)\\n      result = result * 0x100000000000B17217F7D1D351A389D40 \\u003e\\u003e 128;\\n    if (x \\u0026 0x80000 \\u003e 0)\\n      result = result * 0x10000000000058B90BFBE8E8B2D3D4EDE \\u003e\\u003e 128;\\n    if (x \\u0026 0x40000 \\u003e 0)\\n      result = result * 0x1000000000002C5C85FDF4741BEA6E77E \\u003e\\u003e 128;\\n    if (x \\u0026 0x20000 \\u003e 0)\\n      result = result * 0x100000000000162E42FEFA39FE95583C2 \\u003e\\u003e 128;\\n    if (x \\u0026 0x10000 \\u003e 0)\\n      result = result * 0x1000000000000B17217F7D1CFB72B45E1 \\u003e\\u003e 128;\\n    if (x \\u0026 0x8000 \\u003e 0)\\n      result = result * 0x100000000000058B90BFBE8E7CC35C3F0 \\u003e\\u003e 128;\\n    if (x \\u0026 0x4000 \\u003e 0)\\n      result = result * 0x10000000000002C5C85FDF473E242EA38 \\u003e\\u003e 128;\\n    if (x \\u0026 0x2000 \\u003e 0)\\n      result = result * 0x1000000000000162E42FEFA39F02B772C \\u003e\\u003e 128;\\n    if (x \\u0026 0x1000 \\u003e 0)\\n      result = result * 0x10000000000000B17217F7D1CF7D83C1A \\u003e\\u003e 128;\\n    if (x \\u0026 0x800 \\u003e 0)\\n      result = result * 0x1000000000000058B90BFBE8E7BDCBE2E \\u003e\\u003e 128;\\n    if (x \\u0026 0x400 \\u003e 0)\\n      result = result * 0x100000000000002C5C85FDF473DEA871F \\u003e\\u003e 128;\\n    if (x \\u0026 0x200 \\u003e 0)\\n      result = result * 0x10000000000000162E42FEFA39EF44D91 \\u003e\\u003e 128;\\n    if (x \\u0026 0x100 \\u003e 0)\\n      result = result * 0x100000000000000B17217F7D1CF79E949 \\u003e\\u003e 128;\\n    if (x \\u0026 0x80 \\u003e 0)\\n      result = result * 0x10000000000000058B90BFBE8E7BCE544 \\u003e\\u003e 128;\\n    if (x \\u0026 0x40 \\u003e 0)\\n      result = result * 0x1000000000000002C5C85FDF473DE6ECA \\u003e\\u003e 128;\\n    if (x \\u0026 0x20 \\u003e 0)\\n      result = result * 0x100000000000000162E42FEFA39EF366F \\u003e\\u003e 128;\\n    if (x \\u0026 0x10 \\u003e 0)\\n      result = result * 0x1000000000000000B17217F7D1CF79AFA \\u003e\\u003e 128;\\n    if (x \\u0026 0x8 \\u003e 0)\\n      result = result * 0x100000000000000058B90BFBE8E7BCD6D \\u003e\\u003e 128;\\n    if (x \\u0026 0x4 \\u003e 0)\\n      result = result * 0x10000000000000002C5C85FDF473DE6B2 \\u003e\\u003e 128;\\n    if (x \\u0026 0x2 \\u003e 0)\\n      result = result * 0x1000000000000000162E42FEFA39EF358 \\u003e\\u003e 128;\\n    if (x \\u0026 0x1 \\u003e 0)\\n      result = result * 0x10000000000000000B17217F7D1CF79AB \\u003e\\u003e 128;\\n\\n    result \\u003e\\u003e= uint256 (63 - (x \\u003e\\u003e 64));\\n    require (result \\u003c= uint256 (MAX_64x64));\\n\\n    return int128 (result);\\n  }\\n\\n  /**\\n   * Calculate natural exponent of x.  Revert on overflow.\\n   *\\n   * @param x signed 64.64-bit fixed point number\\n   * @return signed 64.64-bit fixed point number\\n   */\\n  function exp (int128 x) internal pure returns (int128) {\\n    require (x \\u003c 0x400000000000000000); // Overflow\\n\\n    if (x \\u003c -0x400000000000000000) return 0; // Underflow\\n\\n    return exp_2 (\\n        int128 (int256 (x) * 0x171547652B82FE1777D0FFDA0D23A7D12 \\u003e\\u003e 128));\\n  }\\n\\n  /**\\n   * Calculate x / y rounding towards zero, where x and y are unsigned 256-bit\\n   * integer numbers.  Revert on overflow or when y is zero.\\n   *\\n   * @param x unsigned 256-bit integer number\\n   * @param y unsigned 256-bit integer number\\n   * @return unsigned 64.64-bit fixed point number\\n   */\\n  function divuu (uint256 x, uint256 y) private pure returns (uint128) {\\n    require (y != 0);\\n\\n    uint256 result;\\n\\n    if (x \\u003c= 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF)\\n      result = (x \\u003c\\u003c 64) / y;\\n    else {\\n      uint256 msb = 192;\\n      uint256 xc = x \\u003e\\u003e 192;\\n      if (xc \\u003e= 0x100000000) { xc \\u003e\\u003e= 32; msb += 32; }\\n      if (xc \\u003e= 0x10000) { xc \\u003e\\u003e= 16; msb += 16; }\\n      if (xc \\u003e= 0x100) { xc \\u003e\\u003e= 8; msb += 8; }\\n      if (xc \\u003e= 0x10) { xc \\u003e\\u003e= 4; msb += 4; }\\n      if (xc \\u003e= 0x4) { xc \\u003e\\u003e= 2; msb += 2; }\\n      if (xc \\u003e= 0x2) msb += 1;  // No need to shift xc anymore\\n\\n      result = (x \\u003c\\u003c 255 - msb) / ((y - 1 \\u003e\\u003e msb - 191) + 1);\\n      require (result \\u003c= 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF);\\n\\n      uint256 hi = result * (y \\u003e\\u003e 128);\\n      uint256 lo = result * (y \\u0026 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF);\\n\\n      uint256 xh = x \\u003e\\u003e 192;\\n      uint256 xl = x \\u003c\\u003c 64;\\n\\n      if (xl \\u003c lo) xh -= 1;\\n      xl -= lo; // We rely on overflow behavior here\\n      lo = hi \\u003c\\u003c 128;\\n      if (xl \\u003c lo) xh -= 1;\\n      xl -= lo; // We rely on overflow behavior here\\n\\n      assert (xh == hi \\u003e\\u003e 128);\\n\\n      result += xl / y;\\n    }\\n\\n    require (result \\u003c= 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF);\\n    return uint128 (result);\\n  }\\n\\n  /**\\n   * Calculate x^y assuming 0^0 is 1, where x is unsigned 129.127 fixed point\\n   * number and y is unsigned 256-bit integer number.  Revert on overflow.\\n   *\\n   * @param x unsigned 129.127-bit fixed point number\\n   * @param y uint256 value\\n   * @return unsigned 129.127-bit fixed point number\\n   */\\n  function powu (uint256 x, uint256 y) private pure returns (uint256) {\\n    if (y == 0) return 0x80000000000000000000000000000000;\\n    else if (x == 0) return 0;\\n    else {\\n      int256 msb = 0;\\n      uint256 xc = x;\\n      if (xc \\u003e= 0x100000000000000000000000000000000) { xc \\u003e\\u003e= 128; msb += 128; }\\n      if (xc \\u003e= 0x10000000000000000) { xc \\u003e\\u003e= 64; msb += 64; }\\n      if (xc \\u003e= 0x100000000) { xc \\u003e\\u003e= 32; msb += 32; }\\n      if (xc \\u003e= 0x10000) { xc \\u003e\\u003e= 16; msb += 16; }\\n      if (xc \\u003e= 0x100) { xc \\u003e\\u003e= 8; msb += 8; }\\n      if (xc \\u003e= 0x10) { xc \\u003e\\u003e= 4; msb += 4; }\\n      if (xc \\u003e= 0x4) { xc \\u003e\\u003e= 2; msb += 2; }\\n      if (xc \\u003e= 0x2) msb += 1;  // No need to shift xc anymore\\n\\n      int256 xe = msb - 127;\\n      if (xe \\u003e 0) x \\u003e\\u003e= uint256 (xe);\\n      else x \\u003c\\u003c= uint256 (-xe);\\n\\n      uint256 result = 0x80000000000000000000000000000000;\\n      int256 re = 0;\\n\\n      while (y \\u003e 0) {\\n        if (y \\u0026 1 \\u003e 0) {\\n          result = result * x;\\n          y -= 1;\\n          re += xe;\\n          if (result \\u003e=\\n            0x8000000000000000000000000000000000000000000000000000000000000000) {\\n            result \\u003e\\u003e= 128;\\n            re += 1;\\n          } else result \\u003e\\u003e= 127;\\n          if (re \\u003c -127) return 0; // Underflow\\n          require (re \\u003c 128); // Overflow\\n        } else {\\n          x = x * x;\\n          y \\u003e\\u003e= 1;\\n          xe \\u003c\\u003c= 1;\\n          if (x \\u003e=\\n            0x8000000000000000000000000000000000000000000000000000000000000000) {\\n            x \\u003e\\u003e= 128;\\n            xe += 1;\\n          } else x \\u003e\\u003e= 127;\\n          if (xe \\u003c -127) return 0; // Underflow\\n          require (xe \\u003c 128); // Overflow\\n        }\\n      }\\n\\n      if (re \\u003e 0) result \\u003c\\u003c= uint256 (re);\\n      else if (re \\u003c 0) result \\u003e\\u003e= uint256 (-re);\\n\\n      return result;\\n    }\\n  }\\n\\n  /**\\n   * Calculate sqrt (x) rounding down, where x is unsigned 256-bit integer\\n   * number.\\n   *\\n   * @param x unsigned 256-bit integer number\\n   * @return unsigned 128-bit integer number\\n   */\\n  function sqrtu (uint256 x) private pure returns (uint128) {\\n    if (x == 0) return 0;\\n    else {\\n      uint256 xx = x;\\n      uint256 r = 1;\\n      if (xx \\u003e= 0x100000000000000000000000000000000) { xx \\u003e\\u003e= 128; r \\u003c\\u003c= 64; }\\n      if (xx \\u003e= 0x10000000000000000) { xx \\u003e\\u003e= 64; r \\u003c\\u003c= 32; }\\n      if (xx \\u003e= 0x100000000) { xx \\u003e\\u003e= 32; r \\u003c\\u003c= 16; }\\n      if (xx \\u003e= 0x10000) { xx \\u003e\\u003e= 16; r \\u003c\\u003c= 8; }\\n      if (xx \\u003e= 0x100) { xx \\u003e\\u003e= 8; r \\u003c\\u003c= 4; }\\n      if (xx \\u003e= 0x10) { xx \\u003e\\u003e= 4; r \\u003c\\u003c= 2; }\\n      if (xx \\u003e= 0x8) { r \\u003c\\u003c= 1; }\\n      r = (r + x / r) \\u003e\\u003e 1;\\n      r = (r + x / r) \\u003e\\u003e 1;\\n      r = (r + x / r) \\u003e\\u003e 1;\\n      r = (r + x / r) \\u003e\\u003e 1;\\n      r = (r + x / r) \\u003e\\u003e 1;\\n      r = (r + x / r) \\u003e\\u003e 1;\\n      r = (r + x / r) \\u003e\\u003e 1; // Seven iterations should be enough\\n      uint256 r1 = x / r;\\n      return uint128 (r \\u003c r1 ? r : r1);\\n    }\\n  }\\n}\"},\"Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity \\u003e=0.6.2 \\u003c0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size \\u003e 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity\\u0027s `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance \\u003e= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance \\u003e= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length \\u003e 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"},\"Assimilators.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see \\u003chttp://www.gnu.org/licenses/\\u003e.\\n\\npragma solidity ^0.7.3;\\n\\nimport \\\"./Address.sol\\\";\\nimport \\\"./IAssimilator.sol\\\";\\nimport \\\"./ABDKMath64x64.sol\\\";\\n\\nlibrary Assimilators {\\n    using ABDKMath64x64 for int128;\\n    using Address for address;\\n\\n    IAssimilator public constant iAsmltr = IAssimilator(address(0));\\n\\n    function delegate(address _callee, bytes memory _data) internal returns (bytes memory) {\\n        require(_callee.isContract(), \\\"Assimilators/callee-is-not-a-contract\\\");\\n\\n        // solhint-disable-next-line\\n        (bool _success, bytes memory returnData_) = _callee.delegatecall(_data);\\n\\n        // solhint-disable-next-line\\n        assembly {\\n            if eq(_success, 0) {\\n                revert(add(returnData_, 0x20), returndatasize())\\n            }\\n        }\\n\\n        return returnData_;\\n    }\\n\\n    function getRate(address _assim) internal view returns (uint256 amount_) {\\n        amount_ = IAssimilator(_assim).getRate();\\n    }\\n\\n    function viewRawAmount(address _assim, int128 _amt) internal view returns (uint256 amount_) {\\n        amount_ = IAssimilator(_assim).viewRawAmount(_amt);\\n    }\\n\\n    function viewRawAmountLPRatio(\\n        address _assim,\\n        uint256 _baseWeight,\\n        uint256 _quoteWeight,\\n        int128 _amount\\n    ) internal view returns (uint256 amount_) {\\n        amount_ = IAssimilator(_assim).viewRawAmountLPRatio(_baseWeight, _quoteWeight, address(this), _amount);\\n    }\\n\\n    function viewNumeraireAmount(address _assim, uint256 _amt) internal view returns (int128 amt_) {\\n        amt_ = IAssimilator(_assim).viewNumeraireAmount(_amt);\\n    }\\n\\n    function viewNumeraireAmountAndBalance(address _assim, uint256 _amt)\\n        internal\\n        view\\n        returns (int128 amt_, int128 bal_)\\n    {\\n        (amt_, bal_) = IAssimilator(_assim).viewNumeraireAmountAndBalance(address(this), _amt);\\n    }\\n\\n    function viewNumeraireBalance(address _assim) internal view returns (int128 bal_) {\\n        bal_ = IAssimilator(_assim).viewNumeraireBalance(address(this));\\n    }\\n\\n    function viewNumeraireBalanceLPRatio(\\n        uint256 _baseWeight,\\n        uint256 _quoteWeight,\\n        address _assim\\n    ) internal view returns (int128 bal_) {\\n        bal_ = IAssimilator(_assim).viewNumeraireBalanceLPRatio(_baseWeight, _quoteWeight, address(this));\\n    }\\n\\n    function intakeRaw(address _assim, uint256 _amt) internal returns (int128 amt_) {\\n        bytes memory data = abi.encodeWithSelector(iAsmltr.intakeRaw.selector, _amt);\\n\\n        amt_ = abi.decode(delegate(_assim, data), (int128));\\n    }\\n\\n    function intakeRawAndGetBalance(address _assim, uint256 _amt) internal returns (int128 amt_, int128 bal_) {\\n        bytes memory data = abi.encodeWithSelector(iAsmltr.intakeRawAndGetBalance.selector, _amt);\\n\\n        (amt_, bal_) = abi.decode(delegate(_assim, data), (int128, int128));\\n    }\\n\\n    function intakeNumeraire(address _assim, int128 _amt) internal returns (uint256 amt_) {\\n        bytes memory data = abi.encodeWithSelector(iAsmltr.intakeNumeraire.selector, _amt);\\n\\n        amt_ = abi.decode(delegate(_assim, data), (uint256));\\n    }\\n\\n    function intakeNumeraireLPRatio(\\n        address _assim,\\n        uint256 _baseWeight,\\n        uint256 _quoteWeight,\\n        int128 _amount\\n    ) internal returns (uint256 amt_) {\\n        bytes memory data =\\n            abi.encodeWithSelector(\\n                iAsmltr.intakeNumeraireLPRatio.selector,\\n                _baseWeight,\\n                _quoteWeight,\\n                address(this),\\n                _amount\\n            );\\n\\n        amt_ = abi.decode(delegate(_assim, data), (uint256));\\n    }\\n\\n    function outputRaw(\\n        address _assim,\\n        address _dst,\\n        uint256 _amt\\n    ) internal returns (int128 amt_) {\\n        bytes memory data = abi.encodeWithSelector(iAsmltr.outputRaw.selector, _dst, _amt);\\n\\n        amt_ = abi.decode(delegate(_assim, data), (int128));\\n\\n        amt_ = amt_.neg();\\n    }\\n\\n    function outputRawAndGetBalance(\\n        address _assim,\\n        address _dst,\\n        uint256 _amt\\n    ) internal returns (int128 amt_, int128 bal_) {\\n        bytes memory data = abi.encodeWithSelector(iAsmltr.outputRawAndGetBalance.selector, _dst, _amt);\\n\\n        (amt_, bal_) = abi.decode(delegate(_assim, data), (int128, int128));\\n\\n        amt_ = amt_.neg();\\n    }\\n\\n    function outputNumeraire(\\n        address _assim,\\n        address _dst,\\n        int128 _amt\\n    ) internal returns (uint256 amt_) {\\n        bytes memory data = abi.encodeWithSelector(iAsmltr.outputNumeraire.selector, _dst, _amt.abs());\\n\\n        amt_ = abi.decode(delegate(_assim, data), (uint256));\\n    }\\n}\\n\"},\"CurveMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see \\u003chttp://www.gnu.org/licenses/\\u003e.\\n\\npragma solidity ^0.7.3;\\n\\nimport \\\"./Storage.sol\\\";\\n\\nimport \\\"./UnsafeMath64x64.sol\\\";\\nimport \\\"./ABDKMath64x64.sol\\\";\\n\\nlibrary CurveMath {\\n    int128 private constant ONE = 0x10000000000000000;\\n    int128 private constant MAX = 0x4000000000000000; // .25 in layman\\u0027s terms\\n    int128 private constant MAX_DIFF = -0x10C6F7A0B5EE;\\n    int128 private constant ONE_WEI = 0x12;\\n\\n    using ABDKMath64x64 for int128;\\n    using UnsafeMath64x64 for int128;\\n    using ABDKMath64x64 for uint256;\\n\\n    // This is used to prevent stack too deep errors\\n    function calculateFee(\\n        int128 _gLiq,\\n        int128[] memory _bals,\\n        Storage.Curve storage curve,\\n        int128[] memory _weights\\n    ) internal view returns (int128 psi_) {\\n        int128 _beta = curve.beta;\\n        int128 _delta = curve.delta;\\n\\n        psi_ = calculateFee(_gLiq, _bals, _beta, _delta, _weights);\\n    }\\n\\n    function calculateFee(\\n        int128 _gLiq,\\n        int128[] memory _bals,\\n        int128 _beta,\\n        int128 _delta,\\n        int128[] memory _weights\\n    ) internal pure returns (int128 psi_) {\\n        uint256 _length = _bals.length;\\n\\n        for (uint256 i = 0; i \\u003c _length; i++) {\\n            int128 _ideal = _gLiq.mul(_weights[i]);\\n            psi_ += calculateMicroFee(_bals[i], _ideal, _beta, _delta);\\n        }\\n    }\\n\\n    function calculateMicroFee(\\n        int128 _bal,\\n        int128 _ideal,\\n        int128 _beta,\\n        int128 _delta\\n    ) private pure returns (int128 fee_) {\\n        if (_bal \\u003c _ideal) {\\n            int128 _threshold = _ideal.mul(ONE - _beta);\\n\\n            if (_bal \\u003c _threshold) {\\n                int128 _feeMargin = _threshold - _bal;\\n\\n                fee_ = _feeMargin.div(_ideal);\\n                fee_ = fee_.mul(_delta);\\n\\n                if (fee_ \\u003e MAX) fee_ = MAX;\\n\\n                fee_ = fee_.mul(_feeMargin);\\n            } else fee_ = 0;\\n        } else {\\n            int128 _threshold = _ideal.mul(ONE + _beta);\\n\\n            if (_bal \\u003e _threshold) {\\n                int128 _feeMargin = _bal - _threshold;\\n\\n                fee_ = _feeMargin.div(_ideal);\\n                fee_ = fee_.mul(_delta);\\n\\n                if (fee_ \\u003e MAX) fee_ = MAX;\\n\\n                fee_ = fee_.mul(_feeMargin);\\n            } else fee_ = 0;\\n        }\\n    }\\n\\n    function calculateTrade(\\n        Storage.Curve storage curve,\\n        int128 _oGLiq,\\n        int128 _nGLiq,\\n        int128[] memory _oBals,\\n        int128[] memory _nBals,\\n        int128 _inputAmt,\\n        uint256 _outputIndex\\n    ) internal view returns (int128 outputAmt_) {\\n        outputAmt_ = -_inputAmt;\\n\\n        int128 _lambda = curve.lambda;\\n        int128[] memory _weights = curve.weights;\\n\\n        int128 _omega = calculateFee(_oGLiq, _oBals, curve, _weights);\\n        int128 _psi;\\n\\n        for (uint256 i = 0; i \\u003c 32; i++) {\\n            _psi = calculateFee(_nGLiq, _nBals, curve, _weights);\\n\\n            int128 prevAmount;\\n            {\\n                prevAmount = outputAmt_;\\n                outputAmt_ = _omega \\u003c _psi ? -(_inputAmt + _omega - _psi) : -(_inputAmt + _lambda.mul(_omega - _psi));\\n            }\\n\\n            if (outputAmt_ / 1e13 == prevAmount / 1e13) {\\n                _nGLiq = _oGLiq + _inputAmt + outputAmt_;\\n\\n                _nBals[_outputIndex] = _oBals[_outputIndex] + outputAmt_;\\n\\n                enforceHalts(curve, _oGLiq, _nGLiq, _oBals, _nBals, _weights);\\n\\n                enforceSwapInvariant(_oGLiq, _omega, _nGLiq, _psi);\\n\\n                return outputAmt_;\\n            } else {\\n                _nGLiq = _oGLiq + _inputAmt + outputAmt_;\\n\\n                _nBals[_outputIndex] = _oBals[_outputIndex].add(outputAmt_);\\n            }\\n        }\\n\\n        revert(\\\"Curve/swap-convergence-failed\\\");\\n    }\\n\\n    function calculateLiquidityMembrane(\\n        Storage.Curve storage curve,\\n        int128 _oGLiq,\\n        int128 _nGLiq,\\n        int128[] memory _oBals,\\n        int128[] memory _nBals\\n    ) internal view returns (int128 curves_) {\\n        enforceHalts(curve, _oGLiq, _nGLiq, _oBals, _nBals, curve.weights);\\n\\n        int128 _omega;\\n        int128 _psi;\\n\\n        {\\n            int128 _beta = curve.beta;\\n            int128 _delta = curve.delta;\\n            int128[] memory _weights = curve.weights;\\n\\n            _omega = calculateFee(_oGLiq, _oBals, _beta, _delta, _weights);\\n            _psi = calculateFee(_nGLiq, _nBals, _beta, _delta, _weights);\\n        }\\n\\n        int128 _feeDiff = _psi.sub(_omega);\\n        int128 _liqDiff = _nGLiq.sub(_oGLiq);\\n        int128 _oUtil = _oGLiq.sub(_omega);\\n        int128 _totalShells = curve.totalSupply.divu(1e18);\\n        int128 _curveMultiplier;\\n\\n        if (_totalShells == 0) {\\n            curves_ = _nGLiq.sub(_psi);\\n        } else if (_feeDiff \\u003e= 0) {\\n            _curveMultiplier = _liqDiff.sub(_feeDiff).div(_oUtil);\\n        } else {\\n            _curveMultiplier = _liqDiff.sub(curve.lambda.mul(_feeDiff));\\n\\n            _curveMultiplier = _curveMultiplier.div(_oUtil);\\n        }\\n\\n        if (_totalShells != 0) {\\n            curves_ = _totalShells.mul(_curveMultiplier);\\n\\n            enforceLiquidityInvariant(_totalShells, curves_, _oGLiq, _nGLiq, _omega, _psi);\\n        }\\n    }\\n\\n    function enforceSwapInvariant(\\n        int128 _oGLiq,\\n        int128 _omega,\\n        int128 _nGLiq,\\n        int128 _psi\\n    ) private pure {\\n        int128 _nextUtil = _nGLiq - _psi;\\n\\n        int128 _prevUtil = _oGLiq - _omega;\\n\\n        int128 _diff = _nextUtil - _prevUtil;\\n\\n        require(0 \\u003c _diff || _diff \\u003e= MAX_DIFF, \\\"Curve/swap-invariant-violation\\\");\\n    }\\n\\n    function enforceLiquidityInvariant(\\n        int128 _totalShells,\\n        int128 _newShells,\\n        int128 _oGLiq,\\n        int128 _nGLiq,\\n        int128 _omega,\\n        int128 _psi\\n    ) internal pure {\\n        if (_totalShells == 0 || 0 == _totalShells + _newShells) return;\\n\\n        int128 _prevUtilPerShell = _oGLiq.sub(_omega).div(_totalShells);\\n\\n        int128 _nextUtilPerShell = _nGLiq.sub(_psi).div(_totalShells.add(_newShells));\\n\\n        int128 _diff = _nextUtilPerShell - _prevUtilPerShell;\\n\\n        require(0 \\u003c _diff || _diff \\u003e= MAX_DIFF, \\\"Curve/liquidity-invariant-violation\\\");\\n    }\\n\\n    function enforceHalts(\\n        Storage.Curve storage curve,\\n        int128 _oGLiq,\\n        int128 _nGLiq,\\n        int128[] memory _oBals,\\n        int128[] memory _nBals,\\n        int128[] memory _weights\\n    ) private view {\\n        uint256 _length = _nBals.length;\\n        int128 _alpha = curve.alpha;\\n\\n        for (uint256 i = 0; i \\u003c _length; i++) {\\n            int128 _nIdeal = _nGLiq.mul(_weights[i]);\\n\\n            if (_nBals[i] \\u003e _nIdeal) {\\n                int128 _upperAlpha = ONE + _alpha;\\n\\n                int128 _nHalt = _nIdeal.mul(_upperAlpha);\\n\\n                if (_nBals[i] \\u003e _nHalt) {\\n                    int128 _oHalt = _oGLiq.mul(_weights[i]).mul(_upperAlpha);\\n\\n                    if (_oBals[i] \\u003c _oHalt) revert(\\\"Curve/upper-halt\\\");\\n                    if (_nBals[i] - _nHalt \\u003e _oBals[i] - _oHalt) revert(\\\"Curve/upper-halt\\\");\\n                }\\n            } else {\\n                int128 _lowerAlpha = ONE - _alpha;\\n\\n                int128 _nHalt = _nIdeal.mul(_lowerAlpha);\\n\\n                if (_nBals[i] \\u003c _nHalt) {\\n                    int128 _oHalt = _oGLiq.mul(_weights[i]);\\n                    _oHalt = _oHalt.mul(_lowerAlpha);\\n\\n                    if (_oBals[i] \\u003e _oHalt) revert(\\\"Curve/lower-halt\\\");\\n                    if (_nHalt - _nBals[i] \\u003e _oHalt - _oBals[i]) revert(\\\"Curve/lower-halt\\\");\\n                }\\n            }\\n        }\\n    }\\n}\\n\"},\"IAssimilator.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see \\u003chttp://www.gnu.org/licenses/\\u003e.\\n\\npragma solidity ^0.7.3;\\n\\ninterface IAssimilator {\\n    function getRate() external view returns (uint256);\\n\\n    function intakeRaw(uint256 amount) external returns (int128);\\n\\n    function intakeRawAndGetBalance(uint256 amount) external returns (int128, int128);\\n\\n    function intakeNumeraire(int128 amount) external returns (uint256);\\n\\n    function intakeNumeraireLPRatio(\\n        uint256,\\n        uint256,\\n        address,\\n        int128\\n    ) external returns (uint256);\\n\\n    function outputRaw(address dst, uint256 amount) external returns (int128);\\n\\n    function outputRawAndGetBalance(address dst, uint256 amount) external returns (int128, int128);\\n\\n    function outputNumeraire(address dst, int128 amount) external returns (uint256);\\n\\n    function viewRawAmount(int128) external view returns (uint256);\\n\\n    function viewRawAmountLPRatio(\\n        uint256,\\n        uint256,\\n        address,\\n        int128\\n    ) external view returns (uint256);\\n\\n    function viewNumeraireAmount(uint256) external view returns (int128);\\n\\n    function viewNumeraireBalanceLPRatio(\\n        uint256,\\n        uint256,\\n        address\\n    ) external view returns (int128);\\n\\n    function viewNumeraireBalance(address) external view returns (int128);\\n\\n    function viewNumeraireAmountAndBalance(address, uint256) external view returns (int128, int128);\\n}\\n\"},\"IOracle.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see \\u003chttp://www.gnu.org/licenses/\\u003e.\\n\\npragma solidity ^0.7.3;\\n\\ninterface IOracle {\\n    function acceptOwnership() external;\\n\\n    function accessController() external view returns (address);\\n\\n    function aggregator() external view returns (address);\\n\\n    function confirmAggregator(address _aggregator) external;\\n\\n    function decimals() external view returns (uint8);\\n\\n    function description() external view returns (string memory);\\n\\n    function getAnswer(uint256 _roundId) external view returns (int256);\\n\\n    function getRoundData(uint80 _roundId)\\n        external\\n        view\\n        returns (\\n            uint80 roundId,\\n            int256 answer,\\n            uint256 startedAt,\\n            uint256 updatedAt,\\n            uint80 answeredInRound\\n        );\\n\\n    function getTimestamp(uint256 _roundId) external view returns (uint256);\\n\\n    function latestAnswer() external view returns (int256);\\n\\n    function latestRound() external view returns (uint256);\\n\\n    function latestRoundData()\\n        external\\n        view\\n        returns (\\n            uint80 roundId,\\n            int256 answer,\\n            uint256 startedAt,\\n            uint256 updatedAt,\\n            uint80 answeredInRound\\n        );\\n\\n    function latestTimestamp() external view returns (uint256);\\n\\n    function owner() external view returns (address);\\n\\n    function phaseAggregators(uint16) external view returns (address);\\n\\n    function phaseId() external view returns (uint16);\\n\\n    function proposeAggregator(address _aggregator) external;\\n\\n    function proposedAggregator() external view returns (address);\\n\\n    function proposedGetRoundData(uint80 _roundId)\\n        external\\n        view\\n        returns (\\n            uint80 roundId,\\n            int256 answer,\\n            uint256 startedAt,\\n            uint256 updatedAt,\\n            uint80 answeredInRound\\n        );\\n\\n    function proposedLatestRoundData()\\n        external\\n        view\\n        returns (\\n            uint80 roundId,\\n            int256 answer,\\n            uint256 startedAt,\\n            uint256 updatedAt,\\n            uint80 answeredInRound\\n        );\\n\\n    function setController(address _accessController) external;\\n\\n    function transferOwnership(address _to) external;\\n\\n    function version() external view returns (uint256);\\n}\\n\"},\"ProportionalLiquidity.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.3;\\n\\nimport \\\"./Assimilators.sol\\\";\\n\\nimport \\\"./Storage.sol\\\";\\n\\nimport \\\"./UnsafeMath64x64.sol\\\";\\nimport \\\"./ABDKMath64x64.sol\\\";\\n\\nimport \\\"./CurveMath.sol\\\";\\n\\nlibrary ProportionalLiquidity {\\n    using ABDKMath64x64 for uint256;\\n    using ABDKMath64x64 for int128;\\n    using UnsafeMath64x64 for int128;\\n\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    int128 public constant ONE = 0x10000000000000000;\\n    int128 public constant ONE_WEI = 0x12;\\n\\n    function proportionalDeposit(Storage.Curve storage curve, uint256 _deposit)\\n        external\\n        returns (uint256 curves_, uint256[] memory)\\n    {\\n        int128 __deposit = _deposit.divu(1e18);\\n\\n        uint256 _length = curve.assets.length;\\n\\n        uint256[] memory deposits_ = new uint256[](_length);\\n\\n        (int128 _oGLiq, int128[] memory _oBals) = getGrossLiquidityAndBalancesForDeposit(curve);\\n\\n        // Needed to calculate liquidity invariant\\n        (int128 _oGLiqProp, int128[] memory _oBalsProp) = getGrossLiquidityAndBalances(curve);\\n\\n        // No liquidity, oracle sets the ratio\\n        if (_oGLiq == 0) {\\n            for (uint256 i = 0; i \\u003c _length; i++) {\\n                // Variable here to avoid stack-too-deep errors\\n                int128 _d = __deposit.mul(curve.weights[i]);\\n                deposits_[i] = Assimilators.intakeNumeraire(curve.assets[i].addr, _d.add(ONE_WEI));\\n            }\\n        } else {\\n            // We already have an existing pool ratio\\n            // which must be respected\\n            int128 _multiplier = __deposit.div(_oGLiq);\\n\\n            uint256 _baseWeight = curve.weights[0].mulu(1e18);\\n            uint256 _quoteWeight = curve.weights[1].mulu(1e18);\\n\\n            for (uint256 i = 0; i \\u003c _length; i++) {\\n                deposits_[i] = Assimilators.intakeNumeraireLPRatio(\\n                    curve.assets[i].addr,\\n                    _baseWeight,\\n                    _quoteWeight,\\n                    _oBals[i].mul(_multiplier).add(ONE_WEI)\\n                );\\n            }\\n        }\\n\\n        int128 _totalShells = curve.totalSupply.divu(1e18);\\n\\n        int128 _newShells = __deposit;\\n\\n        if (_totalShells \\u003e 0) {\\n            _newShells = __deposit.div(_oGLiq);\\n            _newShells = _newShells.mul(_totalShells);\\n        }\\n\\n        requireLiquidityInvariant(curve, _totalShells, _newShells, _oGLiqProp, _oBalsProp);\\n\\n        mint(curve, msg.sender, curves_ = _newShells.mulu(1e18));\\n\\n        return (curves_, deposits_);\\n    }\\n\\n    function viewProportionalDeposit(Storage.Curve storage curve, uint256 _deposit)\\n        external\\n        view\\n        returns (uint256 curves_, uint256[] memory)\\n    {\\n        int128 __deposit = _deposit.divu(1e18);\\n\\n        uint256 _length = curve.assets.length;\\n\\n        (int128 _oGLiq, int128[] memory _oBals) = getGrossLiquidityAndBalancesForDeposit(curve);\\n\\n        uint256[] memory deposits_ = new uint256[](_length);\\n\\n        // No liquidity\\n        if (_oGLiq == 0) {\\n            for (uint256 i = 0; i \\u003c _length; i++) {\\n                deposits_[i] = Assimilators.viewRawAmount(\\n                    curve.assets[i].addr,\\n                    __deposit.mul(curve.weights[i]).add(ONE_WEI)\\n                );\\n            }\\n        } else {\\n            // We already have an existing pool ratio\\n            // this must be respected\\n            int128 _multiplier = __deposit.div(_oGLiq);\\n\\n            uint256 _baseWeight = curve.weights[0].mulu(1e18);\\n            uint256 _quoteWeight = curve.weights[1].mulu(1e18);\\n\\n            // Deposits into the pool is determined by existing LP ratio\\n            for (uint256 i = 0; i \\u003c _length; i++) {\\n                deposits_[i] = Assimilators.viewRawAmountLPRatio(\\n                    curve.assets[i].addr,\\n                    _baseWeight,\\n                    _quoteWeight,\\n                    _oBals[i].mul(_multiplier).add(ONE_WEI)\\n                );\\n            }\\n        }\\n\\n        int128 _totalShells = curve.totalSupply.divu(1e18);\\n\\n        int128 _newShells = __deposit;\\n\\n        if (_totalShells \\u003e 0) {\\n            _newShells = __deposit.div(_oGLiq);\\n            _newShells = _newShells.mul(_totalShells);\\n        }\\n\\n        curves_ = _newShells.mulu(1e18);\\n\\n        return (curves_, deposits_);\\n    }\\n\\n    function emergencyProportionalWithdraw(Storage.Curve storage curve, uint256 _withdrawal)\\n        external\\n        returns (uint256[] memory)\\n    {\\n        uint256 _length = curve.assets.length;\\n\\n        (, int128[] memory _oBals) = getGrossLiquidityAndBalances(curve);\\n\\n        uint256[] memory withdrawals_ = new uint256[](_length);\\n\\n        int128 _totalShells = curve.totalSupply.divu(1e18);\\n        int128 __withdrawal = _withdrawal.divu(1e18);\\n\\n        int128 _multiplier = __withdrawal.div(_totalShells);\\n\\n        for (uint256 i = 0; i \\u003c _length; i++) {\\n            withdrawals_[i] = Assimilators.outputNumeraire(\\n                curve.assets[i].addr,\\n                msg.sender,\\n                _oBals[i].mul(_multiplier)\\n            );\\n        }\\n\\n        burn(curve, msg.sender, _withdrawal);\\n\\n        return withdrawals_;\\n    }\\n\\n    function proportionalWithdraw(Storage.Curve storage curve, uint256 _withdrawal)\\n        external\\n        returns (uint256[] memory)\\n    {\\n        uint256 _length = curve.assets.length;\\n\\n        (int128 _oGLiq, int128[] memory _oBals) = getGrossLiquidityAndBalances(curve);\\n\\n        uint256[] memory withdrawals_ = new uint256[](_length);\\n\\n        int128 _totalShells = curve.totalSupply.divu(1e18);\\n        int128 __withdrawal = _withdrawal.divu(1e18);\\n\\n        int128 _multiplier = __withdrawal.div(_totalShells);\\n\\n        for (uint256 i = 0; i \\u003c _length; i++) {\\n            withdrawals_[i] = Assimilators.outputNumeraire(\\n                curve.assets[i].addr,\\n                msg.sender,\\n                _oBals[i].mul(_multiplier)\\n            );\\n        }\\n\\n        requireLiquidityInvariant(curve, _totalShells, __withdrawal.neg(), _oGLiq, _oBals);\\n\\n        burn(curve, msg.sender, _withdrawal);\\n\\n        return withdrawals_;\\n    }\\n\\n    function viewProportionalWithdraw(Storage.Curve storage curve, uint256 _withdrawal)\\n        external\\n        view\\n        returns (uint256[] memory)\\n    {\\n        uint256 _length = curve.assets.length;\\n\\n        (, int128[] memory _oBals) = getGrossLiquidityAndBalances(curve);\\n\\n        uint256[] memory withdrawals_ = new uint256[](_length);\\n\\n        int128 _multiplier = _withdrawal.divu(1e18).div(curve.totalSupply.divu(1e18));\\n\\n        for (uint256 i = 0; i \\u003c _length; i++) {\\n            withdrawals_[i] = Assimilators.viewRawAmount(curve.assets[i].addr, _oBals[i].mul(_multiplier));\\n        }\\n\\n        return withdrawals_;\\n    }\\n\\n    function getGrossLiquidityAndBalancesForDeposit(Storage.Curve storage curve)\\n        internal\\n        view\\n        returns (int128 grossLiquidity_, int128[] memory)\\n    {\\n        uint256 _length = curve.assets.length;\\n\\n        int128[] memory balances_ = new int128[](_length);\\n        uint256 _baseWeight = curve.weights[0].mulu(1e18);\\n        uint256 _quoteWeight = curve.weights[1].mulu(1e18);\\n\\n        for (uint256 i = 0; i \\u003c _length; i++) {\\n            int128 _bal = Assimilators.viewNumeraireBalanceLPRatio(_baseWeight, _quoteWeight, curve.assets[i].addr);\\n\\n            balances_[i] = _bal;\\n            grossLiquidity_ += _bal;\\n        }\\n\\n        return (grossLiquidity_, balances_);\\n    }\\n\\n    function getGrossLiquidityAndBalances(Storage.Curve storage curve)\\n        internal\\n        view\\n        returns (int128 grossLiquidity_, int128[] memory)\\n    {\\n        uint256 _length = curve.assets.length;\\n\\n        int128[] memory balances_ = new int128[](_length);\\n\\n        for (uint256 i = 0; i \\u003c _length; i++) {\\n            int128 _bal = Assimilators.viewNumeraireBalance(curve.assets[i].addr);\\n\\n            balances_[i] = _bal;\\n            grossLiquidity_ += _bal;\\n        }\\n\\n        return (grossLiquidity_, balances_);\\n    }\\n\\n    function requireLiquidityInvariant(\\n        Storage.Curve storage curve,\\n        int128 _curves,\\n        int128 _newShells,\\n        int128 _oGLiq,\\n        int128[] memory _oBals\\n    ) private view {\\n        (int128 _nGLiq, int128[] memory _nBals) = getGrossLiquidityAndBalances(curve);\\n\\n        int128 _beta = curve.beta;\\n        int128 _delta = curve.delta;\\n        int128[] memory _weights = curve.weights;\\n\\n        int128 _omega = CurveMath.calculateFee(_oGLiq, _oBals, _beta, _delta, _weights);\\n\\n        int128 _psi = CurveMath.calculateFee(_nGLiq, _nBals, _beta, _delta, _weights);\\n\\n        CurveMath.enforceLiquidityInvariant(_curves, _newShells, _oGLiq, _nGLiq, _omega, _psi);\\n    }\\n\\n    function burn(\\n        Storage.Curve storage curve,\\n        address account,\\n        uint256 amount\\n    ) private {\\n        curve.balances[account] = burnSub(curve.balances[account], amount);\\n\\n        curve.totalSupply = burnSub(curve.totalSupply, amount);\\n\\n        emit Transfer(msg.sender, address(0), amount);\\n    }\\n\\n    function mint(\\n        Storage.Curve storage curve,\\n        address account,\\n        uint256 amount\\n    ) private {\\n        curve.totalSupply = mintAdd(curve.totalSupply, amount);\\n\\n        curve.balances[account] = mintAdd(curve.balances[account], amount);\\n\\n        emit Transfer(address(0), msg.sender, amount);\\n    }\\n\\n    function mintAdd(uint256 x, uint256 y) private pure returns (uint256 z) {\\n        require((z = x + y) \\u003e= x, \\\"Curve/mint-overflow\\\");\\n    }\\n\\n    function burnSub(uint256 x, uint256 y) private pure returns (uint256 z) {\\n        require((z = x - y) \\u003c= x, \\\"Curve/burn-underflow\\\");\\n    }\\n}\\n\"},\"Storage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see \\u003chttp://www.gnu.org/licenses/\\u003e.\\n\\npragma solidity ^0.7.3;\\n\\nimport \\\"./IOracle.sol\\\";\\nimport \\\"./Assimilators.sol\\\";\\n\\ncontract Storage {\\n    struct Curve {\\n        // Curve parameters\\n        int128 alpha;\\n        int128 beta;\\n        int128 delta;\\n        int128 epsilon;\\n        int128 lambda;\\n        int128[] weights;\\n        // Assets and their assimilators\\n        Assimilator[] assets;\\n        mapping(address =\\u003e Assimilator) assimilators;\\n        // Oracles to determine the price\\n        // Note that 0\\u0027th index should always be USDC 1e18\\n        // Oracle\\u0027s pricing should be denominated in Currency/USDC\\n        mapping(address =\\u003e IOracle) oracles;\\n        // ERC20 Interface\\n        uint256 totalSupply;\\n        mapping(address =\\u003e uint256) balances;\\n        mapping(address =\\u003e mapping(address =\\u003e uint256)) allowances;\\n    }\\n\\n    struct Assimilator {\\n        address addr;\\n        uint8 ix;\\n    }\\n\\n    // Curve parameters\\n    Curve public curve;\\n\\n    // Ownable\\n    address public owner;\\n\\n    string public name;\\n    string public symbol;\\n    uint8 public constant decimals = 18;\\n\\n    address[] public derivatives;\\n    address[] public numeraires;\\n    address[] public reserves;\\n\\n    // Curve operational state\\n    bool public frozen = false;\\n    bool public emergency = false;\\n    bool public whitelistingStage = true;\\n    bool internal notEntered = true;\\n\\n    mapping(address =\\u003e uint256) public whitelistedDeposited;\\n}\\n\"},\"UnsafeMath64x64.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.3;\\n\\nlibrary UnsafeMath64x64 {\\n\\n  /**\\n   * Calculate x * y rounding down.\\n   *\\n   * @param x signed 64.64-bit fixed point number\\n   * @param y signed 64.64-bit fixed point number\\n   * @return signed 64.64-bit fixed point number\\n   */\\n\\n  function us_mul (int128 x, int128 y) internal pure returns (int128) {\\n    int256 result = int256(x) * y \\u003e\\u003e 64;\\n    return int128 (result);\\n  }\\n\\n  /**\\n   * Calculate x / y rounding towards zero.  Revert on overflow or when y is\\n   * zero.\\n   *\\n   * @param x signed 64.64-bit fixed point number\\n   * @param y signed 64.64-bit fixed point number\\n   * @return signed 64.64-bit fixed point number\\n   */\\n\\n  function us_div (int128 x, int128 y) internal pure returns (int128) {\\n    int256 result = (int256 (x) \\u003c\\u003c 64) / y;\\n    return int128 (result);\\n  }\\n\\n}\"}}","ABI":"[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"ONE\",\"outputs\":[{\"internalType\":\"int128\",\"name\":\"\",\"type\":\"int128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ONE_WEI\",\"outputs\":[{\"internalType\":\"int128\",\"name\":\"\",\"type\":\"int128\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"ProportionalLiquidity","CompilerVersion":"v0.7.3+commit.9bfce1f6","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://f2fb47f787d5e22a7b989dab6b571dafd3913c84f23897329319dcb0ed27be18"}]}