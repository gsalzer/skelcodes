{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"DAOCommittee.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.7.6;\\npragma abicoder v2;\\n\\nimport \\\"AccessControl.sol\\\";\\nimport \\\"StorageStateCommittee.sol\\\";\\n\\nimport { SafeMath } from \\\"SafeMath.sol\\\";\\nimport { IERC20 } from  \\\"IERC20.sol\\\";\\nimport { IDAOCommittee } from \\\"IDAOCommittee.sol\\\";\\nimport { ICandidate } from \\\"ICandidate.sol\\\";\\nimport { ILayer2 } from \\\"ILayer2.sol\\\";\\nimport { IDAOAgendaManager } from \\\"IDAOAgendaManager.sol\\\";\\nimport { LibAgenda } from \\\"LibAgenda.sol\\\";\\nimport { ERC165Checker } from \\\"ERC165Checker.sol\\\";\\n\\ncontract DAOCommittee is StorageStateCommittee, AccessControl, IDAOCommittee {\\n    using SafeMath for uint256;\\n    using LibAgenda for *;\\n     \\n    enum ApplyResult { NONE, SUCCESS, NOT_ELECTION, ALREADY_COMMITTEE, SLOT_INVALID, ADDMEMBER_FAIL, LOW_BALANCE }\\n\\n    struct AgendaCreatingData {\\n        address[] target;\\n        uint128 noticePeriodSeconds;\\n        uint128 votingPeriodSeconds;\\n        bool atomicExecute;\\n        bytes[] functionBytecode;\\n    }\\n\\n    //////////////////////////////\\n    // Events\\n    //////////////////////////////\\n\\n    event QuorumChanged(\\n        uint256 newQuorum\\n    );\\n\\n    event AgendaCreated(\\n        address indexed from,\\n        uint256 indexed id,\\n        address[] targets,\\n        uint128 noticePeriodSeconds,\\n        uint128 votingPeriodSeconds,\\n        bool atomicExecute\\n    );\\n\\n    event AgendaVoteCasted(\\n        address indexed from,\\n        uint256 indexed id,\\n        uint256 voting,\\n        string comment\\n    );\\n\\n    event AgendaExecuted(\\n        uint256 indexed id,\\n        address[] target\\n    );\\n\\n    event CandidateContractCreated(\\n        address indexed candidate,\\n        address indexed candidateContract,\\n        string memo\\n    );\\n\\n    event Layer2Registered(\\n        address indexed candidate,\\n        address indexed candidateContract,\\n        string memo\\n    );\\n\\n    event ChangedMember(\\n        uint256 indexed slotIndex,\\n        address prevMember,\\n        address indexed newMember\\n    );\\n\\n    event ChangedSlotMaximum(\\n        uint256 indexed prevSlotMax,\\n        uint256 indexed slotMax\\n    );\\n\\n    event ClaimedActivityReward(\\n        address indexed candidate,\\n        address receiver,\\n        uint256 amount\\n    );\\n\\n    event ChangedMemo(\\n        address candidate,\\n        string newMemo\\n    );\\n\\n    event ActivityRewardChanged(\\n        uint256 newReward\\n    );\\n    \\n    modifier onlyOwner() {\\n        require(hasRole(DEFAULT_ADMIN_ROLE, msg.sender), \\\"DAOCommittee: msg.sender is not an admin\\\");\\n        _;\\n    }\\n\\n    modifier validMemberIndex(uint256 _index) {\\n        require(_index < maxMember, \\\"DAOCommittee: invalid member index\\\");\\n        _;\\n    }\\n\\n    modifier nonZero(address _addr) {\\n        require(_addr != address(0), \\\"DAOCommittee: zero address\\\");\\n        _;\\n    }\\n\\n    //////////////////////////////////////////////////////////////////////\\n    // setters\\n\\n    /// @notice Set SeigManager contract address\\n    /// @param _seigManager New SeigManager contract address\\n    function setSeigManager(address _seigManager) external override onlyOwner nonZero(_seigManager) {\\n        seigManager = ISeigManager(_seigManager);\\n    }\\n     \\n    /// @notice Set SeigManager contract address on candidate contracts\\n    /// @param _candidateContracts Candidate contracts to be set\\n    /// @param _seigManager New SeigManager contract address\\n    function setCandidatesSeigManager(\\n        address[] calldata _candidateContracts,\\n        address _seigManager\\n    )\\n        external\\n        override\\n        onlyOwner\\n        nonZero(_seigManager)\\n    {\\n        for (uint256 i = 0; i < _candidateContracts.length; i++) {\\n            ICandidate(_candidateContracts[i]).setSeigManager(_seigManager);\\n        }\\n    }\\n\\n    /// @notice Set DAOCommitteeProxy contract address on candidate contracts\\n    /// @param _candidateContracts Candidate contracts to be set\\n    /// @param _committee New DAOCommitteeProxy contract address\\n    function setCandidatesCommittee(\\n        address[] calldata _candidateContracts,\\n        address _committee\\n    )\\n        external\\n        override\\n        onlyOwner\\n        nonZero(_committee)\\n    {\\n        for (uint256 i = 0; i < _candidateContracts.length; i++) {\\n            ICandidate(_candidateContracts[i]).setCommittee(_committee);\\n        }\\n    }\\n\\n    /// @notice Set DAOVault contract address\\n    /// @param _daoVault New DAOVault contract address\\n    function setDaoVault(address _daoVault) external override onlyOwner nonZero(_daoVault) {\\n        daoVault = IDAOVault(_daoVault);\\n    }\\n\\n    /// @notice Set Layer2Registry contract address\\n    /// @param _layer2Registry New Layer2Registry contract address\\n    function setLayer2Registry(address _layer2Registry) external override onlyOwner nonZero(_layer2Registry) {\\n        layer2Registry = ILayer2Registry(_layer2Registry);\\n    }\\n\\n    /// @notice Set DAOAgendaManager contract address\\n    /// @param _agendaManager New DAOAgendaManager contract address\\n    function setAgendaManager(address _agendaManager) external override onlyOwner nonZero(_agendaManager) {\\n        agendaManager = IDAOAgendaManager(_agendaManager);\\n    }\\n\\n    /// @notice Set CandidateFactory contract address\\n    /// @param _candidateFactory New CandidateFactory contract address\\n    function setCandidateFactory(address _candidateFactory) external override onlyOwner nonZero(_candidateFactory) {\\n        candidateFactory = ICandidateFactory(_candidateFactory);\\n    }\\n\\n    /// @notice Set TON contract address\\n    /// @param _ton New TON contract address\\n    function setTon(address _ton) external override onlyOwner nonZero(_ton) {\\n        ton = _ton;\\n    }\\n\\n    /// @notice Set activity reward amount\\n    /// @param _value New activity reward per second\\n    function setActivityRewardPerSecond(uint256 _value) external override onlyOwner {\\n        activityRewardPerSecond = _value;\\n        emit ActivityRewardChanged(_value);\\n    }\\n\\n    /// @notice Increases the number of member slot\\n    /// @param _newMaxMember New number of member slot\\n    /// @param _quorum New quorum\\n    function increaseMaxMember(\\n        uint256 _newMaxMember,\\n        uint256 _quorum\\n    )\\n        external\\n        override\\n        onlyOwner\\n    {\\n        require(maxMember < _newMaxMember, \\\"DAOCommittee: You have to call decreaseMaxMember to decrease\\\");\\n        uint256 prevMaxMember = maxMember;\\n        maxMember = _newMaxMember;\\n        fillMemberSlot();\\n        setQuorum(_quorum);\\n        emit ChangedSlotMaximum(prevMaxMember, _newMaxMember);\\n    }\\n\\n    //////////////////////////////////////////////////////////////////////\\n    // Managing members\\n\\n    /// @notice Creates a candidate contract and register it on SeigManager\\n    /// @param _memo A memo for the candidate\\n    function createCandidate(string calldata _memo)\\n        external\\n        override\\n        validSeigManager\\n        validLayer2Registry\\n        validCommitteeL2Factory\\n    {\\n        require(!isExistCandidate(msg.sender), \\\"DAOCommittee: candidate already registerd\\\");\\n\\n        // Candidate\\n        address candidateContract = candidateFactory.deploy(\\n            msg.sender,\\n            false,\\n            _memo,\\n            address(this),\\n            address(seigManager)\\n        );\\n\\n        require(\\n            candidateContract != address(0),\\n            \\\"DAOCommittee: deployed candidateContract is zero\\\"\\n        );\\n        require(\\n            _candidateInfos[msg.sender].candidateContract == address(0),\\n            \\\"DAOCommittee: The candidate already has contract\\\"\\n        );\\n        require(\\n            layer2Registry.registerAndDeployCoinage(candidateContract, address(seigManager)),\\n            \\\"DAOCommittee: failed to registerAndDeployCoinage\\\"\\n        );\\n\\n        _candidateInfos[msg.sender] = CandidateInfo({\\n            candidateContract: candidateContract,\\n            memberJoinedTime: 0,\\n            indexMembers: 0,\\n            rewardPeriod: 0,\\n            claimedTimestamp: 0\\n        });\\n\\n        candidates.push(msg.sender);\\n       \\n        emit CandidateContractCreated(msg.sender, candidateContract, _memo);\\n    }\\n\\n    /// @notice Registers the exist layer2 on DAO\\n    /// @param _layer2 Layer2 contract address to be registered\\n    /// @param _memo A memo for the candidate\\n    function registerLayer2Candidate(address _layer2, string memory _memo)\\n        external\\n        override\\n        validSeigManager\\n        validLayer2Registry\\n        validCommitteeL2Factory\\n    {\\n        _registerLayer2Candidate(msg.sender, _layer2, _memo);\\n    }\\n\\n    /// @notice Registers the exist layer2 on DAO by owner\\n    /// @param _operator Operator address of the layer2 contract\\n    /// @param _layer2 Layer2 contract address to be registered\\n    /// @param _memo A memo for the candidate\\n    function registerLayer2CandidateByOwner(address _operator, address _layer2, string memory _memo)\\n        external\\n        override\\n        onlyOwner\\n        validSeigManager\\n        validLayer2Registry\\n        validCommitteeL2Factory\\n    {\\n        _registerLayer2Candidate(_operator, _layer2, _memo);\\n    }\\n\\n    /// @notice Replaces an existing member\\n    /// @param _memberIndex The member slot index to be replaced\\n    /// @return Whether or not the execution succeeded\\n    function changeMember(\\n        uint256 _memberIndex\\n    )\\n        external\\n        override\\n        validMemberIndex(_memberIndex)\\n        returns (bool)\\n    {\\n        address newMember = ICandidate(msg.sender).candidate();\\n        CandidateInfo storage candidateInfo = _candidateInfos[newMember];\\n        require(\\n            ICandidate(msg.sender).isCandidateContract(),\\n            \\\"DAOCommittee: sender is not a candidate contract\\\"\\n        );\\n        require(\\n            candidateInfo.candidateContract == msg.sender,\\n            \\\"DAOCommittee: invalid candidate contract\\\"\\n        );\\n        require(\\n            candidateInfo.memberJoinedTime == 0,\\n            \\\"DAOCommittee: already member\\\"\\n        );\\n        \\n        address prevMember = members[_memberIndex];\\n        address prevMemberContract = candidateContract(prevMember);\\n\\n        candidateInfo.memberJoinedTime = uint128(block.timestamp);\\n        candidateInfo.indexMembers = _memberIndex;\\n\\n        members[_memberIndex] = newMember;\\n\\n        if (prevMember == address(0)) {\\n            emit ChangedMember(_memberIndex, prevMember, newMember);\\n            return true;\\n        }\\n\\n        require(\\n            ICandidate(msg.sender).totalStaked() > ICandidate(prevMemberContract).totalStaked(),\\n            \\\"not enough amount\\\"\\n        );\\n\\n        CandidateInfo storage prevCandidateInfo = _candidateInfos[prevMember];\\n        prevCandidateInfo.indexMembers = 0;\\n        prevCandidateInfo.rewardPeriod = uint128(uint256(prevCandidateInfo.rewardPeriod).add(block.timestamp.sub(prevCandidateInfo.memberJoinedTime)));\\n        prevCandidateInfo.memberJoinedTime = 0;\\n\\n        emit ChangedMember(_memberIndex, prevMember, newMember);\\n\\n        return true;\\n    }\\n    \\n    /// @notice Retires member\\n    /// @return Whether or not the execution succeeded\\n    function retireMember() onlyMemberContract external override returns (bool) {\\n        address candidate = ICandidate(msg.sender).candidate();\\n        CandidateInfo storage candidateInfo = _candidateInfos[candidate];\\n        require(\\n            candidateInfo.candidateContract == msg.sender,\\n            \\\"DAOCommittee: invalid candidate contract\\\"\\n        );\\n        members[candidateInfo.indexMembers] = address(0);\\n        candidateInfo.rewardPeriod = uint128(uint256(candidateInfo.rewardPeriod).add(block.timestamp.sub(candidateInfo.memberJoinedTime)));\\n        candidateInfo.memberJoinedTime = 0;\\n\\n        uint256 prevIndex = candidateInfo.indexMembers;\\n        candidateInfo.indexMembers = 0;\\n        emit ChangedMember(prevIndex, candidate, address(0));\\n\\n        return true;\\n    }\\n\\n    /// @notice Set memo\\n    /// @param _candidate candidate address\\n    /// @param _memo New memo on this candidate\\n    function setMemoOnCandidate(\\n        address _candidate,\\n        string calldata _memo\\n    )\\n        external\\n        override\\n    {\\n        address candidateContract = candidateContract(_candidate);\\n        setMemoOnCandidateContract(candidateContract, _memo);\\n    }\\n\\n    /// @notice Set memo\\n    /// @param _candidateContract candidate contract address\\n    /// @param _memo New memo on this candidate\\n    function setMemoOnCandidateContract(\\n        address _candidateContract,\\n        string calldata _memo\\n    )\\n        public\\n        override\\n    {\\n        address candidate = ICandidate(_candidateContract).candidate();\\n        address contractOwner = candidate;\\n        if (ICandidate(_candidateContract).isLayer2Candidate()) {\\n            contractOwner = ILayer2(candidate).operator();\\n        }\\n        require(\\n            msg.sender == contractOwner,\\n            \\\"DAOCommittee: sender is not the candidate of this contract\\\"\\n        );\\n\\n        ICandidate(_candidateContract).setMemo(_memo);\\n        emit ChangedMemo(candidate, _memo);\\n    }\\n\\n    /// @notice Decreases the number of member slot\\n    /// @param _reducingMemberIndex Reducing member slot index\\n    /// @param _quorum New quorum\\n    function decreaseMaxMember(\\n        uint256 _reducingMemberIndex,\\n        uint256 _quorum\\n    )\\n        external\\n        override\\n        onlyOwner\\n        validMemberIndex(_reducingMemberIndex)\\n    {\\n        address reducingMember = members[_reducingMemberIndex];\\n        CandidateInfo storage reducingCandidate = _candidateInfos[reducingMember];\\n\\n        if (_reducingMemberIndex != members.length - 1) {\\n            address tailmember = members[members.length - 1];\\n            CandidateInfo storage tailCandidate = _candidateInfos[tailmember];\\n\\n            tailCandidate.indexMembers = _reducingMemberIndex;\\n            members[_reducingMemberIndex] = tailmember;\\n        }\\n        reducingCandidate.indexMembers = 0;\\n        reducingCandidate.rewardPeriod = uint128(uint256(reducingCandidate.rewardPeriod).add(block.timestamp.sub(reducingCandidate.memberJoinedTime)));\\n        reducingCandidate.memberJoinedTime = 0;\\n\\n        members.pop();\\n        maxMember = maxMember.sub(1);\\n        setQuorum(_quorum);\\n\\n        emit ChangedMember(_reducingMemberIndex, reducingMember, address(0));\\n        emit ChangedSlotMaximum(maxMember.add(1), maxMember);\\n    }\\n\\n    //////////////////////////////////////////////////////////////////////\\n    // Managing agenda\\n\\n    function onApprove(\\n        address owner,\\n        address spender,\\n        uint256 tonAmount,\\n        bytes calldata data\\n    ) external override returns (bool) {\\n        AgendaCreatingData memory agendaData = _decodeAgendaData(data);\\n\\n        _createAgenda(\\n            owner,\\n            agendaData.target,\\n            agendaData.noticePeriodSeconds,\\n            agendaData.votingPeriodSeconds,\\n            agendaData.atomicExecute,\\n            agendaData.functionBytecode\\n        );\\n\\n        return true;\\n    }\\n\\n    /// @notice Set new quorum\\n    /// @param _quorum New quorum\\n    function setQuorum(\\n        uint256 _quorum\\n    )\\n        public\\n        override\\n        onlyOwner\\n        validAgendaManager\\n    {\\n        require(_quorum > maxMember.div(2), \\\"DAOCommittee: invalid quorum\\\");\\n        require(_quorum <= maxMember, \\\"DAOCommittee: quorum exceed max member\\\");\\n        quorum = _quorum;\\n        emit QuorumChanged(quorum);\\n    }\\n\\n    /// @notice Set fee amount of creating an agenda\\n    /// @param _fees Fee amount on TON\\n    function setCreateAgendaFees(\\n        uint256 _fees\\n    )\\n        external\\n        override\\n        onlyOwner\\n        validAgendaManager\\n    {\\n        agendaManager.setCreateAgendaFees(_fees);\\n    }\\n\\n    /// @notice Set the minimum notice period\\n    /// @param _minimumNoticePeriod New minimum notice period in second\\n    function setMinimumNoticePeriodSeconds(\\n        uint256 _minimumNoticePeriod\\n    )\\n        external\\n        override\\n        onlyOwner\\n        validAgendaManager\\n    {\\n        agendaManager.setMinimumNoticePeriodSeconds(_minimumNoticePeriod);\\n    }\\n\\n    /// @notice Set the minimum voting period\\n    /// @param _minimumVotingPeriod New minimum voting period in second\\n    function setMinimumVotingPeriodSeconds(\\n        uint256 _minimumVotingPeriod\\n    )\\n        external\\n        override\\n        onlyOwner\\n        validAgendaManager\\n    {\\n        agendaManager.setMinimumVotingPeriodSeconds(_minimumVotingPeriod);\\n    }\\n\\n    /// @notice Set the executing period\\n    /// @param _executingPeriodSeconds New executing period in second\\n    function setExecutingPeriodSeconds(\\n        uint256 _executingPeriodSeconds\\n    )\\n        external\\n        override\\n        onlyOwner\\n        validAgendaManager\\n    {\\n        agendaManager.setExecutingPeriodSeconds(_executingPeriodSeconds);\\n    }\\n\\n    /// @notice Vote on an agenda\\n    /// @param _agendaID The agenda ID\\n    /// @param _vote voting type\\n    /// @param _comment voting comment\\n    function castVote(\\n        uint256 _agendaID,\\n        uint256 _vote,\\n        string calldata _comment\\n    )\\n        external \\n        override\\n        validAgendaManager\\n    {\\n        address candidate = ICandidate(msg.sender).candidate();\\n        CandidateInfo storage candidateInfo = _candidateInfos[candidate];\\n        require(\\n            candidateInfo.candidateContract == msg.sender,\\n            \\\"DAOCommittee: invalid candidate contract\\\"\\n        );\\n        \\n        agendaManager.castVote(\\n            _agendaID,\\n            candidate,\\n            _vote\\n        );\\n\\n        (uint256 yes, uint256 no, uint256 abstain) = agendaManager.getVotingCount(_agendaID);\\n\\n        if (quorum <= yes) {\\n            // yes\\n            agendaManager.setResult(_agendaID, LibAgenda.AgendaResult.ACCEPT);\\n            agendaManager.setStatus(_agendaID, LibAgenda.AgendaStatus.WAITING_EXEC);\\n        } else if (quorum <= no) {\\n            // no\\n            agendaManager.setResult(_agendaID, LibAgenda.AgendaResult.REJECT);\\n            agendaManager.setStatus(_agendaID, LibAgenda.AgendaStatus.ENDED);\\n        } else if (quorum <= abstain.add(no) ) {\\n            // dismiss\\n            agendaManager.setResult(_agendaID, LibAgenda.AgendaResult.DISMISS);\\n            agendaManager.setStatus(_agendaID, LibAgenda.AgendaStatus.ENDED);\\n        }\\n        \\n        emit AgendaVoteCasted(msg.sender, _agendaID, _vote, _comment);\\n    }\\n\\n    /// @notice Set the agenda status as ended(denied or dismissed)\\n    /// @param _agendaID Agenda ID\\n    function endAgendaVoting(uint256 _agendaID) external override {\\n        agendaManager.endAgendaVoting(_agendaID);\\n    }\\n\\n    /// @notice Execute the accepted agenda\\n    /// @param _agendaID Agenda ID\\n    function executeAgenda(uint256 _agendaID) external override validAgendaManager {\\n        require(\\n            agendaManager.canExecuteAgenda(_agendaID),\\n            \\\"DAOCommittee: can not execute the agenda\\\"\\n        );\\n        \\n         (address[] memory target,\\n             bytes[] memory functionBytecode,\\n             bool atomicExecute,\\n             uint256 executeStartFrom\\n         ) = agendaManager.getExecutionInfo(_agendaID);\\n       \\n        if (atomicExecute) {\\n            agendaManager.setExecutedAgenda(_agendaID);\\n            for (uint256 i = 0; i < target.length; i++) {\\n                (bool success, ) = address(target[i]).call(functionBytecode[i]);\\n                require(success, \\\"DAOCommittee: Failed to execute the agenda\\\");\\n            }\\n        } else {\\n            uint256 succeeded = 0;\\n            for (uint256 i = executeStartFrom; i < target.length; i++) {\\n                bool success = _call(target[i], functionBytecode[i].length, functionBytecode[i]);\\n                if (success) {\\n                    succeeded = succeeded.add(1);\\n                } else {\\n                    break;\\n                }\\n            }\\n\\n            agendaManager.setExecutedCount(_agendaID, succeeded);\\n            if (executeStartFrom.add(succeeded) == target.length) {\\n                agendaManager.setExecutedAgenda(_agendaID);\\n            }\\n        }\\n\\n        emit AgendaExecuted(_agendaID, target);\\n    }\\n\\n    /// @notice Set status and result of specific agenda\\n    /// @param _agendaID Agenda ID\\n    /// @param _status New status\\n    /// @param _result New result\\n    function setAgendaStatus(uint256 _agendaID, uint256 _status, uint256 _result) external override onlyOwner {\\n        agendaManager.setResult(_agendaID, LibAgenda.AgendaResult(_result));\\n        agendaManager.setStatus(_agendaID, LibAgenda.AgendaStatus(_status));\\n    }\\n     \\n    /// @notice Call updateSeigniorage on SeigManager\\n    /// @param _candidate Candidate address to be updated\\n    /// @return Whether or not the execution succeeded\\n    function updateSeigniorage(address _candidate) public override returns (bool) {\\n        address candidateContract = _candidateInfos[_candidate].candidateContract;\\n        return ICandidate(candidateContract).updateSeigniorage();\\n    }\\n\\n    /// @notice Call updateSeigniorage on SeigManager\\n    /// @param _candidates Candidate addresses to be updated\\n    /// @return Whether or not the execution succeeded\\n    function updateSeigniorages(address[] calldata _candidates) external override returns (bool) {\\n        for (uint256 i = 0; i < _candidates.length; i++) {\\n            require(\\n                updateSeigniorage(_candidates[i]),\\n                \\\"DAOCommittee: failed to update seigniorage\\\"\\n            );\\n        }\\n\\n        return true;\\n    }\\n\\n    /// @notice Claims the activity reward for member\\n    function claimActivityReward(address _receiver) external override {\\n        address candidate = ICandidate(msg.sender).candidate();\\n        CandidateInfo storage candidateInfo = _candidateInfos[candidate];\\n        require(\\n            candidateInfo.candidateContract == msg.sender,\\n            \\\"DAOCommittee: invalid candidate contract\\\"\\n        );\\n\\n        uint256 amount = getClaimableActivityReward(candidate);\\n        require(amount > 0, \\\"DAOCommittee: you don't have claimable ton\\\");\\n\\n        daoVault.claimTON(_receiver, amount);\\n        candidateInfo.claimedTimestamp = uint128(block.timestamp);\\n        candidateInfo.rewardPeriod = 0;\\n\\n        emit ClaimedActivityReward(candidate, _receiver, amount);\\n    }\\n\\n    function _registerLayer2Candidate(address _operator, address _layer2, string memory _memo)\\n        internal\\n        validSeigManager\\n        validLayer2Registry\\n        validCommitteeL2Factory\\n    {\\n        require(!isExistCandidate(_layer2), \\\"DAOCommittee: candidate already registerd\\\");\\n\\n        require(\\n            _layer2 != address(0),\\n            \\\"DAOCommittee: deployed candidateContract is zero\\\"\\n        );\\n        require(\\n            _candidateInfos[_layer2].candidateContract == address(0),\\n            \\\"DAOCommittee: The candidate already has contract\\\"\\n        );\\n        ILayer2 layer2 = ILayer2(_layer2);\\n        require(\\n            layer2.isLayer2(),\\n            \\\"DAOCommittee: invalid layer2 contract\\\"\\n        );\\n        require(\\n            layer2.operator() == _operator,\\n            \\\"DAOCommittee: invalid operator\\\"\\n        );\\n\\n        address candidateContract = candidateFactory.deploy(\\n            _layer2,\\n            true,\\n            _memo,\\n            address(this),\\n            address(seigManager)\\n        );\\n\\n        require(\\n            candidateContract != address(0),\\n            \\\"DAOCommittee: deployed candidateContract is zero\\\"\\n        );\\n\\n        _candidateInfos[_layer2] = CandidateInfo({\\n            candidateContract: candidateContract,\\n            memberJoinedTime: 0,\\n            indexMembers: 0,\\n            rewardPeriod: 0,\\n            claimedTimestamp: 0\\n        });\\n\\n        candidates.push(_layer2);\\n       \\n        emit Layer2Registered(_layer2, candidateContract, _memo);\\n    }\\n\\n    function fillMemberSlot() internal {\\n        for (uint256 i = members.length; i < maxMember; i++) {\\n            members.push(address(0));\\n        }\\n    }\\n\\n    function _decodeAgendaData(bytes calldata input)\\n        internal\\n        view\\n        returns (AgendaCreatingData memory data)\\n    {\\n        (data.target, data.noticePeriodSeconds, data.votingPeriodSeconds, data.atomicExecute, data.functionBytecode) = \\n            abi.decode(input, (address[], uint128, uint128, bool, bytes[]));\\n    }\\n\\n    function payCreatingAgendaFee(address _creator) internal {\\n        uint256 fee = agendaManager.createAgendaFees();\\n\\n        require(IERC20(ton).transferFrom(_creator, address(this), fee), \\\"DAOCommittee: failed to transfer ton from creator\\\");\\n        require(IERC20(ton).transfer(address(1), fee), \\\"DAOCommittee: failed to burn\\\");\\n    }\\n   \\n    function _createAgenda(\\n        address _creator,\\n        address[] memory _targets,\\n        uint128 _noticePeriodSeconds,\\n        uint128 _votingPeriodSeconds,\\n        bool _atomicExecute,\\n        bytes[] memory _functionBytecodes\\n    )\\n        internal\\n        validAgendaManager\\n        returns (uint256)\\n    {\\n        // pay to create agenda, burn ton.\\n        payCreatingAgendaFee(_creator);\\n\\n        uint256 agendaID = agendaManager.newAgenda(\\n            _targets,\\n            _noticePeriodSeconds,\\n            _votingPeriodSeconds,\\n            _atomicExecute,\\n            _functionBytecodes\\n        );\\n          \\n        emit AgendaCreated(\\n            _creator,\\n            agendaID,\\n            _targets,\\n            _noticePeriodSeconds,\\n            _votingPeriodSeconds,\\n            _atomicExecute\\n        );\\n\\n        return agendaID;\\n    }\\n\\n    function _call(address target, uint256 paramLength, bytes memory param) internal returns (bool) {\\n        bool result;\\n        assembly {\\n            let data := add(param, 32)\\n            result := call(sub(gas(), 40000), target, 0, data, paramLength, 0, 0)\\n        }\\n\\n        return result;\\n    }\\n\\n    function isCandidate(address _candidate) external view override returns (bool) {\\n        CandidateInfo storage info = _candidateInfos[_candidate];\\n\\n        if (info.candidateContract == address(0)) {\\n            return false;\\n        }\\n\\n        bool supportIsCandidateContract = ERC165Checker.supportsInterface(\\n            info.candidateContract,\\n            ICandidate(info.candidateContract).isCandidateContract.selector\\n        );\\n\\n        if (supportIsCandidateContract == false) {\\n            return false;\\n        }\\n\\n        return ICandidate(info.candidateContract).isCandidateContract();\\n    }\\n    \\n    function totalSupplyOnCandidate(\\n        address _candidate\\n    )\\n        external\\n        override\\n        view\\n        returns (uint256 totalsupply)\\n    {\\n        address candidateContract = candidateContract(_candidate);\\n        return totalSupplyOnCandidateContract(candidateContract);\\n    }\\n\\n    function balanceOfOnCandidate(\\n        address _candidate,\\n        address _account\\n    )\\n        external\\n        override\\n        view\\n        returns (uint256 amount)\\n    {\\n        address candidateContract = candidateContract(_candidate);\\n        return balanceOfOnCandidateContract(candidateContract, _account);\\n    }\\n    \\n    function totalSupplyOnCandidateContract(\\n        address _candidateContract\\n    )\\n        public\\n        override\\n        view\\n        returns (uint256 totalsupply)\\n    {\\n        require(_candidateContract != address(0), \\\"This account is not a candidate\\\");\\n\\n        return ICandidate(_candidateContract).totalStaked();\\n    }\\n\\n    function balanceOfOnCandidateContract(\\n        address _candidateContract,\\n        address _account\\n    )\\n        public\\n        override\\n        view\\n        returns (uint256 amount)\\n    {\\n        require(_candidateContract != address(0), \\\"This account is not a candidate\\\");\\n\\n        return ICandidate(_candidateContract).stakedOf(_account);\\n    }\\n\\n    function candidatesLength() external view override returns (uint256) {\\n        return candidates.length;\\n    }\\n\\n    function isExistCandidate(address _candidate) public view override returns (bool isExist) {\\n        return _candidateInfos[_candidate].candidateContract != address(0);\\n    }\\n\\n    function getClaimableActivityReward(address _candidate) public view override returns (uint256) {\\n        CandidateInfo storage info = _candidateInfos[_candidate];\\n        uint256 period = info.rewardPeriod;\\n\\n        if (info.memberJoinedTime > 0) {\\n            if (info.memberJoinedTime > info.claimedTimestamp) {\\n                period = period.add(block.timestamp.sub(info.memberJoinedTime));\\n            } else {\\n                period = period.add(block.timestamp.sub(info.claimedTimestamp));\\n            }\\n        }\\n\\n        return period.mul(activityRewardPerSecond);\\n    }\\n}\\n\"\r\n    },\r\n    \"Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"Context.sol\\\";\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor () internal {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(_owner == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n}\\n\"\r\n    },\r\n    \"AccessControl.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"EnumerableSet.sol\\\";\\nimport \\\"Address.sol\\\";\\nimport \\\"Context.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it.\\n */\\nabstract contract AccessControl is Context {\\n    using EnumerableSet for EnumerableSet.AddressSet;\\n    using Address for address;\\n\\n    struct RoleData {\\n        EnumerableSet.AddressSet members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping (bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view returns (bool) {\\n        return _roles[role].members.contains(account);\\n    }\\n\\n    /**\\n     * @dev Returns the number of accounts that have `role`. Can be used\\n     * together with {getRoleMember} to enumerate all bearers of a role.\\n     */\\n    function getRoleMemberCount(bytes32 role) public view returns (uint256) {\\n        return _roles[role].members.length();\\n    }\\n\\n    /**\\n     * @dev Returns one of the accounts that have `role`. `index` must be a\\n     * value between 0 and {getRoleMemberCount}, non-inclusive.\\n     *\\n     * Role bearers are not sorted in any particular way, and their ordering may\\n     * change at any point.\\n     *\\n     * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\\n     * you perform all queries on the same block. See the following\\n     * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\\n     * for more information.\\n     */\\n    function getRoleMember(bytes32 role, uint256 index) public view returns (address) {\\n        return _roles[role].members.at(index);\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual {\\n        require(hasRole(_roles[role].adminRole, _msgSender()), \\\"AccessControl: sender must be an admin to grant\\\");\\n\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual {\\n        require(hasRole(_roles[role].adminRole, _msgSender()), \\\"AccessControl: sender must be an admin to revoke\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        emit RoleAdminChanged(role, _roles[role].adminRole, adminRole);\\n        _roles[role].adminRole = adminRole;\\n    }\\n\\n    function _grantRole(bytes32 role, address account) private {\\n        if (_roles[role].members.add(account)) {\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    function _revokeRole(bytes32 role, address account) private {\\n        if (_roles[role].members.remove(account)) {\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"StorageStateCommittee.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.7.6;\\npragma abicoder v2;\\n\\nimport { IStorageStateCommittee } from \\\"IStorageStateCommittee.sol\\\";\\nimport { ICandidateFactory } from \\\"ICandidateFactory.sol\\\";\\nimport { ILayer2Registry } from \\\"ILayer2Registry.sol\\\";\\nimport { ISeigManager } from \\\"ISeigManager.sol\\\";\\nimport { IDAOAgendaManager } from \\\"IDAOAgendaManager.sol\\\";\\nimport { IDAOVault } from \\\"IDAOVault.sol\\\";\\nimport { ICandidate } from \\\"ICandidate.sol\\\";\\n\\ncontract StorageStateCommittee is IStorageStateCommittee {\\n    enum AgendaStatus { NONE, NOTICE, VOTING, EXEC, ENDED, PENDING, RISK }\\n    enum AgendaResult { UNDEFINED, ACCEPT, REJECT, DISMISS }\\n\\n    address public override ton;\\n    IDAOVault public override daoVault;\\n    IDAOAgendaManager public override agendaManager;\\n    ICandidateFactory public override candidateFactory;\\n    ILayer2Registry public override layer2Registry;\\n    ISeigManager public override seigManager;\\n\\n    address[] public override candidates;\\n    address[] public override members;\\n    uint256 public override maxMember;\\n\\n    // candidate EOA => candidate information\\n    mapping(address => CandidateInfo) internal _candidateInfos;\\n    uint256 public override quorum;\\n\\n    uint256 public override activityRewardPerSecond;\\n\\n    modifier validAgendaManager() {\\n        require(address(agendaManager) != address(0), \\\"StorageStateCommittee: AgendaManager is zero\\\");\\n        _;\\n    }\\n    \\n    modifier validCommitteeL2Factory() {\\n        require(address(candidateFactory) != address(0), \\\"StorageStateCommittee: invalid CommitteeL2Factory\\\");\\n        _;\\n    }\\n\\n    modifier validLayer2Registry() {\\n        require(address(layer2Registry) != address(0), \\\"StorageStateCommittee: invalid Layer2Registry\\\");\\n        _;\\n    }\\n\\n    modifier validSeigManager() {\\n        require(address(seigManager) != address(0), \\\"StorageStateCommittee: invalid SeigManagere\\\");\\n        _;\\n    }\\n\\n    modifier onlyMember() {\\n        require(isMember(msg.sender), \\\"StorageStateCommittee: not a member\\\");\\n        _;\\n    }\\n\\n    modifier onlyMemberContract() {\\n        address candidate = ICandidate(msg.sender).candidate();\\n        require(isMember(candidate), \\\"StorageStateCommittee: not a member\\\");\\n        _;\\n    }\\n    \\n    function isMember(address _candidate) public view override returns (bool) {\\n        return _candidateInfos[_candidate].memberJoinedTime > 0;\\n    }\\n\\n    function candidateContract(address _candidate) public view override returns (address) {\\n        return _candidateInfos[_candidate].candidateContract;\\n    }\\n\\n    function candidateInfos(address _candidate) external override returns (CandidateInfo memory) {\\n        return _candidateInfos[_candidate];\\n    }\\n\\n    /*function getCandidate() public view returns (address) {\\n        ILayer2(_candidateContract).\\n    }*/\\n}\\n\"\r\n    },\r\n    \"SafeMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return sub(a, b, \\\"SafeMath: subtraction overflow\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        uint256 c = a - b;\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        uint256 c = a / b;\\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return mod(a, b, \\\"SafeMath: modulo by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts with custom message when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b != 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\"\r\n    },\r\n    \"IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"ICandidate.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.7.6;\\n\\nimport { IDAOCommittee } from \\\"IDAOCommittee.sol\\\";\\nimport { ISeigManager } from \\\"ISeigManager.sol\\\";\\n\\ninterface ICandidate {\\n    function setSeigManager(address _seigMan) external;\\n    function setCommittee(address _committee) external;\\n    function updateSeigniorage() external returns (bool);\\n    function changeMember(uint256 _memberIndex) external returns (bool);\\n    function retireMember() external returns (bool);\\n    function castVote(uint256 _agendaID, uint256 _vote, string calldata _comment) external;\\n    function isCandidateContract() external view returns (bool);\\n    function totalStaked() external view returns (uint256 totalsupply);\\n    function stakedOf(address _account) external view returns (uint256 amount);\\n    function setMemo(string calldata _memo) external;\\n    function claimActivityReward() external;\\n\\n    // getter\\n    function candidate() external view returns (address);\\n    function isLayer2Candidate() external view returns (bool);\\n    function memo() external view returns (string memory);\\n    function committee() external view returns (IDAOCommittee);\\n    function seigManager() external view returns (ISeigManager);\\n}\\n\"\r\n    },\r\n    \"IDAOAgendaManager.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.7.6;\\npragma abicoder v2;\\n\\nimport { LibAgenda } from \\\"LibAgenda.sol\\\";\\nimport { IDAOCommittee } from \\\"IDAOCommittee.sol\\\";\\n\\ninterface IDAOAgendaManager  {\\n    struct Ratio {\\n        uint256 numerator;\\n        uint256 denominator;\\n    }\\n\\n    function setCommittee(address _committee) external;\\n    function setCreateAgendaFees(uint256 _createAgendaFees) external;\\n    function setMinimumNoticePeriodSeconds(uint256 _minimumNoticePeriodSeconds) external;\\n    function setMinimumVotingPeriodSeconds(uint256 _minimumVotingPeriodSeconds) external;\\n    function setExecutingPeriodSeconds(uint256 _executingPeriodSeconds) external;\\n    function newAgenda(\\n        address[] memory _targets,\\n        uint256 _noticePeriodSeconds,\\n        uint256 _votingPeriodSeconds,\\n        bool _atomicExecute,\\n        bytes[] calldata _functionBytecodes\\n    )\\n        external\\n        returns (uint256 agendaID);\\n    function castVote(uint256 _agendaID, address voter, uint256 _vote) external returns (bool);\\n    function setExecutedAgenda(uint256 _agendaID) external;\\n    function setResult(uint256 _agendaID, LibAgenda.AgendaResult _result) external;\\n    function setStatus(uint256 _agendaID, LibAgenda.AgendaStatus _status) external;\\n    function endAgendaVoting(uint256 _agendaID) external;\\n    function setExecutedCount(uint256 _agendaID, uint256 _count) external;\\n     \\n    // -- view functions\\n    function isVoter(uint256 _agendaID, address _user) external view returns (bool);\\n    function hasVoted(uint256 _agendaID, address _user) external view returns (bool);\\n    function getVoteStatus(uint256 _agendaID, address _user) external view returns (bool, uint256);\\n    function getAgendaNoticeEndTimeSeconds(uint256 _agendaID) external view returns (uint256);\\n    function getAgendaVotingStartTimeSeconds(uint256 _agendaID) external view returns (uint256);\\n    function getAgendaVotingEndTimeSeconds(uint256 _agendaID) external view returns (uint256) ;\\n\\n    function canExecuteAgenda(uint256 _agendaID) external view returns (bool);\\n    function getAgendaStatus(uint256 _agendaID) external view returns (uint256 status);\\n    function totalAgendas() external view returns (uint256);\\n    function getAgendaResult(uint256 _agendaID) external view returns (uint256 result, bool executed);\\n    function getExecutionInfo(uint256 _agendaID)\\n        external\\n        view\\n        returns(\\n            address[] memory target,\\n            bytes[] memory functionBytecode,\\n            bool atomicExecute,\\n            uint256 executeStartFrom\\n        );\\n    function isVotableStatus(uint256 _agendaID) external view returns (bool);\\n    function getVotingCount(uint256 _agendaID)\\n        external\\n        view\\n        returns (\\n            uint256 countingYes,\\n            uint256 countingNo,\\n            uint256 countingAbstain\\n        );\\n    function getAgendaTimestamps(uint256 _agendaID)\\n        external\\n        view\\n        returns (\\n            uint256 createdTimestamp,\\n            uint256 noticeEndTimestamp,\\n            uint256 votingStartedTimestamp,\\n            uint256 votingEndTimestamp,\\n            uint256 executedTimestamp\\n        );\\n    function numAgendas() external view returns (uint256);\\n    function getVoters(uint256 _agendaID) external view returns (address[] memory);\\n\\n    function getStatus(uint256 _createAgendaFees) external pure returns (LibAgenda.AgendaStatus);\\n\\n    // getter\\n    function committee() external view returns (IDAOCommittee);\\n    function createAgendaFees() external view returns (uint256);\\n    function minimumNoticePeriodSeconds() external view returns (uint256);\\n    function minimumVotingPeriodSeconds() external view returns (uint256);\\n    function executingPeriodSeconds() external view returns (uint256);\\n    function agendas(uint256 _index) external view returns (LibAgenda.Agenda memory);\\n    function voterInfos(uint256 _index1, address _index2) external view returns (LibAgenda.Voter memory);\\n}\\n\"\r\n    },\r\n    \"LibAgenda.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.7.6;\\npragma abicoder v2;\\n\\nlibrary LibAgenda {\\n    //using LibAgenda for Agenda;\\n\\n    enum AgendaStatus { NONE, NOTICE, VOTING, WAITING_EXEC, EXECUTED, ENDED }\\n    enum AgendaResult { PENDING, ACCEPT, REJECT, DISMISS }\\n\\n    //votor : based operator \\n    struct Voter {\\n        bool isVoter;\\n        bool hasVoted;\\n        uint256 vote;\\n    }\\n\\n    // counting abstainVotes yesVotes noVotes\\n    struct Agenda {\\n        uint256 createdTimestamp;\\n        uint256 noticeEndTimestamp;\\n        uint256 votingPeriodInSeconds;\\n        uint256 votingStartedTimestamp;\\n        uint256 votingEndTimestamp;\\n        uint256 executableLimitTimestamp;\\n        uint256 executedTimestamp;\\n        uint256 countingYes;\\n        uint256 countingNo;\\n        uint256 countingAbstain;\\n        AgendaStatus status;\\n        AgendaResult result;\\n        address[] voters;\\n        bool executed;\\n    }\\n\\n    struct AgendaExecutionInfo {\\n        address[] targets;\\n        bytes[] functionBytecodes;\\n        bool atomicExecute;\\n        uint256 executeStartFrom;\\n    }\\n\\n    /*function getAgenda(Agenda[] storage agendas, uint256 index) public view returns (Agenda storage agenda) {\\n        return agendas[index];\\n    }*/\\n}\\n\"\r\n    },\r\n    \"ERC165Checker.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.2 <0.8.0;\\n\\n/**\\n * @dev Library used to query support of an interface declared via {IERC165}.\\n *\\n * Note that these functions return the actual result of the query: they do not\\n * `revert` if an interface is not supported. It is up to the caller to decide\\n * what to do in these cases.\\n */\\nlibrary ERC165Checker {\\n    // As per the EIP-165 spec, no interface should ever match 0xffffffff\\n    bytes4 private constant _INTERFACE_ID_INVALID = 0xffffffff;\\n\\n    /*\\n     * bytes4(keccak256('supportsInterface(bytes4)')) == 0x01ffc9a7\\n     */\\n    bytes4 private constant _INTERFACE_ID_ERC165 = 0x01ffc9a7;\\n\\n    /**\\n     * @dev Returns true if `account` supports the {IERC165} interface,\\n     */\\n    function supportsERC165(address account) internal view returns (bool) {\\n        // Any contract that implements ERC165 must explicitly indicate support of\\n        // InterfaceId_ERC165 and explicitly indicate non-support of InterfaceId_Invalid\\n        return _supportsERC165Interface(account, _INTERFACE_ID_ERC165) &&\\n            !_supportsERC165Interface(account, _INTERFACE_ID_INVALID);\\n    }\\n\\n    /**\\n     * @dev Returns true if `account` supports the interface defined by\\n     * `interfaceId`. Support for {IERC165} itself is queried automatically.\\n     *\\n     * See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(address account, bytes4 interfaceId) internal view returns (bool) {\\n        // query support of both ERC165 as per the spec and support of _interfaceId\\n        return supportsERC165(account) &&\\n            _supportsERC165Interface(account, interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns true if `account` supports all the interfaces defined in\\n     * `interfaceIds`. Support for {IERC165} itself is queried automatically.\\n     *\\n     * Batch-querying can lead to gas savings by skipping repeated checks for\\n     * {IERC165} support.\\n     *\\n     * See {IERC165-supportsInterface}.\\n     */\\n    function supportsAllInterfaces(address account, bytes4[] memory interfaceIds) internal view returns (bool) {\\n        // query support of ERC165 itself\\n        if (!supportsERC165(account)) {\\n            return false;\\n        }\\n\\n        // query support of each interface in _interfaceIds\\n        for (uint256 i = 0; i < interfaceIds.length; i++) {\\n            if (!_supportsERC165Interface(account, interfaceIds[i])) {\\n                return false;\\n            }\\n        }\\n\\n        // all interfaces supported\\n        return true;\\n    }\\n\\n    /**\\n     * @notice Query if a contract implements an interface, does not check ERC165 support\\n     * @param account The address of the contract to query for support of an interface\\n     * @param interfaceId The interface identifier, as specified in ERC-165\\n     * @return true if the contract at account indicates support of the interface with\\n     * identifier interfaceId, false otherwise\\n     * @dev Assumes that account contains a contract that supports ERC165, otherwise\\n     * the behavior of this method is undefined. This precondition can be checked\\n     * with {supportsERC165}.\\n     * Interface identification is specified in ERC-165.\\n     */\\n    function _supportsERC165Interface(address account, bytes4 interfaceId) private view returns (bool) {\\n        // success determines whether the staticcall succeeded and result determines\\n        // whether the contract at account indicates support of _interfaceId\\n        (bool success, bool result) = _callERC165SupportsInterface(account, interfaceId);\\n\\n        return (success && result);\\n    }\\n\\n    /**\\n     * @notice Calls the function with selector 0x01ffc9a7 (ERC165) and suppresses throw\\n     * @param account The address of the contract to query for support of an interface\\n     * @param interfaceId The interface identifier, as specified in ERC-165\\n     * @return success true if the STATICCALL succeeded, false otherwise\\n     * @return result true if the STATICCALL succeeded and the contract at account\\n     * indicates support of the interface with identifier interfaceId, false otherwise\\n     */\\n    function _callERC165SupportsInterface(address account, bytes4 interfaceId)\\n        private\\n        view\\n        returns (bool, bool)\\n    {\\n        bytes memory encodedParams = abi.encodeWithSelector(_INTERFACE_ID_ERC165, interfaceId);\\n        (bool success, bytes memory result) = account.staticcall{ gas: 30000 }(encodedParams);\\n        if (result.length < 32) return (false, false);\\n        return (success, abi.decode(result, (bool)));\\n    }\\n}\\n\"\r\n    },\r\n    \"Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"DAOAgendaManager.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.7.6;\\npragma abicoder v2;\\n\\nimport { SafeMath } from \\\"SafeMath.sol\\\";\\nimport { IERC20 } from  \\\"IERC20.sol\\\";\\nimport { IDAOAgendaManager } from \\\"IDAOAgendaManager.sol\\\";\\nimport { IDAOCommittee } from \\\"IDAOCommittee.sol\\\";\\nimport { ICandidate } from \\\"ICandidate.sol\\\";\\nimport { LibAgenda } from \\\"LibAgenda.sol\\\";\\nimport \\\"Ownable.sol\\\";\\n\\ncontract DAOAgendaManager is Ownable, IDAOAgendaManager {\\n    using SafeMath for uint256;\\n    using LibAgenda for *;\\n\\n    enum VoteChoice { ABSTAIN, YES, NO, MAX }\\n\\n    IDAOCommittee public override committee;\\n    \\n    uint256 public override createAgendaFees; // 아젠다생성비용(TON)\\n    \\n    uint256 public override minimumNoticePeriodSeconds;\\n    uint256 public override minimumVotingPeriodSeconds;\\n    uint256 public override executingPeriodSeconds;\\n    \\n    LibAgenda.Agenda[] internal _agendas;\\n    mapping(uint256 => mapping(address => LibAgenda.Voter)) internal _voterInfos;\\n    mapping(uint256 => LibAgenda.AgendaExecutionInfo) internal _executionInfos;\\n    \\n    event AgendaStatusChanged(\\n        uint256 indexed agendaID,\\n        uint256 prevStatus,\\n        uint256 newStatus\\n    );\\n\\n    event AgendaResultChanged(\\n        uint256 indexed agendaID,\\n        uint256 result\\n    );\\n\\n    event CreatingAgendaFeeChanged(\\n        uint256 newFee\\n    );\\n\\n    event MinimumNoticePeriodChanged(\\n        uint256 newPeriod\\n    );\\n\\n    event MinimumVotingPeriodChanged(\\n        uint256 newPeriod\\n    );\\n\\n    event ExecutingPeriodChanged(\\n        uint256 newPeriod\\n    );\\n\\n    modifier validAgenda(uint256 _agendaID) {\\n        require(_agendaID < _agendas.length, \\\"DAOAgendaManager: invalid agenda id\\\");\\n        _;\\n    }\\n    \\n    constructor() {\\n        /*minimumNoticePeriodSeconds = 16 days;\\n        minimumVotingPeriodSeconds = 2 days;\\n        executingPeriodSeconds = 7 days;*/\\n        minimumNoticePeriodSeconds = 300;\\n        minimumVotingPeriodSeconds = 300;\\n        executingPeriodSeconds = 300;\\n        \\n        createAgendaFees = 100000000000000000000; // 100 TON\\n    }\\n\\n    function getStatus(uint256 _status) public pure override returns (LibAgenda.AgendaStatus emnustatus) {\\n        require(_status < 6, \\\"DAOAgendaManager: invalid status value\\\");\\n        if (_status == uint256(LibAgenda.AgendaStatus.NOTICE))\\n            return LibAgenda.AgendaStatus.NOTICE;\\n        else if (_status == uint256(LibAgenda.AgendaStatus.VOTING))\\n            return LibAgenda.AgendaStatus.VOTING;\\n        else if (_status == uint256(LibAgenda.AgendaStatus.EXECUTED))\\n            return LibAgenda.AgendaStatus.EXECUTED;\\n        else if (_status == uint256(LibAgenda.AgendaStatus.ENDED))\\n            return LibAgenda.AgendaStatus.ENDED;\\n        else\\n            return LibAgenda.AgendaStatus.NONE;\\n    }\\n\\n    /// @notice Set DAOCommitteeProxy contract address\\n    /// @param _committee New DAOCommitteeProxy contract address\\n    function setCommittee(address _committee) external override onlyOwner {\\n        require(_committee != address(0), \\\"DAOAgendaManager: address is zero\\\");\\n        committee = IDAOCommittee(_committee);\\n    }\\n\\n    /// @notice Set status of the agenda\\n    /// @param _agendaID agenda ID\\n    /// @param _status New status of the agenda\\n    /*function setStatus(uint256 _agendaID, uint256 _status) public override onlyOwner {\\n        require(_agendaID < _agendas.length, \\\"DAOAgendaManager: Not a valid Proposal Id\\\");\\n\\n        emit AgendaStatusChanged(_agendaID, uint256(_agendas[_agendaID].status), _status);\\n        _agendas[_agendaID].status = getStatus(_status);\\n    }*/\\n\\n    /// @notice Set the fee(TON) of creating an agenda\\n    /// @param _createAgendaFees New fee(TON)\\n    function setCreateAgendaFees(uint256 _createAgendaFees) external override onlyOwner {\\n        createAgendaFees = _createAgendaFees;\\n        emit CreatingAgendaFeeChanged(_createAgendaFees);\\n    }\\n\\n    /// @notice Set the minimum notice period in seconds\\n    /// @param _minimumNoticePeriodSeconds New minimum notice period in seconds\\n    function setMinimumNoticePeriodSeconds(uint256 _minimumNoticePeriodSeconds) external override onlyOwner {\\n        minimumNoticePeriodSeconds = _minimumNoticePeriodSeconds;\\n        emit MinimumNoticePeriodChanged(_minimumNoticePeriodSeconds);\\n    }\\n\\n    /// @notice Set the executing period in seconds\\n    /// @param _executingPeriodSeconds New executing period in seconds\\n    function setExecutingPeriodSeconds(uint256 _executingPeriodSeconds) external override onlyOwner {\\n        executingPeriodSeconds = _executingPeriodSeconds;\\n        emit ExecutingPeriodChanged(_executingPeriodSeconds);\\n    }\\n\\n    /// @notice Set the minimum voting period in seconds\\n    /// @param _minimumVotingPeriodSeconds New minimum voting period in seconds\\n    function setMinimumVotingPeriodSeconds(uint256 _minimumVotingPeriodSeconds) external override onlyOwner {\\n        minimumVotingPeriodSeconds = _minimumVotingPeriodSeconds;\\n        emit MinimumVotingPeriodChanged(_minimumVotingPeriodSeconds);\\n    }\\n      \\n    /// @notice Creates an agenda\\n    /// @param _targets Target addresses for executions of the agenda\\n    /// @param _noticePeriodSeconds Notice period in seconds\\n    /// @param _votingPeriodSeconds Voting period in seconds\\n    /// @param _functionBytecodes RLP-Encoded parameters for executions of the agenda\\n    /// @return agendaID Created agenda ID\\n    function newAgenda(\\n        address[] calldata _targets,\\n        uint256 _noticePeriodSeconds,\\n        uint256 _votingPeriodSeconds,\\n        bool _atomicExecute,\\n        bytes[] calldata _functionBytecodes\\n    )\\n        external\\n        override\\n        onlyOwner\\n        returns (uint256 agendaID)\\n    {\\n        require(\\n            _noticePeriodSeconds >= minimumNoticePeriodSeconds,\\n            \\\"DAOAgendaManager: minimumNoticePeriod is short\\\"\\n        );\\n\\n        agendaID = _agendas.length;\\n         \\n        address[] memory emptyArray;\\n        _agendas.push(LibAgenda.Agenda({\\n            status: LibAgenda.AgendaStatus.NOTICE,\\n            result: LibAgenda.AgendaResult.PENDING,\\n            executed: false,\\n            createdTimestamp: block.timestamp,\\n            noticeEndTimestamp: block.timestamp + _noticePeriodSeconds,\\n            votingPeriodInSeconds: _votingPeriodSeconds,\\n            votingStartedTimestamp: 0,\\n            votingEndTimestamp: 0,\\n            executableLimitTimestamp: 0,\\n            executedTimestamp: 0,\\n            countingYes: 0,\\n            countingNo: 0,\\n            countingAbstain: 0,\\n            voters: emptyArray\\n        }));\\n\\n        LibAgenda.AgendaExecutionInfo storage executionInfo = _executionInfos[agendaID];\\n        executionInfo.atomicExecute = _atomicExecute;\\n        executionInfo.executeStartFrom = 0;\\n        for (uint256 i = 0; i < _targets.length; i++) {\\n            executionInfo.targets.push(_targets[i]);\\n            executionInfo.functionBytecodes.push(_functionBytecodes[i]);\\n        }\\n    }\\n\\n    /// @notice Casts vote for an agenda\\n    /// @param _agendaID Agenda ID\\n    /// @param _voter Voter\\n    /// @param _vote Voting type\\n    /// @return Whether or not the execution succeeded\\n    function castVote(\\n        uint256 _agendaID,\\n        address _voter,\\n        uint256 _vote\\n    )\\n        external\\n        override\\n        onlyOwner\\n        validAgenda(_agendaID)\\n        returns (bool)\\n    {\\n        require(_vote < uint256(VoteChoice.MAX), \\\"DAOAgendaManager: invalid vote\\\");\\n\\n        require(\\n            isVotableStatus(_agendaID),\\n            \\\"DAOAgendaManager: invalid status\\\"\\n        );\\n\\n        LibAgenda.Agenda storage agenda = _agendas[_agendaID];\\n\\n        if (agenda.status == LibAgenda.AgendaStatus.NOTICE) {\\n            _startVoting(_agendaID);\\n        }\\n\\n        require(isVoter(_agendaID, _voter), \\\"DAOAgendaManager: not a voter\\\");\\n        require(!hasVoted(_agendaID, _voter), \\\"DAOAgendaManager: already voted\\\");\\n\\n        require(\\n            block.timestamp <= agenda.votingEndTimestamp,\\n            \\\"DAOAgendaManager: for this agenda, the voting time expired\\\"\\n        );\\n        \\n        LibAgenda.Voter storage voter = _voterInfos[_agendaID][_voter];\\n        voter.hasVoted = true;\\n        voter.vote = _vote;\\n             \\n        // counting 0:abstainVotes 1:yesVotes 2:noVotes\\n        if (_vote == uint256(VoteChoice.ABSTAIN))\\n            agenda.countingAbstain = agenda.countingAbstain.add(1);\\n        else if (_vote == uint256(VoteChoice.YES))\\n            agenda.countingYes = agenda.countingYes.add(1);\\n        else if (_vote == uint256(VoteChoice.NO))\\n            agenda.countingNo = agenda.countingNo.add(1);\\n        else\\n            revert(\\\"DAOAgendaManager: invalid voting\\\");\\n        \\n        return true;\\n    }\\n    \\n    /// @notice Set the agenda status as executed\\n    /// @param _agendaID Agenda ID\\n    function setExecutedAgenda(uint256 _agendaID)\\n        external\\n        override\\n        onlyOwner\\n        validAgenda(_agendaID)\\n    {\\n        LibAgenda.Agenda storage agenda = _agendas[_agendaID];\\n        agenda.executed = true;\\n        agenda.executedTimestamp = block.timestamp;\\n\\n        uint256 prevStatus = uint256(agenda.status);\\n        agenda.status = LibAgenda.AgendaStatus.EXECUTED;\\n        emit AgendaStatusChanged(_agendaID, prevStatus, uint256(LibAgenda.AgendaStatus.EXECUTED));\\n    }\\n\\n    /// @notice Set the agenda result\\n    /// @param _agendaID Agenda ID\\n    /// @param _result New result\\n    function setResult(uint256 _agendaID, LibAgenda.AgendaResult _result)\\n        public\\n        override\\n        onlyOwner\\n        validAgenda(_agendaID)\\n    {\\n        LibAgenda.Agenda storage agenda = _agendas[_agendaID];\\n        agenda.result = _result;\\n\\n        emit AgendaResultChanged(_agendaID, uint256(_result));\\n    }\\n     \\n    /// @notice Set the agenda status\\n    /// @param _agendaID Agenda ID\\n    /// @param _status New status\\n    function setStatus(uint256 _agendaID, LibAgenda.AgendaStatus _status)\\n        public\\n        override\\n        onlyOwner\\n        validAgenda(_agendaID)\\n    {\\n        LibAgenda.Agenda storage agenda = _agendas[_agendaID];\\n\\n        uint256 prevStatus = uint256(agenda.status);\\n        agenda.status = _status;\\n        emit AgendaStatusChanged(_agendaID, prevStatus, uint256(_status));\\n    }\\n\\n    /// @notice Set the agenda status as ended(denied or dismissed)\\n    /// @param _agendaID Agenda ID\\n    function endAgendaVoting(uint256 _agendaID)\\n        external\\n        override\\n        onlyOwner\\n        validAgenda(_agendaID)\\n    {\\n        LibAgenda.Agenda storage agenda = _agendas[_agendaID];\\n\\n        require(\\n            agenda.status == LibAgenda.AgendaStatus.VOTING,\\n            \\\"DAOAgendaManager: agenda status is not changable\\\"\\n        );\\n\\n        require(\\n            agenda.votingEndTimestamp <= block.timestamp,\\n            \\\"DAOAgendaManager: voting is not ended yet\\\"\\n        );\\n\\n        setStatus(_agendaID, LibAgenda.AgendaStatus.ENDED);\\n        setResult(_agendaID, LibAgenda.AgendaResult.DISMISS);\\n    }\\n     \\n    function _startVoting(uint256 _agendaID) internal validAgenda(_agendaID) {\\n        LibAgenda.Agenda storage agenda = _agendas[_agendaID];\\n\\n        agenda.votingStartedTimestamp = block.timestamp;\\n        agenda.votingEndTimestamp = block.timestamp.add(agenda.votingPeriodInSeconds);\\n        agenda.executableLimitTimestamp = agenda.votingEndTimestamp.add(executingPeriodSeconds);\\n        agenda.status = LibAgenda.AgendaStatus.VOTING;\\n\\n        uint256 memberCount = committee.maxMember();\\n        for (uint256 i = 0; i < memberCount; i++) {\\n            address voter = committee.members(i);\\n            agenda.voters.push(voter);\\n            _voterInfos[_agendaID][voter].isVoter = true;\\n        }\\n\\n        emit AgendaStatusChanged(_agendaID, uint256(LibAgenda.AgendaStatus.NOTICE), uint256(LibAgenda.AgendaStatus.VOTING));\\n    }\\n    \\n    function isVoter(uint256 _agendaID, address _candidate) public view override validAgenda(_agendaID) returns (bool) {\\n        require(_candidate != address(0), \\\"DAOAgendaManager: user address is zero\\\");\\n        return _voterInfos[_agendaID][_candidate].isVoter;\\n    }\\n    \\n    function hasVoted(uint256 _agendaID, address _user) public view override validAgenda(_agendaID) returns (bool) {\\n        return _voterInfos[_agendaID][_user].hasVoted;\\n    }\\n\\n    function getVoteStatus(uint256 _agendaID, address _user) external view override validAgenda(_agendaID) returns (bool, uint256) {\\n        LibAgenda.Voter storage voter = _voterInfos[_agendaID][_user];\\n\\n        return (\\n            voter.hasVoted,\\n            voter.vote\\n        );\\n    }\\n    \\n    function getAgendaNoticeEndTimeSeconds(uint256 _agendaID) external view override validAgenda(_agendaID) returns (uint256) {\\n        return _agendas[_agendaID].noticeEndTimestamp;\\n    }\\n    \\n    function getAgendaVotingStartTimeSeconds(uint256 _agendaID) external view override validAgenda(_agendaID) returns (uint256) {\\n        return _agendas[_agendaID].votingStartedTimestamp;\\n    }\\n\\n    function getAgendaVotingEndTimeSeconds(uint256 _agendaID) external view override validAgenda(_agendaID) returns (uint256) {\\n        return _agendas[_agendaID].votingEndTimestamp;\\n    }\\n\\n    function canExecuteAgenda(uint256 _agendaID) external view override validAgenda(_agendaID) returns (bool) {\\n        LibAgenda.Agenda storage agenda = _agendas[_agendaID];\\n\\n        return agenda.status == LibAgenda.AgendaStatus.WAITING_EXEC &&\\n            block.timestamp <= agenda.executableLimitTimestamp &&\\n            agenda.result == LibAgenda.AgendaResult.ACCEPT &&\\n            agenda.votingEndTimestamp <= block.timestamp &&\\n            agenda.executed == false;\\n    }\\n    \\n    function getAgendaStatus(uint256 _agendaID) external view override validAgenda(_agendaID) returns (uint256 status) {\\n        return uint256(_agendas[_agendaID].status);\\n    }\\n\\n    function totalAgendas() external view override returns (uint256) {\\n        return _agendas.length;\\n    }\\n\\n    function getAgendaResult(uint256 _agendaID) external view override validAgenda(_agendaID) returns (uint256 result, bool executed) {\\n        return (uint256(_agendas[_agendaID].result), _agendas[_agendaID].executed);\\n    }\\n   \\n    function getExecutionInfo(uint256 _agendaID)\\n        external\\n        view\\n        override\\n        validAgenda(_agendaID)\\n        returns(\\n            address[] memory target,\\n            bytes[] memory functionBytecode,\\n            bool atomicExecute,\\n            uint256 executeStartFrom\\n        )\\n    {\\n        LibAgenda.AgendaExecutionInfo storage agenda = _executionInfos[_agendaID];\\n        return (\\n            agenda.targets,\\n            agenda.functionBytecodes,\\n            agenda.atomicExecute,\\n            agenda.executeStartFrom\\n        );\\n    }\\n\\n    function setExecutedCount(uint256 _agendaID, uint256 _count) external override {\\n        LibAgenda.AgendaExecutionInfo storage agenda = _executionInfos[_agendaID];\\n        agenda.executeStartFrom = agenda.executeStartFrom.add(_count);\\n    }\\n\\n    function isVotableStatus(uint256 _agendaID) public view override validAgenda(_agendaID) returns (bool) {\\n        LibAgenda.Agenda storage agenda = _agendas[_agendaID];\\n\\n        return block.timestamp <= agenda.votingEndTimestamp ||\\n            (agenda.status == LibAgenda.AgendaStatus.NOTICE &&\\n                agenda.noticeEndTimestamp <= block.timestamp);\\n    }\\n\\n    function getVotingCount(uint256 _agendaID)\\n        external\\n        view\\n        override\\n        returns (\\n            uint256 countingYes,\\n            uint256 countingNo,\\n            uint256 countingAbstain\\n        )\\n    {\\n        LibAgenda.Agenda storage agenda = _agendas[_agendaID];\\n        return (\\n            agenda.countingYes,\\n            agenda.countingNo,\\n            agenda.countingAbstain\\n        );\\n    }\\n\\n    function getAgendaTimestamps(uint256 _agendaID)\\n        external\\n        view\\n        override\\n        validAgenda(_agendaID)\\n        returns (\\n            uint256 createdTimestamp,\\n            uint256 noticeEndTimestamp,\\n            uint256 votingStartedTimestamp,\\n            uint256 votingEndTimestamp,\\n            uint256 executedTimestamp\\n        )\\n    {\\n        LibAgenda.Agenda storage agenda = _agendas[_agendaID];\\n        return (\\n            agenda.createdTimestamp,\\n            agenda.noticeEndTimestamp,\\n            agenda.votingStartedTimestamp,\\n            agenda.votingEndTimestamp,\\n            agenda.executedTimestamp\\n        );\\n    }\\n\\n    function numAgendas() external view override returns (uint256) {\\n        return _agendas.length;\\n    }\\n\\n    function getVoters(uint256 _agendaID) external view override validAgenda(_agendaID) returns (address[] memory) {\\n        return _agendas[_agendaID].voters;\\n    }\\n\\n    function agendas(uint256 _index) external view override validAgenda(_index) returns (LibAgenda.Agenda memory) {\\n        return _agendas[_index];\\n    }\\n\\n    function voterInfos(uint256 _agendaID, address _voter) external view override validAgenda(_agendaID) returns (LibAgenda.Voter memory) {\\n        return _voterInfos[_agendaID][_voter];\\n    }\\n}\\n\"\r\n    },\r\n    \"ICandidateFactory.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.7.6;\\n\\ninterface ICandidateFactory {\\n    function deploy(\\n        address _candidate,\\n        bool _isLayer2Candidate,\\n        string memory _name,\\n        address _committee,\\n        address _seigManager\\n    )\\n        external\\n        returns (address);\\n}\\n\"\r\n    },\r\n    \"ILayer2Registry.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.7.6;\\n\\ninterface ILayer2Registry {\\n    function layer2s(address layer2) external view returns (bool);\\n\\n    function register(address layer2) external returns (bool);\\n    function numLayer2s() external view returns (uint256);\\n    function layer2ByIndex(uint256 index) external view returns (address);\\n\\n    function deployCoinage(address layer2, address seigManager) external returns (bool);\\n    function registerAndDeployCoinage(address layer2, address seigManager) external returns (bool);\\n    function unregister(address layer2) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"ISeigManager.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.7.6;\\n\\ninterface ISeigManager {\\n    function registry() external view returns (address);\\n    function depositManager() external view returns (address);\\n    function ton() external view returns (address);\\n    function wton() external view returns (address);\\n    function powerton() external view returns (address);\\n    function tot() external view returns (address);\\n    function coinages(address layer2) external view returns (address);\\n    function commissionRates(address layer2) external view returns (uint256);\\n\\n    function lastCommitBlock(address layer2) external view returns (uint256);\\n    function seigPerBlock() external view returns (uint256);\\n    function lastSeigBlock() external view returns (uint256);\\n    function pausedBlock() external view returns (uint256);\\n    function unpausedBlock() external view returns (uint256);\\n    function DEFAULT_FACTOR() external view returns (uint256);\\n\\n    function deployCoinage(address layer2) external returns (bool);\\n    function setCommissionRate(address layer2, uint256 commission, bool isCommissionRateNegative) external returns (bool);\\n\\n    function uncomittedStakeOf(address layer2, address account) external view returns (uint256);\\n    function stakeOf(address layer2, address account) external view returns (uint256);\\n    function additionalTotBurnAmount(address layer2, address account, uint256 amount) external view returns (uint256 totAmount);\\n\\n    function onTransfer(address sender, address recipient, uint256 amount) external returns (bool);\\n    function updateSeigniorage() external returns (bool);\\n    function onDeposit(address layer2, address account, uint256 amount) external returns (bool);\\n    function onWithdraw(address layer2, address account, uint256 amount) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"IDAOVault.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.7.6;\\n\\ninterface IDAOVault {\\n    function setTON(address _ton) external;\\n    function setWTON(address _wton) external;\\n    function approveTON(address _to, uint256 _amount) external;\\n    function approveWTON(address _to, uint256 _amount) external;\\n    function approveERC20(address _token, address _to, uint256 _amount) external;\\n    function claimTON(address _to, uint256 _amount) external;\\n    function claimWTON(address _to, uint256 _amount) external;\\n    function claimERC20(address _token, address _to, uint256 _amount) external;\\n}\\n\"\r\n    },\r\n    \"IDAOCommittee.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.7.6;\\npragma abicoder v2;\\n\\nimport { IStorageStateCommittee } from \\\"IStorageStateCommittee.sol\\\";\\n\\ninterface IDAOCommittee is IStorageStateCommittee {\\n    //--owner\\n    function setSeigManager(address _seigManager) external;\\n    function setCandidatesSeigManager(address[] calldata _candidateContracts, address _seigManager) external;\\n    function setCandidatesCommittee(address[] calldata _candidateContracts, address _committee) external;\\n    function setLayer2Registry(address _layer2Registry) external;\\n    function setAgendaManager(address _agendaManager) external;\\n    function setCandidateFactory(address _candidateFactory) external;\\n    function setTon(address _ton) external;\\n    function setActivityRewardPerSecond(uint256 _value) external;\\n    function setDaoVault(address _daoVault) external;\\n\\n    function increaseMaxMember(uint256 _newMaxMember, uint256 _quorum) external;\\n    function decreaseMaxMember(uint256 _reducingMemberIndex, uint256 _quorum) external;\\n    function createCandidate(string calldata _memo) external;\\n    function registerLayer2Candidate(address _layer2, string memory _memo) external;\\n    function registerLayer2CandidateByOwner(address _operator, address _layer2, string memory _memo) external;\\n    function changeMember(uint256 _memberIndex) external returns (bool);\\n    function retireMember() external returns (bool);\\n    function setMemoOnCandidate(address _candidate, string calldata _memo) external;\\n    function setMemoOnCandidateContract(address _candidate, string calldata _memo) external;\\n\\n    function onApprove(\\n        address owner,\\n        address spender,\\n        uint256 tonAmount,\\n        bytes calldata data\\n    )\\n        external\\n        returns (bool);\\n\\n    function setQuorum(uint256 _quorum) external;\\n    function setCreateAgendaFees(uint256 _fees) external;\\n    function setMinimumNoticePeriodSeconds(uint256 _minimumNoticePeriod) external;\\n    function setMinimumVotingPeriodSeconds(uint256 _minimumVotingPeriod) external;\\n    function setExecutingPeriodSeconds(uint256 _executingPeriodSeconds) external;\\n    function castVote(uint256 _AgendaID, uint256 _vote, string calldata _comment) external;\\n    function endAgendaVoting(uint256 _agendaID) external;\\n    function executeAgenda(uint256 _AgendaID) external;\\n    function setAgendaStatus(uint256 _agendaID, uint256 _status, uint256 _result) external;\\n\\n    function updateSeigniorage(address _candidate) external returns (bool);\\n    function updateSeigniorages(address[] calldata _candidates) external returns (bool);\\n    function claimActivityReward(address _receiver) external;\\n\\n    function isCandidate(address _candidate) external view returns (bool);\\n    function totalSupplyOnCandidate(address _candidate) external view returns (uint256);\\n    function balanceOfOnCandidate(address _candidate, address _account) external view returns (uint256);\\n    function totalSupplyOnCandidateContract(address _candidateContract) external view returns (uint256);\\n    function balanceOfOnCandidateContract(address _candidateContract, address _account) external view returns (uint256);\\n    function candidatesLength() external view returns (uint256);\\n    function isExistCandidate(address _candidate) external view returns (bool);\\n    function getClaimableActivityReward(address _candidate) external view returns (uint256);\\n}\\n\\n\"\r\n    },\r\n    \"EnumerableSet.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping (bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) { // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            // When the value to delete is the last one, the swap operation is unnecessary. However, since this occurs\\n            // so rarely, we still do the swap anyway to avoid the gas cost of adding an 'if' statement.\\n\\n            bytes32 lastvalue = set._values[lastIndex];\\n\\n            // Move the last value to the index where the value to delete is\\n            set._values[toDeleteIndex] = lastvalue;\\n            // Update the index for the moved value\\n            set._indexes[lastvalue] = toDeleteIndex + 1; // All indexes are 1-based\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        require(set._values.length > index, \\\"EnumerableSet: index out of bounds\\\");\\n        return set._values[index];\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(value)));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(value)));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(value)));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint256(_at(set._inner, index)));\\n    }\\n\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n}\\n\"\r\n    },\r\n    \"Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.2 <0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"ILayer2.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.7.6;\\n\\ninterface ILayer2 {\\n  function operator() external view returns (address);\\n  function isLayer2() external view returns (bool);\\n  function currentFork() external view returns (uint);\\n  function lastEpoch(uint forkNumber) external view returns (uint);\\n  function changeOperator(address _operator) external;\\n}\\n\"\r\n    },\r\n    \"IStorageStateCommittee.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.7.6;\\npragma abicoder v2;\\n\\nimport { ICandidateFactory } from \\\"ICandidateFactory.sol\\\";\\nimport { ILayer2Registry } from \\\"ILayer2Registry.sol\\\";\\nimport { ISeigManager } from \\\"ISeigManager.sol\\\";\\nimport { IDAOAgendaManager } from \\\"IDAOAgendaManager.sol\\\";\\nimport { IDAOVault } from \\\"IDAOVault.sol\\\";\\n\\ninterface IStorageStateCommittee {\\n    struct CandidateInfo {\\n        address candidateContract;\\n        uint256 indexMembers;\\n        uint128 memberJoinedTime;\\n        uint128 rewardPeriod;\\n        uint128 claimedTimestamp;\\n    }\\n\\n    function ton() external returns (address);\\n    function daoVault() external returns (IDAOVault);\\n    function agendaManager() external returns (IDAOAgendaManager);\\n    function candidateFactory() external returns (ICandidateFactory);\\n    function layer2Registry() external returns (ILayer2Registry);\\n    function seigManager() external returns (ISeigManager);\\n    function candidates(uint256 _index) external returns (address);\\n    function members(uint256 _index) external returns (address);\\n    function maxMember() external returns (uint256);\\n    function candidateInfos(address _candidate) external returns (CandidateInfo memory);\\n    function quorum() external returns (uint256);\\n    function activityRewardPerSecond() external returns (uint256);\\n\\n    function isMember(address _candidate) external returns (bool);\\n    function candidateContract(address _candidate) external returns (address);\\n}\\n\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"remappings\": [\r\n      \":g=/dir\"\r\n    ],\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"evmVersion\": \"istanbul\",\r\n    \"metadata\": {\r\n      \"useLiteralContent\": true\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}","ABI":"[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newReward\",\"type\":\"uint256\"}],\"name\":\"ActivityRewardChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"targets\",\"type\":\"address[]\"},{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"noticePeriodSeconds\",\"type\":\"uint128\"},{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"votingPeriodSeconds\",\"type\":\"uint128\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"atomicExecute\",\"type\":\"bool\"}],\"name\":\"AgendaCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"target\",\"type\":\"address[]\"}],\"name\":\"AgendaExecuted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"voting\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"comment\",\"type\":\"string\"}],\"name\":\"AgendaVoteCasted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"candidate\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"candidateContract\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"memo\",\"type\":\"string\"}],\"name\":\"CandidateContractCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"slotIndex\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"prevMember\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newMember\",\"type\":\"address\"}],\"name\":\"ChangedMember\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"candidate\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"newMemo\",\"type\":\"string\"}],\"name\":\"ChangedMemo\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"prevSlotMax\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"slotMax\",\"type\":\"uint256\"}],\"name\":\"ChangedSlotMaximum\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"candidate\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"ClaimedActivityReward\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"candidate\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"candidateContract\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"memo\",\"type\":\"string\"}],\"name\":\"Layer2Registered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newQuorum\",\"type\":\"uint256\"}],\"name\":\"QuorumChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"activityRewardPerSecond\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"agendaManager\",\"outputs\":[{\"internalType\":\"contract IDAOAgendaManager\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_candidate\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"balanceOfOnCandidate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_candidateContract\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"balanceOfOnCandidateContract\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_candidate\",\"type\":\"address\"}],\"name\":\"candidateContract\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"candidateFactory\",\"outputs\":[{\"internalType\":\"contract ICandidateFactory\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_candidate\",\"type\":\"address\"}],\"name\":\"candidateInfos\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"candidateContract\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"indexMembers\",\"type\":\"uint256\"},{\"internalType\":\"uint128\",\"name\":\"memberJoinedTime\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"rewardPeriod\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"claimedTimestamp\",\"type\":\"uint128\"}],\"internalType\":\"struct IStorageStateCommittee.CandidateInfo\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"candidates\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"candidatesLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_agendaID\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_vote\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_comment\",\"type\":\"string\"}],\"name\":\"castVote\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_memberIndex\",\"type\":\"uint256\"}],\"name\":\"changeMember\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_receiver\",\"type\":\"address\"}],\"name\":\"claimActivityReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_memo\",\"type\":\"string\"}],\"name\":\"createCandidate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"daoVault\",\"outputs\":[{\"internalType\":\"contract IDAOVault\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_reducingMemberIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_quorum\",\"type\":\"uint256\"}],\"name\":\"decreaseMaxMember\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_agendaID\",\"type\":\"uint256\"}],\"name\":\"endAgendaVoting\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_agendaID\",\"type\":\"uint256\"}],\"name\":\"executeAgenda\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_candidate\",\"type\":\"address\"}],\"name\":\"getClaimableActivityReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getRoleMember\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleMemberCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newMaxMember\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_quorum\",\"type\":\"uint256\"}],\"name\":\"increaseMaxMember\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_candidate\",\"type\":\"address\"}],\"name\":\"isCandidate\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_candidate\",\"type\":\"address\"}],\"name\":\"isExistCandidate\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"isExist\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_candidate\",\"type\":\"address\"}],\"name\":\"isMember\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"layer2Registry\",\"outputs\":[{\"internalType\":\"contract ILayer2Registry\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxMember\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"members\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tonAmount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"onApprove\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"quorum\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_layer2\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"_memo\",\"type\":\"string\"}],\"name\":\"registerLayer2Candidate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_operator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_layer2\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"_memo\",\"type\":\"string\"}],\"name\":\"registerLayer2CandidateByOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"retireMember\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"seigManager\",\"outputs\":[{\"internalType\":\"contract ISeigManager\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"setActivityRewardPerSecond\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_agendaManager\",\"type\":\"address\"}],\"name\":\"setAgendaManager\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_agendaID\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_status\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_result\",\"type\":\"uint256\"}],\"name\":\"setAgendaStatus\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_candidateFactory\",\"type\":\"address\"}],\"name\":\"setCandidateFactory\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_candidateContracts\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"_committee\",\"type\":\"address\"}],\"name\":\"setCandidatesCommittee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_candidateContracts\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"_seigManager\",\"type\":\"address\"}],\"name\":\"setCandidatesSeigManager\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_fees\",\"type\":\"uint256\"}],\"name\":\"setCreateAgendaFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_daoVault\",\"type\":\"address\"}],\"name\":\"setDaoVault\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_executingPeriodSeconds\",\"type\":\"uint256\"}],\"name\":\"setExecutingPeriodSeconds\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_layer2Registry\",\"type\":\"address\"}],\"name\":\"setLayer2Registry\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_candidate\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"_memo\",\"type\":\"string\"}],\"name\":\"setMemoOnCandidate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_candidateContract\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"_memo\",\"type\":\"string\"}],\"name\":\"setMemoOnCandidateContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_minimumNoticePeriod\",\"type\":\"uint256\"}],\"name\":\"setMinimumNoticePeriodSeconds\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_minimumVotingPeriod\",\"type\":\"uint256\"}],\"name\":\"setMinimumVotingPeriodSeconds\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_quorum\",\"type\":\"uint256\"}],\"name\":\"setQuorum\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_seigManager\",\"type\":\"address\"}],\"name\":\"setSeigManager\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_ton\",\"type\":\"address\"}],\"name\":\"setTon\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ton\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_candidate\",\"type\":\"address\"}],\"name\":\"totalSupplyOnCandidate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"totalsupply\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_candidateContract\",\"type\":\"address\"}],\"name\":\"totalSupplyOnCandidateContract\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"totalsupply\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_candidate\",\"type\":\"address\"}],\"name\":\"updateSeigniorage\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_candidates\",\"type\":\"address[]\"}],\"name\":\"updateSeigniorages\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"DAOCommittee","CompilerVersion":"v0.7.6+commit.7338295f","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"istanbul","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://a5c9dcbc97e37331220d636e8c4793a8f992d09545b45bb7e8345250b4e260ad"}]}