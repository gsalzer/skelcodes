{"status":"1","message":"OK","result":[{"SourceCode":"/*\r\n .----------------.  .----------------.  .----------------.  .----------------.  .----------------.  .----------------.  .----------------. \r\n| .--------------. || .--------------. || .--------------. || .--------------. || .--------------. || .--------------. || .--------------. |\r\n| |   ______     | || |     _____    | || |    _______   | || |  ____  ____  | || | _____  _____ | || |  _________   | || |     _____    | |\r\n| |  |_   _ \\    | || |    |_   _|   | || |   /  ___  |  | || | |_   ||   _| | || ||_   _||_   _|| || | |_   ___  |  | || |    |_   _|   | |\r\n| |    | |_) |   | || |      | |     | || |  |  (__ \\_|  | || |   | |__| |   | || |  | |    | |  | || |   | |_  \\_|  | || |      | |     | |\r\n| |    |  __'.   | || |      | |     | || |   '.___`-.   | || |   |  __  |   | || |  | '    ' |  | || |   |  _|      | || |      | |     | |\r\n| |   _| |__) |  | || |     _| |_    | || |  |`\\____) |  | || |  _| |  | |_  | || |   \\ `--' /   | || |  _| |_       | || |     _| |_    | |\r\n| |  |_______/   | || |    |_____|   | || |  |_______.'  | || | |____||____| | || |    `.__.'    | || | |_____|      | || |    |_____|   | |\r\n| |              | || |              | || |              | || |              | || |              | || |              | || |              | |\r\n| '--------------' || '--------------' || '--------------' || '--------------' || '--------------' || '--------------' || '--------------' |\r\n '----------------'  '----------------'  '----------------'  '----------------'  '----------------'  '----------------'  '----------------' \r\n*/\r\n/* SPDX-License-Identifier: Unlicensed */\r\npragma solidity ^0.8.6;\r\n\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n}\r\n\r\ninterface IERC20 {\r\n    function totalSupply() external view returns (uint256);\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Team(address indexed from, address indexed to, uint256 value);\r\n    event Charity(address indexed from, address indexed to, uint256 value);\r\n    event Burn(address indexed from, address indexed to, uint256 value);\r\n    event DistributedFee(address indexed from, string msg, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\nlibrary SafeMath {\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n        return c;\r\n    }\r\n\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        return c;\r\n    }\r\n}\r\n\r\ncontract Ownable is Context {\r\n    address private _owner;\r\n    address private _previousOwner;\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    constructor() {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n}\r\n\r\ninterface IUniswapV2Factory {\r\n    function createPair(address tokenA, address tokenB) external returns (address pair);\r\n}\r\n\r\ninterface IUniswapV2Router02 {\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n        uint256 amountIn,\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external;\r\n    function factory() external pure returns (address);\r\n    function WETH() external pure returns (address);\r\n    function addLiquidityETH(\r\n        address token,\r\n        uint256 amountTokenDesired,\r\n        uint256 amountTokenMin,\r\n        uint256 amountETHMin,\r\n        address to,\r\n        uint256 deadline\r\n    ) external payable returns (uint256 amountToken, uint256 amountETH, uint256 liquidity);\r\n}\r\n\r\ncontract BishuFinance is Context, IERC20, Ownable {\r\n    using SafeMath for uint256;\r\n    string private constant _name = unicode\"Bishu Finance\";\r\n    string private constant _symbol = \"BishuFi\";\r\n    uint8 private constant _decimals = 9;\r\n    mapping(address => uint256) private _rOwned;\r\n    mapping(address => uint256) private _tOwned;\r\n    mapping(address => mapping(address => uint256)) private _allowances;\r\n    mapping(address => bool) public _isExcludedFromFee;\r\n    uint256 private constant MAX = ~uint256(0);\r\n    uint256 private constant _tTotal = 1000000000000 * 10**9;\r\n    uint256 private _rTotal = (MAX - (MAX % _tTotal));\r\n    uint256 private _tFeeTotal;\r\n    uint256 private _taxFee = 2;\r\n    uint256 private _teamFee = 2;\r\n    // 0.5% fee will be calculated later, number 1 is set because variable cannot store floating point\r\n    uint256 private _charityFee = 1;\r\n    // 0.5% fee will be calculated later, number 1 is set because variable cannot store floating point\r\n    uint256 private _burnFee = 1;\r\n    mapping(address => bool) private bots;\r\n    mapping(address => uint256) public buycooldown;\r\n    mapping(address => uint256) public sellcooldown;\r\n    mapping(address => uint256) public firstsell;\r\n    mapping(address => uint256) public sellnumber;\r\n    // made public for transparency\r\n    address payable public _teamAddress;\r\n    address payable public _charityAddress;\r\n    address public _routerAddress;\r\n    address payable public _burnAddress = payable(0x000000000000000000000000000000000000dEaD);\r\n    //\r\n    IUniswapV2Router02 private uniswapV2Router;\r\n    address private uniswapV2Pair;\r\n    bool public tradingOpen = false;\r\n    bool public liquidityAdded = false;\r\n    bool private inSwap = false;\r\n    bool public swapEnabled = false;\r\n    bool public cooldownEnabled = false;\r\n    uint256 public _maxTxAmount = _tTotal;\r\n    event MaxTxAmountUpdated(uint256 _maxTxAmount);\r\n    modifier lockTheSwap {\r\n        inSwap = true;\r\n        _;\r\n        inSwap = false;\r\n    }\r\n    constructor(address payable addr1, address payable addr2, address addr3) {\r\n        _teamAddress = addr1;\r\n        _charityAddress = addr2;\r\n        _routerAddress = addr3;\r\n        _rOwned[_msgSender()] = _rTotal;\r\n        _isExcludedFromFee[owner()] = true;\r\n        _isExcludedFromFee[address(this)] = true;\r\n        _isExcludedFromFee[_teamAddress] = true;\r\n        _isExcludedFromFee[_charityAddress] = true;\r\n        _isExcludedFromFee[_burnAddress] = true;\r\n        emit Transfer(address(0), _msgSender(), _tTotal);\r\n    }\r\n\r\n    function name() public pure returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    function symbol() public pure returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    function decimals() public pure returns (uint8) {\r\n        return _decimals;\r\n    }\r\n\r\n    function totalSupply() public pure override returns (uint256) {\r\n        return _tTotal;\r\n    }\r\n\r\n    function balanceOf(address account) public view override returns (uint256) {\r\n        return tokenFromReflection(_rOwned[account]);\r\n    }\r\n\r\n    function transfer(address recipient, uint256 amount) public override returns (bool) {\r\n        _transfer(_msgSender(), recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    function allowance(address owner, address spender) public view override returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    function approve(address spender, uint256 amount) public override returns (bool) {\r\n        _approve(_msgSender(), spender, amount);\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(address sender, address recipient, uint256 amount) public override returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n        _approve(sender,_msgSender(),_allowances[sender][_msgSender()].sub(amount,\"ERC20: transfer amount exceeds allowance\"));\r\n        return true;\r\n    }\r\n\r\n    function setCooldownEnabled(bool onoff) external onlyOwner() {\r\n        cooldownEnabled = onoff;\r\n    }    \r\n\r\n    function setIsExcludedFromFee(address _address,bool _isExcluded) external onlyOwner() {\r\n        _isExcludedFromFee[_address] = _isExcluded;\r\n    }    \r\n\r\n    function setTeamAddress(address payable _address) external onlyOwner() {\r\n        _teamAddress = _address;\r\n    }\r\n\r\n    function setCharityAddress(address payable _address) external onlyOwner() {\r\n        _charityAddress = _address;\r\n    }\r\n\r\n    function setRouterAddress(address _address) external onlyOwner() {\r\n        _routerAddress = _address;\r\n    }\r\n\r\n    function tokenFromReflection(uint256 rAmount) private view returns (uint256) {\r\n        require(rAmount <= _rTotal,\"Amount must be less than total reflections\");\r\n        uint256 currentRate = _getRate();\r\n        return rAmount.div(currentRate);\r\n    }\r\n\r\n    function removeAllFee() private {\r\n        if (_taxFee == 0 && _teamFee == 0) return;\r\n        _taxFee = 0;\r\n        _teamFee = 0;\r\n        _charityFee = 0;\r\n        _burnFee = 0;\r\n    }\r\n\r\n    function restoreAllFee() private {\r\n        _taxFee = 2;\r\n        _teamFee = 2;\r\n        // 0.5% fee will be calculated later, number 1 is set because variable cannot store floating point\r\n        _charityFee = 1;\r\n        // 0.5% fee will be calculated later, number 1 is set because variable cannot store floating point\r\n        _burnFee = 1;\r\n    }\r\n\r\n    function setRemoveAllFee() external onlyOwner {\r\n        if (_taxFee == 0 && _teamFee == 0) return;\r\n        _taxFee = 0;\r\n        _teamFee = 0;\r\n        _charityFee = 0;\r\n        _burnFee = 0;\r\n    }\r\n\r\n    function setRestoreAllFee() external onlyOwner {\r\n        _taxFee = 2;\r\n        _teamFee = 2;\r\n        // 0.5% fee will be calculated later, number 1 is set because variable cannot store floating point\r\n        _charityFee = 1;\r\n        // 0.5% fee will be calculated later, number 1 is set because variable cannot store floating point\r\n        _burnFee = 1;\r\n    }\r\n    \r\n    function setFee(uint256 multiplier) private {\r\n        if (multiplier == 0) {\r\n            uint256 tfeeWhole = 3;\r\n            _taxFee = tfeeWhole;\r\n        }\r\n        else if (multiplier == 1) {\r\n            uint256 tfeeWhole = 6;\r\n            _taxFee = tfeeWhole;\r\n\r\n        }\r\n        else if (multiplier == 2) {\r\n            uint256 tfeeWhole = 17;\r\n            _taxFee = tfeeWhole;\r\n\r\n        }\r\n        else if (multiplier == 3) {\r\n            uint256 tfeeWhole = 24;\r\n            _taxFee = tfeeWhole;\r\n\r\n        }\r\n    }\r\n\r\n    function _approve(address owner, address spender, uint256 amount) private {\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    function _transfer(address from, address to, uint256 amount) private {\r\n        require(from != address(0), \"ERC20: transfer from the zero address\");\r\n        require(to != address(0), \"ERC20: transfer to the zero address\");\r\n        require(amount > 0, \"Transfer amount must be greater than zero\");\r\n        bool takeFee = false;\r\n\r\n        if (from != owner() && to != owner()) {\r\n            require(!bots[from] && !bots[to], \"You are a bot!\");\r\n            \r\n            // cooldown buy handler\r\n            if (from == uniswapV2Pair && to != address(uniswapV2Router) && !_isExcludedFromFee[to] && cooldownEnabled) {\r\n                require(tradingOpen, \"Trading is not open!\");\r\n                require(amount <= _maxTxAmount, \"Amount larger than max tx amount!\");\r\n                require(buycooldown[to] < block.timestamp, \"Wait for buy cooldown!\");\r\n                buycooldown[to] = block.timestamp + (30 seconds);\r\n                takeFee = true;\r\n            }\r\n\r\n            // sell handler\r\n            if (!inSwap && to == uniswapV2Pair && from != address(uniswapV2Router) && swapEnabled) {\r\n                require(amount <= balanceOf(uniswapV2Pair).mul(3).div(100) && amount <= _maxTxAmount, \"Slippage is over 2.9% or over MaxTxAmount!\");\r\n                require(sellcooldown[from] < block.timestamp, \"Wait for sell cooldown!\");\r\n                if(firstsell[from] + (1 days) < block.timestamp){\r\n                    sellnumber[from] = 0;\r\n                }\r\n                if (sellnumber[from] == 0) {\r\n                    firstsell[from] = block.timestamp;\r\n                    sellcooldown[from] = block.timestamp + (1 hours);\r\n                }\r\n                else if (sellnumber[from] == 1) {\r\n                    sellcooldown[from] = block.timestamp + (2 hours);\r\n                }\r\n                else if (sellnumber[from] == 2) {\r\n                    sellcooldown[from] = block.timestamp + (6 hours);\r\n                }\r\n                else if (sellnumber[from] == 3) {\r\n                    sellcooldown[from] = firstsell[from] + (1 days);\r\n                }\r\n                setFee(sellnumber[from]);\r\n                sellnumber[from]++;\r\n                takeFee = true;\r\n            }\r\n\r\n            // block transfer if sell cooldown\r\n            if (to != uniswapV2Pair) {\r\n               require(sellcooldown[from] < block.timestamp, \"Wait for sell cooldown!\"); \r\n            }\r\n        }\r\n        \r\n        if (_isExcludedFromFee[from] || _isExcludedFromFee[to]) {\r\n            takeFee = false;\r\n        }\r\n\r\n        _tokenTransfer(from, to, amount, takeFee);\r\n        restoreAllFee();\r\n    }\r\n\r\n    function swapTokensForEth(uint256 tokenAmount) private lockTheSwap {\r\n        address[] memory path = new address[](2);\r\n        path[0] = address(this);\r\n        path[1] = uniswapV2Router.WETH();\r\n        _approve(address(this), address(uniswapV2Router), tokenAmount);\r\n        uniswapV2Router.swapExactTokensForETHSupportingFeeOnTransferTokens(tokenAmount, 0, path, address(this), block.timestamp);\r\n    }\r\n\r\n    function sendETHToFee(uint256 amount) private {\r\n        _teamAddress.transfer(amount.div(2));\r\n        _charityAddress.transfer(amount.div(2));\r\n    }\r\n    \r\n    function openTrading() public onlyOwner {\r\n        require(liquidityAdded);\r\n        tradingOpen = true;\r\n    }\r\n\r\n    function addLiquidity() external onlyOwner() {\r\n        IUniswapV2Router02 _uniswapV2Router = IUniswapV2Router02(_routerAddress);\r\n        uniswapV2Router = _uniswapV2Router;\r\n        _approve(address(this), address(uniswapV2Router), _tTotal);\r\n        uniswapV2Pair = IUniswapV2Factory(_uniswapV2Router.factory()).createPair(address(this), _uniswapV2Router.WETH());\r\n        uniswapV2Router.addLiquidityETH{value: address(this).balance}(address(this),balanceOf(address(this)),0,0,owner(),block.timestamp);\r\n        swapEnabled = true;\r\n        cooldownEnabled = true;\r\n        liquidityAdded = true;\r\n        _maxTxAmount = 3000000000 * 10**9;\r\n        IERC20(uniswapV2Pair).approve(address(uniswapV2Router),type(uint256).max);\r\n    }\r\n\r\n    function manualswap() external onlyOwner {\r\n        uint256 contractBalance = balanceOf(address(this));\r\n        swapTokensForEth(contractBalance);\r\n    }\r\n\r\n    function manualsend() external onlyOwner {\r\n        uint256 contractETHBalance = address(this).balance;\r\n        sendETHToFee(contractETHBalance);\r\n    }\r\n\r\n    function _tokenTransfer(address sender, address recipient, uint256 amount, bool takeFee) private {\r\n        if (!takeFee) removeAllFee();\r\n        _transferStandard(sender, recipient, amount);\r\n        if (!takeFee) restoreAllFee();\r\n    }\r\n\r\n    function _transferStandard(address sender, address recipient, uint256 tAmount) private {\r\n        // moved fuction above to reduce stack\r\n        // _getValues //\r\n            // _getTValues\r\n            uint256 tFee = tAmount.mul(_taxFee).div(100);\r\n            uint256 tTeam = tAmount.mul(_teamFee).div(100);\r\n            // 0.5% fee by dividing by 200\r\n            uint256 tCharity = tAmount.mul(_charityFee).div(200);\r\n            uint256 tBurn = tAmount.mul(_burnFee).div(200);\r\n            //\r\n            uint256 tTransferAmount = tAmount.sub(tFee).sub(tTeam).sub(tCharity).sub(tBurn);\r\n            // _getRValues\r\n            uint256 currentRate = _getRate();\r\n            uint256 rAmount = tAmount.mul(currentRate);\r\n            uint256 rFee = tFee.mul(currentRate);\r\n            uint256 rTeam = tTeam.mul(currentRate);\r\n            uint256 rCharity = tCharity.mul(currentRate);\r\n            uint256 rBurn = tBurn.mul(currentRate);\r\n            uint256 rTransferAmount = rAmount.sub(rFee).sub(rTeam).sub(rCharity).sub(rBurn);\r\n        //\r\n        _calculateReflectTransfer(sender,recipient,rAmount,rTransferAmount);\r\n        _takeTeam(tTeam);\r\n        _takeCharity(tCharity);\r\n        _takeBurn(tBurn);\r\n        _reflectFee(rFee, tFee);\r\n        emit Transfer(sender, recipient, tTransferAmount);\r\n        emit Team(sender, _teamAddress, tTeam);\r\n        emit Charity(sender, _charityAddress, tCharity);\r\n        emit DistributedFee(sender, \"Fee split between all holders!\", tFee);\r\n        emit Burn(sender, _burnAddress, tBurn);\r\n    }\r\n\r\n    function _takeTeam(uint256 tTeam) private {\r\n        uint256 currentRate = _getRate();\r\n        uint256 rTeam = tTeam.mul(currentRate);\r\n        _rOwned[_teamAddress] = _rOwned[_teamAddress].add(rTeam);\r\n    }\r\n    // added charity\r\n    function _takeCharity(uint256 tCharity) private {\r\n        uint256 currentRate = _getRate();\r\n        uint256 rCharity = tCharity.mul(currentRate);\r\n        _rOwned[_charityAddress] = _rOwned[_charityAddress].add(rCharity);\r\n    }\r\n    // added burn\r\n    function _takeBurn(uint256 tBurn) private {\r\n        uint256 currentRate = _getRate();\r\n        uint256 rBurn = tBurn.mul(currentRate);\r\n        _rOwned[_burnAddress] = _rOwned[_burnAddress].add(rBurn);\r\n    }\r\n\r\n    function _reflectFee(uint256 rFee, uint256 tFee) private {\r\n        _rTotal = _rTotal.sub(rFee);\r\n        _tFeeTotal = _tFeeTotal.add(tFee);\r\n    }\r\n\r\n    // added to reduce stack\r\n    function _calculateReflectTransfer(address sender, address recipient, uint256 rAmount, uint256 rTransferAmount) private {\r\n        \r\n       _rOwned[sender] = _rOwned[sender].sub(rAmount);\r\n       _rOwned[recipient] = _rOwned[recipient].add(rTransferAmount); \r\n    }\r\n\r\n    // allow contract to receive deposits\r\n    receive() external payable {}\r\n\r\n    function _getRate() private view returns (uint256) {\r\n        (uint256 rSupply, uint256 tSupply) = _getCurrentSupply();\r\n        return rSupply.div(tSupply);\r\n    }\r\n\r\n    function _getCurrentSupply() private view returns (uint256, uint256) {\r\n        uint256 rSupply = _rTotal;\r\n        uint256 tSupply = _tTotal;\r\n        if (rSupply < _rTotal.div(_tTotal)) return (_rTotal, _tTotal);\r\n        return (rSupply, tSupply);\r\n    }\r\n\r\n    function setMaxTxPercent(uint256 maxTxPercent) external onlyOwner() {\r\n        require(maxTxPercent > 0, \"Amount must be greater than 0\");\r\n        _maxTxAmount = _tTotal.mul(maxTxPercent).div(10**2);\r\n        emit MaxTxAmountUpdated(_maxTxAmount);\r\n    }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"addr1\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"addr2\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"addr3\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Burn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Charity\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"msg\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"DistributedFee\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_maxTxAmount\",\"type\":\"uint256\"}],\"name\":\"MaxTxAmountUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Team\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"_burnAddress\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_charityAddress\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_isExcludedFromFee\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_maxTxAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_routerAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_teamAddress\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"addLiquidity\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"buycooldown\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cooldownEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"firstsell\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liquidityAdded\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"manualsend\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"manualswap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"openTrading\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"sellcooldown\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"sellnumber\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"setCharityAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"onoff\",\"type\":\"bool\"}],\"name\":\"setCooldownEnabled\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_isExcluded\",\"type\":\"bool\"}],\"name\":\"setIsExcludedFromFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"maxTxPercent\",\"type\":\"uint256\"}],\"name\":\"setMaxTxPercent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"setRemoveAllFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"setRestoreAllFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"setRouterAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"setTeamAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tradingOpen\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]","ContractName":"BishuFinance","CompilerVersion":"v0.8.6+commit.11564f7e","OptimizationUsed":"1","Runs":"10000","ConstructorArguments":"00000000000000000000000065b12e1d87a4242a6dd035889407e82dd54e45f10000000000000000000000000e8eaa9c410bc6c1613a13989a03304cb18884120000000000000000000000007a250d5630b4cf539739df2c5dacb4c659f2488d","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"ipfs://5c4758dc17eb7b35b1863b3cebc69eaf9ac102896d22f252843a373c6a0cff56"}]}