{"status":"1","message":"OK","result":[{"SourceCode":"// File: contracts/interface/ICoFiXV2Factory.sol\r\n\r\n// SPDX-License-Identifier: GPL-3.0-or-later\r\n\r\npragma solidity 0.6.12;\r\n\r\ninterface ICoFiXV2Factory {\r\n    // All pairs: {ETH <-> ERC20 Token}\r\n    event PairCreated(address indexed token, address pair, uint256);\r\n    event NewGovernance(address _new);\r\n    event NewController(address _new);\r\n    event NewFeeReceiver(address _new);\r\n    event NewFeeVaultForLP(address token, address feeVault);\r\n    event NewVaultForLP(address _new);\r\n    event NewVaultForTrader(address _new);\r\n    event NewVaultForCNode(address _new);\r\n    event NewDAO(address _new);\r\n\r\n    /// @dev Create a new token pair for trading\r\n    /// @param  token the address of token to trade\r\n    /// @param  initToken0Amount the initial asset ratio (initToken0Amount:initToken1Amount)\r\n    /// @param  initToken1Amount the initial asset ratio (initToken0Amount:initToken1Amount)\r\n    /// @return pair the address of new token pair\r\n    function createPair(\r\n        address token,\r\n\t    uint256 initToken0Amount,\r\n        uint256 initToken1Amount\r\n        )\r\n        external\r\n        returns (address pair);\r\n\r\n    function getPair(address token) external view returns (address pair);\r\n    function allPairs(uint256) external view returns (address pair);\r\n    function allPairsLength() external view returns (uint256);\r\n\r\n    function getTradeMiningStatus(address token) external view returns (bool status);\r\n    function setTradeMiningStatus(address token, bool status) external;\r\n    function getFeeVaultForLP(address token) external view returns (address feeVault); // for LPs\r\n    function setFeeVaultForLP(address token, address feeVault) external;\r\n\r\n    function setGovernance(address _new) external;\r\n    function setController(address _new) external;\r\n    function setFeeReceiver(address _new) external;\r\n    function setVaultForLP(address _new) external;\r\n    function setVaultForTrader(address _new) external;\r\n    function setVaultForCNode(address _new) external;\r\n    function setDAO(address _new) external;\r\n    function getController() external view returns (address controller);\r\n    function getFeeReceiver() external view returns (address feeReceiver); // For CoFi Holders\r\n    function getVaultForLP() external view returns (address vaultForLP);\r\n    function getVaultForTrader() external view returns (address vaultForTrader);\r\n    function getVaultForCNode() external view returns (address vaultForCNode);\r\n    function getDAO() external view returns (address dao);\r\n}\r\n\r\n// File: contracts/interface/ICoFiStakingRewards.sol\r\n\r\npragma solidity 0.6.12;\r\n\r\ninterface ICoFiStakingRewards {\r\n    // Views\r\n\r\n    /// @dev Reward amount represents by per staking token\r\n    function rewardPerToken() external view returns (uint256);\r\n\r\n    /// @dev How many reward tokens a user has earned but not claimed at present\r\n    /// @param  account The target account\r\n    /// @return The amount of reward tokens a user earned\r\n    function earned(address account) external view returns (uint256);\r\n\r\n    /// @dev How many reward tokens accrued recently\r\n    /// @return The amount of reward tokens accrued recently\r\n    function accrued() external view returns (uint256);\r\n\r\n    /// @dev How many stakingToken (XToken) deposited into to this reward pool (staking pool)\r\n    /// @return The total amount of XTokens deposited in this staking pool\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /// @dev How many stakingToken (XToken) deposited by the target account\r\n    /// @param  account The target account\r\n    /// @return The total amount of XToken deposited in this staking pool\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /// @dev Get the address of token for staking in this staking pool\r\n    /// @return The staking token address\r\n    function stakingToken() external view returns (address);\r\n\r\n    /// @dev Get the address of token for rewards in this staking pool\r\n    /// @return The rewards token address\r\n    function rewardsToken() external view returns (address);\r\n\r\n    // Mutative\r\n\r\n    /// @dev Stake/Deposit into the reward pool (staking pool)\r\n    /// @param  amount The target amount\r\n    function stake(uint256 amount) external;\r\n\r\n    /// @dev Stake/Deposit into the reward pool (staking pool) for other account\r\n    /// @param  other The target account\r\n    /// @param  amount The target amount\r\n    function stakeForOther(address other, uint256 amount) external;\r\n\r\n    /// @dev Withdraw from the reward pool (staking pool), get the original tokens back\r\n    /// @param  amount The target amount\r\n    function withdraw(uint256 amount) external;\r\n    \r\n    /// @dev Withdraw without caring about rewards. EMERGENCY ONLY.\r\n    function emergencyWithdraw() external;\r\n\r\n    /// @dev Claim the reward the user earned\r\n    function getReward() external;\r\n\r\n    /// @dev Add ETH reward to the staking pool\r\n    function addETHReward() external payable;\r\n\r\n    /// @dev User exit the reward pool, it's actually withdraw and getReward\r\n    function exit() external;\r\n\r\n    // Events\r\n    event Staked(address indexed user, uint256 amount);\r\n    event StakedForOther(address indexed user, address indexed other, uint256 amount);\r\n    event Withdrawn(address indexed user, uint256 amount);\r\n    event SavingWithdrawn(address indexed to, uint256 amount);\r\n    event EmergencyWithdraw(address indexed user, uint256 amount);\r\n    event RewardPaid(address indexed user, uint256 reward);\r\n    \r\n}\r\n// File: @openzeppelin/contracts/token/ERC20/IERC20.sol\r\n\r\npragma solidity >=0.6.0 <0.8.0;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n// File: contracts/interface/ICoFiXVaultForLP.sol\r\n\r\npragma solidity 0.6.12;\r\n\r\ninterface ICoFiXVaultForLP {\r\n\r\n    enum POOL_STATE {INVALID, ENABLED, DISABLED}\r\n\r\n    event NewPoolAdded(address pool, uint256 index);\r\n    event PoolEnabled(address pool);\r\n    event PoolDisabled(address pool);\r\n\r\n    function setGovernance(address _new) external;\r\n    function setInitCoFiRate(uint256 _new) external;\r\n    function setDecayPeriod(uint256 _new) external;\r\n    function setDecayRate(uint256 _new) external;\r\n\r\n    function addPool(address pool) external;\r\n    function enablePool(address pool) external;\r\n    function disablePool(address pool) external;\r\n    function setPoolWeight(address pool, uint256 weight) external;\r\n    function batchSetPoolWeight(address[] memory pools, uint256[] memory weights) external;\r\n    function distributeReward(address to, uint256 amount) external;\r\n\r\n    function getPendingRewardOfLP(address pair) external view returns (uint256);\r\n    function currentPeriod() external view returns (uint256);\r\n    function currentCoFiRate() external view returns (uint256);\r\n    function currentPoolRate(address pool) external view returns (uint256 poolRate);\r\n    function currentPoolRateByPair(address pair) external view returns (uint256 poolRate);\r\n\r\n    /// @dev Get the award staking pool address of pair (XToken)\r\n    /// @param  pair The address of XToken(pair) contract\r\n    /// @return pool The pool address\r\n    function stakingPoolForPair(address pair) external view returns (address pool);\r\n\r\n    function getPoolInfo(address pool) external view returns (POOL_STATE state, uint256 weight);\r\n    function getPoolInfoByPair(address pair) external view returns (POOL_STATE state, uint256 weight);\r\n\r\n    function getEnabledPoolCnt() external view returns (uint256);\r\n\r\n    function getCoFiStakingPool() external view returns (address pool);\r\n\r\n}\r\n// File: contracts/interface/ICoFiXStakingRewards.sol\r\n\r\npragma solidity 0.6.12;\r\n\r\ninterface ICoFiXStakingRewards {\r\n    // Views\r\n\r\n    /// @dev The rewards vault contract address set in factory contract\r\n    /// @return Returns the vault address\r\n    function rewardsVault() external view returns (address);\r\n\r\n    /// @dev The lastBlock reward applicable\r\n    /// @return Returns the latest block.number on-chain\r\n    function lastBlockRewardApplicable() external view returns (uint256);\r\n\r\n    /// @dev Reward amount represents by per staking token\r\n    function rewardPerToken() external view returns (uint256);\r\n\r\n    /// @dev How many reward tokens a user has earned but not claimed at present\r\n    /// @param  account The target account\r\n    /// @return The amount of reward tokens a user earned\r\n    function earned(address account) external view returns (uint256);\r\n\r\n    /// @dev How many reward tokens accrued recently\r\n    /// @return The amount of reward tokens accrued recently\r\n    function accrued() external view returns (uint256);\r\n\r\n    /// @dev Get the latest reward rate of this mining pool (tokens amount per block)\r\n    /// @return The latest reward rate\r\n    function rewardRate() external view returns (uint256);\r\n\r\n    /// @dev How many stakingToken (XToken) deposited into to this reward pool (mining pool)\r\n    /// @return The total amount of XTokens deposited in this mining pool\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /// @dev How many stakingToken (XToken) deposited by the target account\r\n    /// @param  account The target account\r\n    /// @return The total amount of XToken deposited in this mining pool\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /// @dev Get the address of token for staking in this mining pool\r\n    /// @return The staking token address\r\n    function stakingToken() external view returns (address);\r\n\r\n    /// @dev Get the address of token for rewards in this mining pool\r\n    /// @return The rewards token address\r\n    function rewardsToken() external view returns (address);\r\n\r\n    // Mutative\r\n\r\n    /// @dev Stake/Deposit into the reward pool (mining pool)\r\n    /// @param  amount The target amount\r\n    function stake(uint256 amount) external;\r\n\r\n    /// @dev Stake/Deposit into the reward pool (mining pool) for other account\r\n    /// @param  other The target account\r\n    /// @param  amount The target amount\r\n    function stakeForOther(address other, uint256 amount) external;\r\n\r\n    /// @dev Withdraw from the reward pool (mining pool), get the original tokens back\r\n    /// @param  amount The target amount\r\n    function withdraw(uint256 amount) external;\r\n\r\n    /// @dev Withdraw without caring about rewards. EMERGENCY ONLY.\r\n    function emergencyWithdraw() external;\r\n\r\n    /// @dev Claim the reward the user earned\r\n    function getReward() external;\r\n\r\n    function getRewardAndStake() external;\r\n\r\n    /// @dev User exit the reward pool, it's actually withdraw and getReward\r\n    function exit() external;\r\n\r\n    /// @dev Add reward to the mining pool\r\n    function addReward(uint256 amount) external;\r\n\r\n    // Events\r\n    event RewardAdded(address sender, uint256 reward);\r\n    event Staked(address indexed user, uint256 amount);\r\n    event StakedForOther(address indexed user, address indexed other, uint256 amount);\r\n    event Withdrawn(address indexed user, uint256 amount);\r\n    event EmergencyWithdraw(address indexed user, uint256 amount);\r\n    event RewardPaid(address indexed user, uint256 reward);\r\n}\r\n// File: @openzeppelin/contracts/utils/ReentrancyGuard.sol\r\n\r\npragma solidity >=0.6.0 <0.8.0;\r\n\r\n/**\r\n * @dev Contract module that helps prevent reentrant calls to a function.\r\n *\r\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\r\n * available, which can be applied to functions to make sure there are no nested\r\n * (reentrant) calls to them.\r\n *\r\n * Note that because there is a single `nonReentrant` guard, functions marked as\r\n * `nonReentrant` may not call one another. This can be worked around by making\r\n * those functions `private`, and then adding `external` `nonReentrant` entry\r\n * points to them.\r\n *\r\n * TIP: If you would like to learn more about reentrancy and alternative ways\r\n * to protect against it, check out our blog post\r\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\r\n */\r\nabstract contract ReentrancyGuard {\r\n    // Booleans are more expensive than uint256 or any type that takes up a full\r\n    // word because each write operation emits an extra SLOAD to first read the\r\n    // slot's contents, replace the bits taken up by the boolean, and then write\r\n    // back. This is the compiler's defense against contract upgrades and\r\n    // pointer aliasing, and it cannot be disabled.\r\n\r\n    // The values being non-zero value makes deployment a bit more expensive,\r\n    // but in exchange the refund on every call to nonReentrant will be lower in\r\n    // amount. Since refunds are capped to a percentage of the total\r\n    // transaction's gas, it is best to keep them low in cases like this one, to\r\n    // increase the likelihood of the full refund coming into effect.\r\n    uint256 private constant _NOT_ENTERED = 1;\r\n    uint256 private constant _ENTERED = 2;\r\n\r\n    uint256 private _status;\r\n\r\n    constructor () internal {\r\n        _status = _NOT_ENTERED;\r\n    }\r\n\r\n    /**\r\n     * @dev Prevents a contract from calling itself, directly or indirectly.\r\n     * Calling a `nonReentrant` function from another `nonReentrant`\r\n     * function is not supported. It is possible to prevent this from happening\r\n     * by making the `nonReentrant` function external, and make it call a\r\n     * `private` function that does the actual work.\r\n     */\r\n    modifier nonReentrant() {\r\n        // On the first call to nonReentrant, _notEntered will be true\r\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\r\n\r\n        // Any calls to nonReentrant after this point will fail\r\n        _status = _ENTERED;\r\n\r\n        _;\r\n\r\n        // By storing the original value once again, a refund is triggered (see\r\n        // https://eips.ethereum.org/EIPS/eip-2200)\r\n        _status = _NOT_ENTERED;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/math/Math.sol\r\n\r\npragma solidity >=0.6.0 <0.8.0;\r\n\r\n/**\r\n * @dev Standard math utilities missing in the Solidity language.\r\n */\r\nlibrary Math {\r\n    /**\r\n     * @dev Returns the largest of two numbers.\r\n     */\r\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a >= b ? a : b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the smallest of two numbers.\r\n     */\r\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a < b ? a : b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the average of two numbers. The result is rounded towards\r\n     * zero.\r\n     */\r\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // (a + b) / 2 can overflow, so we distribute\r\n        return (a / 2) + (b / 2) + ((a % 2 + b % 2) / 2);\r\n    }\r\n}\r\n\r\n// File: contracts/lib/TransferHelper.sol\r\n\r\npragma solidity 0.6.12;\r\n\r\n// helper methods for interacting with ERC20 tokens and sending ETH that do not consistently return true/false\r\nlibrary TransferHelper {\r\n    function safeApprove(address token, address to, uint value) internal {\r\n        // bytes4(keccak256(bytes('approve(address,uint256)')));\r\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x095ea7b3, to, value));\r\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'TransferHelper: APPROVE_FAILED');\r\n    }\r\n\r\n    function safeTransfer(address token, address to, uint value) internal {\r\n        // bytes4(keccak256(bytes('transfer(address,uint256)')));\r\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0xa9059cbb, to, value));\r\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'TransferHelper: TRANSFER_FAILED');\r\n    }\r\n\r\n    function safeTransferFrom(address token, address from, address to, uint value) internal {\r\n        // bytes4(keccak256(bytes('transferFrom(address,address,uint256)')));\r\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x23b872dd, from, to, value));\r\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'TransferHelper: TRANSFER_FROM_FAILED');\r\n    }\r\n\r\n    function safeTransferETH(address to, uint value) internal {\r\n        (bool success,) = to.call{value:value}(new bytes(0));\r\n        require(success, 'TransferHelper: ETH_TRANSFER_FAILED');\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/math/SafeMath.sol\r\n\r\npragma solidity >=0.6.0 <0.8.0;\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        uint256 c = a + b;\r\n        if (c < a) return (false, 0);\r\n        return (true, c);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        if (b > a) return (false, 0);\r\n        return (true, a - b);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) return (true, 0);\r\n        uint256 c = a * b;\r\n        if (c / a != b) return (false, 0);\r\n        return (true, c);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        if (b == 0) return (false, 0);\r\n        return (true, a / b);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        if (b == 0) return (false, 0);\r\n        return (true, a % b);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b <= a, \"SafeMath: subtraction overflow\");\r\n        return a - b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) return 0;\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers, reverting on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b > 0, \"SafeMath: division by zero\");\r\n        return a / b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * reverting when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b > 0, \"SafeMath: modulo by zero\");\r\n        return a % b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\r\n     * message unnecessarily. For custom revert reasons use {trySub}.\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        return a - b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\r\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        return a / b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * reverting with custom message when dividing by zero.\r\n     *\r\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\r\n     * message unnecessarily. For custom revert reasons use {tryMod}.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n// File: contracts/CoFiXV2StakingRewards.sol\r\n\r\npragma solidity 0.6.12;\r\n\r\n// Stake XToken to earn CoFi Token\r\ncontract CoFiXV2StakingRewards is ICoFiXStakingRewards, ReentrancyGuard {\r\n    using SafeMath for uint256;\r\n\r\n    /* ========== STATE VARIABLES ========== */\r\n\r\n    address public override immutable rewardsToken; // CoFi\r\n    address public override immutable stakingToken; // XToken or CNode\r\n\r\n    address public immutable factory;\r\n\r\n    uint256 public lastUpdateBlock;\r\n    uint256 public rewardPerTokenStored;\r\n\r\n    mapping(address => uint256) public userRewardPerTokenPaid;\r\n    mapping(address => uint256) public rewards;\r\n\r\n    uint256 private _totalSupply;\r\n    mapping(address => uint256) private _balances;\r\n\r\n    /* ========== CONSTRUCTOR ========== */\r\n\r\n    constructor(\r\n        address _rewardsToken,\r\n        address _stakingToken,\r\n        address _factory\r\n    ) public {\r\n        rewardsToken = _rewardsToken;\r\n        stakingToken = _stakingToken;\r\n        require(ICoFiXV2Factory(_factory).getVaultForLP() != address(0), \"VaultForLP not set yet\"); // check\r\n        factory = _factory;\r\n        lastUpdateBlock = block.number;        \r\n    }\r\n\r\n    /* ========== VIEWS ========== */\r\n\r\n    // replace cofixVault with rewardsVault, this could introduce more calls, but clear is more important \r\n    function rewardsVault() public virtual override view returns (address) {\r\n        return ICoFiXV2Factory(factory).getVaultForLP();\r\n    }\r\n\r\n    function totalSupply() external override view returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    function balanceOf(address account) external override view returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n\r\n    function lastBlockRewardApplicable() public override view returns (uint256) {\r\n        return block.number;\r\n    }\r\n\r\n    function rewardPerToken() public override view returns (uint256) {\r\n        if (_totalSupply == 0) {\r\n            return rewardPerTokenStored;\r\n        }\r\n        return\r\n            rewardPerTokenStored.add(\r\n                accrued().mul(1e18).div(_totalSupply)\r\n            );\r\n    }\r\n\r\n    function _rewardPerTokenAndAccrued() internal view returns (uint256, uint256) {\r\n        if (_totalSupply == 0) {\r\n            // use the old rewardPerTokenStored, and accrued should be zero here\r\n            // if not the new accrued amount will never be distributed to anyone\r\n            return (rewardPerTokenStored, 0);\r\n        }\r\n        uint256 _accrued = accrued();\r\n        uint256 _rewardPerToken = rewardPerTokenStored.add(\r\n                _accrued.mul(1e18).div(_totalSupply)\r\n            );\r\n        return (_rewardPerToken, _accrued);\r\n    }\r\n\r\n    function rewardRate() public virtual override view returns (uint256) {\r\n        return ICoFiXVaultForLP(rewardsVault()).currentPoolRate(address(this));\r\n    }\r\n\r\n    function accrued() public virtual override view returns (uint256) {\r\n        // calc block rewards\r\n        uint256 blockReward = lastBlockRewardApplicable().sub(lastUpdateBlock).mul(rewardRate());\r\n        // query pair trading rewards\r\n        uint256 tradingReward = ICoFiXVaultForLP(rewardsVault()).getPendingRewardOfLP(stakingToken);\r\n        return blockReward.add(tradingReward);\r\n    }\r\n\r\n    function earned(address account) public override view returns (uint256) {\r\n        return _balances[account].mul(rewardPerToken().sub(userRewardPerTokenPaid[account])).div(1e18).add(rewards[account]);\r\n    }\r\n\r\n    /* ========== MUTATIVE FUNCTIONS ========== */\r\n\r\n    function stake(uint256 amount) external override nonReentrant updateReward(msg.sender) {\r\n        require(amount > 0, \"Cannot stake 0\");\r\n        _totalSupply = _totalSupply.add(amount);\r\n        _balances[msg.sender] = _balances[msg.sender].add(amount);\r\n        TransferHelper.safeTransferFrom(stakingToken, msg.sender, address(this), amount);\r\n        emit Staked(msg.sender, amount);\r\n    }\r\n\r\n    function stakeForOther(address other, uint256 amount) external override nonReentrant updateReward(other) {\r\n        require(amount > 0, \"Cannot stake 0\");\r\n        _totalSupply = _totalSupply.add(amount);\r\n        _balances[other] = _balances[other].add(amount);\r\n        TransferHelper.safeTransferFrom(stakingToken, msg.sender, address(this), amount);\r\n        emit StakedForOther(msg.sender, other, amount);\r\n    }\r\n\r\n    function withdraw(uint256 amount) public override nonReentrant updateReward(msg.sender) {\r\n        require(amount > 0, \"Cannot withdraw 0\");\r\n        _totalSupply = _totalSupply.sub(amount);\r\n        _balances[msg.sender] = _balances[msg.sender].sub(amount);\r\n        TransferHelper.safeTransfer(stakingToken, msg.sender, amount);\r\n        emit Withdrawn(msg.sender, amount);\r\n    }\r\n\r\n    // Withdraw without caring about rewards. EMERGENCY ONLY.\r\n    function emergencyWithdraw() external override nonReentrant {\r\n        uint256 amount = _balances[msg.sender];\r\n        require(amount > 0, \"Cannot withdraw 0\");\r\n        _totalSupply = _totalSupply.sub(amount);\r\n        _balances[msg.sender] = 0;\r\n        rewards[msg.sender] = 0;\r\n        TransferHelper.safeTransfer(stakingToken, msg.sender, amount);\r\n        emit EmergencyWithdraw(msg.sender, amount);\r\n    }\r\n\r\n    function getReward() public override nonReentrant updateReward(msg.sender) {\r\n        uint256 reward = rewards[msg.sender];\r\n        if (reward > 0) {\r\n            rewards[msg.sender] = 0;\r\n            // TransferHelper.safeTransfer(rewardsToken, msg.sender, reward);\r\n            uint256 transferred = _safeCoFiTransfer(msg.sender, reward);\r\n            emit RewardPaid(msg.sender, transferred);\r\n        }\r\n    }\r\n\r\n    // get CoFi rewards and staking into CoFiStakingRewards pool\r\n    function getRewardAndStake() external override nonReentrant updateReward(msg.sender) {\r\n        uint256 reward = rewards[msg.sender];\r\n        if (reward > 0) {\r\n            rewards[msg.sender] = 0;\r\n            address cofiStakingPool = ICoFiXVaultForLP(rewardsVault()).getCoFiStakingPool(); // also work for VaultForCNode\r\n            require(cofiStakingPool != address(0), \"cofiStakingPool not set\");\r\n            // approve to staking pool\r\n            address _rewardsToken = rewardsToken;\r\n            IERC20(_rewardsToken).approve(cofiStakingPool, reward);\r\n            ICoFiStakingRewards(cofiStakingPool).stakeForOther(msg.sender, reward);\r\n            IERC20(_rewardsToken).approve(cofiStakingPool, 0); // ensure\r\n            emit RewardPaid(msg.sender, reward);\r\n        }\r\n    }\r\n\r\n    function exit() external override {\r\n        withdraw(_balances[msg.sender]);\r\n        getReward();\r\n    }\r\n\r\n    // add reward from trading pool or anyone else\r\n    function addReward(uint256 amount) public override nonReentrant updateReward(address(0)) {\r\n        // transfer from caller (router contract)\r\n        TransferHelper.safeTransferFrom(rewardsToken, msg.sender, address(this), amount);\r\n        // update rewardPerTokenStored\r\n        rewardPerTokenStored = rewardPerTokenStored.add(amount.mul(1e18).div(_totalSupply));\r\n        emit RewardAdded(msg.sender, amount);\r\n    }\r\n\r\n    // Safe CoFi transfer function, just in case if rounding error or ending of mining causes pool to not have enough CoFis.\r\n    function _safeCoFiTransfer(address _to, uint256 _amount) internal returns (uint256) {\r\n        uint256 cofiBal = IERC20(rewardsToken).balanceOf(address(this));\r\n        if (_amount > cofiBal) {\r\n            _amount = cofiBal;\r\n        }\r\n        TransferHelper.safeTransfer(rewardsToken, _to, _amount); // allow zero amount\r\n        return _amount;\r\n    }\r\n\r\n    /* ========== MODIFIERS ========== */\r\n\r\n    modifier updateReward(address account) virtual {\r\n        // rewardPerTokenStored = rewardPerToken();\r\n        // uint256 newAccrued = accrued();\r\n        (uint256 newRewardPerToken, uint256 newAccrued) = _rewardPerTokenAndAccrued();\r\n        rewardPerTokenStored = newRewardPerToken;\r\n        if (newAccrued > 0) {\r\n            // distributeReward could fail if CoFiXVaultForLP is not minter of CoFi anymore\r\n            // Should set reward rate to zero first, and then do a settlement of pool reward by call getReward\r\n            ICoFiXVaultForLP(rewardsVault()).distributeReward(address(this), newAccrued);\r\n        } \r\n        lastUpdateBlock = lastBlockRewardApplicable();\r\n        if (account != address(0)) {\r\n            rewards[account] = earned(account);\r\n            userRewardPerTokenPaid[account] = rewardPerTokenStored;\r\n        }\r\n        _;\r\n    }\r\n\r\n    /* ========== EVENTS ========== */\r\n\r\n    event RewardAdded(address sender, uint256 reward);\r\n    event Staked(address indexed user, uint256 amount);\r\n    event StakedForOther(address indexed user, address indexed other, uint256 amount);\r\n    event Withdrawn(address indexed user, uint256 amount);\r\n    event EmergencyWithdraw(address indexed user, uint256 amount);\r\n    event RewardPaid(address indexed user, uint256 reward);\r\n}\r\n\r\n// File: contracts/interface/ICoFiXVaultForCNode.sol\r\n\r\npragma solidity 0.6.12;\r\n\r\ninterface ICoFiXVaultForCNode {\r\n\r\n    event NewCNodePool(address _new);\r\n\r\n    function setGovernance(address _new) external;\r\n    function setInitCoFiRate(uint256 _new) external;\r\n    function setDecayPeriod(uint256 _new) external;\r\n    function setDecayRate(uint256 _new) external;\r\n    function setCNodePool(address _new) external;\r\n\r\n    function distributeReward(address to, uint256 amount) external;\r\n\r\n    function getPendingRewardOfCNode() external view returns (uint256);\r\n    function currentPeriod() external view returns (uint256);\r\n    function currentCoFiRate() external view returns (uint256);\r\n    function getCoFiStakingPool() external view returns (address pool);\r\n\r\n}\r\n\r\n// File: contracts/V2CNodeStakingRewards.sol\r\n\r\npragma solidity 0.6.12;\r\n\r\n// Stake CNode Token to earn CoFi Token\r\ncontract V2CNodeStakingRewards is CoFiXV2StakingRewards {\r\n\r\n    constructor(\r\n        address _rewardsToken,\r\n        address _stakingToken,\r\n        address _factory\r\n    ) public CoFiXV2StakingRewards(\r\n        _rewardsToken,\r\n        _stakingToken,\r\n        _factory\r\n    ) {\r\n        require(ICoFiXV2Factory(_factory).getVaultForCNode() != address(0), \"VaultForCNode not set yet\"); // check\r\n    }\r\n\r\n    // replace cofixVault with rewardsVault, this could introduce more calls, but clear is more important \r\n    function rewardsVault() public virtual override view returns (address) {\r\n        return ICoFiXV2Factory(factory).getVaultForCNode();\r\n    }\r\n\r\n    function rewardRate() public virtual override view returns (uint256) {\r\n        return ICoFiXVaultForCNode(rewardsVault()).currentCoFiRate();\r\n    }\r\n\r\n    function accrued() public virtual override view returns (uint256) {\r\n        // calc block rewards\r\n        uint256 blockReward = lastBlockRewardApplicable().sub(lastUpdateBlock).mul(rewardRate());\r\n        // query pair trading rewards\r\n        uint256 tradingReward = ICoFiXVaultForCNode(rewardsVault()).getPendingRewardOfCNode(); // trading rewards\r\n        return blockReward.add(tradingReward);\r\n    }\r\n\r\n    modifier updateReward(address account) virtual override {\r\n        // rewardPerTokenStored = rewardPerToken();\r\n        // uint256 newAccrued = accrued();\r\n        (uint256 newRewardPerToken, uint256 newAccrued) = _rewardPerTokenAndAccrued();\r\n        rewardPerTokenStored = newRewardPerToken;\r\n        if (newAccrued > 0) {\r\n            // distributeReward could fail if CoFiXVaultForCNode is not minter of CoFi anymore\r\n            // Should set reward rate to zero first, and then do a settlement of pool reward by call getReward\r\n            ICoFiXVaultForCNode(rewardsVault()).distributeReward(address(this), newAccrued);\r\n        } \r\n        lastUpdateBlock = lastBlockRewardApplicable();\r\n        if (account != address(0)) {\r\n            rewards[account] = earned(account);\r\n            userRewardPerTokenPaid[account] = rewardPerTokenStored;\r\n        }\r\n        _;\r\n    }\r\n\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_rewardsToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_stakingToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_factory\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"EmergencyWithdraw\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"}],\"name\":\"RewardAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"}],\"name\":\"RewardPaid\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Staked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"other\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"StakedForOther\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Withdrawn\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"accrued\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"addReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"earned\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"emergencyWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"exit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"factory\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRewardAndStake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastBlockRewardApplicable\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastUpdateBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardPerToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardPerTokenStored\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"rewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardsToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardsVault\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"stake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"other\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"stakeForOther\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakingToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userRewardPerTokenPaid\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"V2CNodeStakingRewards","CompilerVersion":"v0.6.12+commit.27d51765","OptimizationUsed":"1","Runs":"6666","ConstructorArguments":"0000000000000000000000001a23a6bfbadb59fa563008c0fb7cf96dfcf34ea1000000000000000000000000558201dc4741efc11031cdc3bc1bc728c23bf51200000000000000000000000039816b841436a57729723d9da127805755d2cb51","EVMVersion":"istanbul","Library":"","LicenseType":"GNU GPLv3","Proxy":"0","Implementation":"","SwarmSource":"ipfs://a7e1d0e8051fc68b80ed69079b5ede1c1cfe2a11ddbac6f747fac1a47994088b"}]}