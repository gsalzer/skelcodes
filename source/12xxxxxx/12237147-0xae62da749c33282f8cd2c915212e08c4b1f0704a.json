{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/CentaurRouter.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity =0.6.12;\\r\\n\\r\\nimport './libraries/SafeMath.sol';\\r\\nimport './libraries/TransferHelper.sol';\\r\\nimport './interfaces/IERC20.sol';\\r\\nimport './interfaces/IWETH.sol';\\r\\nimport './interfaces/ICentaurFactory.sol';\\r\\nimport './interfaces/ICentaurPool.sol';\\r\\nimport './interfaces/ICentaurRouter.sol';\\r\\nimport \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\r\\n\\r\\ncontract CentaurRouter is ICentaurRouter {\\r\\n\\tusing SafeMath for uint;\\r\\n\\r\\n\\taddress public override factory;\\r\\n    address public immutable override WETH;\\r\\n    bool public override onlyEOAEnabled;\\r\\n    mapping(address => bool) public override whitelistContracts;\\r\\n\\r\\n    modifier ensure(uint deadline) {\\r\\n        require(deadline >= block.timestamp, 'CentaurSwap: EXPIRED');\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    modifier onlyEOA(address _address) {\\r\\n        if (onlyEOAEnabled) {\\r\\n            require((!Address.isContract(_address) || whitelistContracts[_address]), 'CentaurSwap: ONLY_EOA_ALLOWED');\\r\\n        }\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    modifier onlyFactory() {\\r\\n        require(msg.sender == factory, 'CentaurSwap: ONLY_FACTORY_ALLOWED');\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    constructor(address _factory, address _WETH) public {\\r\\n        factory = _factory;\\r\\n        WETH = _WETH;\\r\\n        onlyEOAEnabled = true;\\r\\n    }\\r\\n\\r\\n    receive() external payable {\\r\\n        assert(msg.sender == WETH); // only accept ETH via fallback from the WETH contract\\r\\n    }\\r\\n\\r\\n    // **** ADD LIQUIDITY ****\\r\\n    function _addLiquidity(\\r\\n        address _baseToken,\\r\\n        uint _amount,\\r\\n        uint _minLiquidity\\r\\n    ) internal view virtual returns (uint liquidity) {\\r\\n\\t\\tICentaurPool pool = ICentaurPool(ICentaurFactory(factory).getPool(_baseToken));\\r\\n\\r\\n        uint _totalSupply = pool.totalSupply();\\r\\n        uint _baseTokenTargetAmount = pool.baseTokenTargetAmount();\\r\\n        liquidity = _amount;\\r\\n\\r\\n        if (_totalSupply == 0) {\\r\\n            liquidity = _amount.add(_baseTokenTargetAmount);\\r\\n        } else {\\r\\n            liquidity = _amount.mul(_totalSupply).div(_baseTokenTargetAmount);\\r\\n        }\\r\\n\\r\\n    \\trequire(liquidity > _minLiquidity, 'CentaurSwap: INSUFFICIENT_OUTPUT_AMOUNT');\\r\\n    }\\r\\n\\r\\n    function addLiquidity(\\r\\n        address _baseToken,\\r\\n        uint _amount,\\r\\n        address _to,\\r\\n        uint _minLiquidity,\\r\\n        uint _deadline\\r\\n    ) external virtual override ensure(_deadline) onlyEOA(msg.sender) returns (uint amount, uint liquidity) {\\r\\n        address pool = ICentaurFactory(factory).getPool(_baseToken);\\r\\n        require(pool != address(0), 'CentaurSwap: POOL_NOT_FOUND');\\r\\n\\r\\n        (liquidity) = _addLiquidity(_baseToken, _amount, _minLiquidity);\\r\\n        \\r\\n        TransferHelper.safeTransferFrom(_baseToken, msg.sender, pool, _amount);\\r\\n        liquidity = ICentaurPool(pool).mint(_to);\\r\\n        require(liquidity > _minLiquidity, 'CentaurSwap: INSUFFICIENT_OUTPUT_AMOUNT');\\r\\n\\r\\n        return (_amount, liquidity);\\r\\n    }\\r\\n\\r\\n    function removeLiquidity(\\r\\n        address _baseToken,\\r\\n        uint _liquidity,\\r\\n        address _to,\\r\\n        uint _minAmount,\\r\\n        uint _deadline\\r\\n    ) public virtual override ensure(_deadline) onlyEOA(msg.sender) returns (uint amount) {\\r\\n        address pool = ICentaurFactory(factory).getPool(_baseToken);\\r\\n        require(pool != address(0), 'CentaurSwap: POOL_NOT_FOUND');\\r\\n\\r\\n        ICentaurPool(pool).transferFrom(msg.sender, pool, _liquidity); // send liquidity to pool\\r\\n        amount = ICentaurPool(pool).burn(_to);\\r\\n        require(amount > _minAmount, 'CentaurSwap: INSUFFICIENT_OUTPUT_AMOUNT');\\r\\n\\r\\n        return amount;\\r\\n    }\\r\\n\\r\\n    function swapExactTokensForTokens(\\r\\n        address _fromToken,\\r\\n        uint _amountIn,\\r\\n        address _toToken,\\r\\n        uint _amountOutMin,\\r\\n        address _to,\\r\\n        uint _deadline\\r\\n    ) external virtual override ensure(_deadline) onlyEOA(msg.sender) {\\r\\n        require(getAmountOut(_fromToken, _toToken, _amountIn) >= _amountOutMin, 'CentaurSwap: INSUFFICIENT_OUTPUT_AMOUNT');\\r\\n        \\r\\n        (address inputTokenPool, address outputTokenPool) = validatePools(_fromToken, _toToken);\\r\\n\\r\\n        TransferHelper.safeTransferFrom(_fromToken, msg.sender, inputTokenPool, _amountIn);\\r\\n\\r\\n        (uint finalAmountIn, uint value) = ICentaurPool(inputTokenPool).swapFrom(msg.sender);\\r\\n        ICentaurPool(outputTokenPool).swapTo(msg.sender, _fromToken, finalAmountIn, value, _to);\\r\\n    }\\r\\n\\r\\n    function swapTokensForExactTokens(\\r\\n        address _fromToken,\\r\\n        uint _amountInMax,\\r\\n        address _toToken,\\r\\n        uint _amountOut,\\r\\n        address _to,\\r\\n        uint _deadline\\r\\n    ) external virtual override ensure(_deadline) onlyEOA(msg.sender) {\\r\\n        uint amountIn = getAmountIn(_fromToken, _toToken, _amountOut);\\r\\n        require(amountIn <= _amountInMax, 'CentaurSwap: EXCESSIVE_INPUT_AMOUNT');\\r\\n        \\r\\n        (address inputTokenPool, address outputTokenPool) = validatePools(_fromToken, _toToken);\\r\\n\\r\\n        TransferHelper.safeTransferFrom(_fromToken, msg.sender, inputTokenPool, amountIn);\\r\\n\\r\\n        (uint finalAmountIn, uint value) = ICentaurPool(inputTokenPool).swapFrom(msg.sender);\\r\\n        ICentaurPool(outputTokenPool).swapTo(msg.sender, _fromToken, finalAmountIn, value, _to);\\r\\n    }\\r\\n\\r\\n    function swapSettle(address _sender, address _pool) external virtual override returns (uint amount) {\\r\\n        amount = ICentaurPool(_pool).swapSettle(_sender);\\r\\n    }\\r\\n\\r\\n    function swapSettleMultiple(address _sender, address[] memory _pools) external virtual override {\\r\\n        for(uint i = 0; i < _pools.length; i++) {\\r\\n            ICentaurPool(_pools[i]).swapSettle(_sender);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function validatePools(address _fromToken, address _toToken) public view virtual override returns (address inputTokenPool, address outputTokenPool) {\\r\\n        inputTokenPool = ICentaurFactory(factory).getPool(_fromToken);\\r\\n        require(inputTokenPool != address(0), 'CentaurSwap: POOL_NOT_FOUND');\\r\\n\\r\\n        outputTokenPool = ICentaurFactory(factory).getPool(_toToken);\\r\\n        require(outputTokenPool != address(0), 'CentaurSwap: POOL_NOT_FOUND');\\r\\n\\r\\n        return (inputTokenPool, outputTokenPool);\\r\\n    } \\r\\n\\r\\n    function getAmountOut(\\r\\n        address _fromToken,\\r\\n        address _toToken,\\r\\n        uint _amountIn\\r\\n    ) public view virtual override returns (uint amountOut) {\\r\\n        uint poolFee = ICentaurFactory(factory).poolFee();\\r\\n        uint value = ICentaurPool(ICentaurFactory(factory).getPool(_fromToken)).getValueFromAmountIn(_amountIn);\\r\\n        uint amountOutBeforeFees = ICentaurPool(ICentaurFactory(factory).getPool(_toToken)).getAmountOutFromValue(value);\\r\\n        amountOut = (amountOutBeforeFees).mul(uint(100 ether).sub(poolFee)).div(100 ether);\\r\\n    }\\r\\n\\r\\n    function getAmountIn(\\r\\n        address _fromToken,\\r\\n        address _toToken,\\r\\n        uint _amountOut\\r\\n    ) public view virtual override returns (uint amountIn) {\\r\\n        uint poolFee = ICentaurFactory(factory).poolFee();\\r\\n        uint amountOut = _amountOut.mul(100 ether).div(uint(100 ether).sub(poolFee));\\r\\n        uint value = ICentaurPool(ICentaurFactory(factory).getPool(_toToken)).getValueFromAmountOut(amountOut);\\r\\n        amountIn = ICentaurPool(ICentaurFactory(factory).getPool(_fromToken)).getAmountInFromValue(value);\\r\\n    }\\r\\n\\r\\n    // Helper functions\\r\\n    function setFactory(address _factory) external virtual override onlyFactory {\\r\\n        factory = _factory;\\r\\n    }\\r\\n\\r\\n    function setOnlyEOAEnabled(bool _onlyEOAEnabled) external virtual override onlyFactory {\\r\\n        onlyEOAEnabled = _onlyEOAEnabled;\\r\\n    }\\r\\n\\r\\n    function addContractToWhitelist(address _address) external virtual override onlyFactory {\\r\\n        require(Address.isContract(_address), 'CentaurSwap: NOT_CONTRACT');\\r\\n        whitelistContracts[_address] = true;\\r\\n    }\\r\\n\\r\\n    function removeContractFromWhitelist(address _address) external virtual override onlyFactory {\\r\\n        whitelistContracts[_address] = false;\\r\\n    }\\r\\n}\"\r\n    },\r\n    \"contracts/libraries/SafeMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity >=0.6.0 <0.8.0;\\r\\n\\r\\n/**\\r\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\r\\n * checks.\\r\\n *\\r\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\r\\n * in bugs, because programmers usually assume that an overflow raises an\\r\\n * error, which is the standard behavior in high level programming languages.\\r\\n * `SafeMath` restores this intuition by reverting the transaction when an\\r\\n * operation overflows.\\r\\n *\\r\\n * Using this library instead of the unchecked operations eliminates an entire\\r\\n * class of bugs, so it's recommended to use it always.\\r\\n */\\r\\nlibrary SafeMath {\\r\\n    /**\\r\\n     * @dev Returns the addition of two unsigned integers, reverting on\\r\\n     * overflow.\\r\\n     *\\r\\n     * Counterpart to Solidity's `+` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - Addition cannot overflow.\\r\\n     */\\r\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        uint256 c = a + b;\\r\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\r\\n\\r\\n        return c;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\r\\n     * overflow (when the result is negative).\\r\\n     *\\r\\n     * Counterpart to Solidity's `-` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - Subtraction cannot overflow.\\r\\n     */\\r\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        return sub(a, b, \\\"SafeMath: subtraction overflow\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\r\\n     * overflow (when the result is negative).\\r\\n     *\\r\\n     * Counterpart to Solidity's `-` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - Subtraction cannot overflow.\\r\\n     */\\r\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\r\\n        require(b <= a, errorMessage);\\r\\n        uint256 c = a - b;\\r\\n\\r\\n        return c;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\r\\n     * overflow.\\r\\n     *\\r\\n     * Counterpart to Solidity's `*` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - Multiplication cannot overflow.\\r\\n     */\\r\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\r\\n        // benefit is lost if 'b' is also tested.\\r\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\r\\n        if (a == 0) {\\r\\n            return 0;\\r\\n        }\\r\\n\\r\\n        uint256 c = a * b;\\r\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\r\\n\\r\\n        return c;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the integer division of two unsigned integers. Reverts on\\r\\n     * division by zero. The result is rounded towards zero.\\r\\n     *\\r\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\r\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\r\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - The divisor cannot be zero.\\r\\n     */\\r\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\\r\\n     * division by zero. The result is rounded towards zero.\\r\\n     *\\r\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\r\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\r\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - The divisor cannot be zero.\\r\\n     */\\r\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\r\\n        require(b > 0, errorMessage);\\r\\n        uint256 c = a / b;\\r\\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\r\\n\\r\\n        return c;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\r\\n     * Reverts when dividing by zero.\\r\\n     *\\r\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\r\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\r\\n     * invalid opcode to revert (consuming all remaining gas).\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - The divisor cannot be zero.\\r\\n     */\\r\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        return mod(a, b, \\\"SafeMath: modulo by zero\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\r\\n     * Reverts with custom message when dividing by zero.\\r\\n     *\\r\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\r\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\r\\n     * invalid opcode to revert (consuming all remaining gas).\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - The divisor cannot be zero.\\r\\n     */\\r\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\r\\n        require(b != 0, errorMessage);\\r\\n        return a % b;\\r\\n    }\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/libraries/TransferHelper.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\r\\n\\r\\npragma solidity >=0.6.0;\\r\\n\\r\\n// helper methods for interacting with ERC20 tokens and sending ETH that do not consistently return true/false\\r\\nlibrary TransferHelper {\\r\\n    function safeApprove(address token, address to, uint value) internal {\\r\\n        // bytes4(keccak256(bytes('approve(address,uint256)')));\\r\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x095ea7b3, to, value));\\r\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'TransferHelper: APPROVE_FAILED');\\r\\n    }\\r\\n\\r\\n    function safeTransfer(address token, address to, uint value) internal {\\r\\n        // bytes4(keccak256(bytes('transfer(address,uint256)')));\\r\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0xa9059cbb, to, value));\\r\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'TransferHelper: TRANSFER_FAILED');\\r\\n    }\\r\\n\\r\\n    function safeTransferFrom(address token, address from, address to, uint value) internal {\\r\\n        // bytes4(keccak256(bytes('transferFrom(address,address,uint256)')));\\r\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x23b872dd, from, to, value));\\r\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'TransferHelper: TRANSFER_FROM_FAILED');\\r\\n    }\\r\\n\\r\\n    function safeTransferETH(address to, uint value) internal {\\r\\n        (bool success,) = to.call{value:value}(new bytes(0));\\r\\n        require(success, 'TransferHelper: ETH_TRANSFER_FAILED');\\r\\n    }\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/interfaces/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity >=0.6.0 <0.8.0;\\r\\n\\r\\n/**\\r\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\r\\n */\\r\\ninterface IERC20 {\\r\\n    function symbol() external pure returns (string memory);\\r\\n    /**\\r\\n     * @dev Returns the token decimal.\\r\\n     */\\r\\n    function decimals() external pure returns (uint8);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the amount of tokens in existence.\\r\\n     */\\r\\n    function totalSupply() external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the amount of tokens owned by `account`.\\r\\n     */\\r\\n    function balanceOf(address account) external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\r\\n     *\\r\\n     * Returns a boolean value indicating whether the operation succeeded.\\r\\n     *\\r\\n     * Emits a {Transfer} event.\\r\\n     */\\r\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the remaining number of tokens that `spender` will be\\r\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\r\\n     * zero by default.\\r\\n     *\\r\\n     * This value changes when {approve} or {transferFrom} are called.\\r\\n     */\\r\\n    function allowance(address owner, address spender) external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\r\\n     *\\r\\n     * Returns a boolean value indicating whether the operation succeeded.\\r\\n     *\\r\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\r\\n     * that someone may use both the old and the new allowance by unfortunate\\r\\n     * transaction ordering. One possible solution to mitigate this race\\r\\n     * condition is to first reduce the spender's allowance to 0 and set the\\r\\n     * desired value afterwards:\\r\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\r\\n     *\\r\\n     * Emits an {Approval} event.\\r\\n     */\\r\\n    function approve(address spender, uint256 amount) external returns (bool);\\r\\n\\r\\n    /**\\r\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\r\\n     * allowance mechanism. `amount` is then deducted from the caller's\\r\\n     * allowance.\\r\\n     *\\r\\n     * Returns a boolean value indicating whether the operation succeeded.\\r\\n     *\\r\\n     * Emits a {Transfer} event.\\r\\n     */\\r\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\r\\n\\r\\n    /**\\r\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\r\\n     * another (`to`).\\r\\n     *\\r\\n     * Note that `value` may be zero.\\r\\n     */\\r\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\r\\n\\r\\n    /**\\r\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\r\\n     * a call to {approve}. `value` is the new allowance.\\r\\n     */\\r\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/interfaces/IWETH.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity >=0.5.0;\\r\\n\\r\\ninterface IWETH {\\r\\n    function deposit() external payable;\\r\\n    function transfer(address to, uint value) external returns (bool);\\r\\n    function withdraw(uint) external;\\r\\n}\"\r\n    },\r\n    \"contracts/interfaces/ICentaurFactory.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity >=0.5.0;\\r\\n\\r\\ninterface ICentaurFactory {\\r\\n    event PoolCreated(address indexed token, address pool, uint);\\r\\n\\r\\n    function poolFee() external view returns (uint);\\r\\n\\r\\n    function poolLogic() external view returns (address);\\r\\n    function cloneFactory() external view returns (address);\\r\\n    function settlement() external view returns (address);\\r\\n    function router() external view returns (address payable);\\r\\n\\r\\n    function getPool(address token) external view returns (address pool);\\r\\n    function allPools(uint) external view returns (address pool);\\r\\n    function allPoolsLength() external view returns (uint);\\r\\n    function isValidPool(address pool) external view returns (bool);\\r\\n\\r\\n    function createPool(address token, address oracle, uint poolUtilizationPercentage) external returns (address pool);\\r\\n    function addPool(address pool) external;\\r\\n    function removePool(address pool) external;\\r\\n\\r\\n    function setPoolLiquidityParameter(address, uint) external;\\r\\n    function setPoolTradeEnabled(address, bool) external;\\r\\n    function setPoolDepositEnabled(address, bool) external;\\r\\n    function setPoolWithdrawEnabled(address, bool) external;\\r\\n    function setAllPoolsTradeEnabled(bool) external;\\r\\n    function setAllPoolsDepositEnabled(bool) external;\\r\\n    function setAllPoolsWithdrawEnabled(bool) external;\\r\\n    function emergencyWithdrawFromPool(address, address, uint, address) external;\\r\\n\\r\\n    function setRouterOnlyEOAEnabled(bool) external;\\r\\n    function setRouterContractWhitelist(address, bool) external;\\r\\n\\r\\n    function setSettlementDuration(uint) external;\\r\\n\\r\\n    function setPoolFee(uint) external;\\r\\n    function setPoolLogic(address) external;\\r\\n    function setCloneFactory(address) external;\\r\\n    function setSettlement(address) external;\\r\\n    function setRouter(address payable) external;\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/interfaces/ICentaurPool.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity >=0.5.0;\\r\\n\\r\\ninterface ICentaurPool {\\r\\n    event Approval(address indexed owner, address indexed spender, uint value);\\r\\n    event Transfer(address indexed from, address indexed to, uint value);\\r\\n\\r\\n    function name() external pure returns (string memory);\\r\\n    function symbol() external pure returns (string memory);\\r\\n    function decimals() external pure returns (uint8);\\r\\n    function totalSupply() external view returns (uint);\\r\\n    function balanceOf(address owner) external view returns (uint);\\r\\n    function allowance(address owner, address spender) external view returns (uint);\\r\\n\\r\\n    function approve(address spender, uint value) external returns (bool);\\r\\n    function transfer(address to, uint value) external returns (bool);\\r\\n    function transferFrom(address from, address to, uint value) external returns (bool);\\r\\n\\r\\n    event Mint(address indexed sender, uint amount);\\r\\n    event Burn(address indexed sender, uint amount, address indexed to);\\r\\n    event AmountIn(address indexed sender, uint amount);\\r\\n    event AmountOut(address indexed sender, uint amount, address indexed to);\\r\\n    event EmergencyWithdraw(uint256 _timestamp, address indexed _token, uint256 _amount, address indexed _to);\\r\\n\\r\\n    function factory() external view returns (address);\\r\\n    function settlement() external view returns (address);\\r\\n    function baseToken() external view returns (address);\\r\\n    function baseTokenDecimals() external view returns (uint);\\r\\n    function oracle() external view returns (address);\\r\\n    function oracleDecimals() external view returns (uint);\\r\\n    function baseTokenTargetAmount() external view returns (uint);\\r\\n    function baseTokenBalance() external view returns (uint);\\r\\n    function liquidityParameter() external view returns (uint);\\r\\n\\r\\n    function init(address, address, address, uint) external;\\r\\n\\r\\n    function mint(address to) external returns (uint liquidity);\\r\\n    function burn(address to) external returns (uint amount);\\r\\n\\r\\n    function swapTo(address _sender, address _fromToken, uint _amountIn, uint _value, address _receiver) external returns (uint maxAmount);\\r\\n    function swapFrom(address _sender) external returns (uint amount, uint value);\\r\\n    function swapSettle(address _sender) external returns (uint);\\r\\n\\r\\n    function getOraclePrice() external view returns (uint price);\\r\\n    function getAmountOutFromValue(uint _value) external view returns (uint amount);\\r\\n    function getValueFromAmountIn(uint _amount) external view returns (uint value);\\r\\n    function getAmountInFromValue(uint _value) external view returns (uint amount);\\r\\n    function getValueFromAmountOut(uint _amount) external view returns (uint value);\\r\\n\\r\\n    function setFactory(address) external;\\r\\n    function setTradeEnabled(bool) external;\\r\\n    function setDepositEnabled(bool) external;\\r\\n    function setWithdrawEnabled(bool) external;\\r\\n    function setLiquidityParameter(uint) external;\\r\\n    function emergencyWithdraw(address, uint, address) external;\\r\\n}\"\r\n    },\r\n    \"contracts/interfaces/ICentaurRouter.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity >=0.6.2;\\r\\n\\r\\ninterface ICentaurRouter {\\r\\n    function factory() external pure returns (address);\\r\\n    function WETH() external pure returns (address);\\r\\n    function onlyEOAEnabled() external pure returns (bool);\\r\\n    function whitelistContracts(address _address) external view returns (bool);\\r\\n\\r\\n    function addLiquidity(\\r\\n        address _baseToken,\\r\\n        uint _amount,\\r\\n        address _to,\\r\\n        uint _minLiquidity,\\r\\n        uint _deadline\\r\\n    ) external returns (uint amount, uint liquidity);\\r\\n    function removeLiquidity(\\r\\n        address _baseToken,\\r\\n        uint _liquidity,\\r\\n        address _to,\\r\\n        uint _minAmount,\\r\\n        uint _deadline\\r\\n    ) external returns (uint amount);\\r\\n\\r\\n    function swapExactTokensForTokens(\\r\\n        address _fromToken,\\r\\n        uint _amountIn,\\r\\n        address _toToken,\\r\\n        uint _amountOutMin,\\r\\n        address to,\\r\\n        uint _deadline\\r\\n    ) external;\\r\\n    function swapTokensForExactTokens(\\r\\n        address _fromToken,\\r\\n        uint _amountInMax,\\r\\n        address _toToken,\\r\\n        uint _amountOut,\\r\\n        address _to,\\r\\n        uint _deadline\\r\\n    ) external;\\r\\n\\r\\n    function swapSettle(address _sender, address _pool) external returns (uint amount);\\r\\n    function swapSettleMultiple(address _sender, address[] memory _pools) external;\\r\\n\\r\\n    function validatePools(address _fromToken, address _toToken) external view returns (address inputTokenPool, address outputTokenPool);\\r\\n    function getAmountOut(address _fromToken, address _toToken, uint _amountIn) external view returns (uint amountOut);\\r\\n    function getAmountIn(address _fromToken, address _toToken, uint _amountOut) external view returns (uint amountIn);\\r\\n\\r\\n    function setFactory(address) external;\\r\\n    function setOnlyEOAEnabled(bool) external;\\r\\n    function addContractToWhitelist(address) external;\\r\\n    function removeContractFromWhitelist(address) external;\\r\\n\\r\\n}\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.2 <0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": false,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_factory\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_WETH\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"WETH\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"addContractToWhitelist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_baseToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_minLiquidity\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_deadline\",\"type\":\"uint256\"}],\"name\":\"addLiquidity\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"liquidity\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"factory\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_fromToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_toToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amountOut\",\"type\":\"uint256\"}],\"name\":\"getAmountIn\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_fromToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_toToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amountIn\",\"type\":\"uint256\"}],\"name\":\"getAmountOut\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"onlyEOAEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"removeContractFromWhitelist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_baseToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_liquidity\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_minAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_deadline\",\"type\":\"uint256\"}],\"name\":\"removeLiquidity\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_factory\",\"type\":\"address\"}],\"name\":\"setFactory\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_onlyEOAEnabled\",\"type\":\"bool\"}],\"name\":\"setOnlyEOAEnabled\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_fromToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amountIn\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_toToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amountOutMin\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_deadline\",\"type\":\"uint256\"}],\"name\":\"swapExactTokensForTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_pool\",\"type\":\"address\"}],\"name\":\"swapSettle\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_sender\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"_pools\",\"type\":\"address[]\"}],\"name\":\"swapSettleMultiple\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_fromToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amountInMax\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_toToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amountOut\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_deadline\",\"type\":\"uint256\"}],\"name\":\"swapTokensForExactTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_fromToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_toToken\",\"type\":\"address\"}],\"name\":\"validatePools\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"inputTokenPool\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"outputTokenPool\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"whitelistContracts\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]","ContractName":"CentaurRouter","CompilerVersion":"v0.6.12+commit.27d51765","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"000000000000000000000000cf97fbeb86c61dfb30286c778c941d0daad2d68f000000000000000000000000c02aaa39b223fe8d0a0e5c4f27ead9083c756cc2","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}