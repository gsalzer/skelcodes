{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.6.12;\r\n\r\nlibrary SafeMath {\r\n    \r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n    \r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n    \r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n        return c;\r\n    }\r\n    \r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n        return c;\r\n    }\r\n    \r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n    \r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        return c;\r\n    }\r\n    \r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n    \r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address payable) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes memory) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n\r\ninterface IERC20 {\r\n    function totalSupply() external view returns (uint256);\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\nlibrary Address {\r\n    \r\n    function isContract(address account) internal view returns (bool) {\r\n        bytes32 codehash;\r\n        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\r\n        assembly { codehash := extcodehash(account) }\r\n        return (codehash != accountHash && codehash != 0x0);\r\n    }\r\n    \r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n        (bool success, ) = recipient.call{ value: amount }(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n    \r\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n      return functionCall(target, data, \"Address: low-level call failed\");\r\n    }\r\n    \r\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\r\n        return _functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n    \r\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\r\n    }\r\n    \r\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\r\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\r\n        return _functionCallWithValue(target, data, value, errorMessage);\r\n    }\r\n\r\n    function _functionCallWithValue(address target, bytes memory data, uint256 weiValue, string memory errorMessage) private returns (bytes memory) {\r\n        require(isContract(target), \"Address: call to non-contract\");\r\n        (bool success, bytes memory returndata) = target.call{ value: weiValue }(data);\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            if (returndata.length > 0) {\r\n                assembly {\r\n                    let returndata_size := mload(returndata)\r\n                    revert(add(32, returndata), returndata_size)\r\n                }\r\n            } else {\r\n                revert(errorMessage);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\ncontract ERC20 is Context, IERC20 {\r\n    using SafeMath for uint256;\r\n    using Address for address;\r\n\r\n    mapping (address => uint256) private _balances;\r\n\r\n    mapping (address => mapping (address => uint256)) private _allowances;\r\n\r\n    uint256 private _totalSupply;\r\n\r\n    string private _name;\r\n    string private _symbol;\r\n    uint8 private _decimals;\r\n    \r\n    constructor (string memory name, string memory symbol) public {\r\n        _name = name;\r\n        _symbol = symbol;\r\n        _decimals = 18;\r\n    }\r\n    \r\n    function name() public view returns (string memory) {\r\n        return _name;\r\n    }\r\n    \r\n    function symbol() public view returns (string memory) {\r\n        return _symbol;\r\n    }\r\n    \r\n    function decimals() public view returns (uint8) {\r\n        return _decimals;\r\n    }\r\n    \r\n    function totalSupply() public view override returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n    \r\n    function balanceOf(address account) public view override returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n    \r\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\r\n        _transfer(_msgSender(), recipient, amount);\r\n        return true;\r\n    }\r\n    \r\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n    \r\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\r\n        _approve(_msgSender(), spender, amount);\r\n        return true;\r\n    }\r\n    \r\n    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \"ERC20: transfer amount exceeds allowance\"));\r\n        return true;\r\n    }\r\n    \r\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\r\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\r\n        return true;\r\n    }\r\n    \r\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\r\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \"ERC20: decreased allowance below zero\"));\r\n        return true;\r\n    }\r\n    \r\n    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\r\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\r\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\r\n\r\n        _beforeTokenTransfer(sender, recipient, amount);\r\n\r\n        _balances[sender] = _balances[sender].sub(amount, \"ERC20: transfer amount exceeds balance\");\r\n        _balances[recipient] = _balances[recipient].add(amount);\r\n        emit Transfer(sender, recipient, amount);\r\n    }\r\n    \r\n    function _mint(address account, uint256 amount) internal virtual {\r\n        require(account != address(0), \"ERC20: mint to the zero address\");\r\n\r\n        _beforeTokenTransfer(address(0), account, amount);\r\n\r\n        _totalSupply = _totalSupply.add(amount);\r\n        _balances[account] = _balances[account].add(amount);\r\n        emit Transfer(address(0), account, amount);\r\n    }\r\n    \r\n    function _burn(address account, uint256 amount) internal virtual {\r\n        require(account != address(0), \"ERC20: burn from the zero address\");\r\n\r\n        _beforeTokenTransfer(account, address(0), amount);\r\n\r\n        _balances[account] = _balances[account].sub(amount, \"ERC20: burn amount exceeds balance\");\r\n        _totalSupply = _totalSupply.sub(amount);\r\n        emit Transfer(account, address(0), amount);\r\n    }\r\n\r\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    function _setupDecimals(uint8 decimals_) internal {\r\n        _decimals = decimals_;\r\n    }\r\n    \r\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual { }\r\n}\r\n\r\nlibrary SafeERC20 {\r\n    using SafeMath for uint256;\r\n    using Address for address;\r\n\r\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\r\n    }\r\n\r\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\r\n    }\r\n    \r\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\r\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\r\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\r\n        );\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\r\n    }\r\n\r\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \"SafeERC20: decreased allowance below zero\");\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n    \r\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\r\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\r\n        if (returndata.length > 0) { \r\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\r\n        }\r\n    }\r\n}\r\n\r\ninterface UniswapRouterV2 {\r\n    function swapExactTokensForTokens(uint256 amountIn, uint256 amountOutMin, address[] calldata path, address to, uint256 deadline) external returns (uint256[] memory amounts);\r\n    function getAmountsOut(uint256 amountIn, address[] calldata path) external view returns (uint256[] memory amounts);\r\n}\r\n\r\ninterface IController {\r\n    function vaults(address) external view returns (address);\r\n    function devfund() external view returns (address);\r\n    function treasury() external view returns (address);\r\n}\r\n\r\ninterface IMasterchef {\r\n    function notifyBuybackReward(uint256 _amount) external;\r\n}\r\n\r\nabstract contract StrategyBase {\r\n    using SafeERC20 for IERC20;\r\n    using Address for address;\r\n    using SafeMath for uint256;\r\n    \r\n    // caller whom this strategy trust \r\n    mapping(address => bool) public benignCallers;\r\n\r\n    // Perfomance fee 30% to buyback\r\n    uint256 public performanceFee = 30000;\r\n    uint256 public constant performanceMax = 100000;\r\n    \r\n    uint256 public treasuryFee = 0;\r\n    uint256 public constant treasuryMax = 100000;\r\n\r\n    uint256 public devFundFee = 0;\r\n    uint256 public constant devFundMax = 100000;\r\n\r\n    // delay yield profit realization\r\n    uint256 public delayBlockRequired = 1000;\r\n    uint256 public lastHarvestBlock;\r\n    uint256 public lastHarvestInWant;\r\n\r\n    // buyback ready\r\n    bool public buybackEnabled = true;\r\n    address public constant mmToken = 0xa283aA7CfBB27EF0cfBcb2493dD9F4330E0fd304;\r\n    address public constant masterChef = 0xf8873a6080e8dbF41ADa900498DE0951074af577;\r\n\r\n    // Tokens\r\n    address public want;\r\n    address public constant weth = 0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2;\r\n\r\n    // User accounts\r\n    address public governance;\r\n    address public controller;\r\n    address public strategist;\r\n    address public timelock;\r\n\r\n    address public constant univ2Router2 = 0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D;\r\n    address public constant sushiRouter = 0xd9e1cE17f2641f24aE83637ab66a2cca9C378B9F;\r\n\r\n    constructor(address _want, address _governance, address _strategist, address _controller, address _timelock) public {\r\n        require(_want != address(0));\r\n        require(_governance != address(0));\r\n        require(_strategist != address(0));\r\n        require(_controller != address(0));\r\n        require(_timelock != address(0));\r\n\r\n        want = _want;\r\n        governance = _governance;\r\n        strategist = _strategist;\r\n        controller = _controller;\r\n        timelock = _timelock;\r\n    }\r\n    \r\n    modifier onlyBenignCallers {\r\n        require(msg.sender == governance || msg.sender == strategist || benignCallers[msg.sender]);\r\n        _;\r\n    }\r\n\r\n    function balanceOfWant() public view returns (uint256) {\r\n        return IERC20(want).balanceOf(address(this));\r\n    }\r\n\r\n    function balanceOfPool() public virtual view returns (uint256);\r\n\r\n    function balanceOf() public view returns (uint256) {\r\n        uint256 delayReduction = 0;\r\n        uint256 currentBlock = block.number;\r\n        if (delayBlockRequired > 0 && lastHarvestInWant > 0 && currentBlock.sub(lastHarvestBlock) < delayBlockRequired){\r\n            uint256 diffBlock = lastHarvestBlock.add(delayBlockRequired).sub(currentBlock);\r\n            delayReduction = lastHarvestInWant.mul(diffBlock).mul(1e18).div(delayBlockRequired).div(1e18);\r\n        }\r\n        return balanceOfWant().add(balanceOfPool()).sub(delayReduction);\r\n    }\r\n\r\n    function setBenignCallers(address _caller, bool _enabled) external{\r\n        require(msg.sender == governance, \"!governance\");\r\n        benignCallers[_caller] = _enabled;\r\n    }\r\n\r\n    function setDelayBlockRequired(uint256 _delayBlockRequired) external {\r\n        require(msg.sender == governance, \"!governance\");\r\n        delayBlockRequired = _delayBlockRequired;\r\n    }\r\n\r\n    function setDevFundFee(uint256 _devFundFee) external {\r\n        require(msg.sender == timelock, \"!timelock\");\r\n        devFundFee = _devFundFee;\r\n    }\r\n\r\n    function setTreasuryFee(uint256 _treasuryFee) external {\r\n        require(msg.sender == timelock, \"!timelock\");\r\n        treasuryFee = _treasuryFee;\r\n    }\r\n\r\n    function setPerformanceFee(uint256 _performanceFee) external {\r\n        require(msg.sender == timelock, \"!timelock\");\r\n        performanceFee = _performanceFee;\r\n    }\r\n\r\n    function setStrategist(address _strategist) external {\r\n        require(msg.sender == governance, \"!governance\");\r\n        strategist = _strategist;\r\n    }\r\n\r\n    function setGovernance(address _governance) external {\r\n        require(msg.sender == governance, \"!governance\");\r\n        governance = _governance;\r\n    }\r\n\r\n    function setBuybackEnabled(bool _buybackEnabled) external {\r\n        require(msg.sender == governance, \"!governance\");\r\n        buybackEnabled = _buybackEnabled;\r\n    }\r\n    \r\n    function deposit() public virtual;\r\n\r\n    function withdraw(IERC20 _asset) external virtual returns (uint256 balance);\r\n    \r\n    function _withdrawNonWantAsset(IERC20 _asset) internal returns (uint256 balance) {\r\n        require(msg.sender == controller, \"!controller\");\r\n        require(want != address(_asset), \"want\");\r\n        balance = _asset.balanceOf(address(this));\r\n        _asset.safeTransfer(controller, balance);\r\n    }\r\n\r\n    function withdraw(uint256 _amount) external {\r\n        require(msg.sender == controller, \"!controller\");\r\n        uint256 _balance = IERC20(want).balanceOf(address(this));\r\n        if (_balance < _amount) {\r\n            _amount = _withdrawSome(_amount.sub(_balance));\r\n            _amount = _amount.add(_balance);\r\n        }\r\n\t\t\t\t\r\n        uint256 _feeDev = _amount.mul(devFundFee).div(devFundMax);\r\n        uint256 _feeTreasury = _amount.mul(treasuryFee).div(treasuryMax);\r\n\r\n        address _vault = IController(controller).vaults(address(want));\r\n\r\n        if (buybackEnabled == true && (_feeDev > 0 || _feeTreasury > 0)) {\r\n            (address _buybackPrinciple, uint256 _buybackAmount) = _convertWantToBuyback(_feeDev.add(_feeTreasury));\r\n            buybackAndNotify(_buybackPrinciple, _buybackAmount);\r\n        }\r\n\r\n        IERC20(want).safeTransfer(_vault, _amount.sub(_feeDev).sub(_feeTreasury));\r\n    }\r\n\t\r\n    function buybackAndNotify(address _buybackPrinciple, uint256 _buybackAmount) internal {\r\n        if (buybackEnabled == true && _buybackAmount > 0) {\r\n            _swapUniswap(_buybackPrinciple, mmToken, _buybackAmount);\r\n            uint256 _mmBought = IERC20(mmToken).balanceOf(address(this));\r\n            IERC20(mmToken).safeTransfer(masterChef, _mmBought);\r\n            IMasterchef(masterChef).notifyBuybackReward(_mmBought);\r\n        }\r\n    }\r\n\r\n    function withdrawAll() external returns (uint256 balance) {\r\n        require(msg.sender == controller, \"!controller\");\r\n        _withdrawSome(balanceOfPool());\r\n        balance = IERC20(want).balanceOf(address(this));\r\n        address _vault = IController(controller).vaults(address(want));\r\n        IERC20(want).safeTransfer(_vault, balance);\r\n    }\r\n\r\n    function _withdrawSome(uint256 _amount) internal virtual returns (uint256);\t\r\n\t\r\n    function _convertWantToBuyback(uint256 _lpAmount) internal virtual returns (address, uint256);\r\n    \r\n    function harvest() public virtual;\r\n    \r\n    function figureOutPath(address _from, address _to, uint256 _amount) public view returns (bool useSushi, address[] memory swapPath){\r\n        address[] memory path;\r\n        address[] memory sushipath;\r\n        \r\n        path = new address[](2);\r\n        path[0] = _from;\r\n        path[1] = _to;\r\n        \r\n        if (_to == mmToken && buybackEnabled == true) {\r\n            sushipath = new address[](2);\r\n            sushipath[0] = _from;\r\n            sushipath[1] = _to;\r\n        }\r\n\r\n        uint256 _sushiOut = sushipath.length > 0? UniswapRouterV2(sushiRouter).getAmountsOut(_amount, sushipath)[sushipath.length - 1] : 0;\r\n        uint256 _uniOut = sushipath.length > 0? UniswapRouterV2(univ2Router2).getAmountsOut(_amount, path)[path.length - 1] : 1;\r\n\r\n        bool useSushi = _sushiOut > _uniOut? true : false;\t\t\r\n        address[] memory swapPath = useSushi ? sushipath : path;\r\n\t\t\r\n        return (useSushi, swapPath);\r\n    }\r\n\t\r\n    function _swapUniswap(address _from, address _to, uint256 _amount) internal {\r\n        (bool useSushi, address[] memory swapPath) = figureOutPath(_from, _to, _amount);\r\n        address _router = useSushi? sushiRouter : univ2Router2;\r\n        _swapUniswapWithDetailConfig(_from, _to, _amount, 1, swapPath, _router);\r\n        \r\n    }\r\n\t\r\n    function _swapUniswapWithDetailConfig(address _from, address _to, uint256 _amount, uint256 _amountOutMin, address[] memory _swapPath, address _router) internal {\r\n        require(IERC20(_from).balanceOf(address(this)) >= _amount, '!notEnoughtAmountIn');\r\n        if (_amount > 0){\t\t\t\r\n            IERC20(_from).safeApprove(_router, 0);\r\n            IERC20(_from).safeApprove(_router, _amount);\r\n            UniswapRouterV2(_router).swapExactTokensForTokens(_amount, _amountOutMin, _swapPath, address(this), now);\r\n        }\r\n    }\r\n}\r\n\r\ninterface ICurveFi_2 {\r\n    function get_virtual_price() external view returns (uint256);\r\n    function calc_token_amount(uint256[2] calldata amounts, bool deposit) external view returns (uint256);\r\n    function remove_liquidity_one_coin(uint256 _token_amount, int128 i, uint256 min_amount) external;\r\n    function add_liquidity(uint256[2] calldata amounts, uint256 min_mint_amount) external;\r\n}\r\n\r\ninterface ICvxBaseRewardPool {\r\n    function getReward(address _account, bool _claimExtras) external returns(bool);\r\n    function earned(address account) external view returns (uint256);\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function withdrawAndUnwrap(uint256 amount, bool claim) external returns(bool);\r\n}\r\n\r\ninterface ICvxMinter {\r\n    function reductionPerCliff() external view returns (uint256);\r\n    function totalCliffs() external view returns (uint256);\r\n    function maxSupply() external view returns (uint256);\r\n}\r\n\r\ninterface ICvxBooster {\r\n    function depositAll(uint256 _pid, bool _stake) external returns(bool);\r\n}\r\n\r\ncontract StrategyCvxLINKV1 is StrategyBase {\r\n    // want token\r\n    address public constant link = 0x514910771AF9Ca656af840dff83E8264EcF986CA;\r\n    uint8 public want_decimals = 18;\r\n\r\n    // convex staking constants\r\n    address public stakingPool = 0xF403C135812408BFbE8713b5A23a04b3D48AAE31;\r\n    uint256 public stakingPoolId = 30;\r\n    address public constant rewardTokenCRV = 0xD533a949740bb3306d119CC777fa900bA034cd52; \r\n    address public constant rewardTokenCVX = 0x4e3FBD56CD56c3e72c1403e103b45Db9da5B9D2B;\r\n    address public rewardPool = 0x9700152175dc22E7d1f3245fE3c1D2cfa3602548;\r\n\t\r\n    // curve constants\r\n    address public constant curvePool = 0xF178C0b5Bb7e7aBF4e12A4838C7b7c5bA2C623c0;\r\n    address public constant linkcrv = 0xcee60cFa923170e4f8204AE08B4fA6A3F5656F3a;\r\n\t\t\r\n    // slippage protection for one-sided ape in/out\r\n    uint256 public slippageProtectionIn = 50; // max 0.5%\r\n    uint256 public slippageProtectionOut = 50; // max 0.5%\r\n    uint256 public constant DENOMINATOR = 10000;\r\n\r\n    constructor(\r\n        address _governance,\r\n        address _strategist,\r\n        address _controller,\r\n        address _timelock\r\n    )\r\n        public StrategyBase(link, _governance, _strategist, _controller, _timelock)\r\n    {\t\t        \r\n        IERC20(link).safeApprove(curvePool, uint256(-1));\r\n        IERC20(linkcrv).safeApprove(curvePool, uint256(-1));\r\n        IERC20(linkcrv).safeApprove(stakingPool, uint256(-1));\r\n        want_decimals = ERC20(link).decimals();\r\n    }\r\n\r\n    // **** Views **** //\r\n    \r\n    function setSlippageProtection(uint256 _in, uint256 _out) public{\r\n        require(msg.sender == governance, \"!governance\");\r\n        require(_in < DENOMINATOR && _in > 0, \"!_in\");\r\n        require(_out < DENOMINATOR && _out > 0, \"!_out\");\r\n        slippageProtectionIn = _in;\r\n        slippageProtectionOut = _out;\r\n    }\r\n\r\n    function setStakingPoolId(uint256 _poolId) public{\r\n        require(msg.sender == governance, \"!governance\");\r\n        stakingPoolId = _poolId;\r\n    }\r\n\r\n    function setStakingPool(address _pool) public{\r\n        require(msg.sender == governance, \"!governance\");\r\n        stakingPool = _pool;\r\n        IERC20(linkcrv).safeApprove(stakingPool, uint256(-1));\r\n    }\r\n\r\n    function setRewardPool(address _pool) public{\r\n        require(msg.sender == governance, \"!governance\");\r\n        rewardPool = _pool;\r\n    }\r\n\r\n    function _convertWantToBuyback(uint256 _lpAmount) internal override returns (address, uint256){\r\n        require(_lpAmount > 0, '!_lpAmount');\r\n\t\t\r\n        _swapUniswap(want, weth, _lpAmount);\r\n        uint256 _weth = IERC20(weth).balanceOf(address(this));\r\n        return (weth, _weth);\r\n    }\r\n\r\n    function harvest() public override onlyBenignCallers {\r\n\r\n        // Collects reward tokens\r\n        ICvxBaseRewardPool(rewardPool).getReward(address(this), true);\r\n\t\t\r\n        uint256 _rewardCRV = IERC20(rewardTokenCRV).balanceOf(address(this));\r\n        uint256 _rewardCVX = IERC20(rewardTokenCVX).balanceOf(address(this));\r\n\r\n        if (_rewardCRV > 0) {\r\n            address[] memory _swapPath = new address[](2);\r\n            _swapPath[0] = rewardTokenCRV;\r\n            _swapPath[1] = weth;\r\n            _swapUniswapWithDetailConfig(rewardTokenCRV, weth, _rewardCRV, 1, _swapPath, sushiRouter);\r\n        }\r\n\r\n        if (_rewardCVX > 0) {\r\n            address[] memory _swapPath = new address[](2);\r\n            _swapPath[0] = rewardTokenCVX;\r\n            _swapPath[1] = weth;\r\n            _swapUniswapWithDetailConfig(rewardTokenCVX, weth, _rewardCVX, 1, _swapPath, sushiRouter);\r\n        }\r\n\t\t\r\n        uint256 _wethAmount = IERC20(weth).balanceOf(address(this));\r\n        if (_wethAmount > 0){\t\r\n            uint256 _buybackLpAmount = _wethAmount.mul(performanceFee).div(performanceMax);\r\n            if (buybackEnabled == true && _buybackLpAmount > 0){\r\n                buybackAndNotify(weth, _buybackLpAmount);\r\n            }\r\n             \r\n            _swapUniswap(weth, want, IERC20(weth).balanceOf(address(this)));\r\n            uint256 _wantBal = IERC20(want).balanceOf(address(this));\r\n            if (_wantBal > 0){\r\n                lastHarvestBlock = block.number;\r\n                lastHarvestInWant = _wantBal;\r\n                deposit();\r\n            }\r\n        }\r\n    }\r\n\r\n    function deposit() public override {\r\n        uint256 _wantAmt = IERC20(want).balanceOf(address(this));\r\n        uint256 _expectedOut = _wantAmt.mul(1e18).div(virtualPriceToWant());\r\n        uint256 _maxSlip = _expectedOut.mul(DENOMINATOR.sub(slippageProtectionIn)).div(DENOMINATOR);\r\n        if (_wantAmt > 0 && checkSlip(_wantAmt, _maxSlip)) {\r\n            uint256[2] memory amounts = [_wantAmt, 0];\r\n            ICurveFi_2(curvePool).add_liquidity(amounts, _maxSlip);\r\n        }\r\n\t\t\r\n        uint256 _lpAmt = IERC20(linkcrv).balanceOf(address(this));\r\n        require(_lpAmt > 0, \"!_lpAmt\");\r\n        ICvxBooster(stakingPool).depositAll(stakingPoolId, true);\r\n    }\r\n\r\n    function _withdrawSome(uint256 _amount) internal override returns (uint256) {\r\n        if (_amount == 0){\r\n            return 0;\r\n        }\r\n\t\t\r\n        uint256 _wantBefore = IERC20(want).balanceOf(address(this));\r\n\t\r\n        uint256 requiredWant = estimateRequiredLP(_amount);\r\n        requiredWant = requiredWant.mul(DENOMINATOR.add(slippageProtectionOut)).div(DENOMINATOR);// try to remove bit more\r\n\t\t\r\n        uint256 _lpAmount = IERC20(linkcrv).balanceOf(address(this));\r\n        uint256 _withdrawFromStaking = _lpAmount < requiredWant? requiredWant.sub(_lpAmount) : 0;\r\n\t\t\t\r\n        if (_withdrawFromStaking > 0){\r\n            uint256 maxInStaking = ICvxBaseRewardPool(rewardPool).balanceOf(address(this));\r\n            uint256 _toWithdraw = maxInStaking < _withdrawFromStaking? maxInStaking : _withdrawFromStaking;\t\t\r\n            ICvxBaseRewardPool(rewardPool).withdrawAndUnwrap(_toWithdraw, false);\t\t\t\r\n        }\r\n\t\t    \t\r\n        _lpAmount = IERC20(linkcrv).balanceOf(address(this));\r\n        if (_lpAmount > 0){\r\n            requiredWant = requiredWant > _lpAmount?  _lpAmount : requiredWant;\r\n\r\n            uint256 maxSlippage = requiredWant.mul(DENOMINATOR.sub(slippageProtectionOut)).div(DENOMINATOR);\r\n\r\n            if (want_decimals < 18) {\r\n                maxSlippage = maxSlippage.div(10**(uint256(uint8(18) - want_decimals)));\r\n            }\r\n            ICurveFi_2(curvePool).remove_liquidity_one_coin(requiredWant, 0, maxSlippage);\r\n        }\r\n\t\t\r\n        uint256 _wantAfter = IERC20(want).balanceOf(address(this));\t\t\r\n        return _wantAfter.sub(_wantBefore);\r\n    }\r\n\r\n    // Controller only function for creating additional rewards from dust\r\n    function withdraw(IERC20 _asset) external override returns (uint256 balance) {\r\n        require(address(_asset) != want, 'wantToken');\r\n        require(address(_asset) != linkcrv, 'lpToken');\r\n        balance = _withdrawNonWantAsset(_asset);\r\n    }\r\n\t\r\n    function virtualPriceToWant() public view returns (uint256) {\r\n        if (want_decimals < 18){\r\n            return ICurveFi_2(curvePool).get_virtual_price().div(10 ** (uint256(uint8(18) - want_decimals)));\r\n        }else{\r\n            return ICurveFi_2(curvePool).get_virtual_price();\r\n        }\r\n    }\r\n\t\r\n    function estimateRequiredLP(uint256 _wantAmt) public view returns (uint256) {\r\n        return _wantAmt.mul(1e18).div(virtualPriceToWant());\r\n    }\r\n\t\r\n    function checkSlip(uint256 _wantAmt, uint256 _maxSlip) public view returns (bool){\r\n        uint256[2] memory amounts = [_wantAmt, 0];\r\n        return ICurveFi_2(curvePool).calc_token_amount(amounts, true) >= _maxSlip;\r\n    }\r\n\t\r\n    function crvLPToWant(uint256 _lpAmount) public view returns (uint256) {\r\n        if (_lpAmount == 0){\r\n            return 0;\r\n        }\r\n        uint256 virtualOut = virtualPriceToWant().mul(_lpAmount).div(1e18);\r\n        return virtualOut; \r\n    }\r\n\t\r\n    function balanceOfPool() public override view returns (uint256){\r\n        uint256 lpAmt = ICvxBaseRewardPool(rewardPool).balanceOf(address(this));\r\n        lpAmt = lpAmt.add(IERC20(linkcrv).balanceOf(address(this)));\r\n        return crvLPToWant(lpAmt);\r\n    }\r\n\r\n    // only include CRV earned\r\n    function getHarvestable() public view returns (uint256) {\r\n        return ICvxBaseRewardPool(rewardPool).earned(address(this));\r\n    }\r\n\t\r\n    // https://etherscan.io/address/0x4e3fbd56cd56c3e72c1403e103b45db9da5b9d2b#code#L1091\r\n    function mintableCVX(uint256 _amount) public view returns (uint256) {\r\n        uint256 _toMint = 0;\r\n        uint256 supply = IERC20(rewardTokenCVX).totalSupply();\r\n        uint256 cliff = supply.div(ICvxMinter(rewardTokenCVX).reductionPerCliff());\r\n        uint256 totalCliffs = ICvxMinter(rewardTokenCVX).totalCliffs();\r\n        if (cliff < totalCliffs){\r\n            uint256 reduction = totalCliffs.sub(cliff);\r\n            _amount = _amount.mul(reduction).div(totalCliffs);\r\n            uint256 amtTillMax = ICvxMinter(rewardTokenCVX).maxSupply().sub(supply);\r\n            if (_amount > amtTillMax){\r\n                _amount = amtTillMax;\r\n            }\r\n            _toMint = _amount;\r\n        }\r\n        return _toMint;\r\n    }\r\n\r\n    function getHarvestableCVX() public view returns (uint256) {\r\n        uint256 _crvEarned = getHarvestable();\r\n        return mintableCVX(_crvEarned);\r\n    }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_governance\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_strategist\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_controller\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_timelock\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"DENOMINATOR\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"balanceOfPool\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"balanceOfWant\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"benignCallers\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buybackEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_wantAmt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_maxSlip\",\"type\":\"uint256\"}],\"name\":\"checkSlip\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"controller\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_lpAmount\",\"type\":\"uint256\"}],\"name\":\"crvLPToWant\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"curvePool\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"delayBlockRequired\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"devFundFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"devFundMax\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_wantAmt\",\"type\":\"uint256\"}],\"name\":\"estimateRequiredLP\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"figureOutPath\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"useSushi\",\"type\":\"bool\"},{\"internalType\":\"address[]\",\"name\":\"swapPath\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getHarvestable\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getHarvestableCVX\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"governance\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"harvest\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastHarvestBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastHarvestInWant\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"link\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"linkcrv\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"masterChef\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"mintableCVX\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mmToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"performanceFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"performanceMax\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardPool\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardTokenCRV\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardTokenCVX\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_caller\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_enabled\",\"type\":\"bool\"}],\"name\":\"setBenignCallers\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_buybackEnabled\",\"type\":\"bool\"}],\"name\":\"setBuybackEnabled\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_delayBlockRequired\",\"type\":\"uint256\"}],\"name\":\"setDelayBlockRequired\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_devFundFee\",\"type\":\"uint256\"}],\"name\":\"setDevFundFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_governance\",\"type\":\"address\"}],\"name\":\"setGovernance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_performanceFee\",\"type\":\"uint256\"}],\"name\":\"setPerformanceFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_pool\",\"type\":\"address\"}],\"name\":\"setRewardPool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_in\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_out\",\"type\":\"uint256\"}],\"name\":\"setSlippageProtection\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_pool\",\"type\":\"address\"}],\"name\":\"setStakingPool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_poolId\",\"type\":\"uint256\"}],\"name\":\"setStakingPoolId\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_strategist\",\"type\":\"address\"}],\"name\":\"setStrategist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_treasuryFee\",\"type\":\"uint256\"}],\"name\":\"setTreasuryFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"slippageProtectionIn\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"slippageProtectionOut\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakingPool\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakingPoolId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"strategist\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sushiRouter\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"timelock\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"treasuryFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"treasuryMax\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"univ2Router2\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"virtualPriceToWant\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"want\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"want_decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"weth\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"_asset\",\"type\":\"address\"}],\"name\":\"withdraw\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawAll\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"StrategyCvxLINKV1","CompilerVersion":"v0.6.12+commit.27d51765","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"00000000000000000000000043229759e12efbe3e2a0fb0510b15e516d0464420000000000000000000000000bd1d668d8e83d14252f2e01d5873df77a6511f00000000000000000000000004bf5059065541a2b176500928e91fbfd0b121d070000000000000000000000005dae9b27313670663b34ac8bffd18825bb9df736","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://23e528fdeadec31cafbfbbf3cb9cab6b5248b1dbaabbb703c767b94ef462c2ca"}]}