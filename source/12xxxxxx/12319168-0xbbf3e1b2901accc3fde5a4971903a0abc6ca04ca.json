{"status":"1","message":"OK","result":[{"SourceCode":"// File: contracts\\lib\\IERC20.sol\r\n\r\n// SPDX-License-Identifier: GPL-3.0-or-later\r\n\r\npragma solidity ^0.8.3;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n// File: contracts\\interface\\INestMining.sol\r\n\r\n/// @dev This interface defines the mining methods for nest\r\ninterface INestMining {\r\n    \r\n    /// @dev Post event\r\n    /// @param tokenAddress The address of TOKEN contract\r\n    /// @param miner Address of miner\r\n    /// @param index Index of the price sheet\r\n    /// @param ethNum The numbers of ethers to post sheets\r\n    event Post(address tokenAddress, address miner, uint index, uint ethNum, uint price);\r\n\r\n    /* ========== Structures ========== */\r\n    \r\n    /// @dev Nest mining configuration structure\r\n    struct Config {\r\n        \r\n        // Eth number of each post. 30\r\n        // We can stop post and taking orders by set postEthUnit to 0 (closing and withdraw are not affected)\r\n        uint32 postEthUnit;\r\n\r\n        // Post fee(0.0001eth，DIMI_ETHER). 1000\r\n        uint16 postFeeUnit;\r\n\r\n        // Proportion of miners digging(10000 based). 8000\r\n        uint16 minerNestReward;\r\n        \r\n        // The proportion of token dug by miners is only valid for the token created in version 3.0\r\n        // (10000 based). 9500\r\n        uint16 minerNTokenReward;\r\n\r\n        // When the circulation of ntoken exceeds this threshold, post() is prohibited(Unit: 10000 ether). 500\r\n        uint32 doublePostThreshold;\r\n        \r\n        // The limit of ntoken mined blocks. 100\r\n        uint16 ntokenMinedBlockLimit;\r\n\r\n        // -- Public configuration\r\n        // The number of times the sheet assets have doubled. 4\r\n        uint8 maxBiteNestedLevel;\r\n        \r\n        // Price effective block interval. 20\r\n        uint16 priceEffectSpan;\r\n\r\n        // The amount of nest to pledge for each post（Unit: 1000). 100\r\n        uint16 pledgeNest;\r\n    }\r\n\r\n    /// @dev PriceSheetView structure\r\n    struct PriceSheetView {\r\n        \r\n        // Index of the price sheeet\r\n        uint32 index;\r\n\r\n        // Address of miner\r\n        address miner;\r\n\r\n        // The block number of this price sheet packaged\r\n        uint32 height;\r\n\r\n        // The remain number of this price sheet\r\n        uint32 remainNum;\r\n\r\n        // The eth number which miner will got\r\n        uint32 ethNumBal;\r\n\r\n        // The eth number which equivalent to token's value which miner will got\r\n        uint32 tokenNumBal;\r\n\r\n        // The pledged number of nest in this sheet. (Unit: 1000nest)\r\n        uint24 nestNum1k;\r\n\r\n        // The level of this sheet. 0 expresses initial price sheet, a value greater than 0 expresses bite price sheet\r\n        uint8 level;\r\n\r\n        // Post fee shares, if there are many sheets in one block, this value is used to divide up mining value\r\n        uint8 shares;\r\n\r\n        // The token price. (1eth equivalent to (price) token)\r\n        uint152 price;\r\n    }\r\n\r\n    /* ========== Configuration ========== */\r\n\r\n    /// @dev Modify configuration\r\n    /// @param config Configuration object\r\n    function setConfig(Config memory config) external;\r\n\r\n    /// @dev Get configuration\r\n    /// @return Configuration object\r\n    function getConfig() external view returns (Config memory);\r\n\r\n    /// @dev Set the ntokenAddress from tokenAddress, if ntokenAddress is equals to tokenAddress, means the token is disabled\r\n    /// @param tokenAddress Destination token address\r\n    /// @param ntokenAddress The ntoken address\r\n    function setNTokenAddress(address tokenAddress, address ntokenAddress) external;\r\n\r\n    /// @dev Get the ntokenAddress from tokenAddress, if ntokenAddress is equals to tokenAddress, means the token is disabled\r\n    /// @param tokenAddress Destination token address\r\n    /// @return The ntoken address\r\n    function getNTokenAddress(address tokenAddress) external view returns (address);\r\n\r\n    /* ========== Mining ========== */\r\n\r\n    /// @notice Post a price sheet for TOKEN\r\n    /// @dev It is for TOKEN (except USDT and NTOKENs) whose NTOKEN has a total supply below a threshold (e.g. 5,000,000 * 1e18)\r\n    /// @param tokenAddress The address of TOKEN contract\r\n    /// @param ethNum The numbers of ethers to post sheets\r\n    /// @param tokenAmountPerEth The price of TOKEN\r\n    function post(address tokenAddress, uint ethNum, uint tokenAmountPerEth) external payable;\r\n\r\n    /// @notice Post two price sheets for a token and its ntoken simultaneously \r\n    /// @dev Support dual-posts for TOKEN/NTOKEN, (ETH, TOKEN) + (ETH, NTOKEN)\r\n    /// @param tokenAddress The address of TOKEN contract\r\n    /// @param ethNum The numbers of ethers to post sheets\r\n    /// @param tokenAmountPerEth The price of TOKEN\r\n    /// @param ntokenAmountPerEth The price of NTOKEN\r\n    function post2(address tokenAddress, uint ethNum, uint tokenAmountPerEth, uint ntokenAmountPerEth) external payable;\r\n\r\n    /// @notice Call the function to buy TOKEN/NTOKEN from a posted price sheet\r\n    /// @dev bite TOKEN(NTOKEN) by ETH,  (+ethNumBal, -tokenNumBal)\r\n    /// @param tokenAddress The address of token(ntoken)\r\n    /// @param index The position of the sheet in priceSheetList[token]\r\n    /// @param takeNum The amount of biting (in the unit of ETH), realAmount = takeNum * newTokenAmountPerEth\r\n    /// @param newTokenAmountPerEth The new price of token (1 ETH : some TOKEN), here some means newTokenAmountPerEth\r\n    function takeToken(address tokenAddress, uint index, uint takeNum, uint newTokenAmountPerEth) external payable;\r\n\r\n    /// @notice Call the function to buy ETH from a posted price sheet\r\n    /// @dev bite ETH by TOKEN(NTOKEN),  (-ethNumBal, +tokenNumBal)\r\n    /// @param tokenAddress The address of token(ntoken)\r\n    /// @param index The position of the sheet in priceSheetList[token]\r\n    /// @param takeNum The amount of biting (in the unit of ETH), realAmount = takeNum\r\n    /// @param newTokenAmountPerEth The new price of token (1 ETH : some TOKEN), here some means newTokenAmountPerEth\r\n    function takeEth(address tokenAddress, uint index, uint takeNum, uint newTokenAmountPerEth) external payable;\r\n    \r\n    /// @notice Close a price sheet of (ETH, USDx) | (ETH, NEST) | (ETH, TOKEN) | (ETH, NTOKEN)\r\n    /// @dev Here we allow an empty price sheet (still in VERIFICATION-PERIOD) to be closed \r\n    /// @param tokenAddress The address of TOKEN contract\r\n    /// @param index The index of the price sheet w.r.t. `token`\r\n    function close(address tokenAddress, uint index) external;\r\n\r\n    /// @notice Close a batch of price sheets passed VERIFICATION-PHASE\r\n    /// @dev Empty sheets but in VERIFICATION-PHASE aren't allowed\r\n    /// @param tokenAddress The address of TOKEN contract\r\n    /// @param indices A list of indices of sheets w.r.t. `token`\r\n    function closeList(address tokenAddress, uint[] memory indices) external;\r\n\r\n    /// @notice Close two batch of price sheets passed VERIFICATION-PHASE\r\n    /// @dev Empty sheets but in VERIFICATION-PHASE aren't allowed\r\n    /// @param tokenAddress The address of TOKEN1 contract\r\n    /// @param tokenIndices A list of indices of sheets w.r.t. `token`\r\n    /// @param ntokenIndices A list of indices of sheets w.r.t. `ntoken`\r\n    function closeList2(address tokenAddress, uint[] memory tokenIndices, uint[] memory ntokenIndices) external;\r\n\r\n    /// @dev The function updates the statistics of price sheets\r\n    ///     It calculates from priceInfo to the newest that is effective.\r\n    function stat(address tokenAddress) external;\r\n\r\n    /// @dev Settlement Commission\r\n    /// @param tokenAddress The token address\r\n    function settle(address tokenAddress) external;\r\n\r\n    /// @dev List sheets by page\r\n    /// @param tokenAddress Destination token address\r\n    /// @param offset Skip previous (offset) records\r\n    /// @param count Return (count) records\r\n    /// @param order Order. 0 reverse order, non-0 positive order\r\n    /// @return List of price sheets\r\n    function list(address tokenAddress, uint offset, uint count, uint order) external view returns (PriceSheetView[] memory);\r\n\r\n    /// @dev Estimated mining amount\r\n    /// @param tokenAddress Destination token address\r\n    /// @return Estimated mining amount\r\n    function estimate(address tokenAddress) external view returns (uint);\r\n\r\n    /// @dev Query the quantity of the target quotation\r\n    /// @param tokenAddress Token address. The token can't mine. Please make sure you don't use the token address when calling\r\n    /// @param index The index of the sheet\r\n    /// @return minedBlocks Mined block period from previous block\r\n    /// @return totalShares Total shares of sheets in the block\r\n    function getMinedBlocks(address tokenAddress, uint index) external view returns (uint minedBlocks, uint totalShares);\r\n\r\n    /* ========== Accounts ========== */\r\n\r\n    /// @dev Withdraw assets\r\n    /// @param tokenAddress Destination token address\r\n    /// @param value The value to withdraw\r\n    function withdraw(address tokenAddress, uint value) external;\r\n\r\n    /// @dev View the number of assets specified by the user\r\n    /// @param tokenAddress Destination token address\r\n    /// @param addr Destination address\r\n    /// @return Number of assets\r\n    function balanceOf(address tokenAddress, address addr) external view returns (uint);\r\n\r\n    /// @dev Gets the address corresponding to the given index number\r\n    /// @param index The index number of the specified address\r\n    /// @return The address corresponding to the given index number\r\n    function indexAddress(uint index) external view returns (address);\r\n    \r\n    /// @dev Gets the registration index number of the specified address\r\n    /// @param addr Destination address\r\n    /// @return 0 means nonexistent, non-0 means index number\r\n    function getAccountIndex(address addr) external view returns (uint);\r\n\r\n    /// @dev Get the length of registered account array\r\n    /// @return The length of registered account array\r\n    function getAccountCount() external view returns (uint);\r\n}\r\n\r\n// File: contracts\\interface\\INestVote.sol\r\n\r\n/// @dev This interface defines the methods for voting\r\ninterface INestVote {\r\n\r\n    /// @dev Event of submitting a voting proposal\r\n    /// @param proposer Proposer address\r\n    /// @param contractAddress The contract address which will be executed when the proposal is approved. (Must implemented IVotePropose)\r\n    /// @param index Index of proposal\r\n    event NIPSubmitted(address proposer, address contractAddress, uint index);\r\n\r\n    /// @dev Voting event\r\n    /// @param voter Voter address\r\n    /// @param index Index of proposal\r\n    /// @param amount Amount of nest to vote\r\n    event NIPVote(address voter, uint index, uint amount);\r\n\r\n    /// @dev Proposal execute event\r\n    /// @param executor Executor address\r\n    /// @param index Index of proposal\r\n    event NIPExecute(address executor, uint index);\r\n\r\n    /// @dev Voting contract configuration structure\r\n    struct Config {\r\n\r\n        // Proportion of votes required (10000 based). 5100\r\n        uint32 acceptance;\r\n\r\n        // Voting time cycle (seconds). 5 * 86400\r\n        uint64 voteDuration;\r\n\r\n        // The number of nest votes need to be staked. 100000 nest\r\n        uint96 proposalStaking;\r\n    }\r\n\r\n    // Proposal\r\n    struct ProposalView {\r\n\r\n        // Index of proposal\r\n        uint index;\r\n        \r\n        // The immutable field and the variable field are stored separately\r\n        /* ========== Immutable field ========== */\r\n\r\n        // Brief of this proposal\r\n        string brief;\r\n\r\n        // The contract address which will be executed when the proposal is approved. (Must implemented IVotePropose)\r\n        address contractAddress;\r\n\r\n        // Voting start time\r\n        uint48 startTime;\r\n\r\n        // Voting stop time\r\n        uint48 stopTime;\r\n\r\n        // Proposer\r\n        address proposer;\r\n\r\n        // Staked nest amount\r\n        uint96 staked;\r\n\r\n        /* ========== Mutable field ========== */\r\n\r\n        // Gained value\r\n        // The maximum value of uint96 can be expressed as 79228162514264337593543950335, which is more than the total \r\n        // number of nest 10000000000 ether. Therefore, uint96 can be used to express the total number of votes\r\n        uint96 gainValue;\r\n\r\n        // The state of this proposal\r\n        uint32 state;  // 0: proposed | 1: accepted | 2: cancelled\r\n\r\n        // The executor of this proposal\r\n        address executor;\r\n\r\n        // The execution time (if any, such as block number or time stamp) is placed in the contract and is limited by the contract itself\r\n\r\n        // Circulation of nest\r\n        uint96 nestCirculation;\r\n    }\r\n    \r\n    /// @dev Modify configuration\r\n    /// @param config Configuration object\r\n    function setConfig(Config memory config) external;\r\n\r\n    /// @dev Get configuration\r\n    /// @return Configuration object\r\n    function getConfig() external view returns (Config memory);\r\n\r\n    /* ========== VOTE ========== */\r\n    \r\n    /// @dev Initiate a voting proposal\r\n    /// @param contractAddress The contract address which will be executed when the proposal is approved. (Must implemented IVotePropose)\r\n    /// @param brief Brief of this propose\r\n    function propose(address contractAddress, string memory brief) external;\r\n\r\n    /// @dev vote\r\n    /// @param index Index of proposal\r\n    /// @param value Amount of nest to vote\r\n    function vote(uint index, uint value) external;\r\n\r\n    /// @dev Withdraw the nest of the vote. If the target vote is in the voting state, the corresponding number of votes will be cancelled\r\n    /// @param index Index of the proposal\r\n    function withdraw(uint index) external;\r\n\r\n    /// @dev Execute the proposal\r\n    /// @param index Index of the proposal\r\n    function execute(uint index) external;\r\n\r\n    /// @dev Cancel the proposal\r\n    /// @param index Index of the proposal\r\n    function cancel(uint index) external;\r\n\r\n    /// @dev Get proposal information\r\n    /// @param index Index of the proposal\r\n    /// @return Proposal information\r\n    function getProposeInfo(uint index) external view returns (ProposalView memory);\r\n\r\n    /// @dev Get the cumulative number of voting proposals\r\n    /// @return The cumulative number of voting proposals\r\n    function getProposeCount() external view returns (uint);\r\n\r\n    /// @dev List proposals by page\r\n    /// @param offset Skip previous (offset) records\r\n    /// @param count Return (count) records\r\n    /// @param order Order. 0 reverse order, non-0 positive order\r\n    /// @return List of price proposals\r\n    function list(uint offset, uint count, uint order) external view returns (ProposalView[] memory);\r\n\r\n    /// @dev Get Circulation of nest\r\n    /// @return Circulation of nest\r\n    function getNestCirculation() external view returns (uint);\r\n\r\n    /// @dev Upgrades a proxy to the newest implementation of a contract\r\n    /// @param proxyAdmin The address of ProxyAdmin\r\n    /// @param proxy Proxy to be upgraded\r\n    /// @param implementation the address of the Implementation\r\n    function upgradeProxy(address proxyAdmin, address proxy, address implementation) external;\r\n\r\n    /// @dev Transfers ownership of the contract to a new account (`newOwner`)\r\n    ///      Can only be called by the current owner\r\n    /// @param proxyAdmin The address of ProxyAdmin\r\n    /// @param newOwner The address of new owner\r\n    function transferUpgradeAuthority(address proxyAdmin, address newOwner) external;\r\n}\r\n\r\n// File: contracts\\interface\\IVotePropose.sol\r\n\r\n/// @dev Interface to be implemented for voting contract\r\ninterface IVotePropose {\r\n\r\n    /// @dev Methods to be called after approved\r\n    function run() external;\r\n}\r\n\r\n// File: contracts\\interface\\INestMapping.sol\r\n\r\n/// @dev The interface defines methods for nest builtin contract address mapping\r\ninterface INestMapping {\r\n\r\n    /// @dev Set the built-in contract address of the system\r\n    /// @param nestTokenAddress Address of nest token contract\r\n    /// @param nestNodeAddress Address of nest node contract\r\n    /// @param nestLedgerAddress INestLedger implementation contract address\r\n    /// @param nestMiningAddress INestMining implementation contract address for nest\r\n    /// @param ntokenMiningAddress INestMining implementation contract address for ntoken\r\n    /// @param nestPriceFacadeAddress INestPriceFacade implementation contract address\r\n    /// @param nestVoteAddress INestVote implementation contract address\r\n    /// @param nestQueryAddress INestQuery implementation contract address\r\n    /// @param nnIncomeAddress NNIncome contract address\r\n    /// @param nTokenControllerAddress INTokenController implementation contract address\r\n    function setBuiltinAddress(\r\n        address nestTokenAddress,\r\n        address nestNodeAddress,\r\n        address nestLedgerAddress,\r\n        address nestMiningAddress,\r\n        address ntokenMiningAddress,\r\n        address nestPriceFacadeAddress,\r\n        address nestVoteAddress,\r\n        address nestQueryAddress,\r\n        address nnIncomeAddress,\r\n        address nTokenControllerAddress\r\n    ) external;\r\n\r\n    /// @dev Get the built-in contract address of the system\r\n    /// @return nestTokenAddress Address of nest token contract\r\n    /// @return nestNodeAddress Address of nest node contract\r\n    /// @return nestLedgerAddress INestLedger implementation contract address\r\n    /// @return nestMiningAddress INestMining implementation contract address for nest\r\n    /// @return ntokenMiningAddress INestMining implementation contract address for ntoken\r\n    /// @return nestPriceFacadeAddress INestPriceFacade implementation contract address\r\n    /// @return nestVoteAddress INestVote implementation contract address\r\n    /// @return nestQueryAddress INestQuery implementation contract address\r\n    /// @return nnIncomeAddress NNIncome contract address\r\n    /// @return nTokenControllerAddress INTokenController implementation contract address\r\n    function getBuiltinAddress() external view returns (\r\n        address nestTokenAddress,\r\n        address nestNodeAddress,\r\n        address nestLedgerAddress,\r\n        address nestMiningAddress,\r\n        address ntokenMiningAddress,\r\n        address nestPriceFacadeAddress,\r\n        address nestVoteAddress,\r\n        address nestQueryAddress,\r\n        address nnIncomeAddress,\r\n        address nTokenControllerAddress\r\n    );\r\n\r\n    /// @dev Get address of nest token contract\r\n    /// @return Address of nest token contract\r\n    function getNestTokenAddress() external view returns (address);\r\n\r\n    /// @dev Get address of nest node contract\r\n    /// @return Address of nest node contract\r\n    function getNestNodeAddress() external view returns (address);\r\n\r\n    /// @dev Get INestLedger implementation contract address\r\n    /// @return INestLedger implementation contract address\r\n    function getNestLedgerAddress() external view returns (address);\r\n\r\n    /// @dev Get INestMining implementation contract address for nest\r\n    /// @return INestMining implementation contract address for nest\r\n    function getNestMiningAddress() external view returns (address);\r\n\r\n    /// @dev Get INestMining implementation contract address for ntoken\r\n    /// @return INestMining implementation contract address for ntoken\r\n    function getNTokenMiningAddress() external view returns (address);\r\n\r\n    /// @dev Get INestPriceFacade implementation contract address\r\n    /// @return INestPriceFacade implementation contract address\r\n    function getNestPriceFacadeAddress() external view returns (address);\r\n\r\n    /// @dev Get INestVote implementation contract address\r\n    /// @return INestVote implementation contract address\r\n    function getNestVoteAddress() external view returns (address);\r\n\r\n    /// @dev Get INestQuery implementation contract address\r\n    /// @return INestQuery implementation contract address\r\n    function getNestQueryAddress() external view returns (address);\r\n\r\n    /// @dev Get NNIncome contract address\r\n    /// @return NNIncome contract address\r\n    function getNnIncomeAddress() external view returns (address);\r\n\r\n    /// @dev Get INTokenController implementation contract address\r\n    /// @return INTokenController implementation contract address\r\n    function getNTokenControllerAddress() external view returns (address);\r\n\r\n    /// @dev Registered address. The address registered here is the address accepted by nest system\r\n    /// @param key The key\r\n    /// @param addr Destination address. 0 means to delete the registration information\r\n    function registerAddress(string memory key, address addr) external;\r\n\r\n    /// @dev Get registered address\r\n    /// @param key The key\r\n    /// @return Destination address. 0 means empty\r\n    function checkAddress(string memory key) external view returns (address);\r\n}\r\n\r\n// File: contracts\\interface\\INestGovernance.sol\r\n\r\n/// @dev This interface defines the governance methods\r\ninterface INestGovernance is INestMapping {\r\n\r\n    /// @dev Set governance authority\r\n    /// @param addr Destination address\r\n    /// @param flag Weight. 0 means to delete the governance permission of the target address. Weight is not \r\n    ///        implemented in the current system, only the difference between authorized and unauthorized. \r\n    ///        Here, a uint96 is used to represent the weight, which is only reserved for expansion\r\n    function setGovernance(address addr, uint flag) external;\r\n\r\n    /// @dev Get governance rights\r\n    /// @param addr Destination address\r\n    /// @return Weight. 0 means to delete the governance permission of the target address. Weight is not \r\n    ///        implemented in the current system, only the difference between authorized and unauthorized. \r\n    ///        Here, a uint96 is used to represent the weight, which is only reserved for expansion\r\n    function getGovernance(address addr) external view returns (uint);\r\n\r\n    /// @dev Check whether the target address has governance rights for the given target\r\n    /// @param addr Destination address\r\n    /// @param flag Permission weight. The permission of the target address must be greater than this weight to pass the check\r\n    /// @return True indicates permission\r\n    function checkGovernance(address addr, uint flag) external view returns (bool);\r\n}\r\n\r\n// File: contracts\\interface\\IProxyAdmin.sol\r\n\r\n/// @dev This interface defines the ProxyAdmin methods\r\ninterface IProxyAdmin {\r\n\r\n    /// @dev Upgrades a proxy to the newest implementation of a contract\r\n    /// @param proxy Proxy to be upgraded\r\n    /// @param implementation the address of the Implementation\r\n    function upgrade(address proxy, address implementation) external;\r\n\r\n    /// @dev Transfers ownership of the contract to a new account (`newOwner`)\r\n    ///      Can only be called by the current owner\r\n    /// @param newOwner The address of new owner\r\n    function transferOwnership(address newOwner) external;\r\n}\r\n\r\n// File: contracts\\lib\\TransferHelper.sol\r\n\r\n// helper methods for interacting with ERC20 tokens and sending ETH that do not consistently return true/false\r\nlibrary TransferHelper {\r\n    function safeApprove(address token, address to, uint value) internal {\r\n        // bytes4(keccak256(bytes('approve(address,uint256)')));\r\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x095ea7b3, to, value));\r\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'TransferHelper: APPROVE_FAILED');\r\n    }\r\n\r\n    function safeTransfer(address token, address to, uint value) internal {\r\n        // bytes4(keccak256(bytes('transfer(address,uint256)')));\r\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0xa9059cbb, to, value));\r\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'TransferHelper: TRANSFER_FAILED');\r\n    }\r\n\r\n    function safeTransferFrom(address token, address from, address to, uint value) internal {\r\n        // bytes4(keccak256(bytes('transferFrom(address,address,uint256)')));\r\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x23b872dd, from, to, value));\r\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'TransferHelper: TRANSFER_FROM_FAILED');\r\n    }\r\n\r\n    function safeTransferETH(address to, uint value) internal {\r\n        (bool success,) = to.call{value:value}(new bytes(0));\r\n        require(success, 'TransferHelper: ETH_TRANSFER_FAILED');\r\n    }\r\n}\r\n\r\n// File: contracts\\interface\\INestLedger.sol\r\n\r\n/// @dev This interface defines the nest ledger methods\r\ninterface INestLedger {\r\n\r\n    /// @dev Application Flag Changed event\r\n    /// @param addr DAO application contract address\r\n    /// @param flag Authorization flag, 1 means authorization, 0 means cancel authorization\r\n    event ApplicationChanged(address addr, uint flag);\r\n    \r\n    /// @dev Configuration structure of nest ledger contract\r\n    struct Config {\r\n        \r\n        // nest reward scale(10000 based). 2000\r\n        uint16 nestRewardScale;\r\n\r\n        // // ntoken reward scale(10000 based). 8000\r\n        // uint16 ntokenRewardScale;\r\n    }\r\n    \r\n    /// @dev Modify configuration\r\n    /// @param config Configuration object\r\n    function setConfig(Config memory config) external;\r\n\r\n    /// @dev Get configuration\r\n    /// @return Configuration object\r\n    function getConfig() external view returns (Config memory);\r\n\r\n    /// @dev Set DAO application\r\n    /// @param addr DAO application contract address\r\n    /// @param flag Authorization flag, 1 means authorization, 0 means cancel authorization\r\n    function setApplication(address addr, uint flag) external;\r\n\r\n    /// @dev Check DAO application flag\r\n    /// @param addr DAO application contract address\r\n    /// @return Authorization flag, 1 means authorization, 0 means cancel authorization\r\n    function checkApplication(address addr) external view returns (uint);\r\n\r\n    /// @dev Carve reward\r\n    /// @param ntokenAddress Destination ntoken address\r\n    function carveETHReward(address ntokenAddress) external payable;\r\n\r\n    /// @dev Add reward\r\n    /// @param ntokenAddress Destination ntoken address\r\n    function addETHReward(address ntokenAddress) external payable;\r\n\r\n    /// @dev The function returns eth rewards of specified ntoken\r\n    /// @param ntokenAddress The ntoken address\r\n    function totalETHRewards(address ntokenAddress) external view returns (uint);\r\n\r\n    /// @dev Pay\r\n    /// @param ntokenAddress Destination ntoken address. Indicates which ntoken to pay with\r\n    /// @param tokenAddress Token address of receiving funds (0 means ETH)\r\n    /// @param to Address to receive\r\n    /// @param value Amount to receive\r\n    function pay(address ntokenAddress, address tokenAddress, address to, uint value) external;\r\n\r\n    /// @dev Settlement\r\n    /// @param ntokenAddress Destination ntoken address. Indicates which ntoken to settle with\r\n    /// @param tokenAddress Token address of receiving funds (0 means ETH)\r\n    /// @param to Address to receive\r\n    /// @param value Amount to receive\r\n    function settle(address ntokenAddress, address tokenAddress, address to, uint value) external payable;\r\n}\r\n\r\n// File: contracts\\NestBase.sol\r\n\r\n/// @dev Base contract of nest\r\ncontract NestBase {\r\n\r\n    // Address of nest token contract\r\n    address constant NEST_TOKEN_ADDRESS = 0x04abEdA201850aC0124161F037Efd70c74ddC74C;\r\n\r\n    // Genesis block number of nest\r\n    // NEST token contract is created at block height 6913517. However, because the mining algorithm of nest1.0\r\n    // is different from that at present, a new mining algorithm is adopted from nest2.0. The new algorithm\r\n    // includes the attenuation logic according to the block. Therefore, it is necessary to trace the block\r\n    // where the nest begins to decay. According to the circulation when nest2.0 is online, the new mining\r\n    // algorithm is used to deduce and convert the nest, and the new algorithm is used to mine the nest2.0\r\n    // on-line flow, the actual block is 5120000\r\n    uint constant NEST_GENESIS_BLOCK = 5120000;\r\n\r\n    /// @dev To support open-zeppelin/upgrades\r\n    /// @param nestGovernanceAddress INestGovernance implementation contract address\r\n    function initialize(address nestGovernanceAddress) virtual public {\r\n        require(_governance == address(0), 'NEST:!initialize');\r\n        _governance = nestGovernanceAddress;\r\n    }\r\n\r\n    /// @dev INestGovernance implementation contract address\r\n    address public _governance;\r\n\r\n    /// @dev Rewritten in the implementation contract, for load other contract addresses. Call \r\n    ///      super.update(nestGovernanceAddress) when overriding, and override method without onlyGovernance\r\n    /// @param nestGovernanceAddress INestGovernance implementation contract address\r\n    function update(address nestGovernanceAddress) virtual public {\r\n\r\n        address governance = _governance;\r\n        require(governance == msg.sender || INestGovernance(governance).checkGovernance(msg.sender, 0), \"NEST:!gov\");\r\n        _governance = nestGovernanceAddress;\r\n    }\r\n\r\n    /// @dev Migrate funds from current contract to NestLedger\r\n    /// @param tokenAddress Destination token address.(0 means eth)\r\n    /// @param value Migrate amount\r\n    function migrate(address tokenAddress, uint value) external onlyGovernance {\r\n\r\n        address to = INestGovernance(_governance).getNestLedgerAddress();\r\n        if (tokenAddress == address(0)) {\r\n            INestLedger(to).addETHReward { value: value } (address(0));\r\n        } else {\r\n            TransferHelper.safeTransfer(tokenAddress, to, value);\r\n        }\r\n    }\r\n\r\n    //---------modifier------------\r\n\r\n    modifier onlyGovernance() {\r\n        require(INestGovernance(_governance).checkGovernance(msg.sender, 0), \"NEST:!gov\");\r\n        _;\r\n    }\r\n\r\n    modifier noContract() {\r\n        require(msg.sender == tx.origin, \"NEST:!contract\");\r\n        _;\r\n    }\r\n}\r\n\r\n// File: contracts\\NestVote.sol\r\n\r\n/// @dev nest voting contract, implemented the voting logic\r\ncontract NestVote is NestBase, INestVote {\r\n    \r\n    // constructor() { }\r\n\r\n    /// @dev Structure is used to represent a storage location. Storage variable can be used to avoid indexing from mapping many times\r\n    struct UINT {\r\n        uint value;\r\n    }\r\n\r\n    /// @dev Proposal information\r\n    struct Proposal {\r\n\r\n        // The immutable field and the variable field are stored separately\r\n        /* ========== Immutable field ========== */\r\n\r\n        // Brief of this proposal\r\n        string brief;\r\n\r\n        // The contract address which will be executed when the proposal is approved. (Must implemented IVotePropose)\r\n        address contractAddress;\r\n\r\n        // Voting start time\r\n        uint48 startTime;\r\n\r\n        // Voting stop time\r\n        uint48 stopTime;\r\n\r\n        // Proposer\r\n        address proposer;\r\n\r\n        // Staked nest amount\r\n        uint96 staked;\r\n\r\n        /* ========== Mutable field ========== */\r\n\r\n        // Gained value\r\n        // The maximum value of uint96 can be expressed as 79228162514264337593543950335, which is more than the total \r\n        // number of nest 10000000000 ether. Therefore, uint96 can be used to express the total number of votes\r\n        uint96 gainValue;\r\n\r\n        // The state of this proposal. 0: proposed | 1: accepted | 2: cancelled\r\n        uint32 state;\r\n\r\n        // The executor of this proposal\r\n        address executor;\r\n\r\n        // The execution time (if any, such as block number or time stamp) is placed in the contract and is limited by the contract itself\r\n    }\r\n    \r\n    // Configuration\r\n    Config _config;\r\n\r\n    // Array for proposals\r\n    Proposal[] public _proposalList;\r\n\r\n    // Staked ledger\r\n    mapping(uint =>mapping(address =>UINT)) public _stakedLedger;\r\n    \r\n    address _nestLedgerAddress;\r\n    //address _nestTokenAddress;\r\n    address _nestMiningAddress;\r\n    address _nnIncomeAddress;\r\n\r\n    uint32 constant PROPOSAL_STATE_PROPOSED = 0;\r\n    uint32 constant PROPOSAL_STATE_ACCEPTED = 1;\r\n    uint32 constant PROPOSAL_STATE_CANCELLED = 2;\r\n\r\n    uint constant NEST_TOTAL_SUPPLY = 10000000000 ether;\r\n\r\n    /// @dev Rewritten in the implementation contract, for load other contract addresses. Call \r\n    ///      super.update(nestGovernanceAddress) when overriding, and override method without onlyGovernance\r\n    /// @param nestGovernanceAddress INestGovernance implementation contract address\r\n    function update(address nestGovernanceAddress) override public {\r\n        super.update(nestGovernanceAddress);\r\n\r\n        (\r\n            //address nestTokenAddress\r\n            ,//_nestTokenAddress, \r\n            //address nestNodeAddress\r\n            ,\r\n            //address nestLedgerAddress\r\n            _nestLedgerAddress, \r\n            //address nestMiningAddress\r\n            _nestMiningAddress, \r\n            //address ntokenMiningAddress\r\n            ,\r\n            //address nestPriceFacadeAddress\r\n            ,\r\n            //address nestVoteAddress\r\n            ,\r\n            //address nestQueryAddress\r\n            ,\r\n            //address nnIncomeAddress\r\n            _nnIncomeAddress, \r\n            //address nTokenControllerAddress\r\n              \r\n        ) = INestGovernance(nestGovernanceAddress).getBuiltinAddress();\r\n    }\r\n\r\n    /// @dev Modify configuration\r\n    /// @param config Configuration object\r\n    function setConfig(Config memory config) override external onlyGovernance {\r\n        require(uint(config.acceptance) <= 10000, \"NestVote:!value\");\r\n        _config = config;\r\n    }\r\n\r\n    /// @dev Get configuration\r\n    /// @return Configuration object\r\n    function getConfig() override external view returns (Config memory) {\r\n        return _config;\r\n    }\r\n\r\n    /* ========== VOTE ========== */\r\n    \r\n    /// @dev Initiate a voting proposal\r\n    /// @param contractAddress The contract address which will be executed when the proposal is approved. (Must implemented IVotePropose)\r\n    /// @param brief Brief of this propose\r\n    function propose(address contractAddress, string memory brief) override external noContract\r\n    {\r\n        // The target address cannot already have governance permission to prevent the governance permission from being covered\r\n        require(!INestGovernance(_governance).checkGovernance(contractAddress, 0), \"NestVote:!governance\");\r\n     \r\n        Config memory config = _config;\r\n        uint index = _proposalList.length;\r\n\r\n        // Create voting structure\r\n        _proposalList.push(Proposal(\r\n        \r\n            // Brief of this propose\r\n            //string brief;\r\n            brief,\r\n\r\n            // The contract address which will be executed when the proposal is approved. (Must implemented IVotePropose)\r\n            //address contractAddress;\r\n            contractAddress,\r\n\r\n            // Voting start time\r\n            //uint48 startTime;\r\n            uint48(block.timestamp),\r\n\r\n            // Voting stop time\r\n            //uint48 stopTime;\r\n            uint48(block.timestamp + uint(config.voteDuration)),\r\n\r\n            // Proposer\r\n            //address proposer;\r\n            msg.sender,\r\n\r\n            config.proposalStaking,\r\n\r\n            uint96(0), \r\n            \r\n            PROPOSAL_STATE_PROPOSED, \r\n\r\n            address(0)\r\n        ));\r\n\r\n        // Stake nest\r\n        IERC20(NEST_TOKEN_ADDRESS).transferFrom(msg.sender, address(this), uint(config.proposalStaking));\r\n\r\n        emit NIPSubmitted(msg.sender, contractAddress, index);\r\n    }\r\n\r\n    /// @dev vote\r\n    /// @param index Index of proposal\r\n    /// @param value Amount of nest to vote\r\n    function vote(uint index, uint value) override external noContract\r\n    {\r\n        // 1. Load the proposal\r\n        Proposal memory p = _proposalList[index];\r\n\r\n        // 2. Check\r\n        // Check time region\r\n        // Note: stop time is not include stopTime\r\n        require(block.timestamp >= uint(p.startTime) && block.timestamp < uint(p.stopTime), \"NestVote:!time\");\r\n        require(p.state == PROPOSAL_STATE_PROPOSED, \"NestVote:!state\");\r\n\r\n        // 3. Update voting ledger\r\n        UINT storage balance = _stakedLedger[index][msg.sender];\r\n        balance.value += value;\r\n\r\n        // 4. Update voting information\r\n        _proposalList[index].gainValue = uint96(uint(p.gainValue) + value);\r\n\r\n        // 5. Stake nest\r\n        IERC20(NEST_TOKEN_ADDRESS).transferFrom(msg.sender, address(this), value);\r\n\r\n        emit NIPVote(msg.sender, index, value);\r\n    }\r\n\r\n    /// @dev Withdraw the nest of the vote. If the target vote is in the voting state, the corresponding number of votes will be cancelled\r\n    /// @param index Index of the proposal\r\n    function withdraw(uint index) override external noContract\r\n    {\r\n        // 1. Update voting ledger\r\n        UINT storage balance = _stakedLedger[index][msg.sender];\r\n        uint balanceValue = balance.value;\r\n        balance.value = 0;\r\n\r\n        // 2. In the proposal state, the number of votes obtained needs to be updated\r\n        if (_proposalList[index].state == PROPOSAL_STATE_PROPOSED) {\r\n            _proposalList[index].gainValue = uint96(uint(_proposalList[index].gainValue) - balanceValue);\r\n        }\r\n\r\n        // 3. Return staked nest\r\n        IERC20(NEST_TOKEN_ADDRESS).transfer(msg.sender, balanceValue);\r\n    }\r\n\r\n    /// @dev Execute the proposal\r\n    /// @param index Index of the proposal\r\n    function execute(uint index) override external noContract\r\n    {\r\n        Config memory config = _config;\r\n\r\n        // 1. Load proposal\r\n        Proposal memory p = _proposalList[index];\r\n\r\n        // 2. Check status\r\n        require(p.state == PROPOSAL_STATE_PROPOSED, \"NestVote:!state\");\r\n        require(block.timestamp < uint(p.stopTime), \"NestVote:!time\");\r\n        // The target address cannot already have governance permission to prevent the governance permission from being covered\r\n        address governance = _governance;\r\n        require(!INestGovernance(governance).checkGovernance(p.contractAddress, 0), \"NestVote:!governance\");\r\n\r\n        // 3. Check the gaine rate\r\n        IERC20 nest = IERC20(NEST_TOKEN_ADDRESS);\r\n\r\n        // Calculate the circulation of nest\r\n        uint nestCirculation = _getNestCirculation(nest);\r\n        require(uint(p.gainValue) * 10000 >= nestCirculation * uint(config.acceptance), \"NestVote:!gainValue\");\r\n\r\n        // 3. Temporarily grant execution permission\r\n        INestGovernance(governance).setGovernance(p.contractAddress, 1);\r\n\r\n        // 4. Execute\r\n        _proposalList[index].state = PROPOSAL_STATE_ACCEPTED;\r\n        _proposalList[index].executor = msg.sender;\r\n        IVotePropose(p.contractAddress).run();\r\n\r\n        // 5. Delete execution permission\r\n        INestGovernance(governance).setGovernance(p.contractAddress, 0);\r\n        \r\n        // Return nest\r\n        nest.transfer(p.proposer, uint(p.staked));\r\n\r\n        emit NIPExecute(msg.sender, index);\r\n    }\r\n\r\n    /// @dev Cancel the proposal\r\n    /// @param index Index of the proposal\r\n    function cancel(uint index) override external noContract {\r\n\r\n        // 1. Load proposal\r\n        Proposal memory p = _proposalList[index];\r\n\r\n        // 2. Check state\r\n        require(p.state == PROPOSAL_STATE_PROPOSED, \"NestVote:!state\");\r\n        require(block.timestamp >= uint(p.stopTime), \"NestVote:!time\");\r\n\r\n        // 3. Update status\r\n        _proposalList[index].state = PROPOSAL_STATE_CANCELLED;\r\n\r\n        // 4. Return staked nest\r\n        IERC20(NEST_TOKEN_ADDRESS).transfer(p.proposer, uint(p.staked));\r\n    }\r\n\r\n    // Convert PriceSheet to PriceSheetView\r\n    //function _toPriceSheetView(PriceSheet memory sheet, uint index) private view returns (PriceSheetView memory) {\r\n    function _toProposalView(Proposal memory proposal, uint index, uint nestCirculation) private pure returns (ProposalView memory) {\r\n\r\n        return ProposalView(\r\n            // Index of the proposal\r\n            index,\r\n            // Brief of proposal\r\n            //string brief;\r\n            proposal.brief,\r\n            // The contract address which will be executed when the proposal is approved. (Must implemented IVotePropose)\r\n            //address contractAddress;\r\n            proposal.contractAddress,\r\n            // Voting start time\r\n            //uint48 startTime;\r\n            proposal.startTime,\r\n            // Voting stop time\r\n            //uint48 stopTime;\r\n            proposal.stopTime,\r\n            // Proposer\r\n            //address proposer;\r\n            proposal.proposer,\r\n            // Staked nest amount\r\n            //uint96 staked;\r\n            proposal.staked,\r\n            // Gained value\r\n            // The maximum value of uint96 can be expressed as 79228162514264337593543950335, which is more than the total \r\n            // number of nest 10000000000 ether. Therefore, uint96 can be used to express the total number of votes\r\n            //uint96 gainValue;\r\n            proposal.gainValue,\r\n            // The state of this proposal\r\n            //uint32 state;  // 0: proposed | 1: accepted | 2: cancelled\r\n            proposal.state,\r\n            // The executor of this proposal\r\n            //address executor;\r\n            proposal.executor,\r\n\r\n            // Circulation of nest\r\n            uint96(nestCirculation)\r\n        );\r\n    }\r\n\r\n    /// @dev Get proposal information\r\n    /// @param index Index of the proposal\r\n    /// @return Proposal information\r\n    function getProposeInfo(uint index) override external view returns (ProposalView memory) {\r\n        return _toProposalView(_proposalList[index], index, getNestCirculation());\r\n    }\r\n\r\n    /// @dev Get the cumulative number of voting proposals\r\n    /// @return The cumulative number of voting proposals\r\n    function getProposeCount() override external view returns (uint) {\r\n        return _proposalList.length;\r\n    }\r\n\r\n    /// @dev List proposals by page\r\n    /// @param offset Skip previous (offset) records\r\n    /// @param count Return (count) records\r\n    /// @param order Order. 0 reverse order, non-0 positive order\r\n    /// @return List of price proposals\r\n    function list(uint offset, uint count, uint order) override external view returns (ProposalView[] memory) {\r\n        \r\n        Proposal[] storage proposalList = _proposalList;\r\n        ProposalView[] memory result = new ProposalView[](count);\r\n        uint nestCirculation = getNestCirculation();\r\n        uint length = proposalList.length;\r\n        uint i = 0;\r\n\r\n        // Reverse order\r\n        if (order == 0) {\r\n\r\n            uint index = length - offset;\r\n            uint end = index > count ? index - count : 0;\r\n            while (index > end) {\r\n                --index;\r\n                result[i++] = _toProposalView(proposalList[index], index, nestCirculation);\r\n            }\r\n        } \r\n        // Positive sequence\r\n        else {\r\n            \r\n            uint index = offset;\r\n            uint end = index + count;\r\n            if (end > length) {\r\n                end = length;\r\n            }\r\n            while (index < end) {\r\n                result[i++] = _toProposalView(proposalList[index], index, nestCirculation);\r\n                ++index;\r\n            }\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    // Get Circulation of nest\r\n    function _getNestCirculation(IERC20 nest) private view returns (uint) {\r\n\r\n        return NEST_TOTAL_SUPPLY \r\n            - nest.balanceOf(_nestMiningAddress)\r\n            - nest.balanceOf(_nnIncomeAddress)\r\n            - nest.balanceOf(_nestLedgerAddress)\r\n            - nest.balanceOf(address(0x1));\r\n    }\r\n\r\n    /// @dev Get Circulation of nest\r\n    /// @return Circulation of nest\r\n    function getNestCirculation() override public view returns (uint) {\r\n        return _getNestCirculation(IERC20(NEST_TOKEN_ADDRESS));\r\n    }\r\n\r\n    /// @dev Upgrades a proxy to the newest implementation of a contract\r\n    /// @param proxyAdmin The address of ProxyAdmin\r\n    /// @param proxy Proxy to be upgraded\r\n    /// @param implementation the address of the Implementation\r\n    function upgradeProxy(address proxyAdmin, address proxy, address implementation) override external onlyGovernance {\r\n        IProxyAdmin(proxyAdmin).upgrade(proxy, implementation);\r\n    }\r\n\r\n    /// @dev Transfers ownership of the contract to a new account (`newOwner`)\r\n    ///      Can only be called by the current owner\r\n    /// @param proxyAdmin The address of ProxyAdmin\r\n    /// @param newOwner The address of new owner\r\n    function transferUpgradeAuthority(address proxyAdmin, address newOwner) override external onlyGovernance {\r\n        IProxyAdmin(proxyAdmin).transferOwnership(newOwner);\r\n    }\r\n}","ABI":"[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"executor\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"NIPExecute\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"proposer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"contractAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"NIPSubmitted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"voter\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"NIPVote\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"_governance\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"_proposalList\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"brief\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"contractAddress\",\"type\":\"address\"},{\"internalType\":\"uint48\",\"name\":\"startTime\",\"type\":\"uint48\"},{\"internalType\":\"uint48\",\"name\":\"stopTime\",\"type\":\"uint48\"},{\"internalType\":\"address\",\"name\":\"proposer\",\"type\":\"address\"},{\"internalType\":\"uint96\",\"name\":\"staked\",\"type\":\"uint96\"},{\"internalType\":\"uint96\",\"name\":\"gainValue\",\"type\":\"uint96\"},{\"internalType\":\"uint32\",\"name\":\"state\",\"type\":\"uint32\"},{\"internalType\":\"address\",\"name\":\"executor\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_stakedLedger\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"cancel\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"execute\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getConfig\",\"outputs\":[{\"components\":[{\"internalType\":\"uint32\",\"name\":\"acceptance\",\"type\":\"uint32\"},{\"internalType\":\"uint64\",\"name\":\"voteDuration\",\"type\":\"uint64\"},{\"internalType\":\"uint96\",\"name\":\"proposalStaking\",\"type\":\"uint96\"}],\"internalType\":\"struct INestVote.Config\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getNestCirculation\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getProposeCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getProposeInfo\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"brief\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"contractAddress\",\"type\":\"address\"},{\"internalType\":\"uint48\",\"name\":\"startTime\",\"type\":\"uint48\"},{\"internalType\":\"uint48\",\"name\":\"stopTime\",\"type\":\"uint48\"},{\"internalType\":\"address\",\"name\":\"proposer\",\"type\":\"address\"},{\"internalType\":\"uint96\",\"name\":\"staked\",\"type\":\"uint96\"},{\"internalType\":\"uint96\",\"name\":\"gainValue\",\"type\":\"uint96\"},{\"internalType\":\"uint32\",\"name\":\"state\",\"type\":\"uint32\"},{\"internalType\":\"address\",\"name\":\"executor\",\"type\":\"address\"},{\"internalType\":\"uint96\",\"name\":\"nestCirculation\",\"type\":\"uint96\"}],\"internalType\":\"struct INestVote.ProposalView\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"nestGovernanceAddress\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"offset\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"count\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"order\",\"type\":\"uint256\"}],\"name\":\"list\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"brief\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"contractAddress\",\"type\":\"address\"},{\"internalType\":\"uint48\",\"name\":\"startTime\",\"type\":\"uint48\"},{\"internalType\":\"uint48\",\"name\":\"stopTime\",\"type\":\"uint48\"},{\"internalType\":\"address\",\"name\":\"proposer\",\"type\":\"address\"},{\"internalType\":\"uint96\",\"name\":\"staked\",\"type\":\"uint96\"},{\"internalType\":\"uint96\",\"name\":\"gainValue\",\"type\":\"uint96\"},{\"internalType\":\"uint32\",\"name\":\"state\",\"type\":\"uint32\"},{\"internalType\":\"address\",\"name\":\"executor\",\"type\":\"address\"},{\"internalType\":\"uint96\",\"name\":\"nestCirculation\",\"type\":\"uint96\"}],\"internalType\":\"struct INestVote.ProposalView[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"migrate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"contractAddress\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"brief\",\"type\":\"string\"}],\"name\":\"propose\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint32\",\"name\":\"acceptance\",\"type\":\"uint32\"},{\"internalType\":\"uint64\",\"name\":\"voteDuration\",\"type\":\"uint64\"},{\"internalType\":\"uint96\",\"name\":\"proposalStaking\",\"type\":\"uint96\"}],\"internalType\":\"struct INestVote.Config\",\"name\":\"config\",\"type\":\"tuple\"}],\"name\":\"setConfig\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"proxyAdmin\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferUpgradeAuthority\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"nestGovernanceAddress\",\"type\":\"address\"}],\"name\":\"update\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"proxyAdmin\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"proxy\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"}],\"name\":\"upgradeProxy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"vote\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"NestVote","CompilerVersion":"v0.8.3+commit.8d00100c","OptimizationUsed":"1","Runs":"256","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"GNU GPLv3","Proxy":"0","Implementation":"","SwarmSource":"ipfs://9b7b7497de733e3452d9bd3d02615603c059d27bfd6225806344bc9d171831fc"}]}