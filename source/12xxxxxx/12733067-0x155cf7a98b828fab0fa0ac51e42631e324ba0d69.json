{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/DoctorV2.sol\": {\r\n      \"content\": \"pragma solidity ^0.7.0;\\npragma experimental ABIEncoderV2;\\n\\n\\nimport \\\"./Randomness.sol\\\";\\n\\n\\ninterface IMahin {\\n    function totalSupply() external view returns (uint256);\\n    function tokenByIndex(uint256 index) external view returns (uint256);\\n    function diagnose(uint256 tokenId) external;\\n}\\n\\n\\n// Replaces the builtin random generator with a fixed version.\\ncontract DoctorV2 is Randomness, Ownable {\\n    IMahin public nft;\\n\\n    constructor(VRFConfig memory vrfConfig, IMahin _nft)\\n            // 0.0000000008468506% - This has been pre-calculated to amount to 12.5%\\n            // start time is the deploy of the main ERC contract.\\n            Randomness(vrfConfig, 8468506, 1616625854\\n    ) {\\n        nft = _nft;\\n    }\\n\\n    function _totalSupply() public view override returns (uint256) {\\n        return nft.totalSupply();\\n    }\\n\\n    function _tokenByIndex(uint256 index) public view override returns (uint256) {\\n        return nft.tokenByIndex(index);\\n    }\\n\\n    function _isDisabled() public view override returns (bool) {\\n        return false;\\n    }\\n\\n    function onDiagnosed(uint256 tokenId) internal override {\\n        nft.diagnose(tokenId);\\n    }\\n\\n    function setPerSecondProbability(uint _probabilityPerSecond) public onlyOwner {\\n        probabilityPerSecond = _probabilityPerSecond;\\n    }\\n\\n    function setLastRollTime(uint timestamp) public onlyOwner {\\n        lastRollTime = timestamp;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/Randomness.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.7.0;\\n\\n//import \\\"hardhat/console.sol\\\";\\nimport \\\"./ABDKMath64x64.sol\\\";\\nimport \\\"./ChainlinkVRF.sol\\\";\\nimport \\\"openzeppelin-solidity/contracts/token/ERC721/IERC721Enumerable.sol\\\";\\nimport \\\"./Roles.sol\\\";\\n\\n\\ninterface IERC721Adapter {\\n    function _totalSupply() external view returns (uint256);\\n    function _tokenByIndex(uint256 index) external view  returns (uint256);\\n    function _isDisabled() external view returns (bool);\\n}\\n\\nabstract contract Randomness is ChainlinkVRF, IERC721Adapter {\\n    using SafeMath for uint256;\\n\\n    // Configuration Chainlink VRF\\n    struct VRFConfig {\\n        address coordinator;\\n        address token;\\n        bytes32 keyHash;\\n        uint256 price;\\n    }\\n\\n    event RollInProgress(\\n        int128 probability\\n    );\\n\\n    event RollComplete();\\n\\n    uint probabilityPerSecond;\\n    uint public constant denominator           = 10000000000000000; // 100%\\n\\n    uint256 randomSeedBlock = 0;\\n    int128 public rollProbability = 0;\\n    uint256 public lastRollTime = 0;\\n\\n    bytes32 chainlinkRequestId = 0;\\n    uint256 chainlinkRandomNumber = 0;\\n    bytes32 internal chainlinkKeyHash;\\n    uint256 internal chainlinkFee;\\n\\n    constructor(VRFConfig memory config, uint _probabilityPerSecond, uint initRollTime) ChainlinkVRF(config.coordinator, config.token) {\\n        chainlinkFee = config.price;\\n        chainlinkKeyHash = config.keyHash;\\n\\n        lastRollTime = initRollTime;\\n        probabilityPerSecond = _probabilityPerSecond;\\n    }\\n\\n    // Will return the probability of a (non-)diagnosis for an individual NFT, assuming the roll will happen at\\n    // `timestamp`. This will be based on the last time a roll happened, targeting a certain total probability\\n    // over the period the project is running.\\n    // Will return 0.80 to indicate that the probability of a diagnosis is 20%.\\n    function getProbability(uint256 timestamp) public view returns (int128 probability) {\\n        uint256 secondsSinceLastRoll = timestamp.sub(lastRollTime);\\n\\n        // Say we want totalProbability = 20% over the course of the project's runtime.\\n        // If we roll 12 times, what should be the probability of each roll so they compound to 20%?\\n        //    (1 - x) ** 12 = (1 - 20%)\\n        // Or generalized:\\n        //    (1 - x) ** numTries = (1 - totalProbability)\\n        // Solve by x:\\n        //     x = 1 - (1 - totalProbability) ** (1/numTries)\\n        //\\n\\n        // We use the 64.64 fixed point math library here. More info about this kind of math in Solidity:\\n        // https://medium.com/hackernoon/10x-better-fixed-point-math-in-solidity-32441fd25d43\\n        // https://ethereum.stackexchange.com/questions/83785/what-fixed-or-float-point-math-libraries-are-available-in-solidity\\n\\n        // We already pre-calculated the probability for a 1-second interval\\n        int128 _denominator = ABDKMath64x64.fromUInt(denominator);\\n        int128 _probabilityPerSecond = ABDKMath64x64.fromUInt(probabilityPerSecond);\\n\\n        // From the *probability per second* number, calculate the probability for this dice roll based on\\n        // the number of seconds since the last roll. randomNumber must be larger than this.\\n        probability = ABDKMath64x64.pow(\\n        // Convert from our fraction using our denominator, to a 64.64 fixed point number\\n            ABDKMath64x64.div(\\n            // reverse-probability of x: (1-x)\\n                ABDKMath64x64.sub(\\n                    _denominator,\\n                    _probabilityPerSecond\\n                ),\\n                _denominator\\n            ),\\n            secondsSinceLastRoll\\n        );\\n\\n        // `randomNumber / (2**64)` would now give us the random number as a 10-base decimal number.\\n        // To show it in Solidity, which does not support non-integers, we could multiply to shift the\\n        // decimal point, for example:\\n        //    console.log(\\\"randomNumber\\\",\\n        //      uint256(ABDKMath64x64.toUInt(\\n        //        ABDKMath64x64.mul(randomNumber, ABDKMath64x64.fromUInt(1000000))\\n        //      ))\\n        //    );\\n    }\\n\\n    // Anyone can roll, but the beneficiary is incentivized to do so.\\n    //\\n    // # When using Chainlink VRF:\\n    // Make sure you have previously funded the contract with LINK. Since anyone can start a request at\\n    // any time, do not prefund the contract; send the tokens when you want to enable a roll.\\n    //\\n    // # When using the blockhash-based fallback method:\\n    // A future block is picked, whose hash will provide the randomness.\\n    // We accept as low-impact that a miner mining this block could withhold it. A user seed/reveal system\\n    // to counteract miner withholding introduces too much complexity (need to penalize users etc).\\n    function requestRoll(bool useFallback) external {\\n        require(!this._isDisabled(), \\\"rng-disabled\\\");\\n\\n        // If a roll is already scheduled, do nothing.\\n        if (isRolling()) { return; }\\n\\n        if (useFallback) {\\n            // Two blocks from now, the block hash will provide the randomness to decide the outcome\\n            randomSeedBlock = block.number + 2;\\n        }\\n        else {\\n            chainlinkRequestId = requestRandomness(chainlinkKeyHash, chainlinkFee, block.timestamp);\\n        }\\n\\n        // Calculate the probability for this roll, based on the current lastRollTime, before we update the latter.\\n        rollProbability = getProbability(block.timestamp);\\n\\n        // Set the last roll time, which \\\"consumes\\\" parts of the total probability for a diagnosis\\n        lastRollTime = block.timestamp;\\n\\n        emit RollInProgress(rollProbability);\\n    }\\n\\n    // Callback: randomness is returned from Chainlink VRF\\n    function fulfillRandomness(bytes32 requestId, uint256 randomness) internal override {\\n        require(requestId == chainlinkRequestId, \\\"invalid-request\\\");\\n        chainlinkRandomNumber = randomness;\\n    }\\n\\n    // Apply the results of the roll (run the randomness function, update NFTs).\\n    //\\n    // When using the block-hash based fallback randomness function:\\n    // If this is not called within 250 odd blocks, the hash of that block will no longer be accessible to us.\\n    // The roller thus has a possible reason *not* to call apply(), if the outcome is not as they desire.\\n    // We counteract this as follows:\\n    // - We consider an incomplete roll as a completed (which did not cause a state chance) for purposes of the\\n    //   compound probability. That is, you cannot increase the chance of any of the NFTs being diagnosed, you\\n    //   can only prevent it from happening. A caller looking to manipulate a roll would presumably desire a\\n    //   diagnosis, as they otherwise would simply do nothing.\\n    // - We counteract grieving (the repeated calling of pre-roll without calling apply, thus resetting the\\n    //   probability of a diagnosis) by letting anyone call `apply`, and emitting an event on `preroll`, to make\\n    //   it easy to watch for that.\\n    //\\n    // When using Chainlink VRF:\\n    //\\n    // In case we do not get a response from Chainlink within 2 hours, this can be called.\\n    //\\n    function applyRoll() external {\\n        require(isRolling(), \\\"no-roll\\\");\\n\\n        bytes32 randomness;\\n\\n        // Roll was started using the fallback random method based on the block hash\\n        if (randomSeedBlock > 0) {\\n            require(block.number > randomSeedBlock, \\\"too-early\\\");\\n            randomness = blockhash(randomSeedBlock);\\n\\n            // The seed block is no longer available. We act as if the roll led to zero diagnoses.\\n            if (randomness <= 0) {\\n                resetRoll();\\n                return;\\n            }\\n        }\\n\\n        // Roll was started using Chainlink VRF\\n        else {\\n            // No response from Chainlink\\n            if (chainlinkRandomNumber == 0 && block.timestamp - lastRollTime > 2 hours) {\\n                resetRoll();\\n                return;\\n            }\\n\\n            require(chainlinkRandomNumber > 0, \\\"too-early\\\");\\n            randomness = bytes32(chainlinkRandomNumber);\\n        }\\n\\n        _applyRandomness(randomness);\\n        resetRoll();\\n    }\\n\\n    function _applyRandomness(bytes32 randomness) internal {\\n        for (uint i=0; i<this._totalSupply(); i++) {\\n            uint256 tokenId = this._tokenByIndex(i);\\n\\n            // For each token, mix in the token id to get a new random number\\n            bytes32 hash = keccak256(abi.encodePacked(randomness, tokenId));\\n\\n            // Now we want to convert the token hash to a number between 0 and 1.\\n            // - 64.64-bit fixed point is a int128  which represents the fraction `{int128}/(64**2)`.\\n            // - Thus, the lowest 64 bits of the int128 are essentially what is after the decimal point -\\n            //   the fractional part of the number.\\n            // - So taking only the lowest 64 bits from a token hash essentially gives us a random number\\n            //   between 0 and 1.\\n\\n            // block hash is 256 bits - shift the left-most 64 bits into the right-most position, essentially\\n            // giving us a 64-bit number. Stored as an int128, this represents a fractional value between 0 and 1\\n            // in the format used by the 64.64 - fixed point library.\\n            int128 randomNumber = int128(uint256(hash) >> 192);\\n            //console.log(\\\"RANDOMNUMBER\\\", uint256(randomNumber));\\n\\n            if (randomNumber > rollProbability) {\\n                onDiagnosed(tokenId);\\n            }\\n        }\\n    }\\n\\n    function resetRoll() internal {\\n        randomSeedBlock = 0;\\n        rollProbability = 0;\\n        chainlinkRequestId = 0;\\n        chainlinkRandomNumber = 0;\\n        emit RollComplete();\\n    }\\n\\n    function isRolling() public view returns (bool) {\\n        return (randomSeedBlock > 0) || (chainlinkRequestId > 0);\\n    }\\n\\n    function onDiagnosed(uint256 tokenId) internal virtual;\\n}\\n\"\r\n    },\r\n    \"contracts/ABDKMath64x64.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BSD-4-Clause\\n/*\\n * ABDK Math 64.64 Smart Contract Library.  Copyright © 2019 by ABDK Consulting.\\n * Author: Mikhail Vladimirov <mikhail.vladimirov@gmail.com>\\n */\\npragma solidity ^0.7.0;\\n\\n/**\\n * Smart contract library of mathematical functions operating with signed\\n * 64.64-bit fixed point numbers.  Signed 64.64-bit fixed point number is\\n * basically a simple fraction whose numerator is signed 128-bit integer and\\n * denominator is 2^64.  As long as denominator is always the same, there is no\\n * need to store it, thus in Solidity signed 64.64-bit fixed point numbers are\\n * represented by int128 type holding only the numerator.\\n */\\nlibrary ABDKMath64x64 {\\n    /*\\n     * Minimum value signed 64.64-bit fixed point number may have.\\n     */\\n    int128 private constant MIN_64x64 = -0x80000000000000000000000000000000;\\n\\n    /*\\n     * Maximum value signed 64.64-bit fixed point number may have.\\n     */\\n    int128 private constant MAX_64x64 = 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\\n\\n    /**\\n     * Convert signed 256-bit integer number into signed 64.64-bit fixed point\\n     * number.  Revert on overflow.\\n     *\\n     * @param x signed 256-bit integer number\\n     * @return signed 64.64-bit fixed point number\\n     */\\n    function fromInt (int256 x) internal pure returns (int128) {\\n        require (x >= -0x8000000000000000 && x <= 0x7FFFFFFFFFFFFFFF);\\n        return int128 (x << 64);\\n    }\\n\\n    /**\\n     * Convert signed 64.64 fixed point number into signed 64-bit integer number\\n     * rounding down.\\n     *\\n     * @param x signed 64.64-bit fixed point number\\n     * @return signed 64-bit integer number\\n     */\\n    function toInt (int128 x) internal pure returns (int64) {\\n        return int64 (x >> 64);\\n    }\\n\\n    /**\\n     * Convert unsigned 256-bit integer number into signed 64.64-bit fixed point\\n     * number.  Revert on overflow.\\n     *\\n     * @param x unsigned 256-bit integer number\\n     * @return signed 64.64-bit fixed point number\\n     */\\n    function fromUInt (uint256 x) internal pure returns (int128) {\\n        require (x <= 0x7FFFFFFFFFFFFFFF);\\n        return int128 (x << 64);\\n    }\\n\\n    /**\\n     * Convert signed 64.64 fixed point number into unsigned 64-bit integer\\n     * number rounding down.  Revert on underflow.\\n     *\\n     * @param x signed 64.64-bit fixed point number\\n     * @return unsigned 64-bit integer number\\n     */\\n    function toUInt (int128 x) internal pure returns (uint64) {\\n        require (x >= 0);\\n        return uint64 (x >> 64);\\n    }\\n\\n    /**\\n     * Convert signed 128.128 fixed point number into signed 64.64-bit fixed point\\n     * number rounding down.  Revert on overflow.\\n     *\\n     * @param x signed 128.128-bin fixed point number\\n     * @return signed 64.64-bit fixed point number\\n     */\\n    function from128x128 (int256 x) internal pure returns (int128) {\\n        int256 result = x >> 64;\\n        require (result >= MIN_64x64 && result <= MAX_64x64);\\n        return int128 (result);\\n    }\\n\\n    /**\\n     * Convert signed 64.64 fixed point number into signed 128.128 fixed point\\n     * number.\\n     *\\n     * @param x signed 64.64-bit fixed point number\\n     * @return signed 128.128 fixed point number\\n     */\\n    function to128x128 (int128 x) internal pure returns (int256) {\\n        return int256 (x) << 64;\\n    }\\n\\n    /**\\n     * Calculate x + y.  Revert on overflow.\\n     *\\n     * @param x signed 64.64-bit fixed point number\\n     * @param y signed 64.64-bit fixed point number\\n     * @return signed 64.64-bit fixed point number\\n     */\\n    function add (int128 x, int128 y) internal pure returns (int128) {\\n        int256 result = int256(x) + y;\\n        require (result >= MIN_64x64 && result <= MAX_64x64);\\n        return int128 (result);\\n    }\\n\\n    /**\\n     * Calculate x - y.  Revert on overflow.\\n     *\\n     * @param x signed 64.64-bit fixed point number\\n     * @param y signed 64.64-bit fixed point number\\n     * @return signed 64.64-bit fixed point number\\n     */\\n    function sub (int128 x, int128 y) internal pure returns (int128) {\\n        int256 result = int256(x) - y;\\n        require (result >= MIN_64x64 && result <= MAX_64x64);\\n        return int128 (result);\\n    }\\n\\n    /**\\n     * Calculate x * y rounding down.  Revert on overflow.\\n     *\\n     * @param x signed 64.64-bit fixed point number\\n     * @param y signed 64.64-bit fixed point number\\n     * @return signed 64.64-bit fixed point number\\n     */\\n    function mul (int128 x, int128 y) internal pure returns (int128) {\\n        int256 result = int256(x) * y >> 64;\\n        require (result >= MIN_64x64 && result <= MAX_64x64);\\n        return int128 (result);\\n    }\\n\\n    /**\\n     * Calculate x * y rounding towards zero, where x is signed 64.64 fixed point\\n     * number and y is signed 256-bit integer number.  Revert on overflow.\\n     *\\n     * @param x signed 64.64 fixed point number\\n     * @param y signed 256-bit integer number\\n     * @return signed 256-bit integer number\\n     */\\n    function muli (int128 x, int256 y) internal pure returns (int256) {\\n        if (x == MIN_64x64) {\\n            require (y >= -0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF &&\\n            y <= 0x1000000000000000000000000000000000000000000000000);\\n            return -y << 63;\\n        } else {\\n            bool negativeResult = false;\\n            if (x < 0) {\\n                x = -x;\\n                negativeResult = true;\\n            }\\n            if (y < 0) {\\n                y = -y; // We rely on overflow behavior here\\n                negativeResult = !negativeResult;\\n            }\\n            uint256 absoluteResult = mulu (x, uint256 (y));\\n            if (negativeResult) {\\n                require (absoluteResult <=\\n                    0x8000000000000000000000000000000000000000000000000000000000000000);\\n                return -int256 (absoluteResult); // We rely on overflow behavior here\\n            } else {\\n                require (absoluteResult <=\\n                    0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF);\\n                return int256 (absoluteResult);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * Calculate x * y rounding down, where x is signed 64.64 fixed point number\\n     * and y is unsigned 256-bit integer number.  Revert on overflow.\\n     *\\n     * @param x signed 64.64 fixed point number\\n     * @param y unsigned 256-bit integer number\\n     * @return unsigned 256-bit integer number\\n     */\\n    function mulu (int128 x, uint256 y) internal pure returns (uint256) {\\n        if (y == 0) return 0;\\n\\n        require (x >= 0);\\n\\n        uint256 lo = (uint256 (x) * (y & 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF)) >> 64;\\n        uint256 hi = uint256 (x) * (y >> 128);\\n\\n        require (hi <= 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF);\\n        hi <<= 64;\\n\\n        require (hi <=\\n            0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF - lo);\\n        return hi + lo;\\n    }\\n\\n    /**\\n     * Calculate x / y rounding towards zero.  Revert on overflow or when y is\\n     * zero.\\n     *\\n     * @param x signed 64.64-bit fixed point number\\n     * @param y signed 64.64-bit fixed point number\\n     * @return signed 64.64-bit fixed point number\\n     */\\n    function div (int128 x, int128 y) internal pure returns (int128) {\\n        require (y != 0);\\n        int256 result = (int256 (x) << 64) / y;\\n        require (result >= MIN_64x64 && result <= MAX_64x64);\\n        return int128 (result);\\n    }\\n\\n    /**\\n     * Calculate x / y rounding towards zero, where x and y are signed 256-bit\\n     * integer numbers.  Revert on overflow or when y is zero.\\n     *\\n     * @param x signed 256-bit integer number\\n     * @param y signed 256-bit integer number\\n     * @return signed 64.64-bit fixed point number\\n     */\\n    function divi (int256 x, int256 y) internal pure returns (int128) {\\n        require (y != 0);\\n\\n        bool negativeResult = false;\\n        if (x < 0) {\\n            x = -x; // We rely on overflow behavior here\\n            negativeResult = true;\\n        }\\n        if (y < 0) {\\n            y = -y; // We rely on overflow behavior here\\n            negativeResult = !negativeResult;\\n        }\\n        uint128 absoluteResult = divuu (uint256 (x), uint256 (y));\\n        if (negativeResult) {\\n            require (absoluteResult <= 0x80000000000000000000000000000000);\\n            return -int128 (absoluteResult); // We rely on overflow behavior here\\n        } else {\\n            require (absoluteResult <= 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF);\\n            return int128 (absoluteResult); // We rely on overflow behavior here\\n        }\\n    }\\n\\n    /**\\n     * Calculate x / y rounding towards zero, where x and y are unsigned 256-bit\\n     * integer numbers.  Revert on overflow or when y is zero.\\n     *\\n     * @param x unsigned 256-bit integer number\\n     * @param y unsigned 256-bit integer number\\n     * @return signed 64.64-bit fixed point number\\n     */\\n    function divu (uint256 x, uint256 y) internal pure returns (int128) {\\n        require (y != 0);\\n        uint128 result = divuu (x, y);\\n        require (result <= uint128 (MAX_64x64));\\n        return int128 (result);\\n    }\\n\\n    /**\\n     * Calculate -x.  Revert on overflow.\\n     *\\n     * @param x signed 64.64-bit fixed point number\\n     * @return signed 64.64-bit fixed point number\\n     */\\n    function neg (int128 x) internal pure returns (int128) {\\n        require (x != MIN_64x64);\\n        return -x;\\n    }\\n\\n    /**\\n     * Calculate |x|.  Revert on overflow.\\n     *\\n     * @param x signed 64.64-bit fixed point number\\n     * @return signed 64.64-bit fixed point number\\n     */\\n    function abs (int128 x) internal pure returns (int128) {\\n        require (x != MIN_64x64);\\n        return x < 0 ? -x : x;\\n    }\\n\\n    /**\\n     * Calculate 1 / x rounding towards zero.  Revert on overflow or when x is\\n     * zero.\\n     *\\n     * @param x signed 64.64-bit fixed point number\\n     * @return signed 64.64-bit fixed point number\\n     */\\n    function inv (int128 x) internal pure returns (int128) {\\n        require (x != 0);\\n        int256 result = int256 (0x100000000000000000000000000000000) / x;\\n        require (result >= MIN_64x64 && result <= MAX_64x64);\\n        return int128 (result);\\n    }\\n\\n    /**\\n     * Calculate arithmetics average of x and y, i.e. (x + y) / 2 rounding down.\\n     *\\n     * @param x signed 64.64-bit fixed point number\\n     * @param y signed 64.64-bit fixed point number\\n     * @return signed 64.64-bit fixed point number\\n     */\\n    function avg (int128 x, int128 y) internal pure returns (int128) {\\n        return int128 ((int256 (x) + int256 (y)) >> 1);\\n    }\\n\\n    /**\\n     * Calculate geometric average of x and y, i.e. sqrt (x * y) rounding down.\\n     * Revert on overflow or in case x * y is negative.\\n     *\\n     * @param x signed 64.64-bit fixed point number\\n     * @param y signed 64.64-bit fixed point number\\n     * @return signed 64.64-bit fixed point number\\n     */\\n    function gavg (int128 x, int128 y) internal pure returns (int128) {\\n        int256 m = int256 (x) * int256 (y);\\n        require (m >= 0);\\n        require (m <\\n            0x4000000000000000000000000000000000000000000000000000000000000000);\\n        return int128 (sqrtu (uint256 (m)));\\n    }\\n\\n    /**\\n     * Calculate x^y assuming 0^0 is 1, where x is signed 64.64 fixed point number\\n     * and y is unsigned 256-bit integer number.  Revert on overflow.\\n     *\\n     * @param x signed 64.64-bit fixed point number\\n     * @param y uint256 value\\n     * @return signed 64.64-bit fixed point number\\n     */\\n    function pow (int128 x, uint256 y) internal pure returns (int128) {\\n        uint256 absoluteResult;\\n        bool negativeResult = false;\\n        if (x >= 0) {\\n            absoluteResult = powu (uint256 (x) << 63, y);\\n        } else {\\n            // We rely on overflow behavior here\\n            absoluteResult = powu (uint256 (uint128 (-x)) << 63, y);\\n            negativeResult = y & 1 > 0;\\n        }\\n\\n        absoluteResult >>= 63;\\n\\n        if (negativeResult) {\\n            require (absoluteResult <= 0x80000000000000000000000000000000);\\n            return -int128 (absoluteResult); // We rely on overflow behavior here\\n        } else {\\n            require (absoluteResult <= 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF);\\n            return int128 (absoluteResult); // We rely on overflow behavior here\\n        }\\n    }\\n\\n    /**\\n     * Calculate sqrt (x) rounding down.  Revert if x < 0.\\n     *\\n     * @param x signed 64.64-bit fixed point number\\n     * @return signed 64.64-bit fixed point number\\n     */\\n    function sqrt (int128 x) internal pure returns (int128) {\\n        require (x >= 0);\\n        return int128 (sqrtu (uint256 (x) << 64));\\n    }\\n\\n    /**\\n     * Calculate binary logarithm of x.  Revert if x <= 0.\\n     *\\n     * @param x signed 64.64-bit fixed point number\\n     * @return signed 64.64-bit fixed point number\\n     */\\n    function log_2 (int128 x) internal pure returns (int128) {\\n        require (x > 0);\\n\\n        int256 msb = 0;\\n        int256 xc = x;\\n        if (xc >= 0x10000000000000000) { xc >>= 64; msb += 64; }\\n        if (xc >= 0x100000000) { xc >>= 32; msb += 32; }\\n        if (xc >= 0x10000) { xc >>= 16; msb += 16; }\\n        if (xc >= 0x100) { xc >>= 8; msb += 8; }\\n        if (xc >= 0x10) { xc >>= 4; msb += 4; }\\n        if (xc >= 0x4) { xc >>= 2; msb += 2; }\\n        if (xc >= 0x2) msb += 1;  // No need to shift xc anymore\\n\\n        int256 result = msb - 64 << 64;\\n        uint256 ux = uint256 (x) << uint256 (127 - msb);\\n        for (int256 bit = 0x8000000000000000; bit > 0; bit >>= 1) {\\n            ux *= ux;\\n            uint256 b = ux >> 255;\\n            ux >>= 127 + b;\\n            result += bit * int256 (b);\\n        }\\n\\n        return int128 (result);\\n    }\\n\\n    /**\\n     * Calculate natural logarithm of x.  Revert if x <= 0.\\n     *\\n     * @param x signed 64.64-bit fixed point number\\n     * @return signed 64.64-bit fixed point number\\n     */\\n    function ln (int128 x) internal pure returns (int128) {\\n        require (x > 0);\\n\\n        return int128 (\\n            uint256 (log_2 (x)) * 0xB17217F7D1CF79ABC9E3B39803F2F6AF >> 128);\\n    }\\n\\n    /**\\n     * Calculate binary exponent of x.  Revert on overflow.\\n     *\\n     * @param x signed 64.64-bit fixed point number\\n     * @return signed 64.64-bit fixed point number\\n     */\\n    function exp_2 (int128 x) internal pure returns (int128) {\\n        require (x < 0x400000000000000000); // Overflow\\n\\n        if (x < -0x400000000000000000) return 0; // Underflow\\n\\n        uint256 result = 0x80000000000000000000000000000000;\\n\\n        if (x & 0x8000000000000000 > 0)\\n            result = result * 0x16A09E667F3BCC908B2FB1366EA957D3E >> 128;\\n        if (x & 0x4000000000000000 > 0)\\n            result = result * 0x1306FE0A31B7152DE8D5A46305C85EDEC >> 128;\\n        if (x & 0x2000000000000000 > 0)\\n            result = result * 0x1172B83C7D517ADCDF7C8C50EB14A791F >> 128;\\n        if (x & 0x1000000000000000 > 0)\\n            result = result * 0x10B5586CF9890F6298B92B71842A98363 >> 128;\\n        if (x & 0x800000000000000 > 0)\\n            result = result * 0x1059B0D31585743AE7C548EB68CA417FD >> 128;\\n        if (x & 0x400000000000000 > 0)\\n            result = result * 0x102C9A3E778060EE6F7CACA4F7A29BDE8 >> 128;\\n        if (x & 0x200000000000000 > 0)\\n            result = result * 0x10163DA9FB33356D84A66AE336DCDFA3F >> 128;\\n        if (x & 0x100000000000000 > 0)\\n            result = result * 0x100B1AFA5ABCBED6129AB13EC11DC9543 >> 128;\\n        if (x & 0x80000000000000 > 0)\\n            result = result * 0x10058C86DA1C09EA1FF19D294CF2F679B >> 128;\\n        if (x & 0x40000000000000 > 0)\\n            result = result * 0x1002C605E2E8CEC506D21BFC89A23A00F >> 128;\\n        if (x & 0x20000000000000 > 0)\\n            result = result * 0x100162F3904051FA128BCA9C55C31E5DF >> 128;\\n        if (x & 0x10000000000000 > 0)\\n            result = result * 0x1000B175EFFDC76BA38E31671CA939725 >> 128;\\n        if (x & 0x8000000000000 > 0)\\n            result = result * 0x100058BA01FB9F96D6CACD4B180917C3D >> 128;\\n        if (x & 0x4000000000000 > 0)\\n            result = result * 0x10002C5CC37DA9491D0985C348C68E7B3 >> 128;\\n        if (x & 0x2000000000000 > 0)\\n            result = result * 0x1000162E525EE054754457D5995292026 >> 128;\\n        if (x & 0x1000000000000 > 0)\\n            result = result * 0x10000B17255775C040618BF4A4ADE83FC >> 128;\\n        if (x & 0x800000000000 > 0)\\n            result = result * 0x1000058B91B5BC9AE2EED81E9B7D4CFAB >> 128;\\n        if (x & 0x400000000000 > 0)\\n            result = result * 0x100002C5C89D5EC6CA4D7C8ACC017B7C9 >> 128;\\n        if (x & 0x200000000000 > 0)\\n            result = result * 0x10000162E43F4F831060E02D839A9D16D >> 128;\\n        if (x & 0x100000000000 > 0)\\n            result = result * 0x100000B1721BCFC99D9F890EA06911763 >> 128;\\n        if (x & 0x80000000000 > 0)\\n            result = result * 0x10000058B90CF1E6D97F9CA14DBCC1628 >> 128;\\n        if (x & 0x40000000000 > 0)\\n            result = result * 0x1000002C5C863B73F016468F6BAC5CA2B >> 128;\\n        if (x & 0x20000000000 > 0)\\n            result = result * 0x100000162E430E5A18F6119E3C02282A5 >> 128;\\n        if (x & 0x10000000000 > 0)\\n            result = result * 0x1000000B1721835514B86E6D96EFD1BFE >> 128;\\n        if (x & 0x8000000000 > 0)\\n            result = result * 0x100000058B90C0B48C6BE5DF846C5B2EF >> 128;\\n        if (x & 0x4000000000 > 0)\\n            result = result * 0x10000002C5C8601CC6B9E94213C72737A >> 128;\\n        if (x & 0x2000000000 > 0)\\n            result = result * 0x1000000162E42FFF037DF38AA2B219F06 >> 128;\\n        if (x & 0x1000000000 > 0)\\n            result = result * 0x10000000B17217FBA9C739AA5819F44F9 >> 128;\\n        if (x & 0x800000000 > 0)\\n            result = result * 0x1000000058B90BFCDEE5ACD3C1CEDC823 >> 128;\\n        if (x & 0x400000000 > 0)\\n            result = result * 0x100000002C5C85FE31F35A6A30DA1BE50 >> 128;\\n        if (x & 0x200000000 > 0)\\n            result = result * 0x10000000162E42FF0999CE3541B9FFFCF >> 128;\\n        if (x & 0x100000000 > 0)\\n            result = result * 0x100000000B17217F80F4EF5AADDA45554 >> 128;\\n        if (x & 0x80000000 > 0)\\n            result = result * 0x10000000058B90BFBF8479BD5A81B51AD >> 128;\\n        if (x & 0x40000000 > 0)\\n            result = result * 0x1000000002C5C85FDF84BD62AE30A74CC >> 128;\\n        if (x & 0x20000000 > 0)\\n            result = result * 0x100000000162E42FEFB2FED257559BDAA >> 128;\\n        if (x & 0x10000000 > 0)\\n            result = result * 0x1000000000B17217F7D5A7716BBA4A9AE >> 128;\\n        if (x & 0x8000000 > 0)\\n            result = result * 0x100000000058B90BFBE9DDBAC5E109CCE >> 128;\\n        if (x & 0x4000000 > 0)\\n            result = result * 0x10000000002C5C85FDF4B15DE6F17EB0D >> 128;\\n        if (x & 0x2000000 > 0)\\n            result = result * 0x1000000000162E42FEFA494F1478FDE05 >> 128;\\n        if (x & 0x1000000 > 0)\\n            result = result * 0x10000000000B17217F7D20CF927C8E94C >> 128;\\n        if (x & 0x800000 > 0)\\n            result = result * 0x1000000000058B90BFBE8F71CB4E4B33D >> 128;\\n        if (x & 0x400000 > 0)\\n            result = result * 0x100000000002C5C85FDF477B662B26945 >> 128;\\n        if (x & 0x200000 > 0)\\n            result = result * 0x10000000000162E42FEFA3AE53369388C >> 128;\\n        if (x & 0x100000 > 0)\\n            result = result * 0x100000000000B17217F7D1D351A389D40 >> 128;\\n        if (x & 0x80000 > 0)\\n            result = result * 0x10000000000058B90BFBE8E8B2D3D4EDE >> 128;\\n        if (x & 0x40000 > 0)\\n            result = result * 0x1000000000002C5C85FDF4741BEA6E77E >> 128;\\n        if (x & 0x20000 > 0)\\n            result = result * 0x100000000000162E42FEFA39FE95583C2 >> 128;\\n        if (x & 0x10000 > 0)\\n            result = result * 0x1000000000000B17217F7D1CFB72B45E1 >> 128;\\n        if (x & 0x8000 > 0)\\n            result = result * 0x100000000000058B90BFBE8E7CC35C3F0 >> 128;\\n        if (x & 0x4000 > 0)\\n            result = result * 0x10000000000002C5C85FDF473E242EA38 >> 128;\\n        if (x & 0x2000 > 0)\\n            result = result * 0x1000000000000162E42FEFA39F02B772C >> 128;\\n        if (x & 0x1000 > 0)\\n            result = result * 0x10000000000000B17217F7D1CF7D83C1A >> 128;\\n        if (x & 0x800 > 0)\\n            result = result * 0x1000000000000058B90BFBE8E7BDCBE2E >> 128;\\n        if (x & 0x400 > 0)\\n            result = result * 0x100000000000002C5C85FDF473DEA871F >> 128;\\n        if (x & 0x200 > 0)\\n            result = result * 0x10000000000000162E42FEFA39EF44D91 >> 128;\\n        if (x & 0x100 > 0)\\n            result = result * 0x100000000000000B17217F7D1CF79E949 >> 128;\\n        if (x & 0x80 > 0)\\n            result = result * 0x10000000000000058B90BFBE8E7BCE544 >> 128;\\n        if (x & 0x40 > 0)\\n            result = result * 0x1000000000000002C5C85FDF473DE6ECA >> 128;\\n        if (x & 0x20 > 0)\\n            result = result * 0x100000000000000162E42FEFA39EF366F >> 128;\\n        if (x & 0x10 > 0)\\n            result = result * 0x1000000000000000B17217F7D1CF79AFA >> 128;\\n        if (x & 0x8 > 0)\\n            result = result * 0x100000000000000058B90BFBE8E7BCD6D >> 128;\\n        if (x & 0x4 > 0)\\n            result = result * 0x10000000000000002C5C85FDF473DE6B2 >> 128;\\n        if (x & 0x2 > 0)\\n            result = result * 0x1000000000000000162E42FEFA39EF358 >> 128;\\n        if (x & 0x1 > 0)\\n            result = result * 0x10000000000000000B17217F7D1CF79AB >> 128;\\n\\n        result >>= uint256 (63 - (x >> 64));\\n        require (result <= uint256 (MAX_64x64));\\n\\n        return int128 (result);\\n    }\\n\\n    /**\\n     * Calculate natural exponent of x.  Revert on overflow.\\n     *\\n     * @param x signed 64.64-bit fixed point number\\n     * @return signed 64.64-bit fixed point number\\n     */\\n    function exp (int128 x) internal pure returns (int128) {\\n        require (x < 0x400000000000000000); // Overflow\\n\\n        if (x < -0x400000000000000000) return 0; // Underflow\\n\\n        return exp_2 (\\n            int128 (int256 (x) * 0x171547652B82FE1777D0FFDA0D23A7D12 >> 128));\\n    }\\n\\n    /**\\n     * Calculate x / y rounding towards zero, where x and y are unsigned 256-bit\\n     * integer numbers.  Revert on overflow or when y is zero.\\n     *\\n     * @param x unsigned 256-bit integer number\\n     * @param y unsigned 256-bit integer number\\n     * @return unsigned 64.64-bit fixed point number\\n     */\\n    function divuu (uint256 x, uint256 y) private pure returns (uint128) {\\n        require (y != 0);\\n\\n        uint256 result;\\n\\n        if (x <= 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF)\\n            result = (x << 64) / y;\\n        else {\\n            uint256 msb = 192;\\n            uint256 xc = x >> 192;\\n            if (xc >= 0x100000000) { xc >>= 32; msb += 32; }\\n            if (xc >= 0x10000) { xc >>= 16; msb += 16; }\\n            if (xc >= 0x100) { xc >>= 8; msb += 8; }\\n            if (xc >= 0x10) { xc >>= 4; msb += 4; }\\n            if (xc >= 0x4) { xc >>= 2; msb += 2; }\\n            if (xc >= 0x2) msb += 1;  // No need to shift xc anymore\\n\\n            result = (x << 255 - msb) / ((y - 1 >> msb - 191) + 1);\\n            require (result <= 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF);\\n\\n            uint256 hi = result * (y >> 128);\\n            uint256 lo = result * (y & 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF);\\n\\n            uint256 xh = x >> 192;\\n            uint256 xl = x << 64;\\n\\n            if (xl < lo) xh -= 1;\\n            xl -= lo; // We rely on overflow behavior here\\n            lo = hi << 128;\\n            if (xl < lo) xh -= 1;\\n            xl -= lo; // We rely on overflow behavior here\\n\\n            assert (xh == hi >> 128);\\n\\n            result += xl / y;\\n        }\\n\\n        require (result <= 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF);\\n        return uint128 (result);\\n    }\\n\\n    /**\\n     * Calculate x^y assuming 0^0 is 1, where x is unsigned 129.127 fixed point\\n     * number and y is unsigned 256-bit integer number.  Revert on overflow.\\n     *\\n     * @param x unsigned 129.127-bit fixed point number\\n     * @param y uint256 value\\n     * @return unsigned 129.127-bit fixed point number\\n     */\\n    function powu (uint256 x, uint256 y) private pure returns (uint256) {\\n        if (y == 0) return 0x80000000000000000000000000000000;\\n        else if (x == 0) return 0;\\n        else {\\n            int256 msb = 0;\\n            uint256 xc = x;\\n            if (xc >= 0x100000000000000000000000000000000) { xc >>= 128; msb += 128; }\\n            if (xc >= 0x10000000000000000) { xc >>= 64; msb += 64; }\\n            if (xc >= 0x100000000) { xc >>= 32; msb += 32; }\\n            if (xc >= 0x10000) { xc >>= 16; msb += 16; }\\n            if (xc >= 0x100) { xc >>= 8; msb += 8; }\\n            if (xc >= 0x10) { xc >>= 4; msb += 4; }\\n            if (xc >= 0x4) { xc >>= 2; msb += 2; }\\n            if (xc >= 0x2) msb += 1;  // No need to shift xc anymore\\n\\n            int256 xe = msb - 127;\\n            if (xe > 0) x >>= uint256 (xe);\\n            else x <<= uint256 (-xe);\\n\\n            uint256 result = 0x80000000000000000000000000000000;\\n            int256 re = 0;\\n\\n            while (y > 0) {\\n                if (y & 1 > 0) {\\n                    result = result * x;\\n                    y -= 1;\\n                    re += xe;\\n                    if (result >=\\n                        0x8000000000000000000000000000000000000000000000000000000000000000) {\\n                        result >>= 128;\\n                        re += 1;\\n                    } else result >>= 127;\\n                    if (re < -127) return 0; // Underflow\\n                    require (re < 128); // Overflow\\n                } else {\\n                    x = x * x;\\n                    y >>= 1;\\n                    xe <<= 1;\\n                    if (x >=\\n                        0x8000000000000000000000000000000000000000000000000000000000000000) {\\n                        x >>= 128;\\n                        xe += 1;\\n                    } else x >>= 127;\\n                    if (xe < -127) return 0; // Underflow\\n                    require (xe < 128); // Overflow\\n                }\\n            }\\n\\n            if (re > 0) result <<= uint256 (re);\\n            else if (re < 0) result >>= uint256 (-re);\\n\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * Calculate sqrt (x) rounding down, where x is unsigned 256-bit integer\\n     * number.\\n     *\\n     * @param x unsigned 256-bit integer number\\n     * @return unsigned 128-bit integer number\\n     */\\n    function sqrtu (uint256 x) private pure returns (uint128) {\\n        if (x == 0) return 0;\\n        else {\\n            uint256 xx = x;\\n            uint256 r = 1;\\n            if (xx >= 0x100000000000000000000000000000000) { xx >>= 128; r <<= 64; }\\n            if (xx >= 0x10000000000000000) { xx >>= 64; r <<= 32; }\\n            if (xx >= 0x100000000) { xx >>= 32; r <<= 16; }\\n            if (xx >= 0x10000) { xx >>= 16; r <<= 8; }\\n            if (xx >= 0x100) { xx >>= 8; r <<= 4; }\\n            if (xx >= 0x10) { xx >>= 4; r <<= 2; }\\n            if (xx >= 0x8) { r <<= 1; }\\n            r = (r + x / r) >> 1;\\n            r = (r + x / r) >> 1;\\n            r = (r + x / r) >> 1;\\n            r = (r + x / r) >> 1;\\n            r = (r + x / r) >> 1;\\n            r = (r + x / r) >> 1;\\n            r = (r + x / r) >> 1; // Seven iterations should be enough\\n            uint256 r1 = x / r;\\n            return uint128 (r < r1 ? r : r1);\\n        }\\n    }\\n}\"\r\n    },\r\n    \"contracts/ChainlinkVRF.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.7.0;\\n\\nimport \\\"./LinkTokenInterface.sol\\\";\\nimport \\\"openzeppelin-solidity/contracts/math/SafeMath.sol\\\";\\n\\n\\n// See VRFConsumerBase.sol and VRFRequestIDBase.sol from Chainlink.\\nabstract contract ChainlinkVRF {\\n    using SafeMath for uint256;\\n\\n    /**\\n     * @notice fulfillRandomness handles the VRF response.\\n     */\\n    function fulfillRandomness(bytes32 requestId, uint256 randomness) internal virtual;\\n\\n    /**\\n     * @notice requestRandomness initiates a request for VRF output given _seed\\n     */\\n    function requestRandomness(bytes32 _keyHash, uint256 _fee, uint256 _seed)  internal returns (bytes32 requestId)\\n    {\\n        LINK.transferAndCall(vrfCoordinator, _fee, abi.encode(_keyHash, _seed));\\n        // This is the seed passed to VRFCoordinator. The oracle will mix this with\\n        // the hash of the block containing this request to obtain the seed/input\\n        // which is finally passed to the VRF cryptographic machinery.\\n        uint256 vRFSeed  = makeVRFInputSeed(_keyHash, _seed, address(this), nonces[_keyHash]);\\n        // nonces[_keyHash] must stay in sync with\\n        // VRFCoordinator.nonces[_keyHash][this], which was incremented by the above\\n        // successful LINK.transferAndCall (in VRFCoordinator.randomnessRequest).\\n        // This provides protection against the user repeating their input seed,\\n        // which would result in a predictable/duplicate output, if multiple such\\n        // requests appeared in the same block.\\n        nonces[_keyHash] = nonces[_keyHash].add(1);\\n        return makeRequestId(_keyHash, vRFSeed);\\n    }\\n\\n    LinkTokenInterface immutable internal LINK;\\n    address immutable private vrfCoordinator;\\n\\n    // Nonces for each VRF key from which randomness has been requested.\\n    //\\n    // Must stay in sync with VRFCoordinator[_keyHash][this]\\n    mapping(bytes32 /* keyHash */ => uint256 /* nonce */) private nonces;\\n\\n    /**\\n     * @param _vrfCoordinator address of VRFCoordinator contract\\n     * @param _link address of LINK token contract\\n     *\\n     * @dev https://docs.chain.link/docs/link-token-contracts\\n     */\\n    constructor(address _vrfCoordinator, address _link) {\\n        vrfCoordinator = _vrfCoordinator;\\n        LINK = LinkTokenInterface(_link);\\n    }\\n\\n    // rawFulfillRandomness is called by VRFCoordinator when it receives a valid VRF\\n    // proof. rawFulfillRandomness then calls fulfillRandomness, after validating\\n    // the origin of the call\\n    function rawFulfillRandomness(bytes32 requestId, uint256 randomness) external {\\n        require(msg.sender == vrfCoordinator, \\\"Only VRFCoordinator can fulfill\\\");\\n        fulfillRandomness(requestId, randomness);\\n    }\\n\\n    /**\\n   * @notice returns the seed which is actually input to the VRF coordinator\\n   */\\n    function makeVRFInputSeed(bytes32 _keyHash, uint256 _userSeed, address _requester, uint256 _nonce) internal pure returns (uint256)\\n    {\\n        return  uint256(keccak256(abi.encode(_keyHash, _userSeed, _requester, _nonce)));\\n    }\\n\\n    /**\\n     * @notice Returns the id for this request\\n     */\\n    function makeRequestId(bytes32 _keyHash, uint256 _vRFInputSeed) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(_keyHash, _vRFInputSeed));\\n    }\\n}\\n\"\r\n    },\r\n    \"openzeppelin-solidity/contracts/token/ERC721/IERC721Enumerable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.2 <0.8.0;\\n\\nimport \\\"./IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Enumerable is IERC721 {\\n\\n    /**\\n     * @dev Returns the total amount of tokens stored by the contract.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns a token ID owned by `owner` at a given `index` of its token list.\\n     * Use along with {balanceOf} to enumerate all of ``owner``'s tokens.\\n     */\\n    function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256 tokenId);\\n\\n    /**\\n     * @dev Returns a token ID at a given `index` of all the tokens stored by the contract.\\n     * Use along with {totalSupply} to enumerate all tokens.\\n     */\\n    function tokenByIndex(uint256 index) external view returns (uint256);\\n}\\n\"\r\n    },\r\n    \"contracts/Roles.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"openzeppelin-solidity/contracts/access/Ownable.sol\\\";\\nimport \\\"openzeppelin-solidity/contracts/GSN/Context.sol\\\";\\n\\n/**\\n * @dev Uses the Ownable class and adds a second role called the minter.\\n *\\n * Owner: Can upload tokens, withdraw lost tokens, config ipfs hashes etc. Can also mint tokens.\\n     Can set the other roles.\\n * Minter: Can only mint tokens.\\n * Doctor: If set, can diagnose pieces. Replaces the builtin rand gen.\\n */\\nabstract contract Roles is Context, Ownable {\\n    address private _minter;\\n    address private _doctor;\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial minter.\\n     */\\n    constructor () {\\n        address msgSender = _msgSender();\\n        _minter = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current minter.\\n     */\\n    function minter() public view returns (address) {\\n        return _minter;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the doctor.\\n     */\\n    function doctor() public view returns (address) {\\n        return _doctor;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the minter.\\n     */\\n    modifier onlyMinter() {\\n        require(_minter == _msgSender(), \\\"not minter\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the doctor.\\n     */\\n    modifier onlyDoctor() {\\n        require(_doctor == _msgSender(), \\\"not doctor\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the minter or the owner.\\n     */\\n    modifier onlyMinterOrOwner() {\\n        require(_minter == _msgSender() || owner() == _msgSender(), \\\"not minter or owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Transfers the minter role of the contract to a new account (`newMinter`).\\n     * Can only be called by the owner.\\n     */\\n    function setMinter(address newMinter) public virtual onlyOwner {\\n        require(newMinter != address(0), \\\"zero address\\\");\\n        _minter = newMinter;\\n    }\\n\\n    /**\\n     * @dev Assigns the doctor role, replacing the builtin rng.\\n     */\\n    function setDoctor(address newDoctor) public virtual onlyOwner {\\n        require(newDoctor != address(0), \\\"zero address\\\");\\n        _doctor = newDoctor;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/LinkTokenInterface.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.7.0;\\n\\ninterface LinkTokenInterface {\\n    function allowance(address owner, address spender) external view returns (uint256 remaining);\\n    function approve(address spender, uint256 value) external returns (bool success);\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n    function decimals() external view returns (uint8 decimalPlaces);\\n    function decreaseApproval(address spender, uint256 addedValue) external returns (bool success);\\n    function increaseApproval(address spender, uint256 subtractedValue) external;\\n    function name() external view returns (string memory tokenName);\\n    function symbol() external view returns (string memory tokenSymbol);\\n    function totalSupply() external view returns (uint256 totalTokensIssued);\\n    function transfer(address to, uint256 value) external returns (bool success);\\n    function transferAndCall(address to, uint256 value, bytes calldata data) external returns (bool success);\\n    function transferFrom(address from, address to, uint256 value) external returns (bool success);\\n}\\n\"\r\n    },\r\n    \"openzeppelin-solidity/contracts/math/SafeMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        uint256 c = a + b;\\n        if (c < a) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b > a) return (false, 0);\\n        return (true, a - b);\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) return (true, 0);\\n        uint256 c = a * b;\\n        if (c / a != b) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a / b);\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a % b);\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b <= a, \\\"SafeMath: subtraction overflow\\\");\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0) return 0;\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: division by zero\\\");\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: modulo by zero\\\");\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\"\r\n    },\r\n    \"openzeppelin-solidity/contracts/token/ERC721/IERC721.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.2 <0.8.0;\\n\\nimport \\\"../../introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    /**\\n      * @dev Safely transfers `tokenId` token from `from` to `to`.\\n      *\\n      * Requirements:\\n      *\\n      * - `from` cannot be the zero address.\\n      * - `to` cannot be the zero address.\\n      * - `tokenId` token must exist and be owned by `from`.\\n      * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n      * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n      *\\n      * Emits a {Transfer} event.\\n      */\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\\n}\\n\"\r\n    },\r\n    \"openzeppelin-solidity/contracts/introspection/IERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"openzeppelin-solidity/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor () internal {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n}\\n\"\r\n    },\r\n    \"openzeppelin-solidity/contracts/GSN/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\"\r\n    },\r\n    \"openzeppelin-solidity/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}","ABI":"[{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"coordinator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"keyHash\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"internalType\":\"struct Randomness.VRFConfig\",\"name\":\"vrfConfig\",\"type\":\"tuple\"},{\"internalType\":\"contract IMahin\",\"name\":\"_nft\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"RollComplete\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"int128\",\"name\":\"probability\",\"type\":\"int128\"}],\"name\":\"RollInProgress\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"_isDisabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"_tokenByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"applyRoll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"denominator\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"getProbability\",\"outputs\":[{\"internalType\":\"int128\",\"name\":\"probability\",\"type\":\"int128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isRolling\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastRollTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nft\",\"outputs\":[{\"internalType\":\"contract IMahin\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"requestId\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"randomness\",\"type\":\"uint256\"}],\"name\":\"rawFulfillRandomness\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"useFallback\",\"type\":\"bool\"}],\"name\":\"requestRoll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rollProbability\",\"outputs\":[{\"internalType\":\"int128\",\"name\":\"\",\"type\":\"int128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"setLastRollTime\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_probabilityPerSecond\",\"type\":\"uint256\"}],\"name\":\"setPerSecondProbability\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"DoctorV2","CompilerVersion":"v0.7.3+commit.9bfce1f6","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000f0d54349addcf704f77ae15b96510dea15cb7952000000000000000000000000514910771af9ca656af840dff83e8264ecf986caaa77729d3466ca35ae8d28b3bbac7cc36a5031efdc430821c02bc31a238af4450000000000000000000000000000000000000000000000001bc16d674ec80000000000000000000000000000e0ba5a6fc8209e225a9937ce1dfb397f18ad402f","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}