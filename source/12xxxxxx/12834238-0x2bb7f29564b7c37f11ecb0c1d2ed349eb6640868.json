{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/KingsPins.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/// @artist: Sacramento Kings\\n/// @author: manifold.xyz\\n\\nimport \\\"@manifoldxyz/libraries-solidity/contracts/access/AdminControl.sol\\\";\\nimport \\\"./core/IERC721CreatorCore.sol\\\";\\n\\nimport \\\"@openzeppelin/contracts/utils/introspection/ERC165Checker.sol\\\";\\n\\n/////////////////////////////////////////////////////////////////////////////\\n//                                                                         //\\n//                                                                         //\\n//                           ╦                                             //\\n//                         ╔╬╬                                             //\\n//                        ╔╬╣  ╔╗                   ╔╗  ╦╦╦    ╔╬╬╗        //\\n//                ╔╦╬   ╔╬╬╬╬  ╬╬         ╔╬╬╗   ╔╬╬╬╬╬╬╬╣   ╔╬╬╬╬╬        //\\n//            ╔╦╬╬╬╬╝  ╔╬╬╬╬╝       ╔╦╬╦╬╬╬╬╬╣  ╔╬╬╩  ╬╬╬╝ ╦╬╬╩ ╠╬╬╣       //\\n//           ╠╬╬╬╬╬╬  ╬╬╬╬╩   ╔╦╬   ╬╬╬╬╝ ╠╬╬  ╔╬╬╣  ╬╬╬╣╔╬╬╩   ╠╬╬╣       //\\n//           ╚╩╩╬╬╬╬╦╬╬╬╩     ╠╬╬  ╠╬╬╝   ╬╬╣ ╔╬╬╬╬╦╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬    //\\n//              ╬╬╬╬╬╬╝      ╠╬╬╝  ╬╬╣   ╠╬╬╬╬╩╩╬╬╬╩╬╬╬╬╩   ╚╩╩╩╩╩  ╬╬╬╬   //\\n//              ╬╬╬╬╬╣       ╠╬╬   ╬╬╣   ╚╬╩╩      ╬╬╬╬╗      ╔╦╦╦╬╬╬╝╙    //\\n//             ╬╬╬╣╬╬╬╬╦    ╔╦╬╬╦╦╦╬╬╝      ╔╦╦╬╬╬╬╬╬╩╩╩╩╩╩╩╩╩╩╩╩╩╩╩       //\\n//             ╠╬╬╝ ╬╬╬╬╬╦╦╬╬╩╬╬╬╩╩╩   ╔╦╬╬╩╩╬╬╬╬╝╠╬╬⌐                     //\\n//             ╬╬╬   ╙╬╬╬╬╬╬╝     ╔╦╦╬╬╬╩╝ ╔╬╬╬╩╝╔╬╬╝                      //\\n//            ╬╬╬╣           ╔╦╦╬╬╬╬╩╝    ╔╬╬╬╝ ╔╬╬╩                       //\\n//      ╬    ╬╬╬╬╝        ╔╦╬╬╬╬╬╬╩      ╔╬╬╬╬╦╦╬╬╩                        //\\n//      ╬╦╦╦╬╬╬╬╝     ╔╦╬╬╬╬╬╬╬╩╩        ╬╬╬╬╬╬╬╬╝                         //\\n//      ╚╬╬╬╬╬╬╩    ╔╬╬╬╬╬╬╬╬╩            ╚╩╩╩╝                            //\\n//       ╚╩╩╩╩╝   ╔╦╬╬╬╬╬╬╬╝                                               //\\n//             ╔╬╬╬╬╬╬╬╬╬╬╩                                                //\\n//           ╔╬╬╬╬╬╬╬╬╩╩╩╝                                                 //\\n//         ╔╬╬╬╬╬╩╩╝                                                       //\\n//       ╔╬╬╬╩╩                                                            //\\n//      ╬╬╩╝                                                               //\\n//    ╩╩╝                                                                  //\\n//                                                                         //\\n//                                                                         //\\n/////////////////////////////////////////////////////////////////////////////\\n\\n/**\\n * 1985 Inaugural Season Opening Night Pin – Special Edition\\n */\\ncontract KingsPin is AdminControl {\\n\\n     address private _creator;    \\n\\n    /**\\n     * @dev Activate the contract and mint the tokens\\n     */\\n    function activate(address creator) public adminRequired {\\n        require(ERC165Checker.supportsInterface(creator, type(IERC721CreatorCore).interfaceId), \\\"Requires creator to implement IERC721CreatorCore\\\");\\n        require(_creator == address(0), \\\"Already active\\\");\\n\\n        _creator = creator;\\n\\n        string[84] memory hashes = [\\n            \\\"mdx21f5lP3vDFzRySV8m4n5kd3E_vXGmaHSs2uC6NcQ\\\",\\n            \\\"SOXmBqJDWYYzyzcuY2Kssof6TpS4gC7ZY2mKY9h-D_E\\\",\\n            \\\"oUewfazRxNNyFOF-MTZECu6brW9BIDPW38akY9CbtOg\\\",\\n            \\\"agLZK3myhunlyY3oX4vL_GWAbtm2R6FzpLb3q8WUKxE\\\",\\n            \\\"wmA4g9EQZD3mfLt7QnrG5GcJpV5Sloea0QlyCvuBhQw\\\",\\n            \\\"Z6ptejLWEwZjNT6tHl3uKRUgZ_3yeNtpRn28mzHZyCg\\\",\\n            \\\"sRfnvi-41Pb5qsq0fywBAT6iaehdVqQidqozVqj1tSs\\\",\\n            \\\"qozuGWkw1_crmcyoeDOE7zdmXCb_9Hq9kQYx4LSXN08\\\",\\n            \\\"ZJOEfx5HIjGsvNWrG7VZ-1CRfhBhhDepGiQGHQRnPq8\\\",\\n            \\\"pog4NmGp1Ft1xsrdDhzxDU84qSsDh3Lz34zqQcmct3M\\\",\\n            \\\"vXlw0JsstKkkRA92wBbXjtxkSBu33OvL6mbsKXNSU8c\\\",\\n            \\\"CsQf0akwjdOfbvfXSMk782sCNhUIfo5rB0ZLDWE3mwI\\\",\\n            \\\"UY1XlH9S7BgtL9ZcRjo2wOyLchqmY0fpLbwHmIZqG6Q\\\",\\n            \\\"ozexV0CN3QLpF9r9RZ0quezpq6bQA_xcPAuicWW7AQ8\\\",\\n            \\\"HDe3kEWjN9EQQG5TlyMO60bPg0dxBOR6Yqun-CNhpx0\\\",\\n            \\\"IzkQnUXJzRTClJpxBsWJl0VeQrcJFzDifG3-eStcLFM\\\",\\n            \\\"QhyXNYUcH6RQSmP2yU0Kh-xUB3A6RjGgRrBOstL8CCU\\\",\\n            \\\"lzcZkaaGDFawPLOgleAI5ogcUZ2UEzvUHFvKj1cWA8U\\\",\\n            \\\"LgOfDu3bBGdkyoVEk1-K6FsCfyt0qE-8d-WZkGqiDFE\\\",\\n            \\\"SboO2zUhhPVNNjf3XJr5fAjpLt-qr85DZVBfT2rk5_s\\\",\\n            \\\"yRz-W0hcua6K97lQVS1nU1gXuVdpMGf7H4DRqNwd3jQ\\\",\\n            \\\"D1tqlNS4IW1fTWbJk9Av5o2cUYYZ7ccjhlKhSLbs7VQ\\\",\\n            \\\"TUQ3kIiy_90zWrCoRTgZg8_Z6w7RhT9Xpw8m6NjW6BM\\\",\\n            \\\"jPCGRcOHGPMa7PMHRcA7BGkn1uzR14Sb0nHYj7AWHXc\\\",\\n            \\\"pK2h971pmK8VX0VZXRCOxcSz_Q01enG7kVK4zF8LE2U\\\",\\n            \\\"VytCFcGwCWsnKcuNt4-sg1rfT8p9EMp5Gh3x82zlkSU\\\",\\n            \\\"LnZJ2rrtkpZ71mTmojpFr1IeeM9H7yi9l0zafiJe8j4\\\",\\n            \\\"UQKqAsuJtJiUjbZXVVXVPAqRbQtzFVBOz8FoXPPCnPM\\\",\\n            \\\"LvVPcUqUKC-VFdRQoH3q3IDmkkpxEMA9N6Mc0Tgz3wY\\\",\\n            \\\"L4Lh3dbvA328-ovkQB26LQanf7-2zlBRUA9feMB7_Ng\\\",\\n            \\\"hQzYWTUz4QuZ26kh4kBEcpVDG4OcyPDJO9Fv3tFzWFc\\\",\\n            \\\"ilmMA17sY16MY_1PgFet5lxKnVZwt18xBhMMJq93yro\\\",\\n            \\\"nLh_pKaL6fhXU5-3bUFLI3KpqBhWOTQqk6eHFNKou1k\\\",\\n            \\\"-rnLyIIjPZyNMwvlszGh2hH3meLzRGSfLMtGBvOUcRE\\\",\\n            \\\"xrAHdW3wHoKH4uacxwYtHGEH9CN-1Ihracqk1CBeVWk\\\",\\n            \\\"HJl4P1mdLzF5fTtSpFu_rQsnpvsrJ3zdfqjcPJSq8AM\\\",\\n            \\\"95fgRJeGDEZboPEbsPwcYpUyKU6CNajwd03KjIah918\\\",\\n            \\\"1q249yW3WXWCIcSAHqTF4A4f14iXcagNAhIFI97GtJs\\\",\\n            \\\"fxgTQMiFr-GLuoeezhkFn1QxAqGYW7pJ6vsV-RNo2so\\\",\\n            \\\"ejF7a8Z_DBCZKub_A3i_R-QoSOmrqBnNDYpJsjt6blQ\\\",\\n            \\\"r2ZJrskXgMrRVne5fPeDIG1qhcZ0Pdo8OmXXybUYveM\\\",\\n            \\\"E-tz4u0zAFUoLHGuRujKg4T5k35_DLoRs01ae2vvYKI\\\",\\n            \\\"2g_wvMtl8DLB0Lxg6kkwBVPQYjt9eaZbPQa1SYPpvyQ\\\",\\n            \\\"iNL86xE8kNNb3L7j-ztmUxOFDio_RCpd6CjlpiHFLOo\\\",\\n            \\\"3CCHaY7wtlcd8imSAL-FsR0PTOkfdBuziOQX7BVk-14\\\",\\n            \\\"Vv47URPO7SidofsYzjwiKFrQNK6AXLJdTXxtwLTx6MI\\\",\\n            \\\"wB-y3l9TSy67uGecnMVXNhVcG0sNSUt2oCh_t_YtZJ8\\\",\\n            \\\"HWFIDPA2nkU4B-ybcAOc-KFB5V2KrtxpODUMPINZwGg\\\",\\n            \\\"iEggRcgXyL_mvjqwZfiRpQ4W0_XO4agCpAQ9_bduQUc\\\",\\n            \\\"_avn1n9J4TIccU4p_rPqVFOyL-agfPUYsTNeqPUnNbg\\\",\\n            \\\"OO60BJn1QB7G-QxLT2sE7ds_BkOBuahyq9HzGQeCkao\\\",\\n            \\\"uJETazKkdSpqKiPHoP43gpedG9yavmG2Un-m0UG9v1g\\\",\\n            \\\"spFC7BpOrV5UpQP1fjDdMxLqmLC_3sypntya9fhampA\\\",\\n            \\\"z2JFW6jcx4ak2DmZfDkEidI3NIaGeRiZGJ9XROIA5sY\\\",\\n            \\\"uW1mCRhq1B3VRPDFEE3nFJUkdsmwTvrVbE-UT6pxtok\\\",\\n            \\\"2XbHUb2b3S8JZDQbm8Utjg5i3QI0-_hWsBL1s5ha9Ms\\\",\\n            \\\"nQKVftnCU5VrnMhSaLLEEgtoYWcGvhAKt7ZYqVelqmw\\\",\\n            \\\"j13eXYze9rFjrFZyAMQlMqQXC7K3rNz9hEYk7I3pU0M\\\",\\n            \\\"crFpfFSa4vfDQStuDYdq2O46EP8zxpUa_2ZFBr7LT2s\\\",\\n            \\\"bJR_4VLv-hWU7TSpqCUs1ezau0cfv4ARE66UoMbsyQk\\\",\\n            \\\"87o5zQ026hMK9juFHhiUByqHLDd1i4F_Bz79C7ne1FE\\\",\\n            \\\"AMtn4SRcyvNPFkCelwNvtntBfUHqfnn4EINJtDSY3KU\\\",\\n            \\\"NPT1nusPvmOfsyivNpNLQitHi6zlueI6G1RZbnoMp28\\\",\\n            \\\"lS6TIurSukGM92DsfxoUu8Dxoy_atIrCoi3XseZqQ2w\\\",\\n            \\\"JAxNwYrk_C502jTomeMzo8otjfO8KYS2_g9gFV13oZA\\\",\\n            \\\"Yf9KFqrhIZ2ohbeQHcRjSwfxL4Oa2jwZwSKtRrSUY0M\\\",\\n            \\\"Mc_TZRzkia8O5vbeEFi5To45npGtbHFTgMY6UiZjnl4\\\",\\n            \\\"p19iD1c4YOwXni7-ZbLcih08beehQVJQGBCohphuBcA\\\",\\n            \\\"pUAI-F78fTw-DsLxzg1FaIKKIaz_E10QbPHxq9aKe14\\\",\\n            \\\"tvNoAKXPgA0f-wgRqdlH93MbutjWyIe1U81Cw_3akMQ\\\",\\n            \\\"fPrUWMNosaLuUKOO-C_X1I_UCilAkbZPvd72oQKnI9s\\\",\\n            \\\"Ac1uUb4yi7fT9MmaXawTSjyUdl918pQTmvaKVBgSX_c\\\",\\n            \\\"ujNxT3qtdfMRW6yKhxF15sJqv1LSnz78UnR3qPCEXVM\\\",\\n            \\\"Tkc0WtgFjUoQ9oGdLKMgNz4e2Np5R8amFnwp0OVVzqM\\\",\\n            \\\"SbtNPpyKLaFbchmP4SEe9rxpcPNoP3nlqGOv8SYMu24\\\",\\n            \\\"JfrJAN-ngDUbGwkNnVff8qfDkMsZ4gGtBrHG-5r5_7M\\\",\\n            \\\"o_I9Ghne2X8DhZOjp_S7vyE9KN1FfNeuW_bvfOr7NnQ\\\",\\n            \\\"oz6V2bC-PVfDAtIJTiYB8BAyxDAN4RJmRLeC14emA40\\\",\\n            \\\"McDLNHSEIm6uZPaeyOwl_xiNbUO_4OPit6thjKpg7Wg\\\",\\n            \\\"o3k_-F8pGP-v6AIv-jTPgz2Givr7xJeWMSTbXoUlj8Q\\\",\\n            \\\"QgZwFC5wuKIJ3Pv_3CTmxkdc705ENM8_5lNd7Qxmxk8\\\",\\n            \\\"2JnlggtDmkc9H9KTmCK9Tj-rjKoDTyOrAIiyAFLvmwE\\\",\\n            \\\"-9zCHYC3UD4QASu1eloANMXoBAsiF8DmQqKprmAaNx4\\\",\\n            \\\"eWVXQ3AqLbZaSgwskenkloejJ43X9JhlsUXcXvSy_Ss\\\"];\\n\\n        IERC721CreatorCore(_creator).setTokenURIPrefixExtension('https://arweave.net/');\\n        for (uint i = 0; i < 63; i++) {\\n            IERC721CreatorCore(_creator).mintExtension(owner(), hashes[i]);\\n        }\\n    }\\n\\n    function setBaseTokenURI(string calldata uri) external adminRequired {\\n        IERC721CreatorCore(_creator).setBaseTokenURIExtension(uri);\\n    }\\n\\n    function setBaseTokenURI(string calldata uri, bool identical) external adminRequired {\\n        IERC721CreatorCore(_creator).setBaseTokenURIExtension(uri, identical);\\n    }\\n\\n    function setTokenURI(uint256 tokenId, string calldata uri) external adminRequired {\\n        IERC721CreatorCore(_creator).setTokenURIExtension(tokenId, uri);\\n    }\\n\\n    function setTokenURI(uint256[] calldata tokenIds, string[] calldata uris) external adminRequired {\\n        IERC721CreatorCore(_creator).setTokenURIExtension(tokenIds, uris);\\n    }\\n\\n    function setTokenURIPrefix(string calldata prefix) external adminRequired {\\n        IERC721CreatorCore(_creator).setTokenURIPrefixExtension(prefix);\\n    }\\n\\n\\n}\"\r\n    },\r\n    \"@manifoldxyz/libraries-solidity/contracts/access/AdminControl.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/// @author: manifold.xyz\\n\\nimport \\\"@openzeppelin/contracts/utils/introspection/ERC165.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"./IAdminControl.sol\\\";\\n\\nabstract contract AdminControl is Ownable, IAdminControl, ERC165 {\\n    using EnumerableSet for EnumerableSet.AddressSet;\\n\\n    // Track registered admins\\n    EnumerableSet.AddressSet private _admins;\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return interfaceId == type(IAdminControl).interfaceId\\n            || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Only allows approved admins to call the specified function\\n     */\\n    modifier adminRequired() {\\n        require(owner() == msg.sender || _admins.contains(msg.sender), \\\"AdminControl: Must be owner or admin\\\");\\n        _;\\n    }   \\n\\n    /**\\n     * @dev See {IAdminControl-getAdmins}.\\n     */\\n    function getAdmins() external view override returns (address[] memory admins) {\\n        admins = new address[](_admins.length());\\n        for (uint i = 0; i < _admins.length(); i++) {\\n            admins[i] = _admins.at(i);\\n        }\\n        return admins;\\n    }\\n\\n    /**\\n     * @dev See {IAdminControl-approveAdmin}.\\n     */\\n    function approveAdmin(address admin) external override onlyOwner {\\n        if (!_admins.contains(admin)) {\\n            emit AdminApproved(admin, msg.sender);\\n            _admins.add(admin);\\n        }\\n    }\\n\\n    /**\\n     * @dev See {IAdminControl-revokeAdmin}.\\n     */\\n    function revokeAdmin(address admin) external override onlyOwner {\\n        if (_admins.contains(admin)) {\\n            emit AdminRevoked(admin, msg.sender);\\n            _admins.remove(admin);\\n        }\\n    }\\n\\n    /**\\n     * @dev See {IAdminControl-isAdmin}.\\n     */\\n    function isAdmin(address admin) public override view returns (bool) {\\n        return (owner() == admin || _admins.contains(admin));\\n    }\\n\\n}\"\r\n    },\r\n    \"contracts/core/IERC721CreatorCore.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/// @author: manifold.xyz\\n\\nimport \\\"./ICreatorCore.sol\\\";\\n\\n/**\\n * @dev Core ERC721 creator interface\\n */\\ninterface IERC721CreatorCore is ICreatorCore {\\n\\n    /**\\n     * @dev mint a token with no extension. Can only be called by an admin.\\n     * Returns tokenId minted\\n     */\\n    function mintBase(address to) external returns (uint256);\\n\\n    /**\\n     * @dev mint a token with no extension. Can only be called by an admin.\\n     * Returns tokenId minted\\n     */\\n    function mintBase(address to, string calldata uri) external returns (uint256);\\n\\n    /**\\n     * @dev batch mint a token with no extension. Can only be called by an admin.\\n     * Returns tokenId minted\\n     */\\n    function mintBaseBatch(address to, uint16 count) external returns (uint256[] memory);\\n\\n    /**\\n     * @dev batch mint a token with no extension. Can only be called by an admin.\\n     * Returns tokenId minted\\n     */\\n    function mintBaseBatch(address to, string[] calldata uris) external returns (uint256[] memory);\\n\\n    /**\\n     * @dev mint a token. Can only be called by a registered extension.\\n     * Returns tokenId minted\\n     */\\n    function mintExtension(address to) external returns (uint256);\\n\\n    /**\\n     * @dev mint a token. Can only be called by a registered extension.\\n     * Returns tokenId minted\\n     */\\n    function mintExtension(address to, string calldata uri) external returns (uint256);\\n\\n    /**\\n     * @dev batch mint a token. Can only be called by a registered extension.\\n     * Returns tokenIds minted\\n     */\\n    function mintExtensionBatch(address to, uint16 count) external returns (uint256[] memory);\\n\\n    /**\\n     * @dev batch mint a token. Can only be called by a registered extension.\\n     * Returns tokenId minted\\n     */\\n    function mintExtensionBatch(address to, string[] calldata uris) external returns (uint256[] memory);\\n\\n    /**\\n     * @dev burn a token. Can only be called by token owner or approved address.\\n     * On burn, calls back to the registered extension's onBurn method\\n     */\\n    function burn(uint256 tokenId) external;\\n\\n}\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/introspection/ERC165Checker.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Library used to query support of an interface declared via {IERC165}.\\n *\\n * Note that these functions return the actual result of the query: they do not\\n * `revert` if an interface is not supported. It is up to the caller to decide\\n * what to do in these cases.\\n */\\nlibrary ERC165Checker {\\n    // As per the EIP-165 spec, no interface should ever match 0xffffffff\\n    bytes4 private constant _INTERFACE_ID_INVALID = 0xffffffff;\\n\\n    /**\\n     * @dev Returns true if `account` supports the {IERC165} interface,\\n     */\\n    function supportsERC165(address account) internal view returns (bool) {\\n        // Any contract that implements ERC165 must explicitly indicate support of\\n        // InterfaceId_ERC165 and explicitly indicate non-support of InterfaceId_Invalid\\n        return\\n            _supportsERC165Interface(account, type(IERC165).interfaceId) &&\\n            !_supportsERC165Interface(account, _INTERFACE_ID_INVALID);\\n    }\\n\\n    /**\\n     * @dev Returns true if `account` supports the interface defined by\\n     * `interfaceId`. Support for {IERC165} itself is queried automatically.\\n     *\\n     * See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(address account, bytes4 interfaceId) internal view returns (bool) {\\n        // query support of both ERC165 as per the spec and support of _interfaceId\\n        return supportsERC165(account) && _supportsERC165Interface(account, interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns a boolean array where each value corresponds to the\\n     * interfaces passed in and whether they're supported or not. This allows\\n     * you to batch check interfaces for a contract where your expectation\\n     * is that some interfaces may not be supported.\\n     *\\n     * See {IERC165-supportsInterface}.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function getSupportedInterfaces(address account, bytes4[] memory interfaceIds)\\n        internal\\n        view\\n        returns (bool[] memory)\\n    {\\n        // an array of booleans corresponding to interfaceIds and whether they're supported or not\\n        bool[] memory interfaceIdsSupported = new bool[](interfaceIds.length);\\n\\n        // query support of ERC165 itself\\n        if (supportsERC165(account)) {\\n            // query support of each interface in interfaceIds\\n            for (uint256 i = 0; i < interfaceIds.length; i++) {\\n                interfaceIdsSupported[i] = _supportsERC165Interface(account, interfaceIds[i]);\\n            }\\n        }\\n\\n        return interfaceIdsSupported;\\n    }\\n\\n    /**\\n     * @dev Returns true if `account` supports all the interfaces defined in\\n     * `interfaceIds`. Support for {IERC165} itself is queried automatically.\\n     *\\n     * Batch-querying can lead to gas savings by skipping repeated checks for\\n     * {IERC165} support.\\n     *\\n     * See {IERC165-supportsInterface}.\\n     */\\n    function supportsAllInterfaces(address account, bytes4[] memory interfaceIds) internal view returns (bool) {\\n        // query support of ERC165 itself\\n        if (!supportsERC165(account)) {\\n            return false;\\n        }\\n\\n        // query support of each interface in _interfaceIds\\n        for (uint256 i = 0; i < interfaceIds.length; i++) {\\n            if (!_supportsERC165Interface(account, interfaceIds[i])) {\\n                return false;\\n            }\\n        }\\n\\n        // all interfaces supported\\n        return true;\\n    }\\n\\n    /**\\n     * @notice Query if a contract implements an interface, does not check ERC165 support\\n     * @param account The address of the contract to query for support of an interface\\n     * @param interfaceId The interface identifier, as specified in ERC-165\\n     * @return true if the contract at account indicates support of the interface with\\n     * identifier interfaceId, false otherwise\\n     * @dev Assumes that account contains a contract that supports ERC165, otherwise\\n     * the behavior of this method is undefined. This precondition can be checked\\n     * with {supportsERC165}.\\n     * Interface identification is specified in ERC-165.\\n     */\\n    function _supportsERC165Interface(address account, bytes4 interfaceId) private view returns (bool) {\\n        bytes memory encodedParams = abi.encodeWithSelector(IERC165(account).supportsInterface.selector, interfaceId);\\n        (bool success, bytes memory result) = account.staticcall{gas: 30000}(encodedParams);\\n        if (result.length < 32) return false;\\n        return success && abi.decode(result, (bool));\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/introspection/ERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping(bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) {\\n            // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            if (lastIndex != toDeleteIndex) {\\n                bytes32 lastvalue = set._values[lastIndex];\\n\\n                // Move the last value to the index where the value to delete is\\n                set._values[toDeleteIndex] = lastvalue;\\n                // Update the index for the moved value\\n                set._indexes[lastvalue] = valueIndex; // Replace lastvalue's index to valueIndex\\n            }\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        return set._values[index];\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _setOwner(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _setOwner(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _setOwner(newOwner);\\n    }\\n\\n    function _setOwner(address newOwner) private {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"@manifoldxyz/libraries-solidity/contracts/access/IAdminControl.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/// @author: manifold.xyz\\n\\nimport \\\"@openzeppelin/contracts/utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Interface for admin control\\n */\\ninterface IAdminControl is IERC165 {\\n\\n    event AdminApproved(address indexed account, address indexed sender);\\n    event AdminRevoked(address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev gets address of all admins\\n     */\\n    function getAdmins() external view returns (address[] memory);\\n\\n    /**\\n     * @dev add an admin.  Can only be called by contract owner.\\n     */\\n    function approveAdmin(address admin) external;\\n\\n    /**\\n     * @dev remove an admin.  Can only be called by contract owner.\\n     */\\n    function revokeAdmin(address admin) external;\\n\\n    /**\\n     * @dev checks whether or not given address is an admin\\n     * Returns True if they are\\n     */\\n    function isAdmin(address admin) external view returns (bool);\\n\\n}\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/introspection/IERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/core/ICreatorCore.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/// @author: manifold.xyz\\n\\nimport \\\"@openzeppelin/contracts/utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Core creator interface\\n */\\ninterface ICreatorCore is IERC165 {\\n\\n    event ExtensionRegistered(address indexed extension, address indexed sender);\\n    event ExtensionUnregistered(address indexed extension, address indexed sender);\\n    event ExtensionBlacklisted(address indexed extension, address indexed sender);\\n    event MintPermissionsUpdated(address indexed extension, address indexed permissions, address indexed sender);\\n    event RoyaltiesUpdated(uint256 indexed tokenId, address payable[] receivers, uint256[] basisPoints);\\n    event DefaultRoyaltiesUpdated(address payable[] receivers, uint256[] basisPoints);\\n    event ExtensionRoyaltiesUpdated(address indexed extension, address payable[] receivers, uint256[] basisPoints);\\n    event ExtensionApproveTransferUpdated(address indexed extension, bool enabled);\\n\\n    /**\\n     * @dev gets address of all extensions\\n     */\\n    function getExtensions() external view returns (address[] memory);\\n\\n    /**\\n     * @dev add an extension.  Can only be called by contract owner or admin.\\n     * extension address must point to a contract implementing ICreatorExtension.\\n     * Returns True if newly added, False if already added.\\n     */\\n    function registerExtension(address extension, string calldata baseURI) external;\\n\\n    /**\\n     * @dev add an extension.  Can only be called by contract owner or admin.\\n     * extension address must point to a contract implementing ICreatorExtension.\\n     * Returns True if newly added, False if already added.\\n     */\\n    function registerExtension(address extension, string calldata baseURI, bool baseURIIdentical) external;\\n\\n    /**\\n     * @dev add an extension.  Can only be called by contract owner or admin.\\n     * Returns True if removed, False if already removed.\\n     */\\n    function unregisterExtension(address extension) external;\\n\\n    /**\\n     * @dev blacklist an extension.  Can only be called by contract owner or admin.\\n     * This function will destroy all ability to reference the metadata of any tokens created\\n     * by the specified extension. It will also unregister the extension if needed.\\n     * Returns True if removed, False if already removed.\\n     */\\n    function blacklistExtension(address extension) external;\\n\\n    /**\\n     * @dev set the baseTokenURI of an extension.  Can only be called by extension.\\n     */\\n    function setBaseTokenURIExtension(string calldata uri) external;\\n\\n    /**\\n     * @dev set the baseTokenURI of an extension.  Can only be called by extension.\\n     * For tokens with no uri configured, tokenURI will return \\\"uri+tokenId\\\"\\n     */\\n    function setBaseTokenURIExtension(string calldata uri, bool identical) external;\\n\\n    /**\\n     * @dev set the common prefix of an extension.  Can only be called by extension.\\n     * If configured, and a token has a uri set, tokenURI will return \\\"prefixURI+tokenURI\\\"\\n     * Useful if you want to use ipfs/arweave\\n     */\\n    function setTokenURIPrefixExtension(string calldata prefix) external;\\n\\n    /**\\n     * @dev set the tokenURI of a token extension.  Can only be called by extension that minted token.\\n     */\\n    function setTokenURIExtension(uint256 tokenId, string calldata uri) external;\\n\\n    /**\\n     * @dev set the tokenURI of a token extension for multiple tokens.  Can only be called by extension that minted token.\\n     */\\n    function setTokenURIExtension(uint256[] memory tokenId, string[] calldata uri) external;\\n\\n    /**\\n     * @dev set the baseTokenURI for tokens with no extension.  Can only be called by owner/admin.\\n     * For tokens with no uri configured, tokenURI will return \\\"uri+tokenId\\\"\\n     */\\n    function setBaseTokenURI(string calldata uri) external;\\n\\n    /**\\n     * @dev set the common prefix for tokens with no extension.  Can only be called by owner/admin.\\n     * If configured, and a token has a uri set, tokenURI will return \\\"prefixURI+tokenURI\\\"\\n     * Useful if you want to use ipfs/arweave\\n     */\\n    function setTokenURIPrefix(string calldata prefix) external;\\n\\n    /**\\n     * @dev set the tokenURI of a token with no extension.  Can only be called by owner/admin.\\n     */\\n    function setTokenURI(uint256 tokenId, string calldata uri) external;\\n\\n    /**\\n     * @dev set the tokenURI of multiple tokens with no extension.  Can only be called by owner/admin.\\n     */\\n    function setTokenURI(uint256[] memory tokenIds, string[] calldata uris) external;\\n\\n    /**\\n     * @dev set a permissions contract for an extension.  Used to control minting.\\n     */\\n    function setMintPermissions(address extension, address permissions) external;\\n\\n    /**\\n     * @dev Configure so transfers of tokens created by the caller (must be extension) gets approval\\n     * from the extension before transferring\\n     */\\n    function setApproveTransferExtension(bool enabled) external;\\n\\n    /**\\n     * @dev get the extension of a given token\\n     */\\n    function tokenExtension(uint256 tokenId) external view returns (address);\\n\\n    /**\\n     * @dev Set default royalties\\n     */\\n    function setRoyalties(address payable[] calldata receivers, uint256[] calldata basisPoints) external;\\n\\n    /**\\n     * @dev Set royalties of a token\\n     */\\n    function setRoyalties(uint256 tokenId, address payable[] calldata receivers, uint256[] calldata basisPoints) external;\\n\\n    /**\\n     * @dev Set royalties of an extension\\n     */\\n    function setRoyaltiesExtension(address extension, address payable[] calldata receivers, uint256[] calldata basisPoints) external;\\n\\n    /**\\n     * @dev Get royalites of a token.  Returns list of receivers and basisPoints\\n     */\\n    function getRoyalties(uint256 tokenId) external view returns (address payable[] memory, uint256[] memory);\\n    \\n    // Royalty support for various other standards\\n    function getFeeRecipients(uint256 tokenId) external view returns (address payable[] memory);\\n    function getFeeBps(uint256 tokenId) external view returns (uint[] memory);\\n    function getFees(uint256 tokenId) external view returns (address payable[] memory, uint256[] memory);\\n    function royaltyInfo(uint256 tokenId, uint256 value) external view returns (address, uint256);\\n\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 25\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}","ABI":"[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"AdminApproved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"AdminRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"}],\"name\":\"activate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"admin\",\"type\":\"address\"}],\"name\":\"approveAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAdmins\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"admins\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"admin\",\"type\":\"address\"}],\"name\":\"isAdmin\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"admin\",\"type\":\"address\"}],\"name\":\"revokeAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"uri\",\"type\":\"string\"}],\"name\":\"setBaseTokenURI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"uri\",\"type\":\"string\"},{\"internalType\":\"bool\",\"name\":\"identical\",\"type\":\"bool\"}],\"name\":\"setBaseTokenURI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"uri\",\"type\":\"string\"}],\"name\":\"setTokenURI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"tokenIds\",\"type\":\"uint256[]\"},{\"internalType\":\"string[]\",\"name\":\"uris\",\"type\":\"string[]\"}],\"name\":\"setTokenURI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"prefix\",\"type\":\"string\"}],\"name\":\"setTokenURIPrefix\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"KingsPin","CompilerVersion":"v0.8.4+commit.c7e474f2","OptimizationUsed":"1","Runs":"25","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}