{"status":"1","message":"OK","result":[{"SourceCode":"// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.0;\r\n\r\n/*\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor () {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\n//////////////////////////////////////////////////\r\n// CUSTOM LOGIC STARTS HERE, PURE OZ CODE ABOVE //\r\n//////////////////////////////////////////////////\r\n\r\ninterface IERC20 {\r\n    function totalSupply() external view returns (uint256);\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\ninterface IERC20L is IERC20 {\r\n    function transferLocked(address recipient, uint256 amount, uint32 hardLockUntil, uint32 softLockUntil, uint8 allowedHops) external returns (bool);\r\n}\r\n\r\ncontract LockedQANX is Ownable {\r\n\r\n    // THE CONTRACT ADDRESS OF QANX AND USDT\r\n    IERC20L private _qanx = IERC20L(0xAAA7A10a8ee237ea61E8AC46C50A8Db8bCC1baaa);\r\n    IERC20  private _usdt = IERC20(0xdAC17F958D2ee523a2206206994597C13D831ec7);\r\n\r\n    // THIS REPRESENTS AN OFFER'S PROPERTIES GIVEN TO A BUYER\r\n    struct Offer {\r\n        uint256 qanxAmount;     // HOW MANY QANX TOKENS ARE OFFERED FOR SALE\r\n        uint256 usdtAmount;     // HOW MUCH USDT TO SEND TO CLAIM THE OFFERED TOKENS\r\n        uint32 claimableHours;  // UNTIL WHEN THIS OFFER IS CLAIMABLE FROM NOW (HOURS)\r\n        uint32 hardLockUntil;   // UNTIL WHEN THE BOUGHT TOKENS WILL BE LOCKED\r\n        uint32 softLockUntil;   // UNTIL WHEN THE BOUGHT TOKENS WILL BE GRADUALLY RELEASED\r\n        uint8 allowedHops;      // HOW MANY FURTHER TRANSFERS ARE ALLOWED\r\n    }\r\n\r\n    // THIS MAPS THE BUYER ADDRESSES TO THE OFFERS GIVEN TO THEM\r\n    mapping (address => Offer) public offers;\r\n\r\n    // MAKE AN OFFER TO A BUYER\r\n    function makeOffer(\r\n        address _toBuyer,\r\n        uint256 _qanxAmount,\r\n        uint256 _usdtAmount,\r\n        uint32 _claimableHours,\r\n        uint32 _hardLockUntil,\r\n        uint32 _softLockUntil,\r\n        uint8 _allowedHops) public onlyOwner {\r\n        \r\n        // IF ABOVE CONDITIONS WERE MET, REGISTER OFFER\r\n        offers[_toBuyer] = Offer({\r\n            qanxAmount: _qanxAmount * (10 ** 18),   // QANX TOKEN HAS 18 DECIMALS\r\n            usdtAmount: _usdtAmount * (10 ** 6),    // USDT TOKEN HAS 6  DECIMALS\r\n            claimableHours: uint32(block.timestamp + _claimableHours * 3600),\r\n            hardLockUntil: _hardLockUntil,\r\n            softLockUntil: _softLockUntil,\r\n            allowedHops: _allowedHops\r\n        });\r\n    }\r\n\r\n    // NON-CLAIMED OFFERS CAN BE CANCELLED\r\n    function cancelOffer(address _ofBuyer) public onlyOwner {\r\n\r\n        // REMOVE BUYER'S OFFER FROM MAPPING\r\n        delete offers[_ofBuyer];\r\n    }\r\n\r\n    // BUYERS NEED TO SEND A ZERO ETH TX TO SWAP USDT -> QANX\r\n    fallback() external payable {\r\n\r\n        // OFFER MUST BE STILL CLAIMABLE\r\n        require(offers[_msgSender()].claimableHours > block.timestamp, \"Offer expired!\");\r\n\r\n        // MAKE SURE THIS CONTRACT CAN SEND ENOUGH QANX TO BUYER\r\n        uint256 qanxAllowance = _qanx.allowance(owner(), address(this));\r\n        require(offers[_msgSender()].qanxAmount <= qanxAllowance, \"Not enough QANX tokens approved\");\r\n\r\n        // REQUIRE THAT BUYER HAS APPROVED CORRECT USDT PURCHASE PRICE\r\n        uint256 usdtAllowance = _usdt.allowance(_msgSender(), address(this));\r\n        require(offers[_msgSender()].usdtAmount == usdtAllowance, \"Incorrect purchase price approved\");\r\n\r\n        // TRANSFER USDT FROM BUYER TO THIS CONTRACT\r\n        _usdt.transferFrom(_msgSender(), address(this), usdtAllowance);\r\n\r\n        // TRANSFER UNLOCKED QANX TO THIS CONTRACT\r\n        _qanx.transferFrom(owner(), address(this), offers[_msgSender()].qanxAmount);\r\n        _qanx.transferLocked(\r\n            _msgSender(),\r\n            offers[_msgSender()].qanxAmount,\r\n            offers[_msgSender()].hardLockUntil,\r\n            offers[_msgSender()].softLockUntil,\r\n            offers[_msgSender()].allowedHops\r\n        );\r\n\r\n        // REMOVE BUYER'S OFFER FROM MAPPING\r\n        delete offers[_msgSender()];\r\n    }\r\n\r\n    // SELLER CAN CLAIM THE AMOUNT PAID BY THE BUYER\r\n    function claimPurchasePrice(address _beneficiary) public onlyOwner {\r\n        _usdt.transfer(_beneficiary, _usdt.balanceOf(address(this)));\r\n    }\r\n}","ABI":"[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_ofBuyer\",\"type\":\"address\"}],\"name\":\"cancelOffer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_beneficiary\",\"type\":\"address\"}],\"name\":\"claimPurchasePrice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_toBuyer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_qanxAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_usdtAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"_claimableHours\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"_hardLockUntil\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"_softLockUntil\",\"type\":\"uint32\"},{\"internalType\":\"uint8\",\"name\":\"_allowedHops\",\"type\":\"uint8\"}],\"name\":\"makeOffer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"offers\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"qanxAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"usdtAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"claimableHours\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"hardLockUntil\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"softLockUntil\",\"type\":\"uint32\"},{\"internalType\":\"uint8\",\"name\":\"allowedHops\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"LockedQANX","CompilerVersion":"v0.8.4+commit.c7e474f2","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://9ba4c8d8afb6551eea72fd5100e8693003ade63c1364c1894593a5aaa1670205"}]}