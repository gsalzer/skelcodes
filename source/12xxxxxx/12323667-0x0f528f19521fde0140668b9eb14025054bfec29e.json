{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"/C/Users/simor/Desktop/imx/contracts/Distributor.sol\": {\r\n      \"content\": \"pragma solidity =0.6.6;\\r\\n\\r\\nimport \\\"./libraries/SafeMath.sol\\\";\\r\\nimport \\\"./interfaces/IImx.sol\\\";\\r\\nimport \\\"./interfaces/IClaimable.sol\\\";\\r\\n\\r\\nabstract contract Distributor is IClaimable {\\r\\n\\tusing SafeMath for uint;\\r\\n\\r\\n\\taddress public immutable imx;\\r\\n\\taddress public immutable claimable;\\r\\n\\r\\n\\tstruct Recipient {\\r\\n\\t\\tuint shares;\\r\\n\\t\\tuint lastShareIndex;\\r\\n\\t\\tuint credit;\\r\\n\\t}\\r\\n\\tmapping(address => Recipient) public recipients;\\r\\n\\t\\r\\n\\tuint public totalShares;\\r\\n\\tuint public shareIndex;\\r\\n\\t\\r\\n\\tevent UpdateShareIndex(uint shareIndex);\\r\\n\\tevent UpdateCredit(address indexed account, uint lastShareIndex, uint credit);\\r\\n\\tevent Claim(address indexed account, uint amount);\\r\\n\\tevent EditRecipient(address indexed account, uint shares, uint totalShares);\\r\\n\\r\\n\\tconstructor (\\r\\n\\t\\taddress imx_,\\r\\n\\t\\taddress claimable_\\r\\n\\t) public {\\r\\n\\t\\timx = imx_;\\r\\n\\t\\tclaimable = claimable_;\\r\\n\\t}\\r\\n\\t\\r\\n\\tfunction updateShareIndex() public virtual nonReentrant returns (uint _shareIndex) {\\r\\n\\t\\tif (totalShares == 0) return shareIndex;\\r\\n\\t\\tuint amount = IClaimable(claimable).claim();\\r\\n\\t\\tif (amount == 0) return shareIndex;\\r\\n\\t\\t_shareIndex = amount.mul(2**160).div(totalShares).add(shareIndex);\\r\\n\\t\\tshareIndex = _shareIndex;\\r\\n\\t\\temit UpdateShareIndex(_shareIndex);\\r\\n\\t}\\r\\n\\t\\r\\n\\tfunction updateCredit(address account) public returns (uint credit) {\\r\\n\\t\\tuint _shareIndex = updateShareIndex();\\r\\n\\t\\tif (_shareIndex == 0) return 0;\\r\\n\\t\\tRecipient storage recipient = recipients[account];\\r\\n\\t\\tcredit = recipient.credit + _shareIndex.sub(recipient.lastShareIndex).mul(recipient.shares) / 2**160;\\r\\n\\t\\trecipient.lastShareIndex = _shareIndex;\\r\\n\\t\\trecipient.credit = credit;\\r\\n\\t\\temit UpdateCredit(account, _shareIndex, credit);\\r\\n\\t}\\r\\n\\r\\n\\tfunction claimInternal(address account) internal virtual returns (uint amount) {\\r\\n\\t\\tamount = updateCredit(account);\\r\\n\\t\\tif (amount > 0) {\\r\\n\\t\\t\\trecipients[account].credit = 0;\\r\\n\\t\\t\\tIImx(imx).transfer(account, amount);\\r\\n\\t\\t\\temit Claim(account, amount);\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\r\\n\\tfunction claim() external virtual override returns (uint amount) {\\r\\n\\t\\treturn claimInternal(msg.sender);\\r\\n\\t}\\r\\n\\t\\r\\n\\tfunction editRecipientInternal(address account, uint shares) internal {\\r\\n\\t\\tupdateCredit(account);\\r\\n\\t\\tRecipient storage recipient = recipients[account];\\r\\n\\t\\tuint prevShares = recipient.shares;\\r\\n\\t\\tuint _totalShares = shares > prevShares ? \\r\\n\\t\\t\\ttotalShares.add(shares - prevShares) : \\r\\n\\t\\t\\ttotalShares.sub(prevShares - shares);\\r\\n\\t\\ttotalShares = _totalShares;\\r\\n\\t\\trecipient.shares = shares;\\r\\n\\t\\temit EditRecipient(account, shares, _totalShares);\\r\\n\\t}\\r\\n\\t\\r\\n\\t// Prevents a contract from calling itself, directly or indirectly.\\r\\n\\tbool internal _notEntered = true;\\r\\n\\tmodifier nonReentrant() {\\r\\n\\t\\trequire(_notEntered, \\\"Distributor: REENTERED\\\");\\r\\n\\t\\t_notEntered = false;\\r\\n\\t\\t_;\\r\\n\\t\\t_notEntered = true;\\r\\n\\t}\\r\\n}\"\r\n    },\r\n    \"/C/Users/simor/Desktop/imx/contracts/OwnedDistributor.sol\": {\r\n      \"content\": \"pragma solidity =0.6.6;\\r\\n\\r\\nimport \\\"./Distributor.sol\\\";\\r\\n\\r\\ncontract OwnedDistributor is Distributor {\\r\\n\\r\\n\\taddress public admin;\\r\\n\\t\\r\\n\\tevent SetAdmin(address newAdmin);\\r\\n\\r\\n\\tconstructor (\\r\\n\\t\\taddress imx_,\\r\\n\\t\\taddress claimable_,\\r\\n\\t\\taddress admin_\\r\\n\\t) public Distributor(imx_, claimable_) {\\r\\n\\t\\tadmin = admin_;\\r\\n\\t}\\r\\n\\r\\n\\tfunction editRecipient(address account, uint shares) public virtual {\\r\\n\\t\\trequire(msg.sender == admin, \\\"OwnedDistributor: UNAUTHORIZED\\\");\\r\\n\\t\\teditRecipientInternal(account, shares);\\r\\n\\t}\\r\\n\\r\\n\\tfunction setAdmin(address admin_) public virtual {\\r\\n\\t\\trequire(msg.sender == admin, \\\"OwnedDistributor: UNAUTHORIZED\\\");\\r\\n\\t\\tadmin = admin_;\\r\\n\\t\\temit SetAdmin(admin_);\\r\\n\\t}\\r\\n}\"\r\n    },\r\n    \"/C/Users/simor/Desktop/imx/contracts/interfaces/IClaimable.sol\": {\r\n      \"content\": \"pragma solidity =0.6.6;\\r\\n\\r\\ninterface IClaimable {\\r\\n\\tfunction claim() external returns (uint amount);\\r\\n\\tevent Claim(address indexed account, uint amount);\\r\\n}\"\r\n    },\r\n    \"/C/Users/simor/Desktop/imx/contracts/interfaces/IImx.sol\": {\r\n      \"content\": \"pragma solidity =0.6.6;\\r\\n//IERC20?\\r\\ninterface IImx {\\r\\n    function balanceOf(address account) external view returns (uint);\\r\\n    function transfer(address dst, uint rawAmount) external returns (bool);\\r\\n}\"\r\n    },\r\n    \"/C/Users/simor/Desktop/imx/contracts/libraries/SafeMath.sol\": {\r\n      \"content\": \"pragma solidity =0.6.6;\\n\\n// From https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/math/Math.sol\\n// Subject to the MIT license.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting with custom message on overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, errorMessage);\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on underflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     * - Subtraction cannot underflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return sub(a, b, \\\"SafeMath: subtraction underflow\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on underflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     * - Subtraction cannot underflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        uint256 c = a - b;\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = a * b;\\n        require(c / a == b, errorMessage);\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers.\\n     * Reverts on division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers.\\n     * Reverts with custom message on division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        // Solidity only automatically asserts when dividing by 0\\n        require(b > 0, errorMessage);\\n        uint256 c = a / b;\\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return mod(a, b, \\\"SafeMath: modulo by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts with custom message when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b != 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"remappings\": [],\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 999999\r\n    },\r\n    \"evmVersion\": \"istanbul\",\r\n    \"libraries\": {},\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"imx_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"claimable_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"admin_\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Claim\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalShares\",\"type\":\"uint256\"}],\"name\":\"EditRecipient\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"SetAdmin\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"lastShareIndex\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"credit\",\"type\":\"uint256\"}],\"name\":\"UpdateCredit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"shareIndex\",\"type\":\"uint256\"}],\"name\":\"UpdateShareIndex\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"admin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claim\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimable\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"}],\"name\":\"editRecipient\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"imx\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"recipients\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastShareIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"credit\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"admin_\",\"type\":\"address\"}],\"name\":\"setAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"shareIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalShares\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"updateCredit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"credit\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"updateShareIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_shareIndex\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"OwnedDistributor","CompilerVersion":"v0.6.6+commit.6c089d02","OptimizationUsed":"1","Runs":"999999","ConstructorArguments":"0000000000000000000000007b35ce522cb72e4077baeb96cb923a5529764a0000000000000000000000000003f75e626cacb190e0f6072cf5ec5b304517e3c70000000000000000000000009fc5341db9a9cdf8337b4bd286d4cfc03b20ad35","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}