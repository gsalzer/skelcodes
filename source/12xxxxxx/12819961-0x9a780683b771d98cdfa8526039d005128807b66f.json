{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"/home/artem/Projects/Distributed_Lab/Applicature/bridgemutual-core/contracts/BMIStaking.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.4;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\nimport \\\"./interfaces/IContractsRegistry.sol\\\";\\nimport \\\"./interfaces/IBMIStaking.sol\\\";\\nimport \\\"./interfaces/tokens/ISTKBMIToken.sol\\\";\\nimport \\\"./interfaces/ILiquidityMining.sol\\\";\\n\\nimport \\\"./interfaces/tokens/erc20permit-upgradeable/IERC20PermitUpgradeable.sol\\\";\\n\\nimport \\\"./abstract/AbstractDependant.sol\\\";\\n\\nimport \\\"./Globals.sol\\\";\\n\\ncontract BMIStaking is IBMIStaking, OwnableUpgradeable, AbstractDependant {\\n    using SafeMath for uint256;\\n\\n    IERC20 public bmiToken;\\n    ISTKBMIToken public stkBMIToken;\\n    uint256 public lastUpdateBlock;\\n    uint256 public rewardPerBlock;\\n    uint256 public totalPool;\\n\\n    address public legacyBMIStakingAddress;\\n    ILiquidityMining public liquidityMining;\\n    address public bmiCoverStakingAddress;\\n    address public liquidityMiningStakingAddress;\\n\\n    mapping(address => WithdrawalInfo) private withdrawalsInfo;\\n\\n    IERC20 public vBMI;\\n\\n    uint256 internal constant WITHDRAWING_LOCKUP_DURATION = 90 days;\\n    uint256 internal constant WITHDRAWING_COOLDOWN_DURATION = 8 days;\\n    uint256 internal constant WITHDRAWAL_PHASE_DURATION = 2 days;\\n\\n    modifier updateRewardPool() {\\n        _updateRewardPool();\\n        _;\\n    }\\n\\n    modifier onlyStaking() {\\n        require(\\n            _msgSender() == bmiCoverStakingAddress ||\\n                _msgSender() == liquidityMiningStakingAddress ||\\n                _msgSender() == legacyBMIStakingAddress,\\n            \\\"BMIStaking: Not a staking contract\\\"\\n        );\\n        _;\\n    }\\n\\n    function __BMIStaking_init(uint256 _rewardPerBlock) external initializer {\\n        __Ownable_init();\\n\\n        lastUpdateBlock = block.number;\\n        rewardPerBlock = _rewardPerBlock;\\n    }\\n\\n    function setDependencies(IContractsRegistry _contractsRegistry)\\n        external\\n        override\\n        onlyInjectorOrZero\\n    {\\n        legacyBMIStakingAddress = _contractsRegistry.getLegacyBMIStakingContract();\\n        bmiToken = IERC20(_contractsRegistry.getBMIContract());\\n        stkBMIToken = ISTKBMIToken(_contractsRegistry.getSTKBMIContract());\\n        liquidityMining = ILiquidityMining(_contractsRegistry.getLiquidityMiningContract());\\n        bmiCoverStakingAddress = _contractsRegistry.getBMICoverStakingContract();\\n        liquidityMiningStakingAddress = _contractsRegistry.getLiquidityMiningStakingContract();\\n        vBMI = IERC20(_contractsRegistry.getVBMIContract());\\n    }\\n\\n    function stakeWithPermit(\\n        uint256 _amountBMI,\\n        uint8 _v,\\n        bytes32 _r,\\n        bytes32 _s\\n    ) external override {\\n        IERC20PermitUpgradeable(address(bmiToken)).permit(\\n            _msgSender(),\\n            address(this),\\n            _amountBMI,\\n            MAX_INT,\\n            _v,\\n            _r,\\n            _s\\n        );\\n\\n        bmiToken.transferFrom(_msgSender(), address(this), _amountBMI);\\n        _stake(_msgSender(), _amountBMI);\\n    }\\n\\n    function stakeFor(address _user, uint256 _amountBMI) external override onlyStaking {\\n        require(_amountBMI > 0, \\\"BMIStaking: can't stake 0 tokens\\\");\\n\\n        _stake(_user, _amountBMI);\\n    }\\n\\n    function stake(uint256 _amountBMI) external override {\\n        require(_amountBMI > 0, \\\"BMIStaking: can't stake 0 tokens\\\");\\n\\n        bmiToken.transferFrom(_msgSender(), address(this), _amountBMI);\\n        _stake(_msgSender(), _amountBMI);\\n    }\\n\\n    /// @notice checks when the unlockPeriod expires (90 days)\\n    /// @return exact timestamp of the unlock time or 0 if LME is not started or unlock period is reached\\n    function maturityAt() external view override returns (uint256) {\\n        uint256 maturityDate =\\n            liquidityMining.startLiquidityMiningTime().add(WITHDRAWING_LOCKUP_DURATION);\\n\\n        return maturityDate < block.timestamp ? 0 : maturityDate;\\n    }\\n\\n    // It is unlocked after 90 days\\n    function isBMIRewardUnlocked() public view override returns (bool) {\\n        uint256 liquidityMiningStartTime = liquidityMining.startLiquidityMiningTime();\\n\\n        return\\n            liquidityMiningStartTime == 0 ||\\n            liquidityMiningStartTime.add(WITHDRAWING_LOCKUP_DURATION) <= block.timestamp;\\n    }\\n\\n    // There is a second withdrawal phase of 48 hours to actually receive the rewards.\\n    // If a user misses this period, in order to withdraw he has to wait for 10 days again.\\n    // It will return:\\n    // 0 if cooldown time didn't start or if phase duration (48hs) has expired\\n    // #coolDownTimeEnd Time when user can withdraw.\\n    function whenCanWithdrawBMIReward(address _address) public view override returns (uint256) {\\n        return\\n            withdrawalsInfo[_address].coolDownTimeEnd.add(WITHDRAWAL_PHASE_DURATION) >=\\n                block.timestamp\\n                ? withdrawalsInfo[_address].coolDownTimeEnd\\n                : 0;\\n    }\\n\\n    /*\\n     * Before a withdraw, it is needed to wait 90 days after LiquidityMining started.\\n     * And after 90 days, user can request to withdraw and wait 10 days.\\n     * After 10 days, user can withdraw, but user has 48hs to withdraw. After 48hs,\\n     * user will need to request to withdraw again and wait for more 10 days before\\n     * being able to withdraw.\\n     */\\n    function unlockTokensToWithdraw(uint256 _amountBMIUnlock) external override {\\n        require(_amountBMIUnlock > 0, \\\"BMIStaking: can't unlock 0 tokens\\\");\\n        require(isBMIRewardUnlocked(), \\\"BMIStaking: lock up time didn't end\\\");\\n\\n        uint256 _amountStkBMIUnlock = _convertToStkBMI(_amountBMIUnlock);\\n        require(\\n            stkBMIToken.balanceOf(_msgSender()) >= _amountStkBMIUnlock,\\n            \\\"BMIStaking: not enough BMI to unlock\\\"\\n        );\\n\\n        withdrawalsInfo[_msgSender()] = WithdrawalInfo(\\n            block.timestamp.add(WITHDRAWING_COOLDOWN_DURATION),\\n            _amountBMIUnlock\\n        );\\n    }\\n\\n    // User can withdraw after unlock period is over, when 10 days passed\\n    // after user asked to unlock stkBMI and before 48hs that stkBMI are unlocked.\\n    function withdraw() external override updateRewardPool {\\n        //it will revert (equal to 0) here if passed 48hs after unlock period, if\\n        //lockup period didn't start or didn't passed 90 days or if unlock didn't start\\n        uint256 _whenCanWithdrawBMIReward = whenCanWithdrawBMIReward(_msgSender());\\n        require(_whenCanWithdrawBMIReward != 0, \\\"BMIStaking: unlock not started/exp\\\");\\n        require(_whenCanWithdrawBMIReward <= block.timestamp, \\\"BMIStaking: cooldown not reached\\\");\\n\\n        uint256 amountBMI = withdrawalsInfo[_msgSender()].amountBMIRequested;\\n        delete withdrawalsInfo[_msgSender()];\\n\\n        require(bmiToken.balanceOf(address(this)) >= amountBMI, \\\"BMIStaking: !enough BMI tokens\\\");\\n\\n        uint256 _amountStkBMI = _convertToStkBMI(amountBMI);\\n\\n        require(\\n            stkBMIToken.balanceOf(_msgSender()) >= _amountStkBMI,\\n            \\\"BMIStaking: !enough stkBMI to withdraw\\\"\\n        );\\n\\n        stkBMIToken.burn(_msgSender(), _amountStkBMI);\\n\\n        totalPool = totalPool.sub(amountBMI);\\n\\n        bmiToken.transfer(_msgSender(), amountBMI);\\n\\n        emit BMIWithdrawn(amountBMI, _amountStkBMI, _msgSender());\\n    }\\n\\n    /// @notice Getting withdraw information\\n    /// @return _amountBMIRequested is amount of bmi tokens requested to unlock\\n    /// @return _amountStkBMI is amount of stkBMI that will burn\\n    /// @return _unlockPeriod is its timestamp when user can withdraw\\n    ///         returns 0 if it didn't unlocked yet. User has 48hs to withdraw\\n    /// @return _availableFor is the end date if withdraw period has already begun\\n    ///         or 0 if it is expired or didn't start\\n    function getWithdrawalInfo(address _userAddr)\\n        external\\n        view\\n        override\\n        returns (\\n            uint256 _amountBMIRequested,\\n            uint256 _amountStkBMI,\\n            uint256 _unlockPeriod,\\n            uint256 _availableFor\\n        )\\n    {\\n        // if whenCanWithdrawBMIReward() returns >0 it was unlocked\\n        // or is not expired\\n        _unlockPeriod = whenCanWithdrawBMIReward(_userAddr);\\n\\n        if (_unlockPeriod > 0) {\\n            _amountBMIRequested = withdrawalsInfo[_userAddr].amountBMIRequested;\\n            _amountStkBMI = _convertToStkBMI(_amountBMIRequested);\\n\\n            uint256 endUnlockPeriod = _unlockPeriod.add(WITHDRAWAL_PHASE_DURATION);\\n            _availableFor = _unlockPeriod <= block.timestamp ? endUnlockPeriod : 0;\\n        }\\n    }\\n\\n    function addToPool(uint256 _amount) external override onlyStaking updateRewardPool {\\n        totalPool = totalPool.add(_amount);\\n    }\\n\\n    function stakingReward(uint256 _amount) external view override returns (uint256) {\\n        return _convertToBMI(_amount);\\n    }\\n\\n    function getStakedBMI(address _address) external view override returns (uint256) {\\n        uint256 balance = stkBMIToken.balanceOf(_address).add(vBMI.balanceOf(_address));\\n        return balance > 0 ? _convertToBMI(balance) : 0;\\n    }\\n\\n    /// @notice returns APY% with 10**5 precision\\n    function getAPY() external view override returns (uint256) {\\n        return rewardPerBlock.mul(BLOCKS_PER_YEAR.mul(10**7)).div(totalPool.add(APY_TOKENS));\\n    }\\n\\n    function setRewardPerBlock(uint256 _amount) external override onlyOwner updateRewardPool {\\n        rewardPerBlock = _amount;\\n    }\\n\\n    function revokeRewardPool(uint256 _amount) external override onlyOwner updateRewardPool {\\n        require(_amount > 0, \\\"BMIStaking: Amount is zero\\\");\\n        require(_amount <= totalPool, \\\"BMIStaking: Amount is greater than the pool\\\");\\n        require(\\n            _amount <= bmiToken.balanceOf(address(this)),\\n            \\\"BMIStaking: Amount is greater than the balance\\\"\\n        );\\n\\n        totalPool = totalPool.sub(_amount);\\n        bmiToken.transfer(_msgSender(), _amount);\\n\\n        emit RewardPoolRevoked(_msgSender(), _amount);\\n    }\\n\\n    function revokeUnusedRewardPool() external override onlyOwner updateRewardPool {\\n        uint256 contractBalance = bmiToken.balanceOf(address(this));\\n\\n        require(contractBalance > totalPool, \\\"BMIStaking: No unused tokens revoke\\\");\\n\\n        uint256 unusedTokens = contractBalance.sub(totalPool);\\n\\n        bmiToken.transfer(_msgSender(), unusedTokens);\\n\\n        emit UnusedRewardPoolRevoked(_msgSender(), unusedTokens);\\n    }\\n\\n    function _updateRewardPool() internal {\\n        if (totalPool == 0) {\\n            lastUpdateBlock = block.number;\\n        }\\n\\n        totalPool = totalPool.add(_calculateReward());\\n        lastUpdateBlock = block.number;\\n    }\\n\\n    function _stake(address _staker, uint256 _amountBMI) internal updateRewardPool {\\n        uint256 amountStkBMI = _convertToStkBMI(_amountBMI);\\n        stkBMIToken.mint(_staker, amountStkBMI);\\n\\n        totalPool = totalPool.add(_amountBMI);\\n\\n        emit StakedBMI(_amountBMI, amountStkBMI, _staker);\\n    }\\n\\n    function _convertToStkBMI(uint256 _amount) internal view returns (uint256) {\\n        uint256 stkBMITokenTS = stkBMIToken.totalSupply();\\n        uint256 stakingPool = totalPool.add(_calculateReward());\\n\\n        if (stakingPool > 0 && stkBMITokenTS > 0) {\\n            _amount = stkBMITokenTS.mul(_amount).div(stakingPool);\\n        }\\n\\n        return _amount;\\n    }\\n\\n    function _convertToBMI(uint256 _amount) internal view returns (uint256) {\\n        uint256 stkBMITokenTS = stkBMIToken.totalSupply();\\n        uint256 stakingPool = totalPool.add(_calculateReward());\\n\\n        return stkBMITokenTS > 0 ? stakingPool.mul(_amount).div(stkBMITokenTS) : 0;\\n    }\\n\\n    function _calculateReward() internal view returns (uint256) {\\n        uint256 blocksPassed = block.number.sub(lastUpdateBlock);\\n        return rewardPerBlock.mul(blocksPassed);\\n    }\\n}\\n\"\r\n    },\r\n    \"/home/artem/Projects/Distributed_Lab/Applicature/bridgemutual-core/contracts/Globals.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.7.4;\\npragma experimental ABIEncoderV2;\\n\\nuint256 constant SECONDS_IN_THE_YEAR = 365 * 24 * 60 * 60; // 365 days * 24 hours * 60 minutes * 60 seconds\\nuint256 constant MAX_INT = type(uint256).max;\\n\\nuint256 constant DECIMALS18 = 10**18;\\n\\nuint256 constant PRECISION = 10**25;\\nuint256 constant PERCENTAGE_100 = 100 * PRECISION;\\n\\nuint256 constant BLOCKS_PER_DAY = 6450;\\nuint256 constant BLOCKS_PER_YEAR = BLOCKS_PER_DAY * 365;\\n\\nuint256 constant APY_TOKENS = DECIMALS18;\\n\"\r\n    },\r\n    \"/home/artem/Projects/Distributed_Lab/Applicature/bridgemutual-core/contracts/abstract/AbstractDependant.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.7.4;\\n\\nimport \\\"../interfaces/IContractsRegistry.sol\\\";\\n\\nabstract contract AbstractDependant {\\n    /// @dev keccak256(AbstractDependant.setInjector(address)) - 1\\n    bytes32 private constant _INJECTOR_SLOT =\\n        0xd6b8f2e074594ceb05d47c27386969754b6ad0c15e5eb8f691399cd0be980e76;\\n\\n    modifier onlyInjectorOrZero() {\\n        address _injector = injector();\\n\\n        require(_injector == address(0) || _injector == msg.sender, \\\"Dependant: Not an injector\\\");\\n        _;\\n    }\\n\\n    function setInjector(address _injector) external onlyInjectorOrZero {\\n        bytes32 slot = _INJECTOR_SLOT;\\n\\n        assembly {\\n            sstore(slot, _injector)\\n        }\\n    }\\n\\n    /// @dev has to apply onlyInjectorOrZero() modifier\\n    function setDependencies(IContractsRegistry) external virtual;\\n\\n    function injector() public view returns (address _injector) {\\n        bytes32 slot = _INJECTOR_SLOT;\\n\\n        assembly {\\n            _injector := sload(slot)\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"/home/artem/Projects/Distributed_Lab/Applicature/bridgemutual-core/contracts/interfaces/IBMIStaking.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.4;\\n\\nimport \\\"./tokens/ISTKBMIToken.sol\\\";\\n\\ninterface IBMIStaking {\\n    event StakedBMI(uint256 stakedBMI, uint256 mintedStkBMI, address indexed recipient);\\n    event BMIWithdrawn(uint256 amountBMI, uint256 burnedStkBMI, address indexed recipient);\\n\\n    event UnusedRewardPoolRevoked(address recipient, uint256 amount);\\n    event RewardPoolRevoked(address recipient, uint256 amount);\\n\\n    struct WithdrawalInfo {\\n        uint256 coolDownTimeEnd;\\n        uint256 amountBMIRequested;\\n    }\\n\\n    function stakeWithPermit(\\n        uint256 _amountBMI,\\n        uint8 _v,\\n        bytes32 _r,\\n        bytes32 _s\\n    ) external;\\n\\n    function stakeFor(address _user, uint256 _amountBMI) external;\\n\\n    function stake(uint256 _amountBMI) external;\\n\\n    function maturityAt() external view returns (uint256);\\n\\n    function isBMIRewardUnlocked() external view returns (bool);\\n\\n    function whenCanWithdrawBMIReward(address _address) external view returns (uint256);\\n\\n    function unlockTokensToWithdraw(uint256 _amountBMIUnlock) external;\\n\\n    function withdraw() external;\\n\\n    /// @notice Getting withdraw information\\n    /// @return _amountBMIRequested is amount of bmi tokens requested to unlock\\n    /// @return _amountStkBMI is amount of stkBMI that will burn\\n    /// @return _unlockPeriod is its timestamp when user can withdraw\\n    ///         returns 0 if it didn't unlocked yet. User has 48hs to withdraw\\n    /// @return _availableFor is the end date if withdraw period has already begun\\n    ///         or 0 if it is expired or didn't start\\n    function getWithdrawalInfo(address _userAddr)\\n        external\\n        view\\n        returns (\\n            uint256 _amountBMIRequested,\\n            uint256 _amountStkBMI,\\n            uint256 _unlockPeriod,\\n            uint256 _availableFor\\n        );\\n\\n    function addToPool(uint256 _amount) external;\\n\\n    function stakingReward(uint256 _amount) external view returns (uint256);\\n\\n    function getStakedBMI(address _address) external view returns (uint256);\\n\\n    function getAPY() external view returns (uint256);\\n\\n    function setRewardPerBlock(uint256 _amount) external;\\n\\n    function revokeRewardPool(uint256 _amount) external;\\n\\n    function revokeUnusedRewardPool() external;\\n}\\n\"\r\n    },\r\n    \"/home/artem/Projects/Distributed_Lab/Applicature/bridgemutual-core/contracts/interfaces/IContractsRegistry.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.7.4;\\npragma experimental ABIEncoderV2;\\n\\ninterface IContractsRegistry {\\n    function getUniswapRouterContract() external view returns (address);\\n\\n    function getUniswapBMIToETHPairContract() external view returns (address);\\n\\n    function getWETHContract() external view returns (address);\\n\\n    function getUSDTContract() external view returns (address);\\n\\n    function getBMIContract() external view returns (address);\\n\\n    function getPriceFeedContract() external view returns (address);\\n\\n    function getPolicyBookRegistryContract() external view returns (address);\\n\\n    function getPolicyBookFabricContract() external view returns (address);\\n\\n    function getBMICoverStakingContract() external view returns (address);\\n\\n    function getRewardsGeneratorContract() external view returns (address);\\n\\n    function getBMIUtilityNFTContract() external view returns (address);\\n\\n    function getLiquidityMiningContract() external view returns (address);\\n\\n    function getClaimingRegistryContract() external view returns (address);\\n\\n    function getPolicyRegistryContract() external view returns (address);\\n\\n    function getLiquidityRegistryContract() external view returns (address);\\n\\n    function getClaimVotingContract() external view returns (address);\\n\\n    function getReinsurancePoolContract() external view returns (address);\\n\\n    function getPolicyBookAdminContract() external view returns (address);\\n\\n    function getPolicyQuoteContract() external view returns (address);\\n\\n    function getLegacyBMIStakingContract() external view returns (address);\\n\\n    function getBMIStakingContract() external view returns (address);\\n\\n    function getSTKBMIContract() external view returns (address);\\n\\n    function getVBMIContract() external view returns (address);\\n\\n    function getLegacyLiquidityMiningStakingContract() external view returns (address);\\n\\n    function getLiquidityMiningStakingContract() external view returns (address);\\n\\n    function getReputationSystemContract() external view returns (address);\\n}\\n\"\r\n    },\r\n    \"/home/artem/Projects/Distributed_Lab/Applicature/bridgemutual-core/contracts/interfaces/ILiquidityMining.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.7.4;\\npragma experimental ABIEncoderV2;\\n\\ninterface ILiquidityMining {\\n    struct TeamDetails {\\n        string teamName;\\n        address referralLink;\\n        uint256 membersNumber;\\n        uint256 totalStakedAmount;\\n        uint256 totalReward;\\n    }\\n\\n    struct UserInfo {\\n        address userAddr;\\n        string teamName;\\n        uint256 stakedAmount;\\n        uint256 mainNFT; // 0 or NFT index if available\\n        uint256 platinumNFT; // 0 or NFT index if available\\n    }\\n\\n    struct UserRewardsInfo {\\n        string teamName;\\n        uint256 totalBMIReward; // total BMI reward\\n        uint256 availableBMIReward; // current claimable BMI reward\\n        uint256 incomingPeriods; // how many month are incoming\\n        uint256 timeToNextDistribution; // exact time left to next distribution\\n        uint256 claimedBMI; // actual number of claimed BMI\\n        uint256 mainNFTAvailability; // 0 or NFT index if available\\n        uint256 platinumNFTAvailability; // 0 or NFT index if available\\n        bool claimedNFTs; // true if user claimed NFTs\\n    }\\n\\n    struct MyTeamInfo {\\n        TeamDetails teamDetails;\\n        uint256 myStakedAmount;\\n        uint256 teamPlace;\\n    }\\n\\n    struct UserTeamInfo {\\n        address teamAddr;\\n        uint256 stakedAmount;\\n        uint256 countOfRewardedMonth;\\n        bool isNFTDistributed;\\n    }\\n\\n    struct TeamInfo {\\n        string name;\\n        uint256 totalAmount;\\n        address[] teamLeaders;\\n    }\\n\\n    function startLiquidityMiningTime() external view returns (uint256);\\n\\n    function getTopTeams() external view returns (TeamDetails[] memory teams);\\n\\n    function getTopUsers() external view returns (UserInfo[] memory users);\\n\\n    function getAllTeamsLength() external view returns (uint256);\\n\\n    function getAllTeamsDetails(uint256 _offset, uint256 _limit)\\n        external\\n        view\\n        returns (TeamDetails[] memory _teamDetailsArr);\\n\\n    function getMyTeamsLength() external view returns (uint256);\\n\\n    function getMyTeamMembers(uint256 _offset, uint256 _limit)\\n        external\\n        view\\n        returns (address[] memory _teamMembers, uint256[] memory _memberStakedAmount);\\n\\n    function getAllUsersLength() external view returns (uint256);\\n\\n    function getAllUsersInfo(uint256 _offset, uint256 _limit)\\n        external\\n        view\\n        returns (UserInfo[] memory _userInfos);\\n\\n    function getMyTeamInfo() external view returns (MyTeamInfo memory _myTeamInfo);\\n\\n    function getRewardsInfo(address user)\\n        external\\n        view\\n        returns (UserRewardsInfo memory userRewardInfo);\\n\\n    function createTeam(string calldata _teamName) external;\\n\\n    function deleteTeam() external;\\n\\n    function joinTheTeam(address _referralLink) external;\\n\\n    function getSlashingPercentage() external view returns (uint256);\\n\\n    function investSTBL(uint256 _tokensAmount, address _policyBookAddr) external;\\n\\n    function distributeNFT() external;\\n\\n    function checkPlatinumNFTReward(address _userAddr) external view returns (uint256);\\n\\n    function checkMainNFTReward(address _userAddr) external view returns (uint256);\\n\\n    function distributeBMIReward() external;\\n\\n    function getTotalUserBMIReward(address _userAddr) external view returns (uint256);\\n\\n    function checkAvailableBMIReward(address _userAddr) external view returns (uint256);\\n\\n    /// @notice checks if liquidity mining event is lasting (startLiquidityMining() has been called)\\n    /// @return true if LM is started and not ended, false otherwise\\n    function isLMLasting() external view returns (bool);\\n\\n    /// @notice checks if liquidity mining event is finished. In order to be finished, it has to be started\\n    /// @return true if LM is finished, false if event is still going or not started\\n    function isLMEnded() external view returns (bool);\\n\\n    function getEndLMTime() external view returns (uint256);\\n}\\n\"\r\n    },\r\n    \"/home/artem/Projects/Distributed_Lab/Applicature/bridgemutual-core/contracts/interfaces/tokens/ISTKBMIToken.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.4;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\\\";\\n\\ninterface ISTKBMIToken is IERC20Upgradeable {\\n    function mint(address account, uint256 amount) external;\\n\\n    function burn(address account, uint256 amount) external;\\n}\\n\"\r\n    },\r\n    \"/home/artem/Projects/Distributed_Lab/Applicature/bridgemutual-core/contracts/interfaces/tokens/erc20permit-upgradeable/IERC20PermitUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * COPIED FROM https://github.com/OpenZeppelin/openzeppelin-contracts-upgradeable/tree/release-v3.4/contracts/drafts\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on `{IERC20-approve}`, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20PermitUpgradeable {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over `owner`'s tokens,\\n     * given `owner`'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for `permit`, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/Initializable.sol\\\";\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal initializer {\\n        __Context_init_unchained();\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal initializer {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n    uint256[49] private __gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/proxy/Initializable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\n// solhint-disable-next-line compiler-version\\npragma solidity >=0.4.24 <0.8.0;\\n\\nimport \\\"../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {UpgradeableProxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n */\\nabstract contract Initializable {\\n\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        require(_initializing || _isConstructor() || !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n\\n    /// @dev Returns true if and only if the function is running in the constructor\\n    function _isConstructor() private view returns (bool) {\\n        return !AddressUpgradeable.isContract(address(this));\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20Upgradeable {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.2 <0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\nimport \\\"../proxy/Initializable.sol\\\";\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal initializer {\\n        __Context_init_unchained();\\n    }\\n\\n    function __Context_init_unchained() internal initializer {\\n    }\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n    uint256[50] private __gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/math/SafeMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        uint256 c = a + b;\\n        if (c < a) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b > a) return (false, 0);\\n        return (true, a - b);\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) return (true, 0);\\n        uint256 c = a * b;\\n        if (c / a != b) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a / b);\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a % b);\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b <= a, \\\"SafeMath: subtraction overflow\\\");\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0) return 0;\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: division by zero\\\");\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: modulo by zero\\\");\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"remappings\": [],\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"evmVersion\": \"istanbul\",\r\n    \"libraries\": {},\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}","ABI":"[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountBMI\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"burnedStkBMI\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"}],\"name\":\"BMIWithdrawn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"RewardPoolRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"stakedBMI\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"mintedStkBMI\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"}],\"name\":\"StakedBMI\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"UnusedRewardPoolRevoked\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_rewardPerBlock\",\"type\":\"uint256\"}],\"name\":\"__BMIStaking_init\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"addToPool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"bmiCoverStakingAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"bmiToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAPY\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"getStakedBMI\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_userAddr\",\"type\":\"address\"}],\"name\":\"getWithdrawalInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_amountBMIRequested\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amountStkBMI\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_unlockPeriod\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_availableFor\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"injector\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"_injector\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isBMIRewardUnlocked\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastUpdateBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"legacyBMIStakingAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liquidityMining\",\"outputs\":[{\"internalType\":\"contract ILiquidityMining\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liquidityMiningStakingAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maturityAt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"revokeRewardPool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"revokeUnusedRewardPool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardPerBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IContractsRegistry\",\"name\":\"_contractsRegistry\",\"type\":\"address\"}],\"name\":\"setDependencies\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_injector\",\"type\":\"address\"}],\"name\":\"setInjector\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"setRewardPerBlock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amountBMI\",\"type\":\"uint256\"}],\"name\":\"stake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amountBMI\",\"type\":\"uint256\"}],\"name\":\"stakeFor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amountBMI\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"_v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"_r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"_s\",\"type\":\"bytes32\"}],\"name\":\"stakeWithPermit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"stakingReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stkBMIToken\",\"outputs\":[{\"internalType\":\"contract ISTKBMIToken\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalPool\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amountBMIUnlock\",\"type\":\"uint256\"}],\"name\":\"unlockTokensToWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vBMI\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"whenCanWithdrawBMIReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"BMIStaking","CompilerVersion":"v0.7.4+commit.3f05b770","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}