{"status":"1","message":"OK","result":[{"SourceCode":"# @version 0.2.8\r\n\"\"\"\r\n@title Unagii ZapStEth\r\n@author stakewith.us\r\n@license AGPL-3.0-or-later\r\n\"\"\"\r\n\r\n\r\nfrom vyper.interfaces import ERC20\r\n\r\ninterface ETHVault:\r\n    def token() -> address: view\r\n    def deposit(): payable\r\n    def withdraw(_shares: uint256, _min: uint256): nonpayable\r\n\r\ninterface StableSwapSTETH:\r\n    def exchange(_i: int128, _j: int128, _dx: uint256, _min_dy: uint256): nonpayable\r\n\r\ninterface StEth:\r\n    # returns amount of StEth minted\r\n    def submit(_referral: address) -> uint256: payable \r\n\r\nETH: constant(address) = 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE\r\n\r\nST_ETH: constant(address) = 0xae7ab96520DE3A18E5e111B5EaAb095312D7fE84\r\n# Curve StableSwapSTETH\r\nSWAP: constant(address) = 0xDC24316b9AE028F1497c275EB9192a3Ea0f67022\r\n\r\nvault: public(address)\r\n\r\n@external\r\ndef __init__(_vault: address):\r\n    assert ETHVault(_vault).token() == ETH, \"!ETH vault\"\r\n    self.vault = _vault\r\n\r\n@external\r\n@payable\r\ndef __default__():\r\n    # Prevent accidental ETH sent from user\r\n    assert msg.sender == self.vault or msg.sender == SWAP, \"!(vault or swap)\"\r\n\r\n@external\r\n@nonreentrant(\"lock\")\r\ndef zapStEthIn(_stEthAmount: uint256, _minEth: uint256, _minShares: uint256):\r\n    \"\"\"\r\n    @notice deposit StETH, exchange to ETH, deposit ETH into vault\r\n    @param _stEthAmount Amount of StETH to deposit\r\n    @param _minEth Minimum ETH to get from exchange\r\n    @param _minShares Minimum Unagii shares to mint\r\n    \"\"\"\r\n    assert msg.sender == tx.origin, \"!EOA\"\r\n\r\n    assert ERC20(ST_ETH).transferFrom(msg.sender, self, _stEthAmount), \"stEth transfer from failed\"\r\n\r\n    assert ERC20(ST_ETH).approve(SWAP, _stEthAmount), \"stEth approve failed\"\r\n    StableSwapSTETH(SWAP).exchange(1, 0, _stEthAmount, _minEth)\r\n\r\n    ETHVault(self.vault).deposit(value=self.balance)\r\n\r\n    shares: uint256 = ERC20(self.vault).balanceOf(self)\r\n    assert shares >= _minShares, \"shares < min\"\r\n\r\n    assert ERC20(self.vault).transfer(msg.sender, shares), \"uEth transfer failed\"\r\n\r\n@external\r\n@nonreentrant(\"lock\")\r\ndef zapStEthOut(_shares: uint256, _ethMin: uint256, _stEthMin: uint256):\r\n    \"\"\"\r\n    @notice withdraw ETH from vault, buy StETH, transfer StETH to msg.sender\r\n    @param _shares Unagii shares to burn\r\n    @param _ethMin Minimum ETH to wtihdraw\r\n    @param _stEthMin Minimum StETH to buy\r\n    \"\"\"\r\n    assert msg.sender == tx.origin, \"!EOA\"\r\n\r\n    assert ERC20(self.vault).transferFrom(msg.sender, self, _shares), \"uEth transfer from failed\"\r\n    ETHVault(self.vault).withdraw(_shares, _ethMin)\r\n\r\n    # ignore amount of StEth minted\r\n    StEth(ST_ETH).submit(self, value=self.balance)\r\n    # get balance to transfer all StEth including any dust\r\n    stEthBal: uint256 = ERC20(ST_ETH).balanceOf(self) \r\n    \r\n    assert stEthBal >= _stEthMin, \"StEth < min\"\r\n    assert ERC20(ST_ETH).transfer(msg.sender, stEthBal), \"stEth transfer failed\"","ABI":"[{\"outputs\":[],\"inputs\":[{\"type\":\"address\",\"name\":\"_vault\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"name\":\"zapStEthIn\",\"outputs\":[],\"inputs\":[{\"type\":\"uint256\",\"name\":\"_stEthAmount\"},{\"type\":\"uint256\",\"name\":\"_minEth\"},{\"type\":\"uint256\",\"name\":\"_minShares\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"gas\":100609},{\"name\":\"zapStEthOut\",\"outputs\":[],\"inputs\":[{\"type\":\"uint256\",\"name\":\"_shares\"},{\"type\":\"uint256\",\"name\":\"_ethMin\"},{\"type\":\"uint256\",\"name\":\"_stEthMin\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"gas\":98046},{\"name\":\"vault\",\"outputs\":[{\"type\":\"address\",\"name\":\"\"}],\"inputs\":[],\"stateMutability\":\"view\",\"type\":\"function\",\"gas\":1211}]","ContractName":"Vyper_contract","CompilerVersion":"vyper:0.2.8","OptimizationUsed":"0","Runs":"0","ConstructorArguments":"00000000000000000000000077607588222e01bf892a29abab45796a2047fc7b","EVMVersion":"Default","Library":"","LicenseType":"Unknown","Proxy":"0","Implementation":"","SwarmSource":""}]}