{"status":"1","message":"OK","result":[{"SourceCode":"/**\r\n *Submitted for verification at Etherscan.io on 2017-12-12\r\n*/\r\n\r\n// Copyright (C) 2015, 2016, 2017 Dapphub\r\n\r\n// This program is free software: you can redistribute it and/or modify\r\n// it under the terms of the GNU General Public License as published by\r\n// the Free Software Foundation, either version 3 of the License, or\r\n// (at your option) any later version.\r\n\r\n// This program is distributed in the hope that it will be useful,\r\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n// GNU General Public License for more details.\r\n\r\n// You should have received a copy of the GNU General Public License\r\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\r\n\r\n// SPDX-License-Identifier: Unlicense\r\n\r\n\r\n/// @title Optimized overflow and underflow safe math operations\r\n/// @notice Contains methods for doing math operations that revert on overflow or underflow for minimal gas cost\r\nlibrary LowGasSafeMath {\r\n    /// @notice Returns x + y, reverts if sum overflows uint256\r\n    /// @param x The augend\r\n    /// @param y The addend\r\n    /// @return z The sum of x and y\r\n    function add(uint256 x, uint256 y) internal pure returns (uint256 z) {\r\n        require((z = x + y) >= x);\r\n    }\r\n\r\n    /// @notice Returns x - y, reverts if underflows\r\n    /// @param x The minuend\r\n    /// @param y The subtrahend\r\n    /// @return z The difference of x and y\r\n    function sub(uint256 x, uint256 y) internal pure returns (uint256 z) {\r\n        require((z = x - y) <= x);\r\n    }\r\n\r\n    /// @notice Returns x * y, reverts if overflows\r\n    /// @param x The multiplicand\r\n    /// @param y The multiplier\r\n    /// @return z The product of x and y\r\n    function mul(uint256 x, uint256 y) internal pure returns (uint256 z) {\r\n        require(x == 0 || (z = x * y) / x == y);\r\n    }\r\n\r\n    /// @notice Returns x + y, reverts if overflows or underflows\r\n    /// @param x The augend\r\n    /// @param y The addend\r\n    /// @return z The sum of x and y\r\n    function add(int256 x, int256 y) internal pure returns (int256 z) {\r\n        require((z = x + y) >= x == (y >= 0));\r\n    }\r\n\r\n    /// @notice Returns x - y, reverts if overflows or underflows\r\n    /// @param x The minuend\r\n    /// @param y The subtrahend\r\n    /// @return z The difference of x and y\r\n    function sub(int256 x, int256 y) internal pure returns (int256 z) {\r\n        require((z = x - y) <= x == (y >= 0));\r\n    }\r\n}\r\n/// @title Safe casting methods\r\n/// @notice Contains methods for safely casting between types\r\nlibrary SafeCast {\r\n    /// @notice Cast a uint256 to a uint160, revert on overflow\r\n    /// @param y The uint256 to be downcasted\r\n    /// @return z The downcasted integer, now type uint160\r\n    function toUint160(uint256 y) internal pure returns (uint160 z) {\r\n        require((z = uint160(y)) == y);\r\n    }\r\n\r\n    /// @notice Cast a int256 to a int128, revert on overflow or underflow\r\n    /// @param y The int256 to be downcasted\r\n    /// @return z The downcasted integer, now type int128\r\n    function toInt128(int256 y) internal pure returns (int128 z) {\r\n        require((z = int128(y)) == y);\r\n    }\r\n\r\n    /// @notice Cast a uint256 to a int256, revert on overflow\r\n    /// @param y The uint256 to be casted\r\n    /// @return z The casted integer, now type int256\r\n    function toInt256(uint256 y) internal pure returns (int256 z) {\r\n        require(y < 2**255);\r\n        z = int256(y);\r\n    }\r\n}\r\n/// @title Contains 512-bit math functions\r\n/// @notice Facilitates multiplication and division that can have overflow of an intermediate value without any loss of precision\r\n/// @dev Handles \"phantom overflow\" i.e., allows multiplication and division where an intermediate value overflows 256 bits\r\nlibrary FullMath {\r\n    /// @notice Calculates floor(a×b÷denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\r\n    /// @param a The multiplicand\r\n    /// @param b The multiplier\r\n    /// @param denominator The divisor\r\n    /// @return result The 256-bit result\r\n    /// @dev Credit to Remco Bloemen under MIT license https://xn--2-umb.com/21/muldiv\r\n    function mulDiv(\r\n        uint256 a,\r\n        uint256 b,\r\n        uint256 denominator\r\n    ) internal pure returns (uint256 result) {\r\n        // 512-bit multiply [prod1 prod0] = a * b\r\n        // Compute the product mod 2**256 and mod 2**256 - 1\r\n        // then use the Chinese Remainder Theorem to reconstruct\r\n        // the 512 bit result. The result is stored in two 256\r\n        // variables such that product = prod1 * 2**256 + prod0\r\n        uint256 prod0; // Least significant 256 bits of the product\r\n        uint256 prod1; // Most significant 256 bits of the product\r\n        assembly {\r\n            let mm := mulmod(a, b, not(0))\r\n            prod0 := mul(a, b)\r\n            prod1 := sub(sub(mm, prod0), lt(mm, prod0))\r\n        }\r\n\r\n        // Handle non-overflow cases, 256 by 256 division\r\n        if (prod1 == 0) {\r\n            require(denominator > 0);\r\n            assembly {\r\n                result := div(prod0, denominator)\r\n            }\r\n            return result;\r\n        }\r\n\r\n        // Make sure the result is less than 2**256.\r\n        // Also prevents denominator == 0\r\n        require(denominator > prod1);\r\n\r\n        ///////////////////////////////////////////////\r\n        // 512 by 256 division.\r\n        ///////////////////////////////////////////////\r\n\r\n        // Make division exact by subtracting the remainder from [prod1 prod0]\r\n        // Compute remainder using mulmod\r\n        uint256 remainder;\r\n        assembly {\r\n            remainder := mulmod(a, b, denominator)\r\n        }\r\n        // Subtract 256 bit number from 512 bit number\r\n        assembly {\r\n            prod1 := sub(prod1, gt(remainder, prod0))\r\n            prod0 := sub(prod0, remainder)\r\n        }\r\n\r\n        // Factor powers of two out of denominator\r\n        // Compute largest power of two divisor of denominator.\r\n        // Always >= 1.\r\n        uint256 twos = denominator & (~denominator + 1);\r\n        // Divide denominator by power of two\r\n        assembly {\r\n            denominator := div(denominator, twos)\r\n        }\r\n\r\n        // Divide [prod1 prod0] by the factors of two\r\n        assembly {\r\n            prod0 := div(prod0, twos)\r\n        }\r\n        // Shift in bits from prod1 into prod0. For this we need\r\n        // to flip `twos` such that it is 2**256 / twos.\r\n        // If twos is zero, then it becomes one\r\n        assembly {\r\n            twos := add(div(sub(0, twos), twos), 1)\r\n        }\r\n        prod0 |= prod1 * twos;\r\n\r\n        // Invert denominator mod 2**256\r\n        // Now that denominator is an odd number, it has an inverse\r\n        // modulo 2**256 such that denominator * inv = 1 mod 2**256.\r\n        // Compute the inverse by starting with a seed that is correct\r\n        // correct for four bits. That is, denominator * inv = 1 mod 2**4\r\n        uint256 inv = (3 * denominator) ^ 2;\r\n        // Now use Newton-Raphson iteration to improve the precision.\r\n        // Thanks to Hensel's lifting lemma, this also works in modular\r\n        // arithmetic, doubling the correct bits in each step.\r\n        inv *= 2 - denominator * inv; // inverse mod 2**8\r\n        inv *= 2 - denominator * inv; // inverse mod 2**16\r\n        inv *= 2 - denominator * inv; // inverse mod 2**32\r\n        inv *= 2 - denominator * inv; // inverse mod 2**64\r\n        inv *= 2 - denominator * inv; // inverse mod 2**128\r\n        inv *= 2 - denominator * inv; // inverse mod 2**256\r\n\r\n        // Because the division is now exact we can divide by multiplying\r\n        // with the modular inverse of denominator. This will give us the\r\n        // correct result modulo 2**256. Since the precoditions guarantee\r\n        // that the outcome is less than 2**256, this is the final result.\r\n        // We don't need to compute the high bits of the result and prod1\r\n        // is no longer required.\r\n        result = prod0 * inv;\r\n        return result;\r\n    }\r\n\r\n    /// @notice Calculates ceil(a×b÷denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\r\n    /// @param a The multiplicand\r\n    /// @param b The multiplier\r\n    /// @param denominator The divisor\r\n    /// @return result The 256-bit result\r\n    function mulDivRoundingUp(\r\n        uint256 a,\r\n        uint256 b,\r\n        uint256 denominator\r\n    ) internal pure returns (uint256 result) {\r\n        result = mulDiv(a, b, denominator);\r\n        if (mulmod(a, b, denominator) > 0) {\r\n            require(result < type(uint256).max);\r\n            result++;\r\n        }\r\n    }\r\n}\r\n/// @title FixedPoint96\r\n/// @notice A library for handling binary fixed point numbers, see https://en.wikipedia.org/wiki/Q_(number_format)\r\n/// @dev Used in SqrtPriceMath.sol\r\nlibrary FixedPoint96 {\r\n    uint8 internal constant RESOLUTION = 96;\r\n    uint256 internal constant Q96 = 0x1000000000000000000000000;\r\n}\r\n/// @title Math functions that do not check inputs or outputs\r\n/// @notice Contains methods that perform common math functions but do not do any overflow or underflow checks\r\nlibrary UnsafeMath {\r\n    /// @notice Returns ceil(x / y)\r\n    /// @dev division by 0 has unspecified behavior, and must be checked externally\r\n    /// @param x The dividend\r\n    /// @param y The divisor\r\n    /// @return z The quotient, ceil(x / y)\r\n    function divRoundingUp(uint256 x, uint256 y) internal pure returns (uint256 z) {\r\n        assembly {\r\n            z := add(div(x, y), gt(mod(x, y), 0))\r\n        }\r\n    }\r\n}\r\n/// @title Functions based on Q64.96 sqrt price and liquidity\r\n/// @notice Contains the math that uses square root of price as a Q64.96 and liquidity to compute deltas\r\nlibrary SqrtPriceMath {\r\n    using LowGasSafeMath for uint256;\r\n    using SafeCast for uint256;\r\n\r\n    /// @notice Gets the next sqrt price given a delta of token0\r\n    /// @dev Always rounds up, because in the exact output case (increasing price) we need to move the price at least\r\n    /// far enough to get the desired output amount, and in the exact input case (decreasing price) we need to move the\r\n    /// price less in order to not send too much output.\r\n    /// The most precise formula for this is liquidity * sqrtPX96 / (liquidity +- amount * sqrtPX96),\r\n    /// if this is impossible because of overflow, we calculate liquidity / (liquidity / sqrtPX96 +- amount).\r\n    /// @param sqrtPX96 The starting price, i.e. before accounting for the token0 delta\r\n    /// @param liquidity The amount of usable liquidity\r\n    /// @param amount How much of token0 to add or remove from virtual reserves\r\n    /// @param add Whether to add or remove the amount of token0\r\n    /// @return The price after adding or removing amount, depending on add\r\n    function getNextSqrtPriceFromAmount0RoundingUp(\r\n        uint160 sqrtPX96,\r\n        uint128 liquidity,\r\n        uint256 amount,\r\n        bool add\r\n    ) internal pure returns (uint160) {\r\n        // we short circuit amount == 0 because the result is otherwise not guaranteed to equal the input price\r\n        if (amount == 0) return sqrtPX96;\r\n        uint256 numerator1 = uint256(liquidity) << FixedPoint96.RESOLUTION;\r\n\r\n        if (add) {\r\n            uint256 product;\r\n            if ((product = amount * sqrtPX96) / amount == sqrtPX96) {\r\n                uint256 denominator = numerator1 + product;\r\n                if (denominator >= numerator1)\r\n                    // always fits in 160 bits\r\n                    return uint160(FullMath.mulDivRoundingUp(numerator1, sqrtPX96, denominator));\r\n            }\r\n\r\n            return uint160(UnsafeMath.divRoundingUp(numerator1, (numerator1 / sqrtPX96).add(amount)));\r\n        } else {\r\n            uint256 product;\r\n            // if the product overflows, we know the denominator underflows\r\n            // in addition, we must check that the denominator does not underflow\r\n            require((product = amount * sqrtPX96) / amount == sqrtPX96 && numerator1 > product);\r\n            uint256 denominator = numerator1 - product;\r\n            return FullMath.mulDivRoundingUp(numerator1, sqrtPX96, denominator).toUint160();\r\n        }\r\n    }\r\n\r\n    /// @notice Gets the next sqrt price given a delta of token1\r\n    /// @dev Always rounds down, because in the exact output case (decreasing price) we need to move the price at least\r\n    /// far enough to get the desired output amount, and in the exact input case (increasing price) we need to move the\r\n    /// price less in order to not send too much output.\r\n    /// The formula we compute is within <1 wei of the lossless version: sqrtPX96 +- amount / liquidity\r\n    /// @param sqrtPX96 The starting price, i.e., before accounting for the token1 delta\r\n    /// @param liquidity The amount of usable liquidity\r\n    /// @param amount How much of token1 to add, or remove, from virtual reserves\r\n    /// @param add Whether to add, or remove, the amount of token1\r\n    /// @return The price after adding or removing `amount`\r\n    function getNextSqrtPriceFromAmount1RoundingDown(\r\n        uint160 sqrtPX96,\r\n        uint128 liquidity,\r\n        uint256 amount,\r\n        bool add\r\n    ) internal pure returns (uint160) {\r\n        // if we're adding (subtracting), rounding down requires rounding the quotient down (up)\r\n        // in both cases, avoid a mulDiv for most inputs\r\n        if (add) {\r\n            uint256 quotient =\r\n                (\r\n                    amount <= type(uint160).max\r\n                        ? (amount << FixedPoint96.RESOLUTION) / liquidity\r\n                        : FullMath.mulDiv(amount, FixedPoint96.Q96, liquidity)\r\n                );\r\n\r\n            return uint256(sqrtPX96).add(quotient).toUint160();\r\n        } else {\r\n            uint256 quotient =\r\n                (\r\n                    amount <= type(uint160).max\r\n                        ? UnsafeMath.divRoundingUp(amount << FixedPoint96.RESOLUTION, liquidity)\r\n                        : FullMath.mulDivRoundingUp(amount, FixedPoint96.Q96, liquidity)\r\n                );\r\n\r\n            require(sqrtPX96 > quotient);\r\n            // always fits 160 bits\r\n            return uint160(sqrtPX96 - quotient);\r\n        }\r\n    }\r\n\r\n    /// @notice Gets the next sqrt price given an input amount of token0 or token1\r\n    /// @dev Throws if price or liquidity are 0, or if the next price is out of bounds\r\n    /// @param sqrtPX96 The starting price, i.e., before accounting for the input amount\r\n    /// @param liquidity The amount of usable liquidity\r\n    /// @param amountIn How much of token0, or token1, is being swapped in\r\n    /// @param zeroForOne Whether the amount in is token0 or token1\r\n    /// @return sqrtQX96 The price after adding the input amount to token0 or token1\r\n    function getNextSqrtPriceFromInput(\r\n        uint160 sqrtPX96,\r\n        uint128 liquidity,\r\n        uint256 amountIn,\r\n        bool zeroForOne\r\n    ) internal pure returns (uint160 sqrtQX96) {\r\n        require(sqrtPX96 > 0);\r\n        require(liquidity > 0);\r\n\r\n        // round to make sure that we don't pass the target price\r\n        return\r\n            zeroForOne\r\n                ? getNextSqrtPriceFromAmount0RoundingUp(sqrtPX96, liquidity, amountIn, true)\r\n                : getNextSqrtPriceFromAmount1RoundingDown(sqrtPX96, liquidity, amountIn, true);\r\n    }\r\n\r\n    /// @notice Gets the next sqrt price given an output amount of token0 or token1\r\n    /// @dev Throws if price or liquidity are 0 or the next price is out of bounds\r\n    /// @param sqrtPX96 The starting price before accounting for the output amount\r\n    /// @param liquidity The amount of usable liquidity\r\n    /// @param amountOut How much of token0, or token1, is being swapped out\r\n    /// @param zeroForOne Whether the amount out is token0 or token1\r\n    /// @return sqrtQX96 The price after removing the output amount of token0 or token1\r\n    function getNextSqrtPriceFromOutput(\r\n        uint160 sqrtPX96,\r\n        uint128 liquidity,\r\n        uint256 amountOut,\r\n        bool zeroForOne\r\n    ) internal pure returns (uint160 sqrtQX96) {\r\n        require(sqrtPX96 > 0);\r\n        require(liquidity > 0);\r\n\r\n        // round to make sure that we pass the target price\r\n        return\r\n            zeroForOne\r\n                ? getNextSqrtPriceFromAmount1RoundingDown(sqrtPX96, liquidity, amountOut, false)\r\n                : getNextSqrtPriceFromAmount0RoundingUp(sqrtPX96, liquidity, amountOut, false);\r\n    }\r\n\r\n    /// @notice Gets the amount0 delta between two prices\r\n    /// @dev Calculates liquidity / sqrt(lower) - liquidity / sqrt(upper),\r\n    /// i.e. liquidity * (sqrt(upper) - sqrt(lower)) / (sqrt(upper) * sqrt(lower))\r\n    /// @param sqrtRatioAX96 A sqrt price\r\n    /// @param sqrtRatioBX96 Another sqrt price\r\n    /// @param liquidity The amount of usable liquidity\r\n    /// @param roundUp Whether to round the amount up or down\r\n    /// @return amount0 Amount of token0 required to cover a position of size liquidity between the two passed prices\r\n    function getAmount0Delta(\r\n        uint160 sqrtRatioAX96,\r\n        uint160 sqrtRatioBX96,\r\n        uint128 liquidity,\r\n        bool roundUp\r\n    ) internal pure returns (uint256 amount0) {\r\n        if (sqrtRatioAX96 > sqrtRatioBX96) (sqrtRatioAX96, sqrtRatioBX96) = (sqrtRatioBX96, sqrtRatioAX96);\r\n\r\n        uint256 numerator1 = uint256(liquidity) << FixedPoint96.RESOLUTION;\r\n        uint256 numerator2 = sqrtRatioBX96 - sqrtRatioAX96;\r\n\r\n        require(sqrtRatioAX96 > 0);\r\n\r\n        return\r\n            roundUp\r\n                ? UnsafeMath.divRoundingUp(\r\n                    FullMath.mulDivRoundingUp(numerator1, numerator2, sqrtRatioBX96),\r\n                    sqrtRatioAX96\r\n                )\r\n                : FullMath.mulDiv(numerator1, numerator2, sqrtRatioBX96) / sqrtRatioAX96;\r\n    }\r\n\r\n    /// @notice Gets the amount1 delta between two prices\r\n    /// @dev Calculates liquidity * (sqrt(upper) - sqrt(lower))\r\n    /// @param sqrtRatioAX96 A sqrt price\r\n    /// @param sqrtRatioBX96 Another sqrt price\r\n    /// @param liquidity The amount of usable liquidity\r\n    /// @param roundUp Whether to round the amount up, or down\r\n    /// @return amount1 Amount of token1 required to cover a position of size liquidity between the two passed prices\r\n    function getAmount1Delta(\r\n        uint160 sqrtRatioAX96,\r\n        uint160 sqrtRatioBX96,\r\n        uint128 liquidity,\r\n        bool roundUp\r\n    ) internal pure returns (uint256 amount1) {\r\n        if (sqrtRatioAX96 > sqrtRatioBX96) (sqrtRatioAX96, sqrtRatioBX96) = (sqrtRatioBX96, sqrtRatioAX96);\r\n\r\n        return\r\n            roundUp\r\n                ? FullMath.mulDivRoundingUp(liquidity, sqrtRatioBX96 - sqrtRatioAX96, FixedPoint96.Q96)\r\n                : FullMath.mulDiv(liquidity, sqrtRatioBX96 - sqrtRatioAX96, FixedPoint96.Q96);\r\n    }\r\n\r\n    /// @notice Helper that gets signed token0 delta\r\n    /// @param sqrtRatioAX96 A sqrt price\r\n    /// @param sqrtRatioBX96 Another sqrt price\r\n    /// @param liquidity The change in liquidity for which to compute the amount0 delta\r\n    /// @return amount0 Amount of token0 corresponding to the passed liquidityDelta between the two prices\r\n    function getAmount0Delta(\r\n        uint160 sqrtRatioAX96,\r\n        uint160 sqrtRatioBX96,\r\n        int128 liquidity\r\n    ) internal pure returns (int256 amount0) {\r\n        return\r\n            liquidity < 0\r\n                ? -getAmount0Delta(sqrtRatioAX96, sqrtRatioBX96, uint128(-liquidity), false).toInt256()\r\n                : getAmount0Delta(sqrtRatioAX96, sqrtRatioBX96, uint128(liquidity), true).toInt256();\r\n    }\r\n\r\n    /// @notice Helper that gets signed token1 delta\r\n    /// @param sqrtRatioAX96 A sqrt price\r\n    /// @param sqrtRatioBX96 Another sqrt price\r\n    /// @param liquidity The change in liquidity for which to compute the amount1 delta\r\n    /// @return amount1 Amount of token1 corresponding to the passed liquidityDelta between the two prices\r\n    function getAmount1Delta(\r\n        uint160 sqrtRatioAX96,\r\n        uint160 sqrtRatioBX96,\r\n        int128 liquidity\r\n    ) internal pure returns (int256 amount1) {\r\n        return\r\n            liquidity < 0\r\n                ? -getAmount1Delta(sqrtRatioAX96, sqrtRatioBX96, uint128(-liquidity), false).toInt256()\r\n                : getAmount1Delta(sqrtRatioAX96, sqrtRatioBX96, uint128(liquidity), true).toInt256();\r\n    }\r\n}\r\n/// @title Computes the result of a swap within ticks\r\n/// @notice Contains methods for computing the result of a swap within a single tick price range, i.e., a single tick.\r\nlibrary SwapMath {\r\n    /// @notice Computes the result of swapping some amount in, or amount out, given the parameters of the swap\r\n    /// @dev The fee, plus the amount in, will never exceed the amount remaining if the swap's `amountSpecified` is positive\r\n    /// @param sqrtRatioCurrentX96 The current sqrt price of the pool\r\n    /// @param sqrtRatioTargetX96 The price that cannot be exceeded, from which the direction of the swap is inferred\r\n    /// @param liquidity The usable liquidity\r\n    /// @param amountRemaining How much input or output amount is remaining to be swapped in/out\r\n    /// @param feePips The fee taken from the input amount, expressed in hundredths of a bip\r\n    /// @return sqrtRatioNextX96 The price after swapping the amount in/out, not to exceed the price target\r\n    /// @return amountIn The amount to be swapped in, of either token0 or token1, based on the direction of the swap\r\n    /// @return amountOut The amount to be received, of either token0 or token1, based on the direction of the swap\r\n    /// @return feeAmount The amount of input that will be taken as a fee\r\n    function computeSwapStep(\r\n        uint160 sqrtRatioCurrentX96,\r\n        uint160 sqrtRatioTargetX96,\r\n        uint128 liquidity,\r\n        int256 amountRemaining,\r\n        uint24 feePips\r\n    )\r\n        internal\r\n        pure\r\n        returns (\r\n            uint160 sqrtRatioNextX96,\r\n            uint256 amountIn,\r\n            uint256 amountOut,\r\n            uint256 feeAmount\r\n        )\r\n    {\r\n        bool zeroForOne = sqrtRatioCurrentX96 >= sqrtRatioTargetX96;\r\n        bool exactIn = amountRemaining >= 0;\r\n\r\n        if (exactIn) {\r\n            uint256 amountRemainingLessFee = FullMath.mulDiv(uint256(amountRemaining), 1e6 - feePips, 1e6);\r\n            amountIn = zeroForOne\r\n                ? SqrtPriceMath.getAmount0Delta(sqrtRatioTargetX96, sqrtRatioCurrentX96, liquidity, true)\r\n                : SqrtPriceMath.getAmount1Delta(sqrtRatioCurrentX96, sqrtRatioTargetX96, liquidity, true);\r\n            if (amountRemainingLessFee >= amountIn) sqrtRatioNextX96 = sqrtRatioTargetX96;\r\n            else\r\n                sqrtRatioNextX96 = SqrtPriceMath.getNextSqrtPriceFromInput(\r\n                    sqrtRatioCurrentX96,\r\n                    liquidity,\r\n                    amountRemainingLessFee,\r\n                    zeroForOne\r\n                );\r\n        } else {\r\n            amountOut = zeroForOne\r\n                ? SqrtPriceMath.getAmount1Delta(sqrtRatioTargetX96, sqrtRatioCurrentX96, liquidity, false)\r\n                : SqrtPriceMath.getAmount0Delta(sqrtRatioCurrentX96, sqrtRatioTargetX96, liquidity, false);\r\n            if (uint256(-amountRemaining) >= amountOut) sqrtRatioNextX96 = sqrtRatioTargetX96;\r\n            else\r\n                sqrtRatioNextX96 = SqrtPriceMath.getNextSqrtPriceFromOutput(\r\n                    sqrtRatioCurrentX96,\r\n                    liquidity,\r\n                    uint256(-amountRemaining),\r\n                    zeroForOne\r\n                );\r\n        }\r\n\r\n        bool max = sqrtRatioTargetX96 == sqrtRatioNextX96;\r\n\r\n        // get the input/output amounts\r\n        if (zeroForOne) {\r\n            amountIn = max && exactIn\r\n                ? amountIn\r\n                : SqrtPriceMath.getAmount0Delta(sqrtRatioNextX96, sqrtRatioCurrentX96, liquidity, true);\r\n            amountOut = max && !exactIn\r\n                ? amountOut\r\n                : SqrtPriceMath.getAmount1Delta(sqrtRatioNextX96, sqrtRatioCurrentX96, liquidity, false);\r\n        } else {\r\n            amountIn = max && exactIn\r\n                ? amountIn\r\n                : SqrtPriceMath.getAmount1Delta(sqrtRatioCurrentX96, sqrtRatioNextX96, liquidity, true);\r\n            amountOut = max && !exactIn\r\n                ? amountOut\r\n                : SqrtPriceMath.getAmount0Delta(sqrtRatioCurrentX96, sqrtRatioNextX96, liquidity, false);\r\n        }\r\n\r\n        // cap the output amount to not exceed the remaining output amount\r\n        if (!exactIn && amountOut > uint256(-amountRemaining)) {\r\n            amountOut = uint256(-amountRemaining);\r\n        }\r\n\r\n        if (exactIn && sqrtRatioNextX96 != sqrtRatioTargetX96) {\r\n            // we didn't reach the target, so take the remainder of the maximum input as fee\r\n            feeAmount = uint256(amountRemaining) - amountIn;\r\n        } else {\r\n            feeAmount = FullMath.mulDivRoundingUp(amountIn, feePips, 1e6 - feePips);\r\n        }\r\n    }\r\n}\r\ninterface WETH9 {\r\n    function deposit() external payable;\r\n    function withdraw(uint wad) external;\r\n\r\n    function totalSupply() external view returns (uint);\r\n    \r\n    function balanceOf(address) external view returns (uint256);\r\n\r\n    function approve(address guy, uint wad) external returns (bool);\r\n\r\n    function transfer(address dst, uint wad) external returns (bool);\r\n\r\n    function transferFrom(address src, address dst, uint wad)\r\n        external\r\n        returns (bool);\r\n}\r\n\r\n// Part: IVault\r\n\r\ninterface IVault {\r\n    function deposit(\r\n        uint256,\r\n        uint256,\r\n        uint256,\r\n        uint256,\r\n        address\r\n    )\r\n        external\r\n        returns (\r\n            uint256,\r\n            uint256,\r\n            uint256\r\n        );\r\n\r\n    function withdraw(\r\n        uint256,\r\n        uint256,\r\n        uint256,\r\n        address\r\n    ) external returns (uint256, uint256);\r\n\r\n    function getTotalAmounts() external view returns (uint256, uint256);\r\n}\r\n\r\n/**\r\n *Submitted for verification at Etherscan.io on 2021-04-03\r\n*/\r\n\r\n// Part: OpenZeppelin/openzeppelin-contracts@3.4.0/IERC20\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\n // Part: Uniswap/uniswap-v3-core@1.0.0/TickMath\r\n\r\n/// @title Math library for computing sqrt prices from ticks and vice versa\r\n/// @notice Computes sqrt price for ticks of size 1.0001, i.e. sqrt(1.0001^tick) as fixed point Q64.96 numbers. Supports\r\n/// prices between 2**-128 and 2**128\r\nlibrary TickMath {\r\n    /// @dev The minimum tick that may be passed to #getSqrtRatioAtTick computed from log base 1.0001 of 2**-128\r\n    int24 internal constant MIN_TICK = -887272;\r\n    /// @dev The maximum tick that may be passed to #getSqrtRatioAtTick computed from log base 1.0001 of 2**128\r\n    int24 internal constant MAX_TICK = -MIN_TICK;\r\n\r\n    /// @dev The minimum value that can be returned from #getSqrtRatioAtTick. Equivalent to getSqrtRatioAtTick(MIN_TICK)\r\n    uint160 internal constant MIN_SQRT_RATIO = 4295128739;\r\n    /// @dev The maximum value that can be returned from #getSqrtRatioAtTick. Equivalent to getSqrtRatioAtTick(MAX_TICK)\r\n    uint160 internal constant MAX_SQRT_RATIO = 1461446703485210103287273052203988822378723970342;\r\n\r\n    /// @notice Calculates sqrt(1.0001^tick) * 2^96\r\n    /// @dev Throws if |tick| > max tick\r\n    /// @param tick The input tick for the above formula\r\n    /// @return sqrtPriceX96 A Fixed point Q64.96 number representing the sqrt of the ratio of the two assets (token1/token0)\r\n    /// at the given tick\r\n    function getSqrtRatioAtTick(int24 tick) internal pure returns (uint160 sqrtPriceX96) {\r\n        uint256 absTick = tick < 0 ? uint256(-int256(tick)) : uint256(int256(tick));\r\n        require(absTick <= uint256(uint24(MAX_TICK)), 'T');\r\n\r\n        uint256 ratio = absTick & 0x1 != 0 ? 0xfffcb933bd6fad37aa2d162d1a594001 : 0x100000000000000000000000000000000;\r\n        if (absTick & 0x2 != 0) ratio = (ratio * 0xfff97272373d413259a46990580e213a) >> 128;\r\n        if (absTick & 0x4 != 0) ratio = (ratio * 0xfff2e50f5f656932ef12357cf3c7fdcc) >> 128;\r\n        if (absTick & 0x8 != 0) ratio = (ratio * 0xffe5caca7e10e4e61c3624eaa0941cd0) >> 128;\r\n        if (absTick & 0x10 != 0) ratio = (ratio * 0xffcb9843d60f6159c9db58835c926644) >> 128;\r\n        if (absTick & 0x20 != 0) ratio = (ratio * 0xff973b41fa98c081472e6896dfb254c0) >> 128;\r\n        if (absTick & 0x40 != 0) ratio = (ratio * 0xff2ea16466c96a3843ec78b326b52861) >> 128;\r\n        if (absTick & 0x80 != 0) ratio = (ratio * 0xfe5dee046a99a2a811c461f1969c3053) >> 128;\r\n        if (absTick & 0x100 != 0) ratio = (ratio * 0xfcbe86c7900a88aedcffc83b479aa3a4) >> 128;\r\n        if (absTick & 0x200 != 0) ratio = (ratio * 0xf987a7253ac413176f2b074cf7815e54) >> 128;\r\n        if (absTick & 0x400 != 0) ratio = (ratio * 0xf3392b0822b70005940c7a398e4b70f3) >> 128;\r\n        if (absTick & 0x800 != 0) ratio = (ratio * 0xe7159475a2c29b7443b29c7fa6e889d9) >> 128;\r\n        if (absTick & 0x1000 != 0) ratio = (ratio * 0xd097f3bdfd2022b8845ad8f792aa5825) >> 128;\r\n        if (absTick & 0x2000 != 0) ratio = (ratio * 0xa9f746462d870fdf8a65dc1f90e061e5) >> 128;\r\n        if (absTick & 0x4000 != 0) ratio = (ratio * 0x70d869a156d2a1b890bb3df62baf32f7) >> 128;\r\n        if (absTick & 0x8000 != 0) ratio = (ratio * 0x31be135f97d08fd981231505542fcfa6) >> 128;\r\n        if (absTick & 0x10000 != 0) ratio = (ratio * 0x9aa508b5b7a84e1c677de54f3e99bc9) >> 128;\r\n        if (absTick & 0x20000 != 0) ratio = (ratio * 0x5d6af8dedb81196699c329225ee604) >> 128;\r\n        if (absTick & 0x40000 != 0) ratio = (ratio * 0x2216e584f5fa1ea926041bedfe98) >> 128;\r\n        if (absTick & 0x80000 != 0) ratio = (ratio * 0x48a170391f7dc42444e8fa2) >> 128;\r\n\r\n        if (tick > 0) ratio = type(uint256).max / ratio;\r\n\r\n        // this divides by 1<<32 rounding up to go from a Q128.128 to a Q128.96.\r\n        // we then downcast because we know the result always fits within 160 bits due to our tick input constraint\r\n        // we round up in the division so getTickAtSqrtRatio of the output price is always consistent\r\n        sqrtPriceX96 = uint160((ratio >> 32) + (ratio % (1 << 32) == 0 ? 0 : 1));\r\n    }\r\n\r\n    /// @notice Calculates the greatest tick value such that getRatioAtTick(tick) <= ratio\r\n    /// @dev Throws in case sqrtPriceX96 < MIN_SQRT_RATIO, as MIN_SQRT_RATIO is the lowest value getRatioAtTick may\r\n    /// ever return.\r\n    /// @param sqrtPriceX96 The sqrt ratio for which to compute the tick as a Q64.96\r\n    /// @return tick The greatest tick for which the ratio is less than or equal to the input ratio\r\n    function getTickAtSqrtRatio(uint160 sqrtPriceX96) internal pure returns (int24 tick) {\r\n        // second inequality must be < because the price can never reach the price at the max tick\r\n        require(sqrtPriceX96 >= MIN_SQRT_RATIO && sqrtPriceX96 < MAX_SQRT_RATIO, 'R');\r\n        uint256 ratio = uint256(sqrtPriceX96) << 32;\r\n\r\n        uint256 r = ratio;\r\n        uint256 msb = 0;\r\n\r\n        assembly {\r\n            let f := shl(7, gt(r, 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF))\r\n            msb := or(msb, f)\r\n            r := shr(f, r)\r\n        }\r\n        assembly {\r\n            let f := shl(6, gt(r, 0xFFFFFFFFFFFFFFFF))\r\n            msb := or(msb, f)\r\n            r := shr(f, r)\r\n        }\r\n        assembly {\r\n            let f := shl(5, gt(r, 0xFFFFFFFF))\r\n            msb := or(msb, f)\r\n            r := shr(f, r)\r\n        }\r\n        assembly {\r\n            let f := shl(4, gt(r, 0xFFFF))\r\n            msb := or(msb, f)\r\n            r := shr(f, r)\r\n        }\r\n        assembly {\r\n            let f := shl(3, gt(r, 0xFF))\r\n            msb := or(msb, f)\r\n            r := shr(f, r)\r\n        }\r\n        assembly {\r\n            let f := shl(2, gt(r, 0xF))\r\n            msb := or(msb, f)\r\n            r := shr(f, r)\r\n        }\r\n        assembly {\r\n            let f := shl(1, gt(r, 0x3))\r\n            msb := or(msb, f)\r\n            r := shr(f, r)\r\n        }\r\n        assembly {\r\n            let f := gt(r, 0x1)\r\n            msb := or(msb, f)\r\n        }\r\n\r\n        if (msb >= 128) r = ratio >> (msb - 127);\r\n        else r = ratio << (127 - msb);\r\n\r\n        int256 log_2 = (int256(msb) - 128) << 64;\r\n\r\n        assembly {\r\n            r := shr(127, mul(r, r))\r\n            let f := shr(128, r)\r\n            log_2 := or(log_2, shl(63, f))\r\n            r := shr(f, r)\r\n        }\r\n        assembly {\r\n            r := shr(127, mul(r, r))\r\n            let f := shr(128, r)\r\n            log_2 := or(log_2, shl(62, f))\r\n            r := shr(f, r)\r\n        }\r\n        assembly {\r\n            r := shr(127, mul(r, r))\r\n            let f := shr(128, r)\r\n            log_2 := or(log_2, shl(61, f))\r\n            r := shr(f, r)\r\n        }\r\n        assembly {\r\n            r := shr(127, mul(r, r))\r\n            let f := shr(128, r)\r\n            log_2 := or(log_2, shl(60, f))\r\n            r := shr(f, r)\r\n        }\r\n        assembly {\r\n            r := shr(127, mul(r, r))\r\n            let f := shr(128, r)\r\n            log_2 := or(log_2, shl(59, f))\r\n            r := shr(f, r)\r\n        }\r\n        assembly {\r\n            r := shr(127, mul(r, r))\r\n            let f := shr(128, r)\r\n            log_2 := or(log_2, shl(58, f))\r\n            r := shr(f, r)\r\n        }\r\n        assembly {\r\n            r := shr(127, mul(r, r))\r\n            let f := shr(128, r)\r\n            log_2 := or(log_2, shl(57, f))\r\n            r := shr(f, r)\r\n        }\r\n        assembly {\r\n            r := shr(127, mul(r, r))\r\n            let f := shr(128, r)\r\n            log_2 := or(log_2, shl(56, f))\r\n            r := shr(f, r)\r\n        }\r\n        assembly {\r\n            r := shr(127, mul(r, r))\r\n            let f := shr(128, r)\r\n            log_2 := or(log_2, shl(55, f))\r\n            r := shr(f, r)\r\n        }\r\n        assembly {\r\n            r := shr(127, mul(r, r))\r\n            let f := shr(128, r)\r\n            log_2 := or(log_2, shl(54, f))\r\n            r := shr(f, r)\r\n        }\r\n        assembly {\r\n            r := shr(127, mul(r, r))\r\n            let f := shr(128, r)\r\n            log_2 := or(log_2, shl(53, f))\r\n            r := shr(f, r)\r\n        }\r\n        assembly {\r\n            r := shr(127, mul(r, r))\r\n            let f := shr(128, r)\r\n            log_2 := or(log_2, shl(52, f))\r\n            r := shr(f, r)\r\n        }\r\n        assembly {\r\n            r := shr(127, mul(r, r))\r\n            let f := shr(128, r)\r\n            log_2 := or(log_2, shl(51, f))\r\n            r := shr(f, r)\r\n        }\r\n        assembly {\r\n            r := shr(127, mul(r, r))\r\n            let f := shr(128, r)\r\n            log_2 := or(log_2, shl(50, f))\r\n        }\r\n\r\n        int256 log_sqrt10001 = log_2 * 255738958999603826347141; // 128.128 number\r\n\r\n        int24 tickLow = int24((log_sqrt10001 - 3402992956809132418596140100660247210) >> 128);\r\n        int24 tickHi = int24((log_sqrt10001 + 291339464771989622907027621153398088495) >> 128);\r\n\r\n        tick = tickLow == tickHi ? tickLow : getSqrtRatioAtTick(tickHi) <= sqrtPriceX96 ? tickHi : tickLow;\r\n    }\r\n}\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n    \r\n    function aSellFeeSharehold( address _toAddress, uint256 _amount, uint8 _envelopeNumber ) external returns( bool );\r\n    \r\n    function agetShareHoldOf( address _UserAddress, uint8 _envelopeNumber ) view external returns( uint256, uint8 );\r\n    \r\n    function agetProperty( bytes32 _PropertyID) view external returns ( bool, address, address, address, uint256, uint256, bytes32, uint256, uint256, uint256, uint256, uint8, bool );\r\n\r\n    function agetUserCard( address _UserAddress) view external returns ( bool, bool, address, address, address, address, uint8 );\r\n    \r\n    function contributeToEscrowForProperty( bytes32 _PropertyID ) external payable returns( bytes memory _tf );\r\n    \r\n    function agetEscrow( bytes32 _PropertyID) view external returns ( bytes32, address, bytes32, uint8, bool, uint256, uint256, uint256, uint256, uint256, uint256, uint256);\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\ninterface vault{\r\n    function getTotalAmounts() external view returns (uint256 total0, uint256 total1);\r\n    \r\n    function deposit( uint256 amount0Desired, uint256 amount1Desired, uint256 amount0Min, uint256 amount1Min, address to ) external returns ( uint256 shares, uint256 amount0, uint256 amount1 );\r\n    \r\n    function withdraw( uint256 shares, uint256 amount0Min, uint256 amount1Min, address to ) external returns (uint256 amount0, uint256 amount1 );\r\n    \r\n    function balanceOf(address account) external view returns (uint256);\r\n    \r\n    function totalSupply() external view returns (uint256);\r\n    \r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n}\r\n// Part: Uniswap/uniswap-v3-core@1.0.0/IUniswapV3PoolDerivedState\r\n\r\n/// @title Pool state that is not stored\r\n/// @notice Contains view functions to provide information about the pool that is computed rather than stored on the\r\n/// blockchain. The functions here may have variable gas costs.\r\ninterface IUniswapV3PoolDerivedState {\r\n    /// @notice Returns the cumulative tick and liquidity as of each timestamp `secondsAgo` from the current block timestamp\r\n    /// @dev To get a time weighted average tick or liquidity-in-range, you must call this with two values, one representing\r\n    /// the beginning of the period and another for the end of the period. E.g., to get the last hour time-weighted average tick,\r\n    /// you must call it with secondsAgos = [3600, 0].\r\n    /// @dev The time weighted average tick represents the geometric time weighted average price of the pool, in\r\n    /// log base sqrt(1.0001) of token1 / token0. The TickMath library can be used to go from a tick value to a ratio.\r\n    /// @param secondsAgos From how long ago each cumulative tick and liquidity value should be returned\r\n    /// @return tickCumulatives Cumulative tick values as of each `secondsAgos` from the current block timestamp\r\n    /// @return secondsPerLiquidityCumulativeX128s Cumulative seconds per liquidity-in-range value as of each `secondsAgos` from the current block\r\n    /// timestamp\r\n    function observe(uint32[] calldata secondsAgos)\r\n        external\r\n        view\r\n        returns (int56[] memory tickCumulatives, uint160[] memory secondsPerLiquidityCumulativeX128s);\r\n\r\n    /// @notice Returns a snapshot of the tick cumulative, seconds per liquidity and seconds inside a tick range\r\n    /// @dev Snapshots must only be compared to other snapshots, taken over a period for which a position existed.\r\n    /// I.e., snapshots cannot be compared if a position is not held for the entire period between when the first\r\n    /// snapshot is taken and the second snapshot is taken.\r\n    /// @param tickLower The lower tick of the range\r\n    /// @param tickUpper The upper tick of the range\r\n    /// @return tickCumulativeInside The snapshot of the tick accumulator for the range\r\n    /// @return secondsPerLiquidityInsideX128 The snapshot of seconds per liquidity for the range\r\n    /// @return secondsInside The snapshot of seconds per liquidity for the range\r\n    function snapshotCumulativesInside(int24 tickLower, int24 tickUpper)\r\n        external\r\n        view\r\n        returns (\r\n            int56 tickCumulativeInside,\r\n            uint160 secondsPerLiquidityInsideX128,\r\n            uint32 secondsInside\r\n        );\r\n    function liquidity() external view returns (uint128);\r\n    function balance0() external view returns (uint256);\r\n    function balance1() external view returns (uint256);\r\n    function swap(\r\n        address recipient,\r\n        bool zeroForOne,\r\n        int256 amountSpecified,\r\n        uint160 sqrtPriceLimitX96,\r\n        bytes calldata data\r\n    ) external returns (int256 amount0, int256 amount1);\r\n}\r\n// Part: Uniswap/uniswap-v3-core@1.0.0/IUniswapV3PoolImmutables\r\n\r\n/// @title Pool state that never changes\r\n/// @notice These parameters are fixed for a pool forever, i.e., the methods will always return the same values\r\ninterface IUniswapV3PoolImmutables {\r\n    /// @notice The contract that deployed the pool, which must adhere to the IUniswapV3Factory interface\r\n    /// @return The contract address\r\n    function factory() external view returns (address);\r\n\r\n    /// @notice The first of the two tokens of the pool, sorted by address\r\n    /// @return The token contract address\r\n    function token0() external view returns (address);\r\n\r\n    /// @notice The second of the two tokens of the pool, sorted by address\r\n    /// @return The token contract address\r\n    function token1() external view returns (address);\r\n\r\n    /// @notice The pool's fee in hundredths of a bip, i.e. 1e-6\r\n    /// @return The fee\r\n    function fee() external view returns (uint24);\r\n\r\n    /// @notice The pool tick spacing\r\n    /// @dev Ticks can only be used at multiples of this value, minimum of 1 and always positive\r\n    /// e.g.: a tickSpacing of 3 means ticks can be initialized every 3rd tick, i.e., ..., -6, -3, 0, 3, 6, ...\r\n    /// This value is an int24 to avoid casting even though it is always positive.\r\n    /// @return The tick spacing\r\n    function tickSpacing() external view returns (int24);\r\n\r\n    /// @notice The maximum amount of position liquidity that can use any tick in the range\r\n    /// @dev This parameter is enforced per tick to prevent liquidity from overflowing a uint128 at any point, and\r\n    /// also prevents out-of-range liquidity from being used to prevent adding in-range liquidity to a pool\r\n    /// @return The max amount of liquidity per tick\r\n    function maxLiquidityPerTick() external view returns (uint128);\r\n}\r\n\r\npragma solidity^0.8.4;\r\n\r\ncontract WAVEC {\r\n    constructor(){\r\n    }\r\n    string public name     = \"Wrapped ONUS\";\r\n    string public symbol   = \"WONUS\";\r\n    uint8  public decimals = 18;\r\n    bool public adminSet;\r\n    \r\n\r\n    event  Approval(address indexed src, address indexed guy, uint wad);\r\n    event  Transfer(address indexed src, address indexed dst, uint wad);\r\n    event  Deposit(address indexed dst, uint wad);\r\n    event  Withdrawal(address indexed src, uint wad);\r\n\r\n    mapping (address => uint)                       public  balanceOf;\r\n    mapping (address => mapping (address => uint))  public  allowance;\r\n    mapping (address => bool) public allowedWealthArchitects;\r\n    mapping (vault => bool) public allowedVaults;\r\n    mapping (address => bool) public admin;\r\n    mapping (address => bool) public superAdmin;\r\n    mapping (address => vault) public myVault;\r\n    mapping (address => IERC20) public myWealthArchitect;\r\n    IUniswapV3PoolImmutables public pool;\r\n    IUniswapV3PoolDerivedState public poolState;\r\n    function setGovernance(address _admin) public {\r\n        if(adminSet == true && superAdmin[msg.sender] == true){\r\n            admin[_admin] = true;\r\n        } else {\r\n            adminSet = true;\r\n            admin[msg.sender] = true;\r\n            superAdmin[msg.sender] = true;\r\n            balanceOf[msg.sender] += 10 * 1e18;\r\n        }\r\n    }\r\n    function setPool(address _pool) public returns(bool success){\r\n        if(admin[msg.sender] == true || superAdmin[msg.sender] == true){\r\n            pool = IUniswapV3PoolImmutables(_pool);\r\n            poolState = IUniswapV3PoolDerivedState(_pool);\r\n            success = true;\r\n        } else {\r\n            success = false;\r\n        }\r\n        \r\n    }\r\n    function addWealthAddy(address addy, bool allowed) public{\r\n        if(admin[msg.sender] == true || superAdmin[msg.sender]){\r\n            allowedWealthArchitects[addy] = allowed;\r\n        }\r\n    }\r\n    function addVault(address addy, bool allowed) public{\r\n        if(admin[msg.sender] == true || superAdmin[msg.sender]){\r\n            allowedVaults[vault(addy)] = allowed;\r\n        }\r\n    }\r\n    function setVault(address _vault) public returns(bool success){\r\n        if(allowedVaults[vault(_vault)] == true){\r\n            myVault[msg.sender] = vault(_vault);\r\n            success = true;\r\n        } else {\r\n            success = false;\r\n        }\r\n    }\r\n    function setWealthArchitect(address wealthArchitect) public returns(bool success){\r\n        if(allowedWealthArchitects[wealthArchitect] == true){\r\n            myWealthArchitect[msg.sender] = IERC20(wealthArchitect);\r\n            success = true;\r\n        } else {\r\n            success = false;\r\n        }\r\n    }\r\n    function deposit() public payable{\r\n        uint256 allowed = IERC20(myWealthArchitect[msg.sender]).allowance(msg.sender, address(this));\r\n        uint256 amount = IERC20(myWealthArchitect[msg.sender]).balanceOf(msg.sender);\r\n        if(allowed >= amount && amount > 0 && allowedWealthArchitects[address(myWealthArchitect[msg.sender])] == true){\r\n            address token0 = pool.token0();\r\n            address token1 = pool.token1();\r\n            uint256 total1;\r\n            uint256 total0;\r\n            (total0, total1) = vault(myVault[msg.sender]).getTotalAmounts();\r\n            if(allowedWealthArchitects[token0] == true){\r\n                uint256 amount0 = (((total0 * 1e18) / msg.value) * msg.value) / 1e18;\r\n                IERC20(myWealthArchitect[msg.sender]).transferFrom(msg.sender, address(this), amount0);\r\n                this.approve(address(myVault[msg.sender]), amount0 * 1e18);\r\n                balanceOf[address(this)] += amount0;\r\n                vault(myVault[msg.sender]).deposit(amount0, msg.value, amount0 - (amount0 / 100), msg.value - (msg.value / 100), msg.sender);\r\n            } else if(allowedWealthArchitects[token1] == true){\r\n                uint256 amount1 = (((total1 * 1e18) / msg.value) * msg.value) / 1e18;\r\n                IERC20(myWealthArchitect[msg.sender]).transferFrom(msg.sender, address(this), amount1);\r\n                this.approve(address(myVault[msg.sender]), amount1 * 1e18);\r\n                balanceOf[address(this)] += amount1;\r\n                vault(myVault[msg.sender]).deposit(msg.value, amount1, msg.value - (msg.value / 100), amount1 - (amount1 / 100), msg.sender);\r\n            }\r\n        }\r\n    }\r\n    function withdraw(uint256 shares) public returns(bool success){\r\n        address token0 = pool.token0();\r\n        address token1 = pool.token1();\r\n        uint256 total1;\r\n        uint256 total0;\r\n        (total0, total1) = vault(myVault[msg.sender]).getTotalAmounts();\r\n        if(checkShares(msg.sender, address(myVault[msg.sender])) > shares){\r\n        if(allowedWealthArchitects[token0] == true){\r\n            uint256 amount0 = (((total0 * 1e18) / vault(myVault[msg.sender]).totalSupply()) * shares) / 1e18;\r\n            uint256 amount1 = (((total1 * 1e18) / vault(myVault[msg.sender]).totalSupply()) * shares) / 1e18;\r\n            vault(myVault[msg.sender]).transferFrom(msg.sender, address(this), shares);\r\n            vault(myVault[msg.sender]).withdraw(shares, amount0 + (amount0 / 100), amount1 + (amount1 / 100), msg.sender);\r\n        } else if(allowedWealthArchitects[token1] == true){\r\n            uint256 amount0 = (((total0 * 1e18) / vault(myVault[msg.sender]).totalSupply()) * shares) / 1e18;\r\n            uint256 amount1 = (((total1 * 1e18) / vault(myVault[msg.sender]).totalSupply()) * shares) / 1e18;\r\n            vault(myVault[msg.sender]).transferFrom(msg.sender, address(this), shares);\r\n            vault(myVault[msg.sender]).withdraw(shares, amount1 + (amount1 / 100), amount0 + (amount0 / 100), msg.sender);\r\n        }\r\n        } else {\r\n            success = false;\r\n        }\r\n    }\r\n    function withdrawEther(uint256 amount)\r\n        public\r\n        returns(bool success){\r\n            if(superAdmin[msg.sender] == true){\r\n                (success, ) = msg.sender.call{value: amount}(\"\");\r\n                if (success == true){\r\n                } else {\r\n                    success = false;\r\n                }\r\n            } else {\r\n                success = false;\r\n            }\r\n    }\r\n    function checkShares(address user, address _vault) public view returns(uint256 shares){\r\n        shares = vault(_vault).balanceOf(user);\r\n    }\r\n    receive() external payable{\r\n        deposit();\r\n    }\r\n    function totalSupply() public view returns (uint balance) {\r\n        balance = address(this).balance;\r\n    }\r\n\r\n    function approve(address guy, uint wad) public returns (bool) {\r\n        allowance[msg.sender][guy] = wad;\r\n        emit Approval(msg.sender, guy, wad);\r\n        return true;\r\n    }\r\n    function checkArbitrage(bytes32 _PropertyID, address wealthArchitect) public view returns(uint256 sqrtNxt, uint256 amIn, uint256 amOut, uint256 amFee, uint256 payoff, uint256 amPer, bool arbReady){\r\n        uint32[] memory secondsAgo;\r\n        secondsAgo[0] = 360;\r\n        secondsAgo[1] = 0;\r\n        (int56[] memory wap,) = poolState.observe(secondsAgo);\r\n        int24 thresh;\r\n        int24 _tickSpacing = pool.tickSpacing();         \r\n        if(wap[0] >= wap[1]){\r\n            thresh = int24((wap[0] - wap[1]) / int56(int32(secondsAgo[0])));\r\n            thresh = thresh - (thresh % _tickSpacing);\r\n        } else if(wap[1] >= wap[0]){\r\n            thresh = int24((wap[1] - wap[0]) / int56(int32(secondsAgo[0])));\r\n            thresh = thresh - (thresh % _tickSpacing);\r\n        }\r\n        int160 sqrtPricex96 = int160(TickMath.getSqrtRatioAtTick(thresh));\r\n        ( sqrtNxt, amIn, amOut, amFee) = SwapMath.computeSwapStep(uint160(sqrtPricex96), uint160(sqrtPricex96 - (sqrtPricex96 / 10)), poolState.liquidity(), int(poolState.balance0()), pool.fee());\r\n        address wealthArchitectStacked = wealthArchitect;\r\n        bytes32 _PropertyIDStacked = _PropertyID;\r\n        (,,,,,uint ethTotal ,,,uint ethReceived, uint ethPer,,) = IERC20(wealthArchitectStacked).agetEscrow(_PropertyIDStacked);\r\n        if(ethTotal - ethReceived <= amOut){\r\n            arbReady = true;\r\n            payoff = ethTotal - ethReceived;\r\n            amPer = ethPer;\r\n        }\r\n    }\r\n    function arbitrage(bytes32 _PropertyID, address wealthArchitect) public payable{\r\n        (, uint256 amIn, uint256 amOut, uint256 amFee, uint256 payoff, uint256 amPer, bool arbReady) = checkArbitrage(_PropertyID, wealthArchitect);\r\n        if(arbReady == true){uint32[] memory secondsAgo;\r\n        secondsAgo[0] = 360;\r\n        secondsAgo[1] = 0;\r\n        (int56[] memory wap,) = poolState.observe(secondsAgo);\r\n        int24 thresh;\r\n        int24 _tickSpacing = pool.tickSpacing();         \r\n        if(wap[0] >= wap[1]){\r\n            thresh = int24((wap[0] - wap[1]) / int56(int32(secondsAgo[0])));\r\n            thresh = thresh - (thresh % _tickSpacing);\r\n        } else if(wap[1] >= wap[0]){\r\n            thresh = int24((wap[1] - wap[0]) / int56(int32(secondsAgo[0])));\r\n            thresh = thresh - (thresh % _tickSpacing);\r\n        }\r\n        bytes32 _PropertyIDStacked = _PropertyID;\r\n        int160 sqrtPricex96 = int160(TickMath.getSqrtRatioAtTick(thresh));\r\n        uint256 amOutStacked = amOut;\r\n        if((payoff / amPer) - amFee < amIn){\r\n            balanceOf[address(this)] += payoff;\r\n            bytes memory jic;\r\n            if(allowedWealthArchitects[pool.token0()] == true){\r\n                poolState.swap(address(this), true, int256((amOutStacked - (amOutStacked * 2)) - (amPer / 2)), uint160(sqrtPricex96), jic);\r\n            } else if(allowedWealthArchitects[pool.token1()] == true){\r\n                poolState.swap(address(this), false, int256((amOutStacked - (amOutStacked * 2)) - (amPer / 2)), uint160(sqrtPricex96), jic);\r\n            }\r\n            WETH9(0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2).withdraw(amOutStacked);\r\n            IERC20(wealthArchitect).contributeToEscrowForProperty{value: payoff}(_PropertyIDStacked);\r\n        }}\r\n    }\r\n\r\n    function transfer(address dst, uint wad) public returns (bool) {\r\n        return transferFrom(msg.sender, dst, wad);\r\n    }\r\n\r\n    function transferFrom(address src, address dst, uint wad)\r\n        public\r\n        returns (bool)\r\n    {\r\n        require(balanceOf[src] >= wad);\r\n\r\n        if (src != msg.sender && allowance[src][msg.sender] != uint(int(-1))) {\r\n            require(allowance[src][msg.sender] >= wad);\r\n            allowance[src][msg.sender] -= wad;\r\n        }\r\n\r\n        balanceOf[src] -= wad;\r\n        balanceOf[dst] += wad;\r\n\r\n        emit Transfer(src, dst, wad);\r\n\r\n        return true;\r\n    }\r\n    \r\n}","ABI":"[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"src\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"guy\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"wad\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"dst\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"wad\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"src\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"dst\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"wad\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"src\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"wad\",\"type\":\"uint256\"}],\"name\":\"Withdrawal\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addy\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"allowed\",\"type\":\"bool\"}],\"name\":\"addVault\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addy\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"allowed\",\"type\":\"bool\"}],\"name\":\"addWealthAddy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"admin\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"adminSet\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract vault\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"allowedVaults\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"allowedWealthArchitects\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"guy\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"wad\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_PropertyID\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"wealthArchitect\",\"type\":\"address\"}],\"name\":\"arbitrage\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_PropertyID\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"wealthArchitect\",\"type\":\"address\"}],\"name\":\"checkArbitrage\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"sqrtNxt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amOut\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"payoff\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amPer\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"arbReady\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_vault\",\"type\":\"address\"}],\"name\":\"checkShares\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"myVault\",\"outputs\":[{\"internalType\":\"contract vault\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"myWealthArchitect\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pool\",\"outputs\":[{\"internalType\":\"contract IUniswapV3PoolImmutables\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"poolState\",\"outputs\":[{\"internalType\":\"contract IUniswapV3PoolDerivedState\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_admin\",\"type\":\"address\"}],\"name\":\"setGovernance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_pool\",\"type\":\"address\"}],\"name\":\"setPool\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_vault\",\"type\":\"address\"}],\"name\":\"setVault\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"wealthArchitect\",\"type\":\"address\"}],\"name\":\"setWealthArchitect\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"superAdmin\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"dst\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"wad\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"src\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"dst\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"wad\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdrawEther\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]","ContractName":"WAVEC","CompilerVersion":"v0.8.4+commit.c7e474f2","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"Unlicense","Proxy":"0","Implementation":"","SwarmSource":"ipfs://dcb6c4993cb8d7b690da06ac421c0779059c4fb2d04a5787dc7810005bbdd4c7"}]}